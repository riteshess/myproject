package scinvoiceapp.model.services;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.Arrays;
import java.util.Iterator;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeDef;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

import org.apache.myfaces.trinidad.context.RequestContext;

import scinvoiceapp.model.entities.MmScInvcItmEOImpl;
import scinvoiceapp.model.services.common.ScInvoiceAM;
import scinvoiceapp.model.views.AppTncVOImpl;
import scinvoiceapp.model.views.InvcSearchVOImpl;
import scinvoiceapp.model.views.LovOtherChargesVOImpl;
import scinvoiceapp.model.views.LovOtherChargesVORowImpl;
import scinvoiceapp.model.views.MmScInvcDtlVOImpl;
import scinvoiceapp.model.views.MmScInvcDtlVORowImpl;
import scinvoiceapp.model.views.MmScInvcItmVOImpl;
import scinvoiceapp.model.views.MmScInvcItmVORowImpl;
import scinvoiceapp.model.views.MmScInvcOcVOImpl;
import scinvoiceapp.model.views.MmScInvcOcVORowImpl;
import scinvoiceapp.model.views.MmScInvcPmtSchdlVOImpl;
import scinvoiceapp.model.views.MmScInvcPmtSchdlVORowImpl;
import scinvoiceapp.model.views.MmScInvcSrcVOImpl;
import scinvoiceapp.model.views.MmScInvcSrcVORowImpl;
import scinvoiceapp.model.views.MmScInvcTdsLinesVOImpl;
import scinvoiceapp.model.views.MmScInvcTdsVOImpl;
import scinvoiceapp.model.views.MmScInvcTdsVORowImpl;
import scinvoiceapp.model.views.MmScInvcTncVOImpl;
import scinvoiceapp.model.views.MmScInvcTncVORowImpl;
import scinvoiceapp.model.views.MmScInvcTrLinesVOImpl;
import scinvoiceapp.model.views.MmScInvcTrVOImpl;
import scinvoiceapp.model.views.MmScInvcTrVORowImpl;
import scinvoiceapp.model.views.MmScInvcVOImpl;
import scinvoiceapp.model.views.MmScInvcVORowImpl;
import scinvoiceapp.model.views.SeachDualVOImpl;
import scinvoiceapp.model.views.SeachDualVORowImpl;
import scinvoiceapp.model.views.ViewDocSourceVOImpl;
import scinvoiceapp.model.views.ViewDocSourceVORowImpl;
import scinvoiceapp.model.views.ViewIssueItemVOImpl;
import scinvoiceapp.model.views.ViewIssueItemVORowImpl;
import scinvoiceapp.model.views.ViewRcptItemVOImpl;
import scinvoiceapp.model.views.ViewRcptItemVORowImpl;
import scinvoiceapp.model.views.ViewValidOtherChargesVOImpl;
import scinvoiceapp.model.views.ViewValidOtherChargesVORowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 19 17:41:42 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ScInvoiceAMImpl extends ApplicationModuleImpl implements ScInvoiceAM {
    /**
     * This is the default constructor (do not remove).
     */
    public ScInvoiceAMImpl() {
    }

    private String cldId;
    private Integer slocId;
    private String hoOrgId;
    private String orgId;
    private Integer userId;

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public Integer getUserId() {
        return userId;
    }


    public void setCldId(String cldId) {
        this.cldId = cldId;
    }

    public String getCldId() {
        return cldId;
    }

    public void setSlocId(Integer slocId) {
        this.slocId = slocId;
    }

    public Integer getSlocId() {
        return slocId;
    }

    public void setHoOrgId(String hoOrgId) {
        this.hoOrgId = hoOrgId;
    }

    public String getHoOrgId() {
        return hoOrgId;
    }

    public void setOrgId(String orgId) {
        this.orgId = orgId;
    }

    public String getOrgId() {
        return orgId;
    }

    /**
     * Container's getter for SeachDual1.
     * @return SeachDual1
     */
    public SeachDualVOImpl getSeachDual1() {
        return (SeachDualVOImpl) findViewObject("SeachDual1");
    }

    /**
     * Container's getter for InvcSearch1.
     * @return InvcSearch1
     */
    public InvcSearchVOImpl getInvcSearch1() {
        return (InvcSearchVOImpl) findViewObject("InvcSearch1");
    }

    /**
     * Container's getter for MmScInvc1.
     * @return MmScInvc1
     */
    public MmScInvcVOImpl getMmScInvc1() {
        return (MmScInvcVOImpl) findViewObject("MmScInvc1");
    }


    /**
     * Container's getter for MmScInvcDtl1.
     * @return MmScInvcDtl1
     */
    public MmScInvcDtlVOImpl getMmScInvcDtl1() {
        return (MmScInvcDtlVOImpl) findViewObject("MmScInvcDtl1");
    }

    /**
     * Container's getter for InvcToDtlVL1.
     * @return InvcToDtlVL1
     */
    public ViewLinkImpl getInvcToDtlVL1() {
        return (ViewLinkImpl) findViewLink("InvcToDtlVL1");
    }

    /**
     * Container's getter for ViewDocSource1.
     * @return ViewDocSource1
     */
    public ViewDocSourceVOImpl getViewDocSource1() {
        return (ViewDocSourceVOImpl) findViewObject("ViewDocSource1");
    }

    /**
     * Container's getter for MmScInvcSrc1.
     * @return MmScInvcSrc1
     */
    public MmScInvcSrcVOImpl getMmScInvcSrc1() {
        return (MmScInvcSrcVOImpl) findViewObject("MmScInvcSrc1");
    }

    /**
     * Container's getter for FkMmScInvcSrcVL1.
     * @return FkMmScInvcSrcVL1
     */
    public ViewLinkImpl getFkMmScInvcSrcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScInvcSrcVL1");
    }

    /**
     * Container's getter for ViewRcptItem1.
     * @return ViewRcptItem1
     */
    public ViewRcptItemVOImpl getViewRcptItem1() {
        return (ViewRcptItemVOImpl) findViewObject("ViewRcptItem1");
    }

    /**
     * Container's getter for ViewIssueItem1.
     * @return ViewIssueItem1
     */
    public ViewIssueItemVOImpl getViewIssueItem1() {
        return (ViewIssueItemVOImpl) findViewObject("ViewIssueItem1");
    }

    /**
     * Container's getter for MmScInvcItm1.
     * @return MmScInvcItm1
     */
    public MmScInvcItmVOImpl getMmScInvcItm1() {
        return (MmScInvcItmVOImpl) findViewObject("MmScInvcItm1");
    }

    /**
     * Container's getter for FkMmScInvcItmVL1.
     * @return FkMmScInvcItmVL1
     */
    public ViewLinkImpl getFkMmScInvcItmVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScInvcItmVL1");
    }


    /**
     * Container's getter for MmScInvcOc1.
     * @return MmScInvcOc1
     */
    public MmScInvcOcVOImpl getMmScInvcOc1() {
        return (MmScInvcOcVOImpl) findViewObject("MmScInvcOc1");
    }

    /**
     * Container's getter for FkMmScInvcOcVL1.
     * @return FkMmScInvcOcVL1
     */
    public ViewLinkImpl getFkMmScInvcOcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScInvcOcVL1");
    }

    /**
     * Container's getter for MmScInvcTr1.
     * @return MmScInvcTr1
     */
    public MmScInvcTrVOImpl getMmScInvcTr1() {
        return (MmScInvcTrVOImpl) findViewObject("MmScInvcTr1");
    }

    /**
     * Container's getter for FkMmScInvcTrVL1.
     * @return FkMmScInvcTrVL1
     */
    public ViewLinkImpl getFkMmScInvcTrVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScInvcTrVL1");
    }

    /**
     * Container's getter for MmScInvcTrLines1.
     * @return MmScInvcTrLines1
     */
    public MmScInvcTrLinesVOImpl getMmScInvcTrLines1() {
        return (MmScInvcTrLinesVOImpl) findViewObject("MmScInvcTrLines1");
    }

    /**
     * Container's getter for FkMmScInvcTrLinesVL1.
     * @return FkMmScInvcTrLinesVL1
     */
    public ViewLinkImpl getFkMmScInvcTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScInvcTrLinesVL1");
    }


    /**
     * Container's getter for ViewValidOtherCharges1.
     * @return ViewValidOtherCharges1
     */
    public ViewValidOtherChargesVOImpl getViewValidOtherCharges1() {
        return (ViewValidOtherChargesVOImpl) findViewObject("ViewValidOtherCharges1");
    }

    /**
     * Container's getter for LovOtherCharges1.
     * @return LovOtherCharges1
     */
    public LovOtherChargesVOImpl getLovOtherCharges1() {
        return (LovOtherChargesVOImpl) findViewObject("LovOtherCharges1");
    }

    /**
     * Container's getter for MmScInvcTr2.
     * @return MmScInvcTr2
     */
    public MmScInvcTrVOImpl getMmScInvcTr2() {
        return (MmScInvcTrVOImpl) findViewObject("MmScInvcTr2");
    }

    /**
     * Container's getter for ScoDocToTrVL1.
     * @return ScoDocToTrVL1
     */
    public ViewLinkImpl getScoDocToTrVL1() {
        return (ViewLinkImpl) findViewLink("ScoDocToTrVL1");
    }

    /**
     * Container's getter for MmScInvcTds1.
     * @return MmScInvcTds1
     */
    public MmScInvcTdsVOImpl getMmScInvcTds1() {
        return (MmScInvcTdsVOImpl) findViewObject("MmScInvcTds1");
    }

    /**
     * Container's getter for ItemTdsVL1.
     * @return ItemTdsVL1
     */
    public ViewLinkImpl getItemTdsVL1() {
        return (ViewLinkImpl) findViewLink("ItemTdsVL1");
    }


    /**
     * Container's getter for MmScInvcTdsLines1.
     * @return MmScInvcTdsLines1
     */
    public MmScInvcTdsLinesVOImpl getMmScInvcTdsLines1() {
        return (MmScInvcTdsLinesVOImpl) findViewObject("MmScInvcTdsLines1");
    }

    /**
     * Container's getter for TdsToTdsLineVL1.
     * @return TdsToTdsLineVL1
     */
    public ViewLinkImpl getTdsToTdsLineVL1() {
        return (ViewLinkImpl) findViewLink("TdsToTdsLineVL1");
    }

    /**
     * Container's getter for MmScInvcTds2.
     * @return MmScInvcTds2
     */
    public MmScInvcTdsVOImpl getMmScInvcTds2() {
        return (MmScInvcTdsVOImpl) findViewObject("MmScInvcTds2");
    }

    /**
     * Container's getter for SrcToTdsVL1.
     * @return SrcToTdsVL1
     */
    public ViewLinkImpl getSrcToTdsVL1() {
        return (ViewLinkImpl) findViewLink("SrcToTdsVL1");
    }

    public void initAplication() {
        setGlabalVariable();
        applyGlobalFilter();
    }

    private void setGlabalVariable() {
        this.setCldId(EbizParams.GLBL_APP_CLD_ID());
        this.setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        this.setHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        this.setOrgId(EbizParams.GLBL_APP_USR_ORG());
        this.setUserId(EbizParams.GLBL_APP_USR());
    }

    private void applyGlobalFilter() {

        this.getInvcSearch1().setBindCldId(EbizParams.GLBL_APP_CLD_ID());
        this.getInvcSearch1().setBindSlocId(EbizParams.GLBL_APP_SERV_LOC());
        this.getInvcSearch1().setBindOrgId(EbizParams.GLBL_APP_USR_ORG());
        this.getInvcSearch1().setBindInvNo("-1");
        this.getInvcSearch1().executeQuery();
        
        this.getAppTncVO1().setBindCldId(this.getCldId());
        this.getAppTncVO1().setBindSlocId(this.getSlocId());
        this.getAppTncVO1().setBindOrgId(this.getOrgId());
        this.getAppTncVO1().executeQuery();
    }

    public void searchInvoice() {
        //    String eoName=((SeachDualVORowImpl)this.getSeachDual1()).getCurrentRow()

        String invNo = ((SeachDualVORowImpl) this.getSeachDual1().getCurrentRow()).getInvoiceNo();
        Integer wfMode = ((SeachDualVORowImpl) this.getSeachDual1().getCurrentRow()).getStatus();

        java.sql.Timestamp stDt = ((SeachDualVORowImpl) this.getSeachDual1().getCurrentRow()).getStartDate();
        java.sql.Timestamp endDt = ((SeachDualVORowImpl) this.getSeachDual1().getCurrentRow()).getEndDate();

        Integer docType = ((SeachDualVORowImpl) this.getSeachDual1().getCurrentRow()).getDocType();
        Integer eoId = ((SeachDualVORowImpl) this.getSeachDual1().getCurrentRow()).getTransEoId();


        this.getInvcSearch1().setBindInvNo(invNo);
        this.getInvcSearch1().setBindMode(wfMode);
        this.getInvcSearch1().setBindStrtDt(stDt);
        this.getInvcSearch1().setBindEndDt(endDt);

        this.getInvcSearch1().setBindType(docType);

        this.getInvcSearch1().setBindEoId(eoId);
        this.getInvcSearch1().executeQuery();


    }

    /**
     * USed to reset the search
     * */

    public void resetInvoice() {

        this.getSeachDual1().executeQuery();

        this.searchInvoice();

    }

    /**
     * Methos to call database function
     * (Add code for enabling and disabling the AM if needed.So that functions can be performed in sme session)
     *
     * */

    public Object callFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        Object o = null;
        try {
            o = ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
        } catch (Exception e) {
            this.showError(e);

        }
        return o;
    }


    /**
     * This function is used to show Error Message from function
     *
     ***/


    public void showError(Exception e) {

        FacesContext.getCurrentInstance().addMessage(null,
                                                     new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error",
                                                                      e.getMessage()));
    }


    /**
     * This code will be used to create hexa decimal code for current document
     * */
    public String getDocId() {
        String docId = null;
        try {
            docId = this.callFunction(Types.VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                      EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                      EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), 36504, 0
            }).toString();

        } catch (Exception e) {
            this.showError(e);
        }

        return docId;
    }

    /**
     * This function is used to get docDispId
     * **/

    public String getScRcptDispId(Integer fyId, Integer type) {
        String dispId = null;
        try {
            dispId = this.callFunction(Types.VARCHAR, "MM.FN_MM_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                       this.getSlocId(), this.getCldId(), this.getOrgId(), 36504, null, type,
                                       "MM$SC$INVC", fyId, 0
            }).toString();
        } catch (Exception e) {
            this.showError(e);
        }
        return dispId;
    }

    /****
     *
     * To get FyId from function
     *
     * */


    public Integer getFyId() {
        Integer fyId = 0;
        try {
            fyId = (Integer) this.callFunction(Types.INTEGER, "APP.FN_GET_FY_ID(?,?,?,?)", new Object[] {
                                               this.getCldId(), this.getOrgId(),
                                               new java.sql.Timestamp(System.currentTimeMillis()), "FY"
            });
        } catch (Exception e) {
            this.showError(e);
        }
        return fyId;
    }
    
    public Integer getDefualtScType() {
        Integer retVal = 0;
        try {
            retVal = Integer.parseInt(this.callFunction(Types.VARCHAR, "MM.fn_sc_chk_org_prf(?,?,?,?)", new Object[] {
                                                              this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                              "DEF_SC_TYPE"
            }).toString());
     
            System.out.println("Value of Defualt Subcontracting Type --- " + retVal);
     
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION fn_sc_chk_org_prf :" + e.getMessage());
        }
        return retVal;
    }

    public void createDocument() {

        this.filterDoc(null);

        MmScInvcVORowImpl row = (MmScInvcVORowImpl) this.getMmScInvc1().createRow();

        String docId = this.getDocId();
        Integer fyId = this.getFyId();

        row.setAuthStat("N");
        row.setCldId(this.getCldId());
        row.setDocDt(new java.sql.Timestamp(System.currentTimeMillis()));
        row.setDocId(docId);
        row.setFyId(fyId);
        row.setSlocId(slocId);
        row.setOrgId(orgId);
        row.setInvDt(new java.sql.Timestamp(System.currentTimeMillis()));
        row.setUsrIdCreate(userId);
        row.setUsrIdCreateDt(new java.sql.Timestamp(System.currentTimeMillis()));
        row.setTotAmtBs(StaticValue.NUMBER_ZERO);
        row.setTotAmtSp(StaticValue.NUMBER_ZERO);
        row.setInvMode(313);
        
        row.setInvType(this.getDefualtScType());

        this.getMmScInvc1().insertRow(row);

        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("DOC_ID", docId);

    }

    public void updateDocDisp(Integer type) {
        MmScInvcVORowImpl row = (MmScInvcVORowImpl) this.getMmScInvc1().getCurrentRow();
        if(row.getInvNo()==null||row.getInvNo().trim().length()==0){    
            String dispId = this.getScRcptDispId(row.getFyId(), type);
            row.setInvNo(dispId);
        }  
    
    }


    public void filterDoc(String docId) {
        docId = docId == null ? null : docId.trim();
        this.getMmScInvc1().setBindCldId(EbizParams.GLBL_APP_CLD_ID());
        this.getMmScInvc1().setBindOrgId(EbizParams.GLBL_APP_USR_ORG());
        this.getMmScInvc1().setBindSlocId(EbizParams.GLBL_APP_SERV_LOC());
        this.getMmScInvc1().setBindDocId(docId);
        this.getMmScInvc1().executeQuery();
        // System.out.println("Row Count is "+this.getMmScInvc1().getRowCount());
    }


    /***
     *
     * Add Selected Document into detail table
     * */
    public void addDocDetail() {
        MmScInvcVORowImpl headRow = (MmScInvcVORowImpl) this.getMmScInvc1().getCurrentRow();

        // validate Is coa is created for the Entity
        Integer coaId = headRow.getCoaId();
        if (coaId < 1) {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR, "Invalid Entry",
                                                                          "Coa is not defined for selected Entity.You can not proceed without creating coa"));
            return;
        }
        // validate duplicate Entry

        Row[] rw = this.getMmScInvcDtl1().getFilteredRows("DocIdSrc", headRow.getDocIdSrc());
        if (rw.length > 0) {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR, "Duplicate",
                                                                          "This Record already exist"));
            return;
        }


        MmScInvcDtlVORowImpl curRow = (MmScInvcDtlVORowImpl) this.getMmScInvcDtl1().createRow();
        curRow.setDocIdSrc(headRow.getDocIdSrc());
        curRow.setDocDtSrc(headRow.getDocDtSrc());
        this.getMmScInvcDtl1().insertRow(curRow);

        this.addDocDetailSrc(headRow.getDocIdSrc());

        headRow.setDocNo(null);

    }

    /***
     *
     * Add Selected Document into Source table
     * */

    public void addDocDetailSrc(String docIdDtl) {

        System.out.println("setting value");

        // validating document d


        // String docId=this.getMmScInvcDtl1().getCurrentRow().getAttribute("DocIdSrc").toString();
        Integer invType = (Integer) this.getMmScInvc1().getCurrentRow().getAttribute("InvType");

        //   System.out.println("Parameter is "+docIdSrc + " current value is "+docId);

        ViewDocSourceVOImpl vo = this.getViewDocSource1();
        vo.setBindCldId(this.getCldId());
        vo.setBindSlocId(this.getSlocId());
        vo.setBindOrgId(this.getOrgId());
        vo.setBindDocId(docIdDtl);
        vo.setBindType(invType);
        vo.executeQuery();

        if(vo.getRowCount()==0){
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"No Data Found","There is not any sco remaining in seleted doc."));
               
        }
      
      
        RowSetIterator iter = vo.createRowSetIterator(null);
        MmScInvcSrcVORowImpl curRow = null;
        ViewDocSourceVORowImpl row = null;
        while (iter.hasNext()) {
            row = (ViewDocSourceVORowImpl) iter.next();

            curRow = (MmScInvcSrcVORowImpl) this.getMmScInvcSrc1().createRow();
            curRow.setDocIdSco(row.getDocIdSrc());
            curRow.setDlvSchdlNo(row.getDlvSchdlNo());

            this.getMmScInvcSrc1().insertRow(curRow);

            this.addDetailItem(docIdDtl, row.getDocIdSrc(), row.getDlvSchdlNo());

            //  Only for material receipt
            if (invType == 827) {
                this.addOtherChargesFromPre(docIdDtl, row.getDocIdSrc());
            }
        }


    }

    /***
     *
     * Add Selected Document into Item table
     * */

    public void addDetailItem(String docIdSrc, String scoId, Integer dlvNo) {
        //        //this will be Source Id
        //        String docId=this.getMmScInvcDtl1().getCurrentRow().getAttribute("DocIdSrc").toString();
        //
        //        // this will be sco id
        //        String docIdSrc=this.getMmScInvcDtl1().getCurrentRow().getAttribute("DocIdSco").toString();
        //
        //
        //        System.out.println("Values for id is "+scoId +"  And  current row is "+docIdSrc);

        Integer invType = (Integer) this.getMmScInvc1().getCurrentRow().getAttribute("InvType");
        Number conF = (Number) this.getMmScInvc1().getCurrentRow().getAttribute("CurrConvFctr");
        
        String ccId=null;
        Object cc=this.callFunction(Types.VARCHAR, "app.get_txn_id_cc(?,?,?,?,?,?,?)", 
                                           new Object[]{this.getCldId(),this.getSlocId(),this.getOrgId(),this.getUserId(),36504,8490,0});
        ccId= cc==null?null: cc.toString();

        
        if (invType.equals(new Integer(826))) {
            // Code for ScIsuee
            ViewIssueItemVOImpl isuItem = this.getViewIssueItem1();
            isuItem.setBindCldId(this.getCldId());
            isuItem.setBindSlocId(this.getSlocId());
            isuItem.setBindOrgId(this.getOrgId());
            isuItem.setBindDocId(docIdSrc);
            isuItem.setBindDocIdSrc(scoId);
            isuItem.setBindDlvNo(dlvNo);
            isuItem.executeQuery();

            RowSetIterator iter = this.getViewIssueItem1().createRowSetIterator(null);
            ViewIssueItemVORowImpl row = null;
            MmScInvcItmVORowImpl curRow = null;
            Number qty = null;
            Number price = null;
            Number priceBs = null;

            while (iter.hasNext()) {

                row = (ViewIssueItemVORowImpl) iter.next();

                qty = row.getIssuQty() == null ? StaticValue.NUMBER_ZERO : row.getIssuQty();
                price = row.getItmPrice() == null ? StaticValue.NUMBER_ZERO : row.getItmPrice();

                priceBs = price.multiply(conF);

                curRow = (MmScInvcItmVORowImpl) this.getMmScInvcItm1().createRow();
                curRow.setItmId(row.getItmId());
                curRow.setItmUom(row.getItmUom());
                curRow.setItmUomBs(row.getItmUomBs());
                curRow.setUomConvFctr(row.getUomConvFctr());
                curRow.setFinalRcptQty(qty);
                //curRow.setFinalRcptQty(StaticValue.NUMBER_ZERO);
                curRow.setFinalRcptQtyBs(row.getIssuQtyBs());
                curRow.setItmPrice(price);
                curRow.setItmPriceBs(priceBs);

                curRow.setTaxableAmtSp(qty.multiply(price));
                curRow.setTaxableAmtBs(qty.multiply(priceBs));

                curRow.setItmAmtBs(qty.multiply(priceBs));
                curRow.setItmAmtSp(qty.multiply(price));
               
               
                curRow.setOpId(row.getOpId());
                curRow.setOpSrNo(row.getOpSrNo());
                curRow.setCcId(ccId);
               
                this.getMmScInvcItm1().insertRow(curRow);


                // Insert tax rule and tax Line
                curRow.setTaxRule(row.getTaxRuleId());
                Number taxAmt = StaticValue.NUMBER_ZERO;
                if (row.getTaxRuleId() != null)
                    taxAmt =
                        this.addTr(docIdSrc, scoId, row.getItmId(), row.getItmUom(), qty.multiply(price),
                                   row.getTaxRuleId(), curRow.getDlvSchdlNo(), conF);

                //insert tax amount
                curRow.setTotTaxAmtBs(taxAmt.multiply(conF));
                curRow.setTotTaxAmtSp(taxAmt);


            }
        } else {
            //Code for ScRcpt
            ViewRcptItemVOImpl rcptItem = this.getViewRcptItem1();
            rcptItem.setBindCldId(this.getCldId());
            rcptItem.setBindSlocId(this.getSlocId());
            rcptItem.setBindOrgId(this.getOrgId());
            rcptItem.setBindDocId(docIdSrc);
            rcptItem.setBindDocIdSrc(scoId);
            rcptItem.setBindDlvNo(dlvNo);
            rcptItem.executeQuery();

            RowSetIterator iter = rcptItem.createRowSetIterator(null); /*  */
            ViewRcptItemVORowImpl row = null;
            MmScInvcItmVORowImpl curRow = null;
            Number qty = null;
            Number price = null;
            Number priceBs = null;
            while (iter.hasNext()) {

                row = (ViewRcptItemVORowImpl) iter.next();

                qty = row.getFinalRcptQty() == null ? StaticValue.NUMBER_ZERO : row.getFinalRcptQty();
                price = row.getPurPrice() == null ? StaticValue.NUMBER_ZERO : row.getPurPrice();
                priceBs = price.multiply(conF);

                curRow = (MmScInvcItmVORowImpl) this.getMmScInvcItm1().createRow();
                curRow.setItmId(row.getItmId());
                curRow.setItmUom(row.getItmUom());
                curRow.setItmUomBs(row.getItmUomBs());
                curRow.setUomConvFctr(row.getUomConvFctr());
                curRow.setFinalRcptQty(row.getFinalRcptQty());
                //curRow.setFinalRcptQty(StaticValue.NUMBER_ZERO);
                curRow.setFinalRcptQtyBs(row.getFinalRcptQtyBs());
                curRow.setTaxableAmtBs(qty.multiply(priceBs));
                curRow.setTaxableAmtSp(qty.multiply(price));

                curRow.setItmPrice(row.getPurPrice());
                curRow.setItmPriceBs(row.getPurPriceBs());
                curRow.setItmAmtBs(qty.multiply(priceBs));
                curRow.setItmAmtSp(qty.multiply(price));
                
                
                curRow.setOpId(row.getOpId());
                curRow.setOpSrNo(row.getOpSrNo());
                curRow.setCcId(ccId);
                
                this.getMmScInvcItm1().insertRow(curRow);


                //                System.out.println("Sch No is tax is "+curRow.getDlvSchdlNo());
                //                System.out.println("Tax Rile Id is "+row.getTaxRuleId());


                // Insert tax rule and tax Line
                
                curRow.setTaxRule(row.getTaxRuleId());
                Number taxAmt = StaticValue.NUMBER_ZERO;
                if (row.getTaxRuleId() != null)
                    taxAmt =
                        this.addTr(docIdSrc, scoId, row.getItmId(), row.getItmUom(), row.getTaxableAmtSp(),
                                   row.getTaxRuleId(), curRow.getDlvSchdlNo(), conF);

                //insert tax amount
                curRow.setTotTaxAmtBs(taxAmt.multiply(conF));
                curRow.setTotTaxAmtSp(taxAmt);

            }
        }
    }


    public void addOtherChargesFromPre(String docIdSrc, String scoId) {
        ViewValidOtherChargesVOImpl vo = this.getViewValidOtherCharges1();
        vo.setBindCldId(this.getCldId());
        vo.setBindSlocId(this.getSlocId());
        vo.setBindHoOrgId(this.getHoOrgId());
        vo.setBindOrgId(this.getOrgId());
        vo.setBindDocId(docIdSrc);
        vo.setBindDocIdSrc(scoId);
        vo.setBindGlblDocId(36504);
        vo.setBindGlblDocTypeId(827);
        vo.executeQuery();

        RowSetIterator iter = vo.createRowSetIterator(null);
        ViewValidOtherChargesVORowImpl row = null;
        MmScInvcOcVORowImpl curRow = null;

        while (iter.hasNext()) {
            row = (ViewValidOtherChargesVORowImpl) iter.next();
            curRow = (MmScInvcOcVORowImpl) this.getMmScInvcOc1().createRow();

            curRow.setCoaId(row.getCoaId());
            curRow.setCurrConvFctrOc(row.getCurrConvFctrOc());
            curRow.setOcDesc(row.getOcDesc() == null ? null : row.getOcDesc().toString());
            curRow.setOcId(row.getOcId());
            curRow.setCurrIdSpOc(row.getCurrIdSpOc());
            curRow.setOcAmtBs(row.getOcAmtBs());
            curRow.setOcAmtSp(row.getOcAmtSp());
            curRow.setOcAmtSpOc(row.getOcAmtSpOc());
        }


    }


    /**
     *
     *Next functions has Other charges related function
     *
     *
     **/

    public void addOtherCharge() {
        LovOtherChargesVORowImpl ocRow = (LovOtherChargesVORowImpl) this.getLovOtherCharges1().getCurrentRow();

        MmScInvcOcVOImpl oc = this.getMmScInvcOc1();

        String ocId = ocRow.getOcId();
        Integer coaId = ocRow.getCoaId();
        Integer ocCat = ocRow.getOcCat();
        String ocNm = ocRow.getOcNm();


        // Validate Oc

        RowQualifier rq = new RowQualifier(this.getMmScInvcOc1());
        rq.setWhereClause("OcId = '" + ocId + "'");

        Row[] rw = this.getMmScInvcOc1().getFilteredRows(rq);

        if (rw.length > 0) {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error",
                                                                          "This Other charge already exist"));
        } else {
            MmScInvcOcVORowImpl newRow = (MmScInvcOcVORowImpl) this.getMmScInvcOc1().createRow();

            newRow.setOcId(ocId);
            newRow.setCoaId(coaId);
            newRow.setOcDesc(ocCat.toString());
            newRow.setOcAmtBs(StaticValue.NUMBER_ZERO);
            newRow.setOcAmtSp(StaticValue.NUMBER_ZERO);
            newRow.setOcAmtSpOc(StaticValue.NUMBER_ZERO);
            this.getMmScInvcOc1().insertRow(newRow);
        }
    }

    public void deleteOtherCharge() {
        LovOtherChargesVORowImpl ocRow = (LovOtherChargesVORowImpl) this.getLovOtherCharges1().getCurrentRow();

        MmScInvcOcVOImpl oc = this.getMmScInvcOc1();

        String ocId = ocRow.getOcId();
        Integer coaId = ocRow.getCoaId();
        Integer ocCat = ocRow.getOcCat();


        // Validate Oc

        RowQualifier rq = new RowQualifier(this.getMmScInvcOc1());
        rq.setWhereClause("OcId = '" + ocId + "'");

        Row[] rw = this.getMmScInvcOc1().getFilteredRows(rq);

        if (rw.length > 0) {
            rw[0].remove();
        } else {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error",
                                                                          "This Other charge does not exist"));
        }
    }

    public void filterOC() {
        this.getLovOtherCharges1().setBindCldId(this.getCldId());
        this.getLovOtherCharges1().setBindSlocId(this.getSlocId());
        this.getLovOtherCharges1().setBindHoOrgId(this.getHoOrgId());
        this.getLovOtherCharges1().setBindDocId(36504);
        this.getLovOtherCharges1().setBindDocTypeId(826);
        this.getLovOtherCharges1().executeQuery();
    }


    /***
     * Next function is used to insert tr and tr lines
     *
     * */

    public void deleteTr(String mode, String itemId) {


        MmScInvcTrVOImpl trVo = this.getMmScInvcTr2();

        if (mode.equalsIgnoreCase("A")) {

            RowSetIterator iter = trVo.createRowSetIterator(null);
            // System.out.println("Row count is "+this.getMmScInvcTr2().getRowCount());
            while (iter.hasNext()) {
                iter.next().remove();
            }
            //  System.out.println("Row count is "+this.getMmScInvcTr2().getRowCount());
        } else {

            Row[] rw = trVo.getFilteredRows("ItmId", itemId);

            if (rw.length > 0) {
                rw[0].remove();

            }

        }

    }

    public Number addTr(String docIdSrc, String scoId, String itmId, String uom, Number amt, Integer taxRule,
                        Integer delNo, Number conF) {


        String docId = this.getMmScInvc1().getCurrentRow().getAttribute("DocId").toString();
        Number taxAmt = StaticValue.NUMBER_ZERO;

        if (taxRule != null) {
            MmScInvcTrVORowImpl curRow = (MmScInvcTrVORowImpl) this.getMmScInvcTr1().createRow();
            curRow.setDocIdSrc(docIdSrc);
            curRow.setDocIdSco(scoId);
            curRow.setDlvSchdlNo(delNo);
            curRow.setItmId(itmId);
            curRow.setItmUom(uom);
            curRow.setTaxRuleId(taxRule);
            curRow.setTaxRuleFlg("N");
            curRow.setTaxExmptFlg("N");

            curRow.setTaxableAmtSp(amt);
            curRow.setTaxableAmtBs(amt.multiply(conF));
            

            this.getMmScInvcTr1().insertRow(curRow);

            taxAmt = this.callTrLine(docId, docIdSrc, scoId, itmId, delNo, taxRule, amt, amt, conF, uom, "N", "N", "N");

            taxAmt = taxAmt == null ? StaticValue.NUMBER_ZERO : taxAmt;


            // UPDATE TAX AMOUNT
            curRow.setTaxAmt(taxAmt);
            curRow.setTaxAmtBs(taxAmt.multiply(conF));
        } else {
            taxAmt = this.callTrLine(docId, docIdSrc, scoId, itmId, delNo, taxRule, amt, amt, conF, uom, "N", "N", "N");
        }
        return taxAmt;
    }


    /**
     * This function is used to call for insert in TR Line
     * */
    public Number callTrLine(String docId, String docIdSrc, String scoId, String itemId, Integer delNo, Integer taxRule,
                             Number taxAmt, Number assAmt, Number conF, String uom, String xmpt, String direct,
                             String taxRuleFlg) {
        Number amt = StaticValue.NUMBER_ZERO;
        String cldId = this.getCldId();
        Integer slocId = this.getSlocId();
        String hoOrgId = this.getHoOrgId();
        String orgId = this.getOrgId();

        //        0000 01 01 0000.01.01.0001.09Um.00.1UHz0EASHT 0000.01.01.005G.09Uk.00.1UHz0CleU6 0000.01.01.005G.09Uj.00.1UHz0C5gXu null FG.0000009 35 1 20.4 86.643 N N null
//        System.out.println("Parameters are " + cldId + " " + hoOrgId + " " + orgId + " " + docId + " " + docIdSrc +
//                           " " + scoId + " " + delNo + " " + itemId + " " + taxRule + " " + userId + " " + taxAmt +
//                           " " + conF + " " + xmpt + " " + direct + " " + delNo + " " + uom);

        BigDecimal result = new BigDecimal(0);
        result =
            (BigDecimal) this.callFunction(Types.NUMERIC, "mm.INS_SC_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           slocId, cldId, hoOrgId, orgId, docId, docIdSrc, scoId, delNo, itemId, uom,
                                           taxRule, taxAmt, assAmt, taxRuleFlg, conF, xmpt, direct
        });


        try {
            if (result == null)
                result = new BigDecimal(0);
            amt = new Number(result.toString());
        } catch (Exception e) {
            System.out.println("Error in conversion " + e.getStackTrace());
        }
        System.out.println("Amount is " + amt);
        this.getMmScInvcTrLines1().executeQuery();

        return amt;
    }


    /***
     *
     * NExt functions will be used to insert  TDS
     *
     * **/

    //  This will delete TDS Lines in
    public Number callTdsLine(String docId, String docIdSrc, String scoId, Integer delNo, String itemId,
                              Integer tdsRule, Number tdsAmt, Number conF, String uom, String tdsFlg, String xmpt,
                              Number assAmt) {
        Number amt = StaticValue.NUMBER_ZERO;
        String cldId = this.getCldId();
        Integer slocId = this.getSlocId();
        String hoOrgId = this.getHoOrgId();
        String orgId = this.getOrgId();
        Integer userId = this.getUserId();

        // System.out.println("Parameters are "+ cldId+" "+ hoOrgId+" "+ orgId+" "+ docId+" "+itemId+" "+taxRule+" "+userId+" "+taxAmt+" "+absAmt+" "+conF+" "+whId+" "+docSrc+" "+delSch+" "+uom);
        BigDecimal result = new BigDecimal(0);
        result =
            (BigDecimal) this.callFunction(Types.NUMERIC, "mm.INS_SC_INV_TDS_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           slocId, cldId, hoOrgId, orgId, docId, docIdSrc, scoId, delNo, itemId, uom,
                                           tdsRule, tdsAmt, tdsFlg, conF, xmpt, assAmt
        });

        try {
            if (result == null)
                result = new BigDecimal(0);
            amt = new Number(result.toString());


        } catch (Exception e) {
            amt = StaticValue.NUMBER_ZERO;
            e.printStackTrace();
        }

        System.out.println("Amount is " + amt);
        this.getMmScInvcTdsLines1().executeQuery();

        return amt;
    }

    public void deleteTds(String mode, String itemId) {

        String docId = this.getMmScInvc1().getCurrentRow().getAttribute("DocId").toString();

        MmScInvcTdsVOImpl tdsVo = this.getMmScInvcTds2();

        if (mode.equalsIgnoreCase("A")) {

            RowSetIterator iter = tdsVo.createRowSetIterator(null);
            //  System.out.println("Row count is "+this.getMmScInvcTr2().getRowCount());
            while (iter.hasNext()) {
                iter.next().remove();
            }
            // System.out.println("Row count is "+this.getMmScInvcTr2().getRowCount());
        } else {

            Row[] rw = tdsVo.getFilteredRows("ItmId", itemId);

            if (rw.length > 0) {
                rw[0].remove();

            }

        }
    }

    public Number addTds(String docIdSrc, String scoId, String itmId, String uom, Number amt, Integer tdsRule,
                         Integer delNo, Number conF) {

        String docId = this.getMmScInvc1().getCurrentRow().getAttribute("DocId").toString();
        Number tdsAmt = StaticValue.NUMBER_ZERO;
        if (tdsRule != null) {
            MmScInvcTdsVORowImpl curRow = (MmScInvcTdsVORowImpl) this.getMmScInvcTds1().createRow();
            curRow.setDocIdSrc(docIdSrc);
            curRow.setDocIdSco(scoId);
            curRow.setDlvSchdlNo(delNo);
            curRow.setItmId(itmId);
            curRow.setItmUom(uom);
            curRow.setTdsRuleId(tdsRule);
            curRow.setTdsRuleFlg("N");
            curRow.setTdsExmptFlg("N");

            curRow.setTdsOnAmtSp(amt);
            curRow.setTdsOnAmtBs(amt.multiply(conF));

            this.getMmScInvcTds1().insertRow(curRow);

            tdsAmt = this.callTdsLine(docId, docIdSrc, scoId, delNo, itmId, tdsRule, amt, conF, uom, "Y", "N", amt);

            this.getMmScInvcTdsLines1().executeQuery();

            tdsAmt = tdsAmt == null ? StaticValue.NUMBER_ZERO : tdsAmt;


            //Update TDaS AMOUNT
            curRow.setTdsAmt(tdsAmt);
            curRow.setTdsAmtBs(tdsAmt.multiply(conF));
        } else {
            tdsAmt = this.callTdsLine(docId, docIdSrc, scoId, delNo, itmId, tdsRule, amt, conF, uom, "Y", "N", amt);
            this.getMmScInvcTdsLines1().executeQuery();
        }

        return tdsAmt;
    }


    public void refreshOC() {
        Object id = this.getMmScInvcOc1().getCurrentRow().getAttribute("CurrIdSpOc");
        if (id != null) {
            Integer currId = (Integer) id;
            Number conF = new Number(1);
            Number conFS = (Number) this.getMmScInvc1().getCurrentRow().getAttribute("CurrConvFctr");

            Number conO = EbizParams.getCurrRateForCurrId(this, currId);

            conO.round(6);
            conF = conO.divide(conFS);
            conF.round(6);


            this.getMmScInvcOc1().getCurrentRow().setAttribute("CurrConvFctrOc", conF);

            Number amt = (Number) this.getMmScInvcOc1().getCurrentRow().getAttribute("OcAmtSpOc");

            amt = amt == null ? new Number(1) : amt;

            this.getMmScInvcOc1().getCurrentRow().setAttribute("OcAmtSp", conF.multiply(amt));
            this.getMmScInvcOc1().getCurrentRow().setAttribute("OcAmtBs", conO.multiply(amt));

        }
    }


    public void applyTDS(Integer tdsRuleId) {
        MmScInvcItmVORowImpl row = (MmScInvcItmVORowImpl) this.getMmScInvcItm1().getCurrentRow();

        String itemId = row.getItmId();
        String itemUom = row.getItmUom();

        String docIdSrc = row.getDocIdSrc();
        String scoId = row.getDocIdSco();
        Integer delNo = row.getDlvSchdlNo();
        Number conF = (Number) this.getMmScInvc1().getCurrentRow().getAttribute("CurrConvFctr");
        Number amt = row.getTaxableAmtSp();

        this.deleteTds("I", itemId);

        Number tdsAmt = this.addTds(docIdSrc, scoId, itemId, itemUom, amt, tdsRuleId, delNo, conF);


    }

    public void applyTax(Integer taxRuleId) {
        MmScInvcItmVORowImpl row = (MmScInvcItmVORowImpl) this.getMmScInvcItm1().getCurrentRow();

        System.out.println("Tax Rule Id is " + taxRuleId);

        String itemId = row.getItmId();
        String itemUom = row.getItmUom();

        String docIdSrc = row.getDocIdSrc();
        String scoId = row.getDocIdSco();
        Integer delNo = row.getDlvSchdlNo();
        Number conF = (Number) this.getMmScInvc1().getCurrentRow().getAttribute("CurrConvFctr");
        Number amt = row.getTaxableAmtSp();

        this.deleteTr("I", itemId);

        Number tax = this.addTr(docIdSrc, scoId, itemId, itemUom, amt, taxRuleId, delNo, conF);

        row.setTotTaxAmtSp(tax);
        row.setTotTaxAmtBs(tax.multiply(conF));


    }


    /**
     * Container's getter for MmScInvcPmtSchdl1.
     * @return MmScInvcPmtSchdl1
     */
    public MmScInvcPmtSchdlVOImpl getMmScInvcPmtSchdl1() {
        return (MmScInvcPmtSchdlVOImpl) findViewObject("MmScInvcPmtSchdl1");
    }

    /**
     * Container's getter for DocToSchdlVL1.
     * @return DocToSchdlVL1
     */
    public ViewLinkImpl getDocToSchdlVL1() {
        return (ViewLinkImpl) findViewLink("DocToSchdlVL1");
    }


    public void addPaySchedule() {
        Object payMode = this.getMmScInvc1().getCurrentRow().getAttribute("PayMode");
        Object payDate = this.getMmScInvc1().getCurrentRow().getAttribute("PayDate");
        Object payAmt = this.getMmScInvc1().getCurrentRow().getAttribute("PayAmt");


        if (payMode == null || payDate == null || payAmt == null) {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error",
                                                                          "All Fields are mandatory for making a payment schedule"));
        } else {
            Number conF = (Number) this.getMmScInvc1().getCurrentRow().getAttribute("CurrConvFctr");
            Number totAmt = (Number) this.getMmScInvc1().getCurrentRow().getAttribute("TransTotal");
            Integer count = this.getMmScInvcPmtSchdl1().getRowCount();

            MmScInvcPmtSchdlVORowImpl row = (MmScInvcPmtSchdlVORowImpl) this.getMmScInvcPmtSchdl1().createRow();
            row.setPayMode((Integer) payMode);
            row.setPayDt((Timestamp) payDate);
            row.setTotAmtSp(totAmt);
            row.setTotAmtBs(totAmt.multiply(conF));
            row.setPayAmtSp((Number) payAmt);
            row.setPayAmtBs(conF.multiply((Number) payAmt));
            row.setSrNo(count + 1);
            row.setAdjFlg("N");
            row.setAdvFlg("N");

            this.getMmScInvc1().getCurrentRow().setAttribute("PayAmt", null);
            this.getMmScInvc1().getCurrentRow().setAttribute("PayDate", null);
            this.getMmScInvc1().getCurrentRow().setAttribute("PayMode", null);

        }
    }

    /***
     *
     * To get WF  Function
     *
     * */

    public String getWfId() {
        String wfId = null;
        wfId = (String) WorkFlowUtils.getWorkFlowId(this, 36503, 0);
        return wfId;
    }

    public void insertToWF(String docId) {
        try {
            WorkFlowUtils.insertWfTxnEntriesForCurrDoc(this, 36503, 4, docId, EbizParams.GLBL_APP_USR(),
                                                       EbizParams.GLBL_APP_USR(), "Suncontracting",
                                                       StaticValue.NUMBER_ZERO);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Integer getCurUser(String docId) {
        Integer val = WorkFlowUtils.docPendingAt(this, 36503, 0, docId);
        return val;
    }

    public void updateWfStat(String mode, String docId) {


        switch (mode) {
        case "A":
            String glId=null;
            if (this.getMmScInvcCalc1().getRowCount() < 1) {
                this.processCalculation();
            }

            this.insertGl();
            this.backUpdateDoc();
            this.getDBTransaction().postChanges();
           
            this.getMmScInvc1().setBindCldId(cldId);
            this.getMmScInvc1().setBindSlocId(slocId);
            this.getMmScInvc1().setBindOrgId(orgId);
            this.getMmScInvc1().setBindDocId(docId);
           
            this.getMmScInvc1().executeQuery();
            MmScInvcVORowImpl row=null;
            if (this.getMmScInvc1().getRowCount() > 0) {
                row=(MmScInvcVORowImpl)this.getMmScInvc1().first();
                row.setInvMode(new Integer(314));
                Key key=row.getKey();
                Integer range=this.getMmScInvc1().getRangeIndexOf(row);
                //System.out.println("TXN id is "+(row).getGlVouId());
                this.getMmScInvc1().findAndSetCurrentRowByKey(key, range);
                glId=row.getTransDispId();
            }
            ADFModelUtils.showFormattedFacesMessage("Successfull", "Record Approved Successfully.",
                                                    FacesMessage.SEVERITY_INFO);
            ADFModelUtils.showFormattedFacesMessage("Voucher has been posted.", "Voucher Id : "+glId,
                                                    FacesMessage.SEVERITY_INFO);
            break;
        case "F":
            ADFModelUtils.showFormattedFacesMessage("Successfull", "Record Forwarded Successfully",
                                                    FacesMessage.SEVERITY_INFO);
            break;
        case "R":
            ADFModelUtils.showFormattedFacesMessage("Successfull", "Record Rejected Successfully",
                                                    FacesMessage.SEVERITY_INFO);
            break;
        case "V":
            ADFModelUtils.showFormattedFacesMessage("Successfull", "Record Reverted Successfully",
                                                    FacesMessage.SEVERITY_INFO);
            break;
        }

        this.getDBTransaction().commit();
    }

    /**
     * Container's getter for MmScInvcTrLines3.
     * @return MmScInvcTrLines3
     */
    public MmScInvcTrLinesVOImpl getMmScInvcTrLines3() {
        return (MmScInvcTrLinesVOImpl) findViewObject("MmScInvcTrLines3");
    }

    /**
     * Container's getter for DocToTrLineVL1.
     * @return DocToTrLineVL1
     */
    public ViewLinkImpl getDocToTrLineVL1() {
        return (ViewLinkImpl) findViewLink("DocToTrLineVL1");
    }


    //Validate Payment Amount

    public String validatePayment() {
        String result = "Y";
        MmScInvcPmtSchdlVORowImpl row = null;
        Number totAmt = ((MmScInvcVORowImpl) this.getMmScInvc1().getCurrentRow()).getTransTotal();
        if (this.getMmScInvcPmtSchdl1().getRowCount() == 0) {

            row = (MmScInvcPmtSchdlVORowImpl) this.getMmScInvcPmtSchdl1().createRow();

            Number conF = (Number) this.getMmScInvc1().getCurrentRow().getAttribute("CurrConvFctr");


            row.setPayMode(163);
            row.setPayDt(new Timestamp(System.currentTimeMillis()));
            row.setTotAmtSp(totAmt);
            row.setTotAmtBs(totAmt.multiply(conF));
            row.setPayAmtSp(totAmt);
            row.setPayAmtBs(totAmt);
            row.setSrNo(1);
            row.setAdjFlg("N");
            row.setAdvFlg("N");
            this.getMmScInvcPmtSchdl1().insertRow(row);

            result = "Y";
        } else {

            RowSetIterator iter = this.getMmScInvcPmtSchdl1().createRowSetIterator(null);


            Number amt = StaticValue.NUMBER_ZERO;


            while (iter.hasNext()) {
                row = (MmScInvcPmtSchdlVORowImpl) iter.next();
                amt = amt.add(row.getPayAmtSp());
                System.out.println("amt is :" + amt);
            }

            if (amt.compareTo(totAmt) == 0) {

                result = "Y";
            } else {
                if (amt.compareTo(totAmt) < 0) {
                    FacesContext.getCurrentInstance().addMessage(null,
                                                                 new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error",
                                                                                  "Payment amount is less than total Amount"));
                } else {
                    FacesContext.getCurrentInstance().addMessage(null,
                                                                 new FacesMessage(FacesMessage.SEVERITY_ERROR, "Error",
                                                                                  "Payment amount is more than total Amount"));
                }

                result = "N";

            }
        }

        return result;
    }

    public void applyTaxAll(Integer taxRuleId, String scoId) {
        Iterator iter = null;
        if (scoId != null)
            iter = (Arrays.asList(this.getMmScInvcItm2().getFilteredRows("DocIdSco", scoId))).iterator();
        else
            iter = (Arrays.asList(this.getMmScInvcItm2().getAllRowsInRange())).iterator();

        Number conF = (Number) this.getMmScInvc1().getCurrentRow().getAttribute("CurrConvFctr");
        String itemId = null;
        String itemUom = null;
        String docIdSrc = null;
        Integer delNo = null;
        Number amt = null;
        Number tax = null;

        while (iter.hasNext()) {
            MmScInvcItmVORowImpl row = (MmScInvcItmVORowImpl) iter.next();
            itemId = row.getItmId();
            itemUom = row.getItmUom();
            docIdSrc = row.getDocIdSrc();
            scoId = row.getDocIdSco();
            delNo = row.getDlvSchdlNo();

            amt = row.getTaxableAmtSp();
            
            
            this.deleteTr("A", itemId);
            row.setAttribute("TaxRule", null);
            
            tax = this.addTr(docIdSrc, scoId, itemId, itemUom, amt, taxRuleId, delNo, conF);
            row.setTotTaxAmtSp(tax);
            row.setTotTaxAmtBs(tax.multiply(conF));
        }

    }

    public void applyTDSAll(Integer tdsRuleId, String scoId) {
        Iterator iter = (Arrays.asList(this.getMmScInvcItm2().getFilteredRows("DocIdSco", scoId))).iterator();
        MmScInvcItmVORowImpl row = null;
        String itemId = null;
        String itemUom = null;
        String docIdSrc = null;
        Integer delNo = null;
        Number conF = (Number) this.getMmScInvc1().getCurrentRow().getAttribute("CurrConvFctr");
        Number amt = null;
        Number tdsAmt = null;
        while (iter.hasNext()) {
            row = (MmScInvcItmVORowImpl) iter.next();
            itemId = row.getItmId();
            itemUom = row.getItmUom();
            docIdSrc = row.getDocIdSrc();
            scoId = row.getDocIdSco();
            delNo = row.getDlvSchdlNo();

            amt = row.getTaxableAmtSp();
            this.deleteTds("A", itemId);

            tdsAmt = this.addTds(docIdSrc, scoId, itemId, itemUom, amt, tdsRuleId, delNo, conF);
        }
    }

    public void resetTax(String type) {
        System.out.println("Type is " + type);

        if (type.equalsIgnoreCase("A")) {
            this.getMmScInvcSrc1().getCurrentRow().setAttribute("TaxRuleId", null);
            String scoId = this.getMmScInvcSrc1().getCurrentRow().getAttribute("DocIdSco").toString();
            this.applyTaxAll(null, scoId);
        } else {
            this.getMmScInvcItm1().getCurrentRow().setAttribute("TaxRule", null);
            this.applyTax(null);
        }
    }

    public void resetTds(String type) {
        System.out.println("Type is " + type);
        if (type.equalsIgnoreCase("A")) {
            this.getMmScInvcSrc1().getCurrentRow().setAttribute("TaxRuleId", null);
            String scoId = this.getMmScInvcSrc1().getCurrentRow().getAttribute("DocIdSco").toString();
            this.applyTDSAll(null, scoId);
        } else {
            //TdsRule
            this.getMmScInvcItm1().getCurrentRow().setAttribute("TdsRule", null);
            this.applyTDS(null);
        }
    }

    /**
     * Container's getter for MmScInvcCalc1.
     * @return MmScInvcCalc1
     */
    public ViewObjectImpl getMmScInvcCalc1() {
        return (ViewObjectImpl) findViewObject("MmScInvcCalc1");
    }

    /**
     * Container's getter for DocToCalVL1.
     * @return DocToCalVL1
     */
    public ViewLinkImpl getDocToCalVL1() {
        return (ViewLinkImpl) findViewLink("DocToCalVL1");
    }


    public void processCalculation() {

        System.out.println("Processing Data ");
        this.getDBTransaction().postChanges();

        Integer slocId = this.getSlocId();
        String cldId = this.getCldId();
        String hoOrgId = this.getHoOrgId();
        String orgId = this.getOrgId();
        String docId = this.getMmScInvc1().getCurrentRow().getAttribute("DocId").toString();
        Integer type = (Integer) this.getMmScInvc1().getCurrentRow().getAttribute("InvType");

        BigDecimal rs = (BigDecimal) this.callFunction(Types.NUMERIC, "mm.mm_ins_sc_invc_calc(?,?,?,?,?,?)", new Object[] {
                                                       slocId, cldId, hoOrgId, orgId, docId, type
        });

        this.getDBTransaction().postChanges();
        this.getMmScInvcCalc1().executeQuery();
        System.out.println(" Row Count " + this.getMmScInvcCalc1().getRowCount());
    }

    public void insertGl() {
        // System.out.println("Inserting into Gl ");
        MmScInvcVORowImpl row = (MmScInvcVORowImpl) this.getMmScInvc1().getCurrentRow();
        String docId = row.getDocId();
        java.util.Date date = row.getDocDt();
        Number amt = row.getTotAmtSp();
        Integer user = this.getUserId();
        String dispId = row.getInvNo();
        String orgId = this.getOrgId();
        Integer slocId = this.getSlocId();
        String hoOrgId = this.getHoOrgId();
        String cldId = this.getCldId();
        Integer eoId = row.getEoIdSrc();
        Integer coaId = row.getCoaId();
        Integer currId = row.getCurrIdSp();
        Number conRate = row.getCurrConvFctr();
        Integer type = row.getInvType() == 826 ? 7 : 8;

        BigDecimal val =
            (BigDecimal) this.callFunction(Types.NUMERIC, "mm.fn_mm_sc_inv_to_gl(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           docId, date, amt, user, dispId, orgId, slocId, hoOrgId, cldId, eoId, coaId,
                                           currId, conRate, type
        });


        //System.out.println("Posted voucher value is "+val);
    }

    public void backUpdateDoc() {
        String orgId = this.getOrgId();
        Integer slocId = this.getSlocId();
        String hoOrgId = this.getHoOrgId();
        String cldId = this.getCldId();
        String docId = ((MmScInvcVORowImpl) this.getMmScInvc1().getCurrentRow()).getDocId();
        Integer type = ((MmScInvcVORowImpl) this.getMmScInvc1().getCurrentRow()).getInvType();
        this.callFunction(Types.VARCHAR, "MM.FN_MM_INVC_TO_BACK_UPD_STAT(?,?,?,?,?,?)", new Object[] {
                          cldId, slocId, hoOrgId, orgId, docId, type
        });

    }

    /**
     * Container's getter for MmScInvcItm2.
     * @return MmScInvcItm2
     */
    public MmScInvcItmVOImpl getMmScInvcItm2() {
        return (MmScInvcItmVOImpl) findViewObject("MmScInvcItm2");
    }

    /**
     * Container's getter for DocToItmVL1.
     * @return DocToItmVL1
     */
    public ViewLinkImpl getDocToItmVL1() {
        return (ViewLinkImpl) findViewLink("DocToItmVL1");
    }

    /**
     * Container's getter for MmScInvcOc2.
     * @return MmScInvcOc2
     */
    public MmScInvcOcVOImpl getMmScInvcOc2() {
        return (MmScInvcOcVOImpl) findViewObject("MmScInvcOc2");
    }

    /**
     * Container's getter for DocToOcVL1.
     * @return DocToOcVL1
     */
    public ViewLinkImpl getDocToOcVL1() {
        return (ViewLinkImpl) findViewLink("DocToOcVL1");
    }

    /**
     * Container's getter for MmScInvcTr3.
     * @return MmScInvcTr3
     */
    public MmScInvcTrVOImpl getMmScInvcTr3() {
        return (MmScInvcTrVOImpl) findViewObject("MmScInvcTr3");
    }

    /**
     * Container's getter for DocToTaxTrVL1.
     * @return DocToTaxTrVL1
     */
    public ViewLinkImpl getDocToTaxTrVL1() {
        return (ViewLinkImpl) findViewLink("DocToTaxTrVL1");
    }

    /**
     * Container's getter for MmScInvcTds3.
     * @return MmScInvcTds3
     */
    public MmScInvcTdsVOImpl getMmScInvcTds3() {
        return (MmScInvcTdsVOImpl) findViewObject("MmScInvcTds3");
    }

    /**
     * Container's getter for DocToTdsVL1.
     * @return DocToTdsVL1
     */
    public ViewLinkImpl getDocToTdsVL1() {
        return (ViewLinkImpl) findViewLink("DocToTdsVL1");
    }

    public void deleteDocument() {
        String docIdSrc = this.getMmScInvcDtl1().getCurrentRow().getAttribute("DocIdSrc").toString();
        String scoId = null;
        RowSetIterator iter = this.getMmScInvcSrc1().createRowSetIterator(null);
        RowQualifier rqItem = new RowQualifier(this.getMmScInvcItm2());
        RowQualifier rqOc = new RowQualifier(this.getMmScInvcOc2());
        Iterator itemIter = null;
        Iterator ocIter = null;
        MmScInvcSrcVORowImpl row = null;
        MmScInvcItmVORowImpl item = null;
        MmScInvcOcVORowImpl oc = null;
        while (iter.hasNext()) {
            row = (MmScInvcSrcVORowImpl) iter.next();
            scoId = row.getDocIdSco();
            // delete tax and tds
            this.applyTDSAll(null, scoId);
            this.applyTaxAll(null, scoId);

            // delete Item

            rqItem.setWhereClause("DocIdSrc = '" + docIdSrc + "' AND DocIdSco= '" + scoId + "'");
            itemIter = (Arrays.asList(this.getMmScInvcItm2().getFilteredRows(rqItem))).iterator();

            while (itemIter.hasNext()) {
                item = (MmScInvcItmVORowImpl) itemIter.next();
                this.deleteCostCenterItem(item.getItmId());
                item.remove();
            }

            // delete other charges
            rqOc.setWhereClause("DocIdSrc = '" + docIdSrc + "' AND DocIdSco= '" + scoId + "'");
            ocIter = (Arrays.asList(this.getMmScInvcOc2().getFilteredRows(rqOc))).iterator();
            while (ocIter.hasNext()) {
                oc = (MmScInvcOcVORowImpl) ocIter.next();
                oc.remove();
            }


            // remove sco row
            row.remove();
        }
        this.getMmScInvcDtl1().getCurrentRow().remove();
    }


    public void applyDefaultTax(String flag) {
        MmScInvcVORowImpl row = (MmScInvcVORowImpl) this.getMmScInvc1().getCurrentRow();
        if(row.getTaxFormTypId()==null||row.getTaxFormTypId().toString().trim().length()==0)
            return;
        
        if(flag.equalsIgnoreCase("A")){ 
           Integer taxRule=((MmScInvcSrcVORowImpl) this.getMmScInvcSrc1().getCurrentRow()).getTaxRuleId();
           taxRule=taxRule==null?0:taxRule;
           if((taxRule>0))
                return;
           
            Object o = this.callFunction(Types.NUMERIC,"APP.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                     row.getCldId(), row.getSlocId(), row.getBillAddsId(), row.getOrgId(),
                                     row.getHoOrgId(), 0, row.getEoIdSrc(), 36504, row.getTaxFormTypId()});
            
            if(o==null)
                return;
            
            Integer taxRuleId=((BigDecimal)o).intValue();
            
            if(taxRuleId==-1)
                return;
            
            String scoId=((MmScInvcSrcVORowImpl) this.getMmScInvcSrc1().getCurrentRow()).getDocIdSco();
            ((MmScInvcSrcVORowImpl) this.getMmScInvcSrc1().getCurrentRow()).setTaxRuleId(taxRuleId);
            this.applyTaxAll(taxRuleId, scoId);
        
        }else{
            
            Integer taxRule=((MmScInvcItmVORowImpl) this.getMmScInvcItm1().getCurrentRow()).getTaxRule();
            taxRule=taxRule==null?0:taxRule;
            System.out.println("Tax Rule Is "+taxRule);

            if(taxRule>0)
                return;
            
            MmScInvcItmVORowImpl itm = (MmScInvcItmVORowImpl) this.getMmScInvcItm1().getCurrentRow();
            Object o = this.callFunction(Types.NUMERIC, "APP.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                     row.getCldId(), row.getSlocId(), row.getBillAddsId(), row.getOrgId(),
                                     row.getHoOrgId(), itm.getItmId(), row.getEoIdSrc(), 36504, row.getTaxFormTypId()});
            
            if(o==null)
                return;
            

            
            Integer taxRuleId=((BigDecimal)o).intValue();
            
            if(taxRuleId==-1)
                return;
            
            ((MmScInvcItmVORowImpl) this.getMmScInvcItm1().getCurrentRow()).setTaxRule(taxRuleId);
            this.applyTax(taxRuleId);
            
        }
   
    }
    
    
    /***
     * Cost Center Service
     * 
     *
     ***/
    
    public AppCostCenterServiceAMImpl getAppAM() {
            String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
            String appModuleConfig = "AppCostCenterServiceAMLocal";
            return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
        }


        public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
            Configuration.releaseRootApplicationModule(appCostCenter, true);
        }

        @Override
        protected void finalize() throws Throwable {

            releaseAppAM(getAppAM());

            super.finalize();
        }
        
        
    /**
       * Method which will let us know whether cost center is applicable for this current document or not
       */
      public Boolean chkCcApplicableOrNot() {
          Boolean val = false;

          ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
          appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
          appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
          appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
          appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
          appCcDocVO1.setNamedWhereClauseParam("BindDocId", 36504);
          appCcDocVO1.executeQuery();

          Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
          if (allRowsInRange.length > 0) {
              val = true;
          }

          return val;
      }
    
    
   /**
         * Method which will be called when user click on generate Cost Ceneter based on header wise
         */
        public void generateCostCenterHeaderWise() {
            if (chkCcApplicableOrNot()) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                /*
            * @param cldId
            * @param slocId
            * @param hoOrgId
            * @param orgId
            * @param tempId
            * @param tempSrc
            * @param docId
            * @param usrId
            * @param tempCcId
            * @param amount
            * @param pCcLevel1
            * @param pCcLevel2
            * @param pCcLevel3
            * @param pCcLevel4
            * @param pCcLevel5
            */
                MmScInvcVOImpl impl = this.getMmScInvc1();
                Row currentRow = impl.getCurrentRow();

                if (currentRow != null) {
                    declareGlblValuesForCC();

                    amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               currentRow.getAttribute("DocId").toString(), "H", 36504,
                                               EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                               new Number(0), (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                               (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                               (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                               (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                               (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

                }
                
            
            }else{
                return;
            }
        }
        
        
    /**
       * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
       */
      public void declareGlblValuesForCC() {
          ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
          appCcVwVO1.setRangeSize(-1);

          appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
          appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
          appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
          appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
          appCcVwVO1.setNamedWhereClauseParam("BindDocId", 36504);

          Row currentRow = this.getMmScInvcItm1().getCurrentRow();
          if (currentRow != null) {
              for (int i = 1; i <= 5; i++) {
                  appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                  appCcVwVO1.executeQuery();

                  Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                  if (allRowsInRange.length > 0) {
                      String columnName = null;
                      for (Row r : allRowsInRange) {
                          AttributeDef[] attributeDef = this.getMmScInvcItm1().getAttributeDefs();

                          for (int j = 0; j < attributeDef.length; j++) {
                              /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                              System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                              System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                 attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                              */
                              if (attributeDef[j].getColumnName() != null &&
                                  attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                  columnName = attributeDef[j].getName();
                              }
                          }
                          System.out.println("Column Name is " + columnName);

                          if (columnName != null) {

                              System.out.println("i is " + i + " Cost center Value is " +
                                                 currentRow.getAttribute(columnName));


                              RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                         currentRow.getAttribute(columnName));
                          }
                      }
                  } else {
                      System.out.println("i is" + i + " cost center value is null");

                      RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                  }
              }
          }
      }
    
    

    /** ---------- To create HexDocId Id -------------**/

    public String getHexDocNoFromFun() {

        String hexDocIdFromFun = "0";
        try {
            hexDocIdFromFun = this.callFunction(Types.VARCHAR, "APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)", new Object[] {
                                                      this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                      this.getUserId(), 36504, 84901,0
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at BdgEoBudgetEoImpl :" + e.getMessage());
        }
        System.out.println("===========" + hexDocIdFromFun);

        return hexDocIdFromFun;
    }   
    
    public void deleteCostCenterItem(String itmId) {
            if (chkCcApplicableOrNot()) {
                System.out.println("Inside delete method");

                MmScInvcItmVOImpl impl = this.getMmScInvcItm1();
                Row currentRow = (impl.getFilteredRows("ItmId", itmId))[0];
                if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                    AppCostCenterServiceAMImpl amCC = getAppAM();
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {
                        System.out.println("------------------ Not null");
                           amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                   currentRow.getAttribute("DocId").toString(), "L", 26004,
                                                   EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                                   (Number) currentRow.getAttribute("ItmTotAmt"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                       
                       }
                }
                System.out.println("After calling delete method");
            }
        }


    
    public void updateCostCenterAmt() {
            if (chkCcApplicableOrNot()) {
                System.out.println("Inside cost ceneter update amount method");
                MmScInvcItmVOImpl impl = this.getMmScInvcItm1();
                Row currentRow = impl.getCurrentRow();
                if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                    currentRow.getAttribute("AsblAmtSp") != null) {
                    AppCostCenterServiceAMImpl amCC = getAppAM();
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        declareGlblValuesForCC();

                        System.out.println("------------------ Not null");
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                currentRow.getAttribute("DocId").toString(), "L", 36504,
                                                EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                                (Number) currentRow.getAttribute("AsblAmtSp"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
                System.out.println("After calling Update method");
            }
            
        }
    
    
    /**
    * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
    */
    public void sendDataFromTempCcToInvcCc() {
    if (chkCcApplicableOrNot()) {
       // System.out.println("Doc Id "+docId + "and jc basis is "+jcBasis);
        
        try {
            
               
           
                this.callFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 36504, "MM",
                                   "MM$SC$INVC$COST$CENTER",this.getMmScInvc1().getCurrentRow().getAttribute("DocId") 
                });
            
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }


    /**
     * Container's getter for AppCcDocVO1.
     * @return AppCcDocVO1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVwVO1.
     * @return AppCcVwVO1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }

    /**
     * Container's getter for MmScInvcTncVO1.
     * @return MmScInvcTncVO1
     */
    public MmScInvcTncVOImpl getMmScInvcTncVO1() {
        return (MmScInvcTncVOImpl) findViewObject("MmScInvcTncVO1");
    }

    /**
     * Container's getter for DocumentToTncVL1.
     * @return DocumentToTncVL1
     */
    public ViewLinkImpl getDocumentToTncVL1() {
        return (ViewLinkImpl) findViewLink("DocumentToTncVL1");
    }

    /**
     * Container's getter for AppTncVO1.
     * @return AppTncVO1
     */
    public AppTncVOImpl getAppTncVO1() {
        return (AppTncVOImpl) findViewObject("AppTncVO1");
    }
    
    
    public void addTnc(Integer tncId){
        MmScInvcTncVORowImpl row=(MmScInvcTncVORowImpl)this.getMmScInvcTncVO1().createRow();
        row.setTncId(tncId);
        this.getMmScInvcTncVO1().insertRow(row);
    }
}

