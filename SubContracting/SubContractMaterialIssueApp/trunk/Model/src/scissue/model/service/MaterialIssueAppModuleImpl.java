package scissue.model.service;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.math.BigDecimal;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import scissue.model.service.common.MaterialIssueAppModule;
import scissue.model.views.MmScIssuSrcVoRowImpl;
import scissue.model.views.ViewMmItmStkBinRqmtVwVOImpl;
import scissue.model.views.ViewMmItmStkLotRqmtVwVOImpl;
import scissue.model.views.ViewMmItmStkSrRqmtVwVOImpl;
import scissue.model.views.ViewMmStkSummBinVOImpl;
import scissue.model.views.ViewMmStkSummLotVOImpl;
import scissue.model.views.ViewMmStkSummSrVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 17 11:14:42 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MaterialIssueAppModuleImpl extends ApplicationModuleImpl implements MaterialIssueAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public MaterialIssueAppModuleImpl() {
    }

    /**
     * Get Issue Global Txn Doc Id
     * */
    public String getScIssueTxnDocId() {
        return resolvEl("#{pageFlowScope.GLBL_ISSUE_TXN_ID}").toString();
    }

    /**
     * Filter on Page Load
     * */
    public void FilterOnPageLoad(String CldId, String OrgId, String HoOrgId, Integer SlocId) {
        filterSearchMmScIssue_vw(CldId, SlocId, HoOrgId, OrgId);
    }

    /*--------------------------------Filter Search View-----------------------------------*/
    public void filterSearchMmScIssue_vw(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        ViewObjectImpl searchSco_vw = this.getSearchMmScIssueVo1();
        searchSco_vw.setNamedWhereClauseParam("CldIdBind", cld_id);
        searchSco_vw.setNamedWhereClauseParam("HoOrgIdBind", ho_org_id);
        searchSco_vw.setNamedWhereClauseParam("OrgIdBind", org_id);
        searchSco_vw.setNamedWhereClauseParam("SlocIdBind", sloc_id);
        searchSco_vw.setNamedWhereClauseParam("DocIdBind", -1);
        searchSco_vw.executeQuery();
    }

    /*---------------------------------Function of Search-------------------------------------*/
    public void searchIssue_Func() {
        Row currentRow = this.getTransientVo1().getCurrentRow();
        ViewObjectImpl impl = this.getSearchMmScIssueVo1();
        impl.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("TransCldId"));
        impl.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("TransSlocId"));
        impl.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("TransHoOrgId"));
        impl.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("TransOrgId"));
        impl.setNamedWhereClauseParam("FrmDtBind", currentRow.getAttribute("TransFromDate"));
        impl.setNamedWhereClauseParam("ToDtBind", currentRow.getAttribute("TransToDate"));
        impl.setNamedWhereClauseParam("DocIdBind", currentRow.getAttribute("TransIssueDocId"));
        impl.setNamedWhereClauseParam("EoIdBind", currentRow.getAttribute("TransEoId"));
        impl.setNamedWhereClauseParam("IssuStatBind", currentRow.getAttribute("TransIssueStatus"));
        impl.setNamedWhereClauseParam("IssueModeBind", currentRow.getAttribute("TransIssueMode"));
        impl.executeQuery();
    }

    /*---------------------------------Function of Reset-------------------------------------*/
    public void resetIssue_Func() {
        Row currentRow = this.getTransientVo1().getCurrentRow();
        ViewObjectImpl impl = this.getSearchMmScIssueVo1();
        impl.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("TransCldId"));
        impl.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("TransSlocId"));
        impl.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("TransHoOrgId"));
        impl.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("TransOrgId"));
        impl.setNamedWhereClauseParam("FrmDtBind", currentRow.getAttribute("TransFromDate"));
        impl.setNamedWhereClauseParam("ToDtBind", currentRow.getAttribute("TransToDate"));
        impl.setNamedWhereClauseParam("DocIdBind", -1);
        impl.setNamedWhereClauseParam("EoIdBind", currentRow.getAttribute("TransEoId"));
        impl.setNamedWhereClauseParam("IssuStatBind", currentRow.getAttribute("TransIssueStatus"));
        impl.setNamedWhereClauseParam("IssueModeBind", currentRow.getAttribute("TransIssueMode"));
        impl.executeQuery();
        this.getTransientVo1().executeQuery();
    }

    /**
     * Filter MmScIssue Table In View Mode
     * */
    public void filterMmScIsssue_Func(String ScIssueDocId) {
        ViewObjectImpl mmIssue = this.getMmScIssuVo1();
        ViewCriteria crt = mmIssue.getViewCriteria("MmScIssuVoCriteria");
        mmIssue.applyViewCriteria(crt);
        mmIssue.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        mmIssue.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        mmIssue.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        mmIssue.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        mmIssue.setNamedWhereClauseParam("BindDocId", ScIssueDocId);
        mmIssue.executeQuery();
    }

    /*---------------------------------------------Work Flow Setup---------------------------------------------------*/
    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Vishal Kumar on 09-09-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * @param msgMode is kept to incorporate conditional activities.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {
        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created by Vishal Kr on 06-02-2015.
     * **/

    public String callWfFunctions() {
        String _scIssueTxnId = getScIssueTxnDocId();
        Integer docId = 36502;
        Integer docTypId = (Integer) this.getMmScIssuVo1().getCurrentRow().getAttribute("ScType");
        String wfId = getWfId();
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                       EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), wfId, docId, docTypId
            });
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                               EbizParams.GLBL_APP_USR_ORG(), docId, docTypId, wfId, _scIssueTxnId,
                               EbizParams.GLBL_APP_USR(), EbizParams.GLBL_APP_USR(), level, level, "I", "A", 0
            });
        } catch (Exception nfe) {
            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);
            nfe.printStackTrace();
        }
        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String getWfId() {
        Integer docId = 36502;
        Integer docTypId = (Integer) this.getMmScIssuVo1().getCurrentRow().getAttribute("ScType");
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                      EbizParams.GLBL_APP_USR_ORG(), docId, docTypId
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
        }
        return "0";
    }


    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public Integer getDocUsrFromWF() {
        String _scIssueTxnId = getScIssueTxnDocId();
        Integer docId = 36502;
        Integer docTypId = (Integer) this.getMmScIssuVo1().getCurrentRow().getAttribute("ScType");
        Object fnRetVal;
        try {
            fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                          EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                          EbizParams.GLBL_APP_USR_ORG(), docId, _scIssueTxnId, docTypId
            });
            if (fnRetVal != null) {
                return Integer.parseInt(fnRetVal.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /*---------------------------------Get User Name for Given UserId-------------------------------------*/
    public String getUserName(Integer u_Id, Integer slc_id) {
        String uname = "";
        ViewObjectImpl impl = this.getLOVUserNmWF1();
        impl.setNamedWhereClauseParam("UsrIdBindVar", u_Id);
        impl.setNamedWhereClauseParam("SlocIDBindVar", slc_id);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }

    /*---------------------------------After Approval Change Status Function----------------------------*/
    public void updateWfStat(String wf_mode) {
        System.out.println("------------------------Wf Id" + wf_mode);
        filterMmScIsssue_Func(getScIssueTxnDocId());
        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject
        if (wf_mode != null) {
            Row r = this.getMmScIssuVo1().first();
            if ("I".equals(wf_mode)) {
                r.setAttribute("AuthStat", 313);
            }
            if ("F".equals(wf_mode)) {
                r.setAttribute("AuthStat", 317);
            } else if ("A".equals(wf_mode)) {
                r.setAttribute("IssuStat", 850);
                r.setAttribute("AuthStat", 314);
            }
        }
        this.getDBTransaction().commit();
    }

    /** ------------------------- To create HexDocId Id --------------------------**/
    public void GetHexDocNo() {
        try {
            String GetHexDocNo = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                                         EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                         EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(),
                                                         36502, 0
            }).toString();
            Map pageFlowScope = RequestContext.getCurrentInstance().getPageFlowScope();
            pageFlowScope.put("GLBL_ISSUE_TXN_ID", GetHexDocNo);
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID :" + e.getMessage());
        }
    }

    /**
     * Add Source Document Function
     * */
    public void AddSourceDoc() {
        if (this.getTempSubContractOrdrVo1().getCurrentRow().getAttribute("TransScoDocId") != null) {
            Row cR = this.getMmScIssuSrcVo1().createRow();
            cR.setAttribute("IssuDocType", this.getMmScIssuVo1().getCurrentRow().getAttribute("ScType"));
            cR.setAttribute("DocIdSrc", this.getTempSubContractOrdrVo1().getCurrentRow().getAttribute("TransScoDocId"));
            cR.setAttribute("DocDtSrc", this.getTempSubContractOrdrVo1().getCurrentRow().getAttribute("TransDocDt"));
            cR.setAttribute("DlvSchdlNo",
                            this.getTempSubContractOrdrVo1().getCurrentRow().getAttribute("TransDelvrySchdlNo"));
            this.getMmScIssuSrcVo1().insertRow(cR);

            AddItemForIssue(this.getTempSubContractOrdrVo1().getCurrentRow().getAttribute("TransScoDocId").toString(),
                            (Integer) this.getMmScIssuVo1().getCurrentRow().getAttribute("ScType"),
                            (Integer) this.getTempSubContractOrdrVo1().getCurrentRow().getAttribute("TransDelvrySchdlNo"));
        }
        this.getTempSubContractOrdrVo1().executeQuery();
    }

    /**
     * Add Item Method
     * */
    public void AddItemForIssue(String DocId, Integer ScoType, Integer DlvSchdlNo) {
        ViewObjectImpl opItm = this.getLOVMmScoOpItemVo1();
        opItm.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        opItm.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        opItm.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        opItm.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        opItm.setNamedWhereClauseParam("BindDocId", DocId);
        opItm.setNamedWhereClauseParam("BindType", ScoType);
        opItm.setNamedWhereClauseParam("BindDlvNo", DlvSchdlNo);
        opItm.executeQuery();
        RowSetIterator crs = opItm.createRowSetIterator(null);
        while (crs.hasNext()) {
            Row Rw = crs.next();
            Row createRow = this.getMmScIssuItmVo1().createRow();
            createRow.setAttribute("IssuDocType", ScoType);
            createRow.setAttribute("OpId", Rw.getAttribute("OpId"));
            createRow.setAttribute("OpSrNo", Rw.getAttribute("OpSrNo"));
            createRow.setAttribute("ItmBasis", Rw.getAttribute("ItmBasis"));
            createRow.setAttribute("ItmType", Rw.getAttribute("ItmType"));
            createRow.setAttribute("ItmId", Rw.getAttribute("ItmId"));
            createRow.setAttribute("ItmUom", Rw.getAttribute("ItmUom"));
            createRow.setAttribute("ItmAmtSp", Rw.getAttribute("ItmAmtSp"));
            createRow.setAttribute("ItmAmtBs", Rw.getAttribute("ItmAmtBs"));
            createRow.setAttribute("ItmUomBs", Rw.getAttribute("ItmUomBs"));
            createRow.setAttribute("UomConvFctr", Rw.getAttribute("UomConvFctr"));

            Number issueQtyofItem = getIssueQtyofItem(DocId, DlvSchdlNo);
            if (issueQtyofItem.compareTo(new Number(0)) == 0) {
                createRow.setAttribute("PendQty", Rw.getAttribute("ItmQty"));
            } else {
                Number ItmQty = (Number) Rw.getAttribute("ItmQty");
                Number NewQty = ItmQty.subtract(issueQtyofItem);
                createRow.setAttribute("PendQty", NewQty);
            }
            createRow.setAttribute("IssuQty", StaticValue.NUMBER_ZERO);
            createRow.setAttribute("IssuQtyBs", StaticValue.NUMBER_ZERO);
            createRow.setAttribute("AvgIssuPrice", Rw.getAttribute("ItmAmtGsSp"));
            createRow.setAttribute("AvgIssuPriceBs", Rw.getAttribute("ItmAmtGsBs"));
            createRow.setAttribute("DlvSchdlNo", DlvSchdlNo);
            this.getMmScIssuItmVo1().insertRow(createRow);
            /*---------------Copy Tr and Tr Lines SCO to ISSUE--------------*/
            copyTrScoToIssue(DocId, Rw.getAttribute("ItmId").toString(), Rw.getAttribute("ItmUom").toString(),
                             DlvSchdlNo);
        }
    }

    /**
     * Getting Issued Qty of Item
     * */
    public Number getIssueQtyofItem(String DocIdSrc, Integer DlvSchdlNo) {
        Number Val = StaticValue.NUMBER_ZERO;
        ViewObjectImpl impl = this.getLOVSumIssueQtyVo1();
        impl.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        impl.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("BindDlvSchdlNo", DlvSchdlNo);
        impl.setNamedWhereClauseParam("BindDocIdSrc", DocIdSrc);
        impl.executeQuery();
        int count = impl.getRowCount();
        if (count == 0) {
            return Val;
        } else {
            Row[] AR = impl.getAllRowsInRange();
            for (Row r : AR) {
                Number IssueQty = (Number) r.getAttribute("IssueQty");
                Val = Val.add(IssueQty);
            }
            return Val;
        }
    }

    /**
     * Copy TR and SCO to Issue Table
     * */
    public void copyTrScoToIssue(String DocId, String ItemId, String ItemUom, Integer DlvSchdlNo) {
        ViewObjectImpl TrVo = this.getMmScoTrViewVo1();
        TrVo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        TrVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        TrVo.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        TrVo.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        TrVo.setNamedWhereClauseParam("BindDocId", DocId);
        TrVo.setNamedWhereClauseParam("BindItemId", ItemId);
        TrVo.executeQuery();
        RowSetIterator TrCr = TrVo.createRowSetIterator(null);
        while (TrCr.hasNext()) {
            Row TrRow = TrCr.next();
            Row crtRow = this.getMmScIssuTrVo1().createRow();
            crtRow.setAttribute("CldId", EbizParams.GLBL_APP_CLD_ID());
            crtRow.setAttribute("DlvSchdlNo", DlvSchdlNo);
            crtRow.setAttribute("DocId", getScIssueTxnDocId());
            crtRow.setAttribute("DocIdSrc", DocId);
            crtRow.setAttribute("ItmId", ItemId);
            crtRow.setAttribute("ItmUom", ItemUom);
            crtRow.setAttribute("OrgId", EbizParams.GLBL_APP_USR_ORG());
            crtRow.setAttribute("SlocId", EbizParams.GLBL_APP_SERV_LOC());

            Number currFact = (Number) this.getMmScIssuVo1().getCurrentRow().getAttribute("CurrConvFctr");
            Number TaxableAmtBs = currFact.multiply((Number) TrRow.getAttribute("TaxableAmt"));

            crtRow.setAttribute("TaxableAmtBs", TaxableAmtBs);
            crtRow.setAttribute("TaxableAmtSp", TrRow.getAttribute("TaxableAmt"));
            crtRow.setAttribute("TaxAmt", TrRow.getAttribute("TaxAmtSp"));

            Number TaxAmtBs = currFact.multiply((Number) TrRow.getAttribute("TaxAmtSp"));

            crtRow.setAttribute("TaxAmtBs", TaxAmtBs);

            crtRow.setAttribute("TaxExmptFlg", TrRow.getAttribute("ExmptFlg"));
            crtRow.setAttribute("TaxRuleFlg", TrRow.getAttribute("TaxRuleFlg"));
            crtRow.setAttribute("TaxRuleId", TrRow.getAttribute("TaxRuleId"));
            crtRow.setAttribute("WhId", this.getMmScIssuVo1().getCurrentRow().getAttribute("WhId"));
            this.getMmScIssuTrVo1().insertRow(crtRow);

            copyTrLinesScoToIssue(DocId, ItemId, ItemUom, DlvSchdlNo);
        }
    }

    /**
     * Copy TR LINES and SCO to Issue Table
     * */
    public void copyTrLinesScoToIssue(String DocId, String ItemId, String ItemUom, Integer DlvSchdlNo) {
        ViewObjectImpl TrVo = this.getMmScoTrLinesViewVo1();
        TrVo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        TrVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        TrVo.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        TrVo.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        TrVo.setNamedWhereClauseParam("BindDocId", DocId);
        TrVo.setNamedWhereClauseParam("BindItemId", ItemId);
        TrVo.executeQuery();
        RowSetIterator TrCr = TrVo.createRowSetIterator(null);
        while (TrCr.hasNext()) {
            Row TrRow = TrCr.next();
            Row crtRow = this.getMmScIssuTrLinesVo1().createRow();
            Integer s_no = serialNumGenerate("MmScIssuTrLinesVo1");

            crtRow.setAttribute("CldId", EbizParams.GLBL_APP_CLD_ID());
            crtRow.setAttribute("DlvSchdlNo", DlvSchdlNo);
            crtRow.setAttribute("DocId", getScIssueTxnDocId());
            crtRow.setAttribute("DocIdSrc", DocId);
            crtRow.setAttribute("ItmId", ItemId);
            crtRow.setAttribute("ItmUom", ItemUom);
            crtRow.setAttribute("OrgId", EbizParams.GLBL_APP_USR_ORG());
            crtRow.setAttribute("SlocId", EbizParams.GLBL_APP_SERV_LOC());

            Number currFact = (Number) this.getMmScIssuVo1().getCurrentRow().getAttribute("CurrConvFctr");
            Number TaxAmtBs = (Number) currFact.multiply((Number) TrRow.getAttribute("TaxAmtSp"));

            crtRow.setAttribute("TaxAmtBs", TaxAmtBs);
            crtRow.setAttribute("TaxAmtSp", TrRow.getAttribute("TaxAmtSp"));
            crtRow.setAttribute("TaxCoaId", TrRow.getAttribute("TaxCoaId"));
            crtRow.setAttribute("TaxId", TrRow.getAttribute("TaxId"));
            //    crtRow.setAttribute("TaxPer", "");
            crtRow.setAttribute("TaxRuleFlg", TrRow.getAttribute("TaxRuleFlg"));
            crtRow.setAttribute("TaxRuleId", TrRow.getAttribute("TaxRuleId"));
            //    crtRow.setAttribute("TaxRulePriority", "");
            crtRow.setAttribute("TaxRuleSlno", s_no);
            crtRow.setAttribute("WhId", this.getMmScIssuVo1().getCurrentRow().getAttribute("WhId"));

            this.getMmScIssuTrLinesVo1().insertRow(crtRow);
        }
    }


    /**Method to generate Serial Number for Table Rows
     * **.
     * @param voName
     */
    public Integer serialNumGenerate(String voName) {
        ViewObject DlvItm = this.findViewObject(voName);
        Integer Srno = 0;
        Integer max = 0;
        DlvItm.setRangeSize(-1);
        Row row[] = DlvItm.getAllRowsInRange();
        for (Row r : row) {
            try {
                Srno = Integer.parseInt(r.getAttribute("TaxRuleSlno").toString());
            } catch (NullPointerException e) {
                Srno = 0;
            }
            if (Srno > max) {
                max = Srno;
            }
        }
        max = max + 1;
        System.out.println("Max Value is-->" + max);
        return max;
    }


    /**
     * Get Available Stock of Items In outward case
     * Call In MmScIssuItm Table On TransAvlQtyForItm Getter In Row Impl Class
     * @ Return
     * */
    public oracle.jbo.domain.Number GetAvailableStockItemOutward(String ItemId, String WhId, String DocId,
                                                                 oracle.jbo.domain.Number UomCovFctr) {
        Integer FyId = (Integer) this.getMmScIssuVo1().getCurrentRow().getAttribute("FyId");
        oracle.jbo.domain.Number RetVal = StaticValue.NUMBER_ZERO;
        try {
            BigDecimal valideQty = (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_GET_AVAIL_STK(?,?,?,?,?,?,?)", new Object[] {
                                                                   EbizParams.GLBL_APP_CLD_ID(),
                                                                   EbizParams.GLBL_APP_SERV_LOC(),
                                                                   EbizParams.GLBL_APP_USR_ORG(), ItemId, WhId, FyId,
                                                                   DocId
            });

            if (valideQty != null)
                RetVal = new oracle.jbo.domain.Number(valideQty);
            if (UomCovFctr != null) {
                RetVal = RetVal.divide(UomCovFctr);
            } else {
                RetVal = RetVal;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return RetVal;
    }


    /**
     * Get Available Stock of Items In Inward Case
     * Call In MmScIssuItm Table On TransAvlQtyForItm Getter In Row Impl Class
     * @ Return
     * */
    public oracle.jbo.domain.Number GetAvailableStockItemInward(String ItemId, String WhId,
                                                                oracle.jbo.domain.Number UomCovFctr, String DocId,
                                                                String check) {
        oracle.jbo.domain.Number RetVal = StaticValue.NUMBER_ZERO;
        try {
            BigDecimal valideQty =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.fn_mm_rqmt_get_avail_stk(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_APP_USR_ORG(), ItemId, WhId,
                                                this.getMmScIssuVo1().getCurrentRow().getAttribute("DocDt"),
                                                this.getMmScIssuVo1().getCurrentRow().getAttribute("EoId"), DocId, check
            });

            if (valideQty != null)
                RetVal = new oracle.jbo.domain.Number(valideQty);
            if (UomCovFctr != null) {
                RetVal = RetVal.divide(UomCovFctr);
            } else {
                RetVal = RetVal;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return RetVal;
    }

    /**
     * Check Lot Bin Status of Item
     * Used In Function for get Available Item Stock
     * */
    public String getItmIssueCheck(Integer slocId, String CldId, String OrgId, String ItmId, String DocId) {
        ViewObjectImpl lotVO = this.getMmScIssuLotVo1();
        lotVO.executeQuery();
        RowQualifier rq = new RowQualifier(lotVO);
        rq.setWhereClause("SlocId=" + slocId + " and CldId='" + CldId + "' and OrgId='" + OrgId + "' and ItmId='" +
                          ItmId + "' and DocId='" + DocId + "'");
        Row fltrdrow[] = lotVO.getFilteredRows(rq);
        // System.out.println("Rq-"+rq.getExprStr()+" tot row in Lot : "+fltrdrow.length);
        if (fltrdrow.length > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    /**
     * Get Item Name
     * This Function used in Row Impl Class of MmScIssuItm To get Name Of Item
     * @ Return
     * */
    public String GetItemName(String ItemId) {
        String ItmDesc = null;
        RowQualifier rq = new RowQualifier(this.getLOVItemNMVo1());
        rq.setWhereClause("ItmId= '" + ItemId + "' and CldId='" + EbizParams.GLBL_APP_CLD_ID() + "' and HoOrgId='" +
                          EbizParams.GLBL_HO_ORG_ID() + "' and SlocId='" + EbizParams.GLBL_APP_SERV_LOC() + "'");
        Row[] fr = this.getLOVItemNMVo1().getFilteredRows(rq);
        for (Row r : fr) {
            ItmDesc = r.getAttribute("ItmDesc").toString();
        }
        return ItmDesc;
    }

    /**
     * Get Item Name Unit of Measurement
     * This Function used in Row Impl Class of MmScIssuItm To get UOM
     * @ Return
     * */
    public String GetItemUom(String uomId) {
        String uomDesc = null;
        RowQualifier rq = new RowQualifier(this.getLOVUomDescVo1());
        rq.setWhereClause("UomId= '" + uomId + "' and CldId='" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId='" +
                          EbizParams.GLBL_APP_SERV_LOC() + "'");
        Row[] fr = this.getLOVUomDescVo1().getFilteredRows(rq);
        for (Row r : fr) {
            uomDesc = r.getAttribute("UomDesc").toString();
        }
        return uomDesc;
    }

    /**
     * Check Item Serialized
     * This Method is using In row impl class of MmScIssuItm to get Item Serialized on getter of TransItmSerializedFlg
     * @ Return
     * */
    public String GetItemSerializedFlag(String ItemId) {
        String SerializedFlag = null;
        RowQualifier rq = new RowQualifier(this.getLOVItemNMVo1());
        rq.setWhereClause("ItmId= '" + ItemId + "' and CldId='" + EbizParams.GLBL_APP_CLD_ID() + "' and HoOrgId='" +
                          EbizParams.GLBL_HO_ORG_ID() + "' and SlocId='" + EbizParams.GLBL_APP_SERV_LOC() + "'");
        Row[] fr = this.getLOVItemNMVo1().getFilteredRows(rq);
        for (Row r : fr) {
            SerializedFlag = r.getAttribute("SerializedFlg").toString();
        }
        return SerializedFlag;
    }

    /**
     * Check Item Pick Order
     * This Method is using In row impl class of MmScIssuItm to get Item Pick Order on getter of TransItmPickOrder
     * @ Return
     * */
    public Integer GetItemPickOrder(String ItemId) {
        Integer PickOrder = 0;
        RowQualifier rq = new RowQualifier(this.getLOVItemNMVo1());
        rq.setWhereClause("ItmId= '" + ItemId + "' and CldId='" + EbizParams.GLBL_APP_CLD_ID() + "' and HoOrgId='" +
                          EbizParams.GLBL_HO_ORG_ID() + "' and SlocId='" + EbizParams.GLBL_APP_SERV_LOC() + "'");
        Row[] fr = this.getLOVItemNMVo1().getFilteredRows(rq);
        for (Row r : fr) {
            PickOrder = Integer.parseInt(r.getAttribute("PickOrder").toString());
        }
        return PickOrder;
    }

    /**
     * Method for Filter Serial Views
     * */
    public void srNoFilterRow() {
        ViewObjectImpl issItm = this.getMmScIssuItmVo1();
        ViewObjectImpl issvo = this.getMmScIssuVo1();
        Row curRow = issItm.getCurrentRow();
        Row issR = issvo.getCurrentRow();
        this.getMmScIssuSrVo1().executeQuery();
        this.getViewMmStkSummSrVO1().setWhereClause("SR_NO NOT IN (SELECT SR_NO from MM$MTL$ISSU$SR where itm_id = '" +
                                                    curRow.getAttribute("ItmId").toString() + "' and doc_id = '" +
                                                    issR.getAttribute("DocId").toString() + "' )");
        this.getViewMmStkSummSrVO1().executeQuery();
    }

    /**
     * Insert Into Sr Table of Items
     * */
    public void insrtSelectSrFrmView() {
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        ViewObjectImpl mtlSr = this.getMmScIssuSrVo1();
        ViewObjectImpl mtlBin = this.getMmScIssuBinVo1();
        ViewObjectImpl mtlLot = this.getMmScIssuLotVo1();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummSrVO1();
        Row currItm = mtlItm.getCurrentRow();
        String binChkFlg = (String) resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = this.getViewMmStkSummSrVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println("lenth sr     " + srRow.length);

        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("TransSelectSrCB") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("TransSelectSrCB").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        System.out.println("lot id new    " + lotId);
                    }
                }
            }
            System.out.println(" array size " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {

            }
            System.out.println(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                System.out.println(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    Number prLotVal = (Number) r.getAttribute("IssuQty");
                    //  Number prLotValBs = (Number)r.getAttribute("IssuQtyBs");
                    Number newQty = prLotVal.add(lotvalu);
                    System.out.println("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("IssuQty", newQty);
                    r.setAttribute("IssuQtyBs", newQty);
                }
            } else {
                System.out.println("CREATE NEW  LOT-----");
                Row insrtLot = mtlLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("IssuQty", lotvalu);
                insrtLot.setAttribute("IssuQtyBs", lotvalu);
                insrtLot.setAttribute("DocDtSrc", this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"));
                insrtLot.setAttribute("ItmUom", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                insrtLot.setAttribute("DlvSchdlNo",
                                      this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                mtlLot.insertRow(insrtLot);
                mtlLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        System.out.println("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                System.out.println("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("TransSelectSrCB") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("TransSelectSrCB").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = new Number(0);
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(mtlBin);
                    rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                    System.out.println("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        System.out.println("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("IssuQty");
                            Number newQty = prBinVal.add(binvalu);
                            System.out.println("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("IssuQty", newQty);
                            r.setAttribute("IssuQtyBs", newQty);
                        }
                    } else {
                        System.out.println("BIN CREATE FOR THIS LOT -----");
                        Row binInst = mtlBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("IssuQty", binvalu);
                        binInst.setAttribute("IssuQtyBs", binvalu);
                        binInst.setAttribute("DocDtSrc",
                                             this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"));
                        binInst.setAttribute("ItmUom", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                        binInst.setAttribute("DlvSchdlNo",
                                             this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                        mtlBin.insertRow(binInst);
                        mtlBin.executeQuery();
                        System.out.println(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
                System.out.println("" + arrListbin);
                System.out.println("" + binSet);

            }

        }

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransSelectSrCB") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("TransSelectSrCB").toString())) {
                        System.out.println("Condition true create sr");
                        Row srInst = mtlSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("SrQty", new Number(1));
                        srInst.setAttribute("SrQtyBs", new Number(1));
                        srInst.setAttribute("DocDtSrc",
                                            this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"));
                        srInst.setAttribute("ItmUom", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                        srInst.setAttribute("DlvSchdlNo",
                                            this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                        mtlSr.insertRow(srInst);
                        mtlSr.executeQuery();
                    }
                }
            }
        }
        this.getDBTransaction().postChanges();
    }

    public void resetViewLotBinValue() {
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        ViewObjectImpl srcVo = this.getMmScIssuSrcVo1();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] binRow = this.getViewMmStkSummBinVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        r1.setAttribute("TransIssueQty", zero);
                    }
                }
            }
        }
    }

    /**
     * Insert In Bin Table
     * */
    public void insrtSelectedBinForView() {
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        ViewObjectImpl mtlBin = this.getMmScIssuBinVo1();
        ViewObjectImpl srcVo = this.getMmScIssuSrcVo1();
        ViewObjectImpl mtlLot = this.getMmScIssuLotVo1();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummBinVO1();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] binRow = this.getViewMmStkSummBinVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println("lenth sr     " + binRow.length);
        System.out.println(" src " + currSrc.getAttribute("DocDtSrc"));
        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        System.out.println("lot id new    " + lotId);
                    }
                }
            }
            System.out.println(" array size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        // for(String kay : lotset){
        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            System.out.println(" lot id   ---" + lotId + "----qty------" + lotQty);
            // Check lot already created or not
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("IssuQty", lotQty);
                    r.setAttribute("IssuQtyBs", lotQty);
                }
            } else {
                Row instLot = mtlLot.createRow();
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("IssuQty", lotQty);
                instLot.setAttribute("IssuQtyBs", lotQty);
                instLot.setAttribute("DocDtSrc", currSrc.getAttribute("DocDtSrc"));
                instLot.setAttribute("ItmUom", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                instLot.setAttribute("DlvSchdlNo", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                mtlLot.insertRow(instLot);
                mtlLot.executeQuery();
            }
        }
        System.out.println("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        System.out.println("Condition true create sr");

                        // check bin already created or not
                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") +
                                                    "' and ItmId = '" + currItm.getAttribute("ItmId") +
                                                    "' and LotId = '" + rr.getAttribute("LotId").toString() +
                                                    "' and BinId = '" + rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        System.out.println("" + rowQualifier.getExprStr());
                        System.out.println("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    System.out.println("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    System.out.println("row update ----------");
                                    r.setAttribute("IssuQty", rr.getAttribute("TransIssueQty"));
                                    r.setAttribute("IssuQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                System.out.println("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("IssuQty", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("IssuQtyBs", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("DocDtSrc", currSrc.getAttribute("DocDtSrc"));
                                binInst.setAttribute("ItmUom",
                                                     this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                                binInst.setAttribute("DlvSchdlNo",
                                                     this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                                mtlBin.insertRow(binInst);
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        this.getDBTransaction().postChanges();
    }

    public void resetViewLotValue() {
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        ViewObjectImpl srcVo = this.getMmScIssuSrcVo1();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] srRow = this.getViewMmStkSummLotVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {
                        rr.setAttribute("TransIssuQtyValue", zero);
                    }
                }
            }
        }
    }

    public void setViewLotValue() {
        ViewObjectImpl iss = this.getMmScIssuVo1();
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        ViewObjectImpl srcVo = this.getMmScIssuSrcVo1();
        ViewObjectImpl mainLot = this.getMmScIssuLotVo1();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Row issR = iss.getCurrentRow();
        Number zero = new Number(0);
        // Row [] srRow = this.getViewMmStkSummLot().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        Row[] lotRow = this.getMmScIssuLotVo1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println("  lotRow " + lotRow.length);
        if (lotRow.length > 0) {
            for (Row rr1 : lotRow) {
                if (rr1.getAttribute("IssuQtyBs") != null) {
                    if (((Number) rr1.getAttribute("IssuQtyBs")).compareTo(zero) >= 0) {
                        RowQualifier rq = new RowQualifier(this.getViewMmStkSummLotVO1());
                        rq.setWhereClause("OrgId = '" + issR.getAttribute("OrgId").toString() + "' and ItmId= '" +
                                          rr1.getAttribute("ItmId").toString() + "' and LotId ='" +
                                          rr1.getAttribute("LotId").toString() + "'");
                        System.out.println("sy  " + rq.getExprStr());
                        Row[] viewLot = this.getViewMmStkSummLotVO1().getFilteredRows(rq);
                        if (viewLot.length > 0) {
                            for (Row rr2 : viewLot) {
                                System.out.println("rr1.getAttribute(\"IssuQtyBs\")   " +
                                                   rr1.getAttribute("IssuQtyBs"));
                                rr2.setAttribute("TransIssuQtyValue", rr1.getAttribute("IssuQtyBs"));
                            }
                        }
                    }

                }
            }
        }
    }

    /**
     * Insert Data In Lot Table
     * */
    public void insrtSelectedLotForView() {
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        ViewObjectImpl mtlLot = this.getMmScIssuLotVo1();
        ViewObjectImpl srcVo = this.getMmScIssuSrcVo1();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummLotVO1();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] srRow = this.getViewMmStkSummLotVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println("lenth sr     " + srRow.length);
        System.out.println("doc date src     " + currItm.getAttribute("DocDtSrc") + " src " +
                           currSrc.getAttribute("DocDtSrc"));
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {
                        // Filter Lot Table to ckeck Lot exist or not Basis of DocId , DocIdSrc , ItmId and LotId
                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and DocIdSrc ='" +
                                                    currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        System.out.println("" + rowQualifier.getExprStr());
                        // Check for Lot are exist or not
                        if (rows.length > 0) {
                            // Lot Already created
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) == 0) {
                                    // if Exist Check Lot issue Quantity if 0 Remove lot
                                    System.out.println("Lot remove-------------------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                    // if Exist Check Lot issue Quantity if issue Quantity greater than 0 update Quantity.
                                    System.out.println("Lot Update -------------------");
                                    r.setAttribute("IssuQty", rr.getAttribute("TransIssuQtyValue"));
                                    r.setAttribute("IssuQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                }
                            }
                        } else {
                            // Lot not Exist
                            if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                // If Issue Quantity greater than 0 Create Lot
                                System.out.println("Condition true create lot");
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("IssuQty", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("IssuQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                                lotInst.setAttribute("ItmUom",
                                                     this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                                lotInst.setAttribute("DlvSchdlNo",
                                                     this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                                mtlLot.insertRow(lotInst);
                                mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }
    }


    /**
     * Method for Auto Issue of Items
     * */
    public Integer autoIssueItemfromSystem() {
        ViewObjectImpl mtlIssu = this.getMmScIssuVo1();
        // ViewObjectImpl mtlSrc = this.getMmScIssuSrcVo1();
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        Row currIssu = mtlIssu.getCurrentRow();
        //  Row currSrc = mtlSrc.getCurrentRow();
        Row currItm = mtlItm.getCurrentRow();
        String binChkFlg = (String) resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Number uomCovrFctr = (Number) currItm.getAttribute("UomConvFctr");
        Number issQty = (Number) currItm.getAttribute("IssuQty");
        Integer retVal = null;

        System.out.println("binChkFlg-----" + binChkFlg + "wh ---" + currIssu.getAttribute("WhId") + "itm   " +
                           currItm.getAttribute("ItmId") + "pic or  " + currItm.getAttribute("TransItmPickOrder") +
                           "serial  " + currItm.getAttribute("TransItmSerializedFlg") + "fact  " + uomCovrFctr +
                           " doc id Src " + currItm.getAttribute("DocIdSrc") + " doc id  " +
                           currIssu.getAttribute("DocId"));
        if (uomCovrFctr != null) {
            this.getDBTransaction().postChanges();
            retVal =
                Integer.parseInt(callStoredFunction(Types.NUMERIC,
                                                    "MM.MM_SC_ISSU_AUTO (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    currIssu.getAttribute("CldId").toString(),
                                                    Integer.parseInt(currIssu.getAttribute("SlocId").toString()),
                                                    currIssu.getAttribute("OrgId").toString(),
                                                    currIssu.getAttribute("WhId").toString(),
                                                    currItm.getAttribute("ItmId").toString(), issQty,
                                                    Integer.parseInt(currItm.getAttribute("TransItmPickOrder").toString()),
                                                    currItm.getAttribute("TransItmSerializedFlg").toString(), binChkFlg,
                                                    currIssu.getAttribute("DocId").toString(),
                                                    currItm.getAttribute("DocIdSrc").toString(),
                                                    this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"),
                                                    currItm.getAttribute("ItmUomBs").toString(),
                                                    currItm.getAttribute("ItmUom").toString(), uomCovrFctr, "I",
                                                    Integer.parseInt(currItm.getAttribute("DlvSchdlNo").toString())
            }).toString());
        }
        if (retVal == 1) {
            this.getMmScIssuLotVo1().executeQuery();
            if ("Y".equalsIgnoreCase(binChkFlg)) {
                this.getMmScIssuBinVo1().executeQuery();
            }
            this.getMmScIssuSrVo1().executeQuery();
        }
        System.out.println("return value from function ----    " + retVal);
        return retVal;
    }

    /**
     * Method to validate Header
     * 1 - WareHouse mot selected
     * 2 - Type is not selected
     * 3 - EoId is not selected
     * 4 - Currency not selected
     * @return
     */
    public Integer validateHeaderMandatoryFields() {
        Integer i = 0;
        Row cRw = this.getMmScIssuVo1().getCurrentRow();
        Object WhId = cRw.getAttribute("WhId");
        Object PrjId = cRw.getAttribute("PrjId");
        Object ScType = cRw.getAttribute("ScType");
        Object EoId = cRw.getAttribute("EoId");
        Object CurrIdSp = cRw.getAttribute("CurrIdSp");

        Object wh_id = (WhId == null ? -1 : (Object) WhId);
        Object prj_id = (PrjId == null ? -1 : (Object) PrjId);
        Integer sc_type = (ScType == null ? -1 : (Integer) ScType);
        Integer eId = (EoId == null ? -1 : (Integer) EoId);
        Integer CurrId = (CurrIdSp == null ? -1 : (Integer) CurrIdSp);

        if (wh_id.equals(-1)) {
            i = 1;
        } else if (prj_id.equals(-1)) {
            i = 2;
        } else if (sc_type.equals(-1)) {
            i = 3;
        } else if (eId.equals(-1)) {
            i = 4;
        } else if (CurrId.equals(-1)) {
            i = 5;
        }
        return i;
    }

    /**
     * Method to validate Source Document
     * */
    public Integer ValidateSourceDocuments() {
        Integer i = 0;
        Row currentRow = this.getTempSubContractOrdrVo1().getCurrentRow();
        Object ScDocId = currentRow.getAttribute("TransScoDocId");
        Object delNo = currentRow.getAttribute("TransDelvrySchdlNo");
        Object sc_doc_id = (ScDocId == null ? -1 : (Object) ScDocId);
        Object delv_no = (delNo == null ? -1 : (Object) delNo);

        RowQualifier Rw = new RowQualifier(this.getMmScIssuSrcVo1());
        Rw.setWhereClause("DocIdSrc = '" + ScDocId + "' and DlvSchdlNo='" + delNo + "'");
        Row[] filteredRows = this.getMmScIssuSrcVo1().getFilteredRows(Rw);
        Integer Fr = filteredRows.length;
        Object len = (Fr.compareTo(0) > 0 ? -1 : Fr);

        if (sc_doc_id.equals(-1)) {
            return 1;
        } else if (delv_no.equals(-1)) {
            return 2;
        } else if (len.equals(-1)) {
            return 3;
        }
        return i;
    }

    /**
     * Validate Issue Item Quantity
     * */
    public Integer ValidateIssueItemQuantity() {
        Integer i = 0;
        Row currentRow = this.getMmScIssuItmVo1().getCurrentRow();
        Number Pend_Qty = (Number) currentRow.getAttribute("PendQty");
        Number PendQty = checkTolerance(Pend_Qty, currentRow);
        Number IssuQty = (Number) currentRow.getAttribute("IssuQty");
        Number avlStk = (Number) currentRow.getAttribute("TransAvlQtyForItm");

        Object a = (avlStk.compareTo(0) == 0 ? -1 : avlStk);
        Object b =
            (IssuQty == null ? -1 :
             IssuQty.compareTo(0) == 0 ? -2 :
             IssuQty.compareTo(0) < 0 ? -3 : IssuQty.compareTo(PendQty) > 0 ? -4 : IssuQty);

        if (a.equals(-1)) {
            return 1;
        } else if (b.equals(-1)) {
            return 2;
        } else if (b.equals(-2)) {
            return 3;
        } else if (b.equals(-3)) {
            return 4;
        } else if (b.equals(-4)) {
            return 5;
        }
        return i;
    }

    /**
     * Method for tolerance Type In Issue
     * row parameter added by MS  on 3 oct
     * */
    public Number checkTolerance(Number PendQty, Row row) {
        Number RetVal = StaticValue.NUMBER_ZERO;
        String TlrncQtyType = null;
        Number TlrncQtyVal = StaticValue.NUMBER_ZERO;
        Row currentRow = this.getMmScIssuItmVo1().getCurrentRow();
        System.out.println("Row is " + currentRow);
        currentRow = currentRow == null ? row : currentRow;
        RowQualifier rq = new RowQualifier(this.getLOVMMScOpItmToleranceVo1());
        rq.setWhereClause("CldId = '" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId = '" +
                          EbizParams.GLBL_APP_SERV_LOC() + "' and HoOrgId = '" + EbizParams.GLBL_HO_ORG_ID() +
                          "' and OrgId='" + EbizParams.GLBL_APP_USR_ORG() + "' and DocId = '" +
                          currentRow.getAttribute("DocIdSrc") + "' and ItmId='" + currentRow.getAttribute("ItmId") +
                          "'");
        Row[] fr = this.getLOVMMScOpItmToleranceVo1().getFilteredRows(rq);
        for (Row r : fr) {
            TlrncQtyType = (String) r.getAttribute("TlrncQtyType");
            TlrncQtyVal = (Number) r.getAttribute("TlrncQtyVal");
        }
        if (TlrncQtyType.equals("A")) {
            RetVal = PendQty.add(TlrncQtyVal);
        }
        if (TlrncQtyType.equals("P")) {
            Number val = PendQty.multiply(TlrncQtyVal);
            Number val2 = val.divide(val);
            RetVal = PendQty.add(val2);
        }
        return RetVal;
    }

    /**
     * Validate Item Lot Bin Entry
     * */
    public String ValidateItemLotBinEntry() {
        ArrayList<String> al = new ArrayList<String>();
        RowQualifier rqq = new RowQualifier(this.getMmScIssuItmVo2());
        rqq.setWhereClause("DocId = '" + getScIssueTxnDocId() + "'");
        Row fr[] = this.getMmScIssuItmVo2().getFilteredRows(rqq);
        for (Row r : fr) {
            Object itmId = r.getAttribute("ItmId");
            al.add(itmId.toString());
        }
        for (String val : al) {
            ViewObjectImpl voVal = this.getMmScIssuLotVo2();
            voVal.executeQuery();
            RowQualifier rq = new RowQualifier(voVal);
            rq.setWhereClause("DocId = '" + getScIssueTxnDocId() + "' and ItmId='" + val + "'");
            Row fltrdrow[] = voVal.getFilteredRows(rq);
            if (fltrdrow.length <= 0) {
                ViewObjectImpl il = this.getLOVgetItemNmVo1();
                il.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
                il.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
                il.setNamedWhereClauseParam("BindItemId", val);
                il.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
                il.executeQuery();
                Row[] aR = il.getAllRowsInRange();
                if (aR.length > 0) {
                    return aR[0].getAttribute("ItmDesc").toString();
                }
            }
        }
        return "Y";
    }


    /**
     * After Release Button Click Call Function.
     * */
    public void ReleaseCallFunctions() {
        this.getDBTransaction().commit();
        if (updateItemStockOnRelease()) {
            this.getMmScIssuVo1().getCurrentRow().setAttribute("IssuStat", 851);
            this.getDBTransaction().commit();
        }
    }

    /**
     * Stock Entry Updation PL/SQL Function Call
     * */
    public Boolean updateItemStockOnRelease() {
        Object val;
        try {
            Integer sctype = Integer.parseInt(this.getMmScIssuVo1().getCurrentRow().getAttribute("ScType").toString());
            val = callStoredFunction(NUMBER, "MM.FN_MM_SC_ISSU_RCPT_TO_RQMT(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                     EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                     EbizParams.GLBL_APP_USR_ORG(),
                                     this.getMmScIssuVo1().getCurrentRow().getAttribute("WhId").toString(),
                                     this.getMmScIssuVo1().getCurrentRow().getAttribute("DocId").toString(),
                                     this.getMmScIssuVo1().getCurrentRow().getAttribute("DocDt"), "I",
                                     Integer.parseInt(this.getMmScIssuVo1().getCurrentRow().getAttribute("UsrIdCrt").toString()),
                                     this.getMmScIssuVo1().getCurrentRow().getAttribute("CrtDt"),
                                     Integer.parseInt(this.getMmScIssuVo1().getCurrentRow().getAttribute("EoId").toString()),
                                     sctype
            });
            if (val == 1) {
                return true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return false;
    }

    /**
     * Delete Source Document
     * */
    public void DeleteSourceDocument() {
        ArrayList<String> AL = new ArrayList<String>();

        RowSetIterator Crs = this.getMmScIssuItmVo1().createRowSetIterator(null);
        while (Crs.hasNext()) {
            Row next = Crs.next();
            AL.add(next.getAttribute("ItmId").toString());
            next.remove();
        }
        Crs.closeRowSetIterator();

        this.getMmScIssuSrcVo1().getCurrentRow().remove();

        for (String ItemId : AL) {
            RowQualifier rq = new RowQualifier(this.getMmScIssuTrLinesVo1());
            rq.setWhereClause("DocId = '" + getScIssueTxnDocId() + "' and ItmId = '" + ItemId + "'");
            Row fr[] = this.getMmScIssuTrLinesVo1().getFilteredRows(rq);
            for (Row r : fr) {
                r.remove();
            }

            RowQualifier rq1 = new RowQualifier(this.getMmScIssuTrVo1());
            rq1.setWhereClause("DocId = '" + getScIssueTxnDocId() + "' and ItmId = '" + ItemId + "'");
            Row fr1[] = this.getMmScIssuTrVo1().getFilteredRows(rq1);
            for (Row s : fr1) {
                s.remove();
            }
        }
    }

    /**
     * Delete Lot Entry
     * */
    public void DeleteLotEntry() {
        RowSetIterator C1 = this.getMmScIssuSrVo1().createRowSetIterator(null);
        while (C1.hasNext()) {
            Row n1 = C1.next();
            n1.remove();
        }
        C1.closeRowSetIterator();
        this.getMmScIssuSrVo1().executeQuery();

        RowSetIterator C3 = this.getMmScIssuBinVo1().createRowSetIterator(null);
        while (C3.hasNext()) {
            Row n3 = C3.next();
            n3.remove();
        }
        C3.closeRowSetIterator();
        this.getMmScIssuBinVo1().executeQuery();

        RowSetIterator C2 = this.getMmScIssuLotVo1().createRowSetIterator(null);
        while (C2.hasNext()) {
            Row n2 = C2.next();
            n2.remove();
        }
        C2.closeRowSetIterator();
        this.getMmScIssuLotVo1().executeQuery();
    }

    /**
     * Filter Reqmt Views
     * */
    public void FilterRqmtViews(String VoName) {
        ViewObject vo = this.findViewObject(VoName);
        vo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        vo.setNamedWhereClauseParam("BindItmId",
                                    this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmId").toString());
        vo.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        vo.setNamedWhereClauseParam("BindReqArId",
                                    Integer.parseInt(this.getMmScIssuVo1().getCurrentRow().getAttribute("EoId").toString()));
        vo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        vo.setNamedWhereClauseParam("BindWhId",
                                    this.getMmScIssuItmVo1().getCurrentRow().getAttribute("WhId").toString());
        vo.executeQuery();
        System.out.println("No of Rows Found In : " + VoName + "----" + vo.getRowCount());
    }

    /**
     * Insert Into Sr Table of Items In Case of Inward
     * */
    public void insrtSelectSrFrmViewInward() {
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        ViewObjectImpl mtlSr = this.getMmScIssuSrVo1();
        ViewObjectImpl mtlBin = this.getMmScIssuBinVo1();
        ViewObjectImpl mtlLot = this.getMmScIssuLotVo1();
        ViewObjectImpl viewSummSr = this.getViewMmItmStkSrRqmtVwVO1();
        Row currItm = mtlItm.getCurrentRow();
        String binChkFlg = (String) resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = this.getViewMmItmStkSrRqmtVwVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println("lenth sr     " + srRow.length);

        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("TransSelectSrCBInward") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("TransSelectSrCBInward").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        System.out.println("lot id new    " + lotId);
                    }
                }
            }
            System.out.println(" array size " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {

            }
            System.out.println(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                System.out.println(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    Number prLotVal = (Number) r.getAttribute("IssuQty");
                    //  Number prLotValBs = (Number)r.getAttribute("IssuQtyBs");
                    Number newQty = prLotVal.add(lotvalu);
                    System.out.println("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("IssuQty", newQty);
                    r.setAttribute("IssuQtyBs", newQty);
                }
            } else {
                System.out.println("CREATE NEW  LOT-----");
                Row insrtLot = mtlLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("IssuQty", lotvalu);
                insrtLot.setAttribute("IssuQtyBs", lotvalu);
                insrtLot.setAttribute("DocDtSrc", this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"));
                insrtLot.setAttribute("ItmUom", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                insrtLot.setAttribute("DlvSchdlNo",
                                      this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                mtlLot.insertRow(insrtLot);
                mtlLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        System.out.println("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                System.out.println("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("TransSelectSrCBInward") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("TransSelectSrCBInward").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = new Number(0);
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(mtlBin);
                    rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                    System.out.println("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        System.out.println("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("IssuQty");
                            Number newQty = prBinVal.add(binvalu);
                            System.out.println("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("IssuQty", newQty);
                            r.setAttribute("IssuQtyBs", newQty);
                        }
                    } else {
                        System.out.println("BIN CREATE FOR THIS LOT -----");
                        Row binInst = mtlBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("IssuQty", binvalu);
                        binInst.setAttribute("IssuQtyBs", binvalu);
                        binInst.setAttribute("DocDtSrc",
                                             this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"));
                        binInst.setAttribute("ItmUom", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                        binInst.setAttribute("DlvSchdlNo",
                                             this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                        mtlBin.insertRow(binInst);
                        mtlBin.executeQuery();
                        System.out.println(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
                System.out.println("" + arrListbin);
                System.out.println("" + binSet);

            }

        }

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransSelectSrCBInward") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("TransSelectSrCBInward").toString())) {
                        System.out.println("Condition true create sr");
                        Row srInst = mtlSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("SrQty", new Number(1));
                        srInst.setAttribute("SrQtyBs", new Number(1));
                        srInst.setAttribute("DocDtSrc",
                                            this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"));
                        srInst.setAttribute("ItmUom", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                        srInst.setAttribute("DlvSchdlNo",
                                            this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                        mtlSr.insertRow(srInst);
                        mtlSr.executeQuery();
                    }
                }
            }
        }
        this.getDBTransaction().postChanges();
    }

    /**
     * Method for Auto Issue of Items
     * */
    public Integer autoIssueItemfromSystemInward() {
        ViewObjectImpl mtlIssu = this.getMmScIssuVo1();
        ViewObjectImpl mtlSrc = this.getMmScIssuSrcVo1();
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        Row currIssu = mtlIssu.getCurrentRow();
        Row currSrc = mtlSrc.getCurrentRow();
        Row currItm = mtlItm.getCurrentRow();
        String binChkFlg = (String) resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Number uomCovrFctr = (Number) currItm.getAttribute("UomConvFctr");
        Number issQty = (Number) currItm.getAttribute("IssuQty");
        Integer retVal = null;

        System.out.println("binChkFlg-----" + binChkFlg + "wh ---" + currIssu.getAttribute("WhId") + "itm   " +
                           currItm.getAttribute("ItmId") + "pic or  " + currItm.getAttribute("TransItmPickOrder") +
                           "serial  " + currItm.getAttribute("TransItmSerializedFlg") + "fact  " + uomCovrFctr +
                           " doc id Src " + currItm.getAttribute("DocIdSrc") + " doc id  " +
                           currIssu.getAttribute("DocId"));
        if (uomCovrFctr != null) {
            this.getDBTransaction().postChanges();
            retVal =
                Integer.parseInt(callStoredFunction(Types.NUMERIC,
                                                    "MM.fn_mm_sc_issu_auto_rqmt (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    currIssu.getAttribute("CldId").toString(),
                                                    Integer.parseInt(currIssu.getAttribute("SlocId").toString()),
                                                    currIssu.getAttribute("HoOrgId").toString(),
                                                    currIssu.getAttribute("OrgId").toString(),
                                                    currIssu.getAttribute("WhId").toString(),
                                                    currItm.getAttribute("ItmId").toString(), issQty,
                                                    Integer.parseInt(currItm.getAttribute("TransItmPickOrder").toString()),
                                                    currItm.getAttribute("TransItmSerializedFlg").toString(), binChkFlg,
                                                    currIssu.getAttribute("DocId").toString(),
                                                    currItm.getAttribute("ItmUomBs").toString(),
                                                    currItm.getAttribute("ItmUom").toString(), uomCovrFctr,
                                                    Integer.parseInt(currIssu.getAttribute("EoId").toString()),
                                                    Integer.parseInt(currItm.getAttribute("DlvSchdlNo").toString()),
                                                    currItm.getAttribute("DocIdSrc").toString(),
                                                    this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"),
            }).toString());
        }
        if (retVal == 1) {
            this.getMmScIssuLotVo1().executeQuery();
            if ("Y".equalsIgnoreCase(binChkFlg)) {
                this.getMmScIssuBinVo1().executeQuery();
            }
            this.getMmScIssuSrVo1().executeQuery();
        }
        System.out.println("return value from function ----    " + retVal);
        return retVal;
    }


    /**
     * Insert In Bin Table
     * */
    public void insrtSelectedBinForViewInward() {
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        ViewObjectImpl mtlBin = this.getMmScIssuBinVo1();
        ViewObjectImpl srcVo = this.getMmScIssuSrcVo1();
        ViewObjectImpl mtlLot = this.getMmScIssuLotVo1();
        ViewObjectImpl viewSummSr = this.getViewMmItmStkBinRqmtVwVO1();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] binRow = this.getViewMmItmStkBinRqmtVwVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println("lenth sr     " + binRow.length);
        System.out.println(" src " + currSrc.getAttribute("DocDtSrc"));
        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQtyInward") != null) {
                    if (((Number) r1.getAttribute("TransIssueQtyInward")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        System.out.println("lot id new    " + lotId);
                    }
                }
            }
            System.out.println(" array size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        // for(String kay : lotset){
        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQtyInward") != null) {
                    if (((Number) r1.getAttribute("TransIssueQtyInward")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQtyInward"));
                    }
                }
            }
            System.out.println(" lot id   ---" + lotId + "----qty------" + lotQty);
            // Check lot already created or not
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            System.out.println("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("IssuQty", lotQty);
                    r.setAttribute("IssuQtyBs", lotQty);
                }
            } else {
                Row instLot = mtlLot.createRow();
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("IssuQty", lotQty);
                instLot.setAttribute("IssuQtyBs", lotQty);
                instLot.setAttribute("DocDtSrc", currSrc.getAttribute("DocDtSrc"));
                instLot.setAttribute("ItmUom", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                instLot.setAttribute("DlvSchdlNo", this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                mtlLot.insertRow(instLot);
                mtlLot.executeQuery();
            }
        }
        System.out.println("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQtyInward") != null) {
                    if (((Number) rr.getAttribute("TransIssueQtyInward")).compareTo(zero) >= 0) {
                        System.out.println("Condition true create sr");

                        // check bin already created or not
                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") +
                                                    "' and ItmId = '" + currItm.getAttribute("ItmId") +
                                                    "' and LotId = '" + rr.getAttribute("LotId").toString() +
                                                    "' and BinId = '" + rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        System.out.println("" + rowQualifier.getExprStr());
                        System.out.println("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQtyInward")).compareTo(zero) == 0) {
                                    System.out.println("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQtyInward")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    System.out.println("row update ----------");
                                    r.setAttribute("IssuQty", rr.getAttribute("TransIssueQtyInward"));
                                    r.setAttribute("IssuQtyBs", rr.getAttribute("TransIssueQtyInward"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQtyInward")).compareTo(zero) > 0) {
                                System.out.println("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("IssuQty", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("IssuQtyBs", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("DocDtSrc", currSrc.getAttribute("DocDtSrc"));
                                binInst.setAttribute("ItmUom",
                                                     this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                                binInst.setAttribute("DlvSchdlNo",
                                                     this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                                mtlBin.insertRow(binInst);
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        this.getDBTransaction().postChanges();
    }

    /**
     * Insert Data In Lot Table
     * */
    public void insrtSelectedLotForViewInward() {
        ViewObjectImpl mtlItm = this.getMmScIssuItmVo1();
        ViewObjectImpl mtlLot = this.getMmScIssuLotVo1();
        ViewObjectImpl srcVo = this.getMmScIssuSrcVo1();
        ViewObjectImpl viewSummSr = this.getViewMmItmStkLotRqmtVwVO1();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] srRow = this.getViewMmItmStkLotRqmtVwVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        System.out.println("lenth sr     " + srRow.length);
        System.out.println("doc date src     " + currItm.getAttribute("DocDtSrc") + " src " +
                           currSrc.getAttribute("DocDtSrc"));
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValueInward") != null) {
                    if (((Number) rr.getAttribute("TransIssuQtyValueInward")).compareTo(zero) >= 0) {
                        // Filter Lot Table to ckeck Lot exist or not Basis of DocId , DocIdSrc , ItmId and LotId
                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and DocIdSrc ='" +
                                                    currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        System.out.println("" + rowQualifier.getExprStr());
                        // Check for Lot are exist or not
                        if (rows.length > 0) {
                            // Lot Already created
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssuQtyValueInward")).compareTo(zero) == 0) {
                                    // if Exist Check Lot issue Quantity if 0 Remove lot
                                    System.out.println("Lot remove-------------------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssuQtyValueInward")).compareTo(zero) > 0) {
                                    // if Exist Check Lot issue Quantity if issue Quantity greater than 0 update Quantity.
                                    System.out.println("Lot Update -------------------");
                                    r.setAttribute("IssuQty", rr.getAttribute("TransIssuQtyValueInward"));
                                    r.setAttribute("IssuQtyBs", rr.getAttribute("TransIssuQtyValueInward"));
                                }
                            }
                        } else {
                            // Lot not Exist
                            if (((Number) rr.getAttribute("TransIssuQtyValueInward")).compareTo(zero) > 0) {
                                // If Issue Quantity greater than 0 Create Lot
                                System.out.println("Condition true create lot");
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("IssuQty", rr.getAttribute("TransIssuQtyValueInward"));
                                lotInst.setAttribute("IssuQtyBs", rr.getAttribute("TransIssuQtyValueInward"));
                                lotInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                                lotInst.setAttribute("ItmUom",
                                                     this.getMmScIssuItmVo1().getCurrentRow().getAttribute("ItmUom"));
                                lotInst.setAttribute("DlvSchdlNo",
                                                     this.getMmScIssuItmVo1().getCurrentRow().getAttribute("DlvSchdlNo"));
                                mtlLot.insertRow(lotInst);
                                mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }
    }

    /**
     * Function Call On save and save&forward for back update
     * */
    public void backUpdateOrder() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String scoId = null;
        Integer delNo = null;
        String docId = this.getMmScIssuVo1().getCurrentRow().getAttribute("DocId").toString();
        Integer type = (Integer) this.getMmScIssuVo1().getCurrentRow().getAttribute("ScType");
        RowSetIterator iter = this.getMmScIssuSrcVo1().createRowSetIterator(null);
        MmScIssuSrcVoRowImpl row = null;
        while (iter.hasNext()) {
            row = (MmScIssuSrcVoRowImpl) iter.next();
            scoId = row.getDocIdSrc();
            delNo = row.getDlvSchdlNo();
            callStoredFunction(Types.NUMERIC, "mm.fn_mm_src_to_sco_back_upd_stat(?,?,?,?,?,?,?,?,?)", new Object[] {
                               cldId, slocId, hoOrgId, orgId, scoId, type, docId, 36502, delNo
            });
        }

    }

    /**
     * Delete UnIssue Sub contracting material(Item)
     * Delete Order which has Zero quantity
     * */
    public void deleteUnissueOrderAndItem() {

        RowQualifier rq = new RowQualifier(this.getMmScIssuItmVo2());
        rq.setWhereClause("DocId = '" + getScIssueTxnDocId() + "' and IssuQty = '" + 0 + "'");
        Row fr[] = this.getMmScIssuItmVo2().getFilteredRows(rq);
        for (Row r : fr) {
            String S1 = r.getAttribute("DocIdSrc").toString();
            String S2 = r.getAttribute("ItmId").toString();
            Integer I = Integer.parseInt(r.getAttribute("DlvSchdlNo").toString());

            RowQualifier rqq = new RowQualifier(this.getMmScIssuTrLinesVo1());
            rqq.setWhereClause("DocId = '" + getScIssueTxnDocId() + "' and ItmId = '" + S2 + "'and DlvSchdlNo = '" + I +
                               "'");
            Row frr[] = this.getMmScIssuTrLinesVo1().getFilteredRows(rqq);
            for (Row rr : frr) {
                rr.remove();
            }

            RowQualifier rrq = new RowQualifier(this.getMmScIssuTrVo1());
            rrq.setWhereClause("DocId = '" + getScIssueTxnDocId() + "' and ItmId = '" + S2 + "'and DlvSchdlNo = '" + I +
                               "'");
            Row ffr[] = this.getMmScIssuTrVo1().getFilteredRows(rrq);
            for (Row ss : ffr) {
                ss.remove();
            }

            RowQualifier rrq1 = new RowQualifier(this.getMmScIssuSrcVo2());
            rrq1.setWhereClause("DocId = '" + getScIssueTxnDocId() + "' and DocIdSrc = '" + S1 +
                                "' and DlvSchdlNo = '" + I + "'");
            Row ffr1[] = this.getMmScIssuSrcVo2().getFilteredRows(rrq1);
            for (Row ss1 : ffr1) {
                ss1.remove();
            }

            r.remove();
        }
    }

    /**
     * Method for Auto issue on single click
     * */
    public Integer AutoIssueOnSingleClick() {
        Integer retVal = null;
        Integer scType = (Integer) this.getMmScIssuVo1().getCurrentRow().getAttribute("ScType");
        if (scType == 827) {
            Row currIssu = this.getMmScIssuVo1().getCurrentRow();
            ViewObjectImpl srcVo = this.getMmScIssuSrcVo1();
            ViewObjectImpl itmvo = this.getMmScIssuItmVo2();
            //Row curritm = this.getMmMtlIssuItm().getCurrentRow();
            String binChkFlg = (String) resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
            if (currIssu != null) {
                String docId = null;
                if (currIssu.getAttribute("DocId") != null)
                    docId = currIssu.getAttribute("DocId").toString();

                if (docId != null) {
                    RowQualifier rq = new RowQualifier(srcVo);
                    rq.setWhereClause("DocId='" + docId + "'");
                    Row[] rr = srcVo.getFilteredRows(rq);
                    System.out.println("src vo filter query " + rr.length);
                    if (rr.length > 0) {
                        this.getDBTransaction().postChanges();
                        String docidSrc = null;
                        for (Row srcr : rr) {
                            if (srcr.getAttribute("DocIdSrc") != null)
                                docidSrc = srcr.getAttribute("DocIdSrc").toString();

                            if (docidSrc != null) {
                                RowQualifier rq1 = new RowQualifier(itmvo);
                                rq1.setWhereClause("DocIdSrc='" + docidSrc + "' and DocId='" + docId +
                                                   "' and (TransItmPickOrder =305 or TransItmPickOrder =306)");
                                Row[] rr1 = itmvo.getFilteredRows(rq1);
                                System.out.println("item row filter query " + rr1.length);
                                if (rr1.length > 0) {
                                    for (Row currItm : rr1) {
                                        Number uomCovrFctr = (Number) currItm.getAttribute("UomConvFctr");
                                        Number pendQty = (Number) currItm.getAttribute("PendQty");
                                        currItm.setAttribute("IssuQty", pendQty);
                                        currItm.setAttribute("IssuQtyBs", pendQty.multiply(uomCovrFctr));

                                        System.out.println("binChkFlg-----" + binChkFlg + "wh ---" +
                                                           currIssu.getAttribute("WhId") + "itm   " +
                                                           currItm.getAttribute("ItmId") + "pic or  " +
                                                           currItm.getAttribute("TransItmPickOrder") + "serial  " +
                                                           currItm.getAttribute("TransItmSerializedFlg") + "fact  " +
                                                           uomCovrFctr + " doc id Src " +
                                                           currItm.getAttribute("DocIdSrc") + " doc id  " +
                                                           currIssu.getAttribute("DocId") + "pending quantity " +
                                                           pendQty + "pick order " +
                                                           currItm.getAttribute("TransItmPickOrder"));
                                        if (uomCovrFctr != null) {

                                            retVal =
                                                Integer.parseInt(callStoredFunction(Types.NUMERIC,
                                                                                    "MM.MM_SC_ISSU_AUTO (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                                    currIssu.getAttribute("CldId").toString(),
                                                                                    Integer.parseInt(currIssu.getAttribute("SlocId").toString()),
                                                                                    currIssu.getAttribute("OrgId").toString(),
                                                                                    currIssu.getAttribute("WhId").toString(),
                                                                                    currItm.getAttribute("ItmId").toString(),
                                                                                    pendQty,
                                                                                    Integer.parseInt(currItm.getAttribute("TransItmPickOrder").toString()),
                                                                                    currItm.getAttribute("TransItmSerializedFlg").toString(),
                                                                                    binChkFlg,
                                                                                    currIssu.getAttribute("DocId").toString(),
                                                                                    currItm.getAttribute("DocIdSrc").toString(),
                                                                                    this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"),
                                                                                    currItm.getAttribute("ItmUomBs").toString(),
                                                                                    currItm.getAttribute("ItmUom").toString(),
                                                                                    uomCovrFctr, "I",
                                                                                    Integer.parseInt(currItm.getAttribute("DlvSchdlNo").toString())
                                            }).toString());
                                        }
                                        System.out.println("all issue record function return " + retVal);
                                        if (retVal == 1) {
                                            this.getMmScIssuLotVo1().executeQuery();
                                            if ("Y".equalsIgnoreCase(binChkFlg)) {
                                                this.getMmScIssuBinVo1().executeQuery();
                                            }
                                            this.getMmScIssuSrVo1().executeQuery();
                                        }

                                    }
                                }
                            }

                        }


                    }
                }

            }
            System.out.println("return value from function ----    " + retVal);
        }
        if (scType == 826) {
            Row currIssu = this.getMmScIssuVo1().getCurrentRow();
            ViewObjectImpl srcVo = this.getMmScIssuSrcVo1();
            ViewObjectImpl itmvo = this.getMmScIssuItmVo2();
            //Row curritm = this.getMmMtlIssuItm().getCurrentRow();
            String binChkFlg = (String) resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
            if (currIssu != null) {
                String docId = null;
                if (currIssu.getAttribute("DocId") != null)
                    docId = currIssu.getAttribute("DocId").toString();

                if (docId != null) {
                    RowQualifier rq = new RowQualifier(srcVo);
                    rq.setWhereClause("DocId='" + docId + "'");
                    Row[] rr = srcVo.getFilteredRows(rq);
                    System.out.println("src vo filter query " + rr.length);
                    if (rr.length > 0) {
                        this.getDBTransaction().postChanges();
                        String docidSrc = null;
                        for (Row srcr : rr) {
                            if (srcr.getAttribute("DocIdSrc") != null)
                                docidSrc = srcr.getAttribute("DocIdSrc").toString();

                            if (docidSrc != null) {
                                RowQualifier rq1 = new RowQualifier(itmvo);
                                rq1.setWhereClause("DocIdSrc='" + docidSrc + "' and DocId='" + docId +
                                                   "' and (TransItmPickOrder =305 or TransItmPickOrder =306)");
                                Row[] rr1 = itmvo.getFilteredRows(rq1);
                                System.out.println("item row filter query " + rr1.length);
                                if (rr1.length > 0) {
                                    for (Row currItm : rr1) {
                                        Number uomCovrFctr = (Number) currItm.getAttribute("UomConvFctr");
                                        Number pendQty = (Number) currItm.getAttribute("PendQty");
                                        currItm.setAttribute("IssuQty", pendQty);
                                        currItm.setAttribute("IssuQtyBs", pendQty.multiply(uomCovrFctr));

                                        System.out.println("binChkFlg-----" + binChkFlg + "wh ---" +
                                                           currIssu.getAttribute("WhId") + "itm   " +
                                                           currItm.getAttribute("ItmId") + "pic or  " +
                                                           currItm.getAttribute("TransItmPickOrder") + "serial  " +
                                                           currItm.getAttribute("TransItmSerializedFlg") + "fact  " +
                                                           uomCovrFctr + " doc id Src " +
                                                           currItm.getAttribute("DocIdSrc") + " doc id  " +
                                                           currIssu.getAttribute("DocId") + "pending quantity " +
                                                           pendQty + "pick order " +
                                                           currItm.getAttribute("TransItmPickOrder"));
                                        if (uomCovrFctr != null) {

                                            retVal =
                                                Integer.parseInt(callStoredFunction(Types.NUMERIC,
                                                                                    "MM.fn_mm_sc_issu_auto_rqmt (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                                    currIssu.getAttribute("CldId").toString(),
                                                                                    Integer.parseInt(currIssu.getAttribute("SlocId").toString()),
                                                                                    currIssu.getAttribute("HoOrgId").toString(),
                                                                                    currIssu.getAttribute("OrgId").toString(),
                                                                                    currIssu.getAttribute("WhId").toString(),
                                                                                    currItm.getAttribute("ItmId").toString(),
                                                                                    pendQty,
                                                                                    Integer.parseInt(currItm.getAttribute("TransItmPickOrder").toString()),
                                                                                    currItm.getAttribute("TransItmSerializedFlg").toString(),
                                                                                    binChkFlg,
                                                                                    currIssu.getAttribute("DocId").toString(),
                                                                                    currItm.getAttribute("ItmUomBs").toString(),
                                                                                    currItm.getAttribute("ItmUom").toString(),
                                                                                    uomCovrFctr,
                                                                                    Integer.parseInt(currIssu.getAttribute("EoId").toString()),
                                                                                    Integer.parseInt(currItm.getAttribute("DlvSchdlNo").toString()),
                                                                                    currItm.getAttribute("DocIdSrc").toString(),
                                                                                    this.getMmScIssuSrcVo1().getCurrentRow().getAttribute("DocDtSrc"),
                                            }).toString());
                                        }
                                        System.out.println("all issue record function return " + retVal);
                                        if (retVal == 1) {
                                            this.getMmScIssuLotVo1().executeQuery();
                                            if ("Y".equalsIgnoreCase(binChkFlg)) {
                                                this.getMmScIssuBinVo1().executeQuery();
                                            }
                                            this.getMmScIssuSrVo1().executeQuery();
                                        }

                                    }
                                }
                            }

                        }


                    }
                }

            }
            System.out.println("return value from function ----    " + retVal);
        }
        return retVal;
    }

    /**
     * Container's getter for TransientVo1.
     * @return TransientVo1
     */
    public ViewObjectImpl getTransientVo1() {
        return (ViewObjectImpl) findViewObject("TransientVo1");
    }

    /**
     * Container's getter for SearchMmScIssueVo1.
     * @return SearchMmScIssueVo1
     */
    public ViewObjectImpl getSearchMmScIssueVo1() {
        return (ViewObjectImpl) findViewObject("SearchMmScIssueVo1");
    }

    /**
     * Container's getter for MmScIssuVo1.
     * @return MmScIssuVo1
     */
    public ViewObjectImpl getMmScIssuVo1() {
        return (ViewObjectImpl) findViewObject("MmScIssuVo1");
    }

    /**
     * Container's getter for MmScIssuSrcVo1.
     * @return MmScIssuSrcVo1
     */
    public ViewObjectImpl getMmScIssuSrcVo1() {
        return (ViewObjectImpl) findViewObject("MmScIssuSrcVo1");
    }

    /**
     * Container's getter for MmScIssuToMmScIssuSrcVL1.
     * @return MmScIssuToMmScIssuSrcVL1
     */
    public ViewLinkImpl getMmScIssuToMmScIssuSrcVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuToMmScIssuSrcVL1");
    }

    /**
     * Container's getter for MmScIssuItmVo1.
     * @return MmScIssuItmVo1
     */
    public ViewObjectImpl getMmScIssuItmVo1() {
        return (ViewObjectImpl) findViewObject("MmScIssuItmVo1");
    }

    /**
     * Container's getter for MmScIssuSrcToMmScIssuItmVL1.
     * @return MmScIssuSrcToMmScIssuItmVL1
     */
    public ViewLinkImpl getMmScIssuSrcToMmScIssuItmVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuSrcToMmScIssuItmVL1");
    }

    /**
     * Container's getter for TempSubContractOrdrVo1.
     * @return TempSubContractOrdrVo1
     */
    public ViewObjectImpl getTempSubContractOrdrVo1() {
        return (ViewObjectImpl) findViewObject("TempSubContractOrdrVo1");
    }

    /**
     * Container's getter for LOVSubContractOrderDispVo2.
     * @return LOVSubContractOrderDispVo2
     */
    public ViewObjectImpl getLOVSubContractOrderDispVo1() {
        return (ViewObjectImpl) findViewObject("LOVSubContractOrderDispVo1");
    }

    /**
     * Container's getter for LOVMmScoOpItemVo1.
     * @return LOVMmScoOpItemVo1
     */
    public ViewObjectImpl getLOVMmScoOpItemVo1() {
        return (ViewObjectImpl) findViewObject("LOVMmScoOpItemVo1");
    }

    /**
     * Container's getter for LOVItemNMVo1.
     * @return LOVItemNMVo1
     */
    public ViewObjectImpl getLOVItemNMVo1() {
        return (ViewObjectImpl) findViewObject("LOVItemNMVo1");
    }

    /**
     * Container's getter for LOVUomDescVo1.
     * @return LOVUomDescVo1
     */
    public ViewObjectImpl getLOVUomDescVo1() {
        return (ViewObjectImpl) findViewObject("LOVUomDescVo1");
    }

    /**
     * Container's getter for MmScIssuLotVo1.
     * @return MmScIssuLotVo1
     */
    public ViewObjectImpl getMmScIssuLotVo1() {
        return (ViewObjectImpl) findViewObject("MmScIssuLotVo1");
    }

    /**
     * Container's getter for MmScIssuItmToMmScIssuLotVL1.
     * @return MmScIssuItmToMmScIssuLotVL1
     */
    public ViewLinkImpl getMmScIssuItmToMmScIssuLotVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuItmToMmScIssuLotVL1");
    }

    /**
     * Container's getter for MmScIssuBinVo1.
     * @return MmScIssuBinVo1
     */
    public ViewObjectImpl getMmScIssuBinVo1() {
        return (ViewObjectImpl) findViewObject("MmScIssuBinVo1");
    }

    /**
     * Container's getter for MmScIssuItmToMmScIssuBinVL1.
     * @return MmScIssuItmToMmScIssuBinVL1
     */
    public ViewLinkImpl getMmScIssuItmToMmScIssuBinVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuItmToMmScIssuBinVL1");
    }

    /**
     * Container's getter for MmScIssuSrVo1.
     * @return MmScIssuSrVo1
     */
    public ViewObjectImpl getMmScIssuSrVo1() {
        return (ViewObjectImpl) findViewObject("MmScIssuSrVo1");
    }

    /**
     * Container's getter for MmScIssuItmToMmScIssuSrVL1.
     * @return MmScIssuItmToMmScIssuSrVL1
     */
    public ViewLinkImpl getMmScIssuItmToMmScIssuSrVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuItmToMmScIssuSrVL1");
    }

    /**
     * Container's getter for LOVUserNmWF1.
     * @return LOVUserNmWF1
     */
    public ViewObjectImpl getLOVUserNmWF1() {
        return (ViewObjectImpl) findViewObject("LOVUserNmWF1");
    }

    /**
     * Container's getter for ViewMmStkSummBinVO1.
     * @return ViewMmStkSummBinVO1
     */
    public ViewMmStkSummBinVOImpl getViewMmStkSummBinVO1() {
        return (ViewMmStkSummBinVOImpl) findViewObject("ViewMmStkSummBinVO1");
    }

    /**
     * Container's getter for MmScIssuItmToViewMmStkSummBinVL1.
     * @return MmScIssuItmToViewMmStkSummBinVL1
     */
    public ViewLinkImpl getMmScIssuItmToViewMmStkSummBinVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuItmToViewMmStkSummBinVL1");
    }

    /**
     * Container's getter for ViewMmStkSummLotVO1.
     * @return ViewMmStkSummLotVO1
     */
    public ViewMmStkSummLotVOImpl getViewMmStkSummLotVO1() {
        return (ViewMmStkSummLotVOImpl) findViewObject("ViewMmStkSummLotVO1");
    }

    /**
     * Container's getter for MmScIssuItmToViewMmStkSummLotVL1.
     * @return MmScIssuItmToViewMmStkSummLotVL1
     */
    public ViewLinkImpl getMmScIssuItmToViewMmStkSummLotVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuItmToViewMmStkSummLotVL1");
    }

    /**
     * Container's getter for ViewMmStkSummSrVO1.
     * @return ViewMmStkSummSrVO1
     */
    public ViewMmStkSummSrVOImpl getViewMmStkSummSrVO1() {
        return (ViewMmStkSummSrVOImpl) findViewObject("ViewMmStkSummSrVO1");
    }

    /**
     * Container's getter for MmScIssuItmToViewMmStkSummSrVL1.
     * @return MmScIssuItmToViewMmStkSummSrVL1
     */
    public ViewLinkImpl getMmScIssuItmToViewMmStkSummSrVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuItmToViewMmStkSummSrVL1");
    }

    /**
     * Container's getter for LOVgetItemNmVo1.
     * @return LOVgetItemNmVo1
     */
    public ViewObjectImpl getLOVgetItemNmVo1() {
        return (ViewObjectImpl) findViewObject("LOVgetItemNmVo1");
    }

    /**
     * Container's getter for ViewMmItmStkLotRqmtVwVO1.
     * @return ViewMmItmStkLotRqmtVwVO1
     */
    public ViewMmItmStkLotRqmtVwVOImpl getViewMmItmStkLotRqmtVwVO1() {
        return (ViewMmItmStkLotRqmtVwVOImpl) findViewObject("ViewMmItmStkLotRqmtVwVO1");
    }

    /**
     * Container's getter for MmScIssuItmToViewMmItmStkLotRqmtVL1.
     * @return MmScIssuItmToViewMmItmStkLotRqmtVL1
     */
    public ViewLinkImpl getMmScIssuItmToViewMmItmStkLotRqmtVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuItmToViewMmItmStkLotRqmtVL1");
    }

    /**
     * Container's getter for ViewMmItmStkBinRqmtVwVO1.
     * @return ViewMmItmStkBinRqmtVwVO1
     */
    public ViewMmItmStkBinRqmtVwVOImpl getViewMmItmStkBinRqmtVwVO1() {
        return (ViewMmItmStkBinRqmtVwVOImpl) findViewObject("ViewMmItmStkBinRqmtVwVO1");
    }

    /**
     * Container's getter for MmScIssuItmToViewMmItmStkBinRqmtVL1.
     * @return MmScIssuItmToViewMmItmStkBinRqmtVL1
     */
    public ViewLinkImpl getMmScIssuItmToViewMmItmStkBinRqmtVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuItmToViewMmItmStkBinRqmtVL1");
    }

    /**
     * Container's getter for ViewMmItmStkSrRqmtVwVO1.
     * @return ViewMmItmStkSrRqmtVwVO1
     */
    public ViewMmItmStkSrRqmtVwVOImpl getViewMmItmStkSrRqmtVwVO1() {
        return (ViewMmItmStkSrRqmtVwVOImpl) findViewObject("ViewMmItmStkSrRqmtVwVO1");
    }

    /**
     * Container's getter for MmScIssuItmToViewMmItmStkSrRqmtVL1.
     * @return MmScIssuItmToViewMmItmStkSrRqmtVL1
     */
    public ViewLinkImpl getMmScIssuItmToViewMmItmStkSrRqmtVL1() {
        return (ViewLinkImpl) findViewLink("MmScIssuItmToViewMmItmStkSrRqmtVL1");
    }

    /**
     * Container's getter for MmScIssuTrLinesVo1.
     * @return MmScIssuTrLinesVo1
     */
    public ViewObjectImpl getMmScIssuTrLinesVo1() {
        return (ViewObjectImpl) findViewObject("MmScIssuTrLinesVo1");
    }

    /**
     * Container's getter for MmScIssuTrVo1.
     * @return MmScIssuTrVo1
     */
    public ViewObjectImpl getMmScIssuTrVo1() {
        return (ViewObjectImpl) findViewObject("MmScIssuTrVo1");
    }

    /**
     * Container's getter for MmScoTrLinesViewVo1.
     * @return MmScoTrLinesViewVo1
     */
    public ViewObjectImpl getMmScoTrLinesViewVo1() {
        return (ViewObjectImpl) findViewObject("MmScoTrLinesViewVo1");
    }

    /**
     * Container's getter for MmScoTrViewVo1.
     * @return MmScoTrViewVo1
     */
    public ViewObjectImpl getMmScoTrViewVo1() {
        return (ViewObjectImpl) findViewObject("MmScoTrViewVo1");
    }

    /**
     * Container's getter for MmScIssuItmVo2.
     * @return MmScIssuItmVo2
     */
    public ViewObjectImpl getMmScIssuItmVo2() {
        return (ViewObjectImpl) findViewObject("MmScIssuItmVo2");
    }

    /**
     * Container's getter for MmScIssuSrcVo2.
     * @return MmScIssuSrcVo2
     */
    public ViewObjectImpl getMmScIssuSrcVo2() {
        return (ViewObjectImpl) findViewObject("MmScIssuSrcVo2");
    }

    /**
     * Container's getter for LOVSumIssueQtyVo1.
     * @return LOVSumIssueQtyVo1
     */
    public ViewObjectImpl getLOVSumIssueQtyVo1() {
        return (ViewObjectImpl) findViewObject("LOVSumIssueQtyVo1");
    }

    /**
     * Container's getter for MmScIssuLotVo2.
     * @return MmScIssuLotVo2
     */
    public ViewObjectImpl getMmScIssuLotVo2() {
        return (ViewObjectImpl) findViewObject("MmScIssuLotVo2");
    }

    /**
     * Container's getter for LOVMMScOpItmToleranceVo1.
     * @return LOVMMScOpItmToleranceVo1
     */
    public ViewObjectImpl getLOVMMScOpItmToleranceVo1() {
        return (ViewObjectImpl) findViewObject("LOVMMScOpItmToleranceVo1");
    }
}

