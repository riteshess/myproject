package scissue.model.entity;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 17 14:55:50 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmScIssuImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        WhId,
        DocId,
        DocDt,
        FyId,
        IssuNo,
        IssuDt,
        ScType,
        EoId,
        IssuStat,
        Remarks,
        UsrIdCrt,
        CrtDt,
        UsrIdMod,
        ModDt,
        AuthStat,
        HoOrgId,
        AuthMode,
        CurrIdSp,
        CurrConvFctr,
        PrjId,
        MmScIssuSrc;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return MmScIssuImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return MmScIssuImpl.AttributesEnum.firstIndex() + MmScIssuImpl.AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = MmScIssuImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int ISSUNO = AttributesEnum.IssuNo.index();
    public static final int ISSUDT = AttributesEnum.IssuDt.index();
    public static final int SCTYPE = AttributesEnum.ScType.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int ISSUSTAT = AttributesEnum.IssuStat.index();
    public static final int REMARKS = AttributesEnum.Remarks.index();
    public static final int USRIDCRT = AttributesEnum.UsrIdCrt.index();
    public static final int CRTDT = AttributesEnum.CrtDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int MODDT = AttributesEnum.ModDt.index();
    public static final int AUTHSTAT = AttributesEnum.AuthStat.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int AUTHMODE = AttributesEnum.AuthMode.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int PRJID = AttributesEnum.PrjId.index();
    public static final int MMSCISSUSRC = AttributesEnum.MmScIssuSrc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmScIssuImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("scissue.model.entity.MmScIssu");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for WhId, using the alias name WhId.
     * @return the value of WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WhId.
     * @param value value to set the WhId
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for IssuNo, using the alias name IssuNo.
     * @return the value of IssuNo
     */
    public String getIssuNo() {
        return (String) getAttributeInternal(ISSUNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for IssuNo.
     * @param value value to set the IssuNo
     */
    public void setIssuNo(String value) {
        setAttributeInternal(ISSUNO, value);
    }

    /**
     * Gets the attribute value for IssuDt, using the alias name IssuDt.
     * @return the value of IssuDt
     */
    public Timestamp getIssuDt() {
        return (Timestamp) getAttributeInternal(ISSUDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for IssuDt.
     * @param value value to set the IssuDt
     */
    public void setIssuDt(Timestamp value) {
        setAttributeInternal(ISSUDT, value);
    }

    /**
     * Gets the attribute value for ScType, using the alias name ScType.
     * @return the value of ScType
     */
    public Integer getScType() {
        return (Integer) getAttributeInternal(SCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScType.
     * @param value value to set the ScType
     */
    public void setScType(Integer value) {
        setAttributeInternal(SCTYPE, value);
    }

    /**
     * Gets the attribute value for EoId, using the alias name EoId.
     * @return the value of EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoId.
     * @param value value to set the EoId
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for IssuStat, using the alias name IssuStat.
     * @return the value of IssuStat
     */
    public Integer getIssuStat() {
        return (Integer) getAttributeInternal(ISSUSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for IssuStat.
     * @param value value to set the IssuStat
     */
    public void setIssuStat(Integer value) {
        setAttributeInternal(ISSUSTAT, value);
    }

    /**
     * Gets the attribute value for Remarks, using the alias name Remarks.
     * @return the value of Remarks
     */
    public String getRemarks() {
        return (String) getAttributeInternal(REMARKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for Remarks.
     * @param value value to set the Remarks
     */
    public void setRemarks(String value) {
        setAttributeInternal(REMARKS, value);
    }


    /**
     * Gets the attribute value for UsrIdCrt, using the alias name UsrIdCrt.
     * @return the value of UsrIdCrt
     */
    public Integer getUsrIdCrt() {
        return (Integer) getAttributeInternal(USRIDCRT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCrt.
     * @param value value to set the UsrIdCrt
     */
    public void setUsrIdCrt(Integer value) {
        setAttributeInternal(USRIDCRT, value);
    }

    /**
     * Gets the attribute value for CrtDt, using the alias name CrtDt.
     * @return the value of CrtDt
     */
    public Timestamp getCrtDt() {
        return (Timestamp) getAttributeInternal(CRTDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CrtDt.
     * @param value value to set the CrtDt
     */
    public void setCrtDt(Timestamp value) {
        setAttributeInternal(CRTDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for ModDt, using the alias name ModDt.
     * @return the value of ModDt
     */
    public Timestamp getModDt() {
        return (Timestamp) getAttributeInternal(MODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModDt.
     * @param value value to set the ModDt
     */
    public void setModDt(Timestamp value) {
        setAttributeInternal(MODDT, value);
    }

    /**
     * Gets the attribute value for AuthStat, using the alias name AuthStat.
     * @return the value of AuthStat
     */
    public Integer getAuthStat() {
        return (Integer) getAttributeInternal(AUTHSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for AuthStat.
     * @param value value to set the AuthStat
     */
    public void setAuthStat(Integer value) {
        setAttributeInternal(AUTHSTAT, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for AuthMode, using the alias name AuthMode.
     * @return the value of AuthMode
     */
    public String getAuthMode() {
        return (String) getAttributeInternal(AUTHMODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AuthMode.
     * @param value value to set the AuthMode
     */
    public void setAuthMode(String value) {
        setAttributeInternal(AUTHMODE, value);
    }

    /**
     * Gets the attribute value for CurrIdSp, using the alias name CurrIdSp.
     * @return the value of CurrIdSp
     */
    public Integer getCurrIdSp() {
        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrIdSp.
     * @param value value to set the CurrIdSp
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for CurrConvFctr, using the alias name CurrConvFctr.
     * @return the value of CurrConvFctr
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrConvFctr.
     * @param value value to set the CurrConvFctr
     */
    public void setCurrConvFctr(Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }


    /**
     * Gets the attribute value for PrjId, using the alias name PrjId.
     * @return the value of PrjId
     */
    public String getPrjId() {
        return (String) getAttributeInternal(PRJID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrjId.
     * @param value value to set the PrjId
     */
    public void setPrjId(String value) {
        setAttributeInternal(PRJID, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMmScIssuSrc() {
        return (RowIterator) getAttributeInternal(MMSCISSUSRC);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param whId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String whId, String docId) {
        return new Key(new Object[] { cldId, slocId, orgId, whId, docId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        this.setCldId(EbizParams.GLBL_APP_CLD_ID());
        this.setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        this.setHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        this.setOrgId(EbizParams.GLBL_APP_USR_ORG());
        this.setDocId(resolvEl("#{pageFlowScope.GLBL_ISSUE_TXN_ID}").toString());
        this.setIssuNo("ISSU000");
        this.setFyId(GetFyIdFromFunc());
        this.setUsrIdCrt(EbizParams.GLBL_APP_USR());
        this.setCrtDt(new Timestamp(System.currentTimeMillis()));
        setDocDt(StaticValue.getCurrDtWidTimestamp());
        setIssuDt(StaticValue.getCurrDtWidTimestamp());
        setIssuStat(848);
        setAuthStat(313);
        setAuthMode("N");
        setPrjId("PROJ0000");
        this.setScType(retDefualtScType());
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        // super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            this.setIssuNo(GetScoDispIdFromFunc());
        }
        if (operation == DML_UPDATE) {
            this.setUsrIdMod(EbizParams.GLBL_APP_USR());
            this.setModDt(new Timestamp(System.currentTimeMillis()));
        }
        super.doDML(operation, e);
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * To check Default Subcontracting Type
     * */
    public Integer retDefualtScType() {
        Integer retVal = 0;
        try {
            retVal = Integer.parseInt(this.callStoredFunction(Types.VARCHAR, "MM.fn_sc_chk_org_prf(?,?,?,?)", new Object[] {
                                                              this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                              "DEF_SC_TYPE"
            }).toString());

            System.out.println("Value of Defualt Subcontracting Type --- " + retVal);

        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION fn_sc_chk_org_prf :" + e.getMessage());
        }
        return retVal;
    }

    /** ---------- To create FYID Id -------------**/

    public Integer GetFyIdFromFunc() {
        Integer fyId = 0;
        try {
            fyId = (Integer) this.callStoredFunction(Types.INTEGER, "APP.FN_GET_FY_ID(?,?,?,?)", new Object[] {
                                                     EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                     new Timestamp(System.currentTimeMillis()), "FY"
            });
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at MnfRcEoImpl :" + e.getMessage());
        }
        return fyId;
    }

    /** ---------- To create Display Id -------------**/

    public String GetScoDispIdFromFunc() {
        String dispId = "0";
        try {
            dispId = this.callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                             this.getSlocId(), this.getCldId(), this.getOrgId(), 36502, null,
                                             getScType(), "MM$SC$ISSU", this.getFyId(), 0
            }).toString();
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_MNF_GET_PRF_ID at Impl :" + e.getMessage());
        }
        return dispId;
    }

}

