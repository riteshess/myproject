package screportapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.sql.Types;

import javax.el.ELContext;

import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import screportapp.model.services.common.SCReportAppAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 24 16:38:13 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SCReportAppAMImpl extends ApplicationModuleImpl implements SCReportAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SCReportAppAMImpl() {
    }

    /**
     * Container's getter for SCRptTrans.
     * @return SCRptTrans
     */
    public ViewObjectImpl getSCRptTrans() {
        return (ViewObjectImpl) findViewObject("SCRptTrans");
    }

    /**
     * Container's getter for SCRptCB.
     * @return SCRptCB
     */
    public ViewObjectImpl getSCRptCB() {
        return (ViewObjectImpl) findViewObject("SCRptCB");
    }
    public void setGlblParam(){
        this.getSCRptTrans().setNamedWhereClauseParam("BindCldId", this.getCldId().toString());
        this.getSCRptTrans().setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        this.getSCRptTrans().setNamedWhereClauseParam("BindOrgId", this.getOrgId().toString());
        this.getSCRptTrans().setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId().toString());
        this.getSCRptTrans().executeQuery();
        System.out.println(" setGlobal param are "+getCldId()+" "+getSlocId()+" "+getOrgId()+" "+getHoOrgId());
        
    }
    public String resolvEl(String data) {
           ADFContext adfCtx = ADFContext.getCurrent();
           ELContext elContext = adfCtx.getELContext();
           ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
           String Message = valueExp.getValue(elContext).toString();
           return Message;
       }
    public StringBuffer getCldId(){
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }
    public StringBuffer getOrgId(){
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
    }
    public StringBuffer getHoOrgId(){
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
    }
    public Integer getSlocId(){
        return new Integer(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
    }
    public Boolean chkUsrRptSecAccess(Integer rptId) {
          String ret =
              (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                  new StringBuilder("APP.FN_CHK_USR_RPT_SEC(?,?,?,?,?)"), new Object[] {
                                                  EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                  EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), rptId
          }, Types.VARCHAR);
          if (ret != null && ret.length() > 0 && ret.toUpperCase().equals("Y"))
              return true;
          else
              return false;
      }
    
}

