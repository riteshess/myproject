package screportapp.model.views;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.sql.Types;

import java.util.Date;

import oracle.jbo.JboException;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 24 18:12:06 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SCRptTransVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        HoOrgId,
        FromDateTrans,
        ToDateTrans,
        WhNmTrans,
        RptTypeTrans,
        EntityIdTrans,
        EntityNmTrans,
        ItmNmTrans,
        ItmIdTrans,
        ItemGrpIdTrans,
        ItemGrpNmTrans,
        ScOrdNoTrans,
        ScOrdDocTrans,
        ScInvNoTrans,
        ScInvDocTrans,
        ScIssuNoTrans,
        ScIssuDocTrans,
        ScRcptNoTrans,
        ScRcptDocTrans,
        SCTypeIdTrans,
        OpNmTrans,
        OpDocTrans,
        LovEntityVO,
        RadioGrpRptTypeVO,
        LovWhVO,
        LovItmVO,
        LovOrgVO,
        LovItmGrpVO,
        LovSCRcptVO,
        LovSCIssuVO,
        LovSCInvVO,
        LovSCOrdVO,
        LovScTypeVO,
        LovOpVO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int FROMDATETRANS = AttributesEnum.FromDateTrans.index();
    public static final int TODATETRANS = AttributesEnum.ToDateTrans.index();
    public static final int WHNMTRANS = AttributesEnum.WhNmTrans.index();
    public static final int RPTTYPETRANS = AttributesEnum.RptTypeTrans.index();
    public static final int ENTITYIDTRANS = AttributesEnum.EntityIdTrans.index();
    public static final int ENTITYNMTRANS = AttributesEnum.EntityNmTrans.index();
    public static final int ITMNMTRANS = AttributesEnum.ItmNmTrans.index();
    public static final int ITMIDTRANS = AttributesEnum.ItmIdTrans.index();
    public static final int ITEMGRPIDTRANS = AttributesEnum.ItemGrpIdTrans.index();
    public static final int ITEMGRPNMTRANS = AttributesEnum.ItemGrpNmTrans.index();
    public static final int SCORDNOTRANS = AttributesEnum.ScOrdNoTrans.index();
    public static final int SCORDDOCTRANS = AttributesEnum.ScOrdDocTrans.index();
    public static final int SCINVNOTRANS = AttributesEnum.ScInvNoTrans.index();
    public static final int SCINVDOCTRANS = AttributesEnum.ScInvDocTrans.index();
    public static final int SCISSUNOTRANS = AttributesEnum.ScIssuNoTrans.index();
    public static final int SCISSUDOCTRANS = AttributesEnum.ScIssuDocTrans.index();
    public static final int SCRCPTNOTRANS = AttributesEnum.ScRcptNoTrans.index();
    public static final int SCRCPTDOCTRANS = AttributesEnum.ScRcptDocTrans.index();
    public static final int SCTYPEIDTRANS = AttributesEnum.SCTypeIdTrans.index();
    public static final int OPNMTRANS = AttributesEnum.OpNmTrans.index();
    public static final int OPDOCTRANS = AttributesEnum.OpDocTrans.index();
    public static final int LOVENTITYVO = AttributesEnum.LovEntityVO.index();
    public static final int RADIOGRPRPTTYPEVO = AttributesEnum.RadioGrpRptTypeVO.index();
    public static final int LOVWHVO = AttributesEnum.LovWhVO.index();
    public static final int LOVITMVO = AttributesEnum.LovItmVO.index();
    public static final int LOVORGVO = AttributesEnum.LovOrgVO.index();
    public static final int LOVITMGRPVO = AttributesEnum.LovItmGrpVO.index();
    public static final int LOVSCRCPTVO = AttributesEnum.LovSCRcptVO.index();
    public static final int LOVSCISSUVO = AttributesEnum.LovSCIssuVO.index();
    public static final int LOVSCINVVO = AttributesEnum.LovSCInvVO.index();
    public static final int LOVSCORDVO = AttributesEnum.LovSCOrdVO.index();
    public static final int LOVSCTYPEVO = AttributesEnum.LovScTypeVO.index();
    public static final int LOVOPVO = AttributesEnum.LovOpVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SCRptTransVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public String getSlocId() {
        return (String) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(String value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FromDateTrans.
     * @return the FromDateTrans
     */
    public Timestamp getFromDateTrans() {
        Date dt = new Date();
                     
                     Timestamp ts= null;
                     try {
                         dt = (Date) (callStoredFunction(Types.DATE, "APP.fn_get_fy_start_date(?,?,?,?)", new Object[] {
                                                         getCldId(), getOrgId(), new Timestamp(System.currentTimeMillis()), "FY"
                         }));
                      //   System.out.println(" getcldi--getorgid "+getCldId()+getOrgId());
                         ts = new Timestamp(dt.getTime());
                     } catch (Exception e) {
                         // TODO: Add catch code
                         e.printStackTrace();
                     }
                     return ((Timestamp) getAttributeInternal(FROMDATETRANS) == null ? ts : (Timestamp) getAttributeInternal(FROMDATETRANS));
        
        //return (Timestamp) getAttributeInternal(FROMDATETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FromDateTrans.
     * @param value value to set the  FromDateTrans
     */
    public void setFromDateTrans(Timestamp value) {
        setAttributeInternal(FROMDATETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ToDateTrans.
     * @return the ToDateTrans
     */
    public Timestamp getToDateTrans() {
       // return (Timestamp) getAttributeInternal(TODATETRANS);
       return ((Timestamp) getAttributeInternal(TODATETRANS)==null?new Timestamp(System.currentTimeMillis()):(Timestamp) getAttributeInternal(TODATETRANS));
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ToDateTrans.
     * @param value value to set the  ToDateTrans
     */
    public void setToDateTrans(Timestamp value) {
        setAttributeInternal(TODATETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WhNmTrans.
     * @return the WhNmTrans
     */
    public String getWhNmTrans() {
        return (String) getAttributeInternal(WHNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WhNmTrans.
     * @param value value to set the  WhNmTrans
     */
    public void setWhNmTrans(String value) {
        setAttributeInternal(WHNMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RptTypeTrans.
     * @return the RptTypeTrans
     */
    public String getRptTypeTrans() {
      //  return (String) getAttributeInternal(RPTTYPETRANS);
        return ((String) getAttributeInternal(RPTTYPETRANS)==null?"PDF":(String) getAttributeInternal(RPTTYPETRANS));
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RptTypeTrans.
     * @param value value to set the  RptTypeTrans
     */
    public void setRptTypeTrans(String value) {
        setAttributeInternal(RPTTYPETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EntityIdTrans.
     * @return the EntityIdTrans
     */
    public Integer getEntityIdTrans() {
        return (Integer) getAttributeInternal(ENTITYIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EntityIdTrans.
     * @param value value to set the  EntityIdTrans
     */
    public void setEntityIdTrans(Integer value) {
        setAttributeInternal(ENTITYIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EntityNmTrans.
     * @return the EntityNmTrans
     */
    public String getEntityNmTrans() {
        return (String) getAttributeInternal(ENTITYNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EntityNmTrans.
     * @param value value to set the  EntityNmTrans
     */
    public void setEntityNmTrans(String value) {
        setAttributeInternal(ENTITYNMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmNmTrans.
     * @return the ItmNmTrans
     */
    public String getItmNmTrans() {
        return (String) getAttributeInternal(ITMNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmNmTrans.
     * @param value value to set the  ItmNmTrans
     */
    public void setItmNmTrans(String value) {
        setAttributeInternal(ITMNMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmIdTrans.
     * @return the ItmIdTrans
     */
    public String getItmIdTrans() {
        return (String) getAttributeInternal(ITMIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmIdTrans.
     * @param value value to set the  ItmIdTrans
     */
    public void setItmIdTrans(String value) {
        setAttributeInternal(ITMIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemGrpIdTrans.
     * @return the ItemGrpIdTrans
     */
    public String getItemGrpIdTrans() {
        return (String) getAttributeInternal(ITEMGRPIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemGrpIdTrans.
     * @param value value to set the  ItemGrpIdTrans
     */
    public void setItemGrpIdTrans(String value) {
        setAttributeInternal(ITEMGRPIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemGrpNmTrans.
     * @return the ItemGrpNmTrans
     */
    public String getItemGrpNmTrans() {
        return (String) getAttributeInternal(ITEMGRPNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemGrpNmTrans.
     * @param value value to set the  ItemGrpNmTrans
     */
    public void setItemGrpNmTrans(String value) {
        setAttributeInternal(ITEMGRPNMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ScOrdNoTrans.
     * @return the ScOrdNoTrans
     */
    public String getScOrdNoTrans() {
        return (String) getAttributeInternal(SCORDNOTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ScOrdNoTrans.
     * @param value value to set the  ScOrdNoTrans
     */
    public void setScOrdNoTrans(String value) {
        setAttributeInternal(SCORDNOTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ScOrdDocTrans.
     * @return the ScOrdDocTrans
     */
    public String getScOrdDocTrans() {
        return (String) getAttributeInternal(SCORDDOCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ScOrdDocTrans.
     * @param value value to set the  ScOrdDocTrans
     */
    public void setScOrdDocTrans(String value) {
        setAttributeInternal(SCORDDOCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ScInvNoTrans.
     * @return the ScInvNoTrans
     */
    public String getScInvNoTrans() {
        return (String) getAttributeInternal(SCINVNOTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ScInvNoTrans.
     * @param value value to set the  ScInvNoTrans
     */
    public void setScInvNoTrans(String value) {
        setAttributeInternal(SCINVNOTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ScInvDocTrans.
     * @return the ScInvDocTrans
     */
    public String getScInvDocTrans() {
        return (String) getAttributeInternal(SCINVDOCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ScInvDocTrans.
     * @param value value to set the  ScInvDocTrans
     */
    public void setScInvDocTrans(String value) {
        setAttributeInternal(SCINVDOCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ScIssuNoTrans.
     * @return the ScIssuNoTrans
     */
    public String getScIssuNoTrans() {
        return (String) getAttributeInternal(SCISSUNOTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ScIssuNoTrans.
     * @param value value to set the  ScIssuNoTrans
     */
    public void setScIssuNoTrans(String value) {
        setAttributeInternal(SCISSUNOTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ScIssuDocTrans.
     * @return the ScIssuDocTrans
     */
    public String getScIssuDocTrans() {
        return (String) getAttributeInternal(SCISSUDOCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ScIssuDocTrans.
     * @param value value to set the  ScIssuDocTrans
     */
    public void setScIssuDocTrans(String value) {
        setAttributeInternal(SCISSUDOCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ScRcptNoTrans.
     * @return the ScRcptNoTrans
     */
    public String getScRcptNoTrans() {
        return (String) getAttributeInternal(SCRCPTNOTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ScRcptNoTrans.
     * @param value value to set the  ScRcptNoTrans
     */
    public void setScRcptNoTrans(String value) {
        setAttributeInternal(SCRCPTNOTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ScRcptDocTrans.
     * @return the ScRcptDocTrans
     */
    public String getScRcptDocTrans() {
        return (String) getAttributeInternal(SCRCPTDOCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ScRcptDocTrans.
     * @param value value to set the  ScRcptDocTrans
     */
    public void setScRcptDocTrans(String value) {
        setAttributeInternal(SCRCPTDOCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SCTypeIdTrans.
     * @return the SCTypeIdTrans
     */
    public Integer getSCTypeIdTrans() {
        return (Integer) getAttributeInternal(SCTYPEIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SCTypeIdTrans.
     * @param value value to set the  SCTypeIdTrans
     */
    public void setSCTypeIdTrans(Integer value) {
        setAttributeInternal(SCTYPEIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OpNmTrans.
     * @return the OpNmTrans
     */
    public String getOpNmTrans() {
        return (String) getAttributeInternal(OPNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OpNmTrans.
     * @param value value to set the  OpNmTrans
     */
    public void setOpNmTrans(String value) {
        setAttributeInternal(OPNMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OpDocTrans.
     * @return the OpDocTrans
     */
    public String getOpDocTrans() {
        return (String) getAttributeInternal(OPDOCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OpDocTrans.
     * @param value value to set the  OpDocTrans
     */
    public void setOpDocTrans(String value) {
        setAttributeInternal(OPDOCTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovEntityVO.
     */
    public RowSet getLovEntityVO() {
        return (RowSet) getAttributeInternal(LOVENTITYVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> RadioGrpRptTypeVO.
     */
    public RowSet getRadioGrpRptTypeVO() {
        return (RowSet) getAttributeInternal(RADIOGRPRPTTYPEVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovWhVO.
     */
    public RowSet getLovWhVO() {
        return (RowSet) getAttributeInternal(LOVWHVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmVO.
     */
    public RowSet getLovItmVO() {
        return (RowSet) getAttributeInternal(LOVITMVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOrgVO.
     */
    public RowSet getLovOrgVO() {
        return (RowSet) getAttributeInternal(LOVORGVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmGrpVO.
     */
    public RowSet getLovItmGrpVO() {
        return (RowSet) getAttributeInternal(LOVITMGRPVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSCRcptVO.
     */
    public RowSet getLovSCRcptVO() {
        return (RowSet) getAttributeInternal(LOVSCRCPTVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSCIssuVO.
     */
    public RowSet getLovSCIssuVO() {
        return (RowSet) getAttributeInternal(LOVSCISSUVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSCInvVO.
     */
    public RowSet getLovSCInvVO() {
        return (RowSet) getAttributeInternal(LOVSCINVVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSCOrdVO.
     */
    public RowSet getLovSCOrdVO() {
        return (RowSet) getAttributeInternal(LOVSCORDVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovScTypeVO.
     */
    public RowSet getLovScTypeVO() {
        return (RowSet) getAttributeInternal(LOVSCTYPEVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOpVO.
     */
    public RowSet getLovOpVO() {
        return (RowSet) getAttributeInternal(LOVOPVO);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
                 CallableStatement st = null;
                 try {
                     // 1. Create a JDBC CallabledStatement
                     st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                     // 2. Register the first bind variable for the return value
                     st.registerOutParameter(1, sqlReturnType);
                     if (bindVars != null) {
                         // 3. Loop over values for the bind variables passed in, if any
                         for (int z = 0; z < bindVars.length; z++) {
                             // 4. Set the value of user-supplied bind vars in the stmt
                             st.setObject(z + 2, bindVars[z]);
                         }
                     }
                     // 5. Set the value of user-supplied bind vars in the stmt
                     st.executeUpdate();
                     // 6. Return the value of the first bind variable
                     return st.getObject(1);
                 } catch (SQLException e) {
                     throw new JboException(e);
                 } finally {
                     if (st != null) {
                         try {
                             // 7. Close the statement
                             st.close();
                         } catch (SQLException e) {
                         }
                     }
                 }
          }
}

