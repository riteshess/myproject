package sclp.views;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 03 18:03:08 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransientDualVoRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TransientDualVoRowImpl obj) {
                return obj.getDummy();
            }

            public void put(TransientDualVoRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        TransScType {
            public Object get(TransientDualVoRowImpl obj) {
                return obj.getTransScType();
            }

            public void put(TransientDualVoRowImpl obj, Object value) {
                obj.setTransScType((Integer) value);
            }
        },
        LOVScTypeVo1 {
            public Object get(TransientDualVoRowImpl obj) {
                return obj.getLOVScTypeVo1();
            }

            public void put(TransientDualVoRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(TransientDualVoRowImpl object);

        public abstract void put(TransientDualVoRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int TRANSSCTYPE = AttributesEnum.TransScType.index();
    public static final int LOVSCTYPEVO1 = AttributesEnum.LOVScTypeVo1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransientDualVoRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Gets the attribute value for the calculated attribute TransScType.
     * @return the TransScType
     */
    public Integer getTransScType() {
        if ((Integer) getAttributeInternal(TRANSSCTYPE) == null) {
            return 827;
        } else {
            return (Integer) getAttributeInternal(TRANSSCTYPE);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransScType.
     * @param value value to set the  TransScType
     */
    public void setTransScType(Integer value) {
        setAttributeInternal(TRANSSCTYPE, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVScTypeVo1.
     */
    public RowSet getLOVScTypeVo1() {
        return (RowSet) getAttributeInternal(LOVSCTYPEVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

