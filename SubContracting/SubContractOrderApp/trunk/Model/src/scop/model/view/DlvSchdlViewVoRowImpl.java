package scop.model.view;

import adf.utils.ebiz.EbizParamsAPPUtils;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewRowImpl;

import scop.model.service.SubContractOrderAppModuleImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed May 27 11:26:16 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DlvSchdlViewVoRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        SlocId,
        HoOrgId,
        CldId,
        OrgId,
        DocId,
        ItmId,
        ItmUom,
        OrdQty,
        ScoType,
        ItmType,
        BalanceQty,
        ItmUomBs,
        UomConvFctr,
        SchdlQuantTrans,
        SelectItmChekBoxTrans,
        availableStockTrans,
        whIdTrans,
        ItemDescTrans,
        LOVItemUomVo1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int ORDQTY = AttributesEnum.OrdQty.index();
    public static final int SCOTYPE = AttributesEnum.ScoType.index();
    public static final int ITMTYPE = AttributesEnum.ItmType.index();
    public static final int BALANCEQTY = AttributesEnum.BalanceQty.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int UOMCONVFCTR = AttributesEnum.UomConvFctr.index();
    public static final int SCHDLQUANTTRANS = AttributesEnum.SchdlQuantTrans.index();
    public static final int SELECTITMCHEKBOXTRANS = AttributesEnum.SelectItmChekBoxTrans.index();
    public static final int AVAILABLESTOCKTRANS = AttributesEnum.availableStockTrans.index();
    public static final int WHIDTRANS = AttributesEnum.whIdTrans.index();
    public static final int ITEMDESCTRANS = AttributesEnum.ItemDescTrans.index();
    public static final int LOVITEMUOMVO1 = AttributesEnum.LOVItemUomVo1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DlvSchdlViewVoRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUom.
     * @return the ItmUom
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmUom.
     * @param value value to set the  ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrdQty.
     * @return the OrdQty
     */
    public Number getOrdQty() {
        return (Number) getAttributeInternal(ORDQTY);
    }

    /**
     * Gets the attribute value for the calculated attribute ScoType.
     * @return the ScoType
     */
    public Integer getScoType() {
        return (Integer) getAttributeInternal(SCOTYPE);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmType.
     * @return the ItmType
     */
    public Integer getItmType() {
        return (Integer) getAttributeInternal(ITMTYPE);
    }

    /**
     * Gets the attribute value for the calculated attribute BalanceQty.
     * @return the BalanceQty
     */
    public Number getBalanceQty() {
        return (Number) getAttributeInternal(BALANCEQTY);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUomBs.
     * @return the ItmUomBs
     */
    public String getItmUomBs() {
        return (String) getAttributeInternal(ITMUOMBS);
    }

    /**
     * Gets the attribute value for the calculated attribute UomConvFctr.
     * @return the UomConvFctr
     */
    public Number getUomConvFctr() {
        return (Number) getAttributeInternal(UOMCONVFCTR);
    }

    /**
     * Gets the attribute value for the calculated attribute SchdlQuantTrans.
     * @return the SchdlQuantTrans
     */
    public Number getSchdlQuantTrans() {
        return (Number) getAttributeInternal(SCHDLQUANTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SchdlQuantTrans.
     * @param value value to set the  SchdlQuantTrans
     */
    public void setSchdlQuantTrans(Number value) {
        setAttributeInternal(SCHDLQUANTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SelectItmChekBoxTrans.
     * @return the SelectItmChekBoxTrans
     */
    public String getSelectItmChekBoxTrans() {
        return (String) getAttributeInternal(SELECTITMCHEKBOXTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SelectItmChekBoxTrans.
     * @param value value to set the  SelectItmChekBoxTrans
     */
    public void setSelectItmChekBoxTrans(String value) {
        setAttributeInternal(SELECTITMCHEKBOXTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute availableStockTrans.
     * @return the availableStockTrans
     */
    public Number getavailableStockTrans() {
        Object stk = null;
        Number stck = new Number(0);
        try {
            stk = this.callStoredFunction(Types.NUMERIC, "MM.mm_get_avail_stk(?,?,?,?,?,?,?)", new Object[] {
                                          getCldId(), getSlocId(), getOrgId(), getItmId(), getwhIdTrans(),
                                          (Integer) getAm().getMmScoVO1().getCurrentRow().getAttribute("FyId"),
                                          getAm().getMmScoVO1().getCurrentRow().getAttribute("DocId").toString()
            });
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FOR GET AVAILABLE STOCK" + e.getMessage());
        }
        try {
            stck = new Number(stk);
        } catch (SQLException e) {
            e.getStackTrace();
        }
        return stck;
        //return (Number)getAttributeInternal(AVAILABLESTOCKTRANS);
    }

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute availableStockTrans.
     * @param value value to set the  availableStockTrans
     */
    public void setavailableStockTrans(Number value) {
        setAttributeInternal(AVAILABLESTOCKTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute whIdTrans.
     * @return the whIdTrans
     */
    public String getwhIdTrans() {
        return (String) getAttributeInternal(WHIDTRANS);
    }

    public void setwhIdTrans(String value) {
        setAttributeInternal(WHIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemDescTrans.
     * @return the ItemDescTrans
     */
    public String getItemDescTrans() {
        if (getItmId() != null && getAttributeInternal(ITEMDESCTRANS) == null) {
            String descFrmItmId = EbizParamsAPPUtils.getItemDescFrmItmId(getAm(), getItmId());
            return descFrmItmId;
            //setItemDescTrans(descFrmItmId);
        }
        return (String) getAttributeInternal(ITEMDESCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemDescTrans.
     * @param value value to set the  ItemDescTrans
     */
    public void setItemDescTrans(String value) {
        setAttributeInternal(ITEMDESCTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVItemUomVo1.
     */
    public RowSet getLOVItemUomVo1() {
        return (RowSet) getAttributeInternal(LOVITEMUOMVO1);
    }

    /**
     * @return
     * Generalized function to call object of application module.
     */
    public SubContractOrderAppModuleImpl getAm() {
        return (SubContractOrderAppModuleImpl) getApplicationModule();
    }

}

