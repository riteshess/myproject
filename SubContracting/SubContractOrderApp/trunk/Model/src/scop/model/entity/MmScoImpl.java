package scop.model.entity;

import adf.utils.ebiz.EbizParams;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon May 18 19:19:11 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmScoImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        FyId,
        ScoId,
        ScoStat,
        ScoRmrk,
        ScoMode,
        ScoType,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        ScoBasis,
        EoId,
        CoaId,
        CurrConvFctr,
        CurrIdBs,
        CurrIdSp,
        ExtDocDt,
        ExtDocNo,
        ShipAdds,
        TaxRuleFlg,
        TlrncDays,
        ScoBomFlg,
        ScoAmdDt,
        ScoAmdNo,
        MmScoSrc,
        MmScoOp;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int SCOID = AttributesEnum.ScoId.index();
    public static final int SCOSTAT = AttributesEnum.ScoStat.index();
    public static final int SCORMRK = AttributesEnum.ScoRmrk.index();
    public static final int SCOMODE = AttributesEnum.ScoMode.index();
    public static final int SCOTYPE = AttributesEnum.ScoType.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int SCOBASIS = AttributesEnum.ScoBasis.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int COAID = AttributesEnum.CoaId.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int CURRIDBS = AttributesEnum.CurrIdBs.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int EXTDOCDT = AttributesEnum.ExtDocDt.index();
    public static final int EXTDOCNO = AttributesEnum.ExtDocNo.index();
    public static final int SHIPADDS = AttributesEnum.ShipAdds.index();
    public static final int TAXRULEFLG = AttributesEnum.TaxRuleFlg.index();
    public static final int TLRNCDAYS = AttributesEnum.TlrncDays.index();
    public static final int SCOBOMFLG = AttributesEnum.ScoBomFlg.index();
    public static final int SCOAMDDT = AttributesEnum.ScoAmdDt.index();
    public static final int SCOAMDNO = AttributesEnum.ScoAmdNo.index();
    public static final int MMSCOSRC = AttributesEnum.MmScoSrc.index();
    public static final int MMSCOOP = AttributesEnum.MmScoOp.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmScoImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("scop.model.entity.MmSco");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for ScoId, using the alias name ScoId.
     * @return the value of ScoId
     */
    public String getScoId() {
        return (String) getAttributeInternal(SCOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScoId.
     * @param value value to set the ScoId
     */
    public void setScoId(String value) {
        setAttributeInternal(SCOID, value);
    }

    /**
     * Gets the attribute value for ScoStat, using the alias name ScoStat.
     * @return the value of ScoStat
     */
    public Integer getScoStat() {
        return (Integer) getAttributeInternal(SCOSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScoStat.
     * @param value value to set the ScoStat
     */
    public void setScoStat(Integer value) {
        setAttributeInternal(SCOSTAT, value);
    }

    /**
     * Gets the attribute value for ScoRmrk, using the alias name ScoRmrk.
     * @return the value of ScoRmrk
     */
    public String getScoRmrk() {
        return (String) getAttributeInternal(SCORMRK);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScoRmrk.
     * @param value value to set the ScoRmrk
     */
    public void setScoRmrk(String value) {
        setAttributeInternal(SCORMRK, value);
    }

    /**
     * Gets the attribute value for ScoMode, using the alias name ScoMode.
     * @return the value of ScoMode
     */
    public Integer getScoMode() {
        return (Integer) getAttributeInternal(SCOMODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScoMode.
     * @param value value to set the ScoMode
     */
    public void setScoMode(Integer value) {
        setAttributeInternal(SCOMODE, value);
    }

    /**
     * Gets the attribute value for ScoType, using the alias name ScoType.
     * @return the value of ScoType
     */
    public Integer getScoType() {
        return (Integer) getAttributeInternal(SCOTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScoType.
     * @param value value to set the ScoType
     */
    public void setScoType(Integer value) {
        setAttributeInternal(SCOTYPE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for ScoBasis, using the alias name ScoBasis.
     * @return the value of ScoBasis
     */
    public Integer getScoBasis() {
        return (Integer) getAttributeInternal(SCOBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScoBasis.
     * @param value value to set the ScoBasis
     */
    public void setScoBasis(Integer value) {
        setAttributeInternal(SCOBASIS, value);
    }

    /**
     * Gets the attribute value for EoId, using the alias name EoId.
     * @return the value of EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoId.
     * @param value value to set the EoId
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for CoaId, using the alias name CoaId.
     * @return the value of CoaId
     */
    public Integer getCoaId() {
        return (Integer) getAttributeInternal(COAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CoaId.
     * @param value value to set the CoaId
     */
    public void setCoaId(Integer value) {
        setAttributeInternal(COAID, value);
    }

    /**
     * Gets the attribute value for CurrConvFctr, using the alias name CurrConvFctr.
     * @return the value of CurrConvFctr
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrConvFctr.
     * @param value value to set the CurrConvFctr
     */
    public void setCurrConvFctr(Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }

    /**
     * Gets the attribute value for CurrIdBs, using the alias name CurrIdBs.
     * @return the value of CurrIdBs
     */
    public Integer getCurrIdBs() {
        return (Integer) getAttributeInternal(CURRIDBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrIdBs.
     * @param value value to set the CurrIdBs
     */
    public void setCurrIdBs(Integer value) {
        setAttributeInternal(CURRIDBS, value);
    }

    /**
     * Gets the attribute value for CurrIdSp, using the alias name CurrIdSp.
     * @return the value of CurrIdSp
     */
    public Integer getCurrIdSp() {
        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrIdSp.
     * @param value value to set the CurrIdSp
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for ExtDocDt, using the alias name ExtDocDt.
     * @return the value of ExtDocDt
     */
    public Timestamp getExtDocDt() {
        return (Timestamp) getAttributeInternal(EXTDOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExtDocDt.
     * @param value value to set the ExtDocDt
     */
    public void setExtDocDt(Timestamp value) {
        setAttributeInternal(EXTDOCDT, value);
    }

    /**
     * Gets the attribute value for ExtDocNo, using the alias name ExtDocNo.
     * @return the value of ExtDocNo
     */
    public String getExtDocNo() {
        return (String) getAttributeInternal(EXTDOCNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExtDocNo.
     * @param value value to set the ExtDocNo
     */
    public void setExtDocNo(String value) {
        setAttributeInternal(EXTDOCNO, value);
    }

    /**
     * Gets the attribute value for ShipAdds, using the alias name ShipAdds.
     * @return the value of ShipAdds
     */
    public String getShipAdds() {
        return (String) getAttributeInternal(SHIPADDS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShipAdds.
     * @param value value to set the ShipAdds
     */
    public void setShipAdds(String value) {
        setAttributeInternal(SHIPADDS, value);
    }

    /**
     * Gets the attribute value for TaxRuleFlg, using the alias name TaxRuleFlg.
     * @return the value of TaxRuleFlg
     */
    public String getTaxRuleFlg() {
        return (String) getAttributeInternal(TAXRULEFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxRuleFlg.
     * @param value value to set the TaxRuleFlg
     */
    public void setTaxRuleFlg(String value) {
        setAttributeInternal(TAXRULEFLG, value);
    }

    /**
     * Gets the attribute value for TlrncDays, using the alias name TlrncDays.
     * @return the value of TlrncDays
     */
    public Number getTlrncDays() {
        return (Number) getAttributeInternal(TLRNCDAYS);
    }

    /**
     * Sets <code>value</code> as the attribute value for TlrncDays.
     * @param value value to set the TlrncDays
     */
    public void setTlrncDays(Number value) {
        setAttributeInternal(TLRNCDAYS, value);
    }

    /**
     * Gets the attribute value for ScoBomFlg, using the alias name ScoBomFlg.
     * @return the value of ScoBomFlg
     */
    public String getScoBomFlg() {
        return (String) getAttributeInternal(SCOBOMFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScoBomFlg.
     * @param value value to set the ScoBomFlg
     */
    public void setScoBomFlg(String value) {
        setAttributeInternal(SCOBOMFLG, value);
    }


    /**
     * Gets the attribute value for ScoAmdDt, using the alias name ScoAmdDt.
     * @return the value of ScoAmdDt
     */
    public Timestamp getScoAmdDt() {
        return (Timestamp) getAttributeInternal(SCOAMDDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScoAmdDt.
     * @param value value to set the ScoAmdDt
     */
    public void setScoAmdDt(Timestamp value) {
        setAttributeInternal(SCOAMDDT, value);
    }

    /**
     * Gets the attribute value for ScoAmdNo, using the alias name ScoAmdNo.
     * @return the value of ScoAmdNo
     */
    public Integer getScoAmdNo() {
        return (Integer) getAttributeInternal(SCOAMDNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScoAmdNo.
     * @param value value to set the ScoAmdNo
     */
    public void setScoAmdNo(Integer value) {
        setAttributeInternal(SCOAMDNO, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMmScoSrc() {
        return (RowIterator) getAttributeInternal(MMSCOSRC);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMmScoOp() {
        return (RowIterator) getAttributeInternal(MMSCOOP);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param orgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String orgId, String docId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, orgId, docId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        this.setCldId(EbizParams.GLBL_APP_CLD_ID());
        this.setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        this.setHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        this.setOrgId(EbizParams.GLBL_APP_USR_ORG());
        this.setDocId(resolvEl("#{pageFlowScope.GLBL_SCO_TXN_ID}").toString());
        this.setDocDt(new Timestamp(System.currentTimeMillis()));
        this.setFyId(GetFyIdFromFunc());
        this.setScoId("SCO000");
        this.setScoStat(217);
        this.setScoMode(313);
        this.setScoType(retDefualtScType());
        this.setScoBasis(828);
        this.setScoBomFlg("Y");
        this.setTlrncDays(new Number(0));
        this.setUsrIdCreate(EbizParams.GLBL_APP_USR());
        this.setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        Integer currIdBs = this.getCurrIdBs(EbizParams.GLBL_APP_USR_ORG()).intValue();
        this.setCurrIdBs(currIdBs);
        this.setCurrConvFctr(new Number(1));
        this.setTaxRuleFlg("N");
        this.setScoAmdNo(0);
        this.setScoAmdDt(new Timestamp(System.currentTimeMillis()));
        this.CreateInMmScoSrcTab();
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        // super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_INSERT) {
            this.setScoId(GetScoDispIdFromFunc());
        }
        if (operation == DML_UPDATE) {
            this.setUsrIdMod(EbizParams.GLBL_APP_USR());
            this.setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        }
        super.doDML(operation, e);
    }

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * To check Default Subcontracting Type
     * */
    public Integer retDefualtScType() {
        Integer retVal = 0;
        try {
            retVal = Integer.parseInt(this.callStoredFunction(Types.VARCHAR, "MM.fn_sc_chk_org_prf(?,?,?,?)", new Object[] {
                                                              this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                              "DEF_SC_TYPE"
            }).toString());

            System.out.println("Value of Defualt Subcontracting Type --- " + retVal);

        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION fn_sc_chk_org_prf :" + e.getMessage());
        }
        return retVal;
    }

    /**
     * To generate Financial Id
     * */

    public Integer GetFyIdFromFunc() {
        Integer fyId = 0;
        try {
            fyId = (Integer) this.callStoredFunction(Types.INTEGER, "APP.FN_GET_FY_ID(?,?,?,?)", new Object[] {
                                                     this.getCldId(), this.getOrgId(),
                                                     new Timestamp(System.currentTimeMillis()), "FY"
            });
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at MnfRcEoImpl :" + e.getMessage());
        }
        return fyId;
    }

    /**
     * To Generate Display Id
     * */

    public String GetScoDispIdFromFunc() {
        String dispId = "0";
        try {
            dispId = this.callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                             this.getSlocId(), this.getCldId(), this.getOrgId(), 36501, null,
                                             this.getScoType(), "MM$SCO", this.getFyId(), 0
            }).toString();
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_MNF_GET_PRF_ID at Impl :" + e.getMessage());
        }
        return dispId;
    }

    /**
     * Method to resolve expression- returns String value
     * */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * To get value of currency Base
     * */
    public BigDecimal getCurrIdBs(String OrgId) {
        return (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.PKG_APP.GET_ORG_DEF_CURR_BS1(?)", new Object[] {
                                               OrgId });
    }

    /**
     * To Insert data in MMScoSrc Table
     * */
    public void CreateInMmScoSrcTab() {
        Row cr = getMmScoSrc().createRow();
        cr.setAttribute("CldId", this.getCldId());
        cr.setAttribute("SlocId", this.getSlocId());
        cr.setAttribute("HoOrgId", this.getHoOrgId());
        cr.setAttribute("OrgId", this.getOrgId());
        cr.setAttribute("DocId", this.getDocId());
        cr.setAttribute("DocTypeSrc", this.getScoBasis());
        cr.setAttribute("DocIdSrc", "0");
        cr.setAttribute("DocDtSrc", this.getDocDt());
        getMmScoSrc().insertRow(cr);
    }

}

