package scop.model.service;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.EbizParamsAPPUtils;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.math.BigDecimal;

import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.ADFContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.rules.JboPrecisionScaleValidator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import scop.model.service.common.SubContractOrderAppModule;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 15 12:30:01 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SubContractOrderAppModuleImpl extends ApplicationModuleImpl implements SubContractOrderAppModule {
    /**
     * This is the default constructor (do not remove).
     */
    public SubContractOrderAppModuleImpl() {
    }

    /**
     * Getting Doc Id from global parameter
     * @return
     * */
    public String getScoTxnDocId() {
        return resolvEl("#{pageFlowScope.GLBL_SCO_TXN_ID}").toString();
    }

    /**
     * Return Current Row Attribute Method
     * @return Object
     * */
    public Object getCurrentRowAttribute(String voName, String param) {
        ViewObject vo = this.findViewObject(voName);
        Row cr = vo.getCurrentRow();
        System.out.println("Value Get In getCurrentRowAttribute :::: " + param);
        return cr.getAttribute(param);
    }

    /**
     * Main Application Filter
     * */
    public void mainAppFilter(String CldId, String HoOrgId, String OrgId, Integer SlocId) {
        filterSearchSco_vw(CldId, SlocId, HoOrgId, OrgId);
    }

    /**
     * Filter Search View
     * */
    public void filterSearchSco_vw(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        ViewObjectImpl searchSco_vw = this.getSearchScoVwVo1();
        searchSco_vw.setNamedWhereClauseParam("BindCldId", cld_id);
        searchSco_vw.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        searchSco_vw.setNamedWhereClauseParam("BindOrgId", org_id);
        searchSco_vw.setNamedWhereClauseParam("BindSlocId", sloc_id);
        searchSco_vw.setNamedWhereClauseParam("BindScoDocId", -1);
        searchSco_vw.executeQuery();
    }

    /**
     * Function of Search
     * */
    public void searchSco_Func() {
        ViewObjectImpl impl = this.getSearchScoVwVo1();
        impl.setNamedWhereClauseParam("BindCldId", getCurrentRowAttribute("TransientVO1", "TransCldId"));
        impl.setNamedWhereClauseParam("BindSlocId", getCurrentRowAttribute("TransientVO1", "TransSlocId"));
        impl.setNamedWhereClauseParam("BindHoOrgId", getCurrentRowAttribute("TransientVO1", "TransHoOrgId"));
        impl.setNamedWhereClauseParam("BindOrgId", getCurrentRowAttribute("TransientVO1", "TransOrgId"));
        impl.setNamedWhereClauseParam("BindFromDate", getCurrentRowAttribute("TransientVO1", "TransFromDate"));
        impl.setNamedWhereClauseParam("BindToDate", getCurrentRowAttribute("TransientVO1", "TransToDate"));
        impl.setNamedWhereClauseParam("BindScoDocId", getCurrentRowAttribute("TransientVO1", "TransScoDocId"));
        impl.setNamedWhereClauseParam("BindStatId", getCurrentRowAttribute("TransientVO1", "TransStatus"));
        impl.setNamedWhereClauseParam("BindModeId", getCurrentRowAttribute("TransientVO1", "TransMode"));
        impl.setNamedWhereClauseParam("BindTypeId", getCurrentRowAttribute("TransientVO1", "TransScoType"));
        impl.setNamedWhereClauseParam("BindBasisId", getCurrentRowAttribute("TransientVO1", "TransScoBasis"));
        impl.executeQuery();
    }

    /**
     * Function of Reset
     * */
    public void resetSco_Func() {
        ViewObjectImpl impl = this.getSearchScoVwVo1();
        impl.setNamedWhereClauseParam("BindCldId", getCurrentRowAttribute("TransientVO1", "TransCldId"));
        impl.setNamedWhereClauseParam("BindSlocId", getCurrentRowAttribute("TransientVO1", "TransSlocId"));
        impl.setNamedWhereClauseParam("BindHoOrgId", getCurrentRowAttribute("TransientVO1", "TransHoOrgId"));
        impl.setNamedWhereClauseParam("BindOrgId", getCurrentRowAttribute("TransientVO1", "TransOrgId"));
        impl.setNamedWhereClauseParam("BindFromDate", getCurrentRowAttribute("TransientVO1", "TransFromDate"));
        impl.setNamedWhereClauseParam("BindToDate", getCurrentRowAttribute("TransientVO1", "TransToDate"));
        impl.setNamedWhereClauseParam("BindScoDocId", -1);
        impl.setNamedWhereClauseParam("BindStatId", getCurrentRowAttribute("TransientVO1", "TransStatus"));
        impl.setNamedWhereClauseParam("BindModeId", getCurrentRowAttribute("TransientVO1", "TransMode"));
        impl.setNamedWhereClauseParam("BindTypeId", getCurrentRowAttribute("TransientVO1", "TransScoType"));
        impl.setNamedWhereClauseParam("BindBasisId", getCurrentRowAttribute("TransientVO1", "TransScoBasis"));
        impl.executeQuery();
        this.getTransientVO1().executeQuery();
    }

    /**
     * Filter MMSCO Table in view Mode
     * */
    public void filterMmSco_Func(String cld_id, Integer sloc_id, String ho_org_id, String org_id) {
        ViewObjectImpl impl = this.getMmScoVO1();
        ViewCriteria criteria = impl.getViewCriteria("MmScoVOCriteria");
        impl.applyViewCriteria(criteria);
        impl.setNamedWhereClauseParam("BindCldId", cld_id);
        impl.setNamedWhereClauseParam("BindSlocId", sloc_id);
        impl.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        impl.setNamedWhereClauseParam("BindOrgId", org_id);
        impl.setNamedWhereClauseParam("BindDocId", getScoTxnDocId());
        impl.executeQuery();
    }

    /**
     * Filter LOVTncVo View
     * */
    public void filterLOVTncVo() {
        ViewObjectImpl tnc = this.getLOVTncVo1();
        tnc.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        tnc.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        tnc.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        tnc.executeQuery();
    }

    /**
     * Method to create HexDocId Id
     * @return
     * */
    public void GetHexDocNo() {
        try {
            String GetHexDocNo = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                                         EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                         EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(),
                                                         36501, 0
            }).toString();
            RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_SCO_TXN_ID", GetHexDocNo);
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID :" + e.getMessage());
        }
    }

    /**
     * Method to fetch Coa Id on the basis of EoId.
     * @param eoId
     * @return
     */
    public Integer getCoaIdForCurrEo(Integer eoId) {
        Object coaIdO = ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_GET_COA_ID_FRM_EO_ID(?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), eoId
        }, Types.INTEGER);
        return (coaIdO == null ? null : (Integer) (coaIdO));
    }

    /**
     * Method to fetch Shipping adds on the basis of EoId.
     * @param eoId
     * @return
     */
    public String getDefaultShippingAddsOfCurrEo(Integer eoId) {
        Object shipAddsO =
            ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_GET_DFLT_SHIP_ADDS_OF_EO_ID(?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                       EbizParams.GLBL_HO_ORG_ID(), eoId
        }, Types.VARCHAR);
        return (shipAddsO == null ? null : shipAddsO.toString());
    }

    /**
     * Method for View Other Charges
     * */
    public void viewOtherChargesVw() {
        ViewObjectImpl impVwVo1 = this.getMmOcImpVwVo1();
        impVwVo1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impVwVo1.setNamedWhereClauseParam("DocIdBind", 36501);
        impVwVo1.setNamedWhereClauseParam("DocTypeIdBind",
                                          (Integer) this.getMmScoVO1().first().getAttribute("ScoType") == null ? 826 :
                                          (Integer) this.getMmScoVO1().first().getAttribute("ScoType"));
        impVwVo1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impVwVo1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impVwVo1.executeQuery();

    }

    /**
     * Method for Add Other Charges
     * */
    public void addOtherCharges() {
        Row currentRow = this.getMmScoOcVO1().getCurrentRow();
        currentRow.setAttribute("CoaId", getCurrentRowAttribute("MmOcImpVwVo1", "CoaId"));
        currentRow.setAttribute("CurrId", getCurrentRowAttribute("MmScoVO1", "CurrIdSp"));
        currentRow.setAttribute("CurrRate", getCurrentRowAttribute("MmScoVO1", "CurrConvFctr"));
        currentRow.setAttribute("TranType", getCurrentRowAttribute("MmOcImpVwVo1", "OcCalcType"));
        currentRow.setAttribute("OcId", getCurrentRowAttribute("MmOcImpVwVo1", "OcId"));
        currentRow.setAttribute("OcDesc", getCurrentRowAttribute("MmOcImpVwVo1", "OcCat"));
    }

    /**
     * Method for execute Dlivery Schedule View
     * */
    public void executeDlvSchdlView() {
        this.getDBTransaction().postChanges();
        ViewObjectImpl dlvSchdlViewVo1 = this.getDlvSchdlViewVo1();
        dlvSchdlViewVo1.setNamedWhereClauseParam("FlagBind", 1);
        dlvSchdlViewVo1.executeQuery();
        this.getTransientVO1().executeQuery();
    }

    /**
     * @param val
     */
    public void selectAllCheckBox(boolean val) {
        ViewObject dlvView = this.getDlvSchdlViewVo1();
        RowSetIterator rit = dlvView.createRowSetIterator(null);
        /** Iterate through every visible row of view */

        while (rit.hasNext()) {
            Row row = rit.next();
            if (val) {
                row.setAttribute("SelectItmChekBoxTrans", "Y");
                row.setAttribute("SchdlQuantTrans", row.getAttribute("BalanceQty"));
            } else {
                row.setAttribute("SelectItmChekBoxTrans", "N");
                row.setAttribute("SchdlQuantTrans", StaticValue.NUMBER_ZERO);
            }
        }
        rit.closeRowSetIterator();
    }

    /**
     * Method to set WhId in dlvSchView and RateContractVo.
     * @param WhId
     */
    public void setWhIdInDlvSchVw(StringBuffer WhId) {
        RowSetIterator citr = this.getDlvSchdlViewVo1().createRowSetIterator(null);
        while (citr.hasNext()) {
            //system.out.println("setting wh :" + WhId);
            Row next = citr.next();
            next.setAttribute("whIdTrans", WhId.toString());
        }
        citr.closeRowSetIterator();
    }

    /** Set Doc Type Value
     * 826  for	Inward Subcontracting
     * 827  for	Outward Subcontracting
     * */
    @SuppressWarnings("oracle.jdeveloper.java.unchecked-conversion-or-cast")
    public void setDocTypeValue() {
        Map pageFlowScope = RequestContext.getCurrentInstance().getPageFlowScope();
        pageFlowScope.put("DOC_TYPE_ID", getCurrentRowAttribute("MmScoVO1", "ScoType"));
    }

    /*---------------------------------------------Work Flow Setup---------------------------------------------------*/
    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }

    /**
     * Generalized method used to display the facesmessages.
     * Created by Vishal Kumar on 09-09-2014.
     * @param msgHdr is to set the header for message dialog
     * @param msgDtl is to set if further detail information in meassage is required.
     * @param msgSeverity is to set severity mode.
     * @param msgMode is kept to incorporate conditional activities.
     * **/
    public void showFacesMsg(String msgHdr, String msgDtl, javax.faces.application.FacesMessage.Severity msgSeverity,
                             String msgMode) {
        FacesMessage msg = new FacesMessage(msgHdr);
        msg.setDetail(msgDtl);
        msg.setSeverity(msgSeverity);
        FacesContext.getCurrentInstance().addMessage(null, msg);
    }

    public Object resolvElDCMsg(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Method used to call work flow function.
     * calls db functions APP.WF_GET_USR_LEVEL & APP.WF_INS_TXN
     * Created by Vishal Kr on 06-02-2015.
     * **/

    public String callWfFunctions() {
        String _scoTxnId = getScoTxnDocId();
        Integer docId = 36501;
        Integer docTypId = Integer.parseInt(resolvEl("#{pageFlowScope.DOC_TYPE_ID}").toString());
        String wfId = getWfId();
        Object level;
        try {
            level = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                       EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), wfId, docId, docTypId
            });
            callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                               EbizParams.GLBL_APP_USR_ORG(), docId, docTypId, wfId, _scoTxnId,
                               EbizParams.GLBL_APP_USR(), EbizParams.GLBL_APP_USR(), level, level, "I", "A", 0
            });
        } catch (Exception nfe) {
            showFacesMsg(resolvElDCMsg("#{bundle['MSG.1113']}").toString(), null, FacesMessage.SEVERITY_ERROR, null);
            nfe.printStackTrace();
        }
        return null;
    }

    /**
     * Method used to get the Work flow id for a document.
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public String getWfId() {
        Integer docId = 36501;
        Integer docTypId = Integer.parseInt(resolvEl("#{pageFlowScope.DOC_TYPE_ID}").toString());
        try {
            return callStoredFunction(VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                      EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                      EbizParams.GLBL_APP_USR_ORG(), docId, docTypId
        }).toString();
        } catch (Exception e) {
            e.printStackTrace();
            StringBuilder saveMsg = new StringBuilder("<html><body><p><b>Error in getting Work Flow Details. </b></p>");
            saveMsg.append("</body></html>");
            showFacesMsg(saveMsg.toString(), null, FacesMessage.SEVERITY_ERROR, null);
        }
        return "0";
    }

    /**
     * Method created to call DB fucntion to get the user at which the document is pending
     * Created by Vishal Kumar on 09-09-2014.
     * **/

    public Integer getDocUsrFromWF() {
        String _scoTxnId = getScoTxnDocId();
        Integer docId = 36501;
        Integer docTypId = Integer.parseInt(resolvEl("#{pageFlowScope.DOC_TYPE_ID}").toString());
        Object fnRetVal;
        try {
            fnRetVal = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                          EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                          EbizParams.GLBL_APP_USR_ORG(), docId, _scoTxnId, docTypId
            });
            if (fnRetVal != null) {
                return Integer.parseInt(fnRetVal.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        showFacesMsg("Error while fetching user work flow details", null, FacesMessage.SEVERITY_ERROR, null);
        return 0;
    }

    /*---------------------------------Get User Name for Given UserId-------------------------------------*/
    public String getUserName(Integer u_Id, Integer slc_id) {
        String uname = "";
        ViewObjectImpl impl = this.getLOVUserNmWF1();
        impl.setNamedWhereClauseParam("UsrIdBindVar", u_Id);
        impl.setNamedWhereClauseParam("SlocIDBindVar", slc_id);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("UsrName");
            String s = (a == null ? null : a.toString());
            uname = s;
        }
        return uname;
    }

    /*---------------------------------After Approval Change Status Function----------------------------*/
    public void updateWfStat(String wf_mode) {
        filterMmSco_Func(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                         EbizParams.GLBL_APP_USR_ORG());
        //wf_mode : V - revert, I - Initialize, F - Forwarded, A - Approved, R - Reject
        if (wf_mode != null) {
            Row r = this.getMmScoVO1().first();
            if ("I".equals(wf_mode)) {
                r.setAttribute("ScoMode", 313);
            }
            if ("F".equals(wf_mode)) {
                r.setAttribute("ScoMode", 317);
            } else if ("A".equals(wf_mode)) {
                r.setAttribute("ScoMode", 314);
            }
        }
        this.getDBTransaction().commit();
    }

    /*---------------------------------Execute All Views--------------------------------------*/
    public void executeAllViewsForInwardOutward() {
        this.getDBTransaction().postChanges();
        this.getMmScoOpItmVOInwardInput().executeQuery();
        this.getMmScoOpItmVOInwardOutput().executeQuery();
        this.getMmScoOpItmVOOutwardInput().executeQuery();
        this.getMmScoOpItmVOOutwardOutput().executeQuery();
        System.out.println("----------------------View executing----------------------");
    }

    /**Method to generate Schedule Number (as per Sub Contract Order,Item and Delivery Date).
     * @param dlvDt
     * @return
     */
    public Integer generateScheduleNo(Timestamp dlvDt) {
        Integer schdlNo = 1;
        ViewObject dlvSchdl = this.getMmScoDlvSchdlVO1();
        Row fltrRow[] = dlvSchdl.getFilteredRows("DlvDt", dlvDt);
        System.out.println("Row for this date-" + fltrRow.length);
        if (fltrRow.length > 0) {
            if (fltrRow[0].getAttribute("DlvSchdlNo") != null) {
                schdlNo = Integer.parseInt(fltrRow[0].getAttribute("DlvSchdlNo").toString());
            }
        } else {
            Integer Srno = 0;
            Integer max = 0;
            dlvSchdl.setRangeSize(-1);
            Row row[] = dlvSchdl.getAllRowsInRange();
            for (Row r : row) {
                try {
                    Srno = Integer.parseInt(r.getAttribute("DlvSchdlNo").toString());
                    System.out.println("Row Scdl No is-" + Srno);
                } catch (NullPointerException e) {
                    Srno = 0;
                }
                if (Srno > max) {
                    max = Srno;
                }
            }

            max = max + 1;
            System.out.println("Max Schdl No is-->" + max);
            schdlNo = max;
        }
        System.out.println("Delivery Schedule Number is" + schdlNo);
        return schdlNo;
    }

    /**Method to generate Serial Number for Table Rows
     * **.
     * @param voName
     */
    public Integer serialNumGenerate(String voName) {
        ViewObject DlvItm = this.findViewObject(voName);
        Integer Srno = 0;
        Integer max = 0;
        DlvItm.setRangeSize(-1);
        Row row[] = DlvItm.getAllRowsInRange();
        for (Row r : row) {
            try {
                Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
            } catch (NullPointerException e) {
                Srno = 0;
            }
            if (Srno > max) {
                max = Srno;
            }
        }
        max = max + 1;
        System.out.println("Max Value is-->" + max);
        return max;
    }

    /*-----------------------Create and Insert in Delivery Schedule-------------------------*/
    public void CreateInsertInScoDlvSchdl() {
        String SelectItmChekBox = "Y";
        //   Row TransCurRow = this.getTransientVO1().getCurrentRow();
        RowQualifier Rq = new RowQualifier(this.getDlvSchdlViewVo1());
        Rq.setWhereClause("SelectItmChekBoxTrans='" + SelectItmChekBox + "'");
        Row[] Fr = this.getDlvSchdlViewVo1().getFilteredRows(Rq);
        for (Row Rw : Fr) {
            ViewObjectImpl dlvSchdl = this.getMmScoDlvSchdlVO1();
            Row cR = dlvSchdl.createRow();
            Integer Sr_No = serialNumGenerate("MmScoDlvSchdlVO1"); // To Generate Serial Number
            Timestamp DelvryDt;
            DelvryDt =
                new oracle.jbo.domain.Timestamp(getCurrentRowAttribute("TransientVO1", "TransDelvryDt").toString());
            Integer generateScheduleNo = generateScheduleNo(DelvryDt);
            cR.setAttribute("DlvDt", getCurrentRowAttribute("TransientVO1", "TransDelvryDt"));
            cR.setAttribute("DlvMode", getCurrentRowAttribute("TransientVO1", "TransDelvryMode"));
            cR.setAttribute("WhId", getCurrentRowAttribute("TransientVO1", "TransDelvryWhId"));
            cR.setAttribute("DlvAddsId", getCurrentRowAttribute("TransientVO1", "TransDelvryWhAddrId"));
            cR.setAttribute("Remarks", getCurrentRowAttribute("TransientVO1", "TransDelvryRemrks"));
            cR.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
            cR.setAttribute("UsrIdCreateDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
            cR.setAttribute("ItmId", Rw.getAttribute("ItmId"));
            cR.setAttribute("ItmUom", Rw.getAttribute("ItmUom"));
            cR.setAttribute("ItmUomBs", Rw.getAttribute("ItmUomBs"));
            cR.setAttribute("UomConvFctr", Rw.getAttribute("UomConvFctr"));
            cR.setAttribute("ItmType", Rw.getAttribute("ItmType"));
            cR.setAttribute("TotQty", Rw.getAttribute("OrdQty"));
            cR.setAttribute("DlvQty", Rw.getAttribute("SchdlQuantTrans"));
            cR.setAttribute("DlvQtyBs", Rw.getAttribute("SchdlQuantTrans"));
            cR.setAttribute("AvlQty", Rw.getAttribute("availableStockTrans"));
            cR.setAttribute("SrNo", Sr_No);
            cR.setAttribute("DlvSchdlNo", generateScheduleNo);
            cR.setAttribute("BalQty", Rw.getAttribute("SchdlQuantTrans"));
            cR.setAttribute("PrjId", getCurrentRowAttribute("TransientVO1", "TransProjectid"));
            // To calculate and add Balance Quantity
            /* Number BalnceQty = StaticValue.NUMBER_ZERO;
            Number avail = (Number) Rw.getAttribute("availableStockTrans");
            Number schDlQty = (Number) Rw.getAttribute("SchdlQuantTrans");
            if (avail.compareTo(schDlQty) == -1) {
                BalnceQty = (Number) schDlQty.minus(avail);
            }
            cR.setAttribute("BalQty", BalnceQty); */
            dlvSchdl.insertRow(cR);
        }
    }

    /**
     * Set Balance Qty to Schedule Quantity
     * */
    public void setBalanceQtyToSchdlQty() {
        Number BalQty = (Number) getCurrentRowAttribute("DlvSchdlViewVo1", "BalanceQty");
        this.getDlvSchdlViewVo1().getCurrentRow().setAttribute("SchdlQuantTrans", BalQty);
    }

    /**
     * Generate Default Delivery Schedule
     * */
    public void GenDefaultDeliveryScheduleFunction() {
        String WhId = resolvEl("#{pageFlowScope.PARAM_USR_WH_ID}").toString();
        System.out.println("-----------Defualt warehouse------ " + WhId);
        RowSetIterator Cr = this.getDlvSchdlViewVo1().createRowSetIterator(null);
        while (Cr.hasNext()) {
            Row Rw = Cr.next();
            ViewObjectImpl dlvSchdl = this.getMmScoDlvSchdlVO1();
            Row cR = dlvSchdl.createRow();
            Integer Sr_No = serialNumGenerate("MmScoDlvSchdlVO1"); // To Generate Serial Number
            cR.setAttribute("DlvDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
            cR.setAttribute("DlvMode", 163);
            cR.setAttribute("WhId", WhId);
            cR.setAttribute("DlvAddsId", getWhDefualtAddress(WhId));
            cR.setAttribute("Remarks", "Default Delivery Schedule");
            cR.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
            cR.setAttribute("UsrIdCreateDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
            cR.setAttribute("ItmId", Rw.getAttribute("ItmId"));
            cR.setAttribute("ItmUom", Rw.getAttribute("ItmUom"));
            cR.setAttribute("ItmUomBs", Rw.getAttribute("ItmUomBs"));
            cR.setAttribute("UomConvFctr", Rw.getAttribute("UomConvFctr"));
            cR.setAttribute("ItmType", Rw.getAttribute("ItmType"));
            cR.setAttribute("TotQty", Rw.getAttribute("OrdQty"));
            cR.setAttribute("DlvQty", Rw.getAttribute("OrdQty"));
            cR.setAttribute("DlvQtyBs", Rw.getAttribute("OrdQty"));
            cR.setAttribute("AvlQty", GetAvailableStock(Rw.getAttribute("ItmId").toString()));
            cR.setAttribute("SrNo", Sr_No);
            /* Timestamp DelvryDt;
             DelvryDt = new oracle.jbo.domain.Timestamp(new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
            cR.setAttribute("DlvSchdlNo",
                            generateScheduleNo((Timestamp) this.getMmScoVO1().getCurrentRow().getAttribute("DocDt"))); */
            cR.setAttribute("DlvSchdlNo", 1);
            cR.setAttribute("BalQty", Rw.getAttribute("OrdQty"));
            cR.setAttribute("PrjId", EbizParamsAPPUtils.getPrjIdFrmWhId(this, WhId));
            // To calculate and add Balance Quantity
            /* Number BalnceQty = StaticValue.NUMBER_ZERO;
            Number avail = GetAvailableStock(Rw.getAttribute("ItmId").toString());
            Number schDlQty = (Number) Rw.getAttribute("BalanceQty");
            if (avail.compareTo(schDlQty) == -1) {
                BalnceQty = (Number) schDlQty.minus(avail);
            }
            cR.setAttribute("BalQty", BalnceQty); */
            dlvSchdl.insertRow(cR);
        }
    }

    /**
     * Get Available Stock of Items In outward case
     * Call In MmScIssuItm Table On TransAvlQtyForItm Getter In Row Impl Class
     * @ Return
     * */
    public oracle.jbo.domain.Number GetAvailableStock(String ItemId) {
        Integer FyId = (Integer) getCurrentRowAttribute("MmScoVO1", "FyId");
        String DocId = getScoTxnDocId();
        String WhId = resolvEl("#{pageFlowScope.PARAM_USR_WH_ID}").toString();
        oracle.jbo.domain.Number RetVal = StaticValue.NUMBER_ZERO;
        try {
            BigDecimal valideQty = (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_GET_AVAIL_STK(?,?,?,?,?,?,?)", new Object[] {
                                                                   EbizParams.GLBL_APP_CLD_ID(),
                                                                   EbizParams.GLBL_APP_SERV_LOC(),
                                                                   EbizParams.GLBL_APP_USR_ORG(), ItemId, WhId, FyId,
                                                                   DocId
            });

            if (valideQty != null)
                RetVal = new oracle.jbo.domain.Number(valideQty);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return RetVal;
    }

    public String getWhDefualtAddress(String whId) {
        String AddId = null;
        ViewObjectImpl deliveryWhVo1 = this.getLOVDeliveryWhVo1();
        deliveryWhVo1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        deliveryWhVo1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        deliveryWhVo1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        deliveryWhVo1.setNamedWhereClauseParam("BindWhID", whId);
        deliveryWhVo1.executeQuery();
        Row[] allRowsInRange = deliveryWhVo1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object a = allRowsInRange[0].getAttribute("AddsId");
            String s = (a == null ? null : a.toString());
            AddId = s;
        }
        return AddId;
    }

    /**
     * Method for Validate delivery Schedule
     * 1 Delivery Date
     * 2 Delivery Mode
     * 3 Delivery Warehouse
     * */
    public Integer validateDelSchdlParams() {
        Integer i = 0;
        Object delDt = getCurrentRowAttribute("TransientVO1", "TransDelvryDt");
        Object delMode = getCurrentRowAttribute("TransientVO1", "TransDelvryMode");
        Object delWh = getCurrentRowAttribute("TransientVO1", "TransDelvryWhId");
        Object delPrj = getCurrentRowAttribute("TransientVO1", "TransProjectid");

        String SelectItmChekBox = "Y";
        RowQualifier Rq = new RowQualifier(this.getDlvSchdlViewVo1());
        Rq.setWhereClause("SelectItmChekBoxTrans='" + SelectItmChekBox + "'");
        Row[] Fr = this.getDlvSchdlViewVo1().getFilteredRows(Rq);
        Integer length = Fr.length;

        Object _dt = (delDt == null ? -1 : delDt);
        Object _mode = (delMode == null ? -1 : delMode);
        Object _Wh = (delWh == null ? -1 : delWh);
        Object _Prj = (delPrj == null ? -1 : delPrj);
        Integer _len = (length == 0 ? -1 : length);

        if (_dt.equals(-1)) {
            i = 1;
        } else if (_mode.equals(-1)) {
            i = 2;
        } else if (_Wh.equals(-1)) {
            i = 3;
        } else if (_Prj.equals(-1)) {
            i = 4;
        } else if (_len.equals(-1)) {
            i = 5;
        } else {
            RowQualifier Rw = new RowQualifier(this.getMmScoDlvSchdlVO1());
            Rw.setWhereClause("DlvDt = '" + delDt + "' and WhId='" + delWh + "' and ItmId='" +
                              getCurrentRowAttribute("DlvSchdlViewVo1", "ItmId") + "' and ItmType='" +
                              getCurrentRowAttribute("DlvSchdlViewVo1", "ItmType") + "'");
            Row[] filteredRows = this.getMmScoDlvSchdlVO1().getFilteredRows(Rw);
            Integer Fltr = filteredRows.length;
            return i = (Fltr.compareTo(0) > 0 ? 6 : Fltr);
        }
        return i;
    }

    /**
     * Method to validate Header
     * 1 - SCO Type mot selected
     * 2 - SCO Basis is not selected
     * 3 - EoId is not selected
     * @return
     */
    public Integer validateHeaderMandatoryFields() {
        Integer i = 0;
        Object ScoType = getCurrentRowAttribute("MmScoVO1", "ScoType");
        Object ScoBasis = getCurrentRowAttribute("MmScoVO1", "ScoBasis");
        Object EoId = getCurrentRowAttribute("MmScoVO1", "EoId");
        Object CurrIdSp = getCurrentRowAttribute("MmScoVO1", "CurrIdSp");
        Object ExtDocNo = getCurrentRowAttribute("MmScoVO1", "ExtDocNo");
        Object ExtDocDt = getCurrentRowAttribute("MmScoVO1", "ExtDocDt");

        Integer scType = (ScoType == null ? -1 : (Integer) ScoType);
        Integer scBasis = (ScoBasis == null ? -1 : (Integer) ScoBasis);
        Integer eId = (EoId == null ? -1 : (Integer) EoId);
        Integer CurrId = (CurrIdSp == null ? -1 : (Integer) CurrIdSp);
        Object Ext_Doc_No = (ExtDocNo == null ? -1 : ExtDocNo);
        Object Ext_Doc_Date = (ExtDocDt == null ? -1 : ExtDocDt);

        if (scType.equals(-1)) {
            i = 1;
        } else if (scBasis.equals(-1)) {
            i = 2;
        } else if (eId.equals(-1)) {
            i = 3;
        } else if (CurrId.equals(-1)) {
            i = 4;
        } else if ("Y".equals(mandatoryExtDocNoAndDate()) && Ext_Doc_No.equals(-1)) {
            i = 5;
        } else if ("Y".equals(mandatoryExtDocNoAndDate()) && Ext_Doc_Date.equals(-1)) {
            i = 6;
        }
        return i;
    }

    /**
     * Method to validate Header
     * 1 - BOM mot selected
     * 2 - Operation is not selected
     * @return
     */
    public Integer validateBomOperationFields() {
        Integer i = 0;
        String ScoBomFlg = getCurrentRowAttribute("MmScoVO1", "ScoBomFlg").toString();
        Object BomId = getCurrentRowAttribute("TransientTotAmtVo1", "TransBomDocId");
        Object OpId = getCurrentRowAttribute("TransientTotAmtVo1", "TransOpDocId");

        RowQualifier Rw = new RowQualifier(this.getMmScoOpVO1());
        Rw.setWhereClause("OpId = '" + OpId + "'");
        Row[] filteredRows = this.getMmScoOpVO1().getFilteredRows(Rw);
        Integer Fr = filteredRows.length;

        Object bom_id = (BomId == null ? -1 : BomId);
        Object op_id = (OpId == null ? -1 : OpId);
        Object len = (Fr.compareTo(0) > 0 ? -1 : Fr);

        if ("Y".equals(ScoBomFlg)) {
            if (bom_id.equals(-1)) {
                i = 1;
            } else if (op_id.equals(-1)) {
                i = 2;
            } else if (len.equals(-1)) {
                return 3;
            }
        } else if ("N".equals(ScoBomFlg)) {
            if (op_id.equals(-1)) {
                i = 2;
            } else if (len.equals(-1)) {
                return 3;
            }
        }
        return i;
    }

    /**
     * Code for Precision Check
     */
    public Boolean isPrecisionValid(Integer precision, Integer scale, oracle.jbo.domain.Number total) {
        JboPrecisionScaleValidator vc = new JboPrecisionScaleValidator();
        vc.setPrecision(precision);
        vc.setScale(scale);
        return vc.validateValue(total);
    }

    /**
     * Validate Items of Operation
     * @ Return Integer
     * */
    public Integer validateOperationItems() {
        Integer i = 0;
        if (this.getMmScoOpItmVO1().getAllRowsInRange().length > 0) {
            Object ItmId = getCurrentRowAttribute("MmScoOpItmVO1", "ItmId");
            Number ItmPrice = (Number) getCurrentRowAttribute("MmScoOpItmVO1", "ItmPrice");
            Number ItmQty = (Number) getCurrentRowAttribute("MmScoOpItmVO1", "ItmQty");
            Number AsblAmtSp = (Number) getCurrentRowAttribute("MmScoOpItmVO1", "AsblAmtSp");
            Integer ItmType = (Integer) getCurrentRowAttribute("MmScoOpItmVO1", "ItmType");

            Object a = ("_".toString().equals(ItmId.toString()) ? -1 : ItmId);
            Object b =
                (ItmPrice == null ? -1 :
                 ItmPrice.compareTo(0) == 0 ? -2 :
                 ItmPrice.compareTo(0) < 0 ? -3 : !isPrecisionValid(26, 6, ItmPrice) ? -4 : ItmPrice);
            Object c =
                (ItmQty == null ? -1 :
                 ItmQty.compareTo(0) == 0 ? -2 :
                 ItmQty.compareTo(0) < 0 ? -3 : !isPrecisionValid(26, 6, ItmQty) ? -4 : ItmQty);
            Object d =
                (AsblAmtSp == null ? -1 :
                 AsblAmtSp.compareTo(0) == 0 ? -2 :
                 AsblAmtSp.compareTo(0) < 0 ? -3 : !isPrecisionValid(26, 6, AsblAmtSp) ? -4 : AsblAmtSp);
            Object e = (ItmType != 830 ? -1 : ItmType);

            if (a.equals(-1)) {
                return 1;
            } else if (b.equals(-1) && e.equals(-1)) {
                return 2;
            } else if (b.equals(-2) && e.equals(-1)) {
                return 3;
            } else if (b.equals(-3) && e.equals(-1)) {
                return 4;
            } else if (b.equals(-4) && e.equals(-1)) {
                return 5;
            } else if (c.equals(-1)) {
                return 6;
            } else if (c.equals(-2)) {
                return 7;
            } else if (c.equals(-3)) {
                return 8;
            } else if (c.equals(-4)) {
                return 9;
            } else if (d.equals(-1) && e.equals(-1)) {
                return 10;
            } else if (d.equals(-2) && e.equals(-1)) {
                return 11;
            } else if (d.equals(-3) && e.equals(-1)) {
                return 12;
            } else if (d.equals(-4) && e.equals(-1)) {
                return 13;
            }
        }
        return i;
    }

    /**
     * @param ruleId
     */
    public void ApplyOrderWiseTax(Integer ruleId) {
        Number p_curr_fctr = (Number) getCurrentRowAttribute("MmScoVO1", "CurrConvFctr");

        RowQualifier rq = new RowQualifier(this.getMmScoOpItmVO1());
        rq.setWhereClause("ItmType NOT IN ('" + 830 + "')");
        Row fr[] = this.getMmScoOpItmVO1().getFilteredRows(rq);
        for (Row nt : fr) {
            System.out.println("Item :::::: " + nt.getAttribute("ItmId").toString());
            System.out.println("Rule Id ::::: " + ruleId);
            ViewObjectImpl impl = this.getMmScoTrVO1();
            Row cR = impl.createRow();

            Object itmId = nt.getAttribute("ItmId");
            Number taxableAmountInItm =
                (nt.getAttribute("ItmAmtGsSp") == null ? StaticValue.NUMBER_ZERO :
                 (Number) nt.getAttribute("ItmAmtGsSp"));
            Number asblAmt =
                (nt.getAttribute("AsblAmtSp") == null ? StaticValue.NUMBER_ZERO :
                 (Number) nt.getAttribute("AsblAmtSp"));
            cR.setAttribute("SrNo", 1);
            cR.setAttribute("SrNoDest", 0);
            cR.setAttribute("ExmptFlg", "N");
            cR.setAttribute("ItmId", itmId);
            cR.setAttribute("TaxRuleId", ruleId);
            cR.setAttribute("TaxableAmt", taxableAmountInItm);
            BigDecimal ret =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.FN_INS_SCO_TR_LINES(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                getScoTxnDocId(), itmId, ruleId, EbizParams.GLBL_APP_USR(),
                                                taxableAmountInItm, asblAmt, p_curr_fctr
            });
            Number retVal = StaticValue.NUMBER_ZERO;
            System.out.println("Return total tax amout-->" + ret);
            try {
                retVal = new Number(ret);
            } catch (SQLException e) {
                System.out.println(e);
            }

            cR.setAttribute("TaxAmtSp", retVal);
            Number res = retVal.multiply(p_curr_fctr);
            res = ADFBeanUtils.roundOff(res);
            cR.setAttribute("TaxAmtBs", res);
            cR.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
            cR.setAttribute("UsrIdCreateDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
            impl.insertRow(cR);
        }
    }

    /**
     * Reset Order Wise Tax
     * */
    public void ResetOrderWiseTax() {
        RowQualifier rq = new RowQualifier(this.getMmScoTrLinesVO2());
        rq.setWhereClause("DocId = '" + getScoTxnDocId() + "'");
        Row[] rows = this.getMmScoTrLinesVO2().getFilteredRows(rq);
        for (int r = 0; r < rows.length; r++)
            if (rows[r] != null)
                rows[r].remove();

        RowQualifier rq1 = new RowQualifier(this.getMmScoTrVO2());
        rq1.setWhereClause("DocId = '" + getScoTxnDocId() + "'");
        Row[] rows1 = this.getMmScoTrVO2().getFilteredRows(rq1);
        for (int r1 = 0; r1 < rows1.length; r1++)
            if (rows1[r1] != null)
                rows1[r1].remove();
    }

    /**
     * Reset Tax Item Wise
     * */
    public void ResetItemWiseTax() {
        RowQualifier rq = new RowQualifier(this.getMmScoTrLinesVO2());
        rq.setWhereClause("DocId = '" + getScoTxnDocId() + "' and ItmId='" +
                          getCurrentRowAttribute("MmScoTrVO1", "ItmId").toString() + "'");
        Row[] rows = this.getMmScoTrLinesVO2().getFilteredRows(rq);
        for (int r = 0; r < rows.length; r++)
            if (rows[r] != null)
                rows[r].remove();

        this.getMmScoTrVO1().getCurrentRow().remove();
    }


    /**
     * Calculation for Total Amount Before Tax
     * */
    public Number TotAmountBeforeTax() {
        Number TotAmt = StaticValue.NUMBER_ZERO;
        RowQualifier rq = new RowQualifier(this.getMmScoOpItmVO2());
        rq.setWhereClause("DocId = '" + getScoTxnDocId() + "' and ItmType NOT IN ('" + 830 + "')");
        Row fr[] = this.getMmScoOpItmVO2().getFilteredRows(rq);
        for (Row r : fr) {
            Number AmtSp = (Number) r.getAttribute("ItmAmtSp");
            TotAmt = TotAmt.add(AmtSp);
        }
        return TotAmt;
    }

    /**
     * Calculation for Other Charges Amount
     * */
    public Number TotOtherChargesAmt() {
        Number TotOcAmt = StaticValue.NUMBER_ZERO;
        RowQualifier rq = new RowQualifier(this.getMmScoOcVO2());
        rq.setWhereClause("DocId = '" + getScoTxnDocId() + "'");
        Row fr[] = this.getMmScoOcVO2().getFilteredRows(rq);
        for (Row r : fr) {
            Number AmtSp = (Number) r.getAttribute("AmtSp");
            TotOcAmt = TotOcAmt.add(AmtSp);
        }
        return TotOcAmt;
    }

    /**
     * Total Tax Amount Calculation
     * */
    public Number TotTaxAmount(String VoName) {
        // TransientTotAmtVo
        // TransientVo
        Number TaxAmt = StaticValue.NUMBER_ZERO;
        if ("TransientVo".equals(VoName)) {
            String taxFlg = getCurrentRowAttribute("MmScoVO1", "TaxRuleFlg").toString();
            if ("N".equals(taxFlg) || "O".equals(taxFlg)) {
                RowQualifier rq = new RowQualifier(this.getMmScoTrVO2());
                rq.setWhereClause("DocId = '" + getScoTxnDocId() + "'");
                Row fr[] = this.getMmScoTrVO2().getFilteredRows(rq);
                for (Row r : fr) {
                    Number TaxAmtSp = (Number) r.getAttribute("TaxAmtSp");
                    TaxAmt = TaxAmt.add(TaxAmtSp);
                }
            }
            if ("I".equals(taxFlg)) {
                Row[] ar = this.getMmScoTrVO1().getAllRowsInRange();
                TaxAmt =
                    ar.length == 0 ? StaticValue.NUMBER_ZERO :
                    (Number) getCurrentRowAttribute("MmScoTrVO1", "TaxAmtSp");
            }
        }
        if ("TransientTotAmtVo".equals(VoName)) {
            RowQualifier rq1 = new RowQualifier(this.getMmScoTrVO2());
            rq1.setWhereClause("DocId = '" + getScoTxnDocId() + "'");
            Row fr1[] = this.getMmScoTrVO2().getFilteredRows(rq1);
            for (Row r1 : fr1) {
                Number TaxAmtSp1 = (Number) r1.getAttribute("TaxAmtSp");
                TaxAmt = TaxAmt.add(TaxAmtSp1);
            }
        }
        return TaxAmt;
    }

    /**
     * Get tax rule id in getter of transient
     * */
    public Integer getTaxRuleIdForGetterInTransient() {
        Integer TaxRuleId = 0;
        String taxFlg =
            this.getMmScoVO1().getCurrentRow() == null ? "F" :
            this.getMmScoVO1().getCurrentRow().getAttribute("TaxRuleFlg").toString();
        if ("N".equals(taxFlg) || "O".equals(taxFlg)) {
            RowQualifier rq = new RowQualifier(this.getMmScoTrVO2());
            rq.setWhereClause("DocId = '" + getScoTxnDocId() + "'");
            Row fr[] = this.getMmScoTrVO2().getFilteredRows(rq);
            for (Row r : fr) {
                Integer ruleId = (Integer) r.getAttribute("TaxRuleId");
                TaxRuleId = ruleId;
                break;
            }
        }
        if ("I".equals(taxFlg)) {
            Row[] ar = this.getMmScoTrVO1().getAllRowsInRange();
            TaxRuleId = ar.length == 0 ? 0 : (Integer) getCurrentRowAttribute("MmScoTrVO1", "TaxRuleId");
        }
        return TaxRuleId;
    }

    /**
     * Total Tax Row Count
     * */
    public Integer TotTaxRowCount() {
        Integer totTax = 0;
        String taxFlg = getCurrentRowAttribute("MmScoVO1", "TaxRuleFlg").toString();
        if ("N".equals(taxFlg) || "O".equals(taxFlg)) {
            RowQualifier rq = new RowQualifier(this.getMmScoTrVO2());
            rq.setWhereClause("DocId = '" + getScoTxnDocId() + "'");
            Row fr[] = this.getMmScoTrVO2().getFilteredRows(rq);
            totTax = (Integer) fr.length;
        }
        if ("I".equals(taxFlg)) {
            Row[] ar = this.getMmScoTrVO1().getAllRowsInRange();
            totTax = (Integer) ar.length;
        }
        return totTax;
    }

    /**
     * Item Wise tax order
     * */
    public void ItemWiseTaxOrder(Integer ruleId) {
        Number p_curr_fctr = (Number) getCurrentRowAttribute("MmScoVO1", "CurrConvFctr");
        Row nt = this.getMmScoOpItmVO1().getCurrentRow();
        ViewObjectImpl impl = this.getMmScoTrVO1();
        Row cR = impl.createRow();

        Object itmId = nt.getAttribute("ItmId");
        Number taxableAmountInItm =
            (nt.getAttribute("ItmAmtGsSp") == null ? StaticValue.NUMBER_ZERO : (Number) nt.getAttribute("ItmAmtGsSp"));
        Number asblAmt =
            (nt.getAttribute("AsblAmtSp") == null ? StaticValue.NUMBER_ZERO : (Number) nt.getAttribute("AsblAmtSp"));
        cR.setAttribute("SrNo", 1);
        cR.setAttribute("SrNoDest", 0);
        cR.setAttribute("ExmptFlg", "N");
        cR.setAttribute("ItmId", itmId);
        cR.setAttribute("TaxRuleId", ruleId);
        cR.setAttribute("TaxableAmt", taxableAmountInItm);

        BigDecimal ret = (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.FN_INS_SCO_TR_LINES(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                         EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                         getScoTxnDocId(), itmId, ruleId, EbizParams.GLBL_APP_USR(),
                                                         taxableAmountInItm, asblAmt, p_curr_fctr
        });
        Number retVal = StaticValue.NUMBER_ZERO;
        System.out.println("Return total tax amout-->" + ret);
        try {
            retVal = new Number(ret);
        } catch (SQLException e) {
            System.out.println(e);
        }

        cR.setAttribute("TaxAmtSp", retVal);
        Number res = retVal.multiply(p_curr_fctr);
        res = ADFBeanUtils.roundOff(res);
        cR.setAttribute("TaxAmtBs", res);
        cR.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
        cR.setAttribute("UsrIdCreateDt", StaticValue.getCurrDtWidTimestamp());
        impl.insertRow(cR);
    }

    /**
     * Method for Make Current Row In MMScoOpItem Table
     * */
    public void MakeCurrentRowInMmScoOpItemTable(String ItemId) {
        RowQualifier rq = new RowQualifier(this.getMmScoOpItmVO1());
        rq.setWhereClause("ItmId = '" + ItemId + "'");
        Row fr[] = this.getMmScoOpItmVO1().getFilteredRows(rq);
        for (Row r : fr) {
            if (!(r.equals(this.getMmScoOpItmVO1().getCurrentRow()))) {
                this.getMmScoOpItmVO1().setCurrentRow(r);
            }
        }
    }

    /**
     * Delete Items from Inward and Outward Table
     * */
    public void DeleteInwardOutwardItem(String voName) {
        ViewObject vO = this.findViewObject(voName);
        Row cR = vO.getCurrentRow();
        String ItemId = cR.getAttribute("ItmId").toString();
        if (ItemId != null) {
            if (removeFromMmScoTrLinesItemWise(ItemId) && removeFromMmScoTrItemWise(ItemId)) {
                RowQualifier rq = new RowQualifier(this.getMmScoOpItmVO1());
                rq.setWhereClause("ItmId = '" + ItemId + "'");
                Row fr[] = this.getMmScoOpItmVO1().getFilteredRows(rq);
                for (Row r : fr) {
                    if (!(r.equals(this.getMmScoOpItmVO1().getCurrentRow()))) {
                        this.getMmScoOpItmVO1().setCurrentRow(r);
                    }
                }
                this.getMmScoOpItmVO1().getCurrentRow().remove();
                this.getTransientTotAmtVo1().executeQuery();
            }
        }
    }

    /**Function for Remove Rows Items wise after delete Item In Tr
     * */
    public Boolean removeFromMmScoTrItemWise(String ItemId) {
        RowQualifier rq = new RowQualifier(this.getMmScoTrVO2());
        rq.setWhereClause("DocId = '" + getScoTxnDocId() + "' and ItmId='" + ItemId + "'");
        Row[] rows = this.getMmScoTrVO2().getFilteredRows(rq);
        for (int r = 0; r < rows.length; r++)
            if (rows[r] != null)
                rows[r].remove();
        return true;
    }

    /**Function for Remove Rows Items wise after delete Item TrLines
     * */
    public Boolean removeFromMmScoTrLinesItemWise(String ItemId) {
        RowQualifier rq = new RowQualifier(this.getMmScoTrLinesVO2());
        rq.setWhereClause("DocId = '" + getScoTxnDocId() + "' and ItmId='" + ItemId + "'");
        Row[] rows = this.getMmScoTrLinesVO2().getFilteredRows(rq);
        for (int r = 0; r < rows.length; r++)
            if (rows[r] != null)
                rows[r].remove();
        return true;
    }

    /**
     * Add Operation Method
     * */
    public void AddOperationFunc() {
        Row Cr = this.getTransientTotAmtVo1().getCurrentRow();
        Row createRow = this.getMmScoOpVO1().createRow();
        createRow.setAttribute("BomId", Cr.getAttribute("TransBomDocId"));
        createRow.setAttribute("DocIdSrc", "0");
        createRow.setAttribute("DocTypeSrc", (Integer) this.getMmScoVO1().getCurrentRow().getAttribute("ScoBasis"));
        createRow.setAttribute("OpId", Cr.getAttribute("TransOpDocId"));
        createRow.setAttribute("OpRmrk", Cr.getAttribute("TransOpRemarks"));
        createRow.setAttribute("OpSrNo", Cr.getAttribute("TransOpSrNo"));
        createRow.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
        createRow.setAttribute("UsrIdCreateDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        this.getMmScoOpVO1().insertRow(createRow);
        this.getMmScoOpVO1().executeQuery();
        this.getTransientTotAmtVo1().executeQuery();

        if (this.getMmScoVO1().getCurrentRow().getAttribute("ScoBomFlg").toString().equals("Y")) {
            PopulateBomItem(Cr.getAttribute("TransBomDocId").toString(), Cr.getAttribute("TransOpDocId").toString());
        }
    }

    /**
     * Function Calling for Populate BOM Items
     * */
    public void PopulateBomItem(String BomId, String opId) {
        ViewObjectImpl bomOpItem = this.getLOVBomOpItemVo1();
        RowQualifier Rq = new RowQualifier(bomOpItem);
        Rq.setWhereClause("CldId='" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId='" + EbizParams.GLBL_APP_SERV_LOC() +
                          "' and HoOrgId='" + EbizParams.GLBL_HO_ORG_ID() + "' and DocId='" + BomId + "' and OpId='" +
                          opId + "' and ItmType IN('" + 62 + "', '" + 67 + "')");
        Row[] FilRows = bomOpItem.getFilteredRows(Rq);
        for (Row r : FilRows) {
            Row createRow = this.getMmScoOpItmVO1().createRow();
            createRow.setAttribute("ConsmptnFlg", r.getAttribute("ConsmptnFlg"));
            createRow.setAttribute("DocIdSrc", "0");
            createRow.setAttribute("DocTypeSrc", (Integer) this.getMmScoVO1().getCurrentRow().getAttribute("ScoBasis"));
            createRow.setAttribute("ItmBasis", r.getAttribute("ItmBasis"));
            createRow.setAttribute("ItmId", r.getAttribute("ItmId"));
            createRow.setAttribute("ItmUom",
                                   r.getAttribute("ItmUom") == null ? "UOM0000000099" : r.getAttribute("ItmUom"));
            createRow.setAttribute("ItmPrice", r.getAttribute("ItmPrice"));
            createRow.setAttribute("ItmQty", r.getAttribute("ItmQty"));
            createRow.setAttribute("ItmRmrk", r.getAttribute("ItmRmrk"));
            createRow.setAttribute("ItmType", r.getAttribute("ItmType").equals(62) ? 830 : 831);
            createRow.setAttribute("OpId", r.getAttribute("OpId"));
            createRow.setAttribute("OpSrNo", r.getAttribute("OpSrNo"));
            createRow.setAttribute("PrncplInpt", r.getAttribute("PrncplInpt"));
            createRow.setAttribute("ScoType", this.getMmScoVO1().getCurrentRow().getAttribute("ScoType"));
            createRow.setAttribute("TlrncQtyType", "A");
            createRow.setAttribute("TlrncQtyVal", StaticValue.NUMBER_ZERO);
            createRow.setAttribute("UomConvFctr", 1);
            createRow.setAttribute("ItmUomBs",
                                   r.getAttribute("ItmUom") == null ? "UOM0000000099" : r.getAttribute("ItmUom"));
            /* EbizParamsMMUtils.getItmUomConvFactor(this, r.getAttribute("ItmId").toString(),
                                                                         r.getAttribute("ItmUom").toString(),
                                                                         r.getAttribute("ItmUom").toString())); */
            createRow.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
            createRow.setAttribute("UsrIdCreateDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));

            Number value = (Number) r.getAttribute("ItmQty");
            Number _amt1 = value.multiply((Number) r.getAttribute("ItmPrice"));

            Number _amt = (Number) _amt1.round(6);

            Number _CurrRate = (Number) this.getMmScoVO1().getCurrentRow().getAttribute("CurrConvFctr");

            Number _netAmt1 = _amt.multiply(_CurrRate);
            Number _netAmt = (Number) _netAmt1.round(6);

            System.out.println("Value of Amount------- " + _amt);
            System.out.println("Value of NetAmount------- " + _netAmt);

            createRow.setAttribute("AsblAmtBs", _netAmt);
            createRow.setAttribute("AsblAmtSp", _amt);
            createRow.setAttribute("ItmAmtBs", _netAmt);
            createRow.setAttribute("ItmAmtGsBs", _netAmt);
            createRow.setAttribute("ItmAmtGsSp", _amt);
            createRow.setAttribute("ItmAmtSp", _amt);

            this.getMmScoOpItmVO1().insertRow(createRow);
        }
        executeAllViewsForInwardOutward();
    }

    /**
     * Item Name Duplicate Check
     * @ Return Integer
     * */
    public Integer ValidateItemDuplicate(String ItmNm) {
        String ItemId = null;
        this.getLovGetItemId1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        this.getLovGetItemId1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        this.getLovGetItemId1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovGetItemId1().setNamedWhereClauseParam("BindItmDesc", ItmNm);
        this.getLovGetItemId1().executeQuery();
        Row[] allRowsInRange = this.getLovGetItemId1().getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            ItemId = (String) allRowsInRange[0].getAttribute("ItmId");
        }

        Integer ScoType = (Integer) this.getMmScoOpItmVO1().getCurrentRow().getAttribute("ScoType");
        Integer ItmType = (Integer) this.getMmScoOpItmVO1().getCurrentRow().getAttribute("ItmType");

        this.getMmScoOpItmVO2().executeQuery();
        RowQualifier Rw = new RowQualifier(this.getMmScoOpItmVO2());
        Rw.setWhereClause("ItmId = '" + ItemId + "' and ScoType = '" + ScoType + "' and ItmType = '" + ItmType +
                          "' and DocId = '" + getScoTxnDocId() + "'");
        Row[] fr = this.getMmScoOpItmVO2().getFilteredRows(Rw);
        for (Row r : fr) {
            if (!(r.equals(this.getMmScoOpItmVO1().getCurrentRow())))
                return 2;
        }
        return 1;
    }

    /**
     * Before TAx Applying Check Item Entry
     * */
    public Integer beforeApplyTaxCheckItem() {
        Integer i = 0;
        int count = this.getMmScoOpItmVO1().getRowCount();
        Integer val = (count == 0 ? -1 : count);
        if (val.equals(-1)) {
            return 1;
        }
        return i;
    }

    public void executeHeaderCalView() {
        this.getMmScoTrVO2().executeQuery();
        this.getMmScoTrLinesVO2().executeQuery();
        this.getTransientTotAmtVo1().executeQuery();
    }

    /**
     * Validation on save and forward check
     * */
    public Integer ValidateCheckOnSaveAndForward() {
        Integer i = 0;
        Integer scoType = Integer.parseInt(this.getMmScoVO1().getCurrentRow().getAttribute("ScoType").toString());
        Integer Rc = 0;
        Integer Rs = 0;
        if (scoType == 826) {
            Rc =
                (Integer) this.getMmScoOpItmVOInwardInput().getRowCount() == 0 ? -1 :
                (Integer) this.getMmScoOpItmVOInwardInput().getRowCount();
            Rs =
                (Integer) this.getMmScoOpItmVOInwardOutput().getRowCount() == 0 ? -1 :
                (Integer) this.getMmScoOpItmVOInwardOutput().getRowCount();
        } else if (scoType == 827) {
            Rc =
                (Integer) this.getMmScoOpItmVOOutwardInput().getRowCount() == 0 ? -1 :
                (Integer) this.getMmScoOpItmVOOutwardInput().getRowCount();
            Rs =
                (Integer) this.getMmScoOpItmVOOutwardOutput().getRowCount() == 0 ? -1 :
                (Integer) this.getMmScoOpItmVOOutwardOutput().getRowCount();
        }

        if (Rc.equals(-1)) {
            i = 1;
        } else if (Rs.equals(-1)) {
            i = 2;
        }
        return i;
    }

    /**
     * Validate Default Delivery Schedule
     * @Return Integer
     * */
    public Integer ValidateDefDeliverySchdl() {
        Integer i = 0;
        executeDlvSchdlView();
        Integer Rc = this.getDlvSchdlViewVo1().getRowCount();
        Integer Rs = this.getMmScoDlvSchdlVO1().getRowCount();
        if (Rs > 0) {
            if (Rc > 0) {
                i = 1;
            }
        }
        return i;
    }

    /**
     * Tax Validation
     * */
    public Integer ValidateTaxBeforeSaveAndForward() {
        Integer i = 0;
        String TaxFlg = this.getMmScoVO1().getCurrentRow().getAttribute("TaxRuleFlg").toString();
        RowQualifier rq = new RowQualifier(this.getMmScoTrVO2());
        rq.setWhereClause("DocId = '" + getScoTxnDocId() + "'");
        Integer _len = this.getMmScoTrVO2().getFilteredRows(rq).length;
        if (TaxFlg.equals("N")) {
            i = 0;
        } else if (TaxFlg.equals("O")) {
            if (_len == 0) {
                i = 1;
            }
        } else if (TaxFlg.equals("I")) {
            if (_len == 0) {
                i = 2;
            }
        }
        return i;
    }

    /**
     * Order Calculation In Sub contracting order
     * */
    public Number orderCalculation() {
        this.getDBTransaction().postChanges();
        oracle.jbo.domain.Number RetVal = StaticValue.NUMBER_ZERO;
        try {
            BigDecimal valideQty =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.fn_ins_sco_calc(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                getScoTxnDocId(),
                                                this.getMmScoVO1().getCurrentRow().getAttribute("UsrIdCreate"), 0,
                                                this.getMmScoVO1().getCurrentRow().getAttribute("CurrIdSp"),
                                                this.getMmScoVO1().getCurrentRow().getAttribute("CurrIdBs"),
                                                this.getMmScoVO1().getCurrentRow().getAttribute("CurrConvFctr")
            });

            if (valideQty != null)
                RetVal = new oracle.jbo.domain.Number(valideQty);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return RetVal;
    }

    /**
     * Add Term And Conditions
     * */
    public void AddTermAndCondition(Integer TncId) {
        if (TncId != null) {
            System.out.println("Value of Term and condition ::::: " + TncId);
            Row createRow = this.getMmScoTncVO1().createRow();
            createRow.setAttribute("TncId", TncId);
            this.getMmScoTncVO1().insertRow(createRow);
        }
    }

    /**
     * Validate Payment Schedule
     * */
    public Integer ValidatePaymentSchdule() {
        Integer i = 0;
        Row cr = this.getTransientPaymntSchdlVo1().getCurrentRow();
        Object _mode = cr.getAttribute("TransPaymentMode");
        Object _payDate = cr.getAttribute("TransPaymentDate");
        Number _payAmt = (Number) cr.getAttribute("TransPaymentAmt");
        Number _payPendAmt = (Number) cr.getAttribute("TransPaymentAmtPend");

        Object a = (_mode == null ? -1 : _mode);
        Object b = (_payDate == null ? -1 : _payDate);
        Object c =
            (_payAmt == null ? -1 :
             _payAmt.compareTo(new Number(0)) == 0 ? -2 : _payAmt.compareTo(_payPendAmt) == 1 ? -3 : _payAmt);

        if (a.equals(-1)) {
            i = 1;
        } else if (b.equals(-1)) {
            i = 2;
        } else if (c.equals(-1)) {
            i = 3;
        } else if (c.equals(-2)) {
            i = 4;
        } else if (c.equals(-3)) {
            i = 5;
        }
        return i;
    }

    /**
     * Total Calculate Pending Payment for Schedule
     * */
    public Number CalcTotPendingAmountForSchedule() {
        Number TotCalcAmt = (Number) this.getTransientTotAmtVo1().getCurrentRow().getAttribute("TransTotCalAmount");
        Number PayAmount = StaticValue.NUMBER_ZERO;

        RowQualifier rq = new RowQualifier(this.getMmScoPmntSchdlVO2());
        rq.setWhereClause("DocId = '" + getScoTxnDocId() + "'");
        Row fr[] = this.getMmScoPmntSchdlVO2().getFilteredRows(rq);
        for (Row r : fr) {
            Number PayAmt = (Number) r.getAttribute("PayAmt");
            PayAmount = PayAmount.add(PayAmt);
        }

        return (Number) TotCalcAmt.minus(PayAmount);
    }

    /**
     * Add Payment Schedule or INSERT
     * */
    public void InsertPaymentSchedule() {
        Row currentRow = this.getTransientPaymntSchdlVo1().getCurrentRow();
        Row cr = this.getMmScoPmntSchdlVO1().createRow();
        cr.setAttribute("AdvFlg", "N");
        cr.setAttribute("PayAmt", currentRow.getAttribute("TransPaymentAmt"));
        cr.setAttribute("PayDt", currentRow.getAttribute("TransPaymentDate"));
        cr.setAttribute("PayMode", currentRow.getAttribute("TransPaymentMode"));
        cr.setAttribute("TotAmt",
                        (Number) this.getTransientTotAmtVo1().getCurrentRow().getAttribute("TransTotCalAmount"));
        cr.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
        cr.setAttribute("UsrIdCreateDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        this.getMmScoPmntSchdlVO1().insertRow(cr);

        this.getTransientPaymntSchdlVo1().executeQuery();
    }

    /**
     * Set Pending Amount to Payment Amount
     * */
    public void SetPendAmtToPaymentAmt() {
        Row cr = this.getTransientPaymntSchdlVo1().getCurrentRow();
        cr.setAttribute("TransPaymentAmt", cr.getAttribute("TransPaymentAmtPend"));
    }

    /**
     * Validate Default payment Schedule
     * */
    public Integer ValidateDefaultPaymentSchdl() {
        Integer i = 0;
        Number Pay_Amount = StaticValue.NUMBER_ZERO;
        Number Total_Amount = (Number) this.getTransientTotAmtVo1().getCurrentRow().getAttribute("TransTotCalAmount");
        ViewObjectImpl voImpl = this.getMmScoPmntSchdlVO2();
        RowQualifier Rq = new RowQualifier(voImpl);
        Rq.setWhereClause("CldId = '" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId = '" +
                          EbizParams.GLBL_APP_SERV_LOC() + "' and HoOrgId = '" + EbizParams.GLBL_HO_ORG_ID() +
                          "' and OrgId = '" + EbizParams.GLBL_APP_USR_ORG() + "' and DocId = '" + getScoTxnDocId() +
                          "'");
        Row[] fr = voImpl.getFilteredRows(Rq);
        if (fr.length > 0) {
            for (Row r : fr) {
                Number payAmt = (Number) r.getAttribute("PayAmt");
                Pay_Amount = Pay_Amount.add(payAmt);
            }
            System.out.println("Total Pay Amount :::::::::::: " + Pay_Amount);
            if (Total_Amount.compareTo(Pay_Amount) == 1)
                i = 1;
            if (Total_Amount.compareTo(Pay_Amount) == 0)
                i = 0;
        }
        return i;
    }

    /**
     * Generate Default payment Schedule
     * */
    public void GenDefaultPaymentScheduleFunction() {
        Integer Rs = this.getMmScoPmntSchdlVO1().getRowCount();
        if (Rs == 0) {
            Row cr = this.getMmScoPmntSchdlVO1().createRow();
            cr.setAttribute("AdvFlg", "N");
            cr.setAttribute("PayAmt",
                            (Number) this.getTransientTotAmtVo1().getCurrentRow().getAttribute("TransTotCalAmount"));
            cr.setAttribute("PayDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
            cr.setAttribute("PayMode", 160);
            cr.setAttribute("TotAmt",
                            (Number) this.getTransientTotAmtVo1().getCurrentRow().getAttribute("TransTotCalAmount"));
            cr.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
            cr.setAttribute("UsrIdCreateDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
            this.getMmScoPmntSchdlVO1().insertRow(cr);
        }
    }

    /*---------------------------------------------ADD COST CENTER----------------------------------------*/

    /**Method to resolve expression- returns String value.
     * @param data
     * @return
     */
    public Object resolvElO(String data) {
        return ADFModelUtils.resolvEl(data);
    }

    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {
        releaseAppAM(getAppAM());
        super.finalize();
    }

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 36501);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
           * @param cldId
           * @param slocId
           * @param hoOrgId
           * @param orgId
           * @param tempId
           * @param tempSrc
           * @param docId
           * @param usrId
           * @param tempCcId
           * @param amount
           * @param pCcLevel1
           * @param pCcLevel2
           * @param pCcLevel3
           * @param pCcLevel4
           * @param pCcLevel5
           */
            ViewObjectImpl impl = this.getMmScoVO1();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();

                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "H", 36501,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                           new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

            }
        }
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 36501);

        Row currentRow = this.getMmScoOpItmVO1().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getMmScoOpItmVO1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                                System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                                System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                   attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                                */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will call cost center bean0.0000
     */
    public void deleteCostCenterItem() {
        if (chkCcApplicableOrNot()) {
            //  System.out.println("Inside delete method");

            ViewObjectImpl impl = getMmScoOpItmVO1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                //   System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       currentRow.getAttribute("DocId").toString(), "L", 36501,
                                       EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

                }
            }
            //  System.out.println("After calling delete method");
        }
    }


    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {
        if (chkCcApplicableOrNot()) {
            // System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = getMmScoOpItmVO1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ItmAmtGsBs") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                //  System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    //  System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", 36501,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("ItmAmtGsBs"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            //   System.out.println("After calling Update method");
        }
    }

    public void declareGlblValuesForCC1(Row currentRow) {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 36501);

        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getMmScoOpItmVO1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " +
    attributeDef[j].getColumnName());
                                   System.out.println("------------ null
    value is " + r.getAttribute("DbobColNm"));
    System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString())
    " +
    attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                                   */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        //   System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            //     System.out.println("i is " + i + " Cost center Value is " +
                            // currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    //   System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }


    public void updateCostCenterOnSave() {
        //   System.out.println(" Inside AM Method to save all the item for cost ceneter ::::::::::::::::::");
        if (chkCcApplicableOrNot()) {
            //    System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = getMmScoOpItmVO1();
            Row allRow[] = impl.getAllRowsInRange();
            for (int i = 0; i < allRow.length; i++) {
                if (allRow[i].getAttribute("CcId") != null && allRow[i].getAttribute("ItmAmtGsBs") != null) {
                    AppCostCenterServiceAMImpl amCC = getAppAM();
                    //      System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        declareGlblValuesForCC1(allRow[i]);
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                allRow[i].getAttribute("DocId").toString(), "L", 36501,
                                                EbizParams.GLBL_APP_USR(), allRow[i].getAttribute("CcId").toString(),
                                                (Number) allRow[i].getAttribute("ItmAmtGsBs"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
            }
        }
    }

    /**
     * Method to check cost center is applicable for this sales order or not.
     */

    public Boolean isCostCenterApplicable() {
        Boolean b = false;
        try {
            // App.fn_is_cost_center_present(p_cld_id,p_sloc_id,p_ho_org_id,p_org_id,p_doc_id)
            Object callF =
                ADFModelUtils.callFunction(this, new StringBuilder("App.fn_is_cost_center_present(?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 36501
            }, Types.NUMERIC);
            java.math.BigDecimal a = (callF == null ? new java.math.BigDecimal(0) : (java.math.BigDecimal) callF);
            b = (a.compareTo(new java.math.BigDecimal(1)) == 0 ? true : false);
            //System.out.println(" ############################# the value of cost center appp  " + b +"   no. of rows "+ a);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return b;
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDateFromTempCcToMmScoCc() {
        if (chkCcApplicableOrNot()) {
            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 36501, "MM",
                               "mm$sco$cost$center", this.getMmScoVO1().getCurrentRow().getAttribute("DocId")
            });
        }
    }

    /**
     * Subcontracting Order Amendment
     * */
    public Boolean ScoAmendmentMethod() {
        Boolean val = false;
        try {
            String GetHexDoc = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                       EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), 36501,
                                                       0
            }).toString();
            System.out.println("New Hexadecimal Value ---- " + GetHexDoc);

            Object getVal = ADFModelUtils.callFunction(this, new StringBuilder("MM.FN_SCO_COPY_PRF(?,?,?,?,?,?,?,?)"), new Object[] {
                                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                       EbizParams.GLBL_APP_USR(),
                                                       this.getMmScoVO1().getCurrentRow().getAttribute("ScoId"),
                                                       GetHexDoc,
                                                       this.getMmScoVO1().getCurrentRow().getAttribute("DocId")
            }, Types.VARCHAR);
            this.getDBTransaction().postChanges();
            RequestContext.getCurrentInstance().getPageFlowScope().put("GLBL_SCO_TXN_ID", GetHexDoc);
            filterMmSco_Func(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                             EbizParams.GLBL_APP_USR_ORG());
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return val;
    }

    /**
     * Get Item Price from Operation Item Price Setup
     * @Return - Number
     * */
    public Number getItemPrice$(String op_id, String item_id, String uom_id) {
        Number cust_Price = StaticValue.NUMBER_ZERO;
        try {
            BigDecimal exist_Price =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_GET_SC_EOITM_PRICE(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                Integer.parseInt(this.getMmScoVO1().getCurrentRow().getAttribute("EoId").toString()),
                                                op_id, item_id, uom_id,
                                                Integer.parseInt(this.getMmScoVO1().getCurrentRow().getAttribute("CurrIdSp").toString())
            });

            if (exist_Price != null)
                cust_Price = new oracle.jbo.domain.Number(exist_Price);
            System.out.println("Value of cust_price ::: " + cust_Price);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cust_Price;
    }

    /**
     * Allow Edit in Service Item Price TextBox
     * Check by ORG$SC$PRF
     * @return String
     * */
    public String allowEditInServiceItemPrice() {
        return this.callStoredFunction(Types.VARCHAR, "MM.fn_sc_chk_org_prf(?,?,?,?)", new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_APP_USR_ORG(), "EDIT_ITM_PRICE"
    }).toString();
    }

    /**
     * External Doc No and External Doc Date Mandatory Check
     * Check by ORG$SC$PRF
     * @return String
     * */
    public String mandatoryExtDocNoAndDate() {
        return this.callStoredFunction(Types.VARCHAR, "MM.fn_sc_chk_org_prf(?,?,?,?)", new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_APP_USR_ORG(), "VLDT_EXT_DOC_NO_DT"
    }).toString();
    }

    /**
     * Allow Edit in Taxable Amt TextBox
     * Check by ORG$SC$PRF
     * @return String
     * */
    public String allowEditInTaxableAmount() {
        return this.callStoredFunction(Types.VARCHAR, "MM.fn_sc_chk_org_prf(?,?,?,?)", new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_APP_USR_ORG(), "EDIT_ASBL_VAL"
    }).toString();
    }

    /*-----------------------------------------***************************---------------------------------------------*/

    /**
     * Container's getter for TransientVO1.
     * @return TransientVO1
     */
    public ViewObjectImpl getTransientVO1() {
        return (ViewObjectImpl) findViewObject("TransientVO1");
    }

    /**
     * Container's getter for SearchScoVwVo1.
     * @return SearchScoVwVo1
     */
    public ViewObjectImpl getSearchScoVwVo1() {
        return (ViewObjectImpl) findViewObject("SearchScoVwVo1");
    }

    /**
     * Container's getter for MmScoVO1.
     * @return MmScoVO1
     */
    public ViewObjectImpl getMmScoVO1() {
        return (ViewObjectImpl) findViewObject("MmScoVO1");
    }

    /**
     * Container's getter for LOVEntityNmVo1.
     * @return LOVEntityNmVo1
     */
    public ViewObjectImpl getLOVEntityNmVo1() {
        return (ViewObjectImpl) findViewObject("LOVEntityNmVo1");
    }

    /**
     * Container's getter for LOVAddressVo1.
     * @return LOVAddressVo1
     */
    public ViewObjectImpl getLOVAddressVo1() {
        return (ViewObjectImpl) findViewObject("LOVAddressVo1");
    }


    /**
     * Container's getter for MmScoSrcVO1.
     * @return MmScoSrcVO1
     */
    public ViewObjectImpl getMmScoSrcVO1() {
        return (ViewObjectImpl) findViewObject("MmScoSrcVO1");
    }

    /**
     * Container's getter for MmScoToMmScoSrcVL1.
     * @return MmScoToMmScoSrcVL1
     */
    public ViewLinkImpl getMmScoToMmScoSrcVL1() {
        return (ViewLinkImpl) findViewLink("MmScoToMmScoSrcVL1");
    }

    /**
     * Container's getter for MmScoOpVO1.
     * @return MmScoOpVO1
     */
    public ViewObjectImpl getMmScoOpVO1() {
        return (ViewObjectImpl) findViewObject("MmScoOpVO1");
    }

    /**
     * Container's getter for MmScoToMmScoOpVL1.
     * @return MmScoToMmScoOpVL1
     */
    public ViewLinkImpl getMmScoToMmScoOpVL1() {
        return (ViewLinkImpl) findViewLink("MmScoToMmScoOpVL1");
    }

    /**
     * Container's getter for LOVBomDispVo1.
     * @return LOVBomDispVo1
     */
    public ViewObjectImpl getLOVBomDispVo1() {
        return (ViewObjectImpl) findViewObject("LOVBomDispVo1");
    }

    /**
     * Container's getter for LOVOpDispVo1.
     * @return LOVOpDispVo1
     */
    public ViewObjectImpl getLOVOpDispVo1() {
        return (ViewObjectImpl) findViewObject("LOVOpDispVo1");
    }

    /**
     * Container's getter for MmScoOpItmVO1.
     * @return MmScoOpItmVO1
     */
    public ViewObjectImpl getMmScoOpItmVO1() {
        return (ViewObjectImpl) findViewObject("MmScoOpItmVO1");
    }

    /**
     * Container's getter for MmScoOpToMmScoOpItmVL1.
     * @return MmScoOpToMmScoOpItmVL1
     */
    public ViewLinkImpl getMmScoOpToMmScoOpItmVL1() {
        return (ViewLinkImpl) findViewLink("MmScoOpToMmScoOpItmVL1");
    }

    /**
     * Container's getter for LOVItemNmVo1.
     * @return LOVItemNmVo1
     */
    public ViewObjectImpl getLOVItemNmVo1() {
        return (ViewObjectImpl) findViewObject("LOVItemNmVo1");
    }

    /**
     * Container's getter for MmScoOpItmVO2.
     * @return MmScoOpItmVO2
     */
    public ViewObjectImpl getMmScoOpItmVOInwardInput() {
        return (ViewObjectImpl) findViewObject("MmScoOpItmVOInwardInput");
    }

    /**
     * Container's getter for MmScoOpToMmScoOpItmVL2.
     * @return MmScoOpToMmScoOpItmVL2
     */
    public ViewLinkImpl getMmScoOpToMmScoOpItmVL2() {
        return (ViewLinkImpl) findViewLink("MmScoOpToMmScoOpItmVL2");
    }

    /**
     * Container's getter for MmScoOpItmVO3.
     * @return MmScoOpItmVO3
     */
    public ViewObjectImpl getMmScoOpItmVOInwardOutput() {
        return (ViewObjectImpl) findViewObject("MmScoOpItmVOInwardOutput");
    }

    /**
     * Container's getter for MmScoOpToMmScoOpItmVL3.
     * @return MmScoOpToMmScoOpItmVL3
     */
    public ViewLinkImpl getMmScoOpToMmScoOpItmVL3() {
        return (ViewLinkImpl) findViewLink("MmScoOpToMmScoOpItmVL3");
    }

    /**
     * Container's getter for MmScoOpItmVO4.
     * @return MmScoOpItmVO4
     */
    public ViewObjectImpl getMmScoOpItmVOOutwardInput() {
        return (ViewObjectImpl) findViewObject("MmScoOpItmVOOutwardInput");
    }

    /**
     * Container's getter for MmScoOpToMmScoOpItmVL4.
     * @return MmScoOpToMmScoOpItmVL4
     */
    public ViewLinkImpl getMmScoOpToMmScoOpItmVL4() {
        return (ViewLinkImpl) findViewLink("MmScoOpToMmScoOpItmVL4");
    }

    /**
     * Container's getter for MmScoOpItmVO5.
     * @return MmScoOpItmVO5
     */
    public ViewObjectImpl getMmScoOpItmVOOutwardOutput() {
        return (ViewObjectImpl) findViewObject("MmScoOpItmVOOutwardOutput");
    }

    /**
     * Container's getter for MmScoOpToMmScoOpItmVL5.
     * @return MmScoOpToMmScoOpItmVL5
     */
    public ViewLinkImpl getMmScoOpToMmScoOpItmVL5() {
        return (ViewLinkImpl) findViewLink("MmScoOpToMmScoOpItmVL5");
    }

    /**
     * Container's getter for MmScoOcVO1.
     * @return MmScoOcVO1
     */
    public ViewObjectImpl getMmScoOcVO1() {
        return (ViewObjectImpl) findViewObject("MmScoOcVO1");
    }

    /**
     * Container's getter for MmScoToMmScoOcVL1.
     * @return MmScoToMmScoOcVL1
     */
    public ViewLinkImpl getMmScoToMmScoOcVL1() {
        return (ViewLinkImpl) findViewLink("MmScoToMmScoOcVL1");
    }

    /**
     * Container's getter for MmOcImpVwVo1.
     * @return MmOcImpVwVo1
     */
    public ViewObjectImpl getMmOcImpVwVo1() {
        return (ViewObjectImpl) findViewObject("MmOcImpVwVo1");
    }

    /**
     * Container's getter for MmScoDlvSchdlVO1.
     * @return MmScoDlvSchdlVO1
     */
    public ViewObjectImpl getMmScoDlvSchdlVO1() {
        return (ViewObjectImpl) findViewObject("MmScoDlvSchdlVO1");
    }

    /**
     * Container's getter for MmScoToMmScoDlvSchdlVL1.
     * @return MmScoToMmScoDlvSchdlVL1
     */
    public ViewLinkImpl getMmScoToMmScoDlvSchdlVL1() {
        return (ViewLinkImpl) findViewLink("MmScoToMmScoDlvSchdlVL1");
    }

    /**
     * Container's getter for DlvSchdlViewVo1.
     * @return DlvSchdlViewVo1
     */
    public ViewObjectImpl getDlvSchdlViewVo1() {
        return (ViewObjectImpl) findViewObject("DlvSchdlViewVo1");
    }

    /**
     * Container's getter for MmScoToDlvSchdlViewVL1.
     * @return MmScoToDlvSchdlViewVL1
     */
    public ViewLinkImpl getMmScoToDlvSchdlViewVL1() {
        return (ViewLinkImpl) findViewLink("MmScoToDlvSchdlViewVL1");
    }

    /**
     * Container's getter for LOVUserNmWF1.
     * @return LOVUserNmWF1
     */
    public ViewObjectImpl getLOVUserNmWF1() {
        return (ViewObjectImpl) findViewObject("LOVUserNmWF1");
    }

    /**
     * Container's getter for LOVCurrencyInScoOcVo1.
     * @return LOVCurrencyInScoOcVo1
     */
    public ViewObjectImpl getLOVCurrencyInScoOcVo1() {
        return (ViewObjectImpl) findViewObject("LOVCurrencyInScoOcVo1");
    }

    /**
     * Container's getter for LOVCurrencyInScoVo1.
     * @return LOVCurrencyInScoVo1
     */
    public ViewObjectImpl getLOVCurrencyInScoVo1() {
        return (ViewObjectImpl) findViewObject("LOVCurrencyInScoVo1");
    }


    /**
     * Container's getter for TransientTotAmtVo1.
     * @return TransientTotAmtVo1
     */
    public ViewObjectImpl getTransientTotAmtVo1() {
        return (ViewObjectImpl) findViewObject("TransientTotAmtVo1");
    }

    /**
     * Container's getter for MmScoTrVO1.
     * @return MmScoTrVO1
     */
    public ViewObjectImpl getMmScoTrVO1() {
        return (ViewObjectImpl) findViewObject("MmScoTrVO1");
    }

    /**
     * Container's getter for MmScoOpItmToMmScoTrVL1.
     * @return MmScoOpItmToMmScoTrVL1
     */
    public ViewLinkImpl getMmScoOpItmToMmScoTrVL1() {
        return (ViewLinkImpl) findViewLink("MmScoOpItmToMmScoTrVL1");
    }

    /**
     * Container's getter for MmScoTrLinesVO1.
     * @return MmScoTrLinesVO1
     */
    public ViewObjectImpl getMmScoTrLinesVO1() {
        return (ViewObjectImpl) findViewObject("MmScoTrLinesVO1");
    }

    /**
     * Container's getter for MmScoTrToMmScoTrLinesVL1.
     * @return MmScoTrToMmScoTrLinesVL1
     */
    public ViewLinkImpl getMmScoTrToMmScoTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("MmScoTrToMmScoTrLinesVL1");
    }

    /**
     * Container's getter for LOVDeliveryWhVo1.
     * @return LOVDeliveryWhVo1
     */
    public ViewObjectImpl getLOVDeliveryWhVo1() {
        return (ViewObjectImpl) findViewObject("LOVDeliveryWhVo1");
    }

    /**
     * Container's getter for LOVBomOpItemVo1.
     * @return LOVBomOpItemVo1
     */
    public ViewObjectImpl getLOVBomOpItemVo1() {
        return (ViewObjectImpl) findViewObject("LOVBomOpItemVo1");
    }

    /**
     * Container's getter for MmScoOpItmVO2.
     * @return MmScoOpItmVO2
     */
    public ViewObjectImpl getMmScoOpItmVO2() {
        return (ViewObjectImpl) findViewObject("MmScoOpItmVO2");
    }

    /**
     * Container's getter for MmScoOcVO2.
     * @return MmScoOcVO2
     */
    public ViewObjectImpl getMmScoOcVO2() {
        return (ViewObjectImpl) findViewObject("MmScoOcVO2");
    }

    /**
     * Container's getter for MmScoTrVO2.
     * @return MmScoTrVO2
     */
    public ViewObjectImpl getMmScoTrVO2() {
        return (ViewObjectImpl) findViewObject("MmScoTrVO2");
    }

    /**
     * Container's getter for MmScoTrLinesVO2.
     * @return MmScoTrLinesVO2
     */
    public ViewObjectImpl getMmScoTrLinesVO2() {
        return (ViewObjectImpl) findViewObject("MmScoTrLinesVO2");
    }

    /**
     * Container's getter for LOVSubContractBasisVo1.
     * @return LOVSubContractBasisVo1
     */
    public ViewObjectImpl getLOVSubContractBasisVo1() {
        return (ViewObjectImpl) findViewObject("LOVSubContractBasisVo1");
    }

    /**
     * Container's getter for LOVSubContractItemTypeVo1.
     * @return LOVSubContractItemTypeVo1
     */
    public ViewObjectImpl getLOVSubContractItemTypeVo1() {
        return (ViewObjectImpl) findViewObject("LOVSubContractItemTypeVo1");
    }

    /**
     * Container's getter for MmScoCalcVo1.
     * @return MmScoCalcVo1
     */
    public ViewObjectImpl getMmScoCalcVo1() {
        return (ViewObjectImpl) findViewObject("MmScoCalcVo1");
    }

    /**
     * Container's getter for MmScoToMmScoCalcVL1.
     * @return MmScoToMmScoCalcVL1
     */
    public ViewLinkImpl getMmScoToMmScoCalcVL1() {
        return (ViewLinkImpl) findViewLink("MmScoToMmScoCalcVL1");
    }

    /**
     * Container's getter for MmScoTncVO1.
     * @return MmScoTncVO1
     */
    public ViewObjectImpl getMmScoTncVO1() {
        return (ViewObjectImpl) findViewObject("MmScoTncVO1");
    }

    /**
     * Container's getter for MmScoToMmScoTncVL1.
     * @return MmScoToMmScoTncVL1
     */
    public ViewLinkImpl getMmScoToMmScoTncVL1() {
        return (ViewLinkImpl) findViewLink("MmScoToMmScoTncVL1");
    }

    /**
     * Container's getter for LOVTncVo1.
     * @return LOVTncVo1
     */
    public ViewObjectImpl getLOVTncVo1() {
        return (ViewObjectImpl) findViewObject("LOVTncVo1");
    }

    /**
     * Container's getter for MmScoPmntSchdlVO1.
     * @return MmScoPmntSchdlVO1
     */
    public ViewObjectImpl getMmScoPmntSchdlVO1() {
        return (ViewObjectImpl) findViewObject("MmScoPmntSchdlVO1");
    }

    /**
     * Container's getter for MmScoToMmScoPmntSchdlVL1.
     * @return MmScoToMmScoPmntSchdlVL1
     */
    public ViewLinkImpl getMmScoToMmScoPmntSchdlVL1() {
        return (ViewLinkImpl) findViewLink("MmScoToMmScoPmntSchdlVL1");
    }

    /**
     * Container's getter for TransientPaymntSchdlVo1.
     * @return TransientPaymntSchdlVo1
     */
    public ViewObjectImpl getTransientPaymntSchdlVo1() {
        return (ViewObjectImpl) findViewObject("TransientPaymntSchdlVo1");
    }

    /**
     * Container's getter for MmScoPmntSchdlVO2.
     * @return MmScoPmntSchdlVO2
     */
    public ViewObjectImpl getMmScoPmntSchdlVO2() {
        return (ViewObjectImpl) findViewObject("MmScoPmntSchdlVO2");
    }

    /**
     * Container's getter for AppCcDocVO1.
     * @return AppCcDocVO1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVwVO1.
     * @return AppCcVwVO1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }

    /**
     * Container's getter for LOVCurrNotationVo1.
     * @return LOVCurrNotationVo1
     */
    public ViewObjectImpl getLOVCurrNotationVo1() {
        return (ViewObjectImpl) findViewObject("LOVCurrNotationVo1");
    }

    /**
     * Container's getter for LovGetItemId1.
     * @return LovGetItemId1
     */
    public ViewObjectImpl getLovGetItemId1() {
        return (ViewObjectImpl) findViewObject("LovGetItemId1");
    }

}

