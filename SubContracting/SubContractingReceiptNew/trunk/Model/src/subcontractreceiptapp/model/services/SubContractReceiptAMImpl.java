package subcontractreceiptapp.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.math.BigDecimal;

import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import subcontractreceiptapp.model.entities.MmScRcptSrnoEOImpl;
import subcontractreceiptapp.model.services.common.SubContractReceiptAM;
import subcontractreceiptapp.model.views.LovDelvQtyVOImpl;
import subcontractreceiptapp.model.views.LovOtherChargeVOImpl;
import subcontractreceiptapp.model.views.LovOtherChargeVORowImpl;
import subcontractreceiptapp.model.views.LovScoDlvItemVOImpl;
import subcontractreceiptapp.model.views.LovScoDlvItemVORowImpl;
import subcontractreceiptapp.model.views.LovSrNoVOImpl;
import subcontractreceiptapp.model.views.MmScRcptBinVOImpl;
import subcontractreceiptapp.model.views.MmScRcptBinVORowImpl;
import subcontractreceiptapp.model.views.MmScRcptItmVOImpl;
import subcontractreceiptapp.model.views.MmScRcptItmVORowImpl;
import subcontractreceiptapp.model.views.MmScRcptLotVOImpl;
import subcontractreceiptapp.model.views.MmScRcptLotVORowImpl;
import subcontractreceiptapp.model.views.MmScRcptOcVOImpl;
import subcontractreceiptapp.model.views.MmScRcptOcVORowImpl;
import subcontractreceiptapp.model.views.MmScRcptSrVOImpl;
import subcontractreceiptapp.model.views.MmScRcptSrVORowImpl;
import subcontractreceiptapp.model.views.MmScRcptSrcVOImpl;
import subcontractreceiptapp.model.views.MmScRcptSrcVORowImpl;
import subcontractreceiptapp.model.views.MmScRcptSrnoVOImpl;
import subcontractreceiptapp.model.views.MmScRcptSrnoVORowImpl;
import subcontractreceiptapp.model.views.MmScRcptTrLinesVOImpl;
import subcontractreceiptapp.model.views.MmScRcptTrVOImpl;
import subcontractreceiptapp.model.views.MmScRcptTrVORowImpl;
import subcontractreceiptapp.model.views.MmScRcptVOImpl;
import subcontractreceiptapp.model.views.MmScRcptVORowImpl;
import subcontractreceiptapp.model.views.ScSearchVOImpl;
import subcontractreceiptapp.model.views.ScSearchVORowImpl;
import subcontractreceiptapp.model.views.ScSearchViewVOImpl;
import subcontractreceiptapp.model.views.ViewValidOtherChargesVOImpl;
import subcontractreceiptapp.model.views.ViewValidOtherChargesVORowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 15 17:18:32 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SubContractReceiptAMImpl extends ApplicationModuleImpl implements SubContractReceiptAM {
    /**
     * Container's getter for LovDelvQty1.
     * @return LovDelvQty1
     */
    public LovDelvQtyVOImpl getLovDelvQty1() {
        return (LovDelvQtyVOImpl) findViewObject("LovDelvQty1");
    }

    /**
     * Container's getter for LovSrNo1.
     * @return LovSrNo1
     */
    public LovSrNoVOImpl getLovSrNo1() {
        return (LovSrNoVOImpl) findViewObject("LovSrNo1");
    }

    /**
     * This is the default constructor (do not remove).
     */

    class MessageDetail{
        public String docName;
        public Integer delNo;
        public String itemName;
        public String req;
        public String asgn;
//        
//        public boolean equals(Object object) {
//                        boolean result = false;
//                        if (object == null || object.getClass() != getClass()) {
//                                result = false;
//                        } else {
//                                MessageDetail msg = (MessageDetail) object;
//                                result=this.itemName.equals(msg.itemName);
//                        }
//                        return result;
//                }
//
//                public int hashCode() {
//                        return itemName.hashCode();
//                }
    }


    private String cldId;
    private Integer slocId;
    private String hoOrgId;
    private String orgId;
    private Integer userId;
    
    private Boolean isSerial=null;

    public void setUserId(Integer userId) {
        this.userId = userId;
    }

    public Integer getUserId() {
        return userId;
    }


    public SubContractReceiptAMImpl() {
    }

    public void setCldId(String cldId) {
        this.cldId = cldId;
    }

    public String getCldId() {
        return cldId;
    }

    public void setSlocId(Integer slocId) {
        this.slocId = slocId;
    }

    public Integer getSlocId() {
        return slocId;
    }

    public void setHoOrgId(String hoOrgId) {
        this.hoOrgId = hoOrgId;
    }

    public String getHoOrgId() {
        return hoOrgId;
    }

    public void setOrgId(String orgId) {
        this.orgId = orgId;
    }

    public String getOrgId() {
        return orgId;
    }

    /**
     * Container's getter for ScSearch1.
     * @return ScSearch1
     */
    public ScSearchVOImpl getScSearch1() {
        return (ScSearchVOImpl) findViewObject("ScSearch1");
    }

    /**
     * Container's getter for ScSearchView1.
     * @return ScSearchView1
     */
    public ScSearchViewVOImpl getScSearchView1() {
        return (ScSearchViewVOImpl) findViewObject("ScSearchView1");
    }

    /**
     * Container's getter for MmScRcpt1.
     * @return MmScRcpt1
     */
    public MmScRcptVOImpl getMmScRcpt1() {
        return (MmScRcptVOImpl) findViewObject("MmScRcpt1");
    }



    /**
     * Container's getter for MmScRcptSrno2.
     * @return MmScRcptSrno2
     */
    public MmScRcptSrnoVOImpl getMmScRcptSrno2() {
        return (MmScRcptSrnoVOImpl) findViewObject("MmScRcptSrno2");
    }

    /**
     * Container's getter for RcptToSrNoVL1.
     * @return RcptToSrNoVL1
     */
    public ViewLinkImpl getRcptToSrNoVL1() {
        return (ViewLinkImpl) findViewLink("RcptToSrNoVL1");
    }
    /**
     * Container's getter for MmScRcptSrc1.
     * @return MmScRcptSrc1
     */
    public MmScRcptSrcVOImpl getMmScRcptSrc1() {
        return (MmScRcptSrcVOImpl) findViewObject("MmScRcptSrc1");
    }

    /**
     * Container's getter for FkMmScRcptSrcVL1.
     * @return FkMmScRcptSrcVL1
     */
    public ViewLinkImpl getFkMmScRcptSrcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScRcptSrcVL1");
    }


    /**
     * Container's getter for MmScRcptItm1.
     * @return MmScRcptItm1
     */
    public MmScRcptItmVOImpl getMmScRcptItm1() {
        return (MmScRcptItmVOImpl) findViewObject("MmScRcptItm1");
    }

    /**
     * Container's getter for FkMmScRcptItmVL1.
     * @return FkMmScRcptItmVL1
     */
    public ViewLinkImpl getFkMmScRcptItmVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScRcptItmVL1");
    }

    /**
     * Container's getter for LovScoDlvItem1.
     * @return LovScoDlvItem1
     */
    public LovScoDlvItemVOImpl getLovScoDlvItem1() {
        return (LovScoDlvItemVOImpl) findViewObject("LovScoDlvItem1");
    }


    /**
     * Container's getter for MmScRcptTr1.
     * @return MmScRcptTr1
     */
    public MmScRcptTrVOImpl getMmScRcptTr1() {
        return (MmScRcptTrVOImpl) findViewObject("MmScRcptTr1");
    }

    /**
     * Container's getter for FkMmScRcptTrVL1.
     * @return FkMmScRcptTrVL1
     */
    public ViewLinkImpl getFkMmScRcptTrVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScRcptTrVL1");
    }

    /**
     * Container's getter for MmScRcptTrLines1.
     * @return MmScRcptTrLines1
     */
    public MmScRcptTrLinesVOImpl getMmScRcptTrLines1() {
        return (MmScRcptTrLinesVOImpl) findViewObject("MmScRcptTrLines1");
    }

    /**
     * Container's getter for FkMmScRcptTrLinesVL1.
     * @return FkMmScRcptTrLinesVL1
     */
    public ViewLinkImpl getFkMmScRcptTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScRcptTrLinesVL1");
    }


    /**
     * Container's getter for LovOtherCharge1.
     * @return LovOtherCharge1
     */
    public LovOtherChargeVOImpl getLovOtherCharge1() {
        return (LovOtherChargeVOImpl) findViewObject("LovOtherCharge1");
    }

    /**
     * Container's getter for MmScRcptOc1.
     * @return MmScRcptOc1
     */
    public MmScRcptOcVOImpl getMmScRcptOc1() {
        return (MmScRcptOcVOImpl) findViewObject("MmScRcptOc1");
    }

    /**
     * Container's getter for FkMmScRcptOcVL1.
     * @return FkMmScRcptOcVL1
     */
    public ViewLinkImpl getFkMmScRcptOcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScRcptOcVL1");
    }

    /**
     * Container's getter for MmScRcptItm2.
     * @return MmScRcptItm2
     */
    public MmScRcptItmVOImpl getMmScRcptItm2() {
        return (MmScRcptItmVOImpl) findViewObject("MmScRcptItm2");
    }

    /**
     * Container's getter for DocToItmVL1.
     * @return DocToItmVL1
     */
    public ViewLinkImpl getDocToItmVL1() {
        return (ViewLinkImpl) findViewLink("DocToItmVL1");
    }


    /**
     * Container's getter for MmScRcptOc2.
     * @return MmScRcptOc2
     */
    public MmScRcptOcVOImpl getMmScRcptOc2() {
        return (MmScRcptOcVOImpl) findViewObject("MmScRcptOc2");
    }

    /**
     * Container's getter for DocToOcVL1.
     * @return DocToOcVL1
     */
    public ViewLinkImpl getDocToOcVL1() {
        return (ViewLinkImpl) findViewLink("DocToOcVL1");
    }

    /**
     * Container's getter for MmScRcptTr2.
     * @return MmScRcptTr2
     */
    public MmScRcptTrVOImpl getMmScRcptTr2() {
        return (MmScRcptTrVOImpl) findViewObject("MmScRcptTr2");
    }

    /**
     * Container's getter for DocToTrVL1.
     * @return DocToTrVL1
     */
    public ViewLinkImpl getDocToTrVL1() {
        return (ViewLinkImpl) findViewLink("DocToTrVL1");
    }

    /**
     * Container's getter for ViewValidOtherCharges1.
     * @return ViewValidOtherCharges1
     */
    public ViewValidOtherChargesVOImpl getViewValidOtherCharges1() {
        return (ViewValidOtherChargesVOImpl) findViewObject("ViewValidOtherCharges1");
    }

    /**
     * Container's getter for MmScRcptBin2.
     * @return MmScRcptBin2
     */
    public MmScRcptBinVOImpl getMmScRcptBin2() {
        return (MmScRcptBinVOImpl) findViewObject("MmScRcptBin2");
    }

    /**
     * Container's getter for RcptToBinVL1.
     * @return RcptToBinVL1
     */
    public ViewLinkImpl getRcptToBinVL1() {
        return (ViewLinkImpl) findViewLink("RcptToBinVL1");
    }


    /**
     * Container's getter for MmScRcptSr1.
     * @return MmScRcptSr1
     */
    public MmScRcptSrVOImpl getMmScRcptSr1() {
        return (MmScRcptSrVOImpl) findViewObject("MmScRcptSr1");
    }

    /**
     * Container's getter for BinToSrVL1.
     * @return BinToSrVL1
     */
    public ViewLinkImpl getBinToSrVL1() {
        return (ViewLinkImpl) findViewLink("BinToSrVL1");
    }

    /**
     * Container's getter for MmScRcptSr2.
     * @return MmScRcptSr2
     */
    public MmScRcptSrVOImpl getMmScRcptSr2() {
        return (MmScRcptSrVOImpl) findViewObject("MmScRcptSr2");
    }

    /**
     * Container's getter for FkMmScRcptSrVL1.
     * @return FkMmScRcptSrVL1
     */
    public ViewLinkImpl getFkMmScRcptSrVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScRcptSrVL1");
    }

    /**
     * Container's getter for MmScRcptSr3.
     * @return MmScRcptSr3
     */
    public MmScRcptSrVOImpl getMmScRcptSr3() {
        return (MmScRcptSrVOImpl) findViewObject("MmScRcptSr3");
    }

    /**
     * Container's getter for LotToSrVL1.
     * @return LotToSrVL1
     */
    public ViewLinkImpl getLotToSrVL1() {
        return (ViewLinkImpl) findViewLink("LotToSrVL1");
    }


    /**
     *
     * To Inilize application
     * */

    public void initAplication() {
        setGlabalVariable();
        applyGlobalFilter();
    }

    private void setGlabalVariable() {
        this.setCldId(EbizParams.GLBL_APP_CLD_ID());
        this.setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        this.setHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        this.setOrgId(EbizParams.GLBL_APP_USR_ORG());
        this.setUserId(EbizParams.GLBL_APP_USR());
    }

    private void applyGlobalFilter() {

        this.getScSearchView1().setBindCldId(EbizParams.GLBL_APP_CLD_ID());
        this.getScSearchView1().setBindSlocId(EbizParams.GLBL_APP_SERV_LOC());
        this.getScSearchView1().setBindOrgId(EbizParams.GLBL_APP_USR_ORG());
        this.getScSearchView1().setBindStatus(-1);
        this.getScSearchView1().executeQuery();
        
        this.getMmScRcpt1().setBindCldId(this.getCldId());
        this.getMmScRcpt1().setBindSlocId(this.getSlocId());
        this.getMmScRcpt1().setBindOrgId(this.getOrgId());
        this.getMmScRcpt1().executeQuery();

    }

    /**
     * Used to serach fields
     *
     **/

    public void searchReceipt() {
        // to search We have to use coa_name not entity name
        String rcptNo = ((ScSearchVORowImpl) this.getScSearch1().getCurrentRow()).getRcptNo();
        Integer wfMode = ((ScSearchVORowImpl) this.getScSearch1().getCurrentRow()).getStatus();
        java.sql.Timestamp stDt = ((ScSearchVORowImpl) this.getScSearch1().getCurrentRow()).getDocStDt();
        java.sql.Timestamp endDt = ((ScSearchVORowImpl) this.getScSearch1().getCurrentRow()).getDocEndDt();
        String eoName = ((ScSearchVORowImpl) this.getScSearch1().getCurrentRow()).getEntityName();
        String whId = ((ScSearchVORowImpl) this.getScSearch1().getCurrentRow()).getWhId();
        Integer type = ((ScSearchVORowImpl) this.getScSearch1().getCurrentRow()).getDocType();


        this.getScSearchView1().setBindStatus(type);
        this.getScSearchView1().setBindEoNm(eoName);
        this.getScSearchView1().setBindWhId(whId);
        this.getScSearchView1().setBindRcptNo(rcptNo);
        this.getScSearchView1().setBindStatus(wfMode);
        this.getScSearchView1().setBindStrtDt(stDt);
        this.getScSearchView1().setBindEndDt(endDt);
        this.getScSearchView1().setBindSrcType(type);
        this.getScSearchView1().executeQuery();


    }

    /**
     * USed to reset the search
     * */

    public void resetReceipt() {

        this.getScSearch1().executeQuery();

        searchReceipt();

    }


    /**
     * Methos to call database function
     * (Add code for enabling and disabling the AM if needed.So that functions can be performed in sme session)
     *
     * */

    public Object callFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        Object o=null;
        try{
            o= ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
        }catch(Exception e){
            this.showError(e);
           // Thread.currentThread().stop();
        }
        return o;
    }


    /**
     * This function is used to show Error Message from function
     *
     ***/


    public void showError(Exception e) {

        FacesContext.getCurrentInstance().addMessage(null,
                                                     new FacesMessage(FacesMessage.SEVERITY_ERROR, ADFModelUtils.resolvRsrc("MSG.2151"),
                                                                      e.getMessage()));
    }


    /**
     * This code will be used to create hexa decimal code for current document
     * */
    public String getDocId() {
        String docId = null;
        try {
            docId = this.callFunction(Types.VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                      EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                      EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), 36503, 0
            }).toString();

        } catch (Exception e) {
            this.showError(e);
        }

        return docId;
    }

    /**
     * This function is used to get docDispId
     * **/


    public String getScRcptDispId(Integer fyId, Integer type) {
        String dispId = null;
        try {
            dispId = this.callFunction(Types.VARCHAR, "MM.FN_MM_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                       this.getSlocId(), this.getCldId(), this.getOrgId(), 36503, null, type,
                                       "MM$SC$RCPT", fyId, 0
            }).toString();
        } catch (Exception e) {
            this.showError(e);
        }
        return dispId;
    }

    /****
     *
     * To get FyId from function
     *
     * */


    public Integer getFyId() {
        Integer fyId = 0;
        try {
            fyId = (Integer) this.callFunction(Types.INTEGER, "APP.FN_GET_FY_ID(?,?,?,?)", new Object[] {
                                               this.getCldId(), this.getOrgId(),
                                               new java.sql.Timestamp(System.currentTimeMillis()), "FY"
            });
        } catch (Exception e) {
            this.showError(e);
        }
        return fyId;
    }
    
    /**
    * To check Default Subcontracting Type
    * */
    public Integer getDefualtScType() {
        Integer retVal = 0;
        try {
            retVal = Integer.parseInt(this.callFunction(Types.VARCHAR, "MM.fn_sc_chk_org_prf(?,?,?,?)", new Object[] {
                                                              this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                              "DEF_SC_TYPE"
            }).toString());
     
            System.out.println("Value of Defualt Subcontracting Type --- " + retVal);
     
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION fn_sc_chk_org_prf :" + e.getMessage());
        }
        return retVal;
    }

    /**
     *
     * Filter Data From Datatbase
     * */

    public void filterDoc(String docId) {

        this.getMmScRcpt1().setBindCldId(EbizParams.GLBL_APP_CLD_ID());
        this.getMmScRcpt1().setBindOrgId(EbizParams.GLBL_APP_USR_ORG());
        this.getMmScRcpt1().setBindSlocId(EbizParams.GLBL_APP_SERV_LOC());
        this.getMmScRcpt1().setBindDocId(docId);
        this.getMmScRcpt1().executeQuery();
    }


    /***
     * Create Document on click to add Button
     *
     * */

    public void createDocument() {

        this.filterDoc(null);

        MmScRcptVORowImpl row = (MmScRcptVORowImpl) this.getMmScRcpt1().createRow();

        //get values

        String docId = this.getDocId();
        
        Integer fyId = this.getFyId();


        //Inilize row

        row.setAuthStat("N");
        row.setCldId(this.getCldId());
        row.setOrgId(this.getOrgId());
        row.setCurrConvFctr(new Number(1));
        row.setDocId(docId);
        row.setDocDt(new java.sql.Timestamp(System.currentTimeMillis()));
        row.setFyId(fyId);

        row.setRcptDt(new java.sql.Timestamp(System.currentTimeMillis()));

        row.setQcDoneFlg("N");
        row.setRcptStat(313);
        row.setRcptStg(379);
        row.setRmdaStat("N");
        row.setRcptFrz("N");
        row.setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        row.setUsrIdCreate(EbizParams.GLBL_APP_USR());
        row.setUsrIdCreateDt(new java.sql.Timestamp(System.currentTimeMillis()));

        row.setRcptSrcType(this.getDefualtScType());
        //set in vo as current Row

        this.getMmScRcpt1().insertRow(row);


        //Insert Source Row


        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("DOC_ID", docId);


    }

    public void updateDocDisp(Integer type) {
        MmScRcptVORowImpl row = (MmScRcptVORowImpl) this.getMmScRcpt1().getCurrentRow();
        if(row.getRcptNo()==null||row.getRcptNo().trim().length()==0){
            String dispId = this.getScRcptDispId(row.getFyId(), type);
            row.setRcptNo(dispId);
        }  
    }


    public Boolean validateInput() {
        Boolean result = true;
        MmScRcptVORowImpl row = (MmScRcptVORowImpl) this.getMmScRcpt1().getCurrentRow();

        if (row.getDocIdSrcTrans() != null &&
            (row.getDeliveryNo() != null && row.getDeliveryNo().toString().trim().length() != 0)) {
            String docId = this.getMmScRcpt1().getCurrentRow().getAttribute("DocId").toString();
            String docIdSrc = row.getDocIdSrcTrans();
            Integer delNo = row.getDeliveryNo();
            RowQualifier rq = new RowQualifier(this.getMmScRcptSrc1());
            rq.setWhereClause("DocId='" + docId + "' AND DocIdSrc='" + docIdSrc + "' AND DlvSchdlNo='" + delNo + "'");

            Row[] rw = this.getMmScRcptSrc1().getFilteredRows(rq);
            if (rw.length > 0) {
                result = false;
                FacesContext.getCurrentInstance().addMessage(null,
                                                             new FacesMessage(FacesMessage.SEVERITY_ERROR, ADFModelUtils.resolvRsrc("MSG.2151"),
                                                                              ADFModelUtils.resolvRsrc("MSG.2937")));
            } else {                                                             // This order and delivery No has been already added.

            }
        } else {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR, ADFModelUtils.resolvRsrc("MSG.2151"),
                                                                        ADFModelUtils.resolvRsrc("MSG.2938")));  //Doc no and Delivery no is mandatory
            result = false;
        }
        return result;
    }


    public Object[] insertToSource() {
        Object[] ret = new Object[3];

        MmScRcptVORowImpl row = (MmScRcptVORowImpl) this.getMmScRcpt1().getCurrentRow();
        Integer type = row.getRcptSrcType();

        MmScRcptSrcVORowImpl curRow = null;

        if (row.getDocIdSrcTrans() != null &&
            (row.getDeliveryNo() != null && row.getDeliveryNo().toString().trim().length() != 0)) {

            curRow = (MmScRcptSrcVORowImpl) this.getMmScRcptSrc1().createRow();

            curRow.setDocIdSrc(row.getDocIdSrcTrans());

            curRow.setDocTypeSrc(row.getDocTypeTrans());
            curRow.setDocDtSrc(row.getDocDtSrcTrans());
            curRow.setDlvSchdlNo(row.getDeliveryNo());

            this.getMmScRcptSrc1().insertRow(curRow);

            //To Strore the value of docId and delNo
            String docId = row.getDocIdSrcTrans();
            Integer delNo = row.getDeliveryNo();

            // To pass the refrence of docId and delNo
            ret[0] = docId;
            ret[1] = delNo;
            ret[2] = type;
            // System.out.println("Doc Id before set is "+docId);

            row.setRcptSrcTrans(null);
            row.setDeliveryNo(null);
            return ret;
        } else {

            new FacesMessage(FacesMessage.SEVERITY_ERROR, ADFModelUtils.resolvRsrc("MSG.2151"),
                           ADFModelUtils.resolvRsrc("MSG.2938"));  //Doc no and Delivery no is mandatory
            return null;
        }


    }


    public void polpulateItem(String docId, Integer delNo, Integer type) {
        MmScRcptItmVORowImpl itemRow = null;

        LovScoDlvItemVORowImpl row = null;

//        System.out.println("Doc id is " + docId);
//        System.out.println("del No is" + delNo);
//        System.out.println("Type is " + type);

        this.getLovScoDlvItem1().setBindCldId(this.getCldId());
        this.getLovScoDlvItem1().setBindHoOrgId(this.getHoOrgId());
        this.getLovScoDlvItem1().setBindOrgId(this.getOrgId());
        this.getLovScoDlvItem1().setBindSlocId(this.getSlocId());
        this.getLovScoDlvItem1().setBindDocId(docId);
        this.getLovScoDlvItem1().setBindDlvNo(delNo);
        this.getLovScoDlvItem1().setBindType(type);
        this.getLovScoDlvItem1().setBindItemId(null);
        this.getLovScoDlvItem1().executeQuery();

     //   System.out.println("Row Count is " + this.getLovScoDlvItem1().getRowCount());

        String flag = "A"; //  P ---if some of item of order has been consumed

        if (this.getLovScoDlvItem1().getRowCount() > 0) {
            //Add Logic Insert Row to Item

            RowSetIterator iter = this.getLovScoDlvItem1().createRowSetIterator(null);
            Number itemPrice = new Number(0);
            Number conF = (Number) this.getMmScRcpt1().getCurrentRow().getAttribute("CurrConvFctr");
            String ccId=null;
            Object cc=this.callFunction(Types.VARCHAR, "app.get_txn_id_cc(?,?,?,?,?,?,?)", 
                                               new Object[]{this.getCldId(),this.getSlocId(),this.getOrgId(),this.getUserId(),36503,8490,0});
            ccId= cc==null?null: cc.toString();
            while (iter.hasNext()) {
                row = (LovScoDlvItemVORowImpl) iter.next();

                System.out.println("Balance qty :" + row.getBalQty());

                if (row.getBalQty().compareTo(new Number(0)) > 0) {

                    itemRow = (MmScRcptItmVORowImpl) this.getMmScRcptItm1().createRow();

                    itemPrice = row.getItmPrice();

                    itemRow.setItmId(row.getItmId());
                    itemRow.setItmUom(row.getItmUom());
                    itemRow.setItmUomBs(row.getItmUomBs());
                    itemRow.setOpId(row.getOpId());
                    itemRow.setOpSrNo(row.getOpSrNo());
                    itemRow.setUomConvFctr(row.getUomConvFctr());
                    itemRow.setItemType(row.getItmType());
                
                    itemRow.setPurPrice(itemPrice);
                    itemRow.setPurPriceBs(itemPrice.multiply(conF));


                    itemRow.setTotRcptQty(row.getBalQty());
                    itemRow.setTotRcptQtyBs(row.getBalQty().multiply(row.getUomConvFctr()));
                    
                    itemRow.setRcptQty(row.getBalQty());
                    itemRow.setRcptQtyBs(row.getBalQty().multiply(row.getUomConvFctr()));
                    
                    itemRow.setFinalRcptQty(row.getBalQty());
                    itemRow.setFinalRcptQtyBs(row.getBalQty().multiply(row.getUomConvFctr()));
                    
                    itemRow.setRejQty(new Number(0));
                    itemRow.setRejQtyBs(new Number(0));
                    
                    itemRow.setRwkQty(new Number(0));
                    itemRow.setRwkQtyBs(new Number(0));
                    
                    itemRow.setQcRejQty(new Number(0));
                    itemRow.setQcRejQtyBs(new Number(0));
                    itemRow.setQcRwkQty(new Number(0));
                    itemRow.setQcRwkQtyBs(new Number(0));
                    
                    itemRow.setPendQty(row.getBalQty());
                    itemRow.setLndPrice(itemPrice);
                    itemRow.setLndPriceBs(itemPrice.multiply(conF));

                    itemRow.setTaxableAmtBs(row.getDlvQty().multiply(itemPrice).multiply(conF));
                    itemRow.setTaxableAmtBsOrig(row.getDlvQty().multiply(itemPrice).multiply(conF));
                    itemRow.setTaxableAmtSpOrig(row.getDlvQty().multiply(itemPrice));
                    itemRow.setTaxableAmtSp(row.getDlvQty().multiply(itemPrice));


                    // Cost Center related values
                    itemRow.setCcId(this.getHexDocNoFromFun());

                    // Qc related flags
                    itemRow.setQcDoneFlg("N");
                    itemRow.setQcOverrideFlg("N");
                    //System.out.println("Qc Required Flag is "+row.getQcReqFlg());
                    itemRow.setQcReqdFlg(row.getQcReqFlg());

                    //   this.getMmScRcptItm1().insertRow(row);

                    // Apply tax For Item
                    // String docIdSrc,Integer delSrc,String itemId,String uom,Integer ruleId,String type,Number taxAmt,Number conF

                    if (row.getTaxRuleId() != null) {
                        Number tax =
                            this.createTr(docId, delNo, row.getItmId(), row.getItmUom(), row.getTaxRuleId(), "I",
                                          row.getDlvQty().multiply(itemPrice), conF);
                        itemRow.setTotTaxAmtSp(tax);
                        itemRow.setTotTaxAmtBs(tax.multiply(conF));
                    }

                    // Add Other Charges

                    this.addOtherChargesFromPre(docId, type);
                } else {
                    flag = "P";
                }

            }

            if (flag.equalsIgnoreCase("P"))
                FacesContext.getCurrentInstance().addMessage(null,
                                                             new FacesMessage(FacesMessage.SEVERITY_WARN, ADFModelUtils.resolvRsrc("MSG.2940"),
                                                                              ADFModelUtils.resolvRsrc("MSG.2941")));
                    //  Warring //  Some items from oder has no pending quantity
        } else {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR, ADFModelUtils.resolvRsrc("MSG.2151"),
                                                                          ADFModelUtils.resolvRsrc("MSG.2942"))); // There is no any item in Order
        }

    }

    public void initSrcAndIItem() {

        if (!this.validateInput())
            return;

        Object[] ret = this.insertToSource();
        if (ret != null) {
            this.polpulateItem(ret[0].toString(), (Integer) ret[1], (Integer) ret[2]);
        }

    }

    public void addOtherChargesFromPre(String docIdSrc, Integer type) {
        ViewValidOtherChargesVOImpl vo = this.getViewValidOtherCharges1();
        vo.setBindCldId(this.getCldId());
        vo.setBindSlocId(this.getSlocId());
        vo.setBindHoOrgId(this.getHoOrgId());
        vo.setBindOrgId(this.getOrgId());
        vo.setBindDocId(docIdSrc);
        vo.setBindGlblDocId(36503);
        vo.setBindGlblDocTypeId(type);
        vo.executeQuery();

        RowSetIterator iter = vo.createRowSetIterator(null);
        ViewValidOtherChargesVORowImpl row = null;
        MmScRcptOcVORowImpl curRow = null;

        while (iter.hasNext()) {
            row = (ViewValidOtherChargesVORowImpl) iter.next();
            curRow = (MmScRcptOcVORowImpl) this.getMmScRcptOc1().createRow();

            curRow.setCoaId(row.getCoaId());
            curRow.setCurrConvFctrOc(row.getCurrRate());
            curRow.setOcDesc(row.getOcDesc());
            curRow.setOcId(row.getOcId());
            curRow.setCurrIdSpOc(row.getCurrId());
            curRow.setOcAmtBs(row.getAmtBs());
            curRow.setOcAmtSp(row.getAmtSp());
            curRow.setOcAmtSpOc(row.getAmtSpOc());
        }


    }


    /**
     * This function is used to call for insert in TR Line
     * */
    public Number callTrLine(String docSrc, Integer delSch, String itemId, String uom, Integer taxRule, Number taxAmt,
                             Number absAmt, Number conF) {


        String cldId = this.getCldId();
        Integer slocId = this.getSlocId();
        String hoOrgId = this.getHoOrgId();
        String orgId = this.getOrgId();
        String docId = this.getMmScRcpt1().getCurrentRow().getAttribute("DocId").toString();
        Integer userId = this.getUserId();
        String whId = this.getMmScRcpt1().getCurrentRow().getAttribute("WhId").toString();


        System.out.println("Parameters are " + cldId + " " + hoOrgId + " " + orgId + " " + docId + " " + itemId + " " +
                           taxRule + " " + userId + " " + taxAmt + " " + absAmt + " " + conF + " " + whId + " " +
                           docSrc + " " + delSch + " " + uom);

        BigDecimal result =
            (BigDecimal) this.callFunction(Types.NUMERIC, "mm.fn_ins_sc_rcpt_tr_lines(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           slocId, cldId, hoOrgId, orgId, docId, itemId, taxRule, userId, taxAmt,
                                           absAmt, conF, whId, docSrc, delSch, uom
        });


        if (result == null)
            result = new BigDecimal(0);
        Number amt = null;
        try {
            amt = new Number(result.toString());
        } catch (SQLException e) {
            amt = StaticValue.NUMBER_ZERO;
            e.printStackTrace();
        }
        System.out.println("Amount is " + amt);

        this.getMmScRcptTrLines1().executeQuery();
        return amt;
    }


    public void deleteTr(String mode, String itemId) {

        MmScRcptTrVOImpl trVo = this.getMmScRcptTr2();

        if (mode.equalsIgnoreCase("A")) {

            RowSetIterator iter = trVo.createRowSetIterator(null);
            // System.out.println("Row count is "+this.getMmScInvcTr2().getRowCount());
            while (iter.hasNext()) {
                iter.next().remove();
            }
            //  System.out.println("Row count is "+this.getMmScInvcTr2().getRowCount());
        } else {

            Row[] rw = trVo.getFilteredRows("ItmId", itemId);

            if (rw.length > 0) {
                rw[0].remove();

            }
        }
    }

    private Number createTr(String docIdSrc, Integer delSrc, String itemId, String uom, Integer ruleId, String type,
                            Number taxAmt, Number conF) {
        Number amt = StaticValue.NUMBER_ZERO;
        if (ruleId != null) {
            // Code to Insert Rows
            MmScRcptTrVORowImpl row = (MmScRcptTrVORowImpl) this.getMmScRcptTr1().createRow();
            row.setDocIdSrc(docIdSrc);
            row.setDlvSchdlNo(delSrc);
            row.setItmId(itemId);
            row.setItmUom(uom);
            row.setTaxRuleId(ruleId);
            row.setTaxExmptFlg("N");
            row.setTaxRuleFlg(type);
            this.getMmScRcptTr1().insertRow(row);
            //System.out.println("Row Count is "+this.getMmScRcptTr1().getRowCount());

            amt = this.callTrLine(docIdSrc, delSrc, itemId, uom, ruleId, taxAmt, taxAmt.multiply(conF), conF);

            amt = amt == null ? new Number(0) : amt;

            row.setTaxAmt(amt);
            row.setTaxAmtBs(amt.multiply(conF));
        } else {
            amt = this.callTrLine(docIdSrc, delSrc, itemId, uom, ruleId, taxAmt, taxAmt.multiply(conF), conF);

            amt = amt == null ? new Number(0) : amt;
        }
        return amt;
    }


    public void applyTaxForItem(Integer taxRule) {
        System.out.println("Tax rule is " + taxRule);


        MmScRcptItmVORowImpl row = (MmScRcptItmVORowImpl) this.getMmScRcptItm1().getCurrentRow();

        String itemId = row.getItmId();
        String itemUom = row.getItmUom();

        String docIdSrc = row.getDocIdSrc();
        Integer delNo = row.getDlvSchdlNo();
        Number conF = (Number) this.getMmScRcpt1().getCurrentRow().getAttribute("CurrConvFctr");
        Number amt = row.getTaxableAmtSp();

        this.deleteTr("I", itemId);
        Number tax = this.createTr(docIdSrc, delNo, itemId, itemUom, taxRule, "I", amt, conF);

        row.setTotTaxAmtSp(tax);
        row.setTotTaxAmtBs(tax.multiply(conF));
    }


    public void applyTaxForAllItem(Integer taxRule, String type) {

        if (type.equalsIgnoreCase("A")) {
            if (taxRule == null) {
                FacesContext.getCurrentInstance().addMessage(null,
                                                             new FacesMessage(FacesMessage.SEVERITY_ERROR, ADFModelUtils.resolvRsrc("MSG.2151"),
                                                                              ADFModelUtils.resolvRsrc("MSG.2928")));  // Please Select a Tax Rule
                return;
            }
        }
        RowSetIterator iter = this.getMmScRcptItm1().createRowSetIterator(null);
        String itemId = null;
        String itemUom = null;
        String docIdSrc = null;
        Integer delNo = null;
        Number conF = (Number) this.getMmScRcpt1().getCurrentRow().getAttribute("CurrConvFctr");
        Number amt = null;


        MmScRcptItmVORowImpl row = null;
        while (iter.hasNext()) {
            row = (MmScRcptItmVORowImpl) iter.next();
            itemId = row.getItmId();
            itemUom = row.getItmUom();
            docIdSrc = row.getDocIdSrc();
            delNo = row.getDlvSchdlNo();
            amt = row.getTaxableAmtSp();
            this.deleteTr("A", itemId);
            Number tax = this.createTr(docIdSrc, delNo, itemId, itemUom, taxRule, "A", amt, conF);
            row.setTotTaxAmtSp(tax);
            row.setTotTaxAmtBs(tax.multiply(conF));
        }
    }


    public void resetItemTax() {
        System.out.println("reseting Tax");
        this.getMmScRcptItm1().getCurrentRow().setAttribute("TaxRuleId", null);
        this.applyTaxForItem(null);
    }

    public void resetTaxAll() {
        this.applyTaxForAllItem(null, "R");
    }

    public void addOtherCharge() {
        LovOtherChargeVORowImpl ocRow = (LovOtherChargeVORowImpl) this.getLovOtherCharge1().getCurrentRow();

        MmScRcptOcVOImpl oc = this.getMmScRcptOc1();

        String ocId = ocRow.getOcId();
        Integer coaId = ocRow.getCoaId();
        Integer ocCat = ocRow.getOcCat();
        String ocNm = ocRow.getOcNm();
        Integer currId = (Integer) this.getMmScRcpt1().getCurrentRow().getAttribute("CurrIdSp");


        // Validate Oc

        RowQualifier rq = new RowQualifier(this.getMmScRcptOc1());
        rq.setWhereClause("OcId = '" + ocId + "'");

        Row[] rw = this.getMmScRcptOc1().getFilteredRows(rq);

        if (rw.length > 0) {
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR,ADFModelUtils.resolvRsrc("MSG.2151"),
                                                                          ADFModelUtils.resolvRsrc("MSG.2943")));  //  This Other charge is already exist 
        } else {
            MmScRcptOcVORowImpl newRow = (MmScRcptOcVORowImpl) this.getMmScRcptOc1().createRow();

            newRow.setOcId(ocId);
            newRow.setCoaId(coaId);
            newRow.setOcDesc(ocCat);
            newRow.setOcName(ocNm);
            newRow.setCurrIdSpOc(currId);
            newRow.setOcAmtSpOc(StaticValue.NUMBER_ZERO);
            newRow.setOcAmtSp(StaticValue.NUMBER_ZERO);
            newRow.setOcAmtBs(StaticValue.NUMBER_ZERO);
            this.getMmScRcptOc1().insertRow(newRow);
        }
    }

    public void deleteOtherCharge() {
        LovOtherChargeVORowImpl ocRow = (LovOtherChargeVORowImpl) this.getLovOtherCharge1().getCurrentRow();

        MmScRcptOcVOImpl oc = this.getMmScRcptOc1();

        String ocId = ocRow.getOcId();
        Integer coaId = ocRow.getCoaId();
        Integer ocCat = ocRow.getOcCat();


        // Validate Oc

        RowQualifier rq = new RowQualifier(this.getMmScRcptOc1());
        rq.setWhereClause("OcId = '" + ocId + "'");

        Row[] rw = this.getMmScRcptOc1().getFilteredRows(rq);

        if (rw.length > 0) {
            rw[0].remove();
        } else {
            FacesContext.getCurrentInstance().addMessage(null,
            new FacesMessage(FacesMessage.SEVERITY_ERROR,ADFModelUtils.resolvRsrc("MSG.2151"),
                             ADFModelUtils.resolvRsrc("MSG.2943")));  //  This Other charge is already exist
        }
    }

    public void filterOC() {
        this.getLovOtherCharge1().setBindCldId(this.getCldId());
        this.getLovOtherCharge1().setBindSlocId(this.getSlocId());
        this.getLovOtherCharge1().setBindHoOrgId(this.getHoOrgId());
        this.getLovOtherCharge1().setBindDocId(36503);
        this.getLovOtherCharge1().setBindDocTypeId((Integer) this.getMmScRcpt1().getCurrentRow().getAttribute("RcptSrcType"));
        this.getLovOtherCharge1().executeQuery();
    }

    /**
     * Container's getter for MmScRcptLot1.
     * @return MmScRcptLot1
     */
    public MmScRcptLotVOImpl getMmScRcptLot1() {
        return (MmScRcptLotVOImpl) findViewObject("MmScRcptLot1");
    }

    /**
     * Container's getter for FkMmScRcptLotVL1.
     * @return FkMmScRcptLotVL1
     */
    public ViewLinkImpl getFkMmScRcptLotVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScRcptLotVL1");
    }


    /**
     * Container's getter for MmScRcptBin1.
     * @return MmScRcptBin1
     */
    public MmScRcptBinVOImpl getMmScRcptBin1() {
        return (MmScRcptBinVOImpl) findViewObject("MmScRcptBin1");
    }

    /**
     * Container's getter for FkMmScRcptBinVL1.
     * @return FkMmScRcptBinVL1
     */
    public ViewLinkImpl getFkMmScRcptBinVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScRcptBinVL1");
    }


    public void addSearial(String srNo, String lot, String bin) {
        if (srNo == null || srNo.trim().length() == 0) {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2944"), ADFModelUtils.resolvRsrc("MSG.2945"),
                                                    FacesMessage.SEVERITY_ERROR);
            
             //   Please enter serial number   //  Serial Number is a mandatory field
            return;
        }


        RowQualifier rq = new RowQualifier(this.getMmScRcptSr2());
        rq.setWhereClause("LotId='" + lot + "' AND BinId = '" + bin + "' AND SrNo='" + srNo + "'");
        Row[] rw = this.getMmScRcptSr2().getFilteredRows(rq);
        if (rw.length > 0) {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.46"),ADFModelUtils.resolvRsrc("MSG.2947") + srNo,
                                                    FacesMessage.SEVERITY_ERROR);
              //   Duplicate Record found    ///   Serial No :
            return;
        }
        MmScRcptSrVORowImpl row = (MmScRcptSrVORowImpl) this.getMmScRcptSr2().createRow();
        row.setLotId(lot);
        row.setBinId(bin);
        row.setSrNo(srNo);
        row.setSrQty(new Number(1));
        row.setSrQtyBs(new Number(1));
        row.setRejQtyBs(StaticValue.NUMBER_ZERO);
        row.setRejQtySp(StaticValue.NUMBER_ZERO);
        row.setRwkQtyBs(StaticValue.NUMBER_ZERO);
        row.setRwkQtySp(StaticValue.NUMBER_ZERO);
        this.getMmScRcptSr2().insertRow(row);

        System.out.println("Row Comunt for Vo Bin " + this.getMmScRcptSr1().getRowCount() + "  row Cont for Lot is " +
                           this.getMmScRcptSr3().getRowCount() + " Main Vo Count " +
                           this.getMmScRcptSr2().getRowCount());
    }


    public String getLotId(String whId, String itmId) {
        String lotId = null;

        System.out.println("Whid is " + whId + " itmId " + itmId + " cld id " + this.getCldId() + " slocId " +
                           this.getSlocId() + " orgId " + this.getOrgId());

        lotId = (String) this.callFunction(Types.VARCHAR, "MM.MM_GEN_LOT(?,?,?,?,?)", new Object[] {
                                           this.getCldId(), this.getSlocId(), this.getOrgId(), whId, itmId
        });

        return lotId;
    }

    public Number getLotAmt(String ItmId) {
        Number lotAmt=null;
        
        MmScRcptItmVORowImpl itemRow = (MmScRcptItmVORowImpl) this.getMmScRcptItm1().getCurrentRow();
        lotAmt=itemRow.getLndPrice();
        return lotAmt;
    }


    public void refreshAmt(Number qty) {

        Number price = (Number) this.getMmScRcptItm1().getCurrentRow().getAttribute("PurPrice");

        Number totAmt = price.multiply((qty == null ? new Number(0) : qty));

        ((MmScRcptItmVORowImpl) this.getMmScRcptItm1().getCurrentRow()).setTaxableAmtBs(totAmt);
        ((MmScRcptItmVORowImpl) this.getMmScRcptItm1().getCurrentRow()).setTaxableAmtSp(totAmt);
        this.updateCostCenterAmt();

    }

    public void refreshOC() {
        Object id = this.getMmScRcptOc1().getCurrentRow().getAttribute("CurrIdSpOc");
        if (id != null) {
            Integer currId = (Integer) id;
            Number conF = new Number(1);
            Number conFS = (Number) this.getMmScRcpt1().getCurrentRow().getAttribute("CurrConvFctr");

            Number conO = EbizParams.getCurrRateForCurrId(this, currId);

            conO.round(6);
            conF = conO.divide(conFS);
            conF.round(6);


            this.getMmScRcptOc1().getCurrentRow().setAttribute("CurrConvFctrOc", conF);

            Number amt = (Number) this.getMmScRcptOc1().getCurrentRow().getAttribute("OcAmtSpOc");

            amt = amt == null ? new Number(1) : amt;

            this.getMmScRcptOc1().getCurrentRow().setAttribute("OcAmtSp", conF.multiply(amt));
            this.getMmScRcptOc1().getCurrentRow().setAttribute("OcAmtBs", conO.multiply(amt));

        }
    }

    /***
     *
     * To get WF  Function
     *
     * */

    public String getWfId() {
        String wfId = null;
        wfId = (String) WorkFlowUtils.getWorkFlowId(this, 36503, 0);
        return wfId;
    }

    public void insertToWF(String docId) {
        try {
            WorkFlowUtils.insertWfTxnEntriesForCurrDoc(this, 36503, 0, docId, EbizParams.GLBL_APP_USR(),
                                                       EbizParams.GLBL_APP_USR(), "Suncontracting",
                                                       StaticValue.NUMBER_ZERO);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public Integer getCurUser(String docId) {
        Integer val = WorkFlowUtils.docPendingAt(this, 36503, 0, docId);
        return val;
    }

    public void updateWfStat(String mode, String docId) {
        this.filterDoc(docId);
        // Move cursor to first
        this.getMmScRcpt1().first();
        switch (mode) {
        case "A":
            this.getMmScRcpt1().first().setAttribute("RcptStat", 314);
            
            // Only For Outward Case
            if(this.getMmScRcpt1().first().getAttribute("RcptSrcType").toString().equals("827")){
            
            //Check and for Qc Flag
            
                Row rw[]=this.getMmScRcptItm2().getFilteredRows("QcReqdFlg", "Y"); 
                
                if(rw.length>0)
                    this.getMmScRcpt1().first().setAttribute("RcptStg", 380);
                else
                    this.getMmScRcpt1().first().setAttribute("RcptStg", 426);
            
                this.insertRcptIssue();
                this.updateLandCost();
            }else{
                this.getMmScRcpt1().first().setAttribute("RcptStg", 426);
            }
            this.getMmScRcptIssuItm1().executeQuery();
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2159"),ADFModelUtils.resolvRsrc("MSG.2950"),
                                                    FacesMessage.SEVERITY_INFO);
            //  Successfully   ///  Record Approved Successfully
            
            break;
        case "F":
            this.getMmScRcpt1().first().setAttribute("RcptStat", 317);
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2159"),ADFModelUtils.resolvRsrc("MSG.2952"),
                                                    FacesMessage.SEVERITY_INFO);
            //  Successfully   /// Record Forwarded Successfully
            break;
        case "R":
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2159"),ADFModelUtils.resolvRsrc("MSG.2954"),
                                                    FacesMessage.SEVERITY_INFO);
            //  Successfully   /// Record Rejected Successfully
            break;
        case "V":
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2159"),ADFModelUtils.resolvRsrc("MSG.1631"),
                                                    FacesMessage.SEVERITY_INFO);
            //  Successfully   /// Record Reverted Successfully
            break;
        }
        this.getDBTransaction().commit();
    }


    public void refreshItemQty() {
        MmScRcptItmVORowImpl row = (MmScRcptItmVORowImpl) this.getMmScRcptItm1().getCurrentRow();

        Number totQty = row.getTotRcptQty();
        Number rejQty = row.getRejQty();
        Number rwkQty = row.getRwkQty();
        Number uomF = row.getUomConvFctr();
        Number rcpt = totQty.subtract(rwkQty).subtract(rejQty);
        
        row.setFinalRcptQty(rcpt);
        row.setFinalRcptQtyBs(rcpt.multiply(uomF));
        row.setRcptQty(rcpt);
        row.setRcptQtyBs(rcpt.multiply(uomF));
       
        row.setTotRcptQtyBs(totQty.multiply(uomF));
        row.setRejQtyBs(rejQty.multiply(uomF));
        row.setRwkQtyBs(rwkQty.multiply(uomF));
        
        

        this.refreshAmt(rcpt);
    
        MmScRcptTrVORowImpl trRow=this.getMmScRcptTr1().first()!=null?(MmScRcptTrVORowImpl)this.getMmScRcptTr1().first():null;
        if(trRow!=null){
            this.applyTaxForItem(trRow.getTaxRuleId());
        }
        
        if(!rwkQty.equals(StaticValue.NUMBER_ZERO)){
            ((MmScRcptVORowImpl)this.getMmScRcpt1().getCurrentRow()).setRcptStg(381);
        }else{
            ((MmScRcptVORowImpl)this.getMmScRcpt1().getCurrentRow()).setRcptStg(379);
        }
    }

    public String validateBinQty(Number qty) {
        String result = "Y";
        Number rstAmt = new Number(0);
        Number lotQty = ((MmScRcptItmVORowImpl) this.getMmScRcptItm1().getCurrentRow()).getFinalRcptQty();
        MmScRcptBinVOImpl vo = this.getMmScRcptBin1();
        RowSetIterator iter = vo.createRowSetIterator(null);
        while (iter.hasNext()) {
            MmScRcptBinVORowImpl row = (MmScRcptBinVORowImpl) iter.next();
            if (row.equals(vo.getCurrentRow())) {

            } else {
                rstAmt = rstAmt.add(row.getBinQty());
            }
        }

        if (lotQty.compareTo(rstAmt.add(qty)) != -1) {
            result = "Y";
        } else {
            result = (lotQty.subtract(rstAmt)).toString();
        }
        return result;
    }

    public String validateSaveAndForward() {
        // Check All Lot entry for all Item

        String result = "Y";
        
        if(this.getMmScRcpt1().getCurrentRow().getAttribute("RcptSrcType").toString().equals("827"))
        {     
            MmScRcptSrcVOImpl vo=this.getMmScRcptSrc1();
            RowSetIterator iter=vo.createRowSetIterator(null);
         
            while(iter.hasNext()){
                MmScRcptSrcVORowImpl row = (MmScRcptSrcVORowImpl) iter.next();
                
                LovDelvQtyVOImpl qty=this.getLovDelvQty1();
                qty.setBindCldId(this.getCldId());
                qty.setBindSlocId(this.getSlocId());
                qty.setBindOrgId(this.getOrgId());
                qty.setBindDocId(row.getDocId());
                qty.executeQuery();
                
                RowQualifier rq=new RowQualifier(qty);
                rq.setWhereClause("ItmQty=BalQty");
                
                Row[] rw=qty.getFilteredRows(rq);
                
                if(rw.length>0){
                     //  Incorrect Process.  // Please create subcontracting issue for order
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2957"), ADFModelUtils.resolvRsrc("MSG.2959")+row.getScoNo() , FacesMessage.SEVERITY_ERROR);
                    result="N";
                    break;
                }   
                
            }
        }
        
        if(((MmScRcptVORowImpl)this.getMmScRcpt1().getCurrentRow()).getRcptStg().equals(new Integer(381))){
            // You have some reworkable quantity  //   you can not receive reworkable quantity from a service Provider. 
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2961"),ADFModelUtils.resolvRsrc("MSG.2962"), FacesMessage.SEVERITY_ERROR);
            result="N";
        }
        
        
            Boolean b=this.getSearializedDetail("S");
            System.out.println("Result is "+b);
            if(!b)
                result="N";
        
        
        return result;
    }

    public String validateLot() {
        String result = "Y";
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        Object o = paramMap.get("GLBL_ORG_BIN_CHK");
        if (o == null)
            o = "Y";

        String useBin = o.toString();
        ArrayList<String> list = new ArrayList<String>();
        ArrayList<String> srList = new ArrayList<String>();
        ArrayList<String> lotList = new ArrayList<String>();
        srList.clear();
        MmScRcptItmVOImpl vo = this.getMmScRcptItm2();
        MmScRcptItmVORowImpl row = null;
        Number qty = null;
        Number binQty = StaticValue.NUMBER_ZERO;
        Number varQty = null;
        String binId = null;
        String isSerial = "N";
        String itemId = null;
        String docSrc = null;
        Integer delNo=null;
        Row[] rw = null;
        Row[] rwSr = null;
        Row[] rwLot = null;
        RowSetIterator iter = vo.createRowSetIterator(null);
        MmScRcptBinVOImpl bin = null;
        MmScRcptBinVORowImpl binRow = null;
        MmScRcptSrnoVOImpl serial = null;

        RowQualifier rqLot = new RowQualifier(this.getMmScRcptLot2());
        RowQualifier rqBin = new RowQualifier(this.getMmScRcptBin2());
        RowQualifier rqSerial = new RowQualifier(this.getMmScRcptSr4());

        while (iter.hasNext()) {
            row = (MmScRcptItmVORowImpl) iter.next();

            itemId = row.getItmId();
            docSrc = row.getDocIdSrc();
            qty = row.getFinalRcptQty();
            isSerial = row.getSerial();
            delNo=row.getDlvSchdlNo();            
            
            rqLot.setWhereClause("ItmId ='"+itemId+"'");
            rwLot=this.getMmScRcptLot2().getFilteredRows(rqLot);
            
            if(rwLot.length==0){
                lotList.add(row.getItemName());
                continue;
            }
            
            binQty=StaticValue.NUMBER_ZERO;
            if (useBin.equalsIgnoreCase("Y")) {
                if (isSerial.equalsIgnoreCase("Y")) {
                    rqBin.setWhereClause("ItmId='" + itemId + "' AND DocIdSrc='" + docSrc + "' AND DlvSchdlNo='"+delNo+"'");
                    rw = this.getMmScRcptBin2().getFilteredRows(rqBin);
                    
                    if(rw.length==0){
                        
                    }
                    
                    for (Row r : rw) {
                        binRow = (MmScRcptBinVORowImpl) r;
                        binId = binRow.getBinId();

                        varQty = binRow.getBinQty();
                        binQty = binQty.add(varQty);
                      //  System.out.println("id is "+binRow.getItmId()+"  variable is  "+binQty+" Tottal is "+qty+" result is "+binQty.compareTo(qty));
                        

                        rqSerial.setWhereClause("ItmId='" + itemId + "' AND DocIdSrc='" + docSrc + "' AND BinId='" +
                                                binId + "' AND DlvSchdlNo='"+delNo+"'");
                        rwSr = this.getMmScRcptSr4().getFilteredRows(rqSerial);


                        if (varQty.compareTo(new Number(rwSr.length)) != 0)
                            srList.add(row.getItemName());

                    }
                    if (binQty.compareTo(qty) != 0) {
                        list.add(row.getItemName());
                    }


                } else {
                    rqBin.setWhereClause("ItmId='" + itemId + "' AND DocIdSrc='" + docSrc + "' AND DlvSchdlNo='"+delNo+"'");
                    rw = this.getMmScRcptBin2().getFilteredRows(rqBin);

                   
                    for (Row r : rw) {
                        binRow = (MmScRcptBinVORowImpl) r;

                        binQty = binQty.add(binRow.getBinQty());
                    }
                  //  System.out.println("id is "+binRow.getItmId()+"  variable is  "+binQty+" Tottal is "+qty+" result is "+binQty.compareTo(qty));
                    if (binQty.compareTo(qty) != 0) {
                        list.add(row.getItemName());
                    }
                }
            } else {
                rqSerial.setWhereClause("ItmId='" + itemId + "' AND DocIdSrc='" + docSrc + "' AND DlvSchdlNo='"+delNo+"'");
                rwSr = this.getMmScRcptSr4().getFilteredRows(rqSerial);
                System.out.println("Length is " + rwSr.length);
                varQty = qty;
                if (varQty.compareTo(new Number(rwSr.length)) != 0)
                    srList.add(row.getItemName());

            }
        }
        StringBuilder msg = new StringBuilder();
        if (lotList.size() > 0) {
            msg.append("<p>"+ADFModelUtils.resolvRsrc("MSG.2965")+"</p>");   // Lot Entry Missing for following Items
            msg.append("<ul>");

            java.util.Iterator listIter = lotList.iterator();

            while (listIter.hasNext()) {
                msg.append("<li>").append(new StringBuilder((String) listIter.next())).append("</li>");
            }
            msg.append("</ul>");
        }

        
        if (list.size() > 0) {
            msg.append("<p>"+ADFModelUtils.resolvRsrc("MSG.2966")+"</p>"); //Bin quantity mismatch for following Item
            msg.append("<ul>");

            java.util.Iterator listIter = list.iterator();

            while (listIter.hasNext()) {
                msg.append("<li>").append(new StringBuilder((String) listIter.next())).append("</li>");
            }
            msg.append("</ul>");
        }

        if (srList.size() > 0) {
            msg.append("<p>"+ADFModelUtils.resolvRsrc("MSG.2967")+"</p>");  //Serial quantity mismatch for following Item
            msg.append("<ul>");

            java.util.Iterator listIter = srList.iterator();

            while (listIter.hasNext()) {
                msg.append("<li>").append(new StringBuilder((String) listIter.next())).append("</li>");
            }
            msg.append("</ul>");
        }

        if (msg.toString().trim().length() > 0) {
            result = "N";
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2968"), msg.toString(),
                                                    FacesMessage.SEVERITY_ERROR); // Quantity mismatch for updating stock
        }
        return result;
    }


    public void updateLot() {
        MmScRcptItmVORowImpl curRow = ((MmScRcptItmVORowImpl) this.getMmScRcptItm1().getCurrentRow());

        ((MmScRcptLotVORowImpl) this.getMmScRcptLot1().getCurrentRow()).setLotQty(curRow.getFinalRcptQty());
        ((MmScRcptLotVORowImpl) this.getMmScRcptLot1().getCurrentRow()).setLotQtyBs(curRow.getFinalRcptQtyBs());
        ((MmScRcptLotVORowImpl) this.getMmScRcptLot1().getCurrentRow()).setRejQtySp(curRow.getRejQty());
        ((MmScRcptLotVORowImpl) this.getMmScRcptLot1().getCurrentRow()).setRejQtyBs(curRow.getRejQtyBs());
        ((MmScRcptLotVORowImpl) this.getMmScRcptLot1().getCurrentRow()).setRwkQtySp(curRow.getRwkQty());
        ((MmScRcptLotVORowImpl) this.getMmScRcptLot1().getCurrentRow()).setRwkQtyBs(curRow.getRwkQtyBs());
    }

    public void updateBin() {
        MmScRcptItmVORowImpl curRow = ((MmScRcptItmVORowImpl) this.getMmScRcptItm1().getCurrentRow());
        Number uomF = curRow.getUomConvFctr();

        Number qty = ((MmScRcptBinVORowImpl) this.getMmScRcptBin1().getCurrentRow()).getBinQty();

        ((MmScRcptBinVORowImpl) this.getMmScRcptBin1().getCurrentRow()).setBinQtyBs(qty.multiply(uomF));
        ((MmScRcptBinVORowImpl) this.getMmScRcptBin1().getCurrentRow()).setRejQtySp(new Number(0));
        ((MmScRcptBinVORowImpl) this.getMmScRcptBin1().getCurrentRow()).setRejQtyBs(new Number(0));
        ((MmScRcptBinVORowImpl) this.getMmScRcptBin1().getCurrentRow()).setRwkQtySp(new Number(0));
        ((MmScRcptBinVORowImpl) this.getMmScRcptBin1().getCurrentRow()).setRwkQtyBs(new Number(0));

    }


    public void backUpdateOrder() {
       
        String cldId = this.getCldId();
        Integer slocId = this.getSlocId();
        String hoOrgId = this.getHoOrgId();
        String orgId = this.getOrgId();
        String scoId = null;
        Integer delNo=null;
        String docId = this.getMmScRcpt1().getCurrentRow().getAttribute("DocId").toString();
        Integer type = (Integer) this.getMmScRcpt1().getCurrentRow().getAttribute("RcptSrcType");
        RowSetIterator iter = this.getMmScRcptSrc1().createRowSetIterator(null);
        MmScRcptSrcVORowImpl row = null;
        while (iter.hasNext()) {
            row = (MmScRcptSrcVORowImpl) iter.next();
            scoId = row.getDocIdSrc();
            delNo=row.getDlvSchdlNo();
            this.callFunction(Types.NUMERIC, "mm.fn_mm_src_to_sco_back_upd_stat(?,?,?,?,?,?,?,?,?)", new Object[] {
                              cldId, slocId, hoOrgId, orgId, scoId, type, docId, 36503,delNo
            });
        }

    }
    
    
    private void updateStock(){
        String cldId=this.getCldId();
        Integer slocId=this.getSlocId();
        String orgId=this.getOrgId();
        Integer userId=this.getUserId();
        
        MmScRcptVORowImpl row=(MmScRcptVORowImpl)this.getMmScRcpt1().getCurrentRow();
        
        String whId=row.getWhId();
        String docId=row.getDocId();
        Integer eoId=row.getEoIdSrc();
        Integer type=row.getRcptSrcType(); 
        String flag= "R";
        this.callFunction(Types.NUMERIC, "mm.fn_mm_sc_issu_rcpt_to_rqmt(?,?,?,?,?,?,?,?,?,?,?)",new Object[]{
                                                                                                                cldId,
                                                                                                                slocId,
                                                                                                                orgId,
                                                                                                                whId,
                                                                                                                docId,
                                                                                                                new Timestamp(System.currentTimeMillis()),
                                                                                                                flag,
                                                                                                                userId,
                                                                                                                 new Timestamp(System.currentTimeMillis()),
                                                                                                                eoId,
                                                                                                                type
                                                                                                            });
   
    
    }
    
    private void insertGl(Number cost){
        MmScRcptVORowImpl row = (MmScRcptVORowImpl) this.getMmScRcpt1().getCurrentRow();
        this.callFunction(Types.NUMERIC, "mm.fn_mm_ins_sc_rcpt_stk_to_gl(?,?,?,?,?,?,?,?)", 
                          new Object[]{this.getSlocId(),this.getCldId(),this.getHoOrgId(),this.getOrgId(),
                                       row.getDocId(),row.getDocDt(),row.getUsrIdCreate(),cost});
        
    
    }
    
    public void saveRls(){
        MmScRcptVORowImpl row=(MmScRcptVORowImpl)this.getMmScRcpt1().getCurrentRow();
        row.setRcptStg(383);
         this.getDBTransaction().postChanges();
         this.updateStock();
        if(row.getRcptSrcType().equals(new Integer(827)))
        {
            Number cost=this.updateLandCost();
            this.insertGl(cost);
          
            
        }
        this.getDBTransaction().postChanges();
//        Integer range=this.getMmScRcpt1().getRangeIndexOf(this.getMmScRcpt1().getCurrentRow());
//        Key key=this.getMmScRcpt1().getCurrentRow().getKey();
        
        
        this.getDBTransaction().commit();
        String docId=this.getMmScRcpt1().getCurrentRow().getAttribute("DocId").toString();
        
        
        
        this.getMmScRcpt1().setBindCldId(this.getCldId());
        this.getMmScRcpt1().setBindSlocId(this.getSlocId());
        this.getMmScRcpt1().setBindOrgId(this.getOrgId());
        this.getMmScRcpt1().setBindDocId(docId);
        this.getMmScRcpt1().executeQuery();
//        this.getMmScRcpt1().findAndSetCurrentRowByKey(key, range);
//        
//        String vouId= this.getMmScRcpt1().getCurrentRow().getAttribute("GlDispId")==null ? null:this.getMmScRcpt1().getCurrentRow().getAttribute("GlDispId").toString();
       
       String vouId=null;
       
       if(this.getMmScRcpt1().getRowCount()>0){
           vouId= this.getMmScRcpt1().first().getAttribute("GlDispId")==null ? null:this.getMmScRcpt1().first().getAttribute("GlDispId").toString();
       }
       
        if(vouId == null)
           return;
        String msg = ADFModelUtils.resolvRsrc("MSG.2977");   //   Voucher generated succefully
        String msg1 = ADFModelUtils.resolvRsrc("MSG.1773");       //   MSG.1773
        ADFModelUtils.showFormattedFacesMessage(msg,
                                                msg1+" : "+vouId,
                                                FacesMessage.SEVERITY_INFO
                                                );
    
    }

    /**
     * Container's getter for MmScRcptLot2.
     * @return MmScRcptLot2
     */
    public MmScRcptLotVOImpl getMmScRcptLot2() {
        return (MmScRcptLotVOImpl) findViewObject("MmScRcptLot2");
    }

    /**
     * Container's getter for RcptToLotVL1.
     * @return RcptToLotVL1
     */
    public ViewLinkImpl getRcptToLotVL1() {
        return (ViewLinkImpl) findViewLink("RcptToLotVL1");
    }
    
    
    public void deleteOrder(){
        RowSetIterator iter=null;
        Row r=null;
        // delete Other charges Row
        
        iter=this.getMmScRcptOc1().createRowSetIterator(null);
        while(iter.hasNext()){
            r=iter.next();
            r.remove();    
        }
        
        // delete Tax Lines
        
        this.resetTaxAll();
        
        iter=this.getMmScRcptItm1().createRowSetIterator(null);
            while(iter.hasNext()){
                r=iter.next();
                this.deleteCostCenterItem(r.getAttribute("ItmId").toString());
                r.remove();    
                
            }
        this.getMmScRcptSrc1().getCurrentRow().remove();
        
    }


    /**
     * Container's getter for MmScRcptSr4.
     * @return MmScRcptSr4
     */
    public MmScRcptSrVOImpl getMmScRcptSr4() {
        return (MmScRcptSrVOImpl) findViewObject("MmScRcptSr4");
    }

    /**
     * Container's getter for RcptToSerialVL1.
     * @return RcptToSerialVL1
     */
    public ViewLinkImpl getRcptToSerialVL1() {
        return (ViewLinkImpl) findViewLink("RcptToSerialVL1");
    }
    
    
    public void insertRcptIssue(){
         MmScRcptVORowImpl row = (MmScRcptVORowImpl) this.getMmScRcpt1().getCurrentRow();
         String docId=row.getDocId();
         Timestamp docDt=row.getDocDt();
         Timestamp usrDt=new Timestamp(System.currentTimeMillis());
         String whId=row.getWhId();
         Integer fyId=row.getFyId();
         Integer eoId=row.getEoIdSrc();
         
         this.callFunction(Types.VARCHAR, "mm.fn_mm_sc_issu_frm_rcpt(?,?,?,?,?,?,?,?,?,?,?)", 
                           new Object[]{this.getSlocId(),this.getCldId(),this.getHoOrgId(),this.getOrgId(),docId,docDt,this.getUserId(),usrDt,whId,fyId,eoId});
        
    }
    
    public Number updateLandCost(){
       MmScRcptVORowImpl row = (MmScRcptVORowImpl) this.getMmScRcpt1().getCurrentRow();
        Number totLandCost=StaticValue.NUMBER_ZERO;
        Number landCost=StaticValue.NUMBER_ZERO;
        
        RowSetIterator iter=this.getMmScRcptItm2().createRowSetIterator(null);
        MmScRcptItmVORowImpl item = null;
        
       while(iter.hasNext()){ 
           item=(MmScRcptItmVORowImpl)iter.next();
           if(row.getRcptSrcType().equals(new Integer(826))){
               
             landCost= item.getLndPrice();
           }else{
                
                BigDecimal cost=(BigDecimal)this.callFunction(Types.NUMERIC, "mm.fn_mm_calc_sc_rcpt_lndng_cost(?,?,?,?,?,?,?,?,?,?)", 
                                                  new Object[]{this.getSlocId(),this.getCldId(),this.getHoOrgId(),this.getOrgId(),row.getDocId(),item.getDocIdSrc(),item.getItmId(),item.getItmUom(),item.getWhId(),item.getDlvSchdlNo()});
                
                try {
                   landCost = new Number(cost.toString());
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                
                item.setLndPrice(landCost);
                item.setLndPriceBs(landCost.multiply(row.getCurrConvFctr()));
           }  
           totLandCost=totLandCost.add(landCost);
       }
        return totLandCost;
    }

    /**
     * Container's getter for MmScRcptIssuItm1.
     * @return MmScRcptIssuItm1
     */
    public ViewObjectImpl getMmScRcptIssuItm1() {
        return (ViewObjectImpl) findViewObject("MmScRcptIssuItm1");
    }

    /**
     * Container's getter for ItemToRcptIssuVL1.
     * @return ItemToRcptIssuVL1
     */
    public ViewLinkImpl getItemToRcptIssuVL1() {
        return (ViewLinkImpl) findViewLink("ItemToRcptIssuVL1");
    }
    
    
    /**
     * 
     * Deault Tax Policy
     * 
     * */
    
    public void applyDefaultTax(String flag) {
        MmScRcptVORowImpl row = (MmScRcptVORowImpl) this.getMmScRcpt1().getCurrentRow();
        if(row.getTaxFormTypId()==null||row.getTaxFormTypId().toString().trim().length()==0)
            return;
        
        if(flag.equalsIgnoreCase("A")){ 
           
            if(((MmScRcptSrcVORowImpl) this.getMmScRcptSrc1().getCurrentRow()).getTaxRuleID()>0)
                return;
            
            Object o = this.callFunction(Types.NUMERIC, "APP.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                     row.getCldId(), row.getSlocId(), null, row.getOrgId(),
                                     this.getHoOrgId(), 0, row.getEoIdSrc(), 36503, row.getTaxFormTypId()});
            
            if(o==null)
                return;
            
            Integer taxRuleId=((BigDecimal)o).intValue();
            
            if(taxRuleId==-1)
                return;
            
            String scoId=((MmScRcptSrcVORowImpl) this.getMmScRcptSrc1().getCurrentRow()).getDocIdSrc();
            ((MmScRcptSrcVORowImpl) this.getMmScRcptSrc1().getCurrentRow()).setTaxRuleID(taxRuleId);
            this.applyTaxForAllItem(taxRuleId, scoId);
        
        }else{
            
            if(this.getMmScRcptTr1().getRowCount()>0)
                return;
            
            
            MmScRcptItmVORowImpl itm = (MmScRcptItmVORowImpl) this.getMmScRcptItm1().getCurrentRow();
            Object o = this.callFunction(Types.NUMERIC, "APP.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                     row.getCldId(), row.getSlocId(), null, row.getOrgId(),
                                     this.getHoOrgId(), itm.getItmId(), row.getEoIdSrc(), 36504, row.getTaxFormTypId()});
            
            if(o==null)
                return;
            

            
            Integer taxRuleId=((BigDecimal)o).intValue();
            
            if(taxRuleId==-1)
                return;
            
            
            this.applyTaxForItem(taxRuleId);
            
        }
    
    }

    /**
     * Container's getter for AppCcDocVO1.
     * @return AppCcDocVO1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVwVO1.
     * @return AppCcVwVO1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }
    
    public AppCostCenterServiceAMImpl getAppAM() {
           String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
           String appModuleConfig = "AppCostCenterServiceAMLocal";
           return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
       }


       public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
           Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
       }

       @Override
       protected void finalize() throws Throwable {

           releaseAppAM(getAppAM());

           super.finalize();
       }
       

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 36503);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }


















   

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
        * @param cldId
        * @param slocId
        * @param hoOrgId
        * @param orgId
        * @param tempId
        * @param tempSrc
        * @param docId
        * @param usrId
        * @param tempCcId
        * @param amount
        * @param pCcLevel1
        * @param pCcLevel2
        * @param pCcLevel3
        * @param pCcLevel4
        * @param pCcLevel5
        */
            MmScRcptVOImpl impl = this.getMmScRcpt1();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();

                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "H", 36503,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                           new Number(0), (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

            }
        }
    }


    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 36503);

        Row currentRow = this.getMmScRcptItm1().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getMmScRcptItm1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                            System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                            System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                               attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                            */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is" + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }
    
    
    /** ---------- To create HexDocId Id -------------**/

       public String getHexDocNoFromFun() {

           String hexDocIdFromFun = "0";
           try {
               hexDocIdFromFun = this.callFunction(Types.VARCHAR, "APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)", new Object[] {
                                                         this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                         this.getUserId(), 365003, 84901,0
               }).toString();

           } catch (Exception e) {
               e.printStackTrace();
               System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at BdgEoBudgetEoImpl :" + e.getMessage());
           }
           System.out.println("===========" + hexDocIdFromFun);

           return hexDocIdFromFun;
       }   
    
    
    
    public void deleteCostCenterItem(String itmId) {
            if (chkCcApplicableOrNot()) {
                System.out.println("Inside delete method");

                MmScRcptItmVOImpl impl = this.getMmScRcptItm1();
                Row currentRow = (impl.getFilteredRows("ItmId", itmId))[0];
                if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                    AppCostCenterServiceAMImpl amCC = getAppAM();
                    System.out.println("Inside Am after cresting object");
                    if (amCC != null) {
                        System.out.println("------------------ Not null");
                           amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                   currentRow.getAttribute("DocId").toString(), "L", 26004,
                                                   EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                                   (Number) currentRow.getAttribute("TaxableAmtSp"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                                   (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                       
                       }
                }
                System.out.println("After calling delete method");
            }
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            MmScRcptItmVOImpl impl = this.getMmScRcptItm1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("TaxableAmtSp") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", 365003,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("TaxableAmtSp"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2964"),
                                                                ADFModelUtils.resolvRsrc("MSG.1979"),
                                                                FacesMessage.SEVERITY_ERROR);
                        ///    Update Cost Center    //    Please Update Cost Center Values.
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    public void sendDateFromTempCcToRcptCc() {
        if (chkCcApplicableOrNot()) {
            
            try {
                
                   
               
                    this.callFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 36504, "MM",
                                       "MM$SC$RCPT$COST$CENTER",this.getMmScRcpt1().getCurrentRow().getAttribute("DocId") 
                    });
                
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    /**
     * Container's getter for MmScRcptSrno1.
     * @return MmScRcptSrno1
     */
    public MmScRcptSrnoVOImpl getMmScRcptSrno1() {
        return (MmScRcptSrnoVOImpl) findViewObject("MmScRcptSrno1");
    }

    /**
     * Container's getter for FkMmScRcptSrnoVL1.
     * @return FkMmScRcptSrnoVL1
     */
    public ViewLinkImpl getFkMmScRcptSrnoVL1() {
        return (ViewLinkImpl) findViewLink("FkMmScRcptSrnoVL1");
    }
    
    
    public void insertInItmSrNo(){
         String srNo=((MmScRcptItmVORowImpl)this.getMmScRcptItm1().getCurrentRow()).getSerialNumberNo();
         String accpt= ((MmScRcptItmVORowImpl)this.getMmScRcptItm1().getCurrentRow()).getTransItemAccept();
         
         if(srNo==null){
                    //          Please insert serial numberPlease insert serial number  //  You can not add a blank serial number to an item.
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,ADFModelUtils.resolvRsrc("MSG.2970"),ADFModelUtils.resolvRsrc("MSG.2971")));   
            return;
         }
         
         MmScRcptSrnoVOImpl vo=this.getMmScRcptSrno1();
         Row[] rr=vo.getFilteredRows("SrNo", srNo);
         
         if(rr.length>0){
                ///   This number has been already asigned.    ///   You can not add  same serial number twice.
             FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,ADFModelUtils.resolvRsrc("MSG.2972"),ADFModelUtils.resolvRsrc("MSG.2973")));   
            return;
         }
         
        MmScRcptSrnoVORowImpl row = (MmScRcptSrnoVORowImpl) this.getMmScRcptSrno1().createRow();
        row.setSrNo(srNo);
        row.setQcDone("N");
        row.setQcRslt("N");
        row.setStoreRslt(accpt=="Y"?"A":"R");
        vo.insertRow(row);
        
    
    }
    
    
    public Boolean getSearializedDetail(String par){
        this.getMmScRcptItm2().executeQuery();
       // System.out.println("Row are "+this.getMmScRcptItm2().getRowCount());
        if(this.getMmScRcptItm2()==null||this.getMmScRcptItm2().getRowCount()==0)
            return false;
        Row[] rw=this.getMmScRcptItm2().getFilteredRows("Serial", "Y");
        System.out.println("Row are "+rw.length);
        if(rw.length>0){
            this.isSerial=true;
        }else{
            this.isSerial=false;
        }
        
        if(!this.isSerial)
            return isSerial;
        
        if(par.equals("V"))
            return true;
        
        
        MmScRcptSrnoVOImpl vo=this.getMmScRcptSrno2();
        vo.executeQuery();
        //System.out.println("Row Count is "+vo.getRowCount());
        RowQualifier rq=new RowQualifier(vo);
        ArrayList<MessageDetail> al=new ArrayList<MessageDetail>();
        al.clear();
        String wh="CldId='"+this.getCldId()+"' AND SlocId='"+this.getSlocId() +"' AND OrgId='"+this.getOrgId()+"' AND DocId='"+this.getMmScRcpt1().getCurrentRow().getAttribute("DocId")+"'";
        
        String clause=null;
        
        for(Row r : rw ){
            MmScRcptItmVORowImpl row=(MmScRcptItmVORowImpl)r;
          //  System.out.println("Where clause is "+wh);
          
            clause=wh+" AND "+"ItmId = '"+row.getItmId()+"' AND DocIdSrc='"+row.getDocIdSrc()+"' AND DlvSchdlNo='"+row.getDlvSchdlNo()+"' AND StoreRslt='A'";
            
            //System.out.println("Where clause is "+clause);
            
            rq.setWhereClause(clause);
            Row[] sr=vo.getFilteredRows(rq);
            
            System.out.println("lenth is "+sr.length);
            
            if(!row.getFinalRcptQty().equals(new Number(sr.length))){
                System.out.println("in if condition");
                MessageDetail m=new MessageDetail();
                m.itemName=row.getItemName();
                m.docName=row.getDocIdSrc();
                m.delNo=row.getDlvSchdlNo();
                m.req=row.getFinalRcptQty().toString();
                m.asgn=(new Integer(sr.length)).toString();
                
                al.add(m);
                
                continue;
                
            }
           
          
            
            clause=wh+" AND "+"ItmId = '"+row.getItmId()+"' AND DocIdSrc='"+row.getDocIdSrc()+"' AND DlvSchdlNo='"+row.getDlvSchdlNo()+"' AND StoreRslt='R'";
            
           
            
            rq.setWhereClause(clause);
           
              sr=vo.getFilteredRows(rq);
              
              System.out.println("length is "+sr.length);  
  
                if(!(row.getRejQty().equals(new Number(sr.length)))){
                    MessageDetail m=new MessageDetail();
                    m.itemName=row.getItemName();
                    m.docName=row.getDocIdSrc();
                    m.delNo=row.getDlvSchdlNo();
                    m.req=row.getFinalRcptQty().toString();
                    m.asgn=(new Integer(sr.length)).toString();
                    
                    al.add(m);
                    
             }
            
            
        }
        
        if(al.size()==0){
            return true;
        }
        
        StringBuilder msg=new StringBuilder();
    //    msg.append("<p>Item Name \\t"+" Required Qty \\t"+" Toal Serial Numbers</p>");
        msg.append("<p>Item Name </p>");
        msg.append("<ul>");
        msg.append("<li>");
        
        Iterator iter=al.iterator();
        while(iter.hasNext()){
            MessageDetail dtl=(MessageDetail)iter.next();
            msg.append(dtl.itemName);
        }
        
        msg.append("</li>");
        msg.append("</ul>");
        
       ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2974"), msg.toString(),FacesMessage.SEVERITY_ERROR );
        
        return false;
    }
}

