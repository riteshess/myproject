package faregisterapp.model.entities;

import adf.utils.ebiz.EbizParams;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 17 19:21:42 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmFaItmSrcEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocTypeSrc,
        DocIdSrc,
        DocDtSrc,
        CreateId,
        CreateDt,
        ModifyId,
        ModifyDt,
        MmFaItm;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCTYPESRC = AttributesEnum.DocTypeSrc.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int DOCDTSRC = AttributesEnum.DocDtSrc.index();
    public static final int CREATEID = AttributesEnum.CreateId.index();
    public static final int CREATEDT = AttributesEnum.CreateDt.index();
    public static final int MODIFYID = AttributesEnum.ModifyId.index();
    public static final int MODIFYDT = AttributesEnum.ModifyDt.index();
    public static final int MMFAITM = AttributesEnum.MmFaItm.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmFaItmSrcEOImpl() {
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocTypeSrc, using the alias name DocTypeSrc.
     * @return the value of DocTypeSrc
     */
    public Integer getDocTypeSrc() {
        return (Integer) getAttributeInternal(DOCTYPESRC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocTypeSrc.
     * @param value value to set the DocTypeSrc
     */
    public void setDocTypeSrc(Integer value) {
        setAttributeInternal(DOCTYPESRC, value);
    }

    /**
     * Gets the attribute value for DocIdSrc, using the alias name DocIdSrc.
     * @return the value of DocIdSrc
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocIdSrc.
     * @param value value to set the DocIdSrc
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for DocDtSrc, using the alias name DocDtSrc.
     * @return the value of DocDtSrc
     */
    public Timestamp getDocDtSrc() {
        return (Timestamp) getAttributeInternal(DOCDTSRC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDtSrc.
     * @param value value to set the DocDtSrc
     */
    public void setDocDtSrc(Timestamp value) {
        setAttributeInternal(DOCDTSRC, value);
    }

    /**
     * Gets the attribute value for CreateId, using the alias name CreateId.
     * @return the value of CreateId
     */
    public Integer getCreateId() {
        return (Integer) getAttributeInternal(CREATEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreateId.
     * @param value value to set the CreateId
     */
    public void setCreateId(Integer value) {
        setAttributeInternal(CREATEID, value);
    }

    /**
     * Gets the attribute value for CreateDt, using the alias name CreateDt.
     * @return the value of CreateDt
     */
    public Timestamp getCreateDt() {
        return (Timestamp) getAttributeInternal(CREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for CreateDt.
     * @param value value to set the CreateDt
     */
    public void setCreateDt(Timestamp value) {
        setAttributeInternal(CREATEDT, value);
    }

    /**
     * Gets the attribute value for ModifyId, using the alias name ModifyId.
     * @return the value of ModifyId
     */
    public Integer getModifyId() {
        return (Integer) getAttributeInternal(MODIFYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifyId.
     * @param value value to set the ModifyId
     */
    public void setModifyId(Integer value) {
        setAttributeInternal(MODIFYID, value);
    }

    /**
     * Gets the attribute value for ModifyDt, using the alias name ModifyDt.
     * @return the value of ModifyDt
     */
    public Timestamp getModifyDt() {
        return (Timestamp) getAttributeInternal(MODIFYDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ModifyDt.
     * @param value value to set the ModifyDt
     */
    public void setModifyDt(Timestamp value) {
        setAttributeInternal(MODIFYDT, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMmFaItm() {
        return (RowIterator) getAttributeInternal(MMFAITM);
    }

    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param orgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String orgId, String docId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, orgId, docId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("faregisterapp.model.entities.MmFaItmSrcEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    public String getTxnId() {
        System.out.println("before calling function");
        Object txn_id = callStoredFunction(Types.VARCHAR, "app.get_txn_id(?,?,?,?,?,?)", new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), 20001, 0
        });
        System.out.println("after calli g function");
        if (txn_id != null)
            return txn_id.toString();
        return "-1";
    }

    protected void create(AttributeList attributeList) {
        System.out.println("in create");
        setCldId(EbizParams.GLBL_APP_CLD_ID());
        setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        setHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        setOrgId(EbizParams.GLBL_APP_USR_ORG());
        setDocId(getTxnId());
        System.out.println("after generating txn id");
        setCreateId(EbizParams.GLBL_APP_USR());
        setCreateDt(new Timestamp(System.currentTimeMillis()));
        super.create(attributeList);
        System.out.println("after calling create method");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            return 73;
            //int end = e.getMessage().indexOf("\n");
            //throw new JboException(e.getMessage().substring(11, end));
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            setModifyId(EbizParams.GLBL_APP_USR());
            setModifyDt(new Timestamp(System.currentTimeMillis()));
        }
        super.doDML(operation, e);
    }
}

