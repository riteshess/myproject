package faregisterapp.model.module;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;
import adf.utils.model.dbprocsupp.ProcPrams;

import appexcelimpexpapp.model.util.UpdatedData;

import faregisterapp.model.module.common.FARegisterAM;
import faregisterapp.model.views.LovCoaVOImpl;
import faregisterapp.model.views.MmFaItmSrcVOImpl;
import faregisterapp.model.views.MmFaItmVOImpl;

import java.sql.SQLException;
import java.sql.Types;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 17 18:32:35 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FARegisterAMImpl extends ApplicationModuleImpl implements FARegisterAM {
    /**
     * This is the default constructor (do not remove).
     */
    public FARegisterAMImpl() {
    }

    /**
     * Container's getter for MmFaItmSrc1.
     * @return MmFaItmSrc1
     */
    public MmFaItmSrcVOImpl getMmFaItmSrc1() {
        return (MmFaItmSrcVOImpl) findViewObject("MmFaItmSrc1");
    }

    /**
     * Container's getter for MmFaItmChild.
     * @return MmFaItmChild
     */
    public MmFaItmVOImpl getMmFaItmChild() {
        return (MmFaItmVOImpl) findViewObject("MmFaItmChild");
    }

    /**
     * Container's getter for FAItmSrcToFAItmVL1.
     * @return FAItmSrcToFAItmVL1
     */
    public ViewLinkImpl getFAItmSrcToFAItmVL1() {
        return (ViewLinkImpl) findViewLink("FAItmSrcToFAItmVL1");
    }

    public String loadInvoiceDetails() {
        ViewObjectImpl src = getMmFaItmSrc1();
        System.out.println("before ADFModelUtils.resolvEl(\"#{pageFlowScope.PARAM_DOC_ID}\") = " +
                           ADFModelUtils.resolvEl("#{pageFlowScope.PARAM_DOC_ID}"));

        if (ADFModelUtils.resolvEl("#{pageFlowScope.PARAM_DOC_ID}") == null) {
            System.out.println("in ADFModelUtils.resolvEl(\"#{pageFlowScope.PARAM_DOC_ID}\") = " +
                               ADFModelUtils.resolvEl("#{pageFlowScope.PARAM_DOC_ID}"));
            RequestContext.getCurrentInstance().getPageFlowScope().put("PARAM_DOC_ID",
                                                                       src.getCurrentRow().getAttribute("DocId"));
        }
        System.out.println("after ADFModelUtils.resolvEl(\"#{pageFlowScope.PARAM_DOC_ID}\") = " +
                           ADFModelUtils.resolvEl("#{pageFlowScope.PARAM_DOC_ID}"));
        Row currentRow = src.getCurrentRow();
        if (currentRow != null) {
            Object suppId = currentRow.getAttribute("SupplierIdTrans");
            System.out.println("suppId = " + suppId);
            ViewObjectImpl child = getMmFaItmChild();
            Row row = child.getCurrentRow();
            row.setAttribute("ItmSupplierId", suppId);
        }
        return null;
    }

    /**
     * Container's getter for LovCoa1.
     * @return LovCoa1
     */
    public LovCoaVOImpl getLovCoa1() {
        return (LovCoaVOImpl) findViewObject("LovCoa1");
    }

    /**
     * Container's getter for LovInvoice1.
     * @return LovInvoice1
     */
    public ViewObjectImpl getLovInvoice1() {
        return (ViewObjectImpl) findViewObject("LovInvoice1");
    }

    /**
     * Container's getter for MmFaItmLn1.
     * @return MmFaItmLn1
     */
    public ViewObjectImpl getMmFaItmLn1() {
        return (ViewObjectImpl) findViewObject("MmFaItmLn1");
    }

    /**
     * Container's getter for FAItmToFAItmLnVL1.
     * @return FAItmToFAItmLnVL1
     */
    public ViewLinkImpl getFAItmToFAItmLnVL1() {
        return (ViewLinkImpl) findViewLink("FAItmToFAItmLnVL1");
    }

    public String loadItemDetails() {
        MmFaItmSrcVOImpl src = getMmFaItmSrc1();
        Row currentRow = src.getCurrentRow();

        if (currentRow != null) {
            getDBTransaction().postChanges();
            Object callFunction =
                ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                           new StringBuilder("mm.fn_fa_asset_register(?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), null,
                                           currentRow.getAttribute("DocId"), currentRow.getAttribute("DocIdSrc"),
                                           currentRow.getAttribute("DocTypeSrc"), EbizParams.GLBL_APP_USR(),
                                           Integer.parseInt(ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_PRF_ID}").toString())
            }, Types.VARCHAR);
            System.out.println("callFunction = " + callFunction);
            getMmFaItmLn1().executeQuery();
        }
        return null;
    }

    /**
     * Container's getter for LovGrp1.
     * @return LovGrp1
     */
    public ViewObjectImpl getLovGrp1() {
        return (ViewObjectImpl) findViewObject("LovGrp1");
    }

    /**
     * Container's getter for lovItemDesc1.
     * @return lovItemDesc1
     */
    public ViewObjectImpl getlovItemDesc1() {
        return (ViewObjectImpl) findViewObject("lovItemDesc1");
    }

    public String allowDate(String input_date) {
        ProcPrams params[] = new ProcPrams[] {
            new ProcPrams(1, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_APP_CLD_ID()),
            new ProcPrams(2, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_SERV_LOC()),
            new ProcPrams(3, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_HO_ORG_ID()),
            new ProcPrams(4, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_APP_USR_ORG()),
            new ProcPrams(5, Types.DATE, ProcPrams.IN, null), new ProcPrams(6, Types.DATE, ProcPrams.OUT, null),
            new ProcPrams(7, Types.VARCHAR, ProcPrams.OUT, null)
        };
        ArrayList al = new ArrayList();
        try {

            al =
                ADFModelUtils.callDbProcedure(this.getRootApplicationModule(),
                                              new StringBuilder("mm.proc_get_fa_fy_dt_op(?,?,?,?,?,?,?)"), params);
        } catch (SQLException e) {
            System.out.println("error" + e);
        }
        Iterator iterator = al.iterator();
        while (iterator.hasNext()) {
            Object next = iterator.next();
            if (next != null) {
                return new String(next.toString() + " 00:00:00.0");
            }
        }

        return null;
    }

    public Object getSequenceId(Row currentRow) {
        return ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                          new StringBuilder("mm.fn_get_mm_fa_item_seq_id(?,?,?,?,?,?,?,?)"), new Object[] {
                                          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                          EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                          currentRow.getAttribute("DocId"), currentRow.getAttribute("ItmGrp"),
                                          currentRow.getAttribute("ItmId"), currentRow.getAttribute("ItmLblId")
    }, Types.NUMERIC);
    }

    public String updateItemLine() {
        ViewObjectImpl ln = getMmFaItmLn1();
        Row currentRow = ln.getCurrentRow();

        MmFaItmSrcVOImpl src = getMmFaItmSrc1();
        Row currentRow1 = src.getCurrentRow();
        Object DocTypeSrc = currentRow1.getAttribute("DocTypeSrc");
        //        RowSetIterator rsi = ln.createRowSetIterator(null);
        //        while (rsi.hasNext()) {
        //            Row currentRow = rsi.next();
        //            System.out.println("currentRow.getAttribute(\"ItmLblId\") = " + currentRow.getAttribute("ItmLblId"));
        //
        //        }
        //        rsi.closeRowSetIterator();


        if (currentRow.getAttribute("ItmLblId") != null) {
            System.out.println("DocTypeSrc = " + DocTypeSrc);
            currentRow.setAttribute("ItmSrNo", currentRow.getAttribute("ItmLblId"));
            System.out.println("currentRow.getAttribute(\"ItmSeqId\") = " + currentRow.getAttribute("ItmSeqId"));
            if (currentRow.getAttribute("ItmSeqId") == null) {
                Object seqId = getSequenceId(currentRow);

                if (seqId != null) {
                    currentRow.setAttribute("ItmSeqId", seqId);
                }

            }
            Object ItmLineStatus = currentRow.getAttribute("ItmLineStatus");
            if (ItmLineStatus != null) {
                if (!DocTypeSrc.equals(18521) && !ItmLineStatus.toString().equalsIgnoreCase("A")) {
                    String allowDate = allowDate(null);
                    Object TransTotalCost = currentRow.getAttribute("TransTotalCost");
                    if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("IT")) {
                        System.out.println("before setting date" + allowDate);
                        currentRow.setAttribute("DepEffStrtDtCo", allowDate);
                        if (TransTotalCost != null) {
                            currentRow.setAttribute("ItmTotCostCo", TransTotalCost);
                        }
                    }
                    if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("CO")) {
                        currentRow.setAttribute("DepEffStrtDtIt", allowDate);
                        if (TransTotalCost != null) {
                            currentRow.setAttribute("ItmTotCostIt", TransTotalCost);
                        }
                    }
                } else if (DocTypeSrc.equals(18521) && !ItmLineStatus.toString().equalsIgnoreCase("A")) {
                    Object TransStartDate = currentRow.getAttribute("TransStartDate");
                    if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("IT")) {
                        if (TransStartDate != null) {
                            currentRow.setAttribute("DepEffStrtDtCo", TransStartDate);
                        }
                    }
                    if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("CO")) {
                        if (TransStartDate != null) {
                            currentRow.setAttribute("DepEffStrtDtIt", TransStartDate);
                        }
                    }
                } else if (ItmLineStatus.toString().equalsIgnoreCase("A")) {
                    Object TransStartDate = currentRow.getAttribute("TransStartDate");
                    Object TransTotalCost = currentRow.getAttribute("TransTotalCost");
                    if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("IT")) {
                        if (TransStartDate != null) {
                            currentRow.setAttribute("DepEffStrtDtCo", TransStartDate);
                        }
                    }
                    if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("CO")) {
                        if (TransStartDate != null) {
                            currentRow.setAttribute("DepEffStrtDtIt", TransStartDate);
                        }
                    }
                    if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("IT")) {
                        if (TransTotalCost != null) {
                            currentRow.setAttribute("ItmTotCostCo", TransTotalCost);
                        }
                    }
                    if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("CO")) {
                        if (TransTotalCost != null) {
                            currentRow.setAttribute("ItmTotCostIt", TransTotalCost);
                        }
                    }

                }
            }

        }
        getDBTransaction().postChanges();
        return null;
    }

    public String editAllow() {
        ViewObjectImpl ln = getMmFaItmLn1();
        Row currentRow = ln.getCurrentRow();
        Object callFunction = null;
        if (currentRow != null) {
            try {
                callFunction =
                    ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                               new StringBuilder("mm.FN_FA_CHK_ITM_EDIT_ALLOW(?,?,?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               currentRow.getAttribute("ItmGrp"), currentRow.getAttribute("ItmId"),
                                               currentRow.getAttribute("ItmSeqId"), currentRow.getAttribute("ItmLblId")
                }, Types.VARCHAR);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            System.out.println("callFunction = " + callFunction);
            if (callFunction != null) {
                if (callFunction.toString().equalsIgnoreCase("N")) {
                    if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("IT")) {
                        currentRow.setAttribute("TransTotalCost", currentRow.getAttribute("ItmTotCostCo"));
                        currentRow.setAttribute("TransStartDate", currentRow.getAttribute("DepEffStrtDtCo"));
                    } else if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("CO")) {
                        currentRow.setAttribute("TransTotalCost", currentRow.getAttribute("ItmTotCostIt"));
                        currentRow.setAttribute("TransStartDate", currentRow.getAttribute("DepEffStrtDtIt"));
                    } else {
                        currentRow.setAttribute("TransTotalCost", currentRow.getAttribute("ItmTotCostCo"));
                        currentRow.setAttribute("TransStartDate", currentRow.getAttribute("DepEffStrtDtCo"));

                    }
                }
                return callFunction.toString();
            }
        }
        return null;
    }

    public String filterVoOnPageLoad() {
        System.out.println("ADFModelUtils.resolvEl(\"#{pageFlowScope.PARAM_DOC_ID}\") = " +
                           ADFModelUtils.resolvEl("#{pageFlowScope.PARAM_DOC_ID}"));
        MmFaItmSrcVOImpl src = getMmFaItmSrc1();
        src.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        src.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        src.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        src.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        src.setNamedWhereClauseParam("BindDocId", ADFModelUtils.resolvEl("#{pageFlowScope.PARAM_DOC_ID}"));
        src.executeQuery();

        System.out.println("after executing vo");
        return null;
    }

    public String moveItemToOrg() {
        ViewObjectImpl ln = getMmFaItmLn1();
        Row currentRow = ln.getCurrentRow();

        if (currentRow != null) {
            Object callFunction = null;
            if (currentRow.getAttribute("TransOrgTrgtId") != null) {
                MmFaItmSrcVOImpl src = getMmFaItmSrc1();
                Row row = src.getCurrentRow();
                callFunction =
                    ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                               new StringBuilder("mm.FN_FA_ITM_TRANSFER(?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                               currentRow.getAttribute("DocId"), row.getAttribute("DocTypeSrc"),
                                               EbizParams.GLBL_HO_ORG_ID(), currentRow.getAttribute("TransOrgTrgtId"),
                                               currentRow.getAttribute("ItmGrp"), currentRow.getAttribute("ItmId"),
                                               currentRow.getAttribute("ItmLblId"), currentRow.getAttribute("ItmSeqId"),
                                               EbizParams.GLBL_APP_USR(), currentRow.getAttribute("TransTrnsfrDate")
                }, Types.VARCHAR);
            } else
                return "Target Organisation is mandatory!";
            System.out.println("callFunction = " + callFunction);
            if (callFunction != null) {
                return callFunction.toString();
            }
        }
        return null;
    }


    public String validateLabelId(String label) {
        ViewObjectImpl ln = getMmFaItmLn1();
        Row currentRow = ln.getCurrentRow();
        if (!currentRow.getAttribute("ItmLineStatus").equals("A")) {
            RowSetIterator rsi = ln.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                if (next != currentRow) {
                    if (next.getAttribute("ItmLblId") != null) {
                        if (next.getAttribute("ItmLblId").toString().equalsIgnoreCase(label)) {
                            return "Duplicate Label Id exists";
                        }
                    }
                }

            }
        }
        return "Y";
    }


    public String importData() {
        System.out.println("in import");
        Object insertedData = ADFModelUtils.resolvEl("#{pageFlowScope.INSERTED_ROWS}");
        System.out.println("Inserted Data____" + insertedData);
        Object updatedData = ADFModelUtils.resolvEl("#{pageFlowScope.UPDATED_ROWS}");

        System.out.println("Updated Data____" + updatedData);
        ViewObjectImpl ln = this.getMmFaItmLn1();


        if (insertedData != null) {
            List data = (List) insertedData;
            System.out.println("size of inserted rows" + data.size());
            ListIterator iterator = data.listIterator();
            System.out.println("all row in range before insertr = " + ln.getAllRowsInRange().length);
            while (iterator.hasNext()) {
                Object next = iterator.next();

                if (next != null) {
                    List row = (List) next;
                    String dupliLabelId = "N";
                    if (row.get(6) != null && row.get(7) != null && row.get(8) != null) {
                        dupliLabelId = dupliLabelId((String) row.get(6), (String) row.get(7), (String) row.get(8), "A");
                    }


                    if (dupliLabelId.equalsIgnoreCase("Y")) {
                        System.out.println("before inserting row");
                        Row createRow = ln.createRow();
                        createRow.setAttribute("AppliInstId", 1); // row.get(4)
                        createRow.setAttribute("ItmGrp", row.get(6));
                        createRow.setAttribute("ItmId", row.get(7));
                        createRow.setAttribute("ItmLblId", row.get(8));
                        createRow.setAttribute("ItmSrNo", row.get(8)); //row.get(14)

                        createRow.setAttribute("ItmSeqId", row.get(9));

                        createRow.setAttribute("ItmQty", 1); //row.get(10)
                        createRow.setAttribute("ItmSrlzFlg", "Y"); //row.get(11)
                        createRow.setAttribute("ItmLotId", null); //row.get(12)
                        createRow.setAttribute("ItmBinId", null); // row.get(13)
                        if (row.get(15) != null) {
                            // float d = Math.round(((Double)row.get(15)).floatValue());

                            createRow.setAttribute("ItmTotCostIt", row.get(15));
                        } else
                            createRow.setAttribute("ItmTotCostIt", new Double(0));

                        createRow.setAttribute("ItmTotCostCo", row.get(16));
                        createRow.setAttribute("ItmSelvgValue", row.get(17));
                        createRow.setAttribute("ItmYrsLife", row.get(18));
                        createRow.setAttribute("DepPerCoLaw", row.get(19));
                        createRow.setAttribute("DepPerItLaw", row.get(20));

                        if (row.get(21) != null) {
                            createRow.setAttribute("DepEffStrtDtCo", getConvertTimeStampToStr(row.get(21).toString()));
                        } else
                            createRow.setAttribute("DepEffStrtDtCo", null);

                        if (row.get(22) != null) {
                            createRow.setAttribute("DepEffEndDtCo", getConvertTimeStampToStr(row.get(22).toString()));
                        } else
                            createRow.setAttribute("DepEffEndDtCo", null);

                        if (row.get(23) != null) {
                            createRow.setAttribute("DepEffStrtDtIt", getConvertTimeStampToStr(row.get(23).toString()));
                        } else
                            createRow.setAttribute("DepEffStrtDtIt", null);

                        if (row.get(24) != null) {
                            createRow.setAttribute("DepEffEndDtIt", getConvertTimeStampToStr(row.get(24).toString()));
                        } else
                            createRow.setAttribute("DepEffEndDtIt", null);

                        createRow.setAttribute("DepShftCoLaw", row.get(25));
                        createRow.setAttribute("AccDepIt", row.get(26));
                        createRow.setAttribute("AccDepCo", row.get(27));
                        createRow.setAttribute("AddlDepFlg", row.get(28));
                        createRow.setAttribute("AddlCostBs", row.get(29));
                        createRow.setAttribute("AddlDepPer", row.get(30));
                        createRow.setAttribute("AddlAccDep", row.get(31));
                        createRow.setAttribute("Remark", row.get(46));

                        createRow.setAttribute("InsuFlg", "N"); //row.get(32)
                        createRow.setAttribute("WrntyFlg", "N"); //row.get(33)
                        createRow.setAttribute("ItmMovdToOrg", null); //row.get(34)
                        createRow.setAttribute("ItmLineStatus", "O"); // row.get(35)
                        createRow.setAttribute("ItmActvFlg", "Y"); // row.get(36)
                        createRow.setAttribute("SsDocId", null); //row.get(37)
                        createRow.setAttribute("SsVouId", null); //row.get(38)
                        createRow.setAttribute("SsVouIdDisp", null); //row.get(39)
                        createRow.setAttribute("SsPrft", null); //row.get(40)
                        createRow.setAttribute("SsPrftTyp", null); //row.get(41)
                        //  createRow.setAttribute("CreateId", row.get(42));

                        //                    if (row.get(43) != null) {
                        //                        createRow.setAttribute("CreateDt", getConvertTimeStampToStr(row.get(43).toString()));
                        //                    } else
                        //                        createRow.setAttribute("CreateDt", null);
                        //                    createRow.setAttribute("ModifyId", row.get(44));
                        //                    if (row.get(45) != null) {
                        //                        createRow.setAttribute("ModifyDt", getConvertTimeStampToStr(row.get(45).toString()));
                        //                    } else
                        //                        createRow.setAttribute("ModifyDt", null);

                        //    createRow.setAttribute("FaGrpPrfId", row.get(47));


                        ln.insertRow(createRow);
                        System.out.println("after inserting row");
                    }
                }
            }
        }
        System.out.println("before commit");
        //    getDBTransaction().commit();
        System.out.println("after commit");
        if (updatedData != null) {
            List al1 = (List) updatedData;
            System.out.println("size of updated rows" + al1.size());
            ListIterator<UpdatedData> iterator = al1.listIterator();
            while (iterator.hasNext()) {
                UpdatedData next = (UpdatedData) iterator.next();
                Map keys = next.getPrimaryKeys();
                Map column = next.getUpdatedColumn();
                System.out.println("all row in rang after insertr = " + ln.getAllRowsInRange().length);
                RowQualifier rq = new RowQualifier(ln);
                System.out.println("keys.get(4) = " + keys.get("AppliInstId") + "keys.get(5) = " + keys.get("ItmGrp") +
                                   " keys.get(6) = " + keys.get("ItmId") + " - " + keys.get("ItmLblId") + " - " +
                                   keys.get("ItmSeqId") + " - " + keys.get("DocId") + " - " + keys.get(9) + " - " +
                                   column.get("DepShftCoLaw"));
                rq.setWhereClause("AppliInstId=" + keys.get("AppliInstId") + " and DocId='" + keys.get("DocId") +
                                  "' and ItmGrp='" + keys.get("ItmGrp") + "' and ItmId='" + keys.get("ItmId") +
                                  "' and ItmLblId='" + keys.get("ItmLblId") + "' and ItmSeqId=" + keys.get("ItmSeqId"));
                Row[] filteredRows = ln.getFilteredRows(rq);
                System.out.println("filteredRows.length = " + filteredRows.length);
                //   String dupliLabelId = dupliLabelId((Row) next, "E");
                //System.out.println("dupliLabelId = "+dupliLabelId);
                String dupliLabelId = "N";
                if (keys.get("ItmGrp") != null && keys.get("ItmId") != null && keys.get("ItmLblId") != null) {
                    dupliLabelId =
                        dupliLabelId((String) keys.get("ItmGrp"), (String) keys.get("ItmId"),
                                     (String) keys.get("ItmLblId"), "E");
                    System.out.println("dupliLabelId in u[pdate = " + dupliLabelId);
                }
                if (filteredRows.length > 0 && dupliLabelId.equalsIgnoreCase("Y")) {
                    // filteredRows[0].setAttribute("AppliInstId",1);
                    filteredRows[0].setAttribute("ItmGrp", keys.get("ItmGrp"));
                    filteredRows[0].setAttribute("ItmId", keys.get("ItmId"));
                    filteredRows[0].setAttribute("ItmLblId", keys.get("ItmLblId"));
                    filteredRows[0].setAttribute("ItmSeqId", keys.get("ItmSeqId"));
                    //filteredRows[0].setAttribute("ItmQty", 1);
                    //filteredRows[0].setAttribute("ItmSrlzFlg","Y");
                    // filteredRows[0].setAttribute("ItmLotId", column.get("ItmLotId"));
                    //filteredRows[0].setAttribute("ItmBinId", column.get("ItmBinId"));
                    filteredRows[0].setAttribute("ItmSrNo", keys.get("ItmLblId"));
                    filteredRows[0].setAttribute("ItmTotCostIt", column.get("ItmTotCostIt"));
                    filteredRows[0].setAttribute("ItmTotCostCo", column.get("ItmTotCostCo"));
                    filteredRows[0].setAttribute("ItmSelvgValue", column.get("ItmSelvgValue"));
                    //          filteredRows[0].setAttribute("ItmYrsLife",column.get("ItmYrsLife"));
                    filteredRows[0].setAttribute("DepPerCoLaw", column.get("DepPerCoLaw"));
                    filteredRows[0].setAttribute("DepPerItLaw", column.get("DepPerItLaw"));


                    if (column.get("DepEffStrtDtCo") != null) {
                        filteredRows[0].setAttribute("DepEffStrtDtCo",
                                                     getConvertTimeStampToStr(column.get("DepEffStrtDtCo").toString()));
                    } else
                        filteredRows[0].setAttribute("DepEffStrtDtCo", null);

                    if (column.get("DepEffStrtDtIt") != null) {
                        filteredRows[0].setAttribute("DepEffStrtDtIt",
                                                     getConvertTimeStampToStr(column.get("DepEffStrtDtIt").toString()));
                    } else
                        filteredRows[0].setAttribute("DepEffStrtDtIt", null);

                    //                    if (column.get("DepEffEndDtCo")!=null) {
                    //                        filteredRows[0].setAttribute("DepEffEndDtCo", getConvertTimeStampToStr(column.get("DepEffEndDtCo").toString()));
                    //                    }else
                    //                        filteredRows[0].setAttribute("DepEffEndDtCo", null);
                    //
                    //                    if (column.get("DepEffEndDtIt")!=null) {
                    //                        filteredRows[0].setAttribute("DepEffEndDtIt", getConvertTimeStampToStr(column.get("DepEffEndDtIt").toString()));
                    //                    }else
                    //                        filteredRows[0].setAttribute("DepEffEndDtIt", null);
                    //
                    filteredRows[0].setAttribute("DepShftCoLaw", column.get("DepShftCoLaw"));
                    filteredRows[0].setAttribute("AccDepIt", column.get("AccDepIt"));
                    filteredRows[0].setAttribute("AccDepCo", column.get("AccDepCo"));
                    filteredRows[0].setAttribute("AddlDepFlg", column.get("AddlDepFlg"));
                    //filteredRows[0].setAttribute("AddlCostBs",column.get("AddlCostBs"));
                    filteredRows[0].setAttribute("AddlDepPer", column.get("AddlDepPer"));
                    filteredRows[0].setAttribute("AddlAccDep", column.get("AddlAccDep"));
                    //    filteredRows[0].setAttribute("InsuFlg","N");
                    //      filteredRows[0].setAttribute("WrntyFlg","N");
                    //        filteredRows[0].setAttribute("ItmMovdToOrg",column.get("ItmMovdToOrg"));
                    filteredRows[0].setAttribute("ItmLineStatus", column.get("ItmLineStatus"));
                    //     filteredRows[0].setAttribute("ItmActvFlg",column.get("ItmActvFlg"));
                    //filteredRows[0].setAttribute("SsDocId",column.get("SsDocId"));
                    //filteredRows[0].setAttribute("SsVouId",column.get("SsVouId"));
                    //filteredRows[0].setAttribute("SsVouIdDisp",column.get("SsVouIdDisp"));
                    //filteredRows[0].setAttribute("SsPrft",column.get("SsPrft"));
                    //filteredRows[0].setAttribute("SsPrftTyp",column.get("SsPrftTyp"));
                    //filteredRows[0].setAttribute("CreateId",column.get("CreateId"));
                    //                    if (column.get("CreateDt")!=null) {
                    //                        filteredRows[0].setAttribute("CreateDt", getConvertTimeStampToStr(column.get("CreateDt").toString()));
                    //                    }else
                    //                        filteredRows[0].setAttribute("CreateDt", null);

                    //                    if (column.get("ModifyDt")!=null) {
                    //                        filteredRows[0].setAttribute("ModifyDt", getConvertTimeStampToStr(column.get("ModifyDt").toString()));
                    //                    }else
                    //                        filteredRows[0].setAttribute("ModifyDt", null);
                    // filteredRows[0].setAttribute("ModifyId",column.get("ModifyId"));
                    filteredRows[0].setAttribute("Remark", column.get("Remark"));
                    //filteredRows[0].setAttribute("FaGrpPrfId", column.get("FaGrpPrfId"));

                }
            }
        }

        getDBTransaction().postChanges();
        return null;
    }


    /**
     * Container's getter for LovTrgtOrg1.
     * @return LovTrgtOrg1
     */
    public ViewObjectImpl getLovTrgtOrg1() {
        return (ViewObjectImpl) findViewObject("LovTrgtOrg1");
    }

    public String checkTargetOrgExist() {
        ViewObjectImpl impl = getLovTrgtOrg1();
        impl.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length == 0)
            return "N";
        return "Y";
    }

    public oracle.jbo.domain.Timestamp getConvertTimeStampToStr(String dt) {
        java.util.Date date = null;
        Timestamp ts_dt = null;
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yyyy");
        try {
            date = format.parse(dt);
            System.out.println("Date parsed=" + date);
            ts_dt = new Timestamp(date.getTime());
        } catch (Exception e) {
            System.out.println("Error during parse");
            e.printStackTrace();
        }
        return ts_dt;
    }

    public String dupliLabelId(String group, String ItemId, String labelId, String mode) {

        Object callFunction =
            ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                       new StringBuilder("mm.FN_FA_ITM_LBL_IS_UNIQ(?,?,?,?,?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), group, ItemId,
                                       labelId, mode
        }, Types.VARCHAR);
        if (callFunction != null) {
            return callFunction.toString();
        }
        return "N";
    }

    public String validate(Row row, Row currentRow, String mode) {
        Object typeSrc = row.getAttribute("DocTypeSrc");
        if (currentRow != null) {
            if (currentRow.getAttribute("ItmGrp") == null) {
                return "Group is Mandatory";
            }
            System.out.println("1");
            if (currentRow.getAttribute("ItmId") == null) {
                return "Item is Mandatory";
            }
            System.out.println("2");

            if (currentRow.getAttribute("ItmLblId") == null) {
                return "Item label Id is Mandatory";
            } else {
                Object ItmLineStatus = currentRow.getAttribute("ItmLineStatus");
                if (typeSrc != null && ItmLineStatus != null) {
                    if (!typeSrc.equals(18521) && !ItmLineStatus.toString().equalsIgnoreCase("A")) {
                        Object callFunction = null;
                        try {
                            String md = null;
                            if (mode.equalsIgnoreCase("V"))
                                md = "E";
                            else
                                md = mode;

                            if (currentRow.getAttribute("ItmGrp") != null && currentRow.getAttribute("ItmId") != null &&
                                currentRow.getAttribute("ItmLblId") != null) {
                                callFunction =
                                    dupliLabelId((String) currentRow.getAttribute("ItmGrp"),
                                                 (String) currentRow.getAttribute("ItmId"),
                                                 (String) currentRow.getAttribute("ItmLblId"), md);
                            } else {
                                return "Item Label Id ,Group and Item name is mandatory";
                            }

                        } catch (Exception e) {
                            // TODO: Add catch code
                            e.printStackTrace();
                        }
                        if (callFunction != null) {
                            if (callFunction.toString().equalsIgnoreCase("N")) {
                                return "Label Id must be unique";
                            }
                        }
                        if (!mode.equalsIgnoreCase("V")) {
                            if (currentRow.getAttribute("TransTotalCost") == null) {
                                return "Total Cost is Mandatory";
                            } else {
                                Number per = (Number) currentRow.getAttribute("TransTotalCost");
                                if (per.compareTo(0) <= 0) {
                                    return "Total Cost `must be greater than 0";
                                }
                            }
                        }
                    } else if (!mode.equalsIgnoreCase("V") && !ItmLineStatus.toString().equalsIgnoreCase("A")) {
                        if (currentRow.getAttribute("TransStartDate") == null) {
                            return "Item Put to use date is mandatory";
                        }
                    } else if (ItmLineStatus.toString().equalsIgnoreCase("A")) {
                        if (currentRow.getAttribute("TransStartDate") == null) {
                            return "Item Put to use date is mandatory";
                        }
                        if (currentRow.getAttribute("TransTotalCost") == null) {
                            return "Total Cost is Mandatory";
                        } else {
                            Number per = (Number) currentRow.getAttribute("TransTotalCost");
                            if (per.compareTo(0) <= 0) {
                                return "Total Cost `must be greater than 0";
                            }
                        }
                    }
                }
            }
            System.out.println("3");

            if (currentRow.getAttribute("AddlCostBs") == null) {
                return "Additional Cost is Mandatory";
            } else {
                Number per = (Number) currentRow.getAttribute("AddlCostBs");
                if (per.compareTo(0) < 0) {
                    return "Additional Basic Cost must be greater than or equal to 0";
                }
            } //
            if (currentRow.getAttribute("ItmSelvgValue") == null) {
                return "Item Salvage Value is Mandatory";
            } else {
                Number per = new Number(0);
                Number tot = new Number(0);
                if (currentRow.getAttribute("ItmSelvgValue") != null) {
                    per = (Number) currentRow.getAttribute("ItmSelvgValue");
                }
                if (currentRow.getAttribute("TransTotalCost") != null) {
                    tot = (Number) currentRow.getAttribute("TransTotalCost");
                }

                if (per.compareTo(tot) > 0) {
                    return "Salvage Value cannot be greater than total cost.";
                }
            }
            System.out.println("4");
            if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("CO")) {

                if (currentRow.getAttribute("ItmTotCostIt") == null) {
                    return "Enter Total Cost for IT law";
                } else {
                    Number per = (Number) currentRow.getAttribute("ItmTotCostIt");
                    if (per.compareTo(0) < 0) {
                        return "Total Cost for IT Law must be greater than 0";
                    }
                } //
                System.out.println("5");
                Number DepPer = new Number(0);
                if (currentRow.getAttribute("DepPerItLaw") == null) {
                    return "Enter Depreciation Percentage for IT Law";
                } else {
                    System.out.println("in else bfr dprcnt prcnt");
                    DepPer = (Number) currentRow.getAttribute("DepPerItLaw");
                    System.out.println("per = " + DepPer);
                    if (DepPer.compareTo(0) <= 0 || DepPer.compareTo(100) > 0) {

                        return "Depreciation Percentage must be greater than 0 and smaller than 100";
                    }
                }
                System.out.println("6");
                if (currentRow.getAttribute("AccDepIt") == null) {
                    return " Enter Accumulated Depreciation Amount for IT Law";
                }
                System.out.println("7");


                if (ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ADDTNL_DEP_ALW}").toString().equalsIgnoreCase("Y")) {
                    Object AddlDepFlg = currentRow.getAttribute("AddlDepFlg");
                    System.out.println("AddlDepFlg = " + AddlDepFlg);

                    Number AddDepPer = new Number(0);
                    if (AddlDepFlg != null) {
                        if (AddlDepFlg.toString().equalsIgnoreCase("Y")) {
                            System.out.println("when y");
                            if (currentRow.getAttribute("AddlDepPer") == null) {
                                return "Enter Additional Depreciation Percentage for IT Law";
                            } else {
                                System.out.println("in else bfr dprcnt prcnt");
                                AddDepPer = (Number) currentRow.getAttribute("AddlDepPer");
                                System.out.println("per = " + AddDepPer);
                                if (AddDepPer.compareTo(0) <= 0 || AddDepPer.compareTo(100) > 0) {

                                    return "Additional Depreciation Percentage must be greater than 0 and smaller than 100";
                                }
                            }
                            System.out.println("after check");
                            if (currentRow.getAttribute("AddlAccDep") == null) {
                                return "Enter Additional Accumulated cost for IT Law";
                            } else {
                                Number per = (Number) currentRow.getAttribute("AddlAccDep");
                                if (per.compareTo(0) < 0) {
                                    return "Additional Accumulated cost for IT Law must be greater than or equal to 0";
                                }
                            } //
                            Number tot = AddDepPer.add(DepPer);
                            System.out.println("total value =" + tot + " AddDepPer = " + AddDepPer + " DepPer = " +
                                               DepPer);

                            if (tot.compareTo(100) > 0) {
                                return "Total Depreciation(Depreciation percentage+Additional Depreciation Percenteage) cannot be greater than 100";
                            }
                        }
                    }
                }

            }

            if (!ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_LAW_TYP}").toString().equalsIgnoreCase("IT")) {
                Number totalCost = new Number(0);
                if (currentRow.getAttribute("ItmTotCostCo") == null) {
                    return "Enter Total Cost for CO Law";
                } else {
                    totalCost = (Number) currentRow.getAttribute("ItmTotCostCo");
                    if (totalCost.compareTo(0) < 0) {
                        return "Total Cost for CO Law must be greater than 0";
                    }
                }
                System.out.println("8");

                if (currentRow.getAttribute("DepPerCoLaw") == null) {
                    return "Enter Depreciation Percentage for CO Law";
                } else {
                    Number per = (Number) currentRow.getAttribute("DepPerCoLaw");
                    if (per.compareTo(0) <= 0 || per.compareTo(100) > 0) {
                        return "Depreciation Percentage must be greater than 0 and smaller than 100";
                    }
                }
                System.out.println("9");

                if (currentRow.getAttribute("AccDepCo") == null) {
                    return " Enter Accumulated Depreciation Amount for CO Law";
                }
                System.out.println("10");
                if (currentRow.getAttribute("DepShftCoLaw") == null) {
                    return " Shift is Mandatory. It must be between 1 and 3";
                }

            }

        }
        return "Y";
    }

    public String validateItem(String mode) {
        System.out.println("in validateItem =" + mode);

        ViewObjectImpl ln = getMmFaItmLn1();
        Row currentRow = ln.getCurrentRow();

        MmFaItmSrcVOImpl src = getMmFaItmSrc1();
        Row row = src.getCurrentRow();
        String res = null;
        String flag = "Y";
        if (!mode.equalsIgnoreCase("V")) {
            res = validate(row, currentRow, mode);
            if (!res.toString().equalsIgnoreCase("Y")) {
                flag = "N";
                currentRow.setAttribute("TransErrorStatus", "E");
            } else {
                currentRow.setAttribute("TransErrorStatus", "Y");

            }
            flag = res;
        } else {
            RowSetIterator rsi = ln.createRowSetIterator(null);
            int i = 1;
            while (rsi.hasNext()) {
                System.out.println("no of row = " + i);
                i++;
                Row next = rsi.next();
                res = validate(row, next, mode);
                if (!res.toString().equalsIgnoreCase("Y")) {
                    flag = "N";
                    next.setAttribute("TransErrorStatus", "E");
                } else {
                    next.setAttribute("TransErrorStatus", "Y");

                }
            }
            rsi.closeRowSetIterator();
        }
        System.out.println("before returnning y");
        return flag;
    }

    public String adjustment() {
        ViewObjectImpl ln = getMmFaItmLn1();
        Row currentRow = ln.getCurrentRow();
        Object ItmGrp = currentRow.getAttribute("ItmGrp");
        Object ItmId = currentRow.getAttribute("ItmId");
        Object ItmLblId = currentRow.getAttribute("ItmLblId");
        Object ItmSrlzFlg = currentRow.getAttribute("ItmSrlzFlg");
        Object DepPerCoLaw = currentRow.getAttribute("DepPerCoLaw");
        Object DepPerItLaw = currentRow.getAttribute("DepPerItLaw");
        Object DepShftCoLaw = currentRow.getAttribute("DepShftCoLaw");
        Object FaLagCode = currentRow.getAttribute("FaLagCode");
        Object AddlDepFlg = currentRow.getAttribute("AddlDepFlg");
        Object AddlDepPer = currentRow.getAttribute("AddlDepPer");
        Integer seqid = 2; // need to get through code

        Row createRow = ln.createRow();
        System.out.println("after creatre row on addition");
        if (createRow != null) {
            createRow.setAttribute("ItmGrp", ItmGrp);
            createRow.setAttribute("ItmId", ItmId);
            createRow.setAttribute("ItmLblId", ItmLblId);
            createRow.setAttribute("ItmSeqId", getSequenceId(currentRow));
            createRow.setAttribute("ItmQty", 1);
            createRow.setAttribute("ItmSrlzFlg", ItmSrlzFlg);
            createRow.setAttribute("ItmSrNo", ItmLblId);
            createRow.setAttribute("ItmTotCostIt", 0);
            createRow.setAttribute("ItmTotCostCo", 0);
            createRow.setAttribute("ItmSelvgValue", 0);
            createRow.setAttribute("DepPerCoLaw", DepPerCoLaw);
            createRow.setAttribute("DepPerItLaw", DepPerItLaw);
            createRow.setAttribute("DepEffStrtDtCo", new Timestamp(System.currentTimeMillis()));
            createRow.setAttribute("DepEffStrtDtIt", new Timestamp(System.currentTimeMillis()));
            createRow.setAttribute("TransStartDate", new Timestamp(System.currentTimeMillis()));

            createRow.setAttribute("DepShftCoLaw", DepShftCoLaw);
            createRow.setAttribute("AccDepIt", 0);
            createRow.setAttribute("AccDepCo", 0);
            createRow.setAttribute("AddlDepFlg", AddlDepFlg);
            createRow.setAttribute("AddlDepPer", AddlDepPer);
            createRow.setAttribute("AddlCostBs", 0);
            createRow.setAttribute("AddlAccDep", 0);

            createRow.setAttribute("FaLagCode", FaLagCode);
            createRow.setAttribute("InsuFlg", "N");
            createRow.setAttribute("WrntyFlg", "N");
            createRow.setAttribute("ItmMovdToOrg", null);
            createRow.setAttribute("ItmLineStatus", "A");
            createRow.setAttribute("ItmActvFlg", "Y");
            ln.insertRow(createRow);
            System.out.println("after inserting row");

        }
        return null;
    }

    public String CheckInvoiceExecute() {
        ViewObjectImpl VO = this.getCheckInvoice1();
        VO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        VO.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        VO.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        VO.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        VO.executeQuery();
        Row[] allRowsInRange = VO.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Integer count = (Integer) allRowsInRange[0].getAttribute("Cnt");
            System.out.println("count==" + count);
            if (count > 0) {
                return "Y";
            } else {
                return "N";
            }
        }
        return null;
    }

    /**
     * Container's getter for CheckInvoice1.
     * @return CheckInvoice1
     */
    public ViewObjectImpl getCheckInvoice1() {
        return (ViewObjectImpl) findViewObject("CheckInvoice1");
    }

    /**
     * Container's getter for MmFaItmLn2.
     * @return MmFaItmLn2
     */
    public ViewObjectImpl getMmFaItmLn2() {
        return (ViewObjectImpl) findViewObject("MmFaItmLn2");
    }

    public String EditOpeningBalancemethod() {
        //        ViewObjectImpl VO1 = this.getCheckInvoice1();
        //        VO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        //        VO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        //        VO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        //        VO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        //        VO1.executeQuery();
        //        Row currRow = VO1.getCurrentRow();
        //        Integer Edit = (Integer) currRow.getAttribute("Cnt");
        //        System.out.println("Edit==" + Edit);
        //        if (Edit > 0) {
        //            return "Y";
        //        } else
        //            return "N";
        //    }
        ViewObjectImpl VO = this.getCheckInvoice1();
        VO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        VO.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        VO.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        VO.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        VO.executeQuery();
        Row[] allRowsInRange = VO.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Integer count = (Integer) allRowsInRange[0].getAttribute("Cnt");
            System.out.println("count==" + count);
            if (count > 0) {
                return "Y";
            } else {
                return "N";
            }
        }
        return null;
    }
}


