package faprofileapp.model.service;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;
import adf.utils.model.dbprocsupp.ProcPrams;

import faprofileapp.model.service.common.FAProfileAM;
import faprofileapp.model.views.AppFaPrfVOImpl;

import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Iterator;

import javax.faces.application.FacesMessage;

import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat May 02 16:05:08 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FAProfileAMImpl extends ApplicationModuleImpl implements FAProfileAM {
    /**
     * This is the default constructor (do not remove).
     */
    public FAProfileAMImpl() {
    }

    /**
     * Container's getter for AppFaPrf1.
     * @return AppFaPrf1
     */
    public AppFaPrfVOImpl getAppFaPrf1() {
        return (AppFaPrfVOImpl) findViewObject("AppFaPrf1");
    }

    /**
     * Container's getter for LOVCalType1.
     * @return LOVCalType1
     */
    public ViewObjectImpl getLOVCalType1() {
        return (ViewObjectImpl) findViewObject("LOVCalType1");
    }

    /**
     * Container's getter for COLAWDEPMETHOD1.
     * @return COLAWDEPMETHOD1
     */
    public ViewObjectImpl getCOLAWDEPMETHOD1() {
        return (ViewObjectImpl) findViewObject("COLAWDEPMETHOD1");
    }

    /**
     * Container's getter for ITLAWCALCBLOK1.
     * @return ITLAWCALCBLOK1
     */
    public ViewObjectImpl getITLAWCALCBLOK1() {
        return (ViewObjectImpl) findViewObject("ITLAWCALCBLOK1");
    }

    /**
     * Container's getter for LOVCalType2.
     * @return LOVCalType2
     */
    public ViewObjectImpl getLOVCalType2() {
        return (ViewObjectImpl) findViewObject("LOVCalType2");
    }

    /**
     * Container's getter for LovCountryType1.
     * @return LovCountryType1
     */
    public ViewObjectImpl getLovCountryType1() {
        return (ViewObjectImpl) findViewObject("LovCountryType1");
    }

    /**
     * Container's getter for LOVFINVOUPOSTTYPE1.
     * @return LOVFINVOUPOSTTYPE1
     */
    public ViewObjectImpl getLOVFINVOUPOSTTYPE1() {
        return (ViewObjectImpl) findViewObject("LOVFINVOUPOSTTYPE1");
    }

    public String onFinalize() {
        Row currentRow = getAppFaPrf1().getCurrentRow();
        System.out.println("currentRow.getAttribute(\"Finalize1\") =" + currentRow.getAttribute("Finalize1"));
        if (currentRow.getAttribute("Finalize1").toString().equalsIgnoreCase("Y")) {
            getDBTransaction().postChanges();
            Object callFunction =
                ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                           new StringBuilder("app.fn_prf_rep_to_org(?,?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), currentRow.getAttribute("CntryId"),
                                           EbizParams.GLBL_APP_SERV_LOC(), currentRow.getAttribute("FaPrfId"),
                                           currentRow.getAttribute("EffDt"), EbizParams.GLBL_APP_USR()
            }, Types.VARCHAR);
            System.out.println("callFunction  =" + callFunction);
        }
        getAppFaPrf1().executeQuery();
        return null;
    }

    public String deleteAction() {
        System.out.println(" in deleteAction method");
        Row currentRow = getAppFaPrf1().getCurrentRow();
        Object callFunction = null;
        try {
            System.out.println("currentRow.getAttribute(\"FaPrfId\") = " + currentRow.getAttribute("FaPrfId"));
            callFunction =
                ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                           new StringBuilder("app.fn_fa_prf_del(?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           currentRow.getAttribute("CntryId"), currentRow.getAttribute("FaPrfId")
            }, Types.VARCHAR);
        } catch (Exception e) {
            ADFModelUtils.showFacesMessage("You can't delete this record", "You can't delete this record",
                                           FacesMessage.SEVERITY_ERROR, null);
            e.printStackTrace();
        }
        System.out.println("callFunction = " + callFunction);
        if (callFunction != null) {

            getDBTransaction().commit();
            getAppFaPrf1().executeQuery();
            return callFunction.toString();
        }
        return null;
    }

    public String saveValidations() {
        AppFaPrfVOImpl prf = getAppFaPrf1();
        Row currentRow = prf.getCurrentRow();
        if (currentRow != null) {
            Object cal = currentRow.getAttribute("CntryCalType");
            if (cal == null) {
                return "N";
            } else {
                if (cal.toString().equalsIgnoreCase("BO") || cal.toString().equalsIgnoreCase("CO")) {
                    if (currentRow.getAttribute("CoLawDepMethod") == null) {
                        return "N";
                    }
                }
                if (cal.toString().equalsIgnoreCase("BO") || cal.toString().equalsIgnoreCase("IT")) {
                    if (currentRow.getAttribute("ItLawDepMethod") == null) {
                        return "N";
                    }
                    if (currentRow.getAttribute("ItLawCalcBlok") == null) {
                        return "N";
                    }
                }
            }
        }
        currentRow.setAttribute("EffDt", allowDate(null));
        return "Y";
    }

    /**
     * Container's getter for Dual1.
     * @return Dual1
     */
    public ViewObjectImpl getDual1() {
        return (ViewObjectImpl) findViewObject("Dual1");
    }

    public String filterCntryTable() {
        ViewObjectImpl d = getDual1();
        Row currentRow = d.getCurrentRow();
        if (currentRow != null) {
            Object CntryId = currentRow.getAttribute("CntryId");
            AppFaPrfVOImpl prf = getAppFaPrf1();
            prf.setNamedWhereClauseParam("BindCntryId", CntryId);
            prf.executeQuery();
        }
        return null;
    }

    public String resetCntryTable() {
        AppFaPrfVOImpl prf = getAppFaPrf1();
        prf.setNamedWhereClauseParam("BindCntryId", null);
        prf.executeQuery();
        return null;
    }

    public String allowDate(String input_date) {
        ProcPrams params[] = new ProcPrams[] {
            new ProcPrams(1, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_APP_CLD_ID()),
            new ProcPrams(2, Types.NUMERIC, ProcPrams.IN, EbizParams.GLBL_APP_SERV_LOC()),
            new ProcPrams(3, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_HO_ORG_ID()),
            new ProcPrams(4, Types.VARCHAR, ProcPrams.IN, EbizParams.GLBL_APP_USR_ORG()),
            new ProcPrams(5, Types.DATE, ProcPrams.IN, null), new ProcPrams(6, Types.DATE, ProcPrams.OUT, null),
            new ProcPrams(7, Types.VARCHAR, ProcPrams.OUT, null)
        };
        ArrayList al = new ArrayList();
        try {

            al =
                ADFModelUtils.callDbProcedure(this.getRootApplicationModule(),
                                              new StringBuilder("mm.proc_get_fa_fy_dt_op(?,?,?,?,?,?,?)"), params);
        } catch (SQLException e) {
            System.out.println("error" + e);
        }
        Iterator iterator = al.iterator();
        while (iterator.hasNext()) {
            Object next = iterator.next();
            if (next != null) {
                return new String(next.toString() + " 00:00:00.0");
            }
        }

        return null;
    }
}

