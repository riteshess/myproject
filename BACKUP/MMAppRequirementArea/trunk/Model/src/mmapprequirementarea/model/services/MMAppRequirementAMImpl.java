package mmapprequirementarea.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmapprequirementarea.model.services.common.MMAppRequirementAM;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 10 14:52:19 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMAppRequirementAMImpl extends ApplicationModuleImpl implements MMAppRequirementAM {
    /**
     * This is the default constructor (do not remove).
     */
    
   
    
    public MMAppRequirementAMImpl() {
    }

    /**
     * Container's getter for AppAdd1.
     * @return AppAdd1
     */
     public void setRqmtId(String ho_orgId){
       String  cldId=this.getAppRequirement1().getCurrentRow().getAttribute("CldId").toString();
       String  orgId=this.getAppRequirement1().getCurrentRow().getAttribute("OrgId").toString();
       int slocId=Integer.parseInt(this.getAppRequirement1().getCurrentRow().getAttribute("SlocId").toString());  
         String rqmtid = (String)callStoredFunction(Types.VARCHAR, "FN_APP_GEN_ID(?,?,?,?,?)", new Object[] {slocId,cldId,ho_orgId,orgId,"APP$RQMT$AREA"});
         Integer rqmttid1=Integer.parseInt(rqmtid);
         if(rqmttid1!=null){
         // System.out.println("rqmttid1-------"+rqmttid1);
             getAppRequirement1().getCurrentRow().setAttribute("RqmtAreaId", rqmttid1);
         }
         
     }
    
    public void filterRqmtAreaI(String cldId,int slocId,String orgId,int userId){
       // System.out.println("cldId: "+cldId+" slocId: "+slocId+" orgId: "+orgId+" userId: "+userId);

            ViewObjectImpl vo = this.getAppRequirement1();
            ViewCriteria vc = vo.getViewCriteria("AppRequirementVOCriteria");
            vo.applyViewCriteria(vc);
              vo.setNamedWhereClauseParam("cldBind", cldId);
              vo.setNamedWhereClauseParam("slocBind",slocId);
              vo.setNamedWhereClauseParam("orgBind", orgId);
             //vo.setNamedWhereClauseParam("userbind", userId);
              vo.executeQuery();
 }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    public String testRqmtvalidator(String rqmtName){
        System.out.println("rqmt Name: "+rqmtName);
        
        String flag="";
        String cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
       // String cldId=getAppRequirement1().getCurrentRow().getAttribute("CldId").toString();
       // Integer slocId=Integer.parseInt(getAppRequirement1().getCurrentRow().getAttribute("SlocId").toString()) ;
        //String orgId=getAppRequirement1().getCurrentRow().getAttribute("OrgId").toString();
        //String rqmtname1=getAppRqmtArea1().getCurrentRow().getAttribute("RqmtAreaNm").toString();
        System.out.println("checked item is");
        RowQualifier rowQualifier = new RowQualifier(getAppRequirement1());
        rowQualifier.setWhereClause("CldId='"+cldId+"' AND SlocId= "+slocId+" AND OrgId='"+orgId+"' AND RqmtAreaNm='"+rqmtName+"'");
        Row[] filteredRows = getAppRequirement1().getFilteredRows(rowQualifier); 
          System.out.println("filres rows length"+filteredRows.length);
        
       //
        if(filteredRows.length>1){
                    System.out.println("roq is not current row");
                   flag="Y";
         //throw new FacesMessage(FacesMessage.SEVERITY_ERROR,msg,null);
         }
        else{
            flag="N";
        }
        return flag;
    }
    
    public String checkisDeletable(){
        //FN_IS_RQMT_DELETABLE
        String flag="";
        String cldId=getAppRequirement1().getCurrentRow().getAttribute("CldId").toString();
        Integer slocId=Integer.parseInt(getAppRequirement1().getCurrentRow().getAttribute("SlocId").toString()) ;
        String orgId=getAppRequirement1().getCurrentRow().getAttribute("OrgId").toString();
        Number rqmtId=(Number)getAppRequirement1().getCurrentRow().getAttribute("RqmtAreaId");
     
       String Output1 =(callStoredFunction(Types.VARCHAR, "mm.MM_IS_RQMT_DELETABLE (?,?,?,?)", new Object[] {cldId,slocId, orgId,rqmtId})).toString();
       if(Output1!=null){
          // System.out.println("MM.FN_IS_RQMT_DELETABLE : "+Output1);
           if(Output1.equalsIgnoreCase("Y")){
               flag="Y";
           }
           else{
               flag="N";
           }
       }
       
        return flag;
    }
     protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
             CallableStatement st = null;
             try {
                 
                 st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                 st.registerOutParameter(1, sqlReturnType);
                 if (bindVars != null) {
                     for (int z = 0; z < bindVars.length; z++) {
                         st.setObject(z + 2, bindVars[z]);
                        // System.out.println(bindVars[z] + "z");
                     }
                 }
                 st.executeUpdate();
                 return st.getObject(1);
             } catch (SQLException e) {
                 throw new JboException(e);
             } finally {
                 if (st != null) {
                     try {
                         st.close();
                     } catch (SQLException e) {
                         e.printStackTrace();
                     }
                 }
             }
         }
    public ViewObjectImpl getAppAdd1() {
        return (ViewObjectImpl)findViewObject("AppAdd1");
    }

    /**
     * Container's getter for AppRequirement1.
     * @return AppRequirement1
     */
    public ViewObjectImpl getAppRequirement1() {
        return (ViewObjectImpl)findViewObject("AppRequirement1");
    }

    /**
     * Container's getter for AppWarehouse1.
     * @return AppWarehouse1
     */
    public ViewObjectImpl getAppWarehouse1() {
        return (ViewObjectImpl)findViewObject("AppWarehouse1");
    }
}
