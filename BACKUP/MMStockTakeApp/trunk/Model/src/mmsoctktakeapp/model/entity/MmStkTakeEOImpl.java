package mmsoctktakeapp.model.entity;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmsoctktakeapp.model.services.MMStkTakeAMImpl;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 06 14:50:43 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmStkTakeEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getCldId();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        DocId {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getDocId();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        DocDt {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getDocDt();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setDocDt((Timestamp)value);
            }
        }
        ,
        FyId {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getFyId();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setFyId((Integer)value);
            }
        }
        ,
        StkTakeNo {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getStkTakeNo();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setStkTakeNo((String)value);
            }
        }
        ,
        StkTakeDt {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getStkTakeDt();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setStkTakeDt((Timestamp)value);
            }
        }
        ,
        StkTakePrfId {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getStkTakePrfId();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setStkTakePrfId((String)value);
            }
        }
        ,
        StkTakeStat {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getStkTakeStat();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setStkTakeStat((Integer)value);
            }
        }
        ,
        AuthStat {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getAuthStat();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setAuthStat((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Timestamp)value);
            }
        }
        ,
        UsrIdMod {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setUsrIdModDt((Timestamp)value);
            }
        }
        ,
        MmStkTakeItm {
            public Object get(MmStkTakeEOImpl obj) {
                return obj.getMmStkTakeItm();
            }

            public void put(MmStkTakeEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmStkTakeEOImpl object);

        public abstract void put(MmStkTakeEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int STKTAKENO = AttributesEnum.StkTakeNo.index();
    public static final int STKTAKEDT = AttributesEnum.StkTakeDt.index();
    public static final int STKTAKEPRFID = AttributesEnum.StkTakePrfId.index();
    public static final int STKTAKESTAT = AttributesEnum.StkTakeStat.index();
    public static final int AUTHSTAT = AttributesEnum.AuthStat.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int MMSTKTAKEITM = AttributesEnum.MmStkTakeItm.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmStkTakeEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mmsoctktakeapp.model.entity.MmStkTakeEO");
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }


    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp)getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer)getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for StkTakeNo, using the alias name StkTakeNo.
     * @return the value of StkTakeNo
     */
    public String getStkTakeNo() {
        return (String)getAttributeInternal(STKTAKENO);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkTakeNo.
     * @param value value to set the StkTakeNo
     */
    public void setStkTakeNo(String value) {
        setAttributeInternal(STKTAKENO, value);
    }

    /**
     * Gets the attribute value for StkTakeDt, using the alias name StkTakeDt.
     * @return the value of StkTakeDt
     */
    public Timestamp getStkTakeDt() {
        return (Timestamp)getAttributeInternal(STKTAKEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkTakeDt.
     * @param value value to set the StkTakeDt
     */
    public void setStkTakeDt(Timestamp value) {
        setAttributeInternal(STKTAKEDT, value);
    }

    /**
     * Gets the attribute value for StkTakePrfId, using the alias name StkTakePrfId.
     * @return the value of StkTakePrfId
     */
    public String getStkTakePrfId() {
        return (String)getAttributeInternal(STKTAKEPRFID);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkTakePrfId.
     * @param value value to set the StkTakePrfId
     */
    public void setStkTakePrfId(String value) {
        setAttributeInternal(STKTAKEPRFID, value);
    }

    /**
     * Gets the attribute value for StkTakeStat, using the alias name StkTakeStat.
     * @return the value of StkTakeStat
     */
    public Integer getStkTakeStat() {
        return (Integer)getAttributeInternal(STKTAKESTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkTakeStat.
     * @param value value to set the StkTakeStat
     */
    public void setStkTakeStat(Integer value) {
        setAttributeInternal(STKTAKESTAT, value);
    }

    /**
     * Gets the attribute value for AuthStat, using the alias name AuthStat.
     * @return the value of AuthStat
     */
    public String getAuthStat() {
        return (String)getAttributeInternal(AUTHSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for AuthStat.
     * @param value value to set the AuthStat
     */
    public void setAuthStat(String value) {
        setAttributeInternal(AUTHSTAT, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMmStkTakeItm() {
        return (RowIterator)getAttributeInternal(MMSTKTAKEITM);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String docId) {
        return new Key(new Object[]{cldId, slocId, orgId, docId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
      //  System.out.println("Create Stock taking");
        String UsrId=resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();
        String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        setOrgId(OrgId);
        setSlocId(SlocId);
        setCldId(CldId);
        String txnId =(String)(callStoredFunction(Types.VARCHAR, "app.pkg_app.get_txn_id(?,?,?,?,?)", new Object[] {UsrId,OrgId,SlocId,new Integer(18518),CldId}));   
        setDocId(txnId); 
     //   System.out.println("Doc Id="+txnId);
        setDocDt(new Timestamp(System.currentTimeMillis()));
        setStkTakeDt(new Timestamp(System.currentTimeMillis()));
        setStkTakeStat(new Integer(354));
        setUsrIdCreate(Integer.parseInt(UsrId));
        setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        setAuthStat("N");  
    //    System.out.println(getDocDt()+"--"+getStkTakeDt()+"--"+getStkTakeStat()+"--"+getUsrIdCreate()+"--"+getUsrIdCreateDt()+"--"+getAuthStat());
      //  System.out.println("Exiting /create for master stock");
        super.create(attributeList);
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                MMStkTakeAMImpl am = (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");
                st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
     
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) { throw new JboException(e);
                    }
                }
            }
        }
    
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }
    
    public String resolvEl(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
          String msg = valueExp.getValue(elContext).toString();
          return msg;
      }
    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
    //    super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
        if(operation==DML_UPDATE)
        { 
            String UsrId=resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();
            setUsrIdMod(Integer.parseInt(UsrId));
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
                    if(getAuthStat()!=null && getAuthStat().compareTo("N")!=0)
                    {
                        setAuthStat("Y");
                        }
                    else
                            setAuthStat("N");

                }
        else
            if(operation ==DML_INSERT)
        {
                if(getAuthStat()!=null && getAuthStat().compareTo("N")!=0)
                {  
                    setAuthStat("Y");}
                else
                        setAuthStat("N");
            }
      
    }
}
