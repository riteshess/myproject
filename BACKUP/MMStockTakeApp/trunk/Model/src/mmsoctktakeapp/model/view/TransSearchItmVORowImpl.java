package mmsoctktakeapp.model.view;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmsoctktakeapp.model.services.MMStkTakeAMImpl;

import oracle.jbo.RowSet;
import oracle.jbo.ViewObject;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 20 18:26:25 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransSearchItmVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        WhId {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getWhId();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setWhId((String)value);
            }
        }
        ,
        ItmId {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setItmId((String)value);
            }
        }
        ,
        LotId {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getLotId();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setLotId((String)value);
            }
        }
        ,
        BinId {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getBinId();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setBinId((String)value);
            }
        }
        ,
        SrNo {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getSrNo();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setSrNo((String)value);
            }
        }
        ,
        CldId {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        DocId {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        MmStkTakeVO1 {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getMmStkTakeVO1();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmStkTakeItmVO1 {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getMmStkTakeItmVO1();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmStkTakeLotVO1 {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getMmStkTakeLotVO1();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmStkTakeBinVO1 {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getMmStkTakeBinVO1();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmStkTakeSrVO1 {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getMmStkTakeSrVO1();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DistinctWhVO1 {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getDistinctWhVO1();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovWarehouseForSearchVO1 {
            public Object get(TransSearchItmVORowImpl obj) {
                return obj.getLovWarehouseForSearchVO1();
            }

            public void put(TransSearchItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TransSearchItmVORowImpl object);

        public abstract void put(TransSearchItmVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int LOTID = AttributesEnum.LotId.index();
    public static final int BINID = AttributesEnum.BinId.index();
    public static final int SRNO = AttributesEnum.SrNo.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int MMSTKTAKEVO1 = AttributesEnum.MmStkTakeVO1.index();
    public static final int MMSTKTAKEITMVO1 = AttributesEnum.MmStkTakeItmVO1.index();
    public static final int MMSTKTAKELOTVO1 = AttributesEnum.MmStkTakeLotVO1.index();
    public static final int MMSTKTAKEBINVO1 = AttributesEnum.MmStkTakeBinVO1.index();
    public static final int MMSTKTAKESRVO1 = AttributesEnum.MmStkTakeSrVO1.index();
    public static final int DISTINCTWHVO1 = AttributesEnum.DistinctWhVO1.index();
    public static final int LOVWAREHOUSEFORSEARCHVO1 = AttributesEnum.LovWarehouseForSearchVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransSearchItmVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WhId.
     * @return the WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WhId.
     * @param value value to set the  WhId
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmId.
     * @param value value to set the  ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LotId.
     * @return the LotId
     */
    public String getLotId() {
        return (String) getAttributeInternal(LOTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LotId.
     * @param value value to set the  LotId
     */
    public void setLotId(String value) {
        setAttributeInternal(LOTID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BinId.
     * @return the BinId
     */
    public String getBinId() {
        return (String) getAttributeInternal(BINID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BinId.
     * @param value value to set the  BinId
     */
    public void setBinId(String value) {
        setAttributeInternal(BINID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SrNo.
     * @return the SrNo
     */
    public String getSrNo() {
        return (String) getAttributeInternal(SRNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SrNo.
     * @param value value to set the  SrNo
     */
    public void setSrNo(String value) {
        setAttributeInternal(SRNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        if(getAttributeInternal(CLDID)!=null)
        return (String) getAttributeInternal(CLDID);
        else
        {
                String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        // MMStkTakeAMImpl am =  (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");   
         // return (String)am.getMmStkTake1().getCurrentRow().getAttribute("CldId");
            return CldId;
            }
    }
                
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg=null;
        if(valueExp.getValue(elContext)!=null)
         msg = valueExp.getValue(elContext).toString();
        else
         msg=null;
        return msg;
    }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        if(getAttributeInternal(SLOCID)!=null)
        return (Integer) getAttributeInternal(SLOCID);
        else
        {
                Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        // MMStkTakeAMImpl am =  (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");   
         // return (Integer)am.getMmStkTake1().getCurrentRow().getAttribute("SlocId");
           return SlocId;
            }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        if(getAttributeInternal(ORGID)!=null){
        System.out.println(" if Org Id in  impl "+getAttributeInternal(ORGID));
        return (String) getAttributeInternal(ORGID);
        }
        else
        {
                
                String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            System.out.println(" else org id in impl  "+OrgId);
            return OrgId;
         //MMStkTakeAMImpl am =  (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");   
         // return (String)am.getMmStkTake1().getCurrentRow().getAttribute("OrgId");
            }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        if(getAttributeInternal(DOCID)!=null)
        return (String) getAttributeInternal(DOCID);
        else
        {
         MMStkTakeAMImpl am =  (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");   
          return (String)am.getMmStkTake1().getCurrentRow().getAttribute("DocId");
            }   
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmStkTakeVO1.
     */
    public RowSet getMmStkTakeVO1() {
        return (RowSet)getAttributeInternal(MMSTKTAKEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmStkTakeItmVO1.
     */    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }
    public RowSet getMmStkTakeItmVO1() {
      /*   MMStkTakeAMImpl am =  (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");
                ViewObject voStk = am.getMmStkTake1();
                String orgId = (String)voStk.getCurrentRow().getAttribute("OrgId");
                String cldId = (String)voStk.getCurrentRow().getAttribute("CldId");
                Integer slocId = (Integer)voStk.getCurrentRow().getAttribute("SlocId");
                String whId= getWhId();
                String docId =(String)voStk.getCurrentRow().getAttribute("DocId");
                RowSet rs =(RowSet)getAttributeInternal(MMSTKTAKEITMVO1);
                 rs.getRowCount();
                 if(whId!=null && whId != ""){
                 rs.setNamedWhereClauseParam("CldBind", cldId);
                 rs.setNamedWhereClauseParam("DocBind", docId);
                 rs.setNamedWhereClauseParam("OrgBind", orgId);
                 rs.setNamedWhereClauseParam("SlocBind", slocId);
                 rs.setNamedWhereClauseParam("WhBind", whId);
                 }
                 else
                 {
                         rs.setNamedWhereClauseParam("CldBind", "-1");  
                     }
                   
                 rs.executeQuery();
                 return rs; */
                 return (RowSet)getAttributeInternal(MMSTKTAKEITMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmStkTakeLotVO1.
     */
    public RowSet getMmStkTakeLotVO1() {
        /*  MMStkTakeAMImpl am =  (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");
                 ViewObject voStk = am.getMmStkTake1();
        String orgId = (String)voStk.getCurrentRow().getAttribute("OrgId");
        String cldId = (String)voStk.getCurrentRow().getAttribute("CldId");
        Integer slocId = (Integer)voStk.getCurrentRow().getAttribute("SlocId");
                 String whId= getWhId();
                 String docId =(String)voStk.getCurrentRow().getAttribute("DocId");
                 String ItmId=getItmId();
                 RowSet rs =(RowSet)getAttributeInternal(MMSTKTAKELOTVO1);
                  rs.getRowCount();
                  if(ItmId!=null && ItmId !="")
                  {
                  rs.setNamedWhereClauseParam("CldBind", cldId);
                  rs.setNamedWhereClauseParam("DocBind", docId);
                  rs.setNamedWhereClauseParam("OrgBind", orgId);
                  rs.setNamedWhereClauseParam("SlocBind", slocId);
                  rs.setNamedWhereClauseParam("WhBind", whId);
                  rs.setNamedWhereClauseParam("ItmBind", ItmId);
                  }
                  else
                  {  rs.setNamedWhereClauseParam("CldBind", "-1");
                  
                      }
                  rs.executeQuery();
                  return rs; */
                  return (RowSet)getAttributeInternal(MMSTKTAKELOTVO1);
        
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmStkTakeBinVO1.
     */
    public RowSet getMmStkTakeBinVO1() {
/*         MMStkTakeAMImpl am =  (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");
                ViewObject voStk = am.getMmStkTake1();
        String orgId = (String)voStk.getCurrentRow().getAttribute("OrgId");
        String cldId = (String)voStk.getCurrentRow().getAttribute("CldId");
        Integer slocId = (Integer)voStk.getCurrentRow().getAttribute("SlocId");
                 String whId= getWhId();
                 String docId =(String)voStk.getCurrentRow().getAttribute("DocId");
                 String ItmId=getItmId();
                 String LotId=getLotId();
                 RowSet rs =(RowSet)getAttributeInternal(MMSTKTAKEBINVO1);
                  rs.getRowCount();
                  if(LotId!=null && LotId!=""){
                  rs.setNamedWhereClauseParam("CldBind", cldId);
                  rs.setNamedWhereClauseParam("DocBind", docId);
                  rs.setNamedWhereClauseParam("OrgBind", orgId);
                  rs.setNamedWhereClauseParam("SlocBind", slocId);
                  rs.setNamedWhereClauseParam("WhBind", whId);
                  rs.setNamedWhereClauseParam("ItmBind", ItmId);
                  rs.setNamedWhereClauseParam("LotBind", LotId);}
                  else
                  {   rs.setNamedWhereClauseParam("CldBind", "-1");
       
                  }
                  rs.executeQuery();
                  return rs; */
        return (RowSet)getAttributeInternal(MMSTKTAKEBINVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmStkTakeSrVO1.
     */
    public RowSet getMmStkTakeSrVO1() {
       /*  MMStkTakeAMImpl am =  (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");
                ViewObject voStk = am.getMmStkTake1();
        String orgId = (String)voStk.getCurrentRow().getAttribute("OrgId");
        String cldId = (String)voStk.getCurrentRow().getAttribute("CldId");
        Integer slocId = (Integer)voStk.getCurrentRow().getAttribute("SlocId");
        String whId= getWhId();
        String docId =(String)voStk.getCurrentRow().getAttribute("DocId");
        String ItmId=getItmId();
        String LotId=getLotId();
        String BinId=getBinId();
        RowSet rs =(RowSet)getAttributeInternal(MMSTKTAKESRVO1);
         rs.getRowCount();
         if(LotId!=null && BinId!=null && LotId!="" &&  BinId!=""){
         rs.setNamedWhereClauseParam("CldBind", cldId);
         rs.setNamedWhereClauseParam("DocBind", docId);
         rs.setNamedWhereClauseParam("OrgBind", orgId);
         rs.setNamedWhereClauseParam("SlocBind", slocId);
         rs.setNamedWhereClauseParam("WhBind", whId);
         rs.setNamedWhereClauseParam("ItmBind", ItmId);
         rs.setNamedWhereClauseParam("LotBind", LotId);
         rs.setNamedWhereClauseParam("BinBind", BinId);}
         else
         {  
             rs.setNamedWhereClauseParam("CldBind", "-1");
         }
         rs.executeQuery();
         return rs; */
       return (RowSet)getAttributeInternal(MMSTKTAKESRVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> DistinctWhVO1.
     */
    public RowSet getDistinctWhVO1() {
        return (RowSet)getAttributeInternal(DISTINCTWHVO1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LovWarehouseForSearchVO1.
     */
    public RowSet getLovWarehouseForSearchVO1() {
        return (RowSet)getAttributeInternal(LOVWAREHOUSEFORSEARCHVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
