package mmsoctktakeapp.model.view;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;

import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 03 15:03:15 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransSearchStkTakeVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TransSearchStkTakeVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(TransSearchStkTakeVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        StkTakeNo {
            public Object get(TransSearchStkTakeVORowImpl obj) {
                return obj.getStkTakeNo();
            }

            public void put(TransSearchStkTakeVORowImpl obj, Object value) {
                obj.setStkTakeNo((String)value);
            }
        }
        ,
        FromDate {
            public Object get(TransSearchStkTakeVORowImpl obj) {
                return obj.getFromDate();
            }

            public void put(TransSearchStkTakeVORowImpl obj, Object value) {
                obj.setFromDate((Timestamp)value);
            }
        }
        ,
        ToDate {
            public Object get(TransSearchStkTakeVORowImpl obj) {
                return obj.getToDate();
            }

            public void put(TransSearchStkTakeVORowImpl obj, Object value) {
                obj.setToDate((Timestamp)value);
            }
        }
        ,
        PrfId {
            public Object get(TransSearchStkTakeVORowImpl obj) {
                return obj.getPrfId();
            }

            public void put(TransSearchStkTakeVORowImpl obj, Object value) {
                obj.setPrfId((String)value);
            }
        }
        ,
        CldId {
            public Object get(TransSearchStkTakeVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(TransSearchStkTakeVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(TransSearchStkTakeVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(TransSearchStkTakeVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(TransSearchStkTakeVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(TransSearchStkTakeVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        StkTakePrfVO1 {
            public Object get(TransSearchStkTakeVORowImpl obj) {
                return obj.getStkTakePrfVO1();
            }

            public void put(TransSearchStkTakeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TransSearchStkTakeVORowImpl object);

        public abstract void put(TransSearchStkTakeVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int STKTAKENO = AttributesEnum.StkTakeNo.index();
    public static final int FROMDATE = AttributesEnum.FromDate.index();
    public static final int TODATE = AttributesEnum.ToDate.index();
    public static final int PRFID = AttributesEnum.PrfId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int STKTAKEPRFVO1 = AttributesEnum.StkTakePrfVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransSearchStkTakeVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute StkTakeNo.
     * @return the StkTakeNo
     */
    public String getStkTakeNo() {
        return (String) getAttributeInternal(STKTAKENO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute StkTakeNo.
     * @param value value to set the  StkTakeNo
     */
    public void setStkTakeNo(String value) {
        setAttributeInternal(STKTAKENO, value);
    }
    public String resolvEl(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
          String msg=null;
          if(valueExp.getValue(elContext)!=null)
           msg = valueExp.getValue(elContext).toString();
          else
           msg=null;
          return msg;
      }
    /**
     * Gets the attribute value for the calculated attribute FromDate.
     * @return the FromDate
     */
    public Timestamp getFromDate() {
        return (Timestamp) getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FromDate.
     * @param value value to set the  FromDate
     */
    public void setFromDate(Timestamp value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ToDate.
     * @return the ToDate
     */
    public Timestamp getToDate() {
        return (Timestamp) getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ToDate.
     * @param value value to set the  ToDate
     */
    public void setToDate(Timestamp value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PrfId.
     * @return the PrfId
     */
    public String getPrfId() {
        return (String) getAttributeInternal(PRFID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PrfId.
     * @param value value to set the  PrfId
     */
    public void setPrfId(String value) {
        setAttributeInternal(PRFID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        String CldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
       // return (String) getAttributeInternal(CLDID);
        return CldId;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
     
        Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

    //    return (Integer) getAttributeInternal(SLOCID);
        return SlocId;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
       // return (String) getAttributeInternal(ORGID);
        return OrgId;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> StkTakePrfVO1.
     */
    public RowSet getStkTakePrfVO1() {
        return (RowSet)getAttributeInternal(STKTAKEPRFVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
