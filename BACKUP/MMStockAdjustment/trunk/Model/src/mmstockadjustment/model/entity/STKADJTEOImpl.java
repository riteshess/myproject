package mmstockadjustment.model.entity;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 02 18:24:44 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class STKADJTEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(STKADJTEOImpl obj) {
                return obj.getCldId();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(STKADJTEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(STKADJTEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        WhId {
            public Object get(STKADJTEOImpl obj) {
                return obj.getWhId();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setWhId((String)value);
            }
        }
        ,
        DocId {
            public Object get(STKADJTEOImpl obj) {
                return obj.getDocId();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        DocDt {
            public Object get(STKADJTEOImpl obj) {
                return obj.getDocDt();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setDocDt((Timestamp)value);
            }
        }
        ,
        FyId {
            public Object get(STKADJTEOImpl obj) {
                return obj.getFyId();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setFyId((Integer)value);
            }
        }
        ,
        StkAdjtNo {
            public Object get(STKADJTEOImpl obj) {
                return obj.getStkAdjtNo();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setStkAdjtNo((String)value);
            }
        }
        ,
        StkAdjtDt {
            public Object get(STKADJTEOImpl obj) {
                return obj.getStkAdjtDt();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setStkAdjtDt((Date)value);
            }
        }
        ,
        StkAdjtType {
            public Object get(STKADJTEOImpl obj) {
                return obj.getStkAdjtType();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setStkAdjtType((Integer)value);
            }
        }
        ,
        RefDocId {
            public Object get(STKADJTEOImpl obj) {
                return obj.getRefDocId();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setRefDocId((String)value);
            }
        }
        ,
        StkAdjtStat {
            public Object get(STKADJTEOImpl obj) {
                return obj.getStkAdjtStat();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setStkAdjtStat((Integer)value);
            }
        }
        ,
        AuthStat {
            public Object get(STKADJTEOImpl obj) {
                return obj.getAuthStat();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setAuthStat((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(STKADJTEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(STKADJTEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Timestamp)value);
            }
        }
        ,
        UsrIdMod {
            public Object get(STKADJTEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(STKADJTEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setUsrIdModDt((Timestamp)value);
            }
        }
        ,
        STCKADJTITM {
            public Object get(STKADJTEOImpl obj) {
                return obj.getSTCKADJTITM();
            }

            public void put(STKADJTEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(STKADJTEOImpl object);

        public abstract void put(STKADJTEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int STKADJTNO = AttributesEnum.StkAdjtNo.index();
    public static final int STKADJTDT = AttributesEnum.StkAdjtDt.index();
    public static final int STKADJTTYPE = AttributesEnum.StkAdjtType.index();
    public static final int REFDOCID = AttributesEnum.RefDocId.index();
    public static final int STKADJTSTAT = AttributesEnum.StkAdjtStat.index();
    public static final int AUTHSTAT = AttributesEnum.AuthStat.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int STCKADJTITM = AttributesEnum.STCKADJTITM.index();

    /**
     * This is the default constructor (do not remove).
     */
    public STKADJTEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mmstockadjustment.model.entity.STKADJTEO");
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for WhId, using the alias name WhId.
     * @return the value of WhId
     */
    public String getWhId() {
        return (String)getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WhId.
     * @param value value to set the WhId
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp)getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer)getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for StkAdjtNo, using the alias name StkAdjtNo.
     * @return the value of StkAdjtNo
     */
    public String getStkAdjtNo() {
        return (String)getAttributeInternal(STKADJTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkAdjtNo.
     * @param value value to set the StkAdjtNo
     */
    public void setStkAdjtNo(String value) {
        setAttributeInternal(STKADJTNO, value);
    }

    /**
     * Gets the attribute value for StkAdjtDt, using the alias name StkAdjtDt.
     * @return the value of StkAdjtDt
     */
    public Date getStkAdjtDt() {
        return (Date)getAttributeInternal(STKADJTDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkAdjtDt.
     * @param value value to set the StkAdjtDt
     */
    public void setStkAdjtDt(Date value) {
        setAttributeInternal(STKADJTDT, value);
    }

    /**
     * Gets the attribute value for StkAdjtType, using the alias name StkAdjtType.
     * @return the value of StkAdjtType
     */
    public Integer getStkAdjtType() {
        return (Integer)getAttributeInternal(STKADJTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkAdjtType.
     * @param value value to set the StkAdjtType
     */
    public void setStkAdjtType(Integer value) {
        setAttributeInternal(STKADJTTYPE, value);
    }

    /**
     * Gets the attribute value for RefDocId, using the alias name RefDocId.
     * @return the value of RefDocId
     */
    public String getRefDocId() {
        return (String)getAttributeInternal(REFDOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RefDocId.
     * @param value value to set the RefDocId
     */
    public void setRefDocId(String value) {
        setAttributeInternal(REFDOCID, value);
    }

    /**
     * Gets the attribute value for StkAdjtStat, using the alias name StkAdjtStat.
     * @return the value of StkAdjtStat
     */
    public Integer getStkAdjtStat() {
        return (Integer)getAttributeInternal(STKADJTSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkAdjtStat.
     * @param value value to set the StkAdjtStat
     */
    public void setStkAdjtStat(Integer value) {
        setAttributeInternal(STKADJTSTAT, value);
    }

    /**
     * Gets the attribute value for AuthStat, using the alias name AuthStat.
     * @return the value of AuthStat
     */
    public String getAuthStat() {
        return (String)getAttributeInternal(AUTHSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for AuthStat.
     * @param value value to set the AuthStat
     */
    public void setAuthStat(String value) {
        setAttributeInternal(AUTHSTAT, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSTCKADJTITM() {
        return (RowIterator)getAttributeInternal(STCKADJTITM);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param whId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String whId, String docId) {
        return new Key(new Object[]{cldId, slocId, orgId, whId, docId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        Integer userId=Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_USR}").toString());
        Integer sloc_id =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = (String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cld_id = (String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        setSlocId(sloc_id);
        setOrgId(org_id);
        setCldId(cld_id);
        Integer fyid=1;
        fyid=(Integer)(callStoredFunction(Types.INTEGER,"APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cld_id,org_id,new Timestamp(System.currentTimeMillis())}));
        setFyId(fyid);
        setDocDt(new Timestamp(System.currentTimeMillis()));
        String docId =(String)(callStoredFunction(Types.VARCHAR, "app.pkg_app.get_txn_id (?,?,?,?,?)", new Object[] {userId,org_id,sloc_id,new Integer(18517),cld_id}));
        setDocId(docId);
        String whId =(String)(callStoredFunction(Types.VARCHAR, "MM.GET_WH_ID(?,?,?,?)", new Object[] {cld_id,sloc_id,org_id,userId}));   
        setWhId(whId);
        Date currDate = (Date)Date.getCurrentDate();
        setStkAdjtDt(currDate);
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
       // super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Integer userId=Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_USR}").toString());
        Integer sloc_id =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = (String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cld_id = (String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        
        if(operation==DML_INSERT)
        { 
           setUsrIdCreate(userId);
          setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
          setUsrIdMod(userId);
          setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        }
        
        if(operation== DML_UPDATE)
        {
            setUsrIdMod(Integer.valueOf(userId));
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        }
        
        super.doDML(operation, e);
    }
    
    public static Object evaluateEL(String el) 
    {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory =
        facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, el, Object.class);
        return exp.getValue(elContext);
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
           CallableStatement st = null;
           try {
               st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
               if (bindVars != null) {
                   for (int z = 0; z < bindVars.length; z++) {
                       st.setObject(z + 2, bindVars[z]);
                   }
               }
               st.executeUpdate();
               return st.getObject(1);

           } catch (SQLException e) {
               throw new JboException(e);
           } finally {
               if (st != null) {
                   try {
                       st.close();
                   } catch (SQLException e) {e.printStackTrace();}
               }
           }
       }
}
