package appsecrole.model.module;

import appsecrole.model.module.common.AppRolesAM;
import appsecrole.model.views.AppMnuVWVOImpl;
import appsecrole.model.views.AppSecUsrRoleLnkVOImpl;

import appsecrole.model.views.UserOrgLinkVOImpl;
import appsecrole.model.views.dualVOImpl;

import appsecrole.model.views.dualVORowImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 19 11:43:13 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppRolesAMImpl extends ApplicationModuleImpl implements AppRolesAM {
    /**
     * This is the default constructor (do not remove).
     */
    
     public static int VARCHAR = Types.VARCHAR;
        String add_mode = null;
        String edit_mode = null;
        String view_mode = null;
        String del_mode = null;
    public AppRolesAMImpl() {
    }

    /**
     * Container's getter for AppSecUsrRole1.
     * @return AppSecUsrRole1
     */
    public ViewObjectImpl getAppSecUsrRole1() {
        return (ViewObjectImpl)findViewObject("AppSecUsrRole1");
    }

    /**
     * Container's getter for AppSecUsrRoleMnu1.
     * @return AppSecUsrRoleMnu1
     */
    public ViewObjectImpl getAppSecUsrRoleMnu1() {
        return (ViewObjectImpl)findViewObject("AppSecUsrRoleMnu1");
    }

    /**
     * Container's getter for AppSecUsrRoleMnu2.
     * @return AppSecUsrRoleMnu2
     */
    public ViewObjectImpl getAppSecUsrRoleMnu2() {
        return (ViewObjectImpl)findViewObject("AppSecUsrRoleMnu2");
    }

    /**
     * Container's getter for RoleMenuVL1.
     * @return RoleMenuVL1
     */
    public ViewLinkImpl getRoleMenuVL1() {
        return (ViewLinkImpl)findViewLink("RoleMenuVL1");
    }

    /**
     * Container's getter for AppSecUsr1.
     * @return AppSecUsr1
     */
    public ViewObjectImpl getAppSecUsr1() {
        return (ViewObjectImpl)findViewObject("AppSecUsr1");
    }

    /**
     * Container's getter for AppSecUsrRoleLnk1.
     * @return AppSecUsrRoleLnk1
     */
    public AppSecUsrRoleLnkVOImpl getAppSecUsrRoleLnk1() {
        return (AppSecUsrRoleLnkVOImpl)findViewObject("AppSecUsrRoleLnk1");
    }

    /**
     * Container's getter for AppSecUsrRoleLnk2.
     * @return AppSecUsrRoleLnk2
     */
    public AppSecUsrRoleLnkVOImpl getAppSecUsrRoleLnk2() {
        return (AppSecUsrRoleLnkVOImpl)findViewObject("AppSecUsrRoleLnk2");
    }

    /**
     * Container's getter for UsrRoleLinkVL1.
     * @return UsrRoleLinkVL1
     */
    public ViewLinkImpl getUsrRoleLinkVL1() {
        return (ViewLinkImpl)findViewLink("UsrRoleLinkVL1");
    }


    /**
     * Container's getter for AppPkg1.
     * @return AppPkg1
     */
    public ViewObjectImpl getAppPkg1() {
        return (ViewObjectImpl)findViewObject("AppPkg1");
    }


    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }
    public String resolvEl(String data) {
         FacesContext fc = FacesContext.getCurrentInstance();
         Application app = fc.getApplication();
         ExpressionFactory elFactory = app.getExpressionFactory();
         ELContext elContext = fc.getELContext();
         ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
         String msg = valueExp.getValue(elContext).toString();
         return msg;
     }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.registerOutParameter(7, VARCHAR);
                st.registerOutParameter(8, VARCHAR);
                st.registerOutParameter(9, VARCHAR);
                st.registerOutParameter(10, VARCHAR);
                st.executeUpdate();
                try {
                    setAdd_mode(st.getObject(7).toString());
                    setEdit_mode((st.getObject(8).toString()));
                    setView_mode(st.getObject(9).toString());
                    setDel_mode(st.getObject(10).toString());
                } catch (NullPointerException e) {
                    System.out.println(e);
                    e.printStackTrace();
                }
                return st.getObject(1);

            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {

                    }
                }
            }
        }
    
    
    public Integer on_load_page()
               {  int count = 0;
               String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
               Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
               String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
               Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
               callStoredFunction(VARCHAR,"fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                          new Object[] { cld_id, sloc_id, org_id, 23,usr_id});
               String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
               if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
               {            count = 1;
                   }
               else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
               {
                   count = 1;
                   }
               else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
               else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
                else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
               {
                  count = 1; 
                   }
               Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
               paramMap.put("PARAM_PG_ADD_MD", add_mode); 
               paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
               paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
               paramMap.put("PARAM_PG_DEL_MD", del_mode); 
            return count;
           }

    /**
     * Container's getter for AppSearchRole1.
     * @return AppSearchRole1
     */
    public ViewObjectImpl getAppSearchRole1() {
        return (ViewObjectImpl)findViewObject("AppSearchRole1");
    }


    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl)findViewObject("Org1");
    }

    /**
     * Container's getter for AppSecUsrRole2.
     * @return AppSecUsrRole2
     */
    public ViewObjectImpl getAppSecUsrRole2() {
        return (ViewObjectImpl)findViewObject("AppSecUsrRole2");
    }

    /**
     * Container's getter for Org2.
     * @return Org2
     */
    public ViewObjectImpl getOrg2() {
        return (ViewObjectImpl)findViewObject("Org2");
    }

    /**
     * Container's getter for AppSecUsrRoleToOrgVL.
     * @return AppSecUsrRoleToOrgVL
     */
    public ViewLinkImpl getAppSecUsrRoleToOrgVL() {
        return (ViewLinkImpl)findViewLink("AppSecUsrRoleToOrgVL");
    }

    /**
     * Container's getter for Org3.
     * @return Org3
     */
    public ViewObjectImpl getOrg3() {
        return (ViewObjectImpl)findViewObject("Org3");
    }

    /**
     * Container's getter for AppSecUsrRoleToOrgVL1.
     * @return AppSecUsrRoleToOrgVL1
     */
    public ViewLinkImpl getAppSecUsrRoleToOrgVL1() {
        return (ViewLinkImpl)findViewLink("AppSecUsrRoleToOrgVL1");
    }


    /**
     * Container's getter for AppSecUsrRole3.
     * @return AppSecUsrRole3
     */
    public ViewObjectImpl getAppSecUsrRole3() {
        return (ViewObjectImpl)findViewObject("AppSecUsrRole3");
    }

    /**
     * Container's getter for OrgSecUsr1.
     * @return OrgSecUsr1
     */
    public ViewObjectImpl getOrgSecUsr1() {
        return (ViewObjectImpl)findViewObject("OrgSecUsr1");
    }

    /**
     * Container's getter for AppSecUsrRoleToOrgSecusrVL.
     * @return AppSecUsrRoleToOrgSecusrVL
     */
    public ViewLinkImpl getAppSecUsrRoleToOrgSecusrVL() {
        return (ViewLinkImpl)findViewLink("AppSecUsrRoleToOrgSecusrVL");
    }


    /**
     * Container's getter for OrgSecUsr2.
     * @return OrgSecUsr2
     */
    public ViewObjectImpl getOrgSecUsr2() {
        return (ViewObjectImpl)findViewObject("OrgSecUsr2");
    }

    /**
     * Container's getter for AppSecUsrRoleToOrgSecusrVL1.
     * @return AppSecUsrRoleToOrgSecusrVL1
     */
    public ViewLinkImpl getAppSecUsrRoleToOrgSecusrVL1() {
        return (ViewLinkImpl)findViewLink("AppSecUsrRoleToOrgSecusrVL1");
    }

    /**
     * Container's getter for UserOrgLink1.
     * @return UserOrgLink1
     */
    public UserOrgLinkVOImpl getUserOrgLink1() {
        return (UserOrgLinkVOImpl)findViewObject("UserOrgLink1");
    }

    /**
     * Container's getter for dual1.
     * @return dual1
     */
    public dualVOImpl getdual1() {
        return (dualVOImpl)findViewObject("dual1");
    }

    /**
     * Container's getter for AppMnuVW1.
     * @return AppMnuVW1
     */
    public AppMnuVWVOImpl getAppMnuVW1() {
        return (AppMnuVWVOImpl)findViewObject("AppMnuVW1");
    }
     public void setOrgLOV(){
           /*  AppRolesAMImpl am = (AppRolesAMImpl)resolvElDC("AppRolesAMDataControl"); */
            ViewObject roleVO = this.getAppSecUsrRole1();
            ViewObjectImpl roleLinkVO = this.getAppSecUsrRoleLnk2();
            Row row = roleVO.getCurrentRow();
            System.out.println("Row Count before named where clause"+roleLinkVO.getRowCount());
            Integer usrRoleId = Integer.parseInt(row.getAttribute("UsrRoleId").toString());
            System.out.println(">>>>>>>>>>>>>>>>>.. usrRoleId ="+usrRoleId);
            roleLinkVO.setNamedWhereClauseParam("RoleIdBindVar", usrRoleId);
            System.out.println("Row Count After the clause"+roleLinkVO.getRowCount());
            
            roleLinkVO.executeQuery();
        
        } 
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }

    /**
     * Container's getter for LovMenuName1.
     * @return LovMenuName1
     */
    public ViewObjectImpl getLovMenuName1() {
        return (ViewObjectImpl)findViewObject("LovMenuName1");
    }

    /**
     * Container's getter for AppSecUsrRolToMenuNameVL1.
     * @return AppSecUsrRolToMenuNameVL1
     */
    public ViewLinkImpl getAppSecUsrRolToMenuNameVL1() {
        return (ViewLinkImpl)findViewLink("AppSecUsrRolToMenuNameVL1");
    }

    /**
     * Container's getter for NewLovForMenuName1.
     * @return NewLovForMenuName1
     */
    public ViewObjectImpl getNewLovForMenuName1() {
        return (ViewObjectImpl)findViewObject("NewLovForMenuName1");
}
    
    public void refreshMenu(){
        dualVORowImpl currentRow = (dualVORowImpl)this.getdual1().getCurrentRow();
        System.out.println("Menu count : "+ currentRow.getNewLovForMenuNameVO1().getEstimatedRowCount());
        currentRow.getNewLovForMenuNameVO1().executeQuery();
        System.out.println("Menu count : "+ currentRow.getNewLovForMenuNameVO1().getEstimatedRowCount());
    }
}
