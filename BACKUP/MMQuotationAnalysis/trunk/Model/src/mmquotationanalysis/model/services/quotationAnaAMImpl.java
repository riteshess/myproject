package mmquotationanalysis.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Timestamp;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmquotationanalysis.model.services.common.quotationAnaAM;

import mmquotationanalysis.model.views.EvalParamSetVOImpl;
import mmquotationanalysis.model.views.MmQuotVOImpl;
import mmquotationanalysis.model.views.RfqIdVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 11 14:30:48 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class quotationAnaAMImpl extends ApplicationModuleImpl implements quotationAnaAM {
    /**
     * This is the default constructor (do not remove).
     */
    public quotationAnaAMImpl() {
    }

    /**
     * Container's getter for RfqId1.
     * @return RfqId1
     */
    public RfqIdVOImpl getRfqId1() {
        return (RfqIdVOImpl)findViewObject("RfqId1");
    }

    /**
     * Container's getter for MMQuotEvalVw1.
     * @return MMQuotEvalVw1
     */
    public ViewObjectImpl getMMQuotEvalVw1() {
        return (ViewObjectImpl)findViewObject("MMQuotEvalVw1");
    }

    /**
     * Container's getter for RfqIdTOQuotEvalVwVL1.
     * @return RfqIdTOQuotEvalVwVL1
     */
    public ViewLinkImpl getRfqIdTOQuotEvalVwVL1() {
        return (ViewLinkImpl)findViewLink("RfqIdTOQuotEvalVwVL1");
    }

    /**
     * Container's getter for EvalParamSet1.
     * @return EvalParamSet1
     */
    public EvalParamSetVOImpl getEvalParamSet1() {
        return (EvalParamSetVOImpl)findViewObject("EvalParamSet1");
    }


    /**
     * Container's getter for MmQuotAna2.
     * @return MmQuotAna2
     */
    public ViewObjectImpl getMmQuotAna2() {
        return (ViewObjectImpl)findViewObject("MmQuotAna2");
    }

    /**
     * Container's getter for MmQuot1.
     * @return MmQuot1
     */
    public ViewObjectImpl getMmQuot1() {
        return (ViewObjectImpl)findViewObject("MmQuot1");
    }


    /**
     * Container's getter for MmQuotAna3.
     * @return MmQuotAna3
     */
    public ViewObjectImpl getMmQuotAna3() {
        return (ViewObjectImpl)findViewObject("MmQuotAna3");
    }

    /**
     * Container's getter for QuotTOQuotAna1.
     * @return QuotTOQuotAna1
     */
    public ViewLinkImpl getQuotTOQuotAna1() {
        return (ViewLinkImpl)findViewLink("QuotTOQuotAna1");
    }

    /**
     * Container's getter for QuotAnaRsltRFQID1.
     * @return QuotAnaRsltRFQID1
     */
    public ViewObjectImpl getQuotAnaRsltRFQID1() {
        return (ViewObjectImpl)findViewObject("QuotAnaRsltRFQID1");
    }


    /**
     * Container's getter for MmQuotAnaRslt1.
     * @return MmQuotAnaRslt1
     */
    public ViewObjectImpl getMmQuotAnaRslt1() {
        return (ViewObjectImpl)findViewObject("MmQuotAnaRslt1");
    }

    /**
     * Container's getter for AnaRsltRfqIdTOAnaRsltVL1.
     * @return AnaRsltRfqIdTOAnaRsltVL1
     */
    public ViewLinkImpl getAnaRsltRfqIdTOAnaRsltVL1() {
        return (ViewLinkImpl)findViewLink("AnaRsltRfqIdTOAnaRsltVL1");
    }

    /**
     * Container's getter for MmQuotAnaRslt2.
     * @return MmQuotAnaRslt2
     */
    public ViewObjectImpl getMmQuotAnaRslt2() {
        return (ViewObjectImpl)findViewObject("MmQuotAnaRslt2");
    }

    /**
     * Container's getter for MmQuot2.
     * @return MmQuot2
     */
    public ViewObjectImpl getMmQuot2() {
        return (ViewObjectImpl)findViewObject("MmQuot2");
    }

    /**
     * Container's getter for RfqIdTOMMQuotVL1.
     * @return RfqIdTOMMQuotVL1
     */
    public ViewLinkImpl getRfqIdTOMMQuotVL1() {
        return (ViewLinkImpl)findViewLink("RfqIdTOMMQuotVL1");
    }

    /**
     * Container's getter for LovParamId.
     * @return LovParamId
     */
    public ViewObjectImpl getLovParamId() {
        return (ViewObjectImpl)findViewObject("LovParamId");
    }
    
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            quotationAnaAMImpl am = (quotationAnaAMImpl)resolvElDC("quotationAnaAMDataControl");
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);

                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    
    
    
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;
    
    public Integer pendingPOCheck(Integer SlocId,String CldId,String OrgId,Integer QuotAnaDocNo){
        Row currPO=this.getMmQuotAnaRslt1().getCurrentRow();
        String docIdTxn= currPO.getAttribute("EvalId").toString();
        System.out.println("DOCIDTXN--"+docIdTxn);
        Integer DOCTYPEID=0;
        Object obj= callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,QuotAnaDocNo,docIdTxn,DOCTYPEID });
        Integer usrId=null; 
        if(obj!=null){
            usrId=Integer.parseInt(obj.toString());
        }
      /*   Integer.parseInt(callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                   CldId,
                                                                                                                   OrgId,
                                                                                                                   PoDocNo,
                                                                                                                   docIdTxn }).toString()); */
       System.out.println("User id pending in impl--"+usrId);
        return usrId;
        
    }
    
    public String getWfNo(Integer sloc_id,String cld_id,String org_id,Integer doc_no) {
        Integer DoctypeId=0;
        try {
            Object obj=callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)",
                                      new Object[] {sloc_id, cld_id, org_id, doc_no,DoctypeId });
            System.out.println("WFNO in AMimpl:"+obj.toString());
            return obj.toString();
        } catch (Exception e) {
            System.out.println("GETWFNO--"+e);
            return "0";
        }
    
    }
    
    public Integer getUsrLvl(Integer SlocId,String CldId,String OrgId,Integer usr_id,String WfNum,String QuotAnaDocId){
        Integer DocTypId=0;
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId,CldId,
                                                                                                                                OrgId,
                                                                                                                                usr_id,
                                                                                                                                WfNum,
                                                                                                                                QuotAnaDocId,DocTypId }).toString());


    }
    public Integer insIntoTxn(Integer sloc_id,String cld_id,String pOrgId,Integer PO_DOC_NO,String WfNum,String poDocId,Integer usr_idFrm,Integer usr_idTo,Integer levelTo,Integer levelFrm,String action,String remark,Number amount ){
    Integer DocTypId=0;
    System.out.println("sloc_id "+sloc_id+"cld_id   "+cld_id+"pOrgId   "+pOrgId+"PO_DOC_NO   "+PO_DOC_NO+"WfNum "+WfNum+"poDocId "+poDocId+"usr_idFrm  "+usr_idFrm+"usr_idTo   "+usr_idTo+"levelFrm "+levelFrm+"levelTo  "+levelTo+"action  "+action+"remark  "+remark+"amount"+amount);
     return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                        new Object[] { sloc_id, cld_id, pOrgId, PO_DOC_NO,DocTypId, WfNum, poDocId,
                                                       usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
                                                       amount}).toString());
    
    }
    
    public void updateQuotAnaStatus() {
        ViewObjectImpl quotAnaRslt = getMmQuotAnaRslt1();
        //  Row quortana=this.getMmQuotAna3().getCurrentRow();
        Row currQuot = this.getMmQuotAnaRslt1().getCurrentRow();
        String evalId = currQuot.getAttribute("EvalId").toString();
        String rfqDocId = currQuot.getAttribute("RfqDocId").toString();

        ViewObjectImpl quotAna = getMmQuotAna2();

        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String retVal = resolvEl("#{pageFlowScope.WF_RET_VALUE}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        // Integer userId = Integer.parseInt(drftpoRw.getAttribute("UsrIdCreate").toString());
        System.out.println("evalId   " + evalId + "slocId   " + slocId + "cld_id   " + cld_id + "orgId   " + orgId +
                           "rfqDocId   " + rfqDocId);
        RowQualifier rq = new RowQualifier(quotAnaRslt);
        rq.setWhereClause("EvalId ='" + evalId + "' and SlocId = " + slocId + " and CldId = '" + cld_id +
                          "' and OrgId = '" + orgId + "' and RfqDocId = '" + rfqDocId + "'");
        System.out.println("query   : " + rq.getExprStr());
        Row[] rows = quotAnaRslt.getFilteredRows(rq);
        System.out.println("row lenth      " + rows.length);
        System.out.println("retvale    " + retVal);
        if (rows.length > 0) {
            for (Row r : rows) {
                if ("A".equals(retVal)) {
                    r.setAttribute("QuotAnaStatus", 234);
                    r.setAttribute("EvalDt", new Timestamp(System.currentTimeMillis()));
                    if (evalId != null) {
                       // RowQualifier AnaRq = new RowQualifier(quotAna);
                        //AnaRq.setWhereClause("EvalId ='" + evalId + "' and SlocId = " + slocId + " and CldId = '" +
                          //                   cld_id + "' and OrgId = '" + orgId + "'");
                        Row[] filteredRows = quotAna.getFilteredRows("EvalId",evalId);
                        System.out.println("rows getting after filtered rows : "+filteredRows.length);
                        if (filteredRows.length > 0) {
                            for (Row anlRow : filteredRows) {
                                anlRow.setAttribute("EvalDt", new Timestamp(System.currentTimeMillis()));
                            }
                        }
                    }
                } else if ("F".equals(retVal)) {
                    r.setAttribute("QuotAnaStatus", 233);
                }

            }
        }
        rq.setWhereClause(null);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    
    public void setParamQuotAnaRsltRfq(String cldId,Integer slocId,String orgId)
    {
        ViewCriteria vc=this.getQuotAnaRsltRFQID1().getViewCriteria("QuotAnaRsltRFQIDVOCriteria");
            this.getQuotAnaRsltRFQID1().setNamedWhereClauseParam("CldIdBindVar", cldId);
            this.getQuotAnaRsltRFQID1().setNamedWhereClauseParam("SlocIdBindVar", slocId);
            this.getQuotAnaRsltRFQID1().setNamedWhereClauseParam("OrgIdBindVar", orgId);
            this.getQuotAnaRsltRFQID1().setNamedWhereClauseParam("BindRfqDocId", null);
            this.getQuotAnaRsltRFQID1().applyViewCriteria(vc);
            this.getQuotAnaRsltRFQID1().executeQuery();

        }

    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrId1() {
        return (ViewObjectImpl)findViewObject("LovUsrId1");
    }

    /**
     * Container's getter for SearchQA1.
     * @return SearchQA1
     */
    public ViewObjectImpl getSearchQA1() {
        return (ViewObjectImpl)findViewObject("SearchQA1");
    }
    
    public void searchbyRfq(){
        String RfqDoc=null;
        ViewObjectImpl srch = this.getSearchQA1();
        Row currentRow = srch.getCurrentRow();
        ViewObjectImpl anaRsltRFQID1 = this.getQuotAnaRsltRFQID1();
       // ViewObjectImpl lovvo = this.getLovRfqIdForDisp1();
        if(currentRow.getAttribute("RfqId")!=null){
           // lovvo.setNamedWhereClauseParam("BindRfqId", currentRow.getAttribute("RfqId"));
           // lovvo.executeQuery();
           // RowSetIterator lovitr = lovvo.createRowSetIterator(null);
           // while(lovitr.hasNext()){
              //  Row next = lovitr.next();
               //  if(next.getAttribute("DocId")!=null){
                 //RfqDoc = next.getAttribute("DocId").toString();
                 anaRsltRFQID1.setNamedWhereClauseParam("BindRfqDocId", currentRow.getAttribute("RfqId"));
        //}
        //}
        }
        else{
            anaRsltRFQID1.setNamedWhereClauseParam("BindRfqDocId", null);
            //lovvo.setNamedWhereClauseParam("BindRfqId", null);
            //lovvo.executeQuery();
        }
        anaRsltRFQID1.executeQuery();
    }

    public void resetquotAna(){
        this.getSearchQA1().getCurrentRow().setAttribute("RfqId",null);
        this.getSearchQA1().executeQuery();
        this.getQuotAnaRsltRFQID1().setNamedWhereClauseParam("BindRfqDocId", null);
       // this.getLovRfqIdForDisp1().setNamedWhereClauseParam("BindRfqId", null);
       // this.getLovRfqIdForDisp1().executeQuery();
        this.getQuotAnaRsltRFQID1().executeQuery();
    }
    /**
     * Container's getter for LovRfqIdForDisp1.
     * @return LovRfqIdForDisp1
     */
    public ViewObjectImpl getLovRfqIdForDisp1() {
        return (ViewObjectImpl)findViewObject("LovRfqIdForDisp1");
    }

    /**
     * Container's getter for LovParamSet.
     * @return LovParamSet
     */
    public ViewObjectImpl getLovParamSet() {
        return (ViewObjectImpl)findViewObject("LovParamSet");
    }

    /**
     * Container's getter for EvalParamSetFltr.
     * @return EvalParamSetFltr
     */
    public ViewObjectImpl getEvalParamSetFltr() {
        return (ViewObjectImpl)findViewObject("EvalParamSetFltr");
    }
}
