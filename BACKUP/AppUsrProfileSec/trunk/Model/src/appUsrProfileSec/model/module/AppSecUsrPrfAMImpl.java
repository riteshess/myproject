package appUsrProfileSec.model.module;

import appUsrProfileSec.model.module.common.AppSecUsrPrfAM;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 06 13:12:40 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppSecUsrPrfAMImpl extends ApplicationModuleImpl implements AppSecUsrPrfAM {


    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;


    /**
     * This is the default constructor (do not remove).
     */
    public AppSecUsrPrfAMImpl() {
    }

    /**
     * Container's getter for AppSecUsrPrfVO1.
     * @return AppSecUsrPrfVO1
     */
    public ViewObjectImpl getAppSecUsrPrfVO1() {
        return (ViewObjectImpl)findViewObject("AppSecUsrPrfVO1");
    }


    /**
     * this method is to search string using bind variable
     **/
    public void searchUserProfileDescription(String searchString) {
        String newSearchString = searchString;
        System.out.println(searchString);
        ViewObject appSecUsrPrf = this.getAppSecUsrPrfVO1();
        if (newSearchString.contains("'")) {
            newSearchString = newSearchString.replace("'", "''");
        }
        appSecUsrPrf.setWhereClause("UPPER(SEC_USR_PRF_DESC) like '%" + newSearchString.toUpperCase() + "%'");
        appSecUsrPrf.executeQuery();
    }


    /**
     * this method is to search string using bind variable
     **/
    public void resetUserProfileDescription() {
        ViewObject appSecUsrPrf = this.getAppSecUsrPrfVO1();

        appSecUsrPrf.setWhereClause(null);
        appSecUsrPrf.executeQuery();
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            //System.out.println("84");
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    //System.out.println(z);
                }
            }
            //System.out.println("91");
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            //System.out.println("99");
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }


    public Integer on_load_page() {
        //System.out.println("on load");
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //System.out.println(cld_id);
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        //System.out.println(sloc_id);
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //System.out.println(org_id);
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());

        //System.out.println("b4 calling");
        callStoredFunction(VARCHAR, "App.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                           new Object[] { cld_id, sloc_id, org_id, 1, usr_id });
        //System.out.println(cld_id+"  "+ sloc_id+"   " +org_id+"   "+ 1+"  "+usr_id );
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);
        String addMode = resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString();
        String editMode = resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString();
        String viewMode = resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString();
        String deleteMode = resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();
        return count;
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    public Integer nameValidator(String name) {
        System.out.println("name = " + name);
        if (name!= null && name.length()>0) {
            ViewObjectImpl app = this.getAppSecUsrPrfVO1();
            Row currentRow = app.getCurrentRow();
          /*  Row[] filteredRows = app.getFilteredRows("SecUsrPrfDesc", name);
            if (filteredRows.length > 1)
                return 1;
            else
                return 0; */
            RowSetIterator itr = app.createRowSetIterator(null);
            while(itr.hasNext())
            {
                Row next = itr.next();
                if(next!=currentRow)
                {
                    if(next.getAttribute("SecUsrPrfDesc")!=null)
                    {
                        String nm = next.getAttribute("SecUsrPrfDesc").toString().toUpperCase();
                        if(nm.equals(name))
                        {
                            System.out.println("name matched");
                            return 1;
                        }
                    }
                }

            }

        }
            return 0;
    }
    
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }
    protected Object callStoredFun(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                AppSecUsrPrfAMImpl am = (AppSecUsrPrfAMImpl)resolvElDC("AppSecUsrPrfAMDataControl");
                st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1,sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
     
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) { throw new JboException(e);
                    }
                }
            }
        }
    
    public String checkDeletablePrf(){
        ViewObjectImpl prf = this.getAppSecUsrPrfVO1();
        Row currentRow = prf.getCurrentRow();
        Integer prfid = Integer.parseInt(currentRow.getAttribute("SecUsrPrfId").toString());
        System.out.println("profile id in parm-->"+prfid);
        String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        System.out.println("cloud id in param--->"+cld);
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        System.out.println("sloc id in param--->"+sloc);
        System.out.println("Function called-------for dele check---");
        String rslt = callStoredFun(Types.VARCHAR, "APP_IS_PRF_DELETABLE(?,?,?)", new Object[] { cld, sloc, prfid}).toString();
        
        System.out.println("just aft fun call result is--"+rslt);
        return rslt;
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}
