package mmpurorder.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmpurorder.model.service.PurOrderAMImpl;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 24 17:57:48 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DlvSchdlBalanceViewRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getSlocId();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getOrgId();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        DocId {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getDocId();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        ItemId {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getItemId();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setItemId((String)value);
            }
        }
        ,
        ItmDesc {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getItmDesc();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setItmDesc((String)value);
            }
        }
        ,
        ItmUom {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getItmUom();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setItmUom((String)value);
            }
        }
        ,
        UomDesc {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getUomDesc();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setUomDesc((String)value);
            }
        }
        ,
        OrdQty {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getOrdQty();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setOrdQty((Number)value);
            }
        }
        ,
        BalanceQty {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getBalanceQty();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setBalanceQty((Number)value);
            }
        }
        ,
        CldId {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getCldId();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SchdlQty {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getSchdlQty();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setSchdlQty((Number)value);
            }
        }
        ,
        TransSelectChkbx {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getTransSelectChkbx();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setTransSelectChkbx((String)value);
            }
        }
        ,
        TransHoOrgId {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getTransHoOrgId();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setTransHoOrgId((String)value);
            }
        }
        ,
        LovItmId {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getLovItmId();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovItmUom {
            public Object get(DlvSchdlBalanceViewRowImpl obj) {
                return obj.getLovItmUom();
            }

            public void put(DlvSchdlBalanceViewRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DlvSchdlBalanceViewRowImpl object);

        public abstract void put(DlvSchdlBalanceViewRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITEMID = AttributesEnum.ItemId.index();
    public static final int ITMDESC = AttributesEnum.ItmDesc.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int UOMDESC = AttributesEnum.UomDesc.index();
    public static final int ORDQTY = AttributesEnum.OrdQty.index();
    public static final int BALANCEQTY = AttributesEnum.BalanceQty.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SCHDLQTY = AttributesEnum.SchdlQty.index();
    public static final int TRANSSELECTCHKBX = AttributesEnum.TransSelectChkbx.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int LOVITMID = AttributesEnum.LovItmId.index();
    public static final int LOVITMUOM = AttributesEnum.LovItmUom.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DlvSchdlBalanceViewRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemId.
     * @return the ItemId
     */
    public String getItemId() {
        return (String) getAttributeInternal(ITEMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemId.
     * @param value value to set the  ItemId
     */
    public void setItemId(String value) {
        setAttributeInternal(ITEMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmDesc.
     * @return the ItmDesc
     */
    public String getItmDesc() {
        return (String) getAttributeInternal(ITMDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmDesc.
     * @param value value to set the  ItmDesc
     */
    public void setItmDesc(String value) {
        setAttributeInternal(ITMDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUom.
     * @return the ItmUom
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmUom.
     * @param value value to set the  ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UomDesc.
     * @return the UomDesc
     */
    public String getUomDesc() {
        return (String) getAttributeInternal(UOMDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UomDesc.
     * @param value value to set the  UomDesc
     */
    public void setUomDesc(String value) {
        setAttributeInternal(UOMDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrdQty.
     * @return the OrdQty
     */
    public Number getOrdQty() {
        return (Number) getAttributeInternal(ORDQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrdQty.
     * @param value value to set the  OrdQty
     */
    public void setOrdQty(Number value) {
        setAttributeInternal(ORDQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BalanceQty.
     * @return the BalanceQty
     */
    public Number getBalanceQty() {
        return (Number) getAttributeInternal(BALANCEQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BalanceQty.
     * @param value value to set the  BalanceQty
     */
    public void setBalanceQty(Number value) {
        setAttributeInternal(BALANCEQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SchdlQty.
     * @return the SchdlQty
     */
    public Number getSchdlQty() {
        //MmDrftPo.PoType==171 ? BalanceQty : 0
   /*   PurOrderAMImpl am=(PurOrderAMImpl)resolvElDC("PurOrderAMDataControl");
     Number num=getBalanceQty();
     if(!(Integer.parseInt(am.getMmDrftPo().getCurrentRow().getAttribute("PoType").toString())==172))
     {
         return num;
     }else{
        return (Number) getAttributeInternal(SCHDLQTY);
     } */
       // if(getAttributeInternal(SCHDLQTY)!=null)
        return (Number) getAttributeInternal(SCHDLQTY);
       // else
       //return getBalanceQty();

    }
    
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
        elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SchdlQty.
     * @param value value to set the  SchdlQty
     */
    public void setSchdlQty(Number value) {
        setAttributeInternal(SCHDLQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSelectChkbx.
     * @return the TransSelectChkbx
     */
    public String getTransSelectChkbx() {
        return (String) getAttributeInternal(TRANSSELECTCHKBX);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSelectChkbx.
     * @param value value to set the  TransSelectChkbx
     */
    public void setTransSelectChkbx(String value) {
        setAttributeInternal(TRANSSELECTCHKBX, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        String p_horg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        return p_horg_id;
       // return (String) getAttributeInternal(TRANSHOORGID);
    }
    
    public String resolvEl(String data){
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           String Message=valueExp.getValue(elContext).toString();
           return Message;
         }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmId.
     */
    public RowSet getLovItmId() {
        return (RowSet)getAttributeInternal(LOVITMID);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmUom.
     */
    public RowSet getLovItmUom() {
        return (RowSet)getAttributeInternal(LOVITMUOM);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
