package defineworkflowapp.model.services;

import defineworkflowapp.model.services.common.DefineWorkFlowAM;

import defineworkflowapp.model.views.AppWfDocMapVOImpl;
import defineworkflowapp.model.views.AppWfLvlVOImpl;
import defineworkflowapp.model.views.AppWfUsrLvlMapVOImpl;
import defineworkflowapp.model.views.DualAddDocumentVOImpl;
import defineworkflowapp.model.views.DualForSearchVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu May 29 17:19:00 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DefineWorkFlowAMImpl extends ApplicationModuleImpl implements DefineWorkFlowAM {
    /**
     * This is the default constructor (do not remove).
     */
    public DefineWorkFlowAMImpl() {
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    
    
    private static int VARCHAR = Types.VARCHAR;

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    //  System.out.println(bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    
    
    
    public void populateLevels()
    {
            String cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer slocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String orgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String hoorgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            Row r=this.getAppWf().getCurrentRow();
            String wfId=null;
            if(r.getAttribute("WfId")!=null){
                wfId = (String)r.getAttribute("WfId");
            }else{
             wfId= (String)(callStoredFunction(VARCHAR, "APP.pkg_app_gen.generate_id (?,?,?,?,?)", new Object[] { slocId,
                                                                                                                cldId,
                                                                                                               hoorgId,
                                                                                                               orgId,
                                                                                                               "APP$WF"}));
             r.setAttribute("WfId", wfId);
            }
            System.out.println("Workflow Id="+wfId);
            this.getDBTransaction().postChanges();
            ViewObjectImpl lvlVo = this.getAppWfLvl();
                    ViewObjectImpl wfVo = this.getAppWf();
                    Row row = wfVo.getCurrentRow();
                    Integer usrid1 = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                    Integer maxlvl = Integer.parseInt(row.getAttribute("WfMaxLvl").toString());
                    for (int i = 1; i <= maxlvl; i++) {
                        Row lvlRow = lvlVo.createRow();
                        lvlRow.setAttribute("WfLvl", i);
                        lvlRow.setAttribute("UsrIdCreate", usrid1);
                        lvlVo.insertRow(lvlRow);
                    }
        }
    
    public void executeCriteriaOnTf(String cldId,Integer slocId,String orgId)
    {
        ViewObjectImpl voWf=this.getAppWf();
        voWf.setNamedWhereClauseParam("cldIdBind", cldId);
            voWf.setNamedWhereClauseParam("slocIdBind", slocId);
            voWf.setNamedWhereClauseParam("orgIdBind", orgId);
            voWf.executeQuery();
        }

    /**
     * Container's getter for DualForSearch.
     * @return DualForSearch
     */
    public DualForSearchVOImpl getDualForSearch() {
        return (DualForSearchVOImpl)findViewObject("DualForSearch");
    }
    
    public void searchWorkflow()
    {
            ViewObjectImpl dualVo=this.getDualForSearch();
           String wfId = (String)dualVo.getCurrentRow().getAttribute("TransWfId");
           Integer docId = (Integer)dualVo.getCurrentRow().getAttribute("TransDocId");
           Integer docTypeId=(Integer)dualVo.getCurrentRow().getAttribute("TransDocTypeId");
           Integer usrId=(Integer)dualVo.getCurrentRow().getAttribute("TransUsrId");
           String cldId=(String)dualVo.getCurrentRow().getAttribute("TransCldId");
            Integer slocId = (Integer)dualVo.getCurrentRow().getAttribute("TransSlocId");
            String orgId=(String)dualVo.getCurrentRow().getAttribute("TransOrgId");


          
            ViewObjectImpl voWf=this.getAppWf();
                voWf.setNamedWhereClauseParam("cldIdBind", cldId);
                voWf.setNamedWhereClauseParam("slocIdBind", slocId);
                voWf.setNamedWhereClauseParam("orgIdBind", orgId);
            voWf.setNamedWhereClauseParam("wfIdBind", wfId);
            voWf.setNamedWhereClauseParam("docIdBind", docId);
            voWf.setNamedWhereClauseParam("docTypeIdBind", docTypeId);
            voWf.setNamedWhereClauseParam("usrIdBind", usrId);
                voWf.executeQuery();
        }
    
    public void resetBindVar()
    {
            ViewObjectImpl dualVo=this.getDualForSearch();
            dualVo.getCurrentRow().setAttribute("TransWfNm",null);
            dualVo.getCurrentRow().setAttribute("TransDocNm",null);
            dualVo.getCurrentRow().setAttribute("TransDocTypeNm",null);
            dualVo.getCurrentRow().setAttribute("TransUsrNm",null);
            dualVo.getCurrentRow().setAttribute("TransWfId",null);
            dualVo.getCurrentRow().setAttribute("TransDocId",null);
            dualVo.getCurrentRow().setAttribute("TransDocTypeId",null);
            dualVo.getCurrentRow().setAttribute("TransUsrId",null);
            String cldId=(String)dualVo.getCurrentRow().getAttribute("TransCldId");
            Integer slocId = (Integer)dualVo.getCurrentRow().getAttribute("TransSlocId");
            String orgId=(String)dualVo.getCurrentRow().getAttribute("TransOrgId");

            ViewObjectImpl voWf=this.getAppWf();
                voWf.setNamedWhereClauseParam("cldIdBind", cldId);
                voWf.setNamedWhereClauseParam("slocIdBind", slocId);
                voWf.setNamedWhereClauseParam("orgIdBind", orgId);
            voWf.setNamedWhereClauseParam("wfIdBind", null);
            voWf.setNamedWhereClauseParam("docIdBind", null);
            voWf.setNamedWhereClauseParam("docTypeIdBind", null);
            voWf.setNamedWhereClauseParam("usrIdBind", null);
                voWf.executeQuery();
        }

    /**
     * Container's getter for DualAddDocument.
     * @return DualAddDocument
     */
    public DualAddDocumentVOImpl getDualAddDocument() {
        return (DualAddDocumentVOImpl)findViewObject("DualAddDocument");
    }

    /**
     * Container's getter for LovDocId.
     * @return LovDocId
     */
    public ViewObjectImpl getLovDocId() {
        return (ViewObjectImpl)findViewObject("LovDocId");
    }

    /**
     * Container's getter for LovDocType.
     * @return LovDocType
     */
    public ViewObjectImpl getLovDocType() {
        return (ViewObjectImpl)findViewObject("LovDocType");
    }

    /**
     * Container's getter for AppWf.
     * @return AppWf
     */
    public ViewObjectImpl getAppWf() {
        return (ViewObjectImpl)findViewObject("AppWf");
    }

    /**
     * Container's getter for AppWfDocMap.
     * @return AppWfDocMap
     */
    public AppWfDocMapVOImpl getAppWfDocMap() {
        return (AppWfDocMapVOImpl)findViewObject("AppWfDocMap");
    }

    /**
     * Container's getter for AppWfToAppWfDocMapVL1.
     * @return AppWfToAppWfDocMapVL1
     */
    public ViewLinkImpl getAppWfToAppWfDocMapVL1() {
        return (ViewLinkImpl)findViewLink("AppWfToAppWfDocMapVL1");
    }

    /**
     * Container's getter for AppWfLvl.
     * @return AppWfLvl
     */
    public AppWfLvlVOImpl getAppWfLvl() {
        return (AppWfLvlVOImpl)findViewObject("AppWfLvl");
    }

    /**
     * Container's getter for AppWfToAppWfLvlVL1.
     * @return AppWfToAppWfLvlVL1
     */
    public ViewLinkImpl getAppWfToAppWfLvlVL1() {
        return (ViewLinkImpl)findViewLink("AppWfToAppWfLvlVL1");
    }


    /**
     * Container's getter for AppWfUsrLvlMap.
     * @return AppWfUsrLvlMap
     */
    public AppWfUsrLvlMapVOImpl getAppWfUsrLvlMap() {
        return (AppWfUsrLvlMapVOImpl)findViewObject("AppWfUsrLvlMap");
    }

    /**
     * Container's getter for AppWfDocToAppWfUsrVL1.
     * @return AppWfDocToAppWfUsrVL1
     */
    public ViewLinkImpl getAppWfDocToAppWfUsrVL1() {
        return (ViewLinkImpl)findViewLink("AppWfDocToAppWfUsrVL1");
    }

    /**
     * Container's getter for LovUsrId.
     * @return LovUsrId
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl)findViewObject("LovUsrId");
    }
    
    public void updateWfId()
    {
        String cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String orgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoorgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Row r=this.getAppWf().getCurrentRow();
        String wfId=null;
        if(r.getAttribute("WfId")!=null){}else{
         wfId= (String)(callStoredFunction(VARCHAR, "APP.pkg_app_gen.generate_id (?,?,?,?,?)", new Object[] { slocId,
                                                                                                            cldId,
                                                                                                           hoorgId,
                                                                                                           orgId,
                                                                                                           "APP$WF"}));
         r.setAttribute("WfId", wfId);
        
        ViewObjectImpl lvlVo=this.getAppWfLvl();
        RowSetIterator rsiLvl=lvlVo.createRowSetIterator(null);
            while(rsiLvl.hasNext())
            {
                Row row=rsiLvl.next();
                row.setAttribute("WfId", wfId);
                }
            rsiLvl.closeRowSetIterator();
        }
        }
    
    public void addDocument()
    {
        ViewObjectImpl wfVo=this.getAppWf();
        ViewObjectImpl dualDocVo=this.getDualAddDocument();
        ViewObjectImpl docVo=this.getAppWfDocMap();
        Integer docId = (Integer)dualDocVo.getCurrentRow().getAttribute("TransDocId");
        Integer docTypeId=new Integer(0);
        if(dualDocVo.getCurrentRow().getAttribute("TransDocTypeId")!=null)
           docTypeId = (Integer)dualDocVo.getCurrentRow().getAttribute("TransDocTypeId");
        Row newrow=docVo.createRow();
        newrow.setAttribute("CldId", wfVo.getCurrentRow().getAttribute("CldId"));
        newrow.setAttribute("SlocId", wfVo.getCurrentRow().getAttribute("SlocId"));
        newrow.setAttribute("OrgId", wfVo.getCurrentRow().getAttribute("OrgId"));
        newrow.setAttribute("WfId", wfVo.getCurrentRow().getAttribute("WfId"));
        newrow.setAttribute("DocId", docId);
        newrow.setAttribute("DocTypeId", docTypeId);
        docVo.insertRow(newrow);
        
        dualDocVo.getCurrentRow().setAttribute("TransDocNm",null);
        dualDocVo.getCurrentRow().setAttribute("TransDocTypeNm",null);
        dualDocVo.getCurrentRow().setAttribute("TransDocId",null);
        dualDocVo.getCurrentRow().setAttribute("TransDocId",null);
    }
    
    public void addUsrToDocument()
    {
            ViewObjectImpl docVo=this.getAppWfDocMap();
            ViewObjectImpl usrVo=this.getAppWfUsrLvlMap();

            Row newrow=usrVo.createRow();
            newrow.setAttribute("CldId", docVo.getCurrentRow().getAttribute("CldId"));
            newrow.setAttribute("SlocId", docVo.getCurrentRow().getAttribute("SlocId"));
            newrow.setAttribute("OrgId", docVo.getCurrentRow().getAttribute("OrgId"));
            newrow.setAttribute("WfId", docVo.getCurrentRow().getAttribute("WfId"));
            newrow.setAttribute("DocId", docVo.getCurrentRow().getAttribute("DocId"));
            newrow.setAttribute("DocTypeId", docVo.getCurrentRow().getAttribute("DocTypeId"));
            newrow.setAttribute("WfLvl", docVo.getCurrentRow().getAttribute("TransLevel"));
            newrow.setAttribute("UsrId", docVo.getCurrentRow().getAttribute("TransUsrId"));
            usrVo.insertRow(newrow);
            
            docVo.getCurrentRow().setAttribute("TransLevel",null);
            docVo.getCurrentRow().setAttribute("TransUsrId",null);
            docVo.getCurrentRow().setAttribute("TransUsrName",null);
        }
    
    public String validateWarnDays(Integer warnDays)
    {
        String valid=null;
        //System.out.println("warning days "+warnDays+" auth days is "+getAppWfLvl().getCurrentRow().getAttribute("AuthDys"));
        if(this.getAppWfLvl().getCurrentRow().getAttribute("AuthDys")!=null)
        {
            Integer authdys = (Integer)this.getAppWfLvl().getCurrentRow().getAttribute("AuthDys");
              // System.out.println("auth days and warndays compare "+warnDays.compareTo(authdys)+" authdys "+ authdys +" warnDays "+warnDays);
                
                if(warnDays.compareTo(authdys)>0){
                valid="N";
                }    
                else{
                      valid="Y";
                    }
        }
        
        System.out.println("valid days is "+valid);
        return valid;
        }
    
    public String validateAuthDays(Integer authDays)
    {
            String valid=null;
            if(this.getAppWfLvl().getCurrentRow().getAttribute("WarnDys")!=null)
            {
                Integer warndys = (Integer)this.getAppWfLvl().getCurrentRow().getAttribute("WarnDys");
              //  System.out.println("warn days value is "+warndys +"auth days is"+authDays);
                if(authDays.compareTo(warndys)<0){
                    valid="N";
                }
                else{
                        valid="Y";
                }
            }
           
            return valid;
        
        }
    
    public String validateDoc()
    {
        String ret="N";
            Row r=this.getDualAddDocument().getCurrentRow();
        if(r.getAttribute("TransDocId")!=null)
        {
            ret="Y";
            /* String typeexist="N";
                this.getLovDocType().setNamedWhereClauseParam("cldIdBindVar", r.getAttribute("TransCldId"));
                this.getLovDocType().setNamedWhereClauseParam("slocIdBindVar",  r.getAttribute("TransSlocId"));
                this.getLovDocType().setNamedWhereClauseParam("orgIdBindVar",  r.getAttribute("TransOrgId"));
                this.getLovDocType().setNamedWhereClauseParam("docIdBindVar",  r.getAttribute("TransDocId"));
                this.getLovDocType().executeQuery();
            RowSetIterator itr=this.getLovDocType().createRowSetIterator(null);
            while(itr.hasNext())
            {
                Row row=itr.next();
                if(row.getAttribute("DocTypId").equals(0)){}
                else
                {
                    typeexist="Y";
                    break;
                }
                }
            itr.closeRowSetIterator();
            if(typeexist.equals("N"))
            {
                this.getAppWfDocMap().getFilteredRows("DocId");
                } */
            }
        else
            ret="N";
        return ret;
        }
    
    public String validateDocType()
    {
        String ret="N";
        Row r=this.getDualAddDocument().getCurrentRow();
            this.getLovDocType().setNamedWhereClauseParam("cldIdBindVar", r.getAttribute("TransCldId"));
            this.getLovDocType().setNamedWhereClauseParam("slocIdBindVar",  r.getAttribute("TransSlocId"));
            this.getLovDocType().setNamedWhereClauseParam("orgIdBindVar",  r.getAttribute("TransOrgId"));
            this.getLovDocType().setNamedWhereClauseParam("docIdBindVar",  r.getAttribute("TransDocId"));
            this.getLovDocType().executeQuery();
            Row[] frlovdoc=  this.getLovDocType().getFilteredRows("DocTypId",r.getAttribute("TransDocTypeId"));
             if(frlovdoc.length>0) {
          RowQualifier rq=new RowQualifier(this.getAppWfDocMap());
          rq.setWhereClause("CldId='"+r.getAttribute("TransCldId")+"' and SlocId="+ r.getAttribute("TransSlocId")+" and OrgId='"+r.getAttribute("TransOrgId")+"' and DocId="+ r.getAttribute("TransDocId")+" and DocTypeId="+r.getAttribute("TransDocTypeId"));
         Row fr[]=this.getAppWfDocMap().getFilteredRows(rq);
         if(fr.length>0)
             ret="D";
         else
             ret="Y";
              }
             else
                 ret="N";
       return ret;
        }
    
    public String validateLevel()
    {
        String ret="N";
        if(this.getAppWfDocMap().getCurrentRow().getAttribute("TransLevel")!=null)
        ret="Y";
        else
        ret= "N";
        return ret;
        }
    
    public String validateUsr()
    {
        String ret="N";
            if(this.getAppWfDocMap().getCurrentRow().getAttribute("TransUsrId")!=null)
            {
                Row r=this.getAppWfDocMap().getCurrentRow();
                RowQualifier rq=new RowQualifier(this.getAppWfUsrLvlMap());
                rq.setWhereClause("CldId='"+r.getAttribute("CldId")+"' and SlocId="+r.getAttribute("SlocId")+" and OrgId='"+r.getAttribute("OrgId")+"' and WfId='"+r.getAttribute("WfId")+"' and DocTypeId="+r.getAttribute("DocTypeId")+" and DocId="+r.getAttribute("DocId")+" and UsrId="+r.getAttribute("TransUsrId"));
                Row fr[]=this.getAppWfUsrLvlMap().getFilteredRows(rq);
                if(fr.length>0)
                    ret="D";
                else
                    ret="Y";
                }
            else
            ret= "N";
            return ret;
        }

    public String wfNameValid(String Name) {
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String flag = null;
        RowSetIterator wfIterator = this.getAppWf().createRowSetIterator(null);
        Row currentRow = this.getAppWf().getCurrentRow();
        while (wfIterator.hasNext()) {
            Row r1 = wfIterator.next();
            if (r1 != currentRow) {
                String wfName = r1.getAttribute("WfNm").toString();
                String r1org = r1.getAttribute("OrgId").toString();
                if (OrgId.equals(r1org) && Name.equalsIgnoreCase(wfName)) {
                    flag = "N";
                }
            }
        }
        wfIterator.closeRowSetIterator();
        System.out.println("work flow name is" + flag);

        return flag;
    }
    
    public String autoSkipSet(){
        Row curr=this.getAppWfLvl().getCurrentRow();
        if(curr!=null){
            curr.setAttribute("AutoSkipFlg", "N");
        }
        return null;
    }
}
