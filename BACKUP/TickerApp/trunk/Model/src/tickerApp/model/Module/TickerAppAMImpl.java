package tickerApp.model.Module;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;


import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import tickerApp.model.Module.common.TickerAppAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 15 14:48:44 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TickerAppAMImpl extends ApplicationModuleImpl implements TickerAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public TickerAppAMImpl() {
    }

    /**
     * Container's getter for FinTkr1.
     * @return FinTkr1
     */
    public ViewObjectImpl getFinTkr1() {
        return (ViewObjectImpl)findViewObject("FinTkr1");
    }

    /**
     * Container's getter for FinTkrCoa1.
     * @return FinTkrCoa1
     */
    public ViewObjectImpl getFinTkrCoa1() {
        return (ViewObjectImpl)findViewObject("FinTkrCoa1");
    }

    /**
     * Container's getter for FinTkrContainsCoa1.
     * @return FinTkrContainsCoa1
     */
    public ViewObjectImpl getFinTkrContainsCoa1() {
        return (ViewObjectImpl)findViewObject("FinTkrContainsCoa1");
    }

    /**
     * Container's getter for FinTkrNaTyp1.
     * @return FinTkrNaTyp1
     */
    public ViewObjectImpl getFinTkrNaTyp1() {
        return (ViewObjectImpl)findViewObject("FinTkrNaTyp1");
    }

    /**
     * Container's getter for FinTkrVouTyp1.
     * @return FinTkrVouTyp1
     */
    public ViewObjectImpl getFinTkrVouTyp1() {
        return (ViewObjectImpl)findViewObject("FinTkrVouTyp1");
    }

    /**
     * Container's getter for FinTkrContainsCoa2.
     * @return FinTkrContainsCoa2
     */
    public ViewObjectImpl getFinTkrContainsCoa2() {
        return (ViewObjectImpl)findViewObject("FinTkrContainsCoa2");
    }

    /**
     * Container's getter for FinTkrNaTyp2.
     * @return FinTkrNaTyp2
     */
    public ViewObjectImpl getFinTkrNaTyp2() {
        return (ViewObjectImpl)findViewObject("FinTkrNaTyp2");
    }

    /**
     * Container's getter for FinTkrVouTyp2.
     * @return FinTkrVouTyp2
     */
    public ViewObjectImpl getFinTkrVouTyp2() {
        return (ViewObjectImpl)findViewObject("FinTkrVouTyp2");
    }

    /**
     * Container's getter for FinTkrCoa2.
     * @return FinTkrCoa2
     */
    public ViewObjectImpl getFinTkrCoa2() {
        return (ViewObjectImpl)findViewObject("FinTkrCoa2");
    }

    /**
     * Container's getter for FinTkrCoa3.
     * @return FinTkrCoa3
     */
    public ViewObjectImpl getFinTkrCoa3() {
        return (ViewObjectImpl)findViewObject("FinTkrCoa3");
    }

    /**
     * Container's getter for FkFinTkrContainsCoa2VL1.
     * @return FkFinTkrContainsCoa2VL1
     */
    public ViewLinkImpl getFkFinTkrContainsCoa2VL1() {
        return (ViewLinkImpl)findViewLink("FkFinTkrContainsCoa2VL1");
    }

    /**
     * Container's getter for FkFinTkrNaTyp2VL1.
     * @return FkFinTkrNaTyp2VL1
     */
    public ViewLinkImpl getFkFinTkrNaTyp2VL1() {
        return (ViewLinkImpl)findViewLink("FkFinTkrNaTyp2VL1");
    }

    /**
     * Container's getter for FkFinTkrVouTyp2VL1.
     * @return FkFinTkrVouTyp2VL1
     */
    public ViewLinkImpl getFkFinTkrVouTyp2VL1() {
        return (ViewLinkImpl)findViewLink("FkFinTkrVouTyp2VL1");
    }

    /**
     * Container's getter for FkFinTkrCoa2VL1.
     * @return FkFinTkrCoa2VL1
     */
    public ViewLinkImpl getFkFinTkrCoa2VL1() {
        return (ViewLinkImpl)findViewLink("FkFinTkrCoa2VL1");
    }

    /**
     * Container's getter for FkFinTkrCoa2VL2.
     * @return FkFinTkrCoa2VL2
     */
    public ViewLinkImpl getFkFinTkrCoa2VL2() {
        return (ViewLinkImpl)findViewLink("FkFinTkrCoa2VL2");
    }
    
    public String resolvEl(String data) {
          ADFContext adfCtx = ADFContext.getCurrent();
                  ELContext elContext = adfCtx.getELContext();
                  ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
                  Object Message = valueExp.getValue(elContext).toString();
                  return Message.toString();
      }
      public static int VARCHAR = Types.VARCHAR;
      String add_mode = null;
      String edit_mode = null;
      String view_mode = null;
      String del_mode = null;
      protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
          CallableStatement st = null;
          try {
              st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
              st.registerOutParameter(1, sqlReturnType);
              if (bindVars != null) {
                  for (int z = 0; z < bindVars.length; z++) {
                      st.setObject(z + 2, bindVars[z]);
                  }
              }
              st.registerOutParameter(7, VARCHAR);
              st.registerOutParameter(8, VARCHAR);
              st.registerOutParameter(9, VARCHAR);
              st.registerOutParameter(10, VARCHAR);
              st.executeUpdate();
              try {
                  setAdd_mode(st.getObject(7).toString());
                  setEdit_mode((st.getObject(8).toString()));
                  setView_mode(st.getObject(9).toString());
                  setDel_mode(st.getObject(10).toString());
              } catch (NullPointerException e) {
                  System.out.println(e);
                  e.printStackTrace();
              }
              return st.getObject(1);

          } catch (SQLException e) {
              throw new JboException(e);
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {
                      
                      e.printStackTrace();

                  }
              }
          }
      }


      
      public Integer on_load_page()
     {
        int count = 0;
        String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
        String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
        callStoredFunction(VARCHAR,"app.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",new Object[] { cld_id, sloc_id, org_id, 1,usr_id});
        String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
        
        if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
        {         
            count = 1;
        }
        else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
        {
            count = 1;
        }
        else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
        {
            count = 1; 
        }
        else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
        {
            count = 1; 
        }
        else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
        {
            count = 1; 
        }
              
        Map paramMap = ADFContext.getCurrent().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode); 
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
        paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
        paramMap.put("PARAM_PG_DEL_MD", del_mode); 
              
        String addMode =  resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString(); 
        String editMode =  resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString(); 
        String viewMode =  resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString(); 
        String deleteMode =  resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();       
        
        return count;
    }
    
      public void setAdd_mode(String add_mode) {
          this.add_mode = add_mode;
      }

      public String getAdd_mode() {
          return add_mode;
      }

      public void setEdit_mode(String edit_mode) {
          this.edit_mode = edit_mode;
      }

      public String getEdit_mode() {
          return edit_mode;
      }

      public void setView_mode(String view_mode) {
          this.view_mode = view_mode;
      }

      public String getView_mode() {
          return view_mode;
      }

      public void setDel_mode(String del_mode) {
          this.del_mode = del_mode;
      }

      public String getDel_mode() {
          return del_mode;
      }


    /**
     * Container's getter for LovGlblTkrID1.
     * @return LovGlblTkrID1
     */
    public ViewObjectImpl getLovGlblTkrID1() {
        return (ViewObjectImpl)findViewObject("LovGlblTkrID1");
    }
}
