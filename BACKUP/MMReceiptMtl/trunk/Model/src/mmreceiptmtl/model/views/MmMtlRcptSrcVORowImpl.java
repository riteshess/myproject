package mmreceiptmtl.model.views;

import mmreceiptmtl.model.services.MMReceiptMtlAMImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 11 14:56:56 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMtlRcptSrcVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMMTLRCPTSRCEO = 0;
    private static ADFLogger _log=ADFLogger.createADFLogger(MmMtlRcptSrcVORowImpl.class);

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        WhId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getWhId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setWhId((String)value);
            }
        }
        ,
        DocTypeSrc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocTypeSrc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocTypeSrc((Integer)value);
            }
        }
        ,
        DocId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        DocIdSrc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocIdSrc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocIdSrc((String)value);
            }
        }
        ,
        DocDtSrc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocDtSrc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocDtSrc((Timestamp)value);
            }
        }
        ,
        DlvSchdlNo {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDlvSchdlNo();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDlvSchdlNo((Integer)value);
            }
        }
        ,
        DocIdSrcDisp {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocIdSrcDisp();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocIdSrcDisp((String)value);
            }
        }
        ,
        TransChkQc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransChkQc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransChkQc((String)value);
            }
        }
        ,
        TransChkRewkPrsnt {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransChkRewkPrsnt();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransChkRewkPrsnt((String)value);
            }
        }
        ,
        TransChkRejctPrsnt {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransChkRejctPrsnt();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransChkRejctPrsnt((String)value);
            }
        }
        ,
        MmMtlRcptItm {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getMmMtlRcptItm();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmMtlRcptSrcVORowImpl object);

        public abstract void put(MmMtlRcptSrcVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int DOCTYPESRC = AttributesEnum.DocTypeSrc.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int DOCDTSRC = AttributesEnum.DocDtSrc.index();
    public static final int DLVSCHDLNO = AttributesEnum.DlvSchdlNo.index();
    public static final int DOCIDSRCDISP = AttributesEnum.DocIdSrcDisp.index();
    public static final int TRANSCHKQC = AttributesEnum.TransChkQc.index();
    public static final int TRANSCHKREWKPRSNT = AttributesEnum.TransChkRewkPrsnt.index();
    public static final int TRANSCHKREJCTPRSNT = AttributesEnum.TransChkRejctPrsnt.index();
    public static final int MMMTLRCPTITM = AttributesEnum.MmMtlRcptItm.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmMtlRcptSrcVORowImpl() {
    }

    /**
     * Gets MmMtlRcptSrcEO entity object.
     * @return the MmMtlRcptSrcEO
     */
    public EntityImpl getMmMtlRcptSrcEO() {
        return (EntityImpl)getEntity(ENTITY_MMMTLRCPTSRCEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for WH_ID using the alias name WhId.
     * @return the WH_ID
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as attribute value for WH_ID using the alias name WhId.
     * @param value value to set the WH_ID
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for DOC_TYPE_SRC using the alias name DocTypeSrc.
     * @return the DOC_TYPE_SRC
     */
    public Integer getDocTypeSrc() {
        return (Integer) getAttributeInternal(DOCTYPESRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_TYPE_SRC using the alias name DocTypeSrc.
     * @param value value to set the DOC_TYPE_SRC
     */
    public void setDocTypeSrc(Integer value) {
        setAttributeInternal(DOCTYPESRC, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @return the DOC_ID_SRC
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @param value value to set the DOC_ID_SRC
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for DOC_DT_SRC using the alias name DocDtSrc.
     * @return the DOC_DT_SRC
     */
    public Timestamp getDocDtSrc() {
        return (Timestamp) getAttributeInternal(DOCDTSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT_SRC using the alias name DocDtSrc.
     * @param value value to set the DOC_DT_SRC
     */
    public void setDocDtSrc(Timestamp value) {
        setAttributeInternal(DOCDTSRC, value);
    }

    /**
     * Gets the attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @return the DLV_SCHDL_NO
     */
    public Integer getDlvSchdlNo() {
        return (Integer) getAttributeInternal(DLVSCHDLNO);
    }

    /**
     * Sets <code>value</code> as attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @param value value to set the DLV_SCHDL_NO
     */
    public void setDlvSchdlNo(Integer value) {
        setAttributeInternal(DLVSCHDLNO, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC_DISP using the alias name DocIdSrcDisp.
     * @return the DOC_ID_SRC_DISP
     */
    public String getDocIdSrcDisp() {
        Integer type=this.getDocTypeSrc();
        String doc=this.getDocIdSrc();
        MMReceiptMtlAMImpl am=(MMReceiptMtlAMImpl)this.getApplicationModule();
        System.out.println(type+"getDocIdSrcDisp---- "+doc);
        if(type.equals(266)){
            Row[] po=am.getLovPurOrder().getFilteredRows("DocId",doc);
            System.out.println("lengtgh---- "+po.length);
            if(po.length>0){
                
                if(po[0].getAttribute("AuthPoNo")!=null){
                    System.out.println("AuthPoNo---- "+po[0].getAttribute("AuthPoNo"));
                    return po[0].getAttribute("AuthPoNo").toString();
                }
                else{
                    return (String) getAttributeInternal(DOCIDSRCDISP);  
                }
            }else if(po.length==0){   //  Change BL For Check DocIdSrcDisp
                return doc;                //  Change BL For Check DocIdSrcDisp
                }else{
                return (String) getAttributeInternal(DOCIDSRCDISP); 
            }
        }else if(type.equals(270)){
            Row[] to=am.getLovTransferOrd1().getFilteredRows("DocId",doc);
            if(to.length>0){
                return to[0].getAttribute("TrfNo").toString(); 
            }else{
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        }else if(type.equals(370)){
            return this.getDocIdSrc(); 
        }else if(type.equals(396)){
            return this.getDocIdSrc();
        }else if(type.equals(267)){
            return this.getDocIdSrc();
        }else if(type.equals(269)){
            Row[] rma=am.getViewRma().getFilteredRows("DocId", doc);
            if(rma.length>0){
                return rma[0].getAttribute("RmaId").toString();
            }else{
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        }else if(type.equals(399)){
            Row[] mrn=am.getViewMMMrn().getFilteredRows("DocId",doc);
            if(mrn.length>0){
                return mrn[0].getAttribute("MrnNo").toString(); 
            }else{
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        }else if(type.equals(459)){
            Row[] cpo=am.getLovCpoNoVO().getFilteredRows("DocId",doc);
            _log.info("No . of rows in cpo="+cpo.length);
            if(cpo.length>0){
                return cpo[0].getAttribute("CpoId").toString(); 
            }else{
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        }else if(type.equals(541)){
            Row[] kit=am.getLovMmKitProdNo().getFilteredRows("DocId",doc);
            if(kit.length>0){
                return kit[0].getAttribute("KitProdNo").toString(); 
            }else{
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        }
        else{
            return (String) getAttributeInternal(DOCIDSRCDISP);
        }    
    
    }
    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC_DISP using the alias name DocIdSrcDisp.
     * @param value value to set the DOC_ID_SRC_DISP
     */
    public void setDocIdSrcDisp(String value) {
        setAttributeInternal(DOCIDSRCDISP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransChkQc.
     * @return the TransChkQc
     */
    public String getTransChkQc() {
        MMReceiptMtlAMImpl am= (MMReceiptMtlAMImpl)this.getApplicationModule();
    
       
        RowQualifier rq=new RowQualifier(am.getMmMtlRcptItm2());
        rq.setWhereClause("CldId='"+this.getCldId()+"' and SlocId="+this.getSlocId()+" and OrgId='"+this.getOrgId()+"' and DocId='"+this.getDocId()+"' and DocIdSrc='"+this.getDocIdSrc()+"' and DlvSchdlNo="+this.getDlvSchdlNo()+"");
        Row[] itmRsi=am.getMmMtlRcptItm2().getFilteredRows(rq);
        
        String ret="N";
        for(Row cu :itmRsi){
            
            String chk="N";
            String ovrChk="N";
            Number rcptQtBs = new Number(0);
            if(cu.getAttribute("QcReqdFlg")!=null){
                chk= cu.getAttribute("QcReqdFlg").toString();
            }
            if(cu.getAttribute("QcOverrideFlg")!=null){
                ovrChk=cu.getAttribute("QcOverrideFlg").toString();
            }
            if(cu.getAttribute("RcptQtyBs")!=null){
                rcptQtBs=(Number)cu.getAttribute("RcptQtyBs");
            }
        
            if(chk.equals("Y") && ovrChk.equals("N") && (rcptQtBs.compareTo(new Number(0))==1)){
                ret="Y";
            }
        }
        
        return ret;
        //return (String) getAttributeInternal(TRANSCHKQC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransChkQc.
     * @param value value to set the  TransChkQc
     */
    public void setTransChkQc(String value) {
        setAttributeInternal(TRANSCHKQC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransChkRewkPrsnt.
     * @return the TransChkRewkPrsnt
     */
    public String getTransChkRewkPrsnt() {
        MMReceiptMtlAMImpl am= (MMReceiptMtlAMImpl)this.getApplicationModule();
        RowSetIterator itmRsi=am.getMmMtlRcptItm().createRowSetIterator(null);
        String ret="N";
        while(itmRsi.hasNext()){
           Row cu=itmRsi.next();
            Number qty=new Number(0);
            if(cu.getAttribute("RwkQty")!=null){
             qty= (Number)cu.getAttribute("RwkQty");
            }
            if(qty.compareTo(new Number(0))==1){
                ret="Y";
            }
        }
        itmRsi.closeRowSetIterator();
        return ret;
      //  return (String) getAttributeInternal(TRANSCHKREWKPRSNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransChkRewkPrsnt.
     * @param value value to set the  TransChkRewkPrsnt
     */
    public void setTransChkRewkPrsnt(String value) {
        setAttributeInternal(TRANSCHKREWKPRSNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransChkRejctPrsnt.
     * @return the TransChkRejctPrsnt
     */
    public String getTransChkRejctPrsnt() {
        MMReceiptMtlAMImpl am= (MMReceiptMtlAMImpl)this.getApplicationModule();
        am.getMmMtlRcptItm1().executeQuery();
        RowSetIterator itmRsi=am.getMmMtlRcptItm1().createRowSetIterator(null);
        String ret="N";
        Number zero=new Number(0);
        while(itmRsi.hasNext()){
           Row cu=itmRsi.next();
            Number itmRejqty=zero;   
            Number qcRejQty=zero;
            if(cu.getAttribute("RejQty")!=null){
                itmRejqty= (Number)cu.getAttribute("RejQty");
            }
            if(cu.getAttribute("QcRejQty")!=null){
                qcRejQty=(Number)cu.getAttribute("QcRejQty");
            }
           
            if(itmRejqty.compareTo(zero)==1 || qcRejQty.compareTo(zero)==1){
                ret="Y";
            }
        }
        itmRsi.closeRowSetIterator();
        return ret;
        
        
      //  return (String) getAttributeInternal(TRANSCHKREJCTPRSNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransChkRejctPrsnt.
     * @param value value to set the  TransChkRejctPrsnt
     */
    public void setTransChkRejctPrsnt(String value) {
        setAttributeInternal(TRANSCHKREJCTPRSNT, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmMtlRcptItm.
     */
    public RowIterator getMmMtlRcptItm() {
        return (RowIterator)getAttributeInternal(MMMTLRCPTITM);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
