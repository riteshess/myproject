package mmmaterialreqslip.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.text.DateFormat;
import oracle.jbo.domain.Timestamp;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmmaterialreqslip.model.services.common.MmMatReqSlipAM;
import mmmaterialreqslip.model.view.AvailStkVOImpl;
import mmmaterialreqslip.model.view.ItemPrfVOImpl;
import mmmaterialreqslip.model.view.MmMrsItmVOImpl;
import mmmaterialreqslip.model.view.MmMrsVOImpl;
import mmmaterialreqslip.model.view.MrsStatusVOImpl;
import mmmaterialreqslip.model.view.ReqVOImpl;
import mmmaterialreqslip.model.view.TransSearchVOImpl;
import mmmaterialreqslip.model.view.WarehouseVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
//import oracle.jbo.domain.Date;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 16 15:30:48 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMatReqSlipAMImpl extends ApplicationModuleImpl implements MmMatReqSlipAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MmMatReqSlipAMImpl() {
    }

    /**
     * Container's getter for MmMrsItm1.
     * @return MmMrsItm1
     */
    public MmMrsItmVOImpl getMmMrsItm1() {
        return (MmMrsItmVOImpl)findViewObject("MmMrsItm1");
    }

    /**
     * Container's getter for MmMrs1.
     * @return MmMrs1
     */
    public MmMrsVOImpl getMmMrs1() {
        return (MmMrsVOImpl)findViewObject("MmMrs1");
    }

    /**
     * Container's getter for Req1.
     * @return Req1
     */
    public ReqVOImpl getReq1() {
        return (ReqVOImpl)findViewObject("Req1");
    }

    /**
     * Container's getter for Warehouse1.
     * @return Warehouse1
     */
    public WarehouseVOImpl getWarehouse1() {
        return (WarehouseVOImpl)findViewObject("Warehouse1");
    }

    /**
     * Container's getter for MrsStatus1.
     * @return MrsStatus1
     */
    public MrsStatusVOImpl getMrsStatus1() {
        return (MrsStatusVOImpl)findViewObject("MrsStatus1");
    }

    /**
     * Container's getter for MmMrs2.
     * @return MmMrs2
     */
    public MmMrsVOImpl getMmMrs2() {
        return (MmMrsVOImpl)findViewObject("MmMrs2");
    }

    /**
     * Container's getter for MmMrsItm2.
     * @return MmMrsItm2
     */
    public MmMrsItmVOImpl getMmMrsItm2() {
        return (MmMrsItmVOImpl)findViewObject("MmMrsItm2");
    }

    /**
     * Container's getter for ItemPrf1.
     * @return ItemPrf1
     */
    public ItemPrfVOImpl getItemPrf1() {
        return (ItemPrfVOImpl)findViewObject("ItemPrf1");
    }

    /**
     * Container's getter for MrsMrsItmVL.
     * @return MrsMrsItmVL
     */
    public ViewLinkImpl getMrsMrsItmVL() {
        return (ViewLinkImpl)findViewLink("MrsMrsItmVL");
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl)resolvElDC("MmMatReqSlipAMDataControl");
                st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
     
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) { throw new JboException(e);
                    }
                }
            }
        }
    
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }
    public String resolvEl(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
          String msg=null;
          if(valueExp.getValue(elContext)!=null)
           msg = valueExp.getValue(elContext).toString();
          else
           msg=null;
          return msg;
      }
   public String generateMrsNo()
   {  String mrsno=null;
       if(getMmMrs2().getCurrentRow().getAttribute("MrsNo")!=null){    
//System.out.println("MRS is not null");
           mrsno=getMmMrs2().getCurrentRow().getAttribute("MrsNo").toString();
     
       }
       else
       {
             //  System.out.println("Mrs is null");
               String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
               Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
               String CldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
               String whid=getMmMrs2().getCurrentRow().getAttribute("WhIdReqTo").toString();
               Integer fyid = (Integer)getMmMrs2().getCurrentRow().getAttribute("FyId"); 
               String tableName="MM$MRS";
               mrsno =(String)(callStoredFunction(Types.VARCHAR, "MM.fn_mm_gen_id(?,?,?,?,?,?)",new Object[] {SlocId,CldId,OrgId,tableName,whid,fyid}));   
               getMmMrs2().getCurrentRow().setAttribute("MrsNo",mrsno); 
           }
       return mrsno;
   }  
   public void setTxnIdforItem()
   {
       String uom=getMmMrs2().getCurrentRow().getAttribute("transUom").toString();
       String txnid=getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
       String itm=getMmMrs2().getCurrentRow().getAttribute("transItmId").toString();
       BigDecimal req = (BigDecimal)getMmMrs2().getCurrentRow().getAttribute("TransReqQty");
    //   String grpid=getMmMrs2().getCurrentRow().getAttribute("TransItmGrpId").toString();
      // System.out.println("item group id "+grpid);
           getMmMrsItm2().getCurrentRow().setAttribute("MrsTxnId",txnid);//TransItemDesc
           getMmMrsItm2().getCurrentRow().setAttribute("ItmId", itm);
           getMmMrsItm2().getCurrentRow().setAttribute("ReqQty", req);
           getMmMrsItm2().getCurrentRow().setAttribute("PendQty", req);
           getMmMrsItm2().getCurrentRow().setAttribute("AuthQty", req);
           getMmMrsItm2().getCurrentRow().setAttribute("StkResvQty", BigDecimal.ZERO);
           getMmMrsItm2().getCurrentRow().setAttribute("ItmUom",uom);
        //   getMmMrsItm2().getCurrentRow().setAttribute("TransItmGrpId",grpid);
           getMmMrs2().getCurrentRow().setAttribute("TransItemDesc", null);
           getMmMrs2().getCurrentRow().setAttribute("TransReqQty", null);
          // getMmMrs2().getCurrentRow().setAttribute("TransItmGrpId", null);
           getMmMrsItm2().executeQuery();  
       }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl)findViewObject("Org1");
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public TransSearchVOImpl getTransSearch1() {
        return (TransSearchVOImpl)findViewObject("TransSearch1");
    }
    
    public void searchMrs()
    {
      //  System.out.println("In search");
      //  System.out.println(getTransSearch1().getCurrentRow().getAttribute("MrsStatus"));
        String mrsno=null;
            String whid=null;
            String reqid=null;
            Timestamp mrsdtfrm=null;
            Timestamp mrsdtto=null;
            Integer mrsst=null;
          if(getTransSearch1().getCurrentRow().getAttribute("MrsNo")!=null)
          {   mrsno=getTransSearch1().getCurrentRow().getAttribute("MrsNo").toString();
              getMmMrs1().setBindMrsNo(mrsno);
          //  System.out.println("mrs="+getMmMrs1().getBindMrsNo());
             }
          else
              getMmMrs1().setBindMrsNo(null); 
          if(getTransSearch1().getCurrentRow().getAttribute("WhId")!=null)
          {  whid=getTransSearch1().getCurrentRow().getAttribute("WhId").toString();  
             getMmMrs1().setBindWh(whid);
          //   System.out.println(whid);
             }
          else
              getMmMrs1().setBindWh(null);
          if(getTransSearch1().getCurrentRow().getAttribute("ReqAreaId")!=null)
          {  reqid=getTransSearch1().getCurrentRow().getAttribute("ReqAreaId").toString();  
             getMmMrs1().setBindReqArea(reqid);
             }
          else
              getMmMrs1().setBindReqArea(null);  
            if(getTransSearch1().getCurrentRow().getAttribute("MrsDateFrom")!=null)
            {  
                mrsdtfrm= new Timestamp(new Date(getTransSearch1().getCurrentRow().getAttribute("MrsDateFrom").toString())); 
               getMmMrs1().setBindMrsDtFrom(mrsdtfrm);
               }
            else
                getMmMrs1().setBindMrsDtFrom(null);  
            if(getTransSearch1().getCurrentRow().getAttribute("MrsDateTo")!=null)
            {  
                mrsdtto= new Timestamp(new Date(getTransSearch1().getCurrentRow().getAttribute("MrsDateTo").toString()));  
               getMmMrs1().setBindMrsDtTo(mrsdtto);
               }
            else
                getMmMrs1().setBindMrsDtTo(null);  
            if(getTransSearch1().getCurrentRow().getAttribute("MrsStatus")!=null)
            { 
               // System.out.println("Mrs status is not null");
                mrsst= Integer.parseInt(getTransSearch1().getCurrentRow().getAttribute("MrsStatus").toString());  
              //  System.out.println("Mrs status="+mrsst);
               getMmMrs1().setBindMrsStatus(mrsst);
               }
            else
                getMmMrs1().setBindMrsStatus(null);  
        // System.out.println("searching critetia="+mrsno+" "+whid+" "+reqid);  

        String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        getTransSearch1().getCurrentRow().setAttribute("CldId", CldId);
        getTransSearch1().getCurrentRow().setAttribute("OrgId", OrgId);
        getTransSearch1().getCurrentRow().setAttribute("SlocId", SlocId);
        getMmMrs1().setBindCld(CldId);
        getMmMrs1().setBindSloc(SlocId);
        getMmMrs1().setBindOrg(OrgId);
        getMmMrs1().executeQuery();    
        }
    
    public void resetbind()
    {
            getTransSearch1().getCurrentRow().setAttribute("MrsNo",null); 
            getTransSearch1().getCurrentRow().setAttribute("WhId",null);
           getTransSearch1().getCurrentRow().setAttribute("ReqAreaId",null);
            getTransSearch1().getCurrentRow().setAttribute("MrsDateFrom",null);
            getTransSearch1().getCurrentRow().setAttribute("MrsDateTo",null);
            getTransSearch1().getCurrentRow().setAttribute("MrsStatus",null);
            VariableValueManager vm = getMmMrs1().ensureVariableManager();
            vm.setVariableValue("BindReqArea", null);
            vm.setVariableValue("BindWh", null);
            vm.setVariableValue("BindMrsNo", null);
            vm.setVariableValue("BindMrsDtFrom", null);
            vm.setVariableValue("BindMrsDtTo", null);
            vm.setVariableValue("BindMrsStatus", null);
            String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();    
            vm.setVariableValue("BindCld", CldId);
            vm.setVariableValue("BindSloc", SlocId);
            vm.setVariableValue("BindOrg", OrgId);
            getTransSearch1().getCurrentRow().setAttribute("CldId", CldId);
            getTransSearch1().getCurrentRow().setAttribute("OrgId", OrgId);
            getTransSearch1().getCurrentRow().setAttribute("SlocId", SlocId);
            getMmMrs1().setBindCld(CldId);
            getMmMrs1().setBindSloc(SlocId);
            getMmMrs1().setBindOrg(OrgId);
            getMmMrs1().executeQuery();
           
        }
    
    public void setSearchBindVar()
    {
            System.out.println("SetSearchBindVar");
            String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            getTransSearch1().getCurrentRow().setAttribute("CldId", CldId);
            getTransSearch1().getCurrentRow().setAttribute("OrgId", OrgId);
            getTransSearch1().getCurrentRow().setAttribute("SlocId", SlocId);
            getMmMrs1().setBindCld("-1");
            getMmMrs1().setBindSloc(SlocId);
            getMmMrs1().setBindOrg(OrgId);
            getMmMrs1().executeQuery();
        }
    
    public String gettxnvalue()
    {
        String txnid=null;
        if(getMmMrs1().getCurrentRow().getAttribute("MrsTxnId")!=null)
            txnid=getMmMrs1().getCurrentRow().getAttribute("MrsTxnId").toString();
      //  System.out.println("gettxnvalue="+txnid);
        return txnid;
        }
   public String settxnbindvar()
   {
     //  System.out.println("setting txn bind variable from global at search="+resolvEl("#{pageFlowScope.Mrs_Txn_id}"));
           VariableValueManager vm = getMmMrs2().ensureVariableManager();
           if(resolvEl("#{pageFlowScope.Mrs_Txn_id}")!=null){
           vm.setVariableValue("MrsTxnBind",resolvEl("#{pageFlowScope.Mrs_Txn_id}").toString());
            getMmMrs2().executeQuery();
            return "1";
            }
           else{
               vm.setVariableValue("MrsTxnBind",null); 
               return "0";
                }
            
       }
   
   
  public int checkItemId(String itm)
  {
      int count=0;
     // String itm=getMmMrsItm2().getCurrentRow().getAttribute("ItmId").toString();
     RowQualifier rq = new RowQualifier(getMmMrsItm2());
     String orgId = (String)getMmMrsItm2().getCurrentRow().getAttribute("OrgId");
     String slocId = (String)getMmMrsItm2().getCurrentRow().getAttribute("SlocId");
     String cldId = (String)getMmMrsItm2().getCurrentRow().getAttribute("CldId");
     rq.setWhereClause("OrgId='"+orgId+"' AND SlocId="+slocId+" AND CldId='"+cldId+"' AND TransItmDesc='"+itm+"'");
      Row[] r=getMmMrsItm2().getFilteredRows(rq);
      count = r.length;
      return count;
      }

    /**
     * Container's getter for AvailStk1.
     * @return AvailStk1
     */
    public AvailStkVOImpl getAvailStk1() {
        return (AvailStkVOImpl)findViewObject("AvailStk1");
    }
    
    public void setBindvarForAvailStk()
    {
            String hoOrgId=  resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String itmId=null;
        /* if(getMmMrsItm2().getCurrentRow().getAttribute("ItmId")!=null){
            itmId=getMmMrsItm2().getCurrentRow().getAttribute("ItmId").toString();
        } */
        System.out.println("current item id is"+getMmMrsItm2().getCurrentRow().getAttribute("ItmId")+" "+hoOrgId);
            ViewObjectImpl stkVo=this.getStockDetail();
            stkVo.setNamedWhereClauseParam("Bindhoorgid", hoOrgId);
            stkVo.setNamedWhereClauseParam("Binditmid", getMmMrsItm2().getCurrentRow().getAttribute("ItmId"));
            stkVo.executeQuery();
    }
    
    public Integer generateFyId() {
        String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String OrgId=(String)getMmMrs2().getCurrentRow().getAttribute("OrgId");
           System.out.println(OrgId);
            String MrsDate =getMmMrs2().getCurrentRow().getAttribute("MrsDt").toString();
            Timestamp dt=new Timestamp(MrsDate);
            System.out.println(dt);
        Integer fyid=(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {CldId,OrgId,dt}));
        if(fyid>0)
            getMmMrs2().getCurrentRow().setAttribute("FyId",fyid);
            return fyid;
        }
   
    public static int VARCHAR = Types.VARCHAR;
      String add_mode = null;
      String edit_mode = null;
      String view_mode = null;
      String del_mode = null;
      protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
          CallableStatement st = null;
          try {
              st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
              st.registerOutParameter(1, sqlReturnType);
              if (bindVars != null) {
                  for (int z = 0; z < bindVars.length; z++) {
                      st.setObject(z + 2, bindVars[z]);
                  }
              }
              st.registerOutParameter(7, VARCHAR);
              st.registerOutParameter(8, VARCHAR);
              st.registerOutParameter(9, VARCHAR);
              st.registerOutParameter(10, VARCHAR);
              st.executeUpdate();
              try {
                  setAdd_mode(st.getObject(7).toString());
                  setEdit_mode((st.getObject(8).toString()));
                  setView_mode(st.getObject(9).toString());
                  setDel_mode(st.getObject(10).toString());
              } catch (NullPointerException e) {
                //  System.out.println(e);
                  e.printStackTrace();
              }
              return st.getObject(1);

          } catch (SQLException e) {
              throw new JboException(e);
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {

                  }
              }
          }
      }


      
      public Integer on_load_page()
              {  int count = 0;
              String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
              Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
              String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
              Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
              callStoredFunction1(VARCHAR,"APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                         new Object[] { cld_id, sloc_id, org_id, 1,usr_id});
              String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
              if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
              {            count = 1;
                  }
              else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
              {
                  count = 1;
                  }
              else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
              {
                 count = 1; 
                  }
              else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
              {
                 count = 1; 
                  }
               else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
              {
                 count = 1; 
                  }
              Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
              paramMap.put("PARAM_PG_ADD_MD", add_mode); 
              paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
              paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
              paramMap.put("PARAM_PG_DEL_MD", del_mode); 
              String addMode =  resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString(); 
               String editMode =  resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString(); 
               String viewMode =  resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString(); 
               String deleteMode =  resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();       
        return count;
          }
      public void setAdd_mode(String add_mode) {
          this.add_mode = add_mode;
      }

      public String getAdd_mode() {
          return add_mode;
      }

      public void setEdit_mode(String edit_mode) {
          this.edit_mode = edit_mode;
      }

      public String getEdit_mode() {
          return edit_mode;
      }

      public void setView_mode(String view_mode) {
          this.view_mode = view_mode;
      }

      public String getView_mode() {
          return view_mode;
      }

      public void setDel_mode(String del_mode) {
          this.del_mode = del_mode;
      }

      public String getDel_mode() {
          return del_mode;
      }
 
    public void setItemCancel(String st,Integer oldst)
    {
       // System.out.println("in method");
      //  System.out.println("Value in amimpl"+st);
        if(st=="true")
        {   
           // System.out.println("St= Y");
            String txnId=getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
            String orgId=getMmMrs2().getCurrentRow().getAttribute("OrgId").toString();
            String cldId=getMmMrs2().getCurrentRow().getAttribute("CldId").toString();
            Integer slocId=Integer.parseInt(getMmMrs2().getCurrentRow().getAttribute("SlocId").toString());
            RowQualifier rq= new RowQualifier(getMmMrsItm2());
            rq.setWhereClause("OrgId ='"+orgId+"' AND CldId ='"+cldId+"' AND SlocId ="+slocId+" AND MrsTxnId ='"+txnId+"' AND PendQty > 0 ");
                Row[] r = getMmMrsItm2().getFilteredRows(rq); 
              //  System.out.println("Rows="+r.length);
                if(r.length>0)
                {
                    int i=0;
                while(i<r.length)
                {
                    r[i].setAttribute("CnclItm","Y");
                    i++;
                    }
                    }
                getMmMrsItm2().executeQuery();
            }
        else
        {
                String txnId=getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
                String orgId=getMmMrs2().getCurrentRow().getAttribute("OrgId").toString();
                String cldId=getMmMrs2().getCurrentRow().getAttribute("CldId").toString();
                Integer slocId=Integer.parseInt(getMmMrs2().getCurrentRow().getAttribute("SlocId").toString());
              //  getMmMrs2().getCurrentRow().setAttribute("MrsStat",oldst);
                RowQualifier rq= new RowQualifier(getMmMrsItm2());
                rq.setWhereClause("OrgId ='"+orgId+"' AND CldId ='"+cldId+"' AND SlocId ="+slocId+" AND MrsTxnId ='"+txnId+"' AND PendQty > 0");
                    Row[] r = getMmMrsItm2().getFilteredRows(rq); 
                  //  System.out.println("Rows="+r.length);
                    if(r.length>0)
                    {
                        int i=0;
                    while(i<r.length)
                    {
                      //  System.out.println("itemid="+r[i].getAttribute("ItmId"));
                        r[i].setAttribute("CnclItm","N");
                        i++;
                        }
                        }
                    getMmMrsItm2().executeQuery();
          //  System.out.println("in else and st="+st);
            }
           
        }
    
    public Integer mrsstatus()
    {
        Integer mrsst= Integer.parseInt( getMmMrs2().getCurrentRow().getAttribute("MrsStat").toString());
        return mrsst;
        }
    
    //Function call for GET WF ID
    public String getWfNo(Integer sloc_id,String cld_id,String org_id,Integer doc_no) {
        try {
          //  System.out.println("Getting wfNo.");
            Object obj=callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)",
                                      new Object[] {sloc_id, cld_id, org_id, doc_no, 0 });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }
    
    }
    
    
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;
  
  
  
    //Function call for Get User Level
    public Integer getUsrLvl(Integer SlocId,String CldId,String OrgId,Integer usr_id,String WfNum,String RfqDocId){
   // System.out.println("Getting user level");
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId,CldId,
                                                                                                                                OrgId,
                                                                                                                                usr_id,
                                                                                                                                WfNum,
                                                                                                                                RfqDocId,0 }).toString());


    }
    
    
    //Function to insert into TXN table
    public Integer insIntoTxn(Integer sloc_id,String cld_id,String pOrgId,Integer RFQ_DOC_NO,String WfNum,Integer usr_idFrm,Integer usr_idTo,Integer levelTo,Integer levelFrm,String action,String remark,Number amount ){
   // System.out.println("Insert into txn");
    String rfqDocId=getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
  //  System.out.println("sloc_id "+sloc_id+"cld_id   "+cld_id+"pOrgId   "+pOrgId+"PO_DOC_NO   "+RFQ_DOC_NO+"WfNum "+WfNum+"poDocId "+rfqDocId+"usr_idFrm  "+usr_idFrm+"usr_idTo   "+usr_idTo+"levelFrm "+levelFrm+"levelTo  "+levelTo+"action  "+action+"remark  "+remark+"amount"+amount);
     return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                        new Object[] { sloc_id, cld_id, pOrgId, RFQ_DOC_NO,0, WfNum, rfqDocId,
                                                       usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
                                                       amount}).toString());
    
    }
    
    
    //Function to get Pending User
    public Integer pendingRfqCheck(Integer SlocId,String CldId,String OrgId,Integer RfqDocNo){
       
        String docIdTxn= getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj= callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,RfqDocNo,docIdTxn,0 });
        Integer usrId=null; 
        if(obj!=null){
            usrId=Integer.parseInt(obj.toString());
        }
     //  System.out.println("User id pending in impl--"+usrId);
        return usrId;
        
    }
    
    public Integer pendingCheck(Integer SlocId,String CldId,String OrgId,Integer RfqDocNo){
       
        String docIdTxn= getMmMrs1().getCurrentRow().getAttribute("MrsTxnId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,RfqDocNo,docIdTxn });
        Integer usrId=null; 
        if(obj!=null){
            usrId=Integer.parseInt(obj.toString());
        }
     //  System.out.println("User id pending in impl--"+usrId);
        return usrId;
        
    }
    
    public String gettxnvalueforwf()
    {
        String txnid=null;
        if(getMmMrs2().getCurrentRow().getAttribute("MrsTxnId")!=null)
            txnid=getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
            System.out.println("Txn in amiompl="+txnid);
      //  System.out.println("Txn id ="+txnid);
           /*  VariableValueManager vm = getMmMrs2().ensureVariableManager();
            vm.setVariableValue("MrsTxnBind",txnid);
             getMmMrs2().executeQuery(); */
            System.out.println("Txn again in amiompl="+txnid);
        return txnid;
        }
    
    public void updateauthStatus(){
        System.out.println("in update status");
        ViewObjectImpl mrsVo = getMmMrs2();
        Row r=this.getMmMrs2().getCurrentRow();
        String  retVal = resolvEl("#{pageFlowScope.WF_RET_VALUE}");
               if("A".equals(retVal)){
              r.setAttribute("MrsStat", 294);
              r.setAttribute("AuthStat","Y"); 
              this.getDBTransaction().commit();
              Integer fyid=Integer.parseInt(getMmMrs2().getCurrentRow().getAttribute("FyId").toString());
              String whid=getMmMrs2().getCurrentRow().getAttribute("WhIdReqTo").toString();
                String txnId=getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
                String orgId=getMmMrs2().getCurrentRow().getAttribute("OrgId").toString();
                String cldId=getMmMrs2().getCurrentRow().getAttribute("CldId").toString();
                Integer slocId=Integer.parseInt(getMmMrs2().getCurrentRow().getAttribute("SlocId").toString());
                System.out.println("whid="+whid+" fy id="+fyid+" txn="+txnId);
            Object obj= callStoredFunction(NUMBER, "MM_UPDT_STK_RESV(?,?,?,?,?,?,?)", new Object[] { cldId,slocId,orgId,whid,fyid,326,txnId});
               System.out.println("Stock Reserved="+obj);  
                
               }else 
               if("F".equals(retVal)){
                   r.setAttribute("MrsStat", 398);
                   r.setAttribute("AuthStat","N");  
               }
              System.out.println("status updated"); 
    }
    
    public void settxnforpagefromwf(String txnid)
    {
     System.out.println("setting txn value from wf to page="+txnid);
           VariableValueManager vm = getMmMrs2().ensureVariableManager();
            vm.setVariableValue("MrsTxnBind",txnid);
             getMmMrs2().executeQuery(); 
             
        }
    
    public String CheckUsrIdCreated()
    {
        String usrid=null;
        if(getMmMrs2().getCurrentRow()!=null)
         usrid=getMmMrs2().getCurrentRow().getAttribute("UsrIdCreate").toString();
        else
            usrid=getMmMrs1().getCurrentRow().getAttribute("UsrIdCreate").toString();
        return usrid;
        }
    
    public String CheckIsAuth()
    {
        String auth=getMmMrs2().getCurrentRow().getAttribute("AuthStat").toString();
        System.out.println("Auth="+auth);
       /*  if(auth.equals("Y"))
        {
                Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                    Integer usr_id_mod=null;
                if(this.getMmMrs2().getCurrentRow().getAttribute("UsrIdMod")!=null)
                usr_id_mod=(Integer)this.getMmMrs2().getCurrentRow().getAttribute("UsrIdMod");
                    if(usr_id.equals(usr_id_mod))
                        return "Y";
                    else
                        return "N";
            }
        else
        return "N"; */
        return auth;
    }
    
    public Integer checkAuthQty(String Auth)
    {
     //   System.out.println("Authorised quantity="+Auth);
        BigDecimal AuthQty=new BigDecimal(Auth);
            if(getMmMrsItm2().getCurrentRow().getAttribute("ReqQty")!=null)
            {
        BigDecimal ReqQty=new BigDecimal(getMmMrsItm2().getCurrentRow().getAttribute("ReqQty").toString());
            if(AuthQty.compareTo(ReqQty)>0)
                return 1;
            else
                return 0;
            }
            else
                return 2;
        }
    
    public Integer checkResQty(String Res)
    {
       // System.out.println("Reserved Quantity="+Res);
      //  System.out.println("Auth qty in res validator="+getMmMrsItm2().getCurrentRow().getAttribute("AuthQty"));
        BigDecimal ResQty=new BigDecimal(Res);
        BigDecimal AvlStk=BigDecimal.ZERO;
        if(getMmMrsItm2().getCurrentRow().getAttribute("AuthQty")!=null)
        {
        BigDecimal AuthQty=new BigDecimal(getMmMrsItm2().getCurrentRow().getAttribute("AuthQty").toString());
        if(getMmMrsItm2().getCurrentRow().getAttribute("TransAvlStk")!=null)
         AvlStk=new BigDecimal(getMmMrsItm2().getCurrentRow().getAttribute("TransAvlStk").toString());
        if(ResQty.compareTo(AuthQty)>0 || ResQty.compareTo(AvlStk)>0)
            return 1;
        else
            return 0; 
        }
        else
            return 2;
      
        }
    
    
    
    public Integer generateFyIdforReqDate() {
        String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String OrgId=(String)getMmMrs2().getCurrentRow().getAttribute("OrgIdReqTo");
          //  System.out.println(OrgId);
            String ReqdDate =getMmMrs2().getCurrentRow().getAttribute("ReqdDt").toString();
           // System.out.println(MrsDate);
            Timestamp dt=new Timestamp(ReqdDate);
        Integer fyid=(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {CldId,OrgId,dt}));
        if(fyid>0)
            getMmMrs2().getCurrentRow().setAttribute("FyId",fyid);
            return fyid;
        }

    /**
     * Container's getter for MmPrItm1.
     * @return MmPrItm1
     */
    public ViewObjectImpl getMmPrItm1() {
        return (ViewObjectImpl)findViewObject("MmPrItm1");
    }

    /**
     * Container's getter for MmPr1.
     * @return MmPr1
     */
    public ViewObjectImpl getMmPr1() {
        return (ViewObjectImpl)findViewObject("MmPr1");
    }
    
    public String  checkPr()
    {
            String PrNo=null;
            String MrsTxnId = (String)getMmMrs2().getCurrentRow().getAttribute("MrsTxnId");
         
            Row r[]=getMmPr1().getFilteredRows("DocIdSrc",MrsTxnId);
            if(r.length>0)
                PrNo = (String)r[0].getAttribute("PrNo");
            return PrNo;
        
        }
    
    
    public String raisePr()
    {       
        String PrNo=null;
        String cnclmrs="N";
        if(getMmMrs2().getCurrentRow().getAttribute("CancelMRSTrans")!=null)
          cnclmrs=getMmMrs2().getCurrentRow().getAttribute("CancelMRSTrans").toString();
     //  Integer mrsst=(Integer)getMmMrs2().getCurrentRow().getAttribute("MrsStat");
        if(cnclmrs.equals("Y"))
        {
        getMmMrs2().getCurrentRow().setAttribute("MrsStat", 341);
        }
        else
        {
        String MrsTxnId = (String)getMmMrs2().getCurrentRow().getAttribute("MrsTxnId");
        Row[] r=getMmMrsItm2().getFilteredRows("MrsTxnId",MrsTxnId);
        System.out.println("no. of Rows="+r.length);
        Integer mlen=-1;
            String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String CldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String whid=getMmMrs2().getCurrentRow().getAttribute("WhIdReqTo").toString();
            String UsrId=resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();
            Integer fyid = (Integer)getMmMrs2().getCurrentRow().getAttribute("FyId"); 
            String prtxnId =(String)(callStoredFunction(Types.VARCHAR, "app.pkg_app.get_txn_id(?,?,?,?,?)", new Object[] {UsrId,OrgId,SlocId,new Integer(18514),CldId}));   
            String tableName="MM$PR";
            PrNo =(String)(callStoredFunction(Types.VARCHAR, "MM.fn_mm_gen_id(?,?,?,?,?,?)",new Object[] {SlocId,CldId,OrgId,tableName,whid,fyid})); 
        if(r.length >0)
        {
            mlen=r.length-1;
            //Set into MM$PR .
            Row prrow=getMmPr1().createRow();   
            prrow.setAttribute("CldId",CldId); 
            prrow.setAttribute("SlocId",SlocId); 
            prrow.setAttribute("OrgId",OrgId);
            prrow.setAttribute("WhId",whid);
            prrow.setAttribute("PrTxnId",prtxnId);
            prrow.setAttribute("PrTxnDt",new Timestamp(System.currentTimeMillis()));
            prrow.setAttribute("FyId",fyid);
            prrow.setAttribute("PrNo",PrNo);
            prrow.setAttribute("PrDt",new Timestamp(System.currentTimeMillis()));
            prrow.setAttribute("RqmtAreaId",getMmMrs2().getCurrentRow().getAttribute("RqmtAreaId"));
            prrow.setAttribute("PrType",287);
            prrow.setAttribute("DocIdSrc",MrsTxnId);
            prrow.setAttribute("DocDtSrc",getMmMrs2().getCurrentRow().getAttribute("MrsTxnDt"));
            prrow.setAttribute("PrStat",291);
            prrow.setAttribute("PrStatDt",new Timestamp(System.currentTimeMillis()));
            prrow.setAttribute("AuthStat","Y");
            prrow.setAttribute("UsrIdCreate",UsrId);
            prrow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            prrow.setAttribute("ReqdDt", getMmMrs2().getCurrentRow().getAttribute("ReqdDt"));
            getMmPr1().insertRow(prrow);
            getMmMrs2().getCurrentRow().setAttribute("MrsStat",295);
            getDBTransaction().commit();
            System.out.println("PrTxnId="+prtxnId);
        }
        while(mlen>=0)
        {
            if(r[mlen].getAttribute("CnclItm").toString().equals("N"))
            {
            System.out.println(r[mlen].getAttribute("ItmId"));
            //set into MM$PR$ITM
           String ItmId = (String)r[mlen].getAttribute("ItmId");
           BigDecimal PrQty=new BigDecimal(r[mlen].getAttribute("AuthQty").toString());
            String ItmUom=(String)r[mlen].getAttribute("ItmUom");
            Row pritmrow=getMmPrItm1().createRow();
            pritmrow.setAttribute("CldId", CldId);    
                pritmrow.setAttribute("SlocId", SlocId); 
                pritmrow.setAttribute("OrgId", OrgId); 
                pritmrow.setAttribute("WhId", whid); 
                pritmrow.setAttribute("PrTxnId", prtxnId); 
                pritmrow.setAttribute("ItmId", ItmId); 
                pritmrow.setAttribute("ItmUom", ItmUom); 
                pritmrow.setAttribute("PrQty", PrQty); 
                pritmrow.setAttribute("CnclItm", "N"); 
                pritmrow.setAttribute("PrQtyBs",PrQty);
                pritmrow.setAttribute("PoQty", new BigDecimal(0));
                pritmrow.setAttribute("PendQty", PrQty);
                pritmrow.setAttribute("PoQtyBs",new BigDecimal(0));
                pritmrow.setAttribute("PendQtyBs",PrQty);
                pritmrow.setAttribute("ItmUomBs",ItmUom);
                pritmrow.setAttribute("UomConvFctr",new BigDecimal(1));
            getMmPrItm1().insertRow(pritmrow);
            }
            mlen--;
            }
        } 
        System.out.println("PrNo.="+PrNo);  
        return PrNo;
        }
    
    public Boolean get_Usr_Level()     //return true if user is authorised else return false
    {
        String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                    Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                    String CldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());

        String docIdTxn= getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
        Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,18513,docIdTxn });
        Integer usrId=null; 
        if(obj!=null){
            usrId=Integer.parseInt(obj.toString());
        }
        System.out.println("usrId for Pending="+usrId);
            if(usrId.compareTo(UsrId)==0 || usrId.compareTo(-1)==0)
            {
                System.out.println("Authorised User or Approver");
                return true;
                }
            else
        return false;
        }

    /**
     * Container's getter for AppWfUsrLavelMap1.
     * @return AppWfUsrLavelMap1
     */
    public ViewObjectImpl getAppWfUsrLavelMap1() {
        return (ViewObjectImpl)findViewObject("AppWfUsrLavelMap1");
    }
    
    public Boolean checkAllItemCancel()
    {
      String docid=getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
       ViewObjectImpl itmvo=getMmMrsItm2();
       Row rows[]=getMmMrsItm2().getFilteredRows("MrsTxnId",docid);
       System.out.println("no of rows by filtered row="+rows.length);
            Integer len=-1;
            if(rows.length>0)
                len=rows.length-1;  
      //  System.out.println("No of rows by itr in item="+rsi.getAllRowsInRange().length);
        while(len>=0)
        {
            Row r=rows[len];
            System.out.println("Item Row ="+r.getAttribute("ItmId"));
             if(r.equals(itmvo.getCurrentRow()))
            {
            System.out.println("current row");
            }
            else 
            {
                System.out.println("Cancel?="+r.getAttribute("CnclItm"));
                if(r.getAttribute("CnclItm")!=null)
                {
                   if( r.getAttribute("CnclItm").toString().equals("N"))
                   {
                       getMmMrs2().getCurrentRow().setAttribute("CancelMRSTrans","N");
                        return false;
                   }
                    }
                }
            len--;
            }
        getMmMrs2().getCurrentRow().setAttribute("CancelMRSTrans","Y");
        return true;
        }
    
    public void setMrsStat(Integer stat)
    {
            getMmMrs2().getCurrentRow().setAttribute("MrsStat",stat);

        }
    
    public Boolean checkCancel()
    {
        String flg="N";
       /*  if(getMmMrs2().getCurrentRow().getAttribute("CancelMRSTrans")!=null)
        flg = (String)getMmMrs2().getCurrentRow().getAttribute("CancelMRSTrans"); */
        int count=0;
         RowSetIterator rsi=this.getMmMrsItm2().createRowSetIterator(null);
        while(rsi.hasNext())
        {
            Row r=rsi.next();
                    count++;
            }
        rsi.closeRowSetIterator();
        
         Row r[]=this.getMmMrsItm2().getFilteredRows("CnclItm","Y");
        if(count > 0)
        if(r.length == count)
            flg="Y";
        System.out.println("No. of rows in item table="+count);
        System.out.println("No. of Cancelled items="+r.length); 
        if(flg.equals("Y"))
            return true;
        else
            return false;
        }
    
    public void deleteMRS()
    {
       ViewObjectImpl itmimpl=getMmMrsItm1();
       Row r=getMmMrs1().getCurrentRow();
       String txn= r.getAttribute("MrsTxnId").toString();
       String cld = (String)r.getAttribute("CldId");
       String org = (String)r.getAttribute("OrgId");
       Integer sloc = (Integer)r.getAttribute("SlocId");
      RowSetIterator rsi=itmimpl.createRowSetIterator(null);
        while(rsi.hasNext())
        {
            Row itmrow=rsi.next();
            if(itmrow.getAttribute("MrsTxnId").equals(txn) && itmrow.getAttribute("CldId").equals(cld) && itmrow.getAttribute("SlocId").equals(sloc) 
            && itmrow.getAttribute("OrgId").equals(org))
            {
            System.out.println("Removing row="+itmrow.getAttribute("ItmId"));
            itmrow.remove();
            } 
            }   
        itmimpl.closeRowSetIterator();
        itmimpl.executeQuery();
        System.out.println("removing mrs row ="+r.getAttribute("MrsTxnId"));
        r.remove();
        getMmMrs1().executeQuery();
           this.getDBTransaction().commit();             
        }

    /**
     * Container's getter for Usr1.
     * @return Usr1
     */
    public ViewObjectImpl getUsr1() {
        return (ViewObjectImpl)findViewObject("Usr1");
    }

    /**
     * Container's getter for MmMrsWfTxn1.
     * @return MmMrsWfTxn1
     */
    public ViewObjectImpl getMmMrsWfTxn1() {
        return (ViewObjectImpl)findViewObject("MmMrsWfTxn1");
    }
    
    public void setItemId(String itmname)
    {
       Row[] r= this.getItemPrf1().getFilteredRows("ItmDesc",itmname);
            String itmId=null;
       if(r.length>0)
        itmId = (String)r[0].getAttribute("ItmId");
        getMmMrs2().getCurrentRow().setAttribute("transItmId", itmId);
      //  getMmMrsItm2().getCurrentRow().setAttribute("TransItmDesc", itmname);
        }
    
    public Boolean chkDuplicate(String itm)
    {  
        String id=null;
              Row prfr[]=  getItemPrf1().getFilteredRows("ItmDesc",itm);
              if(prfr.length>0)
                  id = (String)prfr[0].getAttribute("ItmId");
              System.out.println("id ="+id);
              if(id!=null)
              { 
        RowSetIterator rsi=getMmMrsItm2().createRowSetIterator(null);
        while(rsi.hasNext())
        {
            Row row=rsi.next();
            System.out.println("itm id="+row.getAttribute("ItmId").toString());
            if(row.getAttribute("ItmId").toString().equals(id))
                return true;
            }
        rsi.closeRowSetIterator();
              }
      else
          return false;
              
              return false;
        }
   
    public void deleteItm()
    {
        getMmMrsItm2().getCurrentRow().remove();
        getMmMrsItm2().executeQuery();
        }
    
    public void updtStkAftrCncl()
    {
            Integer fyid=Integer.parseInt(getMmMrs2().getCurrentRow().getAttribute("FyId").toString());
              String txnId=getMmMrs2().getCurrentRow().getAttribute("MrsTxnId").toString();
              String orgId=getMmMrs2().getCurrentRow().getAttribute("OrgId").toString();
              String cldId=getMmMrs2().getCurrentRow().getAttribute("CldId").toString();
              Integer slocId=Integer.parseInt(getMmMrs2().getCurrentRow().getAttribute("SlocId").toString());
            Object obj1= callStoredFunction(NUMBER, "MM_UPDT_STK_RESV_CNCL(?,?,?,?,?,?)", new Object[] { cldId,slocId,orgId,txnId,fyid,326});
            System.out.println("Cancelled ="+obj1);
        }
    
    public void setQtyAccToReqQty(BigDecimal qty)
    {
        Row Curr=this.getMmMrsItm2().getCurrentRow();
            Curr.setAttribute("ReqQty", qty);
          Curr.setAttribute("AuthQty",  qty);
          Curr.setAttribute("StkResvQty", BigDecimal.ZERO);
            Curr.setAttribute("PendQty", qty);  
        }
    
    public void setQtyAccToAuthQty(BigDecimal qty)
    {
        Row Curr=this.getMmMrsItm2().getCurrentRow();
      //  Curr.setAttribute("ResvQty", qty);
            Curr.setAttribute("StkResvQty", BigDecimal.ZERO);
        }
    
    public void deleteItemonWhChange()
    {
         RowSetIterator itr=this.getMmMrsItm2().createRowSetIterator(null);
        while(itr.hasNext())
        {
            Row row=itr.next();
            row.setAttribute("StkResvQty", BigDecimal.ZERO );
            }
        itr.closeRowSetIterator(); 
        this.getMmMrsItm2().executeQuery();
        }


    /**
     * @count rows in item table
     */
    public Integer countItems()
    { 
        Integer count=0;
       // count = this.getMmMrsItm2().getEstimatedRowCount();
           RowSetIterator itr=this.getMmMrsItm2().createRowSetIterator(null);
            while(itr.hasNext())
            {
                Row row=itr.next();
                count++;
                }
            itr.closeRowSetIterator(); 
            return count;
        }
    
    public void ExecuteVo()
    {
        this.getMmMrsItm2().executeQuery();
        }
    
    public void SetWh(String Wh)
    {
        this.getMmMrs2().getCurrentRow().setAttribute("WhIdReqTo", Wh);
            this.getMmMrsItm2().executeQuery();
        }
    
    public void SetRQA(Integer rqa)
    {
        this.getMmMrs2().getCurrentRow().setAttribute("RqmtAreaId", rqa);
            this.getMmMrsItm2().executeQuery();
        }
    
    public String ChkUseValid()
    {
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            Integer usr_id_mod=null;
        if(this.getMmMrs2().getCurrentRow().getAttribute("UsrIdMod")!=null)
        usr_id_mod=(Integer)this.getMmMrs2().getCurrentRow().getAttribute("UsrIdMod");
            if(usr_id.equals(usr_id_mod))
                return "Y";
            else
                return "N";
        }
    
    public String chkValidReqDate(Timestamp reqDt)
    {
            Timestamp mrsdt = (Timestamp)this.getMmMrs2().getCurrentRow().getAttribute("MrsDt");
        try {
            System.out.println("MRS Date="+mrsdt.dateValue());
        System.out.println("Req Date="+reqDt.dateValue());
            } catch (SQLException e) {
            System.out.println("timestamp to date Cast Exception");
            }
        if(reqDt!=null)
        {

            try {
                if( reqDt.dateValue().compareTo(mrsdt.dateValue())>=0)
               return "Y";
           else
                {
                    if( reqDt.dateValue().toString().equals(mrsdt.dateValue().toString()))
                    return "Y";
                    else
                    return "N";
                }
            } catch (SQLException e) {
                System.out.println("Date cast Error");
            }
        }
        return "Y";
              
    
        }
    
    public void SetStkResQty(BigDecimal qty)
    {
            Row Curr=this.getMmMrsItm2().getCurrentRow();
              Curr.setAttribute("AuthQty", qty);
              Curr.setAttribute("StkResvQty", BigDecimal.ZERO);
        }
     
     public String usrName(Integer usrId)
     {
             Integer slocId=Integer.parseInt(getMmMrs2().getCurrentRow().getAttribute("SlocId").toString());
         RowQualifier rq=new RowQualifier(this.getUsr1());
         rq.setWhereClause("SlocId="+slocId+" and UsrId="+usrId);
         Row[] r=this.getUsr1().getFilteredRows(rq);
         if(r.length>0)
             return (String)r[0].getAttribute("UsrName");
         else
             return "Anonymouse";
         }
     
     public void executeBindinWarehouse()
     {
             String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
             Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
             String CldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
             String HoOrgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
             ViewCriteria vc= this.getAvailStk1().getViewCriteria("AvailStkVOCriteria1");
             this.getAvailStk1().setNamedWhereClauseParam("CldIdBindVar", CldId);
             this.getAvailStk1().setNamedWhereClauseParam("SlocIdBindVar", SlocId);
             this.getAvailStk1().setNamedWhereClauseParam("OrgIdBindVar", OrgId);
             this.getAvailStk1().setNamedWhereClauseParam("hoOrgBindVar", OrgId);
             this.getAvailStk1().applyViewCriteria(vc);
             this.getAvailStk1().executeQuery();
         }

    /**
     * Container's getter for OrgMmPrfVO1.
     * @return OrgMmPrfVO1
     */
    public ViewObjectImpl getOrgMmPrfVO1() {
        return (ViewObjectImpl)findViewObject("OrgMmPrfVO1");
    }
    public String checkReservForMrs(){
      ViewObjectImpl orgMMprfvo=this.getOrgMmPrfVO1();
      String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
      String cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
      Integer slocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
      RowQualifier rq=new RowQualifier(orgMMprfvo);
      rq.setWhereClause("CldId = '"+cldId+"' AND SlocId = "+slocId+" AND OrgId = '"+orgId+"'");
       Row []row= orgMMprfvo.getFilteredRows(rq);
       if(row.length>0) {
      String resv= row[0].getAttribute("ResvAgainstMrs").toString();              
        return  resv;
      }
      else{
          return "N";
      }
    }

    /**
     * Container's getter for StockDetail.
     * @return StockDetail
     */
    public ViewObjectImpl getStockDetail() {
        return (ViewObjectImpl)findViewObject("StockDetail");
    }
}


