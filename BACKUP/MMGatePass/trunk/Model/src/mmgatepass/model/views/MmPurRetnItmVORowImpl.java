package mmgatepass.model.views;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 18 17:00:37 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmPurRetnItmVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        DocId {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        OrgId {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        CldId {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        WhId {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getWhId();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setWhId((String)value);
            }
        }
        ,
        ItmId {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setItmId((String)value);
            }
        }
        ,
        ItmUom {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getItmUom();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setItmUom((String)value);
            }
        }
        ,
        ItmUomBs {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getItmUomBs();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setItmUomBs((String)value);
            }
        }
        ,
        UomConvFctr {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getUomConvFctr();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setUomConvFctr((Number)value);
            }
        }
        ,
        TotRetQty {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getTotRetQty();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setTotRetQty((Number)value);
            }
        }
        ,
        RejQty {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getRejQty();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setRejQty((Number)value);
            }
        }
        ,
        RwkQty {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getRwkQty();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setRwkQty((Number)value);
            }
        }
        ,
        RejQtyBs {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getRejQtyBs();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setRejQtyBs((Number)value);
            }
        }
        ,
        RwkQtyBs {
            public Object get(MmPurRetnItmVORowImpl obj) {
                return obj.getRwkQtyBs();
            }

            public void put(MmPurRetnItmVORowImpl obj, Object value) {
                obj.setRwkQtyBs((Number)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmPurRetnItmVORowImpl object);

        public abstract void put(MmPurRetnItmVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int UOMCONVFCTR = AttributesEnum.UomConvFctr.index();
    public static final int TOTRETQTY = AttributesEnum.TotRetQty.index();
    public static final int REJQTY = AttributesEnum.RejQty.index();
    public static final int RWKQTY = AttributesEnum.RwkQty.index();
    public static final int REJQTYBS = AttributesEnum.RejQtyBs.index();
    public static final int RWKQTYBS = AttributesEnum.RwkQtyBs.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmPurRetnItmVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WhId.
     * @return the WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WhId.
     * @param value value to set the  WhId
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmId.
     * @param value value to set the  ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUom.
     * @return the ItmUom
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmUom.
     * @param value value to set the  ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotRetQty.
     * @return the TotRetQty
     */
    public Number getTotRetQty() {
        return (Number) getAttributeInternal(TOTRETQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotRetQty.
     * @param value value to set the  TotRetQty
     */
    public void setTotRetQty(Number value) {
        setAttributeInternal(TOTRETQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RejQty.
     * @return the RejQty
     */
    public Number getRejQty() {
        return (Number) getAttributeInternal(REJQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RejQty.
     * @param value value to set the  RejQty
     */
    public void setRejQty(Number value) {
        setAttributeInternal(REJQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RwkQty.
     * @return the RwkQty
     */
    public Number getRwkQty() {
        return (Number) getAttributeInternal(RWKQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RwkQty.
     * @param value value to set the  RwkQty
     */
    public void setRwkQty(Number value) {
        setAttributeInternal(RWKQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUomBs.
     * @return the ItmUomBs
     */
    public String getItmUomBs() {
        return (String) getAttributeInternal(ITMUOMBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmUomBs.
     * @param value value to set the  ItmUomBs
     */
    public void setItmUomBs(String value) {
        setAttributeInternal(ITMUOMBS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UomConvFctr.
     * @return the UomConvFctr
     */
    public Number getUomConvFctr() {
        return (Number) getAttributeInternal(UOMCONVFCTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UomConvFctr.
     * @param value value to set the  UomConvFctr
     */
    public void setUomConvFctr(Number value) {
        setAttributeInternal(UOMCONVFCTR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RejQtyBs.
     * @return the RejQtyBs
     */
    public Number getRejQtyBs() {
        return (Number) getAttributeInternal(REJQTYBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RejQtyBs.
     * @param value value to set the  RejQtyBs
     */
    public void setRejQtyBs(Number value) {
        setAttributeInternal(REJQTYBS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RwkQtyBs.
     * @return the RwkQtyBs
     */
    public Number getRwkQtyBs() {
        return (Number) getAttributeInternal(RWKQTYBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RwkQtyBs.
     * @param value value to set the  RwkQtyBs
     */
    public void setRwkQtyBs(Number value) {
        setAttributeInternal(RWKQTYBS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
