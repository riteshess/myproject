package mmgatepass.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmgatepass.model.services.common.MmGatePassAM;
import mmgatepass.model.views.MmGpItmVOImpl;
import mmgatepass.model.views.SearchGpVOImpl;

import mmgatepass.model.views.TransSearchCompVOImpl;

import oracle.jbo.domain.Number;
import mmgatepass.model.views.MmGpVOImpl;

import mmgatepass.model.views.MmPurRetnItmVOImpl;
import mmgatepass.model.views.MmRmdaItmVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 18 10:32:38 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmGatePassAMImpl extends ApplicationModuleImpl implements MmGatePassAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MmGatePassAMImpl() {
    }

    /**
     * Container's getter for MmGp.
     * @return MmGp
     */
    public MmGpVOImpl getMmGp() {
        return (MmGpVOImpl)findViewObject("MmGp");
    }

    /**
     * Container's getter for LovOrgId.
     * @return LovOrgId
     */
    public ViewObjectImpl getLovOrgId() {
        return (ViewObjectImpl)findViewObject("LovOrgId");
    }

    /**
     * Container's getter for LovWhId.
     * @return LovWhId
     */
    public ViewObjectImpl getLovWhId() {
        return (ViewObjectImpl)findViewObject("LovWhId");
    }

    /**
     * Container's getter for LovDocTypeSrc.
     * @return LovDocTypeSrc
     */
    public ViewObjectImpl getLovDocTypeSrc() {
        return (ViewObjectImpl)findViewObject("LovDocTypeSrc");
    }

    /**
     * Container's getter for LovMrnNo.
     * @return LovMrnNo
     */
    public ViewObjectImpl getLovMrnNo() {
        return (ViewObjectImpl)findViewObject("LovMrnNo");
    }

    /**
     * Container's getter for LovRmdaNo.
     * @return LovRmdaNo
     */
    public ViewObjectImpl getLovRmdaNo() {
        return (ViewObjectImpl)findViewObject("LovRmdaNo");
    }

    /**
     * Container's getter for LovMmPurRetNo.
     * @return LovMmPurRetNo
     */
    public ViewObjectImpl getLovMmPurRetNo() {
        return (ViewObjectImpl)findViewObject("LovMmPurRetNo");
    }

    /**
     * Container's getter for LovEoId.
     * @return LovEoId
     */
    public ViewObjectImpl getLovEoId() {
        return (ViewObjectImpl)findViewObject("LovEoId");
    }

    /**
     * Container's getter for LovSAddsIdEo.
     * @return LovSAddsIdEo
     */
    public ViewObjectImpl getLovSAddsIdEo() {
        return (ViewObjectImpl)findViewObject("LovSAddsIdEo");
    }

    /**
     * Container's getter for MmGpItm.
     * @return MmGpItm
     */
    public MmGpItmVOImpl getMmGpItm() {
        return (MmGpItmVOImpl)findViewObject("MmGpItm");
    }

    /**
     * Container's getter for MmGpToGpItemVL1.
     * @return MmGpToGpItemVL1
     */
    public ViewLinkImpl getMmGpToGpItemVL1() {
        return (ViewLinkImpl)findViewLink("MmGpToGpItemVL1");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl)findViewObject("LovItmId");
    }

    /**
     * Container's getter for LovUomId.
     * @return LovUomId
     */
    public ViewObjectImpl getLovUomId() {
        return (ViewObjectImpl)findViewObject("LovUomId");
    }

    /**
     * Container's getter for LovUsrId.
     * @return LovUsrId
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl)findViewObject("LovUsrId");
    }
    
    public void AddItems()
    {
        Row gpR=getMmGp().getCurrentRow();
        String cldId=(String)gpR.getAttribute("CldId");
        Integer slocId=Integer.parseInt(gpR.getAttribute("SlocId").toString());
        String docId=(String)gpR.getAttribute("DocId");
        String orgId=(String)gpR.getAttribute("OrgId");
        String whId=(String)gpR.getAttribute("WhId");
        String docIdSrc=(String)gpR.getAttribute("DocIdSrc");
        Integer doctype = (Integer)gpR.getAttribute("DocTypeSrc");
       Number zero=new Number(0);
        if(doctype.toString().equals("434"))  //for RMDA
        {
            ViewObjectImpl rmda=this.getMmRmdaItm();
            RowQualifier rmdaRQ=new RowQualifier(rmda);
            rmdaRQ.setWhereClause("CldId='"+cldId+"' and SlocId="+slocId+" and OrgId='"+orgId+"' and WhId='"+whId+"' and DocId='"+docIdSrc+"'");
            Row[] frRmda=rmda.getFilteredRows(rmdaRQ);
            Integer length=-1;
            if(frRmda.length>0)
            {
                length=frRmda.length-1;
                }
            while(length>=0)
            {
                String itmid = frRmda[length].getAttribute("ItmId").toString();
               
                String itmUom = null;
                if(frRmda[length].getAttribute("ItmUom")!=null)
                itmUom = frRmda[length].getAttribute("ItmUom").toString();
                
                //Apply check If Item is already addded or not.
                RowQualifier rq=new RowQualifier(this.getMmGpItm());
                rq.setWhereClause("OrgId='"+orgId+"' and DocId='"+docId+"' and ItmId='"+itmid+"' and ItmUom='"+itmUom+"'");
                Row[] Itmrw= getMmGpItm().getFilteredRows(rq);
                if(Itmrw.length>0)
                {}
                else
                {
                
                Number rejQty = zero;
                if(frRmda[length].getAttribute("RejQty")!=null)
                  rejQty =  (Number)frRmda[length].getAttribute("RejQty");
                
                String itmuomBs=itmUom;
                if(frRmda[length].getAttribute("ItmUomBs")!=null)
                 itmuomBs = frRmda[length].getAttribute("ItmUomBs").toString();
                
                Number uomConvFctr=new Number(1);
                if(frRmda[length].getAttribute("UomConvFctr")!=null)
                 uomConvFctr = (Number)frRmda[length].getAttribute("UomConvFctr");
                
                Number rejQtyBs=rejQty;
                if(frRmda[length].getAttribute("RejQtyBs")!=null)
                 rejQtyBs = (Number)frRmda[length].getAttribute("RejQtyBs");
                
                Row newrow = getMmGpItm().createRow();
                    newrow.setAttribute("CldId", cldId);
                    newrow.setAttribute("SlocId", slocId);
                    newrow.setAttribute("OrgId", orgId);
                    newrow.setAttribute("WhId", whId);
                    newrow.setAttribute("DocId", docId);
                    newrow.setAttribute("ItmId", itmid);
                    newrow.setAttribute("ItmUom", itmUom);
                    newrow.setAttribute("RwkQty", zero);
                    newrow.setAttribute("RejQty", rejQty);
                    newrow.setAttribute("ItmUomBs", itmuomBs);
                    newrow.setAttribute("UomConvFctr", uomConvFctr);
                    newrow.setAttribute("RwkQtyBs", zero);
                    newrow.setAttribute("RejQtyBs", rejQtyBs);
                    newrow.setAttribute("TotRcptQty", zero);
                    newrow.setAttribute("TotRcptQtyBs", zero);
                    getMmGpItm().insertRow(newrow);  
                }
                 length--;
                }
                getMmGpItm().executeQuery();
            }
        else if(doctype.toString().equals("433")) //for Purchase Return
        {
                ViewObjectImpl purRetn=this.getMmPurRetnItm();
                RowQualifier purRetnRQ=new RowQualifier(purRetn);
                purRetnRQ.setWhereClause("CldId='"+cldId+"' and SlocId="+slocId+" and OrgId='"+orgId+"' and WhId='"+whId+"' and DocId='"+docIdSrc+"'");
                Row[] frPurRetn=purRetn.getFilteredRows(purRetnRQ);
                Integer length=-1;
                if(frPurRetn.length>0)
                {
                    length=frPurRetn.length-1;
                    }
                while(length>=0)
                {
                    String itmid = frPurRetn[length].getAttribute("ItmId").toString();
                   
                    String itmUom = null;
                    if(frPurRetn[length].getAttribute("ItmUom")!=null)
                    itmUom = frPurRetn[length].getAttribute("ItmUom").toString();
                    
                        //Apply check If Item is already addded or not.
                    RowQualifier rq=new RowQualifier(this.getMmGpItm());
                    rq.setWhereClause("OrgId='"+orgId+"' and DocId='"+docId+"' and ItmId='"+itmid+"' and ItmUom='"+itmUom+"'");
                  Row[] Itmrw= getMmGpItm().getFilteredRows(rq);
                    if(Itmrw.length>0)
                    {}
                    else
                    {
                    
                    Number rejQty = zero;
                    if(frPurRetn[length].getAttribute("RejQty")!=null)
                      rejQty =  (Number)frPurRetn[length].getAttribute("RejQty");
                    
                    String itmuomBs=itmUom;
                    if(frPurRetn[length].getAttribute("ItmUomBs")!=null)
                     itmuomBs = frPurRetn[length].getAttribute("ItmUomBs").toString();
                    
                    Number uomConvFctr=new Number(1);
                    if(frPurRetn[length].getAttribute("UomConvFctr")!=null)
                     uomConvFctr = (Number)frPurRetn[length].getAttribute("UomConvFctr");
                    
                    Number rejQtyBs=rejQty;
                    if(frPurRetn[length].getAttribute("RejQtyBs")!=null)
                     rejQtyBs = (Number)frPurRetn[length].getAttribute("RejQtyBs");
                    
                    Number rwkQty=zero;
                    if(frPurRetn[length].getAttribute("RwkQty")!=null)
                        rwkQty=(Number)frPurRetn[length].getAttribute("RwkQty");
                    
                    Number rwkQtyBs=rwkQty;
                    if(frPurRetn[length].getAttribute("RwkQtyBs")!=null)
                        rwkQtyBs=(Number)frPurRetn[length].getAttribute("RwkQtyBs");
                    
                    
                    Row newrow = getMmGpItm().createRow();
                        newrow.setAttribute("CldId", cldId);
                        newrow.setAttribute("SlocId", slocId);
                        newrow.setAttribute("OrgId", orgId);
                        newrow.setAttribute("WhId", whId); 
                        newrow.setAttribute("DocId", docId);
                        newrow.setAttribute("ItmId", itmid);
                        newrow.setAttribute("ItmUom", itmUom);
                        newrow.setAttribute("RwkQty", rwkQty);
                        newrow.setAttribute("RejQty", rejQty);
                        newrow.setAttribute("ItmUomBs", itmuomBs);
                        newrow.setAttribute("UomConvFctr", uomConvFctr);
                        newrow.setAttribute("RwkQtyBs", rwkQtyBs);
                        newrow.setAttribute("RejQtyBs", rejQtyBs);
                        newrow.setAttribute("TotRcptQty", zero);  
                        newrow.setAttribute("TotRcptQtyBs",zero);          
                        getMmGpItm().insertRow(newrow); 
                    
                    //add itm in stk
                        ViewObjectImpl prs=this.getMmPurRetnItmStk();
                        RowQualifier rqprs=new RowQualifier(prs);
                        rqprs.setWhereClause("CldId='"+cldId+"' and SlocId="+slocId+" and OrgId='"+orgId+"' and WhId='"+whId+"' and DocId='"+docIdSrc+"' and ItmId='"+itmid+"' and ItmUom='"+itmUom+"'");
            Row[] stkrow=prs.getFilteredRows(rqprs);
                    Integer lenstk=-1;
                    if(stkrow.length>0)
                        lenstk=stkrow.length-1;
                        ViewObjectImpl gps=this.getMmGpItmStk();
                    while(lenstk>=0)
                    {
                        Row stknew=gps.createRow();
                            stknew.setAttribute("CldId", cldId);
                            stknew.setAttribute("SlocId", slocId);
                            stknew.setAttribute("OrgId", orgId);
                            stknew.setAttribute("WhId", whId);
                            stknew.setAttribute("DocId", docId);
                            stknew.setAttribute("ItmId", itmid);
                            stknew.setAttribute("ItmUom", itmUom);
                            stknew.setAttribute("LotId", stkrow[lenstk].getAttribute("LotId"));
                            stknew.setAttribute("SrNo", stkrow[lenstk].getAttribute("SrNo"));
                            stknew.setAttribute("RejQty", stkrow[lenstk].getAttribute("RejQty"));
                            stknew.setAttribute("RwkQty", stkrow[lenstk].getAttribute("RwkQty"));
                            stknew.setAttribute("ItmUomBs", itmuomBs);
                            stknew.setAttribute("UomConvFctr", uomConvFctr);
                            stknew.setAttribute("RejQtyBs", stkrow[lenstk].getAttribute("RejQtyBs"));
                            stknew.setAttribute("RwkQtyBs", stkrow[lenstk].getAttribute("RwkQtyBs"));
                    gps.insertRow(stknew);       
                      lenstk--;
                        } 
                    gps.executeQuery();
                    }
                    length--;
                    }
                    getMmGpItm().executeQuery();
            }
        }
            
            
             public String updateInStat()
            {
              RowSetIterator rsi=getMmGpItm().createRowSetIterator(null);
              while(rsi.hasNext())
              {
                  Row r=rsi.next();
                  if(r.getAttribute("RwkQty")!=null && r.getAttribute("TotRcptQty")!=null)
                  {
                      Number rew = (Number)r.getAttribute("RwkQty");
                      Number totret=(Number)r.getAttribute("TotRcptQty");
                      if(rew.compareTo(totret)!=0)
                      {
                          return "N";
                          }
                      }
              }
              this.getMmGp().getCurrentRow().setAttribute("GpInStat", "Y");
              this.getMmGp().getCurrentRow().setAttribute("GpInDt",new Timestamp(System.currentTimeMillis()));
              return "Y";
             }
             
             public String ChkInStat()
             {
                 if(getMmGp().getCurrentRow().getAttribute("GpInStat")!=null)
                 return this.getMmGp().getCurrentRow().getAttribute("GpInStat").toString();
                 else
                     return "N";
                 }
    /**
     * Container's getter for MmPurRetnItm.
     * @return MmPurRetnItm
     */
    public MmPurRetnItmVOImpl getMmPurRetnItm() {
        return (MmPurRetnItmVOImpl)findViewObject("MmPurRetnItm");
    }

    /**
     * Container's getter for MmRmdaItm.
     * @return MmRmdaItm
     */
    public MmRmdaItmVOImpl getMmRmdaItm() {
        return (MmRmdaItmVOImpl)findViewObject("MmRmdaItm");
    }
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                MmGatePassAMImpl am = (MmGatePassAMImpl)resolvElDC("MmGatePassAMDataControl");
                st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
     
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) { throw new JboException(e);
                    }
                }
            }
        }
   
   
    public void GenerateFyId()
    {
        String CldId = (String)this.getMmGp().getCurrentRow().getAttribute("CldId");
        String OrgId = (String)this.getMmGp().getCurrentRow().getAttribute("OrgId");
        Timestamp dt = (Timestamp)this.getMmGp().getCurrentRow().getAttribute("GpDt");
            Integer fyid=(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {CldId,OrgId,dt}));
            this.getMmGp().getCurrentRow().setAttribute("FyId",fyid);
            System.out.println("fyid="+fyid);
        }
   
   
    public void generateGPNo()
    {
        if(getMmGp().getCurrentRow().getAttribute("GpNo") == null){
            String cldId=this.getMmGp().getCurrentRow().getAttribute("CldId").toString();
            Integer slocId=Integer.parseInt(this.getMmGp().getCurrentRow().getAttribute("SlocId").toString());
            String orgId=(String)this.getMmGp().getCurrentRow().getAttribute("OrgId");
            String whId=(String)this.getMmGp().getCurrentRow().getAttribute("WhId");
            Integer fyId=Integer.parseInt(this.getMmGp().getCurrentRow().getAttribute("FyId").toString());
            String gpno =(String)(callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {slocId,cldId,orgId,"MM$GP",whId,fyId})); 
            this.getMmGp().getCurrentRow().setAttribute("GpNo",gpno);
            System.out.println("gp no="+gpno);
    }
            System.out.println("gp no is not null");
        }
    
    public String ChkDupli()
    {
        System.out.println("amimpl dupli");
            this.getMmGp1().executeQuery();
            Row gpR=getMmGp().getCurrentRow(); 
            String docIdSrc=(String)gpR.getAttribute("DocIdSrc");
            System.out.println("DocId to Check="+docIdSrc);
                RowSetIterator rsi=getMmGp1().getRowSetIterator();
                while(rsi.hasNext())
                {
                    Row r=rsi.next();
                    System.out.println("DocId in ITR="+r.getAttribute("DocIdSrc"));
                    if(r.getKey().toString().equals(gpR.getKey().toString()))
                    {}
                    else
                    {
                        if(r.getAttribute("DocIdSrc").toString().equals(docIdSrc))
                        {
                            System.out.println("duplicate row");
                            return "Y";
                            }
                        }
                }
                rsi.closeRowSetIterator();
                return "N";
        }
    public void updateTotRetQty(Number qty)
    {
        if(qty!=null)
        {
            Number zero=new Number(0);
                Number totretQty=zero;
                Row currItm=getMmGpItm().getCurrentRow();
            if(currItm.getAttribute("TotRcptQty")!=null)
              totretQty = (Number)currItm.getAttribute("TotRcptQty");
               currItm.setAttribute("TotRcptQty", totretQty.add(qty));
               if(qty.compareTo(zero)>0)
               {
                ViewObjectImpl gpItmRcpt = this.getMmGpItmRcpt();
                Row r=gpItmRcpt.createRow();
                r.setAttribute("CldId", currItm.getAttribute("CldId"));
                r.setAttribute("SlocId", currItm.getAttribute("SlocId"));
                r.setAttribute("OrgId", currItm.getAttribute("OrgId"));
                r.setAttribute("WhId", currItm.getAttribute("WhId"));
                r.setAttribute("DocId", currItm.getAttribute("DocId"));
                r.setAttribute("ItmId", currItm.getAttribute("ItmId"));
                r.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                r.setAttribute("RcptQty", qty);
                r.setAttribute("ItmUomBs", currItm.getAttribute("ItmUomBs"));
                r.setAttribute("SrNo", currItm.getAttribute("TransSrNoVis"));
                Number convfctr=new Number(1);
                if(currItm.getAttribute("UomConvFctr")!=null)
                   convfctr = (Number)currItm.getAttribute("UomConvFctr");
                r.setAttribute("UomConvFctr", convfctr);
                r.setAttribute("RcptQtyBs", qty.multiply(convfctr));
                Integer usr=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
                r.setAttribute("UsrIdRcpt", usr);
                r.setAttribute("RcptDt", new Timestamp(System.currentTimeMillis()));
                gpItmRcpt.insertRow(r);
                gpItmRcpt.executeQuery();
            }
            
            }
        }
    public String resolvEl(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
          String msg = valueExp.getValue(elContext).toString();
          return msg;
      }
    public String CheckQty(Number qty)
    {
            if(qty!=null)
            {
                    Number totretQty=new Number(0);
                if(getMmGpItm().getCurrentRow().getAttribute("TotRcptQty")!=null)
                  totretQty = (Number)getMmGpItm().getCurrentRow().getAttribute("TotRcptQty");
                  Number rwk= (Number)getMmGpItm().getCurrentRow().getAttribute("RwkQty");
                   Number tot= totretQty.add(qty);
                   if(tot.compareTo(rwk)>0)
                       return "N";
                   else
                       return "Y";
                }
            return "Y";
        }
    
    public void ClearHeader()
    {
            Row gprow=getMmGp().getCurrentRow();
            gprow.setAttribute("EoId", null);
            gprow.setAttribute("TransDocNoSrc", null);
            gprow.setAttribute("TransAddsDesc", null);
            gprow.setAttribute("DocIdSrc", null);
            gprow.setAttribute("AddsIdEo", null);
        }
    
    public void RemoveItmRows()
    {
             Row gprow=getMmGp().getCurrentRow();
             if(gprow.getAttribute("GpNo")!=null){
         /*   String cld=gprow.getAttribute("CldId").toString();
            Integer sloc=Integer.parseInt(gprow.getAttribute("SlocId").toString());
            String org=gprow.getAttribute("OrgId").toString();
            String wh=gprow.getAttribute("WhId").toString();
            String doc=gprow.getAttribute("DocId").toString(); */
        RowSetIterator rsi=getMmGpItm().createRowSetIterator(null);
        while(rsi.hasNext())
        {
            Row r=rsi.next();
            r.remove();
            }
        rsi.closeRowSetIterator();
        getMmGpItm().executeQuery();
             }
        }

    /**
     * Container's getter for MmGpItmRcpt.
     * @return MmGpItmRcpt
     */
    public ViewObjectImpl getMmGpItmRcpt() {
        return (ViewObjectImpl)findViewObject("MmGpItmRcpt");
    }

    /**
     * Container's getter for MmGpItmToRcptVL1.
     * @return MmGpItmToRcptVL1
     */
    public ViewLinkImpl getMmGpItmToRcptVL1() {
        return (ViewLinkImpl)findViewLink("MmGpItmToRcptVL1");
    }
    
    public void RemoveItmRcptRows()
    {
            Row gprow=getMmGp().getCurrentRow();
            if(gprow.getAttribute("GpNo")!=null){
            RowSetIterator rqstk=getMmGpItmStk1().createRowSetIterator(null);     
            while(rqstk.hasNext())
            {
               Row Stkrow=rqstk.next();
                Stkrow.remove();
                }
            rqstk.closeRowSetIterator();
            getMmGpItmStk1().executeQuery();
            getMmGpItmStk().executeQuery();
            RowSetIterator rsi=getMmGpItmRcpt().createRowSetIterator(null);
            while(rsi.hasNext())
            {
                Row r=rsi.next();
                r.remove();
                }
            rsi.closeRowSetIterator();
            getMmGpItmRcpt().executeQuery();
            }
        }
    
    public void DelItmRecpt()
    {
        Number zero=new Number(0);
        Row r=getMmGpItmRcpt().getCurrentRow();
        Number retqty = zero;
        if(r.getAttribute("RcptQty")!=null)
            retqty=(Number)r.getAttribute("RcptQty");
        r.remove();
        Row itmrow=getMmGpItm().getCurrentRow();
        Number totrcpt=zero;
        if(itmrow.getAttribute("TotRcptQty")!=null)
        totrcpt = (Number)itmrow.getAttribute("TotRcptQty");
        Number convfctr=new Number(1);
            if(itmrow.getAttribute("UomConvFctr")!=null)
                convfctr = (Number)itmrow.getAttribute("UomConvFctr");
          //  itmrow.setAttribute("RcptQty",rcptqty.add(retqty));
            itmrow.setAttribute("TotRcptQty",totrcpt.subtract(retqty));
            itmrow.setAttribute("TotRcptQtyBs",(totrcpt.subtract(retqty)).multiply(convfctr));  
        }
    
    public void updateQty(Number diff)
    {
            Number zero=new Number(0);
            Row itmrow=getMmGpItm().getCurrentRow();
            Number totrcpt=zero;
            if(itmrow.getAttribute("TotRcptQty")!=null)
            totrcpt = (Number)itmrow.getAttribute("TotRcptQty");
            Number convfctr=new Number(1);
                if(itmrow.getAttribute("UomConvFctr")!=null)
                    convfctr = (Number)itmrow.getAttribute("UomConvFctr");
            itmrow.setAttribute("TotRcptQty",totrcpt.add(diff));
            itmrow.setAttribute("TotRcptQtyBs",(totrcpt.subtract(diff)).multiply(convfctr));  
        }

    /**
     * Container's getter for MmGpItmStk.
     * @return MmGpItmStk
     */
    public ViewObjectImpl getMmGpItmStk() {
        return (ViewObjectImpl)findViewObject("MmGpItmStk");
    }

    /**
     * Container's getter for MmGpItmToStkVL1.
     * @return MmGpItmToStkVL1
     */
    public ViewLinkImpl getMmGpItmToStkVL1() {
        return (ViewLinkImpl)findViewLink("MmGpItmToStkVL1");
    }

    /**
     * Container's getter for LovSrNo.
     * @return LovSrNo
     */
    public ViewObjectImpl getLovSrNo() {
        return (ViewObjectImpl)findViewObject("LovSrNo");
    }
    
    public String ChkDupliSrno(String srno)
    {
        String Serial=srno;
        ViewObjectImpl itmvo=this.getMmGpItm();
        String cld = (String)itmvo.getCurrentRow().getAttribute("CldId");
        Integer sloc=Integer.parseInt(itmvo.getCurrentRow().getAttribute("SlocId").toString());
        String org=(String)itmvo.getCurrentRow().getAttribute("OrgId");
        String wh=(String)itmvo.getCurrentRow().getAttribute("WhId");
        String doc=(String)itmvo.getCurrentRow().getAttribute("DocId");
        String itmid=(String)itmvo.getCurrentRow().getAttribute("ItmId");
        String itmuom=(String)itmvo.getCurrentRow().getAttribute("ItmUom");
        ViewObjectImpl gpitmstk=this.getMmGpItmRcpt();
        RowQualifier rqsr=new RowQualifier(gpitmstk);
        rqsr.setWhereClause("CldId='"+cld+"' and SlocId="+sloc+" and OrgId='"+org+"' and WhId='"+wh+"' and DocId='"+doc+"' and ItmId='"+itmid+"' and ItmUom='"+itmuom+"' and SrNo='"+Serial+"'");
        Row[] frgpstk=gpitmstk.getFilteredRows(rqsr);
        if(frgpstk.length>0)
            return "Y";
        else
        return "N";
        }

      public String ChkIfNewSrno(String srno)
      {
              String Serial=srno;
              ViewObjectImpl itmvo=this.getMmGpItm();
              String cld = (String)itmvo.getCurrentRow().getAttribute("CldId");
              Integer sloc=Integer.parseInt(itmvo.getCurrentRow().getAttribute("SlocId").toString());
              String org=(String)itmvo.getCurrentRow().getAttribute("OrgId");
              String wh=(String)itmvo.getCurrentRow().getAttribute("WhId");
              String doc=(String)itmvo.getCurrentRow().getAttribute("DocId");
              String itmid=(String)itmvo.getCurrentRow().getAttribute("ItmId");
              String itmuom=(String)itmvo.getCurrentRow().getAttribute("ItmUom");
              ViewObjectImpl gpitmstk=this.getMmGpItmStk();
              RowQualifier rqsr=new RowQualifier(gpitmstk);
              rqsr.setWhereClause("CldId='"+cld+"' and SlocId="+sloc+" and OrgId='"+org+"' and WhId='"+wh+"' and DocId='"+doc+"' and ItmId='"+itmid+"' and ItmUom='"+itmuom+"' and SrNo='"+Serial+"'");
              Row[] frgpstk=gpitmstk.getFilteredRows(rqsr);
              if(frgpstk.length>0)
                  return "N";
              else
              return "Y";
          }
      
      
    /**
     * Container's getter for MmPurRetnItmStk.
     * @return MmPurRetnItmStk
     */
    public ViewObjectImpl getMmPurRetnItmStk() {
        return (ViewObjectImpl)findViewObject("MmPurRetnItmStk");
    }


    /**
     * Container's getter for MmGpItmStk1.
     * @return MmGpItmStk1
     */
    public ViewObjectImpl getMmGpItmStk1() {
        return (ViewObjectImpl)findViewObject("MmGpItmStk1");
    }

    /**
     * Container's getter for MmGpToStkVL1.
     * @return MmGpToStkVL1
     */
    public ViewLinkImpl getMmGpToStkVL1() {
        return (ViewLinkImpl)findViewLink("MmGpToStkVL1");
    }

    /**
     * Container's getter for SearchGp.
     * @return SearchGp
     */
    public SearchGpVOImpl getSearchGp() {
        return (SearchGpVOImpl)findViewObject("SearchGp");
    }

    /**
     * Container's getter for TransSearchComp.
     * @return TransSearchComp
     */
    public TransSearchCompVOImpl getTransSearchComp() {
        return (TransSearchCompVOImpl)findViewObject("TransSearchComp");
    }
    
    public void SearchGP()
    {
            // System.out.println("In search..");
                 ViewObjectImpl searchvo=this.getSearchGp();
             String gpno=null;
                       Integer eoid=null;
                       String whid=null;
                       Timestamp gpdtfrm=null;
                       Timestamp gpdtto=null;
                       Integer srcdoc=null;
                       String itmid=null;
                     if(getTransSearchComp().getCurrentRow().getAttribute("TransGpNo")!=null && (!getTransSearchComp().getCurrentRow().getAttribute("TransGpNo").toString().equals("")))
                     {   gpno=getTransSearchComp().getCurrentRow().getAttribute("TransGpNo").toString();
                            searchvo.setNamedWhereClauseParam("gpNoBind", gpno);
                        }
                     else
                 searchvo.setNamedWhereClauseParam("gpNoBind", null);
                //     System.out.println("Pr no="+prno);
                     
                     if(getTransSearchComp().getCurrentRow().getAttribute("TransWarehouse")!=null && (!getTransSearchComp().getCurrentRow().getAttribute("TransWarehouse").toString().equals("")))
                     {  
                         whid=getTransSearchComp().getCurrentRow().getAttribute("TransWarehouse").toString();  
                            searchvo.setNamedWhereClauseParam("whIdBind", whid);
                        }
                     else
                 searchvo.setNamedWhereClauseParam("whIdBind", null);
               //  System.out.println("wh="+whid);
                     
                     if(getTransSearchComp().getCurrentRow().getAttribute("TransEoId")!=null && (!getTransSearchComp().getCurrentRow().getAttribute("TransEoId").toString().equals("")))
                     {  eoid=Integer.parseInt(getTransSearchComp().getCurrentRow().getAttribute("TransEoId").toString());  
                            searchvo.setNamedWhereClauseParam("EoIdBind", eoid);
                        }
                     else
                 searchvo.setNamedWhereClauseParam("EoIdBind", null); 
              //   System.out.println("eo="+eoid);
                     
                       if(getTransSearchComp().getCurrentRow().getAttribute("TransFromDate")!=null )
                       {  gpdtfrm= new Timestamp(getTransSearchComp().getCurrentRow().getAttribute("TransFromDate").toString());  
                              searchvo.setNamedWhereClauseParam("fromDateBind", gpdtfrm);
                          }
                       else
                searchvo.setNamedWhereClauseParam("fromDateBind", null);
              //   System.out.println("dt frm="+prdtfrm);
                       
                       if(getTransSearchComp().getCurrentRow().getAttribute("TransToDate")!=null)
                       {  gpdtto= new Timestamp(getTransSearchComp().getCurrentRow().getAttribute("TransToDate").toString());  
                              searchvo.setNamedWhereClauseParam("toDateBind", gpdtto);
                          }
                       else
                 searchvo.setNamedWhereClauseParam("toDateBind", null);
                // System.out.println("dt to="+prdtto);
                       
                       if(getTransSearchComp().getCurrentRow().getAttribute("TransDocType")!=null && !(getTransSearchComp().getCurrentRow().getAttribute("TransDocType").toString().equals("")))
                       { 
                           srcdoc= Integer.parseInt(getTransSearchComp().getCurrentRow().getAttribute("TransDocType").toString());  
                              searchvo.setNamedWhereClauseParam("srcDocTypeBind", srcdoc);
                          }
                       else
                 searchvo.setNamedWhereClauseParam("srcDocTypeBind", null);
               //  System.out.println("status="+prst);
               if(getTransSearchComp().getCurrentRow().getAttribute("TransItmId")!=null && !(getTransSearchComp().getCurrentRow().getAttribute("TransItmId").toString().equals("")))
               { 
                   itmid= (getTransSearchComp().getCurrentRow().getAttribute("TransItmId").toString());  
                      searchvo.setNamedWhereClauseParam("itmIdBind", itmid);
                  }
               else
               searchvo.setNamedWhereClauseParam("itmIdBind", null);
               
                       searchvo.executeQuery();
                      
        }
    
    public void ResetSearch()
    {
            ViewObjectImpl searchvo=this.getSearchGp();
            getTransSearchComp().getCurrentRow().setAttribute("TransGpNo",null); 
            getTransSearchComp().getCurrentRow().setAttribute("TransWarehouse",null);
            getTransSearchComp().getCurrentRow().setAttribute("TransEoId",null);
            getTransSearchComp().getCurrentRow().setAttribute("TransFromDate",null);
            getTransSearchComp().getCurrentRow().setAttribute("TransToDate",null);
            getTransSearchComp().getCurrentRow().setAttribute("TransDocType",null);
            getTransSearchComp().getCurrentRow().setAttribute("TransItmId",null);
            getTransSearchComp().getCurrentRow().setAttribute("TransSupplier",null);
            getTransSearchComp().getCurrentRow().setAttribute("TransItem",null);
            searchvo.setNamedWhereClauseParam("gpNoBind", null);
            searchvo.setNamedWhereClauseParam("whIdBind", null);
            searchvo.setNamedWhereClauseParam("EoIdBind", null);
            searchvo.setNamedWhereClauseParam("fromDateBind", null);
            searchvo.setNamedWhereClauseParam("toDateBind", null);
            searchvo.setNamedWhereClauseParam("srcDocTypeBind", null);
            searchvo.setNamedWhereClauseParam("itmIdBind", null);
            searchvo.executeQuery();
        }
    
    public void GatePassViewQuery(){
        //for Create Page
         ViewObjectImpl vo = this.getMmGp();
         ViewObjectImpl servo = this.getSearchGp();
         Row currRow = servo.getCurrentRow();
       ViewCriteria vc = getMmGp().getViewCriteria("MmGpVOCriteria");
       vo.applyViewCriteria(vc);
       if(currRow!=null){
       vo.setNamedWhereClauseParam("cld", currRow.getAttribute("CldId").toString());
       vo.setNamedWhereClauseParam("sloc", Integer.parseInt(currRow.getAttribute("SlocId").toString()));
       vo.setNamedWhereClauseParam("org", currRow.getAttribute("OrgId").toString());
       vo.setNamedWhereClauseParam("doc", currRow.getAttribute("DocId").toString());
       vo.setNamedWhereClauseParam("wh", currRow.getAttribute("WhId").toString());
       vo.executeQuery();
       }
    }
    
    public void setsearchValues()
    {
        //for Search Page
            ViewObjectImpl searchvo=this.getSearchGp();
            String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String CldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String HoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
             this.getTransSearchComp().getCurrentRow().setAttribute("TransCldId", CldId);
            this.getTransSearchComp().getCurrentRow().setAttribute("TransOrgId", OrgId);
            this.getTransSearchComp().getCurrentRow().setAttribute("TransSlocId", SlocId); 
            this.getTransSearchComp().getCurrentRow().setAttribute("TransHoOrgId", HoOrgId);
            searchvo.setNamedWhereClauseParam("cldIdBind", CldId);
            searchvo.setNamedWhereClauseParam("slocBind", SlocId);
            searchvo.setNamedWhereClauseParam("orgBind", OrgId);
            searchvo.executeQuery();
        }

    /**
     * Container's getter for MmGp1.
     * @return MmGp1
     */
    public MmGpVOImpl getMmGp1() {
        return (MmGpVOImpl)findViewObject("MmGp1");
    }
    
    public void ExecuteVo()
    {
        this.getMmGpItmStk().executeQuery();
        }
    
    public void ChkAndUpdtOutStatDt()
    {
            String out ="N";
            Timestamp outDt=null;
        if(this.getMmGp().getCurrentRow().getAttribute("GpOutStat")!=null)
       out = (String)this.getMmGp().getCurrentRow().getAttribute("GpOutStat");
        
        if(this.getMmGp().getCurrentRow().getAttribute("GpOutDt")!=null)
            outDt = (Timestamp)this.getMmGp().getCurrentRow().getAttribute("GpOutDt");
        else
            outDt=new Timestamp(System.currentTimeMillis());
                
        if(out.equals("Y"))
        {
                this.getMmGp().getCurrentRow().setAttribute("GpOutDt",outDt);
            }
        
        }
}

