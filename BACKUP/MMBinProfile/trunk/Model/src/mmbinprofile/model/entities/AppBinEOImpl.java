package mmbinprofile.model.entities;

import java.math.BigInteger;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmbinprofile.model.services.BinprofileAMImpl;

import oracle.jbo.AttributeList;
import oracle.jbo.DMLConstraintException;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 07 12:27:30 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppBinEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(AppBinEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(AppBinEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        WhId {
            public Object get(AppBinEOImpl obj) {
                return obj.getWhId();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setWhId((String)value);
            }
        }
        ,
        BinId {
            public Object get(AppBinEOImpl obj) {
                return obj.getBinId();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setBinId((String)value);
            }
        }
        ,
        BinNm {
            public Object get(AppBinEOImpl obj) {
                return obj.getBinNm();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setBinNm((String)value);
            }
        }
        ,
        BinDesc {
            public Object get(AppBinEOImpl obj) {
                return obj.getBinDesc();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setBinDesc((String)value);
            }
        }
        ,
        StorageType {
            public Object get(AppBinEOImpl obj) {
                return obj.getStorageType();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setStorageType((Integer)value);
            }
        }
        ,
        Blocked {
            public Object get(AppBinEOImpl obj) {
                return obj.getBlocked();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setBlocked((String)value);
            }
        }
        ,
        BlkResn {
            public Object get(AppBinEOImpl obj) {
                return obj.getBlkResn();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setBlkResn((String)value);
            }
        }
        ,
        BlkDtFrm {
            public Object get(AppBinEOImpl obj) {
                return obj.getBlkDtFrm();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setBlkDtFrm((Date)value);
            }
        }
        ,
        BlkDtTo {
            public Object get(AppBinEOImpl obj) {
                return obj.getBlkDtTo();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setBlkDtTo((Date)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(AppBinEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(AppBinEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(AppBinEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(AppBinEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        BinEntId {
            public Object get(AppBinEOImpl obj) {
                return obj.getBinEntId();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setBinEntId((Integer)value);
            }
        }
        ,
        CldId {
            public Object get(AppBinEOImpl obj) {
                return obj.getCldId();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        AppBinCap {
            public Object get(AppBinEOImpl obj) {
                return obj.getAppBinCap();
            }

            public void put(AppBinEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppBinEOImpl object);

        public abstract void put(AppBinEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int BINID = AttributesEnum.BinId.index();
    public static final int BINNM = AttributesEnum.BinNm.index();
    public static final int BINDESC = AttributesEnum.BinDesc.index();
    public static final int STORAGETYPE = AttributesEnum.StorageType.index();
    public static final int BLOCKED = AttributesEnum.Blocked.index();
    public static final int BLKRESN = AttributesEnum.BlkResn.index();
    public static final int BLKDTFRM = AttributesEnum.BlkDtFrm.index();
    public static final int BLKDTTO = AttributesEnum.BlkDtTo.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int BINENTID = AttributesEnum.BinEntId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int APPBINCAP = AttributesEnum.AppBinCap.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppBinEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mmbinprofile.model.entities.AppBinEO");
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for WhId, using the alias name WhId.
     * @return the value of WhId
     */
    public String getWhId() {
        return (String)getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WhId.
     * @param value value to set the WhId
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for BinId, using the alias name BinId.
     * @return the value of BinId
     */
    public String getBinId() {
        return (String)getAttributeInternal(BINID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BinId.
     * @param value value to set the BinId
     */
    public void setBinId(String value) {
        setAttributeInternal(BINID, value);
    }

    /**
     * Gets the attribute value for BinNm, using the alias name BinNm.
     * @return the value of BinNm
     */
    public String getBinNm() {
        return (String)getAttributeInternal(BINNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for BinNm.
     * @param value value to set the BinNm
     */
    public void setBinNm(String value) {
        setAttributeInternal(BINNM, value);
    }

    /**
     * Gets the attribute value for BinDesc, using the alias name BinDesc.
     * @return the value of BinDesc
     */
    public String getBinDesc() {
        return (String)getAttributeInternal(BINDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for BinDesc.
     * @param value value to set the BinDesc
     */
    public void setBinDesc(String value) {
        setAttributeInternal(BINDESC, value);
    }


    /**
     * Gets the attribute value for StorageType, using the alias name StorageType.
     * @return the value of StorageType
     */
    public Integer getStorageType() {
        return (Integer)getAttributeInternal(STORAGETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StorageType.
     * @param value value to set the StorageType
     */
    public void setStorageType(Integer value) {
        setAttributeInternal(STORAGETYPE, value);
    }

    /**
     * Gets the attribute value for Blocked, using the alias name Blocked.
     * @return the value of Blocked
     */
    public String getBlocked() {
        return (String)getAttributeInternal(BLOCKED);
    }

    /**
     * Sets <code>value</code> as the attribute value for Blocked.
     * @param value value to set the Blocked
     */
    public void setBlocked(String value) {
        setAttributeInternal(BLOCKED, value);
    }

    /**
     * Gets the attribute value for BlkResn, using the alias name BlkResn.
     * @return the value of BlkResn
     */
    public String getBlkResn() {
        return (String)getAttributeInternal(BLKRESN);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlkResn.
     * @param value value to set the BlkResn
     */
    public void setBlkResn(String value) {
        setAttributeInternal(BLKRESN, value);
    }

    /**
     * Gets the attribute value for BlkDtFrm, using the alias name BlkDtFrm.
     * @return the value of BlkDtFrm
     */
    public Date getBlkDtFrm() {
        return (Date)getAttributeInternal(BLKDTFRM);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlkDtFrm.
     * @param value value to set the BlkDtFrm
     */
    public void setBlkDtFrm(Date value) {
        setAttributeInternal(BLKDTFRM, value);
    }

    /**
     * Gets the attribute value for BlkDtTo, using the alias name BlkDtTo.
     * @return the value of BlkDtTo
     */
    public Date getBlkDtTo() {
        return (Date)getAttributeInternal(BLKDTTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for BlkDtTo.
     * @param value value to set the BlkDtTo
     */
    public void setBlkDtTo(Date value) {
        setAttributeInternal(BLKDTTO, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Gets the attribute value for BinEntId, using the alias name BinEntId.
     * @return the value of BinEntId
     */
    public Integer getBinEntId() {
        return (Integer)getAttributeInternal(BINENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BinEntId.
     * @param value value to set the BinEntId
     */
    public void setBinEntId(Integer value) {
        setAttributeInternal(BINENTID, value);
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAppBinCap() {
        return (RowIterator)getAttributeInternal(APPBINCAP);
    }


    /**
     * @param slocId key constituent
     * @param orgId key constituent
     * @param whId key constituent
     * @param binId key constituent
     * @param cldId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer slocId, String orgId, String whId, String binId, String cldId) {
        return new Key(new Object[]{slocId, orgId, whId, binId, cldId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        Integer usrid=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer SLOCID=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String ORGID=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String CLDID = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        setUsrIdCreate(usrid);
        setSlocId(SLOCID);
        setOrgId(ORGID);
        setCldId(CLDID);
        super.create(attributeList);
    }
    public String resolvEl(String data){
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           String Message=valueExp.getValue(elContext).toString();
           return Message;
         }
    /**
     * Add locking logic here.
     */
    public void lock() {
        //super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
     public Object resolvElDC(String data) {
         FacesContext fc = FacesContext.getCurrentInstance();
         Application app = fc.getApplication();
         ExpressionFactory elFactory = app.getExpressionFactory();
         ELContext elContext = fc.getELContext();
         ValueExpression valueExp =
             elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
         return valueExp.getValue(elContext);

     }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            BinprofileAMImpl am = (BinprofileAMImpl)resolvElDC("BinprofileAMDataControl");
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    protected void doDML(int operation, TransactionEvent e) {
        if(operation==DML_INSERT){
            Integer SLOCID=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String ORGID=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String CLDID =resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            String tableName ="APP$BIN";
            String BinId =
                (String)(callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_ID (?,?,?,?,?)", new Object[] {SLOCID,CLDID,null,ORGID,tableName }));
            

           setBinId(BinId);
            
        }else if(operation==DML_UPDATE){
            Integer usridMod=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            setUsrIdMod(usridMod);
        }
        super.doDML(operation, e);
    }
}
