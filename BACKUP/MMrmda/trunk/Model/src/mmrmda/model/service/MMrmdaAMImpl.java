package mmrmda.model.service;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import mmrmda.model.service.common.MMrmdaAM;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 30 10:38:56 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMrmdaAMImpl extends ApplicationModuleImpl implements MMrmdaAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MMrmdaAMImpl() {
        
        
    }

    /**
     * Container's getter for AttTyp1.
     * @return AttTyp1
     */
    public ViewObjectImpl getAttTyp1() {
        return (ViewObjectImpl)findViewObject("AttTyp1");
    }

    /**
     * Container's getter for MmMtlRcptItm1.
     * @return MmMtlRcptItm1
     */
    public ViewObjectImpl getMmMtlRcptItm1() {
        return (ViewObjectImpl)findViewObject("MmMtlRcptItm1");
    }

    /**
     * Container's getter for MmMtlRcpt1.
     * @return MmMtlRcpt1
     */
    public ViewObjectImpl getMmMtlRcpt1() {
        return (ViewObjectImpl)findViewObject("MmMtlRcpt1");
    }

    /**
     * Container's getter for MmRmda1.
     * @return MmRmda1
     */
    public ViewObjectImpl getMmRmda1() {
        return (ViewObjectImpl)findViewObject("MmRmda1");
    }

    /**
     * Container's getter for MmRmdaItm1.
     * @return MmRmdaItm1
     */
    public ViewObjectImpl getMmRmdaItm1() {
        return (ViewObjectImpl)findViewObject("MmRmdaItm1");
    }

    /**
     * Container's getter for Supplier1.
     * @return Supplier1
     */
    public ViewObjectImpl getSupplier1() {
        return (ViewObjectImpl)findViewObject("Supplier1");
    }

    /**
     * Container's getter for Uom1.
     * @return Uom1
     */
    public ViewObjectImpl getUom1() {
        return (ViewObjectImpl)findViewObject("Uom1");
    }

    /**
     * Container's getter for Wh1.
     * @return Wh1
     */
    public ViewObjectImpl getWh1() {
        return (ViewObjectImpl)findViewObject("Wh1");
    }

    /**
     * Container's getter for MmRmdatoItmVL1.
     * @return MmRmdatoItmVL1
     */
    public ViewLinkImpl getMmRmdatoItmVL1() {
        return (ViewLinkImpl)findViewLink("MmRmdatoItmVL1");
    }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl)findViewObject("Org1");
    }
    
    public void copyItemsByRcpt(String rcptNo)
    {
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl rmdaVo =getMmRmda1();
        String whId= (String)rmdaVo.getCurrentRow().getAttribute("WhId");
        String docId =(String)rmdaVo.getCurrentRow().getAttribute("DocId");
        String docRcptId=null;
        ViewObjectImpl rcptItmVo =getMmMtlRcptItm1();
        ViewObjectImpl rmdaItmVo =getMmRmdaItm1();
        ViewObjectImpl rcptVo = getMmMtlRcpt1();
        
           Timestamp docdt =(Timestamp)rmdaVo.getCurrentRow().getAttribute("DocDtRcpt");
            docRcptId =(String)rmdaVo.getCurrentRow().getAttribute("DocIdRcpt");
            
          
        System.out.println(docdt +"  -------- "+docRcptId);
      /*  Integer fyid=(Integer)(callStoredFunction(Types.INTEGER,"APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,orgId,docdt}));
           
        
        RowQualifier rq = new RowQualifier(rcptVo);
        rq.setWhereClause("WhId = '"+whId+"' AND OrgId = '"+orgId+"' AND CldId = '"+cldId+"' AND SlocId = "+slocId+" AND RcptNo = '"+rcptNo+"' AND FyId = "+fyid+"");
        Row rcptrows[] = rcptVo.getFilteredRows(rq);
       
         
        
        
        
        if(rcptrows != null && rcptrows.length == 1)
        {   docRcptId=(String)rcptrows[0].getAttribute("DocId");
            System.out.println(" docRcptId : "+rcptrows[0].getAttribute("DocId"));
        }
        
      */  
        
      // if a data in an Itm List/Vo against same Unique Key...
        
       
        
        RowQualifier rq = new RowQualifier(rmdaItmVo);
        rq.setWhereClause("WhId = '"+whId+"' AND OrgId = '"+orgId+"' AND CldId = '"+cldId+"' AND SlocId = "+slocId+" AND DocId = '"+docId+"'");
        Row oldrows[] = rmdaItmVo.getFilteredRows(rq);
        if(oldrows != null && oldrows.length>0)
        {   for(Row row:oldrows)
            {row.remove();}
        }
        
        
        rq = new RowQualifier(rcptItmVo);
        rq.setWhereClause("WhId = '"+whId+"' AND OrgId = '"+orgId+"' AND CldId = '"+cldId+"' AND SlocId = "+slocId+" AND DocId = '"+docRcptId+"'");
        Row rows[] = rcptItmVo.getFilteredRows(rq);
        
        System.out.println(rows.length +" ------------------------ ");
        
        if(rows != null && rows.length>0)
        {   for(Row row:rows)
           {
                   Row newRow = rmdaItmVo.createRow();
                   newRow.setAttribute("CldId", cldId);
                   newRow.setAttribute("OrgId", orgId);
                   newRow.setAttribute("SlocId", slocId);
                   newRow.setAttribute("WhId", whId);
                   newRow.setAttribute("DocId", docId);
                   newRow.setAttribute("ItmId", row.getAttribute("ItmId").toString());
                   newRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));
                   newRow.setAttribute("ItmUomBs",row.getAttribute("ItmUomBs"));
                   newRow.setAttribute("UomConvFctr", row.getAttribute("UomConvFctr"));
                   newRow.setAttribute("RejQty",row.getAttribute("RejQty"));
                   newRow.setAttribute("RejQtyBs",row.getAttribute("RejQtyBs"));
                
                   newRow.setAttribute("ItmAmtBs",row.getAttribute("RejQty"));
                   newRow.setAttribute("ItmAmtSp",row.getAttribute("RejQtyBs"));
                   rmdaItmVo.insertRow(newRow);
           }
        }
        rmdaItmVo.executeQuery();
       }
    
    
    public static Object evaluateEL(String el) {
    FacesContext facesContext = FacesContext.getCurrentInstance();
    ELContext elContext = facesContext.getELContext();
    ExpressionFactory expressionFactory =
    facesContext.getApplication().getExpressionFactory();
    ValueExpression exp = expressionFactory.createValueExpression(elContext, el, Object.class);
    return exp.getValue(elContext);
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
           CallableStatement st = null;
           try {
               st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
               if (bindVars != null) {
                   for (int z = 0; z < bindVars.length; z++) {
                       st.setObject(z + 2, bindVars[z]);
                   }
               }
                st.executeUpdate();
                return st.getObject(1);

           } catch (SQLException e) {
               throw new JboException(e);
           } finally {
               if (st != null) {
                   try {
                       st.close();
                   } catch (SQLException e) {e.printStackTrace();}
               }
           }
       }

    /**
     * Container's getter for Itm1.
     * @return Itm1
     */
    public ViewObjectImpl getItm1() {
        return (ViewObjectImpl)findViewObject("Itm1");
    }
    
    
    public String beforeCommitAction()
    {   
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl rmdaVo =getMmRmda1();
        String whId= (String)rmdaVo.getCurrentRow().getAttribute("WhId");
        ViewObjectImpl voStk = getMmRmda1();
        String rmdaNo=null;
        if(voStk.getCurrentRow().getAttribute("RmdaNo") == null)
        {
        Integer fyid=(Integer)(callStoredFunction(Types.INTEGER,"APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,orgId,new Timestamp(System.currentTimeMillis())}));    
        String tableName="MM$RMDA";
        rmdaNo=(String)(callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)",new Object[]{slocId,cldId,orgId,tableName,whId,fyid})); 
        voStk.getCurrentRow().setAttribute("RmdaNo", rmdaNo);
        }
        return rmdaNo;
    }
    
    public Integer getItmCount()
    {
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl rmdaVo =getMmRmda1();
        String whId= (String)rmdaVo.getCurrentRow().getAttribute("WhId");
        String docId =(String)rmdaVo.getCurrentRow().getAttribute("DocId");
        Integer count=0;
        ViewObjectImpl rmdaItmVo =getMmRmdaItm1();
        RowQualifier rq = new RowQualifier(rmdaItmVo);
        rq.setWhereClause("WhId = '"+whId+"' AND OrgId = '"+orgId+"' AND CldId = '"+cldId+"' AND SlocId = "+slocId+" AND DocId = '"+docId+"'");
        Row oldrows[] = rmdaItmVo.getFilteredRows(rq);
        if(oldrows != null && oldrows.length>0)
        { for(Row row:oldrows)
           {count++;}
        }
        return count;
    }

    /**
     * Container's getter for srchTran1.
     * @return srchTran1
     */
    public ViewObjectImpl getsrchTran1() {
        return (ViewObjectImpl)findViewObject("srchTran1");
    }
    
    public Integer getCurrentType()
    {
        ViewObjectImpl rmdaVo =getMmRmda1();
        if(rmdaVo.getCurrentRow().getAttribute("RmdaType") != null)
        {
           return (Integer)rmdaVo.getCurrentRow().getAttribute("RmdaType");
        }
     return null;
    }
    
    public void searchFirstAction()
    {
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl rmdaVo =(ViewObjectImpl)this.findViewObject("MmRmda1");
       // String whId= (String)rmdaVo.getCurrentRow().getAttribute("WhId");
        ViewCriteria vc = rmdaVo.getViewCriteria("MmRmdaVOCriteria");
        rmdaVo.applyViewCriteria(vc);
        rmdaVo.setNamedWhereClauseParam("bindOrgId", orgId);
        rmdaVo.setNamedWhereClauseParam("bindCldId", "-1");
        rmdaVo.setNamedWhereClauseParam("bindSlocId", slocId);
        // rmdaVo.setNamedWhereClauseParam("bindWhId", whId);  
         rmdaVo.executeQuery();
    }
    
    public void searchAction(String VCName,String VOName)
    {
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl rmdaVo =(ViewObjectImpl)this.findViewObject(VOName);
       // String whId= (String)rmdaVo.getCurrentRow().getAttribute("WhId");
       
        
        ViewCriteria vc = rmdaVo.getViewCriteria(VCName);
        rmdaVo.applyViewCriteria(vc);
        rmdaVo.setNamedWhereClauseParam("bindOrgId", orgId);
        rmdaVo.setNamedWhereClauseParam("bindCldId", cldId);
        rmdaVo.setNamedWhereClauseParam("bindSlocId", slocId);
        rmdaVo.setNamedWhereClauseParam("bindRmdaNo", getsrchTran1().getCurrentRow().getAttribute("RMDANo"));
       // rmdaVo.setNamedWhereClauseParam("bindWhId", whId);  
        rmdaVo.setNamedWhereClauseParam("bindEOId", getsrchTran1().getCurrentRow().getAttribute("supplierId"));
        rmdaVo.setNamedWhereClauseParam("fromDate", getsrchTran1().getCurrentRow().getAttribute("fromDate")); 
        rmdaVo.setNamedWhereClauseParam("toDate", getsrchTran1().getCurrentRow().getAttribute("toDate")); 
        rmdaVo.setNamedWhereClauseParam("bindRcptNo", getsrchTran1().getCurrentRow().getAttribute("DocRcptId")); 
        
        rmdaVo.executeQuery();
    }
    
    public void resetIssueAction(String VCName,String VOName)
    {
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl rmdaVo =(ViewObjectImpl)this.findViewObject(VOName);
       // String whId= (String)rmdaVo.getCurrentRow().getAttribute("WhId");
       
        
        ViewCriteria vc = rmdaVo.getViewCriteria(VCName);
        rmdaVo.applyViewCriteria(vc);
        rmdaVo.setNamedWhereClauseParam("bindOrgId", orgId);
        rmdaVo.setNamedWhereClauseParam("bindCldId", "-1");
        rmdaVo.setNamedWhereClauseParam("bindSlocId", null);
        rmdaVo.setNamedWhereClauseParam("bindRmdaNo", null);
       // rmdaVo.setNamedWhereClauseParam("bindWhId", whId);  
        rmdaVo.setNamedWhereClauseParam("bindEOId", null);
        rmdaVo.setNamedWhereClauseParam("fromDate", null); 
        rmdaVo.setNamedWhereClauseParam("toDate", null); 
        rmdaVo.setNamedWhereClauseParam("bindRcptNo", null); 
        
        getsrchTran1().getCurrentRow().setAttribute("DocRcptId",null); 
        getsrchTran1().executeQuery();
        
        
        rmdaVo.executeQuery();
    }
    
    public String setDebitNoteNo()
    {   
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl rmdaVo =getMmRmda1();
        String whId= (String)rmdaVo.getCurrentRow().getAttribute("WhId");
        ViewObjectImpl voStk = getMmRmda1();
        String dnNo=null;
        if(voStk.getCurrentRow().getAttribute("RmdaNo") == null)
        {
        Integer fyid=(Integer)(callStoredFunction(Types.INTEGER,"APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,orgId,new Timestamp(System.currentTimeMillis())}));    
        String tableName="MM$RMDA_DN";
        dnNo=(String)(callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)",new Object[]{slocId,cldId,orgId,tableName,whId,fyid})); 
        voStk.getCurrentRow().setAttribute("DebitNoteNo", dnNo);
        }
        return dnNo;
    }
    
    
    public Integer updateRcptStatus()
    {   String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl rmdaVo =getMmRmda1();
        String whId= (String)rmdaVo.getCurrentRow().getAttribute("WhId");
        String rcptdocId= (String)rmdaVo.getCurrentRow().getAttribute("DocIdRcpt");
        Integer status=(Integer)(callStoredFunction(Types.INTEGER," MM.UPDATE_RCPT_STAT(?,?,?,?,?)", new Object[] {cldId,slocId,orgId,rcptdocId,whId}));
        return status;
    }

    /**
     * Container's getter for SrchRcpt1.
     * @return SrchRcpt1
     */
    public ViewObjectImpl getSrchRcpt1() {
        return (ViewObjectImpl)findViewObject("SrchRcpt1");
    }
}
