package mmpurchasereturn.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmpurchasereturn.model.services.common.MmPurchaseReturnAM;
import mmpurchasereturn.model.views.LovItmIdVOImpl;
import mmpurchasereturn.model.views.MmMrnItmVOImpl;
import mmpurchasereturn.model.views.MmPurRetnItmVOImpl;
import mmpurchasereturn.model.views.MmPurRetnSrcVOImpl;
import mmpurchasereturn.model.views.MmPurRetnVOImpl;

import mmpurchasereturn.model.views.PurchaseReturnSearchVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 11 16:58:15 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmPurchaseReturnAMImpl extends ApplicationModuleImpl implements MmPurchaseReturnAM {
    
    private Number zero = new Number(0);
    
    /**
     * This is the default constructor (do not remove).
     */
    public MmPurchaseReturnAMImpl() {
    }

    public void AddMrnNoToSrc()
    {
        Row currPr=this.getMmPurRetn().getCurrentRow();
        String cldId=currPr.getAttribute("CldId").toString();
        Integer slocId=Integer.parseInt(currPr.getAttribute("SlocId").toString());
        String orgId=(String)currPr.getAttribute("OrgId");
        String whId=(String)currPr.getAttribute("WhId");
        String docId=(String)currPr.getAttribute("DocId");
        String docIdMrn = (String)currPr.getAttribute("TransDocIdMrn");
        Row srcRow=this.getMmPurRetnSrc().createRow();
            srcRow.setAttribute("CldId", cldId);
            srcRow.setAttribute("SlocId", slocId);
            srcRow.setAttribute("OrgId", orgId);
            srcRow.setAttribute("WhId", whId);
            srcRow.setAttribute("DocId", docId);
           srcRow.setAttribute("DocIdMrn", docIdMrn); 
            this.getMmPurRetnSrc().insertRow(srcRow);
            this.getMmPurRetnSrc().executeQuery();
        }
    
    public void AddItmToPurRetItm()
    {
        //get value of MRN No and its DocId
            Row currPr=this.getMmPurRetn().getCurrentRow();
            String cldId=currPr.getAttribute("CldId").toString();
            Integer slocId=Integer.parseInt(currPr.getAttribute("SlocId").toString());
            String orgId=(String)currPr.getAttribute("OrgId");
            String whId=(String)currPr.getAttribute("WhId");
            String docId=(String)currPr.getAttribute("DocId");
            String docIdMrn = (String)currPr.getAttribute("TransDocIdMrn"); 
            Integer eoId=Integer.parseInt(currPr.getAttribute("EoId").toString());
            RowSetIterator rsiMrnitm=this.getMmMrnItm().createRowSetIterator(null);
            //get itmid and uom from mrn_itm
            while(rsiMrnitm.hasNext())
            {
                Row rMrn=rsiMrnitm.next();
                if(rMrn.getAttribute("DocId").toString().equals(docIdMrn)
                && rMrn.getAttribute("CldId").toString().equals(cldId)
                && rMrn.getAttribute("SlocId").toString().equals(slocId.toString())
                && rMrn.getAttribute("OrgId").toString().equals(orgId))
                {
                       
                    Number rejQty=zero;
                    if(rMrn.getAttribute("RejQty")!=null)
                      rejQty = (Number)rMrn.getAttribute("RejQty");
                    
                    Number rwkQty=zero;
                    if(rMrn.getAttribute("RwkQty")!=null)
                      rwkQty = (Number)rMrn.getAttribute("RwkQty");
                    
                    if(rejQty.add(rwkQty).compareTo(0)>0)
                    {
                        String itmId=rMrn.getAttribute("ItmId").toString();
                        String itmUom=rMrn.getAttribute("ItmUom").toString();
                        
                    
                            //if item of same EO is not add in any purchase return
                        String itmUomBs=rMrn.getAttribute("ItmUomBs").toString();
                        Number uomConvFctr=new Number(1);
                                if(rMrn.getAttribute("UomConvFctr")!=null)
                                  uomConvFctr = (Number)rMrn.getAttribute("UomConvFctr");
                        Number totRejQty=zero;
                        Number totRwkQty=zero;
                        RowSetIterator rsiMrnStk=this.getMmMrnItmStk().createRowSetIterator(null);
                        while(rsiMrnStk.hasNext())
                        {
                            Row rMrnStk=rsiMrnStk.next();
                                if(rMrnStk.getAttribute("DocId").toString().equals(docIdMrn)
                                && rMrnStk.getAttribute("CldId").toString().equals(cldId)
                                && rMrnStk.getAttribute("SlocId").toString().equals(slocId.toString())
                                && rMrnStk.getAttribute("OrgId").toString().equals(orgId)
                                && rMrnStk.getAttribute("ItmId").toString().equals(itmId)
                                && rMrnStk.getAttribute("ItmUom").toString().equals(itmUom)
                                && rMrnStk.getAttribute("EoId").toString().equals(eoId.toString()))
                                {
                                        if(rMrnStk.getAttribute("RejQty")!=null)
                                          totRejQty = totRejQty.add((Number)rMrnStk.getAttribute("RejQty"));
                                        if(rMrnStk.getAttribute("RwkQty")!=null)
                                          totRwkQty = totRwkQty.add((Number)rMrnStk.getAttribute("RwkQty"));
                                    }
                            }
                            rsiMrnStk.closeRowSetIterator();
                            Number rejQtyBs=zero;
                                  rejQtyBs = totRejQty.multiply(uomConvFctr) ;
                            Number rwkQtyBs=zero;
                                  rwkQtyBs = totRwkQty.multiply(uomConvFctr);
                            
                        //create row for item and insert values
                       Row purItm= this.getMmPurRetnItm().createRow();
                            purItm.setAttribute("CldId", cldId);
                            purItm.setAttribute("SlocId", slocId);
                            purItm.setAttribute("OrgId", orgId);
                            purItm.setAttribute("WhId", whId);
                            purItm.setAttribute("DocId", docId);
                            purItm.setAttribute("DocIdMrn", docIdMrn);
                            purItm.setAttribute("ItmId", itmId);
                            purItm.setAttribute("ItmUom", itmUom);
                            purItm.setAttribute("ItmUomBs", itmUomBs);
                            purItm.setAttribute("RejQty", totRejQty);
                            purItm.setAttribute("RwkQty", totRwkQty);
                            purItm.setAttribute("RejQtyBs",rejQtyBs);
                            purItm.setAttribute("RwkQtyBs",rwkQtyBs);
                            purItm.setAttribute("TotRetQty",rejQty.add(rwkQty));
                            purItm.setAttribute("UomConvFctr",uomConvFctr);
                        this.getMmPurRetnItm().insertRow(purItm);
                        
                        //create rows in ItmStk and insert.
                        RowQualifier stkrq=new RowQualifier(this.getMmMrnItmStk());
                            stkrq.setWhereClause("CldId='"+cldId+"' and SlocId="+slocId+" and OrgId='"+orgId+"' and DocId='"+docIdMrn+"' and ItmId='"+itmId+"' and ItmUom='"+itmUom+"'");
                            Row[] frstk=this.getMmMrnItmStk().getFilteredRows(stkrq);
                            Integer len=-1;
                            if(frstk.length>0)
                                len=frstk.length-1;
                            Number itmStkRwkBs=zero;
                            if(frstk[len].getAttribute("RwkQtyBs")!=null){
                                itmStkRwkBs=(Number)frstk[len].getAttribute("RwkQtyBs");
                            }
                            Number itmStkRejBs=zero;
                            if(frstk[len].getAttribute("RejQtyBs")!=null){
                                itmStkRejBs=(Number)frstk[len].getAttribute("RejQtyBs");
                            }
                            
                    ViewObjectImpl impl = this.getMmPurRetnItmStk();
                    while(len>=0)
                            {
                               Row stkrow=impl.createRow();
                                    stkrow.setAttribute("CldId", cldId);
                                    stkrow.setAttribute("DocId", docId);
                                    stkrow.setAttribute("DocIdMrn", docIdMrn);
                                    stkrow.setAttribute("ItmId", itmId);
                        System.out.println("ItmId="+itmId);
                                    stkrow.setAttribute("ItmUom", itmUom);
                                    stkrow.setAttribute("ItmUomBs", itmUomBs);
                                    stkrow.setAttribute("LotId", frstk[len].getAttribute("LotId"));
                                    stkrow.setAttribute("OrgId", orgId);
                                    stkrow.setAttribute("RejQty", frstk[len].getAttribute("RejQty"));
                                    stkrow.setAttribute("RejQtyBs", itmStkRejBs);
                                    stkrow.setAttribute("RwkQty",  frstk[len].getAttribute("RwkQty"));
                                    stkrow.setAttribute("RwkQtyBs",itmStkRwkBs );
                                    stkrow.setAttribute("SlocId", slocId);
                                    stkrow.setAttribute("SrNo",  frstk[len].getAttribute("SrNo"));
                                    stkrow.setAttribute("UomConvFctr",uomConvFctr);
                                    stkrow.setAttribute("WhId", whId);
                                 impl.insertRow(stkrow);
                                len--;
                                }    
                        this.getMmPurRetnItmStk().executeQuery();
                        }
                    }  
                }
            rsiMrnitm.closeRowSetIterator();
            this.getMmPurRetnItm().executeQuery();
        }
    
    public void ResetTrans()
    {
        this.getMmPurRetn().getCurrentRow().setAttribute("TransMrnNo", null);
            this.getMmPurRetn().getCurrentRow().setAttribute("TransDocDtMrn", null); 
            this.getMmPurRetn().getCurrentRow().setAttribute("TransDocIdMrn", null); 
        }
    
    public String ChkDuplicateMrn()
    {
       Integer eoId=Integer.parseInt(this.getMmPurRetn().getCurrentRow().getAttribute("EoId").toString());
        String transDocId = (String)this.getMmPurRetn().getCurrentRow().getAttribute("TransDocIdMrn");
       RowSetIterator rsiSrc=this.getMmPurRetnSrc().createRowSetIterator(null);
       while(rsiSrc.hasNext())
       {
           Row r=rsiSrc.next();
           if(r.getAttribute("DocIdMrn").toString().equals(transDocId))
           {
               rsiSrc.closeRowSetIterator();
               return "Y";
           }
           }
       rsiSrc.closeRowSetIterator();
       
       RowSetIterator rsiPr=this.getMmPurRetn().createRowSetIterator(null);
       while(rsiPr.hasNext())
       {
           Row prRow=rsiPr.next();
           if(prRow.getAttribute("EoId").toString().equals(eoId.toString()))
           {
               String doc=prRow.getAttribute("DocId").toString();
                   RowSetIterator rsiitm=this.getMmPurRetnItm1().createRowSetIterator(null);
                   while(rsiitm.hasNext())
                   {
                           Row ritm=rsiitm.next();  
                           if(ritm.getAttribute("DocIdMrn").toString().equals(transDocId)
                            && ritm.getAttribute("DocId").toString().equals(doc))
                           {
                               rsiSrc.closeRowSetIterator();
                               return "D";
                           }
                       }  
                   rsiitm.closeRowSetIterator();
               }
           }
       rsiPr.closeRowSetIterator();
       
        return "N";
        }
    
    public void generatePRNo()
    {
        if(getMmPurRetn().getCurrentRow().getAttribute("PurRetNo") == null){
            String cldId=this.getMmPurRetn().getCurrentRow().getAttribute("CldId").toString();
            Integer slocId=Integer.parseInt(this.getMmPurRetn().getCurrentRow().getAttribute("SlocId").toString());
            String orgId=(String)this.getMmPurRetn().getCurrentRow().getAttribute("OrgId");
            String whId=(String)this.getMmPurRetn().getCurrentRow().getAttribute("WhId");
            Integer fyId=Integer.parseInt(this.getMmPurRetn().getCurrentRow().getAttribute("FyId").toString());
            String prNo =(String)(callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {slocId,cldId,orgId,"MM$PUR$RETN",whId,fyId})); 
            this.getMmPurRetn().getCurrentRow().setAttribute("PurRetNo",prNo);
    }
       
        }
    /**
     * Container's getter for MmPurRetn.
     * @return MmPurRetn
     */
    public MmPurRetnVOImpl getMmPurRetn() {
        return (MmPurRetnVOImpl)findViewObject("MmPurRetn");
    }


    /**
     * Container's getter for LovWhId.
     * @return LovWhId
     */
    public ViewObjectImpl getLovWhId() {
        return (ViewObjectImpl)findViewObject("LovWhId");
    }

    /**
     * Container's getter for LovPurRetStat.
     * @return LovPurRetStat
     */
    public ViewObjectImpl getLovPurRetStat() {
        return (ViewObjectImpl)findViewObject("LovPurRetStat");
    }

    /**
     * Container's getter for LovOrgId.
     * @return LovOrgId
     */
    public ViewObjectImpl getLovOrgId() {
        return (ViewObjectImpl)findViewObject("LovOrgId");
    }

    /**
     * Container's getter for LovEoId.
     * @return LovEoId
     */
    public ViewObjectImpl getLovEoId() {
        return (ViewObjectImpl)findViewObject("LovEoId");
    }


    /**
     * Container's getter for MmPurRetnSrc.
     * @return MmPurRetnSrc
     */
    public ViewObjectImpl getMmPurRetnSrc() {
        return (ViewObjectImpl)findViewObject("MmPurRetnSrc");
    }

    /**
     * Container's getter for MmPurRetnToSrcVL.
     * @return MmPurRetnToSrcVL
     */
    public ViewLinkImpl getMmPurRetnToSrcVL() {
        return (ViewLinkImpl)findViewLink("MmPurRetnToSrcVL");
    }

    /**
     * Container's getter for MmPurRetnItm.
     * @return MmPurRetnItm
     */
    public ViewObjectImpl getMmPurRetnItm() {
        return (ViewObjectImpl)findViewObject("MmPurRetnItm");
    }

    /**
     * Container's getter for MmPurRetnSrcToItmVL.
     * @return MmPurRetnSrcToItmVL
     */
    public ViewLinkImpl getMmPurRetnSrcToItmVL() {
        return (ViewLinkImpl)findViewLink("MmPurRetnSrcToItmVL");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl)findViewObject("LovItmId");
    }

    /**
     * Container's getter for LovUomId.
     * @return LovUomId
     */
    public ViewObjectImpl getLovUomId() {
        return (ViewObjectImpl)findViewObject("LovUomId");
    }

    /**
     * Container's getter for MmMrnItm.
     * @return MmMrnItm
     */
    public ViewObjectImpl getMmMrnItm() {
        return (ViewObjectImpl)findViewObject("MmMrnItm");
    }

    /**
     * Container's getter for LovMrnNo.
     * @return LovMrnNo
     */
    public ViewObjectImpl getLovMrnNo() {
        return (ViewObjectImpl)findViewObject("LovMrnNo");
    }
    
    
  
       
       private static int INTEGER = Types.NUMERIC;
       private static int DATE = Types.DATE;
       private static int STRING = Types.VARCHAR;
       private static int NUMBER = Types.NUMERIC;
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try { 
                st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
     
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) { throw new JboException(e);
                    }
                }
            }
        }
    public String getWfNo(Integer SlocId,String CldId,String OrgId,Integer DocNo) 
       {
           try {
               Object obj=callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)",
                                         new Object[] {SlocId, CldId, OrgId, DocNo,0 });
               return obj.toString();
           } catch (Exception e) {
               return "0";
           }
       
       }
       public Integer getUsrLvl(Integer SlocId,String CldId,String OrgId,Integer UsrId,String WfNo,String DocNo)
       {
           return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId,CldId,
                                                                                                                                   OrgId,
                                                                                                                                   UsrId,
                                                                                                                                   WfNo,
                                                                                                                                   DocNo,0 }).toString());


       }
       
       public Integer insIntoTxn(Integer SlocId,String CldId,String OrgId,Integer DocNo,String WfNo,Integer usr_idFrm,Integer usr_idTo,Integer levelTo,Integer levelFrm,String action,String remark,Number amount )
       {
       String DocId=getMmPurRetn().getCurrentRow().getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                           new Object[] { SlocId, CldId, OrgId, DocNo,0, WfNo, DocId,
                                                          usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
                                                          amount}).toString());
       
       }
       
       public Integer pendingCheck(Integer SlocId,String CldId,String OrgId,Integer DocNo){
          
           String DocId= getMmPurRetn().getCurrentRow().getAttribute("DocId").toString();
           //System.out.println("DOCIDTXN--"+docIdTxn);
           Object obj= callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId,0 });
           Integer UsrId=null; 
           if(obj!=null){
               UsrId=Integer.parseInt(obj.toString());
           }
           return UsrId;
       }
       
       public void updateAuthstat(String retValue)
       {
           if(retValue.toString().equals("A"))
           {
               String cldId=this.getMmPurRetn().getCurrentRow().getAttribute("CldId").toString();
               Integer slocId=Integer.parseInt(this.getMmPurRetn().getCurrentRow().getAttribute("SlocId").toString());
               String orgId=(String)this.getMmPurRetn().getCurrentRow().getAttribute("OrgId");
               String docId=(String)this.getMmPurRetn().getCurrentRow().getAttribute("DocId");
               this.getMmPurRetn().getCurrentRow().setAttribute("AuthStat","Y");
               this.getMmPurRetn().getCurrentRow().setAttribute("PurRetStat",430);
               this.getMmPurRetn().getCurrentRow().setAttribute("PurRetStatDt",new Timestamp(System.currentTimeMillis()));
               Object isclose= callStoredFunction(NUMBER, "MM.MM_CLOSE_MRN(?,?,?,?,?)", new Object[] { cldId,slocId,orgId,18529,docId});
               System.out.println("Is Closed="+isclose);
               Integer usrId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
               String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
               System.out.println(docId+" date is "+getMmPurRetn().getCurrentRow().getAttribute("DocDt")+" eo id"+this.getMmPurRetn().getCurrentRow().getAttribute("EoId")+usrId);
               String retval=callStoredFunction(Types.NUMERIC, "MM.MM_INS_GL_DEBIT_NOTE(?,?,?,?,?,?,?,?)", new Object[] { slocId,cldId,hoOrgId,orgId,docId,this.getMmPurRetn().getCurrentRow().getAttribute("DocDt"),this.getMmPurRetn().getCurrentRow().getAttribute("EoId"),usrId}).toString();

            Integer retuval=Integer.parseInt(retval);
            System.out.println("Return from Debit Note="+retuval);
           }
        
           }

    /**
     * Container's getter for MmMrnItmStk.
     * @return MmMrnItmStk
     */
    public ViewObjectImpl getMmMrnItmStk() {
        return (ViewObjectImpl)findViewObject("MmMrnItmStk");
    }

    /**
     * Container's getter for MmPurRetnItm1.
     * @return MmPurRetnItm1
     */
    public MmPurRetnItmVOImpl getMmPurRetnItm1() {
        return (MmPurRetnItmVOImpl)findViewObject("MmPurRetnItm1");
    }
    
    public String GenerateFyId()
    {
        String CldId = (String)this.getMmPurRetn().getCurrentRow().getAttribute("CldId");
        String OrgId = (String)this.getMmPurRetn().getCurrentRow().getAttribute("OrgId");
        Timestamp dt = (Timestamp)this.getMmPurRetn().getCurrentRow().getAttribute("PurRetDt");
            Integer fyid=(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {CldId,OrgId,dt}));
            if(fyid>0)
            {    
            this.getMmPurRetn().getCurrentRow().setAttribute("FyId",fyid);
            return "Y";
            }
            else
               return "N";
        }
    
    public void setsearchValues()
    {
            ViewObjectImpl searchvo=this.getSearch();
            String OrgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer SlocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String CldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            this.getPurchaseReturnSearch().getCurrentRow().setAttribute("TransCldId", CldId);
            this.getPurchaseReturnSearch().getCurrentRow().setAttribute("TransOrgId", OrgId);
            this.getPurchaseReturnSearch().getCurrentRow().setAttribute("TransSlocId", SlocId);
            /* getMmPurRetn().setcldIdBind(CldId);
            getMmPurRetn().setslocBind(SlocId);
            getMmPurRetn().setorgBind(OrgId); */
            searchvo.setNamedWhereClauseParam("cldIdBind", CldId);
            searchvo.setNamedWhereClauseParam("slocBind", SlocId);
            searchvo.setNamedWhereClauseParam("orgBind", OrgId);
            searchvo.executeQuery();
        }
    
    public String resolvEl(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
          String msg = valueExp.getValue(elContext).toString();
          return msg;
      }

    /**
     * Container's getter for PurchaseReturnSearch.
     * @return PurchaseReturnSearch
     */
    public PurchaseReturnSearchVOImpl getPurchaseReturnSearch() {
        return (PurchaseReturnSearchVOImpl)findViewObject("PurchaseReturnSearch");
    }
    
    
    public void SearchPurchaseReturn()
    {
       // System.out.println("In search..");
            ViewObjectImpl searchvo=this.getSearch();
        String prno=null;
                  Integer eoid=null;
                  String whid=null;
                  Timestamp prdtfrm=null;
                  Timestamp prdtto=null;
                  Integer prst=null;
                  String itmid=null;
                if(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetNo")!=null && (!getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetNo").toString().equals("")))
                {   prno=getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetNo").toString();
                       searchvo.setNamedWhereClauseParam("PurRetNoBind", prno);
                   }
                else
            searchvo.setNamedWhereClauseParam("PurRetNoBind", null);
           //     System.out.println("Pr no="+prno);
                
                if(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransWhName")!=null && (!getPurchaseReturnSearch().getCurrentRow().getAttribute("TransWhName").toString().equals("")))
                {  
                    whid=getPurchaseReturnSearch().getCurrentRow().getAttribute("TransWhName").toString();  
                       searchvo.setNamedWhereClauseParam("whBind", whid);
                   }
                else
            searchvo.setNamedWhereClauseParam("whBind", null);
          //  System.out.println("wh="+whid);
                
                if(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransEoId")!=null && (!getPurchaseReturnSearch().getCurrentRow().getAttribute("TransEoId").toString().equals("")))
                {  eoid=Integer.parseInt(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransEoId").toString());  
                       searchvo.setNamedWhereClauseParam("SuppIdBind", eoid);
                   }
                else
            searchvo.setNamedWhereClauseParam("SuppIdBind", null); 
         //   System.out.println("eo="+eoid);
                
                  if(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransFromDt")!=null )
                  {  prdtfrm= new Timestamp(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransFromDt").toString());  
                         searchvo.setNamedWhereClauseParam("dtFromBind", prdtfrm);
                     }
                  else
           searchvo.setNamedWhereClauseParam("dtFromBind", null);
         //   System.out.println("dt frm="+prdtfrm);
                  
                  if(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransToDt")!=null)
                  {  prdtto= new Timestamp(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransToDt").toString());  
                         searchvo.setNamedWhereClauseParam("dateToBind", prdtto);
                     }
                  else
            searchvo.setNamedWhereClauseParam("dateToBind", null);
           // System.out.println("dt to="+prdtto);
                  
                  if(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetStatus")!=null && !(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetStatus").toString().equals("")))
                  { 
                      prst= Integer.parseInt(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetStatus").toString());  
                         searchvo.setNamedWhereClauseParam("statusBind", prst);
                     }
                  else
            searchvo.setNamedWhereClauseParam("statusBind", null);
          //  System.out.println("status="+prst);
          if(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransItmId")!=null && !(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransItmId").toString().equals("")))
          { 
              itmid= (getPurchaseReturnSearch().getCurrentRow().getAttribute("TransItmId").toString());  
                 searchvo.setNamedWhereClauseParam("itmIdBind", itmid);
             }
          else
          searchvo.setNamedWhereClauseParam("itmIdBind", null);
          
                  searchvo.executeQuery();
                 
        }
    
    public void ResetSearch()
    {
            ViewObjectImpl searchvo=this.getSearch();
            getPurchaseReturnSearch().getCurrentRow().setAttribute("TransPurRetNo",null); 
            getPurchaseReturnSearch().getCurrentRow().setAttribute("TransWhName",null);
            getPurchaseReturnSearch().getCurrentRow().setAttribute("TransSuppNm",null);
            getPurchaseReturnSearch().getCurrentRow().setAttribute("TransFromDt",null);
            getPurchaseReturnSearch().getCurrentRow().setAttribute("TransToDt",null);
            getPurchaseReturnSearch().getCurrentRow().setAttribute("TransPurRetStatus",null);
            getPurchaseReturnSearch().getCurrentRow().setAttribute("TransItmDesc",null);
            VariableValueManager vm = getMmPurRetn().ensureVariableManager();
            searchvo.setNamedWhereClauseParam("PurRetNoBind", null);
            searchvo.setNamedWhereClauseParam("whBind", null);
            searchvo.setNamedWhereClauseParam("SuppIdBind", null);
            searchvo.setNamedWhereClauseParam("dtFromBind", null);
            searchvo.setNamedWhereClauseParam("dateToBind", null);
            searchvo.setNamedWhereClauseParam("statusBind", null);
            searchvo.setNamedWhereClauseParam("itmIdBind", null);
            searchvo.executeQuery();
        }

    /**
     * Container's getter for Search.
     * @return Search
     */
    public ViewObjectImpl getSearch() {
        return (ViewObjectImpl)findViewObject("Search");
    }
    
    public void PurRetnViewQuery(){
         ViewObjectImpl vo = this.getMmPurRetn();
         ViewObjectImpl servo = this.getSearch();
         Row currRow = servo.getCurrentRow();
        ViewCriteria vc = getMmPurRetn().getViewCriteria("MmPurRetnSearchCriteria");
       vo.applyViewCriteria(vc); 
      // if(currRow!=null){
       vo.setNamedWhereClauseParam("cldIdBind", currRow.getAttribute("CldId").toString());
       vo.setNamedWhereClauseParam("slocBind", (Integer)currRow.getAttribute("SlocId"));
       vo.setNamedWhereClauseParam("orgBind", currRow.getAttribute("OrgId").toString());
       vo.setNamedWhereClauseParam("docIdBind", currRow.getAttribute("DocId").toString());
        vo.setNamedWhereClauseParam("whBind", currRow.getAttribute("WhId").toString());
       vo.executeQuery();
           System.out.println("For doc id="+currRow.getAttribute("DocId"));
      // }
    }

    /**
     * Container's getter for MmPurRetnItmStk.
     * @return MmPurRetnItmStk
     */
    public ViewObjectImpl getMmPurRetnItmStk() {
        return (ViewObjectImpl)findViewObject("MmPurRetnItmStk");
    }

    /**
     * Container's getter for MmPurRetnItmToStkVL1.
     * @return MmPurRetnItmToStkVL1
     */
    public ViewLinkImpl getMmPurRetnItmToStkVL1() {
        return (ViewLinkImpl)findViewLink("MmPurRetnItmToStkVL1");
    }
    
    public void executeVO(){ 
    this.getMmPurRetnItmStk().executeQuery();
    }

    /**
     * Container's getter for LovMrnNoNew.
     * @return LovMrnNoNew
     */
    public ViewObjectImpl getLovMrnNoNew() {
        return (ViewObjectImpl)findViewObject("LovMrnNoNew");
    }
}
