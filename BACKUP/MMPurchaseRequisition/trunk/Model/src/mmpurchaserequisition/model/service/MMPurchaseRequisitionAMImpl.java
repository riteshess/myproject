package mmpurchaserequisition.model.service;

import java.math.BigDecimal;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ValueExpression;

import mmpurchaserequisition.model.service.common.MMPurchaseRequisitionAM;
import mmpurchaserequisition.model.view.MmPrVOImpl;
import mmpurchaserequisition.model.view.SrchPRVOImpl;
import mmpurchaserequisition.model.view.WhVOImpl;

import mmpurchaserequisition.model.view.srchTrnsVOImpl;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 14 17:03:34 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMPurchaseRequisitionAMImpl extends ApplicationModuleImpl implements MMPurchaseRequisitionAM {
    /**
     * This is the default constructor (do not remove).
     */
    
       public static int VARCHAR = Types.VARCHAR;
        String add_mode = null;
        String edit_mode = null;
        String view_mode = null;
        String del_mode = null;
    
    public MMPurchaseRequisitionAMImpl() {
    }

    /**
     * Container's getter for AttType1.
     * @return AttType1
     */
    public ViewObjectImpl getAttType1() {
        return (ViewObjectImpl)findViewObject("AttType1");
    }


    /**
     * Container's getter for MrsStatus1.
     * @return MrsStatus1
     */
    public ViewObjectImpl getMrsStatus1() {
        return (ViewObjectImpl)findViewObject("MrsStatus1");
    }

    /**
     * Container's getter for PRStatus1.
     * @return PRStatus1
     */
    public ViewObjectImpl getPRStatus1() {
        return (ViewObjectImpl)findViewObject("PRStatus1");
    }

    /**
     * Container's getter for Req1.
     * @return Req1
     */
    public ViewObjectImpl getReq1() {
        return (ViewObjectImpl)findViewObject("Req1");
    }

    /**
     * Container's getter for Wh1.
     * @return Wh1
     */
    public WhVOImpl getWh1() {
        return (WhVOImpl)findViewObject("Wh1");
    }

    /**
     * Container's getter for MmPr2.
     * @return MmPr2
     */
    public MmPrVOImpl getMmPr2() {
        return (MmPrVOImpl)findViewObject("MmPr2");
    }

    /**
     * Container's getter for MmPrItm2.
     * @return MmPrItm2
     */
    public ViewObjectImpl getMmPrItm2() {
        return (ViewObjectImpl)findViewObject("MmPrItm2");
    }

    /**
     * Container's getter for PrPrItmVL.
     * @return PrPrItmVL
     */
    public ViewLinkImpl getPrPrItmVL() {
        return (ViewLinkImpl)findViewLink("PrPrItmVL");
    }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl)findViewObject("Org1");
    }
    
       
    public void Commit_MM_PR_VO()
    {   ADFLogger logger = ADFLogger.createADFLogger(MMPurchaseRequisitionAMImpl.class);
        ViewObjectImpl mmprVo = (ViewObjectImpl)getMmPr2();
        ViewObjectImpl mmprItmVo = (ViewObjectImpl)getMmPrItm2();
        ViewObjectImpl mmMrsVo = (ViewObjectImpl)getMrs1();
        try{
            
            this.getDBTransaction().commit();
               
            }
        
        catch(JboException ex ){
            String message = ex.getMessage();
                logger.info(message);
            
            this.getDBTransaction().rollback();
            }
    }
    
    public  String evaluateEL(String el) {
        ADFContext adfCtx = ADFContext.getCurrent();
               ELContext elContext = adfCtx.getELContext();
               ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, el, Object.class);
               Object Message = valueExp.getValue(elContext).toString();
               return Message.toString();
      
    }
    
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
           CallableStatement st = null;
           try {
               st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
               if (bindVars != null) {
                   for (int z = 0; z < bindVars.length; z++) {
                       st.setObject(z + 2, bindVars[z]);
                   }
               }
                st.executeUpdate();
                return st.getObject(1);

           } catch (SQLException e) {
               throw new JboException(e);
           } finally {
               if (st != null) {
                   try {
                       st.close();
                   } catch (SQLException e) {e.printStackTrace();}
               }
           }
       }


    /**
     * Container's getter for test1.
     * @return test1
     */
    public ViewObjectImpl gettest1() {
        return (ViewObjectImpl)findViewObject("test1");
    }

    /**
     * Container's getter for MmMrsItm1.
     * @return MmMrsItm1
     */
    public ViewObjectImpl getMmMrsItm1() {
        return (ViewObjectImpl)findViewObject("MmMrsItm1");
    }
    

    
    public void setPrItems(String txnId)
    {
      ViewObjectImpl mrsItmVo = (ViewObjectImpl)getMmMrsItm1();
      ViewObjectImpl prItmVo = (ViewObjectImpl) getMmPrItm2();
      ViewObjectImpl prVo = getMmPr2();
      Row prRow = prVo.getCurrentRow();
      Row norows[] = prItmVo.getAllRowsInRange();
      if(norows!=null && norows.length > 0)
      { for(Row row:norows)
          {
            // prItmVo.setCurrentRow(row);
            // prItmVo.removeCurrentRow();
            row.remove();
         } 
      }
      
      Row rows[] = mrsItmVo.getFilteredRows("MrsTxnId", txnId);
      for(Row row:rows)
      {
        Row newRow = prItmVo.createRow();
          newRow.setAttribute("ItmId", row.getAttribute("ItmId")); 
          newRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));  
          newRow.setAttribute("PrQty", row.getAttribute("PendQty"));  
          newRow.setAttribute("PoQty", "");  
          newRow.setAttribute("PendQty", row.getAttribute("PendQty"));
          
          newRow.setAttribute("CldId", prRow.getAttribute("CldId"));
          newRow.setAttribute("SlocId",prRow.getAttribute("SlocId"));
          newRow.setAttribute("OrgId", prRow.getAttribute("OrgId"));
          newRow.setAttribute("WhId", prRow.getAttribute("WhId"));
          newRow.setAttribute("PrTxnId", prRow.getAttribute("PrTxnId"));
           prItmVo.insertRow(newRow);
      }
        ViewObjectImpl mmMrsVo = (ViewObjectImpl)getMrs1();
        Row mrsrows[] = mmMrsVo.getFilteredRows("MrsTxnId", txnId);
        if(mrsrows!=null && mrsrows.length==1)
        {mrsrows[0].setAttribute("MrsStat", 295);
             prVo.getCurrentRow().setAttribute("ReqdDt", mrsrows[0].getAttribute("ReqdDt"));
         }
        
        
        
        mrsItmVo.executeQuery();
        prItmVo.executeQuery();
       
    }

    /**
     * Container's getter for ItmLOV1.
     * @return ItmLOV1
     */
    public ViewObjectImpl getItmLOV1() {
        return (ViewObjectImpl)findViewObject("ItmLOV1");
    }

    /**
     * Container's getter for Uom1.
     * @return Uom1
     */
    public ViewObjectImpl getUom1() {
        return (ViewObjectImpl)findViewObject("Uom1");
    }
    
    public boolean checkPendingQty(BigDecimal qty)
    {
        ViewObjectImpl prItmVo = getMmPrItm2();
        Row row = prItmVo.getCurrentRow();
        BigDecimal pendingqty = (BigDecimal)row.getAttribute("PrQty");
      
        if(pendingqty.compareTo(qty)==-1)
            return false;
        else
            return true;
    }
    
    public void updatePendingQty(BigDecimal quantity)
    {
        ViewObjectImpl prItmVo = getMmPrItm2();
        Row row = prItmVo.getCurrentRow();
        BigDecimal prqty = (BigDecimal)row.getAttribute("PrQty");
        row.setAttribute("PoQty", quantity);
        BigDecimal poQty = (BigDecimal)row.getAttribute("PoQty");
  
       if(prqty !=null && poQty!=null)      
       {
        BigDecimal pendQty=prqty.subtract(poQty);
        row.setAttribute("PendQty",pendQty);
       }
       else
       {row.setAttribute("PendQty",0);}
    }

    /**
     * Container's getter for Mrs1.
     * @return Mrs1
     */
    public ViewObjectImpl getMrs1() {
        return (ViewObjectImpl)findViewObject("Mrs1");
    }

    /**
     * Container's getter for srchTrns1.
     * @return srchTrns1
     */
    public srchTrnsVOImpl getsrchTrns1() {
        return (srchTrnsVOImpl)findViewObject("srchTrns1");
    }

    /**
     * Container's getter for PurReqMrs1.
     * @return PurReqMrs1
     */
    public ViewObjectImpl getPurReqMrs1() {
        return (ViewObjectImpl)findViewObject("PurReqMrs1");
    }
    
    public void search() {
        
        ADFLogger logger = ADFLogger.createADFLogger(MMPurchaseRequisitionAMImpl.class);
        
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId= Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        try{
        ViewObjectImpl vo = (ViewObjectImpl)getSrchPR1();
      ViewCriteria vc= getSrchPR1().getViewCriteria("SrchPRVOCriteria");
      ViewObjectImpl trnsvo = (ViewObjectImpl)getsrchTrns1();
      Row trsrow = trnsvo.getCurrentRow();
      vo.applyViewCriteria(vc);
      vo.setNamedWhereClauseParam("bindPrNo", trsrow.getAttribute("PrNo"));
      vo.setNamedWhereClauseParam("bindPrType", trsrow.getAttribute("PrType"));
      vo.setNamedWhereClauseParam("bindSrcDocId", trsrow.getAttribute("PrSrc"));
      vo.setNamedWhereClauseParam("fromDate", trsrow.getAttribute("fromDate"));
      vo.setNamedWhereClauseParam("toDate", trsrow.getAttribute("toDate"));
      vo.setNamedWhereClauseParam("bindCldId", cldId);
      vo.setNamedWhereClauseParam("bindSlocId", slocId);
      vo.setNamedWhereClauseParam("bindOrgId", orgId);
            
            vo.setNamedWhereClauseParam("bindReqArea", trsrow.getAttribute("ReqId"));
            vo.setNamedWhereClauseParam("bindPrStat", trsrow.getAttribute("PRStat"));
            
   /*         
            System.out.println(trsrow.getAttribute("PrNo"));
            System.out.println(trsrow.getAttribute("PrType"));
            System.out.println(trsrow.getAttribute("PrSrc"));
            
            System.out.println(trsrow.getAttribute("fromDate"));
            System.out.println(trsrow.getAttribute("toDate"));
            System.out.println(trsrow.getAttribute("ReqId"));
            System.out.println(trsrow.getAttribute("PRStat"));
     */               
      vo.executeQuery();
        }catch(JboException ex){logger.warning("On Search");}
    }
    
    
    
    public void resetAction() {
        
        ADFLogger logger = ADFLogger.createADFLogger(MMPurchaseRequisitionAMImpl.class);
        
        
        try{
            String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer slocId= Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl vo = (ViewObjectImpl)getSrchPR1();
      ViewCriteria vc= getSrchPR1().getViewCriteria("SrchPRVOCriteria");
      ViewObjectImpl trnsvo = (ViewObjectImpl)getsrchTrns1();
      Row trsrow = trnsvo.getCurrentRow();
      vo.applyViewCriteria(vc);
      vo.setNamedWhereClauseParam("bindPrNo", null);
      vo.setNamedWhereClauseParam("bindPrType", null);
      vo.setNamedWhereClauseParam("bindSrcDocId",null);
      vo.setNamedWhereClauseParam("fromDate", null);
      vo.setNamedWhereClauseParam("toDate", null);
      vo.setNamedWhereClauseParam("bindCldId", cldId);
      vo.setNamedWhereClauseParam("bindSlocId", slocId);
      vo.setNamedWhereClauseParam("bindOrgId", orgId);
            
            vo.setNamedWhereClauseParam("bindReqArea", null);
            vo.setNamedWhereClauseParam("bindPrStat", null);
      vo.executeQuery();
        }
        catch(NullPointerException NPE){logger.warning("NULL");}
        catch(JboException ex){logger.warning("On Reset");}
    }

    /**
     * Container's getter for SrchPR1.
     * @return SrchPR1
     */
    public SrchPRVOImpl getSrchPR1() {
        return (SrchPRVOImpl)findViewObject("SrchPR1");
    }
    
    
 /*  public void setCreateSrcStatus() {
        
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        ViewObjectImpl vo = (ViewObjectImpl)getMrsStatus1();
        ViewCriteria vc= getMrsStatus1().getViewCriteria("MrsStatusVOCriteria");
      vo.applyViewCriteria(vc);
      vo.setNamedWhereClauseParam("bindCldId2", cldId);
      vo.setNamedWhereClauseParam("bindSlocId2",slocId);
      vo.setNamedWhereClauseParam("bindOrgId2", orgId);
        vo.setNamedWhereClauseParam("bindMrsStatus", 294);
      vo.executeQuery();
    }
 */   
   
   public String getCurrentPrTnxId()
   {
      ViewObjectImpl vo = (ViewObjectImpl)getSrchPR1();
      Row row = vo.getCurrentRow();
      String PrTxID=(String)row.getAttribute("PrTxnId");
     return PrTxID;
  }
   
    public String getCurrentPrTnxIdTF() 
    {
        String txnId=null;
        String txnMode=(String)evaluateEL("#{pageFlowScope.Txn_Mode}");
         if(txnMode.equals("C"))
         {txnId=null;}
         
         if(txnMode.equals("E"))
         {
             txnId=(String)evaluateEL("#{pageFlowScope.GLBL_PR_TXN_ID}");
              ViewObject vo = this.findViewObject("MmPr2");
              VariableValueManager vm = vo.ensureVariableManager();
              vm.setVariableValue("bindTxnId", txnId);
              vo.executeQuery();
         }
         
        return txnId;
   
    }
    

    public Integer getFYid()
    {   String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Timestamp date=(Timestamp)this.getMmPr2().getCurrentRow().getAttribute("PrDt");
        Integer fyId =(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,orgId,date}));
        ViewObjectImpl ge = this.getMmPr2();
        if(fyId!=null)
        {if(fyId>0)
            {ge.getCurrentRow().setAttribute("FyId", fyId);}}
     
        return fyId;
    }


    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }
    
    protected Object callFunction(int sqlReturnType, String stmt, Object[] bindVars) {
           CallableStatement st = null;
           try {
               st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
               if (bindVars != null) {
                   for (int z = 0; z < bindVars.length; z++) {
                       st.setObject(z + 2, bindVars[z]);
                   }
               }
               st.registerOutParameter(7, VARCHAR);
               st.registerOutParameter(8, VARCHAR);
               st.registerOutParameter(9, VARCHAR);
               st.registerOutParameter(10, VARCHAR);
               st.executeUpdate();
               try {
                   setAdd_mode(st.getObject(7).toString());
                   setEdit_mode((st.getObject(8).toString()));
                   setView_mode(st.getObject(9).toString());
                   setDel_mode(st.getObject(10).toString());
               } catch (NullPointerException e) {
                   System.out.println(e);
                   e.printStackTrace();
               }
               return st.getObject(1);

           } catch (SQLException e) {
               throw new JboException(e);
           } finally {
               if (st != null) {
                   try {
                       st.close();
                   } catch (SQLException e) {e.printStackTrace();

                   }
               }
           }
       }
    
    
    public Integer on_load_page()
               {  int count = 0;
               String cld_id =  evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
               Integer sloc_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
               String org_id =  evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
               Integer usr_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_USR}").toString()); 
               callFunction(VARCHAR,"APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                          new Object[] { cld_id, sloc_id, org_id, 1,usr_id});
               String calledFrom =  evaluateEL("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
               if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
               {            count = 1;
                   }
               else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
               {
                   count = 1;
                   }
               else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
               else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
                else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
               {
                  count = 1; 
                   }
               Map paramMap = ADFContext.getCurrent().getPageFlowScope();
               paramMap.put("PARAM_PG_ADD_MD", add_mode); 
               paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
               paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
               paramMap.put("PARAM_PG_DEL_MD", del_mode); 
                     
         return count;
           }
    
    public Integer getPRStatus()
    {
        ViewObject MmPrVo = this.findViewObject("MmPr2");
         Integer statValue = (Integer)MmPrVo.getCurrentRow().getAttribute("PrStat");
         return statValue;
    }
    
    public void checkUncheckAll(String tnxId,Boolean b,Integer prStatus)
    {  
       
        ViewObjectImpl vo = (ViewObjectImpl)this.findViewObject("MmPrItm2");
        ViewObjectImpl MmPrVo = (ViewObjectImpl)this.findViewObject("MmPr2");
          
        String tnxscId=null;
        tnxscId=(String)MmPrVo.getCurrentRow().getAttribute("PrTxnId");
        String cld_id =  evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
        String org_id =  evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
        String whId=(String)MmPrVo.getCurrentRow().getAttribute("WhId");
        MmPrVo.getCurrentRow().setAttribute("PrStat", prStatus);
        
        RowQualifier rq  = new RowQualifier(vo);
        rq.setWhereClause("CldId = '"+cld_id+"' AND OrgId = '"+org_id+"' AND SlocId = "+sloc_id+" AND WhId = '"+whId+"' AND PrTxnId = '"+tnxscId+"'");
        Row rows[]=vo.getFilteredRows(rq);
      
        if(b)
        {
            for(Row row:rows)
             {   BigDecimal pQty = (BigDecimal)row.getAttribute("PendQty");
                if(pQty.compareTo(BigDecimal.ZERO)==0)
                {  row.setAttribute("CnclItm", 'N');
                   }
                else
                {row.setAttribute("CnclItm", 'Y');
                  }
             }
        }
        else
        {
            for(Row row:rows)
            {row.setAttribute("CnclItm", 'N');}
        }
        MmPrVo.getCurrentRow().setAttribute("PrStatDt", new Timestamp(System.currentTimeMillis()));
        vo.executeQuery();
    
    }
    
    
    public boolean isAllCheckBoxMark()
    {
        ViewObjectImpl vo = (ViewObjectImpl)this.findViewObject("MmPrItm2");
        ViewObjectImpl MmPrVo = (ViewObjectImpl)this.findViewObject("MmPr2");
          
        String tnxscId=null;
        tnxscId=(String)MmPrVo.getCurrentRow().getAttribute("PrTxnId");
        String cld_id =  evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
        String org_id =  evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
        String whId=(String)MmPrVo.getCurrentRow().getAttribute("WhId");
     
        
        RowQualifier rq  = new RowQualifier(vo);
        rq.setWhereClause("CldId = '"+cld_id+"' AND OrgId = '"+org_id+"' AND SlocId = "+sloc_id+" AND WhId = '"+whId+"' AND PrTxnId = '"+tnxscId+"'");
        Row rows[]=vo.getFilteredRows(rq);
  
        
        Row currRow = vo.getCurrentRow();
        if(rows != null && rows.length > 0)
        {
            for(Row row:rows)
             {  
                 if(currRow!=row)
                {
                 if(row.getAttribute("CnclItm").toString().equals("N"))
                    return false;
                }
             }
        }
       return true;
    }
    
    public void setStatus(Integer prStatus)
    {  
        ViewObjectImpl MmPrVo = (ViewObjectImpl)this.findViewObject("MmPr2");
         MmPrVo.getCurrentRow().setAttribute("PrStat", prStatus);
    }
    
    
    public void executePR()
    {
        String cld_id =  evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
        String org_id =  evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
        ViewObjectImpl vo = this.getSrchPR1();
        ViewCriteria vc = vo.getViewCriteria("SrchPRVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindOrgId", org_id);
        vo.setNamedWhereClauseParam("bindCldId", cld_id);
        vo.setNamedWhereClauseParam("bindSlocId", sloc_id);
        vo.executeQuery();
      
    }
    
    
    
    public String getModifiedUser()
    {
        ViewObjectImpl MrsVo = this.getMrs1();
        ViewObjectImpl PrsVo = this.getMmPr2();
        Row currRow = PrsVo.getCurrentRow();
        
        Object docId = currRow.getAttribute("DocIdSrc");
           if(docId != null)
        { 
            Row row[] = MrsVo.getFilteredRows("MrsTxnId", docId);
            if(row.length>0)
            { return  String.valueOf(row[0].getAttribute("UsrIdMod"));}
        }
        return null;
    }
}
