package mminvoice.model.views;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mminvoice.model.entities.MmInvcSrcEOImpl;
import mminvoice.model.services.MMInvoiceAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 25 14:24:42 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmInvcSrcVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMINVCSRCEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        DocId {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        DocIdRcpt {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getDocIdRcpt();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setDocIdRcpt((String)value);
            }
        }
        ,
        DocIdPo {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getDocIdPo();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setDocIdPo((String)value);
            }
        }
        ,
        DocDtPo {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getDocDtPo();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setDocDtPo((Timestamp)value);
            }
        }
        ,
        AmdNo {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getAmdNo();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setAmdNo((Integer)value);
            }
        }
        ,
        DlvSchdlNo {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getDlvSchdlNo();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setDlvSchdlNo((Integer)value);
            }
        }
        ,
        TaxRuleFlg {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getTaxRuleFlg();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setTaxRuleFlg((String)value);
            }
        }
        ,
        TaxAfterDiscFlg {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getTaxAfterDiscFlg();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setTaxAfterDiscFlg((String)value);
            }
        }
        ,
        DiscAmtSp {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getDiscAmtSp();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setDiscAmtSp((Number)value);
            }
        }
        ,
        DiscAmtBs {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getDiscAmtBs();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setDiscAmtBs((Number)value);
            }
        }
        ,
        PoAmtSp {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getPoAmtSp();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setPoAmtSp((Number)value);
            }
        }
        ,
        PoAmtBs {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getPoAmtBs();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setPoAmtBs((Number)value);
            }
        }
        ,
        CurrConvFctr {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getCurrConvFctr();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setCurrConvFctr((Number)value);
            }
        }
        ,
        TransSrcDocNm {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getTransSrcDocNm();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setTransSrcDocNm((String)value);
            }
        }
        ,
        TransTaxRuleAll {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getTransTaxRuleAll();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setTransTaxRuleAll((Integer)value);
            }
        }
        ,
        TransPoAmtSp {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getTransPoAmtSp();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setTransPoAmtSp((Number)value);
            }
        }
        ,
        TransPoAmtOc {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getTransPoAmtOc();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setTransPoAmtOc((Number)value);
            }
        }
        ,
        TransFinalPoAmtSp {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getTransFinalPoAmtSp();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setTransFinalPoAmtSp((Number)value);
            }
        }
        ,
        TransExcludeFlg {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getTransExcludeFlg();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setTransExcludeFlg((String)value);
            }
        }
        ,
        HoOrgId {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        MmInvcItm {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getMmInvcItm();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmInvcOc {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getMmInvcOc();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovTaxRuleIdVO {
            public Object get(MmInvcSrcVORowImpl obj) {
                return obj.getLovTaxRuleIdVO();
            }

            public void put(MmInvcSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmInvcSrcVORowImpl object);

        public abstract void put(MmInvcSrcVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDRCPT = AttributesEnum.DocIdRcpt.index();
    public static final int DOCIDPO = AttributesEnum.DocIdPo.index();
    public static final int DOCDTPO = AttributesEnum.DocDtPo.index();
    public static final int AMDNO = AttributesEnum.AmdNo.index();
    public static final int DLVSCHDLNO = AttributesEnum.DlvSchdlNo.index();
    public static final int TAXRULEFLG = AttributesEnum.TaxRuleFlg.index();
    public static final int TAXAFTERDISCFLG = AttributesEnum.TaxAfterDiscFlg.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int POAMTSP = AttributesEnum.PoAmtSp.index();
    public static final int POAMTBS = AttributesEnum.PoAmtBs.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int TRANSSRCDOCNM = AttributesEnum.TransSrcDocNm.index();
    public static final int TRANSTAXRULEALL = AttributesEnum.TransTaxRuleAll.index();
    public static final int TRANSPOAMTSP = AttributesEnum.TransPoAmtSp.index();
    public static final int TRANSPOAMTOC = AttributesEnum.TransPoAmtOc.index();
    public static final int TRANSFINALPOAMTSP = AttributesEnum.TransFinalPoAmtSp.index();
    public static final int TRANSEXCLUDEFLG = AttributesEnum.TransExcludeFlg.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int MMINVCITM = AttributesEnum.MmInvcItm.index();
    public static final int MMINVCOC = AttributesEnum.MmInvcOc.index();
    public static final int LOVTAXRULEIDVO = AttributesEnum.LovTaxRuleIdVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmInvcSrcVORowImpl() {
    }

    /**
     * Gets MmInvcSrcEO entity object.
     * @return the MmInvcSrcEO
     */
    public MmInvcSrcEOImpl getMmInvcSrcEO() {
        return (MmInvcSrcEOImpl)getEntity(ENTITY_MMINVCSRCEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_ID_RCPT using the alias name DocIdRcpt.
     * @return the DOC_ID_RCPT
     */
    public String getDocIdRcpt() {
        return (String) getAttributeInternal(DOCIDRCPT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_RCPT using the alias name DocIdRcpt.
     * @param value value to set the DOC_ID_RCPT
     */
    public void setDocIdRcpt(String value) {
        setAttributeInternal(DOCIDRCPT, value);
    }

    /**
     * Gets the attribute value for DOC_ID_PO using the alias name DocIdPo.
     * @return the DOC_ID_PO
     */
    public String getDocIdPo() {
        return (String) getAttributeInternal(DOCIDPO);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_PO using the alias name DocIdPo.
     * @param value value to set the DOC_ID_PO
     */
    public void setDocIdPo(String value) {
        setAttributeInternal(DOCIDPO, value);
    }

    /**
     * Gets the attribute value for DOC_DT_PO using the alias name DocDtPo.
     * @return the DOC_DT_PO
     */
    public Timestamp getDocDtPo() {
        return (Timestamp) getAttributeInternal(DOCDTPO);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT_PO using the alias name DocDtPo.
     * @param value value to set the DOC_DT_PO
     */
    public void setDocDtPo(Timestamp value) {
        setAttributeInternal(DOCDTPO, value);
    }

    /**
     * Gets the attribute value for AMD_NO using the alias name AmdNo.
     * @return the AMD_NO
     */
    public Integer getAmdNo() {
        return (Integer) getAttributeInternal(AMDNO);
    }

    /**
     * Sets <code>value</code> as attribute value for AMD_NO using the alias name AmdNo.
     * @param value value to set the AMD_NO
     */
    public void setAmdNo(Integer value) {
        setAttributeInternal(AMDNO, value);
    }

    /**
     * Gets the attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @return the DLV_SCHDL_NO
     */
    public Integer getDlvSchdlNo() {
        return (Integer) getAttributeInternal(DLVSCHDLNO);
    }

    /**
     * Sets <code>value</code> as attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @param value value to set the DLV_SCHDL_NO
     */
    public void setDlvSchdlNo(Integer value) {
        setAttributeInternal(DLVSCHDLNO, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_FLG using the alias name TaxRuleFlg.
     * @return the TAX_RULE_FLG
     */
    public String getTaxRuleFlg() {
        return (String) getAttributeInternal(TAXRULEFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_FLG using the alias name TaxRuleFlg.
     * @param value value to set the TAX_RULE_FLG
     */
    public void setTaxRuleFlg(String value) {
        setAttributeInternal(TAXRULEFLG, value);
    }

    /**
     * Gets the attribute value for TAX_AFTER_DISC_FLG using the alias name TaxAfterDiscFlg.
     * @return the TAX_AFTER_DISC_FLG
     */
    public String getTaxAfterDiscFlg() {
        return (String) getAttributeInternal(TAXAFTERDISCFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AFTER_DISC_FLG using the alias name TaxAfterDiscFlg.
     * @param value value to set the TAX_AFTER_DISC_FLG
     */
    public void setTaxAfterDiscFlg(String value) {
        setAttributeInternal(TAXAFTERDISCFLG, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
        return (Number) getAttributeInternal(DISCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
        if(value != null)
        {setAttributeInternal(DISCAMTSP, value.round(getAmtRoundOff()));}
        else
        {setAttributeInternal(DISCAMTSP, value);}
    }

    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        return (Number) getAttributeInternal(DISCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        if(value != null)
        {setAttributeInternal(DISCAMTBS, value.round(getAmtRoundOff()));}
        else
        {setAttributeInternal(DISCAMTBS, value);}
    }

    /**
     * Gets the attribute value for PO_AMT_SP using the alias name PoAmtSp.
     * @return the PO_AMT_SP
     */
    public Number getPoAmtSp() {
        return (Number) getAttributeInternal(POAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for PO_AMT_SP using the alias name PoAmtSp.
     * @param value value to set the PO_AMT_SP
     */
    public void setPoAmtSp(Number value) {
        if(value != null)
        {setAttributeInternal(POAMTSP, value.round(getAmtRoundOff()));}
        else
        {setAttributeInternal(POAMTSP, value);}
    }

    /**
     * Gets the attribute value for PO_AMT_BS using the alias name PoAmtBs.
     * @return the PO_AMT_BS
     */
    public Number getPoAmtBs() {
        return (Number) getAttributeInternal(POAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for PO_AMT_BS using the alias name PoAmtBs.
     * @param value value to set the PO_AMT_BSTotal Sum
     */
    public void setPoAmtBs(Number value) {
        if(value != null)
        {setAttributeInternal(POAMTBS, value.round(getAmtRoundOff()));}
        else
        {setAttributeInternal(POAMTBS, value);}
    }

    /**
     * Gets the attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @return the CURR_CONV_FCTR
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @param value value to set the CURR_CONV_FCTR
     */
    public void setCurrConvFctr(Number value) {
        if(value != null)
        {setAttributeInternal(CURRCONVFCTR, value.round(getCurrRoundOff()));}
        else
        {setAttributeInternal(CURRCONVFCTR, value);}
    }

    /**
     * Gets the attribute value for the calculated attribute TransSrcDocNm.
     * @return the TransSrcDocNm
     */
    public String getTransSrcDocNm() {
        MMInvoiceAMImpl am = (MMInvoiceAMImpl)this.getApplicationModule();
        Row curr=am.getMmInvc().getCurrentRow();
        Object ret="";
        Integer type=(Integer)curr.getAttribute("InvcType");
        if(type==455 || type == 492 || type == 737 || type == 739){
            ret =(Object)(callStoredFunction(Types.VARCHAR, "MM.MM_GET_PO_NO(?,?,?,?)", new Object[] {this.getCldId(),this.getSlocId(),this.getOrgId(),this.getDocIdPo()}));    
        }
       else if(type == 456 || type == 716 ){
            ret=(Object)(callStoredFunction(Types.VARCHAR, "MM.MM_GET_TO_NO(?,?,?,?)", new Object[] {this.getCldId(),this.getSlocId(),this.getOrgId(),this.getDocIdPo()}));
        }
        else if(type == 457){
            ret=(Object)(callStoredFunction(Types.VARCHAR, "MM.MM_GET_CPO_NO(?,?,?,?)", new Object[] {this.getCldId(),this.getSlocId(),this.getOrgId(),this.getDocIdPo()}));
        }
       
       if(ret !=null)
       {return String.valueOf(ret);}
       else
       {return (String) getAttributeInternal(TRANSSRCDOCNM);}
       
       
       /*
        Integer type=(Integer)curr.getAttribute("InvcType");
        System.out.println(type+" <-----------getDocIdPo--->> "+this.getDocIdPo());
        
        if(type==414){ 
            Row[] rws= am.getLovPoNo().getFilteredRows("DocId", this.getDocIdPo());
            if(rws.length>0){
                ret=rws[0].getAttribute("AuthPoNo").toString();
                return ret;
            }else{
                return (String) getAttributeInternal(TRANSSRCDOCNM);
            }
        }else{
            return (String) getAttributeInternal(TRANSSRCDOCNM);
        }*/
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSrcDocNm.
     * @param value value to set the  TransSrcDocNm
     */
    public void setTransSrcDocNm(String value) {
        setAttributeInternal(TRANSSRCDOCNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxRuleAll.
     * @return the TransTaxRuleAll
     */
    public Integer getTransTaxRuleAll() {
        
 /*
        MMInvoiceAMImpl am = (MMInvoiceAMImpl)this.getApplicationModule();
        Integer count=am.getMmInvcTr().getRowCount();
        Integer ruleId=null;
      
        if(count>0){
            Row fir=am.getMmInvcTr().first();
            ruleId =(Integer)fir.getAttribute("TaxRuleId");
            Row[] filRw=am.getMmInvcTr().getFilteredRows("TaxRuleId", ruleId);
        
            if(filRw.length==count){
               return ruleId;    
            }else{
               return (Integer) getAttributeInternal(TRANSTAXRULEALL);
            }
          
        }else{
            return (Integer) getAttributeInternal(TRANSTAXRULEALL);
        }
  
  */
  
        return (Integer) getAttributeInternal(TRANSTAXRULEALL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxRuleAll.
     * @param value value to set the  TransTaxRuleAll
     */
    public void setTransTaxRuleAll(Integer value) {
        setAttributeInternal(TRANSTAXRULEALL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPoAmtSp.
     * @return the TransPoAmtSp
     */
    public Number getTransPoAmtSp() {
        return (Number) getAttributeInternal(TRANSPOAMTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPoAmtSp.
     * @param value value to set the  TransPoAmtSp
     */
    public void setTransPoAmtSp(Number value) {
        if(value != null)
        {setAttributeInternal(TRANSPOAMTSP, value.round(getAmtRoundOff()));}
        else
        {setAttributeInternal(TRANSPOAMTSP, value);}
    }

    /**
     * Gets the attribute value for the calculated attribute TransPoAmtOc.
     * @return the TransPoAmtOc
     */
    public Number getTransPoAmtOc() {
        return (Number) getAttributeInternal(TRANSPOAMTOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPoAmtOc.
     * @param value value to set the  TransPoAmtOc
     */
    public void setTransPoAmtOc(Number value) {
        if(value != null)
        {setAttributeInternal(TRANSPOAMTOC, value.round(getAmtRoundOff()));}
        else
        {setAttributeInternal(TRANSPOAMTOC, value);}
    }

    /**
     * Gets the attribute value for the calculated attribute TransFinalPoAmtSp.
     * @return the TransFinalPoAmtSp
     */
    public Number getTransFinalPoAmtSp() {
        if((Number) getAttributeInternal(TRANSFINALPOAMTSP)!=null){
            this.setPoAmtSp((Number) getAttributeInternal(TRANSFINALPOAMTSP));
            Number bsAmt=((Number) getAttributeInternal(TRANSFINALPOAMTSP)).multiply(this.getCurrConvFctr());
            
            //System.out.println("Total Sum : "+bsAmt);
            
            this.setPoAmtBs(bsAmt);
        }
        return (Number) getAttributeInternal(TRANSFINALPOAMTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFinalPoAmtSp.
     * @param value value to set the  TransFinalPoAmtSp
     */
    public void setTransFinalPoAmtSp(Number value) {
        if(value != null)
        {setAttributeInternal(TRANSFINALPOAMTSP, value.round(getAmtRoundOff()));}
       else
        {setAttributeInternal(TRANSFINALPOAMTSP, value);}
    }

    /**
     * Gets the attribute value for the calculated attribute TransExcludeFlg.
     * @return the TransExcludeFlg
     */
    public String getTransExcludeFlg() {
        return (String) getAttributeInternal(TRANSEXCLUDEFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransExcludeFlg.
     * @param value value to set the  TransExcludeFlg
     */
    public void setTransExcludeFlg(String value) {
        setAttributeInternal(TRANSEXCLUDEFLG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        String paramHoOrdId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
                   if(paramHoOrdId != null)
                   {return paramHoOrdId;}
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmInvcItm.
     */
    public RowIterator getMmInvcItm() {
        return (RowIterator)getAttributeInternal(MMINVCITM);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmInvcOc.
     */
    public RowIterator getMmInvcOc() {
        return (RowIterator)getAttributeInternal(MMINVCOC);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovTaxRuleIdVO.
     */
    public RowSet getLovTaxRuleIdVO() {
        return (RowSet)getAttributeInternal(LOVTAXRULEIDVO);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
          CallableStatement st = null;
          try {
               st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
              if (bindVars != null) {
                  for (int z = 0; z < bindVars.length; z++) {
                      st.setObject(z + 2, bindVars[z]);
                  }
              }
              st.executeUpdate();

              return st.getObject(1);
          } catch (SQLException e) {
              
             int end = e.getMessage().indexOf("\n");
              //  throw new JboException(e.getMessage().substring(11, end));
              String msg = e.getMessage();
              FacesMessage ermsg = new FacesMessage(msg);
              ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
              FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);
              return null;
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {
                      
                     e.printStackTrace(); 
                  }
              }
          }
      }
    
    
    private String resolvEl(String data) {
            FacesContext fc = FacesContext.getCurrentInstance();
            Application app = fc.getApplication();
            ExpressionFactory elFactory = app.getExpressionFactory();
            ELContext elContext = fc.getELContext();
            ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
            String Message = valueExp.getValue(elContext).toString();
            return Message;
        }
    
    private Integer getAmtRoundOff()
     {
         Integer roundOff=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString()); 
         return roundOff;
     }
     
     private Integer getCurrRoundOff()
     {
         Integer roundOff=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}").toString()); 
         return roundOff;
     }
}
