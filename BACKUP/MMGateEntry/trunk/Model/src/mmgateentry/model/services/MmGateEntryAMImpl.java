package mmgateentry.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.HashSet;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmgateentry.model.services.common.MmGateEntryAM;

import mmgateentry.model.views.GeSearchVOImpl;
import mmgateentry.model.views.MmMtlGeItmVOImpl;
import mmgateentry.model.views.MmMtlGeSrcVOImpl;

import mmgateentry.model.views.MmMtlGeVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.TxnValException;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.dom4j.rule.Mode;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 16 16:02:02 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmGateEntryAMImpl extends ApplicationModuleImpl implements MmGateEntryAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MmGateEntryAMImpl() {
    }
    private static Integer SOURCE_DOC_TYPE_PO=266;
    private static Integer SOURCE_DOC_TYPE_SO=268;
    private static Integer SOURCE_DOC_TYPE_TRFO=270;
    private static Integer SOURCE_DOC_TYPE_WPO=370;
    private static Integer SOURCE_DOC_TYPE_WSO=269;
    private static Integer SOURCE_DOC_TYPE_CPO=459;
    private static ADFLogger _log=ADFLogger.createADFLogger(MmGateEntryAMImpl.class);
    
    /**
     * Container's getter for MmMtlGe.
     * @return MmMtlGe
     */
    public ViewObjectImpl getMmMtlGe() {
        return (ViewObjectImpl)findViewObject("MmMtlGe");
    }

    /**
     * Container's getter for MmMtlGeSrc.
     * @return MmMtlGeSrc
     */
    public ViewObjectImpl getMmMtlGeSrc() {
        return (ViewObjectImpl)findViewObject("MmMtlGeSrc");
    }

    /**
     * Container's getter for MmMtlGeItm.
     * @return MmMtlGeItm
     */
    public ViewObjectImpl getMmMtlGeItm() {
        return (ViewObjectImpl)findViewObject("MmMtlGeItm");
    }

    /**
     * Container's getter for MmMtlGeToMmMtlGeSrcVL1.
     * @return MmMtlGeToMmMtlGeSrcVL1
     */
    public ViewLinkImpl getMmMtlGeToMmMtlGeSrcVL1() {
        return (ViewLinkImpl)findViewLink("MmMtlGeToMmMtlGeSrcVL1");
    }

    /**
     * Container's getter for MmMtlGeSrcToMmMtlGeItmVL1.
     * @return MmMtlGeSrcToMmMtlGeItmVL1
     */
    public ViewLinkImpl getMmMtlGeSrcToMmMtlGeItmVL1() {
        return (ViewLinkImpl)findViewLink("MmMtlGeSrcToMmMtlGeItmVL1");
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
          CallableStatement st = null;
          try {
               st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
              if (bindVars != null) {
                  for (int z = 0; z < bindVars.length; z++) {
                      st.setObject(z + 2, bindVars[z]);
                  }
              }
              st.executeUpdate();

              return st.getObject(1);
          } catch (SQLException e) {
              throw new JboException(e);
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {
                  }
              }
          }
      }
    
    public Object resolvElDC(String data) {
           ValueExpression valueExp =FacesContext.getCurrentInstance().getApplication().getExpressionFactory().createValueExpression(FacesContext.getCurrentInstance().getELContext(), "#{data." + data + ".dataProvider}", Object.class);
           return valueExp.getValue(FacesContext.getCurrentInstance().getELContext());
    }
    
    public void setTxnIdForCurrentRow(Integer UsrId,String CldId,Integer SlocId,String OrgId,String whIdDef,String chkWf){
       // String tableName = "MM$GE";
    //   String paramWhChk = resolvEl("#{pageFlowScope.GLBL_ORG_WH_CHK}");
       
        Row currentRow=this.getMmMtlGe().getCurrentRow();
       // String txnId = (String)callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?)", new Object[]{SlocId,CldId,OrgId,tableName});
        
        String txnId =(String)(callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {CldId,SlocId,OrgId,UsrId,new Integer(18511),0}));    //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        _log.info("--TxnId new created----"+txnId);
        currentRow.setAttribute("DocId", txnId);
        Timestamp ts= new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocDt",ts);
        Integer fy=getFYid(CldId, OrgId, ts, "A");
        currentRow.setAttribute("FyId", fy);
        
        if("N".equals(chkWf)){
                currentRow.setAttribute("WhId","0");
        }else if("Y".equals(chkWf)){
                currentRow.setAttribute("WhId",whIdDef);
        }
        
    }
    
    public String getGeNo(Integer SlocId,String CldId,String OrgId,String WhId,Integer fyId){
       Integer currnec=null;
       if( this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp")!=null)
            currnec = (Integer)this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp"); 
        String geNo =null;
       if( this.getMmMtlGe().getCurrentRow().getAttribute("GeNo")!=null)
       {
           geNo = (String)this.getMmMtlGe().getCurrentRow().getAttribute("GeNo");
       }else{
         geNo =(String)(callStoredFunction(Types.VARCHAR, "mm.FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {SlocId,CldId,OrgId,"MM$MTL$GE",WhId,fyId}));    //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        _log.info("--GE No generated--"+geNo);
        this.getMmMtlGe().getCurrentRow().setAttribute("GeNo", geNo);
       }
        this.getMmMtlGe().getCurrentRow().setAttribute("CurrIdSp",currnec);
        _log.info("At last currency="+ this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp"));
        return geNo;
    }
    
    public Integer getFYid(String CldId,String OrgId,Timestamp geDate,String Mode){
        Integer fyId=0;
        _log.info(Mode+"-FY RETURNED-"+fyId);
        _log.info("currenc="+ this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp"));
        Integer currenc=null;
        if(this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp")!=null)
            currenc = (Integer)this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp");
        if(Mode.equalsIgnoreCase("A")){
            fyId =(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {CldId,OrgId,geDate}));
           // _log.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmMtlGe();
            if(fyId>0){
                _log.info("-FY SET-");
                ge.getCurrentRow().setAttribute("FyId", fyId);
                ge.getCurrentRow().setAttribute("CurrIdSp", currenc);
            }
        }else if(Mode.equalsIgnoreCase("V")){
            fyId=(Integer)this.getMmMtlGe().getCurrentRow().getAttribute("FyId");
            _log.info("In case mode is validation");
        }
        _log.info("currenc="+ this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp"));

        return fyId;
    }
    
    public void getItemsForPopUp(Integer docType,Integer SlocId,String CldId,String OrgId,String HoOrgId,String sourceDocNo) {
        _log.info(SOURCE_DOC_TYPE_PO+"Params--"+docType+"--"+SlocId+"--"+CldId+"--"+sourceDocNo);
        if(docType.equals(SOURCE_DOC_TYPE_PO)){
            _log.info("In PO criteria");
        
            ViewObjectImpl vo = this.getMMDrftPoItm();
                ViewCriteria vc = vo.getViewCriteria("MMDrftPoItmVOCriteria");
                
                  vo.applyViewCriteria(vc);
                  vo.setNamedWhereClauseParam("docIdBind", this.getMmMtlGe().getCurrentRow().getAttribute("TransSourceDocNo").toString());
                  vo.setNamedWhereClauseParam("slocIdBind",SlocId);
                  vo.setNamedWhereClauseParam("cldIdBind", CldId);
                  vo.setNamedWhereClauseParam("orgIdBind", OrgId);
                  vo.executeQuery();
                
        }else if(docType==SOURCE_DOC_TYPE_SO){
            _log.info("---In Sales Order criteria--");
        }else{
            _log.info("---In Others criteria--");
        }
    }
    
    public void resetItemsForPopUp(Integer docType){
      if(docType==SOURCE_DOC_TYPE_PO){
            ViewObjectImpl vo = this.getMMDrftPoItm();
            ViewCriteria vc = vo.getViewCriteria("MMDrftPoItmVOCriteria");
            vo.resetCriteria(vc);
            vo.executeQuery();
      }
    }
    
    public String isPoScheduled(String PoDocId){
      Row[] poRw= this.getLovPoNo().getFilteredRows("DocId", PoDocId);
      if(poRw.length>0){
          Integer type =Integer.parseInt(poRw[0].getAttribute("PoType").toString());
          _log.info("PO TYPE--"+type);
          if(type==172){
              return "Y";
          }else{
              return "N";
          }
      }
        return "N";    
    }
    
    public Integer populateGeItmfromPo(){
        ViewObjectImpl geVo=this.getMmMtlGe();
        ViewObjectImpl gesrc=this.getMmMtlGeSrc();
        ViewObjectImpl itmVo=this.getMmMtlGeItm();
        Row currGe=geVo.getCurrentRow();
        Integer no_of_row=0;
        //Row currItm=itmVo.getCurrentRow();
        //Row currGeSrc=gesrc.getCurrentRow();
        String CldId= currGe.getAttribute("CldId").toString();
        Integer SlocId= (Integer) currGe.getAttribute("SlocId");
        String OrgId=currGe.getAttribute("OrgId").toString();
        _log.info("CurrIdSp="+currGe.getAttribute("CurrIdSp"));
        Integer currency=null;
        if(currGe.getAttribute("CurrIdSp")!=null)
        currency = (Integer)currGe.getAttribute("CurrIdSp");
        Integer shdlNo=1;
        
        String crSrc="N";
        
        if(currGe.getAttribute("TransSchdlNo")!=null)
         shdlNo=(Integer)currGe.getAttribute("TransSchdlNo"); 
        else
             shdlNo=1;
        RowQualifier rq=new RowQualifier(this.getMMDraftPoDlvSchdl());
      /*   if(this.isPoScheduled(currGe.getAttribute("TransSourceDocId").toString()).equals("Y")){         */
        
                rq.setWhereClause("DocId='"+currGe.getAttribute("TransSourceDocId").toString()+"' and DlvSchdlNo="+shdlNo+" and SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"'");
        
        /* }else{
            
                rq.setWhereClause("DocId='"+currGe.getAttribute("TransSourceDocId").toString()+"' and SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"'");
        
        }
        */ 
        Row[] scdlRw=this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        _log.info("No of Rows--"+scdlRw.length);
        no_of_row=scdlRw.length;
        if(scdlRw.length>0){
            
            Row srcRow=gesrc.createRow();
           
                srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_PO);     
                _log.info("TransSourceDocNo in AM: "+currGe.getAttribute("TransSourceDocNo").toString());
                Row[] r= this.getLovPoNo().getFilteredRows("DocId", currGe.getAttribute("TransSourceDocId").toString());
                
                srcRow.setAttribute("TxnIdSrcDisp", r[0].getAttribute("AuthPoNo").toString());   
                srcRow.setAttribute("DocIdSrc", currGe.getAttribute("TransSourceDocId").toString());
                srcRow.setAttribute("DocDtSrc", currGe.getAttribute("TransSourceDocDt"));
                srcRow.setAttribute("DlvSchdlNo",shdlNo);
                gesrc.insertRow(srcRow);
             
                
                
            for(Row curr:scdlRw){
                Row itmRw=itmVo.createRow();
                itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
                itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
                Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                itmRw.setAttribute("ItmUomBs", itms[0].getAttribute("UomBasic").toString());
                //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
                Number fct=getUomConvFctr(currGe.getAttribute("CldId").toString(), Integer.parseInt(currGe.getAttribute("SlocId").toString()), currGe.getAttribute("OrgId").toString(),curr.getAttribute("ItmId").toString(), curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString());
                
                itmRw.setAttribute("UomConvFctr",fct);
                Number bal=new Number(0);
                Number tmp=new Number(0);
                if(curr.getAttribute("BalQty")!=null)
                    bal = (Number)curr.getAttribute("BalQty");
                if(curr.getAttribute("TmpRcptQty")!=null)
                    tmp = (Number)curr.getAttribute("TmpRcptQty");
                itmRw.setAttribute("DlvQty",bal.subtract(tmp));
                itmRw.setAttribute("DlvQtyBs",bal.subtract(tmp).multiply(fct));
                itmRw.setAttribute("PendQty",bal.subtract(tmp));//Schdl(BalQty)-Schdl(TmpRcptQty)
                itmRw.setAttribute("PendQtyBs",(bal.subtract(tmp)).multiply(fct));
                itmRw.setAttribute("RcptQty",bal.subtract(tmp));
                itmRw.setAttribute("RcptQtyBs",bal.subtract(tmp).multiply(fct));
                itmRw.setAttribute("TotRcptQty",bal.subtract(tmp));
                itmRw.setAttribute("TotRcptQtyBs",bal.subtract(tmp).multiply(fct));
                itmRw.setAttribute("ReturnQty",new Number(0));
                itmRw.setAttribute("ReturnQtyBs",new Number(0));
                itmRw.setAttribute("DocIdSrc",currGe.getAttribute("TransSourceDocId").toString());
                itmRw.setAttribute("DocDtSrc",new Timestamp(System.currentTimeMillis()));
                itmVo.insertRow(itmRw);
                updateTxnQty(new Number(0), bal.subtract(tmp));

            }
            currGe.setAttribute("TransSourceDocDt", null);
            currGe.setAttribute("TransSourceDocNo", null);
            currGe.setAttribute("TransSchdlNo", null);  
            currGe.setAttribute("CurrIdSp",currency);
            
        }
        gesrc.executeQuery();
        itmVo.executeQuery();
        
        return no_of_row;
    }

   /**
    *  Check if items received are configured for this Warehouse or not.
    *  @return "Y" - Valid
    *          "N" - Invalid
    * */
    public String isPoWarehouseCompatible(){
        
        ViewObjectImpl geVo=this.getMmMtlGe();
        Row currGe=geVo.getCurrentRow();
        
        //Row currItm=itmVo.getCurrentRow();
        //Row currGeSrc=gesrc.getCurrentRow();
        String CldId= currGe.getAttribute("CldId").toString();
        Integer SlocId= (Integer) currGe.getAttribute("SlocId");
        String OrgId=currGe.getAttribute("OrgId").toString();
        String whId=currGe.getAttribute("WhId").toString();
        Integer shdlNo=1;
        if(currGe.getAttribute("TransSchdlNo")!=null){
        shdlNo=  Integer.parseInt(currGe.getAttribute("TransSchdlNo").toString());
        
        }else{
            shdlNo=1;
        }
            //Integer.parseInt(currGe.getAttribute("TransSchdlNo").toString());
        
        RowQualifier rq=new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("DocId='"+currGe.getAttribute("TransSourceDocId").toString()+"' and DlvSchdlNo="+shdlNo+" and SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"'");
        Row[] scdlRw=this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        
        if(scdlRw.length>0){
            String dlvWh=scdlRw[0].getAttribute("WhId").toString();
            if(dlvWh.equalsIgnoreCase(whId)){
                return "Y";
            }else{
                return "N";
            }
        }else{
            return "N";
        }
    }
            
            
             public String chkItmTrfQty()
             {
                     ViewObjectImpl geVo=this.getMmMtlGe();
                     Row currGe=geVo.getCurrentRow();
                     String CldId= currGe.getAttribute("CldId").toString();
                     Integer SlocId= (Integer) currGe.getAttribute("SlocId");
                     //String DocId=currGe.getAttribute("DocId").toString();
                     RowQualifier rq=new RowQualifier(this.getViewMMTrfOrdItm());  
                     rq.setWhereClause("DocId='"+currGe.getAttribute("TransSourceDocId").toString()+"' and SlocId="+SlocId+" and CldId='"+CldId+"' and TrfQty>0");
                     Row[] trfItmRw=this.getViewMMTrfOrdItm().getFilteredRows(rq);
                     if(trfItmRw.length>0)
                         return "Y";
                     else
                         return "N";
                 }
    public void LinkItemtoOrganisation(String CldId,Integer SlocId,String OrgId,String HoOrgId,Integer UsrId)
    {
       Row r= this.getMmMtlGe().getCurrentRow();
       if(r.getAttribute("TransSourceDocId")!=null)
       {
           _log.info("Param=>"+CldId+" "+SlocId+" "+HoOrgId+" "+OrgId+" "+r.getAttribute("TransSourceDocId")+" ");
            Integer ret=(Integer)(callStoredFunction(Types.INTEGER, "MM.MM_INS_ITM_ORG_TRF(?,?,?,?,?,?)", new Object[] {CldId,SlocId,HoOrgId,OrgId,r.getAttribute("TransSourceDocId"),UsrId}));
            this.getLovItmId().executeQuery();
       }
        }
             
             
     public void populateGeItmfromTrfOrd(){
         ViewObjectImpl geVo=this.getMmMtlGe();
         ViewObjectImpl gesrc=this.getMmMtlGeSrc();
         ViewObjectImpl itmVo=this.getMmMtlGeItm();
         
         Row currGe=geVo.getCurrentRow();
         String CldId= currGe.getAttribute("CldId").toString();
         Integer SlocId= (Integer) currGe.getAttribute("SlocId");
         String OrgId=currGe.getAttribute("OrgId").toString();
         String DocId=currGe.getAttribute("DocId").toString();
         
         Row srcRow=gesrc.createRow();
         srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_TRFO);

         Row[] r = this.getLovTransferOrder().getFilteredRows("DocId", currGe.getAttribute("TransSourceDocId").toString());
         srcRow.setAttribute("TxnIdSrcDisp", r[0].getAttribute("TrfNo").toString());   
       
         srcRow.setAttribute("DocIdSrc", currGe.getAttribute("TransSourceDocId").toString());
         srcRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
         //srcRow.setAttribute("DocDtSrc", currGe.getAttribute("TransSourceDocDt"));
         srcRow.setAttribute("DlvSchdlNo", new Integer(0));
         gesrc.insertRow(srcRow);  
         gesrc.executeQuery();
        
      
         RowQualifier rq=new RowQualifier(this.getViewMMTrfOrdItm());  
         rq.setWhereClause("DocId='"+currGe.getAttribute("TransSourceDocId").toString()+"' and SlocId="+SlocId+" and CldId='"+CldId+"'");
         Row[] trfItmRw=this.getViewMMTrfOrdItm().getFilteredRows(rq);
         
         _log.info("No of Rows--"+trfItmRw.length);
        
         if(trfItmRw.length>0){
             for(Row curr:trfItmRw){
                 Row itmRw=itmVo.createRow();
                 itmRw.setAttribute("DocId", DocId);
                 itmRw.setAttribute("DocIdSrc",currGe.getAttribute("TransSourceDocId").toString());
                 _log.info("DocIdSrc For Item="+currGe.getAttribute("TransSourceDocId"));
                itmRw.setAttribute("DocDtSrc",new Timestamp(System.currentTimeMillis()));
                 itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
                 _log.info("ItmUom="+curr.getAttribute("ItmUom"));
                 itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
                 Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                 itmRw.setAttribute("ItmUomBs", itms[0].getAttribute("UomBasic").toString());
                 Number fct=getUomConvFctr(currGe.getAttribute("CldId").toString(), Integer.parseInt(currGe.getAttribute("SlocId").toString()), currGe.getAttribute("OrgId").toString(),curr.getAttribute("ItmId").toString(), curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString());  
                 itmRw.setAttribute("UomConvFctr",fct);
                 itmRw.setAttribute("PendQty",(Number)curr.getAttribute("TrfQty"));
                 itmRw.setAttribute("PendQtyBs",(Number)curr.getAttribute("TrfQtyBs"));
                 itmRw.setAttribute("RcptQty",(Number)curr.getAttribute("TrfQty"));
                 itmRw.setAttribute("RcptQtyBs",(Number)curr.getAttribute("TrfQtyBs"));
                 itmRw.setAttribute("TotRcptQty",(Number)curr.getAttribute("TrfQty"));
                 itmRw.setAttribute("TotRcptQtyBs",(Number)curr.getAttribute("TrfQtyBs"));
                 itmRw.setAttribute("ReturnQty",new Number(0));
                 itmRw.setAttribute("ReturnQtyBs",new Number(0));
                 itmRw.setAttribute("DlvQty",curr.getAttribute("TrfQty"));
                 itmRw.setAttribute("DlvQtyBs",curr.getAttribute("TrfQtyBs"));

                 Number totTrfQty=new Number(0);
                 if(curr.getAttribute("TotTrfQty")!=null)
                     totTrfQty = (Number)curr.getAttribute("TotTrfQty");
                 Number totTrfQtyBs=new Number(0);
                 if(curr.getAttribute("TotTrfQtyBs")!=null)
                     totTrfQtyBs = (Number)curr.getAttribute("TotTrfQtyBs");
        
                 Number TrfQty=new Number(0);
                 if(curr.getAttribute("TrfQty")!=null)
                     TrfQty = (Number)curr.getAttribute("TrfQty");
                 Number TrfQtyBs=new Number(0);
                 if(curr.getAttribute("TrfQtyBs")!=null)
                     TrfQtyBs = (Number)curr.getAttribute("TrfQtyBs");
                 
                 curr.setAttribute("TrfQty",new Number(0));
                 curr.setAttribute("TrfQtyBs",new Number(0));
                 curr.setAttribute("TotTrfQty",totTrfQty.add(TrfQty));
                 curr.setAttribute("TotTrfQtyBs",totTrfQty.add(TrfQtyBs));
                 itmVo.insertRow(itmRw);
             }
         }
         currGe.setAttribute("TransSourceDocId",null);
         currGe.setAttribute("TransSourceDocDt",null);
         getMmMtlGeItm().executeQuery();
         getMmMtlGeItm1().executeQuery();
     }
    
    /**
     *  Method used to check if the PO selected is currency compatible to the previously assigned PO
     *  for the current GE.
     *  @return - Y : Valid
     *            N : Invalid (cannot be selected)
     * */
    public String checkCurrCompatibility(String OrgId,String CldId,Integer SlocId,String PoDocId){
        Integer count=this.getMmMtlGeSrc().getRowCount();
        Row currRc=this.getMmMtlGe().getCurrentRow();
        
        String rcptSrcDoc=currRc.getAttribute("TransSourceDocId").toString();
        _log.info("Count in curr compat-"+count);
        if(count.compareTo(new Integer(1))>=0){
            Row rw=this.getMmMtlGeSrc().first();    
            
            String docId=rw.getAttribute("DocIdSrc").toString(); // docId in table 
            Row[] filRw=this.getLovPoNo().getFilteredRows("DocId", docId); //old selected
          
            Row[] poFilRw=this.getLovPoNo().getFilteredRows("DocId", rcptSrcDoc); //new selected
            _log.info(docId+"Rows--"+filRw.length+"--"+poFilRw.length+"--"+PoDocId);
            if(filRw.length>0){
                Integer curr=Integer.parseInt(filRw[0].getAttribute("CurrIdSp").toString());
                
                Integer currPo=Integer.parseInt(poFilRw[0].getAttribute("CurrIdSp").toString());
                _log.info("Currency--"+curr+"--Currency Bs-"+currPo);
                    if(curr.equals(currPo)){
                        return "Y";
                    }else{
                        return "N";
                    }
            }else{
                return "Y";
            }
        }else{
            return "Y";
        }
    /*     RowQualifier rq=new RowQualifier(this.getLovPoNo());
        
        
        rq.setWhereClause("SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"' and ");
        Row[] filRw=this.getLovPoNo().getFilteredRows(rq); */
       
    }
    
    
    public Number getUomConvFctr(String CldId,Integer SlocId,String OrgId,String ItmId,String UomSrc,String UomDst){
      
        Number zero=new Number(0);
        Number fctr=zero;
        try{
        BigDecimal uomConv =(BigDecimal)(callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR (?,?,?,?,?,?)", new Object[] {SlocId,CldId,OrgId,ItmId,UomSrc,UomDst}));    //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
      
        
        
          try {
                    fctr = new Number(uomConv);
              } catch (SQLException e) {
                }
          }catch(Exception e){
            _log.info("Conversion factor not defined"+UomSrc+"--"+UomDst);
          }     
        return fctr;
    }
    
    /**
     * Container's getter for MMDrftPoItm.
     * @return MMDrftPoItm
     */
    public ViewObjectImpl getMMDrftPoItm() {
        return (ViewObjectImpl)findViewObject("MMDrftPoItm");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl)findViewObject("LovItmId");
    }

    /**
     * Container's getter for LovPoNo.
     * @return LovPoNo
     */
    public ViewObjectImpl getLovPoNo() {
        return (ViewObjectImpl)findViewObject("LovPoNo");
    }

    /**
     * Container's getter for GeSearch.
     * @return GeSearch
     */
    public ViewObjectImpl getGeSearch() {
        return (ViewObjectImpl)findViewObject("GeSearch");
    }

    /**
     * Container's getter for LovSupplier.
     * @return LovSupplier
     */
    public ViewObjectImpl getLovSupplier() {
        return (ViewObjectImpl)findViewObject("LovSupplier");
    }

    /**
     * Container's getter for LovRcptSrcTyp.
     * @return LovRcptSrcTyp
     */
    public ViewObjectImpl getLovRcptSrcTyp() {
        return (ViewObjectImpl)findViewObject("LovRcptSrcTyp");
    }

    /**
     * Container's getter for LovTransporter.
     * @return LovTransporter
     */
    public ViewObjectImpl getLovTransporter() {
        return (ViewObjectImpl)findViewObject("LovTransporter");
    }
    
    public void getGeRecordForEdit(String CldId,Integer SlocId,String OrgId,String TxnId){
        String TxnIdSrc=this.getGeSearch().getCurrentRow().getAttribute("DocId").toString();
        String whId=this.getGeSearch().getCurrentRow().getAttribute("WhId").toString();
        System.out.println(TxnId+"--TXN----"+whId+"-wh-"+CldId+"-cld-"+SlocId+"-sloc-"+OrgId+"-org-");
        ViewObjectImpl vo = this.getMmMtlGe();
            ViewCriteria vc = vo.getViewCriteria("MmMtlGeVOCriteriaForView");
              vo.applyViewCriteria(vc);
              vo.setNamedWhereClauseParam("cldIdVar", CldId);
              vo.setNamedWhereClauseParam("SlocIdVar",SlocId);
              vo.setNamedWhereClauseParam("OrgIdVar", OrgId);
              vo.setNamedWhereClauseParam("txnIdVar", TxnIdSrc);
              vo.setNamedWhereClauseParam("whIdVar", whId);
              vo.executeQuery();
        
    }
    
    public String checkForDuplicateDocNo(String CldId,Integer SlocId,String OrgId,String SrcDocNo){
        Row geRw=this.getMmMtlGe().getCurrentRow();
        RowQualifier rq = new RowQualifier(this.getMmMtlGeSrc());
        Integer docSrcType = (Integer)geRw.getAttribute("TransSourceDocType");
        Integer scdlno=(Integer)geRw.getAttribute("TransSchdlNo");
        if(scdlno==null && docSrcType==266){
            scdlno=1;
        }
        else if(scdlno==null && docSrcType!=266)
        {
                scdlno=0; 
            }
        rq.setWhereClause("CldId='" + CldId + "' and SlocId="+SlocId+" and OrgId='" + OrgId + "' and DocId='" + geRw.getAttribute("DocId").toString() +
                          "' and DocIdSrc='"+geRw.getAttribute("TransSourceDocId").toString()+"' and  DlvSchdlNo="+scdlno); 
/*         rq.setWhereClause("CldId='" + CldId + "' and SlocId="+SlocId+" and OrgId='" + OrgId  +
                          "' and DocIdSrc='"+geRw.getAttribute("TransSourceDocId").toString()+"' and  DlvSchdlNo="+scdlno); */
        Row[] geSrcRw=this.getMmMtlGeSrc().getFilteredRows(rq);
        _log.info("no. of Same Rows="+geSrcRw.length);
        if(geSrcRw.length>0){
            return "Y";
        }else{
            return "N";
        }
    }

    /**
     * Container's getter for LovWarehouse.
     * @return LovWarehouse
     */
    public ViewObjectImpl getLovWarehouse() {
        return (ViewObjectImpl)findViewObject("LovWarehouse");
    }

    /**
     * Container's getter for ViewDummyForSearch.
     * @return ViewDummyForSearch
     */
    public ViewObjectImpl getViewDummyForSearch() {
        return (ViewObjectImpl)findViewObject("ViewDummyForSearch");
    }
    public void setNullforAll()
    {
            this.getMmMtlGe().getCurrentRow().setAttribute("TransItmName",null);
            this.getMmMtlGe().getCurrentRow().setAttribute("TransUomName",null);
            this.getMmMtlGe().getCurrentRow().setAttribute("TransItmQty",null);   
        }
    
    public void generateTempDocId(Integer UsrId,String CldId,Integer SlocId,String OrgId,String WhId,Integer DocTypeSrc){
         
       // String txnId =(String)(callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?)", new Object[] {UsrId,OrgId,SlocId,new Integer(18511),CldId}));    //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
     //   System.out.println("--TxnId new created--"+txnId);
        String gedocid=this.getMmMtlGe().getCurrentRow().getAttribute("DocId").toString();
        Integer fyId=Integer.parseInt(this.getMmMtlGe().getCurrentRow().getAttribute("FyId").toString());
        String tableName=null;
        if(DocTypeSrc.equals(SOURCE_DOC_TYPE_WPO))
            tableName="MM$MTL$RCPT$SRC";
        else if(DocTypeSrc.equals(SOURCE_DOC_TYPE_WSO))
            tableName="MM$MTL$RCPT$SRC_SO";
        String tnpNoDisp =(String)(callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {SlocId,CldId,OrgId,tableName,WhId,fyId}));    //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        _log.info("Temp Doc Id--"+tnpNoDisp);
        Row cR=this.getMmMtlGeSrc().createRow();
            cR.setAttribute("DocIdSrc",tnpNoDisp);
            cR.setAttribute("WhId", WhId);
            cR.setAttribute("CldId", CldId);
            cR.setAttribute("OrgId", OrgId);
            cR.setAttribute("DocId", gedocid);
            cR.setAttribute("DocTypeSrc",DocTypeSrc);
            cR.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
            cR.setAttribute("DlvSchdlNo",0);
            cR.setAttribute("TxnIdSrcDisp", tnpNoDisp);
        this.getMmMtlGeSrc().insertRow(cR);
        
       // String tnpNoDisp =(String)(callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {SlocId,CldId,OrgId,"MM$MTL$RCPT$SRC",WhId,fyId}));    //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        
        this.getMmMtlGeSrc().executeQuery();
        
    }
    
    public void addItemToGe(String ItmName,String ItmUom,Number ItmQty){
        Row cR=this.getMmMtlGeItm().createRow();
        Row rwSrc=this.getMmMtlGeSrc().getCurrentRow();
        Row geR=this.getMmMtlGe().getCurrentRow();
        Row[] rw= this.getLovItmId().getFilteredRows("ItmDesc", ItmName);
        if(rw.length>0){
            cR.setAttribute("ItmId", rw[0].getAttribute("ItmId").toString());
            cR.setAttribute("ItmUom", ItmUom);
            cR.setAttribute("DlvQty", new Number(0));
            cR.setAttribute("PendQty", new Number(0));
            cR.setAttribute("RcptQty", ItmQty);
            cR.setAttribute("TotRcptQty", ItmQty);
            cR.setAttribute("ReturnQty", new Number(0));
            cR.setAttribute("DocDtSrc",rwSrc.getAttribute("DocDtSrc"));     
            cR.setAttribute("ItmUomBs", rw[0].getAttribute("UomBasic").toString());
            Number fct=getUomConvFctr(rwSrc.getAttribute("CldId").toString(), Integer.parseInt(rwSrc.getAttribute("SlocId").toString()), rwSrc.getAttribute("OrgId").toString(),rw[0].getAttribute("ItmId").toString(),ItmUom, rw[0].getAttribute("UomBasic").toString());
            cR.setAttribute("UomConvFctr",fct); 
            cR.setAttribute("RcptQtyBs",ItmQty.multiply(fct));
            cR.setAttribute("DlvQtyBs", new Number(0));
            cR.setAttribute("PendQtyBs", new Number(0));
            cR.setAttribute("TotRcptQtyBs", ItmQty.multiply(fct));
            cR.setAttribute("ReturnQtyBs", new Number(0));
        }    
        this.getMmMtlGeItm().insertRow(cR);
        this.getMmMtlGeItm().executeQuery();
        
    }

    /**
     * Container's getter for LovTransferOrder.
     * @return LovTransferOrder
     */
    public ViewObjectImpl getLovTransferOrder() {
        return (ViewObjectImpl)findViewObject("LovTransferOrder");
    }


    /**
     * Container's getter for ViewMMTrfOrdItm.
     * @return ViewMMTrfOrdItm
     */
    public ViewObjectImpl getViewMMTrfOrdItm() {
        return (ViewObjectImpl)findViewObject("ViewMMTrfOrdItm");
    }
    
    public void deleteDocument(){
        Row srcRw=this.getMmMtlGeSrc().getCurrentRow();
        String docNo=srcRw.getAttribute("DocIdSrc").toString();
        int count=this.getMmMtlGeItm().getRowCount();
        _log.info("Delete docNo=="+docNo+"==No of child rows--"+count);
        //remove all children
        RowSetIterator rsi=this.getMmMtlGeItm().createRowSetIterator(null);
        
        while(rsi.hasNext()){
            Row currItm=rsi.next();
            //before remove->
            //1.if document is Trf then Add RcptQty of GE to Trf Qty of TrfOrd
            //2.if document is PO then substract RcptQty of GE from TmpRcptQty of POdlvScdl
           if(((Integer)srcRw.getAttribute("DocTypeSrc")).equals(SOURCE_DOC_TYPE_PO)) 
          {
              Row curr=currItm;
              //first substract old qty from tmp qty AND Add new qty to tmp qty
              RowQualifier rq=new RowQualifier(this.getMMDraftPoDlvSchdl());
              rq.setWhereClause("CldId='"+curr.getAttribute("CldId")+"' and SlocId="+curr.getAttribute("SlocId")+" and OrgId='"+curr.getAttribute("OrgId")+"' and DocId='"+curr.getAttribute("DocIdSrc")+"' and ItmId='"+curr.getAttribute("ItmId")+"' and WhId='"+curr.getAttribute("WhId")+"' and ItmUom='"+curr.getAttribute("ItmUom")+"' and DlvSchdlNo="+curr.getAttribute("DlvSchdlNo"));
              _log.info("Query="+rq.getExprStr());
              Row dsRow[]=this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
              _log.info("No. of filtered Rows="+dsRow.length);
              if(dsRow.length>0)
              {
                      Number tmpQty=new Number(0);
                  if(dsRow[0].getAttribute("TmpRcptQty")!=null)
                      tmpQty = (Number)dsRow[0].getAttribute("TmpRcptQty");
                      Number rcptQty=new Number(0);
                      if(curr.getAttribute("RcptQty")!=null)
                          rcptQty = (Number)curr.getAttribute("RcptQty");
                     // dsRow[0].setAttribute("TmpRcptQty", tmpQty.subtract(oldQty));
                     dsRow[0].setAttribute("TmpRcptQty", (tmpQty.subtract(rcptQty))); 
              }
          }
            else if(((Integer)srcRw.getAttribute("DocTypeSrc")).equals(SOURCE_DOC_TYPE_TRFO))
            {
                Row curr=currItm;
                RowQualifier rq=new RowQualifier(this.getViewMMTrfOrdItm());  
                rq.setWhereClause("DocId='"+curr.getAttribute("DocIdSrc")+"' and SlocId="+curr.getAttribute("SlocId")+" and CldId='"+curr.getAttribute("CldId")+"' and ItmId='"+curr.getAttribute("ItmId")+"' and ItmUom='"+curr.getAttribute("ItmUom")+"'");
                Row[] trfItmRw=this.getViewMMTrfOrdItm().getFilteredRows(rq);
                Number totTrfQty=new Number(0);
                if(trfItmRw[0].getAttribute("TotTrfQty")!=null)
                    totTrfQty = (Number)trfItmRw[0].getAttribute("TotTrfQty");
                Number totTrfQtyBs=new Number(0);
                if(trfItmRw[0].getAttribute("TotTrfQtyBs")!=null)
                    totTrfQtyBs = (Number)trfItmRw[0].getAttribute("TotTrfQtyBs");
                Number TrfQty=new Number(0);
                if(trfItmRw[0].getAttribute("TrfQty")!=null)
                    TrfQty = (Number)trfItmRw[0].getAttribute("TrfQty");
                Number TrfQtyBs=new Number(0);
                if(trfItmRw[0].getAttribute("TrfQtyBs")!=null)
                    TrfQtyBs = (Number)trfItmRw[0].getAttribute("TrfQtyBs");
                Number rcptQty=new Number(0);
                if(curr.getAttribute("RcptQty")!=null)
                    rcptQty = (Number)curr.getAttribute("RcptQty"); 
                Number rcptQtyBs=new Number(0);
                if(curr.getAttribute("RcptQtyBs")!=null)
                    rcptQtyBs = (Number)curr.getAttribute("RcptQtyBs"); 
                trfItmRw[0].setAttribute("TrfQty",rcptQty.add(TrfQty));
                trfItmRw[0].setAttribute("TrfQtyBs",rcptQtyBs.add(TrfQtyBs));
                trfItmRw[0].setAttribute("TotTrfQty",totTrfQty.subtract(rcptQty));
                trfItmRw[0].setAttribute("TotTrfQtyBs",totTrfQtyBs.subtract(rcptQtyBs));
            }
            currItm.remove();
        }
        rsi.closeRowSetIterator();
        //remove parent
        srcRw.remove();        
        
        this.getMmMtlGeItm().executeQuery();
        this.getMmMtlGeSrc().executeQuery();
        _log.info("Delete docNo=="+docNo+"==No of child rows--"+count);
    }
    
    public HashSet checkForRcvdQtyPresent(String CldId,Integer slocId,String OrgId,String whId){
        Row curGe=this.getMmMtlGe().getCurrentRow();
        Integer docType=(Integer)curGe.getAttribute("TransSourceDocType");
        if(whId==null){
            whId="0";
        }
        
        String  docId=curGe.getAttribute("DocId").toString();
        RowQualifier rq=new RowQualifier(this.getMmMtlGeItm1());
        rq.setWhereClause("CldId='"+CldId+"' and SlocId="+slocId+" and OrgId='"+OrgId+"' and WhId='"+whId+"' and DocId='"+docId+"'");
        Row[] filRw=this.getMmMtlGeItm1().getFilteredRows(rq);
        Number zero=new Number(0);
        HashSet<String> h=new HashSet<String>();
        for(Row rw:filRw){
            Number rcptQty=(Number)rw.getAttribute("RcptQty"); 
            Number retQty=(Number)rw.getAttribute("ReturnQty");
            if(rcptQty.compareTo(zero)==0 && retQty.compareTo(zero)==0){
                
                if(docType.compareTo(new Integer(266))==0){
                   Row[] r= this.getLovPoNo().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                   if(r.length>0){
                       h.add(r[0].getAttribute("AuthPoNo").toString());
                   }
                }else if(docType.compareTo(new Integer(270))==0){
                    Row[] r= this.getLovTransferOrder().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    if(r.length>0){
                        h.add(r[0].getAttribute("TrfNo").toString());
                    }
                }else if(docType.compareTo(new Integer(370))==0){
                    h.add(rw.getAttribute("DocIdSrc").toString());
                }
             
            
              //h.add(rw.getAttribute("DocIdSrc").toString());
            }
        }
       _log.info("HashSet--"+h);
        return h;
    }


    public void deleteItemsNonRecvd(String CldId,Integer slocId,String OrgId,String whId){
        Row curRcpt=this.getMmMtlGe().getCurrentRow();
        String  docId=curRcpt.getAttribute("DocId").toString();
        RowQualifier rq=new RowQualifier(this.getMmMtlGeItm1());
        rq.setWhereClause("CldId='"+CldId+"' and SlocId="+slocId+" and OrgId='"+OrgId+"' and WhId='"+whId+"' and DocId='"+docId+"'");
        Row[] filRw=this.getMmMtlGeItm1().getFilteredRows(rq);
        Number zero=new Number(0);
        for(Row rw:filRw){
            Number rcptQty=(Number)rw.getAttribute("RcptQty"); 
            if(rcptQty.compareTo(zero)==0){
                rw.remove();
                _log.info("Row Deleted");
            }
        }
        
        this.getMmMtlGeItm1().executeQuery();
        this.getMmMtlGeItm().executeQuery();
        Row[] srcRw=this.getMmMtlGeSrc().getAllRowsInRange();
        for(Row srw:srcRw){
            RowQualifier rrq=new RowQualifier(this.getMmMtlGeItm1());
            rrq.setWhereClause("CldId='"+CldId+"' and SlocId="+slocId+" and OrgId='"+OrgId+"' and WhId='"+whId+"' and DocId='"+docId+"' and DocIdSrc='"+srw.getAttribute("DocIdSrc").toString()+"'");
            Row[] itmRw=this.getMmMtlGeItm1().getFilteredRows(rrq); 
            if(itmRw.length==0){
                srw.remove();
            }
        }
        this.getMmMtlGeSrc().executeQuery();
    }
    
    /**
     * Container's getter for MmMtlGeItm1.
     * @return MmMtlGeItm1
     */
    public MmMtlGeItmVOImpl getMmMtlGeItm1() {
        return (MmMtlGeItmVOImpl)findViewObject("MmMtlGeItm1");
    }
    
    public String checkItmDuplicate(String itmNm,String uomId){
        Row srcRw=this.getMmMtlGeSrc().getCurrentRow();
        Integer type=Integer.parseInt(this.getMmMtlGe().getCurrentRow().getAttribute("TransSourceDocType").toString());
        String chk="N";
        _log.info("Rcpt TYpe:"+type);
        
      if(type.equals(SOURCE_DOC_TYPE_WPO) || type.equals(SOURCE_DOC_TYPE_WSO)){ // WIthout PO
        if(srcRw!=null){
            String docIdsrc=srcRw.getAttribute("DocIdSrc").toString();
            RowQualifier rq=new RowQualifier(this.getMmMtlGeItm());
            
            Row[] itms=this.getLovItmId().getFilteredRows("ItmDesc", itmNm);
            
            _log.info("NO.OF ITEMS : "+itms.length);
            rq.setWhereClause("DocIdSrc='"+docIdsrc+"' and DlvSchdlNo=0 and ItmId='"+itms[0].getAttribute("ItmId")+"' and  ItmUom='"+uomId+"'");
            Row[] filRw= this.getMmMtlGeItm().getFilteredRows(rq);
            if(filRw.length>0){
                 return "Y";
            }else{
                 return "N";
            }
        }else{
            return "N";
        }
      }else{
          _log.info("Others itm Dup check");
          return "N";
      }
    }
    /**
     * Check if any document has been added to this GE
     * @return 'Y'-Valid 
     *         'N'-Invalid(Empty)
     * */
    public String isDocumentPresent(){
        Integer count=this.getMmMtlGeSrc().getRowCount();
        if(count.compareTo(0)==1){
            return "Y";
        }else{
            return "N";
        }
    }

    /**
     * Container's getter for ViewMMPrf.
     * @return ViewMMPrf
     */
    public ViewObjectImpl getViewMMPrf() {
        return (ViewObjectImpl)findViewObject("ViewMMPrf");
    }
    
    
    public void setStatusforGe(String stat){
        Row cur=this.getMmMtlGe().getCurrentRow();
        if(stat.equals("Y")){
            if(cur!=null){
                cur.setAttribute("GeStatus", 298);
               // this.getMmMtlGe().executeQuery();
            }
        }else if(stat.equals("N")){
            if(cur!=null){
                cur.setAttribute("GeStatus", 297);
             //   this.getMmMtlGe().executeQuery();
            }
        }else if(stat.equals("R")){
            if(cur!=null){
                cur.setAttribute("GeStatus", 299);
            }
        }
       
    }
    
    public void returnGe(String Flg){
        if("Y".equals(Flg)){
            
           
            
            
            Row currGe=this.getMmMtlGe().getCurrentRow();
            String docId=currGe.getAttribute("DocId").toString();
            Row[] filRw=this.getMmMtlGeItm1().getFilteredRows("DocId", docId);
            for(Row rw:filRw){
                
                
                //--------------------------------
                //first substract old qty from tmp qty AND Add new qty to tmp qty
                if(((Integer)currGe.getAttribute("TransSourceDocType")).equals(SOURCE_DOC_TYPE_PO)) 
                {
                   Row curr=rw;
                   RowQualifier rq=new RowQualifier(this.getMMDraftPoDlvSchdl());
                   rq.setWhereClause("CldId='"+curr.getAttribute("CldId")+"' and SlocId="+curr.getAttribute("SlocId")+" and OrgId='"+curr.getAttribute("OrgId")+"' and DocId='"+curr.getAttribute("DocIdSrc")+"' and ItmId='"+curr.getAttribute("ItmId")+"' and WhId='"+curr.getAttribute("WhId")+"' and ItmUom='"+curr.getAttribute("ItmUom")+"' and DlvSchdlNo="+curr.getAttribute("DlvSchdlNo"));
                   Row dsRow[]=this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
                   if(dsRow.length>0)
                   {
                           Number tmpQty=new Number(0);
                       if(dsRow[0].getAttribute("TmpRcptQty")!=null)
                           tmpQty = (Number)dsRow[0].getAttribute("TmpRcptQty");
                           Number rcptQty=new Number(0);
                           if(curr.getAttribute("RcptQty")!=null)
                               rcptQty = (Number)curr.getAttribute("RcptQty");
                          dsRow[0].setAttribute("TmpRcptQty", (tmpQty.subtract(rcptQty))); 
                   }
                }
                
                //-------------------------------
                
                Number dlvqty=(Number)rw.getAttribute("DlvQty");
                _log.info("DElivry qty="+dlvqty);
                Number uomfctr=(Number)rw.getAttribute("UomConvFctr");
                if(dlvqty==null){
                    dlvqty=new Number(0);
                }
                if(uomfctr==null){
                    uomfctr=new Number(1);
                }
                rw.setAttribute("TotRcptQty", new Number(0));
                rw.setAttribute("TotRcptQtyBs", new Number(0));
                rw.setAttribute("RcptQtyBs", new Number(0));
                rw.setAttribute("RcptQty", new Number(0));
                rw.setAttribute("ReturnQtyBs", dlvqty.multiply(uomfctr));
                rw.setAttribute("ReturnQty", dlvqty);
                
            }
            this.getMmMtlGeItm1().executeQuery();
            this.getMmMtlGeItm().executeQuery();
        }else if("N".equals(Flg)){
                 
            Row currGe=this.getMmMtlGe().getCurrentRow();
            String docId=currGe.getAttribute("DocId").toString();
            Row[] filRw=this.getMmMtlGeItm1().getFilteredRows("DocId", docId);
            for(Row rw:filRw){
                Number dlvqty=(Number)rw.getAttribute("DlvQty");
                Number uomfctr=(Number)rw.getAttribute("UomConvFctr");
                
                if(dlvqty==null){
                    dlvqty=new Number(0);
                }
                if(uomfctr==null){
                    uomfctr=new Number(1);
                }
                rw.setAttribute("TotRcptQty", dlvqty);
                rw.setAttribute("TotRcptQtyBs", dlvqty.multiply(uomfctr));
                rw.setAttribute("RcptQty", dlvqty);
                rw.setAttribute("RcptQtyBs", dlvqty.multiply(uomfctr));
                rw.setAttribute("ReturnQty", new Number(0));
                rw.setAttribute("ReturnQtyBs",new Number(0));
                
                
                //-------------------------------
                if(((Integer)currGe.getAttribute("TransSourceDocType")).equals(SOURCE_DOC_TYPE_PO)) 
                {
               
                //first substract old qty from tmp qty AND Add new qty to tmp qty
                RowQualifier rq=new RowQualifier(this.getMMDraftPoDlvSchdl());
                rq.setWhereClause("CldId='"+rw.getAttribute("CldId")+"' and SlocId="+rw.getAttribute("SlocId")+" and OrgId='"+rw.getAttribute("OrgId")+"' and DocId='"+rw.getAttribute("DocIdSrc")+"' and ItmId='"+rw.getAttribute("ItmId")+"' and WhId='"+rw.getAttribute("WhId")+"' and ItmUom='"+rw.getAttribute("ItmUom")+"' and DlvSchdlNo="+rw.getAttribute("DlvSchdlNo"));
                Row dsRow[]=this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
                if(dsRow.length>0)
                {
                        Number tmpQty=new Number(0);
                    if(dsRow[0].getAttribute("TmpRcptQty")!=null)
                        tmpQty = (Number)dsRow[0].getAttribute("TmpRcptQty");
                       dsRow[0].setAttribute("TmpRcptQty", (tmpQty.add(dlvqty))); 
                }
                
                        
                } 
                //-------------------------------  
            }
            
            this.getMmMtlGeItm1().executeQuery();
            this.getMmMtlGeItm().executeQuery();
        }
    }
    
    /**
    * To check if Doc is being created in open financial year or not.
    * @return
    */

    public boolean isFYOpenForCurrentDate(String cldId,String orgId,Timestamp dt) {
        StringBuffer ck = new StringBuffer("A");
        Integer fyId = 0;
        try {
            //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
            fyId =(Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {cldId,orgId,dt });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        
        if(fyId == -1){
            return false;
        }else{
            
            try {
                //FUNCTION CHK_ORG_FY_STAT(P_ORG_ID VARCHAR2, P_FY_ID NUMBER, P_FY_TYP VARCHAR2 DEFAULT 'FY',P_BC_FLG VARCHAR2 DEFAULT 'Y')
                ck = new StringBuffer(callStoredFunction(Types.VARCHAR, "APP.PKG_APP.CHK_ORG_FY_STAT(?,?,?,?)", new Object[] { orgId, fyId, "FY" , "Y"}).toString());
                
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.CHK_ORG_FY_STAT' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
            
        }
        System.out.println("FY IS "+fyId+" FY OPEN/CLOSE CHECK :"+ck);
        if(ck.toString().equals("N")){
            return true;
        }else{
            return false;
        }
        
    }


    /**
     * Container's getter for LovUomVw.
     * @return LovUomVw
     */
    public ViewObjectImpl getLovUomVw() {
        return (ViewObjectImpl)findViewObject("LovUomVw");
    }

    /**
     * Container's getter for LovTrfWhVw.
     * @return LovTrfWhVw
     */
    public ViewObjectImpl getLovTrfWhVw() {
        return (ViewObjectImpl)findViewObject("LovTrfWhVw");
    }

    /**
     * Container's getter for LovTrfWhVw1.
     * @return LovTrfWhVw1
     */
    public ViewObjectImpl getLovTrfWhVw1() {
        return (ViewObjectImpl)findViewObject("LovTrfWhVw1");
    }
    
    /**
     * to Check All Quantity is Returned or not
     */
    public String checkRetQty()
    {
        String chk="N";
            Row currGe=this.getMmMtlGe().getCurrentRow();
            String docId=currGe.getAttribute("DocId").toString();
            Row[] filRw=this.getMmMtlGeItm1().getFilteredRows("DocId", docId);
            for(Row rw:filRw){
                           Number dlvqty=(Number)rw.getAttribute("DlvQty");
                           Number uomfctr=(Number)rw.getAttribute("UomConvFctr");
                           if(dlvqty==null){
                               dlvqty=new Number(0);
                           }
                           if(uomfctr==null){
                               uomfctr=new Number(0);
                           }
                Number tot=dlvqty.multiply(uomfctr);
                Number rcpt = (Number)rw.getAttribute("RcptQty");
                Number ret=new Number(0);
                if(rw.getAttribute("ReturnQty")!=null)
                    ret = (Number)rw.getAttribute("ReturnQty");
                if(ret.compareTo(new Number(0))==0 || rcpt.compareTo(new Number(0))>0)
                {
                    return "Y";
                    }
        }
            return chk;
    }
    
    /**
         * Method used to check if Tolerance Qty is to be checked for this Receipt acc. to MM$PRF
         * */
        public String chkToleranceQty(String orgId,Integer SlocId,String CldId){
            String chk="N";
            RowQualifier rq=new RowQualifier(this.getViewMMPrf());
            rq.setWhereClause("OrgId='"+orgId+"' and SlocId="+SlocId+" and CldId='"+CldId+"'");
            Row[] r=this.getViewMMPrf().getFilteredRows(rq);
                if(r.length>0){
                    chk=r[0].getAttribute("ChkDlvQtyTlrnc").toString();
                }

            return chk;
        }


        /**
         * Method to check tolerance Quantity against the Received Quantity.
         * @return : -2 - Cannot accept more then tolerance quantity.
         *            1 - Valid Quantity
         * */
        public String validateToleranceQty(String CldId,Integer SlocId,String OrgId,String p_itm_id,Number rcpt_qty){
            Row cur=this.getMmMtlGeItm().getCurrentRow();
          //  String chkValid ="N";
            Integer ret =Integer.parseInt(callStoredFunction(Types.INTEGER, "mm_chk_tlrnc_qty (?,?,?,?,?,?,?)", new Object[] {CldId,SlocId,OrgId,cur.getAttribute("DocIdSrc").toString(),Integer.parseInt(cur.getAttribute("DlvSchdlNo").toString()),p_itm_id,rcpt_qty}).toString());    
            _log.info("ret valid value:"+ret);
            //if(chkValid.equals(""))
            return ret.toString();
        }
        
     public void DeleteGE()
     {
        this.getMmMtlGe().removeCurrentRow();  
         }
     
     public String checkNoOfDocument()
     {
         int count=1;
         if(this.getMmMtlGeSrc().getRowCount()==count)
         return "Y";
         else
             return "N";
         }
     
     public HashSet chkdlvryQtyForItem(String CldId,Integer slocId,String OrgId,String whId)
     {        Row curGe=this.getMmMtlGe().getCurrentRow();
        Integer docType=(Integer)curGe.getAttribute("TransSourceDocType");
        if(whId==null){
            whId="0";
        }
        
        String  docId=curGe.getAttribute("DocId").toString();
        RowQualifier rq=new RowQualifier(this.getMmMtlGeItm1());
        rq.setWhereClause("CldId='"+CldId+"' and SlocId="+slocId+" and OrgId='"+OrgId+"' and WhId='"+whId+"' and DocId='"+docId+"'");
        Row[] filRw=this.getMmMtlGeItm1().getFilteredRows(rq);
        Number zero=new Number(0);
        HashSet<String> h=new HashSet<String>();
        for(Row rw:filRw){
            Number dlvQty=(Number)rw.getAttribute("DlvQty"); 
            if(dlvQty.compareTo(zero)==0 ){
                if(docType.compareTo(new Integer(266))==0){
                   Row[] r= this.getLovPoNo().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                   if(r.length>0){
                       h.add(r[0].getAttribute("AuthPoNo").toString());
                   }
                }else if(docType.compareTo(new Integer(270))==0){
                    Row[] r= this.getLovTransferOrder().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    if(r.length>0){
                        h.add(r[0].getAttribute("TrfNo").toString());
                    }
                }else if(docType.compareTo(new Integer(370))==0){
                    h.add(rw.getAttribute("DocIdSrc").toString());
                }
            }
        }
       _log.info("HashSet--"+h);
        return h;
         }

    /**
     * Container's getter for LovCust1.
     * @return LovCust1
     */
    public ViewObjectImpl getLovCust1() {
        return (ViewObjectImpl)findViewObject("LovCust1");
    }
    
    
    
    /**
     * Populate items from CPO
     */
    public Integer populateGeItmfromCPo()
    {
        
            ViewObjectImpl geVo=this.getMmMtlGe();
            ViewObjectImpl gesrc=this.getMmMtlGeSrc();
            ViewObjectImpl itmVo=this.getMmMtlGeItm();
            Row currGe=geVo.getCurrentRow();
            Integer no_of_row=0;
            String CldId= currGe.getAttribute("CldId").toString();
            Integer SlocId= (Integer) currGe.getAttribute("SlocId");
            String OrgId=currGe.getAttribute("OrgId").toString();
            String crSrc="N";
            Integer currency=null;
            if(currGe.getAttribute("CurrIdSp")!=null)
            currency = (Integer)currGe.getAttribute("CurrIdSp");
            RowQualifier rq=new RowQualifier(this.getMMCpoItm());
                    rq.setWhereClause("DocId='"+currGe.getAttribute("TransSourceDocId").toString()+"' and SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"'");
            Row[] scdlRw=this.getMMCpoItm().getFilteredRows(rq);
            _log.info("No of Rows--"+scdlRw.length);
            no_of_row=scdlRw.length;
            if(scdlRw.length>0){
                
                Row srcRow=gesrc.createRow();
                    srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_CPO);     
                    _log.info("TransSourceDocNo in AM: "+currGe.getAttribute("TransSourceDocNo").toString());
                    Row[] r= this.getLovCpoNo().getFilteredRows("DocId", currGe.getAttribute("TransSourceDocId").toString());
                    
                    srcRow.setAttribute("TxnIdSrcDisp", r[0].getAttribute("CpoId").toString());   
                    srcRow.setAttribute("DocIdSrc", currGe.getAttribute("TransSourceDocId").toString());
                    srcRow.setAttribute("DocDtSrc", currGe.getAttribute("TransSourceDocDt"));
                    srcRow.setAttribute("DlvSchdlNo",0);
                    gesrc.insertRow(srcRow);
                 
                    
                    
                for(Row curr:scdlRw){
                    Row itmRw=itmVo.createRow();
                    itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
                    itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
                    Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                    itmRw.setAttribute("ItmUomBs", itms[0].getAttribute("UomBasic").toString());
                    //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
                    Number fct=getUomConvFctr(currGe.getAttribute("CldId").toString(), Integer.parseInt(currGe.getAttribute("SlocId").toString()), currGe.getAttribute("OrgId").toString(),curr.getAttribute("ItmId").toString(), curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString());
                    Number ordQty = (Number)curr.getAttribute("OrdQty");
                    itmRw.setAttribute("UomConvFctr",fct);
                    itmRw.setAttribute("DlvQty",ordQty);
                    itmRw.setAttribute("DlvQtyBs",ordQty.multiply(fct));

                    itmRw.setAttribute("PendQty",ordQty);
                    itmRw.setAttribute("PendQtyBs",ordQty.multiply(fct));

                    itmRw.setAttribute("RcptQty",ordQty);
                    itmRw.setAttribute("RcptQtyBs",ordQty.multiply(fct));

                    itmRw.setAttribute("TotRcptQty",ordQty);
                    itmRw.setAttribute("TotRcptQtyBs",ordQty.multiply(fct));

                    itmRw.setAttribute("ReturnQty",new Number(0));
                    itmRw.setAttribute("ReturnQtyBs",new Number(0));

                    itmRw.setAttribute("DocIdSrc",currGe.getAttribute("TransSourceDocId").toString());
                    itmRw.setAttribute("DocDtSrc",new Timestamp(System.currentTimeMillis()));
                    itmVo.insertRow(itmRw);
                }
                currGe.setAttribute("TransSourceDocDt", null);
                currGe.setAttribute("TransSourceDocNo", null);
                currGe.setAttribute("TransSchdlNo", null);  
                currGe.setAttribute("CurrIdSp",currency);
            }
            gesrc.executeQuery();
            itmVo.executeQuery();
                 
            return no_of_row;
        
        }

    /**
     * Container's getter for MMCpoItm.
     * @return MMCpoItm
     */
    public ViewObjectImpl getMMCpoItm() {
        return (ViewObjectImpl)findViewObject("MMCpoItm");
    }

    /**
     * Container's getter for LovCpoNo.
     * @return LovCpoNo
     */
    public ViewObjectImpl getLovCpoNo() {
        return (ViewObjectImpl)findViewObject("LovCpoNo");
    }

    /**
     * Container's getter for MMDraftPoDlvSchdl.
     * @return MMDraftPoDlvSchdl
     */
    public ViewObjectImpl getMMDraftPoDlvSchdl() {
        return (ViewObjectImpl)findViewObject("MMDraftPoDlvSchdl");
    }
    
    
    /**
     * Fucntion is used to update TmpRcptQty for DlvSchdl according to change in RcptQty in GE Itm.
     */
    public void updateTxnQty(Number oldRcptQty,Number newRcptQty)
    {
        Number oldQty=new Number(0);
        Number newQty=new Number(0);
        if(oldRcptQty!=null)
            oldQty=oldRcptQty;
        if(newRcptQty!=null)
                newQty=newRcptQty;
        Row curr=this.getMmMtlGeItm().getCurrentRow();
        Number fctr=new Number(1);
        if(curr.getAttribute("UomConvFctr")!=null)
            fctr = (Number)curr.getAttribute("UomConvFctr");
        curr.setAttribute("RcptQtyBs", newRcptQty.multiply(fctr));
        //first substract old qty from tmp qty AND Add new qty to tmp qty
        RowQualifier rq=new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("CldId='"+curr.getAttribute("CldId")+"' and SlocId="+curr.getAttribute("SlocId")+" and OrgId='"+curr.getAttribute("OrgId")+"' and DocId='"+curr.getAttribute("DocIdSrc")+"' and ItmId='"+curr.getAttribute("ItmId")+"' and WhId='"+curr.getAttribute("WhId")+"' and ItmUom='"+curr.getAttribute("ItmUom")+"' and DlvSchdlNo="+curr.getAttribute("DlvSchdlNo"));
        Row dsRow[]=this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        if(dsRow.length>0)
        {
                Number tmpQty=new Number(0);
            if(dsRow[0].getAttribute("TmpRcptQty")!=null)
                tmpQty = (Number)dsRow[0].getAttribute("TmpRcptQty");
               dsRow[0].setAttribute("TmpRcptQty", (tmpQty.subtract(oldQty)).add(newQty)); 
        }
        }
    
    /**
     * Validate PO Quantity if Tolerance Chk is not applicable on Organisation
     */
    public String validatePoRcptQty(Number rcptQty)
    {
        Number pendqty=new Number(0);
        if(this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty")!=null)
        pendqty = (Number)this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty");

        if(pendqty.compareTo(rcptQty)>=0)
            return "Y";
        else
            return "N";
        }
    
    /**
     * Method used to check if Tolerance Days is to be checked for this Receipt acc. to MM$PRF
     * */
    public String chkToleranceDays(String orgId,Integer SlocId,String CldId){
        String chk="N";
        RowQualifier rq=new RowQualifier(this.getViewMMPrf());
        rq.setWhereClause("OrgId='"+orgId+"' and SlocId="+SlocId+" and CldId='"+CldId+"'");
        Row[] r=this.getViewMMPrf().getFilteredRows(rq);
        _log.info("No. of Filtered Rows="+r.length);
            if(r.length>0){
                chk=r[0].getAttribute("ChkDlvSchdlTlrnc").toString();
            }
            _log.info("check="+chk);
        return chk;
    }
    
    /**
     * Method to check tolerance Days against the selected po no/date.
     * @return : -2 - Cannot accept before or after tolerance days.
     *            1 - Valid Date
     * */
    public String validateToleranceDays(String CldId,Integer SlocId,String OrgId,String p_po_no,Timestamp p_rcpt_date){
      //  Row cur=this.getMmMtlGeItm().getCurrentRow();
     
      //  String chkValid ="N";
      Integer Schdlno=new Integer(1);
      Row curr=this.getMmMtlGe().getCurrentRow();
      if(curr.getAttribute("TransSchdlNo")!=null)
          Schdlno = (Integer)curr.getAttribute("TransSchdlNo");
        p_po_no = (String)curr.getAttribute("TransSourceDocId");
        Integer ret =Integer.parseInt(callStoredFunction(Types.INTEGER, "mm.mm_chk_tlrnc_days (?,?,?,?,?,?)", new Object[] {CldId,SlocId,OrgId,p_po_no,Schdlno,p_rcpt_date}).toString());    
        _log.info("ret valid value:"+ret);
        return ret.toString();
    }
    
    public String chkDaysTolerance()
    {
        Integer Schdlno=new Integer(1);
        Row curr=this.getMmMtlGe().getCurrentRow();
        if(curr.getAttribute("TransSchdlNo")!=null)
            Schdlno = (Integer)curr.getAttribute("TransSchdlNo");
            RowQualifier rq=new RowQualifier(this.getMMDraftPoDlvSchdl());
            rq.setWhereClause("CldId='"+curr.getAttribute("CldId")+"' and SlocId="+curr.getAttribute("SlocId")+" and OrgId='"+curr.getAttribute("OrgId")+"' and DocId='"+curr.getAttribute("TransSourceDocId")+"' and  WhId='"+curr.getAttribute("WhId")+"' and  DlvSchdlNo="+Schdlno);
            _log.info("Query="+rq.getExprStr());
            Row dsRow[]=this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
            _log.info("No. of filtered Rows="+dsRow.length);
            if(dsRow.length>0)
            {
                  Timestamp dlvDt = (Timestamp)dsRow[0].getAttribute("DlvDt");
                  Timestamp rcptDt = (Timestamp)curr.getAttribute("GeDt");

            try {
                if(dlvDt.dateValue().toString().equals(rcptDt.dateValue().toString()))
                return "Y";
                else
                return "N";
            } catch (SQLException e) {
                _log.info("Exception to cast timestamp to date.");
            }
        }   
           return "P"; 
        }
    
    
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    public String checkCurrCompatibilityABC(String OrgId,String CldId,Integer SlocId,String PoDocId){
        Integer count=this.getMmMtlGeSrc().getRowCount();
        Row currRc=this.getMmMtlGe().getCurrentRow();
        
        String rcptSrcDoc=currRc.getAttribute("TransSourceDocId").toString();
        _log.info("Count in curr compat-"+count);
        if(count.compareTo(new Integer(1))>=0){
            Row rw=this.getMmMtlGeSrc().first();    
            
            String docId=rw.getAttribute("DocIdSrc").toString(); // docId in table 
            Row[] filRw=this.getLovPoNo().getFilteredRows("DocId", docId); //old selected
          
            Row[] poFilRw=this.getLovPoNo().getFilteredRows("DocId", rcptSrcDoc); //new selected
            _log.info(docId+"Rows--"+filRw.length+"--"+poFilRw.length+"--"+PoDocId);
            if(filRw.length>0){
                Integer curr=Integer.parseInt(filRw[0].getAttribute("CurrIdSp").toString());
                
                Integer currPo=Integer.parseInt(poFilRw[0].getAttribute("CurrIdSp").toString());
                _log.info("Currency--"+curr+"--Currency Bs-"+currPo);
                    if(curr.equals(currPo)){
                        return "Y";
                    }else{
                        return "N";
                    }
            }else{
                return "Y";
            }
        }else{
            return "Y";
        }
    /*     RowQualifier rq=new RowQualifier(this.getLovPoNo());
        
        
        rq.setWhereClause("SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"' and ");
        Row[] filRw=this.getLovPoNo().getFilteredRows(rq); */
       
    }
    
    public Integer getGESrcCount(){
        Integer count=this.getMmMtlGeSrc().getRowCount();
        return count;
    }
    
    public void setCurrIdSpInMtlGe()
    {
            Integer count=this.getMmMtlGeSrc().getRowCount();
        Row geR=this.getMmMtlGe().getCurrentRow();
        Integer eo=null;
           if( geR.getAttribute("EoIdSrc")!=null)
               eo=(Integer)geR.getAttribute("EoIdSrc");
           
            if(count.compareTo(new Integer(1))>= 0){
                Row rw=this.getMmMtlGeSrc().first();    
                
                String docId=rw.getAttribute("DocIdSrc").toString(); // docId in table 
        _log.info(" docId  in table ----- "+docId);
                
            String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String paramHoOrgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer paramSlocId= Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
           RowQualifier rq= new RowQualifier(this.getLovPoNo());
           rq.setWhereClause("CldId='"+paramCldId+"' and SlocId="+paramSlocId+" and OrgId='"+paramOrgId+"' and DocId ='"+docId+"' ");
            Row[] r=this.getLovPoNo().getFilteredRows(rq);
            _log.info(rq.getExprStr()+"  query    "+r.length);
            if(r.length>0)
                if(r[0].getAttribute("CurrIdSp")!=null)
                {
                 _log.info(r[0].getAttribute("PoId") +"    Curr Id  ---  "+r[0].getAttribute("CurrIdSp"));   
                    geR.setAttribute("CurrIdSp", r[0].getAttribute("CurrIdSp"));
                    } 
            }
        }
    
    public void setCurrIdSpPoToMtlGe(Integer value)
    {
            Integer count=this.getMmMtlGeSrc().getRowCount();
        Row geR=this.getMmMtlGe().getCurrentRow();
        Integer eo=null;
           if( geR.getAttribute("EoIdSrc")!=null)
               eo=(Integer)geR.getAttribute("EoIdSrc");
           
            if(count.compareTo(new Integer(1))>= 0){
                Row rw=this.getMmMtlGeSrc().first();    
                
                String docId=rw.getAttribute("DocIdSrc").toString(); // docId in table 
        _log.info(value+" docId  in table ----- "+docId+"  fggfgf   "+value.compareTo(SOURCE_DOC_TYPE_PO)   );
                
            String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String paramHoOrgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer paramSlocId= Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            if(value.compareTo(SOURCE_DOC_TYPE_PO)==0){
           RowQualifier rq= new RowQualifier(this.getLovPoNo());
           rq.setWhereClause("CldId='"+paramCldId+"' and SlocId="+paramSlocId+" and OrgId='"+paramOrgId+"' and DocId ='"+docId+"' ");
            Row[] r=this.getLovPoNo().getFilteredRows(rq);
            _log.info(rq.getExprStr()+"  query    "+r.length);
            if(r.length>0)
                if(r[0].getAttribute("CurrIdSp")!=null)
                {
                 _log.info(r[0].getAttribute("PoId") +"    Curr Id  ---  "+r[0].getAttribute("CurrIdSp"));   
                    geR.setAttribute("CurrIdSp", r[0].getAttribute("CurrIdSp"));
                    } 
            }
            
            if(value.compareTo(SOURCE_DOC_TYPE_CPO)==0){
                
                RowQualifier rq= new RowQualifier(this.getLovCpoNo());
                rq.setWhereClause("CldId='"+paramCldId+"' and SlocId="+paramSlocId+" and OrgId='"+paramOrgId+"' and DocId ='"+docId+"' ");
                 Row[] r=this.getLovCpoNo().getFilteredRows(rq);
                 _log.info(rq.getExprStr()+"  query    "+r.length);
                 if(r.length>0)
                     if(r[0].getAttribute("CurrIdSp")!=null)
                     {
                      _log.info(r[0].getAttribute("CpoId") +"   cpo Curr Id  ---  "+r[0].getAttribute("CurrIdSp"));   
                         geR.setAttribute("CurrIdSp", r[0].getAttribute("CurrIdSp"));
                         } 
                 }
                
                
            }
        }
    
    public void updtRcptRetnTmpRcptQty(Number TotRcpt)
    {
            Number pendqty=new Number(0);
            if(this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty")!=null)
            pendqty = (Number)this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty");
            Number oldRcpt=new Number(0);
            oldRcpt = (Number)this.getMmMtlGeItm().getCurrentRow().getAttribute("RcptQty");
            if(pendqty.compareTo(TotRcpt)<0)
            {
            this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty",pendqty);
            this.updateTxnQty(oldRcpt,pendqty);   //update TmpRcptQty
            this.getMmMtlGeItm().getCurrentRow().setAttribute("ReturnQty",TotRcpt.subtract(pendqty));
            }
            else
            {
                    this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty",TotRcpt);
                    this.updateTxnQty(oldRcpt,TotRcpt);   //update TmpRcptQty
                    this.getMmMtlGeItm().getCurrentRow().setAttribute("ReturnQty",new Number(0));
                }
        }
    
   public void updtRcptQty(Number TotRcpt)
   {
            this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty",TotRcpt);
           this.getMmMtlGeItm().getCurrentRow().setAttribute("ReturnQty",new Number(0));

       }
   
   public String compTotRcptQty(Number RetQty)
   {
       Number TotRcpt=new Number(0);
       if(this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty")!=null)
           TotRcpt=(Number)this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty");
       if(RetQty.compareTo(TotRcpt)<=0)
           return "Y";
       else
           return "N";
       }
    
    
   
     public String callForValidateToleranceQty(String CldId,Integer SlocId,String OrgId,String p_itm_id,Number retn_qty)
     {
         Number rcpt_qty=new Number(0);
             Number TotRcpt=new Number(0);
             if(this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty")!=null)
                 TotRcpt=(Number)this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty");
         rcpt_qty=TotRcpt.subtract(retn_qty);
             String ret=validateToleranceQty(CldId,SlocId,OrgId,p_itm_id,rcpt_qty);
             return ret;
         }
     
     public void updtRcptTmpRcptQty(Number RetnQty)
     { 
             Number totRcptQty=new Number(0);
             if(this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty")!=null)
             totRcptQty = (Number)this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty");
             Number oldRcpt=new Number(0);
             oldRcpt = (Number)this.getMmMtlGeItm().getCurrentRow().getAttribute("RcptQty");
             this.updateTxnQty(oldRcpt,totRcptQty.subtract(RetnQty));   //update TmpRcptQty
             this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty",totRcptQty.subtract(RetnQty));
         }

    /**
     * Container's getter for LovCurrency.
     * @return LovCurrency
     */
    public ViewObjectImpl getLovCurrency() {
        return (ViewObjectImpl)findViewObject("LovCurrency");
    }
}
