package mmquotation.model.service;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmquotation.model.service.common.QuotationAM;
import mmquotation.model.views.MmQuotItmVOImpl;
import mmquotation.model.views.MmQuotOcVOImpl;
import mmquotation.model.views.MmQuotTrLinesVOImpl;
import mmquotation.model.views.MmQuotTrVOImpl;
import mmquotation.model.views.MmQuotVOImpl;

import mmquotation.model.views.QuotSearchVOImpl;
import mmquotation.model.views.trnsSrchVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 28 12:05:20 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QuotationAMImpl extends ApplicationModuleImpl implements QuotationAM {
    /**
     * This is the default constructor (do not remove).
     */
    public QuotationAMImpl() {
    }
    private static final int VARCHAR = Types.VARCHAR;
    /**
     * Container's getter for MmQuot1.
     * @return MmQuot1
     */
    public ViewObjectImpl getMmQuot1() {
        return (ViewObjectImpl)findViewObject("MmQuot1");
    }

    /**
     * Container's getter for MmQuotItm.
     * @return MmQuotItm
     */
    public ViewObjectImpl getMmQuotItm() {
        return (ViewObjectImpl)findViewObject("MmQuotItm");
    }

    /**
     * Container's getter for MmQuotOc.
     * @return MmQuotOc
     */
    public ViewObjectImpl getMmQuotOc() {
        return (ViewObjectImpl)findViewObject("MmQuotOc");
    }

    /**
     * Container's getter for MmQuotTnc.
     * @return MmQuotTnc
     */
    public ViewObjectImpl getMmQuotTnc() {
        return (ViewObjectImpl)findViewObject("MmQuotTnc");
    }

    /**
     * Container's getter for MmQuotTr.
     * @return MmQuotTr
     */
    public ViewObjectImpl getMmQuotTr() {
        return (ViewObjectImpl)findViewObject("MmQuotTr");
    }

    /**
     * Container's getter for LovRfqItm1.
     * @return LovRfqItm1
     */
    public ViewObjectImpl getLovRfqItm1() {
        return (ViewObjectImpl)findViewObject("LovRfqItm1");
    }

    /**
     * Container's getter for ViewQuatItm1.
     * @return ViewQuatItm1
     */
    public ViewObjectImpl getViewQuatItm1() {
        return (ViewObjectImpl)findViewObject("ViewQuatItm1");
    }

    /**
     * Container's getter for QuotTOQuotItmVL1.
     * @return QuotTOQuotItmVL1
     */
    public ViewLinkImpl getQuotTOQuotItmVL1() {
        return (ViewLinkImpl)findViewLink("QuotTOQuotItmVL1");
    }

    /**
     * Container's getter for QuotTOQuotOcVL1.
     * @return QuotTOQuotOcVL1
     */
    public ViewLinkImpl getQuotTOQuotOcVL1() {
        return (ViewLinkImpl)findViewLink("QuotTOQuotOcVL1");
    }

    /**
     * Container's getter for QuotTOQuotTncVL1.
     * @return QuotTOQuotTncVL1
     */
    public ViewLinkImpl getQuotTOQuotTncVL1() {
        return (ViewLinkImpl)findViewLink("QuotTOQuotTncVL1");
    }

    /**
     * Container's getter for QuotTOQuotTrVL1.
     * @return QuotTOQuotTrVL1
     */
    public ViewLinkImpl getQuotTOQuotTrVL1() {
        return (ViewLinkImpl)findViewLink("QuotTOQuotTrVL1");
    }
    
 
    /**
     * Container's getter for QuotSearch1.
     * @return QuotSearch1
     */
    public ViewObjectImpl getQuotSearch1() {
        return (ViewObjectImpl)findViewObject("QuotSearch1");
    }

    /**
     * Container's getter for LovEoId1.
     * @return LovEoId1
     */
    public ViewObjectImpl getLovEoId1() {
        return (ViewObjectImpl)findViewObject("LovEoId1");
    }

    /**
     * Container's getter for LovOrgId.
     * @return LovOrgId
     */
    public ViewObjectImpl getLovOrgId() {
        return (ViewObjectImpl)findViewObject("LovOrgId");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl)findViewObject("LovItmId");
    }
    public void searchQuery(Integer SlocId,String OrgId,String DocId ){
          ViewObject v1=this.getMmQuot1();
          DocId=resolvEl("#{pageFlowScope.DOC_ID}");
          v1.setWhereClause("SLOC_ID="+SlocId+" AND ORG_ID='"+OrgId+"' AND DOC_ID='"+DocId+"'");
          v1.executeQuery();
      
      }
    public void resetQuery(){
          ViewObject v1=this.getMmQuot1();
          v1.setWhereClause(null);
          v1.executeQuery();
      
      }

    /**
     * Container's getter for LovDlvAdds.
     * @return LovDlvAdds
     */
    public ViewObjectImpl getLovDlvAdds() {
        return (ViewObjectImpl)findViewObject("LovDlvAdds");
    }

    /**
     * Container's getter for LovBillAdds.
     * @return LovBillAdds
     */
    public ViewObjectImpl getLovBillAdds() {
        return (ViewObjectImpl)findViewObject("LovBillAdds");
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public void tranlateQuot(){
        try{
        ViewObjectImpl v = getMmQuot1();
        Row row = v.getCurrentRow();
        String doc_id = row.getAttribute("DocId").toString();
        System.out.println(doc_id+"------");
        Integer P_SLOCID = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        String P_ORGID = (String)resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}"); 
        String CldID = (String)resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR1}"));
        String pending =
            callStoredFunction(VARCHAR, "MM.PKG_MM_QUOT.TRANSLATE_QUOT(?,?,?,?)", new Object[] {P_SLOCID,P_ORGID,CldID,doc_id}).toString();
        }
        catch(Exception e)
        {
            System.out.println(e+"--------------");
        }
        
    }

    /**
     * Container's getter for MmQuotTrLines.
     * @return MmQuotTrLines
     */
    public ViewObjectImpl getMmQuotTrLines() {
        return (ViewObjectImpl)findViewObject("MmQuotTrLines");
    }

    /**
     * Container's getter for QuotTrTOQuotTrLineVL1.
     * @return QuotTrTOQuotTrLineVL1
     */
    public ViewLinkImpl getQuotTrTOQuotTrLineVL1() {
        return (ViewLinkImpl)findViewLink("QuotTrTOQuotTrLineVL1");
    }

    /**
     * Container's getter for LovUomId.
     * @return LovUomId
     */
    public ViewObjectImpl getLovUomId() {
        return (ViewObjectImpl)findViewObject("LovUomId");
    }

    /**
     * Container's getter for LovItmIdEo.
     * @return LovItmIdEo
     */
    public ViewObjectImpl getLovItmIdEo() {
        return (ViewObjectImpl)findViewObject("LovItmIdEo");
    }

    /**
     * Container's getter for LovCurrency.
     * @return LovCurrency
     */
    public ViewObjectImpl getLovCurrency() {
        return (ViewObjectImpl)findViewObject("LovCurrency");
    }

    /**
     * Container's getter for MmQuotVO1.
     * @return MmQuotVO1
     */
    public MmQuotVOImpl getMmQuotVO1() {
        return (MmQuotVOImpl)findViewObject("MmQuotVO1");
    }

    /**
     * Container's getter for LovQuotStatus.
     * @return LovQuotStatus
     */
    public ViewObjectImpl getLovQuotStatus() {
        return (ViewObjectImpl)findViewObject("LovQuotStatus");
    }

    /**
     * Container's getter for LovrfqId.
     * @return LovrfqId
     */
    public ViewObjectImpl getLovrfqId() {
        return (ViewObjectImpl)findViewObject("LovrfqId");
    }

    /**
     * Container's getter for LovCurrId.
     * @return LovCurrId
     */
    public ViewObjectImpl getLovCurrId() {
        return (ViewObjectImpl)findViewObject("LovCurrId");
    }

    /**
     * Container's getter for trnsSrch1.
     * @return trnsSrch1
     */
    public ViewObjectImpl gettrnsSrch1() {
        return (ViewObjectImpl)findViewObject("trnsSrch1");
    }
    
   /*   public void filterItems()
    {
         String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocIdInt=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
       // Integer slocIdInt = Integer.parseInt(slocId);
        
      ViewObjectImpl vw = this.getLovItmId();
      ViewCriteria vc  = vw.getViewCriteria("LovItmIdVOCriteria1");
      vw.applyViewCriteria(vc);
      vw.setNamedWhereClauseParam("SlocIdBindVar", slocIdInt);
      vw.setNamedWhereClauseParam("CldIdBindVar",cldId);
      vw.setNamedWhereClauseParam("OrgIdBind", orgId);
      vw.executeQuery(); 
       
    }  */
    
    public static Object evaluateEL(String el) {
    FacesContext facesContext = FacesContext.getCurrentInstance();
    ELContext elContext = facesContext.getELContext();
    ExpressionFactory expressionFactory =
    facesContext.getApplication().getExpressionFactory();
    ValueExpression exp = expressionFactory.createValueExpression(elContext, el, Object.class);
    return exp.getValue(elContext);
    }
    
    
    public void searchAction()
    {
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocIdInt=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //Integer slocIdInt = Integer.parseInt(slocId);
        ViewObjectImpl inputVo = this.gettrnsSrch1();
        Row row = inputVo.getCurrentRow();
        ViewObjectImpl vw = this.getQuotSearch1();
        vw.setNamedWhereClauseParam("SlocIdBind", slocIdInt);
        vw.setNamedWhereClauseParam("OrgIdBindVar", orgId);
        vw.setNamedWhereClauseParam("QuotIdBindVar", row.getAttribute("quotNo"));
        vw.setNamedWhereClauseParam("FromQuotDtBindVar", row.getAttribute("fromDate"));
        vw.setNamedWhereClauseParam("ToQuotDtBindVar", row.getAttribute("toDate"));
        vw.setNamedWhereClauseParam("EoNmBindVaR", row.getAttribute("supplierId"));
        vw.setNamedWhereClauseParam("TotItmBindVar", row.getAttribute("itmName"));
        vw.setNamedWhereClauseParam("FromQuotAmtBsBindVar", row.getAttribute("amtRange"));
        vw.setNamedWhereClauseParam("ToQuotAmtBsBindVar", row.getAttribute("To"));
        vw.setNamedWhereClauseParam("QuotStatusBindVar", row.getAttribute("status"));
        vw.executeQuery();
    }
    
    public String getWfNo(Integer SlocId,String CldId,String OrgId,Integer DocNo)
        {
        Integer DocTypId=0;
            try {
                Object obj=callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)",
                                          new Object[] {SlocId, CldId, OrgId, DocNo,DocTypId });
                return obj.toString();
            } catch (Exception e) {
                return "0";
            }

        }
    private static int NUMBER = Types.NUMERIC;
    public Integer getUsrLvl(Integer SlocId,String CldId,String OrgId,Integer UsrId,String WfNo,String DocNo)
        {
        Integer DocTypId=0;
            return Integer.parseInt(callStoredFunction(NUMBER ,"APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId,CldId,
                                                                                                                                    OrgId,
                                                                                                                                    UsrId,
                                                                                                                                    WfNo,
                                                                                                                                    DocNo,DocTypId }).toString());


        }

        public Integer insIntoTxn(Integer SlocId,String CldId,String OrgId,Integer DocNo,String WfNo,Integer usr_idFrm,Integer usr_idTo,Integer levelTo,Integer levelFrm,String action,String remark,Number amount )
        {
            Integer DocTypId=0;
        String DocId=getMmQuot1().getCurrentRow().getAttribute("DocId").toString();
         return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                            new Object[] { SlocId, CldId, OrgId, DocNo,DocTypId, WfNo, DocId,
                                                           usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
                                                           amount}).toString());

        }
        
    public Integer pendingCheck(Integer SlocId,String CldId,String OrgId,Integer DocNo){
        Integer DocTypeId=0;
        String DocId= getMmQuot1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj= callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId,DocTypeId });
        Integer UsrId=null;
        if(obj!=null){
            UsrId=Integer.parseInt(obj.toString());
        }
        return UsrId;
    }
    
    
    public String getTxnId()
    {
       String DocId= getMmQuot1().getCurrentRow().getAttribute("DocId").toString();
       if(DocId != null)
       {return DocId;}
       else
       {return null;}
    }
    
     public String CheckSaved()
        {
            String DocId=getMmQuot1().getCurrentRow().getAttribute("DocId").toString();
            Row[] r=getWF1().getFilteredRows("TxnDocId",DocId);
          if(r.length>0)
            return "1";
            else
                return "-1";
            }

    /**
     * Container's getter for WF1.
     * @return WF1
     */
    public ViewObjectImpl getWF1() {
        return (ViewObjectImpl)findViewObject("WF1");
    }

    /**
     * Container's getter for LovUomVw1.
     * @return LovUomVw1
     */
    public ViewObjectImpl getLovUomVw1() {
        return (ViewObjectImpl)findViewObject("LovUomVw1");
    }

    /**
     * Container's getter for TransRfqDocIdDisp.
     * @return TransRfqDocIdDisp
     */
    public ViewObjectImpl getTransRfqDocIdDisp() {
        return (ViewObjectImpl)findViewObject("TransRfqDocIdDisp");
    }

    /**
     * Container's getter for MmQuotTrLines1.
     * @return MmQuotTrLines1
     */
    public MmQuotTrLinesVOImpl getMmQuotTrLines1() {
        return (MmQuotTrLinesVOImpl)findViewObject("MmQuotTrLines1");
    }

    /**
     * Container's getter for MmQuotTr1.
     * @return MmQuotTr1
     */
    public MmQuotTrVOImpl getMmQuotTr1() {
        return (MmQuotTrVOImpl)findViewObject("MmQuotTr1");
    }

    /**
     * Container's getter for MmQuotItmToQuotTrVL1.
     * @return MmQuotItmToQuotTrVL1
     */
    public ViewLinkImpl getMmQuotItmToQuotTrVL1() {
        return (ViewLinkImpl)findViewLink("MmQuotItmToQuotTrVL1");
    }

    /**
     * Container's getter for MmQuotTrLines2.
     * @return MmQuotTrLines2
     */
    public MmQuotTrLinesVOImpl getMmQuotTrLines2() {
        return (MmQuotTrLinesVOImpl)findViewObject("MmQuotTrLines2");
    }

    /**
     * Container's getter for QuotTrTOQuotTrLineVL2.
     * @return QuotTrTOQuotTrLineVL2
     */
    public ViewLinkImpl getQuotTrTOQuotTrLineVL2() {
        return (ViewLinkImpl)findViewLink("QuotTrTOQuotTrLineVL2");
    }
    
    
    public void setBindVarToEoId()
    {
            Integer P_SLOCID = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String P_ORGID = (String)resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"); 
            String CldID = (String)resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            String hoorg=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            this.getLovEoId1().setNamedWhereClauseParam("cldIdBindVar",CldID );
            this.getLovEoId1().setNamedWhereClauseParam("SlocIdBindVar",P_SLOCID );
            this.getLovEoId1().setNamedWhereClauseParam("orgIdBindVar",P_ORGID);
            this.getLovEoId1().setNamedWhereClauseParam("hoOrgIdBindVar",hoorg );
            this.getLovEoId1().executeQuery();
            this.getLovTaxTypeId().setNamedWhereClauseParam("HoOrgIdBind", hoorg);
            this.getLovTaxTypeId().setNamedWhereClauseParam("CldIdBind", CldID);
            this.getLovTaxTypeId().setNamedWhereClauseParam("SlocIdBind", P_SLOCID);
            this.getLovTaxTypeId().executeQuery();
            System.out.println("Bind var set to eo");
            
            ViewObjectImpl tncvo=this.getLovTNC();
            tncvo.setNamedWhereClauseParam("bindCldId", CldID);
            tncvo.setNamedWhereClauseParam("bindSlocId", P_SLOCID);
            tncvo.setNamedWhereClauseParam("bindOrgId", P_ORGID);
            tncvo.executeQuery();
            
        }

    /**
     * Container's getter for LovUsrId.
     * @return LovUsrId
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl)findViewObject("LovUsrId");
    }

    /**
     * Container's getter for LovTaxRuleId.
     * @return LovTaxRuleId
     */
    public ViewObjectImpl getLovTaxRuleId() {
        return (ViewObjectImpl)findViewObject("LovTaxRuleId");
    }

    /**
     * Container's getter for LovTaxTypeId.
     * @return LovTaxTypeId
     */
    public ViewObjectImpl getLovTaxTypeId() {
        return (ViewObjectImpl)findViewObject("LovTaxTypeId");
    }

    /**
     * Container's getter for LovTaxCoaId.
     * @return LovTaxCoaId
     */
    public ViewObjectImpl getLovTaxCoaId() {
        return (ViewObjectImpl)findViewObject("LovTaxCoaId");
    }

    /**
     * Container's getter for LovTNC.
     * @return LovTNC
     */
    public ViewObjectImpl getLovTNC() {
        return (ViewObjectImpl)findViewObject("LovTNC");
    }

    /**
     * Container's getter for LovItmIdForCode.
     * @return LovItmIdForCode
     */
    public ViewObjectImpl getLovItmIdForCode() {
        return (ViewObjectImpl)findViewObject("LovItmIdForCode");
    }

    /**
     * Container's getter for LovCoaId.
     * @return LovCoaId
     */
    public ViewObjectImpl getLovCoaId() {
        return (ViewObjectImpl)findViewObject("LovCoaId");
    }

    /**
     * Container's getter for LovRfqTnc.
     * @return LovRfqTnc
     */
    public ViewObjectImpl getLovRfqTnc() {
        return (ViewObjectImpl)findViewObject("LovRfqTnc");
    }
}
