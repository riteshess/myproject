package appcurr.model.entities;

import oracle.jbo.domain.DBSequence;
import oracle.jbo.domain.Date;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;

import oracle.binding.BindingContainer;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 22 17:10:48 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppCurrEOImpl extends EntityImpl {
    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
       // super.lock();
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(AppCurrEOImpl obj) {
                return obj.getCldId();
            }

            public void put(AppCurrEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        CurrSlocId {
            public Object get(AppCurrEOImpl obj) {
                return obj.getCurrSlocId();
            }

            public void put(AppCurrEOImpl obj, Object value) {
                obj.setCurrSlocId((Integer)value);
            }
        }
        ,
        CurrId {
            public Object get(AppCurrEOImpl obj) {
                return obj.getCurrId();
            }

            public void put(AppCurrEOImpl obj, Object value) {
                obj.setCurrId((Integer)value);
            }
        }
        ,
        CurrDesc {
            public Object get(AppCurrEOImpl obj) {
                return obj.getCurrDesc();
            }

            public void put(AppCurrEOImpl obj, Object value) {
                obj.setCurrDesc((String)value);
            }
        }
        ,
        CurrActv {
            public Object get(AppCurrEOImpl obj) {
                return obj.getCurrActv();
            }

            public void put(AppCurrEOImpl obj, Object value) {
                obj.setCurrActv((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(AppCurrEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(AppCurrEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(AppCurrEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(AppCurrEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(AppCurrEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(AppCurrEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(AppCurrEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(AppCurrEOImpl obj, Object value) {
                obj.setUsrIdModDt((Date)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppCurrEOImpl object);

        public abstract void put(AppCurrEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int CURRSLOCID = AttributesEnum.CurrSlocId.index();
    public static final int CURRID = AttributesEnum.CurrId.index();
    public static final int CURRDESC = AttributesEnum.CurrDesc.index();
    public static final int CURRACTV = AttributesEnum.CurrActv.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppCurrEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("appcurr.model.entities.AppCurrEO");
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for CurrSlocId, using the alias name CurrSlocId.
     * @return the value of CurrSlocId
     */
    public Integer getCurrSlocId() {
        return (Integer)getAttributeInternal(CURRSLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrSlocId.
     * @param value value to set the CurrSlocId
     */
    public void setCurrSlocId(Integer value) {
        setAttributeInternal(CURRSLOCID, value);
    }

    /**
     * Gets the attribute value for CurrId, using the alias name CurrId.
     * @return the value of CurrId
     */
    public Integer getCurrId() {
        return (Integer)getAttributeInternal(CURRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrId.
     * @param value value to set the CurrId
     */
    public void setCurrId(Integer value) {
        setAttributeInternal(CURRID, value);
    }

    /**
     * Gets the attribute value for CurrDesc, using the alias name CurrDesc.
     * @return the value of CurrDesc
     */
    public String getCurrDesc() {
        return (String)getAttributeInternal(CURRDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrDesc.
     * @param value value to set the CurrDesc
     */
    public void setCurrDesc(String value) {
        setAttributeInternal(CURRDESC, value);
    }

    /**
     * Gets the attribute value for CurrActv, using the alias name CurrActv.
     * @return the value of CurrActv
     */
    public String getCurrActv() {
        return (String)getAttributeInternal(CURRACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrActv.
     * @param value value to set the CurrActv
     */
    public void setCurrActv(String value) {
        setAttributeInternal(CURRACTV, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Date getUsrIdModDt() {
        return (Date)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Date value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param cldId key constituent
     * @param currSlocId key constituent
     * @param currId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer currSlocId, Integer currId) {
        return new Key(new Object[]{cldId, currSlocId, currId});
    }

    public BindingContainer getBindings() {
            return BindingContext.getCurrent().getCurrentBindingsEntry();
        }
    
    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        
        //try{
            Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            setUsrIdCreate(userId);
            setCldId(cldId);
            setCurrSlocId(slocId);
            System.out.println("Hello");
        /* }catch(Exception e){
            System.out.println("Problem in getting cldId or SlocId or UserId.");
        }
         */super.create(attributeList);
    }
    
    protected void doDML(int operation, TransactionEvent e) {
        if(operation==DML_UPDATE){
                Integer  UserId =Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                setUsrIdMod(UserId);
                Date currDate = (Date)Date.getCurrentDate();
                setUsrIdModDt(currDate);
                       } 

        super.doDML(operation, e);
    }
    
    public String resolvEl(String data){
            FacesContext fc = FacesContext.getCurrentInstance();
            Application app = fc.getApplication();
            ExpressionFactory elFactory = app.getExpressionFactory();
            ELContext elContext = fc.getELContext();
            ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
            String Message=valueExp.getValue(elContext).toString();
            return Message;
          }
}
