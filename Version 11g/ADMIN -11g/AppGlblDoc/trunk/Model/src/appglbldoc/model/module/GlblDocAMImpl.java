package appglbldoc.model.module;

import appglbldoc.model.module.common.GlblDocAM;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 08 12:12:26 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GlblDocAMImpl extends ApplicationModuleImpl implements GlblDocAM {
    /**
     * This is the default constructor (do not remove).
     */
    public GlblDocAMImpl() {
    }

    /**
     * Container's getter for AppGlblDocOpmode1.
     * @return AppGlblDocOpmode1
     */
    public ViewObjectImpl getAppGlblDocOpmode1() {
        return (ViewObjectImpl)findViewObject("AppGlblDocOpmode1");
    }

    /**
     * Container's getter for AppGlblDocTypeReset1.
     * @return AppGlblDocTypeReset1
     */
    public ViewObjectImpl getAppGlblDocTypeReset1() {
        return (ViewObjectImpl)findViewObject("AppGlblDocTypeReset1");
    }

    /**
     * Container's getter for AppGlblDocType1.
     * @return AppGlblDocType1
     */
    public ViewObjectImpl getAppGlblDocType1() {
        return (ViewObjectImpl)findViewObject("AppGlblDocType1");
    }

    /**
     * Container's getter for AppGlblDoc1.
     * @return AppGlblDoc1
     */
    public ViewObjectImpl getAppGlblDoc1() {
        return (ViewObjectImpl)findViewObject("AppGlblDoc1");
    }

    /**
     * Container's getter for AppGlblDocOpmode2.
     * @return AppGlblDocOpmode2
     */
    public ViewObjectImpl getAppGlblDocOpmode2() {
        return (ViewObjectImpl)findViewObject("AppGlblDocOpmode2");
    }

    /**
     * Container's getter for AppGlblDocTypeReset2.
     * @return AppGlblDocTypeReset2
     */
    public ViewObjectImpl getAppGlblDocTypeReset2() {
        return (ViewObjectImpl)findViewObject("AppGlblDocTypeReset2");
    }

    /**
     * Container's getter for FkAppGlblDocOpmodeVL1.
     * @return FkAppGlblDocOpmodeVL1
     */
    public ViewLinkImpl getFkAppGlblDocOpmodeVL1() {
        return (ViewLinkImpl)findViewLink("FkAppGlblDocOpmodeVL1");
    }

    /**
     * Container's getter for FkAppGlblDocTypeReset1VL1.
     * @return FkAppGlblDocTypeReset1VL1
     */
    public ViewLinkImpl getFkAppGlblDocTypeReset1VL1() {
        return (ViewLinkImpl)findViewLink("FkAppGlblDocTypeReset1VL1");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    public Integer on_load_page() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction(VARCHAR, "fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                           new Object[] { cld_id, sloc_id, org_id, 18, usr_id });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);

        String addMode = resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString();
        String editMode = resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString();
        String viewMode = resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString();
        String deleteMode = resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();


        return count;
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    /**
     * Container's getter for AppGlblDocType2.
     * @return AppGlblDocType2
     */
    public ViewObjectImpl getAppGlblDocType2() {
        return (ViewObjectImpl)findViewObject("AppGlblDocType2");
    }

    /**
     * Container's getter for GlblDocToDoctypeVL1.
     * @return GlblDocToDoctypeVL1
     */
    public ViewLinkImpl getGlblDocToDoctypeVL1() {
        return (ViewLinkImpl)findViewLink("GlblDocToDoctypeVL1");
    }

    /**
     * Container's getter for AppGlblDocTypeReset3.
     * @return AppGlblDocTypeReset3
     */
    public ViewObjectImpl getAppGlblDocTypeReset3() {
        return (ViewObjectImpl)findViewObject("AppGlblDocTypeReset3");
    }

    /**
     * Container's getter for DocTypeToTypeResetVL1.
     * @return DocTypeToTypeResetVL1
     */
    public ViewLinkImpl getDocTypeToTypeResetVL1() {
        return (ViewLinkImpl)findViewLink("DocTypeToTypeResetVL1");
    }

    public void page_Refresh() {
        ViewObjectImpl appGlblDocOpmode2 = getAppGlblDocOpmode2();
        ViewObjectImpl appGlblDocType2 = getAppGlblDocType2();
        ViewObjectImpl appGlblDocTypeReset3 = getAppGlblDocTypeReset3();
        appGlblDocOpmode2.executeQuery();
        appGlblDocType2.executeQuery();
        appGlblDocTypeReset3.executeQuery();
    }

    public int opModeValidator(int glbldocid, String usertype) {
        System.out.println("in validator of opmode in AM");
        ViewObjectImpl appGlblDocOpmode2 = this.getAppGlblDocOpmode2();
        System.out.println("appGlblDocOpmode2" + appGlblDocOpmode2);
        RowQualifier rowQualifier = new RowQualifier(appGlblDocOpmode2);
        System.out.println("rowQualifier" + rowQualifier + "   glbldocid : " + glbldocid + "  usertype: " + usertype);
        rowQualifier.setWhereClause("GlblDocId=" + glbldocid + "AND GlblDocUsrType='" +usertype+"'");
        System.out.println(rowQualifier+" :rowQualifier after set where");
        System.out.println("after setwhereclause");
        Row[] filteredRows = null;
        if (appGlblDocOpmode2 != null) {
            System.out.println("If Vo is not null");
            
            filteredRows = appGlblDocOpmode2.getFilteredRows(rowQualifier);
           if(filteredRows.length>0) {
               System.out.println("in if "+filteredRows.length);
               
           }
        }
        System.out.println("filteredRows" + filteredRows);
        System.out.println(filteredRows.length + "rows");
        int i = filteredRows.length;

        return i;
    }
}
