package externalentityprofilesetup.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 31 15:11:47 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransSearchSupplierVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TransSearchSupplierVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(TransSearchSupplierVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        SupplierTrans {
            public Object get(TransSearchSupplierVORowImpl obj) {
                return obj.getSupplierTrans();
            }

            public void put(TransSearchSupplierVORowImpl obj, Object value) {
                obj.setSupplierTrans((String)value);
            }
        }
        ,
        CldIdTrans {
            public Object get(TransSearchSupplierVORowImpl obj) {
                return obj.getCldIdTrans();
            }

            public void put(TransSearchSupplierVORowImpl obj, Object value) {
                obj.setCldIdTrans((String)value);
            }
        }
        ,
        SlocIdTrans {
            public Object get(TransSearchSupplierVORowImpl obj) {
                return obj.getSlocIdTrans();
            }

            public void put(TransSearchSupplierVORowImpl obj, Object value) {
                obj.setSlocIdTrans((Integer)value);
            }
        }
        ,
        AppEePrfVO1 {
            public Object get(TransSearchSupplierVORowImpl obj) {
                return obj.getAppEePrfVO1();
            }

            public void put(TransSearchSupplierVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TransSearchSupplierVORowImpl object);

        public abstract void put(TransSearchSupplierVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int SUPPLIERTRANS = AttributesEnum.SupplierTrans.index();
    public static final int CLDIDTRANS = AttributesEnum.CldIdTrans.index();
    public static final int SLOCIDTRANS = AttributesEnum.SlocIdTrans.index();
    public static final int APPEEPRFVO1 = AttributesEnum.AppEePrfVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransSearchSupplierVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SupplierTrans.
     * @return the SupplierTrans
     */
    public String getSupplierTrans() {
        return (String) getAttributeInternal(SUPPLIERTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SupplierTrans.
     * @param value value to set the  SupplierTrans
     */
    public void setSupplierTrans(String value) {
        setAttributeInternal(SUPPLIERTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldIdTrans.
     * @return the CldIdTrans
     */
    public String getCldIdTrans() {
        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        // String glbl_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        
        if(glbl_cld_id !=null)
            return glbl_cld_id;
        else
        return (String) getAttributeInternal(CLDIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldIdTrans.
     * @param value value to set the  CldIdTrans
     */
    public void setCldIdTrans(String value) {
        setAttributeInternal(CLDIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocIdTrans.
     * @return the SlocIdTrans
     */
    public Integer getSlocIdTrans() {
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        
        if(glbl_sloc_id != null){
            return glbl_sloc_id;
        }
        else{
            return (Integer) getAttributeInternal(SLOCIDTRANS);
        }
        
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocIdTrans.
     * @param value value to set the  SlocIdTrans
     */
    public void setSlocIdTrans(Integer value) {
        setAttributeInternal(SLOCIDTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AppEePrfVO1.
     */
    public RowSet getAppEePrfVO1() {
        return (RowSet)getAttributeInternal(APPEEPRFVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    public String resolvEl(String data) {
            FacesContext fc = FacesContext.getCurrentInstance();
            Application app = fc.getApplication();
            ExpressionFactory elFactory = app.getExpressionFactory();
            ELContext elContext = fc.getELContext();
            ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
            String Message = valueExp.getValue(elContext).toString();
            return Message;
        }
}
