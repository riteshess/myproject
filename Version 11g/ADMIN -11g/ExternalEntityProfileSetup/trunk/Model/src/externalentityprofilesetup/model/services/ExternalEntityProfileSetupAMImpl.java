package externalentityprofilesetup.model.services;

import externalentityprofilesetup.model.services.common.ExternalEntityProfileSetupAM;
import externalentityprofilesetup.model.views.AppEePrfVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 31 13:08:02 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ExternalEntityProfileSetupAMImpl extends ApplicationModuleImpl implements ExternalEntityProfileSetupAM {
    /**
     * This is the default constructor (do not remove).
     */
    public ExternalEntityProfileSetupAMImpl() {
    }

    /**
     * Container's getter for AppEeMstPrf1.
     * @return AppEeMstPrf1
     */
    public ViewObjectImpl getAppEeMstPrf1() {
        return (ViewObjectImpl)findViewObject("AppEeMstPrf1");
    }

    /**
     * Container's getter for AppEePrf1.
     * @return AppEePrf1
     */
    public AppEePrfVOImpl getAppEePrf1() {
        return (AppEePrfVOImpl)findViewObject("AppEePrf1");
    }

    /**
     * Container's getter for TransSearchSupplier1.
     * @return TransSearchSupplier1
     */
    public ViewObjectImpl getTransSearchSupplier1() {
        return (ViewObjectImpl)findViewObject("TransSearchSupplier1");
    }
    
    public String resolvEl(String data) {
            FacesContext fc = FacesContext.getCurrentInstance();
            Application app = fc.getApplication();
            ExpressionFactory elFactory = app.getExpressionFactory();
            ELContext elContext = fc.getELContext();
            ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
            String Message = valueExp.getValue(elContext).toString();
            return Message;
        }
    
    public void searchSupplier(){
        System.out.println("search method called from amimpl ============================= >");
        System.out.println("ibn search biutton method in impl");
        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
       // String glbl_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl trnsvo = getTransSearchSupplier1();
        String EeType = (String)trnsvo.getCurrentRow().getAttribute("SupplierTrans");
    
        
        ViewObjectImpl vo= getAppEePrf1();
        System.out.println("vo going to filter ===========================> ");
        ViewCriteria vc=vo.getViewCriteria("AppEePrfVOCriteria");
        vo.applyViewCriteria(vc);
       // vo.setNamedWhereClauseParam("bindOrgId", glbl_org_id);
        vo.setNamedWhereClauseParam("bindCldId", glbl_cld_id);
        vo.setNamedWhereClauseParam("bindSlocId", glbl_sloc_id);
        vo.setNamedWhereClauseParam("bindEeType", EeType);
        vo.executeQuery();
    }
    
    public void chkDuplicatePrf(String eeTyp){
        System.out.println("++++++AMIMPL+++++++ eetypeID = "+eeTyp);
        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
//        RowQualifier rq = new RowQualifier(getAppEePrf1());
//        rq.setWhereClause("EeCldId = '"+glbl_cld_id+"' AND EeSlocId = "+glbl_sloc_id+" AND EeTypeId = '"+eeTyp+"'");
//        Row[] row = getAppEePrf1().getFilteredRows(rq);
        
//        if(row.length>=1){
//            System.out.println("name present (row.length) = "+row.length);
//            String msg = "Already Present !";
//            //FacesMessage message = new FacesMessage(resolvEl("#{bundle['MSG.254']}"));   
//            FacesMessage message = new FacesMessage(msg);      
//            message.setSeverity(FacesMessage.SEVERITY_ERROR);
//            FacesContext fc =  FacesContext.getCurrentInstance();
//            fc.addMessage(null, message);
//            //            fc.addMessage(EeTypeId.getClientId(), message); 
//           
//        }
        //else{
            RowQualifier rq1 = new RowQualifier(getAppGlblEePrf1());
            rq1.setWhereClause("GlblEeId = '"+eeTyp+"' ");
            Row[] r = getAppGlblEePrf1().getFilteredRows(rq1);
            System.out.println("ROW CREATE  ================= > "+r.length);
            String GlblEeTyp = (String)r[0].getAttribute("GlblEeType");
            String GlblEeBhv = (String)r[0].getAttribute("GlblEeBhav");
            System.out.println("GlblEeType = "+GlblEeTyp+"  GlblEeBhav = "+GlblEeBhv);
            System.out.println(" getAppEePrf1().getCurrentRow().setAttribute(\"EeType\", eeTyp); ");
            getAppEePrf1().getCurrentRow().setAttribute("EeType", GlblEeTyp);
            getAppEePrf1().getCurrentRow().setAttribute("EeBhav", GlblEeBhv);
            
        //}   
        //return row.length;
    }
    public void setLen(Integer LegCodeLen, Integer AliasLen){
      System.out.println(" value in set len method "+LegCodeLen+"   "+AliasLen);
        ViewObjectImpl vo = this.getAppEePrf1();
                Integer eeTyp = (Integer)vo.getCurrentRow().getAttribute("EeTypeId");
                System.out.println("============== "+eeTyp);
        getAppEePrf1().getCurrentRow().setAttribute("EeTypeLegCodeLen", LegCodeLen);
        getAppEePrf1().getCurrentRow().setAttribute("EeTypeAliasLen", AliasLen);
        //getAppEePrf1().getCurrentRow().setAttribute("EeBhav", GlblEeBhv);
    }
    

    /**
     * Container's getter for AppGlblEePrf1.
     * @return AppGlblEePrf1
     */
    public ViewObjectImpl getAppGlblEePrf1() {
        return (ViewObjectImpl)findViewObject("AppGlblEePrf1");
    }
    
    public String getEeBhavVal(){
        ViewObjectImpl vo = this.getAppEePrf1();
        String eeBhav = (String)vo.getCurrentRow().getAttribute("EeBhav");
        System.out.println("EeBhav = "+eeBhav);
        return eeBhav;
    }
    
//    public void getItemForAppGlblEePrf(){
//        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
//        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
//        ViewObjectImpl vo = this.getAppGlblEePrf1();
//        
//        System.out.println("glbl_cld_id "+glbl_cld_id);
//        System.out.println("glbl_sloc_id "+glbl_sloc_id);
//        
//        vo.setNamedWhereClauseParam("bind_CldId", glbl_cld_id);
//        vo.setNamedWhereClauseParam("bind_SlocId", glbl_sloc_id);
//        vo.executeQuery();
//    }


    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }
    
    /****Methods to get Global Parameter*/
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public String getparamHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }
    public String isChildRecordExist(){
        
        Integer eeTypeId=null;
        ViewObject vo=this.getAppEePrf1();
        Row currRow=vo.getCurrentRow();
        if(currRow!=null){
             eeTypeId = (Integer)currRow.getAttribute("EeTypeId");
        }
        System.out.println("Paramter Are cld isd "+getparamCldId() + " sloc id --"+getparamSlocId()+"  ee type id "+eeTypeId);
        String Msg =
            (String)callStoredFunction1(Types.VARCHAR, "fn_is_chk_eo_exist(?,?,?)",
                            new Object[] { getparamCldId(), getparamSlocId(),eeTypeId });
        
        System.out.println("return Msg  "+Msg);
        return Msg;
    }
  
}
