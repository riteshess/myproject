package externalentitysetup.model.entities;

import externalentitysetup.model.module.ExternalEntityAMImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;
import javax.faces.application.Application;
import javax.faces.context.FacesContext;
import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 18 18:32:07 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppEoMstEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        EoMstSlocId {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getEoMstSlocId();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setEoMstSlocId((Integer)value);
            }
        }
        ,
        EoMstId {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getEoMstId();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setEoMstId((Integer)value);
            }
        }
        ,
        EoMstNm {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getEoMstNm();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setEoMstNm((String)value);
            }
        }
        ,
        EoMstAlias {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getEoMstAlias();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setEoMstAlias((String)value);
            }
        }
        ,
        EoMstLegCd {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getEoMstLegCd();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setEoMstLegCd((String)value);
            }
        }
        ,
        EoMstActv {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getEoMstActv();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setEoMstActv((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setUsrIdModDt((Date)value);
            }
        }
        ,
        SsId {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getSsId();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setSsId((Integer)value);
            }
        }
        ,
        EoOrgId {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getEoOrgId();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setEoOrgId((String)value);
            }
        }
        ,
        EoHoOrgId {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getEoHoOrgId();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setEoHoOrgId((String)value);
            }
        }
        ,
        EoCldId {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getEoCldId();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setEoCldId((String)value);
            }
        }
        ,
        AppEo {
            public Object get(AppEoMstEOImpl obj) {
                return obj.getAppEo();
            }

            public void put(AppEoMstEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppEoMstEOImpl object);

        public abstract void put(AppEoMstEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    private static int NUMBER = Types.INTEGER;


    public static final int EOMSTSLOCID = AttributesEnum.EoMstSlocId.index();
    public static final int EOMSTID = AttributesEnum.EoMstId.index();
    public static final int EOMSTNM = AttributesEnum.EoMstNm.index();
    public static final int EOMSTALIAS = AttributesEnum.EoMstAlias.index();
    public static final int EOMSTLEGCD = AttributesEnum.EoMstLegCd.index();
    public static final int EOMSTACTV = AttributesEnum.EoMstActv.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int SSID = AttributesEnum.SsId.index();
    public static final int EOORGID = AttributesEnum.EoOrgId.index();
    public static final int EOHOORGID = AttributesEnum.EoHoOrgId.index();
    public static final int EOCLDID = AttributesEnum.EoCldId.index();
    public static final int APPEO = AttributesEnum.AppEo.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppEoMstEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("externalentitysetup.model.entities.AppEoMstEO");
    }

    /**
     * Gets the attribute value for EoMstSlocId, using the alias name EoMstSlocId.
     * @return the value of EoMstSlocId
     */
    public Integer getEoMstSlocId() {
        return (Integer)getAttributeInternal(EOMSTSLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoMstSlocId.
     * @param value value to set the EoMstSlocId
     */
    public void setEoMstSlocId(Integer value) {
        setAttributeInternal(EOMSTSLOCID, value);
    }

    /**
     * Gets the attribute value for EoMstId, using the alias name EoMstId.
     * @return the value of EoMstId
     */
    public Integer getEoMstId() {
        return (Integer)getAttributeInternal(EOMSTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoMstId.
     * @param value value to set the EoMstId
     */
    public void setEoMstId(Integer value) {
        setAttributeInternal(EOMSTID, value);
    }

    /**
     * Gets the attribute value for EoMstNm, using the alias name EoMstNm.
     * @return the value of EoMstNm
     */
    public String getEoMstNm() {
        return (String)getAttributeInternal(EOMSTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoMstNm.
     * @param value value to set the EoMstNm
     */
    public void setEoMstNm(String value) {
        setAttributeInternal(EOMSTNM, value);
    }

    /**
     * Gets the attribute value for EoMstAlias, using the alias name EoMstAlias.
     * @return the value of EoMstAlias
     */
    public String getEoMstAlias() {
        return (String)getAttributeInternal(EOMSTALIAS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoMstAlias.
     * @param value value to set the EoMstAlias
     */
    public void setEoMstAlias(String value) {
        setAttributeInternal(EOMSTALIAS, value);
    }

    /**
     * Gets the attribute value for EoMstLegCd, using the alias name EoMstLegCd.
     * @return the value of EoMstLegCd
     */
    public String getEoMstLegCd() {
        return (String)getAttributeInternal(EOMSTLEGCD);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoMstLegCd.
     * @param value value to set the EoMstLegCd
     */
    public void setEoMstLegCd(String value) {
        setAttributeInternal(EOMSTLEGCD, value);
    }

    /**
     * Gets the attribute value for EoMstActv, using the alias name EoMstActv.
     * @return the value of EoMstActv
     */
    public String getEoMstActv() {
        return (String)getAttributeInternal(EOMSTACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoMstActv.
     * @param value value to set the EoMstActv
     */
    public void setEoMstActv(String value) {
        setAttributeInternal(EOMSTACTV, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Date getUsrIdCreateDt() {
        return (Date)getAttributeInternal(USRIDCREATEDT);
    }


    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Date getUsrIdModDt() {
        return (Date)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Date value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for SsId, using the alias name SsId.
     * @return the value of SsId
     */
    public Integer getSsId() {
        return (Integer)getAttributeInternal(SSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SsId.
     * @param value value to set the SsId
     */
    public void setSsId(Integer value) {
        setAttributeInternal(SSID, value);
    }

    /**
     * Gets the attribute value for EoOrgId, using the alias name EoOrgId.
     * @return the value of EoOrgId
     */
    public String getEoOrgId() {
        return (String)getAttributeInternal(EOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoOrgId.
     * @param value value to set the EoOrgId
     */
    public void setEoOrgId(String value) {
        setAttributeInternal(EOORGID, value);
    }

    /**
     * Gets the attribute value for EoHoOrgId, using the alias name EoHoOrgId.
     * @return the value of EoHoOrgId
     */
    public String getEoHoOrgId() {
        return (String)getAttributeInternal(EOHOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoHoOrgId.
     * @param value value to set the EoHoOrgId
     */
    public void setEoHoOrgId(String value) {
        setAttributeInternal(EOHOORGID, value);
    }

    /**
     * Gets the attribute value for EoCldId, using the alias name EoCldId.
     * @return the value of EoCldId
     */
    public String getEoCldId() {
        return (String)getAttributeInternal(EOCLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoCldId.
     * @param value value to set the EoCldId
     */
    public void setEoCldId(String value) {
        setAttributeInternal(EOCLDID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAppEo() {
        return (RowIterator)getAttributeInternal(APPEO);
    }


    /**
     * @param eoMstSlocId key constituent
     * @param eoMstId key constituent
     * @param eoHoOrgId key constituent
     * @param eoCldId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer eoMstSlocId, Integer eoMstId, String eoHoOrgId, String eoCldId) {
        return new Key(new Object[]{eoMstSlocId, eoMstId, eoHoOrgId, eoCldId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        String ho_org_id=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String cld_id=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
       // String org_id=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer sloc_id =Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer usr_id =Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());

        
        setEoMstSlocId(sloc_id);
        setEoCldId(cld_id);
        setEoHoOrgId(ho_org_id); 
        //setEoOrgId(org_id);
        setUsrIdCreate(usr_id);
        
        
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if(operation==DML_INSERT){
            
        Integer eo_mst_id =Integer.parseInt(callStoredFunction(NUMBER, "get_max_eo_mst_id(?,?,?)", new Object[] { getEoCldId(), getEoMstSlocId(),getEoHoOrgId() }).toString());
        System.out.println("inside dodml---->"+eo_mst_id);
        setEoMstId(eo_mst_id);
        }
        if(operation == DML_UPDATE){
        Date dt = (Date)Date.getCurrentDate();
        setUsrIdModDt(dt);
        Integer usr_id =Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        setUsrIdMod(usr_id);
        }
        super.doDML(operation, e);
        
        
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            ExternalEntityAMImpl am = (ExternalEntityAMImpl)resolvElDC("ExternalEntityAMDataControl");
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    //System.out.println(bindVars[z] + "zzzzzzzzzzzzzzzzzzzzz");
                }
            }
            st.executeUpdate();
            //System.out.println("aaaaaaaaaaaaaaaaaaa");
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
    
    public String resolvEl(String data){
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message=valueExp.getValue(elContext).toString();
        return Message;
      }
}
