package appcntrysetup.model.services;

import appcntrysetup.model.entitiy.AppCntryLangEOImpl;
import appcntrysetup.model.services.common.AppCntrySetupAM;
import appcntrysetup.model.views.AppCntryCurrVOImpl;
import appcntrysetup.model.views.AppCntryCurrVORowImpl;
import appcntrysetup.model.views.AppCntryLangVOImpl;
import appcntrysetup.model.views.AppCntryLangVORowImpl;
import appcntrysetup.model.views.AppCntryVOImpl;

import java.sql.CallableStatement;

import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.faces.validator.ValidatorException;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 09 17:51:48 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppCntrySetupAMImpl extends ApplicationModuleImpl implements AppCntrySetupAM {
    /**
     * This is the default constructor (do not remove).
     */
    public AppCntrySetupAMImpl() {
    }

    /**
     * Container's getter for AppCntry1.
     * @return AppCntry1
     */
    public ViewObjectImpl getAppCntry1() {
        return (ViewObjectImpl)findViewObject("AppCntry1");
    }

    /**
     * Container's getter for AppCntryCurr1.
     * @return AppCntryCurr1
     */
    public ViewObjectImpl getAppCntryCurr1() {
        return (ViewObjectImpl)findViewObject("AppCntryCurr1");
    }

    /**
     * Container's getter for AppCntryLang1.
     * @return AppCntryLang1
     */
    public AppCntryLangVOImpl getAppCntryLang1() {
        return (AppCntryLangVOImpl)findViewObject("AppCntryLang1");
    }

    /**
     * Container's getter for AppCntryToAppCntryCurrVL1.
     * @return AppCntryToAppCntryCurrVL1
     */
    public ViewLinkImpl getAppCntryToAppCntryCurrVL1() {
        return (ViewLinkImpl)findViewLink("AppCntryToAppCntryCurrVL1");
    }

    /**
     * Container's getter for AppCntryToAppCntrylangVL1.
     * @return AppCntryToAppCntrylangVL1
     */
    public ViewLinkImpl getAppCntryToAppCntrylangVL1() {
        return (ViewLinkImpl)findViewLink("AppCntryToAppCntrylangVL1");
    }
   
   public void CntryDescValidator() {


        ViewObjectImpl appCntry1 = getAppCntry1();
        String cntrydescrp = (String)appCntry1.getCurrentRow().getAttribute("CntryDesc");
        Row[] filteredRowsInRange = appCntry1.getFilteredRows("CntryDesc",cntrydescrp);
    // departmentView1.getAllRowsInRange();
    int i=filteredRowsInRange.length;
    String msg=resolvElDCMsg("#{bundle['MSG.1093']}").toString();
    if(i>1){
    throw new ValidatorException(new
    FacesMessage(FacesMessage.SEVERITY_ERROR,msg,null));
    }
    }
    public Object resolvElDCMsg(String data) {
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           return valueExp.getValue(elContext);
       } 
 
    public int CntryDescValidator1() {
        /*System.out.println("in cntry desc validator");
        int i=0;
         ViewObjectImpl appCntry1 = getAppCntry1();
         
         if(appCntry1.getCurrentRow().getAttribute("CntryDesc") != null)
         {
             System.out.println("\n\n<---------Came in to the AMIMPL Class------>\n\n");
             String cntrydescrp = (String)appCntry1.getCurrentRow().getAttribute("CntryDesc");
            System.out.println("cntrydesc"+cntrydescrp);
            Row[] filteredRowsInRange = appCntry1.getFilteredRows("CntryDesc",cntrydescrp);
            System.out.println(filteredRowsInRange+"filter rows in range");
            // departmentView1.getAllRowsInRange();
            i=filteredRowsInRange.length;
            System.out.println(i+"value of i");
             //return i;
         }
        return i;
        */
        return 0;
}
    
    public void searchCriteria(String cntryDesc){
  AppCntryVOImpl vo = (AppCntryVOImpl)getAppCntry1();
    vo.setdescBindVar(cntryDesc);
   vo.executeQuery();
    
    }
    public void resetCriteria() {
        AppCntryVOImpl vo = (AppCntryVOImpl)getAppCntry1();
          vo.setdescBindVar(null);
          vo.executeQuery();
    }
    public int CurrencyDescValidator1() {


         ViewObjectImpl appCrncy1 = getAppCntryCurr1();
         int crncydescrp = Integer.parseInt(appCrncy1.getCurrentRow().getAttribute("CurrId").toString());
         Row[] filteredRowsInRange = appCrncy1.getFilteredRows("CurrId",crncydescrp);
     // departmentView1.getAllRowsInRange();
     int i=filteredRowsInRange.length;
    
     return i;
    }
    public int languageValidator() {
        ViewObjectImpl lang = getAppCntryLang1();
        System.out.println("lang : "+lang);
        System.out.println("Lang id is :"+(String)lang.getCurrentRow().getAttribute("LangId"));
        int langDesc=Integer.parseInt((String)lang.getCurrentRow().getAttribute("LangId"));
         Row[] filterRows=lang.getFilteredRows("LangId", langDesc);
        int i=filterRows.length;
         System.out.println("Length :"+i);
         
         return i;
    }
    public int languageValidator1(String langid) {
        int i=0;
        AppCntryLangVOImpl appCntryLang1 =(AppCntryLangVOImpl) this.getAppCntryLang1();
        AppCntryLangVORowImpl currentRow = (AppCntryLangVORowImpl)appCntryLang1.getCurrentRow();
        RowSet appCntryLangVO1 = currentRow.getLOVAppCntryLangVO1();
        Row[] filteredRows = appCntryLangVO1.getFilteredRows("LangDesc", langid);
        int langId = 0;
        if(filteredRows.length>0){
            langId = (Integer)filteredRows[0].getAttribute("LangId");
            System.out.println("langid is "+langId);
                
        }
    
        RowSetIterator createRowSetIterator = appCntryLang1.createRowSetIterator(null);
        while(createRowSetIterator.hasNext()){
            
            Row next = createRowSetIterator.next();
            if(next != currentRow){
                System.out.println((Integer)next.getAttribute("LangId"));
            //    System.out.println( (Integer)next.getAttribute("LangId"));
                
                System.out.println(((Integer)next.getAttribute("LangId")+ " == "+ langId)+" condition:  "+((Integer)next.getAttribute("LangId") == langId));
                int num=(Integer)next.getAttribute("LangId");
                if(num == langId){
                   System.out.println( (Integer)next.getAttribute("LangId")+"in if of AM");
                    i=1;
                }
                
            }
           
        }

      /*   ViewObjectImpl lang = getAppCntryLang1();
        System.out.println("lang : "+langid);
     //   System.out.println("Lang id is :"+(String)lang.getCurrentRow().getAttribute("LangId"));
      //  int langDesc=Integer.parseInt((String)lang.getCurrentRow().getAttribute("LangId"));
         Row[] filterRows=lang.getFilteredRows("LangId", langid);
        int i=filterRows.length;*/
         System.out.println("Length :"+i);
         
         return i; 



    }
    public int CurrencyValidator1(String currDesc) {
        int i=0;
        AppCntryCurrVOImpl appCntryCurr1 =(AppCntryCurrVOImpl) this.getAppCntryCurr1();
        AppCntryCurrVORowImpl currentRow = (AppCntryCurrVORowImpl)getAppCntryCurr1().getCurrentRow();
        RowSet appCntryCurrVO1 = currentRow.getLOVAppCntryCurrVO1();
        Row[] filteredRows = appCntryCurrVO1.getFilteredRows("GlblCurrDesc", currDesc);
        int CurrencyId = 0;
        if(filteredRows.length>0){
            CurrencyId = (Integer)filteredRows[0].getAttribute("GlblCurrId");
            System.out.println("langid is "+CurrencyId);
                
        }
        
        RowSetIterator createRowSetIterator = appCntryCurr1.createRowSetIterator(null);
        while(createRowSetIterator.hasNext()){
            
            Row next = createRowSetIterator.next();
            if(next != currentRow){
                System.out.println((Integer)next.getAttribute("CurrId"));
                
                System.out.println(((Integer)next.getAttribute("CurrId")+ " == "+ CurrencyId)+" condition:  "+((Integer)next.getAttribute("CurrId") == CurrencyId));
                int num=(Integer)next.getAttribute("CurrId");
                if(num == CurrencyId){
                   System.out.println( (Integer)next.getAttribute("CurrId")+"in if of AM");
                    i=1;
                }
                
            }
           
        }

       
         System.out.println("Length :"+i);
         
         return i; 



        }
    public String resolvEl(String data) {
         FacesContext fc = FacesContext.getCurrentInstance();
         Application app = fc.getApplication();
         ExpressionFactory elFactory = app.getExpressionFactory();
         ELContext elContext = fc.getELContext();
         ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
         String msg = valueExp.getValue(elContext).toString();
         return msg;
     }
    public static int VARCHAR = Types.VARCHAR;
      String add_mode = null;
      String edit_mode = null;
      String view_mode = null;
      String del_mode = null;
      protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) throws SQLException {
          CallableStatement st = null;
          try {
              st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
              st.registerOutParameter(1, sqlReturnType);
              if (bindVars != null) {
                  for (int z = 0; z < bindVars.length; z++) {
                      st.setObject(z + 2, bindVars[z]);
                  }
              }
              st.registerOutParameter(7, VARCHAR);
              st.registerOutParameter(8, VARCHAR);
              st.registerOutParameter(9, VARCHAR);
              st.registerOutParameter(10, VARCHAR);
              st.executeUpdate();
              try {
                  setAdd_mode(st.getObject(7).toString());
                  setEdit_mode((st.getObject(8).toString()));
                  setView_mode(st.getObject(9).toString());
                  setDel_mode(st.getObject(10).toString());
              } catch (NullPointerException e) {
                  System.out.println(e);
                  e.printStackTrace();
              }
              return st.getObject(1);

          } catch (SQLException e) {
              throw new JboException(e);
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {

                  }
              }
          }
      }


    public void setAdd_mode(String add_mode) {
           this.add_mode = add_mode;
       }

       public String getAdd_mode() {
           return add_mode;
       }

       public void setEdit_mode(String edit_mode) {
           this.edit_mode = edit_mode;
       }

       public String getEdit_mode() {
           return edit_mode;
       }

       public void setView_mode(String view_mode) {
           this.view_mode = view_mode;
       }

       public String getView_mode() {
           return view_mode;
       }

       public void setDel_mode(String del_mode) {
           this.del_mode = del_mode;
       }

       public String getDel_mode() {
           return del_mode;
       }

    public Integer on_load_page() throws SQLException {  int count = 0;
              String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
              Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
              String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
              Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
              callStoredFunction(VARCHAR,"fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                         new Object[] { cld_id, sloc_id, org_id, 1,usr_id});
              String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
              if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
              {            count = 1;
                  }
              else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
              {
                  count = 1;
                  }
              else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
              {
                 count = 1; 
                  }
              else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
              {
                 count = 1; 
                  }
               else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
              {
                 count = 1; 
                  }
              Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
              paramMap.put("PARAM_PG_ADD_MD", add_mode); 
              paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
              paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
              paramMap.put("PARAM_PG_DEL_MD", del_mode); 
              String addMode =  resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString(); 
               String editMode =  resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString(); 
               String viewMode =  resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString(); 
               String deleteMode =  resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();       
        return count;
          }
    
    public boolean validateCntryAction(String Name) {
        System.out.println("\n\n--------------Came in Validator ----------\n\n");
        ViewObjectImpl appCntry1 = this.getAppCntry1();
        Row currentRow = appCntry1.getCurrentRow();

        //Row[] filteredRows = appCntry1.getFilteredRows("CntryDesc", currentRow.getAttribute("CntryDesc"));
            RowSetIterator itr = appCntry1.createRowSetIterator(null);
            
            while(itr.hasNext()) {
                System.out.println("____________________________________________1");
                Row next = itr.next();
                System.out.println("____________________________________________2");
                if(currentRow != next) {
                    System.out.println(next.getAttribute("CntryDesc").toString()+" : "+Name);
                    System.out.println("____________________________________________3");
                    if(next.getAttribute("CntryDesc").toString().equalsIgnoreCase(Name)) {
                        System.out.println("____________________________________________found");
                        return true;
                    }
                    
                }
            }
            itr.closeRowSetIterator();
        System.out.println("\n\n--------------country not match ----------\n\n");
            return false;
    }
}
