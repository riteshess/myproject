package appservloc.model.module;

import appservloc.model.module.common.AppServrLocAM;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 05 12:25:03 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppServrLocAMImpl extends ApplicationModuleImpl implements AppServrLocAM {
    /**
     * This is the default constructor (do not remove).
     */
    public AppServrLocAMImpl() {
    }

    /**
     * Container's getter for AppServrLoc1.
     * @return AppServrLoc1
     */
    public ViewObjectImpl getAppServrLoc1() {
        return (ViewObjectImpl)findViewObject("AppServrLoc1");
    }

    /**
     * Container's getter for AppSecUsr1.
     * @return AppSecUsr1
     */
    public ViewObjectImpl getAppSecUsr1() {
        return (ViewObjectImpl)findViewObject("AppSecUsr1");
    }
    
    public Integer on_load_page()
           {  int count = 0;
           String addMode =  resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString(); 
           String editMode =  resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString(); 
           String viewMode =  resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString(); 
           String deleteMode =  resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString(); 
           String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
           if(addMode.equalsIgnoreCase("Y") == false && addMode.equalsIgnoreCase("N") == false)
           {            count = 1;
               }
           else if(editMode.equalsIgnoreCase("Y") == false && editMode.equalsIgnoreCase("N") == false)
           {
               count = 1;
               }
           else if(viewMode.equalsIgnoreCase("Y") == false && viewMode.equalsIgnoreCase("N") == false)
           {
              count = 1; 
               }
           else if (deleteMode.equalsIgnoreCase("Y") == false && deleteMode.equalsIgnoreCase("N") == false)
           {
              count = 1; 
               }
            else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
           {
              count = 1; 
               }
    
     return count;
       }
    public String resolvEl(String data) {
                FacesContext fc = FacesContext.getCurrentInstance();
                Application app = fc.getApplication();
                ExpressionFactory elFactory = app.getExpressionFactory();
                ELContext elContext = fc.getELContext();
                ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
                String Message = valueExp.getValue(elContext).toString();
                return Message;
            }

}
