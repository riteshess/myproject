package organizationApp.model.module;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import organizationApp.model.module.common.OrgAppAM;
import organizationApp.model.view.AddUsrCldSlocVOImpl;
import organizationApp.model.view.AppSecUsrRoleLnkImpl;
import organizationApp.model.view.FyTypeVOImpl;
import organizationApp.model.view.LOVCOAVOImpl;
import organizationApp.model.view.LOVDocResFreqVOImpl;
import organizationApp.model.view.LOV_TrfVOImpl;
import organizationApp.model.view.LovCountryVOImpl;
import organizationApp.model.view.LovOrgTypeVOImpl;
import organizationApp.model.view.OrgDocTypResetVOImpl;
import organizationApp.model.view.OrgDocTypeVOImpl;
import organizationApp.model.view.OrgDocVOImpl;
import organizationApp.model.view.OrgFyVOImpl;
import organizationApp.model.view.OrgOthDtlVOImpl;
import organizationApp.model.view.OrgSecUsrVOImpl;
import organizationApp.model.view.OrgTypVOImpl;
import organizationApp.model.view.OrgVOImpl;
import organizationApp.model.view.UsrCldSlocVOImpl;
import organizationApp.model.view.LovAddressForTransVOImpl;
import organizationApp.model.view.OrgVORowImpl;
import organizationApp.model.view.UsrCldSlocVORowImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jun 16 11:51:31 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrgAppAMImpl extends ApplicationModuleImpl {


    Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    String glbl_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    String glbl_hoorg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");


    /**
     * This is the default constructor (do not remove).
     */
    public OrgAppAMImpl() {
    }


    /**
     * Container's getter for LovOrgType1.
     * @return LovOrgType1
     */
    public ViewObjectImpl getLovOrgType1() {
        return (ViewObjectImpl)findViewObject("LovOrgType1");
    }

    /**
     * Container's getter for Org2.
     * @return Org2
     */
    public OrgVOImpl getOrg2() {
        return (OrgVOImpl)findViewObject("Org2");
    }


    /**
     * Container's getter for OrgTypeToOrgVL1.
     * @return OrgTypeToOrgVL1
     */
    public ViewLinkImpl getOrgTypeToOrgVL1() {
        return (ViewLinkImpl)findViewLink("OrgTypeToOrgVL1");
    }


    /**
     * Container's getter for LOVDocResFreqVO1.
     * @return LOVDocResFreqVO1
     */
    public ViewObjectImpl getLOVDocResFreqVO1() {
        return (ViewObjectImpl)findViewObject("LOVDocResFreqVO1");
    }

    /**
     * Container's getter for LOVCOAVO1.
     * @return LOVCOAVO1
     */
    public LOVCOAVOImpl getLOVCOAVO1() {
        return (LOVCOAVOImpl)findViewObject("LOVCOAVO1");
    }

    /**
     * Container's getter for LovCountryVO1.
     * @return LovCountryVO1
     */
    public ViewObjectImpl getLovCountryVO1() {
        return (ViewObjectImpl)findViewObject("LovCountryVO1");
    }


    /**
     * Container's getter for OrgOthDtlVO1.
     * @return OrgOthDtlVO1
     */
    public ViewObjectImpl getOrgOthDtlVO1() {
        return (ViewObjectImpl)findViewObject("OrgOthDtlVO1");
    }

    /**
     * Container's getter for ViewLinkVL1.
     * @return ViewLinkVL1
     */
    public ViewLinkImpl getViewLinkVL1() {
        return (ViewLinkImpl)findViewLink("ViewLinkVL1");
    }


    /**
     * Container's getter for OrgTypVO1.
     * @return OrgTypVO1
     */
    public ViewObjectImpl getOrgTypVO1() {
        return (ViewObjectImpl)findViewObject("OrgTypVO1");
    }

    public void exceptionHandeler() {
        System.out.println("Inside Handeler");
        StringBuilder msg = new StringBuilder();
        msg.append("<html><body><p><b>Failed to load content-Network Error</b></p>");
        msg.append("<p><b>Data Processing Failed-</b></p>");
        msg.append("<ul><li>Reload the page</li><li>Or close tab</li><li>Something went wrong-Contact ESS!</li></ul>");
        msg.append("</body></html>");
        FacesMessage message = new FacesMessage(msg.toString());
        message.setSeverity(FacesMessage.SEVERITY_WARN);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, message);

    }


    /**
     * Container's getter for UsrCldSloc4.
     * @return UsrCldSloc4
     */
    public ViewObjectImpl getUsrCldSloc4() {
        return (ViewObjectImpl)findViewObject("UsrCldSloc4");
    }

    /**
     * Container's getter for OrgToUsrIdVL2.
     * @return OrgToUsrIdVL2
     */
    public ViewLinkImpl getOrgToUsrIdVL2() {
        return (ViewLinkImpl)findViewLink("OrgToUsrIdVL2");
    }

    /**
     * Container's getter for AddUsrCldSloc1.
     * @return AddUsrCldSloc1
     */
    public AddUsrCldSlocVOImpl getAddUsrCldSloc1() {
        return (AddUsrCldSlocVOImpl)findViewObject("AddUsrCldSloc1");
    }

    /**
     * Container's getter for OrgSecUsr1.
     * @return OrgSecUsr1
     */
    public ViewObjectImpl getOrgSecUsr1() {
        return (ViewObjectImpl)findViewObject("OrgSecUsr1");
    }


    /**
     * Container's getter for FyType1.
     * @return FyType1
     */
    public ViewObjectImpl getFyType1() {
        return (ViewObjectImpl)findViewObject("FyType1");
    }

    /**
     * Container's getter for LOV_Trf1.
     * @return LOV_Trf1
     */
    public ViewObjectImpl getLOV_Trf1() {
        return (ViewObjectImpl)findViewObject("LOV_Trf1");
    }


    /**
     * Container's getter for OrgFy2.
     * @return OrgFy2
     */
    public ViewObjectImpl getOrgFy2() {
        return (ViewObjectImpl)findViewObject("OrgFy2");
    }

    /**
     * Container's getter for orgToFyNewVL1.
     * @return orgToFyNewVL1
     */
    public ViewLinkImpl getorgToFyNewVL1() {
        return (ViewLinkImpl)findViewLink("orgToFyNewVL1");
    }

    public void getItemForAddUsrCldSloc() {
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        ViewObjectImpl vo = this.getUsrCldSloc4();
        vo.setNamedWhereClauseParam("bindCldId", glbl_cld_id);
        vo.setNamedWhereClauseParam("bindSlocId", glbl_sloc_id);
        vo.executeQuery();

    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }


    /**
     * Container's getter for LovCurrencyTrans1.
     * @return LovCurrencyTrans1
     */
    public ViewObjectImpl getLovCurrencyTrans1() {
        return (ViewObjectImpl)findViewObject("LovCurrencyTrans1");
    }

    /**
     * Container's getter for LovAddressForTrans1.
     * @return LovAddressForTrans1
     */
    public LovAddressForTransVOImpl getLovAddressForTrans1() {
        return (LovAddressForTransVOImpl)findViewObject("LovAddressForTrans1");
    }

    /**
     * Container's getter for LovAddressForTrans2.
     * @return LovAddressForTrans2
     */
    public LovAddressForTransVOImpl getLovAddressForTrans2() {
        return (LovAddressForTransVOImpl)findViewObject("LovAddressForTrans2");
    }

    /**
     * Container's getter for AppSecUsrRoleLnk1.
     * @return AppSecUsrRoleLnk1
     */
    public ViewObjectImpl getAppSecUsrRoleLnk1() {
        return (ViewObjectImpl)findViewObject("AppSecUsrRoleLnk1");
    }


    public Integer findroleLink() {

        System.out.println("inside findroleLink method");
        Integer role = 0;
        String orgId = null;
        Long usrId = null;
        // String ordId=((OrgVORowImpl)((OrgVOImpl)this.getOrg2().getCurrentRow())).getOrgId();
        OrgVOImpl vo = (OrgVOImpl)this.getOrg2();
        if (vo != null) {
            OrgVORowImpl cur = (OrgVORowImpl)vo.getCurrentRow();
            if (cur != null) {
                orgId = cur.getOrgId();

            }
        }

        UsrCldSlocVOImpl usrVo = (UsrCldSlocVOImpl)this.getUsrCldSloc4();
        if (usrVo != null) {
            UsrCldSlocVORowImpl cur = (UsrCldSlocVORowImpl)usrVo.getCurrentRow();
            if (cur != null) {
                usrId = cur.getUsrId();
            }
        }

        AppSecUsrRoleLnkImpl linkVo = (AppSecUsrRoleLnkImpl)this.getAppSecUsrRoleLnk1();

        if (linkVo != null) {
            //System.out.println("Inside link VO");

            linkVo.setBindCloudID(this.glbl_cld_id);
            linkVo.setBindSlocId(this.glbl_sloc_id);

            if (!(orgId.equals(null) && usrId.equals(null))) {

                linkVo.setBindOrgId(orgId);
                linkVo.setBindUsrId(usrId);
                linkVo.executeQuery();

                role = linkVo.getRowCount();


                linkVo.setBindOrgId(null);
                linkVo.setBindUsrId(null);
                linkVo.executeQuery();
            }
        }


        System.out.println("Usr ID:" + usrId + "Oog ID" + orgId + "Sloc ID" + this.glbl_sloc_id + "Cloud Id" +
                           glbl_cld_id);
        return role;
    }


    /**
     * Container's getter for OrgDocVO1.
     * @return OrgDocVO1
     */
    public ViewObjectImpl getOrgDocVO1() {
        return (ViewObjectImpl)findViewObject("OrgDocVO1");
    }

    /**
     * Container's getter for OrgTOOrgDocVL1.
     * @return OrgTOOrgDocVL1
     */
    public ViewLinkImpl getOrgTOOrgDocVL1() {
        return (ViewLinkImpl)findViewLink("OrgTOOrgDocVL1");
    }

    public void delDocNm() {
        ViewObjectImpl docvo = this.getOrgDocVO1();
        ViewObjectImpl doctypvo = this.getOrgDocTypeVO1();
        RowSetIterator itr = doctypvo.createRowSetIterator(null);
        if (doctypvo.getEstimatedRowCount() > 0) {
            itr.next().remove();
        }
        docvo.getCurrentRow().remove();
        // getDBTransaction().commit();
        docvo.executeQuery();
        doctypvo.executeQuery();

    }

    /**
     * Container's getter for LovDocId1.
     * @return LovDocId1
     */
    public ViewObjectImpl getLovDocId1() {
        return (ViewObjectImpl)findViewObject("LovDocId1");
    }

    /**
     * Container's getter for OrgDocTypeVO1.
     * @return OrgDocTypeVO1
     */
    public ViewObjectImpl getOrgDocTypeVO1() {
        return (ViewObjectImpl)findViewObject("OrgDocTypeVO1");
    }

    /**
     * Container's getter for OrgDocToOrgDocTypeVL1.
     * @return OrgDocToOrgDocTypeVL1
     */
    public ViewLinkImpl getOrgDocToOrgDocTypeVL1() {
        return (ViewLinkImpl)findViewLink("OrgDocToOrgDocTypeVL1");
    }

    /**
     * Container's getter for LovDocNm1.
     * @return LovDocNm1
     */
    public ViewObjectImpl getLovDocNm1() {
        return (ViewObjectImpl)findViewObject("LovDocNm1");
    }

    /**
     * Container's getter for OrgDocTypResetVO1.
     * @return OrgDocTypResetVO1
     */
    public ViewObjectImpl getOrgDocTypResetVO1() {
        return (ViewObjectImpl)findViewObject("OrgDocTypResetVO1");
    }

    /**
     * Container's getter for OrgDocTypToOrgDocResetVL1.
     * @return OrgDocTypToOrgDocResetVL1
     */
    public ViewLinkImpl getOrgDocTypToOrgDocResetVL1() {
        return (ViewLinkImpl)findViewLink("OrgDocTypToOrgDocResetVL1");
    }

    /**
     * Container's getter for LovDocTypNmVO1.
     * @return LovDocTypNmVO1
     */
    public ViewObjectImpl getLovDocTypNmVO1() {
        return (ViewObjectImpl)findViewObject("LovDocTypNmVO1");
    }

    public void delDocType() {
        ViewObjectImpl doctypresetvo = this.getOrgDocTypResetVO1();
        ViewObjectImpl doctypvo = this.getOrgDocTypeVO1();
        Row curr = doctypvo.getCurrentRow();
        RowSetIterator itr = doctypresetvo.createRowSetIterator(null);
        if (doctypresetvo.getEstimatedRowCount() > 0) {
            while (itr.hasNext()) {
                itr.next().remove();
            }
        }
        curr.remove();
        //getDBTransaction().commit();
        doctypresetvo.executeQuery();
        doctypvo.executeQuery();
    }

    /**
     * Container's getter for OrgDocFyVO1.
     * @return OrgDocFyVO1
     */
    public ViewObjectImpl getOrgDocFyVO1() {
        return (ViewObjectImpl)findViewObject("OrgDocFyVO1");
    }

    /**
     * Container's getter for OrgFyToOrgDocFyVL1.
     * @return OrgFyToOrgDocFyVL1
     */
    public ViewLinkImpl getOrgFyToOrgDocFyVL1() {
        return (ViewLinkImpl)findViewLink("OrgFyToOrgDocFyVL1");
    }

    /**
     * Container's getter for LovDocTypNmForOrgDocFy1.
     * @return LovDocTypNmForOrgDocFy1
     */
    public ViewObjectImpl getLovDocTypNmForOrgDocFy1() {
        return (ViewObjectImpl)findViewObject("LovDocTypNmForOrgDocFy1");
    }
    private static int VARCHAR = Types.VARCHAR;

    /**
     * Container's getter for LovResetIdForOrgDocFy1.
     * @return LovResetIdForOrgDocFy1
     */
    public ViewObjectImpl getLovResetIdForOrgDocFy1() {
        return (ViewObjectImpl)findViewObject("LovResetIdForOrgDocFy1");
    }

    public String chkEditorDelforOrgDocFy() {
        ViewObjectImpl orgdocfyvo = this.getOrgDocFyVO1();
        Integer fy_id = Integer.parseInt(orgdocfyvo.getCurrentRow().getAttribute("OrgFyId").toString());
        Integer doc_id = Integer.parseInt(orgdocfyvo.getCurrentRow().getAttribute("OrgDocId").toString());
        Integer doc_typ_id = Integer.parseInt(orgdocfyvo.getCurrentRow().getAttribute("OrgDocTypeId").toString());
        /* System.out.println("glbl_cld_id   " + glbl_cld_id);
        System.out.println("glbl_sloc_id   " + glbl_sloc_id);
        System.out.println("glbl_org_id   " + glbl_org_id);
        System.out.println("fy_id   " + fy_id);
        System.out.println("doc_id   " + doc_id);
        System.out.println("doc_typ_id   " + doc_typ_id); */
        return (String)callStoredFunction(VARCHAR, "APP.FN_CHK_ORG_DOC_FY_EDIT_ALLOW (?,?,?,?,?,?)",
                                          new Object[] { glbl_cld_id, glbl_sloc_id, glbl_org_id, fy_id, doc_id,
                                                         doc_typ_id });
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            //    int end = e.getMessage().indexOf("\n");
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    /**
     * Container's getter for OrgVO1.
     * @return OrgVO1
     */
    public OrgVOImpl getOrgVO1() {
        return (OrgVOImpl)findViewObject("OrgVO1");
    }
   public String opBalChkAllow() {
       String hoorgId=null;
       ViewObjectImpl orgfyvo=this.getOrgFy2();
       ViewObjectImpl orgvo=this.getOrg2();
       
       Integer fyid=Integer.parseInt(orgfyvo.getCurrentRow().getAttribute("OrgFyId").toString());
       String orgId=orgvo.getCurrentRow().getAttribute("OrgId").toString();
       if(orgvo.getCurrentRow().getAttribute("OrgIdParent")!=null)
        hoorgId=orgvo.getCurrentRow().getAttribute("OrgIdParent").toString();
       System.out.println("orgidd innnnnnnnnnnn"+orgId);
       System.out.println("parent   orgidd innnnnnnnnnnn"+hoorgId);
       System.out.println("fyid in [passs in function is==="+fyid);
       String res=(String)callStoredFunction(VARCHAR, "FIN.FN_CHK_PFY_OP_BAL_ED_ALLOW(?,?,?,?,?)",
                                         new Object[] { glbl_cld_id, glbl_sloc_id,hoorgId, orgId,fyid });
      System.out.println("value of result isss in amimpllll"+res);
        return res;
   }
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;
    public Integer on_load_page() {
        System.out.println("function on page load is called");
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction1(VARCHAR, "APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                            new Object[] { cld_id, sloc_id, org_id, 2015, usr_id });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);
        String addMode = resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString();
        String editMode = resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString();
        String viewMode = resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString();
        String deleteMode = resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();
        return count;
    }
    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }
}
