package tncApp.model.entity;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu May 17 12:14:48 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppTncEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(AppTncEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(AppTncEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        TncId {
            public Object get(AppTncEOImpl obj) {
                return obj.getTncId();
            }

            public void put(AppTncEOImpl obj, Object value) {
                obj.setTncId((Integer)value);
            }
        }
        ,
        TncDesc {
            public Object get(AppTncEOImpl obj) {
                return obj.getTncDesc();
            }

            public void put(AppTncEOImpl obj, Object value) {
                obj.setTncDesc((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(AppTncEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(AppTncEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(AppTncEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(AppTncEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(AppTncEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(AppTncEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(AppTncEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(AppTncEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CldId {
            public Object get(AppTncEOImpl obj) {
                return obj.getCldId();
            }

            public void put(AppTncEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        OrgId {
            public Object get(AppTncEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(AppTncEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppTncEOImpl object);

        public abstract void put(AppTncEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int TNCID = AttributesEnum.TncId.index();
    public static final int TNCDESC = AttributesEnum.TncDesc.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppTncEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("tncApp.model.entity.AppTncEO");
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for TncId, using the alias name TncId.
     * @return the value of TncId
     */
    public Integer getTncId() {
        return (Integer)getAttributeInternal(TNCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TncId.
     * @param value value to set the TncId
     */
    public void setTncId(Integer value) {
        setAttributeInternal(TNCID, value);
    }

    /**
     * Gets the attribute value for TncDesc, using the alias name TncDesc.
     * @return the value of TncDesc
     */
    public String getTncDesc() {
        return (String)getAttributeInternal(TNCDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for TncDesc.
     * @param value value to set the TncDesc
     */
    public void setTncDesc(String value) {
        setAttributeInternal(TNCDESC, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Date getUsrIdCreateDt() {
        return (Date)getAttributeInternal(USRIDCREATEDT);
    }
    public void setUsrIdCreateDt(Date value) {
        setAttributeInternal(USRIDCREATEDT, value);
     }
    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Date getUsrIdModDt() {
        return (Date)getAttributeInternal(USRIDMODDT);
    }
    public void setUsrIdModDt(Date value) {
        setAttributeInternal(USRIDMODDT, value);
    }
    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param slocId key constituent
     * @param tncId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer slocId, Integer tncId) {
        return new Key(new Object[]{slocId, tncId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        Integer  UserId =Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
          setUsrIdCreate(UserId);

        setTncId(getMaxTncId());
        super.create(attributeList);
    }
    public String resolvEl(String data){
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message=valueExp.getValue(elContext).toString();
        return Message;
      }
    private static int INTEGER = Types.INTEGER;
                private static int DATE = Types.DATE;
                private static int STRING = Types.VARCHAR;
              
                protected Object callStoredFunction(int sqlReturnType, String stmt,
                                                    Object[] bindVars) {
                  CallableStatement st = null;
                  try {
                    // 1. Create a JDBC CallabledStatement 
                    st = getDBTransaction().createCallableStatement(
                           "begin ? := "+stmt+";end;",0);
                    // 2. Register the first bind variable for the return value
                    st.registerOutParameter(1, sqlReturnType);
                    if (bindVars != null) {
                      // 3. Loop over values for the bind variables passed in, if any
                      for (int z = 0; z < bindVars.length; z++) {
                        // 4. Set the value of user-supplied bind vars in the stmt
                        st.setObject(z + 2, bindVars[z]);
                      }
                    }
                    // 5. Set the value of user-supplied bind vars in the stmt
                    st.executeUpdate();
                    // 6. Return the value of the first bind variable
                    return st.getObject(1);
                  }
                  catch (SQLException e) {
                    throw new JboException(e);
                  }
                  finally {
                    if (st != null) {
                      try {
                        // 7. Close the statement
                        st.close();
                      }
                      catch (SQLException e){}
                    }
                  }
                }
                
       public Integer getMaxTncId() {
           
            return(Integer)callStoredFunction(INTEGER, "APP.FN_GET_MAX_TNC_ID()",
                                                               new Object[]{});
                    
                } 
    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if(operation==DML_UPDATE){
        Integer  UserId =Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
         Date currdt=(Date)Date.getCurrentDate();
         setUsrIdMod(UserId);
         setUsrIdModDt(currdt);
               }  
        super.doDML(operation, e);
    }
}
