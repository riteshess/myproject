package globalAttributeSetup.model.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 14 11:12:13 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppDsAttEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        AttId {
            public Object get(AppDsAttEOImpl obj) {
                return obj.getAttId();
            }

            public void put(AppDsAttEOImpl obj, Object value) {
                obj.setAttId((Integer)value);
            }
        }
        ,
        AttNm {
            public Object get(AppDsAttEOImpl obj) {
                return obj.getAttNm();
            }

            public void put(AppDsAttEOImpl obj, Object value) {
                obj.setAttNm((String)value);
            }
        }
        ,
        AttTypeId {
            public Object get(AppDsAttEOImpl obj) {
                return obj.getAttTypeId();
            }

            public void put(AppDsAttEOImpl obj, Object value) {
                obj.setAttTypeId((Integer)value);
            }
        }
        ,
        AttResv {
            public Object get(AppDsAttEOImpl obj) {
                return obj.getAttResv();
            }

            public void put(AppDsAttEOImpl obj, Object value) {
                obj.setAttResv((String)value);
            }
        }
        ,
        AttActv {
            public Object get(AppDsAttEOImpl obj) {
                return obj.getAttActv();
            }

            public void put(AppDsAttEOImpl obj, Object value) {
                obj.setAttActv((String)value);
            }
        }
        ,
        AttMref {
            public Object get(AppDsAttEOImpl obj) {
                return obj.getAttMref();
            }

            public void put(AppDsAttEOImpl obj, Object value) {
                obj.setAttMref((String)value);
            }
        }
        ,
        AppDsAttType {
            public Object get(AppDsAttEOImpl obj) {
                return obj.getAppDsAttType();
            }

            public void put(AppDsAttEOImpl obj, Object value) {
                obj.setAppDsAttType((EntityImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppDsAttEOImpl object);

        public abstract void put(AppDsAttEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int ATTID = AttributesEnum.AttId.index();
    public static final int ATTNM = AttributesEnum.AttNm.index();
    public static final int ATTTYPEID = AttributesEnum.AttTypeId.index();
    public static final int ATTRESV = AttributesEnum.AttResv.index();
    public static final int ATTACTV = AttributesEnum.AttActv.index();
    public static final int ATTMREF = AttributesEnum.AttMref.index();
    public static final int APPDSATTTYPE = AttributesEnum.AppDsAttType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppDsAttEOImpl() {
    }

    /**
     * Gets the attribute value for AttId, using the alias name AttId.
     * @return the value of AttId
     */
    public Integer getAttId() {
        return (Integer)getAttributeInternal(ATTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttId.
     * @param value value to set the AttId
     */
    public void setAttId(Integer value) {
        setAttributeInternal(ATTID, value);
    }

    /**
     * Gets the attribute value for AttNm, using the alias name AttNm.
     * @return the value of AttNm
     */
    public String getAttNm() {
        return (String)getAttributeInternal(ATTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttNm.
     * @param value value to set the AttNm
     */
    public void setAttNm(String value) {
        setAttributeInternal(ATTNM, value);
    }

    /**
     * Gets the attribute value for AttTypeId, using the alias name AttTypeId.
     * @return the value of AttTypeId
     */
    public Integer getAttTypeId() {
        return (Integer)getAttributeInternal(ATTTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttTypeId.
     * @param value value to set the AttTypeId
     */
    public void setAttTypeId(Integer value) {
        setAttributeInternal(ATTTYPEID, value);
    }

    /**
     * Gets the attribute value for AttResv, using the alias name AttResv.
     * @return the value of AttResv
     */
    public String getAttResv() {
        return (String)getAttributeInternal(ATTRESV);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttResv.
     * @param value value to set the AttResv
     */
    public void setAttResv(String value) {
        setAttributeInternal(ATTRESV, value);
    }

    /**
     * Gets the attribute value for AttActv, using the alias name AttActv.
     * @return the value of AttActv
     */
    public String getAttActv() {
        return (String)getAttributeInternal(ATTACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttActv.
     * @param value value to set the AttActv
     */
    public void setAttActv(String value) {
        setAttributeInternal(ATTACTV, value);
    }

    /**
     * Gets the attribute value for AttMref, using the alias name AttMref.
     * @return the value of AttMref
     */
    public String getAttMref() {
        return (String)getAttributeInternal(ATTMREF);
    }

    /**
     * Sets <code>value</code> as the attribute value for AttMref.
     * @param value value to set the AttMref
     */
    public void setAttMref(String value) {
        setAttributeInternal(ATTMREF, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getAppDsAttType() {
        return (EntityImpl)getAttributeInternal(APPDSATTTYPE);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setAppDsAttType(EntityImpl value) {
        setAttributeInternal(APPDSATTTYPE, value);
    }

    /**
     * @param attId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer attId) {
        return new Key(new Object[]{attId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("globalAttributeSetup.model.entity.AppDsAttEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {

        super.doDML(operation, e);
    }
}
