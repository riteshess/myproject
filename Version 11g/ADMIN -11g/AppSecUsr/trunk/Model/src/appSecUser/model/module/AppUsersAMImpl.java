package appSecUser.model.module;


import appSecUser.model.module.common.AppUsersAM;
import appSecUser.model.view.AppSecPrfVOImpl;
import appSecUser.model.view.AppSecUsrCld1VOImpl;
import appSecUser.model.view.AppSecUsrCld1VORowImpl;
import appSecUser.model.view.AppSecUsrCldVOImpl;
import appSecUser.model.view.AppSecUsrGrpLnkVOImpl;
import appSecUser.model.view.AppSecUsrMailIdVOImpl;
import appSecUser.model.view.AppSecUsrMailIdVORowImpl;
import appSecUser.model.view.AppSecUsrRoleLnkVOImpl;
import appSecUser.model.view.AppSecUsrRoleLnkVORowImpl;
import appSecUser.model.view.AppSecUsrVOImpl;

import appSecUser.model.view.AppSecUsrVORowImpl;


import appSecUser.model.view.LovAppSecUsrImpl;
import appSecUser.model.view.LovAppSecUsrRowImpl;


import appSecUser.model.view.OrgSecUsrVOImpl;
import appSecUser.model.view.WarehouseVOImpl;
import appSecUser.model.view.WhSecUsrVOImpl;

import java.lang.System;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Timestamp;

import java.sql.Types;

import java.util.Iterator;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import javax.naming.Context;
import javax.naming.InitialContext;

import javax.naming.NamingException;

import javax.sql.DataSource;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 12 18:20:52 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppUsersAMImpl extends ApplicationModuleImpl implements AppUsersAM {
    /**
     * This is the default constructor (do not remove).
     */
    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    public AppUsersAMImpl() throws NamingException, SQLException {
        Context ctx = new InitialContext();
        DataSource ds = (DataSource)ctx.lookup("java:comp/env/jdbc/APPDS");
        conn = ds.getConnection();
    }

    public void finalize()throws SQLException {
        conn.close();
    }

    /**
     * Container's getter for AppSecUsr1.
     * @return AppSecUsr1
     */
    public AppSecUsrVOImpl getAppSecUsr1() {
        return (AppSecUsrVOImpl)findViewObject("AppSecUsr1");
    }

    /**
     * Container's getter for AppSecUsrGrpLnk2.
     * @return AppSecUsrGrpLnk2
     */
    public AppSecUsrGrpLnkVOImpl getAppSecUsrGrpLnk2() {
        return (AppSecUsrGrpLnkVOImpl)findViewObject("AppSecUsrGrpLnk2");
    }

    /**
     * Container's getter for AppSecUsrRoleLnk2.
     * @return AppSecUsrRoleLnk2
     */
    public AppSecUsrRoleLnkVOImpl getAppSecUsrRoleLnk2() {
        return (AppSecUsrRoleLnkVOImpl)findViewObject("AppSecUsrRoleLnk2");
    }

    /**
     * Container's getter for AppSecUsrMailId2.
     * @return AppSecUsrMailId2
     */
    public ViewObjectImpl getAppSecUsrMailId2() {
        return (ViewObjectImpl)findViewObject("AppSecUsrMailId2");
    }

    /**
     * Container's getter for FkAppSecUsrGrpLnk3VL1.
     * @return FkAppSecUsrGrpLnk3VL1
     */
    public ViewLinkImpl getFkAppSecUsrGrpLnk3VL1() {
        return (ViewLinkImpl)findViewLink("FkAppSecUsrGrpLnk3VL1");
    }

    /**
     * Container's getter for FkAppSecUsrRoleLnk3VL1.
     * @return FkAppSecUsrRoleLnk3VL1
     */
    public ViewLinkImpl getFkAppSecUsrRoleLnk3VL1() {
        return (ViewLinkImpl)findViewLink("FkAppSecUsrRoleLnk3VL1");
    }

    /**
     * Container's getter for FkAppSecUsrMailId2VL1.
     * @return FkAppSecUsrMailId2VL1
     */
    public ViewLinkImpl getFkAppSecUsrMailId2VL1() {
        return (ViewLinkImpl)findViewLink("FkAppSecUsrMailId2VL1");
    }
    private Integer GLBL_APP_USR;
    private Integer GLBL_APP_SERV_LOC;
    private String GLBL_APP_CLD_ID;
    private Integer GLBL_APP_LANG;
    private Integer GLBL_APP_USR_ROLE;
    private String GLBL_APP_USR_ORG;
    private String GLBL_APP_USR_LANG;
    private Timestamp GLBL_APP_SESS_DT;
    private String APP_PG_ID;
    private String GLBL_APP_VER;
    private String GLBL_APP_REG;
    private String GLBL_APP_DB_VER;
    private String GLBL_APP_SESSID;

    Connection conn = null;

    public void setGLBL_APP_USR(Integer GLBL_APP_USR) {
        this.GLBL_APP_USR = GLBL_APP_USR;
    }

    public Integer getGLBL_APP_USR() {
        GLBL_APP_USR = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        return GLBL_APP_USR;
    }

    public void setGLBL_APP_LANG(Integer GLBL_APP_LANG) {
        this.GLBL_APP_LANG = GLBL_APP_LANG;
    }

    public Integer getGLBL_APP_LANG() {
        return GLBL_APP_LANG;
    }

    public void setGLBL_APP_USR_ROLE(Integer GLBL_APP_USR_ROLE) {
        this.GLBL_APP_USR_ROLE = GLBL_APP_USR_ROLE;
    }

    public Integer getGLBL_APP_USR_ROLE() {
        return GLBL_APP_USR_ROLE;
    }

    public void setGLBL_APP_USR_ORG(String GLBL_APP_USR_ORG) {
        this.GLBL_APP_USR_ORG = GLBL_APP_USR_ORG;
    }

    public String getGLBL_APP_USR_ORG() {
        return GLBL_APP_USR_ORG;
    }

    public void setGLBL_APP_USR_LANG(String GLBL_APP_USR_LANG) {
        this.GLBL_APP_USR_LANG = GLBL_APP_USR_LANG;
    }

    public String getGLBL_APP_USR_LANG() {
        return GLBL_APP_USR_LANG;
    }

    public void setGLBL_APP_SESS_DT(Timestamp GLBL_APP_SESS_DT) {
        this.GLBL_APP_SESS_DT = GLBL_APP_SESS_DT;
    }

    public Timestamp getGLBL_APP_SESS_DT() {
        return GLBL_APP_SESS_DT;
    }

    public void setAPP_PG_ID(String APP_PG_ID) {
        this.APP_PG_ID = APP_PG_ID;
    }

    public String getAPP_PG_ID() {
        return APP_PG_ID;
    }

    public void setGLBL_APP_VER(String GLBL_APP_VER) {
        this.GLBL_APP_VER = GLBL_APP_VER;
    }

    public String getGLBL_APP_VER() {
        return GLBL_APP_VER;
    }

    public void setGLBL_APP_REG(String GLBL_APP_REG) {
        this.GLBL_APP_REG = GLBL_APP_REG;
    }

    public String getGLBL_APP_REG() {
        return GLBL_APP_REG;
    }

    public void setGLBL_APP_DB_VER(String GLBL_APP_DB_VER) {
        this.GLBL_APP_DB_VER = GLBL_APP_DB_VER;
    }

    public String getGLBL_APP_DB_VER() {
        return GLBL_APP_DB_VER;
    }

    public void setGLBL_APP_SESSID(String GLBL_APP_SESSID) {
        this.GLBL_APP_SESSID = GLBL_APP_SESSID;
    }

    public String getGLBL_APP_SESSID() {
        return GLBL_APP_SESSID;
    }

    public void setGLBL_APP_SERV_LOC(Integer GLBL_APP_SERV_LOC) {
        this.GLBL_APP_SERV_LOC = GLBL_APP_SERV_LOC;
    }

    public Integer getGLBL_APP_SERV_LOC() {
        return GLBL_APP_SERV_LOC;
    }


    public void setbindvar(Integer UserId, Integer Application_Language, Integer UserRole, String Org,
                           String User_Language, Timestamp Session_Date, String PageId, String Application_Version,
                           String Registered_To, String DB_Version, String SessionId, Integer SlocId, String CldId)

    {
        //System.out.println("setBindVar method = "+UserId);
        setGLBL_APP_USR(UserId);
        setGLBL_APP_LANG(Application_Language);
        setGLBL_APP_USR_ROLE(UserRole);
        setGLBL_APP_USR_ORG(Org);
        setGLBL_APP_USR_LANG(User_Language);
        setGLBL_APP_SESS_DT(Session_Date);
        setAPP_PG_ID(PageId);
        setGLBL_APP_VER(Application_Version);
        setGLBL_APP_REG(Registered_To);
        setGLBL_APP_DB_VER(DB_Version);
        setGLBL_APP_SESSID(SessionId);
        setGLBL_APP_SERV_LOC(SlocId);
        setGLBL_APP_CLD_ID(CldId);


    }

    public void setGLBL_APP_CLD_ID(String GLBL_APP_CLD_ID) {
        this.GLBL_APP_CLD_ID = GLBL_APP_CLD_ID;
    }

    public String getGLBL_APP_CLD_ID() {
        return GLBL_APP_CLD_ID;
    }

    /**
     *renders the role of user logged in then show the page according to the role assigned
     * @return
     **/
    public Integer on_load_page() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction(VARCHAR, "fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                           new Object[] { cld_id, sloc_id, org_id, 23, usr_id });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);
        return count;
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }


    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    public void callFunctionOnCreate(String cldId, Integer slocId, Integer usrId, Integer prfId, String mode) {

        Number i =
            (Number)(callStoredFunction(Types.INTEGER, "APP.FN_INS_SEC_USR_CLD(?,?,?,?,?)", new Object[] { cldId,
                                                                                                           slocId,
                                                                                                           usrId,
                                                                                                           prfId,
                                                                                                           mode }));
        System.out.println("callFunctionOnCreate amimpl " + i + "       ==================");

    }


    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    /**
     * Container's getter for AppSecUsrCldVO1.
     * @return AppSecUsrCldVO1
     */


    /**
     * Container's getter for AppSecUsrToAppSecUsrCldVL1.
     * @return AppSecUsrToAppSecUsrCldVL1
     */
    public ViewLinkImpl getAppSecUsrToAppSecUsrCldVL1() {
        return (ViewLinkImpl)findViewLink("AppSecUsrToAppSecUsrCldVL1");
    }

    /**
     * Container's getter for AppSecUsrCld1_1.
     * @return AppSecUsrCld1_1
     */
    public AppSecUsrCld1VOImpl getAppSecUsrCld1_1() {
        return (AppSecUsrCld1VOImpl)findViewObject("AppSecUsrCld1_1");
    }

    /**
     * Container's getter for AppSecUsr_PrfVL1.
     * @return AppSecUsr_PrfVL1
     */
    public ViewLinkImpl getAppSecUsr_PrfVL1() {
        return (ViewLinkImpl)findViewLink("AppSecUsr_PrfVL1");
    }


    /**
     * Container's getter for SearchTrans1.
     * @return SearchTrans1
     */
    public ViewObjectImpl getSearchTrans1() {
        return (ViewObjectImpl)findViewObject("SearchTrans1");
    }


    /**
     * Container's getter for OrgSecUsr3.
     * @return OrgSecUsr3
     */
    public ViewObjectImpl getOrgSecUsr3() {
        return (ViewObjectImpl)findViewObject("OrgSecUsr3");
    }


    public String getDuplicay(String userName) {
        int count = 0;
        String result = "N";

        String stmt =
            "select * from app$sec$usr where usr_name like '" + userName + "' and sloc_id = " + Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        System.out.println(stmt);

        ResultSet rs = this.callSql(stmt);

        if (rs != null) {

            System.out.println("evaluating resultset     ");
            try {
                if (rs.next()) {

                    System.out.println("tere is a row.");
                    result = "Y";
                } else {
                    result = "N";
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {

            System.out.println("There is error in getting connection");
        }

        this.closeConnection();

        return result;
    }


    public String getDuplicayAlias(String userAlias) {
        int count = 0;
        String result = "N";

        String stmt =
            "select * from app$sec$usr where usr_alias like '" + userAlias + "' and sloc_id = " + Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        ResultSet rs = this.callSql(stmt);

        if (rs != null) {
            try {

                if (rs.next()) {

                    result = "Y";
                } else {
                    result = "N";
                }

            } catch (Exception e) {

            }
        } else {

            System.out.println("There is error in getting connection");
        }

        this.closeConnection();

        return result;
    }


    public void beforeAdd() {

        AppSecUsrVOImpl appVo = getAppSecUsr1();
        AppSecUsrVORowImpl curRow = (AppSecUsrVORowImpl)appVo.getCurrentRow();

        if (!curRow.equals(null)) {
            System.out.println(curRow.getUsrName());
            appVo.setBind_usr_name(curRow.getUsrName());
            appVo.executeQuery();

            System.out.println("Row Count to add is:" + appVo.getRowCount());

            appVo.setCurrentRow(curRow);
        }
    }


    /**
     * Container's getter for AppSecUsrOrgVL1.
     * @return AppSecUsrOrgVL1
     */
    public ViewLinkImpl getAppSecUsrOrgVL1() {
        return (ViewLinkImpl)findViewLink("AppSecUsrOrgVL1");
    }


    public String validateDefaultEmail() {
        AppSecUsrMailIdVOImpl vo = (AppSecUsrMailIdVOImpl)this.getAppSecUsrMailId2();

        if (vo != null && vo.getCurrentRow() != null && (vo.getCurrentRow()).getAttribute("UsrMailId") != null) {


            String mailId = (vo.getCurrentRow()).getAttribute("UsrMailId").toString();
            RowSetIterator ri = vo.createRowSetIterator(null);
            System.out.println(mailId);

            while (ri.hasNext()) {
                ri.next();
                AppSecUsrMailIdVORowImpl rw = (AppSecUsrMailIdVORowImpl)ri.getCurrentRow();
                System.out.println(rw.getUsrMailIdDef().toString());
                System.out.println(rw.getUsrMailId());
                if (rw.getUsrMailIdDef().equals("Y") && (!rw.getUsrMailId().equals(mailId))) {

                    return "N";
                }

            }
        }
        return "Y";


    }


    /**
     * Container's getter for OrgWarehouseLnk.
     * @return OrgWarehouseLnk
     */
    public ViewLinkImpl getOrgWarehouseLnk() {
        return (ViewLinkImpl)findViewLink("OrgWarehouseLnk");
    }

    /**
     * Container's getter for Warehouse3.
     * @return Warehouse3
     */
    public ViewObjectImpl getWarehouse3() {
        return (ViewObjectImpl)findViewObject("Warehouse3");
    }

    /**
     * Container's getter for OrgWarehouseLnk1.
     * @return OrgWarehouseLnk1
     */
    public ViewLinkImpl getOrgWarehouseLnk1() {
        return (ViewLinkImpl)findViewLink("OrgWarehouseLnk1");
    }

    /**
     * Container's getter for OrgSecUsr2.
     * @return OrgSecUsr2
     */
    public ViewObjectImpl getOrgSecUsr2() {
        return (ViewObjectImpl)findViewObject("OrgSecUsr2");
    }

    /**
     * Container's getter for WhSecUsr1.
     * @return WhSecUsr1
     */
    public ViewObjectImpl getWhSecUsr1() {
        return (ViewObjectImpl)findViewObject("WhSecUsr1");
    }

    /**
     * Container's getter for WhSecUsr2.
     * @return WhSecUsr2
     */
    public ViewObjectImpl getWhSecUsr2() {
        return (ViewObjectImpl)findViewObject("WhSecUsr2");
    }

    /**
     * Container's getter for FkWhSecUsrASSVL.
     * @return FkWhSecUsrASSVL
     */
    public ViewLinkImpl getFkWhSecUsrASSVL() {
        return (ViewLinkImpl)findViewLink("FkWhSecUsrASSVL");
    }

    /**
     * Container's getter for WhSecUsr3.
     * @return WhSecUsr3
     */
    public ViewObjectImpl getWhSecUsr3() {
        return (ViewObjectImpl)findViewObject("WhSecUsr3");
    }

    /**
     * Container's getter for OrgWhLnk1.
     * @return OrgWhLnk1
     */
    public ViewLinkImpl getOrgWhLnk1() {
        return (ViewLinkImpl)findViewLink("OrgWhLnk1");
    }

    public void warehouseSerch(String name) {
        //System.out.println(name);
        WarehouseVOImpl vo = (WarehouseVOImpl)this.getWarehouse3();
        vo.setBindWarehouseName(name);
        vo.executeQuery();
        //System.out.println(vo.getRowCount());
        vo.setBindWarehouseName(null);

    }


    public void deleteWarehouse() {

        if (this.getWhSecUsr3() != null) {
            WhSecUsrVOImpl vo = (WhSecUsrVOImpl)this.getWhSecUsr3();

            RowSetIterator rw = vo.createRowSetIterator(null);


            while (rw.hasNext()) {

                //System.out.println("Row Count for delete warehouse is:"+rw.getRowCount());
                Row next = rw.next();
                next.remove();
            }
        }

    }


    /**
     * Container's getter for Warehouse2.
     * @return Warehouse2
     */
    public WarehouseVOImpl getWarehouse2() {
        return (WarehouseVOImpl)findViewObject("Warehouse2");
    }

    /**
     * Container's getter for LovAppSecUsr1.
     * @return LovAppSecUsr1
     */
    public LovAppSecUsrImpl getLovAppSecUsr1() {
        return (LovAppSecUsrImpl)findViewObject("LovAppSecUsr1");
    }

    /**
     * Container's getter for AppSecUsrMailId1.
     * @return AppSecUsrMailId1
     */
    public AppSecUsrMailIdVOImpl getAppSecUsrMailId1() {
        return (AppSecUsrMailIdVOImpl)findViewObject("AppSecUsrMailId1");
    }

    public void toEditProfile() {
    }

    public ResultSet callSql(String stmt) {


        PreparedStatement ps = null;
        ResultSet rs = null;

        System.out.println("executing sql");

        try {
            /* Context ctx = new InitialContext();
                    DataSource ds = (DataSource)ctx.lookup("java:comp/env/jdbc/APPDS");
                    conn = ds.getConnection(); */
              System.out.println("Connection =>" + conn);

            ps = conn.prepareStatement(stmt);

            rs = ps.executeQuery();


        }

        catch (Exception e) {
            e.printStackTrace();
        }

        return rs;
    }

    public void closeConnection() {
        try {
            //    this.conn.close();
        } catch (Exception e) {

        }
    }


    public void filterOrgSecUSer() {

        this.getOrgSecUsr3().setNamedWhereClauseParam("UsrIdBindVar",
                                                      (Integer)this.getAppSecUsr1().getCurrentRow().getAttribute("UsrId"));

        this.getOrgSecUsr3().executeQuery();
    }


    public void assignOrg() {

        ViewObject userOrgVo = this.getOrgSecUsr3();

        userOrgVo.getCurrentRow().setAttribute("UsrCldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        userOrgVo.getCurrentRow().setAttribute("UsrId",
                                               (Integer)this.getAppSecUsr1().getCurrentRow().getAttribute("UsrId"));
        userOrgVo.getCurrentRow().setAttribute("SlocId",
                                               Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));


    }


    public void fiterWarehouse() {
        WarehouseVOImpl wh = (WarehouseVOImpl)this.getWarehouse3();

        wh.setbindUsr((Integer)this.getAppSecUsr1().getCurrentRow().getAttribute("UsrId"));
        wh.executeQuery();

    }


    public void deleteCurrentWarehouse() {

        this.getWhSecUsr3().getCurrentRow().remove();

        this.getDBTransaction().commit();

    }


    /**
     * Container's getter for AppSecUsrCldVO.
     * @return AppSecUsrCldVO
     */
    public AppSecUsrCldVOImpl getAppSecUsrCldVO() {
        return (AppSecUsrCldVOImpl)findViewObject("AppSecUsrCldVO");
    }

    /**
     * Container's getter for OrgSecUsr1.
     * @return OrgSecUsr1
     */
    public OrgSecUsrVOImpl getOrgSecUsr1() {
        return (OrgSecUsrVOImpl)findViewObject("OrgSecUsr1");
    }


    /**
     * Container's getter for UserDoc1.
     * @return UserDoc1
     */
    public ViewObjectImpl getUserDoc1() {
        return (ViewObjectImpl)findViewObject("UserDoc1");
    }

    /**
     * Container's getter for UserDocLnk1.
     * @return UserDocLnk1
     */
    public ViewLinkImpl getUserDocLnk1() {
        return (ViewLinkImpl)findViewLink("UserDocLnk1");
    }

    public String validateRole(Integer role, String org, String mode) {
        String result = "N";
        try{
        System.out.println("getApplicationModule() :  " + getApplicationModule());
        System.out.println("this is: " + this);
        System.out.println("VO  =" + this.getAppSecUsrRoleLnk2());
        System.out.println("Row=" + this.getAppSecUsrRoleLnk2().getCurrentRow());
        System.out.println("SLOC_ID =" + this.getAppSecUsrRoleLnk2().getCurrentRow().getAttribute("SlocId"));
        System.out.println("cldID" + resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        System.out.println(" and USR_ID =" +
                           Integer.parseInt(this.getAppSecUsrRoleLnk2().getCurrentRow().getAttribute("UsrId").toString()));

        String stmt =
            "select * from app$sec$usr_role_lnk  where " + " USR_ORG_ID  = '" + org + "' and USR_ROLE_ID =" + role +
            " and SLOC_ID =" +
            Integer.parseInt(this.getAppSecUsr1().getCurrentRow().getAttribute("SlocId").toString()) +
            " and USR_ID =" +
            Integer.parseInt(this.getAppSecUsrRoleLnk2().getCurrentRow().getAttribute("UsrId").toString()) +
            " and USR_ROLE_CLD_ID = '" + resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString() + "'";

        ResultSet rs = this.callSql(stmt);

        if (rs != null) {
            try {
                if (rs.next()) {
                    result = "N";
                } else {
                    result = "Y";
                    ((AppSecUsrRoleLnkVORowImpl)this.getAppSecUsrRoleLnk2().getCurrentRow()).setUsrOrgId(org);
                    ((AppSecUsrRoleLnkVORowImpl)this.getAppSecUsrRoleLnk2().getCurrentRow()).setUsrRoleId(role);
                }

            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {

            System.out.println("There is error in getting connection");
        }

        this.closeConnection();
         }catch(Exception e){
            e.printStackTrace();
        } 
        return result;
    }


    /**
     * Container's getter for AppSecUsrRoleLnk1.
     * @return AppSecUsrRoleLnk1
     */
    public AppSecUsrRoleLnkVOImpl getAppSecUsrRoleLnk1() {
        return (AppSecUsrRoleLnkVOImpl)findViewObject("AppSecUsrRoleLnk1");
    }

    /**
     * Container's getter for FkAppSecUsrRoleLnk3VL2.
     * @return FkAppSecUsrRoleLnk3VL2
     */
    public ViewLinkImpl getFkAppSecUsrRoleLnk3VL2() {
        return (ViewLinkImpl)findViewLink("FkAppSecUsrRoleLnk3VL2");
    }
}
