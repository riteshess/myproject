package appSecUser.model.entity;

import appSecUser.model.module.AppUsersAMImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 27 11:31:31 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrgSecUsrEOImpl extends EntityImpl {
    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        UsrCldId {
            public Object get(OrgSecUsrEOImpl obj) {
                return obj.getUsrCldId();
            }

            public void put(OrgSecUsrEOImpl obj, Object value) {
                obj.setUsrCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(OrgSecUsrEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(OrgSecUsrEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        UsrOrgId {
            public Object get(OrgSecUsrEOImpl obj) {
                return obj.getUsrOrgId();
            }

            public void put(OrgSecUsrEOImpl obj, Object value) {
                obj.setUsrOrgId((String)value);
            }
        }
        ,
        UsrId {
            public Object get(OrgSecUsrEOImpl obj) {
                return obj.getUsrId();
            }

            public void put(OrgSecUsrEOImpl obj, Object value) {
                obj.setUsrId((Integer)value);
            }
        }
        ,
        AppSecUsrCld1 {
            public Object get(OrgSecUsrEOImpl obj) {
                return obj.getAppSecUsrCld1();
            }

            public void put(OrgSecUsrEOImpl obj, Object value) {
                obj.setAppSecUsrCld1((AppSecUsrCld1EOImpl)value);
            }
        }
        ,
        WhSecUsr {
            public Object get(OrgSecUsrEOImpl obj) {
                return obj.getWhSecUsr();
            }

            public void put(OrgSecUsrEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        WhSecUsr1 {
            public Object get(OrgSecUsrEOImpl obj) {
                return obj.getWhSecUsr1();
            }

            public void put(OrgSecUsrEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(OrgSecUsrEOImpl object);

        public abstract void put(OrgSecUsrEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int USRCLDID = AttributesEnum.UsrCldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int USRORGID = AttributesEnum.UsrOrgId.index();
    public static final int USRID = AttributesEnum.UsrId.index();
    public static final int APPSECUSRCLD1 = AttributesEnum.AppSecUsrCld1.index();
    public static final int WHSECUSR = AttributesEnum.WhSecUsr.index();
    public static final int WHSECUSR1 = AttributesEnum.WhSecUsr1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrgSecUsrEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("appSecUser.model.entity.OrgSecUsrEO");
    }

    /**
     * Gets the attribute value for UsrCldId, using the alias name UsrCldId.
     * @return the value of UsrCldId
     */
    public String getUsrCldId() {
        return (String)getAttributeInternal(USRCLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrCldId.
     * @param value value to set the UsrCldId
     */
    public void setUsrCldId(String value) {
        setAttributeInternal(USRCLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for UsrOrgId, using the alias name UsrOrgId.
     * @return the value of UsrOrgId
     */
    public String getUsrOrgId() {
        return (String)getAttributeInternal(USRORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrOrgId.
     * @param value value to set the UsrOrgId
     */
    public void setUsrOrgId(String value) {
        setAttributeInternal(USRORGID, value);
    }

    /**
     * Gets the attribute value for UsrId, using the alias name UsrId.
     * @return the value of UsrId
     */
    public Integer getUsrId() {
        return (Integer)getAttributeInternal(USRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrId.
     * @param value value to set the UsrId
     */
    public void setUsrId(Integer value) {
        setAttributeInternal(USRID, value);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity AppSecUsrCld1EOImpl.
     */
    public AppSecUsrCld1EOImpl getAppSecUsrCld1() {
        return (AppSecUsrCld1EOImpl)getAttributeInternal(APPSECUSRCLD1);
    }

    /**
     * Sets <code>value</code> as the associated entity AppSecUsrCld1EOImpl.
     */
    public void setAppSecUsrCld1(AppSecUsrCld1EOImpl value) {
        setAttributeInternal(APPSECUSRCLD1, value);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getWhSecUsr() {
        return (RowIterator)getAttributeInternal(WHSECUSR);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getWhSecUsr1() {
        return (RowIterator)getAttributeInternal(WHSECUSR1);
    }


    /**
     * @param usrCldId key constituent
     * @param slocId key constituent
     * @param usrOrgId key constituent
     * @param usrId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String usrCldId, Integer slocId, String usrOrgId, Integer usrId) {
        return new Key(new Object[]{usrCldId, slocId, usrOrgId, usrId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        AppUsersAMImpl am = (AppUsersAMImpl)resolvElDC("AppUsersAMDataControl");
      //  Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
      //   String cldid = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        setSlocId(am.getGLBL_APP_SERV_LOC());
        setUsrCldId(am.getGLBL_APP_CLD_ID() );
        
          ViewObjectImpl userVo = am.getAppSecUsr1();
       ViewObjectImpl userOrgVo = am.getOrgSecUsr3();
       Integer userId = Integer.parseInt( userVo.getCurrentRow().getAttribute("UsrId").toString()) ;
       setUsrId(userId);
       System.out.println("user id in eo impl"+userId);
       
       System.out.println("Increating orgsecUser...................................");
        super.create(attributeList);
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
}
