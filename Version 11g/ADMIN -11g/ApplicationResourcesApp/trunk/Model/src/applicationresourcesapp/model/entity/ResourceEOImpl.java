package applicationresourcesapp.model.entity;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jun 15 11:06:44 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ResourceEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        KeyType {
            public Object get(ResourceEOImpl obj) {
                return obj.getKeyType();
            }

            public void put(ResourceEOImpl obj, Object value) {
                obj.setKeyType((String)value);
            }
        }
        ,
        KeyLbl {
            public Object get(ResourceEOImpl obj) {
                return obj.getKeyLbl();
            }

            public void put(ResourceEOImpl obj, Object value) {
                obj.setKeyLbl((String)value);
            }
        }
        ,
        KeyValue {
            public Object get(ResourceEOImpl obj) {
                return obj.getKeyValue();
            }

            public void put(ResourceEOImpl obj, Object value) {
                obj.setKeyValue((String)value);
            }
        }
        ,
        LangId {
            public Object get(ResourceEOImpl obj) {
                return obj.getLangId();
            }

            public void put(ResourceEOImpl obj, Object value) {
                obj.setLangId((Integer)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ResourceEOImpl object);

        public abstract void put(ResourceEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int KEYTYPE = AttributesEnum.KeyType.index();
    public static final int KEYLBL = AttributesEnum.KeyLbl.index();
    public static final int KEYVALUE = AttributesEnum.KeyValue.index();
    public static final int LANGID = AttributesEnum.LangId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ResourceEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("applicationresourcesapp.model.entity.ResourceEO");
    }

    /**
     * Gets the attribute value for KeyType, using the alias name KeyType.
     * @return the value of KeyType
     */
    public String getKeyType() {
        return (String)getAttributeInternal(KEYTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for KeyType.
     * @param value value to set the KeyType
     */
    public void setKeyType(String value) {
        setAttributeInternal(KEYTYPE, value);
    }

    /**
     * Gets the attribute value for KeyLbl, using the alias name KeyLbl.
     * @return the value of KeyLbl
     */
    public String getKeyLbl() {
        return (String)getAttributeInternal(KEYLBL);
    }

    /**
     * Sets <code>value</code> as the attribute value for KeyLbl.
     * @param value value to set the KeyLbl
     */
    public void setKeyLbl(String value) {
        setAttributeInternal(KEYLBL, value);
    }

    /**
     * Gets the attribute value for KeyValue, using the alias name KeyValue.
     * @return the value of KeyValue
     */
    public String getKeyValue() {
        return (String)getAttributeInternal(KEYVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for KeyValue.
     * @param value value to set the KeyValue
     */
    public void setKeyValue(String value) {
        setAttributeInternal(KEYVALUE, value);
    }

    /**
     * Gets the attribute value for LangId, using the alias name LangId.
     * @return the value of LangId
     */
    public Integer getLangId() {
        return (Integer)getAttributeInternal(LANGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LangId.
     * @param value value to set the LangId
     */
    public void setLangId(Integer value) {
        setAttributeInternal(LANGID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param keyLbl key constituent
     * @param langId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String keyLbl, Integer langId) {
        return new Key(new Object[]{keyLbl, langId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        
                super.doDML(operation, e);
    }
}
