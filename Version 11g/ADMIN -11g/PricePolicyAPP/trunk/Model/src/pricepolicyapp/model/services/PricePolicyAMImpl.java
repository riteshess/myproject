package pricepolicyapp.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import pricepolicyapp.model.services.common.PricePolicyAM;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 03 06:10:51 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PricePolicyAMImpl extends ApplicationModuleImpl implements PricePolicyAM {
    /**
     * This is the default constructor (do not remove).
     */
    public PricePolicyAMImpl() {
    }

    /**
     * Container's getter for AppPricePlc.
     * @return AppPricePlc
     */
    public ViewObjectImpl getAppPricePlc() {
        return (ViewObjectImpl)findViewObject("AppPricePlc");
    }

    /**
     * Container's getter for LOVPlcType.
     * @return LOVPlcType
     */
    public ViewObjectImpl getLOVPlcType() {
        return (ViewObjectImpl)findViewObject("LOVPlcType");
    }

    /**
     * Container's getter for LOVWtgAtt.
     * @return LOVWtgAtt
     */
    public ViewObjectImpl getLOVWtgAtt() {
        return (ViewObjectImpl)findViewObject("LOVWtgAtt");
    }
    public String setinacivedt(){
        getAppPricePlc().getCurrentRow().setAttribute("InactvDt", new Timestamp(System.currentTimeMillis()));
    //  System.out.println(getAppPricePlc().getCurrentRow().getAttribute("InactvDt"));
            return null;
    }
    public void priceId(){
        String cldid=resolvEl1("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocid=Integer.parseInt(resolvEl1("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userid = Integer.parseInt(resolvEl1("#{pageFlowScope.GLBL_APP_USR}").toString());
        String orgid=resolvEl1("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgid=resolvEl1("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String plcId1 = (String)callStoredFunction(Types.VARCHAR, "FN_APP_GEN_ID(?,?,?,?,?)", new Object[] {slocid,cldid,hoOrgid,orgid,"APP$PRICE$PLC"});
        System.out.println("plcId generated is "+plcId1);
        if(plcId1!=null){
        
         System.out.println("without null plz id is-------"+plcId1);
            getAppPricePlc().getCurrentRow().setAttribute("PlcId", plcId1);
        }
        
    }
    
    public String insertSupplier(Integer supplierId){
        if(supplierId!=null){
            Row CreateRow=this.getAppEoPricePlc1().createRow();
            CreateRow.setAttribute("EoId", supplierId);
        }
        return "";
    }
    public String resolvEl1(String data) {
            FacesContext fc = FacesContext.getCurrentInstance();
            Application app = fc.getApplication();
            ExpressionFactory elFactory = app.getExpressionFactory();
            ELContext elContext = fc.getELContext();
            ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
            String Message = valueExp.getValue(elContext).toString();
            return Message;
        }
    
    
    public String priceNameValid(String Name){
        String flag="Y";
        String hoOrgid=resolvEl1("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        RowSetIterator prcPolicy = this.getAppPricePlc().createRowSetIterator(null);
                  Row currentRow=this.getAppPricePlc().getCurrentRow();
                   while(prcPolicy.hasNext()){
                           Row r1 = prcPolicy.next();
                          if(r1!=currentRow){
                              String hoorg_id=r1.getAttribute("HoOrgId").toString();
                              String plcName=r1.getAttribute("PlcNm").toString();
                                  if(hoOrgid.equals(hoorg_id) && Name.equalsIgnoreCase(plcName)) {
                                      flag="N";
                                  }
                           }
                       }
        prcPolicy.closeRowSetIterator();
        System.out.println("function serialize"+flag);
       return flag;
    }
    
    public String applyCriteria(String CldId,String hoOrgId,Integer SlocId,String plcId){
        ViewObjectImpl vo = this.getAppPricePlc();
                ViewCriteria vc = vo.getViewCriteria("AppPricePlcVOCriteria");
                vo.applyViewCriteria(vc);
                  vo.setNamedWhereClauseParam("cldIdBind", CldId);
                  vo.setNamedWhereClauseParam("slocIdBind",SlocId);
                  vo.setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
                  vo.setNamedWhereClauseParam("plcIdBind", plcId);
                  vo.executeQuery();

        return "";
    }
    public String addSupplier(){
        String cldid=resolvEl1("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocid=Integer.parseInt(resolvEl1("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userid = Integer.parseInt(resolvEl1("#{pageFlowScope.GLBL_APP_USR}").toString());
        String hoOrgid=resolvEl1("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Row priceCurr=this.getAppPricePlc().getCurrentRow();
        if(priceCurr!=null){
          
        String plcId=priceCurr.getAttribute("PlcId").toString();
        
        Integer EoId = (Integer)priceCurr.getAttribute("EoIdTrans");
        if(EoId!=null){
            Row crtRow=this.getAppEoPricePlc1().createRow();
            crtRow.setAttribute("EoId", EoId);
            crtRow.setAttribute("UsrIdCreate", userid);
            crtRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            priceCurr.setAttribute("EoNmTrans", null);
            System.out.println("value after set eoId"+crtRow.getAttribute("EoId")+crtRow.getAttribute("PlcId"));
        }
        }
        return null;
    }
    public void searchPolicy(){
                ViewObjectImpl vo = this.getSearchPricePolicyVO();
                ViewObjectImpl transVo = this.getSearchTrans1();
                Row currR = transVo.getCurrentRow();
                ViewCriteria vc = vo.getViewCriteria("SearchPricePolicyVOCriteria");
                vo.applyViewCriteria(vc);
                vo.setNamedWhereClauseParam("PlcNmBind", currR.getAttribute("PlcNm"));
                vo.setNamedWhereClauseParam("SlocIdBind",currR.getAttribute("SlocIdTrans"));
                vo.setNamedWhereClauseParam("HoOrgIdBind", currR.getAttribute("HoOrgIdTrand"));
                vo.setNamedWhereClauseParam("CldIdBind", currR.getAttribute("CldIdTrans"));
                vo.executeQuery();
    }
    public void resetPolicy(){
                ViewObjectImpl vo = this.getSearchPricePolicyVO();
                ViewObjectImpl transVo = this.getSearchTrans1();
                Row currR = transVo.getCurrentRow();
                ViewCriteria vc = vo.getViewCriteria("SearchPricePolicyVOCriteria");
                
                vo.applyViewCriteria(vc);
                vo.setNamedWhereClauseParam("PlcNmBind", null);
                vo.setNamedWhereClauseParam("SlocIdBind",currR.getAttribute("SlocIdTrans"));
                vo.setNamedWhereClauseParam("HoOrgIdBind", currR.getAttribute("HoOrgIdTrand"));
                vo.setNamedWhereClauseParam("CldIdBind", currR.getAttribute("CldIdTrans"));
                vo.executeQuery();
    }
    public void strartReset(){
        ViewObjectImpl vo = this.getSearchPricePolicyVO();
       
        ViewCriteria vc = vo.getViewCriteria("SearchPricePolicyVOCriteria1");
        
           vo.applyViewCriteria(vc);
          
           vo.setNamedWhereClauseParam("SlocIdBind",1);
           vo.setNamedWhereClauseParam("HoOrgIdBind", "01");
           vo.setNamedWhereClauseParam("CldIdBind", "-1");
           vo.executeQuery();
           
    }
    public String supplierNameValid(String suppName){
        String flag="Y";
        System.out.println("supplier name is"+suppName);
        Row [] filterrows=this.getLOVSupplier().getFilteredRows("EoNm", suppName);
       // System.out.println("lov supplier name get is "+filterrows.length);
        Integer suppId=null;
        if(filterrows.length>0){
            suppId = (Integer)filterrows[0].getAttribute("EoId");
        }
   // System.out.println(suppId);
    
   /*  Row [] filterrow=getAppEoPricePlc().getFilteredRows("EoId", suppId);
    if(filterrow.length>0){
        System.out.println(filterrow.length);
        flag="N";
    }  */
        Row [] filterrow2=getAppEoPricePlc1().getFilteredRows("EoId", suppId);
        if(filterrow2.length>0){
            System.out.println("in eoprice1 "+filterrow2.length);
            flag="N";
        } 
  // System.out.println("filter row length"+filterrow2.length);   
      /*   RowSetIterator prcPolicy = this.getAppEoPricePlc1().createRowSetIterator(null);
                  Row currentRow=this.getAppEoPricePlc1().getCurrentRow();
                   while(prcPolicy.hasNext()){
                           Row r1 = prcPolicy.next();
                          if(r1!=currentRow){
                              String eoId=r1.getAttribute("EoId").toString();
                                  if(suppId.equalsIgnoreCase(eoId)) {
                                      flag="N";
                                  }
                           }
                       }
                prcPolicy.closeRowSetIterator(); */
                System.out.println("function supplier serialize"+flag); 
        return flag;
    }

    public String delSupplier(){
    Row r=this.getAppEoPricePlc1().getCurrentRow();
    if(r!=null){
        r.remove();
    }
        return null;
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                
                st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                       // System.out.println(bindVars[z] + "z");
                    }
                }
                st.executeUpdate();
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

    /**
     * Container's getter for AppEoPricePlc.
     * @return AppEoPricePlc
     */
    public ViewObjectImpl getAppEoPricePlc() {
        return (ViewObjectImpl)findViewObject("AppEoPricePlc");
    }


    /**
     * Container's getter for AppEoPricePlc1.
     * @return AppEoPricePlc1
     */
    public ViewObjectImpl getAppEoPricePlc1() {
        return (ViewObjectImpl)findViewObject("AppEoPricePlc1");
    }

    /**
     * Container's getter for PricePolicytoEOPricePLCVL1.
     * @return PricePolicytoEOPricePLCVL1
     */
    public ViewLinkImpl getPricePolicytoEOPricePLCVL1() {
        return (ViewLinkImpl)findViewLink("PricePolicytoEOPricePLCVL1");
    }

    /**
     * Container's getter for LOVSupplier.
     * @return LOVSupplier
     */
    public ViewObjectImpl getLOVSupplier() {
        return (ViewObjectImpl)findViewObject("LOVSupplier");
    }

    /**
     * Container's getter for SearchTrans1.
     * @return SearchTrans1
     */
    public ViewObjectImpl getSearchTrans1() {
        return (ViewObjectImpl)findViewObject("SearchTrans1");
    }

    /**
     * Container's getter for PrcPolicySrch.
     * @return PrcPolicySrch
     */
    public ViewObjectImpl getPrcPolicySrch() {
        return (ViewObjectImpl)findViewObject("PrcPolicySrch");
    }

    /**
     * Container's getter for SearchPricePolicyVO.
     * @return SearchPricePolicyVO
     */
    public ViewObjectImpl getSearchPricePolicyVO() {
        return (ViewObjectImpl)findViewObject("SearchPricePolicyVO");
    }

    /**
     * Container's getter for LovSupplierOnlyView.
     * @return LovSupplierOnlyView
     */
    public ViewObjectImpl getLovSupplierOnlyView() {
        return (ViewObjectImpl)findViewObject("LovSupplierOnlyView");
    }
}
