package passwordChange.model.Module;


import javax.el.ELContext;

import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.jbo.server.ApplicationModuleImpl;

import passwordChange.model.Module.common.ChngPswdAM;
import passwordChange.model.View.AppSecUsrVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu May 24 12:30:01 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ChngPswdAMImpl extends ApplicationModuleImpl implements ChngPswdAM {
    /**
     * This is the default constructor (do not remove).
     */
    public ChngPswdAMImpl() {
    }

    /**
     * Container's getter for AppSecUsr1.
     * @return AppSecUsr1
     */
    public AppSecUsrVOImpl getAppSecUsr1() {
        return (AppSecUsrVOImpl)findViewObject("AppSecUsr1");
    }
    public Integer on_load_page()
           {  int count = 0;
           String addMode =  resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString(); 
           String editMode =  resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString(); 
           String viewMode =  resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString(); 
           String deleteMode =  resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString(); 
           String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
           if(addMode.equalsIgnoreCase("Y") == false && addMode.equalsIgnoreCase("N") == false)
           {            count = 1;
               }
           else if(editMode.equalsIgnoreCase("Y") == false && editMode.equalsIgnoreCase("N") == false)
           {
               count = 1;
               }
           else if(viewMode.equalsIgnoreCase("Y") == false && viewMode.equalsIgnoreCase("N") == false)
           {
              count = 1; 
               }
           else if (deleteMode.equalsIgnoreCase("Y") == false && deleteMode.equalsIgnoreCase("N") == false)
           {
              count = 1; 
               }
            else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
           {
              count = 1; 
               }
    
     return count;
       }
    public Object resolvEl(String el)
    {
    FacesContext facesContext = FacesContext.getCurrentInstance();
    ELContext elContext = facesContext.getELContext();
    ExpressionFactory expressionFactory =
    facesContext.getApplication().getExpressionFactory();
    ValueExpression exp =
    expressionFactory.createValueExpression(elContext, el, Object.class);
    return exp.getValue(elContext);
    }

    public Integer getSlocId(){
        return Integer.parseInt(this.resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }
    public Integer getUserId(){
        return Integer.parseInt(this.resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }
    
    public String getCldId(){
        return this.resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }
}
