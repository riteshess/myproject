package appexcelimpexpapp.model.service;

import appexcelimpexpapp.model.service.common.AppExcelImpExpAppAM;
import appexcelimpexpapp.model.views.AppExlImpVOImpl;
import appexcelimpexpapp.model.views.AppExlImpVORowImpl;
import appexcelimpexpapp.model.views.TempColNameVOImpl;

import appexcelimpexpapp.model.views.TempColNameVORowImpl;

import java.sql.Connection;

import java.sql.Date;
import java.sql.PreparedStatement;

import java.sql.SQLException;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;

import java.util.Map.Entry;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import javax.naming.Context;
import javax.naming.InitialContext;

import javax.naming.NamingException;

import javax.sql.DataSource;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 30 12:32:57 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppExcelImpExpAppAMImpl extends ApplicationModuleImpl implements AppExcelImpExpAppAM {
    private ViewObjectImpl doc;
    private Connection con;
    private List rowsList;

    /**
     * This is the default constructor (do not remove).
     */
    public AppExcelImpExpAppAMImpl() {
    }

    /**
     * Container's getter for AppExlImp1.
     * @return AppExlImp1
     */
    public AppExlImpVOImpl getAppExlImp1() {
        return (AppExlImpVOImpl)findViewObject("AppExlImp1");
    }

    /**
     * Container's getter for TempColName1.
     * @return TempColName1
     */
    public TempColNameVOImpl getTempColName1() {
        return (TempColNameVOImpl)findViewObject("TempColName1");
    }

    public void insertTabColName(String excelColName) {
        System.out.println("ata:  " + excelColName);
        TempColNameVOImpl colName1 = this.getTempColName1();
        AppExlImpVOImpl appExlImp1 = this.getAppExlImp1();
        Row row = appExlImp1.getCurrentRow();
        System.out.println("Row is:  " + row);
        Row currentRow = colName1.getCurrentRow();
        if (currentRow != null && row != null) {
            AppExlImpVORowImpl curRow = (AppExlImpVORowImpl)row;
            TempColNameVORowImpl tempRow = (TempColNameVORowImpl)currentRow;
            System.out.println("Id's are:  " + tempRow.getTabId() + "\t" + tempRow.getColId() + "\t" +
                               tempRow.getColId());
            curRow.setDocCompDbobId(tempRow.getTabId());
            curRow.setDocCompDbobColId(tempRow.getColId());
            curRow.setDocColPos(tempRow.getColId());
            curRow.setExlColNm(excelColName);
        }
    }

    public List insertTableData(List dataList) {
        List badDataList = new ArrayList<Map>();
        String query = this.getInsertionQuery();
        System.out.println("Now : " + query);
        System.out.println("Data from map is:  \n" +
                dataList);
        ListIterator<Map> itr = dataList.listIterator();
        Map<String, Object> wrongData = new LinkedHashMap<String, Object>();
        try {
            //     Connection connection = getDBConnection();
            //   connection.setAutoCommit(false);
            //  PreparedStatement prepareStatement = connection.prepareStatement(query);
            rowsList = new ArrayList();
            PreparedStatement prepareStatement = getDBTransaction().createPreparedStatement(query, 0);
            Map<Integer, String> MappingMap = this.getMappingTable();
            while (itr.hasNext()) {
                Map<String, Object> map = itr.next();
                wrongData = map;
                int count = 0;
                ViewObjectImpl appDocDbOb = getFilteredAppDocDbOb();
                RowSetIterator rItr = appDocDbOb.createRowSetIterator(null);
                List tempList = new ArrayList();
                while (rItr.hasNext()) {
                    Row next = rItr.next();
                    System.out.println("Row is: "+next);
                    Integer pos = Integer.parseInt(next.getAttribute("GlblDocColPos").toString());
                    String string = MappingMap.get(pos);
                    System.out.println("Return data is:  " + string);
                    if (string != null) {
                        Object object = map.get(string);
                        System.out.println("Excel data is: " + object);

                        prepareStatement.setObject(pos, object);
                        tempList.add(object);
                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("CLD_ID"))) {
                        System.out.println("----------------1");
                        prepareStatement.setObject(pos, getparamCldId());
                        tempList.add(getparamCldId());

                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("SLOC_ID"))) {
                        System.out.println("----------------2");
                        prepareStatement.setObject(pos, getParamSlocId());
                        tempList.add(getParamSlocId());
                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("HO_ORG_ID"))) {
                        System.out.println("----------------3");
                        prepareStatement.setObject(pos, getParamHoOrgId());
                        tempList.add(getParamHoOrgId());
                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("ORG_ID"))) {
                        System.out.println("----------------4");
                        prepareStatement.setObject(pos, getParamOrgId());
                        tempList.add(getParamOrgId());
                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("USR_ID_CREATE"))) {
                        System.out.println("----------------5");
                        prepareStatement.setObject(pos, getParamUsrId());
                        tempList.add(getParamUsrId());
                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("USR_ID_MOD"))) {
                        System.out.println("----------------6");
                        prepareStatement.setObject(pos, getParamUsrId());
                        tempList.add(getParamUsrId());
                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("DOC_ID"))) {
                        System.out.println("----------------7");
                        prepareStatement.setObject(pos, getParamAppDocId());
                        tempList.add(getParamAppDocId());
                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("DOC_DT"))) {
                        System.out.println("----------------25");
                        /*  prepareStatement.setObject(pos,
                                                   (getParamDocDt() != null) ? new Date(((oracle.jbo.domain.Date)getParamDocDt()).longValue()) :
                                                   null);
                        tempList.add((getParamDocDt() != null) ?
                                     new Date(((oracle.jbo.domain.Date)getParamDocDt()).longValue()) : null); */
                    //--    oracle.jbo.domain.Date date = this.getParamDocDt();
                     //--   Date dateValue = date.dateValue();
                     Date dateValue = new Date(System.currentTimeMillis());
                        //   System.out.println("Bansal: "+dateValue);
                        // System.out.println("shubham :  "+(getParamDocDt()!= null?new Date(getParamDocDt().longValue()):null));
                        prepareStatement.setObject(pos, dateValue);
                        tempList.add(dateValue);

                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("USR_ID_CREATE_DT"))) {
                        System.out.println("----------------8");
                        prepareStatement.setObject(pos, new Date(System.currentTimeMillis()));
                        tempList.add(new Date(System.currentTimeMillis()));
                    } else if (string == null &&
                               (next.getAttribute("DbobColNm").toString().equalsIgnoreCase("USR_ID_MOD_DT"))) {
                        System.out.println("----------------9");
                        prepareStatement.setObject(pos, new Date(System.currentTimeMillis()));
                        tempList.add(new Date(System.currentTimeMillis()));
                    } else {
                        System.out.println("----------------10");
                        prepareStatement.setObject(pos, null);
                        tempList.add(null);
                    }
                    System.out.println("---------------====11");
                }
                // USR_ID_CREATE_DT
                //  USR_ID_MOD_DT
                /* Set<Map.Entry<String, Object>> entrySet = map.entrySet();
            Iterator<Map.Entry<String, Object>> iterator = entrySet.iterator();
            while(iterator.hasNext()) {
                Map.Entry<String, Object> entry = iterator.next();
                System.out.println("entry is: "+entry);
            } */
                try {
                    int executeUpdate = prepareStatement.executeUpdate();
                    System.out.println("ABC : " + executeUpdate);
                    if (executeUpdate == 1) {
                        System.out.println("templist is added..");
                        rowsList.add(tempList);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    badDataList.add(wrongData);
                }
                //
            }

        } catch (SQLException E) {

            E.printStackTrace();
        }

        //   getDBTransaction().postChanges();
        /*  try {
            Connection connection = getDBConnection();

            PreparedStatement prepareStatement = connection.prepareStatement(query);

            prepareStatement.setObject(1, "0000");
            prepareStatement.setObject(2, 1);
            prepareStatement.setObject(3, "01");
            prepareStatement.setObject(4, "01");
            prepareStatement.setObject(5, "0000.01.01.0001.05an.00.1UFFfePzVV");
            prepareStatement.setObject(6, new Date(System.currentTimeMillis()));
            //  prepareStatement.setDate(6,  new Date(System.currentTimeMillis()));
            prepareStatement.setObject(7, "EC.0000109");
            prepareStatement.setObject(8, 2.08);
            prepareStatement.setObject(9, "UOM0000000001");
            prepareStatement.setObject(10, 30);
            prepareStatement.setObject(11, null);
            prepareStatement.setObject(12, null);
            prepareStatement.setObject(13, 1);
            prepareStatement.setObject(14, new Date(System.currentTimeMillis()));
            prepareStatement.setObject(15, 1);
            prepareStatement.setObject(16, new Date(System.currentTimeMillis()));
            prepareStatement.setObject(17, 3868.8);
            prepareStatement.setObject(18, 62.4);

            int executeUpdate = prepareStatement.executeUpdate();
            System.out.println("ABC : " + executeUpdate);
            //   con.commit();


        } catch (SQLException sqlex) {
            sqlex.printStackTrace();
        } catch (NamingException nmex) {
            nmex.printStackTrace();
        } */

        /*  if (totCol > 0) {
            RowSetIterator itr = appDocDbOb.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
            }
        } */
        //  getDBTransaction().postChanges();
        System.out.println("Bad data list:  " + badDataList);
        return badDataList;
    }

    /**
     * Container's getter for AppDocDbOb1.
     * @return AppDocDbOb1
     */
    public ViewObjectImpl getAppDocDbOb1() {
        return (ViewObjectImpl)findViewObject("AppDocDbOb1");
    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object msg = valueExp.getValue(elContext);
        return msg;
    }

    public ViewObjectImpl getFilteredAppDocDbOb() {
        Integer docId = new Integer(0);
        Integer tabId = new Integer(0);

        Object ob1 = resolvEl("#{pageFlowScope.GLBL_DOC_ID}");
        if (ob1 != null)
            docId = Integer.parseInt(ob1.toString());

        Object ob2 = resolvEl("#{pageFlowScope.GLBL_TAB_ID}");
        if (ob2 != null)
            tabId = Integer.parseInt(ob2.toString());
        if (doc == null) {
            doc = this.getAppDocDbOb1();
            doc.setNamedWhereClauseParam("DocIdBind", docId);
            doc.setNamedWhereClauseParam("TabIdBind", tabId);
            doc.executeQuery();
        }

        return doc;
    }

    public String getInsertionQuery() {

        StringBuilder query = new StringBuilder("insert into ");
        ViewObjectImpl appDocDbOb = this.getFilteredAppDocDbOb();
        Integer totCol = appDocDbOb.getRowCount();
        System.out.println("total Col are: " + totCol);

        Row atRangeIndex = appDocDbOb.getRowAtRangeIndex(0);
        String tableName = atRangeIndex.getAttribute("DbobNm").toString();
        String dbName = getParamDBName();
        query.append(" " + dbName + "." + tableName);
        for (int i = 0; i < totCol; i++) {
            if (i == 0) {
                query.append(" values(?,");
            } else if (i == totCol - 1) {
                query.append("?)");
            } else {
                query.append("?,");
            }
        }
        System.out.println("Final query is:  " + query);

        return query.toString();
    }

    public void finalize() throws Throwable {
        super.finalize();
        doc = null;
        con.close();
    }

    public Connection getDBConnection() throws NamingException, SQLException {
        if (con == null) {
            Context ctx;
            ctx = new InitialContext();
            Object lookup = ctx.lookup("java:comp/env/jdbc/APPDS");
            DataSource ds = (DataSource)lookup;
            con = ds.getConnection();
        }
        return con;
    }

    private Integer getParamSlocId() {
        Object el = this.resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        if (el != null)
            return Integer.parseInt(el.toString());
        return 0;
    }

    private String getparamCldId() {
        Object el = this.resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        if (el != null)
            return el.toString();
        return "";
    }

    private String getParamHoOrgId() {
        Object el = this.resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        if (el != null)
            return el.toString();
        return "";
    }

    private String getParamOrgId() {
        Object el = this.resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        if (el != null)
            return el.toString();
        return "";
    }

    private Integer getParamDocId() {
        Object el = this.resolvEl("#{pageFlowScope.GLBL_DOC_ID}");
        if (el != null)
            return Integer.parseInt(el.toString());
        return 0;
    }

    private String getParamAppDocId() {
        Object el = this.resolvEl("#{pageFlowScope.APP_DOC_ID}");
        if (el != null)
            return el.toString();
        return null;
    }

    private Integer getParamUsrId() {
        Object el = this.resolvEl("#{pageFlowScope.GLBL_APP_USR}");
        if (el != null)
            return Integer.parseInt(el.toString());
        return 0;
    }

    private Integer getParamTabId() {
        Object el = this.resolvEl("#{pageFlowScope.GLBL_TAB_ID}");
        if (el != null)
            return Integer.parseInt(el.toString());
        return 0;

    }

    private String getParamDBName() {
        Object el = this.resolvEl("#{pageFlowScope.GLBL_DB_TYPE}");
        if (el != null)
            return el.toString();
        return null;
        //#{pageFlowScope.GLBL_DB_TYPE}
    }

    private oracle.jbo.domain.Date getParamDocDt() {
        Object el = this.resolvEl("#{pageFlowScope.APP_DOC_DT}");
        if (el != null)
            return (oracle.jbo.domain.Date)el;

        return null;
        //#{pageFlowScope.GLBL_DB_TYPE}
    }

    public void filterMappingTable() {
        AppExlImpVOImpl appExlImp1 = this.getAppExlImp1();
        appExlImp1.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        appExlImp1.setNamedWhereClauseParam("SlocIdBind", getParamSlocId());
        appExlImp1.setNamedWhereClauseParam("HoOrgIdBind", getParamHoOrgId());
        appExlImp1.setNamedWhereClauseParam("OrgIdBind", getParamOrgId());
        appExlImp1.setNamedWhereClauseParam("DocIdBind", getParamDocId());
        appExlImp1.setNamedWhereClauseParam("TabIdBind", getParamTabId());
        appExlImp1.executeQuery();
    }

    public Map<Integer, String> getMappingTable() {
        AppExlImpVOImpl appExlImp1 = this.getAppExlImp1();
        Map<Integer, String> map = new LinkedHashMap<Integer, String>();
        RowSetIterator itr = appExlImp1.createRowSetIterator(null);
        while (itr.hasNext()) {
            AppExlImpVORowImpl next = (AppExlImpVORowImpl)itr.next();
            map.put(next.getDocCompDbobColId(), next.getExlColNm());
        }
        // System.out.println(map);
        return map;
    }


    public List getInsertionRows() {
        System.out.println("Row list: " + rowsList);
        return rowsList;
    }
}
