package appDocSetup.model.view;

import java.sql.PreparedStatement;
import java.sql.ResultSet;

import java.sql.SQLException;

import java.util.HashMap;
import java.util.Map;

import oracle.jbo.server.QueryCollection;
import oracle.jbo.server.SQLBuilder;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 13 14:56:54 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LovDocNewIdVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public LovDocNewIdVOImpl() {
    }

    /**
     * Returns the bind variable value for BindDocId.
     * @return bind variable value for BindDocId
     */
    public Integer getBindDocId() {
        return (Integer)getNamedWhereClauseParam("BindDocId");
    }

    /**
     * Sets <code>value</code> for bind variable BindDocId.
     * @param value value to bind as BindDocId
     */
    public void setBindDocId(Integer value) {
        setNamedWhereClauseParam("BindDocId", value);
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    @Override
    protected void bindParametersForCollection(QueryCollection queryCollection, Object[] object,
                                               PreparedStatement preparedStatement) throws SQLException, SQLException {
        System.out.println("Query " + getQuery());
        super.bindParametersForCollection(queryCollection, object, preparedStatement);

        if (object != null) {
            if (getBindingStyle() == SQLBuilder.BINDING_STYLE_ORACLE_NAME) {
                Map<String, Object> bindsMap = new HashMap<String, Object>(object.length);
                for (Object obj : object) {
                    Object[] nameValue = (Object[])obj;
                    String name = (String)nameValue[0];
                    Object value = nameValue[1];
                    bindsMap.put(name, value);

                }
                System.out.println(" Bind Variables : []" + bindsMap);
            }
        }
    }
}
