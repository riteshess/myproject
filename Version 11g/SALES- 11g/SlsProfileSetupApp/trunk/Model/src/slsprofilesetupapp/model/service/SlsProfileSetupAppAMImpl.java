package slsprofilesetupapp.model.service;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsprofilesetupapp.model.service.common.SlsProfileSetupAppAM;
import slsprofilesetupapp.model.views.OrgSlsPrfVOImpl;
import oracle.jbo.domain.Number;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 24 17:08:32 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsProfileSetupAppAMImpl extends ApplicationModuleImpl implements SlsProfileSetupAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SlsProfileSetupAppAMImpl() {
    }

    /**
     * Container's getter for OrgSlsPrf1.
     * @return OrgSlsPrf1
     */
    public OrgSlsPrfVOImpl getOrgSlsPrf1() {
        return (OrgSlsPrfVOImpl)findViewObject("OrgSlsPrf1");
    }
    
    public void getSearchByOrg(String organisation){
        if (organisation!=null) {
            ViewObject slsPrfSetupVo = this.getOrgSlsPrf1();
            if (slsPrfSetupVo!=null) {
                getResetSearchByOrg(null);
                slsPrfSetupVo.executeQuery();
                slsPrfSetupVo.setNamedWhereClauseParam("orgIdBindVar", organisation);
                slsPrfSetupVo.executeQuery();
            }
        }
    }
    
    
    public void getResetSearchByOrg(String organisation){
        System.out.println("Am Impl reset");
        try{
            ViewObject slsPrfSetupVo = this.getOrgSlsPrf1();
            if (slsPrfSetupVo!=null) {
                System.out.println("slsPrfSetupVo  not null am Impl reset");
                slsPrfSetupVo.setNamedWhereClauseParam("orgIdBindVar", null);
                slsPrfSetupVo.executeQuery();
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }


    /**
     * Container's getter for LOVOrg1.
     * @return LOVOrg1
     */
    public ViewObjectImpl getLOVOrg1() {
        return (ViewObjectImpl)findViewObject("LOVOrg1");
    }
    
    /****Methods to get Global Parameter*/
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public String getparamHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getparamBinCheck() {
        return resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
    }

    public String getparamGeChk() {
        return resolvEl("#{pageFlowScope.GLBL_ORG_GE_CHK}");
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }
    public void setUserIdCreateOnsaveVlick(){
        ViewObjectImpl orgSlsPrfVo=this.getOrgSlsPrf1();
        Row currRow=orgSlsPrfVo.getCurrentRow();
        if(currRow!= null){
            System.out.println("in amimpl "+getparamUsrId());
            currRow.setAttribute("UsrIdCreate", getparamUsrId());
        }
    }
     
    public boolean areValidationsOk(){
        Boolean b = false;
        OrgSlsPrfVOImpl impl = this.getOrgSlsPrf1();
        Row currentRow = impl.getCurrentRow();
        
        
        Object freezeO = currentRow.getAttribute("FreezePrf");
        StringBuffer freeze = (freezeO == null ? new StringBuffer("") : new StringBuffer(freezeO.toString()));

        Object usrDiscO = currentRow.getAttribute("TransUsrDiscAcc");
        StringBuffer usrDisc = (usrDiscO == null ? new StringBuffer("") : new StringBuffer(usrDiscO.toString()));

        Object usrCashO = currentRow.getAttribute("TransCashCustAcc");
        StringBuffer usrCash = (usrCashO == null ? new StringBuffer("") : new StringBuffer(usrCashO.toString()));
        
        if(freeze.toString().equals("Y")){
            if(usrCash.toString().equals("")){
                FacesMessage message =
                    new FacesMessage("Cash Customer Account is not selected. Sales Profile cannot be freezed without Cash Customer Account. Please select Cash Customer Account!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            
            }else if(usrDisc.toString().equals("")){
                FacesMessage message =
                    new FacesMessage("Discount Account is not selected. Sales Profile cannot be freezed without Discount Account. Please select Discount!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }else{
                b = true;
            }
        }else{
            b = true;
        }

        return b;
    }
    
    public Boolean areValidationsValid(){
        Boolean b = false;

        OrgSlsPrfVOImpl impl = this.getOrgSlsPrf1();
        Row soRow = impl.getCurrentRow();
        if(soRow != null){
            Object stopRmaCkO = soRow.getAttribute("StopSlsRet");
            Object stopRmaValO = soRow.getAttribute("StopSlsRetDays");
            Object soAdvCkO = soRow.getAttribute("CheckSoAdv");
            Object soAdvTypO = soRow.getAttribute("SoAdvType");
            Object soAdvValO = soRow.getAttribute("SoAdvVal");
            
            String stopRmaCk = (stopRmaCkO == null ? "N" : stopRmaCkO.toString());
            Integer stopRmaVal = (stopRmaValO == null ? 0 : (Integer)stopRmaValO);
            String soAdvCk = (soAdvCkO == null ? "N" : soAdvCkO.toString());
            String soAdvTyp = (soAdvTypO == null ? null : soAdvTypO.toString());
            Number soAdvVal = (soAdvValO == null ? new Number(0) : (Number)soAdvValO);
            
            System.out.println("Stop RMA : "+stopRmaCk);
            System.out.println("Stop RMA Days : "+stopRmaVal);
            System.out.println("So Advance : "+soAdvCk);
            System.out.println("Advance Type : "+soAdvTyp);
            System.out.println("Advance Value : "+soAdvVal);
            
            if(stopRmaCk.equals("Y") && stopRmaVal <= 0){
                FacesMessage message =
                    new FacesMessage("Stop RMA Days should be greater than zero when Stop RMA is selected. Please enter RMA Days!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }else if(soAdvCk.equals("Y")  && soAdvVal.compareTo(0) <= 0){//&& soAdvTyp != null
                FacesMessage message =
                    new FacesMessage("Advance Payment Amount should be greater than zero when Check Advance Payment Of Sales Order is selected. Please enter Advance Payment Amount!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }else if(areValidationsOk() == false){
                b = false;
            }else
                b = true;
            }
        
        return b;
    }
}
