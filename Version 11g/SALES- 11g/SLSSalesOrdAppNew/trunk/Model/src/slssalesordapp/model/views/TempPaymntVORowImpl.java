package slssalesordapp.model.views;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.JboException;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import slssalesordapp.model.service.salesOrderAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 16 16:26:33 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TempPaymntVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        PaymntDtTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntDtTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntDtTrans((Timestamp)value);
            }
        }
        ,
        PaymntAmtTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntAmtTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntAmtTrans((Number)value);
            }
        }
        ,
        PaymntRemarksTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntRemarksTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntRemarksTrans((String)value);
            }
        }
        ,
        PaymntModTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntModTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntModTrans((Integer)value);
            }
        }
        ,
        PaymntTypNoTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntTypNoTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntTypNoTrans((String)value);
            }
        }
        ,
        PaymntBankAccNoTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntBankAccNoTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntBankAccNoTrans((String)value);
            }
        }
        ,
        PaymntAddsTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntAddsTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntAddsTrans((String)value);
            }
        }
        ,
        PaymntCurrIdTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntCurrIdTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntCurrIdTrans((Integer)value);
            }
        }
        ,
        PaymntCurrConvTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntCurrConvTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntCurrConvTrans((Number)value);
            }
        }
        ,
        PaymntCldIdTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntCldIdTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntCldIdTrans((String)value);
            }
        }
        ,
        PaymntSlocIdTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntSlocIdTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntSlocIdTrans((Integer)value);
            }
        }
        ,
        PaymntOrgIdTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntOrgIdTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntOrgIdTrans((String)value);
            }
        }
        ,
        PaymntHoOrgIdTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntHoOrgIdTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntHoOrgIdTrans((String)value);
            }
        }
        ,
        PaymntCurrIdBsTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntCurrIdBsTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntCurrIdBsTrans((Integer)value);
            }
        }
        ,
        PaymntAddsShowTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getPaymntAddsShowTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setPaymntAddsShowTrans((String)value);
            }
        }
        ,
        EoIdTrans {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getEoIdTrans();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setEoIdTrans((Integer)value);
            }
        }
        ,
        LovPayModeVO1 {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getLovPayModeVO1();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovCurrId1 {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getLovCurrId1();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovEoAddsVO1 {
            public Object get(TempPaymntVORowImpl obj) {
                return obj.getLovEoAddsVO1();
            }

            public void put(TempPaymntVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TempPaymntVORowImpl object);

        public abstract void put(TempPaymntVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int PAYMNTDTTRANS = AttributesEnum.PaymntDtTrans.index();
    public static final int PAYMNTAMTTRANS = AttributesEnum.PaymntAmtTrans.index();
    public static final int PAYMNTREMARKSTRANS = AttributesEnum.PaymntRemarksTrans.index();
    public static final int PAYMNTMODTRANS = AttributesEnum.PaymntModTrans.index();
    public static final int PAYMNTTYPNOTRANS = AttributesEnum.PaymntTypNoTrans.index();
    public static final int PAYMNTBANKACCNOTRANS = AttributesEnum.PaymntBankAccNoTrans.index();
    public static final int PAYMNTADDSTRANS = AttributesEnum.PaymntAddsTrans.index();
    public static final int PAYMNTCURRIDTRANS = AttributesEnum.PaymntCurrIdTrans.index();
    public static final int PAYMNTCURRCONVTRANS = AttributesEnum.PaymntCurrConvTrans.index();
    public static final int PAYMNTCLDIDTRANS = AttributesEnum.PaymntCldIdTrans.index();
    public static final int PAYMNTSLOCIDTRANS = AttributesEnum.PaymntSlocIdTrans.index();
    public static final int PAYMNTORGIDTRANS = AttributesEnum.PaymntOrgIdTrans.index();
    public static final int PAYMNTHOORGIDTRANS = AttributesEnum.PaymntHoOrgIdTrans.index();
    public static final int PAYMNTCURRIDBSTRANS = AttributesEnum.PaymntCurrIdBsTrans.index();
    public static final int PAYMNTADDSSHOWTRANS = AttributesEnum.PaymntAddsShowTrans.index();
    public static final int EOIDTRANS = AttributesEnum.EoIdTrans.index();
    public static final int LOVPAYMODEVO1 = AttributesEnum.LovPayModeVO1.index();
    public static final int LOVCURRID1 = AttributesEnum.LovCurrId1.index();
    public static final int LOVEOADDSVO1 = AttributesEnum.LovEoAddsVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TempPaymntVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntDtTrans.
     * @return the PaymntDtTrans
     */
    public Timestamp getPaymntDtTrans() {
        if((Timestamp)getAttributeInternal(PAYMNTDTTRANS) == null){
            setPaymntDtTrans(new Timestamp(System.currentTimeMillis()));
        }
        return (Timestamp)getAttributeInternal(PAYMNTDTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntDtTrans.
     * @param value value to set the  PaymntDtTrans
     */
    public void setPaymntDtTrans(Timestamp value) {
        setAttributeInternal(PAYMNTDTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntAmtTrans.
     * @return the PaymntAmtTrans
     */
    public Number getPaymntAmtTrans() {
        return (Number) getAttributeInternal(PAYMNTAMTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntAmtTrans.
     * @param value value to set the  PaymntAmtTrans
     */
    public void setPaymntAmtTrans(Number value) {
        setAttributeInternal(PAYMNTAMTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntRemarksTrans.
     * @return the PaymntRemarksTrans
     */
    public String getPaymntRemarksTrans() {
        return (String) getAttributeInternal(PAYMNTREMARKSTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntRemarksTrans.
     * @param value value to set the  PaymntRemarksTrans
     */
    public void setPaymntRemarksTrans(String value) {
        setAttributeInternal(PAYMNTREMARKSTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntModTrans.
     * @return the PaymntModTrans
     */
    public Integer getPaymntModTrans() {
        return (Integer) getAttributeInternal(PAYMNTMODTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntModTrans.
     * @param value value to set the  PaymntModTrans
     */
    public void setPaymntModTrans(Integer value) {
        setAttributeInternal(PAYMNTMODTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntTypNoTrans.
     * @return the PaymntTypNoTrans
     */
    public String getPaymntTypNoTrans() {
        return (String) getAttributeInternal(PAYMNTTYPNOTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntTypNoTrans.
     * @param value value to set the  PaymntTypNoTrans
     */
    public void setPaymntTypNoTrans(String value) {
        setAttributeInternal(PAYMNTTYPNOTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntBankAccNoTrans.
     * @return the PaymntBankAccNoTrans
     */
    public String getPaymntBankAccNoTrans() {
        return (String) getAttributeInternal(PAYMNTBANKACCNOTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntBankAccNoTrans.
     * @param value value to set the  PaymntBankAccNoTrans
     */
    public void setPaymntBankAccNoTrans(String value) {
        setAttributeInternal(PAYMNTBANKACCNOTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntAddsTrans.
     * @return the PaymntAddsTrans
     */
    public String getPaymntAddsTrans() {
        return (String) getAttributeInternal(PAYMNTADDSTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntAddsTrans.
     * @param value value to set the  PaymntAddsTrans
     */
    public void setPaymntAddsTrans(String value) {
        setAttributeInternal(PAYMNTADDSTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntCurrIdTrans.
     * @return the PaymntCurrIdTrans
     */
    public Integer getPaymntCurrIdTrans() {
        return (Integer) getAttributeInternal(PAYMNTCURRIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntCurrIdTrans.
     * @param value value to set the  PaymntCurrIdTrans
     */
    public void setPaymntCurrIdTrans(Integer value) {
        setAttributeInternal(PAYMNTCURRIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntCurrConvTrans.
     * @return the PaymntCurrConvTrans
     */
    public Number getPaymntCurrConvTrans() {
        return (Number) getAttributeInternal(PAYMNTCURRCONVTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntCurrConvTrans.
     * @param value value to set the  PaymntCurrConvTrans
     */
    public void setPaymntCurrConvTrans(Number value) {
        setAttributeInternal(PAYMNTCURRCONVTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntCldIdTrans.
     * @return the PaymntCldIdTrans
     */
    public String getPaymntCldIdTrans() {
        StringBuffer cldId = new StringBuffer("");
        if(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}") != null){
            cldId =new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        }
        return cldId.toString();
        //return (String) getAttributeInternal(PAYMNTCLDIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntCldIdTrans.
     * @param value value to set the  PaymntCldIdTrans
     */
    public void setPaymntCldIdTrans(String value) {
        setAttributeInternal(PAYMNTCLDIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntSlocIdTrans.
     * @return the PaymntSlocIdTrans
     */
    public Integer getPaymntSlocIdTrans() {
        Integer slocId = 0;
        if(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}") != null){
            slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        }
        return slocId;
        //return (Integer) getAttributeInternal(PAYMNTSLOCIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntSlocIdTrans.
     * @param value value to set the  PaymntSlocIdTrans
     */
    public void setPaymntSlocIdTrans(Integer value) {
        setAttributeInternal(PAYMNTSLOCIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntOrgIdTrans.
     * @return the PaymntOrgIdTrans
     */
    public String getPaymntOrgIdTrans() {
        StringBuffer orgId = new StringBuffer("");
        if(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}") != null){
            orgId =new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        }
        return orgId.toString();
        //return (String) getAttributeInternal(PAYMNTORGIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntOrgIdTrans.
     * @param value value to set the  PaymntOrgIdTrans
     */
    public void setPaymntOrgIdTrans(String value) {
        setAttributeInternal(PAYMNTORGIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntHoOrgIdTrans.
     * @return the PaymntHoOrgIdTrans
     */
    public String getPaymntHoOrgIdTrans() {
        StringBuffer hoOrgId = new StringBuffer("");
        if(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}") != null){
            hoOrgId =new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        }
        return hoOrgId.toString();
        //return (String) getAttributeInternal(PAYMNTHOORGIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntHoOrgIdTrans.
     * @param value value to set the  PaymntHoOrgIdTrans
     */
    public void setPaymntHoOrgIdTrans(String value) {
        setAttributeInternal(PAYMNTHOORGIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntCurrIdBsTrans.
     * @return the PaymntCurrIdBsTrans
     */
    public Integer getPaymntCurrIdBsTrans() {
        
        return getCurrIdBs(this.getPaymntOrgIdTrans()).intValue();
        //return (Integer) getAttributeInternal(PAYMNTCURRIDBSTRANS);
    }
    /**  call db function "pkg_app.get_org_def_curr_bs1" */
    public Integer getCurrIdBs(String OrgId) {
        Integer i = 0;
        try{
            i = (Integer)callStoredFunction(Types.INTEGER, "APP.PKG_APP.GET_ORG_DEF_CURR_BS1(?)",
                                                          new Object[] { OrgId });
        }catch(Exception e){
            System.out.println(e);
        }

        return i;
    }

    /**Method to call database function*/
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            salesOrderAMImpl am = (salesOrderAMImpl)resolvElDC("salesOrderAMDataControl");
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    /**Method to resolve expression- returns Object value*/
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }


    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntCurrIdBsTrans.
     * @param value value to set the  PaymntCurrIdBsTrans
     */
    public void setPaymntCurrIdBsTrans(Integer value) {
        setAttributeInternal(PAYMNTCURRIDBSTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PaymntAddsShowTrans.
     * @return the PaymntAddsShowTrans
     */
    public String getPaymntAddsShowTrans() {
        return (String) getAttributeInternal(PAYMNTADDSSHOWTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PaymntAddsShowTrans.
     * @param value value to set the  PaymntAddsShowTrans
     */
    public void setPaymntAddsShowTrans(String value) {
        setAttributeInternal(PAYMNTADDSSHOWTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EoIdTrans.
     * @return the EoIdTrans
     */
    public Integer getEoIdTrans() {
        if(this.getApplicationModule() != null)
        {
            salesOrderAMImpl am = (salesOrderAMImpl)this.getApplicationModule();
            ViewObjectImpl impl = am.getSlsSo1();
            if(impl !=null && impl.getCurrentRow() != null) {
                if(impl.getCurrentRow().getAttribute("EoId") != null)
                {
                    Integer id = Integer.parseInt(impl.getCurrentRow().getAttribute("EoId").toString());
                    System.out.println("Eo id is:  "+id);
                    return id;
                }
            }
        }
        return (Integer) getAttributeInternal(EOIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoIdTrans.
     * @param value value to set the  EoIdTrans
     */
    public void setEoIdTrans(Integer value) {
        setAttributeInternal(EOIDTRANS, value);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovPayModeVO1.
     */
    public RowSet getLovPayModeVO1() {
        return (RowSet)getAttributeInternal(LOVPAYMODEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCurrId1.
     */
    public RowSet getLovCurrId1() {
        return (RowSet)getAttributeInternal(LOVCURRID1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovEoAddsVO1.
     */
    public RowSet getLovEoAddsVO1() {
        return (RowSet)getAttributeInternal(LOVEOADDSVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
