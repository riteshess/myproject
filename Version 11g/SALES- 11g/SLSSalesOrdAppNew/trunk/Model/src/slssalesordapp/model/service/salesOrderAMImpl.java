package slssalesordapp.model.service;


import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;

import slssalesordapp.model.service.common.salesOrderAM;
import slssalesordapp.model.views.MMGrpHdrTempVOImpl;
import slssalesordapp.model.views.MmSoItmPoVORowImpl;
import slssalesordapp.model.views.SlsSoItmTrfVORowImpl;
import slssalesordapp.model.views.SlsSoVOImpl;
import slssalesordapp.model.views.SlsSoVORowImpl;
import slssalesordapp.model.views.TempPaymntVORowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 27 15:10:33 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class salesOrderAMImpl extends ApplicationModuleImpl implements salesOrderAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger _log = ADFLogger.createADFLogger(salesOrderAMImpl.class);
    private String shipadds = null;
    //private static Number ZERO = StaticValue.NUMBER_ZERO;


    public salesOrderAMImpl() {
    }

    /**
     * @return
     */
    public Integer getAmtDgt() {
        if (resolvElO("#{pageFlowScope.GLBL_AMT_DIGIT}") != null) {
            return Integer.parseInt(resolvElO("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        } else {
            return 2;
        }
    }

    /*******
 * Methods to be used in Managed Bean
 *
 * *****************/

    /**Method to generate Serial Number for Table
     * **.
     * @param voName
     */
    public void serialNumGen(String voName) {
        /**New Code to get Serial No.- 6-03-2013-@Ashish Kumar*/
        ViewObject soItm = this.findViewObject(voName);
        Integer Srno = 0;
        Integer max = 0;
        soItm.setRangeSize(-1);
        Row row[] = soItm.getAllRowsInRange();
        for (Row r : row) {
            try {
                Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
            } catch (NullPointerException e) {
                Srno = 0;
            }
            if (Srno > max) {
                max = Srno;
            }

        }

        max = max + 1;
        _log.warning("Max Value is-->" + max);
        soItm.getCurrentRow().setAttribute("SrNo", max);

    }

    /**Method to resolve expression- returns String value.
     * @param data
     * @return
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**Method to resolve expression- returns String value.
     * @param data
     * @return
     */
    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**Method to generate Schedule Number (as per Sales Order,Item and Delivery Date).
     * @param dlvDt
     * @return
     */
    public Integer generateScheduleNo(Timestamp dlvDt) {
        Integer schdlNo = 1;
        ViewObject dlvSchdl = this.getSlsSoDlvSchdl1();
        Row fltrRow[] = dlvSchdl.getFilteredRows("DlvDt", dlvDt);
        _log.info("Row for this date-" + fltrRow.length);
        if (fltrRow.length > 0) {
            if (fltrRow[0].getAttribute("DlvSchdlNo") != null) {
                schdlNo = Integer.parseInt(fltrRow[0].getAttribute("DlvSchdlNo").toString());
            }
        } else {
            Integer Srno = 0;
            Integer max = 0;
            dlvSchdl.setRangeSize(-1);
            Row row[] = dlvSchdl.getAllRowsInRange();
            for (Row r : row) {
                try {
                    Srno = Integer.parseInt(r.getAttribute("DlvSchdlNo").toString());
                    _log.info("Row Scdl No is-" + Srno);
                } catch (NullPointerException e) {
                    Srno = 0;

                }
                if (Srno > max) {
                    max = Srno;
                }
            }

            max = max + 1;
            _log.warning("Max Schdl No is-->" + max);
            schdlNo = max;

        }
        _log.info("Delivery Schedule Number is" + schdlNo);
        return schdlNo;
    }

    /**Method to save deivery details as per order type(ALL/RATE-Contract).
     * @return
     */
    public String saveDeliverySchedule() {
        ViewObject slsSo = getSlsSo1();
        Row poCurr = slsSo.getCurrentRow();
        ViewObject dlvVo = null;
        String availVarName = "";

        if (poCurr.getAttribute("OrderType").equals(311)) {
            dlvVo = this.getRateContractVw1();
            availVarName = "AvailableAmtTrans";
        } else {
            dlvVo = this.getDlvShdlView1();
            availVarName = "availableStockTrans";
        }

        ViewObjectImpl slsdlvVo = getSlsSoDlvSchdl1(); //to

        String returnVal = null;
        _log.info("Inside AmImpl method");

        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

        _log.info("Delv Date is-->" + poCurr.getAttribute("DvlDateTrans"));
        RowSetIterator rsi = dlvVo.createRowSetIterator(null);
        Timestamp ordDate = (Timestamp)poCurr.getAttribute("DocDt");
        if (poCurr.getAttribute("DvlDateTrans") != null) {
            while (rsi.hasNext()) {
                Row cur = rsi.next();
                Object o = cur.getAttribute("SelectItmChekBoxTrans");
                _log.warning("checkBox vale-->" + o);
                if (o != null) {
                    if ("Y".equalsIgnoreCase(o.toString())) {
                        if (cur.getAttribute("SchdlQuantTrans") != null) {
                            if (poCurr.getAttribute("WhIdDlvTrans") != null) {
                                oracle.jbo.domain.Timestamp dt =
                                    (oracle.jbo.domain.Timestamp)poCurr.getAttribute("DvlDateTrans");
                                try {
                                    ordDate = new Timestamp(ordDate.dateValue());
                                } catch (SQLException e) {
                                }
                                String itmid = null;
                                if (poCurr.getAttribute("OrderType").equals(311)) {
                                    itmid = cur.getAttribute("ItmIdRc").toString();
                                } else {
                                    itmid = cur.getAttribute("ItemId").toString();

                                }

                                //system.out.println("ItemId--->" + itmid);
                                String whId = poCurr.getAttribute("WhIdDlvTrans").toString();
                                //system.out.println("Wh Id is:  " + whId + "------");
                                RowQualifier rq = new RowQualifier(slsdlvVo);
                                rq.setWhereClause("ItmId='" + itmid + "' And DlvDt='" + dt + "' And WhId = '" + whId +
                                                  "' ");
                                //system.out.println("Row qul-->" + rq.getExprStr());
                                Row[] filteredRows = slsdlvVo.getFilteredRows(rq);
                                //system.out.println("Filetr row count-->" + filteredRows.length);
                                if (filteredRows.length > 0) {

                                    returnVal = "D";
                                    break;

                                } else {

                                    try {
                                        if (dt.dateValue().compareTo(ordDate.dateValue()) == -1) {
                                            _log.info("Deliver Date is Less-");
                                            //  FacesMessage msg = new FacesMessage("Delivery Date can not be less than Order Date");
                                            FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.849']}"));
                                            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                                            FacesContext.getCurrentInstance().addMessage(null, msg);
                                            break;
                                        } else {
                                            rq.setWhereClause(null);
                                            Integer schdlNo = generateScheduleNo(dt);
                                            Row dlvRow = slsdlvVo.createRow();
                                            slsdlvVo.insertRow(dlvRow);
                                            serialNumGen("SlsSoDlvSchdl1");
                                            System.out.println("Available quantity :" + availVarName + ": Value :" +
                                                               cur.getAttribute(availVarName));
                                            dlvRow.setAttribute("AvlQty", cur.getAttribute(availVarName));
                                            dlvRow.setAttribute("DocId", cur.getAttribute("DocId"));
                                            dlvRow.setAttribute("SlocId", cur.getAttribute("SlocId"));
                                            dlvRow.setAttribute("OrgId", cur.getAttribute("OrgId"));
                                            dlvRow.setAttribute("DlvDt", dt);
                                            dlvRow.setAttribute("DlvQty", cur.getAttribute("SchdlQuantTrans"));
                                            dlvRow.setAttribute("DlvMode", poCurr.getAttribute("DlvModeTrans"));
                                            dlvRow.setAttribute("WhId", poCurr.getAttribute("WhIdDlvTrans"));
                                            dlvRow.setAttribute("UsrIdCreate", p_user_id);
                                            dlvRow.setAttribute("DlvAddsId", poCurr.getAttribute("WhIdAddrIdTrans"));
                                            dlvRow.setAttribute("DlvSchdlNo", schdlNo);
                                            dlvRow.setAttribute("ItmUomBs", cur.getAttribute("ItmUomBs"));
                                            Object rem = poCurr.getAttribute("DelRemarksTrans");
                                            StringBuffer r = new StringBuffer("");
                                            if (rem != null) {
                                                r = new StringBuffer(rem.toString());
                                            }
                                            dlvRow.setAttribute("Remarks", r.toString());


                                            // To calculate and add pending Quantity
                                            Number pendingQty = StaticValue.NUMBER_ZERO;
                                            if (poCurr.getAttribute("OrderType").equals(311)) {

                                            } else {
                                                if (cur.getAttribute(availVarName) != null &&
                                                    cur.getAttribute("SchdlQuantTrans") != null) {
                                                    Number avail = (Number)cur.getAttribute(availVarName);
                                                    Number schDlQty = (Number)cur.getAttribute("SchdlQuantTrans");
                                                    if (avail.compareTo(schDlQty) == -1) {
                                                        pendingQty = (Number)schDlQty.minus(avail);
                                                    }
                                                }
                                            }

                                            //system.out.println("pending quabtity :" + pendingQty);
                                            dlvRow.setAttribute("BalQty", pendingQty);


                                            Number uomConvFctr = new Number(1);
                                            if (cur.getAttribute("UomConvFctr") != null) {
                                                uomConvFctr = (Number)cur.getAttribute("UomConvFctr");
                                            }

                                            //Number pendingQuant = StaticValue.NUMBER_ZERO;

                                            //system.out.println("Uom conv fctr is : " + uomConvFctr);
                                            dlvRow.setAttribute("UomConvFctr", uomConvFctr);
                                            //DlvQtyBs
                                            Number bsQty = StaticValue.NUMBER_ZERO;
                                            bsQty =
(Number)uomConvFctr.mul((Number)cur.getAttribute("SchdlQuantTrans"));
                                            //system.out.println("Base qty is :" + bsQty);
                                            dlvRow.setAttribute("DlvQtyBs", bsQty);
                                            _log.info("Order Type -->" + poCurr.getAttribute("OrderType"));
                                            if (poCurr.getAttribute("OrderType").equals(311)) {
                                                dlvRow.setAttribute("ItmId", cur.getAttribute("ItmIdRc"));
                                                dlvRow.setAttribute("ItmUom", cur.getAttribute("ItmUomRc"));
                                            } else {
                                                dlvRow.setAttribute("TotQty", cur.getAttribute("OrdQty"));
                                                dlvRow.setAttribute("ItmId", cur.getAttribute("ItemId"));
                                                dlvRow.setAttribute("ItmUom", cur.getAttribute("ItemUom"));
                                            }

                                        }
                                    } catch (SQLException e) {
                                        _log.info("In exception-" + e);
                                    }
                                }
                            } else {

                                returnVal = "W";
                            }
                        } else {

                            returnVal = "S";
                        }
                    }
                }
            }
            /**Set transient to blank*/
            poCurr.setAttribute("DlvModeTrans", null);
            poCurr.setAttribute("WhIdDlvTrans", null);
            poCurr.setAttribute("DvlDateTrans", null);
            rsi.closeRowSetIterator();
            slsdlvVo.executeQuery();
            this.getDBTransaction().validate();
            this.getDBTransaction().postChanges();
            dlvVo.executeQuery();

        } else {
            // FacesMessage msg = new FacesMessage("Please Specify Delivery Date");
            FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.847']}"));
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        return returnVal;
    }

    /**Method to Save payment schedule.
     */
    public void donePaySchdlAction() {
        //system.out.println("Came in dlvy Action......");
        ViewObject pmtVo = this.getSlsSoPmntSchdl1();
        ViewObject slsSo = this.getSlsSo1();
        String flg = "N";
        //String returnVal = null;
        Row currSo = slsSo.getCurrentRow();

        if (currSo.getAttribute("PayDateTrans") != null) {
            //system.out.println("Came in payTrans");
            Timestamp dt = (Timestamp)currSo.getAttribute("PayDateTrans");
            Timestamp soDt = (Timestamp)currSo.getAttribute("DocDt");
            java.sql.Date ordDate = null;
            java.sql.Date payDt = null;
            java.util.Date ordUtilDt = null;
            java.util.Date payUtilDt = null;
            try {

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                ordDate = soDt.dateValue();
                payDt = dt.dateValue();
                ordUtilDt = sdf.parse(ordDate.toString());
                payUtilDt = sdf.parse(dt.toString());
            } catch (SQLException e) {
                _log.info("Eception in Date Conveersion->" + e);
            } catch (ParseException e) {
                _log.info(e);
            }
            if (currSo.getAttribute("PayAdvFlgTrans") != null) {
                flg = currSo.getAttribute("PayAdvFlgTrans").toString();
            }
            _log.info("Order Date is-->" + ordDate + "and pay date is-->" + payDt + "And Compare -->" +
                      ordUtilDt.after(payUtilDt));
            //if Doc Date is less than Payment Date & Advance Flag is checked.
            if ("Y".equalsIgnoreCase(flg) && soDt.compareTo(dt) == -1) {
                // String msg2 = "Payment Date must be less than or equal to Order Date for Advance";
                String msg2 = resolvEl("#{bundle['MSG.846']}");
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);

                //if Order Date is more than Payment Date & Advance Flag is unchecked.

            } else if ("N".equalsIgnoreCase(flg) && (ordUtilDt.after(payUtilDt))) {
                // String msg2 = "Payment Date cannot be less than Order Date";
                String msg2 = resolvEl("#{bundle['MSG.845']}");
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);

            } else if (currSo.getAttribute("PayAmtTrans") != null) {
                Number amt = (Number)currSo.getAttribute("PayAmtTrans");
                Number zero = StaticValue.NUMBER_ZERO;
                if (amt.compareTo(zero) == 1) {

                    Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                    Number totAmt = (Number)currSo.getAttribute("OrderTotalCostTrans");
                    totAmt = (Number)totAmt.round(getAmtDgt());
                    Integer payMode = 160;
                    if (currSo.getAttribute("PayModeTrans") != null) {
                        payMode = Integer.parseInt(currSo.getAttribute("PayModeTrans").toString());
                    }
                    if (dt != null && (amt != null || amt.compareTo(zero) == 1)) {

                        Row pmtCurr = pmtVo.createRow();
                        pmtCurr.setAttribute("PayDt", dt);
                        pmtCurr.setAttribute("PayAmt", amt);
                        pmtCurr.setAttribute("DocId", currSo.getAttribute("DocId"));

                        pmtCurr.setAttribute("OrgId", currSo.getAttribute("OrgId"));
                        pmtCurr.setAttribute("SlocId", currSo.getAttribute("SlocId"));
                        pmtCurr.setAttribute("TotAmt", totAmt);
                        pmtCurr.setAttribute("UsrIdCreate", p_user_id);
                        pmtCurr.setAttribute("AdvFlg", flg);
                        pmtCurr.setAttribute("PayMode", payMode);
                        //      pmtVo.insertRow(pmtCurr);

                        System.out.println("all the values which are inserting in the payment schdl:  ---" + dt +
                                           "   " + amt + "   " + currSo.getAttribute("DocId") + "   " +
                                           currSo.getAttribute("OrgId") + "    " + currSo.getAttribute("SlocId") +
                                           "   " + totAmt + "   " + p_user_id + "   " + flg + "   " + payMode);
                    }

                    Number num = (Number)currSo.getAttribute("PayAmtSumTrans");
                    Number remain = totAmt.subtract(num);
                    if (remain.compareTo(zero) == 0) {
                        currSo.setAttribute("PayAmtTrans", StaticValue.NUMBER_ZERO);
                    } else if (remain.compareTo(zero) == 1) {
                        currSo.setAttribute("PayAmtTrans", remain);
                    }
                    currSo.setAttribute("PayAmtTrans", StaticValue.NUMBER_ZERO);
                    currSo.setAttribute("PayDateTrans", null);
                    currSo.setAttribute("PayAdvFlgTrans", "N");

                } else {
                    String msg2 = resolvEl("#{bundle['MSG.265']}");
                    FacesMessage message2 = new FacesMessage(msg2);
                    message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message2);
                }
            } else {
                String msg2 = resolvEl("#{bundle['MSG.422']}");
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);
            }
        } else {
            String msg2 = resolvEl("#{bundle['MSG.423']}");
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message2);
        }
        pmtVo.executeQuery();
        //executeViewObjects();
    }

    /**Payment Date validation for duplicate value.
     * @param paydt
     * @return
     */
    public String paymentDateValidation(Timestamp paydt) {
        _log.info("Inside AM Validator");
        ViewObject slsPmt = this.getSlsSoPmntSchdl1();
        _log.info("Date is-->" + paydt);
        if (paydt != null) {
            Row rows[] = slsPmt.getFilteredRows("PayDt", paydt);
            _log.info("Total row with same date is-->" + rows.length);
            if (rows.length > 0) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return null;
        }

    }

    public void postChangesDlvSchdl() {
        ViewObject dlvSchdl = this.getDlvShdlView1();
        ViewObject vo = this.getSlsSoDlvSchdl1();

        vo.executeQuery();
        this.getDBTransaction().postChanges();
        vo.executeQuery();
        dlvSchdl.executeQuery();

    }

    /**Disclosure Listener for panel tab to execute viewObject data.
     */
    public void dlvrySchdlDiscList() {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        SlsSoVOImpl slsSo = (SlsSoVOImpl)this.getSlsSo1();
        String docId = this.getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        _log.info("DocId is-" + docId);
        _log.info("Transaction is-" + this.getSlsSoItm1().getDBTransaction().isDirty());
        if (this.getSlsSoItm1().getDBTransaction().isDirty() == true) {
            //this.getDBTransaction().commit();
            _log.info("Commited");
        }
        executeViewObjects();

        slsSo.executeQuery();
        slsSo.setBindVar(p_sloc_id, p_org_id, p_hoOrgId, docId, p_cldId);
    }

    /**
     * @param val
     */
    public void selectAllCheckBox(boolean val) {
        ViewObject dlvView = this.getDlvShdlView1();
        RowSetIterator rit = dlvView.createRowSetIterator(null);
        /** Iterate through every visible row of view */

        while (rit.hasNext()) {
            Row row = rit.next();
            _log.info("Value of checkbox is-->" + val);
            if (val) {
                row.setAttribute("SelectItmChekBoxTrans", "Y");
                row.setAttribute("SchdlQuantTrans", row.getAttribute("BalanceQty"));
            } else {
                row.setAttribute("SelectItmChekBoxTrans", "N");
                row.setAttribute("SchdlQuantTrans", StaticValue.NUMBER_ZERO);
            }
        }
    }

    /**Method to be used in drop listener to add T&C.
     * @param curRow
     */
    public void addTnCAction(Row curRow) {
        ViewObject tnc = this.getSlsSoTnc1();

        Row filtRows[] = tnc.getFilteredRows("TncId", curRow.getAttribute("TncId"));
        _log.info("Total Row in VO for same tncc-->" + filtRows.length);
        if (filtRows.length > 0) {
            //FacesMessage mesg = new FacesMessage("Duplicate Terms & Conditions, Please select other one");
            FacesMessage mesg = new FacesMessage(resolvEl("#{bundle['MSG.972']}").toString());
            mesg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, mesg);
        } else {
            Row tncRow = tnc.createRow();
            tnc.insertRow(tncRow);
            tncRow.setAttribute("TncId", curRow.getAttribute("TncId"));
        }
        tnc.executeQuery();
        this.getSlsSoItm1().executeQuery();
    }

    /**
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            //_log.info("______________________________________begin");
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    //_log.info(":"+bindVars[z]);
                }
            }
            st.executeUpdate();
            //_log.info("______________________________________end");
            return st.getObject(1);
        } catch (SQLException e) {
            //int end = e.getMessage().indexOf("\n");
            /* FacesMessage msg=new FacesMessage(e.getMessage());
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg); */

            throw new JboException(e.getMessage());
            // throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    _log.info(e);
                }
            }
        }
    }


    /**
     * @param ruleId
     */
    public void procTaxOrder(Integer ruleId) {

        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_amt = resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString();
        ViewObject slsSo = this.getSlsSo1();
        Row soCurRow = slsSo.getCurrentRow();
        //Row trcurr = this.getSlsSoTr1().getCurrentRow();

        Number itmAmtSum = StaticValue.NUMBER_ZERO;
        Number taxableAmt = StaticValue.NUMBER_ZERO;
        String taxAftDiscFlg = "N";
        //Number toDiscOrd = (Number)soCurRow.getAttribute("SoDiscAmtTrans");
        itmAmtSum = (Number)(soCurRow.getAttribute("ItmAmtSpSumTrans"));
        taxableAmt = itmAmtSum;
        /**
         *  Discount removed
         */
        /* if (soCurRow.getAttribute("TaxAfterDiscFlg") != null) {
            taxAftDiscFlg = soCurRow.getAttribute("TaxAfterDiscFlg").toString();
        } */
        /* if ("Y".equalsIgnoreCase(taxAftDiscFlg)) {
            taxableAmt = itmAmtSum.subtract(toDiscOrd);
        } else {
            taxableAmt = itmAmtSum;
        } */
        _log.info("Tax AftDisc Flag-->" + taxAftDiscFlg);
        // _log.fine("Total Item Sum-->" + itmAmtSum + "Total Order Discount-->" + toDiscOrd + "Final taxable Amt-->" +taxableAmt);
        String p_doc_id = soCurRow.getAttribute("DocId").toString();
        Number p_curr_fctr = (Number)soCurRow.getAttribute("CurrConvFctr");
        //trcurr.setAttribute("TaxableAmt", taxableAmt);
        //Number p_taxable_amount = StaticValue.NUMBER_ZERO; //(Number)trcurr.getAttribute("TaxableAmt");
        ViewObjectImpl forOrdrWiseTaxInsertion = this.getSlsSoTrVO2();
        int i = forOrdrWiseTaxInsertion.getRangeSize();
        forOrdrWiseTaxInsertion.setRangeSize(-1);
        _log.info("Range size of tr : " + i);
        _log.info("No of tax rule already inserted : " + forOrdrWiseTaxInsertion.getEstimatedRowCount());
        ViewObjectImpl impl = this.getSlsSoItm1();

        RowSetIterator createRowSetIterator = impl.createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row tr = null;
            Number taxableAmountInItm = StaticValue.NUMBER_ZERO;
            String taxAlreadyExists = "N";
            StringBuffer itmId = new StringBuffer("");
            Row itmRow = createRowSetIterator.next();
            if (itmRow.getAttribute("ItmId") != null) {
                itmId = new StringBuffer(itmRow.getAttribute("ItmId").toString());
            }
            if (itmRow.getAttribute("ItmAmtGsSp") != null) {
                taxableAmountInItm = (Number)itmRow.getAttribute("ItmAmtGsSp");
            }
            Row[] filteredRows = forOrdrWiseTaxInsertion.getFilteredRows("ItmId", itmId.toString());
            if (filteredRows.length > 0) {
                taxAlreadyExists = "Y";
                tr = filteredRows[0];
            }

            _log.info("Tax exists : " + taxAlreadyExists + " DocId :" + p_doc_id);
            if (tr == null) {
                tr = this.getSlsSoTr2().createRow();
                this.getSlsSoTr2().insertRow(tr);
                /*tr.setAttribute("CldId", p_cldId);
                tr.setAttribute("SlocId", p_sloc_id);
                tr.setAttribute("OrgId", p_org_id);
                tr.setAttribute("HoOrgId", p_hoOrgId);
                tr.setAttribute("DocId", p_doc_id.toString()); */
                tr.setAttribute("SrNo", 1);
                tr.setAttribute("SrNoDest", 0);
                //tr.setAttribute("TaxAmtSp", "");
                //tr.setAttribute("TaxAmtBs", "");
                tr.setAttribute("ExmptFlg", "N");

                tr.setAttribute("ItmId", itmId.toString());

                _log.info("New Row Created : " + tr.getKey() + " DocId : " + tr.getAttribute("DocId"));
            }
            tr.setAttribute("TaxableAmt", taxableAmountInItm);
            tr.setAttribute("TaxRuleId", ruleId);
            // _log.info("TaxRuleId : "+ruleId+" and in row : "+tr.getAttribute("TaxRuleId"));
            _log.info("Key is  : " + tr.getKey());
            /* System.out.println("para are for tr lines function: ");
            System.out.println(p_doc_id);
            System.out.println(itmId.toString());
            System.out.println(ruleId);
            System.out.println(taxableAmountInItm);
            System.out.println(p_user_id);
            System.out.println(p_curr_fctr); */

            BigDecimal ret =
                (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_INS_SO_TR_LINES(?,?,?,?,?,?,?,?,?,?)",
                                               new Object[] { p_sloc_id, p_cldId, p_hoOrgId, p_org_id, p_doc_id,
                                                              itmId.toString(), ruleId, p_user_id, taxableAmountInItm,
                                                              p_curr_fctr });
            Number retVal = StaticValue.NUMBER_ZERO;
            _log.fine("Return total tax amout-->" + ret);
            try {
                retVal = new Number(ret);
            } catch (SQLException e) {
                _log.info(e);
            }

            tr.setAttribute("TaxAmtSp", retVal);
            Number res = retVal.multiply(p_curr_fctr);
            if (p_amt != null) {
                res = (Number)res.round(Integer.parseInt(p_amt.toString()));
            } else {
                res = (Number)res.round(2);
            }
            tr.setAttribute("TaxAmtBs", res);
            itmRow.setAttribute("TaxRuleFlg", "Y");
            // To initiate Recalculations
            itmRow.setAttribute("TempAmtSp", StaticValue.NUMBER_ZERO);
        }
        forOrdrWiseTaxInsertion.setRangeSize(i);

        this.getSlsSoTrLinesVO1().executeQuery();
        /*************************/
        /* OperationBinding ob = executeOperation("newOrOldtaxItem");
                ob.execute();
                String flag = ob.getResult().toString();
                _log.info("Flag for taxRule-->" + flag);
                if ("Y".equalsIgnoreCase(flag)) {
                    executeOperation("CreateInsert3").execute();
                    if (ob.getErrors().isEmpty()) {
                        OperationBinding createParam = executeOperation("serialNumGen");
                        createParam.getParamsMap().put("voName", "SlsSoTr2");
                        createParam.execute();
                    }
                } */
        /*************************/


    }

    /**
     * @param ruleId
     */
    public void procTaxItem(Integer ruleId) {

        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        ViewObject slsSo = this.getSlsSo1();
        Row soCurRow = slsSo.getCurrentRow();
        Row trcurr = this.getSlsSoTr2().getCurrentRow();
        Row itmCur = this.getSlsSoItm1().getCurrentRow();
        String itmId = "0";
        String p_doc_id = trcurr.getAttribute("DocId").toString();
        Number p_curr_fctr = (Number)soCurRow.getAttribute("CurrConvFctr");
        trcurr.setAttribute("TaxableAmt", itmCur.getAttribute("ItmAmtGsSp"));
        Number p_taxable_amount = (Number)trcurr.getAttribute("TaxableAmt");
        if ("I".equalsIgnoreCase(soCurRow.getAttribute("TaxRuleFlg").toString())) {
            itmId = (itmCur.getAttribute("ItmId").toString());
        }
        System.out.println("FuncValsItem--" + p_sloc_id + "--" + p_user_id + "--" + p_org_id + "--" + p_doc_id + "--" +
                           "--" + p_taxable_amount + "-itmId-" + itmId);


        BigDecimal ret =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_INS_SO_TR_LINES(?,?,?,?,?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                                        p_cldId,
                                                                                                                        p_hoOrgId,
                                                                                                                        p_org_id,
                                                                                                                        p_doc_id,
                                                                                                                        itmId,
                                                                                                                        ruleId,
                                                                                                                        p_user_id,
                                                                                                                        p_taxable_amount,
                                                                                                                        p_curr_fctr });
        String amt_dgt = resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString();
        Integer amt_no = 0;
        if (amt_dgt != null)
            amt_no = Integer.parseInt(amt_dgt);

        Number retVal = StaticValue.NUMBER_ZERO;
        _log.info("Return total Itemtax amoutn-->" + ret);
        try {
            retVal = new Number(ret);
            retVal = (Number)retVal.round(amt_no);
        } catch (SQLException e) {
        }
        Number mul = retVal.multiply(p_curr_fctr);
        mul = (Number)mul.round(amt_no);
        trcurr.setAttribute("TaxAmtSp", retVal);
        trcurr.setAttribute("TaxAmtBs", mul);
        itmCur.setAttribute("TempAmtSp", StaticValue.NUMBER_ZERO);


    }

    /**check for creating new tax rule in order wise tax.
     * @return
     */
    public String newOrOldtax() {
        /* Integer rowCount = this.getSlsSoTr1().getRowCount();
        if (rowCount == 0) {
            return "Y";
        } else {
            return "N";
        } */
        return "N";
    }

    /**check for creating new tax rule in item wise tax.
     * @return
     */
    public String newOrOldtaxItem() {
        Integer rowCount = this.getSlsSoTr2().getRowCount();
        if (rowCount == 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    public void addOcValues() {
        ViewObject slsOc = this.getSlsSoOc1();
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Row ocRow = slsOc.getCurrentRow();
        if (soRow.getAttribute("CurrConvFctr") != null) {
            ocRow.setAttribute("CurrRate", soRow.getAttribute("CurrConvFctr"));
        }
        if (soRow.getAttribute("CurrIdSp") != null) {
            ocRow.setAttribute("CurrId", soRow.getAttribute("CurrIdSp"));
        }
        _log.info("Curr Rate in Oc-->" + soRow.getAttribute("CurrConvFctr") + "and currId is-->" +
                  soRow.getAttribute("CurrIdSp"));
    }


    /**Method to validate payment amount.
     * @param pmtAmt
     * @return
     */
    public String paymntAmtValidator(Number pmtAmt) {
        String retVal = "N";
        if (pmtAmt == null) {

        } else {
            ViewObject slsSo = this.getSlsSo1();
            Object payAmt = slsSo.getCurrentRow().getAttribute("PayAmtSumTrans");
            Number soAmtSp = (Number)slsSo.getCurrentRow().getAttribute("OrderTotalCostTrans");
            Number ptAmt = StaticValue.NUMBER_ZERO;

            Number totPmtAmt = StaticValue.NUMBER_ZERO;
            if (payAmt != null) {
                ptAmt = (Number)payAmt;
            }

            totPmtAmt = pmtAmt.add(ptAmt);
            _log.info("Total Amount to pay--->" + soAmtSp.round(getAmtDgt()) + "and paid amount-->" +
                      totPmtAmt.round(getAmtDgt()));
            if (totPmtAmt.round(getAmtDgt()).compareTo(soAmtSp.round(getAmtDgt())) == 1) {
                retVal = "Y";
            }
        }
        return retVal;
    }

    /**Method to remove
     * tax from
     * Order.
     */
    public void removeOrdTax() {
        /*  ViewObject taxRule = this.getSlsSoTr1();
        ViewObject ruleLine = this.getSlsSoTrLines1();
        int rangSize = ruleLine.getRangeSize();
        ruleLine.setRangeSize(-1);
        Row totRow[] = ruleLine.getAllRowsInRange();
        for (Row r : totRow) {
            _log.info("Row Removed from trline");
            r.remove();
        }
        ruleLine.executeQuery();
        Row taxRow = taxRule.getCurrentRow();
        if (taxRow != null) {
            taxRow.remove();
            _log.info("Row Removed from tr");
        }
        this.getDBTransaction().postChanges();
        taxRule.executeQuery();
        ruleLine.setRangeSize(rangSize);
        _log.info("Item Executed");
        this.getSlsSoItm1().executeQuery(); */
        ViewObjectImpl trVo = this.getSlsSoTrVO2();
        ViewObjectImpl trLineVo = this.getSlsSoTrLinesVO2();
        // To remove trLines
        RowSetIterator crt = trLineVo.createRowSetIterator(null);
        while (crt.hasNext()) {
            crt.next().remove();
        }
        crt.closeRowSetIterator();

        // To remove tr
        ViewObjectImpl itmVo = this.getSlsSoItm1();
        RowSetIterator crtl = trVo.createRowSetIterator(null);
        while (crtl.hasNext()) {
            StringBuffer itmId = new StringBuffer("");
            Row next = crtl.next();
            if (next.getAttribute("ItmId") != null) {
                itmId = new StringBuffer(next.getAttribute("ItmId").toString());
            }

            Row[] itmRows = itmVo.getFilteredRows("ItmId", itmId.toString());
            _log.info("Rows for item :" + itmId + " are :" + itmRows.length);
            if (itmRows.length > 0) {
                itmRows[0].setAttribute("TaxRuleFlg", "N");
                next.remove();
            }
        }
        crtl.closeRowSetIterator();
        this.getDBTransaction().postChanges();
        trLineVo.executeQuery();
        trVo.executeQuery();
        itmVo.executeQuery();
        ViewObjectImpl soVo = this.getSlsSo1();
        Row currentRow = soVo.getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("TrRuleTrans", 0);
        }
        _log.info("After deletetion TrRows : " + trVo.getEstimatedRowCount() + " TrLineRows : " +
                  trLineVo.getEstimatedRowCount());


    }

    /**Method to remove
     * tax from
     * Item Line.
     */
    public void removeItmTax() {
        ViewObject soItm = this.getSlsSoItm1();
        ViewObject taxRule = this.getSlsSoTr2();
        ViewObject ruleLine = this.getSlsSoTrLines2();
        Row itmRow = soItm.getCurrentRow();
        ruleLine.setRangeSize(-1);
        Row totRow[] = ruleLine.getFilteredRows("ItmId", itmRow.getAttribute("ItmId"));
        for (Row r : totRow) {
            _log.info("Row Removed from trline for itemtax");
            r.remove();
        }
        ruleLine.executeQuery();
        taxRule.setRangeSize(-1);
        Row totRowTax[] = taxRule.getFilteredRows("ItmId", itmRow.getAttribute("ItmId"));
        for (Row r : totRowTax) {
            _log.info("Row Removed from trline for itemtax");
            r.remove();
        }
        ruleLine.executeQuery();
        taxRule.executeQuery();
    }

    /**Method to check whether taxable amount is changed or not.
     * @return
     */

    public String checkOrderTaxAmt() {
        String retVal = "N";
        String taxmode = "";
        Number curTaxableAmt = StaticValue.NUMBER_ZERO;
        //ViewObject taxRule = this.getSlsSoTrVO2();
        ViewObject slsSo = this.getSlsSo1();
        ViewObject slsoItm = this.getSlsSoItm1();
        Row soRow = slsSo.getCurrentRow();
        //   String flagCheckTax=checkTaxApplOrNot();


        if (soRow.getAttribute("TaxRuleFlg") != null) {
            taxmode = soRow.getAttribute("TaxRuleFlg").toString();
        }
        Number taxableAmtP = (Number)soRow.getAttribute("TotTaxableAmtTrans");
        if ("O".equalsIgnoreCase(taxmode)) {
            _log.info("Orderwise Tax");
            if (soRow.getAttribute("CostBeforeTaxTrans") != null) {
                //curTaxableAmt = (Number)soRow.getAttribute("CostBeforeTaxTrans");
                curTaxableAmt = (Number)soRow.getAttribute("GrossCostBeforeTaxTrans");
            } else {
                curTaxableAmt = StaticValue.NUMBER_ZERO;
            }

            //curTaxableAmt = StaticValue.NUMBER_ZERO;
        } else if ("I".equalsIgnoreCase(taxmode)) {
            _log.info("Itemwise Tax");
            RowSetIterator rit = slsoItm.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row lineRow = rit.next();
                if (lineRow.getAttribute("TaxRuleFlg") != null) {
                    if (lineRow.getAttribute("TaxRuleFlg").equals("Y")) {
                        curTaxableAmt = curTaxableAmt.add((Number)(lineRow.getAttribute("ItmAmtGsSp")));
                    }
                }
            }
            rit.closeRowSetIterator();
        } else {
            taxableAmtP = StaticValue.NUMBER_ZERO;
        }
        _log.info("Previous taxable Amt-->" + taxableAmtP + "current -->" + curTaxableAmt);
        if (taxableAmtP.compareTo(curTaxableAmt) == 1 || taxableAmtP.compareTo(curTaxableAmt) == -1) {
            retVal = "Y";
        }

        //   }
        return retVal;
    }

    /**Method to check if Tax is selected in Header and Not applied.
     * @return
     */
    public String checkTaxApplOrNot() {
        //this.getDBTransaction().postChanges();
        Integer taxItmCount = 1;
        String retVal = "N";
        String taxmode = null;
        ViewObject slsSo = this.getSlsSo1();
        ViewObject slsoItm = this.getSlsSoItm1();
        //ViewObject taxRule = this.getSlsSoTr1();
        //Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        //String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        //String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        //String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        Row soRow = slsSo.getCurrentRow();
        //String p_doc_id = soRow.getAttribute("DocId").toString();
        ViewObjectImpl forOrdrWiseTaxInsertion = this.getSlsSoTrVO2();
        /* forOrdrWiseTaxInsertion1.setNamedWhereClauseParam("SlocIdBind", null);
        forOrdrWiseTaxInsertion1.setNamedWhereClauseParam("CldIdBind", null);
        forOrdrWiseTaxInsertion1.setNamedWhereClauseParam("OrgIdBind", null);
        forOrdrWiseTaxInsertion1.setNamedWhereClauseParam("HoOrgIdBind", null);
        forOrdrWiseTaxInsertion1.setNamedWhereClauseParam("DocIdBind", null);
        forOrdrWiseTaxInsertion1.executeQuery(); */
        _log.info("Estimated row count : " + forOrdrWiseTaxInsertion.getEstimatedRowCount());
        /* ViewObjectImpl forOrdrWiseTaxInsertion = this.getSlsSoTrVOForOrdrWiseTaxInsertion();
        forOrdrWiseTaxInsertion.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        forOrdrWiseTaxInsertion.setNamedWhereClauseParam("CldIdBind", p_cldId);
        forOrdrWiseTaxInsertion.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        forOrdrWiseTaxInsertion.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
        forOrdrWiseTaxInsertion.setNamedWhereClauseParam("DocIdBind", p_doc_id);
        forOrdrWiseTaxInsertion.executeQuery(); */
        _log.info("Estimated row count with parameters : " + forOrdrWiseTaxInsertion.getEstimatedRowCount());
        if (soRow.getAttribute("TaxRuleFlg") != null) {
            taxmode = soRow.getAttribute("TaxRuleFlg").toString();
        }

        if ("O".equalsIgnoreCase(taxmode)) {
            _log.info("Tr row count : " + forOrdrWiseTaxInsertion.getEstimatedRowCount());
            if (forOrdrWiseTaxInsertion.getRowCount() > 0) {
                retVal = "N";
            } else {
                retVal = "O";
            }
        } else if ("I".equalsIgnoreCase(taxmode)) {
            RowSetIterator rit = slsoItm.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row lineRow = rit.next();
                if (lineRow.getAttribute("TaxRuleFlg") != null) {
                    if (lineRow.getAttribute("TaxRuleFlg").equals("Y")) {
                        //taxItmCount = taxItmCount + 1;
                    }
                }
            }
            rit.closeRowSetIterator();
            _log.info("Total Row with Tax Checked-->" + taxItmCount);
            if (taxItmCount > 0) {
                retVal = "N";
            } else {
                retVal = "I";
            }
        }
        return retVal;
    }

    /**DB Function call to insert scheme lines in to SlsSoItmSchm.
     * @param schmId
     */
    public void insertIntoSchm(String schmId) {
        ViewObject itmVo = this.getSlsSoItm1();
        Row itmRow = itmVo.getCurrentRow();
        ViewObject schmItm = this.getSlsSoItmSch1();
        String doc_id = itmRow.getAttribute("DocId").toString();
        String itmId = itmRow.getAttribute("ItmId").toString();
        String itmUom = itmRow.getAttribute("ItmUom").toString();
        Number itmQty = (Number)itmRow.getAttribute("ItmQty");

        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Timestamp userDt = (Timestamp)itmRow.getAttribute("UsrIdCreateDt");
        _log.info("sloc-->" + p_sloc_id + "ItmId-->" + itmId + "qty--" + itmQty + "uom--" + itmUom + "schmId--" +
                  schmId + "usrid--" + p_user_id + "usrDt--" + userDt);
        BigDecimal result =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_INS_SO_SCH_ITM(?,?,?,?,?,?,?,?,?,?,?)",
                                           new Object[] { p_cldId, p_sloc_id, p_org_id, p_hoOrgId, doc_id, itmId,
                                                          itmUom, itmQty, schmId, p_user_id, userDt });
        _log.info("Reuslt from Scheme function-->" + result);
        schmItm.executeQuery();
        // this.getDBTransaction().postChanges();
    }

    /**
     * @return
     */
    public ViewObject searchVo() {
        ViewObject searchVo = this.getorderSearch1();
        return searchVo;
    }

    public void resetAction() {
        this.getSearchLov1().executeQuery();
    }

    /**Item Id Validator for Lines.
     * @param itmName
     * @return
     */

    public String itmIdValidator(String itmName) {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        StringBuffer itmId = new StringBuffer("");
        ViewObjectImpl itmLov = this.getLovItmNmVo1();
        itmLov.setNamedWhereClauseParam("CldIdBind", p_cldId);
        itmLov.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        itmLov.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
        itmLov.setNamedWhereClauseParam("ItmDescBind", itmName);
        itmLov.setNamedWhereClauseParam("ItmIdBind", null);
        itmLov.executeQuery();

        Row[] itmRows = itmLov.getAllRowsInRange();
        if (itmRows.length > 0) {
            Object itmIdO = itmRows[0].getAttribute("ItmId");
            itmId = (itmIdO == null ? new StringBuffer("") : new StringBuffer(itmIdO.toString()));
        }
        Integer count = 0;
        if (!itmId.toString().equals("")) {
            ViewObjectImpl itmVO = this.getSlsSoItm1();
            Row currentItmRow = itmVO.getCurrentRow();
            RowSetIterator itmItr = itmVO.createRowSetIterator(null);
            while (itmItr.hasNext()) {
                Row row = itmItr.next();
                if (!row.equals(currentItmRow)) {
                    Object itmIdO = row.getAttribute("ItmId");
                    StringBuffer itmIdr =
                        (itmIdO == null ? new StringBuffer("") : new StringBuffer(itmIdO.toString()));
                    if (itmIdr.toString().equals(itmId.toString())) {
                        count = 1;
                        break;
                    }
                }
            }
            itmItr.closeRowSetIterator();
        }
        _log.info("Total Count -->" + count);
        if (count > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    /**
     * Method used to call function to get the fy id.
     * @param CldId
     * @param OrgId
     * @return FY Id
     */
    public Integer getFYidOrg(String CldId, String OrgId) {
        ViewObjectImpl slsSo = this.getSlsSo1();
        Integer fyId = 0;
        _log.info("DocDate --" + slsSo.getCurrentRow().getAttribute("DocDt"));
        if (slsSo.getCurrentRow().getAttribute("DocDt") != null) {
            fyId =
(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] { CldId, OrgId,
                                                                                        slsSo.getCurrentRow().getAttribute("DocDt") }));


            if (fyId > 0 && slsSo.getCurrentRow().getAttribute("FyId") == null) {
                _log.info("Set FY id in Order");
                slsSo.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        _log.info("Fyid is--" + fyId);
        return fyId;
    }


    /**Methhod to generate display id.
     * @return
     */
    public String generateDispDocNo() {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        String ret = null;
        String p_doc_id = curRow.getAttribute("DocId").toString();
        Integer soTyp = (curRow.getAttribute("OrderType") == null ? 0 : (Integer)curRow.getAttribute("OrderType"));
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        if (curRow.getAttribute("SoId") == null) {
            ret =
 callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] { p_sloc_id, p_cldId, p_org_id,
                                                                                          new Integer(21503), p_doc_id,
                                                                                          soTyp, "SLS$SO",
                                                                                          getFYidOrg(p_cldId,
                                                                                                     p_org_id) }).toString();
            _log.info("DisplyId is-->" + ret);
            curRow.setAttribute("SoId", ret);
        } else {
            ret = curRow.getAttribute("SoId").toString();
        }
        /* Integer c = (Integer)curRow.getAttribute("EoId");
        _log.info("Before Commmit.");
        _log.info("EoId is : "+curRow.getAttribute("EoId"));
        this.getDBTransaction().validate();
        curRow.setAttribute("EoId",c); */ //asdfg
        try {
            Integer c = (Integer)curRow.getAttribute("EoId");
            //String shipadds = (String)curRow.getAttribute("ShipAdds");
            _log.info("Before Commmit.");
            _log.info("EoId is : " + curRow.getAttribute("EoId"));
            // _log.info("Ship Address is : " + curRow.getAttribute("ShipAdds"));
            this.getDBTransaction().validate();
            _log.info("Validated rows.");
            curRow.setAttribute("EoId", c);
            if (shipadds != null) {
                curRow.setAttribute("ShipAdds", shipadds);
                _log.info("ShipAdds is : " + curRow.getAttribute("ShipAdds"));
            }
            this.getDBTransaction().commit();
            _log.info("Commmited.");
        } catch (Exception e) {
            _log.info("Error in Commmiting.");
            e.printStackTrace();
        }

        _log.info("After Commmit.");
        slsSo.executeQuery();
        setOnCurRow(p_doc_id);
        _log.info("Return Var is  : " + ret);
        _log.info("ShipAdds is : " + curRow.getAttribute("ShipAdds"));
        shipadds = null;
        return ret;
    }

    /**Method to return Amount Sp And Bs for Save Message.
     * @return
     */
    public Number TotAmtSp() {
        Number amtSp = StaticValue.NUMBER_ZERO;
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        if (curRow.getAttribute("TotAmtSp") != null) {
            amtSp = (Number)curRow.getAttribute("TotAmtSp");
        }
        return amtSp;
    }

    /**
     * @return
     */
    public Number TotAmtBs() {
        Number amtBs = StaticValue.NUMBER_ZERO;
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        if (curRow.getAttribute("TotAmtBs") != null) {
            amtBs = (Number)curRow.getAttribute("TotAmtBs");
        }
        return amtBs;
    }

    /**Method to populate data from Quotation to SalesOrder.
     * @param quotId
     */

    public void populateQuotToSo(String quotId) {

        _log.info("inside am method");
        SlsSoVOImpl slsSo = (SlsSoVOImpl)this.getSlsSo1();
        SlsSoVORowImpl curRow = (SlsSoVORowImpl)slsSo.getCurrentRow();
        RowSet lovVO1 = curRow.getquotationLovVO1();
        Row[] filteredRows = lovVO1.getFilteredRows("DispDocId", quotId);
        if (filteredRows.length > 0) {
            quotId = filteredRows[0].getAttribute("DocId").toString();
        }
        _log.info("Quot DocId is : " + quotId);
        if (quotId != null || !quotId.equals("")) {
            //String docId = (String)curRow.getAttribute("DocId");
            String p_doc_id = curRow.getAttribute("DocId").toString();
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = (String)resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

            String ret =
                callStoredFunction(Types.VARCHAR, "SLS.FN_QUOT_TO_SO(?,?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                     p_cldId, p_org_id,
                                                                                                     p_hoOrgId, quotId,
                                                                                                     p_doc_id,
                                                                                                     p_user_id }).toString();
            _log.info("Output from QuotTOSo--->" + ret);

            this.getSlsSoItm1().executeQuery();
            //this.getSlsSoTr1().executeQuery();
            executeViewObjects();
            /*  slsSo.executeQuery();
            slsSo.setBindVar(p_sloc_id, p_org_id, p_hoOrgId, docId, p_cldId);
            */SlsSoVORowImpl soRow = (SlsSoVORowImpl)this.getSlsSo1().getCurrentRow();

            _log.info("Total Item Sp Sum -" + soRow.getItmAmtSpSumTrans() + "Total Row in item table-" +
                      soRow.getSlsSoItm().getRowCount());
            this.getSlsSoItm1().executeQuery();
            //this.getSlsSoTr1().executeQuery();
            //this.getDBTransaction().postChanges();
            executeViewObjects();


            /**To Refresh Accessor of SO$ITEM*/
            // Filter It Using Key Attribute
            Row[] grpRow = slsSo.getFilteredRows("DocId", p_doc_id);
            curRow.getAttribute("TotTaxAmtOrdTrans");
            // Get Child Rows using ViewLink Accessor
            if (grpRow.length > 0) {
                RowSet childRows = (RowSet)grpRow[0].getAttribute("SlsSoItm");
                //Execute Child Rowset
                childRows.executeQuery();
            }

            _log.info("Tax Amount : " + curRow.getAttribute("TotTaxAmtOrdTrans"));
            _log.info("After Refrshing Accessor-" + soRow.getSlsSoItm().getRowCount());
        }

    }

    /**Method to
     * remove Scheme
     * from Item.
     */
    public void removeScheme() {
        ViewObject slsItm = this.getSlsSoItm1();
        Row itmRow = slsItm.getCurrentRow();
        ViewObject schm = this.getSlsSoItmSch1();
        RowSetIterator rsi = schm.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row curRow = rsi.next();
            curRow.remove();
            _log.info("Scheme Row Removed");
        }
        schm.executeQuery();
        itmRow.setAttribute("SchId", null);

    }

    /**Method to insert data in SLS$SO$CALC.
     */
    public void orderCalculation() {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();

        String p_doc_id = curRow.getAttribute("DocId").toString();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();


        String ret =
            callStoredFunction(Types.VARCHAR, "SLS.FN_INS_SO_CALC(?,?,?,?,?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                        p_cldId,
                                                                                                        p_hoOrgId,
                                                                                                        p_org_id,
                                                                                                        p_doc_id,
                                                                                                        p_user_id,
                                                                                                        new Integer(0),
                                                                                                        curRow.getAttribute("CurrIdSp"),
                                                                                                        curRow.getAttribute("CurrIdBs"),
                                                                                                        curRow.getAttribute("CurrConvFctr") }).toString();
        _log.info("Value form fucntion is-->" + ret);
    }

    /**Method to call database function for Rush Order/Cash Sale Order to issue material and update stock.
     */
    public void rushOrderDispatch() {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();

        String p_doc_id = curRow.getAttribute("DocId").toString();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = (String)resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ////system.out.println("COA ID Is :"+curRow.getAttribute("CoaId"));

        String retvalPick =
            (String)callStoredFunction(Types.VARCHAR, "SLS.FN_INS_SO_TO_PICK(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                       new Object[] { p_cldId, p_sloc_id, p_hoOrgId, p_org_id,
                                                      curRow.getAttribute("WhId"), p_doc_id,
                                                      curRow.getAttribute("DocDt"), curRow.getAttribute("EoId"),
                                                      (Integer)curRow.getAttribute("CoaId"), p_user_id,
                                                      new Timestamp(System.currentTimeMillis()),
                                                      curRow.getAttribute("CurrIdSp"),
                                                      curRow.getAttribute("CurrConvFctr"),
                                                      getFyId(new Timestamp(System.currentTimeMillis()), p_org_id),
                                                      curRow.getAttribute("OrderType") });
        _log.info("Return Value from So to Pick-" + retvalPick);


        String retvalShp =
            (String)callStoredFunction(Types.VARCHAR, "SLS.FN_SLS_TO_MM_SO_ITM(?,?,?,?,?,?,?,?,?,?,?,?)",
                                       new Object[] { p_cldId, p_sloc_id, p_hoOrgId, p_org_id,
                                                      curRow.getAttribute("WhId"),
                                                      getFyId(new Timestamp(System.currentTimeMillis()), p_org_id),
                                                      curRow.getAttribute("DocDt"), p_doc_id,
                                                      curRow.getAttribute("DocDt"), curRow.getAttribute("EoId"),
                                                      p_user_id, new Timestamp(System.currentTimeMillis()) });

        _log.info("Value from MMtoShp function--" + retvalShp);

        this.getDBTransaction().commit();

        BigDecimal ret =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "MM.MM_UPDT_STK(?,?,?,?,?,?)", new Object[] { p_cldId,
                                                                                                        p_sloc_id,
                                                                                                        p_org_id,
                                                                                                        curRow.getAttribute("WhId"),
                                                                                                        retvalShp,
                                                                                                        "I" });
        _log.info("Update STK return-" + ret);
        /*  String ret =
            callStoredFunction(Types.VARCHAR, "SLS.FN_INS_DESPATCH(?,?,?,?,?)", new Object[] { p_sloc_id, p_cldId,
                                                                                               p_org_id, p_doc_id,
                                                                                               p_user_id, }).toString(); */

    }

    /**Method to populate data from Previous Sales Order to SalesOrder.
     * @param refDocId
     */

    public void populatePrevOrdToSo(String refDocId) {
        _log.info("inside am method and RefDocId is-->" + refDocId);
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        ViewObjectImpl lovDsipId = this.getLovDispOrdId1();
        String ref_doc_id = null;

        String p_doc_id = curRow.getAttribute("DocId").toString();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = (String)resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        RowQualifier rq = new RowQualifier(lovDsipId);
        rq.setWhereClause("SlocId=" + p_sloc_id + " and OrgId='" + p_org_id + "' and HoOrgId='" + p_hoOrgId +
                          "' and CldId='" + p_cldId + "' and DispDocId='" + refDocId + "'");
        _log.info(rq.getExprStr());
        Row rows[] = lovDsipId.getFilteredRows(rq);
        _log.info("Total Row after Filtering-->" + rows.length);
        if (rows.length > 0) {
            ref_doc_id = rows[0].getAttribute("DocId").toString();
        }

        _log.info("DocId-->" + p_doc_id + "Reference doc id--->" + ref_doc_id);
        String ret =
            callStoredFunction(Types.VARCHAR, "SLS.FN_POPULATE_FROM_PREV_SO(?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                          p_cldId,
                                                                                                          p_org_id,
                                                                                                          p_doc_id,
                                                                                                          ref_doc_id,
                                                                                                          p_user_id }).toString();
        _log.info("Output from PrevSoTOSo--->" + ret);
        SlsSoVORowImpl soRow = (SlsSoVORowImpl)this.getSlsSo1().getCurrentRow();

        _log.info("Total Item Sp Sum -" + soRow.getItmAmtSpSumTrans() + "Total Row in item table-" +
                  soRow.getSlsSoItm().getRowCount());
        this.getSlsSoItm1().executeQuery();
        //this.getSlsSoTr1().executeQuery();
        executeViewObjects();


        /**To Refresh Accessor of SO$ITEM*/
        // Filter It Using Key Attribute
        Row[] grpRow = slsSo.getFilteredRows("DocId", p_doc_id);
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            RowSet childRows = (RowSet)grpRow[0].getAttribute("SlsSoItm");
            //Execute Child Rowset
            childRows.executeQuery();
        }
        _log.info("After Refrshing Accessor-" + soRow.getSlsSoItm().getRowCount());

    }

    /**Method To save Sales Order as Template.
     * @param tmplDesc
     * @return
     */

    public String saveAsTemp(String tmplDesc) {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        String p_doc_id = curRow.getAttribute("DocId").toString();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        //String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        String ret =
            callStoredFunction(Types.VARCHAR, "SLS.FN_SAVE_AS_TEMPLATE_SO(?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                        p_cldId,
                                                                                                        p_org_id,
                                                                                                        p_doc_id,
                                                                                                        p_user_id,
                                                                                                        tmplDesc }).toString();
        _log.info("Output from saveAsTemp--->" + ret);
        executeViewObjects();
        return ret;
    }

    /**Method to populate Sales Order from Template.
     * @param templId
     */

    public void populateTemplateToSo(String templId) {
        _log.info("inside am method and RefDocId is-->" + templId);
        ViewObject slsSo = this.getSlsSo1();
        SlsSoVORowImpl curRow = (SlsSoVORowImpl)slsSo.getCurrentRow();
        //ViewObjectImpl lovDsipId = (ViewObjectImpl)curRow.getLovTmplDocIdVO1();
        String ref_doc_id = null;


        Integer fyId = 0;
        try {
            StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
            StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
            //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
            fyId =
(Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { cldId.toString(),
                                                                                      orgId.toString(),
                                                                                      (Timestamp)curRow.getAttribute("DocDt") });
            //system.out.println("FY :" + fyId);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' in EoImpl !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }


        String p_doc_id = curRow.getAttribute("DocId").toString();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = (String)resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        /* RowQualifier rq = new RowQualifier(lovDsipId);
        rq.setWhereClause("SlocId=" + p_sloc_id + " and OrgId='" + p_org_id + "' and HoOrgId='" + p_hoOrgId +
                          "' and CldId='" + p_cldId + "' and DispDocId='" + templId + "and FyId ="+fyId+"'");
        _log.info(rq.getExprStr());
        Row rows[] = lovDsipId.getFilteredRows(rq); */
        RowSetIterator createRowSetIterator = curRow.getLovTmplDocIdVO1().createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            if (next.getAttribute("DispDocId").toString().equals(templId)) {
                ref_doc_id = next.getAttribute("DocId").toString();
                _log.info("refDocId :" + ref_doc_id);
            }
        }
        createRowSetIterator.closeRowSetIterator();
        // _log.info("Total Row after Filtering-->" + rows.length);
        /*  if (rows.length > 0) {
            ref_doc_id = rows[0].getAttribute("DocId").toString();
        } */

        _log.info("DocId-->" + p_doc_id + "Reference doc id--->" + ref_doc_id);
        String ret =
            callStoredFunction(Types.VARCHAR, "SLS.FN_POPULATE_FROM_PREV_TEMPLATE(?,?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                                  p_cldId,
                                                                                                                  p_hoOrgId,
                                                                                                                  p_org_id,
                                                                                                                  ref_doc_id,
                                                                                                                  p_doc_id,
                                                                                                                  p_user_id }).toString();
        _log.info("Output from TemplateTOSo--->" + ret);
        executeViewObjects();

        SlsSoVORowImpl soRow = (SlsSoVORowImpl)this.getSlsSo1().getCurrentRow();

        _log.info("Total Item Sp Sum -" + soRow.getItmAmtSpSumTrans() + "Total Row in item table-" +
                  soRow.getSlsSoItm().getRowCount());
        this.getSlsSoItm1().executeQuery();
        //this.getSlsSoTr1().executeQuery();
        executeViewObjects();


        /**To Refresh Accessor of SO$ITEM*/
        // Filter It Using Key Attribute
        Row[] grpRow = slsSo.getFilteredRows("DocId", p_doc_id);
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            RowSet childRows = (RowSet)grpRow[0].getAttribute("SlsSoItm");
            //Execute Child Rowset
            childRows.executeQuery();
        }
        _log.info("After Refrshing Accessor-" + soRow.getSlsSoItm().getRowCount());


    }

    /**OC Specific Amount Validator.
     * @param ocAmt
     * @return
     */
    public String ocAmtValidator(Number ocAmt) {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        Number totOrdCost = StaticValue.NUMBER_ZERO;
        Number ocAmtTot = StaticValue.NUMBER_ZERO;
        //ViewObject slsOc = this.getSlsSoOc1();
        //Row curr = slsOc.getCurrentRow();
        if (curRow.getAttribute("ocAmtSumWidSign") != null) {
            ocAmtTot = (Number)curRow.getAttribute("ocAmtSumWidSign");
        }
        if (curRow.getAttribute("costBfrOcTrans") != null) {
            totOrdCost = (Number)curRow.getAttribute("costBfrOcTrans");
        }

        /*  if ("A".equalsIgnoreCase(curr.getAttribute("TranType").toString())) {
            ocAmtTot = ocAmtTot.add(ocAmt);
        } else if ("S".equalsIgnoreCase(curr.getAttribute("TranType").toString())) {
            ocAmtTot = ocAmtTot.subtract(ocAmt);
        } */

        _log.info("Oc Amt Sum is-->" + ocAmtTot + "and Total Cost is-->" + totOrdCost);
        if (ocAmtTot.compareTo(0) == -1 && (ocAmtTot.multiply(-1)).compareTo(totOrdCost) == 1) {
            return "Y";
        } else {
            return "N";
        }
        // return null;
    }

    /**Method to populate data in MM$SO$ITM$PO from SLS$SO$ITM.
     */
    public void populateSoToSoItmPo() {
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

        ViewObject soitm = this.getSlsSoItm1();
        ViewObject soItmPo = this.getMmSoItmPo1();
        ViewObject mmSo = this.getMmSo1();

        ViewObject slsSo = this.getSlsSo1();
        Row slsSoRow = slsSo.getCurrentRow();
        String docId = slsSoRow.getAttribute("DocId").toString();

        String isPoExist = isPoCreated(SlocId, p_cld_id, p_org_id, docId);
        RowSetIterator rsi = soitm.createRowSetIterator(null);
        _log.info("ItmSoPo rowcount is-" + soItmPo.getRowCount());
        if (soItmPo.getRowCount() == 0 && isPoExist.equalsIgnoreCase("N")) {
            Row mmSoRow = mmSo.createRow();
            mmSo.insertRow(mmSoRow);
            while (rsi.hasNext()) {
                Row itmRow = rsi.next();

                Row poRow = soItmPo.createRow();
                soItmPo.insertRow(poRow);

                poRow.setAttribute("ItmId", itmRow.getAttribute("ItmId"));
                poRow.setAttribute("OrdQty", itmRow.getAttribute("ItmQty"));
                poRow.setAttribute("ItmUom", itmRow.getAttribute("ItmUom"));
                poRow.setAttribute("DocId", mmSoRow.getAttribute("DocId"));
                poRow.setAttribute("ItmPrice", itmRow.getAttribute("ItmRate"));
                poRow.setAttribute("ItemSelPriceTrans", itmRow.getAttribute("ItmRate"));

                _log.info("Doc Id In SpItmPo is-->" + mmSoRow.getAttribute("DocId"));
            }
        }
        MMGrpHdrTempVOImpl tempGrpVo = this.getMMGrpHdrTemp1();
        tempGrpVo.setsoGrpIdBind("1");
        tempGrpVo.executeQuery();
        soItmPo.executeQuery();
    }

    /**Method to generate group Id.
     * @param sloc
     * @param cld
     * @param org
     * @return
     */
    public String getGroupId(Integer sloc, String cld, String org) {

        String soId =
            (String)callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] { sloc, cld, org,
                                                                                                      "MM$SO$EO$ITM$GRP",
                                                                                                      null, null });
        //system.out.println("group" + soId);
        return soId;
    }

    /**Method to check whether PO is created or not for current Sales Order.
     * @param slocId
     * @param cldId
     * @param orgId
     * @param docId
     * @return
     */

    public String isPoCreated(Integer slocId, String cldId, String orgId, String docId) {
        String retVal =
            (String)callStoredFunction(Types.VARCHAR, "SLS.FN_CHK_SO_TO_SUGG (?,?,?,?)", new Object[] { slocId, cldId,
                                                                                                        orgId,
                                                                                                        docId });
        ////system.out.println("is PoCreated--" + retVal);
        return retVal;
    }

    /**Method to group selected item in Sugested Order.
     */
    public void groupSelectedItem() {
        Integer itmCount = 0;
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String grpId = null;


        ViewObjectImpl grpVO = this.getMmSoGrp1();
        ViewObjectImpl soItempo = this.getMmSoItmPo1();
        MMGrpHdrTempVOImpl tempGrpVo = this.getMMGrpHdrTemp1();
        ViewObject tempGrpDtlVo = this.getMMGrpItmDtlTemp1();
        ViewObject mmSoItm = this.getMmSoItm1();
        Row soItmPoRow = soItempo.getCurrentRow();
        String doc_id = null;
        _log.info("DocId-->" + soItmPoRow.getAttribute("DocId"));
        if (soItmPoRow.getAttribute("DocId") != null) {
            doc_id = soItmPoRow.getAttribute("DocId").toString();
        }
        Row filtrdRow[] = mmSoItm.getFilteredRows("DocId", doc_id);
        _log.info("Total Rows In SoItm-->" + filtrdRow.length);
        if (filtrdRow.length > 0) {
            _log.info("grp--" + filtrdRow[0].getAttribute("SoGrpId"));
            if (filtrdRow[0].getAttribute("SoGrpId") != null) {
                grpId = filtrdRow[0].getAttribute("SoGrpId").toString();
            }
        } else {
            grpId = getGroupId(SlocId, p_cld_id, p_org_id);
        }


        RowSetIterator rsit = soItempo.createRowSetIterator(null);
        while (rsit.hasNext()) {
            Row itmpoRow = rsit.next();
            _log.info("CheckBox Value is-->" + itmpoRow.getAttribute("CheckItemTrans"));
            if (itmpoRow.getAttribute("CheckItemTrans") != null &&
                itmpoRow.getAttribute("CheckItemTrans").equals("Y")) {
                itmCount++;
                Row createRow = grpVO.createRow();

                //system.out.println(itmpoRow.getAttribute("CheckItemTrans"));
                //system.out.println(itmpoRow.getAttribute("ItmId"));
                createRow.setAttribute("SlocId", itmpoRow.getAttribute("SlocId"));
                createRow.setAttribute("OrgId", itmpoRow.getAttribute("OrgId"));
                createRow.setAttribute("CldId", itmpoRow.getAttribute("CldId"));
                createRow.setAttribute("SoGrpId", grpId);
                createRow.setAttribute("EoId", itmpoRow.getAttribute("EoId"));
                createRow.setAttribute("ItmId", itmpoRow.getAttribute("ItmId"));
                createRow.setAttribute("ItmUom", itmpoRow.getAttribute("ItmUom"));
                createRow.setAttribute("TotSoQty", itmpoRow.getAttribute("OrdQty"));
                grpVO.insertRow(createRow);


                Row soItmRow = mmSoItm.createRow();
                mmSoItm.insertRow(soItmRow);

                soItmRow.setAttribute("SlocId", itmpoRow.getAttribute("SlocId"));
                soItmRow.setAttribute("OrgId", itmpoRow.getAttribute("OrgId"));
                soItmRow.setAttribute("ItmId", itmpoRow.getAttribute("ItmId"));
                soItmRow.setAttribute("OrdQty", itmpoRow.getAttribute("OrdQty"));
                soItmRow.setAttribute("ItmUom", itmpoRow.getAttribute("ItmUom"));
                soItmRow.setAttribute("DocId", itmpoRow.getAttribute("DocId"));
                soItmRow.setAttribute("EoId", itmpoRow.getAttribute("EoId"));
                soItmRow.setAttribute("SoGrpId", grpId);
                soItmRow.setAttribute("CldId", itmpoRow.getAttribute("CldId"));
                soItmRow.setAttribute("UsrIdCreate", p_user_id);
                soItmRow.setAttribute("SoQty", itmpoRow.getAttribute("OrdQty"));
                soItmRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            }
        }
        rsit.closeRowSetIterator();
        if (itmCount == 0) {
            FacesMessage errMsg = new FacesMessage("Select Items to Group");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
        } else {
            _log.info("Before Post Changes");
            this.getDBTransaction().postChanges();

            tempGrpVo.setsoGrpIdBind(grpId);
            grpVO.executeQuery();
            tempGrpDtlVo.executeQuery();
            tempGrpVo.executeQuery();
            soItempo.executeQuery();
            refreshChildGroupTree(grpId);
            _log.info("Row in Group Detail-->" + tempGrpVo.getRowCount());
        }
    }

    /**Method to refresh Child of Tree Table (Group Items).
     * @param grpId
     */
    public void refreshChildGroupTree(String grpId) {
        ViewObjectImpl vo = this.getMMGrpHdrTemp1();
        _log.info("GrpId in refrsh--" + grpId);

        Row[] grpRow = vo.getFilteredRows("SoGrpId", grpId);
        _log.info("Row in GrpHeader-" + grpRow.length);
        if (grpRow.length > 0) {
            RowSet childRows = (RowSet)grpRow[0].getAttribute("MMGrpItmDtlTemp");
            childRows.executeQuery();
        }
    }

    /**Method call to insert item wise supplier.
     * @param p_SLOCID
     * @param p_CLDID
     * @param p_ORGID
     * @param p_SOGRPID
     * @param p_EOID
     * @param p_USRID
     * @param pHoOrgId
     * @return
     */
    public Integer insSuppItmGrp(Integer p_SLOCID, String p_CLDID, String p_ORGID, String p_SOGRPID, Integer p_EOID,
                                 Integer p_USRID, String pHoOrgId) {
        Integer retVal =
            Integer.parseInt(callStoredFunction(Types.INTEGER, "SLS.FN_INS_SUPP_ITM_GRP (?,?,?,?,?,?,?)", new Object[] { p_SLOCID,
                                                                                                                         p_ORGID,
                                                                                                                         p_CLDID,
                                                                                                                         pHoOrgId,
                                                                                                                         p_SOGRPID,
                                                                                                                         p_EOID,
                                                                                                                         p_USRID }).toString());

        return retVal;
    }

    /**Method call to generate Draft Po.
     * @param p_SLOCID
     * @param p_CLDID
     * @param p_ORGID
     * @param p_SOGRPID
     * @param p_POTYPE
     * @param p_USRID
     * @param pHoOrgId
     * @param fyId
     */
    public void generatePO(Integer p_SLOCID, String p_CLDID, String p_ORGID, String p_SOGRPID, Integer p_POTYPE,
                           Integer p_USRID, String pHoOrgId, Number fyId) {
        Integer retVal =
            Integer.parseInt(callStoredFunction(Types.INTEGER, "SLS.FN_GEN_DRFT_PO_FRM_SO (?,?,?,?,?,?,?,?)",
                                                new Object[] { p_SLOCID, p_CLDID, p_ORGID, pHoOrgId, p_SOGRPID,
                                                               p_POTYPE, p_USRID, fyId }).toString());

    }

    /**Method to get FYID.
     * @param txnDate
     * @param orgId
     * @return fy_Id
     */
    public Number getFyId(Timestamp txnDate, String orgId) {
        BigDecimal fyId =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.PKG_APP.GET_FY_ID(?,?,?)", new Object[] { txnDate, "FY",
                                                                                                         orgId });
        Number fy_Id = StaticValue.NUMBER_ZERO;
        try {
            fy_Id = new Number(fyId);
        } catch (SQLException e) {
        }
        _log.info("FY ID is-->" + fy_Id);
        return fy_Id;
    }

    /**Method to generate Draft Po after Item Grouping.
     */

    public void genDrftPurOrder() {
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String grpId = null;
        Integer eoId = null;
        Integer selectCount = 0;
        Integer retVal = 0;
        ViewObject grpTemp = this.getMMGrpHdrTemp1();
        ViewObject slsSo = this.getSlsSo1();
        ViewObject drftPo = this.getMMDrftPoView1();
        Row soRow = slsSo.getCurrentRow();
        Timestamp txnDt = (Timestamp)soRow.getAttribute("DocDt");
        RowSetIterator rsi = grpTemp.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row grpHdrCurRow = rsi.next();
            _log.info("Select Supp Flag-->" + grpHdrCurRow.getAttribute("SelectSuppTrans"));
            if (grpHdrCurRow.getAttribute("SelectSuppTrans") != null &&
                grpHdrCurRow.getAttribute("SelectSuppTrans").equals("true")) {
                selectCount = selectCount + 1;
                _log.info("Count is-->" + selectCount);
                if (grpHdrCurRow.getAttribute("SoGrpId") != null) {
                    grpId = grpHdrCurRow.getAttribute("SoGrpId").toString();
                }
                if (grpHdrCurRow.getAttribute("EoIdGrp") != null) {
                    eoId = Integer.parseInt(grpHdrCurRow.getAttribute("EoIdGrp").toString());
                }
                _log.info("Sloc-" + SlocId + "cldId-" + p_cld_id + "orgId-" + p_org_id + "grpId-" + grpId + "eoid-" +
                          eoId + "userId-" + p_user_id + "hoOrg-" + p_hoOrgId);
                retVal = insSuppItmGrp(SlocId, p_cld_id, p_org_id, grpId, eoId, p_user_id, p_hoOrgId);
            }

        }
        if (selectCount == 0) {
            String mass = resolvEl("#{bundle['MSG.466']}");
            FacesMessage msg = new FacesMessage(mass);
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fctx = FacesContext.getCurrentInstance();
            fctx.addMessage(null, msg);
        } else if (retVal != -1) {
            this.getDBTransaction().commit();
            _log.info("Sloc-" + SlocId + "cldId-" + p_cld_id + "orgId-" + p_org_id + "grpId-" + grpId + "eoid-" +
                      eoId + "userId-" + p_user_id + "hoOrg-" + p_hoOrgId);
            generatePO(SlocId, p_cld_id, p_org_id, grpId, 170, p_user_id, p_hoOrgId, getFyId(txnDt, p_org_id));
            this.getDBTransaction().commit();

            MMGrpHdrTempVOImpl tempGrpVo = this.getMMGrpHdrTemp1();
            tempGrpVo.setsoGrpIdBind(grpId);
            tempGrpVo.executeQuery();

            drftPo.setWhereClause("SO_GRP_ID='" + grpId + "'");
            drftPo.executeQuery();

        }
    }

    /**Method to Validate Order Date.
     * @param ordDate
     * @return
     */
    public String orderDtValidate(Timestamp ordDate) {
        System.out.println(" ordDate in am impl" + ordDate);
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String dtFlg =
            (String)callStoredFunction(Types.VARCHAR, "APP.PKG_APP.GET_FY_STAT_FOR_TXN(?,?,?)", new Object[] { SlocId,
                                                                                                               p_org_id,
                                                                                                               ordDate });


        System.out.println("dtFlg " + dtFlg);
        return dtFlg;
    }

    /**Method to get Latest price of Item according to selected supplier.
     * @param lovIndex
     * @return
     */
    public Number getLatestItmPrice(Integer lovIndex) {
        ViewObject mmSoItmPo = this.getMmSoItmPo1();
        Number itmPrice = StaticValue.NUMBER_ZERO;
        Row curRow = mmSoItmPo.getCurrentRow();
        //ViewObject slsSo = this.getSlsSo1();
        //Row soRow = slsSo.getCurrentRow();
        Integer eoId = null;
        MmSoItmPoVORowImpl soItmPoRow = (MmSoItmPoVORowImpl)this.getMmSoItmPo1().getCurrentRow();
        RowSet rset = soItmPoRow.getLovSuppItmScoreVO1();
        Row atRangeIndex = rset.getRowAtRangeIndex(lovIndex);
        if (atRangeIndex.getAttribute("EoId") != null) {
            eoId = Integer.parseInt(atRangeIndex.getAttribute("EoId").toString());
        }
        _log.info("Eo Id From RowSet-" + eoId);

        if (curRow.getAttribute("ItmId") != null && eoId != null) {
            Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            String itmId = curRow.getAttribute("ItmId").toString();
            //Timestamp p_doc_dt = (Timestamp)soRow.getAttribute("DocDt");
            _log.info("Cld-" + p_cld_id + "sloc-" + SlocId + "org-" + p_org_id + "itm-" + itmId + "eoId-" + eoId);
            BigDecimal price =
                (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_LATEST_PRICE(?,?,?,?,?,?)", new Object[] { p_cld_id,
                                                                                                                     SlocId,
                                                                                                                     p_hoOrgId,
                                                                                                                     p_org_id,
                                                                                                                     itmId,
                                                                                                                     eoId, });
            _log.info("Value from Function Rate--" + price);

            try {
                itmPrice = new Number(price);
            } catch (SQLException e) {
                _log.info(e);
            }
        } else {
            itmPrice = new Number(-2);
        }
        _log.info("Latest Price for item is-->" + itmPrice);

        return itmPrice;
    }

    /**Method to select and de-select checkBox.
     * @param val
     */
    public void selectAllCheckBoxSugst(boolean val) {
        ViewObject dlvView = this.getMmSoItmPo1();
        RowSetIterator rit = dlvView.createRowSetIterator(null);
        /** Iterate through every visible row of view */

        while (rit.hasNext()) {
            Row row = rit.next();
            Integer id = (row.getAttribute("EoId") == null ? 0 : (Integer)row.getAttribute("EoId"));
            _log.info("Value of checkbox is-->" + val);
            if (id != 0) {
                if (val) {
                    row.setAttribute("CheckItemTrans", "Y");

                } else {
                    row.setAttribute("CheckItemTrans", "N");
                }
            }

        }
    }

    /**After Commmit method to be used to execute ViewObject.
     */
    public void executeViewObjects() {
        ViewObject slsSoItm = this.getSlsSoItm1();
        ViewObject slsDlcSchdl = this.getSlsSoDlvSchdl1();
        ViewObject slsPaymntSchdl = this.getSlsSoPmntSchdl1();
        ViewObject slsOc = this.getSlsSoOc1();
        //ViewObject slsTr = this.getSlsSoTr1();
        ViewObject slsTnc = this.getSlsSoTnc1();
        ViewObject slsItmTr = this.getSlsSoTr2();
        //ViewObject slsSoTrline = this.getSlsSoTrLines1();
        ViewObject slsItmTrline = this.getSlsSoTrLines2();

        slsSoItm.executeQuery();
        slsDlcSchdl.executeQuery();
        slsPaymntSchdl.executeQuery();
        slsOc.executeQuery();
        //slsTr.executeQuery();
        slsTnc.executeQuery();
        slsItmTr.executeQuery();
        //slsSoTrline.executeQuery();
        slsItmTrline.executeQuery();
        this.getSlsSoItmBin1().executeQuery();
        this.getSlsSoItmLot1().executeQuery();
        this.getSlsSoItmSr1().executeQuery();
        this.getDlvShdlView1().executeQuery();
    }

    /**Method to get Item Price for Customer.
     * @param itmDesc
     * @return
     */
    public Number getLatestItmPriceSo(String itmDesc) {
        _log.info("Inside AM method Rate");
        ViewObject slsSo = this.getSlsSo1();

        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        ViewObjectImpl impl = this.getLovItmNmVo1();
        impl.setNamedWhereClauseParam("ItmIdBind", null);
        impl.setNamedWhereClauseParam("CldIdBind", p_cldId);
        impl.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        impl.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
        impl.setNamedWhereClauseParam("ItmDescBind", itmDesc);
        impl.executeQuery();


        Number itmPrice = StaticValue.NUMBER_ZERO;
        Row curRow = slsSo.getCurrentRow();


        String itemId = null;
        /*  RowQualifier rq = new RowQualifier(lovItmId);
        rq.setWhereClause("SlocId=" + p_sloc_id + " and OrgId='" + p_org_id + "' and HoOrgId='" + p_hoOrgId +
                          "' and CldId='" + p_cldId + "' and ItmDesc='" + itmDesc + "'");
        _log.info(rq.getExprStr());
        Row rows[] = lovItmId.getFilteredRows(rq);
        _log.info("Total Row after Filtering-->" + rows.length); */
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            itemId = allRowsInRange[0].getAttribute("ItmId").toString();
        }
        _log.info("ItmId : " + itemId);
        Number conv = new Number(1);
        _log.info("Before function call Customer is-->" + curRow.getAttribute("EoId") + "and Item is-->" + itemId);
        if (curRow.getAttribute("EoId") != null && itemId != null) {

            Integer eoId = Integer.parseInt(curRow.getAttribute("EoId").toString());
            Integer currId = Integer.parseInt(curRow.getAttribute("CurrIdSp").toString());
            conv = (Number)curRow.getAttribute("CurrConvFctr");
            Timestamp p_doc_dt = (Timestamp)curRow.getAttribute("DocDt");
            _log.info("Customer is-->" + eoId + "and Item is-->" + itemId);

            if (checkPolicyApplied().toString().equals("Y")) {
                //  _log.info("Price from Price Policy.");
                BigDecimal price = new BigDecimal(0);
                BigDecimal policyPrice =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)",
                                                   new Object[] { p_cldId, p_sloc_id, p_hoOrgId, p_org_id, eoId,
                                                                  itemId, "SO" });
                // _log.info("Policy Price is : " + policyPrice);
                policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                if (policyPrice.compareTo(new BigDecimal(-2)) == 0) {
                    price =
(BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                               new Object[] { p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId, itemId, p_doc_dt,
                                              p_user_id, new Timestamp(System.currentTimeMillis()), currId, conv });
                    _log.info("Value from Function Rate--" + price);
                    try {
                        itmPrice = new Number(new Number(price).round(getAmtDgt()));
                    } catch (SQLException e) {
                    }

                } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                    itmPrice = new Number(-3);
                } else {
                    price = policyPrice;
                    try {
                        itmPrice = new Number(new Number(price));
                        itmPrice = itmPrice.divide(conv);
                        itmPrice = (Number)itmPrice.round(getAmtDgt());
                    } catch (SQLException e) {
                    }
                }

            } else {
                _log.info("Price from EO Price.");
                BigDecimal price =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                   new Object[] { p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId,
                                                                  itemId, p_doc_dt, p_user_id,
                                                                  new Timestamp(System.currentTimeMillis()), currId,
                                                                  conv });
                _log.info("Value from Function Rate--" + price);
                try {
                    itmPrice = new Number(new Number(price).round(getAmtDgt()));
                } catch (SQLException e) {
                }
            }


        }
        if (itmPrice.compareTo(-1) == 0) {
            itmPrice = StaticValue.NUMBER_ZERO;

        }

        // uom,id,uomBaisc
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        if (currentRow != null && itmPrice.compareTo(StaticValue.NUMBER_ZERO) >= 0) {
            currentRow.setAttribute("ItmRate", itmPrice);
        }
        //this.getSlsSoItm1().getCurrentRow().setAttribute("", arg1);
        _log.info("Latest Price for item is-->" + itmPrice);

        return itmPrice;
    }


    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param DocNo
     * @return
     */
    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Integer docType = (Integer)this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
            System.out.println("Oreder type getWfNo" + docType);
            System.out.println(" SlocId " + SlocId + " CldId " + CldId + " OrgId " + OrgId + " DocNo  " + DocNo);

            Object obj =
                callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] { SlocId, CldId, OrgId,
                                                                                             DocNo, docType });
            System.out.println(" obj in getWfNo fucntion " + obj);

            return (obj == null ? null : obj.toString());
        } catch (Exception e) {
            System.out.println("in catfch getWfNo");
            return "0";
        }

    }


    private static int NUMBER = Types.NUMERIC;


    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param UsrId
     * @param WfNo
     * @param DocNo
     * @return
     */
    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Integer docType = (Integer)this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
        /*  System.out.println("Oreder type getUsrLvl=" + docType + " SlocId " + SlocId + " CldId " + CldId + " OrgId " +
                           OrgId + " UsrId " + UsrId + " WfNo " + WfNo + " DocNo " + DocNo);
        System.out.println(" fucntion---->>" +
                           callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId,
                                                                                                            CldId,
                                                                                                            OrgId,
                                                                                                            UsrId,
                                                                                                            WfNo,
                                                                                                            DocNo,
                                                                                                            docType }).toString()); */
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)",
                                                   new Object[] { SlocId, CldId, OrgId, UsrId, WfNo, DocNo,
                                                                  docType }).toString());


    }

    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param UsrId
     * @param WfNo
     * @param DocNo
     * @return
     */
    public Integer checkForWf(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Integer i = -1;
        try {
            Integer docType = (Integer)this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
            System.out.println("Oreder type checkForWf" + docType);
            i =
   Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId, CldId,
                                                                                                     OrgId, UsrId,
                                                                                                     WfNo, DocNo,
                                                                                                     docType }).toString());
        } catch (Exception e) {
            i = -1;
            e.printStackTrace();
        }
        return i;
    }

    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param DocNo
     * @param WfNo
     * @param usr_idFrm
     * @param usr_idTo
     * @param levelTo
     * @param levelFrm
     * @param action
     * @param remark
     * @param amount
     * @return
     */
    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount) {
        Integer docType = (Integer)this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
        System.out.println("Oreder type insIntoTxn" + docType);
        String DocId = this.getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                   new Object[] { SlocId, CldId, OrgId, DocNo, docType, WfNo, DocId,
                                                                  usr_idFrm, usr_idTo, levelFrm, levelTo, action,
                                                                  remark, amount, "S" }).toString());

    }

    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param DocNo
     * @return
     */
    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        Integer docType = (Integer)this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
        System.out.println("Oreder type pendingCheck" + docType);
        ////system.out.println("DOCIDTXN--"+docIdTxn);
        Object obj =
            callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId, CldId, OrgId, DocNo,
                                                                                         DocId, docType });
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }


    /**To Add Item Lot Wise
     * Method to select lot for item (If Organisation is not using bin and Items are not serialised).
     * @return
     * 
     */
    public String insertIntoSoItmLot() {

        ViewObjectImpl mtlItm = this.getSlsSoItm1();
        ViewObjectImpl mtlLot = this.getSlsSoItmLot1();
        ViewObject slsSo = this.getSlsSo1();

        Row currItm = mtlItm.getCurrentRow();
        Row soRow = slsSo.getCurrentRow();

        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getViewMmStkSummLot1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("lenth sr     " + srRow.length);

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((oracle.jbo.domain.Number)rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {

                        // Filter Lot Table to ckeck Lot exist or not, Basis of DocId , SoId , ItmId and LotId

                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        _log.info("RowQuali String-" + rowQualifier.getExprStr());

                        // Check that Lot exist or not for that item
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((oracle.jbo.domain.Number)rr.getAttribute("TransIssuQtyValue")).compareTo(zero) ==
                                    0) {

                                    _log.info("Lot remove-------------------");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number)rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >
                                           0) {

                                    _log.info("Lot Update -------------------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValue"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                    String LotId = (String)r.getAttribute("LotId");
                                    _log.info("Lot Already Exists | Lot Number is : " + LotId);

                                    //-------------------------------------------------------------------------------------------------------------
                                    BigDecimal avail = new BigDecimal(0);
                                    try {
                                        String whId = soRow.getAttribute("WhId").toString();
                                        Integer p_sloc_id =
                                            Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                                        StringBuffer cldId =
                                            new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                                        StringBuffer orgId =
                                            new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                                        //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                                        //                                         p_sloc_id       NUMBER,
                                        //                                         p_org_id        VARCHAR2,
                                        //                                         p_wh_id         VARCHAR2,
                                        //                                         p_itm_id        VARCHAR2,
                                        //                                         p_lot_id VARCHAR2
                                        //                                               )
                                        avail =
(BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)",
                               new Object[] { cldId.toString(), p_sloc_id, orgId.toString(), whId,
                                              currItm.getAttribute("ItmId"), LotId,
                                              getFyId(new Timestamp(System.currentTimeMillis()), orgId.toString()) });

                                        /*  Number avl = StaticValue.NUMBER_ZERO;

                                         try{
                                             avl = new Number(avail);
                                         }catch(Exception e){
                                             e.printStackTrace();
                                         } */

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                        avail = new BigDecimal(0);
                                    }
                                    Number lotQty = StaticValue.NUMBER_ZERO;
                                    lotQty = (Number)rr.getAttribute("TransIssuQtyValue");
                                    Number multiply = StaticValue.NUMBER_ZERO;
                                    try {
                                        multiply = (Number)lotQty.multiply(new Number(avail));
                                    } catch (SQLException e) {
                                        e.printStackTrace();
                                    }
                                    _log.info("Item Lot Cost : " + multiply);
                                    r.setAttribute("ItmLotCost", multiply);

                                    //-------------------------------------------------------------------------------------------------------------
                                }
                            }
                        } else {

                            if (((oracle.jbo.domain.Number)rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("ItmQty", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                _log.info("Warehouse is--" + rr.getAttribute("WhId"));
                                lotInst.setAttribute("WhId", rr.getAttribute("WhId"));
                                lotInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                                //-------------------------------------------------------------------------------------------------------------
                                String LotId = (String)rr.getAttribute("LotId");
                                _log.info("Lot Do not Exists | New Lot Number is generated : " + LotId);
                                BigDecimal avail = new BigDecimal(0);
                                try {
                                    String whId = soRow.getAttribute("WhId").toString();
                                    Integer p_sloc_id =
                                        Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                                    StringBuffer cldId =
                                        new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                                    StringBuffer orgId =
                                        new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                                    //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                                    //                                         p_sloc_id       NUMBER,
                                    //                                         p_org_id        VARCHAR2,
                                    //                                         p_wh_id         VARCHAR2,
                                    //                                         p_itm_id        VARCHAR2,
                                    //                                         p_lot_id VARCHAR2
                                    //                                               )
                                    avail =
(BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)",
                               new Object[] { cldId.toString(), p_sloc_id, orgId.toString(), whId,
                                              currItm.getAttribute("ItmId"), LotId,
                                              getFyId(new Timestamp(System.currentTimeMillis()), orgId.toString()) });

                                    /*  Number avl = StaticValue.NUMBER_ZERO;

                                     try{
                                         avl = new Number(avail);
                                     }catch(Exception e){
                                         e.printStackTrace();
                                     } */

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                Number lotQty = StaticValue.NUMBER_ZERO;
                                lotQty = (Number)rr.getAttribute("TransIssuQtyValue");
                                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                    avail = new BigDecimal(0);
                                }
                                Number multiply = StaticValue.NUMBER_ZERO;
                                try {
                                    multiply = (Number)lotQty.multiply(new Number(avail));
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                                _log.info("Item Lot Cost : " + multiply);
                                lotInst.setAttribute("ItmLotCost", multiply);


                                mtlLot.insertRow(lotInst);
                                mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }

        mtlItm.executeQuery();
        return null;
    }

    /**To Select Bin and Lot for Item
     * Method to select lot and bin for item (If Organisation is using bin and Items are not serialised).
     * 
     */
    public void insertIntoSoItmBin() {
        //insertIntoPickItmSr

        ViewObjectImpl mtlItm = this.getSlsSoItm1();
        ViewObjectImpl mtlBin = this.getSlsSoItmBin1();

        ViewObjectImpl mtlLot = this.getSlsSoItmLot1();
        Row currItm = mtlItm.getCurrentRow();

        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Number zero = StaticValue.NUMBER_ZERO;
        ViewObjectImpl stkSummBin = this.getViewMmStkSummBin1();
        Row[] binRow = this.getViewMmStkSummBin1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number)r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        _log.info("lot id Bin-- " + lotId);
                    }
                }
            }
            _log.info(" Lot ArrayList size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);

        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = StaticValue.NUMBER_ZERO;
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number)r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number)r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            _log.info(" lot id   ---" + lotId + "----qty------" + lotQty);

            // Check lot already created or not

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQty", lotQty);
                    r.setAttribute("ItmQtyBs", lotQty);
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummBin);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummBin.getFilteredRows(rq);
                //system.out.println("Total Item for This Lot -" + binRows.length);

                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("ItmQty", lotQty);
                instLot.setAttribute("ItmQtyBs", lotQty);
                instLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                instLot.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                instLot.setAttribute("WhId", soRow.getAttribute("WhId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = soRow.getAttribute("WhId").toString();
                    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                    StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                    StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                    //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                    //                                         p_sloc_id       NUMBER,
                    //                                         p_org_id        VARCHAR2,
                    //                                         p_wh_id         VARCHAR2,
                    //                                         p_itm_id        VARCHAR2,
                    //                                         p_lot_id VARCHAR2
                    //                                               )
                    avail =
(BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] { cldId.toString(),
                                                                                                        p_sloc_id,
                                                                                                        orgId.toString(),
                                                                                                        whId,
                                                                                                        currItm.getAttribute("ItmId"),
                                                                                                        lotId,
                                                                                                        getFyId(new Timestamp(System.currentTimeMillis()),
                                                                                                                orgId.toString()) });

                    /*  Number avl = StaticValue.NUMBER_ZERO;

                    try{
                        avl = new Number(avail);
                    }catch(Exception e){
                        e.printStackTrace();
                    } */
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = StaticValue.NUMBER_ZERO;
                try {
                    multiply = (Number)lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                _log.info("Item Lot Cost : " + multiply);
                instLot.setAttribute("ItmLotCost", multiply);


                mtlLot.executeQuery();
            }
        }
        _log.info("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number)rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        _log.info("Condition true create Bin");

                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        _log.info("" + rowQualifier.getExprStr());
                        _log.info("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number)rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    _log.info("row removed ----------");
                                    r.remove();
                                } else if (((Number)rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    _log.info("row update ----------");
                                    r.setAttribute("ItmQty", rr.getAttribute("TransIssueQty"));
                                    r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number)rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                _log.info("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("ItmQty", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                                binInst.setAttribute("WhId", soRow.getAttribute("WhId"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                                mtlBin.insertRow(binInst);
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        this.getSlsSoItmBin1().executeQuery();
        this.getSlsSoItmLot1().executeQuery();
        this.getSlsSoItmSr1().executeQuery();

    }


    /**To Select Bin,Lot and SrNo for Item
     * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised).
     */
    public void insertIntoPickItmSr() {

        ViewObjectImpl soItm = this.getSlsSoItm1();
        ViewObjectImpl soItmSr = this.getSlsSoItmSr1();
        ViewObjectImpl soItmBin = this.getSlsSoItmBin1();
        ViewObjectImpl soItmLot = this.getSlsSoItmLot1();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummSr1();

        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Row currItm = soItm.getCurrentRow();
        String binChkFlg = (String)resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = this.getViewMmStkSummSr1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("Lenth (Num) of serial number : " + srRow.length);

        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        //
                        arrlist.add(lotId);
                        _log.info("Lot id new : " + lotId);
                    }
                }
            }
            _log.info("No of lots added : " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = StaticValue.NUMBER_ZERO;
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {

            }
            _log.info(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(soItmLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = soItmLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                _log.info(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    String lotId = (String)r.getAttribute("LotId");
                    _log.info(" Lot id is : -----" + lotId);
                    Number prLotVal = (Number)r.getAttribute("ItmQty");
                    Number newQty = prLotVal.add(lotvalu);
                    _log.info("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("ItmQty", newQty);
                    r.setAttribute("ItmQtyBs", newQty);

                    BigDecimal avail = new BigDecimal(0);
                    try {
                        String whId = soRow.getAttribute("WhId").toString();
                        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                        StringBuffer orgId =
                            new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                        //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                        //                                         p_sloc_id       NUMBER,
                        //                                         p_org_id        VARCHAR2,
                        //                                         p_wh_id         VARCHAR2,
                        //                                         p_itm_id        VARCHAR2,
                        //                                         p_lot_id VARCHAR2
                        //                                               )
                        avail =
(BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)",
                               new Object[] { cldId.toString(), p_sloc_id, orgId.toString(), whId,
                                              currItm.getAttribute("ItmId"), lotId,
                                              getFyId(new Timestamp(System.currentTimeMillis()), orgId.toString()) });

                        /*  Number avl = StaticValue.NUMBER_ZERO;

                        try{
                            avl = new Number(avail);
                        }catch(Exception e){
                            e.printStackTrace();
                        } */
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                        avail = new BigDecimal(0);
                    }
                    Number multiply = StaticValue.NUMBER_ZERO;
                    try {
                        multiply = (Number)newQty.multiply(new Number(avail));
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    _log.info("Item Lot Cost : " + multiply);
                    r.setAttribute("ItmLotCost", multiply);


                }
            } else {
                _log.info("CREATE NEW  LOT-----");
                Row insrtLot = soItmLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("ItmQty", lotvalu);
                insrtLot.setAttribute("ItmQtyBs", lotvalu);
                insrtLot.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                insrtLot.setAttribute("WhId", soRow.getAttribute("WhId"));
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = soRow.getAttribute("WhId").toString();
                    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                    StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                    StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                    //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                    //                                         p_sloc_id       NUMBER,
                    //                                         p_org_id        VARCHAR2,
                    //                                         p_wh_id         VARCHAR2,
                    //                                         p_itm_id        VARCHAR2,
                    //                                         p_lot_id VARCHAR2
                    //                                               )
                    avail =
(BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] { cldId.toString(),
                                                                                                        p_sloc_id,
                                                                                                        orgId.toString(),
                                                                                                        whId,
                                                                                                        currItm.getAttribute("ItmId"),
                                                                                                        key,
                                                                                                        getFyId(new Timestamp(System.currentTimeMillis()),
                                                                                                                orgId.toString()) });


                    //Number avl = StaticValue.NUMBER_ZERO;
                    _log.info("Lot price is : " + avail);
                    /* try{
                        avl = new Number(avail);
                    }catch(Exception e){
                        e.printStackTrace();
                    } */
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = StaticValue.NUMBER_ZERO;
                try {
                    multiply = (Number)lotvalu.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                _log.info("Lot inserted");
                insrtLot.setAttribute("ItmLotCost", multiply);
                soItmLot.insertRow(insrtLot);
                soItmLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        _log.info("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String)i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                _log.info("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoChkBxTrans") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoChkBxTrans").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = StaticValue.NUMBER_ZERO;
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(soItmBin);
                    rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = soItmBin.getFilteredRows(rowQualifier);
                    _log.info("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        _log.info("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number)r.getAttribute("ItmQty");
                            Number newQty = prBinVal.add(binvalu);
                            _log.info("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("ItmQty", newQty);
                            r.setAttribute("ItmQtyBs", newQty);
                        }
                    } else {
                        _log.info("Create new Bin For Lot-----");
                        Row binInst = soItmBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("ItmQty", binvalu);
                        binInst.setAttribute("ItmQtyBs", binvalu);
                        binInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                        _log.info("Values in Bin-" + lot + "Bin id-" + key + "quant-" + binvalu);

                        binInst.setAttribute("WhId", soRow.getAttribute("WhId"));
                        binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        soItmBin.insertRow(binInst);
                        soItmBin.executeQuery();
                        _log.info(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
                _log.info("" + arrListbin);
                _log.info("" + binSet);

            }

        }

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        _log.info("Create SrNo for Selected Serials");
                        Row srInst = soItmSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("ItmQty", new Number(1));
                        srInst.setAttribute("ItmQtyBs", new Number(1));
                        srInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                        srInst.setAttribute("WhId", soRow.getAttribute("WhId"));
                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        soItmSr.insertRow(srInst);
                        soItmSr.executeQuery();
                    }
                }
            }
        }

        _log.info("Post Changes ____");
        this.getDBTransaction().postChanges();
        _log.info("___________________________1");
        this.getSlsSoItmBin1().executeQuery();
        _log.info("___________________________2");
        this.getSlsSoItmLot1().executeQuery();
        _log.info("___________________________3");
        this.getSlsSoItmSr1().executeQuery();
        _log.info("___________________________4");
        viewSummSr.executeQuery();
        _log.info("___________________________5");
    }


    /**Method to filter Serial Number View ,as per Item Selected.
     */
    public void filterSrNoAsPerItem() {
        ViewObjectImpl issItm = this.getSlsSoItm1();
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Row curRow = issItm.getCurrentRow();
        this.getViewMmStkSummSr1().setWhereClause("SR_NO NOT IN (SELECT SR_NO from SLS$SO$ITM$SR where itm_id = '" +
                                                  curRow.getAttribute("ItmId").toString() + "')");
        this.getViewMmStkSummSr1().executeQuery();

        if (soRow != null) {
            ViewObject stkSr = this.getViewMmStkSummSr1();
            _log.info("Total Row in Srno-" + stkSr.getRowCount());
            stkSr.setNamedWhereClauseParam("whIdBind", soRow.getAttribute("WhId"));
            stkSr.executeQuery();
            _log.info("Total Row in SrNo after filter-" + stkSr.getRowCount());
        }
    }

    /**Method to Check that all Items are Issued with full quantity or Not, if Not then it will show Validation Message.
     * @return
     */
    public ArrayList checkItemIssueValidation() {
        ArrayList itemVal = new ArrayList();
        ViewObject slsPickItm = this.getSlsSoItm1();
        ViewObjectImpl slsPickLot = this.getSlsSoItmLotVO1();
        RowSetIterator rsi = slsPickItm.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row curItmRow = rsi.next();
            if (curItmRow != null) {
                Number pickedQtyItm = StaticValue.NUMBER_ZERO;
                if (curItmRow.getAttribute("ItmQty") != null) {
                    pickedQtyItm = (Number)curItmRow.getAttribute("ItmQty");
                    //system.out.println("Picked Quantity is:  " + pickedQtyItm);
                }
                Number lotTotQty = StaticValue.NUMBER_ZERO;
                RowQualifier rq = new RowQualifier(slsPickLot);
                rq.setWhereClause("CldId='" + curItmRow.getAttribute("CldId") + "' and  SlocId=" +
                                  curItmRow.getAttribute("SlocId") + " and OrgId='" + curItmRow.getAttribute("OrgId") +
                                  "' and DocId='" + curItmRow.getAttribute("DocId") + "' and ItmId='" +
                                  curItmRow.getAttribute("ItmId") + "'");
                _log.info("RowQuali Expression--" + rq.getExprStr());
                Row fltrdRows[] = slsPickLot.getFilteredRows(rq);
                _log.info("Total Row in Lot for This Item--" + fltrdRows.length + "Item is-" +
                          curItmRow.getAttribute("ItmId"));
                if (fltrdRows.length > 0) {
                    for (Row r : fltrdRows) {
                        lotTotQty = lotTotQty.add((Number)r.getAttribute("ItmQtyBs"));
                    }
                }
                _log.info("Picked Qty-" + pickedQtyItm + "Total Issued Quantity-" + lotTotQty);
                if (pickedQtyItm.compareTo(lotTotQty) == 0) {

                } else {
                    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                    //String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
                    String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                    //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                    String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

                    String itmDesc = null;
                    ViewObjectImpl impl = this.getLovItmNmVo1();
                    impl.setNamedWhereClauseParam("ItmIdBind", curItmRow.getAttribute("ItmId").toString());
                    impl.setNamedWhereClauseParam("CldIdBind", p_cldId);
                    impl.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
                    impl.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
                    impl.setNamedWhereClauseParam("ItmDescBind", null);
                    impl.executeQuery();
                    Row[] allRowsInRange = impl.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        itmDesc = allRowsInRange[0].getAttribute("ItmDesc").toString();
                    }
                    itemVal.add(itmDesc);
                    _log.info("Inside Else--" + itmDesc);
                }
            }
        }
        _log.info("Un-Issued Items--" + itemVal);
        return itemVal;
    }

    /**Method to return current Row of OC viewObject.
     * @return
     */

    public Row getCurOcRow() {
        ViewObject v1 = this.getSlsSoOc1();
        return v1.getCurrentRow();
    }

    /**Method to execute Item table*.
     */
    public void itmDisclosureList() {
        ViewObject slsSoItm = this.getSlsSoItm1();
        slsSoItm.executeQuery();
    }

    /**Method to insert lines in Dellivery Schedule,
     * in case user doesn't
     *
     * create any schedule********.
     */

    public void generateAutoDlvSchdl() {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        //String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        ViewObject soItm = this.getSlsSoItm1();
        ViewObject dlvSchdl = this.getSlsSoDlvSchdl1();
        Row soRow = this.getSlsSo1().getCurrentRow();
        if (dlvSchdl.getRowCount() == 0) {
            RowSetIterator rsi = soItm.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Timestamp docdt = new Timestamp(System.currentTimeMillis());
                try {
                    docdt = new Timestamp(((Timestamp)soRow.getAttribute("DocDt")).dateValue());
                } catch (SQLException e) {
                }
                Row row = rsi.next();
                Row dlvRow = dlvSchdl.createRow();
                dlvSchdl.insertRow(dlvRow);
                //serialNumGen("SlsSoDlvSchdl1");
                serialNumGen("SlsSoDlvSchdl1");
                Integer Srno = 0;
                Integer max = 0;
                soItm.setRangeSize(-1);
                Row rowa[] = soItm.getAllRowsInRange();
                for (Row r : rowa) {
                    try {
                        Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
                    } catch (NullPointerException e) {
                        Srno = 0;
                    }
                    if (Srno > max) {
                        max = Srno;
                    }

                }
                max = max + 1;
                Integer schdlNo = generateScheduleNo((Timestamp)soRow.getAttribute("DocDt"));
                dlvRow.setAttribute("SrNo", max);
                dlvRow.setAttribute("ItmId", row.getAttribute("ItmId"));

                _log.info("Date is : " + docdt + " Sr No is :" + max + " Scheule no : " + schdlNo);
                dlvRow.setAttribute("DlvSchdlNo", schdlNo);
                //Number avail = (Number)row.getAttribute("ItmQty");
                dlvRow.setAttribute("DlvDt", docdt);
                dlvRow.setAttribute("TotQty", row.getAttribute("ItmQty"));
                dlvRow.setAttribute("DlvQty", row.getAttribute("ItmQty"));
                dlvRow.setAttribute("DlvMode", 163);

                String whId = "";
                String addsId = "";
                if (resolvElO("#{pageFlowScope.PARAM_USR_WH_ID}") != null) {
                    whId = resolvElO("#{pageFlowScope.PARAM_USR_WH_ID}").toString();
                }
                SlsSoVORowImpl currentRow = (SlsSoVORowImpl)this.getSlsSo1().getCurrentRow();
                Row[] filteredRows = currentRow.getLovWhIdVO1().getFilteredRows("WhId", whId);
                if (filteredRows.length > 1) {
                    if (filteredRows[0].getAttribute("AddsId") != null) {
                        addsId = filteredRows[0].getAttribute("AddsId").toString();
                    }
                }
                _log.info("AddsId is : " + addsId + " WareHouse Id is : " + whId);
                dlvRow.setAttribute("WhId", whId);
                dlvRow.setAttribute("DlvAddsId", addsId);
                //ItmUomBs
                dlvRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));
                dlvRow.setAttribute("ItmUomBs", row.getAttribute("ItmUomBs"));
                dlvRow.setAttribute("UomConvFctr", row.getAttribute("UomConvFctr"));


                Number n = StaticValue.NUMBER_ZERO;
                dlvRow.setAttribute("BalQty", n);
                if (whId != null) {
                    try {
                        BigDecimal v =
                            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)",
                                                           new Object[] { p_cldId, p_sloc_id, p_org_id,
                                                                          row.getAttribute("ItmId").toString(), whId,
                                                                          new Timestamp(System.currentTimeMillis()) });

                        n = new Number(v);
                        ////system.out.println("v :"+v);
                    } catch (Exception e) {
                        //e.printStackTrace();
                        //system.out.println("error in calling function !!!!!!!!!!!!!!!!!!!");
                    }
                }
                dlvRow.setAttribute("AvlQty", n);
            }
        }

        dlvSchdl.executeQuery();
        soItm.executeQuery();
        this.getDlvShdlView1().executeQuery();
        _log.info("Delivery Schedule is created");
    }

    /**Method to insert lines in Payment Schedule,
     * in case user doesn't
     *
     * make any schedule********.
     */

    public void generateAutoPaymentSchdl() {
        ViewObject slsSo = this.getSlsSo1();
        ViewObject pmtSchdl = this.getSlsSoPmntSchdl1();
        Row soRow = slsSo.getCurrentRow();
        if (pmtSchdl.getRowCount() == 0) {
            Row pmtRow = pmtSchdl.createRow();
            pmtSchdl.insertRow(pmtRow);
            pmtRow.setAttribute("PayDt", soRow.getAttribute("DocDt"));
            pmtRow.setAttribute("PayMode", 160);
            pmtRow.setAttribute("TotAmt", soRow.getAttribute("OrderTotalCostTrans"));
            pmtRow.setAttribute("PayAmt", soRow.getAttribute("OrderTotalCostTrans"));
            pmtRow.setAttribute("AdvFlg", "N");

            pmtSchdl.executeQuery();
        }
        _log.info("Payment Schedule is created");
    }


    /**Method to check whether Delivery Schedule is created for Item Or Not.
     * @return
     */

    public boolean checkDlvSchdlFrItm() {
        ViewObject soItm = this.getSlsSoItm1();
        ViewObject slsDlv = this.getSlsSoDlvSchdl1();
        if (soItm != null && slsDlv != null) {
            Row itmRow = soItm.getCurrentRow();
            if (itmRow != null && itmRow.getAttribute("ItmId") != null) {
                String itmId = itmRow.getAttribute("ItmId").toString();
                Row fltrdRow[] = slsDlv.getFilteredRows("ItmId", itmId);
                if (fltrdRow.length > 0) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return false;
            }
        } else {
            return false;
        }

    }

    /**Get Basic UOM of Item**.
     * @param itmId
     * @return
     */

    public String getBaseUom(String itmId) {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        String baseUom = null;
        ViewObjectImpl impl = this.getLovItmNmVo1();
        impl.setNamedWhereClauseParam("ItmIdBind", itmId);
        impl.setNamedWhereClauseParam("CldIdBind", p_cldId);
        impl.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        impl.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
        impl.setNamedWhereClauseParam("ItmDescBind", null);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            baseUom = allRowsInRange[0].getAttribute("UomBasic").toString();
        }

        _log.info("Base Uom is-" + baseUom);
        return baseUom;
    }

    /**Method to Auto Issue item from Stock in case of LIFO/FIFO.
     */

    public void issueAutoItem() {

        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        String uomBase = null;
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        ViewObject pickItm = this.getSlsSoItm1();
        Row itmRow = pickItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

        _log.info("wh-" + soRow.getAttribute("WhId") + "itm-" + itmRow.getAttribute("ItmId") + "pickQty-" +
                  itmRow.getAttribute("ItmQty") + "PickOrd-" + itmRow.getAttribute("TransItmPickOrder") + "SrNo-" +
                  itmRow.getAttribute("TransItmSerializedFlg") + "DocID-" + itmRow.getAttribute("DocId") + "Uom-" +
                  itmRow.getAttribute("ItmUom"));

        if (getBaseUom((String)itmRow.getAttribute("ItmId")) != null) {
            uomBase = getBaseUom(itmRow.getAttribute("ItmId").toString());
        } else {
            uomBase = itmRow.getAttribute("ItmUom").toString();
        }


        BigDecimal convFctr =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                                  p_cldId,
                                                                                                                  p_org_id,
                                                                                                                  itmRow.getAttribute("ItmId"),
                                                                                                                  uomBase,
                                                                                                                  itmRow.getAttribute("ItmUom") });

        _log.info("UomBase-" + uomBase + "ConvFctr-" + convFctr);
        if (convFctr == null) {
            convFctr = new BigDecimal(1);
        }
        BigDecimal ret =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_SLS_SO_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                           new Object[] { p_cldId, p_sloc_id, p_hoOrgId, p_org_id,
                                                          soRow.getAttribute("WhId"), itmRow.getAttribute("ItmId"),
                                                          itmRow.getAttribute("ItmQty"),
                                                          itmRow.getAttribute("TransItmPickOrder"),
                                                          itmRow.getAttribute("TransItmSerializedFlg"), binChkFlg,
                                                          itmRow.getAttribute("DocId"), itmRow.getAttribute("ItmUom"),
                                                          itmRow.getAttribute("ItmUom"), convFctr });
        _log.info("Retval AutoIssue-" + ret);
        this.getSlsSoItmLot1().executeQuery();
        this.getSlsSoItmBin1().executeQuery();
        this.getSlsSoItmSr1().executeQuery();
        if (ret.compareTo(new BigDecimal(1)) != 0) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + "There have been an error in Auto Item Issue !" +
                                  "</p></b>");
            saveMsg.append("<b>Please try again or contact ESS !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }

    }


    /**Method to get DocId of Current Row.
     * @return
     */
    public String getcurDocID() {
        String docId = "N";
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        if (curRow != null && curRow.getAttribute("DocId") != null) {
            docId = curRow.getAttribute("DocId").toString();
        }
        return docId;
    }

    /**Method to execute ViewCriteria on Header table to set on current Row.
     * @param doc_id
     */
    public void setOnCurRow(String doc_id) {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        ViewObject slsSo = this.getSlsSo1();
        slsSo.executeQuery();
        _log.info("In Am -" + doc_id);
        slsSo.setNamedWhereClauseParam("slocIdBind", p_sloc_id);
        slsSo.setNamedWhereClauseParam("orgIdBind", p_org_id);
        slsSo.setNamedWhereClauseParam("hoOrgIdBind", p_hoOrgId);
        slsSo.setNamedWhereClauseParam("cldIdBind", p_cldId);
        slsSo.setNamedWhereClauseParam("docIdBind", doc_id);
        slsSo.executeQuery();
        //executeViewObjects();
    }

    /**Method to be called in case of Cash-Sale Order to Update Finance and in Rush Order to Issue Items and Update Stock.
     * @param p_cldId
     * @param p_sloc_id
     * @param p_hoOrgId
     * @param p_org_id
     * @param uidPost
     * @return
     */

    public String updFinCashSale(String p_cldId, Integer p_sloc_id, String p_hoOrgId, String p_org_id,
                                 Integer uidPost) {
        BigDecimal retval = new BigDecimal(0);
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        String DocId = (String)curRow.getAttribute("DocId");
        Timestamp DocDt = (Timestamp)curRow.getAttribute("DocDt");
        _log.info("DocID : " + curRow.getAttribute("DocId"));
        _log.info("DocDt : " + curRow.getAttribute("DocDt"));
        _log.info("TotAmtSp : " + curRow.getAttribute("TotAmtSp"));
        _log.info("UserIdPost : " + uidPost);
        _log.info("OrgID : " + p_org_id);
        _log.info("SlocID : " + p_sloc_id);
        _log.info("HoOrgID : " + p_hoOrgId);
        _log.info("CldID : " + p_cldId);
        _log.info("EoId : " + curRow.getAttribute("EoId"));
        _log.info("CoaID : " + curRow.getAttribute("CoaId"));
        _log.info("CurrIdSp : " + curRow.getAttribute("CurrIdSp"));
        if (curRow.getAttribute("OrderType") != null) {
            Integer ordTyp = Integer.parseInt(curRow.getAttribute("OrderType").toString());
            if (ordTyp == 309 || ordTyp == 310) {
                rushOrderDispatch();
                //FN_SLS_TO_FIN_COST_OF_GOOD(PARAM_SOURCE_DOC_ID VARCHAR2,
                //                                          PARAM_SOURCE_DOC_DT date,
                //                                          UID_POST NUMBER,PARAM_ORG_ID VARCHAR2,PARAM_SLOC_ID VARCHAR2,
                //                PARAM_HO_ORG_ID VARCHAR2,PARAM_CLD_ID VARCHAR2,PARAM_SOURCE_TYPE VARCHAR2 default 'S')
                try {
                    String s =
                        callStoredFunction(Types.VARCHAR, "FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] { DocId,
                                                                                                                        DocDt,
                                                                                                                        uidPost,
                                                                                                                        p_org_id,
                                                                                                                        p_sloc_id,
                                                                                                                        p_hoOrgId,
                                                                                                                        p_cldId,
                                                                                                                        "O" }).toString();
                    //system.out.println("Return from FN_SLS_TO_FIN_COST_OF_GOOD : " + s);

                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_COST_OF_GOOD'!");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                }
                _log.info("Update Stock and Dispatch to MTL$ISSUE");
            }
            if (ordTyp == 310) {
                //
                _log.info("DocID : " + curRow.getAttribute("DocId"));
                _log.info("DocDt : " + curRow.getAttribute("DocDt"));
                _log.info("TotAmtSp : " + curRow.getAttribute("TotAmtSp"));
                _log.info("UserIdPost : " + uidPost);
                _log.info("OrgID : " + p_org_id);
                _log.info("SlocID : " + p_sloc_id);
                _log.info("HoOrgID : " + p_hoOrgId);
                _log.info("CldID : " + p_cldId);
                _log.info("EoId : " + curRow.getAttribute("EoId"));
                _log.info("CoaID : " + curRow.getAttribute("CoaId"));
                _log.info("CurrIdSp : " + curRow.getAttribute("CurrIdSp"));
                retval =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_SLS_CASH_SALES_GL_INS(?,?,?,?,?,?,?,?,?,?,?)",
                                                       new Object[] { curRow.getAttribute("DocId"),
                                                                      curRow.getAttribute("DocDt"),
                                                                      curRow.getAttribute("TotAmtSp"), uidPost,
                                                                      p_org_id, p_sloc_id, p_hoOrgId, p_cldId,
                                                                      curRow.getAttribute("EoId"),
                                                                      curRow.getAttribute("CoaId"),
                                                                      curRow.getAttribute("CurrIdSp") });
                _log.info("Cash Sale Function Called");
                _log.info("Return Value from --" + retval);
            }

        }
        //        CREATE OR REPLACE function SLS.FN_INS_SO_TO_TRF(P_CLDID IN VARCHAR2,
        //                               P_SLOCID IN NUMBER,
        //                               P_HO_ORGID IN VARCHAR2,
        //                               P_ORGID IN VARCHAR2,
        //                               P_FY_ID NUMBER,
        //                               P_DOC_DT DATE,
        //                               P_SO_ID VARCHAR2,
        //                               P_USRID IN NUMBER,
        //                               P_USRDT DATE

        //                                      )
        //                                      RETURN NUMBER IS
        Integer i = 0;
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        try {
            i =
   (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_INS_SO_TO_TRF(?,?,?,?,?,?,?,?,?)", new Object[] { cldId.toString(),
                                                                                                        slocId,
                                                                                                        hoOrgId.toString(),
                                                                                                        orgId.toString(),
                                                                                                        getFYidOrg(cldId.toString(),
                                                                                                                   orgId.toString()),
                                                                                                        curRow.getAttribute("DocDt"),
                                                                                                        curRow.getAttribute("DocId").toString(),
                                                                                                        userId,
                                                                                                        new Timestamp(System.currentTimeMillis()) });
            //system.out.println("Retun : " + i);
            if (i == 1) {

            } else {
                //system.out.println("_______________________ trf stat not updated.!");
            }
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'SLS.FN_INS_SO_TO_TRF' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }


        this.getDBTransaction().commit();

        return retval.toString();
    }

    /**Method to update Sales Order Mode after WorkFlow Call.
     */
    public void updOrderStatus() {
        _log.info("Transaction iis dirty or not-" + this.getDBTransaction().isDirty());
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();

        String wfFlag = resolvEl("#{pageFlowScope.PARAM_WF_RET_VAL}");
        _log.info("WF Return Flag--" + wfFlag);

        if (soRow.getAttribute("SoMode") != null) /* &&
            (Integer.parseInt(soRow.getAttribute("SoMode").toString())) != 315) */ {
            if (wfFlag.equalsIgnoreCase("A")) {
                soRow.setAttribute("SoMode", 314);
                this.getDBTransaction().commit();
            } else if (wfFlag.equalsIgnoreCase("F")) {
                soRow.setAttribute("SoMode", 317);
                this.getDBTransaction().commit();
            }
        }

        executeViewObjects();
        this.getorderSearch1().executeQuery();
    }

    /**Get User Name for Given UserId*.
     * @param uid
     * @return
     */
    public String getUserName(Integer uid) {

        String uname = "Anounymous";
        ViewObject usrVo = this.getLovUsrId1();
        Row[] filteredRows = usrVo.getFilteredRows("UsrId", uid);
        _log.info("Total Row-" + filteredRows.length);
        if (filteredRows.length > 0) {
            uname = filteredRows[0].getAttribute("UsrName").toString();
        }
        _log.info("Uid is-" + uid + "And name is-" + uname);
        return uname;
    }

    /**Method to update Order Staus in case of Cancellation.
     * @param canc_Flag
     */
    public void updateOrderStausCancel(String canc_Flag) {
        ViewObject slsSo = this.getSlsSo1();
        //Row soRow = slsSo.getCurrentRow();
        SlsSoVORowImpl soRow = (SlsSoVORowImpl)slsSo.getCurrentRow();

        if (canc_Flag.equalsIgnoreCase("true")) {
            _log.info("Order is Cancelled--");
            soRow.setAttribute("OrderStat", 220);
            Integer soBasis = (Integer)soRow.getAttribute("SoBasis");
            if (soBasis.equals(390)) {
                String id = soRow.getQuotId();
                String cldId = soRow.getCldId();
                Integer slocId = soRow.getSlocId();
                String orgId = soRow.getOrgId();

                if (id != null) {
                    try {
                        System.out.println("Values which are passing to the function:  " + id + "  " + cldId + " " +
                                           slocId + " " + orgId);
                        BigDecimal v =
                            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_UPDATE_QUOT_STAT(?,?,?,?,?)",
                                                           new Object[] { cldId, slocId, orgId, id, "C" });
                        int flag = v.intValue();
                        //system.out.println("value of function is:  " + flag);
                        if (flag == -1) {
                            FacesMessage msg =
                                new FacesMessage("There is an error in calling the function SLS.FN_UPDATE_QUOT_STAT");
                            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, msg);
                        }
                    } catch (Exception e) {
                        FacesMessage msg =
                            new FacesMessage("There is an error in calling the function SLS.FN_UPDATE_QUOT_STAT");
                        msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, msg);
                    }
                    soRow.getquotationLovVO1().executeQuery();
                }
            }
        }
    }

    /**Method to update Order Staus in case of Cancellation.
     * @param srt_close_Flag
     */
    public void updateOrderStausShortClose(String srt_close_Flag) {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        if (srt_close_Flag.equalsIgnoreCase("true")) {
            _log.info("Order is short closed--");
            soRow.setAttribute("OrderStat", 219);
        }
    }

    /**Delete Item Check Action/TAX is applied or Item is issued.
     * @return
     */

    public String checkItemDelete() {
        ViewObject slsSoLot = this.getSlsSoItmLot1();
        ViewObject slsSotr = this.getSlsSoTr2();

        if (slsSoLot.getRowCount() > 0) {
            return "L";
        } else if (slsSotr.getRowCount() > 0) {
            return "T";
        } else {
            return "Y";
        }
    }

    /**Validation - to check whether all items are scheduled to deliver and payment schedule is done or not*.
     * @return
     */
    public String checkValidateSaveandForward() {
        String retVal = "Y";
        Number ordTotCost = StaticValue.NUMBER_ZERO;
        Number payAmt = StaticValue.NUMBER_ZERO;
        ViewObject dlvScdlVw = this.getDlvShdlView1();
        Row soRow = this.getSlsSo1().getCurrentRow();
        if (soRow.getAttribute("OrderTotalCostTrans") != null) {
            ordTotCost = (Number)soRow.getAttribute("OrderTotalCostTrans");
        }
        if (soRow.getAttribute("PayAmtSumTrans") != null) {
            payAmt = (Number)soRow.getAttribute("PayAmtSumTrans");
        }

        if (dlvScdlVw.getRowCount() > 0) {
            retVal = "D";
        } else if (ordTotCost.round(getAmtDgt()).compareTo(payAmt.round(getAmtDgt())) != 0) {
            retVal = "P";
        }
        _log.info("Return Value is--" + retVal);
        return retVal;
    }

    /**
     * @return
     */
    public Row[] getOrgPrfFltrdRow() {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        //String usePack = "N";
        ViewObjectImpl orgPrf = this.getorgSlsPrfVO1();
        orgPrf.executeQuery();
        RowQualifier rq = new RowQualifier(orgPrf);
        rq.setWhereClause("CldId='" + p_cldId + "' and SlocId=" + p_sloc_id + " and OrgId='" + p_org_id + "'");
        // _log.info("Rq is-" + rq.getExprStr());
        Row orgRows[] = orgPrf.getFilteredRows(rq);
        return orgRows;
    }

    /**
     * Method to get whether Tolerance Days is used or not as per Sales Profile.
     * @return
     */
    public String tlrncDaysUsedParam() {
        String tlrncused = "N";
        Row orgRows[] = getOrgPrfFltrdRow();
        _log.info("Total Rows for Org-" + orgRows.length);
        if (orgRows.length > 0) {
            if (orgRows[0].getAttribute("ChkDlvSchdlTlrnc") != null) {
                tlrncused = orgRows[0].getAttribute("ChkDlvSchdlTlrnc").toString();
                if (tlrncused.equalsIgnoreCase("Y")) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "N";
            }
        } else {
            return "N";
        }
    }


    /**
     * Method to get whether Tolerance Quantity is used or not as per Sales Profile.
     * @return
     */
    public String tlrncQtyUsedParam() {
        String tlrncQty = "N";
        Row orgRows[] = getOrgPrfFltrdRow();
        _log.info("Total Rows for Org-" + orgRows.length);
        if (orgRows.length > 0) {
            if (orgRows[0].getAttribute("ChkDlvQtyTlrnc") != null) {
                tlrncQty = orgRows[0].getAttribute("ChkDlvQtyTlrnc").toString();
                if (tlrncQty.equalsIgnoreCase("Y")) {
                    return "Y";
                } else {
                    return "N";
                }

            } else {
                return "N";
            }
        } else {
            return "N";
        }
    }

    /**Set Value in TaskFlow Param (To use tolerance days and quantity)
     * *.
     */
    public void setTFParamTlrnc() {

        //Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        //String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String tolrncQty = tlrncQtyUsedParam();
        String tolrncDys = tlrncDaysUsedParam();
        _log.info("Used tlrnc dys-" + tolrncDys + " and qty is-" + tolrncQty);
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_TLRNC_DYS_USED", tolrncDys);
        paramMap.put("PARAM_TLRNC_QTY_USED", tolrncQty);
        /*  ViewObject eoVo = this.getLovEoId1();
        _log.info("Total Customer bfr-" + eoVo.getRowCount());
        eoVo.setNamedWhereClauseParam("slocIdBind", p_sloc_id);
        eoVo.setNamedWhereClauseParam("orgIdBind", p_org_id);
        eoVo.setNamedWhereClauseParam("hoOrgIdBind", p_hoOrgId);
        eoVo.setNamedWhereClauseParam("cldIdBind", p_cldId);
        eoVo.executeQuery();
        _log.info("Total Customer aftr-" + eoVo.getRowCount()); */
    }


    /**Method to validate discount -Order Wise.
     * @param discVal
     * @return
     */
    public String checkOrdAmtDisc(Number discVal) {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Number costBfrDisc = StaticValue.NUMBER_ZERO;
        //Number costBfrTax = StaticValue.NUMBER_ZERO;
        //String taxAftDisc = "N";

        if (soRow.getAttribute("CostBeforeDiscTrans") != null) {
            costBfrDisc = (Number)soRow.getAttribute("CostBeforeDiscTrans");
        }

        /*  if (soRow.getAttribute("TaxAfterDiscFlg") != null) {
            taxAftDisc = soRow.getAttribute("TaxAfterDiscFlg").toString();
        } */

        /* if (soRow.getAttribute("CostBeforeTaxTrans") != null) {
            costBfrTax = (Number)soRow.getAttribute("CostBeforeTaxTrans");
        } */

        _log.info("Cost bfr disc=" + costBfrDisc + "and cost before tax-" + "" + "And disc val-" + discVal);
        /*  if ("Y".equalsIgnoreCase(taxAftDisc) && discVal.compareTo(costBfrTax) != -1) {
            return "Y";
        } else  */
        if ( /* "N".equalsIgnoreCase(taxAftDisc) && */discVal.compareTo(costBfrDisc) != -1) {
            return "Y";
        } else {
            return "N";
        }

    }

    /**Method to Convert Quantity to base quantity.
     * @param itmQty
     */
    public void setQtyBs(Number itmQty) {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        ViewObject slsItm = this.getSlsSoItm1();
        Row itmRow = slsItm.getCurrentRow();

        BigDecimal convFctr =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                                  p_cldId,
                                                                                                                  p_org_id,
                                                                                                                  itmRow.getAttribute("ItmId"),
                                                                                                                  itmRow.getAttribute("ItmUomBs"),
                                                                                                                  itmRow.getAttribute("ItmUom") });
        _log.info("Uom Factor-" + convFctr);
        Number uomConv = new Number(1);
        if (convFctr != null) {
            try {
                uomConv = new Number(convFctr);
            } catch (SQLException e) {
                _log.info(e);
            }
        }
        Number qtyBs = uomConv.multiply(itmQty);
        _log.info("Uom Factor is-" + uomConv + "qty bs-" + qtyBs);
        itmRow.setAttribute("UomConvFctr", uomConv);
        itmRow.setAttribute("ItmQtyBs", qtyBs);
        itmRow.setAttribute("BalQty", qtyBs);

    }

    /**Method to get Amendment Number.
     * @return
     */
    public Integer getCurrentAmdNo() {
        Integer amdNo = 0;
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        if (soRow.getAttribute("AmdNo") != null) {
            amdNo = Integer.parseInt(soRow.getAttribute("AmdNo").toString());
        }
        _log.info("Amendment No is-" + amdNo);
        return amdNo;
    }

    /**Set Order Amendment Details.
     * @param amdNo
     */
    public void setAmndmntDtl(String amdNo) {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer amnndmntNo = Integer.parseInt(amdNo);
        BigDecimal retval =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_AMD_SO(?,?,?,?,?,?,?,?,?)", new Object[] { p_cldId,
                                                                                                             p_hoOrgId,
                                                                                                             p_sloc_id,
                                                                                                             p_org_id,
                                                                                                             soRow.getAttribute("DocId"),
                                                                                                             p_user_id,
                                                                                                             soRow.getAttribute("UsrIdCreateDt"),
                                                                                                             amnndmntNo -
                                                                                                             1,
                                                                                                             soRow.getAttribute("AmdDt") });
        _log.info("Amend function returns-" + retval);

        _log.info("Amd no to set is--" + amdNo);
        soRow.setAttribute("AmdNo", amdNo);
        soRow.setAttribute("AmdDt", new Timestamp(System.currentTimeMillis()));
        soRow.setAttribute("SoMode", 315);
        soRow.setAttribute("OrderStat", 217);
        this.getDBTransaction().commit();
    }

    /**Method to filter Stock Lot data warehouse wise.
     */
    public void filterLotWhWise() {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        if (soRow != null) {
            ViewObject stkLot = this.getViewMmStkSummLot1();
            _log.info("Total Row in Lot-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("WhIdBind", soRow.getAttribute("WhId"));
            stkLot.executeQuery();
            _log.info("Total Row in Lot after filter-" + stkLot.getRowCount());
        }
    }

    /**Method to filter Stock Bin data warehouse wise.
     */
    public void filterBinWhWise() {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        if (soRow != null) {
            ViewObject stkLot = this.getViewMmStkSummBin1();
            _log.info("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("whIdBind", soRow.getAttribute("WhId"));
            stkLot.executeQuery();
            _log.info("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }


    /**
     *
     * Container's getter for SlsSo1.
     * @return SlsSo1
     */
    public ViewObjectImpl getSlsSo1() {
        return (ViewObjectImpl)findViewObject("SlsSo1");
    }

    /**
     * Container's getter for SlsSoItm1.
     * @return SlsSoItm1
     */
    public ViewObjectImpl getSlsSoItm1() {
        return (ViewObjectImpl)findViewObject("SlsSoItm1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoItmVL1.
     * @return SlsSoTOSlsSoItmVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoItmVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoTOSlsSoItmVL1");
    }


    /**
     * Container's getter for DlvShdlView1.
     * @return DlvShdlView1
     */
    public ViewObjectImpl getDlvShdlView1() {
        return (ViewObjectImpl)findViewObject("DlvShdlView1");
    }

    /**
     * Container's getter for SlsSoToDlvSchdlViewVL1.
     * @return SlsSoToDlvSchdlViewVL1
     */
    public ViewLinkImpl getSlsSoToDlvSchdlViewVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoToDlvSchdlViewVL1");
    }

    /**
     * Container's getter for SlsSoDlvSchdl1.
     * @return SlsSoDlvSchdl1
     */
    public ViewObjectImpl getSlsSoDlvSchdl1() {
        return (ViewObjectImpl)findViewObject("SlsSoDlvSchdl1");
    }

    /**
     * Container's getter for SoSlsTOSoSlsDlvSchdlVL1.
     * @return SoSlsTOSoSlsDlvSchdlVL1
     */
    public ViewLinkImpl getSoSlsTOSoSlsDlvSchdlVL1() {
        return (ViewLinkImpl)findViewLink("SoSlsTOSoSlsDlvSchdlVL1");
    }


    /**
     * Container's getter for SlsSoPmntSchdl1.
     * @return SlsSoPmntSchdl1
     */
    public ViewObjectImpl getSlsSoPmntSchdl1() {
        return (ViewObjectImpl)findViewObject("SlsSoPmntSchdl1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoPmtSchdlVL1.
     * @return SlsSoTOSlsSoPmtSchdlVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoPmtSchdlVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoTOSlsSoPmtSchdlVL1");
    }


    /**
     * Container's getter for SlsSoTnc1.
     * @return SlsSoTnc1
     */
    public ViewObjectImpl getSlsSoTnc1() {
        return (ViewObjectImpl)findViewObject("SlsSoTnc1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoTncVL1.
     * @return SlsSoTOSlsSoTncVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoTncVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoTOSlsSoTncVL1");
    }

    /**
     * Container's getter for LovTnc1.
     * @return LovTnc1
     */
    public ViewObjectImpl getLovTnc1() {
        return (ViewObjectImpl)findViewObject("LovTnc1");
    }


    /**
     * Container's getter for SlsSoOc1.
     * @return SlsSoOc1
     */
    public ViewObjectImpl getSlsSoOc1() {
        return (ViewObjectImpl)findViewObject("SlsSoOc1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoOcVL1.
     * @return SlsSoTOSlsSoOcVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoOcVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoTOSlsSoOcVL1");
    }


    /**
     * Container's getter for SlsSoTr2.
     * @return SlsSoTr2
     */
    public ViewObjectImpl getSlsSoTr2() {
        return (ViewObjectImpl)findViewObject("SlsSoTr2");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSoTrVL1.
     * @return SlsSoItmTOSlsSoTrVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSoTrVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoItmTOSlsSoTrVL1");
    }

    /**
     * Container's getter for SlsSoTrLines2.
     * @return SlsSoTrLines2
     */
    public ViewObjectImpl getSlsSoTrLines2() {
        return (ViewObjectImpl)findViewObject("SlsSoTrLines2");
    }

    /**
     * Container's getter for SlsSoTrTOSlsSoTrLinesVL2.
     * @return SlsSoTrTOSlsSoTrLinesVL2
     */
    public ViewLinkImpl getSlsSoTrTOSlsSoTrLinesVL2() {
        return (ViewLinkImpl)findViewLink("SlsSoTrTOSlsSoTrLinesVL2");
    }


    /**
     * Container's getter for orderSearch1.
     * @return orderSearch1
     */
    public ViewObjectImpl getorderSearch1() {
        return (ViewObjectImpl)findViewObject("orderSearch1");
    }

    /**
     * Container's getter for SearchLov1.
     * @return SearchLov1
     */
    public ViewObjectImpl getSearchLov1() {
        return (ViewObjectImpl)findViewObject("SearchLov1");
    }


    /**
     * Container's getter for SlsSoItmSch1.
     * @return SlsSoItmSch1
     */
    public ViewObjectImpl getSlsSoItmSch1() {
        return (ViewObjectImpl)findViewObject("SlsSoItmSch1");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSchItmVL1.
     * @return SlsSoItmTOSlsSchItmVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSchItmVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoItmTOSlsSchItmVL1");
    }


    /**
     * Container's getter for LovItmId1.
     * @return LovItmId1
     */
    public ViewObjectImpl getLovItmId1() {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ViewObjectImpl itmVo = (ViewObjectImpl)findViewObject("LovItmId1");
        itmVo.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        itmVo.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        itmVo.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
        itmVo.setNamedWhereClauseParam("CldIdBind", p_cldId);

        return itmVo;
    }

    /**
     * Container's getter for RateContractVw1.
     * @return RateContractVw1
     */
    public ViewObjectImpl getRateContractVw1() {
        return (ViewObjectImpl)findViewObject("RateContractVw1");
    }

    /**
     * Container's getter for SlsSoToSlsRateCntrctVwVL1.
     * @return SlsSoToSlsRateCntrctVwVL1
     */
    public ViewLinkImpl getSlsSoToSlsRateCntrctVwVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoToSlsRateCntrctVwVL1");
    }


    /**
     * Container's getter for LovDispOrdId1.
     * @return LovDispOrdId1
     */
    public ViewObjectImpl getLovDispOrdId1() {
        return (ViewObjectImpl)findViewObject("LovDispOrdId1");
    }


    /**
     * Container's getter for LovTmplDocId1.
     * @return LovTmplDocId1
     */
    public ViewObjectImpl getLovTmplDocId1() {
        return (ViewObjectImpl)findViewObject("LovTmplDocId1");
    }

    /**
     * Container's getter for SlsSoCalc1.
     * @return SlsSoCalc1
     */
    public ViewObjectImpl getSlsSoCalc1() {
        return (ViewObjectImpl)findViewObject("SlsSoCalc1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoOrdCalcVL1.
     * @return SlsSoTOSlsSoOrdCalcVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoOrdCalcVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoTOSlsSoOrdCalcVL1");
    }

    /**
     * Container's getter for MmSoItmPo1.
     * @return MmSoItmPo1
     */
    public ViewObjectImpl getMmSoItmPo1() {
        return (ViewObjectImpl)findViewObject("MmSoItmPo1");
    }

    /**
     * Container's getter for SlsSoToMMSoItmPoVL1.
     * @return SlsSoToMMSoItmPoVL1
     */
    public ViewLinkImpl getSlsSoToMMSoItmPoVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoToMMSoItmPoVL1");
    }

    /**
     * Container's getter for MmSo1.
     * @return MmSo1
     */
    public ViewObjectImpl getMmSo1() {
        return (ViewObjectImpl)findViewObject("MmSo1");
    }


    /**
     * Container's getter for MMGrpHdrTemp1.
     * @return MMGrpHdrTemp1
     */
    public MMGrpHdrTempVOImpl getMMGrpHdrTemp1() {
        return (MMGrpHdrTempVOImpl)findViewObject("MMGrpHdrTemp1");
    }

    /**
     * Container's getter for MMGrpItmDtlTemp1.
     * @return MMGrpItmDtlTemp1
     */
    public ViewObjectImpl getMMGrpItmDtlTemp1() {
        return (ViewObjectImpl)findViewObject("MMGrpItmDtlTemp1");
    }

    /**
     * Container's getter for MmSoGrp1.
     * @return MmSoGrp1
     */
    public ViewObjectImpl getMmSoGrp1() {
        return (ViewObjectImpl)findViewObject("MmSoGrp1");
    }

    /**
     * Container's getter for MMGrpHdrTOMMGrpItmDtlVL1.
     * @return MMGrpHdrTOMMGrpItmDtlVL1
     */
    public ViewLinkImpl getMMGrpHdrTOMMGrpItmDtlVL1() {
        return (ViewLinkImpl)findViewLink("MMGrpHdrTOMMGrpItmDtlVL1");
    }

    /**
     * Container's getter for MmSoItm1.
     * @return MmSoItm1
     */
    public ViewObjectImpl getMmSoItm1() {
        return (ViewObjectImpl)findViewObject("MmSoItm1");
    }

    /**
     * Container's getter for MMDrftPoView1.
     * @return MMDrftPoView1
     */
    public ViewObjectImpl getMMDrftPoView1() {
        return (ViewObjectImpl)findViewObject("MMDrftPoView1");
    }

    /**
     * Container's getter for SlsSoToMMDrftPoViewVL1.
     * @return SlsSoToMMDrftPoViewVL1
     */
    public ViewLinkImpl getSlsSoToMMDrftPoViewVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoToMMDrftPoViewVL1");
    }

    /**
     * Container's getter for LovSoBasis1.
     * @return LovSoBasis1
     */
    public ViewObjectImpl getLovSoBasis1() {
        return (ViewObjectImpl)findViewObject("LovSoBasis1");
    }

    /**
     * Container's getter for SlsSoItmBin1.
     * @return SlsSoItmBin1
     */
    public ViewObjectImpl getSlsSoItmBin1() {
        return (ViewObjectImpl)findViewObject("SlsSoItmBin1");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSoItmBinVL1.
     * @return SlsSoItmTOSlsSoItmBinVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSoItmBinVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoItmTOSlsSoItmBinVL1");
    }

    /**
     * Container's getter for SlsSoItmLot1.
     * @return SlsSoItmLot1
     */
    public ViewObjectImpl getSlsSoItmLot1() {
        return (ViewObjectImpl)findViewObject("SlsSoItmLot1");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSoItmLotVL1.
     * @return SlsSoItmTOSlsSoItmLotVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSoItmLotVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoItmTOSlsSoItmLotVL1");
    }

    /**
     * Container's getter for SlsSoItmSr1.
     * @return SlsSoItmSr1
     */
    public ViewObjectImpl getSlsSoItmSr1() {
        return (ViewObjectImpl)findViewObject("SlsSoItmSr1");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSoItmSrVL1.
     * @return SlsSoItmTOSlsSoItmSrVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSoItmSrVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoItmTOSlsSoItmSrVL1");
    }

    /**
     * Container's getter for ViewMmStkSummBin1.
     * @return ViewMmStkSummBin1
     */
    public ViewObjectImpl getViewMmStkSummBin1() {
        return (ViewObjectImpl)findViewObject("ViewMmStkSummBin1");
    }

    /**
     * Container's getter for SlsSoItmTOViewMmStkSummBinVL1.
     * @return SlsSoItmTOViewMmStkSummBinVL1
     */
    public ViewLinkImpl getSlsSoItmTOViewMmStkSummBinVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoItmTOViewMmStkSummBinVL1");
    }

    /**
     * Container's getter for ViewMmStkSummLot1.
     * @return ViewMmStkSummLot1
     */
    public ViewObjectImpl getViewMmStkSummLot1() {
        return (ViewObjectImpl)findViewObject("ViewMmStkSummLot1");
    }

    /**
     * Container's getter for SlsSoItmTOViewMMStkSummLotVL1.
     * @return SlsSoItmTOViewMMStkSummLotVL1
     */
    public ViewLinkImpl getSlsSoItmTOViewMMStkSummLotVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoItmTOViewMMStkSummLotVL1");
    }

    /**
     * Container's getter for ViewMmStkSummSr1.
     * @return ViewMmStkSummSr1
     */
    public ViewObjectImpl getViewMmStkSummSr1() {
        return (ViewObjectImpl)findViewObject("ViewMmStkSummSr1");
    }

    /**
     * Container's getter for SlsSoItmTOViewMmStkSummSrVL1.
     * @return SlsSoItmTOViewMmStkSummSrVL1
     */
    public ViewLinkImpl getSlsSoItmTOViewMmStkSummSrVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoItmTOViewMmStkSummSrVL1");
    }

    /**
     * Container's getter for SlsSoItmLotVO1.
     * @return SlsSoItmLotVO1
     */
    public ViewObjectImpl getSlsSoItmLotVO1() {
        return (ViewObjectImpl)findViewObject("SlsSoItmLotVO1");
    }

    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrId1() {
        return (ViewObjectImpl)findViewObject("LovUsrId1");
    }

    /**
     * Container's getter for orgSlsPrfVO1.
     * @return orgSlsPrfVO1
     */
    public ViewObjectImpl getorgSlsPrfVO1() {
        return (ViewObjectImpl)findViewObject("orgSlsPrfVO1");
    }

    /**
     * Container's getter for LovEoId1.
     * @return LovEoId1
     */
    public ViewObjectImpl getLovEoId1() {
        return (ViewObjectImpl)findViewObject("LovEoId1");
    }

    /**
     * Container's getter for SlsPickFrSoVO1.
     * @return SlsPickFrSoVO1
     */
    public ViewObjectImpl getSlsPickFrSoVO1() {
        return (ViewObjectImpl)findViewObject("SlsPickFrSoVO1");
    }

    /**
     * Method to set WhId in dlvSchView and RateContractVo.
     * @param WhId
     */
    public void setWhIdInDlvSchVw(StringBuffer WhId) {
        RowSetIterator citr = this.getDlvShdlView1().createRowSetIterator(null);
        while (citr.hasNext()) {
            //system.out.println("setting wh :" + WhId);
            Row next = citr.next();
            next.setAttribute("whIdTrans", WhId.toString());
        }
        citr.closeRowSetIterator();
        RowSetIterator cit = this.getRateContractVw1().createRowSetIterator(null);
        while (cit.hasNext()) {
            //system.out.println("setting wh in rate :" + WhId);
            Row next = cit.next();
            next.setAttribute("WhIdTrans", WhId.toString());
        }
        cit.closeRowSetIterator();
    }


    /**
     * Container's getter for SlsSoItmTrf1.
     * @return SlsSoItmTrf1
     */
    public ViewObjectImpl getSlsSoItmTrf1() {
        return (ViewObjectImpl)findViewObject("SlsSoItmTrf1");
    }

    /**
     * Container's getter for SoDilvSchdlToSoQuantTrfVL1.
     * @return SoDilvSchdlToSoQuantTrfVL1
     */
    public ViewLinkImpl getSoDilvSchdlToSoQuantTrfVL1() {
        return (ViewLinkImpl)findViewLink("SoDilvSchdlToSoQuantTrfVL1");
    }

    /**
     * Method to insert.
     */
    public void createAndInsertRowInSoDilvSchdlToSoQuantTrfVL1() {

    }

    /**
     * @param whId
     */
    public void setAvailableQuantityOnWarehouseSelection(StringBuffer whId) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        //StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        //Integer cur_digit = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}").toString());

        //        SLS.fn_mm_get_avail_stk (
        //           p_cld_id    VARCHAR2,
        //           p_sloc_id   NUMBER,
        //           p_org_id    VARCHAR2,
        //           p_itm_id    VARCHAR2,
        //           p_wh_id     VARCHAR2,
        //           P_DOC_DT DATE
        Number n = StaticValue.NUMBER_ZERO;
        Row currentRow = this.getSlsSoItmTrf1().getCurrentRow();
        if (currentRow != null) {
            try {
                BigDecimal v =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] { cldId.toString(),
                                                                                                                         slocId,
                                                                                                                         orgId.toString(),
                                                                                                                         currentRow.getAttribute("ItmId"),
                                                                                                                         whId.toString(),
                                                                                                                         new Timestamp(System.currentTimeMillis()) });

                n = new Number(v);
                //system.out.println("v :" + v);
                currentRow.setAttribute("AvlQty", n);

            } catch (Exception e) {

                //e.printStackTrace();
                //system.out.println("error in calling function !!!!!!!!!!!!!!!!!!!");
            }

        }
        currentRow.setAttribute("AvlQty", n);
        ////system.out.println("EoId : "+this.getSlsSo().getAttribute("EoId"));
        //system.out.println("________________________________n :" + n);

    }

    /*  public boolean isTransferQuantityValid(){

    } */

    /**
     * Method to generatetransfer order.
     * @param flag
     * @return
     */
    public Integer setTransferOrderFlag(StringBuffer flag) {
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        //Row soCurrrow = this.getSlsSo1().getCurrentRow();
        Row trfCurrentRow = impl.getCurrentRow();
        trfCurrentRow.setAttribute("TrfStat", flag.toString());
        return null;
    }

    /**
     * Method to validate the WhIdSrc.
     * @param whIdSrc
     * @return
     */
    public boolean isOrgIdSrcVALID(String whIdSrc) {
        if (whIdSrc != null) {
            Row currentRow = this.getSlsSoItmTrf1().getCurrentRow();
            RowSetIterator itr = this.getSlsSoItmTrf1().createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                System.out.println("WhId :" + whIdSrc + " : " + next.getAttribute("WhIdSrc") +
                                   " : "); //+(next.getAttribute("WhIdSrc").equalsIgnoreCase((Object)whIdSrc)));
                if (next != currentRow) {
                    //system.out.println("WhId :" + next.getAttribute("WhIdDest") + " :: " + whIdSrc);
                    if (next.getAttribute("WhIdDest").toString().equalsIgnoreCase(whIdSrc)) {
                        //system.out.println("_____________________6");
                        itr.closeRowSetIterator();
                        return false;
                    }
                }
            }
        }
        return true;
    }

    /**
     * To Check if all the transfer order are generated or not.
     * @return
     */
    public boolean isTransferOrderValid() {
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            if (row.getAttribute("TrfStat").toString().equals("N")) {
                itr.closeRowSetIterator();
                return false;
            }
        }
        itr.closeRowSetIterator();
        return true;
    }

    /**
     * @param orgIdDest
     */
    public void refreshDestWareHouse(StringBuffer orgIdDest) {
        SlsSoItmTrfVORowImpl soTrfRow = (SlsSoItmTrfVORowImpl)this.getSlsSoItmTrf1().getCurrentRow();
        soTrfRow.setOrgIdDest(orgIdDest.toString());
        soTrfRow.getLovWhIdVO2().executeQuery();
        //system.out.println("refresh");
    }

    /**
     * @return
     */
    public Integer getSalesOrderType() {
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            return (Integer)currentRow.getAttribute("OrderType");
        }
        return null;
    }

    public void setaxableAmount() {
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        if (currentRow != null) {

        }
    }

    /**
     * @return
     */
    public boolean isItemPriceForEachItmValid() {
        ViewObjectImpl impl = this.getSlsSoItm1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        //Number n = StaticValue.NUMBER_ZERO;
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next.getAttribute("ItmRate") != null) {
                if (((Number)next.getAttribute("ItmRate")).compareTo(StaticValue.NUMBER_ZERO) == 0) {
                    FacesMessage msg =
                        new FacesMessage("<html><body>Item Rate for Item id '<b style='color:red'>" + next.getAttribute("ItmId") +
                                         "</b>' is <b>0.00</b>. Please Define Price for the given Item.</body></html>");
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                    itr.closeRowSetIterator();
                    return false;
                }
            }
        }
        itr.closeRowSetIterator();
        return true;
    }

    /**
     * Check if po exists or not.
     * @return
     */
    public boolean doPoExist() {
        String DocId = "";
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");

        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            DocId = (String)currentRow.getAttribute("DocId");
        }
        String d = isPoCreated(p_sloc_id, p_cldId, p_org_id, DocId);
        if (d.equalsIgnoreCase("N")) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * Container's getter for LovItmNmVo1.
     * @return LovItmNmVo1
     */
    public ViewObjectImpl getLovItmNmVo1() {
        return (ViewObjectImpl)findViewObject("LovItmNmVo1");
    }

    /**
     * Method to check if quotId is null.
     * @return
     */
    public boolean isQuotIdNull() {
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("QuotId") != null) {
                if (currentRow.getAttribute("QuotId").toString().equals("")) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Container's getter for SlsSoTrVOForOrdrWiseTaxInsertion.
     * @return SlsSoTrVOForOrdrWiseTaxInsertion
     */
    public ViewObjectImpl getSlsSoTrVOForOrdrWiseTaxInsertion() {
        return (ViewObjectImpl)findViewObject("SlsSoTrVOForOrdrWiseTaxInsertion");
    }

    /**
     * Container's getter for SlsSoTrLinesVO1.
     * @return SlsSoTrLinesVO1
     */
    public ViewObjectImpl getSlsSoTrLinesVO1() {
        return (ViewObjectImpl)findViewObject("SlsSoTrLinesVO1");
    }

    /**
     * Container's getter for SlsSoTrVO2.
     * @return SlsSoTrVO2
     */
    public ViewObjectImpl getSlsSoTrVO2() {
        return (ViewObjectImpl)findViewObject("SlsSoTrVO2");
    }

    /**
     * Container's getter for SlsSoTOSlsSoTrVL2.
     * @return SlsSoTOSlsSoTrVL2
     */
    public ViewLinkImpl getSlsSoTOSlsSoTrVL2() {
        return (ViewLinkImpl)findViewLink("SlsSoTOSlsSoTrVL2");
    }

    /**
     * Container's getter for SlsSoTrLinesVO2.
     * @return SlsSoTrLinesVO2
     */
    public ViewObjectImpl getSlsSoTrLinesVO2() {
        return (ViewObjectImpl)findViewObject("SlsSoTrLinesVO2");
    }

    /**
     * Container's getter for SlsSoTrTOSlsSoTrLines1.
     * @return SlsSoTrTOSlsSoTrLines1
     */
    public ViewLinkImpl getSlsSoTrTOSlsSoTrLines1() {
        return (ViewLinkImpl)findViewLink("SlsSoTrTOSlsSoTrLines1");
    }

    public void changeQuotationStatus() {
        //system.out.println("Came in the function method......");
        ViewObjectImpl impl = this.getSlsSo1();
        if (impl != null && impl.getCurrentRow() != null) {
            //system.out.println("Found the current row..............");
            SlsSoVORowImpl currentRow = (SlsSoVORowImpl)impl.getCurrentRow();
            Integer basis = currentRow.getSoBasis();
            if (basis == 390) {
                String id = currentRow.getQuotId();
                String cldId = currentRow.getCldId();
                Integer slocId = currentRow.getSlocId();
                String orgId = currentRow.getOrgId();

                if (id != null) {
                    try {
                        System.out.println("Values which are passing to the function:  " + id + "  " + cldId + " " +
                                           slocId + " " + orgId);
                        BigDecimal v =
                            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_UPDATE_QUOT_STAT(?,?,?,?,?)",
                                                           new Object[] { cldId, slocId, orgId, id, "A" });
                        int flag = v.intValue();
                        //system.out.println("value of function is:  " + flag);
                        if (flag == -1) {
                            FacesMessage msg =
                                new FacesMessage("There is an error in calling the function SLS.FN_UPDATE_QUOT_STAT");
                            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, msg);
                        }
                    } catch (Exception e) {
                        FacesMessage msg =
                            new FacesMessage("There is an error in calling the function SLS.FN_UPDATE_QUOT_STAT");
                        msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, msg);
                    }
                    currentRow.getquotationLovVO1().executeQuery();
                }
            }
        }
    }

    /**
     * Check whether mandatory fields entered in header Part or not.
     * @return
     */

    public Integer chkSlsSo() {
        Integer retval = 0;
        //system.out.println("Inside chkSlsSo");

        Row currentRow = this.getSlsSo1().getCurrentRow();
        //system.out.println("Current row is " + currentRow);
        Object dt = currentRow.getAttribute("DocDt");
        Object contractType = currentRow.getAttribute("SoContractBasis");
        Object contractValue = currentRow.getAttribute("ContractValueTrans");
        Object customer = currentRow.getAttribute("EoNmTrans");
        Object currency = currentRow.getAttribute("CurrDescTrans");
        Object address = currentRow.getAttribute("AddressTrans");
        Object ship = currentRow.getAttribute("ShipAdds");

        System.out.println(dt + " " + contractType + " " + contractValue + " " + currency + " " + customer + " " +
                           address);
        if (dt != null && dt.toString().length() > 0) {
            if (contractType != null && contractType.toString().length() > 0) {
                if (customer != null && customer.toString().length() > 0) {
                    if (currency != null && currency.toString().length() > 0) {
                        if ((address != null && address.toString().length() > 0) ||
                            (ship != null && ship.toString().length() > 0)) {
                            if (contractValue != null && contractValue.toString().length() > 0) {
                                if (contractType.toString().equalsIgnoreCase("487")) {
                                    currentRow.setAttribute("SoContractQty", contractValue);
                                } else if (contractType.toString().equalsIgnoreCase("488")) {
                                    currentRow.setAttribute("SoContractPrice", contractValue);
                                } else if (contractType.toString().equalsIgnoreCase("489")) {
                                    currentRow.setAttribute("SoContractValue", contractValue);
                                }
                            } else {
                                retval = 6;
                            }
                        } else {
                            retval = 5;
                        }
                    } else {
                        retval = 4;
                    }
                } else {
                    retval = 3;
                }
            } else {
                retval = 2;
            }
        } else {
            retval = 1;
        }
        //system.out.println("Return value is " + retval);
        return retval;
    }

    public void setpolicy() {
        String i = "";
        Object plcId = resolvElO("#{pageFlowScope.PRICE_POLICY_ID}");
        _log.info("Policy id : " + plcId);
        if (plcId != null) {
            i = plcId.toString();
        }
        if (!i.equals("")) {
            ViewObjectImpl impl = this.getSlsSo1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                currentRow.setAttribute("EoPricePlc", i);
                _log.info("Setting policy Id to : " + i);
            }
        }
    }

    /**
     * @return
     */
    public StringBuffer checkPolicyApplied() {
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String policyPrice =
                (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                            p_sloc_id,
                                                                                                            p_org_id,
                                                                                                            "USE_PRICE_PLC" });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        _log.info("Policy Applied : " + ck);
        return ck;
    }

    /**
     * @param colName
     * @return
     */
    public StringBuffer checkforProfileValues(StringBuffer colName) {
        colName = (colName == null ? new StringBuffer("") : colName);
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String policyPrice =
                (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                            p_sloc_id,
                                                                                                            p_org_id,
                                                                                                            colName.toString() });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    /**
     * @return
     */
    public StringBuffer checkShowAtt() {
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String policyPrice =
                (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                            p_sloc_id,
                                                                                                            p_org_id,
                                                                                                            "SHOW_ITM_ATT" });
            _log.info("SHOW ATTRIBUTE IN ORDR : " + policyPrice);

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    /**
     * Check Whether entity belongs to customer or prospect or not.
     * @param eoName
     * @return
     */

    public Integer chkEntityType(String eoName) {
        Integer retVal = 68;

        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        System.out.println("Came in validator : EoName is " + eoName);
        if (eoName != null) {
            //Object eoNm = eoName;
            ViewObjectImpl eoNmVo = this.getLovEoTypeFromEoNmVO1();
            eoNmVo.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            eoNmVo.setNamedWhereClauseParam("CldIdBind", p_cldId);
            eoNmVo.setNamedWhereClauseParam("OrgIdBind", p_org_id);
            eoNmVo.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
            eoNmVo.setNamedWhereClauseParam("EoNameBind", eoName);
            eoNmVo.executeQuery();

            Row[] allRowsInRange = eoNmVo.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                Object EoType = allRowsInRange[0].getAttribute("EoType");
                retVal = (Integer)EoType;
            }
        }
        return retVal;
    }

    /**
     * Following code is used to convert prospect to customer.
     * @return
     */

    public Integer chngProsToCust() {
        Integer retVal = 0;

        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

            Row currentRow = this.getSlsSo1().getCurrentRow();
            Integer eoId = (Integer)currentRow.getAttribute("EoId");
            System.out.println("Eo id is " + eoId);
            if (eoId != null && this.getSlsSo1().getCurrentRow().getAttribute("CategoryTrans") != null) {

                Integer val =
                    (Integer)callStoredFunction(Types.INTEGER, "APP.fn_change_eo_type(?,?,?,?,?,?,?)", new Object[] { p_cldId,
                                                                                                                      p_sloc_id,
                                                                                                                      p_hoOrgId,
                                                                                                                      p_org_id,
                                                                                                                      eoId,
                                                                                                                      68,
                                                                                                                      this.getSlsSo1().getCurrentRow().getAttribute("CategoryTrans") });

                System.out.println("Value is " + val);

            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return retVal;
    }

    /**
     * Set Address for the prospect which is converted to Customer.
     */
    public void setAddressForCust() {
        String addsId = resolvEl("#{pageFlowScope.Adds_Id}").toString();
        String addsNm = resolvEl("#{pageFlowScope.Ret_Adds_Id}").toString();

        this.getLovEoAdds1().executeQuery();

        if (addsId != null && addsNm != null) {
            //system.out.println("Address id is " + addsId);
            //system.out.println("Adds Names is " + addsNm);
            this.getSlsSo1().getCurrentRow().setAttribute("custAddressTrans", addsId);
            this.getSlsSo1().getCurrentRow().setAttribute("ShipAdds", addsId);
            this.getSlsSo1().getCurrentRow().setAttribute("AddressTrans", addsNm);
            this.shipadds = addsId;
        }
    }

    /**
     * Container's getter for LovEoAdds1.
     * @return LovEoAdds1
     */
    public ViewObjectImpl getLovEoAdds1() {
        return (ViewObjectImpl)findViewObject("LovEoAdds1");
    }

    /**
     * @param shipadds
     */
    public void setShipadds(String shipadds) {
        this.shipadds = shipadds;
    }

    /**
     * @return
     */
    public String getShipadds() {
        return shipadds;
    }

    /**
     * Set every value to null.
     */
    public void setSlsSoToNull() {
        ViewObjectImpl impl = this.getSlsSo1();
        //system.out.println("Inside slsso");
        Row currentRow = impl.getCurrentRow();
        if (currentRow != null) {
            //system.out.println("____");
            currentRow.setAttribute("EoNmTrans", null);
            currentRow.setAttribute("EoId", null);
            currentRow.setAttribute("CurrIdSp", null);
            currentRow.setAttribute("CurrConvFctr", null);
            currentRow.setAttribute("CoaId", null);
            currentRow.setAttribute("ShipAdds", null);
            impl.executeQuery();
        }
    }

    /**
     * Container's getter for LovEoTypeFromEoNmVO1.
     * @return LovEoTypeFromEoNmVO1
     */
    public ViewObjectImpl getLovEoTypeFromEoNmVO1() {
        return (ViewObjectImpl)findViewObject("LovEoTypeFromEoNmVO1");
    }


    /**
     * @return
     */
    public Boolean checkSchemeAppliedOrNot() {
        Boolean c = false;
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String policyPrice =
                (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                            p_sloc_id,
                                                                                                            p_org_id,
                                                                                                            "USE_SCHEME" });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }
            if (ck.toString().equalsIgnoreCase("Y")) {
                c = true;
            } else {
                c = false;
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return c;
    }

    /**
     * Container's getter for SlsSoPaymntVO1.
     * @return SlsSoPaymntVO1
     */
    public ViewObjectImpl getSlsSoPaymntVO1() {
        return (ViewObjectImpl)findViewObject("SlsSoPaymntVO1");
    }

    /**
     * Container's getter for SOToPaymntVL1.
     * @return SOToPaymntVL1
     */
    public ViewLinkImpl getSOToPaymntVL1() {
        return (ViewLinkImpl)findViewLink("SOToPaymntVL1");
    }

    /**
     * Container's getter for TempPaymntVO1.
     * @return TempPaymntVO1
     */
    public ViewObjectImpl getTempPaymntVO1() {
        return (ViewObjectImpl)findViewObject("TempPaymntVO1");
    }

    public void addPaymnt() {
        ViewObjectImpl impl = this.getTempPaymntVO1();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length == 1) {
            Object currIdSp_ = allRowsInRange[0].getAttribute("PaymntCurrIdTrans");
            Integer currIdSp = (currIdSp_ == null ? 0 : (Integer)currIdSp_);

            Object payMod_ = allRowsInRange[0].getAttribute("PaymntModTrans");
            Integer payMod = (payMod_ == null ? 0 : (Integer)payMod_);

            Object amt_ = allRowsInRange[0].getAttribute("PaymntAmtTrans");
            Number amt = (amt_ == null ? StaticValue.NUMBER_ZERO : (Number)amt_);

            if (payMod == 0) {
                FacesMessage message = new FacesMessage("", "Please select Payment Mode !");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else if (currIdSp == 0) {
                FacesMessage message = new FacesMessage("", "Please select Currency !");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else if (amt.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                FacesMessage message = new FacesMessage("", "Payment Amount must be greater than zero !");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else {
                ViewObjectImpl o1 = this.getSlsSoPaymntVO1();
                RowSetIterator itr = o1.createRowSetIterator(null);
                Integer srNo = 0;
                while (itr.hasNext()) {
                    Row next = itr.next();
                    Integer attribute = (Integer)next.getAttribute("SrNo");
                    if (attribute >= srNo) {
                        srNo = attribute;
                    }
                }
                itr.closeRowSetIterator();
                Row pymntRow = o1.createRow();
                o1.insertRow(pymntRow);
                pymntRow.setAttribute("SrNo", srNo + 1);


                Object bankAccNo_ = allRowsInRange[0].getAttribute("PaymntBankAccNoTrans");
                StringBuffer bankAccNo =
                    (bankAccNo_ == null ? new StringBuffer("") : new StringBuffer(bankAccNo_.toString()));
                pymntRow.setAttribute("BankAcNo", bankAccNo.toString());
                Object bankAddsId_ = allRowsInRange[0].getAttribute("PaymntAddsTrans");
                StringBuffer bankAddsId =
                    (bankAddsId_ == null ? new StringBuffer("") : new StringBuffer(bankAddsId_.toString()));
                pymntRow.setAttribute("AddsId", bankAddsId.toString());

                Object currConv_ = allRowsInRange[0].getAttribute("PaymntCurrConvTrans");
                Number currConv = (currConv_ == null ? StaticValue.NUMBER_ZERO : (Number)currConv_);
                pymntRow.setAttribute("CurrConvFctr", currConv);
                Object currIdBs_ = allRowsInRange[0].getAttribute("PaymntCurrIdBsTrans");
                Integer currIdBs = (currIdBs_ == null ? 0 : (Integer)currIdBs_);
                pymntRow.setAttribute("CurrIdBs", currIdBs);
                pymntRow.setAttribute("CurrIdSp", currIdSp);

                pymntRow.setAttribute("PayMode", payMod);

                Object paymntDt_ = allRowsInRange[0].getAttribute("PaymntDtTrans");
                Timestamp paymntDt = (paymntDt_ == null ? new Timestamp() : (Timestamp)paymntDt_);
                pymntRow.setAttribute("PayTypeDt", paymntDt);

                Object paymntTypNo_ = allRowsInRange[0].getAttribute("PaymntTypNoTrans");
                StringBuffer paymntTypNo =
                    (paymntTypNo_ == null ? new StringBuffer("") : new StringBuffer(paymntTypNo_.toString()));
                pymntRow.setAttribute("PayTypeNo", paymntTypNo);

                Object remrks_ = allRowsInRange[0].getAttribute("PaymntRemarksTrans");
                StringBuffer remrks = (remrks_ == null ? new StringBuffer("") : new StringBuffer(remrks_.toString()));
                pymntRow.setAttribute("Remarks", remrks);

                pymntRow.setAttribute("TotAmtSp", amt);

                String amt_dgt = resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString();
                amt = amt.multiply(currConv);
                Integer amt_no = 0;
                if (amt_dgt != null)
                    amt_no = Integer.parseInt(amt_dgt);

                //Number retVal = StaticValue.NUMBER_ZERO;
                try {
                    amt = (Number)amt.round(amt_no);
                } catch (Exception e) {
                }
                pymntRow.setAttribute("TotAmtBs", amt);
                _log.info("TotAmtSp  : " + amt + "TotAmtBs : " + amt);

                impl.executeQuery();
                o1.executeQuery();
            }
        }
    }

    /**
     * To check if the payment amount is valid.
     * @param amt
     * @return
     */
    public boolean isPaymntAmtValid(Number amt) {
        String amt_dgt = resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString();
        Integer amt_no = 0;
        if (amt_dgt != null) {
            amt_no = Integer.parseInt(amt_dgt);
        }
        Boolean c = false;
        if (amt != null) {
            Number soBsAmt = StaticValue.NUMBER_ZERO;
            ViewObjectImpl so = this.getSlsSo1();
            Row currentRow = so.getCurrentRow();
            if (currentRow != null) {
                soBsAmt = (Number)currentRow.getAttribute("TotAmtBs");
                soBsAmt = (Number)soBsAmt.round(amt_no);
            }

            Number pmntTotAmtBs = StaticValue.NUMBER_ZERO;
            ViewObjectImpl impl = this.getSlsSoPaymntVO1();
            RowSetIterator itr = impl.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                pmntTotAmtBs = pmntTotAmtBs.add((Number)next.getAttribute("TotAmtBs"));
            }
            itr.closeRowSetIterator();
            Number currConv = new Number(1);
            ViewObjectImpl o1 = this.getTempPaymntVO1();
            Row row = o1.getCurrentRow();
            if (row != null) {
                if (row.getAttribute("PaymntCurrConvTrans") != null) {
                    currConv = (Number)row.getAttribute("PaymntCurrConvTrans");
                }
            }

            pmntTotAmtBs = pmntTotAmtBs.add((Number)amt.multiply(currConv));
            pmntTotAmtBs = (Number)pmntTotAmtBs.round(amt_no);

            Number diff = (Number)pmntTotAmtBs.minus(soBsAmt);

            // if (pmntTotAmtBs.compareTo(soBsAmt) == 1) {
            if (diff.intValue() >= 1) {
                c = false;
            } else {
                c = true;
            }
            _log.info("Amt passed is :" + amt + " SoAmtBs : " + soBsAmt + " TotalPaymentAmount : " + pmntTotAmtBs +
                      " ConvFctr : " + currConv);
        }
        return c;
    }

    /**
     * @param CurrId
     */
    public void fetchandSetRemainingPaymntAmt(Integer CurrId) {
        Number currConv = StaticValue.NUMBER_ZERO;
        ViewObjectImpl impl = this.getTempPaymntVO1();
        TempPaymntVORowImpl row = (TempPaymntVORowImpl)impl.getCurrentRow();
        RowSet currId1 = row.getLovCurrId1();
        Row[] filteredRows = currId1.getFilteredRows("CcCurrIdTxn", CurrId);
        if (filteredRows.length > 0) {
            if (filteredRows[0].getAttribute("CcSell") != null) {
                currConv = (Number)filteredRows[0].getAttribute("CcSell");
            }
        }
        _log.info("CurrConv is : " + currConv + " for currId : " + CurrId);


        //Number n = StaticValue.NUMBER_ZERO;
        Number soBsAmt = StaticValue.NUMBER_ZERO;
        ViewObjectImpl so = this.getSlsSo1();
        Row currentRow = so.getCurrentRow();
        row.setPaymntAmtTrans(StaticValue.NUMBER_ZERO);

        if (currentRow != null) {
            soBsAmt = (Number)currentRow.getAttribute("TotAmtBs");
        }

        Number paidAmt = StaticValue.NUMBER_ZERO;
        ViewObjectImpl o1 = this.getSlsSoPaymntVO1();
        RowSetIterator itr = o1.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            if (r.getAttribute("TotAmtBs") != null) {
                paidAmt = paidAmt.add((Number)r.getAttribute("TotAmtBs"));
            }

        }
        itr.closeRowSetIterator();
        _log.info("TotalSoAmtBS : " + soBsAmt + " PaidAmt  : " + paidAmt);
        Number remain = StaticValue.NUMBER_ZERO;
        if (soBsAmt.compareTo(paidAmt) == 1) {
            remain = soBsAmt.subtract(paidAmt);
            remain = remain.divide(currConv);
            String amt_dgt = resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString();
            Integer amt_no = 0;
            if (amt_dgt != null)
                amt_no = Integer.parseInt(amt_dgt);
            //Number retVal = StaticValue.NUMBER_ZERO;
            try {
                remain = (Number)remain.round(amt_no);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        row.setPaymntAmtTrans(remain);
        _log.info("Remaining : " + remain);
    }

    public void delPaymntDtl() {
        ViewObjectImpl impl = this.getSlsSoPaymntVO1();
        Row currentRow = impl.getCurrentRow();
        if (currentRow != null) {
            currentRow.remove();
        }
    }

    /**
     * Check for EoType,
     * Name of the method is wrongly defined.
     * @return
     */
    public Boolean checkIfCoaExistsForSelectedEo() {
        Boolean b = false;
        if (this.getSlsSoItm1().getEstimatedRowCount() == 0) {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            Row soRow = this.getSlsSo1().getCurrentRow();
            StringBuffer EoNm = new StringBuffer("");
            if (soRow != null) {
                if (soRow.getAttribute("EoNmTrans") != null) {
                    EoNm = new StringBuffer(soRow.getAttribute("EoNmTrans").toString());
                }
            }
            ViewObjectImpl eoNmVO1 = this.getLovEoTypeFromEoNmVO1();
            eoNmVO1.setNamedWhereClauseParam("CldIdBind", p_cldId);
            eoNmVO1.setNamedWhereClauseParam("OrgIdBind", p_org_id);
            eoNmVO1.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            eoNmVO1.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
            eoNmVO1.setNamedWhereClauseParam("EoNameBind", EoNm.toString());
            eoNmVO1.executeQuery();

            Row[] allRowsInRange = eoNmVO1.getAllRowsInRange();
            for (Row r : allRowsInRange) {
                //_log.info("COA ID IS : "+r.getAttribute("CoaId"));
                Object attribute = r.getAttribute("EoType");
                if (attribute != null) {
                    if (((Integer)attribute).equals(68)) {
                        b = true;
                    } else {
                        b = false;
                    }

                } else {
                    b = false;
                }
                break;
            }
        } else {
            b = true;
        }
        //_log.info("B: "+b);
        return b;
    }

    /**
     * @return
     */
    public StringBuffer checkRefOrgApplied() {
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String refOrg =
                (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                            p_sloc_id,
                                                                                                            p_org_id,
                                                                                                            "USE_DOC_ORIGIN" });

            if (refOrg == null || refOrg.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(refOrg.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    public void getAndSetDiscountForItmFromPolicy() {
        if (checkforProfileValues(new StringBuffer("USE_DISC_PLC")).toString().equals("Y")) {
            try {
                Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
                String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                Row curRow = this.getSlsSo1().getCurrentRow();
                Row itmRow = this.getSlsSoItm1().getCurrentRow();
                if (itmRow != null && itmRow.getAttribute("ItmId") != null) {
                    //StringBuffer ck = new StringBuffer("");
                    // Called to refresh grpId value before calculating
                    //Object TransItmPickOrder = itmRow.getAttribute("TransItmPickOrder");

                    Object itmIdO = itmRow.getAttribute("ItmId");
                    Object eoCatgO = curRow.getAttribute("EoCatgTrans");
                    Object itmGrpO = itmRow.getAttribute("ItmGrpIdTrans");
                    Object salesExecO = curRow.getAttribute("AssignedTo");
                    Object itmQtyO = itmRow.getAttribute("ItmQty");
                    Object itmRateO = itmRow.getAttribute("ItmRate");

                    Number itmRate = (itmRateO == null ? StaticValue.NUMBER_ZERO : (Number)itmRateO);
                    if (itmRate.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                        _log.info("Fetching ItemProce");
                        // itmRate =  getLatestItmPriceSobyItmId(itmIdO.toString());
                    }

                    StringBuilder itmId =
                        (itmIdO == null ? new StringBuilder("") : new StringBuilder(itmIdO.toString()));
                    Integer eoId = (curRow.getAttribute("EoId") == null ? -1 : (Integer)curRow.getAttribute("EoId"));
                    Integer eoCatg = (eoCatgO == null ? null : (Integer)eoCatgO);
                    StringBuilder itmGrp =
                        (itmGrpO == null ? new StringBuilder("") : new StringBuilder(itmGrpO.toString()));
                    Integer salesExec = (salesExecO == null ? null : (Integer)salesExecO);
                    Number itmQty = (itmQtyO == null ? StaticValue.NUMBER_ZERO : (Number)itmQtyO);
                    _log.info("ItmId : " + itmId);
                    _log.info("EoId : " + eoId);
                    _log.info("EoCatg : " + eoCatg);
                    _log.info("SalesExec : " + salesExec + " " + itmRateO);
                    _log.info("ItmQty : " + itmQty);
                    _log.info("ItmRate : " + itmRate);

                    //_log.info("ItmId : "+itmId);


                    /* fn_sls_get_disc_plc_val(
                        p_sloc      NUMBER,
                        p_cld       VARCHAR2,
                        p_ho_org_id VARCHAR2,
                        p_org       VARCHAR2,
                        p_itm       VARCHAR2 ,
                        p_eo        VARCHAR2 ,
                        p_catg      NUMBER ,
                        p_grp       VARCHAR2 ,
                        p_sls_exec  NUMBER ,
                        p_lbl_id    VARCHAR2 ,
                        p_itm_qty   NUMBER,
                        p_itm_price NUMBER ) */


                    BigDecimal val =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "fn_sls_get_disc_plc_val(?,?,?,?,?,?,?,?,?,?,?,?)",
                                                       new Object[] { p_sloc_id, p_cldId, p_hoOrgId, p_org_id,
                                                                      itmId.toString(), eoId, eoCatg,
                                                                      itmGrp.toString(), salesExec, null, itmQty,
                                                                      itmRate });
                    _log.info("Return _____ " + val);
                    Number amt = StaticValue.NUMBER_ZERO;
                    if (val == null) {
                        amt = StaticValue.NUMBER_ZERO;
                    } else {
                        amt = new Number(val);
                    }

                    itmRow.setAttribute("ItmDiscTyp", "A");
                    itmRow.setAttribute("ItmDiscVal", amt);
                    _log.info("AmtType : A AmtVal : " + amt);

                }


            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            //  _log.info("Policy Applied : "+ck);
        }
    }

    /**
     * @return
     */
    public Boolean isAdvancePaymentConditionTrue() {

        Boolean b = true;
        StringBuffer soAdvUsed = checkforProfileValues(new StringBuffer("CHECK_SO_ADV"));
        _log.info("Use so Advance : " + soAdvUsed);

        ViewObjectImpl soVo = this.getSlsSo1();
        Row currentRow = soVo.getCurrentRow();
        Object ordrTypO = currentRow.getAttribute("OrderType");
        Integer ordrTyp = (ordrTypO == null ? null : (Integer)ordrTypO);
        _log.info("Order Type : " + ordrTyp);
        if (ordrTyp.equals(481) || ordrTyp.equals(311)) {

        } else if ("Y".equals(soAdvUsed.toString())) {
            Number currPaymntAmt = StaticValue.NUMBER_ZERO;
            ViewObjectImpl pymntVo = this.getSlsSoPaymntVO1();
            int i = pymntVo.getRangeSize();
            pymntVo.setRangeSize(-1);
            Row[] allRowsInRange = pymntVo.getAllRowsInRange();
            for (Row row : allRowsInRange) {
                currPaymntAmt = currPaymntAmt.add((Number)row.getAttribute("TotAmtBs"));
            }
            pymntVo.setRangeSize(i);

            //ViewObjectImpl soVo = this.getSlsSo1();
            Row currentSoRow = soVo.getCurrentRow();
            Number soAmt =
                (currentSoRow.getAttribute("TotAmtBs") == null ? StaticValue.NUMBER_ZERO : (Number)currentSoRow.getAttribute("TotAmtBs"));
            StringBuffer amtTyp = checkforProfileValues(new StringBuffer("SO_ADV_TYPE"));
            Object amt = checkforProfileValuesObjectReturn(new StringBuffer("SO_ADV_VAL"));
            _log.info("So Advance Type : " + amtTyp);
            _log.info("So Advance Value : " + amt);
            Number adVal = StaticValue.NUMBER_ZERO;
            try {
                adVal = (amt == null ? StaticValue.NUMBER_ZERO : new Number(amt));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            Number reqPaymntAmt = StaticValue.NUMBER_ZERO;
            if ("P".equals(amtTyp.toString())) {
                reqPaymntAmt = soAmt.multiply(adVal).divide(new Number(100));
            } else if ("A".equals(amtTyp.toString())) {
                reqPaymntAmt = adVal;
            }
            _log.info("Advance needed : " + reqPaymntAmt + " Actual advance : " + currPaymntAmt + " Condition : " +
                      currPaymntAmt.compareTo(reqPaymntAmt));
            if (currPaymntAmt.compareTo(reqPaymntAmt) >= 0) {
                b = true;
            } else {
                b = false;
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><b><p style='color:red'>" + "Advance Payment condition is not met !" +
                                      "</p></b>");
                saveMsg.append("<ul>");
                saveMsg.append("<li>Minimum Advance needed to Save this Sales Order is : <span style='font-weight:bold;'>" +
                               reqPaymntAmt + "</span></li>");
                saveMsg.append("</ul>");
                saveMsg.append("<b>Please book the minimum payment amount to save the current sales order.");
                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext.getCurrentInstance().addMessage(null, msg);

            }
        }
        return b;
    }

    /**
     * @param colName
     * @return
     */
    public Object checkforProfileValuesObjectReturn(StringBuffer colName) {
        colName = (colName == null ? new StringBuffer("") : colName);
        Object obj = null;
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            obj =
 callStoredFunction(Types.NUMERIC, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId, p_sloc_id, p_org_id,
                                                                                     colName.toString() });


        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //_log.info(colName+" : "+ck);
        return obj;
    }

    /**
     * @param colName
     * @return
     */
    public Object checkforProfileValuesObjectReturnV(StringBuffer colName) {
        colName = (colName == null ? new StringBuffer("") : colName);
        Object obj = null;
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            obj =
 callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId, p_sloc_id, p_org_id,
                                                                                     colName.toString() });


        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        // _log.info(colName+" : "+ck);
        return obj;
    }


    /**
     * @param policyId
     * @return
     */
    public Boolean insertPolicyEntry(StringBuffer policyId) {
        Boolean b = true;
        Object obj = null;
        ViewObjectImpl impl = this.getSlsSo1();
        Row soRow = impl.getCurrentRow();
        Object eoid = soRow.getAttribute("EoId");
        Integer eoId = (eoid == null ? -1 : (Integer)soRow.getAttribute("EoId"));
        System.out.println("Came here : 1");
        if (eoId != -1 && policyId != null) {
            try {
                Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                //String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
                String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                /* P_CLDID VARCHAR2,
                                                                P_SLOCID NUMBER,
                                                                P_HO_ORGID VARCHAR2,
                                                                P_EOID NUMBER,
                                                                P_PLCID VARCHAR2,
                                                                P_USRID NUMBER */

                obj =
 callStoredFunction(Types.NUMERIC, "APP.FN_INS_EO_PRICE_PLC(?,?,?,?,?,?)", new Object[] { p_cldId, p_sloc_id,
                                                                                          p_hoOrgId, eoId,
                                                                                          policyId.toString(),
                                                                                          p_user_id });
                System.out.println("Retudn : " + obj);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            BigDecimal r = (obj == null ? new BigDecimal(-1) : (BigDecimal)obj);
            if (r.compareTo(new BigDecimal(-1)) == 0) {
                b = false;
                soRow.setAttribute("EoPricePlc", null);
            }
        }
        return b;
    }

    /**
     * @param ItmId
     * @return
     */
    public Number getLatestItmPriceSobyItmId(String ItmId) {

        _log.info("Inside AM method Rate------");
        ViewObject slsSo = this.getSlsSo1();

        // ViewObjectImpl lovItmId = this.getLovItmId1();
        Number itmPrice = StaticValue.NUMBER_ZERO;
        Row curRow = slsSo.getCurrentRow();


        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String itemId = ItmId;

        Number conv = new Number(1);
        _log.info("Before function call Customer is-->" + curRow.getAttribute("EoId") + "and Item is-->" + itemId);
        if (curRow.getAttribute("EoId") != null && itemId != null) {

            Integer eoId = Integer.parseInt(curRow.getAttribute("EoId").toString());
            Integer currId = Integer.parseInt(curRow.getAttribute("CurrIdSp").toString());
            conv = (Number)curRow.getAttribute("CurrConvFctr");
            Timestamp p_doc_dt = (Timestamp)curRow.getAttribute("DocDt");
            _log.info("Customer is-->" + eoId + "and Item is-->" + itemId);

            if (checkPolicyApplied().toString().equals("Y")) {
                //  _log.info("Price from Price Policy.");
                BigDecimal price = new BigDecimal(0);
                BigDecimal policyPrice =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)",
                                                   new Object[] { p_cldId, p_sloc_id, p_hoOrgId, p_org_id, eoId,
                                                                  itemId, "SO" });
                // _log.info("Policy Price is : " + policyPrice);
                policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                if (policyPrice.compareTo(new BigDecimal(-2)) == 0) {
                    price =
(BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                               new Object[] { p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId, itemId, p_doc_dt,
                                              p_user_id, new Timestamp(System.currentTimeMillis()), currId, conv });
                    _log.info("Value from Function Rate--" + price);
                    try {
                        itmPrice = new Number(new Number(price).round(getAmtDgt()));
                    } catch (SQLException e) {
                    }

                } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                    itmPrice = new Number(-3);
                } else {
                    price = policyPrice;
                    try {
                        itmPrice = new Number(new Number(price));
                        itmPrice = itmPrice.divide(conv);
                        itmPrice = (Number)itmPrice.round(getAmtDgt());
                    } catch (SQLException e) {
                    }
                }

            } else {
                _log.info("Price from EO Price.");
                BigDecimal price =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                   new Object[] { p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId,
                                                                  itemId, p_doc_dt, p_user_id,
                                                                  new Timestamp(System.currentTimeMillis()), currId,
                                                                  conv });
                _log.info("Value from Function Rate--" + price);
                try {
                    itmPrice = new Number(new Number(price).round(getAmtDgt()));
                } catch (SQLException e) {
                }
            }


        }
        if (itmPrice.compareTo(-1) == 0) {
            itmPrice = StaticValue.NUMBER_ZERO;
        }
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        if (currentRow != null && itmPrice.compareTo(StaticValue.NUMBER_ZERO) >= 0) {
            currentRow.setAttribute("ItmRate", itmPrice);
        }
        _log.info("Latest Price for item is-->" + itmPrice);

        return itmPrice;
    }

    /**
     * @param itmId
     * @return
     */
    public String ValidateItmId(String itmId) {
        StringBuffer b = new StringBuffer("N");
        ViewObjectImpl impl = this.getSlsSoItm1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != impl.getCurrentRow() && next.getAttribute("ItmId").toString().equalsIgnoreCase(itmId)) {
                b = new StringBuffer("Y");
                break;
            }
        }
        itr.closeRowSetIterator();
        return b.toString();
    }

    /**
     * Container's getter for AppWfAttch1.
     * @return AppWfAttch1
     */
    public ViewObjectImpl getAppWfAttch1() {
        return (ViewObjectImpl)findViewObject("AppWfAttch1");
    }

    /**
     * Container's getter for SlsSoToAppWfAttchVl1.
     * @return SlsSoToAppWfAttchVl1
     */
    public ViewLinkImpl getSlsSoToAppWfAttchVl1() {
        return (ViewLinkImpl)findViewLink("SlsSoToAppWfAttchVl1");
    }

    public void setValueInRemarkVo() {
        System.out.println("Remark -----1");
        ViewObjectImpl impl = this.getSlsSo1();
        System.out.println("Remark -----2");
        //  Row soRow = impl.getCurrentRow();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        System.out.println("Remark -----3");
        if (allRowsInRange.length > 0) {
            System.out.println("Remark -----4");
            Row soRow = allRowsInRange[0];
            System.out.println("Row is: " + soRow);
            SlsSoVORowImpl row = (SlsSoVORowImpl)soRow;
            ViewObjectImpl rmkVo = this.getWfRmk1();
            rmkVo.setNamedWhereClauseParam("CLD_ID", row.getCldId());
            rmkVo.setNamedWhereClauseParam("SLOC_ID", row.getSlocId());
            rmkVo.setNamedWhereClauseParam("ORG_ID", row.getOrgId());
            rmkVo.setNamedWhereClauseParam("TXN_DOC_ID", row.getDocId());
            rmkVo.executeQuery();
            System.out.println("Remark executed...");
            System.out.println("Apra are: ");
            System.out.println(row.getCldId());
            System.out.println(row.getSlocId());
            System.out.println(row.getOrgId());
            System.out.println(row.getDocId());

            ViewObjectImpl lovTnc1 = this.getLovTnc1();
            lovTnc1.setNamedWhereClauseParam("Cld_id_Bind", row.getCldId());
            lovTnc1.setNamedWhereClauseParam("Org_Id_Bind", row.getOrgId());
            lovTnc1.setNamedWhereClauseParam("Sloc_Id_Bind", row.getSlocId());
            lovTnc1.executeQuery();
            System.out.println("all rows in tnc is:  " + lovTnc1.getRowCount());
        }
        System.out.println("Remark ------5");


    }

    /**
     * Container's getter for WfRmk1.
     * @return WfRmk1
     */
    public ViewObjectImpl getWfRmk1() {
        return (ViewObjectImpl)findViewObject("WfRmk1");
    }

    /**
     * Method to check if the workflow and user is valid or not.
     * @return
     */
    public Boolean isWorkFlowAndUserValid() {
        Boolean b = true;
        Integer sloc_Id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String org_Id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cld_Id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //Integer usr_Id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String no = getWfNo(sloc_Id, cld_Id, org_Id, 21503);
        StringBuffer attachedWithTheDoc = (no == null ? null : new StringBuffer(no));
        if (attachedWithTheDoc == null) {
            FacesMessage message =
                new FacesMessage("WorkFlow is not Defined for this Document! Please define a WorkFlow !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            b = false;
        } else {
            //Integer usrLvl = getUsrLvl(sloc_Id, cld_Id, org_Id, usr_Id, attachedWithTheDoc.toString(), "21503");
            /*  if (usrLvl.equals(0)) {
                FacesMessage message =
                    new FacesMessage("Current User is not Assigned any level in the WorkfLow of this document. Please add user to Workflow !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                b = false;
            } */
        }
        return b;
    }

    public void executeDlvVws() {
        this.getDlvShdlView1().executeQuery();
        this.getRateContractVw1().executeQuery();
    }

    /**
     * Container's getter for LovAddsFrmAddsId1.
     * @return LovAddsFrmAddsId1
     */
    public ViewObjectImpl getLovAddsFrmAddsId1() {
        return (ViewObjectImpl)findViewObject("LovAddsFrmAddsId1");
    }

    /**
     * @return
     */
    public Boolean areEntriesValidForTaxApplication() {
        Boolean b = true;
        ViewObjectImpl itmVo = this.getSlsSoItm1();
        RowSetIterator itmItr = itmVo.createRowSetIterator(null);
        while (itmItr.hasNext()) {
            if (itmItr.next().getAttribute("ItmId") == null) {
                b = false;
                break;
            }
        }
        return b;
    }

    /**
     * Container's getter for SlsSoItmLotVO.
     * @return SlsSoItmLotVO
     */
    public ViewObjectImpl getSlsSoItmLotVO() {
        return (ViewObjectImpl)findViewObject("SlsSoItmLotVO");
    }

    /**
     * Container's getter for SoToLovVL1.
     * @return SoToLovVL1
     */
    public ViewLinkImpl getSoToLovVL1() {
        return (ViewLinkImpl)findViewLink("SoToLovVL1");
    }

    /**
     * @return
     */
    public Boolean areValidationsOfSalesOrderValid() {
        Boolean b = true;
        SlsSoVORowImpl soRow = (SlsSoVORowImpl)this.getSlsSo1().getCurrentRow();
        Integer ordrTyp = (soRow.getOrderType() == null ? -1 : soRow.getOrderType());
        Integer eoId = (soRow.getEoId() == null ? -1 : soRow.getEoId());
        Integer currIdSp = (soRow.getCurrIdSp() == null ? -1 : soRow.getCurrIdSp());
        //Number convFctr = (soRow.getCurrConvFctr() == null ? new Number(-1) : soRow.getCurrConvFctr());
        String shipAdds = (getShipadds() == null ? "" : getShipadds());
        String eoPricePlc = (soRow.getEoPricePlc() == null ? "" : soRow.getEoPricePlc());

        if (ordrTyp == -1) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + "Sales Order Type is Mandatory for Sales Order !" +
                                  "</p></b>");
            saveMsg.append("<b>Please select Sales Order Type.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (eoId.equals(-1)) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + "Customer selection is Mandatory for Sales Order !" +
                                  "</p></b>");
            saveMsg.append("<b>Please select Customer for Sales Order.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (currIdSp.equals(-1)) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + "Customer Currency is Mandatory for Sales Order !" +
                                  "</p></b>");
            saveMsg.append("<b>Please select Currency for Sales Order.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (shipAdds.equals("")) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + "Shipment Address is Mandatory for Sales Order !" +
                                  "</p></b>");
            saveMsg.append("<b>Please select Shipment Address for Sales Order.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("Y".equals(checkPolicyApplied().toString()) && "".equals(eoPricePlc)) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + "Price Policy is Mandatory for Sales Order !" +
                                  "</p></b>");
            saveMsg.append("<b>Your Organisation uses Customer Price Policy. Please select Customer Price Policy for selected Customer.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        return b;
    }

    /**
     * Container's getter for LovOrderTyp1.
     * @return LovOrderTyp1
     */
    public ViewObjectImpl getLovOrderTyp1() {
        return (ViewObjectImpl)findViewObject("LovOrderTyp1");
    }


    /**
     * @return
     */
    public Boolean isItemsForSuggestedOrderSelected() {
        Boolean b = false;
        RowSetIterator cItr = this.getMmSoItmPo1().createRowSetIterator(null);
        while (cItr.hasNext()) {
            Row next = cItr.next();
            Object chckedO = next.getAttribute("CheckItemTrans");
            System.out.println("Checked : " + chckedO);
            StringBuilder g = (chckedO == null ? new StringBuilder("") : new StringBuilder(chckedO.toString()));
            if (g.toString().equals("Y")) {
                b = true;
                break;
            }
        }

        Boolean c = true;
        ViewObject dlvView = this.getMmSoItmPo1();
        RowSetIterator rit = dlvView.createRowSetIterator(null);
        /** Iterate through every visible row of view */
        while (rit.hasNext()) {
            Row row = rit.next();
            Integer id = (row.getAttribute("EoId") == null ? 0 : (Integer)row.getAttribute("EoId"));
            StringBuilder r =
                (row.getAttribute("CheckItemTrans") == null ? new StringBuilder("N") : new StringBuilder(row.getAttribute("CheckItemTrans").toString()));
            if (r.equals("Y")) {
                if (id == 0) {
                    c = false;
                    break;
                }
            }
        }
        rit.closeRowSetIterator();


        if (b == false) {
            FacesMessage message2 = new FacesMessage("Please select an Item before Grouping Items !");
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
        }
        if (c == false) {
            FacesMessage message2 =
                new FacesMessage("Supplier for one or more Items is not selected. Please select a Supplier for selected Item !");
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
        }

        Boolean e = ((b && c) == false ? false : true);
        System.out.println("Returned : " + e);

        return e;
    }

    public void setDefltTaxType() {
        StringBuffer defTyp = checkforProfileValues(new StringBuffer("DEF_TAX_TYPE"));
        if (!defTyp.toString().equals("")) {

        }
    }

    /**
     * @return
     */
    public Boolean isFinancialYearValid() {
        Boolean b = true;
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        Integer fYidOrg = getFYId(p_cldId, p_org_id);
        if (fYidOrg.equals(-1)) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + "Financial Year is not Open for this Organisation on Current Date!" +
                                  "</p></b>");
            saveMsg.append("<b>Please Open Financial Year for Current Date before creating any document !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
            b = false;
        }
        return b;
    }

    /**
     * @param CldId
     * @param OrgId
     * @return
     */
    public Integer getFYId(String CldId, String OrgId) {
        //ViewObjectImpl slsSo = this.getSlsSo1();
        Integer fyId = 0;
        _log.info("DocDate --" + new Timestamp(System.currentTimeMillis()));

        fyId =
(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] { CldId, OrgId, new Timestamp(System.currentTimeMillis()) }));

        _log.info("Fyid is--" + fyId);
        return fyId;
    }


    /**
     * @return
     */
    public Boolean exportToExcel() {
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("Sheet1");
        HSSFCellStyle cellStyle = workbook.createCellStyle();

        HSSFFont font = workbook.createFont();
        font.setFontName(HSSFFont.FONT_ARIAL);
        font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
        cellStyle.setFont(font);


        HSSFRow createRow = sheet.createRow(0);
        for (int i = 0; i <= 5; i++) {
            Cell cell = createRow.createCell(i);
            // sheet.autoSizeColumn(i);
            // sheet.setColumnWidth(100+i,100);
            switch (i) {
            case 0:
                cell.setCellValue("ITM_ID");
                cell.setCellStyle(cellStyle);
                break;
            case 1:
                cell.setCellValue("ITM_UOM");
                cell.setCellStyle(cellStyle);
                break;
            case 2:
                cell.setCellValue("ITEM_PRICE");
                cell.setCellStyle(cellStyle);
                break;
            case 3:
                cell.setCellValue("QUANTITY");
                cell.setCellStyle(cellStyle);
                break;
            case 4:
                cell.setCellValue("DISCOUNT_TYPE");
                cell.setCellStyle(cellStyle);
                break;
            case 5:
                cell.setCellValue("DISCOUNT");
                cell.setCellStyle(cellStyle);
                break;
            }
        }
        ViewObjectImpl soItm = this.getSlsSoItm1();
        RowSetIterator itr = soItm.createRowSetIterator(null);
        int rownum = 1;
        while (itr.hasNext()) {
            Row next = itr.next();
            HSSFRow row = sheet.createRow(rownum++);
            Object ItmIdO = next.getAttribute("ItmId");
            Object ItmRateO = next.getAttribute("ItmRate");
            Object ItmUomO = next.getAttribute("ItmUom");
            Object ItmQtyO = next.getAttribute("ItmQty");
            Object ItmDiscTypO = next.getAttribute("ItmDiscTyp");
            Object ItmDiscValO = next.getAttribute("ItmDiscVal");


            StringBuilder ItmId = (ItmIdO == null ? new StringBuilder("") : new StringBuilder(ItmIdO.toString()));
            StringBuilder ItmRate =
                (ItmRateO == null ? new StringBuilder("0") : new StringBuilder(ItmRateO.toString()));
            StringBuilder ItmUom = (ItmUomO == null ? new StringBuilder("") : new StringBuilder(ItmUomO.toString()));
            StringBuilder ItmQty = (ItmQtyO == null ? new StringBuilder("0") : new StringBuilder(ItmQtyO.toString()));
            StringBuilder ItmDiscTyp =
                (ItmDiscTypO == null ? new StringBuilder("N") : new StringBuilder(ItmDiscTypO.toString()));
            StringBuilder ItmDiscVal =
                (ItmDiscValO == null ? new StringBuilder("0") : new StringBuilder(ItmDiscValO.toString()));

            Cell cell0 = row.createCell(0);
            Cell cell1 = row.createCell(1);
            Cell cell2 = row.createCell(2);
            Cell cell3 = row.createCell(3);
            Cell cell4 = row.createCell(4);
            Cell cell5 = row.createCell(5);
            cell0.setCellValue(ItmId.toString());
            cell1.setCellValue(ItmRate.toString());
            cell2.setCellValue(ItmUom.toString());
            cell3.setCellValue(ItmQty.toString());
            cell4.setCellValue(ItmDiscTyp.toString());
            cell5.setCellValue(ItmDiscVal.toString());
            System.out.println("Row added ___________________");

        }


        //String path = "/home/amaan/AmanJunaidDocs/data.xls";
        //InputStream in;
        File file = new File("sample.xls");

        FileOutputStream out = null;
        try {
            out = new FileOutputStream(file);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        try {
            workbook.write(out);
            out.flush();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    /**
     * @return
     */
    public Row[] getItemRows() {
        ViewObjectImpl soItm = this.getSlsSoItm1();
        int i = soItm.getRangeSize();
        soItm.setRangeSize(i);
        Row[] allRowsInRange = soItm.getAllRowsInRange();
        return allRowsInRange;
    }

    /**
     * @return
     */
    public StringBuilder getExportLink() {
        StringBuilder link = new StringBuilder("");
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            Object docIdO = currentRow.getAttribute("DocId");
            Object slocIdO = currentRow.getAttribute("SlocId");
            Object cldIdO = currentRow.getAttribute("CldId");
            Object orgIdO = currentRow.getAttribute("OrgId");
            Object hoOrgIdO = currentRow.getAttribute("HoOrgId");
            if (docIdO != null) {
                link.append("/exportservlet?path=");
                link.append(" DOC_ID ='" + docIdO + "' AND ORG_ID ='" + orgIdO + "' AND SLOC_ID = " + slocIdO +
                            " AND CLD_ID = '" + cldIdO + "' AND  HO_ORG_ID = '" + hoOrgIdO + "'");
            } else {
                link = null;
            }
        }
        System.out.println("In am Impl : " + link);
        return link;
    }

    /**
     * Get Price * Qty value for the purpose of Discount amount validations.
     * @return
     */
    public Number getTotPriceQtyAmount() {
        Number n = StaticValue.NUMBER_ZERO;
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        Number itmRate =
            (currentRow.getAttribute("ItmRate") == null ? StaticValue.NUMBER_ZERO : (Number)currentRow.getAttribute("ItmRate"));
        Number itmqty =
            (currentRow.getAttribute("ItmQty") == null ? StaticValue.NUMBER_ZERO : (Number)currentRow.getAttribute("ItmQty"));
        n = itmRate.multiply(itmqty);
        return n;
    }

    /**
     * Method to get suggested Item in AutoSuggest.
     * @param itmStr
     * @return
     */
    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        String smpl = "N";
        if (currentRow != null) {
            Object sO = currentRow.getAttribute("AllowSampleItemTrans");
            smpl = (sO == null ? "N" : sO.toString());
        }
        ArrayList<String> h = new ArrayList<String>();
        ViewObjectImpl autoSuggestVO = this.getItmVoForAutoSuggestVO1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        autoSuggestVO.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        autoSuggestVO.setNamedWhereClauseParam("ItmNmBind", itmStr);
        autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }

    /**
     * Container's getter for ItmVoForAutoSuggestVO1.
     * @return ItmVoForAutoSuggestVO1
     */
    public ViewObjectImpl getItmVoForAutoSuggestVO1() {
        return (ViewObjectImpl)findViewObject("ItmVoForAutoSuggestVO1");
    }
}

