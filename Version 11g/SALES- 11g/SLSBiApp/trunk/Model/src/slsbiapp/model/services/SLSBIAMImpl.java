package slsbiapp.model.services;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.model.DataControl;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.eclipse.persistence.sdo.helper.DataObjectInputStream;

import slsbiapp.model.services.common.SLSBIAM;
import slsbiapp.model.views.ShowListTempVORowImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 24 14:48:10 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SLSBIAMImpl extends ApplicationModuleImpl implements SLSBIAM {
    private static ADFLogger _log = ADFLogger.createADFLogger(SLSBIAMImpl.class);
    private StringBuffer whereClause = new StringBuffer("");

/********************************************************** Methods for getting global params start ********************************************************************/
    /**
     * This is the default constructor (do not remove).
     */
    public SLSBIAMImpl() {
    }
    
    /**
     * Method to Get SlocId
     * @return
     */
    public Integer getSlocId(){
       // _log.info("Sloc Id : "+Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}")));
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }
    
    /**
     * Method to Get OrgId
     * @return
     */
    public String getOrgId(){
        //_log.info("Sloc Id : "+resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }
    
    /**
     * Method to Get HoOrgId
     * @return
     */
    public String getHoOrgId(){
        // _log.info("HoOrg Id : "+resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }
    
    /**
     * Method to Get CldId
     * @return
     */
    public String getCldId(){
        //_log.info("Cld Id : "+resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }
    
    /**
     * Method to Get UsrId
     * @return
     */
    public Integer getUsrId(){
        //_log.info("Usr Id : "+resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        return Integer.valueOf(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }
/********************************************************** Methods for getting global params end ********************************************************************/
/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/    
/********************************************************** Methods for executing viewObjects start ********************************************************************/
   
    /**
     * To execute VO TopNCustomers
     * @param val
     */
    public void executeTopNCustomerVO(Integer val,StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        StringBuffer query = new StringBuffer("SELECT \n" + 
        "    EO_NM CUSTOMER,\n" + 
        "    INV_AMT AMOUNT,\n" + 
        "    EO_ID\n" + 
        "FROM (\n" + 
        "        SELECT \n" + 
        "            A.EO_NM, \n" + 
        "            SUM( ROUND(A.ITM_AMT,4)) INV_AMT ,\n" + 
        "            A.EO_ID\n" + 
        "        FROM\n" + 
        "            SLS.SLS$TOP$MIS_VW A\n" + 
        "        WHERE\n" + 
        "            A.CLD_ID = :CldIdBind\n" + 
        "            AND A.SLOC_ID = :SlocIdBind\n" + 
        "            AND A.HO_ORG_ID = :HoOrgIdBind\n" + 
        "            AND MIS_TYPE = :MisTypeBind\n" + clause +
        "        GROUP BY \n" + 
        "            A.EO_NM,A.EO_ID\n" + 
        "        ORDER BY \n" + 
        "            INV_AMT DESC\n" + 
        "       )\n" + 
        "WHERE ROWNUM<= :CountBind");
        _log.fine("Final Query is  : "+query);
        ViewObjectImpl customersVO = this.getTopNCustomersVO();
        customersVO.setQuery(query.toString());
        customersVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        customersVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        customersVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        customersVO.setNamedWhereClauseParam("CountBind", val);
        customersVO.executeQuery();
    }
    
    /**
     * To execute VO TopNProducts
     * @param val
     */
    public void executeTopNProductsVO(Integer val,StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT \n" + 
        "    ITM_DESC ITEM,\n" + 
        "    AMOUNT ,\n" + 
        "    ITM_ID\n" + 
        "  FROM (\n" + 
        "        SELECT   \n" + 
        "            A.ITM_DESC, \n" + 
        "            SUM (A.ITM_AMT)  AMOUNT,\n" + 
        "            A.ITM_ID\n" + 
        "        FROM \n" + 
        "            SLS.SLS$TOP$MIS_VW A\n" + 
        "        WHERE \n" + 
        "            A.CLD_ID = :CldIdBind\n" + 
        "            AND A.SLOC_ID = :SlocIdBind\n" + 
        "            AND A.HO_ORG_ID = :HoOrgIdBind\n" + 
        "            AND MIS_TYPE = :MisTypeBind\n" + clause +
        "        GROUP BY A.ITM_DESC , A.ITM_ID\n" + 
        "        ORDER BY AMOUNT DESC)\n" + 
        " WHERE ROWNUM <= :CountBind";
        _log.fine("No. of Products : "+val +"Query is :"+query);
        ViewObjectImpl productsVO = this.getTopNProductsVO();
        
        productsVO.setQuery(query);
        //this.createViewObjectFromQueryStmt("TopNProductsVO", query);
        productsVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        productsVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        productsVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        productsVO.setNamedWhereClauseParam("CountBind", val);
        productsVO.executeQuery();
    }
    
    /**
     * Method to Execute ProductAgeingVO
     * @param itmId
     * @param fromDate
     * @param toDate
     */
    public void executeProductAgeingVO(StringBuffer itmId, StringBuffer fromDate, StringBuffer toDate) {
        ViewObjectImpl ageingVO = this.getProductAgeingVO();
        if (itmId != null) {
            ageingVO.setNamedWhereClauseParam("ItmIdBind", itmId.toString());
        }else{
            ageingVO.setNamedWhereClauseParam("ItmIdBind", null);
        }
        if (fromDate != null) {
            ageingVO.setNamedWhereClauseParam("DocDtFrom", fromDate.toString());
        }else{
            ageingVO.setNamedWhereClauseParam("DocDtFrom", null);
        }
        if (toDate != null) {
            ageingVO.setNamedWhereClauseParam("DocDtTo", toDate.toString());
        }else{
            ageingVO.setNamedWhereClauseParam("DocDtTo", null);
        }
        ageingVO.setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
        ageingVO.executeQuery();
    }
    
    /**
     * Method to execute ProductGroupwiseVo on teh basis of params
     * @param val
     * @param clause
     */
    public void executeProductGroupwiseProfitVO(Integer val, StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        StringBuffer query = new StringBuffer("SELECT \n" + 
        "     A.GRP_ID,\n" + 
        "     A.GRP_NM GROUP_NAME,\n" + 
        "     SUM(A.INV_AMT) INV_AMT,\n" + 
        "     SUM(A.ITM_COST) ITM_COST,\n" + 
        "     SUM(A.ITM_PROFIT) ITM_PROFIT\n" + 
        "FROM\n" + 
        "    SLS$GRP$MNTH$SLS$PRFT_VW A\n" + 
        "WHERE\n" + 
        "    A.CLD_ID = :CldIdBind AND\n" + 
        "    A.SLOC_ID = :SlocIdBind AND\n" + 
        "    A.HO_ORG_ID = :HoOrgIdBind\n" + clause +
        "\n" + 
        "GROUP BY\n" + 
        "    GRP_NM,GRP_ID\n");
        ViewObjectImpl groupWiseProfitVO = this.getProductGroupWiseProfitVO();
        groupWiseProfitVO.setQuery(query.toString());
        groupWiseProfitVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        groupWiseProfitVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        groupWiseProfitVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        groupWiseProfitVO.executeQuery();
    }
    
    /**
     * Method to execute ItemRejectionTrendVO
     * @param clause
     */
    public void executeOrgRejectionTrendVO(StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
        StringBuffer query = new StringBuffer("SELECT\n" + 
        "    A.ORG_DESC,\n" + 
        "    SUM(A.INV_AMT) ITM_AMT,\n" + 
        "    SUM(A.REJ_AMT) REJ_AMT\n" + 
        "FROM\n" + 
        "    SLS$INV$REJ_VW A\n" + 
        "WHERE\n" + 
        "    A.CLD_ID = :CldIdBind \n" + 
        "    AND A.SLOC_ID = :SlocIdBind\n" + 
        "    AND A.HO_ORG_ID = :HoOrgIdBind\n" + clause +
        "GROUP BY\n" + 
        "    A.ORG_DESC");
        
        ViewObjectImpl rejVO = this.getOrgRejectionTrendVO();
        rejVO.setQuery(query.toString());
        rejVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        rejVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        rejVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        rejVO.executeQuery();
    
    }
    
    /**
     * Method to Execute TopNProductsGroupVO
     * @param val
     * @param clause
     */
    public void executeTopNProductGrpVO(Integer val, StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        StringBuffer query = new StringBuffer("SELECT \n" + 
        "    GRP_NM GRP_NM,\n" + 
        "    AMOUNT ,\n" + 
        "    GRP_ID\n" + 
        "FROM (\n" + 
        "        SELECT   \n" + 
        "            A.GRP_ID, \n" + 
        "            SUM (A.ITM_AMT)  AMOUNT,\n" + 
        "            A.GRP_NM\n" + 
        "        FROM \n" + 
        "            SLS.SLS$TOP$MIS_VW A\n" + 
        "        WHERE \n" + 
        "            A.CLD_ID = :CldIdBind\n" + 
        "            AND A.SLOC_ID = :SlocIdBind\n" + 
        "            AND A.HO_ORG_ID = :HoOrgIdBind\n" + 
        "            AND MIS_TYPE = :MisTypeBind\n" + clause + 
        "        GROUP BY \n" + 
        "            A.GRP_NM , A.GRP_ID\n" + 
        "        ORDER BY \n" + 
        "            AMOUNT DESC)\n" + 
        " WHERE ROWNUM <= :CountBind");
        
        _log.fine("Final Query is  : "+query);
        ViewObjectImpl prodGrpVO = this.getTopNProductGrpVO();
        prodGrpVO.setQuery(query.toString());
        prodGrpVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        prodGrpVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        prodGrpVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        prodGrpVO.setNamedWhereClauseParam("CountBind", val);
        prodGrpVO.executeQuery();
    }
    
    /**
     * Method to Execute TopNSalesOrderVO
     * @param val
     * @param clause
     */
    public void executeTopNSalesOrderVO(Integer val, StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        StringBuffer query = new StringBuffer("SELECT \n" + 
        "    SO_ID, \n" + 
        "    SO_DT, \n" + 
        "    SO_AMT \n" + 
        "FROM (\n" + 
        "        SELECT \n" + 
        "            A.SO_ID, \n" + 
        "            A.SO_DT, \n" + 
        "            A.SO_AMT\n" + 
        "        FROM\n" + 
        "            SLS$TOPN$SO_VW A\n" + 
        "        WHERE\n" + 
        "            A.CLD_ID = :CldIdBind\n" + 
        "            AND A.SLOC_ID = :SlocIdBind\n" + 
        "            AND A.HO_ORG_ID = :HoOrgIdBind\n" + clause +
        "        ORDER BY SO_AMT DESC)\n" + 
        "  WHERE ROWNUM <= :CountBind");
        
        _log.fine("Final Query is  : "+query);
         ViewObjectImpl salesOrdrVO = this.getTopNSalesOrdersVO();
        salesOrdrVO.setQuery(query.toString());
        salesOrdrVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        salesOrdrVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        salesOrdrVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        salesOrdrVO.setNamedWhereClauseParam("CountBind", val);
        salesOrdrVO.executeQuery(); 
    }
    
    /**
     * Method to execute OrganisationProfitAndAmtVO with parameters
     * @param orgId
     * @param clause
     */
    public void executeOrganisationProfitAndAmtVO(StringBuffer orgId, StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
                                                                      
        StringBuffer query = new StringBuffer("SELECT \n" + 
        "    A.SALES_MONTH_YEAR,\n" + 
        "    SUM(A.INV_AMT) INV_AMT,\n" + 
        "    SUM(A.ITM_COST) ITM_COST,\n" + 
        "    SUM(A.ITM_PROFIT) ITM_PROFIT,\n" + 
        "    A.SALES_YEAR,\n" + 
        "    A.SALES_MNTH\n" + 
        "FROM\n" + 
        "    SLS$ORG$MNTH$SLS$PRFT_VW A\n" + 
        "WHERE\n" + 
        "    A.CLD_ID = :CldIdBind\n" + 
        "    AND A.ORG_ID = NVL(:OrgIdBind,A.ORG_ID)\n" + 
        "    AND A.HO_ORG_ID = :HoOrgIdBind \n" + 
        "    AND A.SLOC_ID = :SlocIdBind\n" + 
        "GROUP BY\n" + 
        "    A.SALES_MONTH_YEAR,A.SALES_YEAR,A.SALES_MNTH\n" + 
        "ORDER BY\n" + 
        "    A.SALES_YEAR,A.SALES_MNTH");
        ViewObjectImpl amtVO = getOrganisationProfitAndAmtVO();
        amtVO.setQuery(query.toString());
        amtVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        amtVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        amtVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        if(orgId == null){
            amtVO.setNamedWhereClauseParam("OrgIdBind", null);    
        }else{
            amtVO.setNamedWhereClauseParam("OrgIdBind", orgId.toString());
        }
        
        amtVO.executeQuery();   
    }
    
    /**
     *  Method to execute vos related to OneOrg Before entering in OneOrganisationPage
     */
    public void executeAllVoBeforeEnteringOnOneOrgPage(){
        
        
    }
    
    /**
     * Method to execute Sales Execuive Vo on the basis of params
     * @param val
     * @param clause
     */
    public void executeBusinessExecutiveVO(Integer val, StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        StringBuffer query = new StringBuffer("SELECT \n" + 
        "  EO_NM SALES_EXECUTIVE,\n" + 
        "  INV_AMT AMOUNT,\n" + 
        "  EO_ID\n" + 
        "FROM (\n" + 
        "      SELECT \n" + 
        "          NVL(A.SALES_EXEC_NM,'Un Assigned') EO_NM, \n" + 
        "          SUM( ROUND(A.ITM_AMT,4)) INV_AMT ,\n" + 
        "          A.SALES_EXEC EO_ID\n" + 
        "      FROM \n" + 
        "          SLS.SLS$TOP$MIS_VW A\n" + 
        "      WHERE\n" + 
        "          A.CLD_ID = :CldIdBind\n" + 
        "          AND A.SLOC_ID = :SlocIdBind\n" + 
        "          AND A.HO_ORG_ID = :HoOrgIdBind\n" + 
        "          AND MIS_TYPE = :MisTypeBind\n" + clause +
        "      GROUP BY \n" + 
        "          A.SALES_EXEC,A.SALES_EXEC_NM\n" + 
        "      ORDER BY \n" + 
        "          INV_AMT DESC\n" + 
        "     )\n" + 
        "WHERE ROWNUM<= :CountBind");
        
        ViewObjectImpl executiveVO = this.getBusniessExecutiveVO();
        executiveVO.setQuery(query.toString());
        executiveVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        executiveVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        executiveVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        executiveVO.setNamedWhereClauseParam("CountBind", val); 
        executiveVO.executeQuery();
    }
    
    /**
     * Execute TopNOrgsVO
     * @param val
     */
    public void executeTopNOrgsVO(Integer val, StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
                                                                      
        StringBuffer query = new StringBuffer("SELECT ORG_DESC, INV_AMT, ORG_ID\n" + 
        "  FROM (SELECT   A.ORG_DESC, SUM (ROUND (ITM_AMT, 4)) INV_AMT,A.ORG_ID\n" + 
        "            FROM SLS.SLS$TOP$MIS_VW A\n" + 
        "           WHERE A.CLD_ID = :CldIdBind\n" + 
        "             AND A.SLOC_ID = :SlocIdBind\n" + 
        "             AND A.MIS_TYPE = :MisTypeBind\n" + clause +
        "        GROUP BY A.ORG_DESC,A.ORG_ID\n" + 
        "        ORDER BY INV_AMT DESC)\n" + 
        " WHERE ROWNUM <= 5");
        
        ViewObjectImpl orgVO = this.getTopNOrgsVO();
        orgVO.setQuery(query.toString());
        orgVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        orgVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        orgVO.executeQuery();
    }
    
    /**
     * Method to execute SalesOrder AmountVO
     * @param eoId
     * @param clause
     * eoId to be null if eoId is not needed to be speecified.
     */
    public void executeSalesOrderAmtVO(StringBuffer orgId,Integer eoId ,StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
        StringBuffer query = new StringBuffer("SELECT \n" + 
        "    A.ORDER_TYPE,\n" + 
        "    SUM(A.ORDER_AMT) ORDER_AMOUNT\n" + 
        "FROM\n" + 
        "    SLS$SO$TYPE$AMT_VW A\n" + 
        "WHERE\n" + 
        "    A.CLD_ID = :CldIdBind\n" + 
        "    AND A.ORG_ID = NVL(:OrgIdBind,A.ORG_ID)\n" + 
        "    AND A.HO_ORG_ID = :HoOrgIdBind\n" + 
        "    AND A.SLOC_ID = :SlocIdBind\n" + 
        "    AND A.EO_ID = NVL(:EoIdBind, A.EO_ID)\n" + clause +
        "GROUP BY \n" + 
        "    ORDER_TYPE");
        ViewObjectImpl amtVO = this.getSalesOrderAmtVO();
        amtVO.setQuery(query.toString());
        amtVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        amtVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        amtVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        if(orgId == null){
            amtVO.setNamedWhereClauseParam("OrgIdBind", null);    
        }else{
            amtVO.setNamedWhereClauseParam("OrgIdBind", orgId.toString());
        }
        if(eoId == null){
            amtVO.setNamedWhereClauseParam("EoIdBind", null);    
        }else{
            amtVO.setNamedWhereClauseParam("EoIdBind", eoId);
        }
        
        amtVO.executeQuery();
    }
    
    /**
     * Method to execute ItemRejectionTrendVO
     * @param clause
     */
    public void executeItmRejectionTrendVO(StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
        StringBuffer query = new StringBuffer("SELECT\n" + 
        "    A.ITM_DESC,\n" + 
        "    SUM(A.INV_AMT) ITM_AMT,\n" + 
        "    SUM(A.REJ_AMT) REJ_AMT\n" + 
        "FROM\n" + 
        "    SLS$INV$REJ_VW A\n" + 
        "WHERE\n" + 
        "    CLD_ID = :CldIdBind \n" + 
        "    AND SLOC_ID = :SlocIdBind\n" + 
        "    AND HO_ORG_ID = :HoOrgIdBind\n" + clause +
        "GROUP BY\n" + 
        "    ITM_DESC");
        
        ViewObjectImpl rejVO = this.getItmRejectionTrendVO();
        rejVO.setQuery(query.toString());
        rejVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        rejVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        rejVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        rejVO.executeQuery();
    }
    
    /**
     * Method to execute ItemRejectionTrendVO
     * @param clause
     */
    public void executeCustomerRejectionTrendVO(StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
        StringBuffer query = new StringBuffer("SELECT\n" + 
        "    A.EO_NM,\n" + 
        "    SUM(A.INV_AMT) ITM_AMT,\n" + 
        "    SUM(A.REJ_AMT) REJ_AMT\n" + 
        "FROM\n" + 
        "    SLS$INV$REJ_VW A\n" + 
        "WHERE\n" + 
        "    CLD_ID = :CldIdBind \n" + 
        "    AND SLOC_ID = :SlocIdBind\n" + 
        "    AND HO_ORG_ID = :HoOrgIdBind\n" + clause +
        "GROUP BY\n" + 
        "    EO_NM");
        
        ViewObjectImpl rejVO = this.getCustomerRejectionTrendVO();
        rejVO.setQuery(query.toString());
        rejVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        rejVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        rejVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        rejVO.executeQuery();
    
    }
    
    /**
     * Method to execute SalesAnalysisVO
     * @param clause
     */
    public void executeSalesOppAnalysisVO(StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
        StringBuffer query = new StringBuffer("SELECT\n" + 
        "    A.SNO,\n" + 
        "    A.OPP_TYP_DESC,\n" + 
        "    SUM(A.OPP_CNT) OPP_COUNT,\n" + 
        "    SUM(A.OPP_AMT) OPP_AMT\n" + 
        "FROM\n" + 
        "    SLS$OPP$ANA_VW A\n" + 
        "WHERE\n" + 
        "    A.CLD_ID = :CldIdBind \n" + 
        "    AND A.HO_ORG_ID = :HoOrgIdBind\n" + 
        "    AND A.SLOC_ID = :SlocIdBind\n" + clause +
        "GROUP BY\n" + 
        "    A.OPP_TYP_DESC ,A.SNO\n" + 
        "ORDER BY\n" + 
        "    A.SNO");
        
        ViewObjectImpl analysisVO = this.getOppAnalysisVO();
        analysisVO.setQuery(query.toString());
        analysisVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        analysisVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        analysisVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        analysisVO.executeQuery();
    }
    
    /**
     * Method to execute salesQuotationAnalysis VO
     * @param clause
     */
    public void executeSalesQuotAnalysisVO(StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
        StringBuffer query = new StringBuffer("SELECT\n" + 
        "    A.SNO,\n" + 
        "    A.QUOT_TYP_DESC,\n" + 
        "    SUM(A.QUOT_CNT) QUOT_COUNT,\n" + 
        "    SUM(A.QUOT_AMT) QUOT_AMT\n" + 
        "FROM\n" + 
        "    SLS$QUOT$ANA_VW A\n" + 
        "WHERE\n" + 
        "    A.CLD_ID = :CldIdBind \n" + 
        "    AND A.HO_ORG_ID = :HoOrgIdBind\n" + 
        "    AND A.SLOC_ID = :SlocIdBind\n" + clause +
        "GROUP BY\n" + 
        "    A.QUOT_TYP_DESC ,A.SNO\n" + 
        "ORDER BY\n" + 
        "    A.SNO");
        
        ViewObjectImpl analysisVO = this.getSalesQuotationAnalysisNewVO();
        analysisVO.setQuery(query.toString());
        analysisVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        analysisVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        analysisVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        analysisVO.executeQuery();
    }
    
    /**
     * Method to execute ProducGroupRejectionTrendVO
     * @param clause
     */
    public void executeProductGrpRejectionTrendVO(StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
        StringBuffer query = new StringBuffer("SELECT\n" + 
        "    A.GRP_NM,\n" + 
        "    SUM(A.INV_AMT) ITM_AMT,\n" + 
        "    SUM(A.REJ_AMT) REJ_AMT\n" + 
        "FROM\n" + 
        "    SLS.SLS$INV$REJ_VW A\n" + 
        "WHERE\n" + 
        "    A.CLD_ID = :CldIdBind \n" + 
        "    AND A.SLOC_ID = :SlocIdBind\n" + 
        "    AND A.HO_ORG_ID = :HoOrgIdBind\n" + clause +
        "GROUP BY\n" + 
        "    GRP_NM");
        
        ViewObjectImpl rejVO = this.getProductGrpRejectionTrendVO();
        rejVO.setQuery(query.toString());
        rejVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        rejVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        rejVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        rejVO.executeQuery();
    }
    
    /**
     * Method to execute ProducGroupRejectionTrendVO
     * @param clause
     */
    public void executeBusinessExeRejectionTrendVO(StringBuffer clause){
        clause = (clause == null ? new StringBuffer("") : clause);
        StringBuffer query = new StringBuffer("SELECT\n" + 
        "    A.SALES_EXEC_NM,\n" + 
        "    SUM(A.INV_AMT) ITM_AMT,\n" + 
        "    SUM(A.REJ_AMT) REJ_AMT\n" + 
        "FROM\n" + 
        "    SLS$INV$REJ_VW A\n" + 
        "WHERE\n" + 
        "    CLD_ID = :CldIdBind \n" + 
        "    AND SLOC_ID = :SlocIdBind\n" + 
        "    AND HO_ORG_ID = :HoOrgIdBind\n" + 
        "GROUP BY\n" + 
        "    SALES_EXEC_NM");
        
        ViewObjectImpl rejVO = this.getBusinessExecutiveRejectionTrendVO();
        rejVO.setQuery(query.toString());
        rejVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        rejVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        rejVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        rejVO.executeQuery();
    }
    
    


/********************************************************** Methods for executing viewObjects end ********************************************************************/
/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/********************************************************** Containers Getters start *********************************************************************************/
    /**
     * Container's getter for ShowListTempVO.
     * @return ShowListTempVO
     */
    public ViewObjectImpl getShowListTempVO() {
        return (ViewObjectImpl)findViewObject("ShowListTempVO");
    }
    
    /**
     * Container's getter for CustomerRejectionTrendVO.
     * @return CustomerRejectionTrendVO
     */
    public ViewObjectImpl getCustomerRejectionTrendVO() {
        return (ViewObjectImpl)findViewObject("CustomerRejectionTrendVO");
    }

    /**
     * Container's getter for OrgRejectionTrendVO.
     * @return OrgRejectionTrendVO
     */
    public ViewObjectImpl getOrgRejectionTrendVO() {
        return (ViewObjectImpl)findViewObject("OrgRejectionTrendVO");
    }
    
    /**
     * Container's getter for TopNCustomersVO.
     * @return TopNCustomersVO
     */
    public ViewObjectImpl getTopNCustomersVO() {
        return (ViewObjectImpl)findViewObject("TopNCustomersVO");
    }

    /**
     * Container's getter for TopNProductsVO.
     * @return TopNProductsVO
     */
    public ViewObjectImpl getTopNProductsVO() {
        return (ViewObjectImpl)findViewObject("TopNProductsVO");
    }
    
    /**
     * Container's getter for SalesQuotationAnalysisNewVO.
     * @return SalesQuotationAnalysisNewVO
     */
    public ViewObjectImpl getSalesQuotationAnalysisNewVO() {
        return (ViewObjectImpl)findViewObject("SalesQuotationAnalysisNewVO");
    }
    
    /**
     * Container's getter for ItmRejectionTrendVO.
     * @return ItmRejectionTrendVO
     */
    public ViewObjectImpl getItmRejectionTrendVO() {
        return (ViewObjectImpl)findViewObject("ItmRejectionTrendVO");
    }
    
    /**
     * Container's getter for ProductAgeingVO.
     * @return ProductAgeingVO
     */
    public ViewObjectImpl getProductAgeingVO() {
        return (ViewObjectImpl)findViewObject("ProductAgeingVO");
    }
    
    /**
     * Container's getter for ProductGroupWiseProfitVO.
     * @return ProductGroupWiseProfitVO
     */
    public ViewObjectImpl getProductGroupWiseProfitVO() {
        return (ViewObjectImpl)findViewObject("ProductGroupWiseProfitVO");
    }
    
    /**
     * Container's getter for OppAnalysisVO.
     * @return OppAnalysisVO
     */
    public ViewObjectImpl getOppAnalysisVO() {
        return (ViewObjectImpl)findViewObject("OppAnalysisVO");
    }
    
    /**
     * Container's getter for BusniessExecutiveVO.
     * @return BusniessExecutiveVO
     */
    public ViewObjectImpl getBusniessExecutiveVO() {
        return (ViewObjectImpl)findViewObject("BusniessExecutiveVO");
    }

    /**
     * Container's getter for TempTopCustGraphVO.
     * @return TempTopCustGraphVO
     */
    public ViewObjectImpl getTempTopCustGraphVO() {
        return (ViewObjectImpl)findViewObject("TempTopCustGraphVO");
    }

    /**
     * Container's getter for TopNProductGrpVO.
     * @return TopNProductGrpVO
     */
    public ViewObjectImpl getTopNProductGrpVO() {
        return (ViewObjectImpl)findViewObject("TopNProductGrpVO");
    }
    
    /**
     * Container's getter for TopNSalesOrdersVO.
     * @return TopNSalesOrdersVO
     */
    public ViewObjectImpl getTopNSalesOrdersVO() {
        return (ViewObjectImpl)findViewObject("TopNSalesOrdersVO");
    }

    /**
     * Container's getter for TempVO.
     * @return TempVO
     */
    public ViewObjectImpl getTempVO() {
        return (ViewObjectImpl)findViewObject("TempVO");
    }
   
    /**
     * Container's getter for TopNOrgsVO.
     * @return TopNOrgsVO
     */
    public ViewObjectImpl getTopNOrgsVO() {
        return (ViewObjectImpl)findViewObject("TopNOrgsVO");
    }

    /**
     * Container's getter for OrganisationProfitAndAmtVO.
     * @return OrganisationProfitAndAmtVO
     */
    public ViewObjectImpl getOrganisationProfitAndAmtVO() {
        return (ViewObjectImpl)findViewObject("OrganisationProfitAndAmtVO");
    }

    /**
     * Container's getter for SalesOrderAmtVO.
     * @return SalesOrderAmtVO
     */
    public ViewObjectImpl getSalesOrderAmtVO() {
        return (ViewObjectImpl)findViewObject("SalesOrderAmtVO");
    }

    
/********************************************************** Containers Getters  end ********************************************************************************/
/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
/********************************************************** Other methods start *********************************************************************************/
    
    /**
     * Method to get value of an attribute from FromShowListTempVO
     * @param arg
     * @return
     */
    public String getOrgIdOnOrgNm(StringBuffer arg){
        _log.fine("Attribute passed is : "+arg);
        if(arg != null){
            ShowListTempVORowImpl currentRow= (ShowListTempVORowImpl)this.getShowListTempVO().getCurrentRow();
            if(currentRow != null){
                RowSet idVO = currentRow.getLovOrgIdVO();
                Row[] filteredRows = idVO.getFilteredRows("OrgDesc", arg.toString());
                if(filteredRows.length > 0){
                    if(filteredRows[0].getAttribute("OrgId") != null){
                        arg = new StringBuffer(filteredRows[0].getAttribute("OrgId").toString());    
                    }
                }
            }    
        }
        _log.fine("Returned is : "+arg);
        return arg.toString();
    }
    
    /**
     * Method to get value of an attribute from FromShowListTempVO
     * @param arg
     * @return
     */
    public String getEoIdOnEoNm(StringBuffer arg){
        _log.fine("Attribute passed is : "+arg);
        if(arg != null){
            ShowListTempVORowImpl currentRow= (ShowListTempVORowImpl)this.getShowListTempVO().getCurrentRow();
            if(currentRow != null){
                RowSet idVO = currentRow.getLovEoVO();
                Row[] filteredRows = idVO.getFilteredRows("EoNm", arg.toString());
                if(filteredRows.length > 0){
                    if(filteredRows[0].getAttribute("EoId") != null){
                        arg = new StringBuffer(filteredRows[0].getAttribute("EoId").toString());    
                    }else{
                        arg = new StringBuffer("");
                    }
                }else{
                        arg = new StringBuffer("");
                    }
            }    
        }
        _log.fine("Returned is : "+arg);
        return arg.toString();
    }
    
    /**
     * Method to get value of an attribute from FromShowListTempVO
     * @param arg
     * @return
     */
    public String getItmIdOnItmNm(StringBuffer arg){
        _log.fine("Attribute passed is : "+arg);
        if(arg != null){
            ShowListTempVORowImpl currentRow= (ShowListTempVORowImpl)this.getShowListTempVO().getCurrentRow();
            if(currentRow != null){
                RowSet idVO = currentRow.getLovItmIdVO();
                Row[] filteredRows = idVO.getFilteredRows("ItmDesc", arg.toString());
                if(filteredRows.length > 0){
                    if(filteredRows[0].getAttribute("ItmId") != null){
                        arg = new StringBuffer(filteredRows[0].getAttribute("ItmId").toString());    
                    }
                }
            }    
        }
        _log.fine("Returned is : "+arg);
        return arg.toString();
    }
    
    /**
     * Method to get value of an attribute from FromShowListTempVO
     * @param arg
     * @return
     */
    public String getItmGrpIdOnItmNm(StringBuffer arg){
        _log.fine("Attribute passed is : "+arg);
        if(arg != null){
            ShowListTempVORowImpl currentRow= (ShowListTempVORowImpl)this.getShowListTempVO().getCurrentRow();
            if(currentRow != null){
                RowSet idVO = currentRow.getLovProductGrpVO();
                Row[] filteredRows = idVO.getFilteredRows("GrpNm", arg.toString());
                if(filteredRows.length > 0){
                    if(filteredRows[0].getAttribute("GrpId") != null){
                        arg = new StringBuffer(filteredRows[0].getAttribute("GrpId").toString());    
                    }
                }
            }    
        }
        _log.fine("Returned is : "+arg);
        return arg.toString();
    }
    
    /**
     * Method to filter MIS Lov
     * @param typId
     */
    public void filterMisLov(Integer typId){
        ViewObjectImpl impl = this.getTempVO();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        allRowsInRange[0].setAttribute("LovTypTrans", typId);
    }
    
    /**
     * Rowset Iterator to populate the arraylist of SalesMan
     * @return
     */
    public RowSetIterator getBusinessExecutiveRows(){
        ViewObjectImpl exe = this.getBusniessExecutiveVO();
        return exe.createRowSetIterator(null);
    }

    /**
     * Rowset Iterator to populate the arraylist of SalesMan
     * @return
     */
    public RowSetIterator getTopNOrgRows(){
        ViewObjectImpl exe = this.getTopNOrgsVO();
        return exe.createRowSetIterator(null);
    }

    /**Method to resolve expression- returns String value*/
    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }
    
   
    /**
     * That returns the ItmId of the current row
     * @return
     */
    public StringBuffer getCurrentlySelectedItmId(){
        StringBuffer itmId = new StringBuffer("");
        ViewObjectImpl impl = this.getTopNProductsVO();
        Row currentRow = impl.getCurrentRow();
        if(currentRow != null){
            itmId = new StringBuffer(currentRow.getAttribute("ItmId").toString());
        }
        _log.fine("Selected ItmId is : "+itmId);
        return itmId;
    }
       
    public Object resolvElDC(String data) {
                    FacesContext fc = FacesContext.getCurrentInstance();
                    Application app = fc.getApplication();
                    ExpressionFactory elFactory = app.getExpressionFactory();
                    ELContext elContext = fc.getELContext();
                    ValueExpression valueExp =
                            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
                    return valueExp.getValue(elContext);
             
            }
    
    /**
     * Method to get SalesOrdrAmtRows
     * @return
     */
    public RowIterator getSalesOrdrAmtRows(){
        return this.getSalesOrderAmtVO().createRowSetIterator(null);
    }
    
    /**
     * Method to get the firstLovValue
     * @return
     */
    public Integer getFirstLovValue(){
        Integer i = 0;
        ViewObjectImpl impl = this.getTempVO();
        Row currentRow = impl.getCurrentRow();
        if(currentRow != null){
            Object attribute = currentRow.getAttribute("FirstLovTrans");
            if(attribute != null){
                i = (Integer)attribute;
            }
        }
        return i;
    }
    
    /**
     * Method to get the secondLovValue
     * @return
     */
    public Integer getSecondLovValue(){
        Integer i = 0;
        ViewObjectImpl impl = this.getTempVO();
        Row currentRow = impl.getCurrentRow();
        if(currentRow != null){
            Object attribute = currentRow.getAttribute("SecondLovTrans");
            if(attribute != null){
                i = (Integer)attribute;
            }
        }
        return i;
    }
    
    /**
     * Method to execute ViewObjects with current TickerID
     * @param misType
     */
    public void executeVOsWidthCurrentTickerId(Integer misType){
        ViewObjectImpl customersVO = this.getTopNCustomersVO();
        customersVO.setNamedWhereClauseParam("MisTypeBind", misType);
        executeTopNCustomerVO(5, whereClause);
        
        ViewObjectImpl orgVO = this.getTopNOrgsVO();
        orgVO.setNamedWhereClauseParam("MisTypeBind", misType);
        executeTopNOrgsVO(5, whereClause);
        
        ViewObjectImpl productGrpVO = this.getTopNProductGrpVO();
        productGrpVO.setNamedWhereClauseParam("MisTypeBind", misType);
        executeTopNProductGrpVO(5, whereClause);
        
        ViewObjectImpl productVO = this.getTopNProductsVO();
        productVO.setNamedWhereClauseParam("MisTypeBind", misType);
        executeTopNProductsVO(5, whereClause);
        
        ViewObjectImpl execVO = this.getBusniessExecutiveVO();
        execVO.setNamedWhereClauseParam("MisTypeBind", misType);
        executeBusinessExecutiveVO(5, whereClause);
    }
    
    /**
     * Method to return top ticker rows
     * @return
     */
    public RowIterator getTopTickerRows(){
       return this.getTopTickersVO().createRowSetIterator(null);
    }
 
/********************************************************** Other methods end ***********************************************************************************/

/********************************************************** Filter to all the viewObject start *********************************************************************************/
    /**
     * Method to filter all the view objects on the basis of selected params
     * @param id : to identify set of view Objects
     * @param clause : WhereClause that need to be used

        Unique TaskFlow ID Map For All TaskFlows
        
        1 : SLSBIOrganisationDetailsTF 
        2 : SLSBIOneProductDetailsTF 
        3 : SLSBIOneCustomerDetailsTF 
        4 : SLSBICustomerDetailsTF 
        5 : SLSBIProductDetailsTF 
        6 : SLSBIProductGroupDetailsTF 
        7 : SLSBISalesExecutiveDetailsTF 
        8 : SLSBIRegionDetailsTF 
        9 : SLSBIOneOrganisationDetailsTF
        10 : SLSOneProductGroupDetailsTF
        11 : SLSOneSalesExecDetailsTF

     */
    public void filterAllViewObjects(Integer id, StringBuffer clause){
        whereClause = clause;
        _log.info("Filter view Objects with Id : "+id+" With clause");
        if(id == 1){
            _log.info("Filtered id : "+id);
            executeTopNProductsVO(5,clause);
            executeTopNCustomerVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeBusinessExecutiveVO(6, clause);
            executeSalesOrderAmtVO(null,null,clause);
            executeSalesOppAnalysisVO(clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeSalesQuotAnalysisVO(clause);
            executeTopNOrgsVO(null, clause);
            executeOrgRejectionTrendVO(clause);
        }
        if(id == 2){
            executeProductAgeingVO(null, null, null);
            executeItmRejectionTrendVO(clause);
            executeProductGroupwiseProfitVO(5, clause);
            executeBusinessExecutiveVO(5, clause);
            executeTopNProductsVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeTopNCustomerVO(5, clause);
            executeSalesOppAnalysisVO(clause);
            executeSalesOrderAmtVO(null,null,clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeSalesQuotAnalysisVO(clause);
            executeCustomerRejectionTrendVO(clause);
            executeTopNOrgsVO(5, clause);
            _log.info("Filtered id : "+id);
        }
        if(id == 3){
            executeTopNProductsVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeSalesOppAnalysisVO(clause);
            executeSalesOrderAmtVO(null,null,clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeSalesQuotAnalysisVO(clause);
            executeCustomerRejectionTrendVO(clause);
            executeTopNOrgsVO(5, clause);
            _log.info("Filtered id : "+id);
        }
        if(id == 4){
            _log.info("Filtered id : "+id);
            executeTopNProductsVO(5,clause);
            executeTopNCustomerVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeBusinessExecutiveVO(6, clause);
            executeSalesOrderAmtVO(null,null,clause);
            executeSalesOppAnalysisVO(clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeSalesQuotAnalysisVO(clause);
            executeTopNOrgsVO(null, clause);
            executeCustomerRejectionTrendVO(clause);
        }
        if(id == 5){
            executeTopNProductsVO(5,clause);
            executeTopNCustomerVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeBusinessExecutiveVO(6, clause);
            executeSalesOrderAmtVO(null,null,clause);
            executeSalesOppAnalysisVO(clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeSalesQuotAnalysisVO(clause);
            executeTopNOrgsVO(null, clause);
            executeItmRejectionTrendVO(clause);
            _log.info("Filtered id : "+id);
        }
        if(id == 6){
            executeTopNProductsVO(5,clause);
            executeTopNCustomerVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeBusinessExecutiveVO(6, clause);
            executeSalesOrderAmtVO(null,null,clause);
            executeSalesOppAnalysisVO(clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeSalesQuotAnalysisVO(clause);
            executeTopNOrgsVO(null, clause);
            executeProductGrpRejectionTrendVO(clause);
            executeProductGroupwiseProfitVO(5, clause);
            
        }
        if(id == 7){
            _log.info("Filtered id : "+id);
            executeTopNProductsVO(5,clause);
            executeTopNCustomerVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeBusinessExecutiveVO(6, clause);
            executeSalesOrderAmtVO(null,null,clause);
            executeSalesOppAnalysisVO(clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeSalesQuotAnalysisVO(clause);
            executeTopNOrgsVO(null, clause);
            executeBusinessExeRejectionTrendVO(clause);
            
        }
        if(id == 8){
        }
        if(id == 9){
            executeSalesOppAnalysisVO(clause);
            executeSalesQuotAnalysisVO(clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeOrgRejectionTrendVO(clause);
        }
        if(id == 10){
            _log.info("Filtered id : "+id);
            executeTopNProductsVO(5,clause);
            executeTopNCustomerVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeBusinessExecutiveVO(6, clause);
            executeSalesOrderAmtVO(null,null,clause);
            executeSalesOppAnalysisVO(clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeSalesQuotAnalysisVO(clause);
            executeTopNOrgsVO(null, clause);
            executeProductGrpRejectionTrendVO(clause);
        }
        if(id == 11){
            executeTopNProductsVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeSalesOppAnalysisVO(clause);
            executeSalesOrderAmtVO(null,null,clause);
            executeOrganisationProfitAndAmtVO(null,clause);
            executeSalesQuotAnalysisVO(clause);
            executeCustomerRejectionTrendVO(clause);
            executeTopNOrgsVO(5, clause);
            _log.info("Filtered id : "+id);
        }
    }
    
    /**
     *  Method to execute viewObjects before entry to any taskflow
     */
    public void executeViewObjects(Integer taskFlowId){
        _log.info("Execute ViewObjects with TaskFlowId : "+taskFlowId);
        if(taskFlowId == 1){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId);
            executeTopNProductsVO(5,whereClause);
            executeTopNCustomerVO(5,whereClause);
            executeTopNProductGrpVO(5,whereClause);
            executeBusinessExecutiveVO(6, whereClause);
            executeSalesOrderAmtVO(null,null,whereClause);
            executeSalesOppAnalysisVO(whereClause);
            executeOrganisationProfitAndAmtVO(null,whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeTopNOrgsVO(null, whereClause);
            executeOrgRejectionTrendVO(whereClause);   
        }
        if(taskFlowId == 2){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId);
            executeProductAgeingVO(null, null, null);
            executeItmRejectionTrendVO(whereClause);
            executeProductGroupwiseProfitVO(5, whereClause);
            executeBusinessExecutiveVO(5, whereClause);
            executeTopNProductsVO(5,whereClause);
            executeTopNProductGrpVO(5,whereClause);
            executeTopNCustomerVO(5, whereClause);
            executeTopNOrgsVO(5, whereClause);
            executeSalesOppAnalysisVO(whereClause);
            executeSalesOrderAmtVO(null,null,whereClause);
            executeOrganisationProfitAndAmtVO(null,whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeCustomerRejectionTrendVO(whereClause);
            
        }
        if(taskFlowId == 3){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId);
            executeProductGroupwiseProfitVO(5, whereClause);
            executeBusinessExecutiveVO(5,whereClause);
            executeTopNProductGrpVO(5, whereClause);
            executeTopNSalesOrderVO(5, whereClause);
            executeTopNProductsVO(5, whereClause);
            executeSalesOrderAmtVO(null,null, whereClause);
            executeCustomerRejectionTrendVO(whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeSalesOppAnalysisVO(whereClause);
            executeTopNOrgsVO(5, whereClause);
            
        } 
        if(taskFlowId == 4){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId);
            executeTopNProductsVO(5,whereClause);
            executeTopNCustomerVO(5,whereClause);
            executeTopNProductGrpVO(5,whereClause);
            executeBusinessExecutiveVO(6, whereClause);
            executeSalesOrderAmtVO(null,null,whereClause);
            executeSalesOppAnalysisVO(whereClause);
            executeOrganisationProfitAndAmtVO(null,whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeTopNOrgsVO(null, whereClause);
            executeCustomerRejectionTrendVO(whereClause);
        }
        if(taskFlowId == 5){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId);
            executeTopNProductsVO(5,whereClause);
            executeTopNCustomerVO(5,whereClause);
            executeTopNProductGrpVO(5,whereClause);
            executeBusinessExecutiveVO(6, whereClause);
            executeSalesOrderAmtVO(null,null,whereClause);
            executeSalesOppAnalysisVO(whereClause);
            executeOrganisationProfitAndAmtVO(null,whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeTopNOrgsVO(null, whereClause);
            executeItmRejectionTrendVO(whereClause);
        }
        if(taskFlowId == 6){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId);
            executeTopNProductsVO(5,whereClause);
            executeTopNCustomerVO(5,whereClause);
            executeTopNProductGrpVO(5,whereClause);
            executeBusinessExecutiveVO(6, whereClause);
            executeSalesOrderAmtVO(null,null,whereClause);
            executeSalesOppAnalysisVO(whereClause);
            executeOrganisationProfitAndAmtVO(null,whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeTopNOrgsVO(null, whereClause);
            executeProductGrpRejectionTrendVO(whereClause);
            executeProductGroupwiseProfitVO(5, whereClause);
        }
        if(taskFlowId == 7){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId);
            executeTopNProductsVO(5,whereClause);
            executeTopNCustomerVO(5,whereClause);
            executeTopNProductGrpVO(5,whereClause);
            executeBusinessExecutiveVO(6, whereClause);
            executeSalesOrderAmtVO(null,null,whereClause);
            executeSalesOppAnalysisVO(whereClause);
            executeOrganisationProfitAndAmtVO(null,whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeTopNOrgsVO(null, whereClause);
            executeBusinessExeRejectionTrendVO(whereClause);
        }
        if(taskFlowId == 8){
            filterMisLov(109);
        }
        if(taskFlowId == 9){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId);
            executeSalesOppAnalysisVO(whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeOrganisationProfitAndAmtVO(null,whereClause);    
            executeOrgRejectionTrendVO(whereClause);
        }
        if(taskFlowId == 10){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId+ " where claue :"+whereClause);
            executeTopNProductsVO(5,whereClause);
            executeTopNCustomerVO(5,whereClause);
            executeTopNProductGrpVO(5,whereClause);
            executeBusinessExecutiveVO(6, whereClause);
            executeSalesOrderAmtVO(null,null,whereClause);
            executeSalesOppAnalysisVO(whereClause);
            executeOrganisationProfitAndAmtVO(null,whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeTopNOrgsVO(null, whereClause);
            executeProductGrpRejectionTrendVO(whereClause);
        }
        if(taskFlowId == 10){
            filterMisLov(109);
            _log.info("Executing ViewObjects in TaskFlowId : "+taskFlowId);
            executeProductGroupwiseProfitVO(5, whereClause);
            executeBusinessExecutiveVO(5,whereClause);
            executeTopNProductGrpVO(5, whereClause);
            executeTopNSalesOrderVO(5, whereClause);
            executeTopNProductsVO(5, whereClause);
            executeSalesOrderAmtVO(null,null, whereClause);
            executeCustomerRejectionTrendVO(whereClause);
            executeSalesQuotAnalysisVO(whereClause);
            executeSalesOppAnalysisVO(whereClause);
            executeTopNOrgsVO(5, whereClause);
            
        }
        
    }
    
/********************************************************** Filter to all the viewObject end *********************************************************************************/

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
 
    public void initWhereClauseInAm(StringBuffer clause){
        whereClause = clause;
    }


    public void setWhereClause(StringBuffer whereClause) {
        this.whereClause = whereClause;
    }

    public StringBuffer getWhereClause() {
        return whereClause;
    }

    /**
     * Container's getter for ProductGrpRejectionTrendVO.
     * @return ProductGrpRejectionTrendVO
     */
    public ViewObjectImpl getProductGrpRejectionTrendVO() {
        return (ViewObjectImpl)findViewObject("ProductGrpRejectionTrendVO");
    }

    /**
     * Container's getter for TopTickersVO.
     * @return TopTickersVO
     */
    public ViewObjectImpl getTopTickersVO() {
        return (ViewObjectImpl)findViewObject("TopTickersVO");
    }

    /**
     * Container's getter for BusinessExecutiveRejectionTrendVO.
     * @return BusinessExecutiveRejectionTrendVO
     */
    public ViewObjectImpl getBusinessExecutiveRejectionTrendVO() {
        return (ViewObjectImpl)findViewObject("BusinessExecutiveRejectionTrendVO");
    }
}
