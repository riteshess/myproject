package slspricemasterapp.model.entities;


import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import slspricemasterapp.model.services.SLSPriceMasterAppAMImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 27 18:35:30 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PriceMasterEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getCldId();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        HoOrgId {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        EoId {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getEoId();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setEoId((Number)value);
            }
        }
        ,
        CatgId {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getCatgId();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setCatgId((Integer)value);
            }
        }
        ,
        EffectiveDt {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getEffectiveDt();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setEffectiveDt((Timestamp)value);
            }
        }
        ,
        ItmId {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getItmId();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setItmId((String)value);
            }
        }
        ,
        ItmUom {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getItmUom();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setItmUom((String)value);
            }
        }
        ,
        MrpRate {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getMrpRate();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setMrpRate((Number)value);
            }
        }
        ,
        MrpTyp {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getMrpTyp();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setMrpTyp((String)value);
            }
        }
        ,
        MrpPrice {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getMrpPrice();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setMrpPrice((Number)value);
            }
        }
        ,
        MinPrice {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getMinPrice();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setMinPrice((Number)value);
            }
        }
        ,
        PriceApply {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getPriceApply();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setPriceApply((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Timestamp)value);
            }
        }
        ,
        UsrIdMod {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setUsrIdModDt((Timestamp)value);
            }
        }
        ,
        BasePrice {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getBasePrice();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setBasePrice((Number)value);
            }
        }
        ,
        ExpiryDt {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getExpiryDt();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setExpiryDt((Timestamp)value);
            }
        }
        ,
        EoPriceType {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getEoPriceType();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setEoPriceType((String)value);
            }
        }
        ,
        EoPartNo {
            public Object get(PriceMasterEOImpl obj) {
                return obj.getEoPartNo();
            }

            public void put(PriceMasterEOImpl obj, Object value) {
                obj.setEoPartNo((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(PriceMasterEOImpl object);

        public abstract void put(PriceMasterEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int CATGID = AttributesEnum.CatgId.index();
    public static final int EFFECTIVEDT = AttributesEnum.EffectiveDt.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int MRPRATE = AttributesEnum.MrpRate.index();
    public static final int MRPTYP = AttributesEnum.MrpTyp.index();
    public static final int MRPPRICE = AttributesEnum.MrpPrice.index();
    public static final int MINPRICE = AttributesEnum.MinPrice.index();
    public static final int PRICEAPPLY = AttributesEnum.PriceApply.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int BASEPRICE = AttributesEnum.BasePrice.index();
    public static final int EXPIRYDT = AttributesEnum.ExpiryDt.index();
    public static final int EOPRICETYPE = AttributesEnum.EoPriceType.index();
    public static final int EOPARTNO = AttributesEnum.EoPartNo.index();

    /**
     * This is the default constructor (do not remove).
     */
    public PriceMasterEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("slspricemasterapp.model.entities.PriceMasterEO");
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for EoId, using the alias name EoId.
     * @return the value of EoId
     */
    public Number getEoId() {
        return (Number)getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoId.
     * @param value value to set the EoId
     */
    public void setEoId(Number value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for CatgId, using the alias name CatgId.
     * @return the value of CatgId
     */
    public Integer getCatgId() {
        return (Integer)getAttributeInternal(CATGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CatgId.
     * @param value value to set the CatgId
     */
    public void setCatgId(Integer value) {
        setAttributeInternal(CATGID, value);
    }

    /**
     * Gets the attribute value for EffectiveDt, using the alias name EffectiveDt.
     * @return the value of EffectiveDt
     */
    public Timestamp getEffectiveDt() {
        return (Timestamp)getAttributeInternal(EFFECTIVEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for EffectiveDt.
     * @param value value to set the EffectiveDt
     */
    public void setEffectiveDt(Timestamp value) {
        setAttributeInternal(EFFECTIVEDT, value);
    }

    /**
     * Gets the attribute value for ItmId, using the alias name ItmId.
     * @return the value of ItmId
     */
    public String getItmId() {
        return (String)getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmId.
     * @param value value to set the ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ItmUom, using the alias name ItmUom.
     * @return the value of ItmUom
     */
    public String getItmUom() {
        return (String)getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmUom.
     * @param value value to set the ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for MrpRate, using the alias name MrpRate.
     * @return the value of MrpRate
     */
    public oracle.jbo.domain.Number getMrpRate() {
        return (oracle.jbo.domain.Number)getAttributeInternal(MRPRATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MrpRate.
     * @param value value to set the MrpRate
     */
    public void setMrpRate(oracle.jbo.domain.Number value) {
        setAttributeInternal(MRPRATE, value);
    }

    /**
     * Gets the attribute value for MrpTyp, using the alias name MrpTyp.
     * @return the value of MrpTyp
     */
    public String getMrpTyp() {
        return (String)getAttributeInternal(MRPTYP);
    }

    /**
     * Sets <code>value</code> as the attribute value for MrpTyp.
     * @param value value to set the MrpTyp
     */
    public void setMrpTyp(String value) {
        setAttributeInternal(MRPTYP, value);
    }

    /**
     * Gets the attribute value for MrpPrice, using the alias name MrpPrice.
     * @return the value of MrpPrice
     */
    public Number getMrpPrice() {
        return (Number)getAttributeInternal(MRPPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MrpPrice.
     * @param value value to set the MrpPrice
     */
    public void setMrpPrice(Number value) {
        setAttributeInternal(MRPPRICE, value);
    }

    /**
     * Gets the attribute value for MinPrice, using the alias name MinPrice.
     * @return the value of MinPrice
     */
    public Number getMinPrice() {
        return (Number)getAttributeInternal(MINPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for MinPrice.
     * @param value value to set the MinPrice
     */
    public void setMinPrice(Number value) {
        setAttributeInternal(MINPRICE, value);
    }

    /**
     * Gets the attribute value for PriceApply, using the alias name PriceApply.
     * @return the value of PriceApply
     */
    public String getPriceApply() {

        return (String)getAttributeInternal(PRICEAPPLY);
    }

    /**
     * Sets <code>value</code> as the attribute value for PriceApply.
     * @param value value to set the PriceApply
     */
    public void setPriceApply(String value) {
        setAttributeInternal(PRICEAPPLY, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for BasePrice, using the alias name BasePrice.
     * @return the value of BasePrice
     */
    public Number getBasePrice() {
        return (Number)getAttributeInternal(BASEPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for BasePrice.
     * @param value value to set the BasePrice
     */
    public void setBasePrice(Number value) {
        setAttributeInternal(BASEPRICE, value);
    }

    /**
     * Gets the attribute value for ExpiryDt, using the alias name ExpiryDt.
     * @return the value of ExpiryDt
     */
    public Timestamp getExpiryDt() {
        return (Timestamp)getAttributeInternal(EXPIRYDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpiryDt.
     * @param value value to set the ExpiryDt
     */
    public void setExpiryDt(Timestamp value) {
        setAttributeInternal(EXPIRYDT, value);
    }

    /**
     * Gets the attribute value for EoPriceType, using the alias name EoPriceType.
     * @return the value of EoPriceType
     */
    public String getEoPriceType() {
        return (String)getAttributeInternal(EOPRICETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoPriceType.
     * @param value value to set the EoPriceType
     */
    public void setEoPriceType(String value) {
        setAttributeInternal(EOPRICETYPE, value);
    }

    /**
     * Gets the attribute value for EoPartNo, using the alias name EoPartNo.
     * @return the value of EoPartNo
     */
    public String getEoPartNo() {
        return (String)getAttributeInternal(EOPARTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoPartNo.
     * @param value value to set the EoPartNo
     */
    public void setEoPartNo(String value) {
        setAttributeInternal(EOPARTNO, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param hoOrgId key constituent
     * @param eoId key constituent
     * @param catgId key constituent
     * @param effectiveDt key constituent
     * @param itmId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String hoOrgId, Number eoId,
                                       Integer catgId, Timestamp effectiveDt, String itmId) {
        return new Key(new Object[]{cldId, slocId, orgId, hoOrgId, eoId, catgId, effectiveDt, itmId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */


    protected void create(AttributeList attributeList) {

        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Integer user_id_create = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        setCldId(cld_id);
        setSlocId(sloc_id);
     try {
            setEoId(new Number(0));
        } catch (Exception e) {
        } 
        setOrgId(org_id);
        setHoOrgId(ho_org_id);
        setUsrIdCreate(user_id_create);
        setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        setMrpTyp("A");
        super.create(attributeList);
    }


    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */


    protected void doDML(int operation, TransactionEvent e) {

        if (operation == DML_INSERT) {
            setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        }
        if (operation == DML_UPDATE) {
            // System.out.println("In DODML Update BLOCK");
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
            Integer user_id_create = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            setUsrIdMod(user_id_create);


        }

        super.doDML(operation, e);

    }
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }
    
    public String getdrivername()
    {         String   drivernme ="";
              SLSPriceMasterAppAMImpl am = (SLSPriceMasterAppAMImpl)resolvElDC("SLSPriceMasterAppAMDataControl");
              DBTransaction dbTransaction = (DBTransaction) am.getTransaction();
              PreparedStatement prepStatement = 
              dbTransaction.createPreparedStatement("select * from dual", 0);    
              try 
              {           
                System.out.println("Driver name--"+prepStatement.getConnection().getMetaData().getDriverName());
                drivernme = prepStatement.getConnection().getMetaData().getDriverName();
              } 
              catch (SQLException e) 
              {
                  e.printStackTrace();
              }           
              return drivernme;
               
              }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                st = getDBTransaction().createCallableStatement("{ ? = " + stmt + "};", 0);   
            }
            else
            {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            }

            st.registerOutParameter(1, sqlReturnType);

            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);

                    }
                }
                st.executeUpdate();
            } catch (NullPointerException e) {

                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {


                }
            }
        }
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }
    private static int VARCHAR = Types.VARCHAR;
}
