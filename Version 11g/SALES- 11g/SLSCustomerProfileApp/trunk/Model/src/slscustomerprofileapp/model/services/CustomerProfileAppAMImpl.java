package slscustomerprofileapp.model.services;


import custommandtrychkapp.model.MandatoryAttCheck;

import java.io.FileOutputStream;
import java.io.InputStream;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;

import oracle.binding.OperationBinding;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slscustomerprofileapp.model.entitiy.AppEoAddsEOImpl;
import slscustomerprofileapp.model.services.common.CustomerProfileAppAM;
import slscustomerprofileapp.model.views.AppEoAddsVOImpl;
import slscustomerprofileapp.model.views.AppEoAddsVORowImpl;
import slscustomerprofileapp.model.views.CustomerVOImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 23 17:05:16 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CustomerProfileAppAMImpl extends ApplicationModuleImpl implements CustomerProfileAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public CustomerProfileAppAMImpl() {
    }

    /**
     * Container's getter for Customer1.
     * @return Customer1
     */
    public CustomerVOImpl getCustomer1() {
        return (CustomerVOImpl)findViewObject("Customer1");
    }

    /**
     * Container's getter for AppEoAdds1.
     * @return AppEoAdds1
     */
    public ViewObjectImpl getAppEoAdds1() {
        return (ViewObjectImpl)findViewObject("AppEoAdds1");
    }

    /**
     * Container's getter for AppEoBanks1.
     * @return AppEoBanks1
     */
    public ViewObjectImpl getAppEoBanks1() {
        return (ViewObjectImpl)findViewObject("AppEoBanks1");
    }

    /**
     * Container's getter for AppEoPrf1.
     * @return AppEoPrf1
     */
    public ViewObjectImpl getAppEoPrf1() {
        return (ViewObjectImpl)findViewObject("AppEoPrf1");
    }

    /**
     * Container's getter for CustomerToAppEoAddsVL1.
     * @return CustomerToAppEoAddsVL1
     */
    public ViewLinkImpl getCustomerToAppEoAddsVL1() {
        return (ViewLinkImpl)findViewLink("CustomerToAppEoAddsVL1");
    }

    /**
     * Container's getter for CutomerToAppEoBanksVL1.
     * @return CutomerToAppEoBanksVL1
     */
    public ViewLinkImpl getCutomerToAppEoBanksVL1() {
        return (ViewLinkImpl)findViewLink("CutomerToAppEoBanksVL1");
    }

    /**
     * Container's getter for CustomerToAppEoPrfVL1.
     * @return CustomerToAppEoPrfVL1
     */
    public ViewLinkImpl getCustomerToAppEoPrfVL1() {
        return (ViewLinkImpl)findViewLink("CustomerToAppEoPrfVL1");
    }

    public void dfltprfl() {
        Row[] row = getAppEoAdds1().getFilteredRows("ShipAddsDflt", "Y");
        if (row.length > 0 && row != null) {
            row[0].setAttribute("ShipAddsDflt", "N");
        } else {
            Row[] row1 = getAppEoAdds1().getFilteredRows("ShipAddsDflt", "N");
            row1[0].setAttribute("ShipAddsDflt", "Y");
        }
    }

    public void Billdfltprfl() {
        Row[] row = getAppEoAdds1().getFilteredRows("BillAddsDflt", "Y");
        if (row.length > 0 && row != null) {
            row[0].setAttribute("BillAddsDflt", "N");
        } else {
            Row[] row1 = getAppEoAdds1().getFilteredRows("BillAddsDflt", "N");
            row1[0].setAttribute("BillAddsDflt", "Y");
        }
    }


    /**
     * Container's getter for AppEoAdds2.
     * @return AppEoAdds2
     */
    public ViewObjectImpl getAppEoAdds2() {
        return (ViewObjectImpl)findViewObject("AppEoAdds2");
    }

    public void setBindVar(String cldId, Integer slocId, String hoOrgId, String orgid) {
        ViewObjectImpl voimpl = this.getCustomer1();
        System.out.println("row in cust vo before=" + voimpl.getRowCount());
        voimpl.setNamedWhereClauseParam("CldIdBind", cldId);
        voimpl.setNamedWhereClauseParam("SlocIdBInd", slocId);
        voimpl.setNamedWhereClauseParam("HoOrgIdBind", hoOrgId);
        //voimpl.setNamedWhereClauseParam("OrgIdBind", orgid);
        System.out.println("row in cust vo before=" + voimpl.getRowCount());
        voimpl.executeQuery();
        System.out.println("row in cust vo before=" + voimpl.getRowCount());
        /* ViewObjectImpl impl = this.getLOVSalesMan1();
        impl.setNamedWhereClauseParam("eo_sloc_bind", slocId);
        impl.setNamedWhereClauseParam("eo_cld_bind", cldId);
        impl.setNamedWhereClauseParam("eo_ho_bind", hoOrgId); */
    }

    public void searchCriteria(String eonm, String onhold, String blacklst) {
        System.out.println("eonm "+eonm+" onhold "+onhold+" blacklst "+blacklst);
        CustomerVOImpl customer1 = this.getCustomer1();

        customer1.setEoNmBind(eonm);
        customer1.setOnHoldBind(onhold);
        customer1.setBlackListBind(blacklst);
        System.out.println("query "+customer1.getQuery());
        customer1.executeQuery();

    }

    public void resetCriteria() {
        CustomerVOImpl customer1 = getCustomer1();
        customer1.setEoNmBind("-1");
        customer1.setOnHoldBind(null);
        customer1.setBlackListBind(null);
        customer1.executeQuery();
    }

    public void refreshVo() {
        ViewObjectImpl appEoPrf1 = getAppEoPrf1();
        appEoPrf1.executeQuery();
    }

    /**
     * Container's getter for LovAddressTrans1.
     * @return LovAddressTrans1
     */
    public ViewObjectImpl getLovAddressTrans1() {
        return (ViewObjectImpl)findViewObject("LovAddressTrans1");
    }

    /**
     * Refresh the LovAddress View
     */
    public void refreshAddressView() {
        AppEoAddsVORowImpl curRow = (AppEoAddsVORowImpl)this.getAppEoAdds1().getCurrentRow();
        if (curRow != null) {
            curRow.getLOVAddressVO1().executeQuery();
        }
        getLOVAddress1().executeQuery();
    }

    /**
     * Container's getter for LOVAddress1.
     * @return LOVAddress1
     */
    public ViewObjectImpl getLOVAddress1() {
        return (ViewObjectImpl)findViewObject("LOVAddress1");
    }

    /**
     * Refresh Address View
     *
     */
    public void addressView() {
        getAppEoAdds1().executeQuery();
        getAppEoAdds2().executeQuery();
    }

    /**
     * Refresh Banks View
     *
     */
    public void banksView() {
        getAppEoBanks1().executeQuery();
    }

    /**
     * Refresh Profile View
     *
     */
    public void profileView() {
        getAppEoPrf1().executeQuery();
    }

    /**
     * Container's getter for LOVSalesMan1.
     * @return LOVSalesMan1
     */
    public ViewObjectImpl getLOVSalesMan1() {
        return (ViewObjectImpl)findViewObject("LOVSalesMan1");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Set Return Address Values
     */
    public void setReturnAddressValues() {

        String adds_Id_value = resolvEl("#{pageFlowScope.AddsID}");
        String address_value = resolvEl("#{pageFlowScope.Ret_Address}");

        //System.out.println("Address Id Value is :"+adds_Id_value);
        //System.out.println("Address Value is :"+address_value);

        // Row currentRow = this.getAppEoAdds1().getCurrentRow();
        // currentRow.setAttribute("AddsId", adds_Id_value);
        // currentRow.setAttribute("AddsIdTrans", address_value);


        //  this.getAppEoAdds1().executeQuery();


        //  System.out.println("After save AddsId -------->> "+currentRow.getAttribute("AddsId"));


    }

    /**
     * Check Duplicate Record of Bank exist or not
     */
    public Boolean chkDuplicateBankAccno(String object) {
        RowSetIterator rsi = this.getAppEoBanks1().createRowSetIterator(null);
        System.out.println("curr is:" + this.getAppEoBanks1().getCurrentRow());
        while (rsi.hasNext()) {
            Row next = rsi.next();
            System.out.println("next :" + next);
            if (next.getAttribute("BankAcNo") != null && next != this.getAppEoBanks1().getCurrentRow()) {
                // System.out.println("next.getAttribute(\"WhIdSrc\") "+next.getAttribute("WhIdSrc")+" Bean value is "+whidFromBean);
                if (next.getAttribute("BankAcNo").equals(object)) {
                    //    System.out.println("Inside loop");
                    return true;
                }
            }
        }

        return false;
    }

    public void setAllowRetGoodsStatus() {

        this.getAppEoPrf1().getCurrentRow().setAttribute("AllowRetGoods", "Y");
    }

    public void setStatus() {

        this.getAppEoPrf1().getCurrentRow().setAttribute("AllowRetGoods", "N");
    }

    /**
     * Container's getter for AppEoAttch1.
     * @return AppEoAttch1
     */
    public ViewObjectImpl getAppEoAttch1() {
        return (ViewObjectImpl)findViewObject("AppEoAttch1");
    }

  


    /****Methods to get Global Parameter*/
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public String getparamHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }


    /**
     * Container's getter for AppEoAttch2.
     * @return AppEoAttch2
     */
    public ViewObjectImpl getAppEoAttch2() {
        return (ViewObjectImpl)findViewObject("AppEoAttch2");
    }

    /**
     * Container's getter for CustomerToAppEoAttachVL1.
     * @return CustomerToAppEoAttachVL1
     */
    public ViewLinkImpl getCustomerToAppEoAttachVL1() {
        return (ViewLinkImpl)findViewLink("CustomerToAppEoAttachVL1");
    }

    /**
     * Container's getter for AppEoPersCom1.
     * @return AppEoPersCom1
     */
    public ViewObjectImpl getAppEoPersCom1() {
        return (ViewObjectImpl)findViewObject("AppEoPersCom1");
    }

    /**
     * Container's getter for CustToAppEoPersComVL1.
     * @return CustToAppEoPersComVL1
     */
    public ViewLinkImpl getCustToAppEoPersComVL1() {
        return (ViewLinkImpl)findViewLink("CustToAppEoPersComVL1");
    }
    
    public boolean isDefaultBillAddsValid(){
        Boolean n = true;
        ViewObjectImpl adds1 = this.getAppEoAdds1();
        Row[] allRowsInRange = adds1.getAllRowsInRange();
        //Row[] filteredRows = adds1.getFilteredRows("BillAddsDflt", "Y");
        for(Row r : allRowsInRange){
            if(r != adds1.getCurrentRow()){
                if(r.getAttribute("BillAddsDflt") != null){
                    System.out.println("Default Biling adddress  : "+r.getAttribute("BillAddsDflt"));
                    if(r.getAttribute("BillAddsDflt").toString().equals("Y")){
                        n = false;
                        break;
                    }
                }
            }
        }
        System.out.println("returned : "+n);
        return n;
    }
    public boolean isDefaultShipAddsValid(){
        // Will for when adress doesnt exceed 25 in Number
        // Done considering Performnce Issues
        Boolean n = true;
        ViewObjectImpl adds1 = this.getAppEoAdds1();
        Row[] allRowsInRange = adds1.getAllRowsInRange();
        //Row[] filteredRows = adds1.getFilteredRows("BillAddsDflt", "Y");
        for(Row r : allRowsInRange){
            if(r != adds1.getCurrentRow()){
                if(r.getAttribute("ShipAddsDflt") != null){
                    System.out.println("Default Shipping adddress  : "+r.getAttribute("ShipAddsDflt"));
                    if(r.getAttribute("ShipAddsDflt").toString().equals("Y")){
                        n = false;
                        break;
                    }
                }
            }
        }
        System.out.println("returned : "+n);
        return n;
    }

    /**
     * Container's getter for SearchCustdtlVO1.
     * @return SearchCustdtlVO1
     */
    public ViewObjectImpl getSearchCustdtlVO1() {
        return (ViewObjectImpl)findViewObject("SearchCustdtlVO1");
    }
    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public StringBuffer getCldId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
    }

    public Integer getUserId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public StringBuffer getOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
    }

    public StringBuffer getHoOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
    }
    
    public boolean MandatoryCheckForPersonalDetails(){
        Boolean b = false;
        ViewObjectImpl appEoPersCom1 = this.getAppEoPersCom1();
        MandatoryAttCheck ck = new MandatoryAttCheck(this, getCldId(),getOrgId(),getSlocId());
        System.out.println(" CldId : "+getCldId()+" OrgID : "+getOrgId()+" SlocId"+getSlocId());

        try {
            b = ck.isMandatoryAttributesEntered(2039, new StringBuffer("AppEoPersCom1"), new StringBuffer("APP$EO$PERS$COMM"),
                                        appEoPersCom1.createRowSetIterator(null), null);
            System.out.println("Returned : "+b);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return b;
    }
}
