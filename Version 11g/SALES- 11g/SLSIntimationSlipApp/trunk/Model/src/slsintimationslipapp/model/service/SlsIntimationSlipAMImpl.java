package slsintimationslipapp.model.service;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.annotation.PostConstruct;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsintimationslipapp.model.service.common.SlsIntimationSlipAM;
import slsintimationslipapp.model.views.LOVConsigneeVOImpl;
import slsintimationslipapp.model.views.SlsIntmSlipItmMstrVOImpl;
import slsintimationslipapp.model.views.SlsIntmSlipItmVOImpl;
import slsintimationslipapp.model.views.SlsIntmSlipVOImpl;

/**
 * abcd Not used following code
 */
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 30 11:11:08 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------

public class SlsIntimationSlipAMImpl extends ApplicationModuleImpl implements SlsIntimationSlipAM {
    private static int NUMBER = Types.NUMERIC;
    private Integer fyIdAM = 0;
    private String itemIdAmVar;
    private boolean isAllItmZero = false;


    private static ADFLogger logAdf = ADFLogger.createADFLogger(SlsIntimationSlipAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public SlsIntimationSlipAMImpl() {
    }


    /**
     * Container's getter for SlsIntmSlip.
     * @return SlsIntmSlip
     */
    public SlsIntmSlipVOImpl getSlsIntmSlip() {
        return (SlsIntmSlipVOImpl)findViewObject("SlsIntmSlip");
    }

    /**
     * Container's getter for SlsIntmSlipItmMstr.
     * @return SlsIntmSlipItmMstr
     */
    public SlsIntmSlipItmMstrVOImpl getSlsIntmSlipItmMstr() {
        return (SlsIntmSlipItmMstrVOImpl)findViewObject("SlsIntmSlipItmMstr");
    }

    /**
     * Container's getter for SlsIntmSlipItm.
     * @return SlsIntmSlipItm
     */
    public SlsIntmSlipItmVOImpl getSlsIntmSlipItm() {
        return (SlsIntmSlipItmVOImpl)findViewObject("SlsIntmSlipItm");
    }

    /**
     * Container's getter for IntmSlipToItmMstrVL1.
     * @return IntmSlipToItmMstrVL1
     */
    public ViewLinkImpl getIntmSlipToItmMstrVL1() {
        return (ViewLinkImpl)findViewLink("IntmSlipToItmMstrVL1");
    }

    /**
     * Container's getter for ItmMstrToItmVL1.
     * @return ItmMstrToItmVL1
     */
    public ViewLinkImpl getItmMstrToItmVL1() {
        return (ViewLinkImpl)findViewLink("ItmMstrToItmVL1");
    }


    /**
     *
     * Body for function calling i.e template
     * to get the Input Parameters
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }

    /**
     * Method used to call function to get the fy id
     * @return FY Id
     * */
    public Integer getFYidOrg(String P_CldId, String P_OrgId) {
        ViewObjectImpl slsIntm = this.getSlsIntmSlip();
        Integer fyId = 0;
        logAdf.info("DocDate : " + slsIntm.getCurrentRow().getAttribute("DocDt"));

        logAdf.info("P_CldId : " + P_CldId);
        logAdf.info("P_OrgId : " + P_OrgId);
        if (slsIntm.getCurrentRow().getAttribute("DocDt") != null) {
            fyId =
(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] { P_CldId, P_OrgId,
                                                                                        slsIntm.getCurrentRow().getAttribute("DocDt") }));


            if (fyId > 0 && slsIntm.getCurrentRow().getAttribute("DocDt") != null) {
                slsIntm.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        logAdf.info("Fyid is : " + fyId);
        if (fyId != null) {
            this.setFyIdAM(fyId);
            logAdf.info("fy Id AM : " + this.getFyIdAM());
            //ViewObject slsIntmSlipItm=this.getSlsIntmSlipItm1();

        }
        return fyId;
    }


    public String getDispDocIdFunction() {
        String dispDocIdFunc = null;
        System.out.println("getDispDocIdFunction()");
        ViewObjectImpl intmnSlipVo = this.getSlsIntmSlip();
        Row intmnSlipVoRow = intmnSlipVo.getCurrentRow();
        if (intmnSlipVoRow != null) {
            String cldId = intmnSlipVoRow.getAttribute("CldId").toString();
            System.out.println(cldId);
            String orgId = intmnSlipVoRow.getAttribute("OrgId").toString();
            System.out.println(orgId);
            String docId = intmnSlipVoRow.getAttribute("DocId").toString();
            System.out.println(docId);
            this.getFYidOrg(cldId, orgId);
            Integer docforDisp = 21509;
            System.out.println(docforDisp);
            Integer slocId = Integer.parseInt(intmnSlipVoRow.getAttribute("SlocId").toString());
            System.out.println(slocId);
            dispDocIdFunc =
                    (callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] { slocId,
                                                                                                              cldId,
                                                                                                              orgId,
                                                                                                              docforDisp,
                                                                                                              docId,
                                                                                                              null,
                                                                                                              "SLS$INTM$SLIP",
                                                                                                              fyIdAM }).toString());
            intmnSlipVoRow.setAttribute("DispDocId", dispDocIdFunc);
            System.out.println("DISPDOCID from Table :" + intmnSlipVoRow.getAttribute("DispDocId").toString());
            System.out.println("end getDispDocIdFunction()");
        }
        return dispDocIdFunc;
    }


    /**
     *
     * @return
     */
    public Integer getAutoRowsIntmnSlipItm(Integer eoIdAM, Timestamp shipDtAM, String docIdAM) {
        this.getDispDocIdFunction();
        Integer returnedval = null;
        System.out.println("getAutoRowsIntmnSlipItm()");
        ViewObjectImpl intmnSlipVo = this.getSlsIntmSlip();
        Row intmnSlipVoRow = intmnSlipVo.getCurrentRow();
        if (intmnSlipVoRow != null) {
            String cldId = intmnSlipVoRow.getAttribute("CldId").toString();
            System.out.println(cldId);
            Integer slocId = Integer.parseInt(intmnSlipVoRow.getAttribute("SlocId").toString());
            System.out.println(slocId);
            String hoOrgId = intmnSlipVoRow.getAttribute("HoOrgId").toString();
            System.out.println(hoOrgId);
            String orgId = intmnSlipVoRow.getAttribute("OrgId").toString();
            System.out.println(orgId);
            String docId = intmnSlipVoRow.getAttribute("DocId").toString();
            System.out.println(docIdAM);
            logAdf.info("docId " + docId);
            Timestamp docDt = (Timestamp)(intmnSlipVoRow.getAttribute("DocDt"));
            System.out.println(" doc date passing into insert is : " + docDt);
            Integer eoId = Integer.parseInt(intmnSlipVoRow.getAttribute("EoId").toString());
            System.out.println(eoId);
            Integer usrId = Integer.parseInt(intmnSlipVoRow.getAttribute("UsrIdCreate").toString());
            System.out.println(usrId);
            Timestamp usrIdCreateDt = (Timestamp)intmnSlipVoRow.getAttribute("UsrIdCreateDt");
            System.out.println(usrIdCreateDt);
            //this.getDispDocIdFunction();
            returnedval =
                    Integer.parseInt(callStoredFunction(Types.NUMERIC, "SLS.FN_INS_SHIP_TO_INTM(?,?,?,?,?,?,?,?,?,?)",
                                                        new Object[] { cldId, slocId, hoOrgId, orgId, docIdAM, docDt,
                                                                       eoId, usrId,
                                                                       intmnSlipVoRow.getAttribute("UsrIdCreateDt"),
                                                                       fyIdAM }).toString());
            //intmnSlipVoRow.setAttribute("DispDocId", dispDocIdFunc);
            //System.out.println("DISPDOCID from Table :"+intmnSlipVoRow.getAttribute("DispDocId").toString());
            System.out.println("end getAutoRowsIntmnSlipItm()" + returnedval);
            logAdf.info("end getAutoRowsIntmnSlipItm()" + returnedval);
        }
        return returnedval;
    }


    /**
     * Container's getter for LOVConsignee.
     * @return LOVConsignee
     */
    public LOVConsigneeVOImpl getLOVConsignee() {
        return (LOVConsigneeVOImpl)findViewObject("LOVConsignee");
    }

    public void getDeleteRowsSldQty() {
        System.out.println("getDeleteRowsSldQty--------------->");
        ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        //System.out.println("-------------- 1");

        ViewObject searchIntmVo = this.getSearchIntimation();
        //System.out.println("-------------- 2");
        Row searchedRow = searchIntmVo.getCurrentRow();
        //System.out.println("-------------- 3");
        String itmIdAm = null;
        String shipDocIdAm = null;
        //System.out.println("-------------- 4123");

        //System.out.println("Search Row is :-"+searchedRow);
        if (searchedRow != null && searchedRow.getAttribute("ItmId") != null) {
            //  System.out.println("----------before itm id");
            itmIdAm = searchedRow.getAttribute("ItmId").toString();
            //System.out.println("After itm id");
        }
        //System.out.println("-------------- 5");
        if (searchedRow != null && searchedRow.getAttribute("ShipmntDocId") != null) {
            shipDocIdAm = searchedRow.getAttribute("ShipmntDocId").toString();
        }

        //System.out.println("-------------- 6");
        Integer count = 0;
        Number zero = new Number(0);
        RowSetIterator rsi = itmVo.createRowSetIterator(null);
        //System.out.println("Outside loop");
        while (rsi.hasNext()) {
            //  System.out.println("Inside loop");
            Row z = rsi.next();
            //System.out.println(count);
            if (z.getAttribute("SoldQty") != null) {
                logAdf.info(" sold Quantity : " + z.getAttribute("SoldQty"));
                logAdf.info("itmIdAm  : " + itmIdAm + "shipDocIdAm  :" + shipDocIdAm);
                //System.out.println("itmIdAm  : "+itmIdAm +"shipDocIdAm  :" +shipDocIdAm);
                if ((itmIdAm != null) && (shipDocIdAm != null)) {
                    logAdf.info("if shipDocId = " + shipDocIdAm + " and itmIdAm = " + itmIdAm);
                    logAdf.info("z.getAttribute(\"SoldQty\").toString().equals(zero.toString())" +
                                z.getAttribute("SoldQty").equals(zero));
                    //      System.out.println("z.getAttribute(\"SoldQty\") "+z.getAttribute("SoldQty"));
                    if ((z.getAttribute("ShipmntDocId").toString().equalsIgnoreCase(shipDocIdAm)) &&
                        (z.getAttribute("ItmId").toString().equalsIgnoreCase(itmIdAm))) {
                        System.out.println("Inside If loop.");
                        if (((z.getAttribute("SoldQty").equals(zero)))) {
                            System.out.println("Remove");
                            count = count + 1;
                            z.remove();
                        }
                    }
                }

                if ((itmIdAm != null) && (shipDocIdAm == null)) {
                    logAdf.info("if shipDocId = " + shipDocIdAm + " and itmIdAm = " + itmIdAm);
                    if (z.getAttribute("ItmId").toString().equalsIgnoreCase(itmIdAm)) {
                        System.out.println((z.getAttribute("SoldQty").toString().equals(zero.toString())));
                        if ((z.getAttribute("SoldQty").toString().equals(zero.toString())) &&
                            (z.getAttribute("ItmId").toString().equalsIgnoreCase(itmIdAm))) {
                            System.out.println("Remove");
                            count = count + 1;
                            z.remove();
                        }
                    } else {
                        logAdf.info("asdafda");
                        z.remove();
                    }
                }
                if ((shipDocIdAm != null) && (itmIdAm == null)) {
                    logAdf.info("if shipDocId = " + shipDocIdAm + " and itmIdAm = " + itmIdAm);
                    if (z.getAttribute("ShipmntDocId").toString().equalsIgnoreCase(shipDocIdAm)) {
                        System.out.println((z.getAttribute("SoldQty").toString().equals(zero.toString())));
                        if (z.getAttribute("SoldQty").toString().equals(zero.toString())) {
                            System.out.println("Remove");
                            count = count + 1;
                            z.remove();
                        }
                    } else {
                        logAdf.info("asdafda");
                        z.remove();
                    }
                }
                if ((shipDocIdAm == null) && (itmIdAm == null)) {
                    System.out.println("---" + z.getAttribute("SoldQty").equals(zero));
                    System.out.println("z.getAttribute(\"SoldQty\") " + z.getAttribute("SoldQty"));
                    logAdf.info("if shipDocId = " + shipDocIdAm + " and itmIdAm = " + itmIdAm);
                    System.out.println((z.getAttribute("SoldQty").toString().equals(zero.toString())));
                    if (z.getAttribute("SoldQty").toString().equals(zero.toString())) {
                        System.out.println("Remove");
                        count = count + 1;
                        z.remove();

                    }

                }
            } else {
                logAdf.info("sold quantity is zeroo for all rows");
                setIsAllItmZero(true);

            }

        }

        ViewObject nvl = (ViewObject)this.getSlsIntmSlipItmMstr();
        Integer rc = nvl.getRowCount();
        if (rc <= 0) {
            logAdf.info("sold quantity is zeroo for all rows");
            setIsAllItmZero(true);
        }


    }

    public void setBalanceQty() {
        RowSetIterator r = this.getSlsIntmSlipItm().createRowSetIterator(null);
        while (r.hasNext()) {
            Row next = r.next();
            if (next.getAttribute("BalQtyTrans") != null) {

                next.setAttribute("BalQty", next.getAttribute("BalQtyTrans"));

            }
        }
        r.closeRowSetIterator();
    }


    public void getRowsIntmSlip(String docIdN) {
        ViewObjectImpl intmSlipVo = this.getSlsIntmSlip();
        ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        System.out.println(docIdN);
        if (itmVo.getFilteredRows("DocId", docIdN).length == 0) {
            logAdf.info(" length of DOCIDN is ZERO");
            Row intmSlipVoCurrRow = intmSlipVo.getCurrentRow();
            intmSlipVoCurrRow.remove();
            //Row[] intmSlipVoRow=intmSlipVo.getFilteredRows("DocId", docIdN);
            //intmSlipVoRow[0].remove();
        }
        logAdf.info("length of docIdN is not ==0 ");
    }


    /**
     * Container's getter for SlsIntmSlipItm1.
     * @return SlsIntmSlipItm1
     */
    public SlsIntmSlipItmVOImpl getSlsIntmSlipItm1() {
        return (SlsIntmSlipItmVOImpl)findViewObject("SlsIntmSlipItm1");
    }


    public Row getItmCurrentRow() {
        ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        Row itmVoRow = itmVo.getCurrentRow();

        return itmVoRow;
    }


    public String geShipIdFromCurrRowItem() {
        ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        Row itmVoRow = itmVo.getCurrentRow();
        String shipId = itmVoRow.getAttribute("ShipmntDocId").toString();
        return shipId;
    }


    /**
     * Container's getter for SearchIntimation.
     * @return SearchIntimation
     */
    public ViewObjectImpl getSearchIntimation() {
        return (ViewObjectImpl)findViewObject("SearchIntimation");
    }


    /**
     *
     * @return
     */
    public ViewObject getIntmSlipVoImplAM() {
        //this.getDBTransaction().rollback();
        /* this.getSlsIntmSlip().reset();
        this.getSlsIntmSlip().executeQuery(); */
        return this.getSlsIntmSlip();
    }

    /**
     *
     * @return
     */
    public ViewObject getIntmSlipItmVoImplAM() {
        return this.getSlsIntmSlipItmMstr();
    }


    public void getResetFields() {

        ViewObjectImpl intmVo = this.getSlsIntmSlip();
        intmVo.setNamedWhereClauseParam("dispDocIdBindvar", null);
        intmVo.setNamedWhereClauseParam("docDtBindVar", null);
        intmVo.setNamedWhereClauseParam("eoIdBindVar", null);
        intmVo.executeQuery();

        ViewObjectImpl intmItmMstrVo = this.getSlsIntmSlipItmMstr();
        intmItmMstrVo.setNamedWhereClauseParam("shipDocIdBindVar", null);
        intmItmMstrVo.executeQuery();
        this.getSearchIntimation().executeQuery();

        //intmItmVo.setNamedWhereClauseParam("ShipmntDocId", shipDocId);
    }


    public void setItemIdAmVar(String itemIdAmVar) {
        logAdf.info("item AMImpl" + itemIdAmVar);
        this.itemIdAmVar = itemIdAmVar;
    }

    public String getItemIdAmVar() {
        return itemIdAmVar;
    }

    public void getItemIdBindingBean(String itmIdbean) {
        System.out.println(itmIdbean);
        setItemIdAmVar(itmIdbean);
    }

    public String getTxnId() {
        String DocId = getSlsIntmSlip().getCurrentRow().getAttribute("DocId").toString();
        return DocId;
    }

    public void rollbackWhileAdd() {
        String docId;
        String eoIdNTrans = null;
        Integer entityId = null;
        ViewObject intmSlipVo = getSlsIntmSlip();

        Row intmSlipVoCurrRow = intmSlipVo.getCurrentRow();

        if (intmSlipVoCurrRow != null) {

            if (intmSlipVoCurrRow.getAttribute("DocId") != null) {
                docId = intmSlipVoCurrRow.getAttribute("DocId").toString();
                Row[] intmSlipfilteredRows = intmSlipVo.getFilteredRows("DocId", docId);
                if (intmSlipfilteredRows.length > 0) {
                    logAdf.info("length" + intmSlipfilteredRows.length);
                    for (Row rr : intmSlipfilteredRows) {
                        //rr.getAttribute("EoId");
                        try {
                            if (rr.getAttribute("EoId") != null) {
                                entityId = Integer.parseInt(rr.getAttribute("EoId").toString());
                                logAdf.info(entityId + "----entityId");
                            }
                        } catch (NullPointerException npe) {
                            npe.printStackTrace();
                        }
                        if (entityId != null) {

                            Row[] consigneeVoRow = this.getLOVConsignee().getFilteredRows("EoId", entityId);
                            if (consigneeVoRow.length > 0) {
                                eoIdNTrans = consigneeVoRow[0].getAttribute("EoNm").toString();
                                intmSlipVoCurrRow.setAttribute("EoIdTrans", eoIdNTrans);
                                logAdf.info("DocDt" + rr.getAttribute("DocDt"));
                                intmSlipVoCurrRow.setAttribute("DocDt", rr.getAttribute("DocDt"));
                                logAdf.info(eoIdNTrans + "----eoIdNTrans");

                            }

                        } else {
                            logAdf.info("entityId is null");
                        }
                    }
                }

            }
        }

    }
    private String DocIdTxnIntm = null;
    //String DocId = getSlsIntmSlip().getCurrentRow().getAttribute("DocId").toString();

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount) {
        Integer insToTxn = null;
        try {
            String DocId = getDocIdTxnIntm();
            logAdf.info("SlocId : " + SlocId + " CldId : " + CldId + " OrgId : " + OrgId + " DocId : " + DocId +
                        " WfNo: " + WfNo + " DocNo : " + DocNo);
            insToTxn =
                    Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                                CldId,
                                                                                                                                OrgId,
                                                                                                                                DocNo,
                                                                                                                                0,
                                                                                                                                WfNo,
                                                                                                                                DocId,
                                                                                                                                usr_idFrm,
                                                                                                                                usr_idTo,
                                                                                                                                levelFrm,
                                                                                                                                levelTo,
                                                                                                                                action,
                                                                                                                                remark,
                                                                                                                                amount,
                                                                                                                                "S" }).toString());
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return insToTxn;

    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Integer usrLvl = null;
        try {
            logAdf.info("SlocId : " + SlocId + " CldId : " + CldId + " OrgId : " + OrgId + "UsrId : " + UsrId +
                        " WfNo: " + WfNo + " DocNo : " + DocNo);
            /*   usrLvl =
                    Integer.parseInt(callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_USR_LEVEL(?,?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                            CldId,
                                                                                                                            OrgId,
                                                                                                                            UsrId,
                                                                                                                            WfNo,
                                                                                                                            DocNo }).toString()); */
            usrLvl =
                    Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                      CldId,
                                                                                                                      OrgId,
                                                                                                                      UsrId,
                                                                                                                      WfNo,
                                                                                                                      DocNo,
                                                                                                                      0 }).toString());


        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return usrLvl;

    }


    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        try {
            logAdf.info("SlocId : " + SlocId + " CldId : " + CldId + " OrgId : " + OrgId + "DocNo : " + DocNo);
            /*   Object obj =
                callStoredFunction(Types.VARCHAR, "APP.PKG_APP_WF.GET_WF_ID(?,?,?,?)", new Object[] { SlocId, CldId,
                                                                                                      OrgId, DocNo }); */
            Object obj =
                callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] { SlocId, CldId, OrgId,
                                                                                             DocNo, 0 });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }

    public Number updateBalQtyShip(String CldId, String OrgId, String DocId, Integer SlocId) {
        Number balQty = new Number(0);
        if (CldId != null && DocId != null && OrgId != null && SlocId != null) {
            try {
                logAdf.info("SlocId : " + SlocId + " CldId : " + CldId + " OrgId : " + OrgId + "DocId : " + DocId);
                balQty =
                        (Number)callStoredFunction(NUMBER, "FN_UPD_INM_TO_SHIP_BAL_QTY(?,?,?,?)", new Object[] { CldId,
                                                                                                                 SlocId,
                                                                                                                 OrgId,
                                                                                                                 DocId });
                logAdf.info("balQty : " + balQty);

                return balQty;
            } catch (Exception e) {
                System.out.println("In catch exception");
                return null;
            }
        }
        return balQty;
    }


    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        Integer UsrId = null;
        try {
            String DocId = getDocIdTxnIntm();
            logAdf.info("SlocId : " + SlocId + " CldId : " + CldId + " OrgId : " + OrgId + "DocNo : " + DocNo +
                        " DocId: " + DocId + " pendingCheck " + DocId);
            //System.out.println("DOCIDTXN--"+docIdTxn);
            /*  Object obj =
                callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,
                                                                                                          CldId, OrgId,
                                                                                                          DocNo,
                                                                                                          DocId }); */
            Object obj =
                callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId, CldId, OrgId,
                                                                                             DocNo, DocId, 0 });


            if (obj != null) {
                UsrId = Integer.parseInt(obj.toString());
            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return UsrId;
    }

    public void getBalQtyOnSldQtyChng(Number SldQty, Number ShipQty) {
        logAdf.info("inside getBalQtyOnSldQtyChng");
        ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        logAdf.info("itmVo : " + itmVo);
        if (itmVo != null) {

            Row itmVoRow = itmVo.getCurrentRow();
            logAdf.info("itmVoRow : " + itmVoRow);
            if (itmVoRow != null) {
                itmVo.executeQuery();
                Number newBalQty = null;
                /* if (SldQty != null && ShipQty != null) {
                    newBalQty = ShipQty.subtract(SldQty);
                    logAdf.info("newBalQty" + newBalQty);
                }
                itmVoRow.setAttribute("BalQty", newBalQty); */
            }
        }
    }
    /*  public void getdeleteChildrenInsert(RowIterator ri, Key selectedNodeKey) {
        System.out.println("Delete on Insert");
        System.out.println(" selectedNodeKey :"+selectedNodeKey+" and RowIterator :"+ri);
        Number zero = new Number(0);
        if (ri != null && selectedNodeKey != null) {

            Row[] rows = ri.findByKey(selectedNodeKey, 1);

            if (rows != null) {
                System.out.println(" No of rows by key" + rows.length);

                for (Row row : rows) {
                    if (((Number)row.getAttribute("ShipmntItmQty")).compareTo(zero) == 0) {
                        row.remove();
                    }

                }

            } else {
                System.out.println("Node not Found for Shipment Qty = 0.00 " + selectedNodeKey);
            }

        }
    }

    public void getdeleteChildrenUpdate(RowIterator ri, Key selectedNodeKey) {
        Number zero = new Number(0);
        System.out.println(" selectedNodeKey :"+selectedNodeKey+" and RowIterator :"+ri);
        this.getDeleteRowsShip();
        if (ri != null && selectedNodeKey != null) {

            Row[] rows = ri.findByKey(selectedNodeKey, 1);

            if (rows != null) {
                System.out.println(" No of rows by key" + rows.length);

                for (Row row : rows) {
                    if (((Number)row.getAttribute("SoldQty")).compareTo(zero) == 0) {
                        row.remove();
                    }

                }

            } else {
                System.out.println("Node not Found for sold Qty = 0.00 " + selectedNodeKey);
            }

        }
    }
     */

    public void getRowAftrInsert(String docId) {
        // this.getDBTransaction().commit();
        ViewObject slsIntmSlipVo = this.getSlsIntmSlip();
        if (docId == "R") {
            //slsIntmSlipVo.setWhereClause(null);
        } else {
            //slsIntmSlipVo.setWhereClause("DOC_ID='" + docId + "'");
        }

        logAdf.info("docId : " + docId);
        //slsIntmSlipVo.setNamedWhereClauseParam("docIdBindVar", docId);
        slsIntmSlipVo.executeQuery();

    }


    public void setDocIdTxnIntm(String DocIdTxnIntm) {
        this.DocIdTxnIntm = DocIdTxnIntm;
    }

    public String getDocIdTxnIntm() {
        if (getSlsIntmSlip().getCurrentRow().getAttribute("DocId").toString() != null) {
            return getSlsIntmSlip().getCurrentRow().getAttribute("DocId").toString();
        } else {
            return DocIdTxnIntm;
        }
    }

    /* public void getGeRecordForEdit(String CldId,Integer SlocId,String OrgId,String TxnId){
        String TxnIdSrc=this.getSlsIntmSlip().getCurrentRow().getAttribute("EoIdTrans").toString();
        String E=this.getLOVConsignee().getCurrentRow().getAttribute("EoId").toString();
        System.out.println(TxnId+"--TXN--"+TxnIdSrc+"--"+whId);
        ViewObjectImpl vo = this.getMmMtlGe();
            ViewCriteria vc = vo.getViewCriteria(" ");
              vo.applyViewCriteria(vc);
              vo.setNamedWhereClauseParam("cldIdVar", CldId);
              vo.setNamedWhereClauseParam("SlocIdVar",SlocId);
              vo.setNamedWhereClauseParam("OrgIdVar", OrgId);
              vo.setNamedWhereClauseParam("txnIdVar", TxnIdSrc);
              vo.setNamedWhereClauseParam("whIdVar", whId);
              vo.executeQuery();

    } */

    /**
     *
     * @param data
     * @return
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public void setStatusUpdBalQuant() {
        System.out.println("-------------1 heare are");
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String wfFlag = resolvEl("#{pageFlowScope.WF_RET_VAL}").toString();

        ViewObject slsIntm = this.getSlsIntmSlip();
        Row curRow = slsIntm.getCurrentRow();
        System.out.println("------------------2");

        if (curRow != null && curRow.getAttribute("DocId") != null) {
            System.out.println("------------------3");
            String docId = curRow.getAttribute("DocId").toString();
            Integer FyId = Integer.parseInt(curRow.getAttribute("FyId").toString());
            // ViewObjectImpl slsIntmitm = this.getSlsIntmSlipItm1();
            //    logAdf.info("Total Row in tree child-" + slsIntmitm.getRowCount());
            // getDBTransaction().postChanges();
            System.out.println("---------------------------5");
            //  this.getDBTransaction().commit();
            System.out.println("---------------------------4");
            /* RowQualifier rq = new RowQualifier(slsIntmitm);
                rq.setWhereClause("SlocId=" + p_sloc_id + " and OrgId='" + p_org_id + "' and CldId='" + p_cldId +
                                  "' and HoOrgId='" + p_hoOrgId + "' and DocId='" + docId + "'");
                logAdf.info("Rq is=--" + rq.getExprStr());
                Row fltrdRow[] = slsIntmitm.getFilteredRows(rq);
                logAdf.info("After Filter-" + fltrdRow.length); */
            /*    if (fltrdRow.length > 0) {
                    for (Row r : fltrdRow) {
                        System.out.println("Trans Bal Qty-" + r.getAttribute("BalQtyTrans") + " and balQty is-" +
                                           r.getAttribute("BalQty"));
                      //  Number val1 = (Number)r.getAttribute("BalQtyTrans");
                      //  Number val2 = (Number)r.getAttribute("SoldQty");

                      //  r.setAttribute("BalQty", r.getAttribute("BalQtyTrans"));
                    }
                } */
            //  System.out.println("fyid is: "+ FyId+"\n"+docId);
            /*   if(true)
            throw new NullPointerException(); */
            /* String flag =
                callStoredFunction(Types.VARCHAR, "SLS.FN_INTI_SHIP_UPDATE(?,?,?,?,?,?)", new Object[] { p_cldId,
                                                                                                         p_sloc_id,
                                                                                                         p_hoOrgId,
                                                                                                         p_org_id,
                                                                                                         FyId,
                                                                                                         docId, }).toString(); */
            //     logAdf.info("convBFctr : " + convBFctr);
            //   this.getDBTransaction().commit();
            //   System.out.println("Value from falg is; " + flag);
            if (wfFlag.equalsIgnoreCase("A")) {
                curRow.setAttribute("IntmMode", 314);
                curRow.setAttribute("IntmStat", 442);

                String doc_id = this.getSlsIntmSlip().getCurrentRow().getAttribute("DocId").toString();
                updateBalQtyShip(p_cldId, p_org_id, doc_id, p_sloc_id);
            } else if (wfFlag.equalsIgnoreCase("F")) {
                curRow.setAttribute("IntmMode", 317);
                curRow.setAttribute("IntmStat", 441);

                String doc_id = this.getSlsIntmSlip().getCurrentRow().getAttribute("DocId").toString();
                //  updateBalQtyShip(p_cldId, p_org_id, doc_id, p_sloc_id);
            } else if (wfFlag.equalsIgnoreCase("I")) {
                updateTempBalQty();
            }
            this.getDBTransaction().commit();
        }
        System.out.println("value from workflow  " + wfFlag);
    }

    /**
     *
     */
    public void setFyIdAM(Integer fyIdAM) {
        this.fyIdAM = fyIdAM;
    }

    public Integer getFyIdAM() {
        return fyIdAM;
    }

    public void setIsAllItmZero(boolean isAllItmZero) {
        this.isAllItmZero = isAllItmZero;
    }

    public boolean isIsAllItmZero() {
        return isAllItmZero;
    }

    /**Method to Convert Quantity to base quantity
     * @param itmQty
     */
    public void setQtyBs(Number itmQty, Row row) {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        ViewObject slsIntmSlipItm = this.getSlsIntmSlipItm1();
        logAdf.info("Values " + "p_sloc_id : " + p_sloc_id + "p_org_id : " + p_org_id + "p_cldId : " + p_cldId);

        BigDecimal convBFctr =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                                  p_cldId,
                                                                                                                  p_org_id,
                                                                                                                  row.getAttribute("ItmId"),
                                                                                                                  row.getAttribute("ItmUomBs"),
                                                                                                                  row.getAttribute("ItmUom") });
        logAdf.info("convBFctr : " + convBFctr);
        Number convFctr;
        try {
            if (convBFctr != null) {
                convFctr = new Number(convBFctr);
            } else {
                convFctr = new Number(1);
            }

            logAdf.info("Uom Factor-" + convFctr);
            Number uomConv = new Number(1);
            if (convFctr != null) {
                try {
                    uomConv = new Number(convFctr);
                    logAdf.info("uomConv : " + uomConv);
                } catch (Exception e) {
                    logAdf.info(e);
                }
            }
            Number qtyBs = uomConv.multiply(itmQty);
            logAdf.info("Uom Factor is-" + uomConv + "qty bs-" + qtyBs);
            if (qtyBs != null && uomConv != null) {
                row.setAttribute("UomConvFctr", uomConv);
                row.setAttribute("ItmQtyBs", qtyBs);
                slsIntmSlipItm.executeQuery();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public void resIntimationSlip(String docTxnIdRes) {
        ViewObjectImpl vo = this.getSlsIntmSlip();
        ViewCriteria vc = vo.getViewCriteria("SlsIntmSlipVOCriteria1");

        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        //Integer FyId = Integer.parseInt(resolvEl("#{pageFlowScope.FY_ID}").toString());

        String DocId = docTxnIdRes;
        logAdf.info("SlocId : " + SlocId);
        logAdf.info("CldId : " + CldId);
        logAdf.info("OrgId : " + OrgId);
        logAdf.info("DocId : " + DocId);
        //adfLog.info("FyId : " +FyId);
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("cldIdBindVar", CldId);
        vo.setNamedWhereClauseParam("slocIdBindVar", SlocId);
        vo.setNamedWhereClauseParam("orgIdBindVar", OrgId);
        vo.setNamedWhereClauseParam("docIdBindVar", DocId);
        //vo.setNamedWhereClauseParam("FyIdBindVar", FyId);
        vo.executeQuery();
    }

    public void deleteIntimationOnCancel() {
        ViewObject slsIntm = this.getSlsIntmSlip();
        ViewObject slsintmItm = this.getSlsIntmSlipItm1();
        Row intmRow = slsIntm.getCurrentRow();
        if (intmRow != null && intmRow.getAttribute("DocId") != null) {
            String docID = intmRow.getAttribute("DocId").toString();
            System.out.println("DocId of current intm is-" + docID);
            Row[] filteredRows = slsintmItm.getFilteredRows("DocId", docID);
            System.out.println("Row in item to delete-" + filteredRows.length);
            if (filteredRows.length > 0) {
                for (Row r : filteredRows) {
                    r.remove();
                }
            }
            slsintmItm.executeQuery();
            intmRow.remove();
            slsIntm.executeQuery();
            this.getDBTransaction().commit();
        }

    }


    @PostConstruct
    public void getfilterCreteria() {
        ViewObject voConsignee = this.getLOVConsignee();
        ViewCriteria vc = this.getLOVConsignee().getViewCriteria("LOVConsigneeVOCriteria");
        voConsignee.applyViewCriteria(vc);
        voConsignee.setNamedWhereClauseParam("cldIdBindVar", "0000");
        voConsignee.setNamedWhereClauseParam("slocIdBindVar", 1);
        voConsignee.setNamedWhereClauseParam("hoOrgIdBindVar", "01");
        voConsignee.setNamedWhereClauseParam("catIdBindVar", 387);
        voConsignee.executeQuery();
        System.out.println("getfilterCreteria ends---->");
    }

    /**
     * abcd Upto above i didnt use in new page
     */

    public void SearchAction() {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));

        //System.out.println("Cld "+cldId+" Org "+orgId+" sloc "+slocId+" hoorg "+hoOrgId);
        Row cR = this.getSearchIntimation().getCurrentRow();
        SlsIntmSlipVOImpl impl = this.getSlsIntmSlip();
        impl.setWhereClause(null);
        /*  ViewCriteria criteria = impl.getViewCriteria("SlsIntmSlipVOCriteria1");
        impl.applyViewCriteria(criteria); */
        //System.out.println("++++"+impl.getRowCount());
        impl.setNamedWhereClauseParam("slocIdBindVar", slocId);
        impl.setNamedWhereClauseParam("cldIdBindVar", cldId.toString());
        impl.setNamedWhereClauseParam("orgIdBindvar", orgId.toString());
        impl.setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId.toString());
        if (cR.getAttribute("DocDt") != null && cR.getAttribute("DocDt").toString().length() > 0) {
            Timestamp val = (Timestamp)cR.getAttribute("DocDt");

            try {
                impl.setNamedWhereClauseParam("docDtBindVar", val.dateValue());
            } catch (SQLException e) {
            }
        } else {
            impl.setNamedWhereClauseParam("docDtBindVar", null);
        }
        if (cR.getAttribute("DispDocId") != null && cR.getAttribute("DispDocId").toString().length() > 0) {
            impl.setNamedWhereClauseParam("dispDocIdBindvar", cR.getAttribute("DocId"));
        } else {
            impl.setNamedWhereClauseParam("dispDocIdBindvar", null);
        }

        if (cR.getAttribute("EoId") != null && cR.getAttribute("EoId").toString().length() > 0) {
            impl.setNamedWhereClauseParam("eoIdBindVar", cR.getAttribute("EoId"));
        } else {
            impl.setNamedWhereClauseParam("eoIdBindVar", null);
        }

        if (cR.getAttribute("ShipmntDocId") != null && cR.getAttribute("ShipmntDocId").toString().length() > 0) {
            //impl.setNamedWhereClauseParam("shipIdBind", cR.getAttribute("ShipmntDocId"));
            impl.setWhereClause(null);
            String str =
                "DOC_ID IN (SELECT DOC_ID FROM SLS$INTM$SLIP$ITM B WHERE B.SHIPMNT_DOC_ID = '" + cR.getAttribute("ShipmntDocId").toString() +
                "')";
            System.out.println("String is : " + str);
            impl.setWhereClause(str);
        } else {
            impl.setNamedWhereClauseParam("shipIdBind", null);
        }

        if (cR.getAttribute("ItmId") != null && cR.getAttribute("ItmId").toString().length() > 0) {
            //impl.setNamedWhereClauseParam("itemIdBind", cR.getAttribute("ItmId"));
            impl.setWhereClause(null);
            String str =
                "DOC_ID IN (SELECT DOC_ID FROM SLS$INTM$SLIP$ITM B WHERE B.ITM_ID = '" + cR.getAttribute("ItmId").toString() +
                "')";
            System.out.println("String is :" + str);
            impl.setWhereClause(str);
        } else {
            impl.setNamedWhereClauseParam("itemIdBind", null);
        }
        if (cR.getAttribute("ItmId") != null && cR.getAttribute("ItmId").toString().length() > 0 &&
            cR.getAttribute("ShipmntDocId") != null && cR.getAttribute("ShipmntDocId").toString().length() > 0) {
            //impl.setNamedWhereClauseParam("itemIdBind", cR.getAttribute("ItmId"));
            impl.setWhereClause(null);
            String str =
                "DOC_ID IN (SELECT DOC_ID FROM SLS$INTM$SLIP$ITM B WHERE B.ITM_ID = '" + cR.getAttribute("ItmId").toString() +
                "' AND B.SHIPMNT_DOC_ID = '" + cR.getAttribute("ShipmntDocId").toString() + "')";
            System.out.println("String is :" + str);
            impl.setWhereClause(str);
        } else {
            impl.setNamedWhereClauseParam("itemIdBind", null);
        }

        impl.executeQuery();


    }

    public void ResetAction() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));

        this.getSearchIntimation().executeQuery();

        SlsIntmSlipVOImpl impl = this.getSlsIntmSlip();
        impl.setWhereClause(null);
        impl.setNamedWhereClauseParam("slocIdBindVar", slocId);
        impl.setNamedWhereClauseParam("cldIdBindVar", cldId.toString());
        impl.setNamedWhereClauseParam("orgIdBindvar", orgId.toString());
        impl.setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId.toString());
        impl.setNamedWhereClauseParam("docDtBindVar", null);
        impl.setNamedWhereClauseParam("dispDocIdBindvar", null);
        impl.setNamedWhereClauseParam("itemIdBind", null);
        impl.setNamedWhereClauseParam("shipIdBind", null);
        impl.setNamedWhereClauseParam("eoIdBindVar", null);

        impl.executeQuery();

    }

    public boolean chkSoldQtyEntererorNot() {
        Boolean value = false;
        Number zero = new Number(0);
        RowSetIterator rsi = this.getSlsIntmSlipItm().createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next.getAttribute("SoldQty") != null) {
                if (!next.getAttribute("SoldQty").toString().equals(zero.toString())) {
                    value = true;
                }


            }
        }
        rsi.closeRowSetIterator();


        return value;
    }

    public void refreshVo() {
        SlsIntmSlipVOImpl impl = this.getSlsIntmSlip();
        impl.setWhereClause(null);
    }

    /**
     * Container's getter for SearchIntmVw1.
     * @return SearchIntmVw1
     */
    public ViewObjectImpl getSearchIntmVw1() {
        return (ViewObjectImpl)findViewObject("SearchIntmVw1");
    }

    public void filterSlipIntmVo() {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        SlsIntmSlipVOImpl impl = this.getSlsIntmSlip();
        impl.setNamedWhereClauseParam("slocIdBindVar", p_sloc_id);
        impl.setNamedWhereClauseParam("cldIdBindVar", p_cldId);
        impl.setNamedWhereClauseParam("orgIdBindvar", p_org_id);
        impl.setNamedWhereClauseParam("hoOrgIdBindVar", p_hoOrgId);
        impl.executeQuery();
    }

    public void updateTempBalQty() {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        Row curRow = this.getSlsIntmSlip().getCurrentRow();

        String docId = curRow.getAttribute("DocId").toString();
        Integer FyId = Integer.parseInt(curRow.getAttribute("FyId").toString());
        System.out.println("Doc id in update:  " + docId);
        String flag =
            callStoredFunction(Types.VARCHAR, "SLS.FN_INTM_SHIP_UPDATE(?,?,?,?,?,?)", new Object[] { p_cldId, p_sloc_id,
                                                                                                     p_hoOrgId,
                                                                                                     p_org_id, FyId,
                                                                                                     docId, }).toString();
        //     logAdf.info("convBFctr : " + convBFctr);
        this.getDBTransaction().commit();
        System.out.println("Value from falg is; " + flag);
    }

    public Integer checkForEditDoc() {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_UsrId = resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();

        Row currentRow = this.getSlsIntmSlip().getCurrentRow();

        if (currentRow != null && currentRow.getAttribute("IntmStat") != null) {
            //&&
            //             Integer.parseInt(currentRow.getAttribute("IntmStat").toString()) == 442
            Object doc = currentRow.getAttribute("DocId");

            Object obj =
                callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { p_sloc_id, p_cldId,
                                                                                             p_org_id, 21509,
                                                                                             doc.toString(), 0 });

            Integer UsrId = null;
            if (obj != null) {
                UsrId = Integer.parseInt(obj.toString());
            }
            if (UsrId != null && UsrId.equals(Integer.parseInt(p_UsrId))) {
                return UsrId;
            }
        } else {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        }
        return null;
    }

    public void updateIntmBalQty() {
        if (this.getSlsIntmSlip().getCurrentRow() != null) {
            //Row currentRow = this.getSlsIntmSlip().getCurrentRow();
            Row[] allRowsInRange = this.getSlsIntmSlipItmMstr().getAllRowsInRange();
            for (int i = 0; i < allRowsInRange.length; i++) {
                Object attribute = allRowsInRange[i].getAttribute("DocId");
                Row[] filteredRows = this.getSlsIntmSlipItm1().getFilteredRows("DocId", attribute.toString());
                for (int j = 0; j < filteredRows.length; j++) {
                    Object itmId = filteredRows[j].getAttribute("ItmId");
                    Object shipDocId = filteredRows[j].getAttribute("ShipmntDocId");
                    if (shipDocId != null && attribute != null && itmId != null) {
                        Number n =
                            (Number)call_FN_INTM_SHIP_QTY_DISP(shipDocId.toString(), attribute.toString(), itmId.toString(),
                                                               "E");
                        if (n.compareTo(0) < 0) {
                            n = new Number(0);
                        }
                        filteredRows[j].setAttribute("BalQty", n);
                        System.out.println("Balqty is: " + n);
                    }
                }
            }
        }
    }

    public Number call_FN_INTM_SHIP_QTY_DISP(String shipDoc, String DocId, String ItmId, String mode) {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_UsrId = resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();
        BigDecimal val =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "FN_INTM_SHIP_QTY_DISP(?,?,?,?,?,?,?,?)", new Object[] { p_cldId,
                                                                                                                   p_sloc_id,
                                                                                                                   p_hoOrgId,
                                                                                                                   p_org_id,
                                                                                                                   shipDoc,
                                                                                                                   ItmId,
                                                                                                                   mode,
                                                                                                                   DocId });
        Number n = new Number(0);
        if (val != null) {
            try {
                n = new Number(val);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return n;
    }

    public int checkForLessBalQty() {
        if (this.getSlsIntmSlip().getCurrentRow() != null) {
            //Row currentRow = this.getSlsIntmSlip().getCurrentRow();
            Row[] allRowsInRange = this.getSlsIntmSlipItmMstr().getAllRowsInRange();
            for (int i = 0; i < allRowsInRange.length; i++) {
                Object attribute = allRowsInRange[i].getAttribute("DocId");
                Row[] filteredRows = this.getSlsIntmSlipItm1().getFilteredRows("DocId", attribute.toString());
                for (int j = 0; j < filteredRows.length; j++) {

                    Object slodqty = filteredRows[j].getAttribute("SoldQty");
                    Object baldqty = filteredRows[j].getAttribute("BalQty");
                    if(slodqty == null && ((Number)slodqty).compareTo(0)<=0) {
                        return 1;
                    }
                    else if(baldqty == null) return 2;
                    else if(((Number)slodqty).compareTo((Number)baldqty) >0) return 3;
                }
            }
        }
        return 0;
    }
}
