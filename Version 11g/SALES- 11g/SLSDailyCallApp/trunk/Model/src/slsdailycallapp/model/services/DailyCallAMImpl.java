package slsdailycallapp.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.HashSet;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsdailycallapp.model.services.common.DailyCallAM;
import slsdailycallapp.model.views.SlsDcVORowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 30 13:44:26 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DailyCallAMImpl extends ApplicationModuleImpl implements DailyCallAM {
    /**
     * This is the default constructor (do not remove).
     */
    public DailyCallAMImpl() {
    }

    /**
     * Container's getter for SlsDcVO.
     * @return SlsDcVO
     */
    public ViewObjectImpl getSlsDcVO() {
        return (ViewObjectImpl)findViewObject("SlsDcVO");
    }

    /**
     * Container's getter for TempSearchPanelVO.
     * @return TempSearchPanelVO
     */
    public ViewObjectImpl getTempSearchPanelVO() {
        return (ViewObjectImpl)findViewObject("TempSearchPanelVO");
    }

    public void filterDetailPageWithSelectedDocId() {
        Object docId = resolvEl("#{pageFlowScope.DOC_ID}");
        if (docId != null) {
            System.out.println("DocID : |" + docId.toString() + "|");
            ViewObjectImpl dcVO = this.getSlsDcVO();
            dcVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
            dcVO.setNamedWhereClauseParam("OrgIdBind", getOrgId());
            dcVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
            dcVO.setNamedWhereClauseParam("CldIdBind", getCldId());
            dcVO.setNamedWhereClauseParam("DocIdBind", docId.toString());
            dcVO.executeQuery();
            System.out.println("DcCount :" + dcVO.getEstimatedRowCount());
        } else {
            FacesMessage message = new FacesMessage("Doc Id Retured to Null !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }
    }

    /**
     * For resolving the El
     */
    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    public Boolean saveAction() {
        Boolean b = true;
        Row currentRow = this.getSlsDcVO().getCurrentRow();
        Object docId = currentRow.getAttribute("DocId");
        Object assignTo = currentRow.getAttribute("AssignedTo");
        if (assignTo != null) {
            StringBuffer s = (docId == null ? new StringBuffer("") : new StringBuffer(docId.toString()));
            this.getDBTransaction().postChanges();
            generateDcId(s);
            this.getDBTransaction().postChanges();
            b = true;
        } else {
            FacesMessage message = new FacesMessage("Assigned To field is Required ! Please Select a value.");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            b = false;
        }
        //System.out.println("returned : "+b);
        return b;
    }

    public void generateDcId(StringBuffer DocId) {
        Integer fyId = 0;
        Row crow = this.getSlsDcVO().getCurrentRow();
        if (crow.getAttribute("DcId") == null && crow != null) {
            fyId = (Integer)crow.getAttribute("FyId");
            // System.out.println("Came in If condition .. ... . ");
            try {
                System.out.println("Values which are going in the function are: " + getSlocId() + " " + getCldId() +
                                   "  " + getOrgId() + "  " + fyId);
                StringBuffer DOC_NM =
                    new StringBuffer((callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)",
                                                         new Object[] { getSlocId(), getCldId(), getOrgId(), 21513,
                                                                        null, null, "SLS$DC", fyId })).toString());
                crow.setAttribute("DcId", DOC_NM.toString());
                System.out.println("The genearted Id is:   " + DOC_NM);
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'GEN_DISP_DOC_ID' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
    }

    /**
     * Method to call a Database function
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        // System.out.println("__________________________________________begin");
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    //System.out.println(bindVars[z]);
                }
            }
            st.executeUpdate();
            //System.out.println("__________________________________________end");
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }


    /**
     * Container's getter for SearchDcVO.
     * @return SearchDcVO
     */
    public ViewObjectImpl getSearchDcVO() {
        return (ViewObjectImpl)findViewObject("SearchDcVO");
    }

    /**
     *  Method to set Initial Parameters
     */
    public void setInitialParams() {
        ViewObjectImpl dcVO = this.getSearchDcVO();
        dcVO.setNamedWhereClauseParam("OrgIdBind", getOrgId());
        dcVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        dcVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        dcVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        dcVO.setNamedWhereClauseParam("EoIdBind", -1);
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    public String getCldId() {
        return (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
    }

    public Integer getUserId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public String getOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }

    public String getHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }

    public Integer getCurrDigit() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}").toString());
    }

    public void search() {
        ViewObjectImpl impl = this.getTempSearchPanelVO();
        Row searchRow = impl.getCurrentRow();
        ViewObjectImpl dcVO = this.getSearchDcVO();
        dcVO.setNamedWhereClauseParam("EoIdBind", searchRow.getAttribute("EoIdTrans"));
        dcVO.setNamedWhereClauseParam("AssignToBind", searchRow.getAttribute("AssignedToIdTrans"));
        dcVO.setNamedWhereClauseParam("StageIdBind", searchRow.getAttribute("StageIdTrans"));
        dcVO.executeQuery();
    }


    public void reset() {
        this.getTempSearchPanelVO().executeQuery();
        ViewObjectImpl dcVO = this.getSearchDcVO();
        dcVO.setNamedWhereClauseParam("EoIdBind", -1);
        dcVO.executeQuery();

    }

    /**
     * Container's getter for SlsDcStage1.
     * @return SlsDcStage1
     */
    public ViewObjectImpl getSlsDcStage1() {
        return (ViewObjectImpl)findViewObject("SlsDcStage1");
    }

    public void executeStage() {
        Row currentRow = this.getSlsDcVO().getCurrentRow();
        System.out.println("Current row  : " + currentRow);
        if (currentRow != null) {
            SlsDcVORowImpl r = (SlsDcVORowImpl)currentRow;
            r.getLovStageVO1().executeQuery();
        }
    }


    public Boolean generateAndSetStage() {
        Boolean b = true;
        ViewObjectImpl dcStage1 = this.getSlsDcStage1();
        RowSetIterator cr = dcStage1.createRowSetIterator(null);
        while (cr.hasNext()) {
            Row next = cr.next();
            Object stage = next.getAttribute("StageId");
            Integer i = -1;
            if (-1 == (Integer)stage) {
                i =
  (Integer)((callStoredFunction(Types.INTEGER, "SLS.FN_GEN_PRF_ID(?,?,?,?,?)", new Object[] { getCldId(), getSlocId(),
                                                                                              getHoOrgId(), getOrgId(),
                                                                                              "SLS$DC$STAGE" })));

                System.out.println("Id Generated : " + i);
            } else {
                i = -2;
            }
            if (i == -2 || i == -1) {
                b = true;
            } else if (i == null) {
                b = false;
            } else {
                next.setAttribute("StageId", i);
                b = true;
            }
        }

        return b;
    }


    public void filterStageWithInitialParameters() {
        ViewObjectImpl dcStage1 = this.getSlsDcStage1();
        dcStage1.setNamedWhereClauseParam("CldIdBind", getCldId());
        dcStage1.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        dcStage1.setNamedWhereClauseParam("OrgIdBind", getOrgId());
        dcStage1.setNamedWhereClauseParam("SlocIdBind", getSlocId());

        dcStage1.executeQuery();
    }

    public boolean isDataValid() {
        boolean b = true;
        ViewObjectImpl dcStage = this.getSlsDcStage1();
        RowSetIterator itr = dcStage.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            if (row.getAttribute("StageNm") == null) {
                b = false;
                break;
            } else if (row.getAttribute("StageNm").toString().equals("")) {
                b = false;
                break;
            } else {
                b = true;
            }
        }
        itr.closeRowSetIterator();
        if (b) {
            int checkDuplicateStageName = checkDuplicateStageName("");
            if (checkDuplicateStageName == 2) {
                b = false;
            }
        }
        return b;
    }

    public boolean EoIdCheck() {
        ViewObjectImpl dcStage1 = this.getSlsDcVO();
        if (dcStage1.getCurrentRow() != null) {
            SlsDcVORowImpl row = (SlsDcVORowImpl)dcStage1.getCurrentRow();
            Integer eoId = row.getEoId();
            if (eoId == null || eoId == -1)
                return true;
            else
                return false;
        }
        return true;
    }

    public Integer insertEoName() {
        Row currentRow = this.getSlsDcVO().getCurrentRow();
        if (currentRow != null) {
            SlsDcVORowImpl row = (SlsDcVORowImpl)currentRow;
            row.setEoId(-1);
            String exec =
                callStoredFunction(Types.VARCHAR, "app.FN_SET_EO_ID(?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                  getCldId(),
                                                                                                  getOrgId(),
                                                                                                  row.getNewEoNmTrans(),
                                                                                                  row.getEoTypeIdTrans(),
                                                                                                  getUserId() }).toString();
            if (exec == null || (!exec.equalsIgnoreCase("INSERTED"))) {
                return 0;
            } else
                return 1;
            //INSERTED
        }
        return 0;
    }

    public void setEoId() {
        ViewObjectImpl dcVO = this.getSlsDcVO();
        SlsDcVORowImpl currentRow = (SlsDcVORowImpl)dcVO.getCurrentRow();
        if (currentRow.getEoId() == null) {
            currentRow.setEoId(-1);
            currentRow.setEoNmTrans(null);
        }
    }

    public int checkDuplicateStageName(String name) {
        HashSet dailyCallId = new HashSet();
        int i = 1;
        ViewObjectImpl dcStage1 = this.getSlsDcStage1();
        Row currentRow = dcStage1.getCurrentRow();
        RowSetIterator ctr = dcStage1.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();
            Object stageNmO = next.getAttribute("StageNm");
            StringBuilder stageNm =
                (stageNmO == null ? new StringBuilder("") : new StringBuilder(stageNmO.toString()));
            boolean add = dailyCallId.add(stageNm.toString());
            if (add == false) {
                i = 2;
            }
        }
        return i;
    }

    public void setReturnAddressValues(String adds_Id_value,String address_value ) {
        System.out.println("IN Address---->");
        Integer eoId = null;
       
        System.out.println("Add Id-->"+adds_Id_value);
        ViewObjectImpl dcVO = this.getSlsDcVO();
      
        if (dcVO.getCurrentRow() != null) {

            eoId = Integer.parseInt(dcVO.getCurrentRow().getAttribute("EoId").toString());
        }
        Integer exec =
            (Integer)callStoredFunction(Types.NUMERIC, "SLS.fn_ins_eo_adds(?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                    getCldId(),
                                                                                                    getHoOrgId(),
                                                                                                    getOrgId(), eoId,
                                                                                                    adds_Id_value,
                                                                                                    getUserId() });
System.out.println("The value of returned function is :-"+exec);
        if(exec==1){
    dcVO.executeQuery();
    }

    }

}
