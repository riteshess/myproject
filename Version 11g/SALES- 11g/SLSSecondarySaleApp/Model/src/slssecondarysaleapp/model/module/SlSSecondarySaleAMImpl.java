package slssecondarysaleapp.model.module;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;
import oracle.jbo.domain.Number;
import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import slssecondarysaleapp.model.module.common.SlSSecondarySaleAM;
import slssecondarysaleapp.model.view.SlsSsVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 07 10:43:15 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlSSecondarySaleAMImpl extends ApplicationModuleImpl implements SlSSecondarySaleAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SlSSecondarySaleAMImpl() {
    }


    public void setItemSrNO() {
        ViewObjectImpl itmVo = this.getSlsSsItm1();
        RowSetIterator ctr = itmVo.createRowSetIterator(null);
        Row currentRow = itmVo.getCurrentRow();
        int srNo = 0;
        while (ctr.hasNext()) {
            Row r = ctr.next();
            if (r != currentRow) {
                Object sn = r.getAttribute("SrNo");
                if (sn != null) {
                    int s = (Integer)sn;
                    srNo = (s >= srNo ? s : srNo);
                }
            }
        }
        currentRow.setAttribute("SrNo", srNo + 1);

    }

    /**
     * Container's getter for LovItem1.
     * @return LovItem1
     */
    public ViewObjectImpl getLovItem1() {
        return (ViewObjectImpl)findViewObject("LovItem1");
    }

    public void generateAndSetSSId() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        Row currentRow = this.getSlsSs1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("SsId") == null) {
            try {
                StringBuffer QUOTE_DOC_NM =
                    new StringBuffer((callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)",
                                                         new Object[] { slocId, cldId.toString(), orgId.toString(),
                                                                        21514, null, null, "SLS$SS",
                                                                        currentRow.getAttribute("FyId") })).toString());
                currentRow.setAttribute("SsId", QUOTE_DOC_NM.toString());
                System.out.println("The genearted Id is:   " + QUOTE_DOC_NM + "----------------");
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'GEN_DISP_DOC_ID' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }

        }
    }

    /**
     * For resolving the El
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    //System.out.println("___________:"+bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Container's getter for SearchTrans1.
     * @return SearchTrans1
     */
    public ViewObjectImpl getSearchTrans1() {
        return (ViewObjectImpl)findViewObject("SearchTrans1");
    }

    public void SearchAction() {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));

        ViewObjectImpl tbl = this.getSlsSs1();
        ViewObjectImpl dul = this.getSearchTrans1();
        Row cR = this.getSearchTrans1().getCurrentRow();

        tbl.setNamedWhereClauseParam("SlocIdBind", slocId);
        tbl.setNamedWhereClauseParam("CldIdBind", cldId.toString());
        tbl.setNamedWhereClauseParam("OrgIdBind", orgId.toString());
        tbl.setNamedWhereClauseParam("HoOrgIDBind", hoOrgId.toString());
        tbl.setNamedWhereClauseParam("EoIdBind", cR.getAttribute("CustIdTrans"));
        tbl.setNamedWhereClauseParam("ShipmentIdBind", cR.getAttribute("ShipmentIdTrans"));

        tbl.executeQuery();


    }

    public void ResetAction() {
        System.out.println("---------------------2 amimpl");
        ViewObjectImpl rst = this.getSlsSs1();
        ViewObjectImpl trns = this.getSearchTrans1();
        rst.setNamedWhereClauseParam("EoIdBind", null);
        rst.setNamedWhereClauseParam("ShipmentIdBind", null);
        rst.setNamedWhereClauseParam("SlocIdBind", -1);
        rst.executeQuery();
        trns.executeQuery();
        System.out.println("-------------------------3");
    }

    /**
     * Container's getter for LovEoNmFromEoId1.
     * @return LovEoNmFromEoId1
     */
    public ViewObjectImpl getLovEoNmFromEoId1() {
        return (ViewObjectImpl)findViewObject("LovEoNmFromEoId1");
    }

    /**
     * Container's getter for SlsSs1.
     * @return SlsSs1
     */
    public ViewObjectImpl getSlsSs1() {
        return (ViewObjectImpl)findViewObject("SlsSs1");
    }

    /**
     * Container's getter for SlsSsItm1.
     * @return SlsSsItm1
     */
    public ViewObjectImpl getSlsSsItm1() {
        return (ViewObjectImpl)findViewObject("SlsSsItm1");
    }

    /**
     * Container's getter for SsToSsItemVL1.
     * @return SsToSsItemVL1
     */
    public ViewLinkImpl getSsToSsItemVL1() {
        return (ViewLinkImpl)findViewLink("SsToSsItemVL1");
    }

    public void executePageWithGlobalparam() {
        this.getSlsSs1().executeQuery();
        // this.getSearchLov1().executeQuery();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        SlsSsVOImpl impl = (SlsSsVOImpl)this.getSlsSs1();
        ViewCriteria dvc = getSlsSs1().getViewCriteria("SlsSsVOCriteria");
        impl.applyViewCriteria(dvc);
        impl.setNamedWhereClauseParam("SlocIdBind", sloc_id);
        impl.setNamedWhereClauseParam("CldIdBind", cld_id);
        impl.setNamedWhereClauseParam("HoOrgIDBind", ho_org_id);
        impl.setNamedWhereClauseParam("OrgIdBind", org_id);
        impl.setNamedWhereClauseParam("ShipmentIdBind", -1);
        impl.setNamedWhereClauseParam("EoIdBind", -1);
        impl.executeQuery();
    }

    public boolean ChkTableValidation() {
        ViewObjectImpl impl = this.getSlsSsItm1();
        RowSetIterator rsi = impl.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Number itmPrice=null;
            Number itmQty=null;
            oracle.jbo.domain.Number cmp = new oracle.jbo.domain.Number(0);
            Row curr = rsi.next();
            if(curr.getAttribute("ItmPrice")!=null){
              itmPrice  =(Number) curr.getAttribute("ItmPrice");
                itmQty=  (Number)  curr.getAttribute("ItmQty");
                }
            
            if (curr.getAttribute("ItmId") == null || curr.getAttribute("CustNm")== null || curr.getAttribute("ItmPrice")==null   ||cmp.compareTo(itmQty)==0||cmp.compareTo(itmPrice)==0 )
            {
           
                return false;
            }
        }
        return true;
    }

}
