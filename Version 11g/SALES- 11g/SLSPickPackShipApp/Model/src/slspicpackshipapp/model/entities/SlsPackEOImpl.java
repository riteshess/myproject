package slspicpackshipapp.model.entities;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import slspicpackshipapp.model.service.pickPackShipAMImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 08 12:31:31 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsPackEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(SlsPackEOImpl obj) {
                return obj.getCldId();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(SlsPackEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(SlsPackEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        HoOrgId {
            public Object get(SlsPackEOImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        DocId {
            public Object get(SlsPackEOImpl obj) {
                return obj.getDocId();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        DocDt {
            public Object get(SlsPackEOImpl obj) {
                return obj.getDocDt();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setDocDt((Timestamp)value);
            }
        }
        ,
        PackTypId {
            public Object get(SlsPackEOImpl obj) {
                return obj.getPackTypId();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setPackTypId((Integer)value);
            }
        }
        ,
        PackId {
            public Object get(SlsPackEOImpl obj) {
                return obj.getPackId();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setPackId((String)value);
            }
        }
        ,
        PackDimenLen {
            public Object get(SlsPackEOImpl obj) {
                return obj.getPackDimenLen();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setPackDimenLen((Number)value);
            }
        }
        ,
        PackDimenWid {
            public Object get(SlsPackEOImpl obj) {
                return obj.getPackDimenWid();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setPackDimenWid((Number)value);
            }
        }
        ,
        PackDimenHig {
            public Object get(SlsPackEOImpl obj) {
                return obj.getPackDimenHig();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setPackDimenHig((Number)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(SlsPackEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(SlsPackEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Timestamp)value);
            }
        }
        ,
        UsrIdMod {
            public Object get(SlsPackEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(SlsPackEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setUsrIdModDt((Timestamp)value);
            }
        }
        ,
        PackWt {
            public Object get(SlsPackEOImpl obj) {
                return obj.getPackWt();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setPackWt((Number)value);
            }
        }
        ,
        PickId {
            public Object get(SlsPackEOImpl obj) {
                return obj.getPickId();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setPickId((String)value);
            }
        }
        ,
        PickDt {
            public Object get(SlsPackEOImpl obj) {
                return obj.getPickDt();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setPickDt((Timestamp)value);
            }
        }
        ,
        DimenUnit {
            public Object get(SlsPackEOImpl obj) {
                return obj.getDimenUnit();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setDimenUnit((String)value);
            }
        }
        ,
        FyId {
            public Object get(SlsPackEOImpl obj) {
                return obj.getFyId();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setFyId((Integer)value);
            }
        }
        ,
        SlsPick {
            public Object get(SlsPackEOImpl obj) {
                return obj.getSlsPick();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setSlsPick((SlsPickEOImpl)value);
            }
        }
        ,
        SlsPackItm {
            public Object get(SlsPackEOImpl obj) {
                return obj.getSlsPackItm();
            }

            public void put(SlsPackEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SlsPackEOImpl object);

        public abstract void put(SlsPackEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int PACKTYPID = AttributesEnum.PackTypId.index();
    public static final int PACKID = AttributesEnum.PackId.index();
    public static final int PACKDIMENLEN = AttributesEnum.PackDimenLen.index();
    public static final int PACKDIMENWID = AttributesEnum.PackDimenWid.index();
    public static final int PACKDIMENHIG = AttributesEnum.PackDimenHig.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int PACKWT = AttributesEnum.PackWt.index();
    public static final int PICKID = AttributesEnum.PickId.index();
    public static final int PICKDT = AttributesEnum.PickDt.index();
    public static final int DIMENUNIT = AttributesEnum.DimenUnit.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int SLSPICK = AttributesEnum.SlsPick.index();
    public static final int SLSPACKITM = AttributesEnum.SlsPackItm.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsPackEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("slspicpackshipapp.model.entities.SlsPackEO");
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp)getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for PackTypId, using the alias name PackTypId.
     * @return the value of PackTypId
     */
    public Integer getPackTypId() {
        return (Integer)getAttributeInternal(PACKTYPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PackTypId.
     * @param value value to set the PackTypId
     */
    public void setPackTypId(Integer value) {
        setAttributeInternal(PACKTYPID, value);
    }

    /**
     * Gets the attribute value for PackId, using the alias name PackId.
     * @return the value of PackId
     */
    public String getPackId() {
        return (String)getAttributeInternal(PACKID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PackId.
     * @param value value to set the PackId
     */
    public void setPackId(String value) {
        setAttributeInternal(PACKID, value);
    }

    /**
     * Gets the attribute value for PackDimenLen, using the alias name PackDimenLen.
     * @return the value of PackDimenLen
     */
    public Number getPackDimenLen() {
        return (Number)getAttributeInternal(PACKDIMENLEN);
    }

    /**
     * Sets <code>value</code> as the attribute value for PackDimenLen.
     * @param value value to set the PackDimenLen
     */
    public void setPackDimenLen(Number value) {
        setAttributeInternal(PACKDIMENLEN, value);
    }

    /**
     * Gets the attribute value for PackDimenWid, using the alias name PackDimenWid.
     * @return the value of PackDimenWid
     */
    public Number getPackDimenWid() {
        return (Number)getAttributeInternal(PACKDIMENWID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PackDimenWid.
     * @param value value to set the PackDimenWid
     */
    public void setPackDimenWid(Number value) {
        setAttributeInternal(PACKDIMENWID, value);
    }

    /**
     * Gets the attribute value for PackDimenHig, using the alias name PackDimenHig.
     * @return the value of PackDimenHig
     */
    public Number getPackDimenHig() {
        return (Number)getAttributeInternal(PACKDIMENHIG);
    }

    /**
     * Sets <code>value</code> as the attribute value for PackDimenHig.
     * @param value value to set the PackDimenHig
     */
    public void setPackDimenHig(Number value) {
        setAttributeInternal(PACKDIMENHIG, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for PackWt, using the alias name PackWt.
     * @return the value of PackWt
     */
    public Number getPackWt() {
        return (Number)getAttributeInternal(PACKWT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PackWt.
     * @param value value to set the PackWt
     */
    public void setPackWt(Number value) {
        setAttributeInternal(PACKWT, value);
    }

    /**
     * Gets the attribute value for PickId, using the alias name PickId.
     * @return the value of PickId
     */
    public String getPickId() {
        return (String)getAttributeInternal(PICKID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PickId.
     * @param value value to set the PickId
     */
    public void setPickId(String value) {
        setAttributeInternal(PICKID, value);
    }

    /**
     * Gets the attribute value for PickDt, using the alias name PickDt.
     * @return the value of PickDt
     */
    public Timestamp getPickDt() {
        return (Timestamp)getAttributeInternal(PICKDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PickDt.
     * @param value value to set the PickDt
     */
    public void setPickDt(Timestamp value) {
        setAttributeInternal(PICKDT, value);
    }

    /**
     * Gets the attribute value for DimenUnit, using the alias name DimenUnit.
     * @return the value of DimenUnit
     */
    public String getDimenUnit() {
        return (String)getAttributeInternal(DIMENUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DimenUnit.
     * @param value value to set the DimenUnit
     */
    public void setDimenUnit(String value) {
        setAttributeInternal(DIMENUNIT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer)getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity SlsPickEOImpl.
     */
    public SlsPickEOImpl getSlsPick() {
        return (SlsPickEOImpl)getAttributeInternal(SLSPICK);
    }

    /**
     * Sets <code>value</code> as the associated entity SlsPickEOImpl.
     */
    public void setSlsPick(SlsPickEOImpl value) {
        setAttributeInternal(SLSPICK, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSlsPackItm() {
        return (RowIterator)getAttributeInternal(SLSPACKITM);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param hoOrgId key constituent
     * @param docId key constituent
     * @param docDt key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String hoOrgId, String docId,
                                       Timestamp docDt) {
        return new Key(new Object[]{cldId, slocId, orgId, hoOrgId, docId, docDt});
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**Method to resolve expression- returns Object value*/
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    /**Method to call database function*/
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        pickPackShipAMImpl am = (pickPackShipAMImpl)resolvElDC("pickPackShipAMDataControl");

        try {
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                System.out.println("stmt -----"+stmt);
            st = am.getDBTransaction().createCallableStatement("{? = " + stmt + "};", 0);   
            }
            else
            {    
                st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            } st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e);
                }
            }
        }
    }

    /****Methods to get Global Parameter*/
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        
        Integer p_user_id = getparamUsrId();
        Integer SlocId = getparamSlocId();
        String p_org_id = getparamOrgId();
        String p_cld_id = getparamCldId();
        String dcId =null;
        String driver=getdrivername();
        if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            dcId= (String)((callStoredFunction(Types.VARCHAR, "call get_txn_id (?,?,?,?,?,?)", new Object[] { p_cld_id,
                                                                                                        SlocId,
                                                                                                        p_org_id,
                                                                                                        p_user_id,
                                                                                                        new Integer(21506),
                                                                                                        new Integer(0) })));   
        }
        else
        { 
           dcId=  (String)((callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] { p_cld_id,
                                                                                                       SlocId,
                                                                                                       p_org_id,
                                                                                                       p_user_id,
                                                                                                       new Integer(21503),
                                                                                                       new Integer(0) })));
        }  System.out.println("Pack--DocId new created--" + dcId);
        setDocId(dcId);
        setDocDt(new Timestamp(System.currentTimeMillis()));
        setUsrIdCreate(p_user_id);
        setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        
        
        super.create(attributeList);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
      //  super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            setUsrIdMod(getparamUsrId());
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        }
        super.doDML(operation, e);
    }
    
    public String getdrivername()
    {         String   drivernme ="";
             pickPackShipAMImpl am = (pickPackShipAMImpl)resolvElDC("pickPackShipAMDataControl");
             DBTransaction dbTransaction = (DBTransaction) am.getTransaction();
             PreparedStatement prepStatement =
             dbTransaction.createPreparedStatement("select * from dual", 0);
             try
             {
               System.out.println("Driver name--"+prepStatement.getConnection().getMetaData().getDriverName());
               drivernme = prepStatement.getConnection().getMetaData().getDriverName();
             }
             catch (SQLException e)
             {
                 e.printStackTrace();
             }
             return drivernme;

             }

}
