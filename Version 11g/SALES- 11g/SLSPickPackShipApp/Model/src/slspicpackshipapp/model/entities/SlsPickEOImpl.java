package slspicpackshipapp.model.entities;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.SparseArray;
import oracle.jbo.server.TransactionEvent;

import slspicpackshipapp.model.service.pickPackShipAMImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 01 12:17:05 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsPickEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getCldId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        HoOrgId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        DocId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getDocId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        DocDt {
            public Object get(SlsPickEOImpl obj) {
                return obj.getDocDt();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setDocDt((Timestamp)value);
            }
        }
        ,
        DocTime {
            public Object get(SlsPickEOImpl obj) {
                return obj.getDocTime();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setDocTime((String)value);
            }
        }
        ,
        WhId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getWhId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setWhId((String)value);
            }
        }
        ,
        CloseFlg {
            public Object get(SlsPickEOImpl obj) {
                return obj.getCloseFlg();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setCloseFlg((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(SlsPickEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(SlsPickEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Timestamp)value);
            }
        }
        ,
        UsrIdMod {
            public Object get(SlsPickEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(SlsPickEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setUsrIdModDt((Timestamp)value);
            }
        }
        ,
        PickId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getPickId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setPickId((String)value);
            }
        }
        ,
        EoId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getEoId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setEoId((Integer)value);
            }
        }
        ,
        DlvAddsId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getDlvAddsId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setDlvAddsId((String)value);
            }
        }
        ,
        CurrConvFctr {
            public Object get(SlsPickEOImpl obj) {
                return obj.getCurrConvFctr();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setCurrConvFctr((Number)value);
            }
        }
        ,
        CurrIdSp {
            public Object get(SlsPickEOImpl obj) {
                return obj.getCurrIdSp();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setCurrIdSp((Integer)value);
            }
        }
        ,
        FyId {
            public Object get(SlsPickEOImpl obj) {
                return obj.getFyId();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setFyId((Integer)value);
            }
        }
        ,
        PickStat {
            public Object get(SlsPickEOImpl obj) {
                return obj.getPickStat();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setPickStat((Integer)value);
            }
        }
        ,
        SlsPickItm {
            public Object get(SlsPickEOImpl obj) {
                return obj.getSlsPickItm();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlsPack {
            public Object get(SlsPickEOImpl obj) {
                return obj.getSlsPack();
            }

            public void put(SlsPickEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SlsPickEOImpl object);

        public abstract void put(SlsPickEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int DOCTIME = AttributesEnum.DocTime.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int CLOSEFLG = AttributesEnum.CloseFlg.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int PICKID = AttributesEnum.PickId.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int DLVADDSID = AttributesEnum.DlvAddsId.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int PICKSTAT = AttributesEnum.PickStat.index();
    public static final int SLSPICKITM = AttributesEnum.SlsPickItm.index();
    public static final int SLSPACK = AttributesEnum.SlsPack.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsPickEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("slspicpackshipapp.model.entities.SlsPickEO");
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp)getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for DocTime, using the alias name DocTime.
     * @return the value of DocTime
     */
    public String getDocTime() {
        return (String)getAttributeInternal(DOCTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocTime.
     * @param value value to set the DocTime
     */
    public void setDocTime(String value) {
        setAttributeInternal(DOCTIME, value);
    }

    /**
     * Gets the attribute value for WhId, using the alias name WhId.
     * @return the value of WhId
     */
    public String getWhId() {
        return (String)getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WhId.
     * @param value value to set the WhId
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for CloseFlg, using the alias name CloseFlg.
     * @return the value of CloseFlg
     */
    public String getCloseFlg() {
        return (String)getAttributeInternal(CLOSEFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for CloseFlg.
     * @param value value to set the CloseFlg
     */
    public void setCloseFlg(String value) {
        setAttributeInternal(CLOSEFLG, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for PickId, using the alias name PickId.
     * @return the value of PickId
     */
    public String getPickId() {
        return (String)getAttributeInternal(PICKID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PickId.
     * @param value value to set the PickId
     */
    public void setPickId(String value) {
        setAttributeInternal(PICKID, value);
    }

    /**
     * Gets the attribute value for EoId, using the alias name EoId.
     * @return the value of EoId
     */
    public Integer getEoId() {
        return (Integer)getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoId.
     * @param value value to set the EoId
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for DlvAddsId, using the alias name DlvAddsId.
     * @return the value of DlvAddsId
     */
    public String getDlvAddsId() {
        return (String)getAttributeInternal(DLVADDSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DlvAddsId.
     * @param value value to set the DlvAddsId
     */
    public void setDlvAddsId(String value) {
        setAttributeInternal(DLVADDSID, value);
    }

    /**
     * Gets the attribute value for CurrConvFctr, using the alias name CurrConvFctr.
     * @return the value of CurrConvFctr
     */
    public oracle.jbo.domain.Number getCurrConvFctr() {
        return (oracle.jbo.domain.Number)getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrConvFctr.
     * @param value value to set the CurrConvFctr
     */
    public void setCurrConvFctr(oracle.jbo.domain.Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }

    /**
     * Gets the attribute value for CurrIdSp, using the alias name CurrIdSp.
     * @return the value of CurrIdSp
     */
    public Integer getCurrIdSp() {
        return (Integer)getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for CurrIdSp.
     * @param value value to set the CurrIdSp
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer)getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for PickStat, using the alias name PickStat.
     * @return the value of PickStat
     */
    public Integer getPickStat() {
        return (Integer)getAttributeInternal(PICKSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PickStat.
     * @param value value to set the PickStat
     */
    public void setPickStat(Integer value) {
        setAttributeInternal(PICKSTAT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSlsPickItm() {
        return (RowIterator)getAttributeInternal(SLSPICKITM);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSlsPack() {
        return (RowIterator)getAttributeInternal(SLSPACK);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param hoOrgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String hoOrgId, String docId) {
        return new Key(new Object[]{cldId, slocId, orgId, hoOrgId, docId});
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**Method to resolve expression- returns Object value*/
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    /**Method to call database function*/
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        pickPackShipAMImpl am = (pickPackShipAMImpl)resolvElDC("pickPackShipAMDataControl");

        try {
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                System.out.println("stmt -----"+stmt);

            st = am.getDBTransaction().createCallableStatement("{? = " + stmt + "};", 0);   
            }
            else
            {            
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            }
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e);
                }
            }
        }
    }

    /****Methods to get Global Parameter*/
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        Integer p_user_id = getparamUsrId();
        Integer SlocId = getparamSlocId();
        String p_org_id = getparamOrgId();
        String p_cld_id = getparamCldId();
        String dcId =null;
        String driver=getdrivername();
        if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            dcId= (String)((callStoredFunction(Types.VARCHAR, "call get_txn_id (?,?,?,?,?,?)", new Object[] { p_cld_id,
                                                                                                        SlocId,
                                                                                                        p_org_id,
                                                                                                        p_user_id,
                                                                                                        new Integer(21506),
                                                                                                        new Integer(0) })));   
        }
        else
        { 
            
             dcId=(String)((callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] { p_cld_id,
                                                                                                       SlocId,
                                                                                                       p_org_id,
                                                                                                       p_user_id,
                                                                                                       new Integer(21506),
                                                                                                       new Integer(0) })));
        }
        System.out.println("Pick--DocId new created--" + dcId);
        setDocId(dcId);
        setDocDt(new Timestamp(System.currentTimeMillis()));
        setUsrIdCreate(p_user_id);
        setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));

        Integer fyId = 0;
        try {
            StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
            StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
            //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                fyId =
                (Integer)callStoredFunction(Types.INTEGER, "call GET_ORG_FY_ID(?,?,?)", new Object[] { cldId.toString(),
                                                                                          orgId.toString(), getDocDt() });   
            }
            else
            { fyId =
(Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { cldId.toString(),
                                                                                      orgId.toString(), getDocDt() });
            }  System.out.println("FY :" + fyId);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' in EoImpl !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        setFyId(fyId);


        super.create(attributeList);
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
       /*  try {
            super.lock();
        } catch (Exception e) {
            checkInconsistentAttrs();
            e.printStackTrace();
        } */

    }

    private void checkInconsistentAttrs() {
        int count = getAttributeCount();
        // Store the current values of the attributes; we're going to munge them during the check
        Object[] currValues = new Object[count];
        boolean[] attributeChanges = new boolean[count];
        for (int i = 0; i < count; i++) {
            currValues[i] = getAttribute(i);
            attributeChanges[i] = isAttributeChanged(i);
            System.out.println("Current Value is : " + currValues[i] + " and it is : " + isAttributeChanged(i));
        }
        // Change all attribute values to match current DB values (good thing we saved them first!)
        refresh(REFRESH_WITH_DB_FORGET_CHANGES);
        // For each attribute...
        for (int i = 0; i < count; i++) {
            // compare the current value (from the DB) with the original value queried from DB.
            Object origValue = getPostedAttribute(i);
            Object currDbValue = getAttribute(i);
            // Watch your nulls! Nobody likes NPEs.
            if ((origValue == null && currDbValue != null) ||
                (origValue != null && (currDbValue == null || !origValue.equals(currDbValue)))) {
                // If they don't match, tell us about it.
                
                System.out.println("Inconsistent attribute " + getAttributeNames()[i]);
                System.out.println(" Queried from DB = " + origValue);
                System.out.println(" Now in DB = " + currDbValue);
            }
            // Set this EO instance back to the way it was
            if (attributeChanges[i]) {
                populateAttributeAsChanged(i, currValues[i]);
            } else {
                populateAttribute(i, currValues[i]);
            }
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            setUsrIdMod(getparamUsrId());
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        }
        super.doDML(operation, e);
    }
    /* protected boolean compare(SparseArray sparseArray) {
       // Removing the HIREDATE attribute from the array
       if (sparseArray != null && !sparseArray.isEmpty()) {
           for (int i=0; i<sparseArray.length(); i++) {
               Object value = sparseArray.get(i);
               if (value != null) {
                   if (i == PICKID) sparseArray.clear(i);
               }
           }
       }
       // Calling the standard compare method
       return super.compare(sparseArray);
    } */
    
    public String getdrivername()
    {         String   drivernme ="";
             pickPackShipAMImpl am = (pickPackShipAMImpl)resolvElDC("pickPackShipAMDataControl");
             DBTransaction dbTransaction = (DBTransaction) am.getTransaction();
             PreparedStatement prepStatement =
             dbTransaction.createPreparedStatement("select * from dual", 0);
             try
             {
               System.out.println("Driver name--"+prepStatement.getConnection().getMetaData().getDriverName());
               drivernme = prepStatement.getConnection().getMetaData().getDriverName();
             }
             catch (SQLException e)
             {
                 e.printStackTrace();
             }
             return drivernme;

             }

}
