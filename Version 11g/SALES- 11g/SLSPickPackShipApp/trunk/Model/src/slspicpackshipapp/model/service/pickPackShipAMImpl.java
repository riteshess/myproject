package slspicpackshipapp.model.service;


import adf.utils.bean.StaticValue;
import adf.utils.model.ADFModelUtils;
import java.math.BigDecimal;
import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Map;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.binding.BindingContainer;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.uicli.binding.JUCtrlListBinding;

import org.apache.myfaces.trinidad.context.RequestContext;

import slspicpackshipapp.model.service.common.pickPackShipAM;
import slspicpackshipapp.model.views.SlsPackVORowImpl;
import slspicpackshipapp.model.views.SlsPickVORowImpl;
import slspicpackshipapp.model.views.ViewMmStkSummBinVOImpl;
import slspicpackshipapp.model.views.ViewMmStkSummLotVOImpl;
import slspicpackshipapp.model.views.ViewSlsSoPickItmVOImpl;
import slspicpackshipapp.model.views.viewSlsSoPickVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 01 12:20:45 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class pickPackShipAMImpl extends ApplicationModuleImpl implements pickPackShipAM {
    private static ADFLogger _log = ADFLogger.createADFLogger(pickPackShipAMImpl.class);
    private Timestamp pickDateBean = null;
    private String ItmIdSearch = null;
    private String wareHouId = null;
    private StringBuffer ShipDocId = new StringBuffer("");
    private Integer itmAddFlg = 0;
    private String shipDocIdBind = null;

    /**
     * This is the default constructor (do not remove).
     */
    public pickPackShipAMImpl() {
    }

    /**
     * Container's getter for SlsPick1.
     * @return SlsPick1
     */
    public ViewObjectImpl getSlsPick1() {
        return (ViewObjectImpl)findViewObject("SlsPick1");
    }

    /**
     * Container's getter for SlsPickItm1.
     * @return SlsPickItm1
     */
    public ViewObjectImpl getSlsPickItm1() {
        return (ViewObjectImpl)findViewObject("SlsPickItm1");
    }

    /**
     * Container's getter for SlsPickTOSlsPickItmVL1.
     * @return SlsPickTOSlsPickItmVL1
     */
    public ViewLinkImpl getSlsPickTOSlsPickItmVL1() {
        return (ViewLinkImpl)findViewLink("SlsPickTOSlsPickItmVL1");
    }

    /**
     * Container's getter for viewSlsSoPick1.
     * @return viewSlsSoPick1
     */
    public viewSlsSoPickVOImpl getviewSlsSoPick1() {
        return (viewSlsSoPickVOImpl)findViewObject("viewSlsSoPick1");
    }

    /**
     * Container's getter for ViewSlsSoPickItm1.
     * @return ViewSlsSoPickItm1
     */
    public ViewSlsSoPickItmVOImpl getViewSlsSoPickItm1() {
        return (ViewSlsSoPickItmVOImpl)findViewObject("ViewSlsSoPickItm1");
    }

    /**
     * Container's getter for viewSlsSoPickTOviewSlsSoPickItmVL1.
     * @return viewSlsSoPickTOviewSlsSoPickItmVL1
     */
    public ViewLinkImpl getviewSlsSoPickTOviewSlsSoPickItmVL1() {
        return (ViewLinkImpl)findViewLink("viewSlsSoPickTOviewSlsSoPickItmVL1");
    }

    /*****Methods to be used in Managed bean *********/

    /**Methods to get Global Parameter.
     * @return
     */
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    /**
     * @return
     */
    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    /**
     * @return
     */
    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    /**
     * @return
     */
    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    /**
     * @return
     */
    public String getparamHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    /**Method to resolve expression- returns String value.
     * @param data
     * @return
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**Method to generate Sr No.
     * @param voName
     */
    public void serialNumGen(String voName) {
        /**New Code to get Serial No.- 6-03-2013-@Ashish Kumar*/
        ViewObject soItm = this.findViewObject(voName);
        Integer Srno = 0;
        Integer max = 0;
        soItm.setRangeSize(-1);
        Row row[] = soItm.getAllRowsInRange();
        for (Row r : row) {
            try {
                Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
            } catch (NullPointerException e) {
                Srno = 0;

            }
            if (Srno > max) {
                max = Srno;
            }
        }

        max = max + 1;
        _log.warning("Max Value is-->" + max);

        soItm.getCurrentRow().setAttribute("SrNo", max);
    }

    /**
     * @param data
     * @return
     */
    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }


    /**Method to filter tree according to pick date.
     * @param pickDate
     */
    public void filterOrderData(Timestamp pickDate) {

        ViewObjectImpl impl = this.getSlsPick1();
        Integer EoId = -1;
        String AddsId = null;
        String WhId = null;
        String SoIdTrans = null;
        String ItmNmBind = null;
        String ItmIdTrans = null;
        String pick_doc_id_bind = null;

        if (impl.getCurrentRow() != null) {
            System.out.println("Came in the Current row......!!!!!!!");
            Row currentRow = impl.getCurrentRow();

            if (currentRow.getAttribute("EoId") != null) {
                EoId = (Integer)currentRow.getAttribute("EoId");
                if (currentRow.getAttribute("DlvAddsId") != null) {
                    AddsId = currentRow.getAttribute("DlvAddsId").toString();
                }
                if (currentRow.getAttribute("WhId") != null) {
                    WhId = currentRow.getAttribute("WhId").toString();
                }
                if (currentRow.getAttribute("SoIdTrans") != null) {
                    SoIdTrans = currentRow.getAttribute("SoIdTrans").toString();
                }
                if (currentRow.getAttribute("ItmIdTrans") != null) {
                    ItmIdTrans = currentRow.getAttribute("ItmIdTrans").toString();
                }
                if (currentRow.getAttribute("DocId") != null) {
                    pick_doc_id_bind = currentRow.getAttribute("DocId").toString();
                    setShipDocIdBind(pick_doc_id_bind);
                }
                /* if(currentRow.getAttribute("ItmNmBind") != null){
                    ItmNmBind = currentRow.getAttribute("ItmNmBind").toString();
                } */
            }
        }
        System.out.println("Total id are:  ");
        System.out.println("EoId = " + EoId + "  AddsId " + AddsId + "  WhId " + WhId + "  SoIdTrans " + SoIdTrans +
                           "  ItmNmBind " + ItmNmBind + "  ItmIdTrans  " + ItmIdTrans + "  pick_doc_id_bind " +
                           pick_doc_id_bind);
        try {
            pickDate = new Timestamp(pickDate.dateValue());
        } catch (SQLException e) {
            // _log.info("In Exception-" + e);
        }
        //  _log.info("Pick Date is : " + pickDate + " Eo Id : " + EoId + " Adds Id :" + AddsId + " So Id : " + SoIdTrans +
        //  " Itm nm : " + ItmIdTrans + " WhId : " + WhId);
        ViewObject slssoPickVw = this.getviewSlsSoPick1();
        //_log.info("So Rows Before filter : "+slssoPickVw.getRowCount());
        slssoPickVw.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
        slssoPickVw.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
        slssoPickVw.setNamedWhereClauseParam("SlocIdBind", getparamSlocId());
        slssoPickVw.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        slssoPickVw.setNamedWhereClauseParam("eoIdBind", EoId);
        slssoPickVw.setNamedWhereClauseParam("SoDocIdBind", SoIdTrans);
        slssoPickVw.setNamedWhereClauseParam("ShipAddsBind", AddsId);
        slssoPickVw.setNamedWhereClauseParam("WhIdBind", WhId);


        try {
            //  _log.info("Date : " + pickDate.dateValue());
            //  _log.info("Timestamp : " + pickDate);
            slssoPickVw.setNamedWhereClauseParam("bindDlvDt", pickDate);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        //  _log.info("So Rows After filter : " + slssoPickVw.getRowCount());

        ViewObject slsSoPickItmVw = this.getViewSlsSoPickItm1();
        //slssoPickVw.executeQuery();
        if (doOrgUseTolerance().equals("Y")) {
            try {
                _log.info("Uses Tolerance");
                 _log.info("Date : " + pickDate.dateValue());
                  _log.info("Timestamp : " + pickDate);
                slssoPickVw.setNamedWhereClauseParam("TolernceDtBind", pickDate);
                slssoPickVw.setNamedWhereClauseParam("bindDlvDt", null);   //14 july 2014
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            //slsSoPickItmVw.setNamedWhereClauseParam("tolrnceDtBind", pickDate);
            slsSoPickItmVw.setNamedWhereClauseParam("tolrnceDtBind", pickDate);
            slsSoPickItmVw.setNamedWhereClauseParam("bindDlvDt", null);
        } else {
            try {
                _log.info("Do Not Use Tolerance");
                 _log.info("Date : " + pickDate.dateValue());
                  _log.info("Timestamp : " + pickDate);
                slssoPickVw.setNamedWhereClauseParam("bindDlvDt", pickDate);
                //slssoPickVw.setNamedWhereClauseParam("bindDlvDt1", pickDate);   // 14 july 2014
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            slsSoPickItmVw.setNamedWhereClauseParam("tolrnceDtBind", null);
            slsSoPickItmVw.setNamedWhereClauseParam("bindDlvDt", pickDate);
        }
        slsSoPickItmVw.setNamedWhereClauseParam("pick_doc_id_bind", pick_doc_id_bind);
        //   slssoPickVw.executeQuery();
        searchTreeasPerItmId(ItmIdTrans);


        slsSoPickItmVw.executeQuery();
        _log.info("Row Count after filter-->" + slsSoPickItmVw.getRowCount());
        _log.info("Value of Timestamp before casting is--" + pickDate);
        _log.info("Value of Timestamp is--" + pickDate);
        this.pickDateBean = pickDate;
        // To filter Item on the basis of WareHouse
        filterTreeWarehouse(WhId);
        // Filter It Using Key Attribute
        Row[] grpRow = slssoPickVw.getAllRowsInRange();
        _log.info("ROwCount : " + grpRow.length);
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet)r.getAttribute("ViewSlsSoPickItm");
               
                Row itmRow[] = childRows.getAllRowsInRange();
                for (Row ir : itmRow) {
                    _log.info("Dlv Date is-" + ir.getAttribute("DlvDt") + "and tolrenc dt is-" +
                        ir.getAttribute("DlvTlrncDays"));
                }
                //Execute Child Rowset
                //childRows.executeQuery();
            }
        }
        /* System.out.println("Query of view is: ");
        System.out.println(slsSoPickItmVw.getQuery());
        System.out.println("parameter in where clause: "); */

        /* Object[] clauseParams = slsSoPickItmVw.getWhereClauseParams();
        for (Object o : clauseParams) {
            System.out.println(o);
        } */
    }

    /**Method to Filter TreeTable Childs (As Per Items).
     * @param itmId
     */
    public void searchTreeasPerItmId(String itmId) {
        ViewObject slssoPickVw = this.getviewSlsSoPick1();
        ViewObject slsSoPickItmVw = this.getViewSlsSoPickItm1();
        slssoPickVw.executeQuery();
        slsSoPickItmVw.executeQuery();
        this.setItmIdSearch(itmId);
        // Filter It Using Key Attribute
        Row[] grpRow = slssoPickVw.getAllRowsInRange();
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet)r.getAttribute("ViewSlsSoPickItm");
                //  _log.info("Rows in ViewLink-->" + childRows.getRowCount());
                //Execute Child Rowset
                childRows.executeQuery();
            }
        }
    }

    /**Method to Populate Item in Picklist from Tree on pick date basis.
     * @param curRow
     */
    public void populateItemToPickList(Row curRow) {
        _log.info("curRow in amimpl is ==" + curRow);
        itmAddFlg = 1;
        String flag = "Y";
        ViewObjectImpl slsPickItm = this.getSlsPickItm1();
        //ViewObjectImpl
        ViewObject slsPick = this.getSlsPick1();
        Row pickRow = slsPick.getCurrentRow();
        ViewObject slsSoPick = this.getviewSlsSoPick1();

        curRow.setAttribute("SelectItemChkBxTrans", "Y");
        //  _log.info("Select Item Val->" + curRow.getAttribute("SelectItemChkBxTrans") + "itm  is-->" +
        //  curRow.getAttribute("ItmIdSo"));

        //     _log.info("Total Row in itm-" + slsPickItm.getRowCount());
        RowQualifier rq = new RowQualifier(slsPickItm);
        rq.setWhereClause("SoId='" + curRow.getAttribute("DocId") + "' and ItmId='" + curRow.getAttribute("ItmIdSo") +
                          "' and DlvDt='" + curRow.getAttribute("DlvDt") + "'");
        //  _log.info("Where Clause is-->" + rq.getExprStr());
        Row fltrdRows[] = slsPickItm.getFilteredRows(rq);
        _log.info("Total Row for This Itm->" + fltrdRows.length);

        if (fltrdRows.length == 0) {

            _log.info("Currency in PickList header-" + pickRow.getAttribute("CurrIdSp") + "and in tree child-" +
                      curRow.getAttribute("CurrIdSp"));
            if (pickRow.getAttribute("CurrIdSp") == null) {
                pickRow.setAttribute("CurrIdSp", curRow.getAttribute("CurrIdSp"));
                pickRow.setAttribute("CurrConvFctr", curRow.getAttribute("CurrConvFctr"));
                slsSoPick.setNamedWhereClauseParam("currIdSpBind", curRow.getAttribute("CurrIdSp"));
                slsSoPick.executeQuery();

            } else {
                Integer pickCurrId = Integer.parseInt(pickRow.getAttribute("CurrIdSp").toString());
                Integer currIdOrd = Integer.parseInt(curRow.getAttribute("CurrIdSp").toString());
                if (pickCurrId.compareTo(currIdOrd) != 0) {
                    flag = "N";
                    //FacesMessage errMsg = new FacesMessage("Can not select Sales Order of different currency");
                    FacesMessage errMsg = new FacesMessage(resolvElDCMsg("#{bundle['MSG.966']}").toString());

                    errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, errMsg);
                } else {
                    flag = "Y";
                }
            }

            if (flag.equalsIgnoreCase("Y")) {
                Row newRow = slsPickItm.createRow();
                slsPickItm.insertRow(newRow);
                serialNumGen("SlsPickItm1");
                //    _log.info("__________________________________________________ 1");
                newRow.setAttribute("SoId", curRow.getAttribute("DocId"));
                //   _log.info("__________________________________________________ 2");
                newRow.setAttribute("ItmId", curRow.getAttribute("ItmIdSo"));
                //   _log.info("__________________________________________________ 2.1");
                if (this.getSlsPick1().getCurrentRow() != null) {
                    //    _log.info("__________________________________________________ 2.2");
                    SlsPickVORowImpl row = (SlsPickVORowImpl)this.getSlsPick1().getCurrentRow();
                    Row[] filteredRows = row.getLovBarcodeVO1().getFilteredRows("ItmId", row.getItmIdTrans());
                    //   _log.info("__________________________________________________ 2.3 + " + filteredRows.length);
                    if (filteredRows.length > 0 && filteredRows[0].getAttribute("BcNo") != null) {
                        //  _log.info("__________________________________________________ 2.4");

                        newRow.setAttribute("BcNo", (String)filteredRows[0].getAttribute("BcNo"));
                        //  System.out.println("BcNo is :" + filteredRows[0].getAttribute("BcNo"));

                    }
                }

                //setAttribute("PickQty"
                //_log.info("__________________________________________________ 3");
                newRow.setAttribute("ItmUom", curRow.getAttribute("ItmUomSo"));
                //_log.info("__________________________________________________ 4");
                newRow.setAttribute("SoItmQty", curRow.getAttribute("PendingQty"));
                //  _log.info("__________________________________________________ 5 _____ So Item Quantity : " +
                //     curRow.getAttribute("PendingQty"));
                newRow.setAttribute("DlvDt", curRow.getAttribute("DlvDt"));
                //  _log.info("__________________________________________________ 6");
                newRow.setAttribute("PickQty", curRow.getAttribute("SchdlQuantTrans"));
                //  _log.info("__________________________________________________ 7 _____ So pick Quantity :" +
                //  curRow.getAttribute("SchdlQuantTrans"));
                System.out.println("Value of item quantity :  " + curRow.getAttribute("ItmRate") + "--------");
                newRow.setAttribute("ItmPrice", curRow.getAttribute("ItmRate"));
                //_log.info("__________________________________________________ 8");
                newRow.setAttribute("SoDt", curRow.getAttribute("SoDt"));
                //_log.info("__________________________________________________ 9");
                Number totQty = (Number)curRow.getAttribute("PendingQty");
                //_log.info("__________________________________________________ 10");
                Number pickedQty = (Number)curRow.getAttribute("SchdlQuantTrans");
                //_log.info("__________________________________________________ 11");
                newRow.setAttribute("BalQty", totQty.subtract(pickedQty));
                //_log.info("__________________________________________________ 12");
                String baseUom = getBaseUom(newRow.getAttribute("ItmId").toString());
                //_log.info("__________________________________________________ 13");


                BigDecimal convFctr =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)",
                                                   new Object[] { getparamSlocId(), getparamCldId(), getparamOrgId(),
                                                                  newRow.getAttribute("ItmId"), baseUom,
                                                                  newRow.getAttribute("ItmUom") });
                Number uomFctr = new Number(1);
                //    _log.info("__________________________________________________ 14");

                try {
                    uomFctr = new Number(convFctr);
                } catch (Exception e) {
                    _log.info(e);
                }
                //  _log.info("__________________________________________________ 15");
                //  _log.info("Base UOm is-" + baseUom + "Factor is-" + uomFctr + "Qty Bs-" + totQty.multiply(uomFctr));
                newRow.setAttribute("ItmUomBs", baseUom);
                //  _log.info("__________________________________________________ 16");
                newRow.setAttribute("UomConvFctr", uomFctr);
                //  _log.info("__________________________________________________ 17");
                //newRow.setAttribute("ItmQtyBs", totQty.multiply(uomFctr));   change on 16 july 2014
                newRow.setAttribute("ItmQtyBs", pickedQty.multiply(uomFctr));

                _log.info("Row Inserted--");
            }
        } else {
            System.out.println("enter in else");
            Number prevPickQty = StaticValue.NUMBER_ZERO;
            prevPickQty = (Number)fltrdRows[0].getAttribute("PickQty");
            Number curPickQty = StaticValue.NUMBER_ZERO;
            curPickQty = (Number)curRow.getAttribute("SchdlQuantTrans");
            _log.info("__________________________________________________ set 1");
            Number totQty = (Number)curRow.getAttribute("PendingQty");
            _log.info("__________________________________________________ set 3");
            Number penddingQnt = (Number)fltrdRows[0].getAttribute("BalQty"); //added by Rohit
            _log.info("Previous Qty-" + prevPickQty + "And Current Qty-" + curPickQty + " penddingQnt =" +
                      penddingQnt + " totQty =" + totQty);
            fltrdRows[0].setAttribute("PickQty", (prevPickQty.add(curPickQty)));
            fltrdRows[0].setAttribute("BalQty", totQty.subtract(curPickQty)); //added by Rohit
            //
            /* FacesMessage errMsg = new FacesMessage("Item Quantity is updated in PickList for this Sales Order"); */
            FacesMessage errMsg = new FacesMessage(resolvElDCMsg("#{bundle['MSG.967']}").toString());

            errMsg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
        }
        //  _log.info("__________________________________________________ 18");
        getFYidOrgPick(getparamCldId(), getparamOrgId());
        // _log.info("__________________________________________________ 19");
        this.getDBTransaction().validate();

        // _log.info("__________________________________________________ 20");
        this.getDBTransaction().postChanges();
        // _log.info("__________________________________________________ 21");
        this.getViewSlsSoPickItm1().executeQuery();
        //  _log.info("__________________________________________________ 22");
        slsPickItm.executeQuery();
        // _log.info("__________________________________________________ 23");
        // Filter It Using Key Attribute
        Row[] grpRow = this.getviewSlsSoPick1().getAllRowsInRange();
        //  _log.info("__________________________________________________ 24");
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            //  _log.info("__________________________________________________ 25");
            for (Row r : grpRow) {
                // _log.info("_______________________________________________________________ 26");
                RowSet childRows = (RowSet)r.getAttribute("ViewSlsSoPickItm");
                // _log.info("Rows in ViewLink-->" + childRows.getRowCount());
                //Execute Child Rowset
                childRows.executeQuery();
            }
        }
        //  _log.info("__________________________________________________ 27");
        this.getviewSlsSoPick1().executeQuery();
        _log.info("__________________________________________________ 28");

        itmAddFlg = 0;


    }

    /**
     * at the time of Insertion updating cost in lot through calling this function.
     * @param lotId
     * @param pickQty
     * @return
     */
    public Number getPriceForLot(String lotId, Number pickQty) {
        _log.info("getPriceForLot : ");
        ViewObject slsPick = getSlsPick1();
        Row cRow = slsPick.getCurrentRow();
        String whId = null;
        ViewObject slsPickItm = getSlsPickItm1();
        Row cItmRow = slsPickItm.getCurrentRow();
        Number multiply = StaticValue.NUMBER_ZERO;
        Number avail = StaticValue.NUMBER_ZERO;
        try {
            whId = cRow.getAttribute("WhId").toString();
            // _log.info("whId : == " + whId);
            // _log.info("lotId : == " + lotId);
            //  _log.info("cItmRow.getAttribute Item Id : == " + cItmRow.getAttribute("ItmId"));
            StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
            //  _log.info("orgId : == " + orgId);
            //  _log.info("Fy Id: == " + getFyId(new Timestamp(System.currentTimeMillis()), orgId.toString()));
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            // _log.info("p_sloc_id : == " + p_sloc_id);
            StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
            //  _log.info("cldId : == " + cldId.toString());
            BigDecimal availBD =
                (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)",
                                               new Object[] { cldId.toString(), p_sloc_id, orgId.toString(), whId,
                                                              cItmRow.getAttribute("ItmId"), lotId,
                                                              getFyId(new Timestamp(System.currentTimeMillis()),
                                                                      orgId.toString()) });
            // _log.info("getPriceForLot :  availBD == " + availBD);
            avail = new Number(availBD);
            // _log.info("getPriceForLot :  avail == " + avail);
            multiply = (Number)pickQty.multiply(new Number(avail));
            // _log.info("Item Lot Cost : " + multiply);
            return multiply;
        } catch (Exception e) {
            e.printStackTrace();
            return multiply;
        }

    }


    /**To Add Item Lot Wise
     * Method to select lot for item (If Organisation is not using bin and Items are not serialised).
     * @return
     */
    public String insertIntoPickItmLot() {
        ViewObjectImpl mtlItm = this.getSlsPickItm1();
        ViewObjectImpl mtlLot = this.getSlsPickIssuLot1();

        Row currItm = mtlItm.getCurrentRow();
        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getViewMmStkSummLot1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("lenth sr     " + srRow.length);
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((oracle.jbo.domain.Number)rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {
                        // Filter Lot Table to ckeck Lot exist or not, Basis of DocId , SoId , ItmId and LotId
                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and SoId ='" +
                                                    currItm.getAttribute("SoId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        _log.info("" + rowQualifier.getExprStr());
                        // Check that Lot exist or not for that item
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((oracle.jbo.domain.Number)rr.getAttribute("TransIssuQtyValue")).compareTo(zero) ==
                                    0) {
                                    _log.info("Lot remove-------------------");
                                    System.out.println("removing row is:   " + r + "----------------!");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number)rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >
                                           0) {

                                    _log.info("Lot Update -------------------");
                                    r.setAttribute("PickQty", rr.getAttribute("TransIssuQtyValue"));
                                    r.setAttribute("PickQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                    // Changes done for Tolerance - start
                                    r.setAttribute("DlvDt", currItm.getAttribute("DlvDt"));
                                    // Changes done for Tolerance - end

                                    String lotId = rr.getAttribute("LotId").toString();
                                    Number qty = (Number)rr.getAttribute("TransIssuQtyValue");
                                    

                                    _log.info(" key :" + lotId + " lotval :" + qty);
                                    if (this.getPriceForLot(lotId, qty) != null) {
                                        r.setAttribute("ItmLotCost", this.getPriceForLot(lotId, qty));
                                    }
                                    System.out.println("updated row is:   " + r + "----------------!");
                                }
                            }
                        } else {

                            if (((oracle.jbo.domain.Number)rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("PickQty", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("PickQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("SoId", currItm.getAttribute("SoId"));
                                lotInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                                lotInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                // Changes done for Tolerance - start
                                lotInst.setAttribute("DlvDt", currItm.getAttribute("DlvDt"));
                                // Changes done for Tolerance - end
                                String lotId = rr.getAttribute("LotId").toString();
                                Number qty = (Number)rr.getAttribute("TransIssuQtyValue");
                                _log.info(" lotId :" + lotId + " lotval :" + qty);
                                if (this.getPriceForLot(lotId, qty) != null) {
                                    lotInst.setAttribute("ItmLotCost", this.getPriceForLot(lotId, qty));
                                }
                                mtlLot.insertRow(lotInst);
                                mtlLot.executeQuery();

                                System.out.println("inserted row is:   " + lotInst + "----------------!");
                            }
                        }

                    }
                } else {
                    RowQualifier rowQualifier = new RowQualifier(mtlLot);
                    rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and SoId ='" +
                                                currItm.getAttribute("SoId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                rr.getAttribute("LotId").toString() + "'");
                    Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                    for (Row r : rows) {
                        r.remove();
                    }
                }

                //   getDBTransaction().postChanges(); // 1 july 2014
            }
        }
        return null;
    }


    /**To Select Bin and Lot for Item
     * Method to select lot and bin for item (If Organisation is using bin and Items are not serialised).
     */
    public void insertIntoPickItmBin() {
        _log.info("=====insertIntoPickItmBin method of am impl=======");

        ViewObjectImpl mtlItm = this.getSlsPickItm1();
        ViewObjectImpl mtlBin = this.getSlsPickIssuBin1();
        ViewObjectImpl mtlLot = this.getSlsPickIssuLot1();
        Row currItm = mtlItm.getCurrentRow();
        // Key lotCurrRowKey = null;
        //  Key binCurrRowKey = null;
        _log.info("currItm==" + currItm);
        Number zero = StaticValue.NUMBER_ZERO;
        _log.info("currItm.getAttribute(\"ItmId\")" + currItm.getAttribute("ItmId"));
        ViewObjectImpl mmStkSummBinVo = this.getViewMmStkSummBin1();
        RowQualifier mmStkSummBinRq = new RowQualifier(mmStkSummBinVo);
        mmStkSummBinRq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() +
                                      " and OrgId='" + getparamOrgId() + "' and ItmId='" +
                                      currItm.getAttribute("ItmId"));
        Row[] binRow = mmStkSummBinVo.getFilteredRows(mmStkSummBinRq);
        _log.info(" clause for mmstk summ bin vo " + mmStkSummBinRq.getExprStr() + " and Filtererd row length " +
                  binRow.length);
        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number)r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        _log.info("lot id Bin-- " + lotId);
                    }
                }
            }
            _log.info(" Lot ArrayList size " + arrlist.size() + " arrlist " + arrlist);
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        _log.info(" Lot size  " + lotset.size() + " lotset " + lotset);
        Iterator itr = lotset.iterator();

        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = StaticValue.NUMBER_ZERO;
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number)r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number)r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            _log.info(" lot id   ---" + lotId + "----qty------" + lotQty);

            // Check lot already created or not

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" SoId ='" + currItm.getAttribute("SoId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("PickQty", lotQty);
                    r.setAttribute("PickQtyBs", lotQty);
                    _log.info(" key :" + lotId + " lotval :" + lotQty);
                    if (this.getPriceForLot(lotId, lotQty) != null) {
                        r.setAttribute("ItmLotCost", this.getPriceForLot(lotId, lotQty));
                    }
                    //lotCurrRowKey = r.getKey();
                    this.getSlsPickIssuLotVO1().executeQuery();
                }
            } else {
                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("PickQty", lotQty);
                instLot.setAttribute("PickQtyBs", lotQty);
                instLot.setAttribute("SoId", currItm.getAttribute("SoId"));
                instLot.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                instLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                _log.info(" key :" + lotId + " lotval :" + lotQty);
                if (this.getPriceForLot(lotId, lotQty) != null) {
                    instLot.setAttribute("ItmLotCost", this.getPriceForLot(lotId, lotQty));
                }
                _log.info("So Id in Lot -->" + currItm.getAttribute("SoId") + "and SoDate is-->" +
                          currItm.getAttribute("SoDt"));
                //   lotCurrRowKey = instLot.getKey();

                mtlLot.executeQuery();
                this.getSlsPickIssuLotVO1().executeQuery();
            }
        }
        if (mtlLot.getRowCount() > lotset.size()) {
            RowSetIterator mtlitr = mtlLot.createRowSetIterator(null);
            //Iterator<String> iterator = lotset.iterator();
            while (mtlitr.hasNext()) {
                System.out.println("Set 1");
                Row next = mtlitr.next();
                String lid = next.getAttribute("LotId").toString();
                System.out.println("ro wid " + lid + " lotset.contains(lid) " + lotset.contains(lid));
                if (!(lotset.contains(lid))) {
                    System.out.println("remove");
                    next.remove();
                }
            }
            mtlitr.closeRowSetIterator();

            // mtlLot.executeQuery();
            // mtlLot.clearCache();
            this.getSlsPickIssuLotVO1().executeQuery();
            this.getSlsPickIssuLotVO1().clearCache();
        }
        _log.info("----------" + lotset);
        if (binRow.length > 0) {
            System.out.println("entring qty in bin logic");
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number)rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        _log.info("Condition true create Bin");

                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" SoId ='" + currItm.getAttribute("SoId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        _log.info("" + rowQualifier.getExprStr());
                        _log.info("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number)rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    _log.info("bin row removed ----------");
                                    r.remove();
                                } else if (((Number)rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    _log.info("bin row update ----------");
                                    r.setAttribute("PickQty", rr.getAttribute("TransIssueQty"));
                                    r.setAttribute("PickQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number)rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                _log.info("row created in  bin ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("PickQty", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("PickQtyBs", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                mtlBin.insertRow(binInst);
                                //   binCurrRowKey = binInst.getKey();
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        _log.info("clering cache");

        // Row rrr = mtlLot.getRow(lotCurrRowKey);
        //  mtlLot.setCurrentRow(rrr);
        mmStkSummBinVo.clearCache();
        //  Key k = mtlItm.getCurrentRow().getKey();
        // Row currowofitm = mtlItm.getRow(k);
        // mtlItm.executeQuery();
        //  mtlItm.setCurrentRow(currowofitm);
    }

    /**To Select Bin,Lot and SrNo for Item
     * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised).
     * 
     */
    public void insertIntoPickItmSr() {

        ViewObjectImpl mtlItm = this.getSlsPickItm1();
        ViewObjectImpl mtlSr = this.getSlsPickIssuSr1();
        ViewObjectImpl mtlBin = this.getSlsPickIssuBin1();
        ViewObjectImpl mtlLot = this.getSlsPickIssuLot1();

        ViewObjectImpl viewSummSr = this.getViewMmStkSummSr1();

        Row currItm = mtlItm.getCurrentRow();

        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

        Row[] srRow = viewSummSr.getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("lenth sr     " + srRow.length);

        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        _log.info("lot id new    " + lotId);
                    }
                }
            }
            _log.info(" array size " + arrlist);
        }

        // Using Set to remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);

        System.out.println("The array list is:   \n" +
                arrlist);
        System.out.println("The set list is:   \n" +
                lotset);


        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotval = StaticValue.NUMBER_ZERO;
            try {
                lotval = new Number(lotQty);
            } catch (Exception e) {
                _log.info(e);
            }
            _log.info(key + ": " + Collections.frequency(arrlist, key) + "------" + lotval);

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" SoId ='" + currItm.getAttribute("SoId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                _log.info("Lot ALready added- now updating values");
                for (Row r : rows) {
                    r.setAttribute("PickQty", lotval);
                    r.setAttribute("PickQtyBs", lotval);
                    _log.info(" key :" + key + " lotval :" + lotval);
                    if (this.getPriceForLot(key, lotval) != null) {
                        r.setAttribute("ItmLotCost", this.getPriceForLot(key, lotval));
                    }
                }
            } else {
                _log.info("Creating new Lot--");
                Row insrtLot = mtlLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("PickQty", lotval);
                insrtLot.setAttribute("PickQtyBs", lotval);
                insrtLot.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                _log.info(" key :" + key + " lotval :" + lotval);
                if (this.getPriceForLot(key, lotval) != null) {
                    insrtLot.setAttribute("ItmLotCost", this.getPriceForLot(key, lotval));
                }
                mtlLot.insertRow(insrtLot);
            }
            mtlLot.executeQuery();

        }

        //for removing the lot row which are not selected over the pop up.
        if (mtlLot.getRowCount() > lotset.size()) {
            RowSetIterator itr = mtlLot.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                String att = next.getAttribute("LotId").toString();
                if (!lotset.contains(att)) {
                    next.remove();
                }
            }
            itr.closeRowSetIterator();
        }

        Iterator i = lotset.iterator();
        _log.info("----------" + lotset);

        // Add Bin in bin Table for using lotSet Value When organisation using Bin pageflow scope check is- binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            int totBinCount = 0;
            Integer binQty = 0;
            Number binval = StaticValue.NUMBER_ZERO;
            while (i.hasNext()) {
                String lot = (String)i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                _log.info("-lot in bin-----" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoChkBxTrans") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoChkBxTrans").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                            System.out.println("Bin no is: ---- " + r2.getAttribute("BinId").toString());
                        }
                    }
                }
                totBinCount += arrListbin.size();
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                System.out.println("Bin set is:  ---- " + binSet);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    binQty = Collections.frequency(arrListbin, key);
                    binval = StaticValue.NUMBER_ZERO;
                    _log.info("Quantity in Bin-" + binQty);

                    try {
                        binval = new Number(binQty);
                    } catch (SQLException e) {
                        _log.info(e);
                    }

                    // Check bin already created or not

                    RowQualifier rowQualifier = new RowQualifier(mtlBin);
                    rowQualifier.setWhereClause(" SoId ='" + currItm.getAttribute("SoId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId = '" + key + "'");
                    Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                    if (rows.length > 0) {
                        for (Row bRow : rows) {
                            _log.info("Bin Already Added- Update existing");
                            bRow.setAttribute("PickQty", binval);
                            bRow.setAttribute("PickQtyBs", binval);
                        }
                    } else {
                        _log.info("Create New Bin--Creating----");
                        Row binInst = mtlBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("PickQty", binval);
                        binInst.setAttribute("PickQtyBs", binval);
                        binInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                        binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                        mtlBin.insertRow(binInst);
                    }
                }
                Row[] filteredRows = mtlBin.getFilteredRows("LotId", lot);
                if (filteredRows.length > binSet.size()) {
                    for (Row r : filteredRows) {
                        if (r.getAttribute("BinId") != null && !binSet.contains(r.getAttribute("BinId").toString())) {
                            System.out.println("bin id is going to remove :  " + r.getAttribute("BinId").toString());
                            r.remove();
                        }
                    }
                }
                mtlBin.executeQuery();
            }
            System.out.println("Total bin in selected: " + totBinCount);
            System.out.println("Total bin in table: " + srRow.length);

            // 5 july 2014 for removing un alloted extra bin entries.
            if (totBinCount < mtlBin.getRowCount()) {
                RowSetIterator itr = mtlBin.createRowSetIterator(null);
                while (itr.hasNext()) {
                    Row next = itr.next();
                    Object attribute = next.getAttribute("LotId").toString();
                    if (!lotset.contains(attribute)) {
                        next.remove();
                    }
                }
                itr.closeRowSetIterator();
            }

        }

        if (srRow.length > 0) {

            // this code is written on 07july 2014
            mtlSr.executeQuery();
            RowSetIterator itr = mtlSr.createRowSetIterator(null);
            while (itr.hasNext()) {
                itr.next().remove();
            }
            itr.closeRowSetIterator();
            //----------------------------07-july 2014

            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        _log.info("Insert Serial Number--");
                        Row srInst = mtlSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("PickQty", new Number(1));
                        srInst.setAttribute("PickQtyBs", new Number(1));
                        srInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                        mtlSr.insertRow(srInst);
                        mtlSr.executeQuery();
                    }
                }
            }
        }
        this.getDBTransaction().postChanges();
    }


    /**Method to filter Stock Summary View for Serial Number.
     */
    public void filterPickSrNoTable() {
        ViewObjectImpl issItm = this.getSlsPickItm1();
        Row curRow = issItm.getCurrentRow();
        this.getViewMmStkSummSr1().setWhereClause("SR_NO NOT IN (SELECT SR_NO from SLS$PICK$ISSU$SR where itm_id = '" +
                                                  curRow.getAttribute("ItmId").toString().toString() + "')");
        this.getViewMmStkSummSr1().executeQuery();
    }

    /**Method to call database function.
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            _log.fine("____________________________________________________________________ 1");
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    _log.fine("" + bindVars[z]);
                }
            }
            st.executeUpdate();
            _log.fine("____________________________________________________________________ 2");
            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage().substring(end));
            // throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    _log.info(e);
                }
            }
        }
    }


    /**
     * Method used to call function to get the fy id and Set in SLS$PICK.
     * @param CldId
     * @param OrgId
     * @return FY Id
     */
    public Integer getFYidOrgPick(String CldId, String OrgId) {
        ViewObjectImpl slspick = this.getSlsPick1();
        Integer fyId = 0;
        _log.info("PicDocDate --" + slspick.getCurrentRow().getAttribute("DocDt"));
        if (slspick.getCurrentRow().getAttribute("DocDt") != null) {
            fyId =
(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] { CldId, OrgId,
                                                                                        slspick.getCurrentRow().getAttribute("DocDt") }));


            if (fyId > 0 && slspick.getCurrentRow().getAttribute("FyId") == null) {
                _log.info("Set FY id in Pick");
                slspick.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        _log.info("Fyid Pick is--" + fyId);
        return fyId;
    }

    /**
     * Method used to call function to get the fy id and Set in SLS$PACK.
     * @param CldId
     * @param OrgId
     * @return FY Id
     */
    public Integer getFYidOrgPack(String CldId, String OrgId) {
        ViewObjectImpl slspack = this.getSlsPack1();
        Integer fyId = 0;
        //  _log.info("DocDate --" + slspack.getCurrentRow().getAttribute("DocDt"));
        if (slspack.getCurrentRow().getAttribute("DocDt") != null) {
            fyId =
(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] { CldId, OrgId,
                                                                                        slspack.getCurrentRow().getAttribute("DocDt") }));


            if (fyId > 0 && slspack.getCurrentRow().getAttribute("FyId") == null) {
                //  _log.info("Set FY id in Pick");
                slspack.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        _log.info("Fyid Pick is--" + fyId);
        return fyId;
    }


    /**Methhod to generate display id.
     * @param flag
     * @return
     */
    public String generateDispDocNo(String flag) {
        /* this.getDBTransaction().commit();
        _log.info("Commited"); */

        Integer docId = 0;
        String ret = null;

        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        _log.info("Flag is--" + flag);

        if (flag.equalsIgnoreCase("pick")) {
            ViewObject vo = this.getSlsPick1();
            // vo.executeQuery();
            Row curRow = vo.getCurrentRow();
            docId = 21506;
            String p_doc_id = curRow.getAttribute("DocId").toString();
            _log.info("Inside Pick--doc_id=" + p_doc_id);
            if (curRow.getAttribute("PickId") == null) {
                ret =
callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] { p_sloc_id, p_cldId, p_org_id,
                                                                                         docId, p_doc_id,
                                                                                         new Integer(0), "SLS$PICK",
                                                                                         getFYidOrgPick(p_cldId,
                                                                                                        p_org_id) }).toString();
                _log.info("Value Set in Current Row---" + ret);
                curRow.setAttribute("PickId", ret);
            } else {
                ret = curRow.getAttribute("PickId").toString();
            }
            executePickViewObjects();
        } else if (flag.equalsIgnoreCase("pack")) {
            ViewObject vo = this.getSlsPack1();

            Row curRow = vo.getCurrentRow();
            docId = 21507;
            String p_doc_id = curRow.getAttribute("DocId").toString();
            // vo.executeQuery();
            System.out.println("doc id === " + p_doc_id);
            if (curRow.getAttribute("PackId") == null) {
                System.out.println("when pack id is null");
                ret =
callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] { p_sloc_id, p_cldId, p_org_id,
                                                                                         docId, p_doc_id,
                                                                                         new Integer(0), "SLS$PACK",
                                                                                         getFYidOrgPack(p_cldId,
                                                                                                        p_org_id) }).toString();
                System.out.println("Value Set in Current Row---" + ret);
                curRow.setAttribute("PackId", ret);
                this.getDBTransaction().commit();
            } else {
                ret = curRow.getAttribute("PackId").toString();
            }
            executePackViewObjects();
        }
        System.out.println("return DisplyId is-->" + ret);
        return ret;
    }

    /**Method to get Binding Container.
     * @return
     */
    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    /**Method to Execute PickList ViewObjects.
     */

    public void executePickViewObjects() {
        //  this.getSlsPick1().executeQuery();
        this.getSlsPickIssuBin1().executeQuery();
        this.getSlsPickIssuLot1().executeQuery();
        this.getSlsPickIssuSr1().executeQuery();
        this.getSlsPickItm1().executeQuery();
    }

    /**Method to Execute Pack ViewObjects.
     */

    public void executePackViewObjects() {
        this.getSlsPack1().executeQuery();
        this.getSlsPackItm1().executeQuery();
    }

    /**Method to populate item from shuttle to pack item.
     * @return
     */
    public Key insertItmInPackItm() {
        Key key = null;
        Key packKey = null;
        _log.info("Inside Shuttle Method--");
        JUCtrlListBinding listBindings = (JUCtrlListBinding)getBindings().get("viewPickPackItm1");

        ViewObjectImpl packItm = this.getSlsPackItm1();
        ViewObjectImpl packvo = this.getSlsPack1();
        Row packCurrRow = packvo.getCurrentRow();
        if (packCurrRow != null) {
            packKey = packCurrRow.getKey();
            System.out.println("packk key  " + packKey);
        }
        ViewObject vwPickPackItm = this.getviewPickPackItm1();
        Object str[] = listBindings.getSelectedValues();
        System.out.println("Total selected component-->" + str.length);
        for (int i = 0; i < str.length; i++) {
            System.out.println(str[i]);
            RowQualifier rq = new RowQualifier(packItm);
            rq.setWhereClause("ItmId='" + str[i] + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                              getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and CldId='" +
                              getparamCldId() + "'");
            Row packRows[] = packItm.getFilteredRows(rq);
            System.out.println("expession=" + rq.getExprStr());
            System.out.println("lenght===" + packRows.length);
            if (packRows.length == 0) {
                Row itmRow = packItm.createRow();
                packItm.insertRow(itmRow);
                Row filterdRows[] = vwPickPackItm.getFilteredRows("ItmId", str[i]);
                System.out.println("Filterd Rows -==->" + filterdRows.length);
                if (filterdRows.length > 0) {
                    System.out.println("seyt1");
                    itmRow.setAttribute("ItmId", str[i]);
                    itmRow.setAttribute("ItmUom", filterdRows[0].getAttribute("ItmUom"));
                    itmRow.setAttribute("PackQty", filterdRows[0].getAttribute("PickQty"));
                    itmRow.setAttribute("PickQty", filterdRows[0].getAttribute("PickQty"));
                    itmRow.setAttribute("BalQty", new Number(0));

                }
                System.out.println(" this.getSlsPack1().getCurrentRow().getAttribute(\"PickId\")" +
                                   this.getSlsPack1().getCurrentRow().getAttribute("PickId"));
                itmRow.setAttribute("PickId", this.getSlsPack1().getCurrentRow().getAttribute("PickId"));
                System.out.println("Itm id inserted is--" + str[i]);

                key = itmRow.getKey();
                //  packItm.executeQuery();
                System.out.println("Key is  : " + key);
            }
            vwPickPackItm.executeQuery();
            getFYidOrgPack(getparamCldId(), getparamOrgId());
        }
        System.out.println("pack item key in amimpl" + key);
        System.out.println("pack key in amimpl" + packKey);

        // packItm.executeQuery();
        // packvo.executeQuery();
        //

        System.out.println("post changes " + this.getDBTransaction().isDirty());
        this.getDBTransaction().postChanges();
        /* Row packOldRow = packvo.getRow(packKey);
        Row packItmOldRow = packItm.getRow(key);
        packvo.setCurrentRow(packOldRow);
        packItm.setCurrentRow(packItmOldRow);
        System.out.println("post changes " + this.getDBTransaction().isDirty());
        System.out.println("retrun key in amimple is " + key); */
        return (Key)key;
        // this.getSlsPackTOSlsPackItmVL1()
        // packItm.executeQuery();
        // this.getSlsPack1().executeQuery();
    }

    /**Method to return ViewObect of PackItem.
     * @return
     */
    public ViewObject getPackObject() {
        return this.getSlsPack1();
    }

    /**Method to return ViewObect of SearchLov.
     * @return
     */
    public ViewObject getSearchObject() {
        return this.getsearchLov1();
    }

    /**Execute pickPackItm ViewObject.
     */
    public void executeViewPickPackItm() {
        this.getviewPickPackItm1().executeQuery();
    }

    /**Method to delete Item From PickList.
     * @return
     */
    public String deleteItmFrmPickList() {
        String retval = "N";
        ViewObject slsPick = this.getSlsPick1();
        //ViewObject slsPickItmLLot = this.getSlsPickIssuLot1();
        ViewObject slspack = this.getSlsPack1();
        ViewObjectImpl pickItmVo = this.getSlsPickItm1();
        Row pickItmRow = pickItmVo.getCurrentRow();
        String currpickId = (String)pickItmRow.getAttribute("DocId");
        String currSoDockId = (String)pickItmRow.getAttribute("SoId");
        String currWhId = (String)pickItmRow.getAttribute("WhId");
        String currItmId = (String)pickItmRow.getAttribute("ItmId");

        if (slspack.getRowCount() > 0) {
            retval = "P";
        } else {
            final ViewObjectImpl issuLot1 = this.getSlsPickIssuLot1();
            final ViewObjectImpl impl = this.getSlsPickIssuSr1();
            final ViewObjectImpl bin1 = this.getSlsPickIssuBin1();

            Runnable lotRun = new Runnable() {
                public void run() {
                    RowSetIterator lotItr = issuLot1.createRowSetIterator(null);
                    int lotCount = 0;
                    while (lotItr.hasNext()) {
                        lotCount++;
                        lotItr.next().remove();
                    }
                    lotItr.closeRowSetIterator();
                    System.out.println("no of lots deleted are:  " + lotCount + " ---");
                }
            };

            Runnable srRun = new Runnable() {
                public void run() {
                    RowSetIterator itr = impl.createRowSetIterator(null);
                    int srcount = 0;
                    while (itr.hasNext()) {
                        srcount++;
                        itr.next().remove();
                    }
                    itr.closeRowSetIterator();
                    System.out.println("no of Serial deleted are:  " + srcount + " ---");
                }
            };


            Runnable binRun = new Runnable() {
                public void run() {
                    RowSetIterator binItr = bin1.createRowSetIterator(null);
                    int binCount = 0;
                    while (binItr.hasNext()) {
                        binCount++;
                        binItr.next().remove();
                    }
                    binItr.closeRowSetIterator();
                    System.out.println("no of bin deleted are:  " + binCount + " ---");
                }
            };

            Thread t1 = new Thread(lotRun, "Lot");
            Thread t2 = new Thread(binRun, "Bin");
            Thread t3 = new Thread(srRun, "Serial");

            t1.start();
            t2.start();
            t3.start();
            try {
                t1.join();
                t2.join();
                t3.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Came herer.........!!!!!");
            issuLot1.executeQuery();
            impl.executeQuery();
            bin1.executeQuery();

            if (this.getSlsPickItm1().getRowCount() == 1) {
                Row curRow = slsPick.getCurrentRow();
                curRow.setAttribute("CurrIdSp", null);
                curRow.setAttribute("CurrConvFctr", null);
            }
            retval = "N";
        }
        getDBTransaction().postChanges();
        System.out.println("Post Chnages done........................1");
        return retval;
    }

    /**Method to Filter TreeTable Childs (As Per Items).
     * @param itmDesc
     */
    public void searchTreeasPerItm(String itmDesc) {
        ViewObject itmVo = this.getLovItmId1();
        ViewObject slssoPickVw = this.getviewSlsSoPick1();
        ViewObject slsSoPickItmVw = this.getViewSlsSoPickItm1();
        slssoPickVw.executeQuery();
        slsSoPickItmVw.executeQuery();
        // _log.info("Iteem Name is--" + itmDesc);
        Row filtrRows[] = itmVo.getFilteredRows("ItmDesc", itmDesc);
        if (filtrRows.length > 0) {
            //   _log.info("Total Rows--" + filtrRows.length);
            if (filtrRows[0].getAttribute("ItmId") != null) {
                String itmId = filtrRows[0].getAttribute("ItmId").toString();
                this.setItmIdSearch(itmId);
            }
        }
        // Filter It Using Key Attribute
        Row[] grpRow = slssoPickVw.getAllRowsInRange();
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet)r.getAttribute("ViewSlsSoPickItm");
                _log.info("Rows in ViewLink-->" + childRows.getRowCount());
                //Execute Child Rowset
                childRows.executeQuery();
            }
        }
    }

    /**Method to reset TreeTable****.
     */
    public void resetTreeTableFilter() {
        this.setItmIdSearch(null);
        this.setPickDateBean(null);
        this.setWareHouId(null);
        this.getviewSlsSoPick1().setNamedWhereClauseParam("eoIdBind", -1);
        this.getviewSlsSoPick1().setNamedWhereClauseParam("currIdSpBind", null);
        this.getviewSlsSoPick1().executeQuery();
        this.getViewSlsSoPickItm1().executeQuery();
    }

    /**Method to filter shipment table as per Delivery Date.
     * @param dlvDt
     */
    public void filterShipment(Timestamp dlvDt) {
        ViewObject shipmntVo = this.getviewSlsShipmntGen1();
        shipmntVo.setNamedWhereClauseParam("dlvDtBind", dlvDt);
        shipmntVo.executeQuery();
    }

    /**Method to get FYID.
     * @param txnDate
     * @param orgId
     * @return fy_Id
     */
    public Number getFyId(Timestamp txnDate, String orgId) {
        BigDecimal fyId =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.PKG_APP.GET_FY_ID(?,?,?)", new Object[] { txnDate, "FY",
                                                                                                         orgId });
        Number fy_Id = new Number(0);
        try {
            fy_Id = new Number(fyId);
        } catch (SQLException e) {
            // _log.info(e);
        }
        //   _log.info("FY ID is-->" + fy_Id);
        return fy_Id;
    }

    /**
     * Method used to call function to get the fy id and Set in SLS$SHPMNT.
     * @param CldId
     * @param OrgId
     * @param docDt
     * @return FY Id
     */
    public Integer getFYidOrgShip(String CldId, String OrgId, Timestamp docDt) {
        ViewObjectImpl slsShip = this.getSlsShipmnt1();
        Integer fyId = 0;
        //  _log.info("Current Shi Row-" + slsShip.getCurrentRow());

        if (docDt != null) {
            fyId =
(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] { CldId, OrgId, docDt }));


        }
        //  _log.info("Fyid Pick is--" + fyId);
        return fyId;
    }


    /**Method to generate Shipment.
     * @return
     */
    public String generateShipment() {
        Integer shpmntRow = 0;
        String displayId = null;
        String docIdFrst = null;
        String retVal = "N";
        String doc_id = null;
        ViewObject viewSlsShip = this.getviewSlsShipmntGen1();
        ViewObject slsShipmnt = this.getSlsShipmnt1();
        Timestamp date = new Timestamp(System.currentTimeMillis());
        Integer Uid = 0;


        RowSetIterator rsi = viewSlsShip.createRowSetIterator(null);
        int count = 0;
        while (rsi.hasNext()) {
            Row curRow = rsi.next();
            String pickId = curRow.getAttribute("PickId").toString();
            String whId = curRow.getAttribute("WhId").toString();
            Integer eoId = Integer.parseInt(curRow.getAttribute("EoId").toString());


            //  _log.info("Pick Id->" + pickId + "eoid-" + eoId + "whi--" + whId);
            if (curRow.getAttribute("selectPickListCbTrans") != null &&
                "Y".equalsIgnoreCase(curRow.getAttribute("selectPickListCbTrans").toString())) {

                Integer transporterId = 0;
                String remarks = null;
                Integer mode = null;
                String vchlno = null;
                String grno = null;
                String contn = null;

                Row currentRow = this.getsearchShipmnt1().getCurrentRow();

                if (currentRow.getAttribute("TransporterIdTrans") != null) {
                    transporterId = (Integer)currentRow.getAttribute("TransporterIdTrans");
                }
                if (currentRow.getAttribute("RemarksTrans") != null) {
                    remarks = currentRow.getAttribute("RemarksTrans").toString();
                }
                if (currentRow.getAttribute("TransMode") != null) {
                    mode = (Integer)currentRow.getAttribute("TransMode");
                }
                if (currentRow.getAttribute("TransVchNo") != null) {
                    vchlno = currentRow.getAttribute("TransVchNo").toString();
                }
                if (currentRow.getAttribute("TransGrNo") != null) {
                    grno = currentRow.getAttribute("TransGrNo").toString();
                }
                if (currentRow.getAttribute("TransContonrNo") != null) {
                    contn = currentRow.getAttribute("TransContonrNo").toString();
                }

                slsShipmnt.insertRow(slsShipmnt.createRow());
                Row curRowShip = slsShipmnt.getCurrentRow();

                if (curRowShip != null) {
                    if (shpmntRow == 0) {
                        doc_id = curRowShip.getAttribute("DocId").toString();
                        docIdFrst = doc_id;
                    }
                    Timestamp docDt = (Timestamp)curRowShip.getAttribute("DocDt");
                    date = docDt;

                    Uid = (Integer)curRowShip.getAttribute("UsrIdCreate");
                    _log.info("Ship DocId i-->" + doc_id + "and date is-" + docDt);

                    ShipDocId = new StringBuffer(doc_id);
                    curRowShip.setAttribute("WhId", whId);
                    curRowShip.setAttribute("PickId", pickId);
                    curRowShip.setAttribute("DocId", docIdFrst);
                    curRowShip.setAttribute("EoId", eoId);
                    curRowShip.setAttribute("CurrIdSp", curRow.getAttribute("CurrIdSp"));
                    curRowShip.setAttribute("CurrConvFctr", curRow.getAttribute("CurrConvFctr"));
                    if (transporterId != 0) {
                        curRowShip.setAttribute("TransporterId", transporterId);
                    }
                    curRowShip.setAttribute("Remarks", remarks);
                    curRowShip.setAttribute("TransMode", mode);
                    curRowShip.setAttribute("TransVhNo", vchlno);
                    curRowShip.setAttribute("TransGrNo", grno);
                    curRowShip.setAttribute("TransContnrNo", contn);

                    Integer fyId = getFYidOrgShip(getparamCldId(), getparamOrgId(), docDt);
                    _log.info("FYid is-" + fyId);
                    if (fyId > 0) {
                        curRowShip.setAttribute("FyId", fyId);
                    }


                    _log.info("Function called for Pick Id->" + pickId + "eoid-" + eoId + "whi--" + whId);
                    BigDecimal retrunv =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_INS_PICK_TO_SHIP(?,?,?,?,?,?,?,?,?,?,?)",
                                                       new Object[] { getparamCldId(), getparamSlocId(),
                                                                      getparamHoOrgId(), getparamOrgId(), whId, doc_id,
                                                                      docDt, eoId, pickId, getparamUsrId(),
                                                                      new Timestamp(System.currentTimeMillis()) });
                    _log.info("Value Returned from Shipment function-->" + retrunv);

                    System.out.println("retv para----" + getparamCldId() + "  " + getparamSlocId() + "  " +
                                       getparamHoOrgId() + "  " + getparamOrgId() + "  " + whId + "  " +
                                       getFyId(new Timestamp(System.currentTimeMillis()), getparamOrgId()) + "  " +
                                       docDt + "  " + doc_id + "  " + docDt + "  " + eoId + "  " + getparamUsrId() +
                                       "  " + new Timestamp(System.currentTimeMillis()));
                    String retvalShp =
                        callStoredFunction(Types.VARCHAR, "SLS.FN_SLS_TO_MM_SHIP_ITM(?,?,?,?,?,?,?,?,?,?,?,?)",
                                           new Object[] { getparamCldId(), getparamSlocId(), getparamHoOrgId(),
                                                          getparamOrgId(), whId,
                                                          getFyId(new Timestamp(System.currentTimeMillis()),
                                                                  getparamOrgId()), docDt, doc_id, docDt, eoId,
                                                          getparamUsrId(),
                                                          new Timestamp(System.currentTimeMillis()) }).toString();
                    //--------------------------------------------------------------------------
                    /*try {
                       String s =
                           callStoredFunction(Types.VARCHAR, "FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] {
                                                                                                       DocId,
                                                                                                        DocDt,
                                                                                                        uidPost,
                                                                                                       p_org_id,
                                                                                                       p_sloc_id,
                                                                                                       p_hoOrgId,
                                                                                                       p_cldId,
                                                                                                       "O"}).toString();
                        System.out.println("Return from FN_SLS_TO_FIN_COST_OF_GOOD : "+s);

                    } catch (Exception e) {
                       FacesMessage message =
                           new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_COST_OF_GOOD' !");
                       message.setSeverity(FacesMessage.SEVERITY_ERROR);
                       FacesContext.getCurrentInstance().addMessage(null, message);
                       e.printStackTrace();
                    } */
                    //   ----------------------------------------------------------------------
                    _log.info("Value from MMtoShp function--" + retvalShp);
                    //    getDBTransaction().postChanges(); // 05 july 2014
                    count++;
                    if (shpmntRow == 0) {
                        String ret =
                            callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] { getparamSlocId(),
                                                                                                                     getparamCldId(),
                                                                                                                     getparamOrgId(),
                                                                                                                     new Integer(21508),
                                                                                                                     doc_id,
                                                                                                                     new Integer(0),
                                                                                                                     "SLS$SHIPMNT",
                                                                                                                     fyId }).toString();
                        displayId = ret;

                    }
                    _log.info("Shipment id--" + displayId);
                    curRowShip.setAttribute("ShipmntId", displayId);
                    shpmntRow++;

                    System.out.println("parameters are:   -- " + getparamCldId() + "  " + getparamSlocId() + "   " +
                                       getparamOrgId() + "  " + curRowShip.getAttribute("WhId") + "  " + retvalShp +
                                       "   " + "I");
                    try {
                        BigDecimal ret =
                            (BigDecimal)callStoredFunction(Types.NUMERIC, "MM.MM_UPDT_STK(?,?,?,?,?,?)", new Object[] { getparamCldId(),
                                                                                                                        getparamSlocId(),
                                                                                                                        getparamOrgId(),
                                                                                                                        curRowShip.getAttribute("WhId"),
                                                                                                                        retvalShp,
                                                                                                                        "I" });

                        _log.info("Update STK return-" + ret);
                    } catch (Exception e) {
                        System.out.println("Error");
                        e.printStackTrace();
                    }
                    System.out.println("para are: " + curRowShip.getAttribute("DocId") + "\n" +
                            fyId);
                    //26 aug 2014 temporarily.
                    /*   BigDecimal res_cancel_flag =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "MM.MM_UPDT_STK_RESV_CNCL(?,?,?,?,?,?)",
                                                       new Object[] { getparamCldId(), getparamSlocId(),
                                                                      getparamOrgId(), curRowShip.getAttribute("PickId"),
                                                                      fyId, 329});

                    System.out.println("Data from the cancel function is: "+res_cancel_flag); */
                    getDBTransaction().commit();
                    System.out.println("Doc id of -- " + curRowShip.getAttribute("DocId"));
                    System.out.println("Doc id of -- " + getparamCldId() + "\n" +
                            getparamSlocId() + "\n" +
                            getparamOrgId());
                    System.out.println("wh id: is " + curRowShip.getAttribute("WhId") + "\n" +
                            fyId);

                    BigDecimal retval =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "MM.mm_updt_stk_rels(?,?,?,?,?,?,?)",
                                                       new Object[] { getparamCldId(), getparamSlocId(),
                                                                      getparamOrgId(), curRowShip.getAttribute("WhId"),
                                                                      fyId, 329, curRowShip.getAttribute("DocId") });
                    _log.info("Return Value from Release-" + retval);
                }
            }
        }

        _log.info("Value of Count--" + count);
        if (count == 0) {
            retVal = "N";
        } else {
            DBTransaction bTransaction = this.getDBTransaction();
            bTransaction.commit();

            retVal = displayId;
        }

        DBTransaction bTransaction = this.getDBTransaction();
        bTransaction.commit();

        try {
            String s =
                callStoredFunction(Types.VARCHAR, "FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] { doc_id,
                                                                                                                date,
                                                                                                                Uid,
                                                                                                                getparamOrgId(),
                                                                                                                getparamSlocId(),
                                                                                                                getparamHoOrgId(),
                                                                                                                getparamCldId(),
                                                                                                                "S" }).toString();
            System.out.println("Return from FN_SLS_TO_FIN_COST_OF_GOOD : " + s);

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_COST_OF_GOOD' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        slsShipmnt.executeQuery();
        viewSlsShip.executeQuery();

        return retVal;
    }

    /**Get ViewObject Of Shipment View.
     * @return
     */
    public ViewObject getShipmntSearchView() {
        return this.getviewSlsShipmntGen1();
    }

    /**Method to Reset Shipment View.
     *
     */
    public void resetShipment() {
        ViewObject searchShip = this.getviewSlsShipmntGen1();
        searchShip.setNamedWhereClauseParam("pickDtFrm", null);
        searchShip.setNamedWhereClauseParam("eoIdBind", -1);
        searchShip.setNamedWhereClauseParam("dlvModeBind", null);
        searchShip.setNamedWhereClauseParam("whIdBind", null);
        searchShip.setNamedWhereClauseParam("pickDtTo", null);
        searchShip.setNamedWhereClauseParam("ShipDocIdBind", null);
        searchShip.setNamedWhereClauseParam("PickDocId", null);
        searchShip.setNamedWhereClauseParam("DlvAddsBind", null);
        searchShip.setNamedWhereClauseParam("PickDispIdBind", null);
        searchShip.executeQuery();
        this.getsearchShipmnt1().executeQuery();
    }

    /**Method to Check that all Items are Issued with full quantity or Not, if Not then it will show Validation Message.
     * @return
     */
    public ArrayList checkItemIssueValidation() {
        System.out.println("in amimpl save set 12");
        ArrayList itemVal = new ArrayList();
        System.out.println("===========");
        ViewObject slsPickItm = this.getSlsPickItm1();
        // slsPickItm.executeQuery(); //addd by rohit
        //  ViewObjectImpl slsPickLot = this.getSlsPickIssuLot2(); change effected on 14 july 2014 by Shubham Bansal
        this.getSlsPickIssuLot3().executeQuery();
        ViewObjectImpl slsPickLot = this.getSlsPickIssuLot3();
        slsPickLot.setRangeSize(-1);
        for(Row r : slsPickLot.getAllRowsInRange()){
            System.out.println("Lot Key Is : "+r.getKey());
        }
        // slsPickLot.executeQuery();
        System.out.println("in amimpl save set 13");
        RowSetIterator rsiII = slsPickItm.createRowSetIterator(null);
        System.out.println("in amimpl save set 14");
        while (rsiII.hasNext()) {
            Row curItmRow = rsiII.next();
            if (curItmRow != null) {
                Number pickedQtyItm = (Number)curItmRow.getAttribute("PickQty");
                System.out.println("Pick Quantity in starting" + pickedQtyItm);
                Number lotTotQty = StaticValue.NUMBER_ZERO;
                RowQualifier rq = new RowQualifier(slsPickLot);
                // Changes made for tolerance
                rq.setWhereClause("CldId='" + curItmRow.getAttribute("CldId") + "' and  SlocId=" +
                                  curItmRow.getAttribute("SlocId") + " and OrgId='" + curItmRow.getAttribute("OrgId") +
                                  "' and DocId='" + curItmRow.getAttribute("DocId") + "' and SoId='" +
                                  curItmRow.getAttribute("SoId") + "' and ItmId='" + curItmRow.getAttribute("ItmId") +
                                  "' and DlvDt = '"+curItmRow.getAttribute("DlvDt")+"'");
                _log.info("RowQuali Expression--" + rq.getExprStr());
                Row fltrdRows[] = slsPickLot.getFilteredRows(rq);
                _log.info("Total Row in Lot for This Item--" + fltrdRows.length + "Item is-" +
                          curItmRow.getAttribute("ItmId"));
                if (fltrdRows.length > 0) {
                    for (Row r : fltrdRows) {
                        _log.info("Picked Quantity : " + r.getAttribute("PickQtyBs")); //
                        lotTotQty = lotTotQty.add((Number)r.getAttribute("PickQtyBs"));
                    }
                }
                _log.info("Picked quantity " + pickedQtyItm + " Total Issued Quantity-" + lotTotQty);
                if (pickedQtyItm.compareTo(lotTotQty) == 0) {

                } else {
                    Row itmFltrRow[] = this.getLovItmId1().getFilteredRows("ItmId", curItmRow.getAttribute("ItmId"));
                    if (itmFltrRow.length > 0) {
                        _log.info("Inside Else--" + itmFltrRow[0].getAttribute("ItmDesc"));
                        itemVal.add(itmFltrRow[0].getAttribute("ItmDesc"));
                    }
                }
            }
        }
        _log.info("Un-Issued Items--" + itemVal);
        return itemVal;
    }

    /**To Filter TreeTable Customer Wise.
     * @param eo_nm
     */
    public void filterTreeCustomerWise(String eo_nm) {
        Integer eo_id = null;
        ViewObject soPickVw = this.getviewSlsSoPick1();
        _log.info("EoId is AM-" + eo_nm + " And RowCount before-" + soPickVw.getRowCount());

        Row fltrdRow[] = this.getLovEoIdVO1().getFilteredRows("EoNm", eo_nm);
        if (fltrdRow.length > 0) {
            eo_id = Integer.parseInt(fltrdRow[0].getAttribute("EoId").toString());
        }


        soPickVw.setNamedWhereClauseParam("eoIdBind", eo_id);
        soPickVw.executeQuery();
        _log.info("After Row count-" + soPickVw.getRowCount());
    }


    /**Returns ViewObject of Main Search View.
     * @return
     */
    public ViewObject getmainSearchView() {
        return this.getsearchPickPackShip1();
    }


    /**Method to Reset Main Search View.
     *
     */
    public void searchMainSearch() {
        Row currentRow = this.getsearchPickListDual1().getCurrentRow();
        if(currentRow != null){
            ViewObject searchShip = this.getsearchPickPackShip1();
            searchShip.setNamedWhereClauseParam("cldIdBind", getparamCldId());
            searchShip.setNamedWhereClauseParam("orgIdBind", getparamOrgId());
            searchShip.setNamedWhereClauseParam("hoOrgIdBind", getparamHoOrgId());
            searchShip.setNamedWhereClauseParam("slocIdBind", getparamSlocId());
            searchShip.setNamedWhereClauseParam("eoIdBind", currentRow.getAttribute("EoIdSrch"));
            searchShip.setNamedWhereClauseParam("soDocIdBind", currentRow.getAttribute("SoDocIdSrch"));
            searchShip.setNamedWhereClauseParam("pickIdBind", currentRow.getAttribute("PickDocIdSrch"));
            searchShip.setNamedWhereClauseParam("shpmntIdBind", currentRow.getAttribute("ShpmntDocIdSrch"));
            searchShip.setNamedWhereClauseParam("dlvModeBind", currentRow.getAttribute("DlvModeSrch"));
            searchShip.setNamedWhereClauseParam("pickDateBind", currentRow.getAttribute("PickDtSrch")); 
            searchShip.executeQuery();    
        }
    }
    /**Method to Reset Main Search View.
     *
     */
    public void resetMainSearch() {
        ViewObject searchShip = this.getsearchPickPackShip1();
        searchShip.setNamedWhereClauseParam("eoIdBind", -1);
        searchShip.setNamedWhereClauseParam("soDocIdBind", null);
        searchShip.setNamedWhereClauseParam("pickIdBind", null);
        searchShip.setNamedWhereClauseParam("shpmntIdBind", null);
        searchShip.setNamedWhereClauseParam("dlvModeBind", null);
        searchShip.setNamedWhereClauseParam("pickDateBind", null);
        searchShip.executeQuery();
        this.getsearchPickListDual1().executeQuery();
    }

    /**Method to Filter Picklist page as per selected picklist in search page.
     *
     */
    public void goToPickListAction() {
        ViewObject slsPickVo = this.getSlsPick1();
        ViewObject pickPackShpSrchVo = this.getsearchPickPackShip1();
        Row srchCurRow = pickPackShpSrchVo.getCurrentRow();
        _log.info("Current Row is-" + srchCurRow);
        if (srchCurRow != null) {
            _log.info("PickId  is-" + srchCurRow.getAttribute("PickdocId"));
            if (srchCurRow.getAttribute("PickdocId") != null) {
                String pickId = srchCurRow.getAttribute("PickdocId").toString();
                slsPickVo.setNamedWhereClauseParam("docIdBind", pickId);
                slsPickVo.executeQuery();
            }
        }

    }

    /**Method to populate key value in Pack Header.
     */
    public void populateValinPack() {
        ViewObject slsPick = this.getSlsPick1();
        ViewObject slspack = this.getSlsPack1();
        Row packRow = slspack.getCurrentRow();
        Row pickRow = slsPick.getCurrentRow();
        if (packRow != null) {
            packRow.setAttribute("SlocId", pickRow.getAttribute("SlocId"));
            packRow.setAttribute("OrgId", pickRow.getAttribute("OrgId"));
            packRow.setAttribute("HoOrgId", pickRow.getAttribute("HoOrgId"));
            packRow.setAttribute("CldId", pickRow.getAttribute("CldId"));
            packRow.setAttribute("PickId", pickRow.getAttribute("DocId"));
            _log.info("Pick Id from parent--" + pickRow.getAttribute("DocId"));
        }

    }

    /**Vallidation to check whether same customer is selected to generate Shipment from picklist or not*.
     * @return
     */


    public String validateGenShipment() {
        int count = 0;
        ViewObject shpmntGen = this.getviewSlsShipmntGen1();
        Row chkdRow[] = shpmntGen.getFilteredRows("selectPickListCbTrans", "Y");
        _log.info("Selected Rows are--" + chkdRow.length);
        if (chkdRow.length > 0) {
            Integer frstEoId = Integer.parseInt(chkdRow[0].getAttribute("EoId").toString());
            for (Row r : chkdRow) {
                if (r.getAttribute("EoId") != null) {
                    Integer nextEoId = Integer.parseInt(r.getAttribute("EoId").toString());
                    _log.info("First Eo -" + frstEoId + "And Next Eo-" + nextEoId);
                    if (frstEoId.compareTo(nextEoId) != 0) {
                        count++;
                    }
                }
            }
            _log.info("Count is-" + count);
            if (count > 0) {
                StringBuilder msg =
                    /*  new StringBuilder("<html><body><b><p style='color:red'>Can not select different customer to generate Shipment</p></b>");
                msg.append("<ul><b><li>Select Same customer and try again</li><li>Or Contact ESS:  +91-120-4212931-39</li></b></ul></body></html>"); */
                    new StringBuilder("<html><body><b><p style='color:red'>" +
                                      resolvElDCMsg("#{bundle['MSG.968']}").toString() + "</p></b>");
                msg.append("<ul><b><li>" + resolvElDCMsg("#{bundle['MSG.969']}").toString() + "</li><li>" +
                           resolvElDCMsg("#{bundle['MSG.939']}").toString() + "</li></b></ul></body></html>");


                FacesMessage errMsg = new FacesMessage(msg.toString());
                errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, errMsg);
                return "N";
            } else {
                return "Y";
            }
        } else {
            /*  FacesMessage errMsg = new FacesMessage("Please Select atleast one Picklist to generate Shipment"); */
            FacesMessage errMsg = new FacesMessage(resolvElDCMsg("#{bundle['MSG.932']}").toString());

            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return "N";
        }


    }

    /**Get Basic UOM of Item**.
     * @param itmId
     * @return
     */

    public String getBaseUom(String itmId) {
        String baseUom = null;
        ViewObjectImpl itmVo = this.getLovItmId1();
        RowQualifier rq = new RowQualifier(itmVo);
        rq.setWhereClause("SlocId=" + getparamSlocId() + " and OrgId='" + getparamOrgId() + "' and CldId='" +
                          getparamCldId() + "' and ItmId='" + itmId + "' and HoOrgId='" + getparamHoOrgId() + "'");
        // _log.info("Qualifier is-" + rq.getExprStr());
        Row fltrdRow[] = itmVo.getFilteredRows(rq);
        if (fltrdRow.length > 0) {
            //  _log.info("total row fr this-" + fltrdRow.length);
            baseUom = fltrdRow[0].getAttribute("UomBasic").toString();
        }
        _log.info("Base Uom is-" + baseUom);
        return baseUom;
    }

    /**Method to Auto Issue item from Stock in case of LIFO/FIFO.
     */

    public void issueAutoItem() {
        String uomBase = null;
        ViewObject pickItm = this.getSlsPickItm1();
        Row itmRow = pickItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

        _log.info("wh-" + itmRow.getAttribute("WhId") + "itm-" + itmRow.getAttribute("ItmId") + "pickQty-" +
                  itmRow.getAttribute("PickQty") + "PickOrd-" + itmRow.getAttribute("TransItmPickOrder") + "SrNo-" +
                  itmRow.getAttribute("SrNo") + "DocID-" + itmRow.getAttribute("DocId") + "Uom-" +
                  itmRow.getAttribute("ItmUom"));

        if (getBaseUom((String)itmRow.getAttribute("ItmId")) != null) {
            uomBase = getBaseUom(itmRow.getAttribute("ItmId").toString());
        } else {
            uomBase = itmRow.getAttribute("ItmUom").toString();
        }


        BigDecimal convFctr =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] { getparamSlocId(),
                                                                                                                  getparamCldId(),
                                                                                                                  getparamOrgId(),
                                                                                                                  itmRow.getAttribute("ItmId"),
                                                                                                                  uomBase,
                                                                                                                  itmRow.getAttribute("ItmUom") });

        _log.info("UomBase-" + uomBase + "ConvFctr-" + convFctr);
        if (convFctr == null) {
            convFctr = new BigDecimal(1);
        }
        BigDecimal ret =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_SLS_PICK_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                           new Object[] { getparamCldId(), getparamSlocId(), getparamHoOrgId(),
                                                          getparamOrgId(), itmRow.getAttribute("WhId"),
                                                          itmRow.getAttribute("ItmId"), itmRow.getAttribute("PickQty"),
                                                          itmRow.getAttribute("TransItmPickOrder"),
                                                          itmRow.getAttribute("TransItmSerializedFlg"), binChkFlg,
                                                          itmRow.getAttribute("DocId"), itmRow.getAttribute("SoId"),
                                                          itmRow.getAttribute("SoDt"), itmRow.getAttribute("ItmUom"),
                                                          itmRow.getAttribute("ItmUom"), convFctr ,itmRow.getAttribute("DlvDt")});
        _log.info("Retval AutoIssue-" + ret);
        getDBTransaction().postChanges();
        this.getSlsPickIssuLot1().executeQuery();
        this.getSlsPickIssuBin1().executeQuery();
        this.getSlsPickIssuSr1().executeQuery();
    }

    /**Method to get current docId from SLS$PICK.
     * @return
     */
    public String getCurrentdocId() {
        Row curRow = this.getSlsPick1().getCurrentRow();
        if (curRow.getAttribute("DocId") != null) {
            String docId = curRow.getAttribute("DocId").toString();
            return docId;
        } else {
            return "N";
        }
    }

    /**
     * @param pickId
     */
    public void setOncurRow(String pickId) {
        ViewObject slsPickVo = this.getSlsPick1();
        slsPickVo.setNamedWhereClauseParam("docIdBind", pickId);
        slsPickVo.executeQuery();
    }

    /**Method to filter tree as per Warehouse selected.
     * @param whId
     */
    public void filterTreeWarehouse(String whId) {
        ViewObject slssoPickVw = this.getviewSlsSoPick1();
        ViewObject slsSoPickItmVw = this.getViewSlsSoPickItm1();
        slssoPickVw.executeQuery();
        slsSoPickItmVw.executeQuery();
        setWareHouId(whId);
        // Filter It Using Key Attribute
        Row[] grpRow = slssoPickVw.getAllRowsInRange();
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet)r.getAttribute("ViewSlsSoPickItm");
                //Execute Child Rowset
                childRows.executeQuery();
            }
        }
    }

    /**Method to set value of TaskFlow Parameter(Pack Visible or Not) as Per Org Sales Profile.
     * @return
     */
    public String setPackVsblParam() {
        String usePack = "N";
        this.getviewSlsShipmntGen1().executeQuery();
        this.getLovPickIdVO1().executeQuery();
        ViewObjectImpl orgPrf = this.getorgSlsPrfVO1();
        orgPrf.executeQuery();
        RowQualifier rq = new RowQualifier(orgPrf);
        rq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                          getparamOrgId() + "'");
        _log.info("Rq is-" + rq.getExprStr());
        Row orgRows[] = orgPrf.getFilteredRows(rq);
        _log.info("Total Rows for Org-" + orgRows.length);
        if (orgRows.length > 0) {
            if (orgRows[0].getAttribute("UsePackEntry") != null) {
                usePack = orgRows[0].getAttribute("UsePackEntry").toString();
                _log.info("Value of Use Pack is--" + usePack);
                return usePack;
            } else {
                return "N";
            }
        } else {
            return "N";
        }

    }

    /**Method to update PickList Staus in case of Cancellation.
     * @param canc_Flag
     */
    public void updatePickStausCancel(String canc_Flag) {
        ViewObject slsSo = this.getSlsPick1();
        Row soRow = slsSo.getCurrentRow();
        if (canc_Flag.equalsIgnoreCase("true")) {
            _log.info("Order is Cancelled--");
            soRow.setAttribute("PickStat", 220);
        }
    }

    /**Method to update Shipment Staus in case of Cancellation.
     * @param canc_Flag
     * @param eoId
     * @param usrIdCreateDt
     * @param shipId
     * @param ShipDt
     * @param whId
     * @param docId
     */
    public void updateShipmentStausCancel(String canc_Flag, Integer eoId, Date usrIdCreateDt, String shipId,
                                          Date ShipDt, String whId, String docId) {
        System.out.println("Came in cancel shipment");
        ViewObject slsSo = this.getSlsShipmnt1();
        ViewObject slsPick = this.getSlsPick1();
        Row soRow = slsSo.getCurrentRow();
        if (canc_Flag.equalsIgnoreCase("true")) {
            //getshipOnCancel(eoId, usrIdCreateDt, docId, ShipDt, whId);
            String statVal = getshipAftrCancel(eoId, usrIdCreateDt, docId, ShipDt, whId);
            _log.info("statVal--" + statVal);
            if (statVal.equalsIgnoreCase("Y")) {
                _log.info("Order is Cancelled--");
                soRow.setAttribute("ShipmntStat", 220);
                if (slsSo.getCurrentRow().getAttribute("PickId") != null) {
                    String pickId = slsSo.getCurrentRow().getAttribute("PickId").toString();
                    Row fltrdRow[] = slsPick.getFilteredRows("DocId", pickId);
                    if (fltrdRow.length > 0) {
                        fltrdRow[0].setAttribute("PickStat", 217);
                        _log.info("Pick Status Updated-");
                    }
                }
            }
        }
    }

    public void refreshAllVoOncancellation() {
        this.getSlsShipmnt1().executeQuery();
        this.getSlsPick1().executeQuery();
        this.getviewSlsShipmntGen1().executeQuery();
        this.getsearchPickPackShip1().executeQuery();
    }

    /**Method to reserve stock when PickList is saved.
     */
    public void reserveStock() {
        ViewObject slsPick = this.getSlsPick1();
        Row pickRow = slsPick.getCurrentRow();


        BigDecimal ret =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "MM.MM_UPDT_STK_RESV(?,?,?,?,?,?,?)", new Object[] { getparamCldId(),
                                                                                                               getparamSlocId(),
                                                                                                               getparamOrgId(),
                                                                                                               pickRow.getAttribute("WhId"),
                                                                                                               getFYidOrgPick(getparamCldId(),
                                                                                                                              getparamOrgId()),
                                                                                                               329,
                                                                                                               pickRow.getAttribute("DocId") });
        _log.info("Update stock resv-" + ret);
        
//        UpdateOrdStat("S");
    }

    /**Method to check Whether shipment is created or not.
     * @return
     */
    public String shipmntCrtdOrNt() {
        String retVal = "N";
        ViewObject slsPick = this.getSlsPick1();
        /* ViewObjectImpl slsShpmnt = this.getSlsShipmntVO2();
        RowQualifier rq = new RowQualifier(slsShpmnt);
        Row pickRow = slsPick.getCurrentRow();
        if (pickRow != null && pickRow.getAttribute("DocId") != null) {
            System.out.println("pick id at the time of edit " + pickRow.getAttribute("DocId"));
            rq.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and PickId='" +
                              pickRow.getAttribute("DocId") + "'");
            System.out.println("clause  " + rq.getExprStr());
            Row shpmntRow[] = slsShpmnt.getFilteredRows(rq);
            System.out.println("shpmntRow.length " + shpmntRow.length);
            if (shpmntRow.length > 0) {
                retVal = "Y";
            } else {
                retVal = "N";
            }
        } */
        Row pickRow = slsPick.getCurrentRow();
        if(pickRow != null &&  pickRow.getAttribute("DocId") != null && pickRow.getAttribute("PickStat") != null) {
            Object attribute = pickRow.getAttribute("PickStat");
            Integer stat = Integer.parseInt(attribute.toString());
            if(stat  == 217) {
                retVal = "N" ;
            }
            else {
                retVal = "Y" ;
            }
        }
        return retVal;
    }

    public void postChange() {
        this.getDBTransaction().postChanges();
        ViewObject slssoPickVw = getviewSlsSoPick1();
        // Filter It Using Key Attribute
        Row[] grpRow = slssoPickVw.getAllRowsInRange();
        // Get Child Rows using ViewLink Accessor
        Row currentRow = this.getSlsPick1().getCurrentRow();
        String doc_id = null;
        if (currentRow != null) {
            doc_id = currentRow.getAttribute("DocId").toString();
        }
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet)r.getAttribute("ViewSlsSoPickItm");
                //_log.info("Rows in ViewLink-->" + childRows.getRowCount());
                //Execute Child Rowset
                childRows.setNamedWhereClauseParam("pick_doc_id_bind", doc_id);
                childRows.executeQuery();
                System.out.println("Executed : docId is : " + doc_id);
            }
        }
        slssoPickVw.executeQuery();
    }

    /**
     * Container's getter for ViewMmStkSummBin1.
     * @return ViewMmStkSummBin1
     */
    public ViewMmStkSummBinVOImpl getViewMmStkSummBin1() {
        return (ViewMmStkSummBinVOImpl)findViewObject("ViewMmStkSummBin1");
    }

    /**
     * Container's getter for slsPickItmTOviewMmStkSummBinVL1.
     * @return slsPickItmTOviewMmStkSummBinVL1
     */
    public ViewLinkImpl getslsPickItmTOviewMmStkSummBinVL1() {
        return (ViewLinkImpl)findViewLink("slsPickItmTOviewMmStkSummBinVL1");
    }

    /**
     * Container's getter for ViewMmStkSummLot1.
     * @return ViewMmStkSummLot1
     */
    public ViewMmStkSummLotVOImpl getViewMmStkSummLot1() {
        return (ViewMmStkSummLotVOImpl)findViewObject("ViewMmStkSummLot1");
    }

    /**
     * Container's getter for slsPickItmTOviewMmStkSummLotVL1.
     * @return slsPickItmTOviewMmStkSummLotVL1
     */
    public ViewLinkImpl getslsPickItmTOviewMmStkSummLotVL1() {
        return (ViewLinkImpl)findViewLink("slsPickItmTOviewMmStkSummLotVL1");
    }

    /**
     * Container's getter for ViewMmStkSummSr1.
     * @return ViewMmStkSummSr1
     */
    public ViewObjectImpl getViewMmStkSummSr1() {
        return (ViewObjectImpl)findViewObject("ViewMmStkSummSr1");
    }

    /**
     * Container's getter for slsPickItmTOviewMmStkSummSrVL1.
     * @return slsPickItmTOviewMmStkSummSrVL1
     */
    public ViewLinkImpl getslsPickItmTOviewMmStkSummSrVL1() {
        return (ViewLinkImpl)findViewLink("slsPickItmTOviewMmStkSummSrVL1");
    }

    /**
     * Container's getter for SlsPickIssuBin1.
     * @return SlsPickIssuBin1
     */
    public ViewObjectImpl getSlsPickIssuBin1() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuBin1");
    }

    /**
     * Container's getter for SlsPickItmTOSlsPickIssueBinVL1.
     * @return SlsPickItmTOSlsPickIssueBinVL1
     */
    public ViewLinkImpl getSlsPickItmTOSlsPickIssueBinVL1() {
        return (ViewLinkImpl)findViewLink("SlsPickItmTOSlsPickIssueBinVL1");
    }

    /**
     * Container's getter for SlsPickIssuLot1.
     * @return SlsPickIssuLot1
     */
    public ViewObjectImpl getSlsPickIssuLot1() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuLot1");
    }

    /**
     * Container's getter for SlsPickItmTOSlsPickIssueLotVL1.
     * @return SlsPickItmTOSlsPickIssueLotVL1
     */
    public ViewLinkImpl getSlsPickItmTOSlsPickIssueLotVL1() {
        return (ViewLinkImpl)findViewLink("SlsPickItmTOSlsPickIssueLotVL1");
    }

    /**
     * Container's getter for SlsPickIssuSr1.
     * @return SlsPickIssuSr1
     */
    public ViewObjectImpl getSlsPickIssuSr1() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuSr1");
    }

    /**
     * Container's getter for SlsPickItmTOSlsPickIssueSrVL1.
     * @return SlsPickItmTOSlsPickIssueSrVL1
     */
    public ViewLinkImpl getSlsPickItmTOSlsPickIssueSrVL1() {
        return (ViewLinkImpl)findViewLink("SlsPickItmTOSlsPickIssueSrVL1");
    }

    /**
     * @param pickDateBean
     */
    public void setPickDateBean(Timestamp pickDateBean) {
        this.pickDateBean = pickDateBean;
    }

    /**
     * @return
     */
    public Timestamp getPickDateBean() {
        return pickDateBean;
    }

    /**
     * Container's getter for SlsPack1.
     * @return SlsPack1
     */
    public ViewObjectImpl getSlsPack1() {
        return (ViewObjectImpl)findViewObject("SlsPack1");
    }

    /**
     * Container's getter for SlsPickTOSlsPackVL1.
     * @return SlsPickTOSlsPackVL1
     */
    public ViewLinkImpl getSlsPickTOSlsPackVL1() {
        return (ViewLinkImpl)findViewLink("SlsPickTOSlsPackVL1");
    }

    /**
     * Container's getter for SlsPackItm1.
     * @return SlsPackItm1
     */
    public ViewObjectImpl getSlsPackItm1() {
        return (ViewObjectImpl)findViewObject("SlsPackItm1");
    }

    /**
     * Container's getter for SlsPackTOSlsPackItmVL1.
     * @return SlsPackTOSlsPackItmVL1
     */
    public ViewLinkImpl getSlsPackTOSlsPackItmVL1() {
        return (ViewLinkImpl)findViewLink("SlsPackTOSlsPackItmVL1");
    }

    /**
     * Container's getter for viewPickPackItm1.
     * @return viewPickPackItm1
     */
    public ViewObjectImpl getviewPickPackItm1() {
        return (ViewObjectImpl)findViewObject("viewPickPackItm1");
    }

    /**
     * Container's getter for SlsPackTOviewPickPackItmVL1.
     * @return SlsPackTOviewPickPackItmVL1
     */
    public ViewLinkImpl getSlsPackTOviewPickPackItmVL1() {
        return (ViewLinkImpl)findViewLink("SlsPackTOviewPickPackItmVL1");
    }

    /**
     * Container's getter for searchLov1.
     * @return searchLov1
     */
    public ViewObjectImpl getsearchLov1() {
        return (ViewObjectImpl)findViewObject("searchLov1");
    }

    /**
     * Container's getter for LovItmId1.
     * @return LovItmId1
     */
    public ViewObjectImpl getLovItmId1() {
        return (ViewObjectImpl)findViewObject("LovItmId1");
    }

    /**
     * @param ItmIdSearch
     */
    public void setItmIdSearch(String ItmIdSearch) {
        this.ItmIdSearch = ItmIdSearch;
    }

    /**
     * @return
     */
    public String getItmIdSearch() {
        return ItmIdSearch;
    }

    /**
     * Container's getter for viewSlsShipmntGen1.
     * @return viewSlsShipmntGen1
     */
    public ViewObjectImpl getviewSlsShipmntGen1() {
        return (ViewObjectImpl)findViewObject("viewSlsShipmntGen1");
    }

    /**
     * Container's getter for searchShipmnt1.
     * @return searchShipmnt1
     */
    public ViewObjectImpl getsearchShipmnt1() {
        return (ViewObjectImpl)findViewObject("searchShipmnt1");
    }

    /**
     * Container's getter for showSoShip1.
     * @return showSoShip1
     */
    public ViewObjectImpl getshowSoShip1() {
        return (ViewObjectImpl)findViewObject("showSoShip1");
    }

    /**
     * Container's getter for viewSlsShpmntToShowSoShipVL1.
     * @return viewSlsShpmntToShowSoShipVL1
     */
    public ViewLinkImpl getviewSlsShpmntToShowSoShipVL1() {
        return (ViewLinkImpl)findViewLink("viewSlsShpmntToShowSoShipVL1");
    }

    /**
     * Container's getter for ShowSoItmShip1.
     * @return ShowSoItmShip1
     */
    public ViewObjectImpl getShowSoItmShip1() {
        return (ViewObjectImpl)findViewObject("ShowSoItmShip1");
    }

    /**
     * Container's getter for ShowSoShipTOShowSoItmShipVL1.
     * @return ShowSoShipTOShowSoItmShipVL1
     */
    public ViewLinkImpl getShowSoShipTOShowSoItmShipVL1() {
        return (ViewLinkImpl)findViewLink("ShowSoShipTOShowSoItmShipVL1");
    }

    /**
     * Container's getter for SlsShipmnt1.
     * @return SlsShipmnt1
     */
    public ViewObjectImpl getSlsShipmnt1() {
        return (ViewObjectImpl)findViewObject("SlsShipmnt1");
    }

    /**
     * Container's getter for viewSlsShipmentGenTOSlsShipmntVL1.
     * @return viewSlsShipmentGenTOSlsShipmntVL1
     */
    public ViewLinkImpl getviewSlsShipmentGenTOSlsShipmntVL1() {
        return (ViewLinkImpl)findViewLink("viewSlsShipmentGenTOSlsShipmntVL1");
    }

    /**
     * Container's getter for SlsShipmntItm1.
     * @return SlsShipmntItm1
     */
    public ViewObjectImpl getSlsShipmntItm1() {
        return (ViewObjectImpl)findViewObject("SlsShipmntItm1");
    }

    /**
     * Container's getter for SlsShpmntTOSlsShpmntItmVL1.
     * @return SlsShpmntTOSlsShpmntItmVL1
     */
    public ViewLinkImpl getSlsShpmntTOSlsShpmntItmVL1() {
        return (ViewLinkImpl)findViewLink("SlsShpmntTOSlsShpmntItmVL1");
    }

    /**
     * Container's getter for SlsShipmntItmBin1.
     * @return SlsShipmntItmBin1
     */
    public ViewObjectImpl getSlsShipmntItmBin1() {
        return (ViewObjectImpl)findViewObject("SlsShipmntItmBin1");
    }

    /**
     * Container's getter for SlsShpmntItmTOSlsShpmntItmBinVL1.
     * @return SlsShpmntItmTOSlsShpmntItmBinVL1
     */
    public ViewLinkImpl getSlsShpmntItmTOSlsShpmntItmBinVL1() {
        return (ViewLinkImpl)findViewLink("SlsShpmntItmTOSlsShpmntItmBinVL1");
    }

    /**
     * Container's getter for SlsShipmntItmLot1.
     * @return SlsShipmntItmLot1
     */
    public ViewObjectImpl getSlsShipmntItmLot1() {
        return (ViewObjectImpl)findViewObject("SlsShipmntItmLot1");
    }

    /**
     * Container's getter for SlsShpmntItmTOSlsShpmntItmLotVL1.
     * @return SlsShpmntItmTOSlsShpmntItmLotVL1
     */
    public ViewLinkImpl getSlsShpmntItmTOSlsShpmntItmLotVL1() {
        return (ViewLinkImpl)findViewLink("SlsShpmntItmTOSlsShpmntItmLotVL1");
    }

    /**
     * Container's getter for SlsShipmntItmSr1.
     * @return SlsShipmntItmSr1
     */
    public ViewObjectImpl getSlsShipmntItmSr1() {
        return (ViewObjectImpl)findViewObject("SlsShipmntItmSr1");
    }

    /**
     * Container's getter for SlsShpmntItmTOSlsShpmntItmSrVL1.
     * @return SlsShpmntItmTOSlsShpmntItmSrVL1
     */
    public ViewLinkImpl getSlsShpmntItmTOSlsShpmntItmSrVL1() {
        return (ViewLinkImpl)findViewLink("SlsShpmntItmTOSlsShpmntItmSrVL1");
    }

    /**
     * Container's getter for SlsPickIssuLot2.
     * @return SlsPickIssuLot2
     */
    public ViewObjectImpl getSlsPickIssuLot2() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuLot2");
    }

    /**
     * Container's getter for searchPickPackShip1.
     * @return searchPickPackShip1
     */
    public ViewObjectImpl getsearchPickPackShip1() {
        return (ViewObjectImpl)findViewObject("searchPickPackShip1");
    }

    /**
     * Container's getter for searchPickListDual1.
     * @return searchPickListDual1
     */
    public ViewObjectImpl getsearchPickListDual1() {
        return (ViewObjectImpl)findViewObject("searchPickListDual1");
    }

    /**
     * @param wareHouId
     */
    public void setWareHouId(String wareHouId) {
        this.wareHouId = wareHouId;
    }

    /**
     * @return
     */
    public String getWareHouId() {
        return wareHouId;
    }

    /**
     * Container's getter for LovEoIdVO1.
     * @return LovEoIdVO1
     */
    public ViewObjectImpl getLovEoIdVO1() {
        return (ViewObjectImpl)findViewObject("LovEoIdVO1");
    }

    /**
     * Container's getter for orgSlsPrfVO1.
     * @return orgSlsPrfVO1
     */
    public ViewObjectImpl getorgSlsPrfVO1() {
        return (ViewObjectImpl)findViewObject("orgSlsPrfVO1");
    }

    /**
     * Container's getter for SlsShipmntVO1.
     * @return SlsShipmntVO1
     */
    public ViewObjectImpl getSlsShipmntVO1() {
        return (ViewObjectImpl)findViewObject("SlsShipmntVO1");
    }

    /**
     * Container's getter for LovPickIdVO1.
     * @return LovPickIdVO1
     */
    public ViewObjectImpl getLovPickIdVO1() {
        return (ViewObjectImpl)findViewObject("LovPickIdVO1");
    }

    /**
     * Method used to call function to get the fy id and Set in SLS$SHPMNT.
     * @param CldId
     * @param OrgId
     * @param docDt
     * @return FY Id
     */
    public Integer getFYidOrgShip(String CldId, String OrgId, Date docDt) {
        ViewObjectImpl slsShip = this.getSlsShipmnt1();
        Integer fyId = 0;
        _log.info("Current Shi Row-" + slsShip.getCurrentRow());

        if (docDt != null) {
            fyId =
(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] { CldId, OrgId, docDt }));


        }
        _log.info("Fyid Pick is--" + fyId);
        return fyId;
    }


    /**
     * @param DocId
     * @param DocDt
     * @param uidPost
     * @param p_org_id
     * @param p_sloc_id
     * @param p_hoOrgId
     * @param p_cldId
     * @return
     */
    public String getship(String DocId, Date DocDt, Integer uidPost, String p_org_id, Integer p_sloc_id,
                          String p_hoOrgId, String p_cldId) {
        _log.info("getship ()");
        _log.info("DocId  : " + DocId);
        _log.info("DocDt  :" + DocDt);
        _log.info("uidPost  :" + uidPost);
        _log.info("p_org_id  :" + p_org_id);
        _log.info("p_sloc_id  :" + p_sloc_id);
        _log.info("p_hoOrgId  :" + p_hoOrgId);
        _log.info("p_cldId  :" + p_cldId);
        String s = null;
        try {

            s =
  callStoredFunction(Types.VARCHAR, "FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] { DocId, DocDt,
                                                                                                  uidPost, p_org_id,
                                                                                                  p_sloc_id, p_hoOrgId,
                                                                                                  p_cldId,
                                                                                                  "S" }).toString();
            System.out.println("Return from FN_SLS_TO_FIN_COST_OF_GOOD : " + s);
            _log.info(" after try result getShip()" + s);
            return s;

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_COST_OF_GOOD' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
            _log.info(" after catch result getShip()" + s);
            return s;
        }
    }


    /*  //sls_to_mm_updt_ship_can_stk
    public Number getshipOnCancel(Integer eoId,Date usrIdCreateDt,String shipId,Date ShipDt,String whId){
      String p_cld_id=getparamCldId() ;
      Integer p_sloc_id=getparamSlocId();
      String p_ho_org_id=getparamHoOrgId() ;
      String p_org_id =getparamOrgId();
      String p_wh_id =whId;
      Date p_doc_dt=ShipDt;
      Integer p_fy_id=getFYidOrgShip(getparamCldId(), getparamOrgId(), ShipDt);
      String p_doc_id_src =shipId ;
      Date p_doc_dt_src =ShipDt ;
      Integer p_eo_id =eoId;
      Integer p_usr_create=getparamUsrId() ;
      Date p_usr_create_dt =usrIdCreateDt ;
        _log.info("getship ()");
        _log.info("p_doc_id_src  : "+ p_doc_id_src);
        _log.info("p_doc_dt  :"+ p_doc_dt);
        _log.info("uidPost  :"+ p_usr_create);
        _log.info("p_org_id  :"+ p_org_id);
        _log.info("p_sloc_id  :"+ p_sloc_id);
        _log.info("p_ho_org_id  :"+ p_ho_org_id);
        _log.info("p_cld_id  :"+ p_cld_id);
        _log.info("p_wh_id  :"+ p_wh_id);
        _log.info("p_fy_id  :"+ p_fy_id);
        _log.info("p_usr_create_dt  :"+ p_usr_create_dt);
        _log.info("p_eo_id  :"+ p_eo_id);
        Number s=null;
        BigDecimal a=null;
        try {

            a =
                (BigDecimal)callStoredFunction(Types.NUMERIC, "sls_to_mm_updt_ship_can_stk(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                                            p_cld_id,
                                                                                            p_sloc_id,
                                                                                            p_ho_org_id,
                                                                                            p_org_id,
                                                                                            p_wh_id,
                                                                                            p_fy_id,
                                                                                            p_doc_dt,
                                                                                            p_doc_id_src,
                                                                                            p_doc_dt_src,
                                                                                            p_eo_id,
                                                                                            p_usr_create,
                                                                                            p_usr_create_dt});
             System.out.println("Return from sls_to_mm_updt_ship_can_stk : "+a);
            s=new Number(a);
            _log.info(" after try result getShip()" + s);
            return s;

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'sls_to_mm_updt_ship_can_stk' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
            _log.info(" after catch result getShip()" + s);
            return s;
        }

    } */


    //fn_sls_to_mm_ship_itm_can

    /**
     * @param eoId
     * @param usrIdCreateDt
     * @param shipId
     * @param ShipDt
     * @param whId
     * @return
     */
    public String getshipAftrCancel(Integer eoId, Date usrIdCreateDt, String shipId, Date ShipDt, String whId) {
        String p_cld_id = getparamCldId();
        Integer p_sloc_id = getparamSlocId();
        String p_ho_org_id = getparamHoOrgId();
        String p_org_id = getparamOrgId();
        String p_wh_id = whId;
        Date p_doc_dt = ShipDt;
        Integer p_fy_id = getFYidOrgShip(getparamCldId(), getparamOrgId(), ShipDt);
        String p_doc_id_src = shipId;
        Date p_doc_dt_src = ShipDt;
        Integer p_eo_id = eoId;
        Integer p_usr_create = getparamUsrId();
        Date p_usr_create_dt = usrIdCreateDt;
        _log.info("getship ()");
        _log.info("p_doc_id_src  : " + p_doc_id_src);
        _log.info("p_doc_dt  :" + p_doc_dt);
        _log.info("uidPost  :" + p_usr_create);
        _log.info("p_org_id  :" + p_org_id);
        _log.info("p_sloc_id  :" + p_sloc_id);
        _log.info("p_ho_org_id  :" + p_ho_org_id);
        _log.info("p_cld_id  :" + p_cld_id);
        _log.info("p_wh_id  :" + p_wh_id);
        _log.info("p_fy_id  :" + p_fy_id);
        _log.info("p_usr_create_dt  :" + p_usr_create_dt);
        _log.info("p_eo_id  :" + p_eo_id);

        String p = null;
        try {

            p =
  callStoredFunction(Types.VARCHAR, "fn_sls_to_mm_ship_itm_can(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { p_cld_id,
                                                                                                         p_sloc_id,
                                                                                                         p_ho_org_id,
                                                                                                         p_org_id,
                                                                                                         p_wh_id,
                                                                                                         p_fy_id,
                                                                                                         p_doc_dt,
                                                                                                         p_doc_id_src,
                                                                                                         p_doc_dt_src,
                                                                                                         p_eo_id,
                                                                                                         p_usr_create,
                                                                                                         p_usr_create_dt }).toString();
            System.out.println("Return from fn_sls_to_mm_ship_itm_can : " + p);
            _log.info(" after try result getShip()" + p);
            return p;

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'fn_sls_to_mm_ship_itm_can' !\n"+e);
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
            _log.info(" after catch result getShip()" + p);
            return p;
        }

    }

    public void filterSelectedShipment() {
        //PickId
        //PickDocId
        String ShipId = null;
        String PickDocId = null;
        ViewObjectImpl searchVo = this.getsearchPickPackShip1();
        if (searchVo.getCurrentRow() != null) {
            if (searchVo.getCurrentRow().getAttribute("ShipmntDocId") != null) {
                ShipId = searchVo.getCurrentRow().getAttribute("ShipmntDocId").toString();
            }
            if (searchVo.getCurrentRow().getAttribute("PickdocId") != null) {
                PickDocId = searchVo.getCurrentRow().getAttribute("PickdocId").toString();
            }
        }
        _log.info("Shipmnt id is : " + ShipId);
        _log.info("Pick id is : " + PickDocId);
        ViewObjectImpl impl = this.getviewSlsShipmntGen1();
        impl.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        impl.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
        impl.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
        impl.setNamedWhereClauseParam("SlocIdBind", getparamSlocId());
        impl.setNamedWhereClauseParam("ShipDocIdBind", ShipId);
        impl.setNamedWhereClauseParam("PickDocId", PickDocId);
        impl.executeQuery();
    }

    /**
     * @return
     */
    public boolean doShipmentExist() {
        Row currentRow = this.getsearchPickPackShip1().getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("ShipmntDocId") != null) {
                if (!currentRow.getAttribute("ShipmntDocId").toString().equals("")) {
                    return true;
                }
            }
        }
        return false;
    }

    public void setInitialBindVariablesInSlsShipmntGenVO() {
        ViewObjectImpl impl = this.getviewSlsShipmntGen1();
        impl.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        impl.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
        impl.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
        impl.setNamedWhereClauseParam("SlocIdBind", getparamSlocId()); //
        ViewObjectImpl custCoaVo = this.getCustCoaVO1();
        
        ViewObject searchShip = this.getsearchPickPackShip1();
        searchShip.setNamedWhereClauseParam("cldIdBind", getparamCldId());
        searchShip.setNamedWhereClauseParam("orgIdBind", getparamOrgId());
        searchShip.setNamedWhereClauseParam("hoOrgIdBind", getparamHoOrgId());
        searchShip.setNamedWhereClauseParam("slocIdBind", getparamSlocId());
        searchShip.setNamedWhereClauseParam("eoIdBind", -1);
        searchShip.setNamedWhereClauseParam("soDocIdBind",null);
        searchShip.setNamedWhereClauseParam("pickIdBind", null);
        searchShip.setNamedWhereClauseParam("shpmntIdBind", null);
        searchShip.setNamedWhereClauseParam("dlvModeBind", null);
        searchShip.setNamedWhereClauseParam("pickDateBind", null); 
        searchShip.executeQuery();    
    
        ViewCriteria vc = custCoaVo.getViewCriteria("CustCoaVOCriteria");
         System.out.println("view criteris " + vc.getAllRowsInRange().length + "d");
        custCoaVo.applyViewCriteria(vc);

        custCoaVo.setNamedWhereClauseParam("BincCustCoaCldId", getparamCldId());
        custCoaVo.setNamedWhereClauseParam("BincCustCoaSlocId", getparamSlocId());
        custCoaVo.setNamedWhereClauseParam("BincCustCoaOrgId", getparamOrgId());
        custCoaVo.setNamedWhereClauseParam("BincCustCoaHoOrgId", getparamHoOrgId());
        custCoaVo.executeQuery();
        //  System.out.println(custCoaVo.getQuery());
        // System.out.println("row count of serarch " + custCoaVo.getRowCount());

        ViewSlsSoPickItmVOImpl itm1 = this.getViewSlsSoPickItm1();
        itm1.setNamedWhereClauseParam("pick_doc_id_bind", null);
        itm1.executeQuery();
    }

    /**
     * @return
     */
    public String getAlertFlag() {
        //FN_GET_ORDER_VAL(P_SLOCID IN NUMBER,P_CLDID IN VARCHAR2,P_HO_ORGID IN VARCHAR2,P_ORGID IN VARCHAR2,
        //P_EO_ID IN NUMBER,P_DOC_ID IN NUMBER)
        BigDecimal Amount = new BigDecimal(0);
        String AlertFlag = "";
        Integer EoId = 0;
        String DocId = "";
        Row currentRow = this.getSlsPick1().getCurrentRow();
        if (currentRow != null) {
            EoId = (Integer)currentRow.getAttribute("EoId");
            DocId = (String)currentRow.getAttribute("DocId");
        }

        try {
            StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
            StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());

            Amount =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ORDER_VAL(?,?,?,?,?,?)", new Object[] { this.getparamSlocId(),
                                                                                                                      this.getparamCldId(),
                                                                                                                      this.getparamHoOrgId(),
                                                                                                                      this.getparamOrgId(),
                                                                                                                      EoId,
                                                                                                                      DocId 
                                                                                                                      });
            System.out.println("Amount :" + Amount);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_GET_ORDER_VAL' in AmImpl !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        Number value = StaticValue.NUMBER_ZERO;
        try {
            value = (Amount ==null ? StaticValue.NUMBER_ZERO :  new Number(Amount));
        } catch (SQLException e) {
        }
        try {
            //FN_GET_CREDIT_LIMIT_ALERT_TYPE(P_SLOCID IN NUMBER,P_CLDID IN VARCHAR2,P_HO_ORGID IN VARCHAR2,P_ORGID IN VARCHAR2,
            //P_SRC_ID IN VARCHAR2/***EO_ID**/,P_UTL_VAL IN NUMBER
            AlertFlag =
                    (String)callStoredFunction(Types.VARCHAR, "SLS.FN_GET_CREDIT_LIMIT_ALERT_TYPE(?,?,?,?,?,?)", new Object[] { this.getparamSlocId(),
                                                                                                                                this.getparamCldId(),
                                                                                                                                this.getparamHoOrgId(),
                                                                                                                                this.getparamOrgId(),
                                                                                                                                EoId,
                            /***EO_ID**/value });
            System.out.println("Alert Flag :" + AlertFlag);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_GET_CREDIT_LIMIT_ALERT_TYPE' in AmImpl !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        return AlertFlag;
    }

    /**
     * Select and set current pickId in shipment
     */
    public void selectCurrentPiclistOnShipmntPage() {
        //PickId
        //PickDocId
        String PickId = null;
        Row currentRow = this.getSlsPick1().getCurrentRow();
        if (currentRow != null) {
            PickId = currentRow.getAttribute("DocId").toString();
        }
        _log.info("Pick id is : " + PickId);
        ViewObjectImpl impl = this.getviewSlsShipmntGen1();
        impl.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        impl.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
        impl.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
        impl.setNamedWhereClauseParam("SlocIdBind", getparamSlocId());
        impl.setNamedWhereClauseParam("ShipDocIdBind", null);
        impl.setNamedWhereClauseParam("PickDocId", PickId);
        impl.executeQuery();
    }

    public void refreshPickLov() {
        Row currentRow = this.getSlsPack1().getCurrentRow();
        if (currentRow != null) {
            SlsPackVORowImpl row = (SlsPackVORowImpl)currentRow;
            //_log.info("CldId : "+)
            _log.info("Row count before execute : " + row.getLovPickIdVO1().getRowCount());
            row.getLovPickIdVO1().executeQuery();
            _log.info("Row count after execute : " + row.getLovPickIdVO1().getRowCount());
        }
    }

    public Integer getPackItmRowCount() {
        return this.getSlsPackItm1().getRowCount();
    }

    public void setValuesForShipmentPage() {
        System.out.println(" in setValuesForShipmentPage amimpl method");
        ViewObjectImpl shipmntGen = this.getviewSlsShipmntGen1();
        Row currentRow = shipmntGen.getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl impl = this.getSlsShipmnt1();
            System.out.println("Row count is  : " + impl.getRowCount());
            System.out.println("org id " + currentRow.getAttribute("OrgId") + " sloc id " +
                               currentRow.getAttribute("SlocId") + " ho org idd " +
                               currentRow.getAttribute("HoOrgId") + " cld id  " + currentRow.getAttribute("CldId") +
                               " pic id " + currentRow.getAttribute("PickId") + " eo id " +
                               currentRow.getAttribute("EoId"));
            impl.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("OrgId"));
            impl.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocId"));
            impl.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgId"));
            impl.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldId"));
            //impl.setNamedWhereClauseParam("PickIdBind", currentRow.getAttribute("PickId"));
            impl.setNamedWhereClauseParam("EoIdBind", currentRow.getAttribute("EoId"));
            if (currentRow.getAttribute("ShipIdFull") != null) {
                impl.setNamedWhereClauseParam("shipIdBind", currentRow.getAttribute("ShipIdFull"));
                System.out.println("Shipment id is:  " + currentRow.getAttribute("ShipIdFull"));
            } else {
                impl.setNamedWhereClauseParam("shipIdBind", null);
                System.out.println("Shipment id is:  " + null);
            }
            impl.executeQuery();
            System.out.println("Row count is  : " + impl.getRowCount());
        }


    }

    public String callFunctionToGetGeneratedVouId() {
        //SLS.FN_GET_VOU_NO (PARAM_SOURCE_DOC_ID VARCHAR2,
        //                  UID_POST NUMBER,
        //                  PARAM_ORG_ID VARCHAR2,
        //                  PARAM_SLOC_ID number,
        //                  PARAM_HO_ORG_ID   VARCHAR2,
        //                  PARAM_CLD_ID      VARCHAR2,
        //                  PARAM_SOURCE_TYPE VARCHAR2 default 'S'
        //)
        String VoucherId = "0";
        if (!ShipDocId.toString().equals("")) {
            try {
                //FN_GET_CREDIT_LIMIT_ALERT_TYPE(P_SLOCID IN NUMBER,P_CLDID IN VARCHAR2,P_HO_ORGID IN VARCHAR2,P_ORGID IN VARCHAR2,
                //P_SRC_ID IN VARCHAR2/***EO_ID**/,P_UTL_VAL IN NUMBER
                VoucherId =
                        (String)callStoredFunction(Types.VARCHAR, "SLS.FN_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] { ShipDocId.toString(),
                                                                                                                     this.getparamUsrId(),
                                                                                                                     this.getparamOrgId(),
                                                                                                                     this.getparamSlocId(),
                                                                                                                     this.getparamHoOrgId(),
                                                                                                                     this.getparamCldId(),
                                                                                                                     "S" });
                System.out.println("Voucher Id : " + VoucherId);
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'SLS.FN_GET_VOU_NO' in AmImpl !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
        this.getSlsPick1().executeQuery();
        return VoucherId;
    }

    public boolean isPackQuantityValid(Number val) {
        Number n = StaticValue.NUMBER_ZERO;
        Number p = StaticValue.NUMBER_ZERO;
        Row currentRow = this.getSlsPackItm1().getCurrentRow();
        if (currentRow.getAttribute("ItmId") != null) {
            RowSetIterator itr = this.getSlsPack1().createRowSetIterator(null);
            System.out.println("Iterator rowCount : " + itr.getRowCount());
            while (itr.hasNext()) {
                Row next = itr.next();
                if (next.getAttribute("DocId") != null) {

                }
                this.getSlsPackItmVO1().setRangeSize(-1);
                RowQualifier rq = new RowQualifier(this.getSlsPackItmVO1());
                rq.setWhereClause("DocId ='" + next.getAttribute("DocId").toString() + "' AND ItmId ='" +
                                  currentRow.getAttribute("ItmId"));
                System.out.println("Qualifier : " + rq.getExprStr());
                Row[] filteredRows = this.getSlsPackItmVO1().getFilteredRows(rq);
                System.out.println("Filtered rows : " + filteredRows.length);
                for (Row r : filteredRows) {
                    _log.info("Current Row is : " + currentRow + ":" + currentRow.getKey() + " and Iterator row is :" +
                              r + " : " + r.getKey() + " : " + (currentRow != r) + " : " + currentRow.equals(r) +
                              " : " + !currentRow.getKey().equals(r.getKey()));
                    if (!currentRow.getKey().equals(r.getKey())) {
                        System.out.println("Not a current row !");
                        n = n.add((Number)r.getAttribute("PackQty"));
                    }
                }
            }
            itr.closeRowSetIterator();
            if (this.getSlsPick1().getCurrentRow() != null) {
                int i = this.getSlsPickItm1().getRangeSize();
                this.getSlsPickItm1().setRangeSize(-1);
                Row[] allRowsInRange = this.getSlsPickItm1().getAllRowsInRange();

                for (Row r1 : allRowsInRange) {
                    if (r1.getAttribute("ItmId").toString().equals(currentRow.getAttribute("ItmId").toString())) {
                        p = p.add((Number)r1.getAttribute("PickQty"));
                    }
                }
            }

        }
        System.out.println("Quantity in Pack : " + n + " Quantity in Pick : " + p);
        System.out.println("Quantity after addition:" + val.add(n));
        System.out.println("Quantity in Pack : " + n + " Quantity in Pick : " + p);
        System.out.println("Comparision : " + ((val.add(n)).compareTo(p) == -1));
        if ((val.add(n)).compareTo(p) == 1) {
            return false;
        } else {
            return true;
        }


    }

    /**
     * Container's getter for SlsPackItmVO1.
     * @return SlsPackItmVO1
     */
    public ViewObjectImpl getSlsPackItmVO1() {
        return (ViewObjectImpl)findViewObject("SlsPackItmVO1");
    }

    /**
     * Container's getter for LovEoNmFromEoIdVO1.
     * @return LovEoNmFromEoIdVO1
     */
    public ViewObjectImpl getLovEoNmFromEoIdVO1() {
        return (ViewObjectImpl)findViewObject("LovEoNmFromEoIdVO1");
    }

    /**
     * Method to get EoNm
     * @return
     */
    public StringBuffer getPickEoNm() {
        StringBuffer EoNm = new StringBuffer("");
        Row currentRow = this.getSlsPick1().getCurrentRow();
        if (currentRow != null) {
            Object nm = currentRow.getAttribute("EoNmTrans");
            if (nm != null) {
                EoNm = new StringBuffer(nm.toString());
            }
        }
        return EoNm;
    }

    /**
     * Method to execute pick item vo for preventing link to be disabled(Added By Rohit on 26 March 2014
     * @return
     */

    public void executePickItmVo() {
        System.out.println("executePickItmVo in amimpl");
        ViewObject slsPickItm = this.getSlsPickItm1();
        slsPickItm.executeQuery(); //addd by rohit
    }

    public void setAddsValToNoneOnPageRun() {
        System.out.println("enter in setAddsValToNoneOnPageRun");

        ViewObjectImpl addsVo = this.getLovAddsId1();
        System.out.println("add row befor " + addsVo.getRowCount());
        ViewCriteria vc = addsVo.getViewCriteria("LovAddsIdVOCriteria");
        addsVo.applyViewCriteria(vc);
        addsVo.setNamedWhereClauseParam("slocIdBind", -1);
        addsVo.setNamedWhereClauseParam("orgIdBind", null);
        addsVo.setNamedWhereClauseParam("cldIdBind", null);
        addsVo.setNamedWhereClauseParam("eoIdBind", null);
        addsVo.setNamedWhereClauseParam("addBind", -1);
        addsVo.executeQuery();
        System.out.println("add row befor " + addsVo.getRowCount());

    }

    /**
     * Container's getter for LovAddsId1.
     * @return LovAddsId1
     */
    public ViewObjectImpl getLovAddsId1() {
        return (ViewObjectImpl)findViewObject("LovAddsId1");
    }

    public void setCurrPickItmRowWithKey() {
        System.out.println("setCurrPickItmRowWithKey");
        ViewObjectImpl pickItmVo = this.getSlsPickItm1();
        System.out.println("set setCurrPickItmRowWithKey 1");
        pickItmVo.executeQuery();
        System.out.println("set setCurrPickItmRowWithKey 2");
        RowSetIterator rsaa = pickItmVo.createRowSetIterator(null);
        if (rsaa != null) {
            System.out.println("srs" + rsaa + "rs.hasNext() " + rsaa.hasNext());
            while (rsaa.hasNext()) {
                Key key11 = rsaa.next().getKey();
                System.out.println("key in iteratorc" + key11);
                Row rrr = this.getSlsPackItm1().getRow(key11);
                this.getSlsPickItm1().setCurrentRow(rrr);
                break;
            }
        }
        rsaa.closeRowSetIterator();
        /*  Key k = pickItmVo.getCurrentRow().getKey();
        System.out.println("set setCurrPickItmRowWithKey 3");
        System.out.println("cureent key " + k);
        Row row = pickItmVo.getRow(k);
        System.out.println("Row : " + row);
        pickItmVo.setCurrentRow(row); */
    }


    /**
     * @param itmAddFlg
     */
    public void setItmAddFlg(Integer itmAddFlg) {
        this.itmAddFlg = itmAddFlg;
    }

    /**
     * @return
     */
    public Integer getItmAddFlg() {
        return itmAddFlg;
    }

    /**
     * @param packKey
     */
    public void setPackRowWithkey(Key packKey) {
        ViewObjectImpl packVo = this.getSlsPack1();
        if (packKey != null) {
            Row row = packVo.getRow(packKey);
            packVo.setCurrentRow(row);
        }
    }


    public void isOrgUsedPackSetUp() {

        String checkPack =
            (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { this.getparamCldId(),
                                                                                                        this.getparamSlocId(),
                                                                                                        this.getparamOrgId(),
                                                                                                        "USE_PACK_ENTRY" });
        System.out.println("return value is " + checkPack);
        Map pageFlowScope = RequestContext.getCurrentInstance().getPageFlowScope();
        pageFlowScope.put("CHECK_PAGE_MODE", "V");
    }


    /**
     * @return
     */
    public String isCoaIdIsNull() {
        ViewObjectImpl pickVo = this.getSlsPick1();
        Row pickRow = pickVo.getCurrentRow();
        ViewObjectImpl custVo = this.getCustCoaVO1();
        System.out.println("====gey row count" + custVo.getRowCount());
        int i = custVo.getRangeSize();
        System.out.println("RMAGE SIZE" + i);
        custVo.setRangeSize(-1);
        if (pickRow != null) {
            Integer eoId = (Integer)pickRow.getAttribute("EoId");
            System.out.println("Eo Id " + eoId);
            if (eoId != null) {
                System.out.println("====");

                RowQualifier custRq = new RowQualifier(custVo);
                custRq.setWhereClause("SlocId=" + getparamSlocId() + " and CldId='" + getparamCldId() +
                                      "' and OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() +
                                      "' and EoId=" + eoId);
                // custRq.setWhereClause("EoId="+eoId);
                System.out.println("query " + custRq.getExprStr());
                Row filtredRow[] = custVo.getFilteredRows(custRq);
                System.out.println("filtered row length  " + filtredRow.length);
                if (filtredRow.length > 0) {
                    Integer coaId = (Integer)filtredRow[0].getAttribute("CoaId");
                    System.out.println("coa iD " + coaId);
                    if (coaId == null) {
                        System.out.println("return  y when coa id is null");
                        return "Y";
                    } else {
                        System.out.println("return  n when coa id is not null");
                        return "N";
                    }
                }
            }
        }
        custVo.setRangeSize(i);
        System.out.println("reutn N when nothing heppened");
        return "N";
    }

    /**
     * Container's getter for CustCoaVO1.
     * @return CustCoaVO1
     */
    public ViewObjectImpl getCustCoaVO1() {
        return (ViewObjectImpl)findViewObject("CustCoaVO1");
    }


    /**
     * @param pickDate
     */
    public void resetOrderData(Timestamp pickDate) {
        System.out.println("enter resetOrderData");
        ViewObjectImpl impl = this.getSlsPick1();
        Integer EoId = -1;
        String AddsId = null;
        String WhId = null;
        String SoIdTrans = null;
        String ItmNmBind = null;
        String ItmIdTrans = null;
        if (impl.getCurrentRow() != null) {
            Row currentRow = impl.getCurrentRow();
            if (currentRow.getAttribute("EoId") != null) {
                EoId = (Integer)currentRow.getAttribute("EoId");
                if (currentRow.getAttribute("DlvAddsId") != null) {
                    AddsId = currentRow.getAttribute("DlvAddsId").toString();
                }
                if (currentRow.getAttribute("WhId") != null) {
                    WhId = currentRow.getAttribute("WhId").toString();
                }
                if (currentRow.getAttribute("SoIdTrans") != null) {
                    SoIdTrans = currentRow.getAttribute("SoIdTrans").toString();
                }
                if (currentRow.getAttribute("ItmIdTrans") != null) {
                    ItmIdTrans = currentRow.getAttribute("ItmIdTrans").toString();
                }
                /* if(currentRow.getAttribute("ItmNmBind") != null){
                    ItmNmBind = currentRow.getAttribute("ItmNmBind").toString();
                } */

            }

        }
        try {
            pickDate = new Timestamp(pickDate.dateValue());
        } catch (SQLException e) {
            _log.info("In Exception-" + e);
        }
        _log.info("Pick Date is : " + pickDate + " Eo Id : " + EoId + " Adds Id :" + AddsId + " So Id : " + SoIdTrans +
                  " Itm nm : " + ItmIdTrans);
        ViewObject slssoPickVw = this.getviewSlsSoPick1();
        //_log.info("So Rows Before filter : "+slssoPickVw.getRowCount());
        slssoPickVw.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
        slssoPickVw.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
        slssoPickVw.setNamedWhereClauseParam("SlocIdBind", -1);
        slssoPickVw.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        slssoPickVw.setNamedWhereClauseParam("eoIdBind", EoId);
        slssoPickVw.setNamedWhereClauseParam("SoDocIdBind", SoIdTrans);
        slssoPickVw.setNamedWhereClauseParam("ShipAddsBind", AddsId);

        try {
            _log.info("Date : " + pickDate.dateValue());
            _log.info("Timestamp : " + pickDate);
            slssoPickVw.setNamedWhereClauseParam("bindDlvDt", pickDate);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        System.out.println("quey " + slssoPickVw.getQuery());
        slssoPickVw.executeQuery();
        Row curRow = this.getSlsPick1().getCurrentRow();
        //curRow.setAttribute("DocDt", null);
        curRow.setAttribute("WhId", null);
        curRow.setAttribute("SoSearchTrans", null);
        curRow.setAttribute("EoNmTrans", null);
        curRow.setAttribute("CurrIdSp", null);
        curRow.setAttribute("BarCodeNmTrans", null);
        curRow.setAttribute("DlvAddsTrans", null);
        curRow.setAttribute("ItmNmBind", null);
        curRow.setAttribute("EoId", null);
        curRow.setAttribute("DlvAddsId", null);
        //.executeQuery(); // 30 jun 2014 for  make reset the field to populate data.
        System.out.println("quey " + slssoPickVw.getQuery());
    }

    /**
     * @return
     */
    public String doOrgUseTolerance() {

        String checkPack =
            (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { this.getparamCldId(),
                                                                                                        this.getparamSlocId(),
                                                                                                        this.getparamOrgId(),
                                                                                                        "CHK_DLV_SCHDL_TLRNC" });
        System.out.println("return value is " + checkPack);
        return checkPack;
        //Map pageFlowScope = RequestContext.getCurrentInstance().getPageFlowScope();
        //pageFlowScope.put("CHECK_PAGE_MODE", "V");
    }

    public void delLotbinSrData() {
        _log.info("in remove lot bin sr data ");
        //  ViewObjectImpl lotVo = this.getSlsPickIssuLotVO1();
        //ViewObjectImpl binVo = this.getSlsPickIssuBinVO1();
        //ViewObjectImpl srVo = this.getSlsPickIssuSrVO1();

        ViewObjectImpl lotVo = this.getSlsPickIssuLot3();
        ViewObjectImpl binVo = this.getSlsPickIssuBin2();
        ViewObjectImpl srVo = this.getSlsPickIssuSr2();

        binVo.executeQuery(); // for detecting the row to delete for auto issue because it is coming through the function.
        srVo.executeQuery();

        RowQualifier rqwLot = new RowQualifier(lotVo);
        RowQualifier rqwBin = new RowQualifier(binVo);
        RowQualifier rqwSr = new RowQualifier(srVo);

        _log.info("Pick iD==" + pickdocId + " =whId =" + pickWhId + " soId =" + sodocId + " and item id " + soItmId);

        rqwLot.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                              getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickdocId +
                              "' and SoId='" + sodocId + "' and ItmId='" + soItmId + "' and WhId='" + pickWhId + "'");
        // _log.info("clause " + rqwLot.getExprStr());

        Row lotfltRw[] = lotVo.getFilteredRows(rqwLot);
        System.out.println(" " + lotfltRw.length);
        if (lotfltRw.length > 0) {
            for (Row r2 : lotfltRw) {
                r2.remove();
            }
        }
        // _log.info("======================");

        rqwBin.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                              getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickdocId +
                              "' and SoId='" + sodocId + "' and ItmId='" + soItmId + "' and WhId='" + pickWhId + "'");
        //  System.out.println("clause " + rqwBin.getExprStr());

        Row binfltRw[] = binVo.getFilteredRows(rqwBin);
        System.out.println(" " + binfltRw.length);
        if (binfltRw.length > 0) {
            for (Row r3 : binfltRw) {
                r3.remove();
            }
        }
        // System.out.println("===========================");

        rqwSr.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                             getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickdocId +
                             "' and SoId='" + sodocId + "' and ItmId='" + soItmId + "' and WhId='" + pickWhId + "'");
        //  System.out.println("clause " + rqwSr.getExprStr());

        Row srfltRw[] = srVo.getFilteredRows(rqwSr);
        System.out.println(" " + srfltRw.length);
        if (srfltRw.length > 0) {
            for (Row r4 : srfltRw) {
                r4.remove();
            }
        }
        //lotVo.executeQuery();
        // binVo.executeQuery();
        // srVo.executeQuery();
        //   this.getSlsPickIssuLot3().executeQuery();
        //    System.out.println("Length after deletion :  "+lotVo.getFilteredRows(rqwLot).length+"----------------");
        //    this.getSlsPickIssuBin1().executeQuery();
        //   this.getSlsPickIssuSr1().executeQuery();


        lotVo.executeQuery();
        binVo.executeQuery();
        srVo.executeQuery();
        this.getDBTransaction().postChanges();

        // this.getSlsPickIssuLot1().clearCache();
        // this.getSlsPickIssuBin1().clearCache();
        // this.getSlsPickIssuSr1().clearCache();
        //  srVo.clearCache();
        //  binVo.clearCache();
        //  srVo.clearCache();
    }

    String pickdocId = null;
    String sodocId = null;
    String soItmId = null;
    String pickWhId = null;
    Row rrr = null;

    /**
     * @param r
     * @return
     */
    public String isLotDataExist(Row r) {
        rrr = r;
        //  System.out.println(" LOT ROW COUNT :" + r);
        ViewObjectImpl pickVo = this.getSlsPick1();
        //ViewObjectImpl lotVo1 = this.getSlsPickIssuLotVO1();
        this.getSlsPickIssuLot3().executeQuery();
        ViewObjectImpl lotVo1 = this.getSlsPickIssuLot3();
        System.out.println("the Row count are: " + lotVo1.getRowCount());

        RowQualifier rqw = new RowQualifier(lotVo1);

        pickdocId = (String)pickVo.getCurrentRow().getAttribute("DocId");
        pickWhId = (String)pickVo.getCurrentRow().getAttribute("WhId");
        sodocId = (String)r.getAttribute("DocId");
        soItmId = (String)r.getAttribute("ItmIdSo");
        

        rqw.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                           getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickdocId +
                           "' and SoId='" + sodocId + "' and ItmId='" + soItmId + "' and WhId='" + pickWhId + "'  and DlvDt = '"+r.getAttribute("DlvDt"));

        System.out.println("clause " + rqw.getExprStr());

        Row fltRw[] = lotVo1.getFilteredRows(rqw);
        System.out.println("Filter rows are:  " + fltRw.length);
        _log.info(" fltRw " + fltRw.length);


        if (fltRw.length > 0) {
            _log.info("set 1 return 1 ");
            return "Y";
        }
        _log.info("set 2 return 0");
        return "N";
    }

    public void rePopulateItemToPickList() {
        _log.info("curRow in amimpl is rr ==" + rrr);
        itmAddFlg = 1;
        String flag = "Y";
        ViewObjectImpl slsPickItm = this.getSlsPickItm1();
        ViewObject slsPick = this.getSlsPick1();
        Row pickRow = slsPick.getCurrentRow();
        ViewObject slsSoPick = this.getviewSlsSoPick1();
        //  rrr.setAttribute("SelectItemChkBxTrans", "Y");
        _log.info("Select Item Val->" + rrr.getAttribute("SelectItemChkBxTrans") + " ==itm  is-->" +
                  rrr.getAttribute("ItmIdSo"));

        _log.info("Total Row in itm-" + slsPickItm.getRowCount());
        RowQualifier rq = new RowQualifier(slsPickItm);
        rq.setWhereClause("SoId='" + rrr.getAttribute("DocId") + "' and ItmId='" + rrr.getAttribute("ItmIdSo") +
                          "' and DlvDt='" + rrr.getAttribute("DlvDt") + "'");
        _log.info("Where Clause is-->" + rq.getExprStr());
        Row fltrdRows[] = slsPickItm.getFilteredRows(rq);
        _log.info("Total Row for This Itm->" + fltrdRows.length);

        if (fltrdRows.length == 0) {
            _log.info("when lot data dos not exist");
            /*  _log.info("Currency in PickList header-" + pickRow.getAttribute("CurrIdSp") + "and in tree child-" +
                      rr.getAttribute("CurrIdSp"));
            if (pickRow.getAttribute("CurrIdSp") == null) {
                pickRow.setAttribute("CurrIdSp", rr.getAttribute("CurrIdSp"));
                pickRow.setAttribute("CurrConvFctr", rr.getAttribute("CurrConvFctr"));
                slsSoPick.setNamedWhereClauseParam("currIdSpBind", rr.getAttribute("CurrIdSp"));
                slsSoPick.executeQuery();

            } else {
                Integer pickCurrId = Integer.parseInt(pickRow.getAttribute("CurrIdSp").toString());
                Integer currIdOrd = Integer.parseInt(rr.getAttribute("CurrIdSp").toString());
                if (pickCurrId.compareTo(currIdOrd) != 0) {
                    flag = "N";
                    //FacesMessage errMsg = new FacesMessage("Can not select Sales Order of different currency");
                    FacesMessage errMsg = new FacesMessage(resolvElDCMsg("#{bundle['MSG.966']}").toString());

                    errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, errMsg);
                } else {
                    flag = "Y";
                }
            }

            if (flag.equalsIgnoreCase("Y")) {
                Row newRow = slsPickItm.createRow();
                slsPickItm.insertRow(newRow);
                serialNumGen("SlsPickItm1");
                _log.info("__________________________________________________ 1");
                newRow.setAttribute("SoId", rr.getAttribute("DocId"));
                // _log.info("__________________________________________________ 2");
                newRow.setAttribute("ItmId", rr.getAttribute("ItmIdSo"));
                //  _log.info("__________________________________________________ 2.1");
                if (this.getSlsPick1().getCurrentRow() != null) {
                    //   _log.info("__________________________________________________ 2.2");
                    SlsPickVORowImpl row = (SlsPickVORowImpl)this.getSlsPick1().getCurrentRow();
                    Row[] filteredRows = row.getLovBarcodeVO1().getFilteredRows("ItmId", row.getItmIdTrans());
                    // _log.info("__________________________________________________ 2.3 + " + filteredRows.length);
                    if (filteredRows.length > 0 && filteredRows[0].getAttribute("BcNo") != null) {
                        _log.info("__________________________________________________ 2.4");

                        newRow.setAttribute("BcNo", (String)filteredRows[0].getAttribute("BcNo"));
                        // System.out.println("BcNo is :" + filteredRows[0].getAttribute("BcNo"));

                    }
                }

                //setAttribute("PickQty"
                //_log.info("__________________________________________________ 3");
                newRow.setAttribute("ItmUom", rr.getAttribute("ItmUomSo"));
                //_log.info("__________________________________________________ 4");
                newRow.setAttribute("SoItmQty", rr.getAttribute("PendingQty"));
                //  _log.info("__________________________________________________ 5 _____ So Item Quantity : " +
                //   rr.getAttribute("PendingQty"));
                newRow.setAttribute("DlvDt", rr.getAttribute("DlvDt"));
                //  _log.info("__________________________________________________ 6");
                newRow.setAttribute("PickQty", rr.getAttribute("SchdlQuantTrans"));
                //_log.info("__________________________________________________ 7 _____ So pick Quantity :" +
                //  rr.getAttribute("SchdlQuantTrans"));
                newRow.setAttribute("ItmPrice", rr.getAttribute("ItmRate"));
                //_log.info("__________________________________________________ 8");
                newRow.setAttribute("SoDt", rr.getAttribute("SoDt"));
                //_log.info("__________________________________________________ 9");
                Number totQty = (Number)rr.getAttribute("PendingQty");
                //_log.info("__________________________________________________ 10");
                Number pickedQty = (Number)rr.getAttribute("SchdlQuantTrans");
                //_log.info("__________________________________________________ 11");
                newRow.setAttribute("BalQty", totQty.subtract(pickedQty));
                //_log.info("__________________________________________________ 12");
                String baseUom = getBaseUom(newRow.getAttribute("ItmId").toString());
                //_log.info("__________________________________________________ 13");


                BigDecimal convFctr =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)",
                                                   new Object[] { getparamSlocId(), getparamCldId(), getparamOrgId(),
                                                                  newRow.getAttribute("ItmId"), baseUom,
                                                                  newRow.getAttribute("ItmUom") });
                Number uomFctr = new Number(1);
                // _log.info("__________________________________________________ 14");

                try {
                    uomFctr = new Number(convFctr);
                } catch (Exception e) {
                    _log.info(e);
                }
                //  _log.info("__________________________________________________ 15");
                //  _log.info("Base UOm is-" + baseUom + "Factor is-" + uomFctr + "Qty Bs-" + totQty.multiply(uomFctr));
                newRow.setAttribute("ItmUomBs", baseUom);
                //  _log.info("__________________________________________________ 16");
                newRow.setAttribute("UomConvFctr", uomFctr);
                // _log.info("__________________________________________________ 17");
                newRow.setAttribute("ItmQtyBs", totQty.multiply(uomFctr));
                //  Key itmKey = newRow.getKey();
                //  itmRow = slsPickItm.getRow(itmKey);
                _log.info("Row Inserted--itmKey when new row ");
            } */
        } else {
            Number prevPickQty = (Number)fltrdRows[0].getAttribute("PickQty");
            Number curPickQty = (Number)rrr.getAttribute("SchdlQuantTrans");
            _log.info("__________________________________________________ set 1");
            Number totQty = (Number)rrr.getAttribute("PendingQty");
            _log.info("__________________________________________________ set 3");
            Number penddingQnt = (Number)fltrdRows[0].getAttribute("BalQty"); //added by Rohit
            _log.info("Previous Qty-" + prevPickQty + "And Current Qty-" + curPickQty + " penddingQnt =" +
                      penddingQnt + " totQty =" + totQty);
            fltrdRows[0].setAttribute("PickQty", (prevPickQty.add(curPickQty)));
            fltrdRows[0].setAttribute("BalQty", totQty.subtract(curPickQty)); //added by Rohit

            /* FacesMessage errMsg = new FacesMessage("Item Quantity is updated in PickList for this Sales Order"); */
            FacesMessage errMsg = new FacesMessage(resolvElDCMsg("#{bundle['MSG.967']}").toString());
            errMsg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
        }
        //  _log.info("__________________________________________________ 18");
        getFYidOrgPick(getparamCldId(), getparamOrgId());
        _log.info("__________________________________________________ 19");
        this.getDBTransaction().validate();
        //for checking 30 jun 2014
        this.getSlsPickIssuLotVO1().executeQuery();
        this.getSlsPickIssuLot1().executeQuery();
        System.out.println("Execution has done........");
        _log.info("__________________________________________________ 20");
        this.getDBTransaction().postChanges();
        _log.info("__________________________________________________ 21");
        this.getViewSlsSoPickItm1().executeQuery();
        _log.info("__________________________________________________ 22");
        slsPickItm.executeQuery();
        _log.info("__________________________________________________ 23");
        // Filter It Using Key Attribute
        Row[] grpRow = this.getviewSlsSoPick1().getAllRowsInRange();
        //  _log.info("__________________________________________________ 24");
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            //  _log.info("__________________________________________________ 25");
            for (Row r : grpRow) {
                _log.info("_______________________________________________________________ 26");
                RowSet childRows = (RowSet)r.getAttribute("ViewSlsSoPickItm");
                _log.info("Rows in ViewLink-->" + childRows.getRowCount());
                //Execute Child Rowset
                childRows.executeQuery();
            }
        }
        // _log.info("__________________________________________________ 27");
        this.getviewSlsSoPick1().executeQuery();
        _log.info("__________________________________________________ 28");
        itmAddFlg = 0;
        this.getViewSlsSoPickItm1().executeQuery(); // 14 july 2014
    }

    /**
     * Container's getter for SlsPickIssuBinVO1.
     * @return SlsPickIssuBinVO1
     */
    public ViewObjectImpl getSlsPickIssuBinVO1() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuBinVO1");
    }

    /**
     * Container's getter for SlsPickIssuSrVO1.
     * @return SlsPickIssuSrVO1
     */
    public ViewObjectImpl getSlsPickIssuSrVO1() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuSrVO1");
    }


    /**
     * @return
     */
    public Boolean isPickSelected() {
        Boolean b = true;
        ViewObjectImpl shipeGenView = this.getviewSlsShipmntGen1();
        RowSetIterator createRowSetIterator = shipeGenView.createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row r = createRowSetIterator.next();
            // System.out.println("CB value : " + r.getAttribute("selectPickListCbTrans"));
            String c =
                r.getAttribute("selectPickListCbTrans") == null ? "N" : r.getAttribute("selectPickListCbTrans").toString();
            if (c.equals("Y")) {
                b = false;
                break;
            }
        }
        createRowSetIterator.closeRowSetIterator();
        //  System.out.println("b in amimpl :"+b);
        return b;
    }

    /**
     * Container's getter for SlsShipmntVO2.
     * @return SlsShipmntVO2
     */
    public ViewObjectImpl getSlsShipmntVO2() {
        return (ViewObjectImpl)findViewObject("SlsShipmntVO2");
    }


    /**
     * Container's getter for SlsPickIssuLotVO1.
     * @return SlsPickIssuLotVO1
     */
    public ViewObjectImpl getSlsPickIssuLotVO1() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuLotVO1");
    }

    /**
     * Container's getter for SlsPickIssuLot3.
     * @return SlsPickIssuLot3
     */
    public ViewObjectImpl getSlsPickIssuLot3() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuLot3");
    }

    /**
     * Container's getter for SlsPickToSlsIssueLotVL1.
     * @return SlsPickToSlsIssueLotVL1
     */
    public ViewLinkImpl getSlsPickToSlsIssueLotVL1() {
        return (ViewLinkImpl)findViewLink("SlsPickToSlsIssueLotVL1");
    }

    /**
     * Container's getter for SlsPickIssuBin2.
     * @return SlsPickIssuBin2
     */
    public ViewObjectImpl getSlsPickIssuBin2() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuBin2");
    }

    /**
     * Container's getter for SlsPickToSlsIssueBinVL1.
     * @return SlsPickToSlsIssueBinVL1
     */
    public ViewLinkImpl getSlsPickToSlsIssueBinVL1() {
        return (ViewLinkImpl)findViewLink("SlsPickToSlsIssueBinVL1");
    }

    /**
     * Container's getter for SlsPickIssuSr2.
     * @return SlsPickIssuSr2
     */
    public ViewObjectImpl getSlsPickIssuSr2() {
        return (ViewObjectImpl)findViewObject("SlsPickIssuSr2");
    }

    /**
     * Container's getter for SlsPickSlsIssueSrkVL1.
     * @return SlsPickSlsIssueSrkVL1
     */
    public ViewLinkImpl getSlsPickSlsIssueSrkVL1() {
        return (ViewLinkImpl)findViewLink("SlsPickSlsIssueSrkVL1");
    }

    /**
     * @param shipDocIdBind
     */
    public void setShipDocIdBind(String shipDocIdBind) {
        this.shipDocIdBind = shipDocIdBind;
    }

    /**
     * @return
     */
    public String getShipDocIdBind() {
        return shipDocIdBind;
    }

    /**
     * @return
     */
    public String cancelPickList() {
        Row row = this.getSlsPick1().getCurrentRow();
        Integer fyId = Integer.parseInt(row.getAttribute("FyId").toString());
        Timestamp doc_dt = (Timestamp)row.getAttribute("DocDt");
        String doc_id = row.getAttribute("DocId").toString();
        Integer EoId = Integer.parseInt(row.getAttribute("EoId").toString());


        Integer usr_id = getparamUsrId();
        Date d = new Date();
        System.out.println("value are: " + fyId + "\n" +
                doc_dt + "\n" +
                doc_id + "\n" +
                EoId + "\n");
        System.out.println(getparamCldId());
        System.out.println(getparamHoOrgId());
        System.out.println(getparamSlocId());
        System.out.println(getparamUsrId());
        System.out.println(getparamOrgId());
        System.out.println(d);
        String flag = "N";
        try {
            /* System.out.println("val from function is:  -- "+callStoredFunction(Types.VARCHAR, "SLS.FN_SLS_PICK_CAN(?,?,?,?,?,?,?,?,?,?)",
                                           new Object[] {  getparamCldId(),getparamSlocId(),getparamHoOrgId(), getparamOrgId(),
                                                          fyId, doc_dt.dateValue(),doc_id,EoId,

                                                          usr_id, d }).toString()); */
            Date usrDate = ((Timestamp)row.getAttribute("UsrIdCreateDt")).dateValue();
            System.out.println("User date is:  " + usrDate);
            Object result =
                callStoredFunction(Types.VARCHAR, "SLS.FN_SLS_PICK_CAN(?,?,?,?,?,?,?,?,?,?)", new Object[] { getparamCldId(),
                                                                                                             getparamSlocId(),
                                                                                                             getparamHoOrgId(),
                                                                                                             getparamOrgId(),
                                                                                                             fyId,
                                                                                                             doc_dt.dateValue(),
                                                                                                             doc_id,
                                                                                                             EoId,
                                                                                                             usr_id,
                                                                                                             usrDate }).toString();

            if (result != null) {
                flag = result.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        System.out.println("Flag vale in amimpl is:  " + flag);
        return flag;
    }

    /**
     * @param flag
     */
    public void UpdateOrdStat(String flag) {
        System.out.println("Flag val is:  "+flag);
        Row row = this.getSlsPick1().getCurrentRow();
        Integer fyId = Integer.parseInt(row.getAttribute("FyId").toString());
        String whId = row.getAttribute("WhId").toString();
        String docId = row.getAttribute("DocId").toString();
        String result =
            callStoredFunction(Types.VARCHAR, "FN_SLS_PICK_SO_STATUS(?,?,?,?,?,?,?,?)", new Object[] { getparamCldId(),
                                                                                                     getparamSlocId(),
                                                                                                     getparamHoOrgId(),
                                                                                                     getparamOrgId(),
                                                                                                     whId, fyId,
                                                                                                     docId,flag }).toString();
        System.out.println("Result from function is:  " + result);
    }


    /**
     * @return
     */
    public StringBuilder isLotQtyValid(){
        StringBuilder g = new StringBuilder("Y");
        //ArrayList to store lots who have been selected for Issuing
        ArrayList<Row> selectedLot = new ArrayList<Row>();
        ViewMmStkSummLotVOImpl issueLotVo = getViewMmStkSummLot1();
        RowSetIterator issueLotItr = issueLotVo.createRowSetIterator(null);
        while(issueLotItr.hasNext()){
            Row issueRow = issueLotItr.next();
            Object issueQtyO = issueRow.getAttribute("TransIssuQtyValue");
            Number issueQty = (issueQtyO == null ? StaticValue.NUMBER_ZERO : (Number)issueQtyO);
            if(issueQty.compareTo(StaticValue.NUMBER_ZERO) > 0){
                selectedLot.add(issueRow);
            }
        }
        issueLotItr.closeRowSetIterator();
        //Lot vo to check total issued qty of a lot
        ViewObjectImpl lotVo = this.getSlsPickIssuLot3();
        lotVo.executeQuery();
        int i = lotVo.getRangeSize();
        lotVo.setRangeSize(-1);
        for(Row r : selectedLot){
            Object lotAvlQtyO = r.getAttribute("TotStk");
            Object entredIssueQuantO = r.getAttribute("TransIssuQtyValue");
            
            Number lotAvlQty = (lotAvlQtyO == null ? StaticValue.NUMBER_ZERO : (Number)lotAvlQtyO);
            Number entredIssueQuant = (entredIssueQuantO == null ? StaticValue.NUMBER_ZERO : (Number)entredIssueQuantO);
            
            StringBuilder clause = new StringBuilder("");
            clause.append("ItmId = '").append(r.getAttribute("ItmId")).append("'");
            clause.append("AND LotId = '").append(r.getAttribute("LotId")).append("'");
            RowQualifier rq = new RowQualifier(lotVo);
            rq.setWhereClause(clause.toString());
            Row[] lotRows = lotVo.getFilteredRows(rq);
            Number totPickQty = StaticValue.NUMBER_ZERO;
            for(Row lotR : lotRows){
                Object pickO = lotR.getAttribute("PickQty");
                if(pickO != null){
                    totPickQty =totPickQty.add((Number)pickO);
                }    
            }
            totPickQty = totPickQty.add(entredIssueQuant);
            if(totPickQty.compareTo(lotAvlQty) > 0){
                g = new StringBuilder("Total Issue Quantity of lot id : ");
                g.append(r.getAttribute("LotId"));
                g.append(" for selected Item in current PickList is Exceeding the Total Available Quantity.\n\n");
                g.append("<br /><br />Lot Available Quantity : ");
                g.append(lotAvlQty);
                g.append("<br /><br />Total Picked Quantity for Selected Item Currently : ");
                g.append(totPickQty);
                g.append("<br /><br />Please enter correct Issue Quantity !");
                break;
             // Total Issue Quantity of lot id : for selected Item in this PickList is Exceeding the Total Avalable Quantity.
            }
        }
        lotVo.setRangeSize(i);
        return g;
    }


    /**
     * @return
     */
    public StringBuilder isBinQtyValid(){
        StringBuilder g = new StringBuilder("Y");
        //ArrayList to store lots who have been selected for Issuing
        ArrayList<Row> selectedBin = new ArrayList<Row>();
        ViewMmStkSummBinVOImpl issueBinVo = getViewMmStkSummBin1();
        RowSetIterator issueBinItr = issueBinVo.createRowSetIterator(null);
        while(issueBinItr.hasNext()){
            Row issueRow = issueBinItr.next();
            Object issueQtyO = issueRow.getAttribute("TransIssueQty");
            Number issueQty = (issueQtyO == null ? StaticValue.NUMBER_ZERO : (Number)issueQtyO);
            if(issueQty.compareTo(StaticValue.NUMBER_ZERO) > 0){
                selectedBin.add(issueRow);
            }
        }
        issueBinItr.closeRowSetIterator();
        //Lot vo to check total issued qty of a lot
        ViewObjectImpl BinVo = this.getSlsPickIssuBin2();
        BinVo.executeQuery();
        int i = BinVo.getRangeSize();
        BinVo.setRangeSize(-1);
        for(Row r : selectedBin){
            Object lotAvlQtyO = r.getAttribute("TotStk");
            Object entredIssueQuantO = r.getAttribute("TransIssueQty");
            
            Number lotAvlQty = (lotAvlQtyO == null ? StaticValue.NUMBER_ZERO : (Number)lotAvlQtyO);
            Number entredIssueQuant = (entredIssueQuantO == null ? StaticValue.NUMBER_ZERO : (Number)entredIssueQuantO);
            
            StringBuilder clause = new StringBuilder("");
            clause.append("ItmId = '").append(r.getAttribute("ItmId")).append("'");
            clause.append("AND LotId = '").append(r.getAttribute("LotId")).append("'");
            clause.append("AND BinId = '").append(r.getAttribute("BinId")).append("'");
            _log.info("caluse in bin filter: "+clause);
            RowQualifier rq = new RowQualifier(BinVo);
            rq.setWhereClause(clause.toString());
            Row[] lotRows = BinVo.getFilteredRows(rq);
            Number totPickQty = StaticValue.NUMBER_ZERO;
            for(Row lotR : lotRows){
                Object pickO = lotR.getAttribute("PickQty");
                if(pickO != null){
                    totPickQty =totPickQty.add((Number)pickO);
                }    
            }
            totPickQty = totPickQty.add(entredIssueQuant);
            if(totPickQty.compareTo(lotAvlQty) > 0){
                g = new StringBuilder("Total Issue Quantity of Bin id : ");
                g.append(r.getAttribute("BinId"));
                g.append(" for selected Item in current PickList is Exceeding the Total Available Quantity.\n\n");
                g.append("<br /><br />Bin Available Quantity : ");
                g.append(lotAvlQty);
                g.append("<br /><br />Total Picked Quantity for Selected Item Currently : ");
                g.append(totPickQty);
                g.append("<br /><br />Please enter correct Issue Quantity !");
                break;
             // Total Issue Quantity of lot id : for selected Item in this PickList is Exceeding the Total Avalable Quantity.
            }
        }
        BinVo.setRangeSize(i);
        _log.info("Bin Check Returned. "+g);
        return g;
    }


    /**
     * @return
     */
    public StringBuilder isIssueQtyValid(){
        StringBuilder g = new StringBuilder("");
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        if(binChkFlg == null){
            ADFModelUtils.showFacesMessage("error when getting #{pageFlowScope.GLBL_ORG_BIN_CHK}", null, FacesMessage.SEVERITY_ERROR, null);
        }else{
            if("Y".equals(binChkFlg.toString())){
                g = isBinQtyValid();
            }else{
                g = isLotQtyValid();
            }
        }
        return g;
    }


}

