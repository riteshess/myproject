package slsdlvschdl.model.views;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import slsdlvschdl.model.services.SLSDlvSchdlAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 13 11:13:14 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsDlvSchdlBalance_VwVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        CldId {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        OrgId {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        DocId {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        ItmId {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setItmId((String)value);
            }
        }
        ,
        ItmUom {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getItmUom();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setItmUom((String)value);
            }
        }
        ,
        OrdQty {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getOrdQty();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setOrdQty((Number)value);
            }
        }
        ,
        BalanceQty {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getBalanceQty();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setBalanceQty((Number)value);
            }
        }
        ,
        ItmUomBs {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getItmUomBs();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setItmUomBs((String)value);
            }
        }
        ,
        UomConvFctr {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getUomConvFctr();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setUomConvFctr((Number)value);
            }
        }
        ,
        SelectItmChekBoxTrans {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getSelectItmChekBoxTrans();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setSelectItmChekBoxTrans((String)value);
            }
        }
        ,
        SchdlQuantTrans {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getSchdlQuantTrans();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setSchdlQuantTrans((Number)value);
            }
        }
        ,
        AvailableStock {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getAvailableStock();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setAvailableStock((Number)value);
            }
        }
        ,
        WhIdTrans {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getWhIdTrans();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setWhIdTrans((String)value);
            }
        }
        ,
        Wh {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getWh();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setWh((String)value);
            }
        }
        ,
        CBForItemTrans {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getCBForItemTrans();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setCBForItemTrans((String)value);
            }
        }
        ,
        ItemNameTrans {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getItemNameTrans();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setItemNameTrans((String)value);
            }
        }
        ,
        SearchSoVw {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getSearchSoVw();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVItmIdVO1 {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getLOVItmIdVO1();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVUomVO1 {
            public Object get(SlsDlvSchdlBalance_VwVORowImpl obj) {
                return obj.getLOVUomVO1();
            }

            public void put(SlsDlvSchdlBalance_VwVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SlsDlvSchdlBalance_VwVORowImpl object);

        public abstract void put(SlsDlvSchdlBalance_VwVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int ORDQTY = AttributesEnum.OrdQty.index();
    public static final int BALANCEQTY = AttributesEnum.BalanceQty.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int UOMCONVFCTR = AttributesEnum.UomConvFctr.index();
    public static final int SELECTITMCHEKBOXTRANS = AttributesEnum.SelectItmChekBoxTrans.index();
    public static final int SCHDLQUANTTRANS = AttributesEnum.SchdlQuantTrans.index();
    public static final int AVAILABLESTOCK = AttributesEnum.AvailableStock.index();
    public static final int WHIDTRANS = AttributesEnum.WhIdTrans.index();
    public static final int WH = AttributesEnum.Wh.index();
    public static final int CBFORITEMTRANS = AttributesEnum.CBForItemTrans.index();
    public static final int ITEMNAMETRANS = AttributesEnum.ItemNameTrans.index();
    public static final int SEARCHSOVW = AttributesEnum.SearchSoVw.index();
    public static final int LOVITMIDVO1 = AttributesEnum.LOVItmIdVO1.index();
    public static final int LOVUOMVO1 = AttributesEnum.LOVUomVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsDlvSchdlBalance_VwVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String)getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmId.
     * @param value value to set the  ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUom.
     * @return the ItmUom
     */
    public String getItmUom() {
        return (String)getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmUom.
     * @param value value to set the  ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrdQty.
     * @return the OrdQty
     */
    public Number getOrdQty() {
        return (Number)getAttributeInternal(ORDQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrdQty.
     * @param value value to set the  OrdQty
     */
    public void setOrdQty(Number value) {
        setAttributeInternal(ORDQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BalanceQty.
     * @return the BalanceQty
     */
    public Number getBalanceQty() {
        return (Number)getAttributeInternal(BALANCEQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BalanceQty.
     * @param value value to set the  BalanceQty
     */
    public void setBalanceQty(Number value) {
        setAttributeInternal(BALANCEQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUomBs.
     * @return the ItmUomBs
     */
    public String getItmUomBs() {
        return (String)getAttributeInternal(ITMUOMBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmUomBs.
     * @param value value to set the  ItmUomBs
     */
    public void setItmUomBs(String value) {
        setAttributeInternal(ITMUOMBS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UomConvFctr.
     * @return the UomConvFctr
     */
    public Number getUomConvFctr() {
        return (Number)getAttributeInternal(UOMCONVFCTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UomConvFctr.
     * @param value value to set the  UomConvFctr
     */
    public void setUomConvFctr(Number value) {
        setAttributeInternal(UOMCONVFCTR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SelectItmChekBoxTrans.
     * @return the SelectItmChekBoxTrans
     */
    public String getSelectItmChekBoxTrans() {
        //System.out.println("Geter rowimpl");
        return (String)getAttributeInternal(SELECTITMCHEKBOXTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SelectItmChekBoxTrans.
     * @param value value to set the  SelectItmChekBoxTrans
     */
    public void setSelectItmChekBoxTrans(String value) {
        setAttributeInternal(SELECTITMCHEKBOXTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SchdlQuantTrans.
     * @return the SchdlQuantTrans
     */
    public Number getSchdlQuantTrans() {
        return (Number)getAttributeInternal(SCHDLQUANTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SchdlQuantTrans.
     * @param value value to set the  SchdlQuantTrans
     */
    public void setSchdlQuantTrans(Number value) {
        setAttributeInternal(SCHDLQUANTTRANS, value);
    }


    /**
     * Method for Callable Statements
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                   // System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Gets the attribute value for the calculated attribute AvailableStock.
     * @return the AvailableStock
     */
    public Number getAvailableStock() {

        //        SLS.fn_mm_get_avail_stk (
        //           p_cld_id    VARCHAR2,
        //           p_sloc_id   NUMBER,
        //           p_org_id    VARCHAR2,
        //           p_itm_id    VARCHAR2,
        //           p_wh_id     VARCHAR2,
        //           P_DOC_DT DATE
        Number n = new Number(0);
        if (getWhIdTrans() != null) {
            try {
                BigDecimal v =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] { getCldId(),
                                                                                                                         getSlocId(),
                                                                                                                         getOrgId(),
                                                                                                                         getItmId(),
                                                                                                                         getWhIdTrans(),
                                                                                                                         new Timestamp(System.currentTimeMillis()) });

                n = new Number(v);
               // System.out.println("v :" + v);

            } catch (Exception e) {

                //e.printStackTrace();
                System.out.println("error in calling function !!!!!!!!!!!!!!!!!!!");
            }
            //System.out.println("EoId : "+this.getSlsSo().getAttribute("EoId"));
           // System.out.println("WhId : " + (String)getAttributeInternal(WHIDTRANS));


        }

        return n;
        // return (Number)getAttributeInternal(AVAILABLESTOCK);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AvailableStock.
     * @param value value to set the  AvailableStock
     */
    public void setAvailableStock(Number value) {
        setAttributeInternal(AVAILABLESTOCK, value);
    }

    /**
     * Gets the attribute value for the calculated attribute WhIdTrans.
     * @return the WhIdTrans
     */
    public String getWhIdTrans() {

        SLSDlvSchdlAMImpl am = (SLSDlvSchdlAMImpl)this.getApplicationModule();
        Row currentRow = am.getSearchSoVw().getCurrentRow();
       // System.out.println("Warehousetrans : "+currentRow.getAttribute("WareHouseTrans"));
        String Whid = null;
        if (currentRow != null) {
            if (currentRow.getAttribute("WareHouseTrans") != null) {
                Whid = (String)currentRow.getAttribute("WareHouseTrans");
               // System.out.println("Whid is:" + Whid);
            }
            //System.out.println("Whid is:" + Whid);
            return Whid;
        } else
            return (String)getAttributeInternal(WHIDTRANS);

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute WhIdTrans.
     * @param value value to set the  WhIdTrans
     */
    public void setWhIdTrans(String value) {
        setAttributeInternal(WHIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Wh.
     * @return the Wh
     */
    public String getWh() {
        return (String) getAttributeInternal(WH);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Wh.
     * @param value value to set the  Wh
     */
    public void setWh(String value) {
        setAttributeInternal(WH, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CBForItemTrans.
     * @return the CBForItemTrans
     */
    public String getCBForItemTrans() {
       // System.out.println("+++ in Row Impl ---"+this.getSelectItmChekBoxTrans());
        return this.getSelectItmChekBoxTrans();
       // return (String) getAttributeInternal(CBFORITEMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CBForItemTrans.
     * @param value value to set the  CBForItemTrans
     */
    public void setCBForItemTrans(String value) {
        
        setAttributeInternal(CBFORITEMTRANS, value);
        setSelectItmChekBoxTrans(value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemNmeTrans.
     * @return the ItemNmeTrans
     */
    public String getItemNameTrans() {
        return getItmId();
        //return (String) getAttributeInternal(ITEMNAMETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemNmeTrans.
     * @param value value to set the  ItemNmeTrans
     */
    public void setItemNameTrans(String value) {
        setAttributeInternal(ITEMNAMETRANS, value);
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link SearchSoVw.
     */
    public Row getSearchSoVw() {
        return (Row)getAttributeInternal(SEARCHSOVW);
    }

    /**
     * Sets the master-detail link SearchSoVw between this object and <code>value</code>.
     */
    public void setSearchSoVw(Row value) {
        setAttributeInternal(SEARCHSOVW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVItmIdVO1.
     */
    public RowSet getLOVItmIdVO1() {
        return (RowSet)getAttributeInternal(LOVITMIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVUomVO1.
     */
    public RowSet getLOVUomVO1() {
        return (RowSet)getAttributeInternal(LOVUOMVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
