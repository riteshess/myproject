package slsdlvschdl.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.faces.validator.ValidatorException;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.JboPrecisionScaleValidator;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsdlvschdl.model.services.common.SLSDlvSchdlAM;
import slsdlvschdl.model.views.SearchSoVwVOImpl;
import slsdlvschdl.model.views.SearchVORowImpl;
import slsdlvschdl.model.views.SlsSoItmTrfVORowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 11 14:31:24 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SLSDlvSchdlAMImpl extends ApplicationModuleImpl implements SLSDlvSchdlAM {

    private static ADFLogger _log = ADFLogger.createADFLogger(SLSDlvSchdlAMImpl.class);
    private StringBuffer DocIdTxn = null;
    Integer usrId=0;


    /**
     * This is the default constructor (do not remove).
     */
    public SLSDlvSchdlAMImpl() {
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for SearchSoVw.
     * @return SearchSoVw
     */
    public SearchSoVwVOImpl getSearchSoVw() {
        return (SearchSoVwVOImpl)findViewObject("SearchSoVw");
    }

    /**
     * Container's getter for Search.
     * @return Search
     */
    public ViewObjectImpl getSearch() {
        return (ViewObjectImpl)findViewObject("Search");
    }

    /** Method For Search Button On Page */
    public void searchDeliveryScheduleView() {
        SearchSoVwVOImpl mainVw = (SearchSoVwVOImpl)this.getSearchSoVw();
        SearchVORowImpl fieldVw = (SearchVORowImpl)this.getSearch().getCurrentRow();
        ViewCriteria criteria = mainVw.getViewCriteria("SearchSoVwVOCriteria");
        mainVw.applyViewCriteria(criteria);
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        System.out.println(CldId);
        System.out.println(SlocId);
        System.out.println(OrgId);
        System.out.println(HoOrgId);
        mainVw.setNamedWhereClauseParam("SlocIdBind", SlocId);
        mainVw.setNamedWhereClauseParam("CldIdBind", CldId);
        mainVw.setNamedWhereClauseParam("OrgIdBind", OrgId);
        mainVw.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        mainVw.setNamedWhereClauseParam("EoIdBind", fieldVw.getEoId());
        mainVw.setNamedWhereClauseParam("DocIdBind", fieldVw.getDocId());
        mainVw.setNamedWhereClauseParam("OrderStatusBind", fieldVw.getOrdStatus());
        mainVw.setNamedWhereClauseParam("OrderTypeBind", fieldVw.getOrdTyp());
        mainVw.setNamedWhereClauseParam("UserIdCreateBind", fieldVw.getUsrId());
        try {
            mainVw.setDateFromBind(fieldVw.getFromDt());

            oracle.jbo.domain.Timestamp dt = fieldVw.getToDt();
            if (fieldVw.getToDt() != null) {
                dt = fieldVw.getToDt();
                java.sql.Date date;
                try {
                    date = dt.dateValue();
                    date.setDate(date.getDate() + 1);
                    // System.out.println("Date is :" + date);
                    dt = new oracle.jbo.domain.Timestamp(date);
                } catch (SQLException e) {

                }
            }


            mainVw.setDateToBind(dt);
        } catch (Exception e) {
        }
        mainVw.setNamedWhereClauseParam("AmountFrom", fieldVw.getAmtFrom());
        mainVw.setNamedWhereClauseParam("AmountTo", fieldVw.getAmtTo());
        mainVw.executeQuery();

    }

    /** Method For Reset Button On Page */
    public void resetDeliveryScheduleView() {

        // SearchSoVwVOImpl mainVw = (SearchSoVwVOImpl)this.getSearchSoVw();
        SearchVORowImpl fieldVw = (SearchVORowImpl)this.getSearch().getCurrentRow();
        SearchSoVwVOImpl impl = getSearchSoVw();
        ViewCriteria criteria = impl.getViewCriteria("SearchSoVwVOCriteria");
        impl.applyViewCriteria(criteria);
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        impl.setNamedWhereClauseParam("CldIdBind", -1);
        impl.setNamedWhereClauseParam("SlocIdBind", SlocId);
        impl.setNamedWhereClauseParam("OrgIdBind", OrgId);
        impl.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        impl.setNamedWhereClauseParam("EoIdBind", null);
        impl.setNamedWhereClauseParam("DocIdBind", null);
        impl.setNamedWhereClauseParam("OrderStatusBind", null);
        impl.setNamedWhereClauseParam("OrderTypeBind", null);
        impl.setNamedWhereClauseParam("UserIdCreateBind", null);
        impl.setNamedWhereClauseParam("DateFromBind", null);
        impl.setNamedWhereClauseParam("DateToBind", null);
        impl.setNamedWhereClauseParam("AmountFrom", null);
        impl.setNamedWhereClauseParam("AmountTo", null);
        impl.executeQuery();
        //  executePageWithParam();
        /*  mainVw.setSlocIdBind(slocid);
        mainVw.setCldIdBind(cldid.toString());
        mainVw.setOrgIdBind(orgid.toString()); */


        fieldVw.setEoNm(null);
        fieldVw.setDocIdDisp(null);
        fieldVw.setOrdStatus(null);
        fieldVw.setOrdTyp(null);
        fieldVw.setUsrNm(null);
        fieldVw.setFromDt(null);
        fieldVw.setToDt(null);
        //fieldVw.


        getSearch().executeQuery();

    }

    /**
     * Container's getter for SlsDlvSchdlBalance_Vw.
     * @return SlsDlvSchdlBalance_Vw
     */
    public ViewObjectImpl getSlsDlvSchdlBalance_Vw() {
        return (ViewObjectImpl)findViewObject("SlsDlvSchdlBalance_Vw");
    }

    /**
     * Container's getter for SearchToDeliverySchd_VwlVL1.
     * @return SearchToDeliverySchd_VwlVL1
     */
    public ViewLinkImpl getSearchToDeliverySchd_VwlVL1() {
        return (ViewLinkImpl)findViewLink("SearchToDeliverySchd_VwlVL1");
    }

    /**
     * Container's getter for SlsSoDlvSchdl.
     * @return SlsSoDlvSchdl
     */
    public ViewObjectImpl getSlsSoDlvSchdl() {
        return (ViewObjectImpl)findViewObject("SlsSoDlvSchdl");
    }

    /**
     * Container's getter for SearchSoToSlsSoDlvSchdlVL1.
     * @return SearchSoToSlsSoDlvSchdlVL1
     */
    public ViewLinkImpl getSearchSoToSlsSoDlvSchdlVL1() {
        return (ViewLinkImpl)findViewLink("SearchSoToSlsSoDlvSchdlVL1");
    }

    /**
     * Container's getter for SlsRateContDlvSchdl_Vw1.
     * @return SlsRateContDlvSchdl_Vw1
     */
    public ViewObjectImpl getSlsRateContDlvSchdl_Vw1() {
        return (ViewObjectImpl)findViewObject("SlsRateContDlvSchdl_Vw1");
    }

    /**
     * Container's getter for SeacrhTORateContractVL1.
     * @return SeacrhTORateContractVL1
     */
    public ViewLinkImpl getSeacrhTORateContractVL1() {
        return (ViewLinkImpl)findViewLink("SeacrhTORateContractVL1");
    }

    public void serialNumGen(String voName) {
        /**New Code to get Serial No.- 6-03-2013-@Ashish Kumar*/
        ViewObject soItm = this.findViewObject(voName);
        Integer Srno = 0;
        Integer max = 0;
        soItm.setRangeSize(-1);
        Row row[] = soItm.getAllRowsInRange();
        for (Row r : row) {
            try {
                Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
            } catch (NullPointerException e) {
                Srno = 0;

            }
            if (Srno > max) {
                max = Srno;
            }

        }

        max = max + 1;
        _log.warning("Max Value is-->" + max);

        soItm.getCurrentRow().setAttribute("SrNo", max);
    }


    /**Method to generate Schedule Number (as per Sales Order,Item and Delivery Date)
     * @param dlvDt
     * @return
     */
    public Integer generateScheduleNo(Timestamp dlvDt) {
        Integer schdlNo = 1;
        ViewObject dlvSchdl = this.getSlsSoDlvSchdl();
        Row fltrRow[] = dlvSchdl.getFilteredRows("DlvDt", dlvDt);
        _log.info("Row for this date-" + fltrRow.length);
        if (fltrRow.length > 0) {
            if (fltrRow[0].getAttribute("DlvSchdlNo") != null) {
                schdlNo = Integer.parseInt(fltrRow[0].getAttribute("DlvSchdlNo").toString());
            }
        } else {
            Integer Srno = 0;
            Integer max = 0;
            dlvSchdl.setRangeSize(-1);
            Row row[] = dlvSchdl.getAllRowsInRange();
            for (Row r : row) {
                try {
                    Srno = Integer.parseInt(r.getAttribute("DlvSchdlNo").toString());
                    _log.info("Row Scdl No is-" + Srno);
                } catch (NullPointerException e) {
                    Srno = 0;

                }
                if (Srno > max) {
                    max = Srno;
                }
            }

            max = max + 1;
            _log.warning("Max Schdl No is-->" + max);
            schdlNo = max;

        }
        _log.info("Delivery Schedule Number is" + schdlNo);
        return schdlNo;
    }


    /**Method to save deivery details as per order type(ALL/RATE-Contract)*/
    public String saveDeliverySchedule() {

        Boolean tempvar = false;

        // System.out.println("From SOP Inside Am Method");
        _log.info("Inside Am Methodss");
        ViewObject slsSo = getSearchSoVw();
        Row poCurr = slsSo.getCurrentRow();
        ViewObject dlvVo = null;
        String availVarName = "";
        if (poCurr.getAttribute("OrderType").equals(311)) {
            dlvVo = this.getSlsRateContDlvSchdl_Vw1();
            availVarName = "AvailableAmtTrans";
            //System.out.println("Order type=RC");
        } else {
            dlvVo = this.getSlsDlvSchdlBalance_Vw();
            availVarName = "AvailableStock";
            // System.out.println("Order type =DO");

        }
        // System.out.println("+++++++++++Order Type is:" + poCurr.getAttribute("OrderType"));

        ViewObjectImpl slsdlvVo = this.getSlsSoDlvSchdl(); //to

        String returnVal = null;
        _log.info("Inside AmImpl method");
        // System.out.println("From SOP Inside AmImpl method");

        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

        _log.info("Delv Date is-->" + poCurr.getAttribute("DeliveryDateTrans"));
        // System.out.println("SOP Delv Date is-->" + poCurr.getAttribute("DeliveryDateTrans"));
        RowSetIterator rsi = dlvVo.createRowSetIterator(null);
        Timestamp ordDate = (Timestamp)poCurr.getAttribute("DocDt");
        if (poCurr.getAttribute("DeliveryDateTrans") != null) {
            while (rsi.hasNext()) {
                Row cur = rsi.next();
                Object o = cur.getAttribute("SelectItmChekBoxTrans");
                _log.warning("checkBox vale-->" + o);
                //  System.out.println("SOP checkBox vale-->" + o);
                if (o != null) {
                    if ("Y".equalsIgnoreCase(o.toString())) {
                        if (cur.getAttribute("SchdlQuantTrans") != null) {
                            if (poCurr.getAttribute("WareHouseTrans") != null) {
                                oracle.jbo.domain.Timestamp dt =
                                    (oracle.jbo.domain.Timestamp)poCurr.getAttribute("DeliveryDateTrans");
                                // System.out.println("--date---" + dt);

                                try {
                                    ordDate = new Timestamp(ordDate.dateValue());
                                } catch (SQLException e) {
                                }

                                /**Code Changed For Duplicate Validation 04-05-2013 @Ashish Kumar*/
                                String itmid = null;
                                //String itmuom = null;
                                if (poCurr.getAttribute("OrderType").equals(311)) {
                                    itmid = cur.getAttribute("ItmIdRc").toString();
                                    //  System.out.println("In RC");
                                    // itmuom = cur.getAttribute("ItmUomRc").toString();
                                } else {
                                    itmid = cur.getAttribute("ItmId").toString();
                                    // System.out.println("In DO");
                                    //itmuom = cur.getAttribute("ItmUom").toString();

                                }

                                // System.out.println("ItemId--->" + itmid);
                                String whId = poCurr.getAttribute("WareHouseTrans").toString();
                                RowQualifier rq = new RowQualifier((ViewObjectImpl)slsdlvVo);
                                System.out.println("");
                                rq.setWhereClause("ItmId='" + itmid + "' And WhId='" +
                                                  poCurr.getAttribute("WareHouseTrans").toString() + "' And DlvDt='" +
                                                  poCurr.getAttribute("DeliveryDateTrans") + "'");


                                //System.out.println("Row qul-->" + rq.getExprStr());
                                Row[] filteredRows = slsdlvVo.getFilteredRows(rq);
                                // System.out.println("Filetr row count-->" + filteredRows.length);


                                RowSetIterator currentrsi = this.getSlsSoDlvSchdl().createRowSetIterator(null);
                                Row r = null;
                                Timestamp dlvdtvalue = null;
                                if (currentrsi != null) {
                                    while (currentrsi.hasNext()) {
                                        r = currentrsi.next();
                                        dlvdtvalue = (Timestamp)r.getAttribute("DlvDt");


                                        try {
                                            if (r.getAttribute("ItmId").toString().equals(itmid) &&
                                                r.getAttribute("WhId").toString().equals(poCurr.getAttribute("WareHouseTrans")) &&
                                                dlvdtvalue.dateValue().toString().equals(dt.dateValue().toString())) {
                                                // System.out.println("Inside loop");
                                                tempvar = true;

                                            }
                                        } catch (SQLException e) {
                                        }
                                    }
                                    currentrsi.closeRowSetIterator();

                                }
                                if (filteredRows.length > 0 || tempvar) {

                                    returnVal = "D";
                                    break;

                                } else {

                                    try {
                                        if (dt.dateValue().compareTo(ordDate.dateValue()) == -1) {
                                            _log.info("Deliver Date is Less-");
                                            //  FacesMessage msg = new FacesMessage("Delivery Date can not be less than Order Date");
                                            FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.849']}"));
                                            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                                            FacesContext.getCurrentInstance().addMessage(null, msg);
                                        } else {


                                            rq.setWhereClause(null);
                                            Integer schdlno = generateScheduleNo(dt);
                                            Row dlvRow = slsdlvVo.createRow();
                                            slsdlvVo.insertRow(dlvRow);
                                            serialNumGen("SlsSoDlvSchdl");
                                            System.out.println("Available quantity :" + availVarName + ": Value :" +
                                                               cur.getAttribute(availVarName));
                                            dlvRow.setAttribute("AvlQty", cur.getAttribute(availVarName));
                                            dlvRow.setAttribute("DocId", cur.getAttribute("DocId"));
                                            dlvRow.setAttribute("SlocId", cur.getAttribute("SlocId"));
                                            dlvRow.setAttribute("OrgId", cur.getAttribute("OrgId"));
                                            dlvRow.setAttribute("DlvDt", dt);
                                            dlvRow.setAttribute("DlvQty", cur.getAttribute("SchdlQuantTrans"));
                                            dlvRow.setAttribute("DlvMode", poCurr.getAttribute("ModeTrans"));
                                            dlvRow.setAttribute("WhId", poCurr.getAttribute("WareHouseTrans"));
                                            dlvRow.setAttribute("UsrIdCreate", p_user_id);
                                            dlvRow.setAttribute("DlvSchdlNo", schdlno);
                                            dlvRow.setAttribute("DlvAddsId", poCurr.getAttribute("WhIdAddrIdTrans"));
                                            //dlvRow.setAttribute("ItmUom", itmuom);
                                            dlvRow.setAttribute("ItmUomBs", cur.getAttribute("ItmUomBs"));
                                            Object rem = poCurr.getAttribute("DelRemarksTrans");
                                            StringBuffer r1 = new StringBuffer("");
                                            if (rem != null) {
                                                r1 = new StringBuffer(rem.toString());
                                            }
                                            dlvRow.setAttribute("Remarks", r1.toString());

                                            // To calculate and add pending Quantity
                                            Number pendingQty = new Number(0);
                                            if (cur.getAttribute(availVarName) != null &&
                                                cur.getAttribute("SchdlQuantTrans") != null) {
                                                Number avail = (Number)cur.getAttribute(availVarName);
                                                //  System.out.println("_______________");
                                                // System.out.println("Avail VarName :" + avail);
                                                Number schDlQty = (Number)cur.getAttribute("SchdlQuantTrans");
                                                //  System.out.println("Schdl qty :" + schDlQty);
                                                //  System.out.println("Compare To Is:" + avail.compareTo(schDlQty));
                                                if (avail.compareTo(schDlQty) == 1) {
                                                    RowQualifier rw = new RowQualifier((ViewObjectImpl)slsdlvVo);

                                                    rw.setWhereClause("ItmId='" + itmid + "' And WhId='" +
                                                                      poCurr.getAttribute("WareHouseTrans") + "'");
                                                    Row[] filteredRowsdup = slsdlvVo.getFilteredRows(rw);
                                                    RowSetIterator currentrsidup =
                                                        this.getSlsSoDlvSchdl().createRowSetIterator(null);
                                                    Row rdup = null;
                                                    Integer count = 0;
                                                    if (currentrsidup != null) {
                                                        while (currentrsidup.hasNext()) {
                                                            rdup = currentrsidup.next();


                                                            if (rdup.getAttribute("ItmId") != null) {
                                                                if (rdup.getAttribute("ItmId").toString().equals(itmid) &&
                                                                    rdup.getAttribute("WhId").toString().equals(poCurr.getAttribute("WareHouseTrans"))) {
                                                                    count =
                                                                            count + Integer.parseInt(rdup.getAttribute("DlvQtyBs").toString());
                                                                    System.out.println("Delivery quantity sum in iterator" +
                                                                                       count);
                                                                    Integer Remaining =
                                                                        count + Integer.parseInt(schDlQty.toString());
                                                                    System.out.println("Remaining Sum In Iterator" +
                                                                                       Remaining);
                                                                    pendingQty = (Number)avail.minus(Remaining);
                                                                    System.out.println("Pending Qty sum in iteratot" +
                                                                                       pendingQty);
                                                                } else {
                                                                    pendingQty = (Number)avail.minus(schDlQty);
                                                                }
                                                            } else {
                                                                pendingQty = (Number)avail.minus(schDlQty);
                                                            }

                                                        }


                                                    }


                                                }
                                            }
                                            // System.out.println("pending quantity :" + pendingQty);
                                            dlvRow.setAttribute("BalQty", pendingQty);


                                            Number uomConvFctr = new Number(1);
                                            if (cur.getAttribute("UomConvFctr") != null) {
                                                uomConvFctr = (Number)cur.getAttribute("UomConvFctr");
                                            }
                                            Number pendingQuant = new Number(0);

                                            // System.out.println("Uom conv fctr is : " + uomConvFctr);
                                            dlvRow.setAttribute("UomConvFctr", uomConvFctr);
                                            //DlvQtyBs
                                            Number bsQty = new Number(0);
                                            bsQty =
                                                    (Number)uomConvFctr.mul((Number)cur.getAttribute("SchdlQuantTrans"));

                                            // cur.getAttribute("ItmUom");
                                            //     System.out.println("Base qty is :" + bsQty);
                                            dlvRow.setAttribute("DlvQtyBs", bsQty);

                                            _log.info("Order Type -->" + poCurr.getAttribute("OrderType"));
                                            if (poCurr.getAttribute("OrderType").equals(311)) {
                                                dlvRow.setAttribute("ItmId", cur.getAttribute("ItmIdRc"));
                                                dlvRow.setAttribute("ItmUom", cur.getAttribute("ItmUomRc"));
                                            } else {
                                                dlvRow.setAttribute("TotQty", cur.getAttribute("OrdQty"));
                                                dlvRow.setAttribute("ItmId", cur.getAttribute("ItmId"));
                                                dlvRow.setAttribute("ItmUom", cur.getAttribute("ItmUom"));
                                            }


                                            dlvRow.setAttribute("ItmUomBs", cur.getAttribute("ItmUomBs"));

                                        }
                                    } catch (SQLException e) {
                                        _log.info("In exception-" + e);
                                    }
                                }
                            } else {

                                returnVal = "W";
                            }
                        } else {

                            returnVal = "S";
                        }
                    }
                }
            }
            /**Set transient to blank*/
            poCurr.setAttribute("ModeTrans", null);
            poCurr.setAttribute("WareHouseTrans", null);
            poCurr.setAttribute("DeliveryDateTrans", null);
            rsi.closeRowSetIterator();

            slsdlvVo.executeQuery();
            // slsSo.executeQuery();
            this.getDBTransaction().validate();
            this.getDBTransaction().postChanges();
            dlvVo.executeQuery();


        } else {
            // FacesMessage msg = new FacesMessage("Please Specify Delivery Date");
            FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.847']}").toString());
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        return returnVal;
    }

    /**
     * Method for Execute Balance View
     */

    public void executeBalanceVw() {
        this.getDBTransaction().validate();
        this.getDBTransaction().postChanges();

        ViewObjectImpl balance_Vw = getSlsDlvSchdlBalance_Vw();
        ViewObjectImpl contDlvSchdl_Vw1 = getSlsRateContDlvSchdl_Vw1();
        ViewObject slsSo = getSearchSoVw();
        Row poCurr = slsSo.getCurrentRow();
        if (poCurr.getAttribute("OrderType").equals(311))
            contDlvSchdl_Vw1.executeQuery();
        else
            balance_Vw.executeQuery();
    }

    public void selectAllCheckBox(boolean val) {

        ViewObjectImpl balance_Vw = this.getSlsDlvSchdlBalance_Vw();
        RowSetIterator rit = balance_Vw.createRowSetIterator(null);
        while (rit.hasNext()) {
            Row row = rit.next();
            _log.info("Value of checkbox is-->" + val);
            if (val) {
                row.setAttribute("SelectItmChekBoxTrans", "Y");
                row.setAttribute("SchdlQuantTrans", row.getAttribute("BalanceQty"));
            } else {
                row.setAttribute("SelectItmChekBoxTrans", "N");
                row.setAttribute("SchdlQuantTrans", null);
            }
        }


    }

    /***Get User Name for Given UserId**/
    public String getUserName(Integer uid) {

        String uname = "Anounymous";
        ViewObject usrVo = this.getLOVUserIdVO1();
        Row[] filteredRows = usrVo.getFilteredRows("UsrId", uid);
        _log.info("Total Row-" + filteredRows.length);
        if (filteredRows.length > 0) {
            uname = filteredRows[0].getAttribute("UsrName").toString();
        }
        _log.info("Uid is-" + uid + "And name is-" + uname);
        return uname;
    }


    /**Method to get Amendment Number
     * @return
     */
    public Integer getCurrentAmdNo() {
        Integer amdNo = 0;
        ViewObject slsSo = this.getSearchSoVw();
        Row soRow = slsSo.getCurrentRow();
        if (soRow.getAttribute("AmdNo") != null) {
            amdNo = Integer.parseInt(soRow.getAttribute("AmdNo").toString());
        }
        _log.info("Amendment No is-" + amdNo);
        return amdNo;
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            String drivr = getdrivername();
                               if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                             {
                               System.out.println("inside loop");
                             //  st = getDBTransaction().createCallableStatement(" " + stmt + ";", 0);
                               st = this.getDBTransaction().createCallableStatement( " {? = " + stmt + "};", 0);
                             }
            else
                {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                } st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage());
            // throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    _log.info(e);
                }
            }
        }
    }


    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getSearchSoVw().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = null;
        String drivr = getdrivername();
        if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                         {
                    System.out.println("inside loop");
                    obj = callStoredFunction1(Types.NUMERIC, "call GET_DOC_WF_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId, CldId, OrgId,
                                                                                                                 DocNo, DocId, 0 });
                        }
             else
             {
                   obj=     callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId, CldId, OrgId,
                                                                                                DocNo, DocId, 0 });
             }
                           
                           Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }

    /**Set Order Amendment Details
     * @param amdNo
     */
    public void setAmndmntDtl(String amdNo) {
        ViewObject slsSo = this.getSearchSoVw();
        Row soRow = slsSo.getCurrentRow();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String doc_id = soRow.getAttribute("DocId").toString();
        BigDecimal retval =null;
        String drivr = getdrivername();
                           if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                         {
                           System.out.println("inside loop");
                          // sharon
                       retval=       (BigDecimal)callStoredFunction(Types.NUMERIC, "call FN_AMD_SO(?,?,?,?,?,?,?,?,?)", new Object[] { p_cldId,
                                                                                                                               p_hoOrgId,
                                                                                                                               p_sloc_id,
                                                                                                                               p_org_id,
                                                                                                                               soRow.getAttribute("DocId"),
                                                                                                                               p_user_id,
                                                                                                                               soRow.getAttribute("UsrIdCreateDt"),
                                                                                                                               amdNo,
                                                                                                                               soRow.getAttribute("AmdDt") });
                                  }
        else
            {
            retval= (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_AMD_SO(?,?,?,?,?,?,?,?,?)", new Object[] { p_cldId,
                                                                                                             p_hoOrgId,
                                                                                                             p_sloc_id,
                                                                                                             p_org_id,
                                                                                                             soRow.getAttribute("DocId"),
                                                                                                             p_user_id,
                                                                                                             soRow.getAttribute("UsrIdCreateDt"),
                                                                                                             amdNo,
                                                                                                             soRow.getAttribute("AmdDt") });
            }
                           _log.info("Amend function returns-" + retval);

        _log.info("Amd no to set is--" + amdNo);
        /* soRow.setAttribute("AmdNo", amdNo);
           soRow.setAttribute("AmdDt", new Timestamp(System.currentTimeMillis()));
           soRow.setAttribute("SoMode", 315);
           soRow.setAttribute("OrderStat", 217); */


        BigDecimal retval1 = null;
         drivr = getdrivername();
                           if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                         {
                           System.out.println("inside loop");
                              retval1=  (BigDecimal)callStoredFunction(Types.NUMERIC, "call FN_UPDATE_SO_SCHEDULE_AMD(?,?,?,?,?,?)",
                                                               new Object[] { p_cldId, p_sloc_id, p_org_id,
                                                                              soRow.getAttribute("DocId").toString(), amdNo,
                                                                              Date.getCurrentDate() });
                                }
        else
            {
          retval1=  (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_UPDATE_SO_SCHEDULE_AMD(?,?,?,?,?,?)",
                                           new Object[] { p_cldId, p_sloc_id, p_org_id,
                                                          soRow.getAttribute("DocId").toString(), amdNo,
                                                          Date.getCurrentDate() });
            }
                           _log.info("Amend function returns-" + retval1);
        this.getDBTransaction().commit();
        slsSo.setNamedWhereClauseParam("DocIdBind", doc_id);
        slsSo.executeQuery();
    }


    public void resetSoView() {
        ViewObject slsSo = this.getSearchSoVw();
        slsSo.setNamedWhereClauseParam("DocIdBind", null);
        slsSo.executeQuery();
    }

    /**
     * Container's getter for LOVUserIdVO1.
     * @return LOVUserIdVO1
     */
    public ViewObjectImpl getLOVUserIdVO1() {
        return (ViewObjectImpl)findViewObject("LOVUserIdVO1");
    }

    /**
     * Container's getter for SlsPickFrSoVO1.
     * @return SlsPickFrSoVO1
     */
    public ViewObjectImpl getSlsPickFrSoVO1() {
        return (ViewObjectImpl)findViewObject("SlsPickFrSoVO1");
    }

    /**
     * Container's getter for WareHouseVO1.
     * @return WareHouseVO1
     */
    public ViewObjectImpl getWareHouseVO1() {
        return (ViewObjectImpl)findViewObject("WareHouseVO1");
    }


    /**
     * Method returns the userId of the user on which the DeliverySchedule is pending
     * @return
     */
    public Integer slsDlvPendingAt() {
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoorgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer docType = (Integer)this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        System.out.println(" docType " + docType);
        Object obj = null;
         usrId = 0;

        if (this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString() != null) {
            DocIdTxn = new StringBuffer(this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString());
            System.out.println("DOC_ID TXN : " + DocIdTxn);
            try {
                /*  obj =
                callStoredFunction(Types.INTEGER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { slocid,
                                                                                                 cldid.toString(),
                                                                                                 orgid.toString(),
                                                                                                 21503,
                                                                                                 DocIdTxn.toString() }); */
                obj = null;
                String drivr = getdrivername();
                if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                                 {
                System.out.println("inside loop");
                obj = callStoredFunction1(Types.INTEGER, "call GET_DOC_WF_CUR_USR(?,?,?,?,?,?)", new Object[] { slocid, cldid.toString(),
                                                                                                        orgid.toString(), 21503,
                                                                                                        DocIdTxn.toString(), docType });
                   }
                else
                    {
                  obj=  callStoredFunction(Types.INTEGER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { slocid, cldid.toString(),
                                                                                    orgid.toString(), 21503,
                                                                                    DocIdTxn.toString(), docType });
                    }
            
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.WF_GET_CUR_USR' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }


            /* if (obj != null) {
                usrId = (Integer)obj;
            } */
        }
        System.out.println("DOC PENDING AT USER ID : " + usrId);
        return usrId;

    }

    /**
     * For Doc_Txn_ID
     */
    public StringBuffer doctxnid() {

        StringBuffer dtxnid = null;
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null)
            dtxnid = new StringBuffer(this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString());


        return dtxnid;
    }

    /**
     * Method returns WFID attached to the document.
     * @return
     */

    public StringBuffer getWfIdAttachedWithTheDoc() {
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoorgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer docType = (Integer)this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        System.out.println(" docType " + docType);
        Object obj = "";
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null) {
            try {
                obj = null;
                String drivr = getdrivername();
                                   if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                                 {
                             System.out.println("inside loop");
                             obj= callStoredFunction(Types.VARCHAR, "call WF_GET_ID(?,?,?,?,?)", new Object[] { slocid, cldid.toString(),
                                                                                                                   orgid.toString(), 21503, docType });
                            System.out.println("WF_ID WITH THE DOC :" + obj.toString());
                }
                else
                    {
obj= callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] { slocid, cldid.toString(),
                                                                             orgid.toString(), 21503, docType });
                System.out.println("WF_ID WITH THE DOC :" + obj.toString());
                    }
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.GET_WF_ID' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
        return new StringBuffer(obj.toString());
    }

    /**
     * Method that returns the level of the current user
     * @param WfId
     * @return
     */
    public Integer getUsrLvl(StringBuffer WfId) {
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoorgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer docType = (Integer)this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        System.out.println(" docType " + docType);
        System.out.println("WFID  :" + WfId);
        Integer lvl = 0;
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null) {
            try {
                /* lvl =
(Integer)callStoredFunction(Types.INTEGER, "APP.PKG_APP_WF.GET_USR_LEVEL(?,?,?,?,?,?)", new Object[] { slocid,
                                                                                                       cldid.toString(),
                                                                                                       orgid.toString(),
                                                                                                       userId,
                                                                                                       WfId.toString(),
                                                                                                       new Integer("21503") }); */
                lvl = null;
                String drivr = getdrivername();
                                   if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                                 {
                                   System.out.println("inside loop");
                                      lvl= (Integer)callStoredFunction(Types.INTEGER, "call WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { slocid,
                                                                                                                                       cldid.toString(),
                                                                                                                                       orgid.toString(),
                                                                                                                                       userId,
                                                                                                                                       WfId.toString(),
                                                                                                                                       new Integer("21503"),
                                                                                                                                       docType });
                                                      System.out.println("LEVEL :" + lvl);
    }
                else
                    {
lvl= (Integer)callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { slocid,
                                                                                                 cldid.toString(),
                                                                                                 orgid.toString(),
                                                                                                 userId,
                                                                                                 WfId.toString(),
                                                                                                 new Integer("21503"),
                                                                                                 docType });
                System.out.println("LEVEL :" + lvl);
                    }

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.GET_USR_LEVEL' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }

        return lvl;
    }

    /**
     * Method inserts a record in insTxn
     * @param WfId
     * @param level
     * @return
     */
    public Integer insIntoTxn(StringBuffer WfId, Integer level) {

        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoorgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer docType = (Integer)this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        System.out.println(" docType " + docType);
        Integer result = -3;
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null) {

            try {
                StringBuffer docId =
                    new StringBuffer(this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString());

                System.out.println("In Txn Docid is :" + docId);
                /* result =
                        (Integer)callStoredFunction(Types.INTEGER, "APP.PKG_APP_WF.INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                    new Object[] { slocid, cldid.toString(), orgid.toString(), 21503,
                                                                   WfId.toString(), docId.toString(), userId, userId,
                                                                   level, level, "I", "A", 0 }); */
                result = null;
                String drivr = getdrivername();
                if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                {
                 System.out.println("inside loop");
                                                         // sharon
                  result = (Integer)callStoredFunction(Types.INTEGER, "call WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { slocid,
                                                                                                                                                    cldid.toString(),
                                                                                                                                                    orgid.toString(),
                                                                                                                                                    21503,
                                                                                                                                                    docType,
                                                                                                                                                    WfId.toString(),
                                                                                                                                                    docId.toString(),
                                                                                                                                                    userId,
                                                                                                                                                    userId,
                                                                                                                                                    level,
                                                                                                                                                    level,
                                                                                                                                                    "I",
                                                                                                                                                    "A",
                                                                                                                                                    0,
                                                                                                                                                    "S" });
                                                     }
                else
                    {
                     result =   (Integer)callStoredFunction(Types.INTEGER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { slocid,
                                                                                                                                   cldid.toString(),
                                                                                                                                   orgid.toString(),
                                                                                                                                   21503,
                                                                                                                                   docType,
                                                                                                                                   WfId.toString(),
                                                                                                                                   docId.toString(),
                                                                                                                                   userId,
                                                                                                                                   userId,
                                                                                                                                   level,
                                                                                                                                   level,
                                                                                                                                   "I",
                                                                                                                                   "A",
                                                                                                                                   0,
                                                                                                                                   "S" });
                    }
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.INS_TXN' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
        return result;
    }


    /**
     * To get Total Amount For WareHouse
     */

    public Number TotalAmountForWarehouse() {

        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoorgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

        /**
         * Code for Fy Id
         */

        Integer fyId = 0;
        Number amount = new Number(0);
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null) {
            try {
                //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
                fyId = null;
                String drivr = getdrivername();
                                   if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                                 {
                                   System.out.println("inside loop");
                                      fyId= (Integer)callStoredFunction(Types.INTEGER, "call GET_ORG_FY_ID(?,?,?)", new Object[] { cldid.toString(),
                                                                                                                            orgid.toString(),
                                                                                                                            new Timestamp(System.currentTimeMillis()) });
                                                      System.out.println("FY :" + fyId);
           }
            else
            {
fyId= (Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { cldid.toString(),
                                                                                      orgid.toString(),
                                                                                      new Timestamp(System.currentTimeMillis()) });
                System.out.println("FY :" + fyId);
                    }
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' in EoImpl !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }


            ViewObjectImpl houseVO1 = getWareHouseVO1();
            houseVO1.setNamedWhereClauseParam("SlocIdBind", slocid);
            houseVO1.setNamedWhereClauseParam("OrgIdBind", orgid);
            houseVO1.setNamedWhereClauseParam("HoOrgIdBind", hoorgid);
            houseVO1.setNamedWhereClauseParam("DocIdBind",
                                              this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString());
            houseVO1.setNamedWhereClauseParam("FyIdBind", fyId);
            houseVO1.setNamedWhereClauseParam("CldIdBind", cldid);

            houseVO1.executeQuery();

            RowSetIterator createRowSetIterator = houseVO1.createRowSetIterator(null);
            if (createRowSetIterator != null) {
                //System.out.println("In True");
                while (createRowSetIterator.hasNext()) {
                    Row next = createRowSetIterator.next();
                    amount = (Number)next.getAttribute("Totamt");

                    //   System.out.println("Amount in AMImpl is :" + amount);


                }
            } else {
                // System.out.println("View Returns more then one row......!!!");

                FacesMessage message = new FacesMessage("Cannot perform Action......!!!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);

            }
        }
        return amount;

    }


    /**
     * Container's getter for SlsSoItmTrf1.
     * @return SlsSoItmTrf1
     */
    public ViewObjectImpl getSlsSoItmTrf1() {
        return (ViewObjectImpl)findViewObject("SlsSoItmTrf1");
    }

    /**
     * Container's getter for SlsSoDlySchdlToSlsSoItmTrfVL1.
     * @return SlsSoDlySchdlToSlsSoItmTrfVL1
     */
    public ViewLinkImpl getSlsSoDlySchdlToSlsSoItmTrfVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoDlySchdlToSlsSoItmTrfVL1");
    }

    /**
     * Work Flow Return Value
     */
    public void getWorkFlowValue() {

        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoorgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

        StringBuffer retvalue = new StringBuffer(resolvEl("#{pageFlowScope.RetValue}"));
        if (retvalue != null) {
            //System.out.println("Return Value is :" + retvalue);
            Integer fyId = null;
        Integer val =null;
        Integer getVal= null;
                    
            String drivr = getdrivername();
                               if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                             {
                               System.out.println("inside loop");
                                  fyId=     (Integer)callStoredFunction(Types.INTEGER, "call GET_ORG_FY_ID(?,?,?)", new Object[] { cldid.toString(),
                                                                                                                             orgid.toString(),
                                                                                                                             new Timestamp(System.currentTimeMillis()) });
                        
                                       
                                                      
                                       if (retvalue.toString().equalsIgnoreCase("A")) {
                                        val =
                                           (Integer)callStoredFunction(Types.INTEGER, "call FN_UPDATE_SO_STATUS(?,?,?,?,?,?)", new Object[] { cldid.toString(),
                                                                                                                                             slocid,
                                                                                                                                             orgid.toString(),
                                                                                                                                             this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId"),
                                                                                                                                             314,
                                                                                                                                             fyId });
                                        getVal =
                                           (Integer)callStoredFunction(Types.INTEGER, "call FN_INS_SO_TO_TRF(?,?,?,?,?,?,?,?,?)", new Object[] { cldid.toString(),
                                                                                                                                                slocid,
                                                                                                                                                hoorgid.toString(),
                                                                                                                                                orgid.toString(),
                                                                                                                                                fyId,
                                                                                                                                                this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DlvDt"),
                                                                                                                                                this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId"),
                                                                                                                                                userId,
                                                                                                                                                new Timestamp(System.currentTimeMillis()) });

                                       
                                                          if (val == 1 && getVal == 1) {
                                           getDBTransaction().commit();
                                                               // System.out.println("Auto commit is done");
                                    }
                                       }
                             }
            else
                {
           fyId=     (Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { cldid.toString(),
                                                                                                      orgid.toString(),
                                                                                                      new Timestamp(System.currentTimeMillis()) });
            //System.out.println("FY :" + fyId);
            //System.out.println("Docid after wf is :" + this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId"));

                
                               
                if (retvalue.toString().equalsIgnoreCase("A")) {
                 val =
                    (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_SO_STATUS(?,?,?,?,?,?)", new Object[] { cldid.toString(),
                                                                                                                      slocid,
                                                                                                                      orgid.toString(),
                                                                                                                      this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId"),
                                                                                                                      314,
                                                                                                                      fyId });
                //System.out.println("value is :"+val);
                 getVal =
                    (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_INS_SO_TO_TRF(?,?,?,?,?,?,?,?,?)", new Object[] { cldid.toString(),
                                                                                                                         slocid,
                                                                                                                         hoorgid.toString(),
                                                                                                                         orgid.toString(),
                                                                                                                         fyId,
                                                                                                                         this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DlvDt"),
                                                                                                                         this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId"),
                                                                                                                         userId,
                                                                                                                         new Timestamp(System.currentTimeMillis()) });

                
                                   if (val == 1 && getVal == 1) {
                    getDBTransaction().commit();
                                        // System.out.println("Auto commit is done");
                }
                }
            }
            //System.out.println("Outside loop");
        }
    }

    /**
     * For Fy Id
     */
    public void InsertFyId() {

        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoorgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

        Integer fyId = null;
        String drivr = getdrivername();
                           if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                         {
                           System.out.println("inside loop");
                              fyId=         (Integer)callStoredFunction(Types.INTEGER, "call GET_ORG_FY_ID(?,?,?)", new Object[] { cldid.toString(),
                                                                                                                             orgid.toString(),
                                                                                                                             new Timestamp(System.currentTimeMillis()) });
                          }
        else
            {
   fyId=         (Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { cldid.toString(),
                                                                                                  orgid.toString(),
                                                                                                  new Timestamp(System.currentTimeMillis()) });
            } this.getSlsSoItmTrf1().getCurrentRow().setAttribute("FyId", fyId);
    }

    /**
     * Check Atleast one Check Box is checked or not
     */
    public boolean chkCheckBoxValue() {
        System.out.println("In AMIMPL");
        Integer val = (Integer)this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        Boolean result = false;

        if (val == 311) {

            RowSetIterator rsi = this.getSlsRateContDlvSchdl_Vw1().createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                System.out.println("next :" + next);


                if (next.getAttribute("SelectItmChekBoxTrans") != null &&
                    next.getAttribute("SelectItmChekBoxTrans").equals("Y")) {
                    System.out.println("Inside loop");
                    result = true;
                    break;

                }
            }


        } else {


            RowSetIterator rsi = this.getSlsDlvSchdlBalance_Vw().createRowSetIterator(null);
            while (rsi.hasNext()) {
                //System.out.println("Rsi-->" + rsi.getRowCount());
                Row next = rsi.next();
                // System.out.println("next :" + next);


                if (next.getAttribute("SelectItmChekBoxTrans") != null &&
                    next.getAttribute("SelectItmChekBoxTrans").equals("Y")) {
                    System.out.println("Inside loop");
                    if (next.getAttribute("SelectItmChekBoxTrans").equals("Y")) {


                        result = true;
                    }
                }

            }

        }

        return result;

    }

    /**
     * For checking all variable were entered
     */
    public Integer chkMandatoryFieldsEntered() {

        if (this.getSlsDlvSchdlBalance_Vw().getCurrentRow().getAttribute("SelectItmChekBoxTrans") != null &&
            this.getSlsDlvSchdlBalance_Vw().getCurrentRow().getAttribute("SelectItmChekBoxTrans").toString().equalsIgnoreCase("Y")) {

            System.out.println("In If Part");
        } else {
            System.out.println("In else part");
        }

        return 1;
        /*  System.out.println("-----------------------------------");
        Integer count = 0;
        Row r = this.getSearchSoVw().getCurrentRow();
        if (r.getAttribute("DeliveryDateTrans") != null) {
            if (r.getAttribute("ModeTrans") != null) {
                if (r.getAttribute("WareHouseTrans") != null) {

                    RowSetIterator rsi = this.getSlsDlvSchdlBalance_Vw().createRowSetIterator(null);
                    System.out.println("Row Count "+rsi.getRowCount());
                    while (rsi.hasNext()) {
                        System.out.println(rsi.getCurrentRow()+" RSI "+rsi.next());
                        System.out.println("CB val is "+rsi.next().getAttribute("SelectItmChekBoxTrans"));



                        Row baltable = this.getSlsDlvSchdlBalance_Vw().getCurrentRow();
                        System.out.println("baltable "+baltable);
                        System.out.println("CB Value is "+baltable.getAttribute("SelectItmChekBoxTrans"));
                        if (baltable.getAttribute("SelectItmChekBoxTrans") != null) {
                            if (baltable.getAttribute("SelectItmChekBoxTrans").toString().equalsIgnoreCase("Y") && baltable.getAttribute("SchdlQuantTrans") != null) {
                                count = 1;
                                System.out.println("Successfully came into loop "+count);
                               // break;
                            } else {
                                //count = 2;
                                System.out.println("Enter Quantity to transfer");
                            }
                        } else {
                            //count = 3;
                            System.out.println("Please Make A selection");
                        }
                    }
                    if(rsi!=null){
                    rsi.closeRowSetIterator();
                    }
                } else {
                    count = 4;
                    System.out.println("Select WareHouse");
                }
            } else {
                count = 5;
                System.out.println("Select Mode");
            }
        } else {
            count = 6;
            System.out.println("Entere Delivery Date");
        }
        System.out.println("---> "+count);
        return count; */
    }


    /**
     * Check WareHouse Src Duplicate Record exist or not
     */
    public Boolean chkDuplicateWhIdSrc(String whidFromBean) {
        RowSetIterator rsi = this.getSlsSoItmTrf1().createRowSetIterator(null);
        //System.out.println("curr is:"+this .getSlsSoItmTrf1().getCurrentRow());
        while (rsi.hasNext()) {
            Row next = rsi.next();
            // System.out.println("next :"+next);
            if (next.getAttribute("WhIdDest") != null && next != this.getSlsSoItmTrf1().getCurrentRow()) {
                // System.out.println("next.getAttribute(\"WhIdSrc\") "+next.getAttribute("WhIdSrc")+" Bean value is "+whidFromBean);
                if (next.getAttribute("WhIdDest").equals(whidFromBean)) {
                    //    System.out.println("Inside loop");
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Change Transfer Order Status value
     */
    public void changeTrfStatusValue() {
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        Row currentRow = impl.getCurrentRow();
        currentRow.setAttribute("TrfStat", "Y");


    }

    /**
     * Change Transfer Order Status value to N
     */
    public void removeTrfStatusValue() {
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        Row currentRow = impl.getCurrentRow();
        currentRow.setAttribute("TrfStat", "N");


    }

    /**
     * Check whether atleast one record exist or not in SLSSoItmTrf....
     */
    public Boolean chkRecordExistorNot() {
        RowSetIterator rsi = this.getSlsSoItmTrf1().createRowSetIterator(null);
        // System.out.println("Outside of Iterator");
        while (rsi.hasNext()) {
            // System.out.println("In ChkList of iterator");
            return true;
        }

        return false;
    }

    /**
     * Set Available Quantity after Selecting WareHouse Destination Value
     */
    public Number setAvailableQtyOnItmTrf(String whidvalue) {

        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoorgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

        ViewObjectImpl impl = this.getSlsSoItmTrf1();

        //        SLS.fn_mm_get_avail_stk (
        //           p_cld_id    VARCHAR2,
        //           p_sloc_id   NUMBER,
        //           p_org_id    VARCHAR2,
        //           p_itm_id    VARCHAR2,
        //           p_wh_id     VARCHAR2,
        //           P_DOC_DT DATE
        Number n = new Number(0);
        if (whidvalue != null) {
            try {
                System.out.println("+++++++++" + whidvalue);

                System.out.println("Values are " + cldid.toString() + " " + slocid + " " + orgid.toString() + " " +
                                   impl.getCurrentRow().getAttribute("ItmId") + " " + whidvalue + " " +
                                   new Timestamp(System.currentTimeMillis()));

                BigDecimal v = null;
                String drivr = getdrivername();
                                   if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                                 {
                                   System.out.println("inside loop");
                                      v =         (BigDecimal)callStoredFunction(Types.NUMERIC, "call fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] { cldid.toString(),
                                                                                                                                                    slocid,
                                                                                                                                                    orgid.toString(),
                                                                                                                                                    impl.getCurrentRow().getAttribute("ItmId"),
                                                                                                                                                    whidvalue,
                                                                                                                                                    new Timestamp(System.currentTimeMillis()) });

                                          }
                else
                    {
           v =         (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] { cldid.toString(),
                                                                                                                         slocid,
                                                                                                                         orgid.toString(),
                                                                                                                         impl.getCurrentRow().getAttribute("ItmId"),
                                                                                                                         whidvalue,
                                                                                                                         new Timestamp(System.currentTimeMillis()) });

                    }
                n = new Number(v);
                System.out.println("v :" + v);

            } catch (Exception e) {

                //e.printStackTrace();
                System.out.println("error in calling function !!!!!!!!!!!!!!!!!!!");
            }
            //System.out.println("EoId : "+this.getSlsSo().getAttribute("EoId"));


        }

        impl.getCurrentRow().setAttribute("AvlQty", n);
        return n;
    }

    /**
     * Check Atleast one Transfer Order value is true or not
     */
    public Boolean chkTrfOrderStatus() {
        RowSetIterator rsi = this.getSlsSoItmTrf1().createRowSetIterator(null);
        //Integer count = 0;
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            if (row.getAttribute("TrfStat").toString().equals("N")) {
                itr.closeRowSetIterator();
                return false;
            }
        }
        itr.closeRowSetIterator();

        return true;
    }

    /**
     * Set Transfer Order Quantity Value
     */
    public void setTrfQtyValueFromBean(Number val) {
        // System.out.println("Value is "+val);
        this.getSlsSoItmTrf1().getCurrentRow().setAttribute("ItmTrfQty", val);

        //System.out.println("---->"+this.getSlsSoItmTrf1().getCurrentRow().getAttribute("ItmTrfQty"));
    }


    /**
     * Container's getter for SlsSoItmTrf2.
     * @return SlsSoItmTrf2
     */
    public ViewObjectImpl getSlsSoItmTrf2() {
        return (ViewObjectImpl)findViewObject("SlsSoItmTrf2");
    }

    public void executePageWithParam() {
        SearchSoVwVOImpl impl = getSearchSoVw();
        ViewCriteria criteria = impl.getViewCriteria("SearchSoVwVOCriteria");
        impl.applyViewCriteria(criteria);
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        impl.setNamedWhereClauseParam("CldIdBind", -1);
        impl.setNamedWhereClauseParam("SlocIdBind", SlocId);
        impl.setNamedWhereClauseParam("OrgIdBind", OrgId);
        impl.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);

        impl.executeQuery();
    }

    /**
     * Container's getter for SlsSo1.
     * @return SlsSo1
     */
    public ViewObjectImpl getSlsSo1() {
        return (ViewObjectImpl)findViewObject("SlsSo1");
    }

    /**
     * Container's getter for SearchSoVwToSlsSoVL1.
     * @return SearchSoVwToSlsSoVL1
     */
    public ViewLinkImpl getSearchSoVwToSlsSoVL1() {
        return (ViewLinkImpl)findViewLink("SearchSoVwToSlsSoVL1");
    }

    /**
     * Container's getter for SlsSoItm1.
     * @return SlsSoItm1
     */
    public ViewObjectImpl getSlsSoItm1() {
        return (ViewObjectImpl)findViewObject("SlsSoItm1");
    }

    /**
     * Container's getter for SlsSoToSlsSoItmVL1.
     * @return SlsSoToSlsSoItmVL1
     */
    public ViewLinkImpl getSlsSoToSlsSoItmVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoToSlsSoItmVL1");
    }

    /**
     * Container's getter for SlsSoItem1.
     * @return SlsSoItem1
     */
    public ViewObjectImpl getSlsSoItem1() {
        return (ViewObjectImpl)findViewObject("SlsSoItem1");
    }

    /**
     * Container's getter for SlsSoToSlsSoItemVL1.
     * @return SlsSoToSlsSoItemVL1
     */
    public ViewLinkImpl getSlsSoToSlsSoItemVL1() {
        return (ViewLinkImpl)findViewLink("SlsSoToSlsSoItemVL1");
    }

    /**Method to get Item Price for Customer
     * @param eoId
     * @return
     */
    public Number getLatestItmPriceSo(String itmDesc) {
        _log.info("Inside AM method Rate");
        ViewObject slsSo = this.getSlsSo1();

        ViewObjectImpl lovItmId = this.getLOVItmId1();
        Number itmPrice = new Number(0);
        Row curRow = slsSo.getCurrentRow();


        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String itemId = null;
        RowQualifier rq = new RowQualifier(lovItmId);
        rq.setWhereClause("SlocId=" + p_sloc_id + " and OrgId='" + p_org_id + "' and HoOrgId='" + p_hoOrgId +
                          "' and CldId='" + p_cldId + "' and ItmDesc='" + itmDesc + "'");
        _log.info(rq.getExprStr());
        Row rows[] = lovItmId.getFilteredRows(rq);
        _log.info("Total Row after Filtering-->" + rows.length);
        if (rows.length > 0) {
            itemId = rows[0].getAttribute("ItmId").toString();
        }

        Number conv = new Number(1);
        _log.info("Before function call Customer is-->" + curRow.getAttribute("EoId") + "and Item is-->" + itemId);
        if (curRow.getAttribute("EoId") != null && itemId != null) {

            Integer eoId = Integer.parseInt(curRow.getAttribute("EoId").toString());
            Integer currId = Integer.parseInt(curRow.getAttribute("CurrIdSp").toString());
            conv = (Number)curRow.getAttribute("CurrConvFctr");
            Timestamp p_doc_dt = (Timestamp)curRow.getAttribute("DocDt");
            _log.info("Customer is-->" + eoId + "and Item is-->" + itemId);

            if (checkPolicyApplied().toString().equals("Y")) {
                _log.info("Price from Price Policy.");
                BigDecimal price = new BigDecimal(0);
                BigDecimal policyPrice = null;
                String drivr = getdrivername();
                                   if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                                 {
                                   System.out.println("inside loop");
                                      policyPrice=       (BigDecimal)callStoredFunction(Types.NUMERIC, "call APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)",
                                                                            new Object[] { p_cldId, p_sloc_id, p_hoOrgId, p_org_id, eoId,
                                                                                           itemId, "SO" });
                                               }
                else
                    {
             policyPrice=       (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)",
                                                   new Object[] { p_cldId, p_sloc_id, p_hoOrgId, p_org_id, eoId,
                                                                  itemId, "SO" });
                    }
                                   
                _log.info("Policy Price is : " + policyPrice);
                if (policyPrice.compareTo(new BigDecimal(0)) == 0) {
                    price = null;
                     drivr = getdrivername();
                                       if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                                     {
                                       System.out.println("inside loop");
                                          price=      (BigDecimal)callStoredFunction(Types.NUMERIC, "call FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                                               new Object[] { p_cldId, p_sloc_id, p_org_id, p_hoOrgId,
                                                                                              eoId, itemId, p_doc_dt, p_user_id,
                                                                                              new Timestamp(System.currentTimeMillis()),
                                                                                              currId, conv });
                                               }
                    else
                        {
                      price=      (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                           new Object[] { p_cldId, p_sloc_id, p_org_id, p_hoOrgId,
                                                                          eoId, itemId, p_doc_dt, p_user_id,
                                                                          new Timestamp(System.currentTimeMillis()),
                                                                          currId, conv });
                        }
                    _log.info("Value from Function Rate--" + price);
                    try {
                        itmPrice =
                                new Number(new Number(price).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"))));
                    } catch (SQLException e) {
                    }

                } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                    itmPrice = new Number(-2);
                } else {
                    price = policyPrice;
                    try {
                        itmPrice = new Number(new Number(price));
                        itmPrice = itmPrice.divide(conv);
                        itmPrice =
                                (Number)itmPrice.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));
                    } catch (SQLException e) {
                    }
                }

            } else {
                _log.info("Price from EO Price.");
                BigDecimal price = null;
                String drivr = getdrivername();
                                   if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                                 {
                                   System.out.println("inside loop");
                                      price=        (BigDecimal)callStoredFunction(Types.NUMERIC, "call FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                                             new Object[] { p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId,
                                                                                            itemId, p_doc_dt, p_user_id,
                                                                                            new Timestamp(System.currentTimeMillis()), currId,
                                                                                            conv });
                                            }
                else
                    {
            price=        (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                   new Object[] { p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId,
                                                                  itemId, p_doc_dt, p_user_id,
                                                                  new Timestamp(System.currentTimeMillis()), currId,
                                                                  conv });
                    }
                _log.info("Value from Function Rate--" + price);
                try {
                    itmPrice =
                            new Number(new Number(price).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"))));
                } catch (SQLException e) {
                }
            }


        }
        if (itmPrice.compareTo(-1) == 0) {
            itmPrice = new Number(0);
        }
        // uom,id,uomBaisc
        /* Row currentRow = this.getSlsSoItm1().getCurrentRow();
             if(currentRow!=null){
             System.out.println("setting :"+itemId+" "+uom+" "+uomBasic);
             currentRow.setAttribute("ItmId", itemId);
             currentRow.setAttribute("ItmUom", uom);
             currentRow.setAttribute("ItmUomBs", uomBasic);
             } */
        //this.getSlsSoItm1().getCurrentRow().setAttribute("", arg1);
        _log.info("Latest Price for item is-->" + itmPrice);

        return itmPrice;
    }

    public StringBuffer checkPolicyApplied() {
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String policyPrice = null;
            String drivr = getdrivername();
                               if (drivr.equalsIgnoreCase("MySQL-AB JDBC Driver"))
                             {
                               System.out.println("inside loop");
                               policyPrice = (String)callStoredFunction(Types.VARCHAR, "call fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                                                    p_sloc_id,
                                                                                                                                    p_org_id,
                                                                                                                                    "USE_PRICE_PLC" });

                              }
            else
                {
          policyPrice =      (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                            p_sloc_id,
                                                                                                            p_org_id,
                                                                                                            "USE_PRICE_PLC" });

                }
            
            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        _log.info("Policy Applied : " + ck);
        return ck;
    }

    /**
     * Container's getter for LOVItmId1.
     * @return LOVItmId1
     */
    public ViewObjectImpl getLOVItmId1() {
        return (ViewObjectImpl)findViewObject("LOVItmId1");
    }

    /**Item Id Validator for Lines*/

    public String itmIdValidator(String itmName) {
        ViewObject v = this.getSlsSoItem1();
        String itmDesc = null;
        int totalCount = v.getRowCount(); //get ALL rows
        int rangeSize = v.getRangeSize(); //all in range
        v.setRangeSize(totalCount);
        Row[] rArray = v.getAllRowsInRange();

        //check for duplicate rows
        Row cRow = v.getCurrentRow();
        int count = 0;
        String currName = "";

        for (Row r : rArray) {

            if (!r.equals(cRow)) {
                try {
                    currName = r.getAttribute("ItmId").toString();
                } catch (NullPointerException npe) {
                    // System.out.println("NPE:" + npe);
                    currName = "";
                }
                if (currName != null) {
                    Row[] xx = this.getLOVItmId1().getFilteredRows("ItmId", currName);
                    if (xx.length > 0) {
                        itmDesc = xx[0].getAttribute("ItmDesc").toString();
                    }
                    if (itmName.equalsIgnoreCase(itmDesc)) {
                        count = count + 1;
                    }
                }

            }

        }
        v.setRangeSize(rangeSize); //set to original range
        _log.info("Total Count -->" + count);
        if (count > 0) {
            return "Y";
        } else {
            return "N";
        }


    }

    public void setpolicy() {
        String i = "";
        Object plcId = resolvElO("#{pageFlowScope.PRICE_POLICY_ID}");
        _log.info("Policy id : " + plcId);
        if (plcId != null) {
            i = plcId.toString();
        }
        if (!i.equals("")) {
            ViewObjectImpl impl = this.getSlsSo1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                currentRow.setAttribute("EoPricePlc", i);
                _log.info("Setting policy Id to : " + i);
            }
        }
    }


    /**Method to resolve expression- returns String value*/
    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**
     * Check Mandatory fields entered or not
     */
    public Integer chkMandatoryEntered() {
        Integer retVal = 0;

        Row currentRow = this.getSlsSoItem1().getCurrentRow();
        if (currentRow != null) {
            Object itmName = currentRow.getAttribute("ItemNmeTrans");
            Object price = currentRow.getAttribute("ItmRate");
            Object qty = currentRow.getAttribute("ItmQty");

            if (itmName != null) {
                if (qty != null) {
                    if (price != null) {

                    } else {
                        retVal = 3;

                    }
                } else {
                    retVal = 2;
                }
            } else {
                retVal = 1;
            }
        }
        return retVal;
    }

    /**
     * To set SR_No of Sls$So$Item on basis of item
     */
    public void setSrNo(Integer srNo) {
        if (srNo != null) {
            ViewObjectImpl impl = this.getSlsSoItem1();
            int count = (int)impl.getEstimatedRowCount();

            System.out.println("No of rows is " + count);

            this.getSlsSoItem1().getCurrentRow().setAttribute("SrNo", count);
        }
    }
    
    public String getdrivername()
    {         String   drivernme ="";
              //SlsIntimationSlipAMImpl am = (SlsIntimationSlipAMImpl)resolvElDC("SlsIntimationSlipAMDataControl");
              DBTransaction dbTransaction = (DBTransaction) this.getTransaction();
              PreparedStatement prepStatement = 
              dbTransaction.createPreparedStatement("select * from dual", 0);    
              try 
              {           
                System.out.println("Driver name--"+prepStatement.getConnection().getMetaData().getDriverName());
                drivernme = prepStatement.getConnection().getMetaData().getDriverName();
              } 
              catch (SQLException e) 
              {
                  e.printStackTrace();
              }           
              return drivernme;
               
              }
    private static int NUMBER = Types.NUMERIC;
    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
           CallableStatement st = null;
           try {
               st = getDBTransaction().createCallableStatement(" " + stmt + ";", 0);
               st.registerOutParameter(1, sqlReturnType);
               if (bindVars != null) {
                   for (int z = 0; z < bindVars.length; z++) {
                       st.setObject(z + 2, bindVars[z]);
                   }
               }
               st.registerOutParameter(8, NUMBER);
               
               st.executeUpdate();
               try {
                   System.out.println(st.getObject(0).toString());
                   usrId = Integer.parseInt(st.getObject(0).toString());
                   System.out.println("User id in processor    "+usrId);
                       
                  
               } catch (NullPointerException e) {
                   System.out.println(e);
                   e.printStackTrace();
               }
               return st.getObject(1);
     
           } catch (SQLException e) {
               throw new JboException(e);
           } finally {
               if (st != null) {
                   try {
                       st.close();
                   } catch (SQLException e) {
     
                   }
               }
           }
       }


}
