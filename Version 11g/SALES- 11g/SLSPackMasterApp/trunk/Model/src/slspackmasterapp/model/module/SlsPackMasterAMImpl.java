package slspackmasterapp.model.module;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import slspackmasterapp.model.module.common.SlsPackMasterAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 10 11:10:32 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsPackMasterAMImpl extends ApplicationModuleImpl implements SlsPackMasterAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SlsPackMasterAMImpl() {
    }

    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public String getparamHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    /**
     * Container's getter for SlsPackPrf1.
     * @return SlsPackPrf1
     */
    public ViewObjectImpl getSlsPackPrf1() {
        return (ViewObjectImpl)findViewObject("SlsPackPrf1");
    }

    /**
     *  Method to generate and set packid of the newly generated pack
     */
    public void getAndSetPackId() {
        ViewObjectImpl impl = this.getSlsPackPrf1();
        RowSetIterator createRowSetIterator = impl.createRowSetIterator(null);
        Integer n = 0;
        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            if (next != this.getSlsPackPrf1().getCurrentRow()) {
                if (n < (Integer)next.getAttribute("PackId")) {
                    n = (Integer)next.getAttribute("PackId");
                }
            }
        }
        System.out.println("n : " + n);
        impl.getCurrentRow().setAttribute("PackId", n + 1);
        createRowSetIterator.closeRowSetIterator();
    }

    public boolean isPackNmValid(StringBuffer PackNm) {
        ViewObjectImpl impl = this.getSlsPackPrf1();
        RowSetIterator createRowSetIterator = impl.createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            if (next != this.getSlsPackPrf1().getCurrentRow()) {
                if (PackNm.toString().equalsIgnoreCase(next.getAttribute("PackNm").toString())) {
                    createRowSetIterator.closeRowSetIterator();
                    return false;
                }
            }
        }
        createRowSetIterator.closeRowSetIterator();
        return true;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);

            st.registerOutParameter(1, sqlReturnType);

            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);

                    }
                }
                st.executeUpdate();
            } catch (NullPointerException e) {

                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {


                }
            }
        }
    }
    private static int VARCHAR = Types.VARCHAR;

    public String isProfileUsed() {
        ViewObjectImpl profilevo = this.getSlsPackPrf1();
        profilevo.getCurrentRow().getAttribute("PackId");
        System.out.println("pack id is ==" + profilevo.getCurrentRow().getAttribute("PackId"));

        String a =
            (String)callStoredFunction(VARCHAR, "SLS.fn_sls_chk_pack_tran(?,?,?,?)", new Object[] { getparamCldId(),
                                                                                                    getparamSlocId(),
                                                                                                    getparamOrgId(),
                                                                                                    profilevo.getCurrentRow().getAttribute("PackId") });
        System.out.println("value of aaa is =-" + a);
        return a;
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public ViewObjectImpl getSearch1() {
        return (ViewObjectImpl)findViewObject("Search1");
    }


    /**
     * Code for Search Button
     */
    public void searchAction() {
        System.out.println("this.getSearch1().getCurrentRow() " + this.getSearch1().getCurrentRow());
        String packNm = null;
        String dimenson = null;
        oracle.jbo.domain.Number width = null;
        oracle.jbo.domain.Number height = null;
        oracle.jbo.domain.Number length = null;
        ViewObjectImpl searchPaack = this.getSlsPackPrf1();
        ViewCriteria criteria = searchPaack.getViewCriteria("SlsPackPrfVOCriteria");
        searchPaack.applyViewCriteria(criteria);
        Row currentRow = this.getSearch1().getCurrentRow();
        if (currentRow != null) {

            packNm = (String)currentRow.getAttribute("NameTrans");
            dimenson = (String)currentRow.getAttribute("DimensionTrans");
            width = (oracle.jbo.domain.Number)currentRow.getAttribute("WidthTrans");
            height = (oracle.jbo.domain.Number)currentRow.getAttribute("HeightTrans");
            length = (oracle.jbo.domain.Number)currentRow.getAttribute("LengthTrans");

        }
        System.out.println("Parameretr packNm=" + packNm + "dimenson =" + dimenson + "width =" + width + "height =" +
                           height + "length =" + length + " orb id " + getparamOrgId() + " ho org" +
                           getparamHoOrgId() + " sloc id " + getparamSlocId() + "cld id=" + getparamCldId());
        searchPaack.setNamedWhereClauseParam("nameBind", packNm);
        searchPaack.setNamedWhereClauseParam("dimensionBind", dimenson);
        searchPaack.setNamedWhereClauseParam("widthBind", width);
        searchPaack.setNamedWhereClauseParam("heightBind", height);
        searchPaack.setNamedWhereClauseParam("lengthBind", length);
        searchPaack.setNamedWhereClauseParam("BindPackCldId", getparamCldId());
        searchPaack.setNamedWhereClauseParam("BindPackSlocId", getparamSlocId());
        searchPaack.setNamedWhereClauseParam("BindPackOrgId", getparamOrgId());
        searchPaack.setNamedWhereClauseParam("BindPackHoOrgIId", getparamHoOrgId());
        searchPaack.executeQuery();
    }

    /**
     * Code for Reset Button
     */
    public void resetAction() {

        Row currentRow = this.getSearch1().getCurrentRow();
        this.getSearch1().executeQuery();
        ViewObjectImpl impl = this.getSlsPackPrf1();
        ViewCriteria criteria = impl.getViewCriteria("SlsPackPrfVOCriteria");
        impl.applyViewCriteria(criteria);
        impl.setNamedWhereClauseParam("nameBind", null);
        impl.setNamedWhereClauseParam("lengthBind", null);
        impl.setNamedWhereClauseParam("heightBind", null);
        impl.setNamedWhereClauseParam("widthBind", null);
        impl.setNamedWhereClauseParam("dimensionBind", null);
        impl.setNamedWhereClauseParam("BindPackCldId", getparamCldId());
        impl.setNamedWhereClauseParam("BindPackSlocId", getparamSlocId());
        impl.setNamedWhereClauseParam("BindPackOrgId", getparamOrgId());
        impl.setNamedWhereClauseParam("BindPackHoOrgIId", getparamHoOrgId());
        impl.executeQuery();

    }

    public void setTblBlankOnRstClick() {
        this.getSearch1().executeQuery();
        ViewObjectImpl impl1 = this.getSlsPackPrf1();
        ViewCriteria criteria1 = impl1.getViewCriteria("SlsPackPrfVOCriteria1");
        impl1.applyViewCriteria(criteria1);
        impl1.setNamedWhereClauseParam("BindPackCldId", getparamCldId());
        impl1.setNamedWhereClauseParam("BindPackSlocId", -1);
        impl1.setNamedWhereClauseParam("BindPackOrgId", getparamOrgId());
        impl1.setNamedWhereClauseParam("BindPackHoOrgIId", getparamHoOrgId());
        impl1.executeQuery();
    }

    public void executePageWithGlblValue() {

        ViewObjectImpl impl = this.getSlsPackPrf1();
        ViewCriteria criteria = impl.getViewCriteria("SlsPackPrfVOCriteria1");
        impl.applyViewCriteria(criteria);
        impl.setNamedWhereClauseParam("BindPackCldId", getparamCldId());
        impl.setNamedWhereClauseParam("BindPackSlocId", -1);
        impl.setNamedWhereClauseParam("BindPackOrgId", getparamOrgId());
        impl.setNamedWhereClauseParam("BindPackHoOrgIId", getparamHoOrgId());
        impl.executeQuery();
    }

    public String validUnit() {
        String rtn = null;
        Row packCurrRow = this.getSlsPackPrf1().getCurrentRow();
        if (packCurrRow != null) {
            String unit = (String)packCurrRow.getAttribute("DimenUnit");
            System.out.println("unit" + unit);
            if (unit != null) {
                System.out.println("reyrn Y");
                rtn = "Y";
            } else {
                System.out.println("reyrn n");
                rtn = "N";
            }
        }
        return rtn;
    }
}
