package slsquotationapp.model.module;

import adf.utils.ebiz.EbizParams;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import javax.servlet.ServletException;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.rules.JboPrecisionScaleValidator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsquotationapp.model.module.common.SlsQuotationAppAM;
import slsquotationapp.model.views.SlsQuotItmVOImpl;
import slsquotationapp.model.views.SlsQuotItmVORowImpl;
import slsquotationapp.model.views.SlsQuotTncVOImpl;
import slsquotationapp.model.views.SlsQuotTncVORowImpl;
import slsquotationapp.model.views.SlsQuotTrVOImpl;
import slsquotationapp.model.views.SlsQuotTrVORowImpl;
import slsquotationapp.model.views.SlsQuotVOImpl;
import slsquotationapp.model.views.SlsQuotVORowImpl;
import slsquotationapp.model.views.TnCVOImpl;
import slsquotationapp.model.views.searchQuotationVOImpl;
import slsquotationapp.model.views.searchQuotationVORowImpl;
import slsquotationapp.model.views.searchVOImpl;
import slsquotationapp.model.views.searchVORowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 28 15:12:48 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsQuotationAppAMImpl extends ApplicationModuleImpl implements SlsQuotationAppAM {
    private Boolean sntmail = true; //To check mail has been sent or not
    private static ADFLogger _log = ADFLogger.createADFLogger(SlsQuotationAppAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public SlsQuotationAppAMImpl() {
    }

    public Integer getAmtDgt() {
        if (resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}") != null) {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        } else {
            return 2;
        }
    }

    /**
     * Container's getter for SlsQuot1.
     * @return SlsQuot1
     */
    public ViewObjectImpl getSlsQuot1() {
        return (ViewObjectImpl)findViewObject("SlsQuot1");
    }

    /**
     * Method to setParameter of the currentRow in VO SlsQuot1
     * @param name
     * @param value
     */
    public void getslsQuotSetCurrentRowAtt(String name, String value) {
        ViewObjectImpl slsQuoteVo = this.getSlsQuot1();
        slsQuoteVo.getCurrentRow().setAttribute(name, (Object)value);

        /* RowSetIterator rsi = this.getSlsQuotItm2().createRowSetIterator(null);

         while (rsi.hasNext()) {
            Row next = rsi.next();

            next.remove();  // 15 - march - 2014 this is removing the lines..

        }  */

        getSlsQuotItm2().executeQuery();

    }

    /**
     * Container's getter for EoAddTemp1.
     * @return EoAddTemp1
     */
    public ViewObjectImpl getEoAddTemp1() {
        return (ViewObjectImpl)findViewObject("EoAddTemp1");
    }

    /**
     * Container's getter for SlsQuotItm2.
     * @return SlsQuotItm2
     */
    public ViewObjectImpl getSlsQuotItm2() {
        return (ViewObjectImpl)findViewObject("SlsQuotItm2");
    }

    /**
     * Container's getter for QuoteToItemVL1.
     * @return QuoteToItemVL1
     */
    public ViewLinkImpl getQuoteToItemVL1() {
        return (ViewLinkImpl)findViewLink("QuoteToItemVL1");
    }

    /**
     * Method to call a function with one output Parameter
     * @param functionStmt
     * @param sqlReturnType
     * @param paramsInOrder
     * @return
     */
    public StringBuffer functionCall(String functionStmt, int sqlReturnType, String[] paramsInOrder) {
        if (!functionStmt.equals(null)) {
            Object[] params = new Object[paramsInOrder.length];
            int i = 0;
            //System.out.println("Length:" + paramsInOrder.length);
            for (String a : paramsInOrder) {
                params[i] = (Object)a;
                //System.out.println(a + ":");
                i = i + 1;
            }
            return new StringBuffer(callStoredFunction(sqlReturnType, functionStmt, params).toString());
        }
        return null;
    }

    /**
     * Method to call function FN_SET_EO_ID
     * @param EoNm
     * @param EoType
     * @return
     */
    public StringBuffer callFunction_FN_SET_EO_ID(String EoNm, Integer EoType) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        //FN_SET_EO_ID(P_SLOC_ID NUMBER,P_CLD_ID VARCHAR2,P_ORG_ID VARCHAR2,P_HO_ORG_ID VARCHAR2,P_NAM VARCHAR2,P_TYPE NUMBER,P_USR_ID NUMBER)

        if (!(EoNm.equals(null) || EoType == null)) {
            try {
                String s =
                    callStoredFunction(Types.VARCHAR, "APP.FN_SET_EO_ID(?,?,?,?,?,?)", new Object[] { slocId, cldId.toString(),
                                                                                                      orgId.toString(),
                                                                                                      EoNm.toString(),
                                                                                                      EoType,
                                                                                                      userId }).toString();
                return new StringBuffer(s);

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_SET_EO_ID' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }

        }

        return null;
    }

    /**
     *  Method to call executeQuery of LOVCustomerVO
     */
    public void executeLOVCustomerVO() {
        SlsQuotVORowImpl row = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();
        row.getLOVCustomerVO1().executeQuery();
    }

    /**
     * Method to call a Database function
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        System.out.println("__________________________________________begin");
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    System.out.println("|" + bindVars[z]);
                }
            }
            st.executeUpdate();
            System.out.println("__________________________________________end");
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }

    /**
     * Method to check duplicate item on a quotation
     * @param itemNm
     * @return
     */
    public Integer getItemLineRowCount(StringBuffer itemNm) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        String itmId = null;
        ViewObjectImpl impl = this.getLovItemDescFromitemId1();
        impl.setNamedWhereClauseParam("HoOrgIdBind", hoOrgId);
        impl.setNamedWhereClauseParam("SlocIdBind", slocId);
        impl.setNamedWhereClauseParam("CldIdBind", cldId);
        Row[] row_2 = this.getLOVItem1().getFilteredRows("ItmDesc", itemNm.toString());
        if (row_2.length > 0) {
            itmId = row_2[0].getAttribute("ItmId").toString();
        }
        Integer ret = 0;
        SlsQuotItmVOImpl row = (SlsQuotItmVOImpl)this.getSlsQuotItm2();
        Row currentRow = row.getCurrentRow();
        RowSetIterator itr = row.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            if (r != currentRow) {
                Object itmIdiO = r.getAttribute("ItmId");
                StringBuilder itmIdi =
                    (itmIdiO == null ? new StringBuilder("") : new StringBuilder(itmIdiO.toString()));
                if (itmIdi.toString().equals(itmId)) {
                    ret = 1;
                    break;
                }
            }
        }
        itr.closeRowSetIterator();
        return ret;
    }

    /**
     * Method to check if the current quotation is deletable or not
     * @return
     */
    public boolean checkQuotationDeletable() {
        if (this.getSlsQuotItm2().getFilteredRows("DocId",
                                                  this.getSlsQuot1().getCurrentRow().getAttribute("DocId").toString()).length >
            0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Method for resolving the El
     */
    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**
     * Container's getter for LOVItem1.
     * @return LOVItem1
     */
    public ViewObjectImpl getLOVItem1() {
        return (ViewObjectImpl)findViewObject("LOVItem1");
    }

    /**
     * Method to add itm
     * @param itmDesc
     * @param itmPrefix
     * @param itmGrpId
     * @param itmUom
     * @return
     */
    public StringBuffer callFunction_FN_INS_ITM(String itmDesc, String itmPrefix, String itmGrpId, String itmUom) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        //FN_INS_ITM (P_SLOC NUMBER, P_CLD  VARCHAR2, P_ORG   VARCHAR2, P_ITM_DESC  VARCHAR2,P_ITM_PREFIX VARCHAR2,P_GRP_ID  VARCHAR2, P_UOM VARCHAR2,P_USR  NUMBER)

        if (!(itmDesc.equals(null) || itmPrefix.equals(null) || itmGrpId.equals(null) || itmUom.equals(null))) {

            try {
                String s =
                    callStoredFunction(Types.VARCHAR, "APP.FN_INS_ITM(?,?,?,?,?,?,?,?)", new Object[] { slocId, cldId.toString(),
                                                                                                        orgId.toString(),
                                                                                                        itmDesc.toString(),
                                                                                                        itmPrefix,
                                                                                                        itmGrpId,
                                                                                                        itmUom,
                                                                                                        userId }).toString();
                return new StringBuffer(s);

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("#{bundle['MSG.1320']}"); //There have been an error in calling function 'FN_INS_ITM' !
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }

        }

        return null;
    }

    /**
     * Method to call function FN_INS_QUOTE_TR_LINE to all lines to txRuleLines
     * @param taxRuleId
     * @return
     */
    public void callFunction_FN_INS_QUOTE_TR_LINE(Integer taxRuleId) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        //FN_INS_QUOT_TR_LINES( P_SLOC_ID NUMBER,P_CLDID IN VARCHAR2,P_HO_ORGID IN VARCHAR2,P_ORG_ID VARCHAR2,
        //                       P_DOC_ID VARCHAR2,P_ITM_ID VARCHAR2,P_TAX_RULE_ID NUMBER,P_USER_ID NUMBER,
        //                       P_TAXABLE_AMOUNT NUMBER,P_TAX_RULE_FLG VARCHAR2,P_CONV_FCTR NUMBER)

        SlsQuotItmVORowImpl currentRow = (SlsQuotItmVORowImpl)this.getSlsQuotItm2().getCurrentRow();
        if (taxRuleId != null) {
            try {
                BigDecimal s =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_INS_QUOT_TR_LINES(?,?,?,?,?,?,?,?,?,?,?)",
                                                   new Object[] { slocId, cldId.toString(), hoOrgId.toString(),
                                                                  orgId.toString(),
                                                                  currentRow.getAttribute("DocId").toString(),
                                                                  currentRow.getAttribute("ItmId").toString(),
                                                                  taxRuleId, userId,
                                                                  currentRow.getAttribute("ItmAmtGsSp"),
                                                                  currentRow.getAttribute("TaxRuleFlg").toString(),
                                                                  currentRow.getAttribute("ConversionFactTrans") });
                ((SlsQuotTrVORowImpl)this.getSlsQuotTr1().getCurrentRow()).setTaxableAmt((Number)currentRow.getAttribute("ItmAmtGsSp"));
                ((SlsQuotTrVORowImpl)this.getSlsQuotTr1().getCurrentRow()).setTaxAmtSp((Number)new Number(s).round(AMT_DIGIT));

                SlsQuotVORowImpl rowQ = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();
                Number convFctr = rowQ.getCurrConvFctr();
                Number n = new Number(s).multiply(convFctr);
                SlsQuotTrVORowImpl rowTr = (SlsQuotTrVORowImpl)this.getSlsQuotTr1().getCurrentRow();
                rowTr.setTaxAmtBs(n);

                ((SlsQuotTrVORowImpl)this.getSlsQuotTr1().getCurrentRow()).setAttribute("TaxAmtBs",
                                                                                        (new Number(s).multiply((Number)((SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow()).getAttribute("CurrConvFctr")).round(AMT_DIGIT)));


            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("#{bundle['MSG.1321']}"); //There have been an error in calling function 'FN_INS_QUOTE_TR_LINE' !
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }

        }


    }

    /**
     * Method to call function FN_INS_QUOTE_TR_LINE to all lines to txRuleLines
     * @param taxRuleId
     * @return
     */
    public void callFunction_ForQuotationWiseTax_FN_INS_QUOTE_TR_LINE(Integer taxRuleId) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        RowSetIterator rsi = this.getSlsQuotItm2().createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            Row tr = null;
            Number taxableAmt = new Number(0);
            if (next.getAttribute("ItmId") != null) {
                SlsQuotTrVOImpl impl = this.getSlsQuotTr3();
                RowQualifier rQ = new RowQualifier(impl);
                rQ.setWhereClause("ItmId='" + next.getAttribute("ItmId").toString() + "'");
                Row[] filteredRows = impl.getFilteredRows(rQ);
                if (filteredRows.length > 0) {
                    tr = filteredRows[0];
                } else {
                    Row createRow = impl.createRow();
                    createRow.setAttribute("ItmId", next.getAttribute("ItmId"));


                    impl.insertRow(createRow);
                    tr = createRow;
                }

                tr.setAttribute("TaxRuleId", taxRuleId);
                tr.setAttribute("SrNo", 0);
                if (next.getAttribute("ItmAmtGsSp") != null) {
                    taxableAmt = (Number)next.getAttribute("ItmAmtGsSp");
                }
                if (taxRuleId != null) {
                    try {
                        SlsQuotVORowImpl currentRow = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();

                        BigDecimal s =
                            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_INS_QUOT_TR_LINES(?,?,?,?,?,?,?,?,?,?,?)",
                                                           new Object[] { slocId, cldId.toString(), orgId.toString(),
                                                                          hoOrgId.toString(), currentRow.getDocId(),
                                                                          next.getAttribute("ItmId").toString(),
                                                                          taxRuleId, userId, taxableAmt, "Y",
                                                                          currentRow.getCurrConvFctr() });

                        System.out.println("S :" + taxableAmt + s);

                        if (taxableAmt != null) {
                            tr.setAttribute("TaxableAmt", taxableAmt);
                        }
                        System.out.println(": between");
                        if (s != null) {
                            tr.setAttribute("TaxAmtSp", (Number)new Number(s).round(AMT_DIGIT));
                            tr.setAttribute("TaxAmtBs",
                                            ((new Number(s).multiply(currentRow.getCurrConvFctr()))).round(AMT_DIGIT));
                        }

                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("#{bundle['MSG.1322']}"); //There have been an error in calling function 'FN_INS_QUOTE_TR_LINE' in case of QuoataionWiseTax !
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                    System.out.println("Null");
                }


            }
        }
        rsi.closeRowSetIterator();
    }

    /**
     * Method to get max serial no of a new item
     * @return
     */
    public void calculateandSetSrNoInSlsItm() {
        Integer maxNo = 0;
        RowSetIterator createRowSetIterator = this.getSlsQuotItm2().createRowSetIterator(null);

        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            if (next != this.getSlsQuotItm2().getCurrentRow()) {
                if (maxNo < (Integer)next.getAttribute("SrNo")) {
                    maxNo = (Integer)next.getAttribute("SrNo");
                }
            }
        }
        if (maxNo == 0) {
            ((SlsQuotItmVORowImpl)(this.getSlsQuotItm2().getCurrentRow())).setAttribute("SrNo", 1);
        } else {
            ((SlsQuotItmVORowImpl)(this.getSlsQuotItm2().getCurrentRow())).setAttribute("SrNo", maxNo + 1);
        }
        createRowSetIterator.closeRowSetIterator();
    }

    /**
     * Method to get max serial no of a new tax rule
     * @return
     */
    public void calculateandSetSrNoInSlsItmTr() {
        Integer maxNo = 0;
        RowSetIterator createRowSetIterator = this.getSlsQuotTr1().createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            //System.out.println("Max"+maxNo);
            if (next != this.getSlsQuotTr1().getCurrentRow()) {
                if (maxNo < (Integer)next.getAttribute("SrNo")) {
                    maxNo = (Integer)next.getAttribute("SrNo");
                }
            }
        }
        if (maxNo == 0) {
            ((SlsQuotTrVORowImpl)(this.getSlsQuotTr1().getCurrentRow())).setAttribute("SrNo", 1);
        } else {
            ((SlsQuotTrVORowImpl)(this.getSlsQuotTr1().getCurrentRow())).setAttribute("SrNo", maxNo + 1);
        }
        createRowSetIterator.closeRowSetIterator();
    }

    /**
     * Method to get max serial no of a new tax rule
     * @return
     */
    public void calculateandSetSrNoTrForQuotationWiseTr() {
        ((SlsQuotTrVORowImpl)this.getSlsQuotTr3().getCurrentRow()).setSrNo(0);
    }

    /**
     * Method to get TaxRule rowcount to decide to create newRow or not
     * @return
     */
    public Integer checkIfTaxRuleExistOrNot() {
        System.out.println("ROWCOUNT: in v method" + this.getSlsQuotTr1().getRowCount());
        return this.getSlsQuotTr1().getRowCount();
    }

    /**
     * Method to get QuotatoinwiseTaxRule rowcount to decide to create newRow or not
     * @return
     */
    public Integer checkIfQuotationWiseTaxRuleExistOrNot() {
        //System.out.println("ROWCOUNT:" + this.getSlsQuotTr3().getRowCount());
        return this.getSlsQuotTr3().getRowCount();
    }

    /**
     * Container's getter for SlsQuotTr1.
     * @return SlsQuotTr1
     */
    public SlsQuotTrVOImpl getSlsQuotTr1() {
        return (SlsQuotTrVOImpl)findViewObject("SlsQuotTr1");
    }

    /**
     * Container's getter for ItemTOTrVL1.
     * @return ItemTOTrVL1
     */
    public ViewLinkImpl getItemTOTrVL1() {
        return (ViewLinkImpl)findViewLink("ItemTOTrVL1");
    }

    /**
     * Container's getter for SlsQuotTrLines1.
     * @return SlsQuotTrLines1
     */
    public ViewObjectImpl getSlsQuotTrLines1() {
        return (ViewObjectImpl)findViewObject("SlsQuotTrLines1");
    }

    /**
     * Container's getter for TrTOTrLinesVL1.
     * @return TrTOTrLinesVL1
     */
    public ViewLinkImpl getTrTOTrLinesVL1() {
        return (ViewLinkImpl)findViewLink("TrTOTrLinesVL1");
    }

    /**
     *  execute all viewObject
     */
    public void executeAllViews() {
        this.getSlsQuotItm2().executeQuery();
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotTrLines1().executeQuery();
    }

    /**
     *  execute taxRule and taxRuleLine
     */
    public void executeTrAndTrLines() {
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotTrLines1().executeQuery();
    }

    /**
     *  execute taxRule and taxRuleLine for QuotationWise tax
     */
    public void executeTrAndTrLinesForQuotationWiseTax() {
        this.getSlsQuotTr3().executeQuery();
        this.getSlsQuotTrLines2().executeQuery();
    }

    /**
     * Method to remove tax rule and taxlines from item
     */
    public void removeItmTaxRuleandTaxRuleLines() {
        //System.out.println("TRL1 "+this.getSlsQuotTrLines1().getRowCount());
        RowSetIterator createRowSetIteratorTrLines = this.getSlsQuotTrLines1().createRowSetIterator(null);
        while (createRowSetIteratorTrLines.hasNext()) {
            Row next = createRowSetIteratorTrLines.next();
            next.remove();
        }
        createRowSetIteratorTrLines.closeRowSetIterator();
        this.getSlsQuotTrLines1().executeQuery();
        //System.out.println("TRL2 "+this.getSlsQuotTrLines1().getRowCount());
        //System.out.println("TR1 "+this.getSlsQuotTr1().getRowCount());
        RowSetIterator createRowSetIteratorTr = this.getSlsQuotTr1().createRowSetIterator(null);
        while (createRowSetIteratorTr.hasNext()) {
            Row next = createRowSetIteratorTr.next();
            next.remove();
        }
        createRowSetIteratorTr.closeRowSetIterator();
        this.getSlsQuotTr1().executeQuery();
        //System.out.rintln("TR2 "+this.getSlsQuotTr1().getRowCount());
        this.getSlsQuotItm2().getCurrentRow().setAttribute("TaxRuleFlg", "N");
    }

    /**
     * Method to remove tax rule and taxlines from Quotation
     */
    public void removeQuotTaxRuleandTaxRuleLines() {
        //System.out.println("TRL1 "+this.getSlsQuotTrLines1().getRowCount());
        RowSetIterator createRowSetIteratorTrLines = this.getSlsQuotTrLines2().createRowSetIterator(null);
        while (createRowSetIteratorTrLines.hasNext()) {
            Row next = createRowSetIteratorTrLines.next();
            next.remove();
        }
        createRowSetIteratorTrLines.closeRowSetIterator();
        this.getSlsQuotTrLines1().executeQuery();
        //System.out.println("TRL2 "+this.getSlsQuotTrLines1().getRowCount());
        //System.out.println("TR1 "+this.getSlsQuotTr1().getRowCount());
        RowSetIterator createRowSetIteratorTr = this.getSlsQuotTr3().createRowSetIterator(null);
        while (createRowSetIteratorTr.hasNext()) {
            Row next = createRowSetIteratorTr.next();
            next.remove();
        }
        createRowSetIteratorTr.closeRowSetIterator();
        this.getSlsQuotTr3().executeQuery();
        //System.out.println("TR2 "+this.getSlsQuotTr1().getRowCount());

    }

    /**
     * check if item wise tax is applied correctly or not.
     * @return
     */
    public boolean isItmWiseAppliedCorrectly() {
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotItm2().executeQuery();
        RowSetIterator ITMRowSetIterator = this.getSlsQuotItm2().createRowSetIterator(null);
        while (ITMRowSetIterator.hasNext()) {
            //System.out.println("ITM ROW COUNT"+this.getSlsQuotItm2().getRowCount());
            Row next = ITMRowSetIterator.next();
            if (next.getAttribute("TaxRuleFlg").equals("Y")) {
                RowQualifier r = new RowQualifier(this.getSlsQuotTr2());
                r.setWhereClause("DocId = '" + next.getAttribute("DocId").toString() + "' and ItmId ='" +
                                 next.getAttribute("ItmId") + "'");
                Row[] filteredRows = this.getSlsQuotTr2().getFilteredRows(r);
                System.out.println("Lenght :" + filteredRows.length);

                if (filteredRows.length != 0) {
                    if (((Number)next.getAttribute("ItmAmtGsSp")).compareTo((Number)filteredRows[0].getAttribute("TaxableAmt")) !=
                        0) {
                        ITMRowSetIterator.closeRowSetIterator();
                        return false;
                    }
                } else if (filteredRows.length == 0) {
                    ITMRowSetIterator.closeRowSetIterator();
                    return false;
                }

            }
        }

        ITMRowSetIterator.closeRowSetIterator();
        return true;
    }

    /**
     * check if item wise tax is applied correctly or not.
     * @return
     */
    public boolean isOrderWiseAppliedCorrectly() {
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotItm2().executeQuery();
        SlsQuotVORowImpl row = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();
        Number taxableamt = new Number(0);
        Number taxamt = new Number(0);
        Number totval = new Number(0);

        Row[] filteredRows = this.getSlsQuotTr3().getAllRowsInRange();
        System.out.println("row count :" + filteredRows.length);
        if (row.getTaxRuleFlg().equals("O") && filteredRows.length != 0) {
            for (Row r : filteredRows) {
                taxableamt = ((Number)r.getAttribute("TaxableAmt")).add(taxableamt);
                System.out.println("Taxable Amt " + taxableamt);
            }

            System.out.println("Total Value is " + taxableamt);
            System.out.println("Quot Value is " + row.getTotalGrossAmtTrans());
            System.out.println("row.getQuotAmtSp()).compareTo(totval" +
                               ((Number)row.getTotalGrossAmtTrans()).compareTo(totval) + " row.getQuotAmtSp()=" +
                               row.getQuotAmtSp());
            if (((Number)row.getTotalGrossAmtTrans()).compareTo(taxableamt) != 0) {
                System.out.println("row.getQuotAmtSp()).compareTo(totval)");
                return false;
            }
        } else if (filteredRows.length == 0 && row.getTaxRuleFlg().equalsIgnoreCase("O")) {
            System.out.println("filteredRows.length" + filteredRows.length + " row.getTaxRuleFlg()" +
                               row.getTaxRuleFlg());
            return false;
        }


        System.out.println("returned true");
        return true;


    }

    /**
     *  Method to set initialBindVariables in searchPage
     */
    public void setInitialBindVariables() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        ViewObjectImpl checkFromPrfVo = this.getCheckFromPrfVo();
        checkFromPrfVo.setNamedWhereClauseParam("CldIdBind", cldId.toString());
        checkFromPrfVo.setNamedWhereClauseParam("SlocIdBind", slocId);
        checkFromPrfVo.setNamedWhereClauseParam("OrgIdBind", orgId.toString());
        checkFromPrfVo.executeQuery();

        searchQuotationVOImpl impl = (searchQuotationVOImpl)this.getsearchQuotation1();
        impl.setcldIdBind(cldId.toString());
        impl.setslocIdBind(slocId);
        impl.setorgIdBind(orgId.toString());
        impl.setquotNmBind("-1");
        impl.executeQuery();
        Integer curr = 0;
        try {
            curr =
(Integer)callStoredFunction(Types.INTEGER, "APP.PKG_APP.GET_ORG_DEF_CURR_BS1(?)", new Object[] { orgId.toString() });
            System.out.println("Curr id bs " + curr);
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage message =
                new FacesMessage("#{bundle['MSG.1323']}"); //There have been an error in calling function 'GET_TXN_ID' !
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }
        searchVOImpl searchVO = this.getsearch1();
        Row[] allRowsInRange = searchVO.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            allRowsInRange[0].setAttribute("CurrIdBs", curr);
        }
    }


    /**
     *  Method to set executeParams in quotation page
     */
    public void executeWithBindVariablesSlsQuoteVo() {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        //refereshAllVoOnCommit();
        StringBuffer Docid = null;
        searchQuotationVORowImpl r = ((searchQuotationVORowImpl)this.getsearchQuotation1().getCurrentRow());
        if (r != null) {
            Docid = new StringBuffer(r.getDocId());
        } else {
            try {
                Docid = new StringBuffer(resolvEl("#{pageFlowScope.DOC_ID}").toString());
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling taskflow 'sls-quotation-TF'!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }

        }
        this.getDBTransaction().rollback();
        SlsQuotVOImpl impl = (SlsQuotVOImpl)this.getSlsQuot1();
        impl.setCldIdBind(cldId.toString());
        impl.setSlocIdBind(slocId);
        impl.setOrgIdBind(orgId.toString());
        impl.setHoOrgIdBind(hoOrgId.toString());

        if (Docid != null) {
            impl.setDocIdBind(Docid.toString());
            impl.executeQuery();
            //System.out.println("DOCID : " + Docid);
        }

    }

    /**
     *  Method to set currentRow after save in quotation page
     */
    public void setCurrentRowInSlsQuoteVo(StringBuffer DocId) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        //refereshAllVoOnCommit();
        SlsQuotVOImpl impl = (SlsQuotVOImpl)this.getSlsQuot1();
        //System.out.println("DOCID : " + DocId);
        impl.setCldIdBind(cldId.toString());
        impl.setSlocIdBind(slocId);
        impl.setOrgIdBind(orgId.toString());
        impl.setHoOrgIdBind(hoOrgId.toString());
        impl.setDocIdBind(DocId.toString());
        impl.executeQuery();
    }

    public StringBuffer getSlsQuotCurrRowDocId() {
        SlsQuotVORowImpl currentRow = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();
        return new StringBuffer(currentRow.getDocId());
    }

    /**
     * Method to call function to insert scheme in SlsQuotItmSch table
     * @param schId
     */
    public void callFunction_FN_INS_QUOT_SCH_ITM(StringBuffer schId) {
        /* Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        //FN_INS_QUOT_SCHM_ITM (P_CLDID  VARCHAR2,P_SLOCID NUMBER,P_ORGID VARCHAR2,P_HO_ORGID VARCHAR2,
        //                     P_DOCID VARCHAR2,P_ITMID VARCHAR2,P_ITMUOM VARCHAR2,P_QTY NUMBER,P_SCH_ID VARCHAR2,
        //                     P_USR_ID NUMBER,P_USR_DT DATE)
        this.getSlsQuotItmSch1().executeQuery();
        try {
            SlsQuotItmVORowImpl currentRow = (SlsQuotItmVORowImpl)this.getSlsQuotItm2().getCurrentRow();
            Integer i =
                Integer.parseInt(callStoredFunction(Types.NUMERIC, "SLS.FN_INS_QUOT_SCHM_ITM(?,?,?,?,?,?,?,?,?,?,?)",
                                                    new Object[] { cldId.toString(), slocId, orgId.toString(),
                                                                   hoOrgId.toString(), currentRow.getDocId(),
                                                                   currentRow.getItmId(), currentRow.getItmUom(),
                                                                   currentRow.getQuotQty(), schId.toString(), userId,
                                                                   currentRow.getDocDt() }).toString());
            //System.out.println("Function called"+i);
            this.getSlsQuotItmSch1().executeQuery();
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_INS_QUOT_SCH_ITM' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        } */
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        Row currentRow = this.getSlsQuotItm2().getCurrentRow();
        StringBuffer itmId = new StringBuffer("");
        if (currentRow.getAttribute("ItmId") != null) {
            itmId = new StringBuffer(currentRow.getAttribute("ItmId").toString());
        }
        SlsQuotItmVORowImpl itmRow = (SlsQuotItmVORowImpl)this.getSlsQuotItm2().getCurrentRow();
        RowSet lovScheme = itmRow.getLOVSchemeVO1();
        /* System.out.println("RowCOunt Before: "+lovScheme.getEstimatedRowCount());
        lovScheme.setNamedWhereClauseParam("CldIdBind", cldId.toString());
        lovScheme.setNamedWhereClauseParam("SlocIdBind", slocId);
        lovScheme.setNamedWhereClauseParam("ItmIdBind", itmId.toString());
        lovScheme.setNamedWhereClauseParam("OrgIdBind", orgId.toString());
        lovScheme.executeQuery();
        System.out.println("RowCOunt After: "+lovScheme.getEstimatedRowCount());

        System.out.println("Schme Id is : "+schId);

         */
        int i = lovScheme.getRangeSize();
        lovScheme.setRangeSize(-1);
        Row[] allRowsInRange = lovScheme.getFilteredRows("SchmId", schId.toString());

        System.out.println("RowCOunt Returned: " + allRowsInRange.length);

        if (allRowsInRange.length >= 1) {
            Object discTyp = allRowsInRange[0].getAttribute("DiscType");
            Object discVal = allRowsInRange[0].getAttribute("DiscVal");
            String s = (discTyp == null ? "A" : discTyp.toString());
            Number v = (discVal == null ? new Number(0) : (Number)discVal);
            itmRow.setItmDiscTyp(s);
            itmRow.setItmDiscVal(v);
            System.out.println("Setting Discount val : " + v + " with type : " + s);
        } else {
            itmRow.setItmDiscTyp(null);
            itmRow.setItmDiscVal(null);

        }
        System.out.println("Into the scheme");
        lovScheme.setRangeSize(i);


    }

    /**
     *  Method to remove schemes from the SlsQuotItmSch
     */
    public void removeSchemeFromItem() {
        RowSetIterator createRowSetIteratorTrLines = this.getSlsQuotItmSch1().createRowSetIterator(null);
        //System.out.println("Rowcount itmScheme "+createRowSetIteratorTrLines.getRowCount());
        while (createRowSetIteratorTrLines.hasNext()) {

            Row next = createRowSetIteratorTrLines.next();
            next.remove();
        }
        createRowSetIteratorTrLines.closeRowSetIterator();
        this.getSlsQuotItmSch1().executeQuery();
    }

    /**
     *  Method to search on  searchQuotation on the basis of following params
     *
     */
    public void searchQuotationViewCriteria() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        searchQuotationVOImpl impl = (searchQuotationVOImpl)this.getsearchQuotation1();
        searchVORowImpl currentRow = (searchVORowImpl)this.getsearch1().getCurrentRow();
        impl.setslocIdBind(slocId);
        impl.setcldIdBind(cldId.toString());
        impl.setorgIdBind(orgId.toString());
        impl.seteoNmBind(currentRow.getEoName());
        impl.setquoteCurrIdBind(currentRow.getCurrIdTrans());
        impl.setquotFromDateBind(currentRow.getStartDateTrans());
        Timestamp dt = currentRow.getEndDateTrans();
        if (currentRow.getEndDateTrans() != null) {
            //dt = (Timestamp)currentRow.getEndDateTrans();
            Date date;
            try {
                date = dt.dateValue();
                date.setDate(date.getDate() + 1);
                System.out.println("Date is :" + date);
                dt = new Timestamp(date);
            } catch (SQLException e) {
            }
        }
        impl.setquotToDateBind(dt);
        impl.setquoteStatusBind(currentRow.getStatusTrans());
        impl.setquotPaymentModeBind(null);
        //impl.setquoteEoTypeBind(currentRow.getEoTypeTrans());
        impl.setquoteQuantityTopBind(currentRow.getTotQuantityTopTrans());
        impl.setquoteQuantityBottom(currentRow.getTotQuantityBottomTrans());
        impl.setquoteNoOfItmsTopBind(currentRow.getNoOfItmTopTrans());
        impl.setquoteNoOfItmsBottonBind(currentRow.getNoOfItmBottomTrans());
        impl.setquoteTotValueTopBind(currentRow.getTotValueTopTrans());
        impl.setquoteTotValueBottomBind(currentRow.getTotValueBottomTrans());
        impl.setquotNmBind(currentRow.getQuotNmTrans());

        impl.executeQuery();
    }

    /**
     * Method to reset searchQuotationView criteria
     */
    public void resetQuotationViewCriteria() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        searchQuotationVOImpl impl = (searchQuotationVOImpl)this.getsearchQuotation1();
        impl.setslocIdBind(-1);
        impl.setcldIdBind(cldId.toString());
        impl.setorgIdBind(orgId.toString());
        impl.seteoNmBind(null);
        impl.setquoteCurrIdBind(null);
        impl.setquotToDateBind(null);
        impl.setquotFromDateBind(null);
        impl.setquoteStatusBind(null);
        impl.setquoteEoTypeBind(null);
        impl.setquotToDateBind(null);
        impl.setquoteQuantityTopBind(null);
        impl.setquoteQuantityBottom(null);
        impl.setquoteNoOfItmsTopBind(null);
        impl.setquoteNoOfItmsBottonBind(null);
        impl.setquoteTotValueTopBind(null);
        impl.setquoteTotValueBottomBind(null);
        impl.setquotNmBind(null);

        //searchVOImpl currentRow = (searchVOImpl)this.getsearch1().getCurrentRow();
        //currentRow.setEoName(null);
        this.getsearch1().getCurrentRow().setAttribute("EoName", null);
        //  currentRow.setStartDateTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("StartDateTrans", null);
        // currentRow.setEndDateTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("EndDateTrans", null);
        // currentRow.setNoOfItmTopTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("NoOfItmTopTrans", null);
        //    currentRow.setNoOfItmBottomTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("NoOfItmBottomTrans", null);
        //  currentRow.setTotQuantityTopTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("TotQuantityTopTrans", null);
        // currentRow.setTotQuantityBottomTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("TotQuantityBottomTrans", null);
        // currentRow.setTotValueTopTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("TotValueTopTrans", null);
        //  currentRow.setTotValueBottomTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("TotValueBottomTrans", null);
        // currentRow.setStatusTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("StatusTrans", null);
        //  currentRow.setCurrIdTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("CurrIdTrans", null);
        //   currentRow.setQuotNmTrans(null);
        this.getsearch1().getCurrentRow().setAttribute("QuotNmTrans", null);
        this.getsearch1().executeQuery();
        impl.executeQuery();
    }

    /**
     * Method to call function FN_INS_QUOT_CALC to insert data in slsCalc and
     *        to call function GEN_DISP_DOC_ID to insert DOC_DISP_ID in slsQuot
     * @param DocId
     */
    public void callFunction_FN_INS_QUOT_CALC(StringBuffer DocId) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        System.out.println("\n..................came in impl..................\n");
        Integer fyId = 0;
        Integer currIdSp = 0;
        Integer currIdBs = 0;
        Number cRate = new Number(0);
        Row crow = this.getSlsQuot1().getCurrentRow();
        if (crow != null) {
            fyId = (Integer)crow.getAttribute("FyId");
            currIdSp = (Integer)crow.getAttribute("CurrIdSp");
            currIdBs = (Integer)crow.getAttribute("CurrIdBs");
            cRate = (Number)crow.getAttribute("CurrConvFctr");
            //System.out.println(currIdBs+" "+currIdSp+" "+cRate);
            //FN_INS_QUOT_CALC(P_SLOC NUMBER,P_HO_ORGID VARCHAR2,P_ORG VARCHAR2,P_DOC VARCHAR2,
            //P_USR NUMBER,P_AMDNO NUMBER,P_CURR_ID_SP NUMBER,P_CURR_ID_BS NUMBER,P_CONV_RATE NUMBER)
            //                                              p_sloc number,
            //                                             P_CLD VARCHAR2,
            //                                             p_HO_org varchar2,
            //                                             p_org varchar2,
            //                                             p_doc varchar2,
            //                                             P_USR NUMBER,
            //                                             p_AMDNO NUMBER default 0

            try {
                callStoredFunction(Types.NUMERIC, "SLS.FN_INS_QUOT_CALC(?,?,?,?,?,?,?,?,?,?)",
                                   new Object[] { slocId, cldId.toString(), hoOrgId.toString(), orgId.toString(),
                                                  DocId.toString(), userId, 0, currIdSp, currIdBs, cRate });
                //System.out.println("CALC");
                //GEN_DISP_DOC_ID(1,'0000','01',21502,'000B.01.01.53FE.0000.2CB319D89C6392A',NULL,'SLS$QUOT');
                // StringBuffer QUOTE_DOC_NM =
                //     new StringBuffer((callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)",
                //                                          new Object[] { slocId, cldId.toString(), orgId.toString(),
                //                                                         21502, DocId.toString(), null, "SLS$QUOT",
                //                                                         fyId })).toString());
                // System.out.println("generated Id is:  "+QUOTE_DOC_NM+" ----------------");
                // ((SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow()).setQuotId(QUOTE_DOC_NM.toString());
                this.getSLSQuotCalc1().executeQuery();
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_QUOT_CALC' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }


    }
    /*
     * Method for generation QuotationId. 20 march 2014
    */

    public void generateQuotId(StringBuffer DocId) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        Integer fyId = 0;
        Row crow = this.getSlsQuot1().getCurrentRow();

        if (((SlsQuotVORowImpl)crow).getQuotId() == null && crow != null) {
            fyId = (Integer)crow.getAttribute("FyId");
            // System.out.println("Came in If condition .. ... . ");
            try {
                System.out.println("Values which are going in the function are: " + slocId + " " + cldId + "  " +
                                   orgId + "  " + fyId);
                StringBuffer QUOTE_DOC_NM =
                    new StringBuffer((callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)",
                                                         new Object[] { slocId, cldId.toString(), orgId.toString(),
                                                                        21502, null, null, "SLS$QUOT",
                                                                        fyId })).toString());
                ((SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow()).setQuotId(QUOTE_DOC_NM.toString());
                System.out.println("The genearted Id is:   " + QUOTE_DOC_NM + "----------------");
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'GEN_DISP_DOC_ID' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
    }

    /**
     * Method to check if the item exists for a quotation.
     */
    public boolean isItemExistsForQuot() {
        ViewObjectImpl impl = this.getSlsQuot1();
        impl.getCurrentRow().getAttribute("TotalGrossAmtTrans");

        //System.out.println("itemrowcount :" + this.getSlsQuotItm2().getRowCount());
        if (this.getSlsQuotItm2().getRowCount() > 0) {
            return true;
        } else {
            return false;
        }

    }

    /**
     * Method to check if  any itemId is blank in the itemsLine
     * @return
     */
    public boolean isItemNmBlank() {

        RowSetIterator cr = this.getSlsQuotItm2().createRowSetIterator(null);
        while (cr.hasNext()) {
            SlsQuotItmVORowImpl next = (SlsQuotItmVORowImpl)cr.next();
            if (next.getItmId() == null) {
                cr.closeRowSetIterator();
                return true;
            } else {
                cr.closeRowSetIterator();
                return false;
            }
        }
        return false;


    }

    /**
     * Method to get attributes of current row of SlsItem
     * @param attribute
     * @return
     */
    public Number getItemCurrentRowAttribute(StringBuffer attribute) {
        return (Number)this.getSlsQuotItm2().getCurrentRow().getAttribute(attribute.toString());
    }

    /**
     * Method to validate Quotation discount value.
     * @param discVal
     * @return
     */
    public boolean isQuotDiscValueValid(Number discVal) {
        Number n = new Number(0);
        SlsQuotVORowImpl row = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();
        RowSetIterator createRowSetIterator = null;
        try {
            createRowSetIterator = this.getSlsQuotItm2().createRowSetIterator(null);
            while (createRowSetIterator.hasNext()) {
                Row next = createRowSetIterator.next();
                n = n.add((Number)next.getAttribute("ItmAmtSp"));
            }
            if (row.getTaxRuleFlg().equalsIgnoreCase("O")) {
                if (row.getTaxAfterDiscFlg().equalsIgnoreCase("N")) {
                    n = n.add(row.getTotalTaxAmount());
                }
            }
            createRowSetIterator.closeRowSetIterator();
        } catch (Exception e) {

            //System.out.println("new number returns to zero");
        } finally {
            createRowSetIterator.closeRowSetIterator();
        }
        if (n.compareTo(new Number(0)) == 0) {
            return true;
        } else if (n.compareTo(new Number(discVal)) == -1) {
            return false;
        } else {
            return true;
        }

    }

    /**
     * Method to Create and Insert a row in a SlsQuotTnc1 with TncId
     * @param TnCId
     */
    public void createInsertRowAndSetVarsInSlsTnC1(Integer TnCId) {
        SlsQuotTncVORowImpl row = (SlsQuotTncVORowImpl)this.getSlsQuotTnc1().createRow();
        System.out.println("Tnc Id ");
        row.setTncId(TnCId);
        this.getSlsQuotTnc1().insertRow(row);
    }

    public boolean isSelectedTnCAlreadyAdded(Integer TnCId) {
        RowSetIterator createRowSetIterator = this.getSlsQuotTnc1().createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            Integer i = (Integer)next.getAttribute("TncId");
            if (i == TnCId) {
                createRowSetIterator.closeRowSetIterator();
                return true;
            }
        }
        createRowSetIterator.closeRowSetIterator();
        return false;
    }

    /**
     * Check total item value precision
     * @param total
     * @return
     */
    public boolean isItemTotalPrecisionOk(Number m) {
        SlsQuotItmVORowImpl row = (SlsQuotItmVORowImpl)this.getSlsQuotItm2().getCurrentRow();
        Number n = ((Number)m.mul(row.getItmPrice())).multiply(row.getConversionFactTrans());
        n = n.add(row.getTaxAmountTrans());
        boolean b = isPrecisionValid(26, 6, n);
        return b;
    }

    /**
     * Method to check precision
     * @param precision
     * @param scale
     * @param total
     * @return
     */
    public Boolean isPrecisionValid(Integer precision, Integer scale, Number total) {
        JboPrecisionScaleValidator vc = new JboPrecisionScaleValidator();
        vc.setPrecision(precision);
        vc.setScale(scale);
        return vc.validateValue(total);
    }

    public Integer call_function_FN_GET_EO_LATEST_PRICE(StringBuffer itmNm) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        /* FUNCTION FN_GET_EO_LATEST_PRICE(P_CLDID  VARCHAR2,P_SLOCID NUMBER,P_ORGID VARCHAR2,P_HO_ORGID VARCHAR2,
                                           P_EO_ID VARCHAR2,P_ITMID VARCHAR2,P_USR_ID NUMBER,P_USR_DT DATE) */

        // To avoid function call in case of prospect
        Row currentRow = this.getSlsQuot1().getCurrentRow();
        if (true) { //currentRow != null && (Integer)currentRow.getAttribute("EoCatg") == 68){
            Row[] row_2 = this.getLOVItem1().getFilteredRows("ItmDesc", itmNm.toString());
            if (row_2.length > 0) {
                itmNm = new StringBuffer(row_2[0].getAttribute("ItmId").toString());
            }
            if (null != (Object)itmNm) {
                System.out.println("FunctionCalled");
                SlsQuotVORowImpl row = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();
                SlsQuotItmVORowImpl irow = (SlsQuotItmVORowImpl)this.getSlsQuotItm2().getCurrentRow();
                Number conv = new Number(1);
                System.out.println(row.getCurrIdSp() + "--->" + row.getCurrConvFctr());
                if (row.getCurrConvFctr() != null) {
                    conv = row.getCurrConvFctr();
                }

                ////////////////////////////////////////////////////////////////////////////////////////////////////////
                if (checkPolicyApplied().toString().equals("Y")) {
                    _log.info("Price from Price Policy.");
                    Number price = new Number(0);
                    BigDecimal policyPrice =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)",
                                                       new Object[] { cldId.toString(), slocId, hoOrgId.toString(),
                                                                      orgId.toString(), row.getEoId(),
                                                                      itmNm.toString(), "SO" });

                    policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                    _log.info("Policy Price is : " + policyPrice);
                    // policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                    if (policyPrice.compareTo(new BigDecimal(0)) == 0 ||
                        policyPrice.compareTo(new BigDecimal(-2)) == 0) {

                        try {
                            BigDecimal s =
                                (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                               new Object[] { cldId.toString(), slocId,
                                                                              orgId.toString(), hoOrgId.toString(),
                                                                              row.getEoId(), itmNm.toString(),
                                                                              row.getUsrIdCreateDt(), userId,
                                                                              new Timestamp(System.currentTimeMillis()),
                                                                              row.getCurrIdSp(), conv });
                            System.out.println("S : " + s);
                            Number amt = new Number(s);
                            Number convFctr = row.getCurrConvFctr();

                            if (amt.compareTo(new Number(0)) == 1) {
                                irow.setItmPrice(amt);
                                return 1;
                            } else if (amt.compareTo(new Number(-1)) == 0) {
                                irow.setItmPrice(new Number(0));
                                return 0;
                            } else {
                                /* convFctr = (Number)amt.div(convFctr);
                                System.out.println("Price :" + convFctr);
                                irow.setItmPrice(convFctr); */
                                return 0;
                            }

                        } catch (Exception e) {
                            FacesMessage message =
                                new FacesMessage("There have been an error in calling function 'FN_GET_EO_LATEST_PRICE' !");
                            message.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message);
                            e.printStackTrace();
                        }


                    } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                        return -1;
                    } else {
                        try {
                            price = new Number(policyPrice);
                            price = price.divide(conv);
                            price = (Number)price.round(getAmtDgt());
                            irow.setItmPrice(price);
                            return 0;
                        } catch (SQLException e) {
                        }
                    }

                } else {
                    _log.info("Price from EO Price.");
                    try {


                        BigDecimal s =
                            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                           new Object[] { cldId.toString(), slocId, orgId.toString(),
                                                                          hoOrgId.toString(), row.getEoId(),
                                                                          itmNm.toString(), row.getUsrIdCreateDt(),
                                                                          userId,
                                                                          new Timestamp(System.currentTimeMillis()),
                                                                          row.getCurrIdSp(), conv });
                        System.out.println("S : " + s);
                        Number amt = new Number(s);
                        Number convFctr = row.getCurrConvFctr();

                        if (amt.compareTo(new Number(0)) == 1) {
                            irow.setItmPrice(amt);
                            return 1;
                        } else if (amt.compareTo(new Number(-1)) == 0) {
                            irow.setItmPrice(new Number(0));
                            return 0;
                        } else {
                            /* convFctr = (Number)amt.div(convFctr);
                            System.out.println("Price :" + convFctr);
                            irow.setItmPrice(convFctr); */
                            return 0;
                        }

                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'FN_GET_EO_LATEST_PRICE' !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }


                }

            }
        }
        return 0;
    }

    /**
     * Method to populate the items from the enquiry
     * @param EnqNo
     */
    public void call_function_FN_ENQ_TO_QUOT(StringBuffer EnqNo) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        SlsQuotVORowImpl currentRow = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("EoCatg") != null &&
            currentRow.getAttribute("EoId") != null) {
            StringBuffer enqDocId = null;
            Row[] row_2 = this.getLOVEnquiry1().getFilteredRows("DispDocId", EnqNo.toString());
            if (row_2.length > 0) {
                enqDocId = new StringBuffer(row_2[0].getAttribute("DocId").toString());
            }
            if (null != (Object)enqDocId) {
                //System.out.println("FunctionCalled");
                SlsQuotVORowImpl row = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();
                SlsQuotItmVORowImpl irow = (SlsQuotItmVORowImpl)this.getSlsQuotItm2().getCurrentRow();
                /*  FN_ENQ_TO_QUOT (p_slocid in number,P_CLDID IN VARCHAR2,p_orgid  in varchar2,
                                   p_ho_orgid  in varchar2,p_ENQ_id in varchar2 ,p_doc_id in varchar2,p_doc_dt in date
                                                p_usr_id in number) */
                try {
                    String s =
                        callStoredFunction(Types.VARCHAR, "SLS.FN_ENQ_TO_QUOT(?,?,?,?,?,?,?,?)", new Object[] { slocId,
                                                                                                                cldId.toString(),
                                                                                                                orgId.toString(),
                                                                                                                hoOrgId.toString(),
                                                                                                                enqDocId.toString(),
                                                                                                                row.getDocId(),
                                                                                                                row.getDocDt(),
                                                                                                                userId }).toString();
                    //System.out.println("Rowcount : "+this.getSlsQuotItm2().getRowCount()+" return :"+s);
                    //getDBTransaction().postChanges();
                    //this.getSlsQuotItm2().clearCache();
                    //this.getSlsQuotItm2().executeQuery();
                    //System.out.println("Rowcount : "+this.getSlsQuotItm2().getRowCount());
                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'FN_ENQ_TO_QUOT' !");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Methos to set items on the basis of enquiry
     * @param EnqNo
     */
    public void setItemsOnTheBasisOfEnquiry(StringBuffer EnqNo) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        System.out.println("Enquiry no is:    " + EnqNo + "");
        StringBuffer enqDocId = null;
        //Row[] row_2 = this.getLOVEnquiry1().getFilteredRows("DispDocId", EnqNo.toString());
        ViewObjectImpl enquiry1 = this.getLOVEnquiry1();
        RowQualifier r1 = new RowQualifier(enquiry1);
        r1.setWhereClause("SlocId = " + slocId + " and OrgId = '" + orgId.toString() + "' and HoOrgId = '" +
                          hoOrgId.toString() + "' and CldId = '" + cldId.toString() + "' and DispDocId = '" +
                          EnqNo.toString() + "'");
        Row[] row_2 = enquiry1.getFilteredRows(r1);

        if (row_2.length > 0) {
            enqDocId = new StringBuffer(row_2[0].getAttribute("DocId").toString());
            System.out.println("enqDocId is:   " + enqDocId);
        }
        //enqDocId = this.getSlsQuot1().getCurrentRow().getAttribute("EnqId").toString();
        System.out.println("enqDocId is:   " + enqDocId);
        if (null != (Object)enqDocId) {
            ViewObjectImpl impl = this.getInquirySlsOppItm1();
            RowQualifier r = new RowQualifier(impl);
            //String s = "SlocId = "+slocId+" and OrgId = '"+orgId.toString()+"' and HoOrgId = '"+hoOrgId.toString()+"' and CldId = '"+cldId.toString()+"' and DocId = '"+enqDocId.toString()+"'";
            //System.out.println(s);
            r.setWhereClause("SlocId = " + slocId + " and OrgId = '" + orgId.toString() + "' and HoOrgId = '" +
                             hoOrgId.toString() + "' and CldId = '" + cldId.toString() + "' and DocId = '" +
                             enqDocId.toString() + "'");

            System.out.println("Exptression String are : " + r.getExprStr());
            Row[] filteredRows = impl.getFilteredRows(r);
            System.out.println("total no  of rows are:  " + filteredRows.length + "-----------------\"\\n\\n\\n\\n\"");
            SlsQuotItmVOImpl itm = (SlsQuotItmVOImpl)this.getSlsQuotItm2();
            RowSetIterator createRowSetIterator = itm.createRowSetIterator(null);
            //System.out.println("No of rows : "+createRowSetIterator.getRowCount());
            while (createRowSetIterator.hasNext()) {
                //System.out.println("Removed");
                createRowSetIterator.next().remove();
            }

            int SrNo = 1;
            for (Row f : filteredRows) {
                //System.out.println("Added!");
                Row rw = itm.createRow();
                rw.setAttribute("ItmId", f.getAttribute("ItmId"));
                rw.setAttribute("ItmPrice", f.getAttribute("ItmPrice"));
                rw.setAttribute("QuotQty", f.getAttribute("ItmQty"));
                rw.setAttribute("ItmUom", f.getAttribute("ItmUom"));
                rw.setAttribute("SrNo", SrNo);
                rw.setAttribute("ItmAmtSp", f.getAttribute("ItmAmtSp"));
                itm.insertRow(rw);
                SrNo = SrNo + 1;
            }
            itm.executeQuery();
        }
        System.out.println("Total : " + this.getSlsQuot1().getCurrentRow().getAttribute("QuoteTotalItemValue"));

    }

    /**
     * Method to handle exception taskflow
     */
    public void exceptionHandler() {
        FacesMessage message = new FacesMessage("There have been an error! Contact Ess!!");
        message.setSeverity(FacesMessage.SEVERITY_ERROR);
        FacesContext.getCurrentInstance().addMessage(null, message);
    }

    /**
     * Container's getter for search1.
     * @return search1
     */
    public searchVOImpl getsearch1() {
        return (searchVOImpl)findViewObject("search1");
    }

    /**
     * Container's getter for SlsQuotTr2.
     * @return SlsQuotTr2
     */
    public SlsQuotTrVOImpl getSlsQuotTr2() {
        return (SlsQuotTrVOImpl)findViewObject("SlsQuotTr2");
    }

    /**
     * Container's getter for searchQuotation1.
     * @return searchQuotation1
     */
    public ViewObjectImpl getsearchQuotation1() {
        return (ViewObjectImpl)findViewObject("searchQuotation1");
    }

    /**
     * Container's getter for SlsQuotItmSch1.
     * @return SlsQuotItmSch1
     */
    public ViewObjectImpl getSlsQuotItmSch1() {
        return (ViewObjectImpl)findViewObject("SlsQuotItmSch1");
    }

    /**
     * Container's getter for ItemToSchemeVL1.
     * @return ItemToSchemeVL1
     */
    public ViewLinkImpl getItemToSchemeVL1() {
        return (ViewLinkImpl)findViewLink("ItemToSchemeVL1");
    }

    /**
     * Container's getter for SlsQuotTr3.
     * @return SlsQuotTr3
     */
    public SlsQuotTrVOImpl getSlsQuotTr3() {
        return (SlsQuotTrVOImpl)findViewObject("SlsQuotTr3");
    }

    /**
     * Container's getter for QuotTOTrVL1.
     * @return QuotTOTrVL1
     */
    public ViewLinkImpl getQuotTOTrVL1() {
        return (ViewLinkImpl)findViewLink("QuotTOTrVL1");
    }

    /**
     * Container's getter for SlsQuotTrLines2.
     * @return SlsQuotTrLines2
     */
    public ViewObjectImpl getSlsQuotTrLines2() {
        return (ViewObjectImpl)findViewObject("SlsQuotTrLines2");
    }

    /**
     * Container's getter for TrTOTrLinesVL2.
     * @return TrTOTrLinesVL2
     */
    public ViewLinkImpl getTrTOTrLinesVL2() {
        return (ViewLinkImpl)findViewLink("TrTOTrLinesVL2");
    }


    /**
     * Container's getter for SlsQuotTnc1.
     * @return SlsQuotTnc1
     */
    public ViewObjectImpl getSlsQuotTnc1() {
        return (ViewObjectImpl)findViewObject("SlsQuotTnc1");
    }

    /**
     * Container's getter for QuotTOTnCVL1.
     * @return QuotTOTnCVL1
     */
    public ViewLinkImpl getQuotTOTnCVL1() {
        return (ViewLinkImpl)findViewLink("QuotTOTnCVL1");
    }

    /**
     * Container's getter for TnC1.
     * @return TnC1
     */
    public TnCVOImpl getTnC1() {
        return (TnCVOImpl)findViewObject("TnC1");
    }

    /**
     * Container's getter for LOVEnquiry1.
     * @return LOVEnquiry1
     */
    public ViewObjectImpl getLOVEnquiry1() {
        return (ViewObjectImpl)findViewObject("LOVEnquiry1");
    }

    /**
     * Container's getter for InquirySlsOppItm1.
     * @return InquirySlsOppItm1
     */
    public ViewObjectImpl getInquirySlsOppItm1() {
        return (ViewObjectImpl)findViewObject("InquirySlsOppItm1");
    }

    /**
     * Container's getter for SLSQuotCalc1.
     * @return SLSQuotCalc1
     */
    public ViewObjectImpl getSLSQuotCalc1() {
        return (ViewObjectImpl)findViewObject("SLSQuotCalc1");
    }

    /**
     * Container's getter for QuoteTOCalcVL1.
     * @return QuoteTOCalcVL1
     */
    public ViewLinkImpl getQuoteTOCalcVL1() {
        return (ViewLinkImpl)findViewLink("QuoteTOCalcVL1");
    }

    /**
     * Container's getter for CheckFromPrfVo.
     * @return CheckFromPrfVo
     */
    public ViewObjectImpl getCheckFromPrfVo() {
        return (ViewObjectImpl)findViewObject("CheckFromPrfVo");
    }

    /**
     * Method to check if opportunity is to be used in the form or not
     * @return
     */
    public StringBuffer isOpportunityUseAllowed() {
        ViewObjectImpl cprf = this.getCheckFromPrfVo();
        RowSetIterator rc = cprf.createRowSetIterator(null);
        while (rc.hasNext()) {
            Row next = rc.next();
            if (next != null) {
                Object ck = next.getAttribute("UseOppEntry");
                if (ck != null) {
                    return new StringBuffer(ck.toString());
                } else {
                    return new StringBuffer("N");
                }
            }
        }
        return new StringBuffer("Y");
    }

    /**
     * Method to check if opportunity is to be used in the form or not
     * @return
     */
    public StringBuffer isToleranceUseAllowed() {
        ViewObjectImpl cprf = this.getCheckFromPrfVo();
        RowSetIterator rc = cprf.createRowSetIterator(null);
        while (rc.hasNext()) {
            Row next = rc.next();
            if (next != null) {
                Object ck = next.getAttribute("ChkDlvQtyTlrnc");
                if (ck != null) {
                    return new StringBuffer(ck.toString());
                } else {
                    return new StringBuffer("N");
                }
            }
        }
        return new StringBuffer("Y");
    }

    /**
     * Method to validate the fromquantity
     * @param val
     * @return
     */
    public boolean isSearchFromQuantityValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("TotQuantityTopTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the toquantity
     * @param val
     * @return
     */
    public boolean isSearchToQuantityValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("TotQuantityBottomTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) < 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the fromTotalAmount
     * @param val
     * @return
     */
    public boolean isSearchFromTotalAmountValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("TotValueTopTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the ToTotalAmount
     * @param val
     * @return
     */
    public boolean isSearchToTotalAmountValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("TotValueBottomTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) < 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the fromTotalNoOfItem
     * @param val
     * @return
     */
    public boolean isSearchFromNoOfItemValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("NoOfItmTopTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the fromTotalNoOfItem
     * @param val
     * @return
     */
    public boolean isSearchToNoOfItemValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("NoOfItmBottomTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) < 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate tolerance quantity
     * @param val
     * @return
     */
    public Integer isToleranceQuantityValid(Number val) {
        //System.out.println("valuse :"+val);
        Row currentRow = this.getSlsQuotItm2().getCurrentRow();
        if (currentRow != null) {
            Object typ = currentRow.getAttribute("TlrncQtyType");
            //System.out.println("typ:"+typ);
            if (typ != null) {
                //System.out.println("typ:"+typ + " "+("A").equalsIgnoreCase(typ.toString()));
                if (("A").equalsIgnoreCase(typ.toString())) {
                    Number qty = new Number(0);
                    qty = (Number)currentRow.getAttribute("QuotQty");
                    if (val.compareTo(qty) > 0) {
                        return 1;
                    }
                } else {
                    //System.out.println("In else");
                    if (val.compareTo(new Number(100)) > 0) {
                        return 2;
                    }
                }
            }
        }

        return 3;
    }

    /**
     * Count no of rows in item
     * @return
     */
    public Integer isAlertApplicable() {
        //System.out.println("Row count :"+this.getSlsQuotItm2().getRowCount());
        return this.getSlsQuotItm2().getRowCount();
    }

    /**
     * Method to return quotation Amount
     * @return
     */
    public Number getQuotationAmount() {
        Number n = new Number(0);
        Row currentRow = this.getSlsQuot1().getCurrentRow();
        if (currentRow != null) {
            n = (Number)currentRow.getAttribute("QuoteTotalValue");
        }
        //System.out.println("Amount : "+n);
        return n;
    }

    /**
     * Method returns the userId of the user on which the SalesQuot is pending
     * @return
     */
    public Integer slsQuotPendingAt() {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        Object obj = null;
        StringBuffer DocIdTxn = new StringBuffer(this.getSlsQuot1().getCurrentRow().getAttribute("DocId").toString());
        //System.out.println("DOC_ID TXN : "+DocIdTxn);
        try {
            obj =
callStoredFunction(Types.INTEGER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { slocId, cldId.toString(),
                                                                                    orgId.toString(), 21502,
                                                                                    DocIdTxn.toString(), 0 });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.GET_DOC_WF_CUR_USR' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        Integer usrId = 0;
        if (obj != null) {
            usrId = (Integer)obj;
        }

        //System.out.println("DOC PENDING AT USER ID : "+usrId);
        return usrId;

    }

    /**
     * Method returns WFID attached to the document.
     * @return
     */

    public StringBuffer getWfIdAttachedWithTheDoc() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        Object obj = "";
        try {
            obj =
callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] { slocId, cldId.toString(),
                                                                             orgId.toString(), 21502, 0 });
            //System.out.println("WF_ID WITH THE DOC :"+obj.toString());

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.GET_WF_ID' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        if (obj == null)
            return null;
        return new StringBuffer(obj.toString());
    }

    /**
     * Method that returns the level of the current user
     * @param WfId
     * @return
     */
    public Integer getUsrLvl(StringBuffer WfId) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        //System.out.println("WFID  :"+WfId);
        Integer lvl = 0;
        try {
            lvl =
(Integer)callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { slocId,
                                                                                                 cldId.toString(),
                                                                                                 orgId.toString(),
                                                                                                 userId,
                                                                                                 WfId.toString(),
                                                                                                 new Integer("21502"),
                                                                                                 0 });
            //System.out.println("LEVEL :"+lvl);
        } catch (Exception e) {
            lvl = -1;
            /* FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.GET_USR_LEVEL' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace(); */
        }

        return lvl;
    }

    /**
     * Method inserts a record in insTxn
     * @param WfId
     * @param level
     * @return
     */
    public Integer insIntoTxn(StringBuffer WfId, Integer level) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        Integer result = -3;
        try {
            StringBuffer docId = new StringBuffer(this.getSlsQuot1().getCurrentRow().getAttribute("DocId").toString());
            result =
                    (Integer)callStoredFunction(Types.INTEGER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { slocId,
                                                                                                                               cldId.toString(),
                                                                                                                               orgId.toString(),
                                                                                                                               21502,
                                                                                                                               0,
                                                                                                                               WfId.toString(),
                                                                                                                               docId.toString(),
                                                                                                                               userId,
                                                                                                                               userId,
                                                                                                                               level,
                                                                                                                               level,
                                                                                                                               "I",
                                                                                                                               "A",
                                                                                                                               0,
                                                                                                                               "S" });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.INS_TXN' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        return result;
    }

    public void functionCallOnApprovalFromWorkFlow() {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        StringBuffer returnParam = new StringBuffer(resolvEl("#{pageFlowScope.RETURN_FROM_WF}").toString());
        System.out.println("Return value : " + returnParam);
        System.out.println("RETURN PARAM :" + returnParam);
        Integer result;
        if (returnParam != null && returnParam.toString().equalsIgnoreCase("F")) {
            this.getSlsQuot1().getCurrentRow().setAttribute("QuotMode", 317);
            this.getDBTransaction().commit();
        } else if (returnParam != null && returnParam.toString().equalsIgnoreCase("A")) {
            Row currentRow = this.getSlsQuot1().getCurrentRow();
            System.out.println("_______1");
            if (currentRow.getAttribute("EnqId") != null) {
                System.out.println("_______2" + currentRow.getAttribute("EnqId"));
                if (!currentRow.getAttribute("EnqId").toString().equals("")) {
                    System.out.println("_______3");
                    try {
                        //SLS.FN_UPDATE_OPP_STAT (P_CLDID  VARCHAR2,P_SLOCID NUMBER,P_ORGID VARCHAR2,P_OPP_ID VARCHAR2)
                        Integer retu =
                            (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_OPP_STAT(?,?,?,?,?)", new Object[] { cldId.toString(),
                                                                                                                           slocId,
                                                                                                                           orgId.toString(),
                                                                                                                           currentRow.getAttribute("EnqId").toString(),
                                                                                                                           "S" });
                        System.out.println("return  :" + retu + " value for function:  " +
                                           currentRow.getAttribute("EnqId").toString());
                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling method 'SLS.FN_UPDATE_OPP_STAT' !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                }
            }
            this.getSlsQuot1().getCurrentRow().setAttribute("QuotStat", 319);
            this.getSlsQuot1().getCurrentRow().setAttribute("QuotMode", 314);
            this.getDBTransaction().commit();
        }

    }

    /**
     *  Cancel Quotation
     */
    public void cancelQuotation() {
        Row currentRow = this.getSlsQuot1().getCurrentRow();
        currentRow.setAttribute("QuotStat", 322);
        //this.getSlsQuot1().getCurrentRow().setAttribute("QuotMode", 314);
        Object attribute = currentRow.getAttribute("QuotBasis");
        if (attribute != null && attribute.toString().equalsIgnoreCase("E")) {
            Integer retu =
                (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_OPP_STAT(?,?,?,?,?)", new Object[] { currentRow.getAttribute("CldId").toString(),
                                                                                                               Integer.parseInt(currentRow.getAttribute("SlocId").toString()),
                                                                                                               currentRow.getAttribute("OrgId").toString(),
                                                                                                               currentRow.getAttribute("EnqId").toString(),
                                                                                                               "C" });
            System.out.println("return  :" + retu + " value for function:  " +
                               currentRow.getAttribute("EnqId").toString());
        }
        this.getDBTransaction().commit();
    }

    /**
     * Is user eligible of canceling quotation
     * @return
     */
    public boolean isUserEligibleToCancelSQuotation() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        try {
            /*
            slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
            orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
            hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}")); */


            StringBuffer attachedWithTheDoc = getWfIdAttachedWithTheDoc();
            //FUNCTION GET_USR_LEVEL (P_SLOCID NUMBER, P_CLDID VARCHAR2, P_ORGID VARCHAR2, P_USR_ID NUMBER , P_WF_ID VARCHAR ,P_DOC_ID NUMBER)
            //FUNCTION GET_DOC_WF_TOP_LVL(P_SLOCID NUMBER, P_CLDID VARCHAR2, P_ORGID VARCHAR2, P_DOCID NUMBER)
            Integer level =
                (Integer)callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { slocId,
                                                                                                                 cldId.toString(),
                                                                                                                 orgId.toString(),
                                                                                                                 userId,
                                                                                                                 attachedWithTheDoc.toString(),
                                                                                                                 21502,
                                                                                                                 0 });
            Integer wfTopLevel =
                (Integer)callStoredFunction(Types.INTEGER, "APP.WF_GET_DOC_TOP_LVL(?,?,?,?,?)", new Object[] { slocId,
                                                                                                               cldId.toString(),
                                                                                                               orgId.toString(),
                                                                                                               21502,
                                                                                                               0 });

            System.out.println("USER LEVEL :" + level + " TOP_LEVEL :" + wfTopLevel);
            if (level == wfTopLevel) {
                //System.out.println("Return true at AM");
                return true;
            }
        } catch (Exception e) {
            /*  FacesMessage message =
                new FacesMessage("There have been an error in calling method 'isUserEligibleToCancelQuotation' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message); */
            e.printStackTrace();
            return false;
        }
        return false;
    }

    public void amendFUNCTION() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        Row currentRow = this.getSlsQuot1().getCurrentRow();
        if (currentRow != null) {
            // P_CLDID IN VARCHAR2,p_HOorgid  in varchar2,p_slocid in number,p_orgid  in varchar2,p_doc_id in varchar2,p_usr_id in number,p_usr_dt date,
            //        P_AMD_NO VARCHAR2,P_AMD_DT DATE
            String doc = (String)currentRow.getAttribute("DocId");
            System.out.println("DocIDc :" + doc);
            Timestamp dt = (Timestamp)currentRow.getAttribute("UsrIdCreateDt");
            String amndNum = (String)currentRow.getAttribute("AmdNo");
            Integer ret =
                (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_AMD_QUOT(?,?,?,?,?,?,?,?,?)", new Object[] { cldId.toString(),
                                                                                                                hoOrgId.toString(),
                                                                                                                slocId,
                                                                                                                orgId.toString(),
                                                                                                                doc,
                                                                                                                userId,
                                                                                                                dt,
                                                                                                                amndNum,
                                                                                                                new Timestamp(System.currentTimeMillis()) });
            Integer i = Integer.parseInt(amndNum);
            //System.out.println("Return from amd : "+ret);
            currentRow.setAttribute("QuotStat", 320);
            currentRow.setAttribute("QuotMode", 315);
            currentRow.setAttribute("AmdNo", i + 1);
            //this.setQuotStat(320);
            //this.setQuotMode(313);

        }

    }

    public void refereshAllVoOnCommit() {
        this.getSlsQuot1().executeQuery();
        this.getSlsQuotItm2().executeQuery();
        this.getSlsQuotItmSch1().executeQuery();
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotTrLines1().executeQuery();
        this.getSlsQuotTnc1().executeQuery();
        this.getSlsQuotTr3().executeQuery();
        this.getSlsQuotTrLines2().executeQuery();
        this.getSLSQuotCalc1().executeQuery();
        System.out.println("WExecuted");
    }

    /**
     *Generate Report
     *
     * @param filePath
     */

    public void generateReport(String quotDocId, String filePath) {
        System.out.println(quotDocId + "   --  " + filePath);
        System.out.println("Inside Am");

        try {

            Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            Row currPO = this.getSlsQuot1().getCurrentRow();
            String docIdTxn = currPO.getAttribute("DocId").toString();
            System.out.println("docIdTxn :" + docIdTxn);
            Object fyId = currPO.getAttribute("FyId");

            String DocId = quotDocId;
            PreparedStatement st = null;
            st = this.getDBTransaction().createPreparedStatement("select 1 from dual", 0);
            Connection conn = null;
            conn = st.getConnection();
            ResultSet res = null;

            InputStream input = new FileInputStream(new File("D:/Report/Sales_Quot_Status.jrxml"));

            JasperDesign design = JRXmlLoader.load(input);
            JasperReport report = JasperCompileManager.compileReport(design);

            Map<String, Object> parameters = new HashMap<String, Object>();
            parameters.put("OrgId", orgId);
            parameters.put("CldId", cld_id);
            parameters.put("SlocId", slocId);
            parameters.put("HoOrgId", hoOrg_id);
            parameters.put("QuotDocId", docIdTxn);
            // parameters.put("fyId",(Integer)fyId);
            JasperPrint jasperPrint = null;
            jasperPrint = JasperFillManager.fillReport(report, parameters, conn);

            File pdfFile = new File(filePath + DocId + "_" + fyId + ".pdf");
            JRExporter exporter = null;
            if (true) {
                exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE, pdfFile);
            }
            try {
                exporter.exportReport();
            } catch (JRException e) {
                throw new ServletException(e);
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            finally {
                if (conn != null && st != null && res != null) {

                    conn.close();
                    st.close();
                    res.close();
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    public Boolean sendAction(String reciptantMailId, String subject, String msg, String dispDocId) {


        ViewObjectImpl vo = this.getSlsQuot1();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        String sender = null;
        Set<String> reciptants = new HashSet<String>();

        Row currPO = this.getSlsQuot1().getCurrentRow();
        String docIdTxn = currPO.getAttribute("DocId").toString();


        ViewObjectImpl usrvo = this.getUser1_1();
        RowQualifier rq = new RowQualifier(usrvo);
        rq.setWhereClause("SlocId = " + slocId + " AND UsrId = " + usr_id +
                          " AND UsrMailIdDef = 'Y' AND UsrMailIdActv = 'Y'");
        Row rows[] = usrvo.getFilteredRows(rq);


        if (rows != null && rows.length == 1) {
            sender = (String)rows[0].getAttribute("UsrMailId");
        }

        /*
    ViewObjectImpl rfqEoVo = this.getMmRfqEo1();
    RowQualifier rq2 = new RowQualifier(rfqEoVo);
    rq2.setWhereClause("SlocId = "+slocId+" AND OrgId = '"+orgId+"' AND CldId = '"+cld_id+"' AND DocId = '"+docIdTxn+"'");
    Row eo_Id_rows[]=rfqEoVo.getFilteredRows(rq2);


    if(eo_Id_rows != null && eo_Id_rows.length > 0)
    {
    for(Row row:eo_Id_rows)
    {
    ViewObjectImpl eoMailVo = this.getEoMail1();
    Integer eoId=(Integer)row.getAttribute("EoId");

    RowQualifier rq1 = new RowQualifier(eoMailVo);
    rq1.setWhereClause("EoSlocId = "+slocId+" AND EoOrgId = '"+orgId+"' AND EoHoOrgId = '"+hoOrg_id+"' AND EoCldId = '"+cld_id+"' AND EoActv = 'Y' AND EoId = "+eoId+"");
    Row eo_mail_rows[]=eoMailVo.getFilteredRows(rq1);


    for(Row email:eo_mail_rows)
    {
        //reciptants.add((String)email.getAttribute("EoEmailId"));}
    }
*/
        reciptants.add(reciptantMailId);
        //}


        String rfqId = dispDocId;
        String filePath = "D:\\send\\";

        generateReport(rfqId, filePath);

        if (sender != null && reciptants.size() > 0) {
            sendMail(sender, reciptants, rfqId, subject, msg);
        }

        return sntmail;

    }

    public void sendMail(String sender, Set<String> recipents, String rfqNo, String sub, String mesg) {

        Row currPO = this.getSlsQuot1().getCurrentRow();
        Object fyId = currPO.getAttribute("FyId");

        final String MAIL_SERVER = "smtp.gmail.com";
        final String USERNAME = sender;
        final String PASSWORD = "ess12345";
        try {
            String subject = sub;
            String message = mesg;
            Properties properties = System.getProperties();
            properties.put("mail.smtps.host", MAIL_SERVER);
            properties.put("mail.smtps.auth", "true");

            Session session = Session.getInstance(properties);
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(USERNAME));

            for (String reciptent : recipents) {
                msg.addRecipients(Message.RecipientType.TO, reciptent);
            }

            msg.setSubject(subject);
            msg.setText(message);

            Transport tr = session.getTransport("smtps");
            tr.connect(MAIL_SERVER, USERNAME, PASSWORD);

            Multipart multipart = new MimeMultipart();
            BodyPart part1 = new MimeBodyPart();
            part1.setText(message);

            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart = new MimeBodyPart();
            String path = "D:\\send\\";
            String filename = rfqNo + "_" + fyId + ".pdf";
            DataSource source = new FileDataSource(path + filename);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(filename);
            multipart.addBodyPart(messageBodyPart);
            multipart.addBodyPart(part1);


            msg.setContent(multipart);
            tr.sendMessage(msg, msg.getAllRecipients());
            tr.close();

            sntmail = true;


        } catch (AddressException ex) {
            System.out.println(ex.getMessage());
        } catch (MessagingException ex) {
            System.out.println(ex.getMessage());
            sntmail = false;
        }

    }

    /**
     * Container's getter for User1.
     * @return User1
     */
    public ViewObjectImpl getUser1() {
        return (ViewObjectImpl)findViewObject("User1");
    }

    /**
     * Container's getter for EoMail1.
     * @return EoMail1
     */
    public ViewObjectImpl getEoMail1() {
        return (ViewObjectImpl)findViewObject("EoMail1");
    }

    /**
     * Container's getter for User1_1.
     * @return User1_1
     */
    public ViewObjectImpl getUser1_1() {
        return (ViewObjectImpl)findViewObject("User1_1");
    }

    /**
     *
     * Check Entity Name is selected or not
     */
    public Boolean chkEntutyName() {
        if (this.getSlsQuot1().getCurrentRow().getAttribute("EoShowTrans") != null) {
            return true;
        }

        return false;
    }

    /**
     * Ckeck currency is selected or not
     */
    public Boolean chkCurrencyNameexist() {
        if (this.getSlsQuot1().getCurrentRow().getAttribute("CurrIdSp") != null) {
            return true;
        }

        return false;
    }

    /**
     * Set Entity Name to null when Value change event occured
     */
    public void setEntityNameToNull() {
        this.getSlsQuot1().getCurrentRow().setAttribute("EoShowTrans", null);
        this.getSlsQuot1().getCurrentRow().setAttribute("EoId", null);
        RowSet customer1 = this.getLOVCustomer1();
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        customer1.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        customer1.executeQuery();
    }

    /**
     * Container's getter for LOVTaxRuleLinesCOA1.
     * @return LOVTaxRuleLinesCOA1
     */
    public ViewObjectImpl getLOVTaxRuleLinesCOA1() {
        return (ViewObjectImpl)findViewObject("LOVTaxRuleLinesCOA1");
    }

    public StringBuffer checkPolicyApplied() {
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String policyPrice =
                (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                            p_sloc_id,
                                                                                                            p_org_id,
                                                                                                            "USE_PRICE_PLC" });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        System.out.println("Policy Applied : " + ck);
        return ck;
    }

    /*  public Integer getSlocId(){
         if(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}") != null){
             return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
         }else{

         }

    } */

    public StringBuffer checkforProfileValues(StringBuffer colName) {
        colName = (colName == null ? new StringBuffer("") : colName);
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String policyPrice =
                (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                            p_sloc_id,
                                                                                                            p_org_id,
                                                                                                            colName.toString() });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    public void setpolicy() {
        String i = "";
        Object plcId = resolvEl("#{pageFlowScope.PRICE_POLICY}");
        _log.info("Policy id : " + plcId);
        if (plcId != null) {
            i = plcId.toString();
        }
        if (!i.equals("")) {
            ViewObjectImpl impl = this.getSlsQuot1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                currentRow.setAttribute("EoPricePlc", i);
                _log.info("Setting policy Id to : " + i);
            }
        }
    }

    /**
     * Container's getter for SmanForEoVO1.
     * @return SmanForEoVO1
     */
    public ViewObjectImpl getSmanForEoVO1() {
        return (ViewObjectImpl)findViewObject("SmanForEoVO1");
    }

    /**
     * Set Sman of concerned EO
     * @param eoNm
     */
    public void insertSmanOnEoNm(StringBuffer eoNm) {
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ViewObjectImpl quot = this.getSlsQuot1();
        Row currentRow = quot.getCurrentRow();
        //_log.info("Inside insertSmanOnEoNm method : 1");
        if (currentRow != null && eoNm != null) {
            _log.info("OrgId :" + orgId + " SlocId : " + slocId + " CldId : " + cld_id + " HoOrgId : " + hoOrg_id +
                      " EoNm : " + eoNm);
            ViewObjectImpl sman = this.getSmanForEoVO1();
            sman.setNamedWhereClauseParam("OrgIdBind", orgId);
            sman.setNamedWhereClauseParam("HoOrgIdBind", hoOrg_id);
            sman.setNamedWhereClauseParam("CldIdBind", cld_id);
            sman.setNamedWhereClauseParam("SlocIdBind", slocId);
            sman.setNamedWhereClauseParam("EoNmBind", eoNm.toString());
            sman.executeQuery();

            Row[] allRowsInRange = sman.getAllRowsInRange();
            //_log.info("Rows in range are :"+allRowsInRange.length);
            //_log.info("Inside insertSmanOnEoNm method : 2");
            if (allRowsInRange.length > 0) {
                //_log.info("Inside insertSmanOnEoNm method : 3");
                Object attribute = allRowsInRange[0].getAttribute("EoSmanId");
                //_log.info("Sales man id is : "+attribute);
                if (attribute != null) {
                    //_log.info("Inside insertSmanOnEoNm method : 4");
                    currentRow.setAttribute("AssignedTo", (Integer)attribute);
                }
            }
        }
    }

    public void getAndSetDiscountForItmFromPolicy() {
        if (checkforProfileValues(new StringBuffer("USE_DISC_PLC")).toString().equals("Y")) {
            try {
                Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                Row itmRow = this.getSlsQuotItm2().getCurrentRow();
                Object itmIdO = itmRow.getAttribute("ItmId");
                ViewObjectImpl qty = this.getLovItemDescFromitemId1();
                qty.setNamedWhereClauseParam("CldIdBind", p_cldId);
                qty.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
                qty.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
                qty.setNamedWhereClauseParam("ItmIdBind", (itmIdO == null ? "" : itmIdO.toString()));
                qty.setNamedWhereClauseParam("ItmDescBind", null);
                qty.executeQuery();
                Row[] allRowsInRange = qty.getAllRowsInRange();
                Object grupIdO = null;
                if (allRowsInRange.length > 0) {
                    grupIdO = allRowsInRange[0].getAttribute("GrpId");
                }

                Row quotRow = this.getSlsQuot1().getCurrentRow();
                Integer eoId = (quotRow.getAttribute("EoId") == null ? null : (Integer)quotRow.getAttribute("EoId"));
                if (itmRow != null && itmIdO != null) {
                    StringBuffer ck = new StringBuffer("");
                    // Object grupIdO= grup.getAttribute("GrpId");
                    Object salesExec = quotRow.getAttribute("AssignedTo");
                    Object itmQty = itmRow.getAttribute("QuotQty");
                    Object itmRate = itmRow.getAttribute("ItmPrice");
                    BigDecimal amt =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "fn_sls_get_disc_plc_val(?,?,?,?,?,?,?,?,?,?,?,?)",
                                                       new Object[] { p_sloc_id, p_cldId, p_hoOrgId, p_org_id,
                                                                      itmIdO.toString(), (Integer)eoId,
                                                                      (Integer)quotRow.getAttribute("EoCatg"),
                                                                      grupIdO.toString(), (Integer)salesExec, null,
                                                                      itmQty, itmRate });
                    System.out.println("Returned  : " + amt);
                    Number val = new Number(0);
                    if (amt == null) {
                        val = new Number(0);
                    } else {
                        val = new Number(amt);
                    }

                    itmRow.setAttribute("ItmDiscTyp", "A");
                    itmRow.setAttribute("ItmDiscVal", amt);
                }

            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            //  _log.info("Policy Applied : "+ck);
        }
    }

    public Boolean insertPolicyEntry(StringBuffer policyId) {
        Boolean b = true;
        Object obj = null;
        ViewObjectImpl impl = this.getSlsQuot1();
        Row soRow = impl.getCurrentRow();
        Object eoid = soRow.getAttribute("EoId");
        Integer eoId = (eoid == null ? -1 : (Integer)soRow.getAttribute("EoId"));
        System.out.println("Came here : 1");
        if (eoId != -1 && policyId != null) {
            try {
                Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
                String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                /* P_CLDID VARCHAR2,
                                                                P_SLOCID NUMBER,
                                                                P_HO_ORGID VARCHAR2,
                                                                P_EOID NUMBER,
                                                                P_PLCID VARCHAR2,
                                                                P_USRID NUMBER */

                obj =
callStoredFunction(Types.NUMERIC, "APP.FN_INS_EO_PRICE_PLC(?,?,?,?,?,?)", new Object[] { p_cldId, p_sloc_id, p_hoOrgId,
                                                                                         eoId, policyId.toString(),
                                                                                         p_user_id });
                System.out.println("Retudn : " + obj);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            BigDecimal r = (obj == null ? new BigDecimal(-1) : (BigDecimal)obj);
            if (r.compareTo(new BigDecimal(-1)) == 0) {
                b = false;
                soRow.setAttribute("EoPricePlc", null);
            }
        }
        return b;
    }

    /**
     * Container's getter for LOVCustomer1.
     * @return LOVCustomer1
     */
    public ViewObjectImpl getLOVCustomer1() {
        return (ViewObjectImpl)findViewObject("LOVCustomer1");
    }

    public String ValidateItmId(String itmId) {

        StringBuffer b = new StringBuffer("N");
        ViewObjectImpl impl = this.getSlsQuotItm2();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != impl.getCurrentRow() && next.getAttribute("ItmId").toString().equalsIgnoreCase(itmId)) {
                b = new StringBuffer("Y");
                break;
            }
        }
        itr.closeRowSetIterator();
        return b.toString();
    }

    public Integer setLatestPrice(String ItmId) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        //Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        if (ItmId != null) {
            System.out.println("FunctionCalled");
            SlsQuotVORowImpl row = (SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow();
            SlsQuotItmVORowImpl irow = (SlsQuotItmVORowImpl)this.getSlsQuotItm2().getCurrentRow();
            Number conv = new Number(1);
            System.out.println(row.getCurrIdSp() + "--->" + row.getCurrConvFctr());
            if (row.getCurrConvFctr() != null) {
                conv = row.getCurrConvFctr();
            }

            ////////////////////////////////////////////////////////////////////////////////
            if (checkPolicyApplied().toString().equals("Y")) {
                _log.info("Price from Price Policy.");
                Number price = new Number(0);
                BigDecimal policyPrice =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)",
                                                   new Object[] { cldId.toString(), slocId, hoOrgId.toString(),
                                                                  orgId.toString(), row.getEoId(), ItmId, "SO" });

                policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                _log.info("Policy Price is : " + policyPrice);
                // policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                if (policyPrice.compareTo(new BigDecimal(0)) == 0 || policyPrice.compareTo(new BigDecimal(-2)) == 0) {

                    try {
                        BigDecimal s =
                            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                           new Object[] { cldId.toString(), slocId, orgId.toString(),
                                                                          hoOrgId.toString(), row.getEoId(), ItmId,
                                                                          row.getUsrIdCreateDt(), userId,
                                                                          new Timestamp(System.currentTimeMillis()),
                                                                          row.getCurrIdSp(), conv });
                        System.out.println("S : " + s);
                        System.out.println("-------1");
                        Number amt = new Number(s);
                        System.out.println("-----------2");
                        Number convFctr = row.getCurrConvFctr();
                        System.out.println("Amt is: " + amt);
                        if (amt.compareTo(new Number(0)) == 1) {
                            irow.setItmPrice(amt);
                            return 1;
                        } else if (amt.compareTo(new Number(-1)) == 0) {
                            irow.setItmPrice(new Number(0));
                            return 0;
                        } else {
                            /* convFctr = (Number)amt.div(convFctr);
                                System.out.println("Price :" + convFctr);
                                irow.setItmPrice(convFctr); */
                            return 0;
                        }

                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'FN_GET_EO_LATEST_PRICE' !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }


                } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                    return -1;
                } else {
                    try {
                        price = new Number(policyPrice);
                        price = price.divide(conv);
                        price = (Number)price.round(getAmtDgt());
                        irow.setItmPrice(price);
                        return 0;
                    } catch (SQLException e) {
                    }
                }

            } else {
                _log.info("Price from EO Price.");
                try {


                    BigDecimal s =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)",
                                                       new Object[] { cldId.toString(), slocId, orgId.toString(),
                                                                      hoOrgId.toString(), row.getEoId(), ItmId,
                                                                      row.getUsrIdCreateDt(), userId,
                                                                      new Timestamp(System.currentTimeMillis()),
                                                                      row.getCurrIdSp(), conv });
                    System.out.println("S : " + s);
                    Number amt = new Number(s);
                    Number convFctr = row.getCurrConvFctr();

                    if (amt.compareTo(new Number(0)) == 1) {
                        irow.setItmPrice(amt);
                        return 1;
                    } else if (amt.compareTo(new Number(-1)) == 0) {
                        irow.setItmPrice(new Number(0));
                        return 0;
                    } else {
                        /* convFctr = (Number)amt.div(convFctr);
                            System.out.println("Price :" + convFctr);
                            irow.setItmPrice(convFctr); */
                        return 0;
                    }

                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'FN_GET_EO_LATEST_PRICE' !");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                }
            }
        }
        return 0;
    }

    public Integer chkforDuplicateItemid(String ItemId) {
        System.out.println("inside check for dup item id---");
        Integer ret = 0;
        SlsQuotItmVOImpl row = (SlsQuotItmVOImpl)this.getSlsQuotItm2();
        Row currentRow = row.getCurrentRow();
        RowSetIterator itr = row.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            if (r != currentRow) {
                Object itmIdiO = r.getAttribute("ItmId");
                StringBuilder itmIdi =
                    (itmIdiO == null ? new StringBuilder("") : new StringBuilder(itmIdiO.toString()));
                if (itmIdi.toString().equals(ItemId)) {
                    ret = 1;
                    break;
                }
            }
        }
        itr.closeRowSetIterator();
        System.out.println("value of i=" + ret);
        return ret;
    }

    public Boolean chkTabValidations() {
        Boolean b = true;
        ViewObjectImpl impl2 = this.getSlsQuot1();
        RowSetIterator itr2 = impl2.createRowSetIterator(null);
        while (itr2.hasNext()) {
            Row rw = itr2.next();
            Object EocatgO = rw.getAttribute("EoCatg");
            Object EoIdO = rw.getAttribute("EoId");
            Object CurrIdO = rw.getAttribute("CurrIdSp");
            Object ConcfactorO = rw.getAttribute("CurrConvFctr");
            Integer EoCatg = (EocatgO == null ? 0 : Integer.parseInt(EocatgO.toString()));
            Integer Eoid = EoIdO == null ? 0 : Integer.parseInt(EoIdO.toString());
            Integer Currid = CurrIdO == null ? 0 : Integer.parseInt(CurrIdO.toString());
            Number Covfactr = ConcfactorO == null ? new Number(0) : (Number)ConcfactorO;
            if (EoCatg.equals("")) {
                b = false;
                FacesMessage message =
                    new FacesMessage("#{bundle['MSG.1324']} "); //Please select customer category first !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            } else if (Eoid.equals("")) {
                b = false;
                FacesMessage message = new FacesMessage("#{bundle['MSG.1325']} "); //Please select customer first !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            }

            else if (Currid.equals("")) {
                b = false;
                FacesMessage message =
                    new FacesMessage(" #{bundle['MSG.1326']} "); //Customer Currency can not be empty !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            }

            else if (Covfactr.compareTo(new Number(0)) <= 0) {
                b = false;
                FacesMessage message =
                    new FacesMessage("#{bundle['MSG.1327']} "); //Currency conversion factor can not be empty !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            }

        }
        ViewObjectImpl impl = this.getSlsQuotItm2();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            Object ItemIdD = row.getAttribute("ItmId");
            Object ItemPriceD = row.getAttribute("ItmPrice");
            Object ItemQuantyD = row.getAttribute("QuotQty");
            StringBuilder itemId = (ItemIdD == null ? new StringBuilder("") : new StringBuilder(ItemIdD.toString()));
            Number ItemPrice = (ItemPriceD == null ? new Number(0) : (Number)ItemPriceD);
            Number ItemQty = (ItemQuantyD == null ? new Number(0) : (Number)ItemQuantyD);
            if (itemId.toString().equals("")) {
                b = false;
                FacesMessage message =
                    new FacesMessage("#{bundle['MSG.1328']}"); //Item is not selected in one of the Item lines. Please select Item in corresponding Item line !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            } else if (ItemPrice.compareTo(new Number(0)) <= 0) {
                b = false;
                FacesMessage message =
                    new FacesMessage("#{bundle['MSG.1329']}"); //Item price for one of the Item in Item lines is less than or equal to zero. Please select a valid Item price !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            } else if (ItemQty.compareTo(new Number(0)) <= 0) {
                b = false;
                FacesMessage message = new FacesMessage("#{bundle['MSG.1330']}");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            }
        }
        itr.closeRowSetIterator();
        return b;
    }

    /**
     * Container's getter for SlsQuotItm1.
     * @return SlsQuotItm1
     */
    public SlsQuotItmVOImpl getSlsQuotItm1() {
        return (SlsQuotItmVOImpl)findViewObject("SlsQuotItm1");
    }

    /**
     * Container's getter for LovItemDescFromitemId1.
     * @return LovItemDescFromitemId1
     */
    public ViewObjectImpl getLovItemDescFromitemId1() {
        return (ViewObjectImpl)findViewObject("LovItemDescFromitemId1");
    }

    public Boolean isItmIdValid(StringBuffer itmId) {
        Boolean b = true;
        ViewObjectImpl impl = this.getSlsQuotItm2();
        Row currentRow = impl.getCurrentRow();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (!next.equals(currentRow)) {
                Object iO = next.getAttribute("ItmId");
                StringBuffer c = (iO == null ? new StringBuffer("") : new StringBuffer(iO.toString()));
                if (itmId.toString().equals(c.toString())) {
                    b = false;
                    break;
                }
            }
        }
        itr.closeRowSetIterator();
        return b;
    }

    public ArrayList<String> getSuggestedItemDesc(String itmStr) {

        ArrayList<String> h = new ArrayList<String>();
        ViewObjectImpl autoSuggestVO = this.getItmVoForAutoSuggest1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        autoSuggestVO.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        autoSuggestVO.setNamedWhereClauseParam("ItmNmBind", itmStr);
        // autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.setRangeSize(12);
        autoSuggestVO.executeQuery();

        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }

    /**
     * Container's getter for ItmVoForAutoSuggest1.
     * @return ItmVoForAutoSuggest1
     */
    public ViewObjectImpl getItmVoForAutoSuggest1() {
        return (ViewObjectImpl)findViewObject("ItmVoForAutoSuggest1");
    }
}
