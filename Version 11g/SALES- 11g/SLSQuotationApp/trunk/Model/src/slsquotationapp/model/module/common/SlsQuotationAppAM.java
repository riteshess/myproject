package slsquotationapp.model.module.common;

import java.util.ArrayList;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.domain.Timestamp;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 28 15:37:17 IST 2013
// ---------------------------------------------------------------------
public interface SlsQuotationAppAM extends ApplicationModule {
    void getslsQuotSetCurrentRowAtt(String name, String value);

    StringBuffer callFunction_FN_SET_EO_ID(String EoNm, Integer EoType);

    void executeLOVCustomerVO();

    Integer getItemLineRowCount(StringBuffer itemNm);

    boolean checkQuotationDeletable();

    StringBuffer callFunction_FN_INS_ITM(String itmDesc, String itmPrefix, String itmGrpId, String itmUom);

    void calculateandSetSrNoInSlsItm();


    void calculateandSetSrNoInSlsItmTr();

    void callFunction_FN_INS_QUOTE_TR_LINE(Integer taxRuleId);

    Integer checkIfTaxRuleExistOrNot();

    void executeAllViews();

    void executeTrAndTrLines();

    void removeItmTaxRuleandTaxRuleLines();

    boolean isItmWiseAppliedCorrectly();

    void setInitialBindVariables();

    void executeWithBindVariablesSlsQuoteVo();

    void callFunction_FN_INS_QUOT_SCH_ITM(StringBuffer schId);


    StringBuffer getSlsQuotCurrRowDocId();

    void setCurrentRowInSlsQuoteVo(StringBuffer DocId);

    void removeSchemeFromItem();


    void resetQuotationViewCriteria();

    Integer checkIfQuotationWiseTaxRuleExistOrNot();

    void calculateandSetSrNoTrForQuotationWiseTr();

    void executeTrAndTrLinesForQuotationWiseTax();

    void callFunction_ForQuotationWiseTax_FN_INS_QUOTE_TR_LINE(Integer taxRuleId);

    boolean isOrderWiseAppliedCorrectly();

    boolean isItemExistsForQuot();

    boolean isItemNmBlank();

    void searchQuotationViewCriteria();

    void callFunction_FN_INS_QUOT_CALC(StringBuffer DocId);

    oracle.jbo.domain.Number getItemCurrentRowAttribute(StringBuffer attribute);

    boolean isQuotDiscValueValid(oracle.jbo.domain.Number discVal);

    void createInsertRowAndSetVarsInSlsTnC1(Integer TnCId);

    boolean isSelectedTnCAlreadyAdded(Integer TnCId);

    boolean isItemTotalPrecisionOk(oracle.jbo.domain.Number m);


    void call_function_FN_ENQ_TO_QUOT(StringBuffer EnqNo);

    void setItemsOnTheBasisOfEnquiry(StringBuffer EnqNo);

    Integer call_function_FN_GET_EO_LATEST_PRICE(StringBuffer itmNm);

    void exceptionHandler();

    void removeQuotTaxRuleandTaxRuleLines();

    StringBuffer isOpportunityUseAllowed();

    boolean isSearchFromQuantityValid(oracle.jbo.domain.Number val);

    boolean isSearchToQuantityValid(oracle.jbo.domain.Number val);

    boolean isSearchFromNoOfItemValid(oracle.jbo.domain.Number val);

    boolean isSearchFromTotalAmountValid(oracle.jbo.domain.Number val);

    boolean isSearchToTotalAmountValid(oracle.jbo.domain.Number val);

    boolean isSearchToNoOfItemValid(oracle.jbo.domain.Number val);

    Integer isToleranceQuantityValid(oracle.jbo.domain.Number val);

    StringBuffer isToleranceUseAllowed();

    Integer isAlertApplicable();

    Integer getUsrLvl(StringBuffer WfId);

    StringBuffer getWfIdAttachedWithTheDoc();

    Integer insIntoTxn(StringBuffer WfId, Integer level);

    Integer slsQuotPendingAt();

    oracle.jbo.domain.Number getQuotationAmount();

    void functionCallOnApprovalFromWorkFlow();

    void cancelQuotation();

    boolean isUserEligibleToCancelSQuotation();

    void amendFUNCTION();

    void refereshAllVoOnCommit();

    void generateReport(String quotDocId, String filePath);

    Boolean sendAction(String reciptantMailId, String subject, String msg, String dispDocId);

    Boolean chkEntutyName();

    void setEntityNameToNull();

    Boolean chkCurrencyNameexist();

    void generateQuotId(StringBuffer DocId);

    StringBuffer checkPolicyApplied();

    void setpolicy();

    void insertSmanOnEoNm(StringBuffer eoNm);

    void getAndSetDiscountForItmFromPolicy();

    StringBuffer checkforProfileValues(StringBuffer colName);

    Boolean insertPolicyEntry(StringBuffer policyId);


    Integer setLatestPrice(String ItmId);

    Boolean chkTabValidations();

    Integer chkforDuplicateItemid(String ItemId);

    ArrayList<String> getSuggestedItemDesc(String itmStr);
}
