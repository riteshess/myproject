
package slssalesinvoiceapp.model.module.service;

import java.math.BigDecimal;
import java.math.RoundingMode;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.HashSet;

import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import slssalesinvoiceapp.model.module.service.common.SlsSalesInvoiceAppAM;
import slssalesinvoiceapp.model.module.view.CoaIdFromEoIdVOImpl;
import slssalesinvoiceapp.model.module.view.EoNmEoIdVOImpl;
import slssalesinvoiceapp.model.module.view.InvoiceSearchVOImpl;
import slssalesinvoiceapp.model.module.view.InvoiceSearchVORowImpl;
import slssalesinvoiceapp.model.module.view.LOVShipmentVORowImpl;
import slssalesinvoiceapp.model.module.view.LovArVORowImpl;
import slssalesinvoiceapp.model.module.view.SlsInvAdjVORowImpl;
import slssalesinvoiceapp.model.module.view.SlsInvDtlVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvPmntSchdlVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvShipItmVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvTrLineVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvTrVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvVORowImpl;
import slssalesinvoiceapp.model.module.view.TempSearchPanelVORowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Aug 31 15:34:07 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsSalesInvoiceAppAMImpl extends ApplicationModuleImpl implements SlsSalesInvoiceAppAM {
    /**
     * This is the default constructor (do not remove).
     */

    private static ADFLogger _log = ADFLogger.createADFLogger(SlsSalesInvoiceAppAMImpl.class);

    public SlsSalesInvoiceAppAMImpl() {
    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Container's getter for SlsInv.
     * @return SlsInv
     */
    public SlsInvVOImpl getSlsInv() {
        return (SlsInvVOImpl)findViewObject("SlsInv");
    }


    /**
     * Container's getter for LOVCurrency.
     * @return LOVCurrency
     */
    public ViewObjectImpl getLOVCurrency() {
        return (ViewObjectImpl)findViewObject("LOVCurrency");
    }

    /**
     * Container's getter for LOVCustomer.
     * @return LOVCustomer
     */
    public ViewObjectImpl getLOVCustomer() {
        return (ViewObjectImpl)findViewObject("LOVCustomer");
    }


    /**
     * Container's getter for LOVShipment.
     * @return LOVShipment
     */
    public ViewObjectImpl getLOVShipment() {
        return (ViewObjectImpl)findViewObject("LOVShipment");
    }


    /**
     * Container's getter for SlsInvDtl.
     * @return SlsInvDtl
     */
    public SlsInvDtlVOImpl getSlsInvDtl() {
        return (SlsInvDtlVOImpl)findViewObject("SlsInvDtl");
    }

    /**
     * Container's getter for SlsInv2SlsInvDtlVL2.
     * @return SlsInv2SlsInvDtlVL2
     */
    public ViewLinkImpl getSlsInv2SlsInvDtlVL2() {
        return (ViewLinkImpl)findViewLink("SlsInv2SlsInvDtlVL2");
    }


    /**
     * Container's getter for SlsInvTr.
     * @return SlsInvTr
     */
    public SlsInvTrVOImpl getSlsInvTr() {
        return (SlsInvTrVOImpl)findViewObject("SlsInvTr");
    }

    /**
     * Container's getter for SlsInv2SlsInvTrVL1.
     * @return SlsInv2SlsInvTrVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvTrVL1() {
        return (ViewLinkImpl)findViewLink("SlsInv2SlsInvTrVL1");
    }


    /**
     * Container's getter for SlsInvTrLine.
     * @return SlsInvTrLine
     */
    public SlsInvTrLineVOImpl getSlsInvTrLine() {
        return (SlsInvTrLineVOImpl)findViewObject("SlsInvTrLine");
    }

    /**
     * Container's getter for SlsInvTr2SlsInvTrLineVL1.
     * @return SlsInvTr2SlsInvTrLineVL1
     */
    public ViewLinkImpl getSlsInvTr2SlsInvTrLineVL1() {
        return (ViewLinkImpl)findViewLink("SlsInvTr2SlsInvTrLineVL1");
    }

    /**
     * Container's getter for SlsInvOc.
     * @return SlsInvOc
     */
    public ViewObjectImpl getSlsInvOc() {
        return (ViewObjectImpl)findViewObject("SlsInvOc");
    }

    /**
     * Container's getter for SlsInv2SlsInvOcVL1.
     * @return SlsInv2SlsInvOcVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvOcVL1() {
        return (ViewLinkImpl)findViewLink("SlsInv2SlsInvOcVL1");
    }
    protected Object callProcedure(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        // System.out.println("__________________________________________begin");
        try {
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            System.out.println("stmt ----- "+stmt);
                st = this.getDBTransaction().createCallableStatement("  " + stmt + ";", 0);   
            }
            else
            {
            st = this.getDBTransaction().createCallableStatement("begin  " + stmt + ";end;", 0);
            }
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1  , bindVars[z]);
                    //System.out.println(bindVars[z]);
                }
            }
            System.out.println(bindVars.length + 1);
           // st.registerOutParameter(bindVars.length + 1, sqlReturnType);
            st.executeUpdate();
            
            //System.out.println("__________________________________________end");
           // return st.getObject(bindVars.length + 1);
           return st.getObject(bindVars.length);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }

    
    /**
     * Method to call a Database Stored procedure
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callProcedureOut(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        // System.out.println("__________________________________________begin");
        try {
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                System.out.println("stmt ----- "+stmt);

                st = this.getDBTransaction().createCallableStatement("  " + stmt + ";", 0);   
                System.out.println("st are::::"+st);
            }
            else
            {
            st = this.getDBTransaction().createCallableStatement("begin  " + stmt + ";end;", 0);
            }
            
            ///st.registerOutParameter(1, sqlReturnType);
            System.out.println("bind var length   :::: "+bindVars.length);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1  , bindVars[z]);
                    //System.out.println(bindVars[z]);
                }
            }
            System.out.println(bindVars.length + 1+ " :::" +sqlReturnType);
            st.registerOutParameter(bindVars.length + 1, sqlReturnType);
            System.out.println("before execute:::"+st);
            st.executeUpdate();
            
            //System.out.println("__________________________________________end");
            return st.getObject(bindVars.length + 1);            
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        //System.out.println("-----------------------------------------------------------------------");
        CallableStatement st = null;
        try {
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                System.out.println("stmt ----- "+stmt);
                st = getDBTransaction().createCallableStatement("{? = " + stmt + "};", 0);   
            }
            else
            {
          st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            }    st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    //System.out.println(bindVars[z]);
                }
            }
            st.executeUpdate();
            //System.out.println("-----------------------------------------------------------------------");
            //System.out.println(st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    _log.warning(e.getMessage());
                }
            }
        }

    }

    /**
     * ------Method is for setting Base amount of Detail table after changing rate.--------------
     * @return Setting base amount of Detail.
     * Created By Gourav Raj
     */
    public void setBaseAmount(BigDecimal Rate) {
        if (Rate != null) {

            ViewObjectImpl shpmentDtl = getSlsInvDtl();
            RowSetIterator rsi = shpmentDtl.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row rw = rsi.next();
                if (rw.getAttribute("ShipAmtSp") != null) {
                    BigDecimal shpAmtSp = (BigDecimal)rw.getAttribute("ShipAmtSp");
                    BigDecimal shpAmtBs = shpAmtSp.multiply(Rate);
                    rw.setAttribute("ShipAmtBs", shpAmtBs);
                }
            }
            rsi.closeRowSetIterator();
        }
    }

    /**
     * ------Method is for For Invoice wise tax present or not.--------------
     * @return Return Integer.
     * Created By Gourav Raj
     */
    public Integer invoiceWiseTaxValue() {
        ViewObjectImpl vo = getSlsInvTr();
        Integer ret = vo.getRowCount();
        return ret;
    }


    /**
     * ------Method for getting Max Shipment Sr No while creating new row.--------------
     * @return Maximun Serial Number
     * Created By Gourav Raj
     */
    public Integer getMaxShipSrNo() {
        Integer max = 0;
        ViewObject vo = getSlsInvDtl();
        RowSetIterator rsi = vo.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row rw = rsi.next();
            if (max <= (Integer)rw.getAttribute("SrNo")) {
                max = (Integer)rw.getAttribute("SrNo");
            }
        }
        rsi.closeRowSetIterator();
        return max + 1;
    }

    /**
     * ------Method is for creating tax rule line after selectin any rule
     * .It can be called in rule id changed listner.--------------
     * @return Maximun Serial Number
     * Created By Gourav Raj
     */
    public void insertIntoSlsInvTrLineForInvoicewise(Long p_tax_rule_id, Integer p_user_id,
                                                     BigDecimal p_taxable_amount, BigDecimal P_conv_fctr) {
        BigDecimal currRate = new BigDecimal(1);
        StringBuffer siDocId = new StringBuffer("");
        StringBuffer trAlreadyExists = new StringBuffer("");

        Row siRow = this.getSlsInv().getCurrentRow();
        if (siRow != null) {
            currRate = (BigDecimal)siRow.getAttribute("CurrRate");
            siDocId = new StringBuffer(siRow.getAttribute("DocId").toString());
        }

        SlsInvTrVOImpl trVo = this.getSlsInvTr();
        SlsInvShipItmVOImpl forTax = this.getSlsInvShipItmVOForTax();
        forTax.executeQuery();
        RowSetIterator itmItr = forTax.createRowSetIterator(null);
        _log.info("Item count : "+itmItr.getRowCount());
        while (itmItr.hasNext()) {
            Row tr = null;
            StringBuffer itmId = new StringBuffer("");
            StringBuffer shipmntId = new StringBuffer("");
            StringBuffer soId = new StringBuffer("");
            Row itmRow = itmItr.next();
            BigDecimal taxableAmt = new BigDecimal(0);
            if (itmRow.getAttribute("ItmId") != null) {
                itmId = new StringBuffer(itmRow.getAttribute("ItmId").toString());
                shipmntId = new StringBuffer(itmRow.getAttribute("ShipId").toString());
                taxableAmt = (BigDecimal)itmRow.getAttribute("ItmAmtGsSp");
                soId = new StringBuffer(itmRow.getAttribute("SoId").toString());
            }
            RowQualifier rq = new RowQualifier(trVo);
            rq.setWhereClause("ItmId ='" + itmId + "' and ShipId='" + shipmntId + "' and SoId='" + soId + "'");
            _log.info("Qualifier for row : " + rq.getExprStr());

            Row[] filteredRows = trVo.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                _log.info("Tr Row already Exists");
                tr = filteredRows[0];
            } else {
                _log.info("New Tr Row created");
                tr = trVo.createRow();
                tr.setAttribute("ItmId", itmId.toString());
                tr.setAttribute("ShipId", shipmntId.toString());
                tr.setAttribute("ExmptFlg", "N");
                tr.setAttribute("SrNoDest", 0);
                tr.setAttribute("SrNo", 1);
                tr.setAttribute("TaxRuleId", p_tax_rule_id);
                tr.setAttribute("SoId", soId);
                trVo.insertRow(tr);
            }
            tr.setAttribute("TaxableAmt", taxableAmt);
            _log.info("Tr row key is : " + tr.getKey());
            BigDecimal val = new BigDecimal(0);
            try {

                System.out.println("-----------------------");
                System.out.println(" sloc " + getSlocId() + " cld " + getCldId().toString() + " ho " +
                                   getHoOrgId().toString() + " org " + getOrgId().toString() + " si doc " +
                                   siDocId.toString() + " itm " + itmId.toString() + " tax " + p_tax_rule_id +
                                   " user " + getUserId() + " tax " + taxableAmt + " curr " + currRate + " so " +
                                   soId.toString() + " ship " + shipmntId.toString());

                String driver=getdrivername();
                if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                val =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "call FN_INS_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                                 getCldId().toString(),
                                                                                                                 getHoOrgId().toString(),
                                                                                                                 getOrgId().toString(),
                                                                                                                 siDocId.toString(),
                                                                                                                 itmId.toString(),
                                                                                                                 p_tax_rule_id,
                                                                                                                 getUserId(),
                                                                                                                 taxableAmt,
                                                                                                                 currRate,
                                                                                                                 soId.toString(),
                                                                                                                 shipmntId.toString() });   
                }
                else{

                val =
(BigDecimal)callStoredFunction(Types.NUMERIC, "FN_INS_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                             getCldId().toString(),
                                                                                                             getHoOrgId().toString(),
                                                                                                             getOrgId().toString(),
                                                                                                             siDocId.toString(),
                                                                                                             itmId.toString(),
                                                                                                             p_tax_rule_id,
                                                                                                             getUserId(),
                                                                                                             taxableAmt,
                                                                                                             currRate,
                                                                                                             soId.toString(),
                                                                                                             shipmntId.toString() });

                }
                _log.info("value of TaxAmtSp = " + val);
                _log.info("value of P_conv_fctr = " + currRate);
                tr.setAttribute("TaxAmtSp", val);
                tr.setAttribute("TaxRuleId", p_tax_rule_id);
                if (currRate != null && val != null) {
                    tr.setAttribute("TaxAmtBs", val.multiply(currRate));
                } else {
                    tr.setAttribute("TaxAmtBs", val);
                }

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_INV_TR_LINES' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
        getSlsInvTrLine().executeQuery();
        trVo.executeQuery();
            }

    public void insertIntoSlsInvTrLineForItemwise(Long p_tax_rule_id, Integer p_user_id, BigDecimal p_taxable_amount,
                                                  BigDecimal P_conv_fctr) {

        Row currRw = getSlsInvTrItm().getCurrentRow();
        if (currRw != null) {
            Integer p_sloc_id = null;
            String P_CLDID = null;
            String P_HO_ORGID = null;
            String p_org_id = null;
            String p_doc_id = null;
            String P_SR_NO_DEST = null;
            String ItmId = null;
            StringBuffer soId = new StringBuffer("");
            StringBuffer shipId = new StringBuffer("");
            currRw.setAttribute("TaxableAmt", p_taxable_amount);
            if (currRw.getAttribute("SlocId") != null) {
                p_sloc_id = (Integer)currRw.getAttribute("SlocId");
            }
            if (currRw.getAttribute("CldId") != null) {
                P_CLDID = currRw.getAttribute("CldId").toString();
            }
            if (currRw.getAttribute("HoOrgId") != null) {
                P_HO_ORGID = currRw.getAttribute("HoOrgId").toString();
            }
            if (currRw.getAttribute("OrgId") != null) {
                p_org_id = currRw.getAttribute("OrgId").toString();
            }
            if (currRw.getAttribute("DocId") != null) {
                p_doc_id = currRw.getAttribute("DocId").toString();
            }
            if (currRw.getAttribute("SrNoDest") != null) {
                P_SR_NO_DEST = currRw.getAttribute("SrNoDest").toString();
            }
            if (currRw.getAttribute("ItmId") != null) {
                ItmId = currRw.getAttribute("ItmId").toString();
            }
            if (currRw.getAttribute("ShipId") != null) {
                shipId = new StringBuffer(currRw.getAttribute("ShipId").toString());
            }
            if (currRw.getAttribute("SoId") != null) {
                soId = new StringBuffer(currRw.getAttribute("SoId").toString());
            }
            _log.info("SoId : " + soId + " ShipId : " + shipId);
            BigDecimal val = new BigDecimal(0);
            try {
                System.out.println("$$$$$$$$$$$$$$");
                System.out.println(" slo " + p_sloc_id + " cld " + P_CLDID + " ho " + P_HO_ORGID + " org " + p_org_id +
                                   " doc " + p_doc_id + " itm " + ItmId + " tax " + p_tax_rule_id + " use " +
                                   p_user_id + " tax amt " + p_taxable_amount + " con " + P_conv_fctr + " so " +
                                   soId.toString() + " ship " + shipId.toString());
                String driver=getdrivername();
                if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                val =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "call FN_INS_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                                 P_CLDID,
                                                                                                                 P_HO_ORGID,
                                                                                                                 p_org_id,
                                                                                                                 p_doc_id,
                                                                                                                 ItmId,
                                                                                                                 p_tax_rule_id,
                                                                                                                 p_user_id,
                                                                                                                 p_taxable_amount,
                                                                                                                 P_conv_fctr,
                                                                                                                 soId.toString(),
                                                                                                                 shipId.toString() });   
                }
                else
                {
                val =
(BigDecimal)callStoredFunction(Types.NUMERIC, "FN_INS_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { p_sloc_id,
                                                                                                             P_CLDID,
                                                                                                             P_HO_ORGID,
                                                                                                             p_org_id,
                                                                                                             p_doc_id,
                                                                                                             ItmId,
                                                                                                             p_tax_rule_id,
                                                                                                             p_user_id,
                                                                                                             p_taxable_amount,
                                                                                                             P_conv_fctr,
                                                                                                             soId.toString(),
                                                                                                             shipId.toString() });
            }
            }catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_INV_TR_LINES' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
            Integer amt_digit = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

            currRw.setAttribute("TaxAmtSp", val.setScale(amt_digit, RoundingMode.HALF_UP));
            if (P_conv_fctr != null && val != null) {
                currRw.setAttribute("TaxAmtBs", val.multiply(P_conv_fctr));
            } else {
                currRw.setAttribute("TaxAmtBs", val);
            }
            getSlsInvTrLineItm().executeQuery();
        }
    }

    public String checkForReapplyTax(BigDecimal TaxableAmount) {
        String retVal = "N";
        if (TaxableAmount != null) {
            BigDecimal curTaxableAmt = new BigDecimal(0);
            ViewObject taxRule = this.getSlsInvTr();
            int count = taxRule.getRowCount();
            if (count > 0) {
                Row[] rArray = taxRule.getAllRowsInRange();
                for (Row r : rArray) {
                    if (r.getAttribute("TaxableAmt") != null) {
                        curTaxableAmt = curTaxableAmt.add((BigDecimal)r.getAttribute("TaxableAmt"));
                    }
                }
            }
            if (TaxableAmount.compareTo(curTaxableAmt) != 0) {
                retVal = "Y";
            }
        }
        return retVal;
    }


    public void setCurr_OC() {
        ViewObjectImpl OC = getSlsInvOc();
        Row currRwOc = OC.getCurrentRow();
        ViewObjectImpl Inv = getSlsInv();
        Row currRwInv = Inv.getCurrentRow();
        if (currRwInv != null) {
            if (currRwOc != null) {
                Integer CurrId = null;
                BigDecimal CurrRate = null;
                if (currRwInv.getAttribute("CurrIdSp") != null) {
                    CurrId = (Integer)currRwInv.getAttribute("CurrIdSp");
                }
                if (currRwInv.getAttribute("CurrRate") != null) {
                    CurrRate = (BigDecimal)currRwInv.getAttribute("CurrRate");
                }
                currRwOc.setAttribute("CurrId", CurrId);
                currRwOc.setAttribute("CurrRate", CurrRate);
            }
        }
    }


    public void insertIntoTnc(Row CurrRow_Tnc) {
        if (CurrRow_Tnc != null) {
            ViewObject tnc = this.getSlsInvTnc();
            Row filtRows[] = tnc.getFilteredRows("TncId", CurrRow_Tnc.getAttribute("TncId"));
            _log.info("Total Row in VO for same tncc-->" + filtRows.length);
            if (filtRows.length > 0) {
                //FacesMessage mesg = new FacesMessage("Duplicate Terms & Conditions, Please select other one");
                FacesMessage mesg = new FacesMessage(resolvElDCMsg("#{bundle['MSG.972']}").toString());
                mesg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, mesg);
            } else {
                Row tncRow = tnc.createRow();
                tnc.insertRow(tncRow);
                if (CurrRow_Tnc.getAttribute("TncId") != null) {
                    tncRow.setAttribute("TncId", CurrRow_Tnc.getAttribute("TncId"));
                }
                if (CurrRow_Tnc.getAttribute("TncDesc") != null) {
                    tncRow.setAttribute("TransTncDesc", CurrRow_Tnc.getAttribute("TncDesc"));
                }
                tnc.executeQuery();
            }
        }
    }


    public String shipmentNameValidation(String ShipmentName) {
        if (ShipmentName != null) {
            ViewObject v = this.getSlsInvDtl();
            String shpDesc = null;
            int totalCount = v.getRowCount(); //get ALL rows
            int rangeSize = v.getRangeSize(); //all in range
            v.setRangeSize(totalCount);
            Row[] rArray = v.getAllRowsInRange();
            //check for duplicate rows
            Row cRow = v.getCurrentRow();
            int count = 0;
            String shpid = "";
            for (Row r : rArray) {
                if (true) {
                    try {
                        shpid = r.getAttribute("ShipId").toString();
                    } catch (NullPointerException npe) {
                        //System.out.println("NPE:" + npe);
                        shpid = "";
                    }
                    if (shpid != null) {
                        Row[] xx = this.getLOVShipment().getFilteredRows("DocId", shpid);
                        if (xx.length > 0) {
                            shpDesc = xx[0].getAttribute("DispId").toString();
                        }
                        if (ShipmentName.equalsIgnoreCase(shpDesc)) {
                            count = count + 1;
                        }
                    }
                }
            }
            v.setRangeSize(rangeSize); //set to original range
            _log.info("Total Count -->" + count);
            if (count > 0) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return null;
        }

    }


    public void donePaySchdlAction(Integer p_user_id, BigDecimal totAmt) {
        ViewObject pmtVo = this.getSlsInvPmntSchdl();
        ViewObject slsSo = this.getSlsInv();
        String flg = "N";
        BigDecimal num = new BigDecimal(0);
        BigDecimal remain = new BigDecimal(0);
        Row currSo = slsSo.getCurrentRow();
        if (currSo.getAttribute("TransPayDt") != null) {
            Timestamp dt = (Timestamp)currSo.getAttribute("TransPayDt");
            Timestamp soDt = (Timestamp)currSo.getAttribute("DocDt");
            java.sql.Date ordDate = null;
            java.sql.Date payDt = null;
            java.util.Date ordUtilDt = null;
            java.util.Date payUtilDt = null;
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                ordDate = soDt.dateValue();
                payDt = dt.dateValue();
                ordUtilDt = sdf.parse(ordDate.toString());
                payUtilDt = sdf.parse(dt.toString());
            } catch (SQLException e) {
                _log.info("Eception in Date Conveersion->" + e);
            } catch (ParseException e) {
                _log.info("Eception in Date Conveersion->" + e);
            }
            if (currSo.getAttribute("TransAdvFlg") != null) {
                flg = currSo.getAttribute("TransAdvFlg").toString();
            }
            if ("Y".equalsIgnoreCase(flg) && soDt.compareTo(dt) == -1) {
                //String msg2 = "Payment Date must be less than or equal to Invoice Date for Advance";
                String msg2 = resolvElDCMsg("#{bundle['MSG.975']}").toString();
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);
                //if Order Date is more than Payment Date & Advance Flag is unchecked.
            } else if ("N".equalsIgnoreCase(flg) && (ordUtilDt.after(payUtilDt))) {
                // String msg2 = "Payment Date cannot be less than Invoice Date";
                String msg2 = resolvElDCMsg("#{bundle['MSG.978']}").toString();
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);
            } else if (currSo.getAttribute("TransPayAmt") != null) {
                BigDecimal amt = (BigDecimal)currSo.getAttribute("TransPayAmt");
                BigDecimal zero = new BigDecimal(0);
                RowSetIterator rsi = pmtVo.createRowSetIterator(null);
                while (rsi.hasNext()) {
                    Row rw = rsi.next();
                    if (rw.getAttribute("PayAmt") != null) {
                        BigDecimal PayAmt = (BigDecimal)rw.getAttribute("PayAmt");
                        num = num.add(PayAmt);
                    }
                }
                rsi.closeRowSetIterator();
                if (amt.compareTo(zero) == 1 && amt.compareTo(totAmt) != 1) {
                    remain = totAmt.subtract(num);
                    Integer payMode = 160;
                    if (currSo.getAttribute("TransPayMode") != null) {
                        payMode = Integer.parseInt(currSo.getAttribute("TransPayMode").toString());
                    }
                    if (remain.subtract(amt).compareTo(zero) == -1) {
                        //  String msg2 = "Total Payment Amount must be less than total amount.";
                        String msg2 = resolvElDCMsg("#{bundle['MSG.981']}").toString();
                        FacesMessage message2 = new FacesMessage(msg2);
                        message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message2);
                    } else if (dt != null && (amt != null || amt.compareTo(zero) == 1)) {
                        Row pmtCurr = pmtVo.createRow();
                        pmtCurr.setAttribute("PayDt", dt);
                        pmtCurr.setAttribute("PayAmt", amt);
                        pmtCurr.setAttribute("TotAmt", totAmt);
                        pmtCurr.setAttribute("UsrIdCreate", p_user_id);
                        pmtCurr.setAttribute("AdvFlg", flg);
                        pmtCurr.setAttribute("PayMode", payMode);
                        remain = remain.subtract(amt);
                    }
                    if (remain.compareTo(zero) == 0) {
                        currSo.setAttribute("TransPayAmt", new Number(0));
                    } else if (remain.compareTo(zero) == 1) {
                        currSo.setAttribute("TransPayAmt", remain);
                    }
                    currSo.setAttribute("TransPayDt", null);
                    currSo.setAttribute("TransAdvFlg", "N");
                } else if (amt.compareTo(totAmt) == 1) {
                    /*  String msg2 =
                        "Payment amount " + amt + " must be less than equals to Total Invoice amount " + totAmt;
                    */
                    String msg2 =
                        resolvElDCMsg("#{bundle['MSG.986']}").toString() + amt + resolvElDCMsg("#{bundle['MSG.988']}").toString() +
                        totAmt;
                    FacesMessage message2 = new FacesMessage(msg2);
                    message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message2);
                } else {
                    // String msg2 = "Amount " + amt + " must be greater than Zero.";
                    String msg2 =
                        resolvElDCMsg("#{bundle['MSG.990']}").toString() + amt + resolvElDCMsg("#{bundle['MSG.992']}").toString();
                    FacesMessage message2 = new FacesMessage(msg2);
                    message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message2);
                }
            } else {
                // String msg2 = "Please specify Payment amount.";
                String msg2 = resolvElDCMsg("#{bundle['MSG.422']}").toString();
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);
            }
        } else {
            // String msg2 = "Please specify Payment Date.";
            String msg2 = resolvElDCMsg("#{bundle['MSG.423']}").toString();
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message2);
        }
    }

    public String paymentDateValidation(Timestamp paydt) {
        ViewObject slsPmt = this.getSlsInvPmntSchdl();
        if (paydt != null) {
            Row rows[] = slsPmt.getFilteredRows("PayDt", paydt);
            if (rows.length > 0) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return null;
        }
    }


    public void removeTaxItemWise() {
        Row currRw = getSlsInvShipItm().getCurrentRow();
        if (currRw != null) {
            ViewObjectImpl tr = getSlsInvTrItm();
            ViewObjectImpl trline = getSlsInvTrLineItm();
            //System.out.println(tr.getRowCount());
            //System.out.println(trline.getRowCount());
            RowSetIterator rsiTrline = trline.createRowSetIterator(null);
            //System.out.println("Tr line row count :"+rsiTrline.getRowCount());
            while (rsiTrline.hasNext()) {
                Row rw = rsiTrline.next();
                rw.remove();
            }
            //System.out.println("Tr line row count :"+rsiTrline.getRowCount());
            rsiTrline.closeRowSetIterator();
            RowSetIterator rsiTr = tr.createRowSetIterator(null);
            ///System.out.println("Tr  row count :"+rsiTr.getRowCount());
            while (rsiTr.hasNext()) {
                Row rw = rsiTr.next();
                rw.remove();
            }
            //System.out.println("Tr  row count :"+rsiTr.getRowCount());
            rsiTr.closeRowSetIterator();
            //System.out.println(tr.getRowCount());
            //System.out.println(trline.getRowCount());
            currRw.setAttribute("TaxRuleFlg", "N");
            getSlsInvShipItm().executeQuery();
            tr.executeQuery();
            trline.executeQuery();
            this.getSlsInv().getCurrentRow().setAttribute("TransTaxAmountSp", new BigDecimal(0));
        }
    }

    public void removeTaxInvoiceWise() {
        ViewObjectImpl tr = getSlsInvTr();
        ViewObjectImpl trline = getSlsInvTr();
        RowSetIterator rsiTr = tr.createRowSetIterator(null);
        while (rsiTr.hasNext()) {
            Row rw = rsiTr.next();
            rw.remove();
        }
        rsiTr.closeRowSetIterator();
        RowSetIterator rsiTrline = trline.createRowSetIterator(null);
        while (rsiTrline.hasNext()) {
            Row rw = rsiTrline.next();
            rw.remove();
        }
        rsiTrline.closeRowSetIterator();
        tr.executeQuery();
        trline.executeQuery();
    }

    /**
     * For the purpose of searching on InvoiceSearch1
     */
    public void search() {
        TempSearchPanelVORowImpl currentRow = (TempSearchPanelVORowImpl)this.getTempSearchPanel1().getCurrentRow();
        InvoiceSearchVOImpl impl = (InvoiceSearchVOImpl)this.getInvoiceSearch1();
        impl.setDocIdBind(currentRow.getDocId());
        impl.setEoIdBind(currentRow.getEoNm());
        impl.setCurrIdBind(currentRow.getCurrId());
        impl.setStatusBind(currentRow.getSIStatus());
        impl.setFromNoOfShipmentBind(currentRow.getFromNumberOfItms());
        impl.setToNoOfShipmentBind(currentRow.getToNumberOfItms());
        impl.setFromSIAmountBind(currentRow.getFromSIAmount());
        impl.setToSIAmountBind(currentRow.getToSIAmount());
        impl.setFromSIdtBind(currentRow.getFromDocDt());
        impl.setSubTypeBind(currentRow.getInvSubTyp());
        System.out.println("Sub type is:  "+currentRow.getInvSubTyp());
        Timestamp dt = currentRow.getToDocDt();
        if (dt != null) {
            Date date;
            try {
                date = dt.dateValue();
                date.setDate(date.getDate() + 1);
                //System.out.println("Date is :"+date);
                dt = new Timestamp(date);
            } catch (SQLException e) {
            }
        }
        impl.setToSIdtBind(dt);
        impl.executeQuery();
    }

    /**
     * For the purpose of reset on InvoiceSearch1
     */
    public void reset() {

        InvoiceSearchVOImpl impl = this.getInvoiceSearch1();
        if (impl != null) {
            impl.setDocIdBind(null);
            impl.setEoIdBind(-1);
            impl.setCurrIdBind(null);
            impl.setStatusBind(null);
            impl.setSubTypeBind(null);
            impl.setFromNoOfShipmentBind(null);
            impl.setToNoOfShipmentBind(null);
            impl.setFromSIAmountBind(null);
            impl.setToSIAmountBind(null);
            impl.setFromSIdtBind(null);
            impl.setToSIdtBind(null);
        }
        this.getInvoiceSearch1().executeQuery();
        this.getTempSearchPanel1().executeQuery();
    }

    /**
     * Container's getter for SlsInvTnc.
     * @return SlsInvTnc
     */
    public ViewObjectImpl getSlsInvTnc() {
        return (ViewObjectImpl)findViewObject("SlsInvTnc");
    }

    /**
     * Container's getter for SlsInv2SlsInvTncVL1.
     * @return SlsInv2SlsInvTncVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvTncVL1() {
        return (ViewLinkImpl)findViewLink("SlsInv2SlsInvTncVL1");
    }

    /**
     * Container's getter for TnCView.
     * @return TnCView
     */
    public ViewObjectImpl getTnCView() {
        return (ViewObjectImpl)findViewObject("TnCView");
    }

    /**
     * Container's getter for SlsInvPmntSchdl.
     * @return SlsInvPmntSchdl
     */
    public SlsInvPmntSchdlVOImpl getSlsInvPmntSchdl() {
        return (SlsInvPmntSchdlVOImpl)findViewObject("SlsInvPmntSchdl");
    }

    /**
     * Container's getter for SlsInv2SlsInvPmntSchdlVL1.
     * @return SlsInv2SlsInvPmntSchdlVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvPmntSchdlVL1() {
        return (ViewLinkImpl)findViewLink("SlsInv2SlsInvPmntSchdlVL1");
    }


    public void DiscountValidation(BigDecimal DiscVal) {
        if (DiscVal != null) {
            ViewObjectImpl inv = getSlsInv();
            Row rw = inv.getCurrentRow();
            if (rw != null) {
                if (rw.getAttribute("DiscType") != null) {
                    String DiscType = (String)rw.getAttribute("DiscType");
                    BigDecimal zero = new BigDecimal(0);
                    if ("P".equals(DiscType)) {
                        BigDecimal Amount = (BigDecimal)rw.getAttribute("TransAmtAfterTaxSp");
                        Amount = Amount.multiply(DiscVal);
                        if (DiscVal.compareTo(zero) == -1) {
                            // String msg2 = "Discount percentage must be greater than zero.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.995']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        } else if (DiscVal.compareTo(new BigDecimal(100)) == 1) {
                            // String msg2 = "Discount percentage must be less than 100.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.996']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        } else if (Amount.compareTo((BigDecimal)rw.getAttribute("TransAmtAfterTaxSp")) == 1) {
                            // String msg2 = "Discount Amount should be less than the After tax Amount.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.998']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        }
                    } else if ("A".equalsIgnoreCase(DiscType)) {
                        if (DiscVal.compareTo(zero) == -1) {
                            //  String msg2 = "Discount amount must be greater than zero.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.1000']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        } else if (DiscVal.compareTo((BigDecimal)rw.getAttribute("TransAmtAfterTaxSp")) == 1) {
                            // String msg2 = "Discount Amount should be less than the After tax Amount.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.998']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        }
                    }
                }
            }
        }
    }


    public String setInvShpItm(Integer P_USR, String P_ship_ID) {
        //System.out.println("Pship id :"+P_ship_ID);
        //this.getDBTransaction().postChanges();
        String val = "N";
        Row currInv = getSlsInv().getCurrentRow();
        String retval = "";
        if (currInv != null) {
            try {
                System.out.println("********");
                System.out.println("sloc  " + currInv.getAttribute("SlocId") + " cld " +
                                   currInv.getAttribute("CldId") + " org " + currInv.getAttribute("OrgId") + " ho " +
                                   currInv.getAttribute("HoOrgId") + " eo " + currInv.getAttribute("EoId") + " ship " +
                                   P_ship_ID + " user " + P_USR + " doc  " + currInv.getAttribute("DocId") + " dt " +
                                   currInv.getAttribute("DocDt") + " curr rate " + currInv.getAttribute("CurrRate"));
                String driver=getdrivername();
                if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                retval =
                            (String)callStoredFunction(Types.VARCHAR, "call FN_INS_SHIPITM_INV(?,?,?,?,?,?,?,?,?,?)", new Object[] { currInv.getAttribute("SlocId"),
                                                                                                                                currInv.getAttribute("CldId"),
                                                                                                                                currInv.getAttribute("OrgId"),
                                                                                                                                currInv.getAttribute("HoOrgId"),
                                                                                                                                currInv.getAttribute("EoId"),
                                                                                                                                P_ship_ID,
                                                                                                                                P_USR,
                                                                                                                                currInv.getAttribute("DocId"),
                                                                                                                                currInv.getAttribute("DocDt"),
                                                                                                                                currInv.getAttribute("CurrRate") });   
                }
                else
                {
                retval =
                        (String)callStoredFunction(Types.VARCHAR, "FN_INS_SHIPITM_INV(?,?,?,?,?,?,?,?,?,?)", new Object[] { currInv.getAttribute("SlocId"),
                                                                                                                            currInv.getAttribute("CldId"),
                                                                                                                            currInv.getAttribute("OrgId"),
                                                                                                                            currInv.getAttribute("HoOrgId"),
                                                                                                                            currInv.getAttribute("EoId"),
                                                                                                                            P_ship_ID,
                                                                                                                            P_USR,
                                                                                                                            currInv.getAttribute("DocId"),
                                                                                                                            currInv.getAttribute("DocDt"),
                                                                                                                            currInv.getAttribute("CurrRate") });
                }
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_SHIPITM_INV' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
            Row row = getSlsInvDtl().getCurrentRow();
            if (row != null) {
                row.setAttribute("ShipId", P_ship_ID);
                //System.out.println(P_ship_ID);
                if (P_ship_ID != null) {
                    //System.out.println("P_ship_ID"+P_ship_ID);
                    Row[] xx = getLOVShipment().getFilteredRows("DocId", P_ship_ID);
                    //System.out.println("length of rows :"+xx.length);
                    if (xx.length > 0) {
                        LOVShipmentVORowImpl r = (LOVShipmentVORowImpl)xx[0];
                        //System.out.println("doc id :"+r.getDocDt()+" ShipVal :"+ r.getShipVal());
                        row.setAttribute("ShipDt", r.getDocDt());
                        row.setAttribute("ShipAmtSp", r.getShipVal());
                        System.out.println("In Shipment id " + currInv.getAttribute("CurrConvTrans"));
                        if (currInv.getAttribute("CurrConvTrans").equals((Object)("I"))) {
                            BigDecimal c = (BigDecimal)currInv.getAttribute("CurrRate");
                            row.setAttribute("ShipAmtBs", r.getShipVal().multiply(c));
                            //System.out.println("ShipAmtBs from Invoice :"+row.getAttribute("ShipAmtBs"));
                        } else {
                            BigDecimal c = r.getCurrConvFctr();
                            if (c == null) {
                                c = new BigDecimal(1);
                                //System.out.println("Setting conversion factor to '1' as convfact from shipment is null");
                            }
                            System.out.println("");
                            row.setAttribute("ShipAmtBs", r.getShipVal().multiply(c));
                            System.out.println("ShipAmtBs from Invoice :"+row.getAttribute("ShipAmtBs"));
                        }
                    }
                }
            }

            //System.out.println("retval  " + retval);
            if (retval.equalsIgnoreCase("1")) {
                val = "Y";
                getSlsInvShipItm().executeQuery();
                getSlsInvTrItm().executeQuery();
                getSlsInvTrLineItm().executeQuery();
            } else {
                val = "N";
            }
            //this.getDBTransaction().postChanges();
        }
        return val;
    }

    public String getShipmentId(String ShipmentDispId) {
        //.out.println(ShipmentDispId);
        String shpDesc = null;
        SlsInvVORowImpl currentRow = (SlsInvVORowImpl)this.getSlsInv().getCurrentRow();
        if (ShipmentDispId != null) {
            Row[] xx = currentRow.getLOVShipmentVO1().getFilteredRows("DispId", ShipmentDispId);
            if (xx.length > 0) {
                shpDesc = xx[0].getAttribute("DocId").toString();
            }
        }
        //System.out.println(shpDesc);
        return shpDesc;
    }

    public void checkTrforItem(Integer UserId) {
        ViewObjectImpl shpItm = getSlsInvShipItm();
        Row currShpItm = shpItm.getCurrentRow();
        if (currShpItm != null) {
            String TaxRuleFlg = "N";
            if (currShpItm.getAttribute("TaxRuleFlg") != null) {
                TaxRuleFlg = currShpItm.getAttribute("TaxRuleFlg").toString();
            } else {
                TaxRuleFlg = "N";
            }
            if (TaxRuleFlg.equalsIgnoreCase("Y")) {
                ViewObjectImpl trItm = getSlsInvTrItm();
                int cnt = trItm.getRowCount();
                if (cnt == 0) {
                    Row newTrRw = trItm.createRow();
                    newTrRw.setAttribute("TaxableAmt", currShpItm.getAttribute("ItmAmtGsSp"));
                    newTrRw.setAttribute("SrNoDest", "0");
                    newTrRw.setAttribute("SrNo", 1);
                    newTrRw.setAttribute("UsrIdCreate", UserId);
                    newTrRw.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                    trItm.insertRow(newTrRw);
                } else {
                    Row[] allRowsInRange = trItm.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        allRowsInRange[0].setAttribute("TaxableAmt", currShpItm.getAttribute("ItmAmtGsSp"));
                    }
                    //trItm.getCurrentRow().
                }
            }
        }
    }

    /**
     * Container's getter for SlsInvShipItm.
     * @return SlsInvShipItm
     */
    public SlsInvShipItmVOImpl getSlsInvShipItm() {
        return (SlsInvShipItmVOImpl)findViewObject("SlsInvShipItm");
    }

    /**
     * Container's getter for SlsInvDtl2SlsInvShipItmVL1.
     * @return SlsInvDtl2SlsInvShipItmVL1
     */
    public ViewLinkImpl getSlsInvDtl2SlsInvShipItmVL1() {
        return (ViewLinkImpl)findViewLink("SlsInvDtl2SlsInvShipItmVL1");
    }


    public void executeVoForItemwiseTax() {

        getSlsInvShipItm().executeQuery();
        getSlsInvTrItm().executeQuery();
        getSlsInvTrLineItm().executeQuery();
    }

    public void deleteShpDtl() {
        Row currRw = this.getSlsInvDtl().getCurrentRow();
        //this.getDBTransaction().postChanges();

        if (currRw != null) {
            String CldId = null;
            Integer SlocId = null;
            String OrgId = null;
            String HoOrgId = null;
            String DocId = null;
            String ShipId = null;
            if (currRw.getAttribute("CldId") != null) {
                CldId = currRw.getAttribute("CldId").toString();
            }
            if (currRw.getAttribute("SlocId") != null) {
                SlocId = (Integer)currRw.getAttribute("SlocId");
            }
            if (currRw.getAttribute("OrgId") != null) {
                OrgId = currRw.getAttribute("OrgId").toString();
            }
            if (currRw.getAttribute("HoOrgId") != null) {
                HoOrgId = currRw.getAttribute("HoOrgId").toString();
            }
            if (currRw.getAttribute("DocId") != null) {
                DocId = currRw.getAttribute("DocId").toString();
            }
            if (currRw.getAttribute("ShipId") != null) {
                ShipId = currRw.getAttribute("ShipId").toString();
            }

            System.out.println("Cld " + CldId + " Sloc " + SlocId + " Org " + OrgId + " Ho " + HoOrgId + " Doc " +
                               DocId + " Ship " + ShipId);
            /*  StringBuffer itmId = new StringBuffer("");
            StringBuffer shipId = new StringBuffer("");
            SlsInvTrVOImpl impl = this.getSlsInvTr();
            SlsInvTrLineVOImpl invTrLineItm = this.getSlsInvTrLineItm();
            SlsInvShipItmVOImpl invShipItm = this.getSlsInvShipItm();
            SlsInvDtlVOImpl invDtl = this.getSlsInvDtl();
            Row currentRow = invDtl.getCurrentRow();
            if(currentRow != null){
                shipId = new StringBuffer(currentRow.getAttribute("ShipId").toString());
            }
            if(shipId != null || !shipId.toString().equals("")){
                Row[] itmRows = invTrLineItm.getFilteredRows("ShipId", shipId.toString());
                for(Row r : itmRows){
                    itmId = new StringBuffer(r.getAttribute("ItmId").toString());
                }
            } */
            System.out.println("cld " + CldId + " sloc " + SlocId + " ho " + HoOrgId + " org " + OrgId + " ship " +
                               ShipId + " doc " + DocId);
            try {
                String val =null;
                String driver=getdrivername();
                if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                    val= (String)callStoredFunction(Types.VARCHAR, "call FN_DEL_INV_SHP_ITM(?,?,?,?,?,?)", new Object[] { CldId,
                                                                                                                SlocId,
                                                                                                                HoOrgId,
                                                                                                                OrgId,
                                                                                                                ShipId,
                                                                                                                DocId });
                }
                else
                {
                   val=  (String)callStoredFunction(Types.VARCHAR, "FN_DEL_INV_SHP_ITM(?,?,?,?,?,?)", new Object[] { CldId,
                                                                                                                SlocId,
                                                                                                                HoOrgId,
                                                                                                                OrgId,
                                                                                                                ShipId,
                                                                                                                DocId });

                }
                currRw.remove();
                // chkProcessCalculation();
                System.out.println("Return value is " + val);
                /*   SlsInvShipItmVOImpl impl = this.getSlsInvShipItm();
                RowQualifier rowQualifier = new RowQualifier(impl);
                rowQualifier.setWhereClause("ShipId='"+ShipId+"'");
               System.out.println(" query "+rowQualifier.getExprStr());

                Row[] filteredRows = impl.getFilteredRows(rowQualifier);
                if(filteredRows != null && filteredRows.length>0){
                    for(Row r : filteredRows){
                        r.remove();
                    }
                    System.out.println("Inside InvShipItm");
                }
                this.getSlsInvShipItm().executeQuery();

                SlsInvTrVOImpl invTr = this.getSlsInvTr();
                RowQualifier rQ = new RowQualifier(invTr);
                rQ.setWhereClause("ShipId='"+ShipId+"'");
                Row[] fR = invTr.getFilteredRows(rowQualifier);
                if(fR != null && fR.length>0){
                    for(Row r1 : fR){
                        r1.remove();
                    }
                    System.out.println("Inside InvTr");
                }




                SlsInvTrLineVOImpl invTrLine = this.getSlsInvTrLine1();
                RowQualifier qual = new RowQualifier(invTrLine);
                qual.setWhereClause("ShipId='"+ShipId+"'");
                Row[] filter = invTrLine.getFilteredRows(qual);
                if(filter != null && filter.length>0){
                    for(Row r2 : filter){
                        r2.remove();
                    }
                    System.out.println("Inside InvTrLines");
                }
                this.getSlsInvTrLine1().executeQuery();

                System.out.println("Key "+currRw.getKey());
                //currRw.remove();   */


                this.getSlsInvShipItm().executeQuery();
                this.getSlsInvTrLine1().executeQuery();
                this.getSlsInvTr().executeQuery();
                this.getSlsInvDtl().executeQuery();

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_DEL_INV_SHP_ITM' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
            //System.out.println("_________________ 1");
            this.getSlsInvShipItm().executeQuery();
            //System.out.println("_________________ 2");
            this.getSlsInvTrItm().executeQuery();
            //System.out.println("_________________ 3");
            this.getSlsInvTrLineItm().executeQuery();
            //System.out.println("_________________ 4");
            //currRw.remove();
            // System.out.println("_________________ 5");
            getSlsInvDtl().executeQuery();
            //System.out.println("_________________ 6");
            setTaxAmount();
            System.out.println("_________________ 7");
        }

        System.out.println("Outside");
        //getSlsInvDtl().executeQuery();
        //getSlsInvShipItm().executeQuery();
        //getSlsInvTrItm().executeQuery();
        //getSlsInvTrLineItm().executeQuery();
    }

    public void setTotalInvAmt() {
        Row rw = getSlsInv().getCurrentRow();
        if (rw != null) {
            BigDecimal totSp = new BigDecimal(0);
            BigDecimal totBs = new BigDecimal(0);
            if (rw.getAttribute("TransAmtAfterOcSp") != null) {
                totSp = (BigDecimal)rw.getAttribute("TransAmtAfterOcSp");
            }
            if (rw.getAttribute("TransAmtAfterOcBs") != null) {
                totBs = (BigDecimal)rw.getAttribute("TransAmtAfterOcBs");
            }

            rw.setAttribute("TotAmtSp", totSp);
            rw.setAttribute("TotAmtBs", totSp);
        }

    }

    public void setTaxRuleFlg(String ShpId) {
        Row currRwInv = getSlsInv().getCurrentRow();
        int count = 0;
        if (currRwInv != null) {
            Row currRw = getSlsInvDtl().getCurrentRow();
            if (currRw != null) {
                String CldId = null;
                Integer SlocId = null;
                String OrgId = null;
                String HoOrgId = null;
                String DocId = null;


                if (currRw.getAttribute("CldId") != null) {
                    CldId = currRw.getAttribute("CldId").toString();
                }
                if (currRw.getAttribute("SlocId") != null) {
                    SlocId = (Integer)currRw.getAttribute("SlocId");
                }
                if (currRw.getAttribute("OrgId") != null) {
                    OrgId = currRw.getAttribute("OrgId").toString();
                }
                if (currRw.getAttribute("HoOrgId") != null) {
                    HoOrgId = currRw.getAttribute("HoOrgId").toString();
                }
                if (currRw.getAttribute("DocId") != null) {
                    DocId = currRw.getAttribute("DocId").toString();
                }

                try {      
                    String driver=getdrivername();
                    if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                    count =
                                (Integer)callStoredFunction(Types.INTEGER, "call FN_INS_INV_TAX_COUNT(?,?,?,?,?,?)", new Object[] { CldId,
                                                                                                                               SlocId,
                                                                                                                               OrgId,
                                                                                                                               HoOrgId,
                                                                                                                               DocId,
                                                                                                                               ShpId });   
                    }
                    else
                    {
                    count =
                            (Integer)callStoredFunction(Types.INTEGER, "FN_INS_INV_TAX_COUNT(?,?,?,?,?,?)", new Object[] { CldId,
                                                                                                                           SlocId,
                                                                                                                           OrgId,
                                                                                                                           HoOrgId,
                                                                                                                           DocId,
                                                                                                                           ShpId });
                    }
                    } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'FN_INS_INV_TAX_COUNT' !");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                }


                BigDecimal taxAmt = getTaxAmt(CldId, SlocId, OrgId, HoOrgId, DocId);
                //System.out.println("Count is :"+count);x
                //System.out.println("Tax amount is :"+taxAmt);
                if (count > 0) {
                    currRwInv.setAttribute("TaxRuleFlg", "D");
                    currRwInv.setAttribute("TaxAfterDiscFlg", "Y");
                    currRwInv.setAttribute("TransTaxAmountSp", taxAmt);
                    //System.out.println(currRwInv.getAttribute("TransTaxAmountSp") + "------tax amount----");

                }
                //this.getSlsInvTrLineItm().executeQuery();
            }

        }
        this.getSlsInvTr().executeQuery();
        System.out.println("Total TR rows : "+getSlsInvTr().getEstimatedRowCount()+" Amoount :"+currRwInv.getAttribute("TransTaxAmountSp"));
    }


    public BigDecimal getTaxAmt(String CldId, Integer SlocId, String OrgId, String HoOrgId, String DocId) {
        BigDecimal taxAmt = new BigDecimal(0);
        try {
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            taxAmt =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "call FN_INS_INV_TAX_AMT(?,?,?,?,?)", new Object[] { CldId,
                                                                                                                      SlocId,
                                                                                                                      OrgId,
                                                                                                                      HoOrgId,
                                                                                                                      DocId });   
            }
            else
            {
            taxAmt =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "FN_INS_INV_TAX_AMT(?,?,?,?,?)", new Object[] { CldId,
                                                                                                                  SlocId,
                                                                                                                  OrgId,
                                                                                                                  HoOrgId,
                                                                                                                  DocId });
            }
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_INS_INV_TAX_AMT' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        //System.out.println("tax amount inside method  " + taxAmt);
        return taxAmt;
    }


    public void setTaxAmount() {
        Row currRw = getSlsInv().getCurrentRow();
        if (currRw != null) {
            String CldId = null;
            Integer SlocId = null;
            String OrgId = null;
            String HoOrgId = null;
            String DocId = null;


            if (currRw.getAttribute("CldId") != null) {
                CldId = currRw.getAttribute("CldId").toString();
            }
            if (currRw.getAttribute("SlocId") != null) {
                SlocId = (Integer)currRw.getAttribute("SlocId");
            }
            if (currRw.getAttribute("OrgId") != null) {
                OrgId = currRw.getAttribute("OrgId").toString();
            }
            if (currRw.getAttribute("HoOrgId") != null) {
                HoOrgId = currRw.getAttribute("HoOrgId").toString();
            }
            if (currRw.getAttribute("DocId") != null) {
                DocId = currRw.getAttribute("DocId").toString();
            }
            BigDecimal taxAmt = new BigDecimal(0);
            try {
                String driver=getdrivername();
                if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                taxAmt =
                            (BigDecimal)callStoredFunction(Types.NUMERIC, "call FN_INS_INV_TAX_AMT(?,?,?,?,?)", new Object[] { CldId,
                                                                                                                          SlocId,
                                                                                                                          OrgId,
                                                                                                                          HoOrgId,
                                                                                                                          DocId });   
                }
                else
                {
                taxAmt =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "FN_INS_INV_TAX_AMT(?,?,?,?,?)", new Object[] { CldId,
                                                                                                                      SlocId,
                                                                                                                      OrgId,
                                                                                                                      HoOrgId,
                                                                                                                      DocId });
                }
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_INV_TAX_AMT' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }

            System.out.println(taxAmt + "----tax AMount----");
            currRw.setAttribute("TransTaxAmountSp", taxAmt);
            System.out.println("Current Row");
        }
    }

    public void InvoiceCalcu(StringBuffer DocId) {

        StringBuffer docId = null;
        Row currentRow = this.getSlsInv().getCurrentRow();
        if (DocId != null) {
            docId = DocId;
        } else {
            docId = new StringBuffer(currentRow.getAttribute("DocId").toString());
        }
        Integer currIdSp = 0;
        Integer currIdBs = 0;
        BigDecimal convFact = new BigDecimal(1.00);
        if (currentRow != null) {
            currIdSp = (Integer)currentRow.getAttribute("CurrIdSp");
            currIdBs = (Integer)currentRow.getAttribute("CurrIdBs");
            convFact = (BigDecimal)currentRow.getAttribute("CurrRate");
            
        }
        try {
            this.getDBTransaction().postChanges();
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                callStoredFunction(Types.INTEGER, "call FN_INS_INV_CALC(?,?,?,?,?,?,?,?,?,?)",
                                   new Object[] { getSlocId(), getCldId().toString(), getHoOrgId().toString(),
                                                  getOrgId().toString(), docId.toString(), getUserId(), 1, currIdSp,
                                                  currIdBs, convFact });   
            }
            else
            {
            callStoredFunction(Types.INTEGER, "FN_INS_INV_CALC(?,?,?,?,?,?,?,?,?,?)",
                               new Object[] { getSlocId(), getCldId().toString(), getHoOrgId().toString(),
                                              getOrgId().toString(), docId.toString(), getUserId(), 1, currIdSp,
                                              currIdBs, convFact });

            }
            getSlsInvCalc().executeQuery();
            System.out.println("Processing Calculations.");
            getSlsInvDtl().executeQuery();
            /* SlsInvPmntSchdlVOImpl impl = this.getSlsInvPmntSchdl();
            impl.executeQuery(); */
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'SLS.FN_INS_INV_CALC' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for SlsInvCalc.
     * @return SlsInvCalc
     */
    public ViewObjectImpl getSlsInvCalc() {
        return (ViewObjectImpl)findViewObject("SlsInvCalc");
    }

    /**
     * Container's getter for SlsInv2SlsInvCalcVL1.
     * @return SlsInv2SlsInvCalcVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvCalcVL1() {
        return (ViewLinkImpl)findViewLink("SlsInv2SlsInvCalcVL1");
    }

    /**
     * Container's getter for InvoiceSearch1.
     * @return InvoiceSearch1
     */
    public InvoiceSearchVOImpl getInvoiceSearch1() {
        return (InvoiceSearchVOImpl)findViewObject("InvoiceSearch1");
    }

    /**
     * Container's getter for TempSearchPanel1.
     * @return TempSearchPanel1
     */
    public ViewObjectImpl getTempSearchPanel1() {
        return (ViewObjectImpl)findViewObject("TempSearchPanel1");
    }

    /**
     * Method for resolving the El
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     *  For setting initial Bind variables.
     */
    public void setBindVariablesInSearchView() {
        InvoiceSearchVOImpl impl = (InvoiceSearchVOImpl)this.getInvoiceSearch1();
        impl.setCldIdBInd(getCldId().toString());
        impl.setOrgIdBind(getOrgId().toString());
        impl.setHoOrgIdBind(getHoOrgId().toString());
        impl.setSlocIdBind(getSlocId());
        impl.setEoIdBind(-1);
        System.out.println("CLD_ID :" + getCldId());
        System.out.println("ORG_ID :" + getOrgId());
        System.out.println("HO_ORG_ID :" + getHoOrgId());
        System.out.println("SLOC_ID :" + getSlocId());
        impl.executeQuery();
    }

    /**
     *  Set the Selected DocId in the view page in view mode
     */
    public void setSelectDocIdOnViewPage() {
        StringBuffer Docid = null;
        SlsInvVOImpl impl = (SlsInvVOImpl)this.getSlsInv();
        InvoiceSearchVORowImpl r = ((InvoiceSearchVORowImpl)this.getInvoiceSearch1().getCurrentRow());
        if (r != null) {
            Docid = new StringBuffer(r.getDocId());
        } else {
            try {
                Docid = new StringBuffer(resolvEl("#{pageFlowScope.DOC_ID}"));
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling taskflow 'SlsSalesInvoiceAppAddTF'!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }

        }
        impl.setCldIdBind(getCldId().toString());
        impl.setSlocIdBind(getSlocId());
        impl.setOrgIdBind(getOrgId().toString());
        impl.setHoOrgIdBind(getHoOrgId().toString());

        if (Docid != null) {
            impl.setDocIdBind(Docid.toString());
            impl.executeQuery();
            //System.out.println("DOCID : " + Docid);
        }

    }

    /**
     * Method to refresh the cutomer LOV on selection of invoice type
     * @param InvType
     */
    public void refreshCustomerLOV(Integer InvType) {
        //        SlsInvVORowImpl currentRow = (SlsInvVORowImpl)this.getSlsInv().getCurrentRow();
        //        if (InvType == 348) {
        //            //System.out.println(":" + 68);
        //            currentRow.setEoTypeTrans(null);
        //
        //        } else if (InvType == 349) {
        //            //System.out.println(":" + 387);
        //            currentRow.setEoTypeTrans(387);
        //        }

        //currentRow.getLOVCustomerVO1().executeQuery();
    }

    /**
     * Method to handle exception taskflow
     */
    public void exceptionHandler() {
        // FacesMessage message = new FacesMessage("There have been an error! </br> Contact Ess!!");
        FacesMessage message =
            new FacesMessage(resolvElDCMsg("#{bundle['MSG.895']}").toString() + " </br> " + resolvElDCMsg("#{bundle['MSG.897']}").toString());
        message.setSeverity(FacesMessage.SEVERITY_ERROR);
        FacesContext.getCurrentInstance().addMessage(null, message);
    }

    /**
     * Container's getter for SlsInvAdj1.
     * @return SlsInvAdj1
     */
    public ViewObjectImpl getSlsInvAdj1() {
        return (ViewObjectImpl)findViewObject("SlsInvAdj1");
    }

    /**
     * Container's getter for SlsInvAdjVL1.
     * @return SlsInvAdjVL1
     */
    public ViewLinkImpl getSlsInvAdjVL1() {
        return (ViewLinkImpl)findViewLink("SlsInvAdjVL1");
    }

    /**
     * Method to insertAdjustment at create time
     */
    public void insertAdjustment() {
        Key k = null;
        if (this.getSlsInv().getCurrentRow() != null) {
            Integer EoId = (Integer)this.getSlsInv().getCurrentRow().getAttribute("EoId");
            CoaIdFromEoIdVOImpl coaLov = (CoaIdFromEoIdVOImpl)this.getCoaIdFromEoId1();
            coaLov.setSlocIdBind(getSlocId());
            coaLov.setHoOrgIdBind(getHoOrgId().toString());
            coaLov.setOrgIdBind(getOrgId().toString());
            coaLov.setCldIdBind(getCldId().toString());
            coaLov.setEoIdBind(EoId);
            coaLov.executeQuery();
            Row[] xx = coaLov.getFilteredRows("EoId", EoId);
            //System.out.println("EoID : "+EoId);
            //System.out.println("Row count :"+xx.length);
            Integer coaId = 0;
            for (Row r : xx) {
                coaId = (Integer)r.getAttribute("CoaId");
                //System.out.println("COA ID :"+r.getAttribute("CoaId"));
            }
            // Delete rows on repeted adjustemnt populate
            Row currentRow = this.getSlsInv().getCurrentRow();
            Integer currId = 73;
            BigDecimal cc = new BigDecimal(1);
            if (currentRow != null) {
                currId = (Integer)currentRow.getAttribute("CurrIdSp");
                cc = (BigDecimal)currentRow.getAttribute("CurrRate");
            }

            RowSetIterator cr = this.getSlsInvAdj1().createRowSetIterator(null);
            while (cr.hasNext()) {
                Row next = cr.next();
                if (next.getAttribute("InvAmtAdj").equals(new BigDecimal(0))) {
                    next.remove();
                }
            }
            cr.closeRowSetIterator();
            this.getSlsInvAdj1().executeQuery();

            RowSetIterator cr1 = this.getSlsInvAdj1().createRowSetIterator(null);
            //System.out.println("cr1 : "+cr1.getRowCount());
            ViewObjectImpl aR1 = this.getLovAr1();
            aR1.setNamedWhereClauseParam("CoaIdBind", coaId);
            aR1.setNamedWhereClauseParam("OrgIdBind", getOrgId().toString());
            aR1.executeQuery();
            Row[] allRowsInRange = aR1.getAllRowsInRange();
            //System.out.println("Count :"+allRowsInRange.length);
            RowSet rowSet = aR1.getRowSet();
            //System.out.println("Row count :"+rowSet.getRowCount());
            /* LOVARVOImpl ar = (LOVARVOImpl)this.getLOVAR1();
        ar.setCoaIdBind(coaId);
        ar.setOrgIdBind(orgId.toString());
        ar.executeQuery();  */
            //System.out.println("AR rowcount :"+aR1.getRowCount());
            RowSetIterator itr = aR1.createRowSetIterator(null);

            Integer i = 1;
            Integer count = 0;
            while (itr.hasNext()) {
                LovArVORowImpl next = (LovArVORowImpl)itr.next();
                cr1 = this.getSlsInvAdj1().createRowSetIterator(null);
                System.out.println("cr1 :" + cr1.getRowCount());
                if (cr1.getRowCount() != 0) {
                    count = 0;
                    while (cr1.hasNext()) {
                        Row next_2 = cr1.next();
                        //System.out.println("CoaId :"+(Integer)next_2.getAttribute("CoaId"));
                        //System.out.println("CoaId AR :"+next.getArapCoaId());
                        //System.out.println("GLVOU Id :"+next_2.getAttribute("GlVouId"));
                        //System.out.println("GLVOU Id AR:"+next.getArapVouId());
                        if ((next_2.getAttribute("CoaId").equals(next.getArapCoaId())) &&
                            next_2.getAttribute("GlVouId").equals(next.getArapVouId())) {
                            count = 1;
                        }
                        //System.out.println("Condition 1 :"+(next_2.getAttribute("CoaId").equals( next.getArapCoaId())));
                        //System.out.println("Condition 2 :"+( next_2.getAttribute("GlVouId").equals(next.getArapVouId())));
                    }
                }
                System.out.println("Count : " + count);
                if (count == 0) {
                    SlsInvAdjVORowImpl row = (SlsInvAdjVORowImpl)this.getSlsInvAdj1().createRow();
                    row.setCoaId(coaId);
                    row.setGlAmtSp(next.getArapAmtSp());
                    row.setGlVouDt(next.getArapVouDt());
                    row.setGlVouId(next.getArapVouId());
                    row.setGlAmtBs((next.getApCc()).multiply(next.getArapAmtSp()));
                    row.setArGlSlNo(next.getArapGlSlNo());
                    row.setArSlNo(next.getArapslNo());
                    System.out.println("curr : " + currId);
                    System.out.println("cc : " + cc);
                    row.setTranType(next.getArapAmtTyp());
                    row.setVouIdDisp(next.getDocTxnIdDisp());
                    row.setInvAmtOt(next.getArapNetAmtOt());
                    row.setCurrIdSpOld(next.getArapCurrIdSp());
                    row.setCurrIdSp(currId);
                    row.setCurrConvFctrOld(next.getApCc());
                    row.setCurrConvFctr(cc);
                    row.setSrNo(i);
                    i = i + 1;
                    this.getSlsInvAdj1().insertRow(row);
                    //System.out.println("Inserted : "+coaId+" "+next.getArapVouId()+" "+next.getArapVouDt());
                }


            }
            cr1.closeRowSetIterator();
            itr.closeRowSetIterator();
            //System.out.println("Row count :"+ this.getSlsInvAdj1().getRowCount());
            this.getSlsInvAdj1().executeQuery();
        }
    }

    /**
     * Method to set CoaId in SlsInvVo
     * @param EoNm
     */
    public void setCoaIdFromEo(StringBuffer EoNm) {
        SlsInvVORowImpl currentRow = (SlsInvVORowImpl)this.getSlsInv().getCurrentRow();
        //RowSet customerVO1 = currentRow.getLOVCustomerVO1();
        EoNmEoIdVOImpl eoIdVo = (EoNmEoIdVOImpl)getEoNmEoId1();
        eoIdVo.setSlocIdBind(getSlocId());
        eoIdVo.setOrgIdBind(getOrgId().toString());
        eoIdVo.setHoOrgBind(getHoOrgId().toString());
        eoIdVo.setCldIdBInd(getCldId().toString());
        eoIdVo.setEoNmBind(EoNm.toString());
        eoIdVo.executeQuery();

        Row[] filteredRows = eoIdVo.getFilteredRows("EoNm", EoNm.toString());
        Integer EoId = 0;
        if (filteredRows.length > 0) {
            EoId = (Integer)filteredRows[0].getAttribute("EoId");
        }
        //System.out.println("EoId = "+EoId +" No olf rows: "+filteredRows.length);
        CoaIdFromEoIdVOImpl coaIdFromEo = (CoaIdFromEoIdVOImpl)getCoaIdFromEoId1();
        coaIdFromEo.setSlocIdBind(getSlocId());
        coaIdFromEo.setCldIdBind(getCldId().toString());
        coaIdFromEo.setOrgIdBind(getOrgId().toString());
        coaIdFromEo.setHoOrgIdBind(getHoOrgId().toString());
        coaIdFromEo.setEoIdBind(EoId);
        coaIdFromEo.executeQuery();

        Row[] row = coaIdFromEo.getFilteredRows("EoId", EoId);
        Integer CoaId = null;

        if (row.length > 0) {
            CoaId = (Integer)row[0].getAttribute("CoaId");
        }
        //System.out.println("CoaId is : "+CoaId+ " No of rows : "+row.length);
        this.getSlsInv().getCurrentRow().setAttribute("CoaId", CoaId);

    }

    /**
     * Container's getter for LOVCustCoa1.
     * @return LOVCustCoa1
     */
    public ViewObjectImpl getLOVCustCoa1() {
        return (ViewObjectImpl)findViewObject("LOVCustCoa1");
    }

    /**
     * Container's getter for LOVAR1.
     * @return LOVAR1
     */
    public ViewObjectImpl getLOVAR1() {
        return (ViewObjectImpl)findViewObject("LOVAR1");
    }

    /**
     *  Set the Selected DocId after commit in view mode
     */
    public void setSelectDocIdOnCommit(StringBuffer DocId) {
        //System.out.println("Sent doc id : "+DocId);
        StringBuffer Docid = DocId;
        SlsInvVOImpl impl = (SlsInvVOImpl)this.getSlsInv();

        impl.setCldIdBind(getCldId().toString());
        impl.setSlocIdBind(getSlocId());
        impl.setOrgIdBind(getOrgId().toString());
        impl.setHoOrgIdBind(getHoOrgId().toString());

        if (Docid != null) {
            impl.setDocIdBind(Docid.toString());
            impl.executeQuery();
            //System.out.println("DOCID : " + Docid);
            this.getInvoiceSearch1().executeQuery();
        } else {
            //System.out.println("No doc id:" + DocId);
        }

    }

    /**
     * Method to get the current DocId before commit
     * @return
     */
    public StringBuffer getCurrentDocId() {
        if (this.getSlsInv().getCurrentRow() != null) {
            return new StringBuffer(this.getSlsInv().getCurrentRow().getAttribute("DocId").toString());
        } else {
            //System.out.println("Doc id is not find!");
            return new StringBuffer("No Doc id");
        }

    }

    /**
     * Container's getter for EoNmEoId1.
     * @return EoNmEoId1
     */
    public ViewObjectImpl getEoNmEoId1() {
        return (ViewObjectImpl)findViewObject("EoNmEoId1");
    }

    /**
     * Container's getter for CoaIdFromEoId1.
     * @return CoaIdFromEoId1
     */
    public CoaIdFromEoIdVOImpl getCoaIdFromEoId1() {
        return (CoaIdFromEoIdVOImpl)findViewObject("CoaIdFromEoId1");
    }

    /**
     * Method returns the userId of the user on which the SalesInvoice is pending
     * @return
     */
    public Integer slsInvoicePendingAt() {
        Object obj = null;
        StringBuffer DocIdTxn = new StringBuffer(this.getSlsInv().getCurrentRow().getAttribute("DocId").toString());
        Integer docType = (Integer)this.getSlsInv().getCurrentRow().getAttribute("InvType");
        System.out.println("Oreder type pendingCheck" + docType);
        //System.out.println("DOC_ID TXN : "+DocIdTxn);
        try {
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            obj =
                callProcedureOut(Types.INTEGER, "call GET_DOC_WF_CUR_USR(?,?,?,?,?,?,?)", new Object[] { getSlocId(), getCldId().toString(),
                                                                                        getOrgId().toString(), 21504,
                                                                                        DocIdTxn.toString(), docType });   
            }
            else
            {              
    
            obj =
callStoredFunction(Types.INTEGER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { getSlocId(), getCldId().toString(),
                                                                                    getOrgId().toString(), 21504,
                                                                                    DocIdTxn.toString(), docType });
            }
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_DOC_WF_CUR_USR' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        Integer usrId = 0;
        if (obj != null) {
            usrId = (Integer)obj;
        }

        //System.out.println("DOC PENDING AT USER ID : "+usrId);
        return usrId;

    }

    /**
     * Method returns WFID attached to the document.
     * @return
     */

    public StringBuffer getWfIdAttachedWithTheDoc() {
        Integer docType = (Integer)this.getSlsInv().getCurrentRow().getAttribute("InvType");
        System.out.println("Oreder type pendingCheck" + docType);
        Object obj = "";
        try {
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            obj =
                callStoredFunction(Types.VARCHAR, "call WF_GET_ID(?,?,?,?,?)", new Object[] { getSlocId(), getCldId().toString(),
                                                                                 getOrgId().toString(), 21504, docType });   
            }
            else
            {
            
            obj =
callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] { getSlocId(), getCldId().toString(),
                                                                             getOrgId().toString(), 21504, docType });
            System.out.println("WF_ID WITH THE DOC =====:" + obj);

            }   } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.GET_WF_ID' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        System.out.println("before return --" + obj);
        StringBuffer b= (obj == null ? null : new StringBuffer(obj.toString()));
        return b;
    }

    /**
     * Method that returns the level of the current user
     * @param WfId
     * @return
     */
    public Integer getUsrLvl(StringBuffer WfId) {
        Integer docType = (Integer)this.getSlsInv().getCurrentRow().getAttribute("InvType");
        System.out.println("invoice type getUsrLvl" + docType);
        System.out.println(" getSlocId " + getSlocId() + " getCldId() " + getCldId() + " getOrgId() " + getOrgId() +
                           " getUserId() " + getUserId() + " WfId " + WfId);
        //System.out.println("WFID  :"+WfId);
        Integer lvl = 0;
        try {
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            lvl =
                (Integer)callStoredFunction(Types.INTEGER, "call WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                     getCldId().toString(),
                                                                                                     getOrgId().toString(),
                                                                                                     getUserId(),
                                                                                                     WfId.toString(),
                                                                                                     new Integer("21504"),
                                                                                                     docType }); //System.out.println("LEVEL :"+lvl);   
            }
            else
            {
            lvl =
(Integer)callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                 getCldId().toString(),
                                                                                                 getOrgId().toString(),
                                                                                                 getUserId(),
                                                                                                 WfId.toString(),
                                                                                                 new Integer("21504"),
                                                                                                 docType }); //System.out.println("LEVEL :"+lvl);
        }} catch (Exception e) {
            FacesMessage message =
                new FacesMessage("Workflow for this user is not defined. Please define the workflow for this user.");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        return lvl;
    }

    /**
     * Method inserts a record in insTxn
     * @param WfId
     * @param level
     * @return
     */
    public Integer insIntoTxn(StringBuffer WfId, Integer level) {
        Integer docType = (Integer)this.getSlsInv().getCurrentRow().getAttribute("InvType");
        System.out.println("invoice type getUsrLvl" + docType);
        Integer result = -3;
        try {
            StringBuffer docId = new StringBuffer(this.getSlsInv().getCurrentRow().getAttribute("DocId").toString());
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            result =
                        (Integer)callProcedureOut(Types.INTEGER, "call WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                                                   getCldId().toString(),
                                                                                                                                   getOrgId().toString(),
                                                                                                                                   21504,
                                                                                                                                   docType,
                                                                                                                                   WfId.toString(),
                                                                                                                                   docId.toString(),
                                                                                                                                   getUserId(),
                                                                                                                                   getUserId(),
                                                                                                                                   level,
                                                                                                                                   level,
                                                                                                                                   "I",
                                                                                                                                   "A",
                                                                                                                                   0,
                                                                                                                                   "S" });   
            }
            else
            {                                                                                                          
            result =
                    (Integer)callStoredFunction(Types.INTEGER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                                               getCldId().toString(),
                                                                                                                               getOrgId().toString(),
                                                                                                                               21504,
                                                                                                                               docType,
                                                                                                                               WfId.toString(),
                                                                                                                               docId.toString(),
                                                                                                                               getUserId(),
                                                                                                                               getUserId(),
                                                                                                                               level,
                                                                                                                               level,
                                                                                                                               "I",
                                                                                                                               "A",
                                                                                                                               0,
                                                                                                                               "S" });
        } } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.INS_TXN' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        return result;
    }

    public void functionCallOnApprovalFromWorkFlow() {
        StringBuffer returnParam = new StringBuffer(resolvEl("#{pageFlowScope.RETURN_FROM_WF}"));
        System.out.println("RETURN PARAM :" + returnParam);
        Integer result;
        if (returnParam != null && returnParam.toString().equalsIgnoreCase("F")) {
            this.getSlsInv().getCurrentRow().setAttribute("InvMode", 317);
            this.getDBTransaction().commit();
        } else if (returnParam != null && returnParam.toString().equalsIgnoreCase("A")) {

            try {
                Row currentRow = this.getSlsInv().getCurrentRow();
                if (currentRow != null) {
                    StringBuffer docId = new StringBuffer(currentRow.getAttribute("DocId").toString());
                    BigDecimal amt = (BigDecimal)currentRow.getAttribute("TotAmtSp");
                    Integer eoId = (Integer)currentRow.getAttribute("EoId");
                    Integer coaId = (Integer)currentRow.getAttribute("CoaId");
                    BigDecimal cc = (BigDecimal)currentRow.getAttribute("CurrRate");
                    //System.out.println("CC :"+cc);

                    Timestamp docDt = (Timestamp)currentRow.getAttribute("DocDt");
                    System.out.println("Functioncalled!");
                    //PARAM_INV_DOC_ID VARCHAR2,PARAM_INV_DOC_DT date,PARAM_INV_AMT NUMBER,UID_POST NUMBER,PARAM_ORG_ID VARCHAR2,PARAM_SLOC_ID VARCHAR2,PARAM_HO_ORG_ID   VARCHAR2,PARAM_CLD_ID      VARCHAR2,
                    //  PARAM_EO_ID NUMBER,
                    //  PARAM_COA_ID NUMBER,
                    //  PARAM_CURR_ID_SP NUMBER
                    //PARAM_CURR_RATE
                    String driver=getdrivername();
                    if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                    result =
                                (Integer)callProcedure(Types.INTEGER, "call FN_SLS_GL_INS(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { docId.toString(),
                                                                                                                                        docDt,
                                                                                                                                        amt,
                                                                                                                                        getUserId(),
                                                                                                                                        getOrgId().toString(),
                                                                                                                                        getSlocId(),
                                                                                                                                        getHoOrgId().toString(),
                                                                                                                                        getCldId().toString(),
                                                                                                                                        eoId,
                                                                                                                                        coaId,
                                                                                                                                        (Integer)currentRow.getAttribute("CurrIdSp"),
                                                                                                                                        cc });   
                    }
                    else
                    {
                    result =
                            (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_SLS_GL_INS(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { docId.toString(),
                                                                                                                                    docDt,
                                                                                                                                    amt,
                                                                                                                                    getUserId(),
                                                                                                                                    getOrgId().toString(),
                                                                                                                                    getSlocId(),
                                                                                                                                    getHoOrgId().toString(),
                                                                                                                                    getCldId().toString(),
                                                                                                                                    eoId,
                                                                                                                                    coaId,
                                                                                                                                    (Integer)currentRow.getAttribute("CurrIdSp"),
                                                                                                                                    cc });
                    }  //System.out.println("Result :" + result);
                    //SELECT * FROM APP$DS$ATT WHERE ATT_TYPE_ID=51
                    currentRow.setAttribute("InvStat", 218);
                    //SELECT * FROM APP$DS$ATT WHERE ATT_TYPE_ID=69
                    currentRow.setAttribute("InvMode", 314);

                    //

                    Integer fyId = 0;
                    //try {
                    //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
                    if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                    fyId =
                        (Integer)callStoredFunction(Types.INTEGER, "call GET_ORG_FY_ID(?,?,?)", new Object[] { getCldId().toString(),
                                                                                          getOrgId().toString(), docDt });   
                    }
                    else
                    {
                    fyId = (Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { getCldId().toString(),
                                                                                                                getOrgId().toString(), docDt });
                    }
                    //System.out.println("FY :"+fyId);
                    
                    /* SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
                     RowSetIterator itr = dtl.createRowSetIterator(null);
                    while (itr.hasNext()) {
                        Row next = itr.next();
                        if (next != null) {
                            Object Id = next.getAttribute("ShipId");
                            if (Id != null && (Integer)currentRow.getAttribute("InvType") != 480) {

                                String shipId = Id.toString();
                                System.out.println("Consignment invoice ...... ShipId : " + shipId);
                                //SLS.FN_UPDATE_SHIPMNT_STAT (P_CLDID  VARCHAR2, P_SLOCID NUMBER,P_ORGID VARCHAR2,P_SHIPID VARCHAR2,P_FYID VARCHAR2)
                                try {
                                Integer i =
                                    (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_SHIPMNT_STAT(?,?,?,?,?,?,?)",
                                                                new Object[] { getCldId().toString(),
                                                                               getSlocId().toString(),
                                                                               getOrgId().toString(), shipId, fyId,
                                                                               (Integer)currentRow.getAttribute("InvType"), "A"});

                                 } catch (Exception e) {
                                    FacesMessage message =
                                        new FacesMessage("There have been an error while calling function !! SLS.FN_UPDATE_SHIPMNT_STAT");
                                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                                    FacesContext.getCurrentInstance().addMessage(null, message);
                                    e.printStackTrace();
                                }

                            } else {
                                System.out.println("ShipId is null in row " + next.getKey());
                            }
                        } else {
                            System.out.println("There is a blank row in item details");
                        }
                    } 
                    itr.closeRowSetIterator();*/
                    
                    // function to update stock
                    if (((Integer)currentRow.getAttribute("InvType")).equals(349)) {
                        StringBuffer intmId = new StringBuffer("");
                        if (currentRow.getAttribute("IntimSlipId") != null) {
                            intmId = new StringBuffer(currentRow.getAttribute("IntimSlipId").toString());
                        }
                        try {
                            Integer i = 0;
                            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                                i=(Integer)callStoredFunction(Types.INTEGER, "call FN_UPDATE_INTM_STAT(?,?,?,?,?,?)", new Object[] { getCldId().toString(),
                                                                                                                                  getSlocId().toString(),
                                                                                                                                  getOrgId().toString(),
                                                                                                                                  intmId.toString(),
                                                                                                                                  fyId,
                                                                                                                                  (Integer)currentRow.getAttribute("InvType") });
                            }
                            else
                            {
                              i =  (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_INTM_STAT(?,?,?,?,?,?)", new Object[] { getCldId().toString(),
                                                                                                                                  getSlocId().toString(),
                                                                                                                                  getOrgId().toString(),
                                                                                                                                  intmId.toString(),
                                                                                                                                  fyId,
                                                                                                                                  (Integer)currentRow.getAttribute("InvType") });
                            } System.out.println("Return from FN_UPDATE_INTM_STAT :" + i);    
                        } catch (Exception e) {
                            FacesMessage message =
                                new FacesMessage("There have been an error while calling function !! SLS.FN_UPDATE_INTM_STAT in Consignment Invoice.");
                            message.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message);
                            e.printStackTrace();
                            e.printStackTrace();
                        }
                        

                    }
                    this.getDBTransaction().commit();


                    String VoucherId = "0";

                    try {
                         if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                             
                         VoucherId =
                                     (String)callStoredFunction(Types.VARCHAR, "call FN_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] { docId.toString(),
                                                                                                                                  this.getUserId(),
                                                                                                                                  this.getOrgId().toString(),
                                                                                                                                  this.getSlocId(),
                                                                                                                                  this.getHoOrgId().toString(),
                                                                                                                                  this.getCldId().toString(),
                                                                                                                                  "I" });   
                         }
                         else
                         {
                    VoucherId =
                            (String)callStoredFunction(Types.VARCHAR, "SLS.FN_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] { docId.toString(),
                                                                                                                         this.getUserId(),
                                                                                                                         this.getOrgId().toString(),
                                                                                                                         this.getSlocId(),
                                                                                                                         this.getHoOrgId().toString(),
                                                                                                                         this.getCldId().toString(),
                                                                                                                         "I" });
                         } System.out.println("Voucher Id : " + VoucherId);
                     } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'SLS.FN_GET_VOU_NO' !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    } 
                    if (!VoucherId.toString().equals("0")) {
                        FacesMessage message =
                            new FacesMessage("<html><body>Voucher Id  <b> " + VoucherId + " </b>have been Generated.</body></html>");
                        message.setSeverity(FacesMessage.SEVERITY_INFO);
                        FacesContext.getCurrentInstance().addMessage(null, message);

                    }

                } else {
                    FacesMessage message =
                        new FacesMessage("There have been an error while returning from WorkFlow Application!!");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);

                }

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'SLS.FN_SLS_GL_INS' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }


        }
        this.getInvoiceSearch1().executeQuery();
    }

    /**
     * Method to decide whether to enable or disable adj tab
     * @return
     */
    public boolean DisableAdjTab() {
        SlsInvPmntSchdlVOImpl impl = this.getSlsInvPmntSchdl();
        if (impl != null) {
            //System.out.println("Row count :"+impl.getEstimatedRowCount());
            if (impl.getEstimatedRowCount() != 0) {
                //System.out.println("In iterator");
                RowSetIterator row = impl.createRowSetIterator(null);
                try {
                    while (row.hasNext()) {
                        Row next = row.next();
                        Timestamp d = (Timestamp)next.getAttribute("PayDt");
                        Timestamp cd = new Timestamp(System.currentTimeMillis());
                        //System.out.println("PayDate :"+d.dateValue());
                        //System.out.println("Current time :"+cd.dateValue());
                        //System.out.println("Comparision :"+d.dateValue().toString() +" "+cd.dateValue().toString());
                        if ((d.dateValue().toString()).equals(cd.dateValue().toString())) {
                            //System.out.println("return false");
                            row.closeRowSetIterator();
                            return false;
                        }
                    }
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

                row.closeRowSetIterator();
            }
        }

        //System.out.println("return true");
        return true;
    }


    /**
     * Method to validate the total amount adjusted and allowed
     * @return
     */
    public Integer adjAmtVal(BigDecimal val) {
        Integer c = 0;
        SlsInvPmntSchdlVOImpl impl = this.getSlsInvPmntSchdl();
        BigDecimal amt = new BigDecimal(0);
        BigDecimal amtAdj = val;

        if (impl != null) {
            if (impl.getEstimatedRowCount() != 0) {
                RowSetIterator row = impl.createRowSetIterator(null);
                try {
                    while (row.hasNext()) {
                        Row next = row.next();
                        Timestamp d = (Timestamp)next.getAttribute("PayDt");
                        Timestamp cd = new Timestamp(System.currentTimeMillis());

                        if ((d.dateValue().toString()).equals(cd.dateValue().toString())) {
                            amt = amt.add((BigDecimal)next.getAttribute("PayAmt"));

                        }
                    }
                } catch (Exception e) {
                    row.closeRowSetIterator();
                    e.printStackTrace();
                }
                row.closeRowSetIterator();
                RowSetIterator r = this.getSlsInvAdj1().createRowSetIterator(null);
                while (r.hasNext()) {
                    Row next = r.next();
                    if (this.getSlsInvAdj1().getCurrentRow() != next) {
                        //System.out.println(amtAdj);
                        amtAdj = amtAdj.add((BigDecimal)next.getAttribute("InvAmtAdj"));
                        //System.out.println(amtAdj);
                    }
                }
            }

            Row currentRow = this.getSlsInvAdj1().getCurrentRow();
            if (currentRow != null) {
                BigDecimal value = val;
                BigDecimal cc = new BigDecimal(1);
                Row currentRow1 = this.getSlsInv().getCurrentRow();
                if (currentRow != null) {
                    cc = (BigDecimal)currentRow1.getAttribute("CurrRate");
                }
                value = value.multiply(cc);
                value = value.divide((BigDecimal)currentRow.getAttribute("CurrConvFctrOld"), RoundingMode.HALF_UP);
                BigDecimal b = (BigDecimal)currentRow.getAttribute("UpdatedOutstandingAmountTrans");
                System.out.println("value : " + value + " B : " + b);
                if (value.compareTo(b) == 1) {
                    c = 1;
                }
            }
            ///System.out.println("Amt :"+amt+" AmtAdj :"+amtAdj);
            //System.out.println("Comparision :"+amt.compareTo(amtAdj));
            if (amt.compareTo(amtAdj) == -1) {
                //System.out.println("Return false;");
                c = 2;
            }
        }

        //System.out.println("return true");
        return c;
    }


    /**
     *  Method to set tax to zero
     */
    public void setTaxToZero() {
        //this.getSlsInvTr
        //        String docId = (String)this.getSlsInv().getCurrentRow().getAttribute("DocId");
        //        SlsInvTrLineVOImpl impl = this.getSlsInvTrLine();
        //        Row[] filteredRows = impl.getFilteredRows("DocId", docId);
        //        for(Row r :filteredRows){
        //            if((Integer)r.getAttribute("ItmId") == 0){
        //                r.remove();
        //            }
        //        }
        this.getSlsInv().getCurrentRow().setAttribute("TransTaxAmountSp", new BigDecimal(0.00));

    }

    /**
     * Method ot check if tax appied correctly
     * @return
     */
    public boolean isTaxAppliedCorrectly() {
        Row row = this.getSlsInv().getCurrentRow();
        if (row != null) {
            String taxRuleFlag = (String)row.getAttribute("TaxRuleFlg");
            System.out.println("Tax rule flag :" + taxRuleFlag);
             
            if (taxRuleFlag.equals("D") || taxRuleFlag.equals("H")) 
            {
                BigDecimal grossAmtItm = new BigDecimal(0);
                BigDecimal taxAmtItm = new BigDecimal(0);


                SlsInvTrVOImpl tr = getSlsInvTr();
                RowSetIterator trItr = tr.createRowSetIterator(null);
                while (trItr.hasNext()) {
                    Row trRow = trItr.next();
                    Object taxAmt = trRow.getAttribute("TaxableAmt");
                    BigDecimal taxAmt1 = (taxAmt == null ? new BigDecimal(0) : (BigDecimal)taxAmt);
                    taxAmtItm = taxAmtItm.add(taxAmt1);
                }
                taxAmtItm = taxAmtItm.setScale(getCurrDigit(), RoundingMode.HALF_UP);
                trItr.closeRowSetIterator();
                
                SlsInvShipItmVOImpl itmVo = this.getSlsInvShipItmVOForTax();
                itmVo.executeQuery();
                _log.info("No. Of Tr Entries : "+itmVo.getEstimatedRowCount());
                RowSetIterator itmItr = itmVo.createRowSetIterator(null);
                if (taxRuleFlag.equals("D")) {
                    while (itmItr.hasNext()) {
                        Row iRow = itmItr.next();
                        StringBuffer trFlg =
                            (iRow.getAttribute("TaxRuleFlg") == null ? new StringBuffer("N") : new StringBuffer(iRow.getAttribute("TaxRuleFlg").toString()));
                        _log.info("Tax rule flag : "+trFlg);
                        if ("Y".equals(trFlg.toString())) {
                            Object grossAmt = iRow.getAttribute("ItmAmtGsSp");
                            _log.info("Gross Amount : "+grossAmt);
                            BigDecimal itmAmt = (grossAmt == null ? new BigDecimal(0) : (BigDecimal)grossAmt);
                            grossAmtItm = grossAmtItm.add(itmAmt);
                        }
                    }
                    grossAmtItm = grossAmtItm.setScale(getCurrDigit(), RoundingMode.HALF_UP);
                    _log.info("Detail : Total Itm AmtGs : " + grossAmtItm + " Total Taxable amt : " + taxAmtItm +
                              " Comparision : " + grossAmtItm.compareTo(taxAmtItm));
                    
                } else if (taxRuleFlag.equals("H")){
                    while (itmItr.hasNext()) {
                        Row iRow = itmItr.next();
                        StringBuffer trFlg =
                            (iRow.getAttribute("TaxRuleFlg") == null ? new StringBuffer("N") : new StringBuffer(iRow.getAttribute("TaxRuleFlg").toString()));

                        Object grossAmt = iRow.getAttribute("ItmAmtGsSp");
                        BigDecimal itmAmt = (grossAmt == null ? new BigDecimal(0) : (BigDecimal)grossAmt);
                        grossAmtItm = grossAmtItm.add(itmAmt);
                        grossAmtItm = grossAmtItm.setScale(getCurrDigit(), RoundingMode.HALF_UP);

                    }
                _log.info("Header : Total Itm AmtGs : " + grossAmtItm + " Total Taxable amt : " + taxAmtItm +
                          " Comparision : " + grossAmtItm.compareTo(taxAmtItm));
                itmItr.closeRowSetIterator();
                }
                if (grossAmtItm.compareTo(taxAmtItm) != 0) {
                    return false;
                } else {
                    return true;
                }
            }
        }

        return true;
    }

    /**
     * To check if Sales Invoice is being created in open financial year or not.
     * @return
     */
    public boolean isFYOpenForCurrentDate(Timestamp dt) {
        StringBuffer ck = new StringBuffer("A");
        Integer fyId = 0;
        try {
            //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            fyId =
                (Integer)callStoredFunction(Types.INTEGER, "call GET_ORG_FY_ID(?,?,?)", new Object[] { getCldId().toString(),
                                                                                          getOrgId().toString(), dt });   
            }
            else
            {
            fyId =
(Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { getCldId().toString(),
                                                                                      getOrgId().toString(), dt });
        } }
        catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        if (fyId == -1) {
            return false;
        } else {

            try {
                //FUNCTION CHK_ORG_FY_STAT(P_ORG_ID VARCHAR2, P_FY_ID NUMBER, P_FY_TYP VARCHAR2 DEFAULT 'FY',P_BC_FLG VARCHAR2 DEFAULT 'Y')
                String driver=getdrivername();
                if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                ck =
                    new StringBuffer(callStoredFunction(Types.VARCHAR, "call CHK_ORG_FY_STAT(?,?,?,?)", new Object[] { getOrgId().toString(),
                                                                                                               fyId, "FY",
                                                                                                               "Y" }).toString());   
                }
                else
                { ck =
 new StringBuffer(callStoredFunction(Types.VARCHAR, "APP.PKG_APP.CHK_ORG_FY_STAT(?,?,?,?)", new Object[] { getOrgId().toString(),
                                                                                                           fyId, "FY",
                                                                                                           "Y" }).toString());

                } } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.CHK_ORG_FY_STAT' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }

        }
        //System.out.println("FY IS "+fyId+" FY OPEN/CLOSE CHECK :"+ck);
        if (ck.toString().equals("N")) {
            return true;
        } else {
            return false;
        }

    }

    /**
     * Method to removed unadjusted rows from slsInvAdj
     */
    public void advanceAdjCheck() {
        RowSetIterator row = this.getSlsInvAdj1().createRowSetIterator(null);
        while (row.hasNext()) {
            Row next = row.next();
            //System.out.println("InvAmtAdj "+next.getAttribute("InvAmtAdj"));
            if (next.getAttribute("InvAmtAdj").equals(new BigDecimal(0))) {
                next.remove();
            }
        }
        row.closeRowSetIterator();
    }

    /**
     * Method to check if payment schedule for total amount is made of not.
     * @return
     */
    public boolean isPaymntSchduleValid() {
        System.out.println("Inside");
        Row r = this.getSlsInv().getCurrentRow();
        System.out.println("R val " + r);
        BigDecimal totalAmount = new BigDecimal(0);
        BigDecimal pmntAmount = new BigDecimal(0);
        if (r.getAttribute("TransAmtAfterOcSp") != null && r.getAttribute("TransTotPaymentAmt") != null) {
            System.out.println("In Starting If----->");
            totalAmount = (BigDecimal)r.getAttribute("TransAmtAfterOcSp");
System.out.println("Total Amount 1---->"+totalAmount);
            totalAmount = totalAmount.setScale(getCurrDigit(), RoundingMode.HALF_UP);
            System.out.println("Total Amount 2---->"+totalAmount);
            pmntAmount = (BigDecimal)r.getAttribute("TransTotPaymentAmt");
            System.out.println("Pmnt Amount---->"+pmntAmount);
            pmntAmount = pmntAmount.setScale(getCurrDigit(), RoundingMode.HALF_UP);
            System.out.println("Pmnt Amount 2---->"+pmntAmount);
        }
        System.out.println("totalAmount :" + totalAmount + " pmntAmount :" + pmntAmount);
        if (totalAmount.compareTo(pmntAmount) != 0) {
            return false;
        } else {
            return true;
        }
    }

    /**
     *  Method to be called inorder to cancel SalesInvoice Permanently
     */
    public void CancelSalesInvoice() {
        SlsInvVORowImpl currentRow = (SlsInvVORowImpl)this.getSlsInv().getCurrentRow();
        BigDecimal val = new BigDecimal(0);
        try {
            //FUNCTION FN_SLS_TO_FIN_CREDIT_NOTE(PARAM_SOURCE_DOC_ID VARCHAR2,PARAM_SOURCE_DOC_DT date,PARAM_SOURCE_AMT NUMBER,
            //UID_POST NUMBER,
            //PARAM_ORG_ID VARCHAR2,
            //PARAM_SLOC_ID VARCHAR2,
            //PARAM_HO_ORG_ID   VARCHAR2,
            //PARAM_CLD_ID      VARCHAR2,
            //PARAM_EO_ID NUMBER,
            //PARAM_COA_ID NUMBER,
            ///PARAM_SOURCE_TYPE VARCHAR2 default 'I')
            System.out.println(" docid " + currentRow.getDocId() + " dt " + currentRow.getDocDt() + " amtsp " +
                               currentRow.getTotAmtSp() + " user " + getUserId() + " org " + getOrgId().toString() +
                               " slo " + getSlocId() + " ho " + getHoOrgId().toString() + " cld " +
                               getCldId().toString() + " eo " + currentRow.getEoId() + " coa " +
                               currentRow.getCoaId() + " val " + "I");
            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
            val =
                (BigDecimal)callProcedure(Types.NUMERIC, "call FN_SLS_TO_FIN_CREDIT_NOTE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] { currentRow.getDocId(),
                                                                                                                         currentRow.getDocDt(),
                                                                                                                         currentRow.getTotAmtSp(),
                                                                                                                         getUserId(),
                                                                                                                         getOrgId().toString(),
                                                                                                                         getSlocId(),
                                                                                                                         getHoOrgId().toString(),
                                                                                                                         getCldId().toString(),
                                                                                                                         currentRow.getEoId(),
                                                                                                                         currentRow.getCoaId(),
                                                                                                                         "I" });   
            }
            else
            {
            val =
(BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.FN_SLS_TO_FIN_CREDIT_NOTE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] { currentRow.getDocId(),
                                                                                                                     currentRow.getDocDt(),
                                                                                                                     currentRow.getTotAmtSp(),
                                                                                                                     getUserId(),
                                                                                                                     getOrgId().toString(),
                                                                                                                     getSlocId(),
                                                                                                                     getHoOrgId().toString(),
                                                                                                                     getCldId().toString(),
                                                                                                                     currentRow.getEoId(),
                                                                                                                     currentRow.getCoaId(),
                                                                                                                     "I" });
            }
            currentRow.setInvStat(220);
            currentRow.setInvMode(313);
            
            
            Integer fyId = 0;
            //try {
            //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                fyId = (Integer)callStoredFunction(Types.INTEGER, "call GET_ORG_FY_ID(?,?,?)", new Object[] { getCldId().toString(),
                                                                                                            getOrgId().toString(), currentRow.getDocDt() });
                
         }
            else
            {
            fyId = (Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { getCldId().toString(),
                                                                                                        getOrgId().toString(), currentRow.getDocDt() });
            
            } SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
            RowSetIterator itr = dtl.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                if (next != null) {
                    Object Id = next.getAttribute("ShipId");
                    if (Id != null && (Integer)currentRow.getAttribute("InvType") != 480) {

                        String shipId = Id.toString();
                        System.out.println("Consignment invoice ...... ShipId : " + shipId);
                        //SLS.FN_UPDATE_SHIPMNT_STAT (P_CLDID  VARCHAR2, P_SLOCID NUMBER,P_ORGID VARCHAR2,P_SHIPID VARCHAR2,P_FYID VARCHAR2)
                        try {
                        Integer i = 0;
                             if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                              i =                            (Integer)callStoredFunction(Types.INTEGER, "call FN_UPDATE_SHIPMNT_STAT(?,?,?,?,?,?,?)",
                                                        new Object[] { getCldId().toString(),
                                                                       getSlocId().toString(),
                                                                       getOrgId().toString(), shipId, fyId,
                                                                       (Integer)currentRow.getAttribute("InvType"),"C" });

                             }
                             else
                             {
                              i =
                            (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_SHIPMNT_STAT(?,?,?,?,?,?,?)",
                                                        new Object[] { getCldId().toString(),
                                                                       getSlocId().toString(),
                                                                       getOrgId().toString(), shipId, fyId,
                                                                       (Integer)currentRow.getAttribute("InvType"),"C" });

                         }
                        }catch (Exception e) {
                            FacesMessage message =
                                new FacesMessage("There have been an error while calling function !! SLS.FN_UPDATE_SHIPMNT_STAT");
                            message.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message);
                            e.printStackTrace();
                        }

                    } else {
                        System.out.println("ShipId is null in row " + next.getKey());
                    }
                } else {
                    System.out.println("There is a blank row in item details");
                }
            }
            itr.closeRowSetIterator();
            

            this.getDBTransaction().commit();
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_CREDIT_NOTE' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

    }

    public boolean isUserEligibleToCancelSalesInvoice() {
        try {
            Integer docType = (Integer)this.getSlsInv().getCurrentRow().getAttribute("InvType");
            System.out.println("invoice type getUsrLvl" + docType);
            StringBuffer attachedWithTheDoc = getWfIdAttachedWithTheDoc();
            //FUNCTION GET_USR_LEVEL (P_SLOCID NUMBER, P_CLDID VARCHAR2, P_ORGID VARCHAR2, P_USR_ID NUMBER , P_WF_ID VARCHAR ,P_DOC_ID NUMBER)
            //FUNCTION GET_DOC_WF_TOP_LVL(P_SLOCID NUMBER, P_CLDID VARCHAR2, P_ORGID VARCHAR2, P_DOCID NUMBER)
            /*  Integer level =
                (Integer)callStoredFunction(Types.INTEGER, "APP.PKG_APP_WF.GET_USR_LEVEL(?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                                       getCldId().toString(),
                                                                                                                       getOrgId().toString(),
                                                                                                                       getUserId(),
                                                                                                                       attachedWithTheDoc.toString(),
                                                                                                                       21504 }); */
            Integer level =
                (Integer)callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                                 getCldId().toString(),
                                                                                                                 getOrgId().toString(),
                                                                                                                 getUserId(),
                                                                                                                 attachedWithTheDoc.toString(),
                                                                                                                 21504,
                                                                                                                 docType });
            /* Integer wfTopLevel =
                (Integer)callStoredFunction(Types.INTEGER, "APP.PKG_APP_WF.GET_DOC_WF_TOP_LVL(?,?,?,?)",
                                            new Object[] { getSlocId(), getCldId().toString(), getOrgId().toString(),
                                                           21504 }); */

            Integer wfTopLevel =
                (Integer)callStoredFunction(Types.INTEGER, "APP.WF_GET_DOC_TOP_LVL(?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                               getCldId().toString(),
                                                                                                               getOrgId().toString(),
                                                                                                               21504,
                                                                                                               docType });

            //System.out.println("USER LEVEL :"+level+" TOP_LEVEL :"+wfTopLevel);
            if (level == wfTopLevel) {
                //System.out.println("Return true");
                return true;
            }
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("Workflow for this user is not defined. Please define the workflow for this user. !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        return false;
    }

    /**
     *  Method to call function to insert data in item on the basis of intimation
     */
    public void insertItmOnBasisOfIntimation() {
        //FN_INS_INTM_INV(p_SLOC NUMBER,p_CLD VARCHAR2,p_ORG VARCHAR2,p_ho_ORG VARCHAR2,p_eo_id number,P_IMTM_ID VARCHAR2,
        //           P_USR NUMBER,P_DOC_ID VARCHAR2,P_DOC_DT DATE,P_CURR_RATE NUMBER)
        //System.out.println("COUNT :"+this.getSlsInvDtl1().getRowCount());


        try {
            Row row = this.getSlsInv().getCurrentRow();
            Integer eoId = (Integer)row.getAttribute("EoId");
            String intimationId = (String)row.getAttribute("IntimSlipId");
            String DocId = (String)row.getAttribute("DocId");
            BigDecimal currRate = (BigDecimal)row.getAttribute("CurrRate");
            Timestamp docDt = (Timestamp)row.getAttribute("DocDt");
            System.out.println("^^^^^^^^^");
            System.out.println(" sloc " + getSlocId() + " cld " + getCldId().toString() + " org " +
                               getOrgId().toString() + " ho " + getHoOrgId().toString() + " eo " + eoId + " int " +
                               intimationId + " user " + getUserId() + " doc " + DocId + " docdt " + docDt + " cur " +
                               currRate);

            Integer i =
                (Integer)callStoredFunction(Types.INTEGER, "FN_INS_INTM_INV(?,?,?,?,?,?,?,?,?,?)", new Object[] { getSlocId(),
                                                                                                                  getCldId().toString(),
                                                                                                                  getOrgId().toString(),
                                                                                                                  getHoOrgId().toString(),
                                                                                                                  eoId,
                                                                                                                  intimationId,
                                                                                                                  getUserId(),
                                                                                                                  DocId,
                                                                                                                  docDt,
                                                                                                                  currRate });
            this.getSlsInv().executeQuery();
            setSelectDocIdOnCommit(new StringBuffer(DocId));
            //System.out.println("Returned :"+i);
            //System.out.println("ROW COUNT :"+this.getSlsInvDtl().getRowCount());
            this.getSlsInv().executeQuery();
            setSelectDocIdOnCommit(new StringBuffer(DocId));
            this.getDBTransaction().postChanges();
            //this.getSlsInvDtl().clearCache();
            //this.getSlsInvDtl().executeQuery();
            //this.getSlsInvShipItm().executeQuery();
            this.getSlsInv().executeQuery();
            setSelectDocIdOnCommit(new StringBuffer(DocId));
            //System.out.println("ROW COUNT :"+this.getSlsInvDtl().getRowCount());
            //System.out.println("COUNT :"+this.getSlsInvDtl1().getRowCount());

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_INS_INTM_INV' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for SlsInvDtl1.
     * @return SlsInvDtl1
     */
    public SlsInvDtlVOImpl getSlsInvDtl1() {
        return (SlsInvDtlVOImpl)findViewObject("SlsInvDtl1");
    }

    /**
     * Method to check if Other charges COA Already exists
     * @param CoaId
     * @return
     */

    public boolean doOtherChargeCoaAlreadyExist(Integer CoaId) {
        Row currentRow = this.getSlsInvOc().getCurrentRow();
        RowSetIterator itr = this.getSlsInvOc().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            if (row != currentRow) {
                //System.out.println("CodId :"+CoaId +" CoaChecked :"+(Integer) row.getAttribute("CoaId"));
                if (CoaId == (Integer)row.getAttribute("CoaId")) {
                    //System.out.println("Returned");
                    itr.closeRowSetIterator();
                    return true;
                }
            }
        }
        itr.closeRowSetIterator();
        return false;
    }

    /**
     * Discount validator
     * @param val
     * @return
     */

    public Integer isDiscountValueValid(BigDecimal val) {
        Row currentRow = this.getSlsInv().getCurrentRow();
        BigDecimal amt = (BigDecimal)currentRow.getAttribute("TransAmtAfterTaxSp");
        Object disc = currentRow.getAttribute("DiscVal");
        Object DiscType = this.getSlsInv().getCurrentRow().getAttribute("DiscType");
        if (DiscType != null) {
            String typ = (String)DiscType;
            if (typ.equalsIgnoreCase("A")) {
                // To add the previously discounted amount
                BigDecimal discVal = new BigDecimal(0);
                if (disc != null) {
                    discVal = (BigDecimal)disc;
                }
                amt = amt.add(discVal);
                if (val.compareTo(amt) > 0) {
                    return 1;
                }
            } else if (typ.equalsIgnoreCase("P")) {
                if (val.compareTo(new BigDecimal(99.99)) > 0) {
                    return 2;
                }
            }
        }
        return 0;
    }

    /**
     * Method to validate the oc amount
     * @param amt
     * @return
     */
    public boolean isOtherChargesAmountValid(BigDecimal val) {
        //System.out.println("Invalidator");
        Row currentRow = this.getSlsInv().getCurrentRow();
        BigDecimal invAmt = new BigDecimal(0);
        BigDecimal amt = new BigDecimal(0);
        BigDecimal ocAmt = new BigDecimal(0);
        BigDecimal amount = new BigDecimal(0);
        if (currentRow != null) {
            invAmt = (BigDecimal)currentRow.getAttribute("TransAmtAfterTaxSp");
        }
        //System.out.println("Invoice amount is :"+invAmt);
        ViewObjectImpl oc = this.getSlsInvOc();
        Row r = oc.getCurrentRow();
        //System.out.println("Row count :"+oc.getRowCount());

        RowSetIterator itr = oc.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();

            if (next != r) {
                String typ = (String)next.getAttribute("TranType");
                //System.out.println("Type :"+typ);
                if (typ.equalsIgnoreCase("Dr")) {
                    amount = (BigDecimal)next.getAttribute("AmtSp");
                    amt = amt.subtract(amount);
                    //System.out.println("Subtracted amount : "+amt);
                } else {
                    amount = (BigDecimal)next.getAttribute("AmtSp");
                    amt = amt.add(amount);
                    //System.out.println("Added amount : "+amt);
                }
            }


        }
        itr.closeRowSetIterator();
        //System.out.println("He :"+val);
        Object att = r.getAttribute("TranType");
        //System.out.println("He :"+att);
        if (att != null) {
            //System.out.println(amt+"_________1");
            if (att.equals("Dr")) {
                //System.out.println(amt+"_________2");
                amt = amt.subtract(val);
                //System.out.println(amt+"_________3");
            } else {
                //System.out.println(amt+"_________4");
                amt = amt.add(val);
                //System.out.println(amt+"_________5");
            }
        }

        //System.out.println("Amount5 :P"+amt);
        //System.out.println("sign :"+amt.signum());
        if (amt.signum() == -1) {
            amt = amt.abs();
            //System.out.println("Amount :"+amt);
            if (amt.compareTo(invAmt) > 0) {
                //System.out.println("Returned false");
                return false;
            }
        }

        //System.out.println("Returned true");
        return true;
    }

    /**
     * Method to check if fromNoOfShipment
     * @param val
     * @return
     */
    public boolean isFromNoOfShipmentValid(Number val) {
        Row currentRow = this.getTempSearchPanel1().getCurrentRow();
        if (currentRow != null) {
            Number n = new Number(0);
            //System.out.println("num :"+currentRow);
            Object num = currentRow.getAttribute("ToNumberOfItms");
            //System.out.println("num :"+num);
            if (num != null) {
                n = (Number)num;
                //System.out.println("n :"+n);
                if (val.compareTo(n) > 0) {
                    return false;
                }
            }

        }
        return true;
    }

    /**
     * Method to check if fromNoOfShipment
     * @param val
     * @return
     */
    public boolean isToNoOfShipmentValid(Number val) {
        Row currentRow = this.getTempSearchPanel1().getCurrentRow();
        if (currentRow != null) {
            Number n = new Number(0);
            //System.out.println("num :"+currentRow);
            Object num = currentRow.getAttribute("FromNumberOfItms");
            //System.out.println("num :"+num);
            if (num != null) {
                n = (Number)num;
                //System.out.println("n :"+n);
                if (val.compareTo(n) < 0) {
                    return false;
                }
            }

        }
        return true;
    }

    /**
     * Method to check  FromSIAmount
     * @param val
     * @return
     */
    public boolean isFromSIAmountValid(Number val) {
        Row currentRow = this.getTempSearchPanel1().getCurrentRow();
        if (currentRow != null) {
            Number n = new Number(0);
            //System.out.println("num :"+currentRow);
            Object num = currentRow.getAttribute("ToSIAmount");
            //System.out.println("num :"+num);
            if (num != null) {
                n = (Number)num;
                //System.out.println("n :"+n);
                if (val.compareTo(n) > 0) {
                    return false;
                }
            }

        }
        return true;
    }

    /**
     * Method to check  FromSIAmount
     * @param val
     * @return
     */
    public boolean isToSIAmountValid(Number val) {
        Row currentRow = this.getTempSearchPanel1().getCurrentRow();
        if (currentRow != null) {
            Number n = new Number(0);
            //System.out.println("num :"+currentRow);
            Object num = currentRow.getAttribute("FromSIAmount");
            //System.out.println("num :"+num);
            if (num != null) {
                n = (Number)num;
                //System.out.println("n :"+n);
                if (val.compareTo(n) < 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to check if details is zero
     * @return
     */

    public boolean isSlsInvdtlsCountValid() {
        RowSetIterator createRowSetIterator = this.getSlsInvDtl().createRowSetIterator(null);
        if (createRowSetIterator.getRowCount() == 0) {
            createRowSetIterator.closeRowSetIterator();
            return false;
        }

        createRowSetIterator.closeRowSetIterator();
        return true;
    }


    /**
     * Container's getter for LovAr1.
     * @return LovAr1
     */
    public ViewObjectImpl getLovAr1() {
        return (ViewObjectImpl)findViewObject("LovAr1");
    }

    /**
     * Container's getter for LOVInvoiceTypeVO1.
     * @return LOVInvoiceTypeVO1
     */
    public ViewObjectImpl getLOVInvoiceTypeVO1() {
        return (ViewObjectImpl)findViewObject("LOVInvoiceTypeVO1");
    }

    /**
     *  To automtically generate payment schedule
     */
    public void AutoGeneratePaymentSchedule() {
        SlsInvVOImpl impl = this.getSlsInv();
        Row currentRow = impl.getCurrentRow();
        SlsInvPmntSchdlVOImpl invPmntSchdl = this.getSlsInvPmntSchdl();
        BigDecimal amt = new BigDecimal(0);
        Timestamp dt = new Timestamp(System.currentTimeMillis());
        if (invPmntSchdl.getRowCount() == 0) {
            System.out.println("Row Inserted");
            if (currentRow != null) {
                amt = (BigDecimal)currentRow.getAttribute("TransAmtAfterOcSp");
                dt = (Timestamp)currentRow.getAttribute("DocDt");
            }
            System.out.println("Amount is : " + amt + "__Dt : " + dt);
            Row createRow = invPmntSchdl.createRow();
            invPmntSchdl.insertRow(createRow);
            createRow.setAttribute("PayDt", dt);
            createRow.setAttribute("AdvFlg", "N");
            createRow.setAttribute("PayAmt", amt);
            createRow.setAttribute("TotAmt", amt);
            createRow.setAttribute("PayMode", 160);
            //161
        }
        invPmntSchdl.executeQuery();
    }

    /**
     * Container's getter for SlsInvShipItmVOForTax.
     * @return SlsInvShipItmVOForTax
     */
    public SlsInvShipItmVOImpl getSlsInvShipItmVOForTax() {
        return (SlsInvShipItmVOImpl)findViewObject("SlsInvShipItmVOForTax");
    }

    /**
     * Container's getter for SlsInvToItmVL1.
     * @return SlsInvToItmVL1
     */
    public ViewLinkImpl getSlsInvToItmVL1() {
        return (ViewLinkImpl)findViewLink("SlsInvToItmVL1");
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public StringBuffer getCldId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
    }

    public Integer getUserId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public StringBuffer getOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
    }

    public StringBuffer getHoOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
    }

    public Integer getCurrDigit() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}").toString());
    }

    /**
     * Container's getter for SlsInvTrItm.
     * @return SlsInvTrItm
     */
    public SlsInvTrVOImpl getSlsInvTrItm() {
        return (SlsInvTrVOImpl)findViewObject("SlsInvTrItm");
    }

    /**
     * Container's getter for SlsInvShipItm2SlsInvTrVL1.
     * @return SlsInvShipItm2SlsInvTrVL1
     */
    public ViewLinkImpl getSlsInvShipItm2SlsInvTrVL1() {
        return (ViewLinkImpl)findViewLink("SlsInvShipItm2SlsInvTrVL1");
    }

    /**
     * Container's getter for SlsInvTrLineItm.
     * @return SlsInvTrLineItm
     */
    public SlsInvTrLineVOImpl getSlsInvTrLineItm() {
        return (SlsInvTrLineVOImpl)findViewObject("SlsInvTrLineItm");
    }

    /**
     * Container's getter for SlsInvTr2SlsInvTrLineVL2.
     * @return SlsInvTr2SlsInvTrLineVL2
     */
    public ViewLinkImpl getSlsInvTr2SlsInvTrLineVL2() {
        return (ViewLinkImpl)findViewLink("SlsInvTr2SlsInvTrLineVL2");
    }

    /**
     * Container's getter for SlsInvTrLine1.
     * @return SlsInvTrLine1
     */
    public SlsInvTrLineVOImpl getSlsInvTrLine1() {
        return (SlsInvTrLineVOImpl)findViewObject("SlsInvTrLine1");
    }

    /**
     * Container's getter for SlsInv2InvTrLinesVL1.
     * @return SlsInv2InvTrLinesVL1
     */
    public ViewLinkImpl getSlsInv2InvTrLinesVL1() {
        return (ViewLinkImpl)findViewLink("SlsInv2InvTrLinesVL1");
    }

    public void populateSupplimentryInvoice() {
        if (true) {
            if (true) {

                HashSet shipDocIdSet = new HashSet();
                ViewObjectImpl distinctItmVO = this.getDistinctItmVO1();
                RowSetIterator itr = distinctItmVO.createRowSetIterator(null);
                int i = 1;
                while (itr.hasNext()) {
                    Row next = itr.next();
                    Object shipId = next.getAttribute("ShipmntDocId");
                    boolean add = shipDocIdSet.add(shipId.toString());
                    if (add == true) {
                        if (shipId != null || !("".equals(shipId))) {
                            BigDecimal b = (next.getAttribute("PriceDifferenceTrans") == null ? new BigDecimal(0) : (BigDecimal)next.getAttribute("PriceDifferenceTrans"));
                            _log.info("Price Difference on Shipment add : "+b);
                            if(next.getAttribute("NewPriceTrans") != null && b.compareTo(new BigDecimal(0)) > 0){
                                SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
                                Row row = dtl.createRow();
                                dtl.insertRow(row);
                                row.setAttribute("ShipId", shipId.toString());
                                row.setAttribute("ShipDt", next.getAttribute("ShipDt"));
                                row.setAttribute("SrNo", i);
                                i = i + 1;    
                            }else{
                                shipDocIdSet.remove(shipId.toString());  
                            }
                        }
                    }
                    _log.info("Added : " + add);
                }
                itr.closeRowSetIterator();
                _log.info("Unique ship id's : ");
                Iterator iterator = shipDocIdSet.iterator();
                while (iterator.hasNext()) {
                    _log.info("|" + iterator.next().toString() + "|");
                }
                SlsInvShipItmVOImpl itmdtl = this.getSlsInvShipItmVOForTax();
                itr = distinctItmVO.createRowSetIterator(null);
                while (itr.hasNext()) {
                    Row row = itr.next();
                    ViewObjectImpl forSuppVO = this.getShipItmForSuppVO();
                    forSuppVO.setNamedWhereClauseParam("CldIdBind", this.getCldId().toString());
                    forSuppVO.setNamedWhereClauseParam("OrgIdBind", this.getOrgId().toString());
                    forSuppVO.setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId().toString());
                    forSuppVO.setNamedWhereClauseParam("SlocIdBind", this.getSlocId().toString());
                    forSuppVO.setNamedWhereClauseParam("DocIdBind", row.getAttribute("InvoiceDocId"));
                    forSuppVO.setNamedWhereClauseParam("ShipIdBind", row.getAttribute("ShipmntDocId"));
                    forSuppVO.setNamedWhereClauseParam("SoIdBind", row.getAttribute("SoId"));
                    forSuppVO.setNamedWhereClauseParam("ItmIdBind", row.getAttribute("ItmId"));
                    forSuppVO.executeQuery();
                    _log.info("No. of Rows for : Invoice_id : " + row.getAttribute("InvoiceDocId") + " " +
                              "Ship_Id : " + row.getAttribute("ShipmntDocId") + " So_Id : " +
                              row.getAttribute("SoId") + " Itm_id : " + row.getAttribute("ItmId") + " is : " +
                              forSuppVO.getEstimatedRowCount());
                    //forSuppVO.setRangeSize(-1);
                    Row[] allRowsInRange = forSuppVO.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        BigDecimal b = (row.getAttribute("PriceDifferenceTrans") == null ? new BigDecimal(0) : (BigDecimal)row.getAttribute("PriceDifferenceTrans"));
                        _log.info("Price Difference on item add : "+b);
                        if(row.getAttribute("NewPriceTrans") != null && b.compareTo(new BigDecimal(0)) > 0){
                            Row oRow = allRowsInRange[0];
                            Row itmRow = itmdtl.createRow();
                            itmdtl.insertRow(itmRow);
                            itmRow.setAttribute("ShipId", oRow.getAttribute("ShipId"));
                            itmRow.setAttribute("SoId", oRow.getAttribute("SoId"));
                            itmRow.setAttribute("ItmId", oRow.getAttribute("ItmId"));
                            itmRow.setAttribute("TaxRuleFlg", oRow.getAttribute("TaxRuleFlg"));
                            itmRow.setAttribute("TlrncQtyVal", oRow.getAttribute("TlrncQtyVal"));
                            itmRow.setAttribute("TlrncQtyType", oRow.getAttribute("TlrncQtyType"));
                            itmRow.setAttribute("Remarks", oRow.getAttribute("Remarks"));
                            itmRow.setAttribute("ItmAmtSp", new BigDecimal(0));
                            itmRow.setAttribute("ItmAmtBs", new BigDecimal(0));
                            itmRow.setAttribute("ItmDiscVal", new BigDecimal(0));
                            itmRow.setAttribute("ItmDiscTyp", oRow.getAttribute("ItmDiscTyp"));
                            itmRow.setAttribute("ItmShipQty", oRow.getAttribute("ItmShipQty"));
                            itmRow.setAttribute("ItmUom", oRow.getAttribute("ItmUom"));
                            itmRow.setAttribute("OldItmRate", oRow.getAttribute("ItmRate"));
                            itmRow.setAttribute("SuppliItmRate", row.getAttribute("NewPriceTrans"));

                            
                            
                            Object trf = oRow.getAttribute("TaxRuleFlg");
                            _log.info("Tax Rule applied : "+trf);
                            if ("Y".equals(trf)) {
                                Row soRow = this.getSlsInv().getCurrentRow();
                                Object attribute = soRow.getAttribute("CurrRate");
                                BigDecimal currRate =
                                    (attribute != null ? (BigDecimal)attribute : new BigDecimal(1));
                                soRow.setAttribute("TaxRuleFlg", "N");
                                
                                try {
                                    /* P_CLDID IN VARCHAR2,
                                                                P_SLOCID IN NUMBER,
                                                                p_HOORG_ID IN VARCHAR2,
                                                                P_ORGID IN VARCHAR2,
                                                                P_DOCID    IN  VARCHAR2,
                                                                P_ITMID     IN  NUMBER,
                                                                P_SHIPID     IN  NUMBER,
                                                                P_SOID     IN  NUMBER*/

                                    Integer taxRuleId =
                                        (Integer)callStoredFunction(Types.INTEGER, "FN_GET_INV_ITM_TR(?,?,?,?,?,?,?,?)",
                                                           new Object[] { getCldId().toString(), getSlocId(),
                                                                          getHoOrgId().toString(), getOrgId().toString(),
                                                                          row.getAttribute("InvoiceDocId").toString(),
                                                                          row.getAttribute("ItmId").toString(),
                                                                          row.getAttribute("ShipmntDocId").toString(),
                                                                          row.getAttribute("SoId").toString() });
                                    _log.info("Tax Rule Id : "+taxRuleId);

                                    if (taxRuleId != null && (Integer)taxRuleId != -1) {
                                        BigDecimal price = (itmRow.getAttribute("ItmRate") == null ? new BigDecimal(0) : (BigDecimal)itmRow.getAttribute("ItmRate"));
                                        BigDecimal qty = (itmRow.getAttribute("ItmShipQty") == null ? new BigDecimal(0) : (BigDecimal)itmRow.getAttribute("ItmShipQty"));
                                        BigDecimal taxAbleAmt = price.multiply(qty);
                                        
                                        BigDecimal val = new BigDecimal(0);
                                        _log.info("Currency Rate : "+currRate);
                                        
                                        SlsInvTrVOImpl impl = this.getSlsInvTr();
                                        Row tr = impl.createRow();
                                        impl.insertRow(tr);
                                        tr.setAttribute("SrNo", 1);
                                        tr.setAttribute("SrNoDest", 1);
                                        tr.setAttribute("TaxRuleId", taxRuleId);
                                        tr.setAttribute("TaxableAmt", taxAbleAmt);
                                        tr.setAttribute("ShipId", row.getAttribute("ShipmntDocId").toString());
                                        tr.setAttribute("SoId", row.getAttribute("SoId").toString());
                                        tr.setAttribute("ItmId", row.getAttribute("ItmId").toString());
                                        _log.info("Values for TrLInesFucntion ||  SlocId : "+this.getSlocId()+" CldId : "+this.getCldId().toString()+" HoOrgId : "+
                                                   this.getHoOrgId().toString()+" OrgId : "+this.getOrgId().toString()+" InvoiceId : "+itmRow.getAttribute("DocId").toString()+" ItmId : "+
                                                   row.getAttribute("ItmId").toString()+" TaxRuleId : "+(Integer)taxRuleId+" UserId : "+this.getUserId()+" ItmAmtSp : "+(BigDecimal)itmRow.getAttribute("ItmAmtSp")+
                                                  " CurrencyRate : "+currRate+" SoId : "+
                                                   row.getAttribute("SoId").toString()+" Shipment Id :"+
                                                   row.getAttribute("ShipmntDocId").toString());
                                        try {
                                            val =
                            (BigDecimal)callStoredFunction(Types.NUMERIC, "FN_INS_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?)",
                                    new Object[] { this.getSlocId(), this.getCldId().toString(),
                                                   this.getHoOrgId().toString(), this.getOrgId().toString(),
                                                   itmRow.getAttribute("DocId").toString(),
                                                   row.getAttribute("ItmId").toString(), (Integer)taxRuleId,
                                                   this.getUserId(), (BigDecimal)itmRow.getAttribute("ItmAmtSp"), currRate,
                                                   row.getAttribute("SoId").toString(),
                                                   row.getAttribute("ShipmntDocId").toString() });
                                        } catch (Exception e) {
                                            FacesMessage message =
                                                new FacesMessage("There have been an error in calling function 'FN_INS_INV_TR_LINES' !");
                                            message.setSeverity(FacesMessage.SEVERITY_ERROR);
                                            FacesContext.getCurrentInstance().addMessage(null, message);
                                            e.printStackTrace();
                                        }
                                        _log.info("Tax Amount : "+val);
                                        val = (val == null ? new BigDecimal(0) : val);
                                        tr.setAttribute("TaxAmtSp", val);
                                        if (currRate != null && val != null) {
                                            tr.setAttribute("TaxAmtBs", val.multiply(currRate));
                                        } else {
                                            tr.setAttribute("TaxAmtBs", val);
                                        }
                                    }
                                    /* SlsInvPmntSchdlVOImpl impl = this.getSlsInvPmntSchdl();
                                    impl.executeQuery(); */
                                } catch (Exception e) {
                                    FacesMessage message =
                                        new FacesMessage("There have been an error in calling function 'SLS.FN_INS_INV_CALC' !");
                                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                                    FacesContext.getCurrentInstance().addMessage(null, message);
                                    e.printStackTrace();
                                }
                            } 
                        }
                    }
                }
                
                this.getSlsInvTrLine1().executeQuery();
                
            }
        }
    }

    /**
     * Container's getter for InvDtlForSuppVO.
     * @return InvDtlForSuppVO
     */
    public ViewObjectImpl getInvDtlForSuppVO() {
        return (ViewObjectImpl)findViewObject("InvDtlForSuppVO");
    }

    /**
     * Container's getter for ItmTrForSuppVO.
     * @return ItmTrForSuppVO
     */
    public ViewObjectImpl getItmTrForSuppVO() {
        return (ViewObjectImpl)findViewObject("ItmTrForSuppVO");
    }

    /**
     * Container's getter for ItmTrLinesForSuppVO.
     * @return ItmTrLinesForSuppVO
     */
    public ViewObjectImpl getItmTrLinesForSuppVO() {
        return (ViewObjectImpl)findViewObject("ItmTrLinesForSuppVO");
    }

    /**
     * Container's getter for ShipItmForSuppVO.
     * @return ShipItmForSuppVO
     */
    public ViewObjectImpl getShipItmForSuppVO() {
        return (ViewObjectImpl)findViewObject("ShipItmForSuppVO");
    }

    /**
     * Container's getter for ItmTrLinesNewForSupp.
     * @return ItmTrLinesNewForSupp
     */
    public ViewObjectImpl getItmTrLinesNewForSupp() {
        return (ViewObjectImpl)findViewObject("ItmTrLinesNewForSupp");
    }

    /**
     * Check Mandatory field entered in Other charges or not
     */
    public Integer chkInvOcEnteredOrNot() {
        Integer retVal = 0;
        ViewObjectImpl impl = this.getSlsInvOc();
        long count = impl.getEstimatedRowCount();
        if (count > 0) {
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                if (currentRow.getAttribute("CoaId") == null || currentRow.getAttribute("DocId") == null) {
                    retVal = 1;
                }
            }
        }

        return retVal;
    }

    /**
     * Container's getter for InvCurrConvType1.
     * @return InvCurrConvType1
     */
    public ViewObjectImpl getInvCurrConvType1() {
        return (ViewObjectImpl)findViewObject("InvCurrConvType1");
    }

    /**
     * To get Currency Conversion Type From InvCurrConvType and assign it to shipment accordingly
     */
    public Integer getCurConvType() {
        Integer retVal = 0;

        /*  Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString()); */

        ViewObjectImpl convType1 = this.getInvCurrConvType1();
        convType1.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        convType1.setNamedWhereClauseParam("BindCldId", this.getCldId().toString());
        convType1.setNamedWhereClauseParam("BindOrgId", this.getOrgId().toString());
        convType1.executeQuery();


        Row[] allRowsInRange = convType1.getAllRowsInRange();
        if (allRowsInRange != null) {
            for (Row r : allRowsInRange) {
                Object currType = allRowsInRange[0].getAttribute("InvCurrConvType");
                if (currType != null) {
                    retVal = (Integer)currType;
                    System.out.println("Return Value is " + retVal);
                    if (retVal == 538) {
                        this.getSlsInv().getCurrentRow().setAttribute("CurrConvTrans", "S");
                    } else if (retVal == 539) {
                        this.getSlsInv().getCurrentRow().setAttribute("CurrConvTrans", "I");
                    }
                }
            }
        }

        return retVal;
    }

    /**
     * Function checks whether any process calculation is present or not. If present then after delete it will do post changes again
     */
    public void chkProcessCalculation() {
        //RowSetIterator rsi = this.getSlsInvCalc().createRowSetIterator(null);

        //while (rsi.hasNext()) {
        //  Row next = rsi.next();
        //if (next != null) {
        System.out.println("Inside process Calculation");
        this.getDBTransaction().postChanges();
        //}
        //}

    }

    public void setTaxRuleInTransient() {
        SlsInvVOImpl impl = this.getSlsInv();
        SlsInvTrVOImpl invTr = this.getSlsInvTr();
        invTr.executeQuery();
        if (invTr.getRowCount() > 0) {
            RowSetIterator createRowSetIterator = invTr.createRowSetIterator(null);
            if (createRowSetIterator.hasNext()) {
                Row next = createRowSetIterator.next();
                Object attribute = next.getAttribute("TaxRuleId");
                if (attribute != null) {
                    Row currentRow = impl.getCurrentRow();
                    currentRow.setAttribute("TaxRuleTrans", (Long)attribute);
                }
                _log.info("Setting whole tax rule id : "+attribute);
            }
            createRowSetIterator.closeRowSetIterator();
        }
    }

    public void setRemainingPayment() {
        BigDecimal totAmt = new BigDecimal(0);
        BigDecimal amtSchdlMade = new BigDecimal(0);
        BigDecimal pyMnt = new BigDecimal(0);
        SlsInvVOImpl impl = this.getSlsInv();
        Row currentRow = impl.getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("TransAmtAfterOcSp") != null) {
                totAmt = (BigDecimal)currentRow.getAttribute("TransAmtAfterOcSp");
            }

            SlsInvPmntSchdlVOImpl invPmntSchdl = this.getSlsInvPmntSchdl();
            RowSetIterator createRowSetIterator = invPmntSchdl.createRowSetIterator(null);
            System.out.println("RowCOunt >: " + createRowSetIterator.getRowCount());
            while (createRowSetIterator.hasNext()) {
                Row next = createRowSetIterator.next();
                if (next.getAttribute("PayAmt") != null) {
                    pyMnt = pyMnt.add((BigDecimal)next.getAttribute("PayAmt"));
                }
            }
            createRowSetIterator.closeRowSetIterator();
            amtSchdlMade = amtSchdlMade.add((pyMnt));
            BigDecimal remainingAmnt = new BigDecimal(0);

            if (totAmt.compareTo(amtSchdlMade) >= 0) {
                remainingAmnt = totAmt.subtract(amtSchdlMade);
            }
            System.out.println("TotAmt : " + totAmt + " PaidAmt : " + amtSchdlMade + " AmtSet : " + remainingAmnt);
            currentRow.setAttribute("TransPayAmt", remainingAmnt);
        }
    }

    public boolean isCoaIdNull() {
        Boolean b = false;
        Row currentRow = this.getSlsInv().getCurrentRow();
        Object coaId = currentRow.getAttribute("CoaId");
        if (coaId != null) {
            b = false;
        } else {
            b = true;
        }
        return b;
    }

    /**
     * Container's getter for TempSuppliVO1.
     * @return TempSuppliVO1
     */
    public ViewObjectImpl getTempSuppliVO1() {
        return (ViewObjectImpl)findViewObject("TempSuppliVO1");
    }

    /**
     * Container's getter for searchForSupplimentryInvoiceVO1.
     * @return searchForSupplimentryInvoiceVO1
     */
    public ViewObjectImpl getsearchForSupplimentryInvoiceVO1() {
        return (ViewObjectImpl)findViewObject("searchForSupplimentryInvoiceVO1");
    }
    
    /**
     *  Filter supplimentry invoice search VO
     */
    public void searchVoForSuppInvoice(){
        ViewObjectImpl forSupplimentryInvVO = this.getsearchForSupplimentryInvoiceVO1();
        ViewObjectImpl impl = this.getTempSuppliVO1();
        Row currentRow = impl.getCurrentRow();
        Row soRow = this.getSlsInv().getCurrentRow();
        if(currentRow != null){
            if(soRow.getAttribute("EoId") == null){
                FacesMessage message = new FacesMessage("Please select a Customer!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }else if(soRow.getAttribute("CurrIdSp") == null){
                FacesMessage message = new FacesMessage("Please select a Currency!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }else if(currentRow.getAttribute("FromDateTrans") == null){
                FacesMessage message = new FacesMessage("Please select From Date!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }else if(currentRow.getAttribute("ToDateTrans") == null){
                FacesMessage message = new FacesMessage("Please select To Date!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }else{
                forSupplimentryInvVO.setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
                forSupplimentryInvVO.setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
                forSupplimentryInvVO.setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
                forSupplimentryInvVO.setNamedWhereClauseParam("CldIdBind", this.getCldId());
                forSupplimentryInvVO.setNamedWhereClauseParam("CurrIdBind", (Integer)soRow.getAttribute("CurrIdSp"));
                forSupplimentryInvVO.setNamedWhereClauseParam("ToDtBind", (Timestamp)currentRow.getAttribute("ToDateTrans"));
                forSupplimentryInvVO.setNamedWhereClauseParam("FromDtBind", (Timestamp)currentRow.getAttribute("FromDateTrans"));
                forSupplimentryInvVO.setNamedWhereClauseParam("EoIdBind", (Integer)soRow.getAttribute("EoId"));
                String v = (currentRow.getAttribute("ItemIdTrans") == null? null :
                    (currentRow.getAttribute("ItemIdTrans").toString().equals("") ? null : currentRow.getAttribute("ItemIdTrans").toString()));
                forSupplimentryInvVO.setNamedWhereClauseParam("ItmIdBind", v);
                forSupplimentryInvVO.executeQuery();
                
                _log.info("Record Count : "+forSupplimentryInvVO.getEstimatedRowCount());

            }
                        
        }
       
    }
    
    public void selectAllInvoices(){
        ViewObjectImpl forSupplimentryInvVO = this.getsearchForSupplimentryInvoiceVO1();
        RowSetIterator itr = forSupplimentryInvVO.createRowSetIterator(null);
        while(itr.hasNext()){
            Row next = itr.next();
            next.setAttribute("selectedTrans", true);
            //_log.info("Setting value to Y.");
        }
        itr.closeRowSetIterator();
        //_log.info("Select all Invoices");
    }
    public void deselectAllInvoices(){
        ViewObjectImpl forSupplimentryInvVO = this.getsearchForSupplimentryInvoiceVO1();
        RowSetIterator itr = forSupplimentryInvVO.createRowSetIterator(null);
        while(itr.hasNext()){
            Row next = itr.next();
            next.setAttribute("selectedTrans", false);
            //_log.info("Setting value to Y.");
        }
        itr.closeRowSetIterator();
        //_log.info("DeSelect all Invoices");
    }


    public boolean saveAndPoplulateDistinctItm(){
        ViewObjectImpl forSupplimentryInvoiceVO = this.getsearchForSupplimentryInvoiceVO1();
        Boolean isAnySelected = false;
        RowSetIterator countItr = forSupplimentryInvoiceVO.createRowSetIterator(null);
        while(countItr.hasNext()){
            Row row = countItr.next();
            Object obj = row.getAttribute("selectedTrans");
            StringBuffer selected = new StringBuffer(obj == null ? "" : obj.toString());
            if(selected.toString().equalsIgnoreCase("true")){
                isAnySelected = true;
                break;
            }
        }
        countItr.closeRowSetIterator();
        RowSetIterator createRowSetIterator = forSupplimentryInvoiceVO.createRowSetIterator(null);
        
        StringBuffer inClause = new StringBuffer("");
        if(isAnySelected){
            inClause = new StringBuffer(" AND C.DOC_ID IN(");
        }
        int i = 1;
        while(createRowSetIterator.hasNext()){
            Row row = createRowSetIterator.next();
            Object obj = row.getAttribute("selectedTrans");
            StringBuffer selected = new StringBuffer(obj == null ? "" : obj.toString());
            if(selected.toString().equalsIgnoreCase("true")){
                if(i == 1){
                    inClause.append("'"+row.getAttribute("DocId").toString()+"'");
                    i = 0;
                }else{
                    inClause.append(",'"+row.getAttribute("DocId").toString()+"'");
                }
            }
        }
        if(isAnySelected){
            inClause.append(")");
        }else{
            inClause = new StringBuffer(" AND C.DOC_ID IN('-1')");
        }
        
        ViewObjectImpl itmVO = this.getDistinctItmVO1();
        String Originalquery = itmVO.getQuery();
        _log.info("Original Query : "+Originalquery);
        
        int i_2 = Originalquery.indexOf(") QRSLT");
        _log.info("Index is : "+i_2);
        String fString = Originalquery.substring(0, i_2);
        String lString = Originalquery.substring(i_2);
        
        String query = fString+" "+inClause.toString()+" "+lString;
        itmVO.setQuery(query);


        Row searchRow = this.getTempSuppliVO1().getCurrentRow();
        Object itmObj = searchRow.getAttribute("ItemIdTrans");
        _log.info("Modified Query : "+query);
        itmVO.setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
        itmVO.setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
        itmVO.setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId());
        itmVO.setNamedWhereClauseParam("CldIdBind", this.getCldId());
        itmVO.setNamedWhereClauseParam("ItmIdBind", (itmObj == null ? null : (itmObj.toString().equals("") ? null : itmObj.toString())));
        itmVO.executeQuery();
        itmVO.setQuery(Originalquery);
        
        System.out.println("In clause is : "+inClause);
        return false;
    }

    /**
     * Container's getter for DistinctItmVO1.
     * @return DistinctItmVO1
     */
    public ViewObjectImpl getDistinctItmVO1() {
        return (ViewObjectImpl)findViewObject("DistinctItmVO1");
    }
    
    public boolean applyNewPriceForSuppInv(StringBuffer oper, StringBuffer typ, BigDecimal value){
        _log.info("Operation : "+oper);
        _log.info("Type : "+typ);
        _log.info("Value : "+value);
        if(typ.toString().equals("A")){
            ViewObjectImpl itmVo = this.getDistinctItmVO1();
            RowSetIterator rowItr = itmVo.createRowSetIterator(null);
            while(rowItr.hasNext()){
                Row row = rowItr.next();
                BigDecimal oldPrice = (row.getAttribute("ItmRate") == null ? new BigDecimal(0) : (BigDecimal)row.getAttribute("ItmRate"));
                if(oper.toString().equals("A")){
                    row.setAttribute("NewPriceTrans", oldPrice.add(value));   
                }else if(oper.toString().equals("S")){
                    BigDecimal p = oldPrice.subtract(value);
                    row.setAttribute("NewPriceTrans", (p.compareTo(new BigDecimal(0)) < 0) ? new BigDecimal(0) : p);
                }else{
                    row.setAttribute("NewPriceTrans", value);
                }
            }
            rowItr.closeRowSetIterator();
        }else if(typ.toString().equals("P")){
            ViewObjectImpl itmVo = this.getDistinctItmVO1();
            RowSetIterator rowItr = itmVo.createRowSetIterator(null);
            while(rowItr.hasNext()){
                Row row = rowItr.next();
                BigDecimal oldPrice = (row.getAttribute("ItmRate") == null ? new BigDecimal(0) : (BigDecimal)row.getAttribute("ItmRate"));
                if(oper.toString().equals("A")){
                    BigDecimal add = oldPrice.add(oldPrice.multiply(new BigDecimal(0.01)).multiply(value));
                    row.setAttribute("NewPriceTrans", add);   
                }else if(oper.toString().equals("S")){
                    BigDecimal add = oldPrice.subtract(oldPrice.multiply(new BigDecimal(0.01)).multiply(value));
                    row.setAttribute("NewPriceTrans", add.compareTo(new BigDecimal(0)) > 0 ? add : new BigDecimal(0));
                }else{
                    row.setAttribute("NewPriceTrans", oldPrice.multiply(new BigDecimal(0.01)).multiply(value));
                }
            }
            rowItr.closeRowSetIterator();
        }
        return false;
    }
    
    public void resetSuppliTabs(){
        ViewObjectImpl s = this.getsearchForSupplimentryInvoiceVO1();
        s.setNamedWhereClauseParam("CldIdBind", -1);
        s.executeQuery();
        
        ViewObjectImpl dItm = this.getDistinctItmVO1();
        dItm.setNamedWhereClauseParam("CldIdBind", -1);
        dItm.executeQuery();
        
        this.getTempSuppliVO1().executeQuery();
    }
    
    
    public Boolean isWorkFlowAndUserValid(){
        Boolean b = true;
        StringBuffer attachedWithTheDoc = getWfIdAttachedWithTheDoc();
        if(attachedWithTheDoc == null){
            FacesMessage message =
                new FacesMessage("WorkFlow is not Defined for this Document! Please define a WorkFlow !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            b = false;  
        }else{
           /* Integer usrLvl =getUsrLvl(attachedWithTheDoc);
             if(usrLvl.equals(0)){
                FacesMessage message =
                    new FacesMessage("Current User is not in the workfLow of this Document. Please add it to Workflow !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                b = false;
            } */
        }
        return b;
    }
    /**
     * Method to update shipment on save to avoid a single shipment no on more than one invoices. 
     **/
    public void updateShipmentOnSave(){
        Row currentRow = this.getSlsInv().getCurrentRow();
        SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
        RowSetIterator itr = dtl.createRowSetIterator(null);
        //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
        Integer fyId = (Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] { getCldId().toString(),
                                                                                                    getOrgId().toString(), currentRow.getAttribute("DocDt") });
        
        
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != null) {
                Object Id = next.getAttribute("ShipId");
                if (Id != null && (Integer)currentRow.getAttribute("InvType") != 480) {

                    String shipId = Id.toString();
                    System.out.println("Consignment invoice ...... ShipId : " + shipId);
                    //SLS.FN_UPDATE_SHIPMNT_STAT (P_CLDID  VARCHAR2, P_SLOCID NUMBER,P_ORGID VARCHAR2,P_SHIPID VARCHAR2,P_FYID VARCHAR2)
                    try {
                    Integer i =
                        (Integer)callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_SHIPMNT_STAT(?,?,?,?,?,?,?)",
                                                    new Object[] { getCldId().toString(),
                                                                   getSlocId().toString(),
                                                                   getOrgId().toString(), shipId, fyId,
                                                                   (Integer)currentRow.getAttribute("InvType"), "A"});

                     } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error while calling function !! SLS.FN_UPDATE_SHIPMNT_STAT");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                } else {
                    System.out.println("ShipId is null in row " + next.getKey());
                }
            } else {
                System.out.println("There is a blank row in item details");
            }
        }
        itr.closeRowSetIterator();
    }
    public void filterTNC() {
        ViewObjectImpl cView = this.getTnCView();
        cView.setNamedWhereClauseParam("Cld_Id_Bind", getCldId());
        cView.setNamedWhereClauseParam("Org_Id_Bind", getOrgId());
        cView.setNamedWhereClauseParam("Sloc_Id_Bind", getSlocId());
        cView.executeQuery();
    }
    
    public Boolean areAllShipmntAmtValid(){
        Boolean b = true;
        SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
        RowSetIterator ctr = dtl.createRowSetIterator(null);
        while(ctr.hasNext()){
            Row next = ctr.next();
            Object shpAmtSpO = next.getAttribute("ShipAmtSp");
            _log.info("Checking Shipment No : "+next.getAttribute("ShipId"));
            BigDecimal c = (shpAmtSpO == null ? new BigDecimal(0) : (BigDecimal)shpAmtSpO);
            if(c.compareTo(new BigDecimal(0)) <= 0){
                b = false;
                break;
            }
        }
        ctr.closeRowSetIterator();
        if(b == false){
            FacesMessage message =
                new FacesMessage("There have been some problem with the Selected Shipments. Please try again.Contact ESS !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + "There have been some problem with the Selected Shipments !" +
                                  "</p></b>");
            saveMsg.append("<ul>");
            saveMsg.append("<li>Shipment Amount in one or more Shipment is zero.</li>");
            saveMsg.append("<li>Some problem have occured at the time of adding Shipment.</li>");
            saveMsg.append("</ul>");
            saveMsg.append("<b>Please try again.");
            saveMsg.append("<br />If the problem persists Contact ESS !<b/>");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        _log.info("Add Shipments are valid : "+b);
        return b;
    }
    
    public Boolean isFinancialYearValid(){
        Boolean b = true;
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        Integer fYidOrg = getFYId(p_cldId, p_org_id);
        if(fYidOrg.equals(-1)){
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + "Financial Year is not Open for this Organisation on Current Date!" +
                                  "</p></b>");
            saveMsg.append("<b>Please Open Financial Year for Current Date before creating any document !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
            b = false;
        }
        return b;
    }
    public Integer getFYId(String CldId, String OrgId) {
        Integer fyId = 0;
        _log.info("DocDate --" + new Timestamp(System.currentTimeMillis()));
        
            fyId =
                (Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] { CldId, OrgId,
                                                                                        new Timestamp(System.currentTimeMillis()) }));

        _log.info("Fyid is--" + fyId);
        return fyId;
    }
    public String getdrivername()
    {         String   drivernme ="";
             //SlsIntimationSlipAMImpl am = (SlsIntimationSlipAMImpl)resolvElDC("SlsIntimationSlipAMDataControl");
             DBTransaction dbTransaction = (DBTransaction) this.getTransaction();
             PreparedStatement prepStatement =
             dbTransaction.createPreparedStatement("select * from dual", 0);
             try
             {
               System.out.println("Driver name--"+prepStatement.getConnection().getMetaData().getDriverName());
               drivernme = prepStatement.getConnection().getMetaData().getDriverName();
             }
             catch (SQLException e)
             {
                 e.printStackTrace();
             }
             return drivernme;

             }
    

}


