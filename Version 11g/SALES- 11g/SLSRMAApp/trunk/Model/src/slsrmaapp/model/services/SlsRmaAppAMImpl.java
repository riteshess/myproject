package slsrmaapp.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import java.util.HashSet;

import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsrmaapp.model.dc.ItmRcpt;
import slsrmaapp.model.entities.SlsRmaItmBinEOImpl;
import slsrmaapp.model.entities.SlsRmaItmLotEOImpl;
import slsrmaapp.model.entities.SlsRmaItmSrEOImpl;
import slsrmaapp.model.services.common.SlsRmaAppAM;
import slsrmaapp.model.views.LovShipWiseLotVOImpl;
import slsrmaapp.model.views.SlsRmaItmLotVORowImpl;
import slsrmaapp.model.views.SlsRmaVOImpl;
import slsrmaapp.model.views.SlsSearchRmaVOImpl;
import slsrmaapp.model.views.TempVoVORowImpl;
import slsrmaapp.model.views.TransSearchAttVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 05 18:20:40 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsRmaAppAMImpl extends ApplicationModuleImpl implements SlsRmaAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SlsRmaAppAMImpl() {
    }
    private static ADFLogger _log = ADFLogger.createADFLogger(SlsRmaAppAMImpl.class);

    /**
     * Container's getter for SlsRmaItem1.
     * @return SlsRmaItem1
     */
    public ViewObjectImpl getSlsRmaItem1() {
        return (ViewObjectImpl)findViewObject("SlsRmaItem1");
    }

    /**
     * Container's getter for SlsRmaShipmnt1.
     * @return SlsRmaShipmnt1
     */
    public ViewObjectImpl getSlsRmaShipmnt1() {
        return (ViewObjectImpl)findViewObject("SlsRmaShipmnt1");
    }

    /**
     * Container's getter for SlsRma1.
     * @return SlsRma1
     */
    public SlsRmaVOImpl getSlsRma1() {
        return (SlsRmaVOImpl)findViewObject("SlsRma1");
    }

    /**
     * Container's getter for SlsRmaItmTemp1.
     * @return SlsRmaItmTemp1
     */
    public ViewObjectImpl getSlsRmaItmTemp1() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmTemp1");
    }


    /**
     * Container's getter for SlsRmaItmTemp2.
     * @return SlsRmaItmTemp2
     */
    public ViewObjectImpl getSlsRmaItmTemp2() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmTemp2");
    }

    /**
     * Container's getter for SlsRmaToSlsRmaItmTempVL1.
     * @return SlsRmaToSlsRmaItmTempVL1
     */
    public ViewLinkImpl getSlsRmaToSlsRmaItmTempVL1() {
        return (ViewLinkImpl)findViewLink("SlsRmaToSlsRmaItmTempVL1");
    }


    /**
     * Container's getter for TempVo1.
     * @return TempVo1
     */
    public ViewObjectImpl getTempVo1() {
        return (ViewObjectImpl)findViewObject("TempVo1");
    }


    /**
     * Container's getter for CustomerTypeLov1.
     * @return CustomerTypeLov1
     */
    public ViewObjectImpl getCustomerTypeLov1() {
        return (ViewObjectImpl)findViewObject("CustomerTypeLov1");
    }


    /*********************************Methods to be used in managed bean code*********************************************/

    /**Method to add Lot Details**.
     */
    public void addLotDetails() {
        ViewObject vo = this.getSlsRmaItmLot1();
        Row curRow = vo.getCurrentRow();
        if (curRow.getAttribute("RcptQty") != null) {
            //  _log.info(" IN AMIMPLE CLASS ----->>>Rcpt Qunat--" + curRow.getAttribute("RcptQty"));
            curRow.setAttribute("RcptQtyBs", curRow.getAttribute("RcptQty"));
        }
        this.getSlsRmaItmLot1().executeQuery();
    }

    /**Method to add LotWise Bin**.
     */
    public void addItmToLotBin() {
        ViewObject lot = this.getSlsRmaItmLot1();
        ViewObject bin = this.getSlsRmaItmBin1();
        Row lotRow = lot.getCurrentRow();
        Row binRow = bin.getCurrentRow();
        //  _log.info("IN AMIMPLE CLASS ----->>>Lot Id is-->" + lotRow.getAttribute("LotId"));
        binRow.setAttribute("LotId", lotRow.getAttribute("LotId"));
    }

    /****Method to set quantity in Bin base quantity**/
    public void setbinQtyBsVal() {
        ViewObject bin = this.getSlsRmaItmBin1();
        ViewObjectImpl lot = this.getSlsRmaItmLot1();
        Row binRow = bin.getCurrentRow();
        if (binRow.getAttribute("RcptQty") != null) {
            binRow.setAttribute("RcptQtyBs", binRow.getAttribute("RcptQty"));
            binRow.setAttribute("SoId", lot.getCurrentRow().getAttribute("SoId").toString());
        }
        this.getSlsRmaItmBin1().executeQuery();
    }

    /*****Method to add ITEM SERIAL WISE IN Bin***/

    public void addItemToSerialNo() {
        Row lotRow = this.getSlsRmaItmLot1().getCurrentRow();
        Row binRow = this.getSlsRmaItmBin1().getCurrentRow();
        Row srRow = this.getSlsRmaItmSr1().getCurrentRow();
        _log.info("LotRow is-->" + lotRow + "binRow--" + binRow);
        if (binRow != null) {
            System.out.println("LotId is-" + binRow.getAttribute("LotId") + "and BinId is-" +
                               binRow.getAttribute("BinId"));
            srRow.setAttribute("LotId", binRow.getAttribute("LotId"));
            srRow.setAttribute("BinId", binRow.getAttribute("BinId"));
        } else {
            System.out.println("LotId is-" + lotRow.getAttribute("LotId") + "and BinId is-" +
                               binRow.getAttribute("BinId"));
            srRow.setAttribute("LotId", lotRow.getAttribute("LotId"));
            srRow.setAttribute("BinId", 0);
        }
        //  this.getSlsRmaItmSr1().executeQuery();
    }


    /*****Method to Validate Lot Quantity*****/


    public boolean isLotQtyValid(oracle.jbo.domain.Number obj) {
        oracle.jbo.domain.Number _rejQty =
            (oracle.jbo.domain.Number)getSlsRmaItem2().getCurrentRow().getAttribute("RejQty");
        ViewObjectImpl _lotVo = (ViewObjectImpl)findViewObject("SlsRmaItmLot1");
        Row curRw = _lotVo.getCurrentRow();
        RowSetIterator rsi = _lotVo.createRowSetIterator(null);
        oracle.jbo.domain.Number sum = new oracle.jbo.domain.Number(0);
        while (rsi.hasNext()) {
            Row cur = rsi.next();
            if (cur != null && curRw != cur) {
                oracle.jbo.domain.Number _lotRejQnt = (oracle.jbo.domain.Number)cur.getAttribute("RcptQtyBs");
                if (_lotRejQnt != null) {
                    sum = sum.add(_lotRejQnt);
                }
            }
        }
        rsi.closeRowSetIterator();
        sum = sum.add(obj);
        if (_rejQty != null && sum.compareTo(_rejQty) == 1) {
            return true;
        }
        return false;
    }

    /*****Method to validate bin quantity******/

    public boolean isBinQntValid(oracle.jbo.domain.Number _obj) {
        System.out.println("object  " + _obj);
        oracle.jbo.domain.Number _lotRejQty = new Number(0);
        String lotId = "";
        Row lotVwRow = (Row)getSlsRmaItmLot1().getCurrentRow();
        if (lotVwRow != null) {
            _lotRejQty = (oracle.jbo.domain.Number)lotVwRow.getAttribute("RcptQtyBs");
            lotId = (String)lotVwRow.getAttribute("LotId");
        }

        System.out.println("Lot id--" + lotId);
        System.out.println("LOT Rej Quant--" + _lotRejQty);
        ViewObjectImpl _binVo = (ViewObjectImpl)findViewObject("SlsRmaItmBin1");
        Row binRow = _binVo.getCurrentRow();
        Row filteredRow[] = _binVo.getFilteredRows("LotId", lotId);
        System.out.println("Filtered row length--" + filteredRow.length);
        oracle.jbo.domain.Number sum = new oracle.jbo.domain.Number(0);
        if (filteredRow.length > 0) {
            System.out.println("set 1");
            for (Row cur : filteredRow) {
                System.out.println("set 2");
                if (binRow != cur) {
                    System.out.println("set 3");
                    oracle.jbo.domain.Number _binRcptQnt = (oracle.jbo.domain.Number)cur.getAttribute("RcptQtyBs");
                    if (_binRcptQnt != null) {
                        System.out.println("set 4");
                        sum = sum.add(_binRcptQnt);
                        System.out.println("Sum- in amimpl--" + sum);
                    }
                }

            }
        }
        sum = sum.add(_obj);
        System.out.println("final sum- in bin-->" + sum + "_lotRejQty " + _lotRejQty);
        if (_lotRejQty != null && sum.compareTo(_lotRejQty) == 1) {
            return true;
        }

        return false;
    }

    /*****Method to Insert Data In Item Table*****/

    public void fnsToInsertInItemTable(String geId) {
        System.out.println("row of ge " + this.getLovGeId1().getRowCount());
        Row _rmaRow = this.getSlsRma1().getCurrentRow();
        if (_rmaRow != null) {
            Integer _slocId = (Integer)getSlsRma1().getCurrentRow().getAttribute("SlocId");
            String _cldId = (String)getSlsRma1().getCurrentRow().getAttribute("CldId");
            String _orgId = (String)getSlsRma1().getCurrentRow().getAttribute("OrgId");
            String _hoOrgId = (String)getSlsRma1().getCurrentRow().getAttribute("HoOrgId");
            String _docId = (String)getSlsRma1().getCurrentRow().getAttribute("DocId");
            Timestamp _docDt = (Timestamp)getSlsRma1().getCurrentRow().getAttribute("DocDt");
            Integer _eoId = (Integer)getSlsRma1().getCurrentRow().getAttribute("EoId");
            Integer _uCreate = (Integer)getSlsRma1().getCurrentRow().getAttribute("UsrIdCreate");
            Timestamp _uDate = (Timestamp)getSlsRma1().getCurrentRow().getAttribute("UsrIdCreateDt");
            // System.out.println("Parameters Values... " + _cldId + "  " + _slocId + "   " + _hoOrgId + "    " + _orgId +
            //      "    " + _docId + "    " + _docDt + "    " + _eoId + "    " + geId + "    " + _uCreate +
            //     "    " + _uDate);
            callStoredFunction1(VARCHAR, "SLS.FN_INS_GE_ITM_TO_RMA(?,?,?,?,?,?,?,?,?,?)",
                                new Object[] { _cldId, _slocId, _hoOrgId, _orgId, _docId, _docDt, _eoId, geId,
                                               _uCreate, _uDate });
            getSlsRmaItmTemp2().executeQuery();
            this.getTempVo1().executeQuery();
        }


    }


    /*****This function is use to Call Daabade Function*****/
    protected Object callStoredFunction2(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }


    /**
     **
     **
     ***Fuction CAlls database function to insert data in shipment table**
     *
     *
     ****/
    public BigDecimal instoTnsInShipNItm() {
        BigDecimal i = new BigDecimal(0);
        try {

            Row _rmaVoRow = this.getSlsRma1().getCurrentRow();
            Row _shipVoRow = this.getSlsRmaShipmnt2().getCurrentRow();
            Row _itmTempVoRow = this.getSlsRmaItmTemp2().getCurrentRow();

            if (_rmaVoRow != null && _shipVoRow != null && _itmTempVoRow != null) {
                Integer _slocId = (Integer)_rmaVoRow.getAttribute("SlocId");
                String cldId = (String)_rmaVoRow.getAttribute("CldId");
                String _orgId = (String)_rmaVoRow.getAttribute("OrgId");
                String _hoOrgId = (String)_rmaVoRow.getAttribute("HoOrgId");
                String _docId = (String)_rmaVoRow.getAttribute("DocId");
                Timestamp _docDt = (Timestamp)_rmaVoRow.getAttribute("DocDt");
                Integer _eoId = (Integer)_rmaVoRow.getAttribute("EoId");
                String _shipId = (String)_shipVoRow.getAttribute("ShipmntId");
                Timestamp shipDate = (Timestamp)_shipVoRow.getAttribute("ShipmntDt");
                String _geDocId = (String)_rmaVoRow.getAttribute("GeDocId");
                String _itmId = (String)_itmTempVoRow.getAttribute("ItmId");
                Integer _usrIdCreate = (Integer)_rmaVoRow.getAttribute("UsrIdCreate");
                Timestamp _usrCtreatDt = (Timestamp)_rmaVoRow.getAttribute("UsrIdCreateDt");
                String _wareHouse = (String)_rmaVoRow.getAttribute("WhId");
                // System.out.println(_wareHouse + "---------ware house");
                /*  System.out.println("SERVER LOCATION ID =" + _slocId + "CLOUD ID IS=" + cldId + "ORGANISATION ID IS=" +
                                   _orgId + "HEAD OFFICE ORG ID IS=" + _hoOrgId + "DOC ID  IS=" + _docId +
                                   "DOC DATE IS=" + _docDt + "CUSTOMER ID IS=" + _eoId + "SHIPMENT ID=" + _shipId +
                                   "SHIPMENT DATE IS=" + shipDate + "GATE ENTRY ID IS=" + _geDocId + "ITEM ID IS=" +
                                   _itmId + "CRETAED BY ID IS=" + _usrIdCreate + "CREATE ADTE IS=" + _usrCtreatDt); */
                i =
  (BigDecimal)callStoredFunction2(INTEGER, "SLS.FN_INS_GE_TO_SHIP_ITM_RMA(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                  new Object[] { cldId, _slocId, _hoOrgId, _orgId, _docId, _docDt, _eoId, _shipId,
                                                 shipDate, _geDocId, _itmId, _usrIdCreate, _usrCtreatDt, _wareHouse });
                // System.out.println("return value from function  " + i);
                getSlsRmaItem2().executeQuery();
                getSlsRmaItem1().executeQuery();
                /*   System.out.println("shipment id iin claaling ddb fns---" +
                                   this.getSlsRmaItem2().getCurrentRow().getAttribute("ShipmntId") + " key is----" +
                                   this.getSlsRmaItem2().getCurrentRow().getKey()); */
                return i;
            }
            //    System.out.println("return value from function  " + i);

            // getSlsRmaItem2().executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            // System.out.println("in catch");
            return i;
        }

        /*         System.out.println("shipment id in caling db fns---" +
                           this.getSlsRmaItem2().getCurrentRow().getAttribute("ShipmntId") + " key is----" +
                           this.getSlsRmaItem2().getCurrentRow().getKey()); */
        return i;

    }

    private static int VARCHAR = Types.VARCHAR;


    public void fnsToInsertDataInShipmentAndItemTable(String gatePassDocId) {
    }


    /*****This function is use to Call Daabade Function*****/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        //System.out.println("z--" + bindVars[z]);
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            //   System.out.println("Return val--" + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }


    /*****This function is use to Call Daabade Function*****/
    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }

    /***Function To Validate Rejected Quantity in SLS$RMA$ITM Table *****/
    public String validateRejectedQuant(oracle.jbo.domain.Number _rejectedQuant) {
        Row currRow = this.getSlsRmaItem2().getCurrentRow();
        if (currRow != null) {
            oracle.jbo.domain.Number _shipQuant = (oracle.jbo.domain.Number)currRow.getAttribute("ShipmntQty");
            if (_shipQuant != null) {
                /*    System.out.println("_rejectedQuant " + _rejectedQuant + "_shipQuant " + _shipQuant +
                                   "_rejectedQuant.compareTo(_shipQuant) == -1" +
                                   _rejectedQuant.compareTo(_shipQuant)); */
                if (_rejectedQuant.compareTo(_shipQuant) <= 0) { //_rejectedQuant.intValue() <= _shipQuant.intValue()
                    return "OK";
                } else {
                    return "NOT_OK";
                }
            }

        }
        return "NOT_OK";
    }


    /****Methods to get Global Parameter*/
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public String getparamHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getparamBinCheck() {
        return resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
    }

    public String getparamGeChk() {
        return resolvEl("#{pageFlowScope.GLBL_ORG_GE_CHK}");
    }

    /*****Functon to set data in Transiant fields i.e. trnasShipId amd TransShipDate*****/

    public void setDataInShipmntTbl(StringBuffer ShipId) {
        String geDocId = "";
        Timestamp date = null;
        Row rmaRow = this.getSlsRma1().getCurrentRow();
        if (rmaRow != null) {
            geDocId = (String)rmaRow.getAttribute("GeDocId");
        }

        TempVoVORowImpl currentRow = (TempVoVORowImpl)this.getTempVo1().getCurrentRow();
        RowSet idVO1 = currentRow.getLovShipmentIdVO1();
        RowSet idVO2 = currentRow.getLovDistnctShipVO1(); //LOV when NO GATE ENTRY

        RowSetIterator it = idVO1.createRowSetIterator(null); //ITERATOR WHEN THERE IS GATE ENTRY
        RowSetIterator it2 = idVO2.createRowSetIterator(null); //ITERSSTOR WHEN NO GATE ENTRYs
        if (geDocId != null) {
            while (it.hasNext()) {
                Row r = it.next();
                //  System.out.println("Inside While");
                if (r.getAttribute("DocId").toString().equals(ShipId.toString())) {
                    java.sql.Timestamp sql = (java.sql.Timestamp)r.getAttribute("DocDt");
                    date = new Timestamp(sql);

                }
            }
            it.closeRowSetIterator();
            if (ShipId != null) {
                //System.out.println("Insertion in process");
                Row shpmntRow = this.getSlsRmaShipmnt2().getCurrentRow();
                shpmntRow.setAttribute("ShipmntId", ShipId);
                shpmntRow.setAttribute("ShipmntDt", date);
                shpmntRow.setAttribute("CldId", getparamCldId());
                shpmntRow.setAttribute("SlocId", getparamSlocId());
                shpmntRow.setAttribute("OrgId", getparamOrgId());
                shpmntRow.setAttribute("HoOrgId", getparamHoOrgId());
                //System.out.println("Id-" + rmaRow.getAttribute("DocId") + " Date-" + rmaRow.getAttribute("DocDt"));
                shpmntRow.setAttribute("DocId", rmaRow.getAttribute("DocId"));
                shpmntRow.setAttribute("DocDt", rmaRow.getAttribute("DocDt"));
                // System.out.println("inserted data in rma shpmnt");
            }
        } else {
            //System.out.println("in else when gate entry is null");
            while (it2.hasNext()) {
                Row r = it2.next();
                //System.out.println("row " + r);
                //  System.out.println("Inside While");
                if (r.getAttribute("DocId").toString().equals(ShipId.toString())) {
                    java.sql.Timestamp sql = (java.sql.Timestamp)r.getAttribute("DocDt");
                    date = new Timestamp(sql);

                }
            }
            it.closeRowSetIterator();
            if (ShipId != null) {
                //System.out.println("Insertion in process");
                Row shpmntRow = this.getSlsRmaShipmnt2().getCurrentRow();
                shpmntRow.setAttribute("ShipmntId", ShipId);
                shpmntRow.setAttribute("ShipmntDt", date);
                shpmntRow.setAttribute("CldId", getparamCldId());
                shpmntRow.setAttribute("SlocId", getparamSlocId());
                shpmntRow.setAttribute("OrgId", getparamOrgId());
                shpmntRow.setAttribute("HoOrgId", getparamHoOrgId());
                // System.out.println("Id-" + rmaRow.getAttribute("DocId") + " Date-" + rmaRow.getAttribute("DocDt"));
                shpmntRow.setAttribute("DocId", rmaRow.getAttribute("DocId"));
                shpmntRow.setAttribute("DocDt", rmaRow.getAttribute("DocDt"));
                // System.out.println("inserted data in rma shpmnt");
            }
        }


    }

    /*****Functon execute tempvo*****/

    public void executeRowSetLov() {
        ViewObject temp = this.getTempVo1();
        temp.executeQuery();
    }

    /*****Functon to check duplicate shipment*****/
    public boolean isDuplicateship(String _ShipId) {
        ViewObjectImpl impl = this.getSlsRmaShipmnt2();
        RowQualifier rq = new RowQualifier(impl);
        rq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                          getparamOrgId() + "' and ShipmntId ='" + _ShipId + "'");
        // System.out.println("rq.getExprStr();" + rq.getExprStr());
        Row[] filteredRows = impl.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            return true;
        } else
            return false;
    }


    public void executeSlsRmaItemSrVo() {
        this.getSlsRmaItmSr1().executeQuery();
    }

    public void executeSlsRmaItemLotVo() {
        this.getSlsRmaItmLot1().executeQuery();
    }

    /**
     * Container's getter for SlsSearchRma1.
     * @return SlsSearchRma1
     */
    public ViewObjectImpl getSlsSearchRma1() {
        return (ViewObjectImpl)findViewObject("SlsSearchRma1");
    }

    /**
     * Container's getter for TransSearchAtt1.
     * @return TransSearchAtt1
     */
    public ViewObjectImpl getTransSearchAtt1() {
        return (ViewObjectImpl)findViewObject("TransSearchAtt1");
    }


    public void searchRma() {
        String _eoNm = null;
        String rmadocId = null;
        String _rmaTypDesc = null;
        oracle.jbo.domain.Timestamp _frmDt = null;
        oracle.jbo.domain.Timestamp _toDt = null;

        ViewObjectImpl _searchVo = this.getSlsSearchRma1();
        ViewObjectImpl _transVo = this.getTransSearchAtt1();
        Row _transRow = _transVo.getCurrentRow();
        String rmaNo = "";
        if (_transRow != null) {
            _eoNm = (String)_transRow.getAttribute("TransNewEoNm");
            rmadocId = (String)_transRow.getAttribute("TransRmaDocId");
            rmaNo = (String)_transRow.getAttribute("TransRmaNo");
            //System.out.println("rma no" + rmaNo);
            _rmaTypDesc = (String)_transRow.getAttribute("TransRmaTypeDesc");
            _frmDt = (oracle.jbo.domain.Timestamp)_transRow.getAttribute("TransFrmDt");
            // _frmDt= new Timestamp(_sqlFrmDt);
            _toDt = (oracle.jbo.domain.Timestamp)_transRow.getAttribute("TransToDt");
            //_toDt= new Timestamp(_sqlToDt);
            if (_toDt != null) {
                java.sql.Date date;
                try {
                    date = _toDt.dateValue();
                    date.setDate(date.getDate() + 1);
                    // System.out.println("Date is :" + date);
                    _toDt = new Timestamp(date);
                } catch (SQLException e) {
                }
            }
        }
        /*   System.out.println("SEARCH ATTRIBUTE VALUE--->>" + _eoNm + "<------>" + rmadocId + "<-------->" + _rmaTypDesc +
                           "<------>" + _frmDt + "<------->" + _toDt); */

        ViewCriteria vc = _searchVo.getViewCriteria("SlsSearchRmaVOCriteria2");
        //System.out.println("view criteris " + vc.getAllRowsInRange().length + "d");
        _searchVo.applyViewCriteria(vc);
        _searchVo.setNamedWhereClauseParam("BindEoNm", _eoNm);
        _searchVo.setNamedWhereClauseParam("BindRmaDocId", rmadocId);
        _searchVo.setNamedWhereClauseParam("BindRmaTypeDesc", _rmaTypDesc);
        _searchVo.setNamedWhereClauseParam("BindRmaStartDate", _frmDt);
        _searchVo.setNamedWhereClauseParam("BindRmaEndDate", _toDt);
        _searchVo.setNamedWhereClauseParam("BindCldID", getparamCldId());
        _searchVo.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        _searchVo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        _searchVo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        _searchVo.executeQuery();
        //System.out.println(_searchVo.getQuery());
        //System.out.println("row count of serarch " + _searchVo.getRowCount());

    }

    public void restetRma() {
        //getTransSearchAtt1().reset();
        // getSlsSearchRma1().reset();

        ViewObjectImpl _searchVo = this.getSlsSearchRma1();
        // ViewObjectImpl _transVo = this.getTransSearchAtt1();
        // Row _transRow = _transVo.getCurrentRow();
        ViewCriteria vc = _searchVo.getViewCriteria("SlsSearchRmaVOCriteria");
        _searchVo.applyViewCriteria(vc);
        _searchVo.setNamedWhereClauseParam("BindEoNm", -1);
        _searchVo.setNamedWhereClauseParam("BindDispDocId", null);
        _searchVo.setNamedWhereClauseParam("BindRmaTypeDesc", null);
        _searchVo.setNamedWhereClauseParam("BindRmaStartDate", null);
        _searchVo.setNamedWhereClauseParam("BindRmaEndDate", null);
        _searchVo.setNamedWhereClauseParam("BindCldID", getparamCldId());
        _searchVo.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        _searchVo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        _searchVo.executeQuery();

    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);

    }

    public void executeSearchedRma() {
        String _docId = "";
        Integer _slocd = new Integer(1);
        String _cldId = "";
        String _orgId = "";
        String _hoOrgId = "";
        ViewObjectImpl _searchVo = this.getSlsSearchRma1();
        Row r = _searchVo.getCurrentRow();
        if (resolvElDCMsg("#{pageFlowScope.PASSED_DOCID}") != null) {
            _docId = resolvElDCMsg("#{pageFlowScope.PASSED_DOCID}").toString();
            _slocd = Integer.parseInt(resolvElDCMsg("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            _cldId = resolvElDCMsg("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            _orgId = resolvElDCMsg("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            _hoOrgId = resolvElDCMsg("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

            SlsRmaVOImpl _rmVo = this.getSlsRma1();
            _rmVo.setBindDocId(_docId);
            _rmVo.setBindCldId(_cldId);
            _rmVo.setBindOrgId(_orgId);
            _rmVo.setBindSlocId(_slocd);
            _rmVo.setBindHoOrgId(_hoOrgId);
            _rmVo.executeQuery();
        } else if (r != null) {
            _docId = (String)r.getAttribute("DocId");
            _slocd = (Integer)r.getAttribute("SlocId");
            _cldId = (String)r.getAttribute("CldId");
            _orgId = (String)r.getAttribute("OrgId");
            _hoOrgId = (String)r.getAttribute("HoOrgId");

            SlsRmaVOImpl _rmVo = this.getSlsRma1();
            _rmVo.setBindDocId(_docId);
            _rmVo.setBindCldId(_cldId);
            _rmVo.setBindOrgId(_orgId);
            _rmVo.setBindSlocId(_slocd);
            _rmVo.setBindHoOrgId(_hoOrgId);
            _rmVo.executeQuery();
            //_hoOrgId=(String)r.getAttribute("DocId");
        } else {
            FacesMessage msg = new FacesMessage("Something went wrong,Go Back to Search & try again ");
            msg.setSeverity(FacesMessage.SEVERITY_FATAL);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        }
    }

    /*****This function is use to Call Daabade Function*****/
    protected Object callStoredProcedure(int sqlReturnType, String stmt, Object[] bindVars) {
        // System.out.println("<<<-----IN AMIMPL CLASS METHOD = callStoredProcedure---->>>" + sqlReturnType + "--" +
        //  stmt + "   ---" + bindVars);
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        // System.out.println("set  1");
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();

            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            //  System.out.println("----" + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }


    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        System.out.println("in wf txn methos==");
        //System.out.println("Doc id of shipment  " + this.getSlsRmaItem2().getCurrentRow().getAttribute("ShipmntId"));

        try {
            Integer docType = (Integer)this.getSlsRma1().getCurrentRow().getAttribute("RmaTypId");
            System.out.println("Oreder type getWfNo" + docType);
            System.out.println(" SlocId " + SlocId + " CldId " + CldId + " OrgId " + OrgId + " DocNo  " + DocNo);

            Object obj =
                callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] { SlocId, CldId, OrgId,
                                                                                             DocNo, docType });
            System.out.println(" wf number  fucntion " + obj);
            return obj.toString();
        } catch (Exception e) {
            System.out.println("-- ");
            e.printStackTrace();
            String msg2 = resolvEl("Work Flow No. Is Not Defined For This User");
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
            return null;
        }
    }

    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;


    public BigDecimal getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo,
                                Integer DocNo) {
        BigDecimal lev = new BigDecimal(0);
        Integer docType = (Integer)this.getSlsRma1().getCurrentRow().getAttribute("RmaTypId");
        System.out.println("Oreder type getWfNo" + docType);
        System.out.println(" SlocId " + SlocId + " CldId " + CldId + " OrgId " + OrgId + " DocNo  " + DocNo +
                           "UsrId " + UsrId);
        try {


            lev =
(BigDecimal)callStoredFunction(INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId, CldId, OrgId,
                                                                                              UsrId, WfNo,
                                                                                              new Integer(21510),
                                                                                              docType });


            System.out.println("Level in am=" + lev);

        } catch (Exception e) {
            e.printStackTrace();
            String msg2 = resolvEl("Level Is Not Defined For This User");
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
            lev = null;
        }
        System.out.println("return level is " + lev);
        return lev;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount) {
        try {
            String DocId = getSlsRma1().getCurrentRow().getAttribute("DocId").toString();
            Integer docType = (Integer)this.getSlsRma1().getCurrentRow().getAttribute("RmaTypId");
            System.out.println("RmaTypId type insIntoTxn " + docType);
            System.out.println(" SlocId " + SlocId + " CldId " + CldId + " OrgId " + OrgId + " DocNo  " + DocNo +
                               "UsrId " + usr_idFrm + " usr_idTo " + usr_idTo + " levelTo " + levelTo + " levelFrm " +
                               levelFrm + " action " + action + " remark " + remark + "v amount " + amount);
            /*   System.out.println(" calling ins into txn fns iin impl " +
                               callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                  new Object[] { SlocId, CldId, OrgId, DocNo, WfNo,docType, DocId, usr_idFrm,
                                                                 usr_idTo, levelFrm, levelTo, action, remark,
                                                                 amount,"S" }).toString()); */
            return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                       new Object[] { SlocId, CldId, OrgId, DocNo, docType, WfNo,
                                                                      DocId, usr_idFrm, usr_idTo, levelFrm, levelTo,
                                                                      action, remark, amount, "S" }).toString());
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("e " + e);
            String msg2 = resolvEl("There is an error while calling insIntoTxn function");
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
            return null;
        }

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getSlsRma1().getCurrentRow().getAttribute("DocId").toString();
        System.out.println("DOCIDTXN--" + DocId);
        Integer docType = (Integer)this.getSlsRma1().getCurrentRow().getAttribute("RmaTypId");
        System.out.println("Oreder type getWfNo" + docType);
        Object obj =
            callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId, CldId, OrgId, DocNo,
                                                                                         DocId, docType });
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        System.out.println(" pendingCheck obj " + obj);
        return UsrId;
    }

    public String getTxnId() {
        String DocId = getSlsRma1().getCurrentRow().getAttribute("DocId").toString();
        return DocId;
    }

    public void settxnidlast(String txn) {
        TxnIdLast = txn;
    }
    private String TxnIdLast = null;

    public void executesearchVo() {
        this.getSlsSearchRma1().executeQuery();
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public void executePageWithGlobalparam() {
        String fyId = null;
        SlsSearchRmaVOImpl vo = (SlsSearchRmaVOImpl)this.getSlsSearchRma1();
        Row rmaRow = vo.getCurrentRow();
        ViewObjectImpl soDispVo = this.getLovSoDispIdVO1();
        /*  if(rmaRow != null){
            fyId = (String)rmaRow.getAttribute("FyId");
        }
       ViewCriteria vc =vo.getViewCriteria("SlsSearchRmaVOCriteria1"); */
        //  System.out.println("in executePageWithGlobalparam method");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();


        // System.out.println(cld_id + "----" + sloc_id + "---------" + org_id + "-----" + ho_org_id + "fyid " + fyId);
        if (cld_id != null) {

            vo.setBindCldID(cld_id);
        } else {

        }
        if (org_id != null) {
            vo.setBindOrgId(org_id);
        } else {

        }
        if (sloc_id != null) {
            vo.setBindSlocId(sloc_id);
        } else {

        }
        vo.executeQuery();
        ViewObject eoNmVO = this.getCustomerTypeLov1();
        // _log.info("Total Customer before-" + eoNmVO.getRowCount());
        eoNmVO.setNamedWhereClauseParam("BindSlocId", sloc_id);
        eoNmVO.setNamedWhereClauseParam("BindOrgId", org_id);
        eoNmVO.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        eoNmVO.setNamedWhereClauseParam("BindCldId", cld_id);
        eoNmVO.executeQuery();

        ViewObjectImpl rmaNoVo = this.getLovRmaNo1();
        ViewCriteria vc = rmaNoVo.getViewCriteria("LovRmaNoVOCriteria");
        _log.info("Total rmaNoVo before-" + rmaNoVo.getRowCount());
        rmaNoVo.applyViewCriteria(vc);
        rmaNoVo.setNamedWhereClauseParam("BindSlocId", sloc_id);
        rmaNoVo.setNamedWhereClauseParam("BindOrgId", org_id);
        rmaNoVo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        rmaNoVo.setNamedWhereClauseParam("BindCldId", cld_id);
        /// rmaNoVo.setNamedWhereClauseParam("BindFyId", fyId);
        rmaNoVo.executeQuery();
        _log.info("Total shipment before-" + rmaNoVo.getRowCount());
        rmaNoVo.executeQuery();
        //  _log.info("After Execute-" + eoNmVO.getRowCount());


        /*
        ViewObjectImpl shipVo=this.getLovShipmentIdVO1();
        _log.info("Total shipment before-" + shipVo.getRowCount());

        ViewCriteria vc= shipVo.getViewCriteria("LovShipmentIdVOCriteria1");
        shipVo.applyViewCriteria(vc);
        shipVo.setNamedWhereClauseParam("BindSlocId", sloc_id);
        shipVo.setNamedWhereClauseParam("BidOrgId", org_id);
        shipVo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        shipVo.setNamedWhereClauseParam("BindCldId", cld_id);
        shipVo.setNamedWhereClauseParam("BindFyId", fyId);
        shipVo.executeQuery();
        _log.info("Total shipment before-" + shipVo.getRowCount());


        ViewObjectImpl distShipVw=this.getLovDistnctShipVO1();
        _log.info("Total distinct ship before-" + distShipVw.getRowCount());


        ViewCriteria vc1= distShipVw.getViewCriteria("LovDistnctShipVOCriteria1");
        shipVo.applyViewCriteria(vc1);


        distShipVw.setNamedWhereClauseParam("BindSlocId", sloc_id);
        distShipVw.setNamedWhereClauseParam("BindOrgId", org_id);
        distShipVw.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        distShipVw.setNamedWhereClauseParam("BindCldId", cld_id);
        distShipVw.setNamedWhereClauseParam("BindFyId", fyId);
        distShipVw.executeQuery();
        _log.info("Total distinct ship after-" + distShipVw.getRowCount());
        */
        ViewObjectImpl searchhRMA = this.getSlsSearchRma1();
        _log.info("Total distinct ship before-" + searchhRMA.getRowCount());


        ViewCriteria vcSearch = searchhRMA.getViewCriteria("SlsSearchRmaVOCriteria");
        searchhRMA.applyViewCriteria(vcSearch);


        searchhRMA.setNamedWhereClauseParam("BindEoNm", -1);
        searchhRMA.setNamedWhereClauseParam("BindDispDocId", "A");
        searchhRMA.setNamedWhereClauseParam("BindRmaTypeDesc", -1);
        searchhRMA.setNamedWhereClauseParam("BindRmaStartDate", null);
        searchhRMA.setNamedWhereClauseParam("BindRmaEndDate", null);
        searchhRMA.executeQuery();
        _log.info("Total distinct ship after-" + searchhRMA.getRowCount());
    }


    /**
     * Method used to call function to get the fy id
     * @return FY Id
     * */
    public Integer getFYidOrg(String CldId, String OrgId) {
        ViewObjectImpl slsSo = this.getSlsRma1();
        Integer fyId = 0;
        _log.info("DocDate --" + slsSo.getCurrentRow().getAttribute("DocDt"));
        System.out.println("DocDate --" + slsSo.getCurrentRow().getAttribute("DocDt"));
        if (slsSo.getCurrentRow().getAttribute("DocDt") != null) {
            fyId =
(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] { CldId, OrgId,
                                                                                        slsSo.getCurrentRow().getAttribute("DocDt") }));


            if (fyId > 0 && slsSo.getCurrentRow().getAttribute("FyId") == null) {
                _log.info("Set FY id in Order");
                slsSo.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        _log.info("Fyid is--" + fyId);
        return fyId;
    }


    /*Methhod to generate display id*/

    public String generateDispDocNo() {
        ViewObject slsSo = this.getSlsRma1();
        Row curRow = slsSo.getCurrentRow();
        String ret = null;
        String p_doc_id = curRow.getAttribute("DocId").toString();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer typId = (curRow.getAttribute("RmaTypId") == null ? 0 : (Integer)curRow.getAttribute("RmaTypId"));

        if (curRow.getAttribute("RmaId") == null) {
            ret =
callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] { p_sloc_id, p_cldId, p_org_id,
                                                                                         new Integer(21510), p_doc_id,
                                                                                         typId, "SLS$RMA",
                                                                                         getFYidOrg(p_cldId,
                                                                                                    p_org_id) }).toString();
            _log.info("DisplyId is-->" + ret);
            curRow.setAttribute("RmaId", ret);
        } else {
            ret = "01" + curRow.getAttribute("RmaId").toString();
            String sast = "01" + ret;
            System.out.println("new strng---" + sast);
            System.out.println("in amimpl rtn value is when rma is already exist " + ret);
        }
        this.getDBTransaction().postChanges();
        System.out.println("Commmited-");
        return ret;
    }


    /**
     * Container's getter for LovWhId1.
     * @return LovWhId1
     */
    public ViewObjectImpl getLovWhId1() {
        return (ViewObjectImpl)findViewObject("LovWhId1");
    }

    /**
     * Container's getter for CurrIdLov1.
     * @return CurrIdLov1
     */
    public ViewObjectImpl getCurrIdLov1() {
        return (ViewObjectImpl)findViewObject("CurrIdLov1");
    }

    public void executeLotVo() {
        getSlsRmaItmLot1().executeQuery();
    }

    public void execteBinVo() {
        getSlsRmaItmBin1().executeQuery();
    }

    public void executeSrVo() {
        getSlsRmaItmSr1().executeQuery();
    }
    String returnVal = "";

    public void saveCredit() {
        // System.out.println("<<<-----IN AMIMPL CLASS METHOD = SLS.FN_SLS_TO_MM_RMA_ITM(---->>>");
        Row _rmaVoRow = this.getSlsRma1().getCurrentRow();

        if (_rmaVoRow != null) {
            Integer _slocId = (Integer)_rmaVoRow.getAttribute("SlocId");
            String cldId = (String)_rmaVoRow.getAttribute("CldId");
            String _orgId = (String)_rmaVoRow.getAttribute("OrgId");
            String _hoOrgId = (String)_rmaVoRow.getAttribute("HoOrgId");
            String _docId = (String)_rmaVoRow.getAttribute("DocId");
            Timestamp _docDt = (Timestamp)_rmaVoRow.getAttribute("DocDt");
            Integer _eoId = (Integer)_rmaVoRow.getAttribute("EoId");
            String _geDocId = (String)_rmaVoRow.getAttribute("GeDocId");
            Integer _usrIdCreate = (Integer)_rmaVoRow.getAttribute("UsrIdCreate");
            Timestamp _usrCtreatDt = (Timestamp)_rmaVoRow.getAttribute("UsrIdCreateDt");
            String _wareHouse = (String)_rmaVoRow.getAttribute("WhId");
            Integer fyid = (Integer)_rmaVoRow.getAttribute("FyId");
            System.out.println(_wareHouse + "---------ware house" + "ans fy id is   " + fyid);
            System.out.println("SERVER LOCATION ID =" + _slocId + "--CLOUD ID IS=" + cldId + "--ORGANISATION ID IS=" +
                               _orgId + "--HEAD OFFICE ORG ID IS=" + _hoOrgId + "---DOC ID  IS=" + _docId +
                               "DOC DATE IS=" + _docDt + "--CRETAED BY ID IS=" + _usrIdCreate + "--CREATE ADTE IS=" +
                               _usrCtreatDt);
            returnVal =
                    (String)callStoredFunction2(VARCHAR, "SLS.FN_SLS_TO_MM_RMA_ITM(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] { cldId,
                                                                                                                             _slocId,
                                                                                                                             _hoOrgId,
                                                                                                                             _orgId,
                                                                                                                             _wareHouse,
                                                                                                                             fyid,
                                                                                                                             _docDt,
                                                                                                                             _docId,
                                                                                                                             _docDt,
                                                                                                                             _eoId,
                                                                                                                             _usrIdCreate,
                                                                                                                             _usrCtreatDt });
            System.out.println(returnVal + "-----");
        }
    }

    public void callMM_UPDT_STK() {
        Row _rmaVoRow = this.getSlsRma1().getCurrentRow();
        if (_rmaVoRow != null) {
            String PARAM_SOURCE_DOC_ID = returnVal;
            Integer PARAM_SLOC_ID = (Integer)_rmaVoRow.getAttribute("SlocId");
            String PARAM_CLD_ID = (String)_rmaVoRow.getAttribute("CldId");
            String PARAM_ORG_ID = (String)_rmaVoRow.getAttribute("OrgId");
            String PARAM_HO_ORG_ID = (String)_rmaVoRow.getAttribute("HoOrgId");
            Timestamp PARAM_SOURCE_DOC_DT = (Timestamp)_rmaVoRow.getAttribute("DocDt");

            String _wareHouse = (String)_rmaVoRow.getAttribute("WhId");
            Integer fyid = (Integer)_rmaVoRow.getAttribute("FyId");

            String p_upd_type = "R";
            System.out.println(_wareHouse + "---------ware house" + "ans fy id is   " + fyid);
            System.out.println("SERVER LOCATION ID =" + PARAM_SLOC_ID + "CLOUD ID IS=" + PARAM_CLD_ID +
                               "ORGANISATION ID IS=" + PARAM_ORG_ID + "HEAD OFFICE ORG ID IS----=" + PARAM_HO_ORG_ID +
                               "DOC ID  IS----=" + PARAM_SOURCE_DOC_ID + "DOC DATE IS=" + PARAM_SOURCE_DOC_DT);

            Integer retunFrmUpdateStk =
                (Integer)callStoredFunction2(Types.INTEGER, "MM.MM_UPDT_STK(?,?,?,?,?,?)", new Object[] { PARAM_CLD_ID,
                                                                                                          PARAM_SLOC_ID,
                                                                                                          PARAM_ORG_ID,
                                                                                                          _wareHouse,
                                                                                                          PARAM_SOURCE_DOC_ID,
                                                                                                          p_upd_type });
            System.out.println(retunFrmUpdateStk + "-------UpdateStk");
        }
    }

    public void callFN_SLS_TO_FIN_CREDIT_NOTE() {
        Row _rmaVoRow = this.getSlsRma1().getCurrentRow();
        if (_rmaVoRow != null) {
            String PARAM_SOURCE_DOC_ID = (String)_rmaVoRow.getAttribute("DocId");
            Integer PARAM_SLOC_ID = (Integer)_rmaVoRow.getAttribute("SlocId");
            String PARAM_CLD_ID = (String)_rmaVoRow.getAttribute("CldId");
            String PARAM_ORG_ID = (String)_rmaVoRow.getAttribute("OrgId");
            String PARAM_HO_ORG_ID = (String)_rmaVoRow.getAttribute("HoOrgId");
            Timestamp PARAM_SOURCE_DOC_DT = (Timestamp)_rmaVoRow.getAttribute("DocDt");
            oracle.jbo.domain.Number PARAM_SOURCE_AMT = new oracle.jbo.domain.Number(0);
            Integer UID_POST = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            Integer PARAM_EO_ID = (Integer)_rmaVoRow.getAttribute("EoId");
            Integer PARAM_COA_ID = (Integer)_rmaVoRow.getAttribute("CoaId");
            String PARAM_SOURCE_TYPE = "R";
            System.out.println("SERVER LOCATION ID =" + PARAM_SLOC_ID + "CLOUD ID IS=" + PARAM_CLD_ID +
                               "ORGANISATION ID IS=" + PARAM_ORG_ID + "HEAD OFFICE ORG ID IS=" + PARAM_HO_ORG_ID +
                               "DOC ID  IS=" + PARAM_SOURCE_DOC_ID + "DOC DATE IS=" + PARAM_SOURCE_DOC_DT +
                               "CUSTOMER ID IS=" + PARAM_EO_ID + "PARAM_SOURCE_AMT" + PARAM_SOURCE_AMT + "UID_POST--" +
                               UID_POST + "PARAM_COA_ID--" + PARAM_COA_ID + "PARAM_SOURCE_TYPE---" +
                               PARAM_SOURCE_TYPE + "PARAM_COA_ID--->" + PARAM_COA_ID);
            Integer a =
                (Integer)callStoredFunction2(Types.INTEGER, "SLS.FN_SLS_TO_FIN_CREDIT_NOTE(?,?,?,?,?,?,?,?,?,?,?)",
                                             new Object[] { PARAM_SOURCE_DOC_ID, PARAM_SOURCE_DOC_DT, PARAM_SOURCE_AMT,
                                                            UID_POST, PARAM_ORG_ID, PARAM_SLOC_ID, PARAM_HO_ORG_ID,
                                                            PARAM_CLD_ID, PARAM_EO_ID, PARAM_COA_ID,
                                                            PARAM_SOURCE_TYPE });
            System.out.println("reurn from FN_SLS_TO_FIN_CREDIT_NOTE ---" + a);
        }


    }

    public void fnsToUpdateGeState() {
        Row _rmaVoRow = this.getSlsRma1().getCurrentRow();
        if (_rmaVoRow != null) {
            Integer fyid = (Integer)_rmaVoRow.getAttribute("FyId");
            String geid = (String)_rmaVoRow.getAttribute("GeDocId");
            _log.info("Fy Id  is" + fyid + "NAd Gaet entri doc Id is---" + geid);
            Integer a =
                (Integer)callStoredFunction2(Types.INTEGER, "SLS.FN_UPDATE_GE_STAT(?,?,?,?,?)", new Object[] { getparamCldId(),
                                                                                                               getparamSlocId(),
                                                                                                               getparamOrgId(),
                                                                                                               geid,
                                                                                                               fyid });
            _log.info("-return value is---" + a);
        }

    }

    public void getapprovedId() {
        _log.info("NEter In getapprovedId");
        String actionT = resolvEl("#{pageFlowScope.WF_RET_VALUE}").toString();
        _log.info("return value from   " + actionT);
        ViewObjectImpl rmaVo = this.getSlsRma1();
        Row newRmaRow = rmaVo.getCurrentRow();
        Row rmaVoRow = this.getSlsRma1().getCurrentRow();
        if (actionT.equals("A")) {
            if (rmaVoRow != null) {
                Integer rmaTypeId = (Integer)rmaVoRow.getAttribute("RmaTypId");
                if (rmaTypeId == 401) {
                    /*******************RMA  WITH CREDIT ONLY*****************************/
                    this.getDBTransaction().postChanges();
                    callFN_SLS_TO_FIN_CREDIT_NOTE();
                } else if (rmaTypeId == 405) {
                    /*******************RMA  WITH RECEIPT AND CREDIT*****************************/
                    this.getDBTransaction().postChanges();
                    saveCredit();
                    this.getDBTransaction().postChanges();
                    callMM_UPDT_STK();
                    this.getDBTransaction().postChanges();
                    callFN_SLS_TO_FIN_CREDIT_NOTE();
                    this.getDBTransaction().postChanges();
                    fnsToUpdateGeState();
                    /***************function to update cost of good***********************/

                    Integer b =
                        (Integer)callStoredFunction2(Types.INTEGER, "SLS.FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)",
                                                     new Object[] { rmaVoRow.getAttribute("DocId"),
                                                                    rmaVoRow.getAttribute("DocDt"),
                                                                    rmaVoRow.getAttribute("UsrIdCreate"),
                                                                    getparamOrgId(), getparamSlocId(),
                                                                    getparamHoOrgId(), getparamCldId(), "R" });
                    _log.info("-return value is---" + b);
                    this.getDBTransaction().postChanges();

                    /***************************************************function to FN_GET_VOU_NO***********************/

                    String VoucherId = "0";

                    try {
                        System.out.println("Cld Id " + rmaVoRow.getAttribute("DocId") + " " +
                                           rmaVoRow.getAttribute("UsrIdCreate") + " " + getparamOrgId() + " " +
                                           getparamSlocId() + " " + getparamHoOrgId() + " " + getparamCldId());
                        VoucherId =
                                (String)callStoredFunction(Types.VARCHAR, "SLS.FN_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] { rmaVoRow.getAttribute("DocId"),
                                                                                                                             rmaVoRow.getAttribute("UsrIdCreate"),
                                                                                                                             getparamOrgId(),
                                                                                                                             getparamSlocId(),
                                                                                                                             getparamHoOrgId(),
                                                                                                                             getparamCldId(),
                                                                                                                             "R" });
                        System.out.println("Voucher Id : " + VoucherId);
                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'SLS.FN_GET_VOU_NO' in AmImpl !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                    if (!VoucherId.equals("0")) {
                        System.out.println("message");
                        FacesMessage message =
                            new FacesMessage("<html><body>Voucher No.  <b> " + VoucherId + " </b>have been Generated.</body></html>");
                        message.setSeverity(FacesMessage.SEVERITY_INFO);
                        FacesContext.getCurrentInstance().addMessage(null, message);

                    }


                } else if (rmaTypeId == 404) {
                    /*******************RMA  WITH RECEIPT AND NO CREDIT*****************************/
                    this.getDBTransaction().postChanges();
                    saveCredit();
                    this.getDBTransaction().postChanges();
                    callMM_UPDT_STK();
                    this.getDBTransaction().postChanges();
                    fnsToUpdateGeState();
                    /***************function to update cost of good***********************/

                    Integer b =
                        (Integer)callStoredFunction2(Types.INTEGER, "SLS.FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)",
                                                     new Object[] { rmaVoRow.getAttribute("DocId"),
                                                                    rmaVoRow.getAttribute("DocDt"),
                                                                    rmaVoRow.getAttribute("UsrIdCreate"),
                                                                    getparamOrgId(), getparamSlocId(),
                                                                    getparamHoOrgId(), getparamCldId(), "R" });
                    _log.info("-return value is---" + b);
                    this.getDBTransaction().postChanges();
                    /***************function to FN_GET_VOU_NO***********************/
                    String VoucherId = "0";

                    try {

                        VoucherId =
                                (String)callStoredFunction(Types.VARCHAR, "SLS.FN_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] { rmaVoRow.getAttribute("DocId"),
                                                                                                                             rmaVoRow.getAttribute("UsrIdCreate"),
                                                                                                                             getparamOrgId(),
                                                                                                                             getparamSlocId(),
                                                                                                                             getparamHoOrgId(),
                                                                                                                             getparamCldId(),
                                                                                                                             "R" });
                        System.out.println("Voucher Id : " + VoucherId);


                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'SLS.FN_GET_VOU_NO' in AmImpl !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                    if (!VoucherId.toString().equals("0")) {
                        System.out.println("message");
                        FacesMessage message =
                            new FacesMessage("<html><body>Voucher Id  <b> " + VoucherId + " </b>have been Generated.</body></html>");
                        message.setSeverity(FacesMessage.SEVERITY_INFO);
                        FacesContext.getCurrentInstance().addMessage(null, message);

                    }

                } else if (rmaTypeId == 402) {
                    _log.info("set 101 rma with repair ...." + rmaTypeId);

                    fnsToUpdateGeState();

                } else {
                    _log.info("set 101 .... rma with replacement" + rmaTypeId);
                    fnsToUpdateGeState();

                }
            }
            System.out.println("---setting mode for approved");
            newRmaRow.setAttribute("RmaMode", 314);
            System.out.println("Approved  doc is  " + rmaVoRow.getAttribute("DocId"));

            /******************function to update ram status*********************/
            Integer a =
                (Integer)callStoredFunction2(Types.INTEGER, "SLS.FN_UPDATE_RMA_STAT(?,?,?,?,?)", new Object[] { getparamCldId(),
                                                                                                                getparamSlocId(),
                                                                                                                getparamOrgId(),
                                                                                                                rmaVoRow.getAttribute("DocId"),
                                                                                                                314 });
            _log.info("-return value is---" + a);

            _log.info("---dirty trans BEFORE  ----" + this.getDBTransaction().isDirty());
            this.getDBTransaction().postChanges();

            /***********************Function for reverse tax*********************************************************/
            ViewObjectImpl itmVw = this.getSlsRmaItem1();
            RowQualifier itmRq = new RowQualifier(itmVw);
            /*  System.out.println("parameter getparamCldId() " + getparamCldId() + "getparamSlocId() " +
                               getparamSlocId() + " getparamOrgId() " + getparamOrgId() + " getparamHoOrgId() " +
                               getparamHoOrgId() + " getSlsRma1().getCurrentRow().getAttribute(\"DocId\") " +
                               getSlsRma1().getCurrentRow().getAttribute("DocId") + "  " +
                               getSlsRmaItem2().getCurrentRow().getAttribute("TaxRevsFlg")); */
            itmRq.setWhereClause("CldId= '" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                                 getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and DocId='" +
                                 getSlsRma1().getCurrentRow().getAttribute("DocId") + "' and TaxRevsFlg='Y'");
            Row filteredItmRow[] = itmVw.getFilteredRows(itmRq);
            System.out.println(" item rq bhshvsdfcj query " + itmRq.getExprStr());
            System.out.println("filterhbxhcv " + filteredItmRow.length);
            if (filteredItmRow.length > 0) {
                for (Row r : filteredItmRow) {
                    String shipDocId = (String)r.getAttribute("ShipmntId");
                    Timestamp date = (Timestamp)r.getAttribute("ShipmntDt");
                    String itmId = (String)r.getAttribute("ItmId");
                    System.out.println("shipmenyiyhuhukh---- " + shipDocId);
                    Integer _slocId = (Integer)getparamSlocId();
                    String _cldId = (String)getparamCldId();
                    String _orgId = (String)getparamOrgId();
                    String _hoOrgId = (String)getparamHoOrgId();
                    String _docId = (String)getSlsRma1().getCurrentRow().getAttribute("DocId");
                    Timestamp _docDt = (Timestamp)getSlsRma1().getCurrentRow().getAttribute("DocDt");
                    Integer _eoId = (Integer)getSlsRma1().getCurrentRow().getAttribute("EoId");
                    Integer _uCreate = (Integer)getSlsRma1().getCurrentRow().getAttribute("UsrIdCreate");
                    Timestamp _uDate = (Timestamp)getSlsRma1().getCurrentRow().getAttribute("UsrIdCreateDt");
                    System.out.println("Parameters Values... " + _cldId + "  " + _slocId + "   " + _hoOrgId + "    " +
                                       _orgId + "    " + _docId + "    " + _docDt + "    " + _eoId + "      " +
                                       _uCreate + "    " + _uDate + "  " + date + "item id  " + itmId);

                    String rtnval =
                        (String)callStoredFunction1(VARCHAR, "SLS.FN_INS_RMA_TAX_REVERSE(?,?,?,?,?,?,?,?,?,?,?,?)",
                                                    new Object[] { _cldId, _slocId, _hoOrgId, _orgId, _docId, _docDt,
                                                                   _eoId, shipDocId, date, itmId, _uCreate, _uDate });
                    System.out.println(" rtnval---- " + rtnval);
                    System.out.println("last linefff");
                }
            }


            _log.info("---dirty trans or not AFTER ----" + this.getDBTransaction().isDirty());
        } else if (actionT.equals("F")) {
            _log.info("Enter in else if forwarededede");
            _log.info("Rma  mode " + this.getSlsRma1().getCurrentRow().getAttribute("RmaMode") +
                      "------------------------  " + newRmaRow.getAttribute("RmaMode"));
            newRmaRow.setAttribute("RmaMode", 317);
            // if (rmaVoRow != null) {
            _log.info("forwarded ");
            Integer a =
                (Integer)callStoredFunction2(Types.INTEGER, "SLS.FN_UPDATE_RMA_STAT(?,?,?,?,?)", new Object[] { getparamCldId(),
                                                                                                                getparamSlocId(),
                                                                                                                getparamOrgId(),
                                                                                                                rmaVoRow.getAttribute("DocId"),
                                                                                                                317 });
            _log.info("-return value is---=" + a);
            // }
            this.getDBTransaction().commit();
            _log.info("Rma  mode " + this.getSlsRma1().getCurrentRow().getAttribute("RmaMode") +
                      "------------------------  " + newRmaRow.getAttribute("RmaMode"));
        } else {
            _log.info("if cancel");
        }
    }


    public void deleteRma() {

    }

    /**
     * Container's getter for SlsRmaShipmntVO1.
     * @return SlsRmaShipmntVO1
     */
    public ViewObjectImpl getSlsRmaShipmnt2() {
        return (ViewObjectImpl)findViewObject("SlsRmaShipmnt2");
    }

    /**
     * Container's getter for SlsRmaToSlsRmaShipmntVL1.
     * @return SlsRmaToSlsRmaShipmntVL1
     */
    public ViewLinkImpl getSlsRmaToSlsRmaShipmntVL1() {
        return (ViewLinkImpl)findViewLink("SlsRmaToSlsRmaShipmntVL1");
    }

    /**
     * Container's getter for SlsRmaItemVO1.
     * @return SlsRmaItemVO1
     */
    public ViewObjectImpl getSlsRmaItem2() {
        return (ViewObjectImpl)findViewObject("SlsRmaItem2");
    }

    /**
     * Container's getter for SlsRmaShipmntToSlslRmaItemVL1.
     * @return SlsRmaShipmntToSlslRmaItemVL1
     */
    public ViewLinkImpl getSlsRmaShipmntToSlslRmaItemVL1() {
        return (ViewLinkImpl)findViewLink("SlsRmaShipmntToSlslRmaItemVL1");
    }

    /**
     * Container's getter for SlsRmaItmBinVO1.
     * @return SlsRmaItmBinVO1
     */
    public ViewObjectImpl getSlsRmaItmBin1() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmBin1");
    }

    /**
     * Container's getter for SlsRmaItmTOSlsRmaItmBin1.
     * @return SlsRmaItmTOSlsRmaItmBin1
     */
    public ViewLinkImpl getSlsRmaItmTOSlsRmaItmBin1() {
        return (ViewLinkImpl)findViewLink("SlsRmaItmTOSlsRmaItmBin1");
    }

    /**
     * Container's getter for SlsRmaItmLotVO1.
     * @return SlsRmaItmLotVO1
     */
    public ViewObjectImpl getSlsRmaItmLot1() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmLot1");
    }

    /**
     * Container's getter for SlsRmaItmTOSlsRmaItmLotVL1.
     * @return SlsRmaItmTOSlsRmaItmLotVL1
     */
    public ViewLinkImpl getSlsRmaItmTOSlsRmaItmLotVL1() {
        return (ViewLinkImpl)findViewLink("SlsRmaItmTOSlsRmaItmLotVL1");
    }

    /**
     * Container's getter for SlsRmaItmSrVO1.
     * @return SlsRmaItmSrVO1
     */
    public ViewObjectImpl getSlsRmaItmSr1() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmSr1");
    }

    /**
     * Container's getter for SlsRmaItmTOSlsRmaItmSrVL1.
     * @return SlsRmaItmTOSlsRmaItmSrVL1
     */
    public ViewLinkImpl getSlsRmaItmTOSlsRmaItmSrVL1() {
        return (ViewLinkImpl)findViewLink("SlsRmaItmTOSlsRmaItmSrVL1");
    }

    /**
     * Container's getter for shpmntItmViewVO1.
     * @return shpmntItmViewVO1
     */
    public ViewObjectImpl getshpmntItmViewVO1() {
        return (ViewObjectImpl)findViewObject("shpmntItmViewVO1");
    }

    /**
     * Container's getter for RmaShipTOShipItmVL1.
     * @return RmaShipTOShipItmVL1
     */
    public ViewLinkImpl getRmaShipTOShipItmVL1() {
        return (ViewLinkImpl)findViewLink("RmaShipTOShipItmVL1");
    }


    /***Method to insert data in RMA$ITM in case of Gate Entry not used**/

    public void insertItemToRmaFrmShpmnt() {
        ViewObjectImpl rmaVo = this.getSlsRma1();
        ViewObjectImpl rmaItmVo = this.getSlsRmaItem1();
        ViewObjectImpl rmaItmVo2 = this.getSlsRmaItem2();
        RowQualifier rmaItmRq = new RowQualifier(rmaItmVo);
        Row _rmaVoRow = rmaVo.getCurrentRow();
        Row _shipVoRow = this.getSlsRmaShipmnt2().getCurrentRow();
        ViewObjectImpl vo = this.getshpmntItmViewVO1();
        rmaItmRq.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and CldId='" +
                                getparamCldId() + "' and HoOrgId='" + getparamHoOrgId() + "' and DocId='" +
                                _rmaVoRow.getAttribute("DocId") + "' and ShipmntId='" +
                                _shipVoRow.getAttribute("ShipmntId") + "'");
        System.out.println("caluse  " + rmaItmRq.getExprStr());
        Row fltRmaItmRow[] = rmaItmVo.getFilteredRows(rmaItmRq);
        System.out.println("row length  :" + fltRmaItmRow.length);
        if (fltRmaItmRow.length > 0) {
            for (Row r : fltRmaItmRow) {
                r.remove();
                System.out.println("row removed  ");

            }

        }
        this.getSlsRmaItem2().executeQuery();
        this.getSlsRmaItem1().executeQuery();

        ViewObjectImpl slsShipItmVo = this.getSlsShipItmVO1();
        // RowQualifier shiItmRq = new RowQualifier(slsShipItmVo);

        slsShipItmVo.setNamedWhereClauseParam("BindShipSlocId", getparamSlocId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipCldId", getparamCldId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipOrgId", getparamOrgId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipHoOrgId", getparamHoOrgId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipId", _shipVoRow.getAttribute("ShipmntId"));
        slsShipItmVo.executeQuery();
        int i = slsShipItmVo.getRangeSize();
        slsShipItmVo.setRangeSize(-1);
        if (_rmaVoRow != null && _shipVoRow != null) {
            Integer _slocId = (Integer)_rmaVoRow.getAttribute("SlocId");
            String cldId = (String)_rmaVoRow.getAttribute("CldId");
            String _orgId = (String)_rmaVoRow.getAttribute("OrgId");
            String _hoOrgId = (String)_rmaVoRow.getAttribute("HoOrgId");
            String _docId = (String)_rmaVoRow.getAttribute("DocId");
            Timestamp _docDt = (Timestamp)_rmaVoRow.getAttribute("DocDt");
            Integer _eoId = (Integer)_rmaVoRow.getAttribute("EoId");
            String _shipId = (String)_shipVoRow.getAttribute("ShipmntId");
            Timestamp shipDate = (Timestamp)_shipVoRow.getAttribute("ShipmntDt");
            Integer _usrIdCreate = (Integer)_rmaVoRow.getAttribute("UsrIdCreate");
            Timestamp _usrCtreatDt = (Timestamp)_rmaVoRow.getAttribute("UsrIdCreateDt");
            String _wareHouse = (String)_rmaVoRow.getAttribute("WhId");
            System.out.println(_wareHouse + "---------ware house");

            _log.info("SERVER LOCATION ID =" + _slocId + "CLOUD ID IS=" + cldId + "ORGANISATION ID IS=" + _orgId +
                      "HEAD OFFICE ORG ID IS=" + _hoOrgId + "DOC ID  IS=" + _docId + "DOC DATE IS=" + _docDt +
                      "CUSTOMER ID IS=" + _eoId + "SHIPMENT ID=" + _shipId + "SHIPMENT DATE IS=" + shipDate +
                      "CRETAED BY ID IS=" + _usrIdCreate + "CREATE ADTE IS=" + _usrCtreatDt);
            RowSetIterator soItr = vo.createRowSetIterator(null);
            if (soItr != null) {
                while (soItr.hasNext()) {
                    Row viewRow = soItr.next();
                    Number rcptQty = (Number)viewRow.getAttribute("rejectedQuantTrans");
                    String _itmId = (String)viewRow.getAttribute("ItmId");
                    Number balanceQty = new Number(0);
                    balanceQty = rcptQty;
                    _log.info("rcptQty =" + rcptQty + " _itmId " + _itmId + " balanceQty.compareTo(0) " +
                              balanceQty.compareTo(0) + " balanceQty :" + balanceQty);
                    if (balanceQty.compareTo(0) == 1) {
                        Row shipItmFltRow[] = slsShipItmVo.getFilteredRows("ItmId", _itmId);
                        _log.info("Filtrererd ro w:" + shipItmFltRow.length);
                        if (shipItmFltRow.length > 0) {
                            _log.info("======================================111=========================================");

                            for (Row shipItmRow : shipItmFltRow) {
                                String SoDocId = (String)shipItmRow.getAttribute("SoId");
                                Number shipItmQty = (Number)shipItmRow.getAttribute("ShipmntQty");
                                _log.info(" Shipment quanitty :" + shipItmQty + "  received quantity : " + rcptQty +
                                          " balanceQty :" + balanceQty + " SoDocId : " + SoDocId +
                                          " balanceQty.compareTo(new Number(0)): " +
                                          balanceQty.compareTo(new Number(0)));

                                _log.info("======================================222=========================================");
                                if (balanceQty.compareTo(new Number(0)) > 0) {
                                    System.out.println("  balanceQty.compareTo(shipItmQty) :" +
                                                       balanceQty.compareTo(shipItmQty));
                                    if (balanceQty.compareTo(shipItmQty) >= 0) {
                                        System.out.println(" SET 1`");
                                        _log.info(" balanceQty " + balanceQty + " shipItmQty  " + shipItmQty +
                                                  " SoDocId " + SoDocId + " itme id " + _itmId + " ite price " +
                                                  shipItmRow.getAttribute("ItmPrice"));
                                        Row slsRMaItmRow = rmaItmVo2.createRow();
                                        rmaItmVo2.insertRow(slsRMaItmRow);
                                        slsRMaItmRow.setAttribute("RcptQty", shipItmQty);
                                        slsRMaItmRow.setAttribute("ItmId", _itmId);
                                        slsRMaItmRow.setAttribute("ShipmntQty", shipItmQty);
                                        slsRMaItmRow.setAttribute("ItmUom", shipItmRow.getAttribute("ItmUom"));
                                        slsRMaItmRow.setAttribute("ItmUomBs", shipItmRow.getAttribute("ItmUomBs"));
                                        slsRMaItmRow.setAttribute("ItmPrice", shipItmRow.getAttribute("ItmPrice"));
                                        slsRMaItmRow.setAttribute("WhId", _wareHouse);
                                        slsRMaItmRow.setAttribute("ItmAmtSp", shipItmRow.getAttribute("ItmAmtSp"));
                                        slsRMaItmRow.setAttribute("ItmAmtBs", shipItmRow.getAttribute("ItmAmtBs"));
                                        slsRMaItmRow.setAttribute("UomConvFctr",
                                                                  shipItmRow.getAttribute("UomConvFctr"));
                                        slsRMaItmRow.setAttribute("CurrIdSp", viewRow.getAttribute("CurrIdSp"));
                                        slsRMaItmRow.setAttribute("CurrIdBs", viewRow.getAttribute("CurrIdBs"));
                                        slsRMaItmRow.setAttribute("ReturnTypId", 406);
                                        slsRMaItmRow.setAttribute("SoId", SoDocId);
                                        slsRMaItmRow.setAttribute("CurrConvFctr",
                                                                  viewRow.getAttribute("CurrConvFctr")); //
                                        balanceQty = balanceQty.subtract(shipItmQty);
                                    } else {
                                        System.out.println("set 2");
                                        _log.info(" balanceQty " + balanceQty + " shipItmQty  " + shipItmQty +
                                                  " SoDocId " + SoDocId + " itme id " + _itmId);

                                        Row slsRMaItmRow = rmaItmVo2.createRow();
                                        rmaItmVo2.insertRow(slsRMaItmRow);
                                        slsRMaItmRow.setAttribute("RcptQty", balanceQty);
                                        slsRMaItmRow.setAttribute("ItmId", _itmId);
                                        slsRMaItmRow.setAttribute("ShipmntQty", shipItmQty);
                                        slsRMaItmRow.setAttribute("ItmUom", shipItmRow.getAttribute("ItmUom"));
                                        slsRMaItmRow.setAttribute("ItmUomBs", shipItmRow.getAttribute("ItmUomBs"));
                                        slsRMaItmRow.setAttribute("ItmPrice", shipItmRow.getAttribute("ItmPrice"));
                                        slsRMaItmRow.setAttribute("WhId", _wareHouse);
                                        slsRMaItmRow.setAttribute("ItmAmtSp", shipItmRow.getAttribute("ItmAmtSp"));
                                        slsRMaItmRow.setAttribute("ItmAmtBs", shipItmRow.getAttribute("ItmAmtBs"));
                                        slsRMaItmRow.setAttribute("UomConvFctr",
                                                                  shipItmRow.getAttribute("UomConvFctr"));
                                        slsRMaItmRow.setAttribute("CurrIdSp", viewRow.getAttribute("CurrIdSp"));
                                        slsRMaItmRow.setAttribute("CurrIdBs", viewRow.getAttribute("CurrIdBs"));
                                        slsRMaItmRow.setAttribute("ReturnTypId", 406);
                                        slsRMaItmRow.setAttribute("SoId", SoDocId);
                                        slsRMaItmRow.setAttribute("CurrConvFctr",
                                                                  viewRow.getAttribute("CurrConvFctr"));
                                        balanceQty = new Number(0);
                                    }
                                }
                                _log.info("=================================333==============================================");
                            }
                            _log.info("=================================444==============================================");

                        }
                    }
                }
                soItr.closeRowSetIterator();
                this.getSlsRmaItem2().executeQuery();
                this.getSlsRmaItem1().executeQuery();
            }


        }
        slsShipItmVo.setRangeSize(i);
    }


    public void enterItmInRmaItmOnSoBasis() {
        ViewObjectImpl rmaVo = this.getSlsRma1();
        ViewObjectImpl rmaItmVo = this.getSlsRmaItem1();
        ViewObjectImpl rmaItmVo2 = this.getSlsRmaItem2();
        RowQualifier rmaItmRq = new RowQualifier(rmaItmVo);
        Row _rmaVoRow = rmaVo.getCurrentRow();
        Row _shipVoRow = this.getSlsRmaShipmnt2().getCurrentRow();
        ViewObjectImpl vo = this.getshpmntItmViewVO1();
        rmaItmRq.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and CldId='" +
                                getparamCldId() + "' and HoOrgId='" + getparamHoOrgId() + "' and DocId='" +
                                _rmaVoRow.getAttribute("DocId") + "' and ShipmntId='" +
                                _shipVoRow.getAttribute("ShipmntId") + "'");
        System.out.println("caluse  " + rmaItmRq.getExprStr());
        Row fltRmaItmRow[] = rmaItmVo.getFilteredRows(rmaItmRq);
        System.out.println("row length  :" + fltRmaItmRow.length);
        if (fltRmaItmRow.length > 0) {
            for (Row r : fltRmaItmRow) {
                r.remove();
                System.out.println("row removed  ");

            }

        }
        this.getSlsRmaItem2().executeQuery();
        this.getSlsRmaItem1().executeQuery();

        ViewObjectImpl slsShipItmVo = this.getSlsShipItmVO1();
        // RowQualifier shiItmRq = new RowQualifier(slsShipItmVo);

        slsShipItmVo.setNamedWhereClauseParam("BindShipSlocId", getparamSlocId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipCldId", getparamCldId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipOrgId", getparamOrgId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipHoOrgId", getparamHoOrgId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipId", _shipVoRow.getAttribute("ShipmntId"));
        slsShipItmVo.executeQuery();
        int i = slsShipItmVo.getRangeSize();
        slsShipItmVo.setRangeSize(-1);
        if (_rmaVoRow != null && _shipVoRow != null) {
            Integer _slocId = (Integer)_rmaVoRow.getAttribute("SlocId");
            String cldId = (String)_rmaVoRow.getAttribute("CldId");
            String _orgId = (String)_rmaVoRow.getAttribute("OrgId");
            String _hoOrgId = (String)_rmaVoRow.getAttribute("HoOrgId");
            String _docId = (String)_rmaVoRow.getAttribute("DocId");
            Timestamp _docDt = (Timestamp)_rmaVoRow.getAttribute("DocDt");
            Integer _eoId = (Integer)_rmaVoRow.getAttribute("EoId");
            String _shipId = (String)_shipVoRow.getAttribute("ShipmntId");
            Timestamp shipDate = (Timestamp)_shipVoRow.getAttribute("ShipmntDt");
            Integer _usrIdCreate = (Integer)_rmaVoRow.getAttribute("UsrIdCreate");
            Timestamp _usrCtreatDt = (Timestamp)_rmaVoRow.getAttribute("UsrIdCreateDt");
            String _wareHouse = (String)_rmaVoRow.getAttribute("WhId");
            System.out.println(_wareHouse + "---------ware house");

            _log.info("SERVER LOCATION ID =" + _slocId + "CLOUD ID IS=" + cldId + "ORGANISATION ID IS=" + _orgId +
                      "HEAD OFFICE ORG ID IS=" + _hoOrgId + "DOC ID  IS=" + _docId + "DOC DATE IS=" + _docDt +
                      "CUSTOMER ID IS=" + _eoId + "SHIPMENT ID=" + _shipId + "SHIPMENT DATE IS=" + shipDate +
                      "CRETAED BY ID IS=" + _usrIdCreate + "CREATE ADTE IS=" + _usrCtreatDt);
            RowSetIterator soItr = vo.createRowSetIterator(null);
            while (soItr.hasNext()) {
                Row viewRow = soItr.next();
                Number rcptQty = (Number)viewRow.getAttribute("rejectedQuantTrans");
                String _itmId = (String)viewRow.getAttribute("ItmId");
                Number balanceQty = new Number(0);
                balanceQty = rcptQty;
                _log.info("rcptQty =" + rcptQty + " _itmId " + _itmId + " rcptQty.compareTo(0 " +
                          rcptQty.compareTo(0) + " balanceQty :" + balanceQty);
                if (balanceQty.compareTo(0) == 1) {
                    Row shipItmFltRow[] = slsShipItmVo.getFilteredRows("ItmId", _itmId);
                    _log.info("Filtrererd ro w:" + shipItmFltRow.length);
                    if (shipItmFltRow.length > 0) {
                        for (Row shipItmRow : shipItmFltRow) {
                            String SoDocId = (String)shipItmRow.getAttribute("SoId");
                            Number shipItmQty = (Number)shipItmRow.getAttribute("ShipmntQty");
                            _log.info(" Shipment quanitty :" + shipItmQty + "  received quantity : " + rcptQty +
                                      " leftQty :" + balanceQty);
                            if (balanceQty.compareTo(new Number(0)) > 0) {
                                if (balanceQty.compareTo(shipItmQty) >= 0) {
                                    Row slsRMaItmRow = rmaItmVo2.createRow();
                                    rmaItmVo2.insertRow(slsRMaItmRow);
                                    slsRMaItmRow.setAttribute("RcptQty", shipItmQty);
                                    rmaItmVo2.getCurrentRow().setAttribute("SoId", SoDocId);
                                    balanceQty = balanceQty.subtract(shipItmQty);
                                } else {
                                    Row slsRMaItmRow = rmaItmVo2.createRow();
                                    rmaItmVo2.insertRow(slsRMaItmRow);
                                    slsRMaItmRow.setAttribute("RcptQty", balanceQty);
                                    rmaItmVo2.getCurrentRow().setAttribute("SoId", SoDocId);
                                    balanceQty = new Number(0);
                                }
                            }

                        }
                    }
                }


                soItr.closeRowSetIterator();
                this.getSlsRmaItem2().executeQuery();
                this.getSlsRmaItem1().executeQuery();
            }


        }

    }

    public void delteBinRow() {
        this.getSlsRmaItmBin1().getCurrentRow().remove();

    }

    public void delteLotRow() {
        this.getSlsRmaItmLot1().getCurrentRow().remove();

    } /*  */

    public void delteSrRow() {
        this.getSlsRmaItmSr1().getCurrentRow().remove();

    }

    /**
     * Container's getter for ItemNameLov1.
     * @return ItemNameLov1
     */
    public ViewObjectImpl getItemNameLov1() {
        return (ViewObjectImpl)findViewObject("ItemNameLov1");
    }

    public void refreshLovSwitcher() {
        ViewObject temVo = this.getTempVo1();
        TempVoVORowImpl currRoo = (TempVoVORowImpl)temVo.getCurrentRow();
        RowSet rs = currRoo.getLovShipmentIdVO1();
        // System.out.println("RowCount in rowset-" + rs.getRowCount());
        rs.executeQuery();
        temVo.executeQuery();
        //  System.out.println("Rowcoutn aftr-" + rs.getRowCount());

    }

    /**Method to Validate Lot No (Duplicate Lot No Organisation and Warehouse Wise)
     * @param lot
     * @return
     */
    public ArrayList<String> LotNoValidator(String lot) {
        ArrayList<String> retVAl = new ArrayList<String>(2);
        String inFlg = "N";
        String previousLot = "";
        int count = 0;
        String checkLotWhWise = "N";
        ViewObjectImpl v = this.getviewStkSummLotVO1();
        ViewObject slsRma = this.getSlsRma1();
        ViewObjectImpl orgMM = this.getorgMMPrfVO1();

        ViewObject slsRmaItm = this.getSlsRmaItem2();
        Row itmRow = slsRmaItm.getCurrentRow();

        Row rmaRow = slsRma.getCurrentRow();
        ViewObject rmaLotPage = this.getSlsRmaItmLot1();
        ViewObjectImpl slsRmaLot = this.getSlsRmaItmLot2();

        RowQualifier rqLot = new RowQualifier(slsRmaLot);
        rqLot.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and CldId='" +
                             getparamCldId() + "' and HoOrgId='" + getparamHoOrgId() + "' and DocId='" +
                             rmaRow.getAttribute("DocId") + "' and ItmId='" + itmRow.getAttribute("ItmId") + "'");
        Row lotFltrdRow[] = slsRmaLot.getFilteredRows(rqLot);
        //  System.out.println("Total Row in Lot Table-" + lotFltrdRow.length);
        // System.out.println("Row in Lot table on page-" + rmaLotPage.getRowCount());
        if (lotFltrdRow.length > 1 && rmaLotPage.getRowCount() > 0) {
            Row curLotRwPg = rmaLotPage.getCurrentRow();

            for (Row rsi : lotFltrdRow) {
                Row nxtLotRo = rsi;

                if (!(nxtLotRo.getKey()).equals(curLotRwPg.getKey())) {
                    if (nxtLotRo.getAttribute("LotId") != null) {
                        String lotFrmRow = nxtLotRo.getAttribute("LotId").toString();

                        System.out.println("Lot From table row is-" + lotFrmRow);
                        if (!lot.equalsIgnoreCase(lotFrmRow)) {
                            if (count == 0) {
                                previousLot = lotFrmRow;
                            }
                            count++;
                        }
                    }
                }

            }
            if (count > 0) {
                retVAl.add(0, "NS");
                retVAl.add(1, previousLot);
                inFlg = "NS";
            }
        }
        if (inFlg != "NS") {
            RowQualifier rqMM = new RowQualifier(orgMM);
            rqMM.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and CldId='" +
                                getparamCldId() + "'");

            Row orgMMRow[] = orgMM.getFilteredRows(rqMM);
            if (orgMMRow.length > 0) {
                if (orgMMRow[0].getAttribute("GenLotWhLvl") != null) {
                    checkLotWhWise = orgMMRow[0].getAttribute("GenLotWhLvl").toString();
                }

                if ("Y".equalsIgnoreCase(checkLotWhWise)) {
                    RowQualifier rq = new RowQualifier(v);
                    rq.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() +
                                      " and CldId='" + getparamCldId() + "' and WhId='" + rmaRow.getAttribute("WhId") +
                                      "' and LotId='" + lot + "' and ItmId='" + itmRow.getAttribute("ItmId") + "'");
                    Row[] filteredRows = v.getFilteredRows(rq);
                    System.out.println("Total Row for this lot in warehouse is--- " + filteredRows.length);
                    if (filteredRows.length > 0) {
                        retVAl.add(0, "Y");
                        inFlg = "Y";
                    } else {
                        retVAl.add(0, "N");
                        inFlg = "N";
                    }
                } else {
                    RowQualifier rq = new RowQualifier(v);
                    rq.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() +
                                      " and CldId='" + getparamCldId() + "' and LotId='" + lot + "' and ItmId='" +
                                      itmRow.getAttribute("ItmId") + "'");
                    Row[] filteredRows = v.getFilteredRows(rq);
                    System.out.println("Total Row for this lot in Org is--- " + filteredRows.length);
                    if (filteredRows.length > 0) {
                        retVAl.add(0, "Y");
                        inFlg = "Y";
                    } else {
                        retVAl.add(0, "N");
                        inFlg = "N";
                    }
                }
            } else {
                inFlg = "NP";
                retVAl.add(0, "NP"); //NP- No Profile defined for this organisation
            }
        }
        //  System.out.println("Return Val is--" + retVAl);
        return retVAl;


    }

    /**
     * Container's getter for OrgSlsPrf1.
     * @return OrgSlsPrf1
     */
    public ViewObjectImpl getOrgSlsPrf1() {
        return (ViewObjectImpl)findViewObject("OrgSlsPrf1");
    }


    /**
     * Fns to check whether lot is Auto generated or not..
     *
     */

    public String isLotAutoGen() {
        ViewObject slsRma = this.getSlsRma1();
        Row curRow = slsRma.getCurrentRow();
        ViewObject slsRmaLot = this.getSlsRmaItmLot1();
        Row curLotRow = slsRmaLot.getCurrentRow();
        String isLotAtutoGen = "N";
        ViewObjectImpl orgMM = this.getorgMMPrfVO1();
        RowQualifier rqMM = new RowQualifier(orgMM);
        rqMM.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and CldId='" +
                            getparamCldId());

        Row orgMMRow[] = orgMM.getFilteredRows(rqMM);
        if (orgMMRow.length > 0) {
            if (orgMMRow[0].getAttribute("AutoLotGen") != null) {
                isLotAtutoGen = orgMMRow[0].getAttribute("AutoLotGen").toString();
            }
            // System.out.println("Automatic Lot generation-" + isLotAtutoGen);
            if (isLotAtutoGen.equalsIgnoreCase("Y")) {
                try {
                    /*    System.out.println("Warehouse is--" + curRow.getAttribute("WhId") + "and OrgId is-" +
                                       getparamOrgId()); */
                    String lotNo =
                        (String)callStoredFunction1(VARCHAR, "MM.mm_gen_lot(?,?,?,?,?)", new Object[] { getparamCldId(),
                                                                                                        getparamSlocId(),
                                                                                                        getparamOrgId(),
                                                                                                        curRow.getAttribute("WhId"),
                                                                                                        curLotRow.getAttribute("ItmId") });
                    // System.out.println("AutoGen Lot Nu is-" + lotNo);
                    curLotRow.setAttribute("LotId", lotNo);
                } catch (Exception e) {
                    //System.out.println("Exception-" + e);
                    isLotAtutoGen = "N";
                }

            }
        }
        return isLotAtutoGen;
    }

    /**
     * Container's getter for SlsRmaItmLot2.
     * @return SlsRmaItmLot2
     */
    public ViewObjectImpl getSlsRmaItmLot2() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmLot2");
    }

    /**
     * Container's getter for viewStkSummLotVO1.
     * @return viewStkSummLotVO1
     */
    public ViewObjectImpl getviewStkSummLotVO1() {
        return (ViewObjectImpl)findViewObject("viewStkSummLotVO1");
    }

    /**
     * Container's getter for orgMMPrfVO1.
     * @return orgMMPrfVO1
     */
    public ViewObjectImpl getorgMMPrfVO1() {
        return (ViewObjectImpl)findViewObject("orgMMPrfVO1");
    }

    /**Method to Validate Bin Quantity
     * @param BinId
     * @param qty
     * @return
     */
    public String checkBinValidator(String BinId, Number qty) {
        Number bincapacity = new Number(0);
        Number curitmStk = new Number(0);
        String retVal = "N";

        ViewObject slsRma = this.getSlsRma1();
        ViewObjectImpl stkBin = this.getviewStkSummBinVO1();
        ViewObjectImpl binCap = this.getgetBinCapacityVO1();
        ViewObject slsRmaBin = this.getSlsRmaItmBin1();


        Row rmaRow = slsRma.getCurrentRow();
        Row rmaBinRow = slsRmaBin.getCurrentRow();
        RowQualifier rqCap = new RowQualifier(binCap);
        rqCap.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                             getparamOrgId() + "' and WhId='" + rmaRow.getAttribute("WhId") + "' and ItmId='" +
                             rmaBinRow.getAttribute("ItmId") + "' and BinId='" + BinId + "'");
        Row fltrBincap[] = binCap.getFilteredRows(rqCap);
        //System.out.println("Row for this Bin in Bin Cap-" + fltrBincap.length);

        if (fltrBincap.length > 0) {
            if (fltrBincap[0].getAttribute("ItmQty") != null) {
                bincapacity = (Number)fltrBincap[0].getAttribute("ItmQty");
            }
        } else {
            /***-1 capacity represents that user can allocate unlimited quantity to that bin*/
            bincapacity = new Number(-1);
        }
        // System.out.println("Bin capacity is-" + bincapacity);

        RowQualifier rqStk = new RowQualifier(stkBin);
        rqStk.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                             getparamOrgId() + "' and WhId='" + rmaRow.getAttribute("WhId") + "' and ItmId='" +
                             rmaBinRow.getAttribute("ItmId") + "' and BinId='" + BinId + "'");
        Row fltrStk[] = stkBin.getFilteredRows(rqStk);
        //System.out.println("Row for this Bin in Stock-" + fltrStk.length);

        if (fltrStk.length > 0) {
            for (Row r : fltrStk) {
                if (r.getAttribute("TotStk") != null) {
                    curitmStk = curitmStk.add((Number)r.getAttribute("TotStk"));
                }
            }
        }
        // System.out.println("Current Stock for this item in StockBin-" + curitmStk);
        if (qty != null) {
            Number totQtyVal = curitmStk.add(qty);
            // System.out.println("Capacity -" + bincapacity + " current tot Qty--" + totQtyVal);
            if (bincapacity.compareTo(-1) == 0) {
                retVal = "N";
            } else if (totQtyVal.compareTo(bincapacity) == 1) {
                retVal = "Y";
            }
        }
        return retVal;
    }

    /**Method to Check that all Items are received with full quantity or Not, if Not then it will show Validation Message
     * @return
     */
    public ArrayList checkItemRcvdValidation() {
        /*  System.out.println("shupment id iin slsrmaitm table---" +
                           this.getSlsRmaItem2().getCurrentRow().getAttribute("ShipmntId") + " key is----" +
                           this.getSlsRmaItem2().getCurrentRow().getKey()); */
        ArrayList itemVal = new ArrayList();
        Row rmaRow = this.getSlsRma1().getCurrentRow();
        ViewObjectImpl slsRmaItm = this.getSlsRmaItem1();
        ViewObjectImpl slsRmaLot = this.getSlsRmaItmLot2();


        RowQualifier rqItm = new RowQualifier(slsRmaItm);
        rqItm.setWhereClause("CldId='" + getparamCldId() + "' and  SlocId=" + getparamSlocId() + " and OrgId='" +
                             getparamOrgId() + "' and DocId='" + rmaRow.getAttribute("DocId") + "'");

        Row itmFltrd[] = slsRmaItm.getFilteredRows(rqItm);
        System.out.println("Total Item in this RMA-" + itmFltrd.length);
        //   RowSetIterator rsi = slsRmaItm.createRowSetIterator(null);
        for (Row curItmRow : itmFltrd) {
            if (curItmRow != null) {
                Number pickedQtyItm = (Number)curItmRow.getAttribute("RcptQty");
                Number lotTotQty = new Number(0);
                RowQualifier rq = new RowQualifier(slsRmaLot);
                rq.setWhereClause("CldId='" + curItmRow.getAttribute("CldId") + "' and  SlocId=" +
                                  curItmRow.getAttribute("SlocId") + " and OrgId='" + curItmRow.getAttribute("OrgId") +
                                  "' and DocId='" + curItmRow.getAttribute("DocId") + "' and ItmId='" +
                                  curItmRow.getAttribute("ItmId") + "' and ShipmntId='" +
                                  curItmRow.getAttribute("ShipmntId") + "'");
                //  _log.info("RowQuali Expression--" + rq.getExprStr());
                Row fltrdRows[] = slsRmaLot.getFilteredRows(rq);
                _log.info("Total Row in Lot for This Item--" + fltrdRows.length + "Item is-" +
                          curItmRow.getAttribute("ItmId"));
                if (fltrdRows.length > 0) {
                    for (Row r : fltrdRows) {
                        Number okQnt = (Number)r.getAttribute("RcptQtyBs");
                        Number rejtQnt = (Number)r.getAttribute("RejQty");
                        Number rwkQnt = (Number)r.getAttribute("RwkQty");
                        _log.info("RECEIVE QUANTITY ---" + pickedQtyItm + " --REWORKABLE QUANTITY-- " + rwkQnt +
                                  "--REJECTD QUANTITY-- " + rejtQnt + "--- OK QUANTITY-- " + okQnt);
                        lotTotQty = lotTotQty.add(okQnt.add(rejtQnt.add(rwkQnt)));
                        _log.info("total quantiity in lot---" + lotTotQty);
                        //  lotTotQty = lotTotQty.add((Number)r.getAttribute("RcptQtyBs"));
                    }
                }
                _log.info("recived quqntity-" + pickedQtyItm + "Total Rcvd Quantity-" + lotTotQty);
                if (pickedQtyItm.compareTo(lotTotQty) == 0) {

                } else {
                    Row itmFltrRow[] =
                        this.getItemNameLov1().getFilteredRows("ItmId", curItmRow.getAttribute("ItmId"));
                    if (itmFltrRow.length > 0) {
                        Number pendQty = pickedQtyItm.subtract(lotTotQty);
                        _log.info("Inside Else--" + itmFltrRow[0].getAttribute("ItmDesc"));
                        String valToshow = itmFltrRow[0].getAttribute("ItmDesc") + " Pending Quantity = " + pendQty;
                        itemVal.add(valToshow);
                    }
                }
            }
        }
        // _log.info("Un-Issued Items--" + itemVal);
        return itemVal;
    }


    /**Method to check Whether serail should be created or not
     * @return
     */
    public String serialiazedItemRcptCheck() {
        ViewObject lot = this.getSlsRmaItmLot1();
        ViewObject srNo = this.getSlsRmaItmSr1();
        Number lotQty = new Number(0);
        Number srQty = new Number(0);
        RowSetIterator lotIter = lot.createRowSetIterator(null);
        while (lotIter.hasNext()) {
            Row nextLotRow = lotIter.next();
            if (nextLotRow.getAttribute("RcptQtyBs") != null) {
                lotQty = lotQty.add((Number)nextLotRow.getAttribute("RcptQtyBs"));
            }
        }
        // System.out.println("Total Quantity in lot for this item-" + lotQty);
        srQty = new Number(srNo.getRowCount());
        if (lotQty.compareTo(srQty) == 1) {
            return "Y";
        } else {
            return "N";
        }
    }

    public void filterShpmntCustWise() {
        TempVoVORowImpl curRow = (TempVoVORowImpl)this.getTempVo1().getCurrentRow();
        curRow.getLovDistnctShipVO1();
        this.getTempVo1().executeQuery();
    }

    /**
     * Container's getter for getBinCapacityVO1.
     * @return getBinCapacityVO1
     */
    public ViewObjectImpl getgetBinCapacityVO1() {
        return (ViewObjectImpl)findViewObject("getBinCapacityVO1");
    }

    /**
     * Container's getter for viewStkSummBinVO1.
     * @return viewStkSummBinVO1
     */
    public ViewObjectImpl getviewStkSummBinVO1() {
        return (ViewObjectImpl)findViewObject("viewStkSummBinVO1");
    }

    /**
     * Container's getter for LovDistnctShipVO1.
     * @return LovDistnctShipVO1
     */
    public ViewObjectImpl getLovDistnctShipVO1() {
        return (ViewObjectImpl)findViewObject("LovDistnctShipVO1");
    }

    /**
     * Container's getter for LovShipmentIdVO1.
     * @return LovShipmentIdVO1
     */
    public ViewObjectImpl getLovShipmentIdVO1() {
        return (ViewObjectImpl)findViewObject("LovShipmentIdVO1");
    }

    /**
     * Container's getter for LovShipWiseLotVO1.
     * @return LovShipWiseLotVO1
     */
    public LovShipWiseLotVOImpl getLovShipWiseLotVO1() {
        return (LovShipWiseLotVOImpl)findViewObject("LovShipWiseLotVO1");
    }

    public void executeShipWiseLotVo() {

        String itmId = "";
        String shipId = "";
        ViewObjectImpl lotWiseShipVo = this.getLovShipWiseLotVO1();
        Row itmRow = this.getSlsRmaItem2().getCurrentRow();
        if (itmRow != null) {
            itmId = (String)itmRow.getAttribute("ItmId");
            shipId = (String)itmRow.getAttribute("ShipmntId");
            //_log.info("Item Id ANd Shipment Id " + itmId + "-----" + shipId);
        }
        // _log.info("Item Id ANd Shipment Id " + itmId + "-----" + shipId);
        ViewCriteria vc = lotWiseShipVo.getViewCriteria("LovShipWiseLotVOCriteria");
        lotWiseShipVo.applyViewCriteria(vc);
        lotWiseShipVo.setNamedWhereClauseParam("BindRmaStartDate", itmId);
        lotWiseShipVo.setNamedWhereClauseParam("BindRmaEndDate", shipId);
        lotWiseShipVo.setNamedWhereClauseParam("BindCldID", getparamCldId());
        lotWiseShipVo.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        lotWiseShipVo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        lotWiseShipVo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        lotWiseShipVo.executeQuery();

    }

    /**
     * Container's getter for LovShipWiseLotVO2.
     * @return LovShipWiseLotVO2
     */
    public LovShipWiseLotVOImpl getLovShipWiseLotVO2() {
        return (LovShipWiseLotVOImpl)findViewObject("LovShipWiseLotVO2");
    }

    /**
     * Container's getter for SlsRmaItmToSlsLovShipWiseLotVL1.
     * @return SlsRmaItmToSlsLovShipWiseLotVL1
     */
    public ViewLinkImpl getSlsRmaItmToSlsLovShipWiseLotVL1() {
        return (ViewLinkImpl)findViewLink("SlsRmaItmToSlsLovShipWiseLotVL1");
    }

    /**
     * Method to add Item in SLS$RMALOT table...
     *
     */

    public void addItmInLot() {
        _log.info("In addItmInLot Method");

        ViewObject shipWiseLotVw = this.getLovShipWiseLotVO2();
        ViewObjectImpl slsRmalot = this.getSlsRmaItmLot1();
        slsRmalot.executeQuery();

        Row slsRMA = this.getSlsRma1().getCurrentRow();
        shipWiseLotVw.setRangeSize(-1);
        Row allshipWiseLotVw[] = shipWiseLotVw.getAllRowsInRange();
        _log.info("---------" + slsRMA.getAttribute("WhId"));
        _log.info("allshipWiseLotVw.length " + allshipWiseLotVw.length);
        if (allshipWiseLotVw.length > 0) {
            for (Row r : allshipWiseLotVw) {
                if (((Number)r.getAttribute("TreansRcvRejQuty")).compareTo(0) >= 0 ||
                    ((oracle.jbo.domain.Number)r.getAttribute("TransRcvRwkQty")).compareTo(0) > 0 ||
                    ((oracle.jbo.domain.Number)r.getAttribute("TransRejQty")).compareTo(0) >= 0) {
                    _log.info("set 3");
                    RowQualifier rowQualifier = new RowQualifier(slsRmalot);
                    rowQualifier.setWhereClause("ItmId = '" + r.getAttribute("ItmId") + "' and LotId='" +
                                                r.getAttribute("LotId1") + "' and ShipmntId ='" +
                                                r.getAttribute("DocId") + "' and SoId ='" + r.getAttribute("SoId"));
                    Row[] rows = slsRmalot.getFilteredRows(rowQualifier);
                    _log.info("Rows In Lot " + rows.length);
                    if (rows.length > 0) {
                        _log.info("set 4");
                        for (Row ro : rows) {
                            _log.info("set 5");
                            if (((oracle.jbo.domain.Number)r.getAttribute("TransRejQty")).compareTo(0) == 0 &&
                                ((oracle.jbo.domain.Number)r.getAttribute("TreansRcvRejQuty")).compareTo(0) == 0 &&
                                ((oracle.jbo.domain.Number)r.getAttribute("TransRcvRwkQty")).compareTo(0) == 0) {
                                _log.info("Item is removed");
                                _log.info("set 6");
                                System.out.println("Set No. 6");

                                ro.remove();
                                // this.getSlsRmaItmLot1().executeQuery();
                            } else if (((oracle.jbo.domain.Number)r.getAttribute("TransRejQty")).compareTo(0) > 0 ||
                                       ((oracle.jbo.domain.Number)r.getAttribute("TreansRcvRejQuty")).compareTo(0) >
                                       0 ||
                                       ((oracle.jbo.domain.Number)r.getAttribute("TransRcvRwkQty")).compareTo(0) > 0) {
                                _log.info("Item is updated");
                                _log.info("set 7");
                                ro.setAttribute("RcptQtyBs", r.getAttribute("TransRejQty"));
                                ro.setAttribute("RejQty", r.getAttribute("TreansRcvRejQuty"));
                                ro.setAttribute("RwkQty", r.getAttribute("TransRcvRwkQty"));
                                // this.getSlsRmaItmLot1().executeQuery();
                            }
                        }
                    } else if (((oracle.jbo.domain.Number)r.getAttribute("TransRejQty")).compareTo(0) > 0 ||
                               ((oracle.jbo.domain.Number)r.getAttribute("TreansRcvRejQuty")).compareTo(0) > 0 ||
                               ((oracle.jbo.domain.Number)r.getAttribute("TransRcvRwkQty")).compareTo(0) > 0) {
                        _log.info("Item inserted in lot");
                        _log.info("set 8 lot id is " + r.getAttribute("LotId1"));
                        slsRmalot.clearCache();
                        String lotId = r.getAttribute("LotId1").toString();
                        System.out.println("Lot Id At the time of insertion is :-" + lotId);
                        SlsRmaItmLotVORowImpl newRmaLot = (SlsRmaItmLotVORowImpl)slsRmalot.createRow();
                        newRmaLot.setAttribute("ShipmntDt", r.getAttribute("DocDt"));
                        newRmaLot.setLotId(lotId);
                        System.out.println("LotId : " + lotId);
                        newRmaLot.setRcptQtyBs((Number)r.getAttribute("TransRejQty"));
                        newRmaLot.setRcptQty(new Number(0));
                        newRmaLot.setRejQty((Number)r.getAttribute("TreansRcvRejQuty"));
                        newRmaLot.setRwkQty((Number)r.getAttribute("TransRcvRwkQty"));
                        newRmaLot.setItmLotCost((Number)r.getAttribute("ItmLotCost"));
                        slsRmalot.insertRow(newRmaLot);

                        _log.info("set 8");
                    }
                }
            }
        }
    }


    public String validLotQnty() {
        Number totalQntInLot = new Number(0);
        ViewObjectImpl itmView = this.getSlsRmaItem2();
        Row itmRow = itmView.getCurrentRow();
        Number rcptQnt = (Number)itmRow.getAttribute("RcptQty");
        ViewObjectImpl slsShipWiselot = this.getLovShipWiseLotVO2();
        RowSetIterator itr = slsShipWiselot.createRowSetIterator(null);
        boolean b = itr.hasNext();
        // _log.info("return not ok ---" + b);
        try {
            while (itr.hasNext()) {
                //   _log.info("inside iterator ");
                Row r = itr.next();
                Number okQnt = (Number)r.getAttribute("TransRejQty");
                Number rejtQnt = (Number)r.getAttribute("TreansRcvRejQuty");
                Number rwkQnt = (Number)r.getAttribute("TransRcvRwkQty");

                /*  _log.info("RECEIVE QUANTITY ---" + rcptQnt + " --REWORKABLE QUANTITY-- " + rwkQnt +
                          "--REJECTD QUANTITY-- " + rejtQnt + "--- OK QUANTITY-- " + okQnt); */
                totalQntInLot = totalQntInLot.add(okQnt.add(rejtQnt.add(rwkQnt)));
                _log.info("total quantiity in lot---" + totalQntInLot);
            }
        } catch (Exception e) {
            return null;
        }

        itr.closeRowSetIterator();
        /*  _log.info("total quantiity in lot---" + totalQntInLot + " and receipt qnt " + rcptQnt +
                  " after losing iterator"); */
        if (totalQntInLot.compareTo(rcptQnt) == 0) {
            // _log.info("total quantiity in lot---" + totalQntInLot + " and receipt qnt " + rcptQnt + " when ok");
            return "OK";
        } /* else {
            _log.info("total quantiity in lot---" + totalQntInLot + " and receipt qnt " + rcptQnt + " when not ok...");
            return "NOTOK";
        } */
        //_log.info("total quantiity in lot---" + totalQntInLot + " and receipt qnt " + rcptQnt + " when not ok...");
        _log.info("total quantiity in lot---" + totalQntInLot);
        return "NOTOK";
    }

    public ArrayList checkOkRejRwkQnt() {
        Number totalQntInLot = new Number(0);
        Number totalOkQnt = new Number(0);
        Number totalrejQnt = new Number(0);
        Number totalrwkQnt = new Number(0);
        ArrayList itmQnt = new ArrayList();
        ViewObjectImpl itmView = this.getSlsRmaItem2();
        Row itmRow = itmView.getCurrentRow();
        Number rcptQnt = (Number)itmRow.getAttribute("RcptQty");
        ViewObjectImpl slsShipWiselot = this.getLovShipWiseLotVO2();
        RowSetIterator itr = slsShipWiselot.createRowSetIterator(null);
        boolean b = itr.hasNext();
        // _log.info("return not ok ---" + b);
        try {
            while (itr.hasNext()) {
                // _log.info("inside iterator ");
                Row r = itr.next();
                Number okQnt = (Number)r.getAttribute("TransRejQty");
                Number rejtQnt = (Number)r.getAttribute("TreansRcvRejQuty");
                Number rwkQnt = (Number)r.getAttribute("TransRcvRwkQty");
                totalOkQnt = totalOkQnt.add(okQnt);
                totalrejQnt = totalrejQnt.add(rejtQnt);
                totalrwkQnt = totalrwkQnt.add(rwkQnt);
                /*  _log.info("RECEIVE QUANTITY ---" + rcptQnt + " --REWORKABLE QUANTITY-- " + rwkQnt +
                          "--REJECTD QUANTITY-- " + rejtQnt + "--- OK QUANTITY-- " + okQnt + "totalOkQnt" +
                          totalOkQnt + "totalrejQnt" + totalrejQnt + "totalrwkQnt" + totalrwkQnt); */
                totalQntInLot = totalQntInLot.add(okQnt.add(rejtQnt.add(rwkQnt)));
                // _log.info("total quantiity in lot---" + totalQntInLot);

            }
        } catch (Exception e) {
            return null;
        }
        // itr.closeRowSetIterator();
        itmQnt.add(totalrejQnt);
        itmQnt.add(totalOkQnt);
        itmQnt.add(totalrwkQnt);
        itr.closeRowSetIterator();
        //  _log.info("Value in Array List  " + itmQnt);
        return itmQnt;
    }

    public String onSaveClickValidItmQnt() {
        Number sumOfAllQnt = new Number(0);
        Number totalOkQnt = new Number(0);
        Number totalrejQnt = new Number(0);
        Number totalrwkQnt = new Number(0);
        Number totalRcptQnt = new Number(0);
        ViewObjectImpl itmView = this.getSlsRmaItem1();
        RowQualifier rq = new RowQualifier(itmView);
        String doId = (String)this.getSlsRma1().getCurrentRow().getAttribute("DocId");
        _log.info("doId " + doId);
        rq.setWhereClause("OrgId = '" + getparamOrgId() + "' and SlocId =" + getparamSlocId() + " and CldId ='" +
                          getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() + "' and DocId ='" + doId + "'");
        _log.info("query  " + rq.getExprStr());
        Row filterItemRow[] = itmView.getFilteredRows(rq);
        _log.info("filterItemRow  " + filterItemRow.length);
        if (filterItemRow.length > 0) {
            for (Row r : filterItemRow) {
                Number rcptQnt = (Number)r.getAttribute("RcptQty");
                Number okQnt = (Number)r.getAttribute("OkQty");
                Number rejtQnt = (Number)r.getAttribute("RejQty");
                Number rwkQnt = (Number)r.getAttribute("RwkQty");
                totalRcptQnt = totalRcptQnt.add(rcptQnt);
                totalOkQnt = totalOkQnt.add(okQnt);
                totalrejQnt = totalrejQnt.add(rejtQnt);
                totalrwkQnt = totalrwkQnt.add(rwkQnt);
                _log.info("RECEIVE QUANTITY ---" + rcptQnt + "total receipt quantity---" + totalRcptQnt +
                          " --REWORKABLE QUANTITY-- " + rwkQnt + "--REJECTD QUANTITY-- " + rejtQnt +
                          "--- OK QUANTITY-- " + okQnt + "totalOkQnt" + totalOkQnt + "totalrejQnt" + totalrejQnt +
                          "totalrwkQnt" + totalrwkQnt);
            }
        }
        sumOfAllQnt = sumOfAllQnt.add(totalOkQnt.add(totalrejQnt.add(totalrwkQnt)));
        _log.info("total quantiity in lot---" + sumOfAllQnt);

        _log.info(" receipt qnt---" + totalRcptQnt + "  and sum of all " + sumOfAllQnt);
        _log.info("rcptQnt.compareTo(sumOfAllQnt)" + totalRcptQnt.compareTo(sumOfAllQnt));

        if (totalRcptQnt.compareTo(sumOfAllQnt) != 0) {
            return "Y";
        }
        /*  else if(totalRcptQnt.compareTo(sumOfAllQnt) == 0){
            return "Y";
        } */
        else {
            return "N";
        }
    }

    public String validRcptQnt() {
        Number totalQunt = new Number(0);
        ViewObjectImpl itmView = this.getSlsRmaItem2();
        Row itmRow = itmView.getCurrentRow();
        RowQualifier itmrq = new RowQualifier(itmView);
        itmrq.setWhereClause(" ItmId ='" + itmRow.getAttribute("ItmId") + "' and ShipmntId ='" +
                             itmRow.getAttribute("ShipmntId") + "' and DocId='" + itmRow.getAttribute("DocId"));


        if (itmRow != null) {
            // _log.info("If item row not Null");
            Number rcptQnt = (Number)itmRow.getAttribute("RcptQty");
            Number rejQnt = (Number)itmRow.getAttribute("RejQty");
            Number rwkQnt = (Number)itmRow.getAttribute("RwkQty");
            Number okQnt = (Number)itmRow.getAttribute("OkQty");
            _log.info("RECEIVE QUANTITY ---" + rcptQnt + " --REWORKABLE QUANTITY-- " + rwkQnt +
                      "--REJECTD QUANTITY-- " + rejQnt + "--- OK QUANTITY-- " + okQnt);
            totalQunt = totalQunt.add(okQnt.add(rwkQnt.add(rejQnt)));
            _log.info("TOTAL SUM___" + totalQunt);
            if (totalQunt.compareTo(rcptQnt) == 0) {
                _log.info("when total is greater than received qquantity");
                return "OK";
            }
            _log.info("return not ok ");
            return "NOTOK";
        }

        return null;
    }


    public ArrayList isAllGateEntryitmAdjusted() {
        System.out.println("in isAllGateEntryitmAdjusted ");
        ArrayList itmList = new ArrayList();
        _log.info("Is list emppty=" + itmList.isEmpty());
        // String itemVal = "YES";
        Row rmaRow = this.getSlsRma1().getCurrentRow();
        ViewObjectImpl slsRmaItm = this.getSlsRmaItem1();
        ViewObjectImpl slsRmaitmTemp = this.getSlsRmaItmTemp2();
        Number totalGeQty = new Number(0);
        Number totalRcptQnt = new Number(0);
        // Number ItmRcvQnt = new Number(0);
        RowSetIterator itr = slsRmaitmTemp.createRowSetIterator(null);
        // _log.info(" itr.has next loop ke upar " + itr.hasNext());
        while (itr.hasNext()) {
            // Number totalGeQty2 = new Number(0);
            Row itmTmpRow = itr.next();
            String geId = (String)itmTmpRow.getAttribute("GeId");
            String geitmIdId = (String)itmTmpRow.getAttribute("ItmId");
            Number geQty = (Number)itmTmpRow.getAttribute("GeQty");
            totalGeQty = totalGeQty.add(geQty);

            _log.info("Total item quantity in temp table uis  " + totalGeQty + " for this tgis item " + geitmIdId +
                      " in this gate entry is " + geId);
        }

        itr.closeRowSetIterator();

        RowQualifier rqItm = new RowQualifier(slsRmaItm);
        rqItm.setWhereClause("CldId='" + getparamCldId() + "' and  SlocId=" + getparamSlocId() + " and OrgId='" +
                             getparamOrgId() + "' and DocId='" + rmaRow.getAttribute("DocId") + "'");

        Row itmFltrd[] = slsRmaItm.getFilteredRows(rqItm);
        //  _log.info("Total Item in this RMA in ITM TABLE-" + itmFltrd.length);
        //   RowSetIterator rsi = slsRmaItm.createRowSetIterator(null);
        if (itmFltrd.length > 0) {
            for (Row curItmRow : itmFltrd) {
                //if (curItmRow != null) {
                Number pickedQtyItm = (Number)curItmRow.getAttribute("RcptQty");
                totalRcptQnt = totalRcptQnt.add(pickedQtyItm);
                _log.info("total quantiity in in item table for this item " + curItmRow.getAttribute("ItmId") +
                          "  pick quant---" + pickedQtyItm + " totalRcptQnt " + totalRcptQnt + " totalGeQty " +
                          totalGeQty);
                _log.info("----in looop" + totalGeQty.compareTo(totalRcptQnt));
            }
        }
        System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
        System.out.println("recived quqntity- condition ==" + totalGeQty.compareTo(totalRcptQnt));
        if (totalGeQty.compareTo(totalRcptQnt) == 0) {
            System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
            System.out.println(" in if---of with con " + totalGeQty.compareTo(totalRcptQnt));
            itmList.clear();
            return itmList;

        } else {
            System.out.println("in else");
            Number sumOfRcptQnt = new Number(0);
            //Number prndingQnt= new Number(0);
            RowSetIterator geItr = slsRmaitmTemp.createRowSetIterator(null);
            System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
            while (geItr.hasNext()) {
                System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
                Row geRow = geItr.next();
                String geitmIdId = (String)geRow.getAttribute("ItmId");
                Number geQty = (Number)geRow.getAttribute("GeQty");
                _log.info("TotaAL QUANTITY FOR THSI ITEM  " + geitmIdId + " is " + geQty);
                // Row itmFltrRow[] = this.getItemNameLov1().getFilteredRows("ItmId", geitmIdId);
                //_log.info("Inside Else--" + itmFltrRow[0].getAttribute("ItmDesc"));
                String itemName =
                    (geRow.getAttribute("TransItemDescTrans") == null ? "" : geRow.getAttribute("TransItemDescTrans").toString());

                ViewObjectImpl itmView = this.getSlsRmaItem1();
                RowQualifier itmtblRq = new RowQualifier(slsRmaItm);
                itmtblRq.setWhereClause("CldId='" + getparamCldId() + "' and  SlocId=" + getparamSlocId() +
                                        " and OrgId='" + getparamOrgId() + "' and DocId='" +
                                        rmaRow.getAttribute("DocId") + "' and ItmId ='" + geitmIdId + "'");

                Row fltRow[] = itmView.getFilteredRows(itmtblRq);
                _log.info("Filtered row is  ---" + fltRow.length);
                String message = "";
                System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
                if (fltRow.length > 0) {
                    message = "";
                    // itmList.clear();
                    System.out.println("Row count :" + itmList.size());
                    sumOfRcptQnt = new Number(0);
                    System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty +
                                       " sumOfRcptQnt " + sumOfRcptQnt);
                    for (Row curItmRow : fltRow) {
                        System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty +
                                           " sumOfRcptQnt " + sumOfRcptQnt);
                        Number pickedQtyItm = (Number)curItmRow.getAttribute("RcptQty");
                        sumOfRcptQnt = sumOfRcptQnt.add(pickedQtyItm);
                        System.out.println("v  sumOfRcptQnt " + sumOfRcptQnt);
                        Number pendingQnt = geQty.subtract(sumOfRcptQnt);
                        System.out.println("pendingQnt " + pendingQnt);
                        if (pendingQnt.compareTo(Number.zero()) < 0) {
                            message =
                                    "Item Name :" + itemName + " </br><span style='color:red' >received quantity is more then gate entry quantity</span>";

                        } else if (pendingQnt.compareTo(Number.zero()) > 0) {
                            message =
                                    "Item Name :" + itemName + "</br>Pending Quantity :<span style='color:red' >" + pendingQnt +
                                    "</span>";
                        } else {
                            //itmList.clear();
                            message = "";
                        }

                        System.out.println("Item In List " + itmList);

                    }
                    itmList.add(message);
                    System.out.println(" out for loop Item In List " + itmList);
                    //itmList.add(message);
                } else if (fltRow.length == 0) {
                    System.out.println("when filtered row is zero");
                    message =
                            "Item Name :" + itemName + "</br>Pending Quantity :<span style='color:red' >" + geQty + "</span>";
                    itmList.add(message);
                }
            }
            geItr.closeRowSetIterator();
            System.out.println("finally return " + itmList);
            return itmList;
        }
    }

    public String compareItmWiseReceiveQtyToGeQty(Number rcptQnty) {
        String valid = "YES";
        String gateEntryParam = getparamGeChk();
        _log.info("Gate Entry Globle Parameter=" + gateEntryParam);
        if ("Y".equalsIgnoreCase(gateEntryParam)) {
            Row rmaRow = this.getSlsRma1().getCurrentRow();
            String docId = (String)rmaRow.getAttribute("DocId");
            ViewObjectImpl slsRmaItm = this.getSlsRmaItem1();
            ViewObjectImpl slsRmaItm2 = this.getSlsRmaItem2();
            ViewObjectImpl slsRmaitmTemp = this.getSlsRmaItmTemp2();
            Number totalGeQty = new Number(0);
            Number totalRcptQnt = new Number(0);
            String itmId = (String)slsRmaItm2.getCurrentRow().getAttribute("ItmId");
            RowQualifier itmTmpRq = new RowQualifier(slsRmaitmTemp);
            itmTmpRq.setWhereClause(" CldId ='" + getparamCldId() + "' and SlocId =" + getparamSlocId() +
                                    " and OrgId ='" + getparamOrgId() + "' and HoOrgId ='" + getparamHoOrgId() +
                                    "' and DocId ='" + docId + "' and ItmId ='" + itmId + "'");
            Row itmTmpFiltrdRow[] = slsRmaitmTemp.getFilteredRows(itmTmpRq);
            if (itmTmpFiltrdRow.length > 0) {
                totalGeQty = (Number)itmTmpFiltrdRow[0].getAttribute("GeQty");
            }
            RowQualifier rq = new RowQualifier(slsRmaItm);
            rq.setWhereClause(" CldId ='" + getparamCldId() + "' and SlocId ='" + getparamSlocId() + "' and OrgId ='" +
                              getparamOrgId() + "' and HoOrgId ='" + getparamHoOrgId() + "' and DocId ='" + docId +
                              "' and ItmId ='" + itmId + "'");
            Row filtrdRow[] = slsRmaItm.getFilteredRows(rq);
            if (filtrdRow.length > 0) {
                for (Row r : filtrdRow) {
                    String itemID = (String)r.getAttribute("ItmId");
                    Number rcpQnt = (Number)r.getAttribute("RcptQty");
                    totalRcptQnt = totalRcptQnt.add(rcpQnt);
                }
            }
            if (totalRcptQnt.compareTo(totalGeQty) == 1) {
                _log.info("Set 11"); //check  total receive quantity is more than the gate entry quantity
                valid = "MORE";
            }
            _log.info("Return value from functuon is  " + valid);
            return valid;
        }
        _log.info("When Or Not uSed Gate Entry then Return value from functuon is  " + valid);
        return valid;
    }


    public void setOkRejRwkToZero() {
        // System.out.println("calling deleteLotBinData");
        // deleteLotBinSrData();
        // System.out.println("caledd ");
        Row itmRow = this.getSlsRmaItem2().getCurrentRow();
        if (itmRow != null) {
            itmRow.setAttribute("RejQty", new Number(0)); //
            itmRow.setAttribute("OkQty", new Number(0));
            itmRow.setAttribute("RwkQty", new Number(0));
        }
    }

    public void returnLotQnt() {
        // SlsRmaAppAMImpl am = (SlsRmaAppAMImpl)this.getApplicationModule();

        System.out.println("enter in returnLotQnt methhod of amimpl");
        ViewObjectImpl lotRow = this.getSlsRmaItmLot1();
        ViewObjectImpl lotRow2 = this.getSlsRmaItmLot2();
        ViewObjectImpl shipWiseLot = this.getLovShipWiseLotVO2();
        ViewObjectImpl shipWiseLot2 = this.getLovShipWiseLotVO2();
        shipWiseLot.clearCache();
        shipWiseLot2.clearCache();
        RowSetIterator itr = lotRow.createRowSetIterator(null);
        while (itr.hasNext()) {
            System.out.println("entring in iteriator returnLotQnt");
            /// if (itr.hasNext()) {


            Row r = itr.next();
            Number okQnt = (Number)r.getAttribute("RcptQtyBs");
            Number rejectedQnt = (Number)r.getAttribute("RejQty");
            Number rwkQnt = (Number)r.getAttribute("RwkQty");
            String ItemId = (String)r.getAttribute("ItmId");
            String lotId = (String)r.getAttribute("LotId");
            System.out.println(" slslRMaItm lot Id is ==" + lotId + " ==and Itm Id is ==" + ItemId +
                               " ==okQnt is=== " + okQnt + " ==rejectedQnt==" + rejectedQnt + "== RwkQty ==" + rwkQnt +
                               " ");
            RowQualifier rq = new RowQualifier(shipWiseLot);
            rq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() + " and CldId ='" +
                              getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() + "' and ItmId ='" + ItemId +
                              "' and LotId1 ='" + lotId + "'");
            System.out.println(" expression " + rq.getExprStr());
            Row filteredRow[] = shipWiseLot.getFilteredRows(rq);
            System.out.println("filtetre row " + filteredRow.length);
            if (filteredRow.length > 0) {
                for (Row rr : filteredRow) {
                    System.out.println("ok quantity to set " + okQnt + "  rejected quantity " + rejectedQnt +
                                       "  reworkable wuanotty " + rwkQnt);
                    rr.setAttribute("TransRejQty", okQnt);
                    rr.setAttribute("TreansRcvRejQuty", rejectedQnt);
                    rr.setAttribute("TransRcvRwkQty", rwkQnt);
                    System.out.println("exiting");
                }
            }
            // }
            System.out.println("exiting finally from the iterator");
        }
        itr.closeRowSetIterator();
        System.out.println("exiting from methos of return lot quantity");
    }

    public ArrayList checkItmRcvQntToOkRejRekQnt() {
        System.out.println("Inside checkItmRcvQntToOkRejRekQnt ");
        ArrayList itemVal = new ArrayList();
        ViewObjectImpl rmaVo = this.getSlsRma1();
        ViewObjectImpl shipVo = this.getSlsRmaShipmnt2();
        ViewObjectImpl itmVo = this.getSlsRmaItem1();
        String docId = (String)rmaVo.getCurrentRow().getAttribute("DocId");
        RowQualifier rq = new RowQualifier(shipVo);
        rq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() + " and CldId ='" +
                          getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() + "' and DocId ='" + docId + "'");

        System.out.println("expression " + rq.getExprStr());
        Row filteredRow[] = shipVo.getFilteredRows(rq);
        System.out.println(" filtwrw row length " + filteredRow.length);
        if (filteredRow.length > 0) {
            for (Row r : filteredRow) {
                String shipDocId = (String)r.getAttribute("ShipmntId");
                RowQualifier itmRq = new RowQualifier(itmVo);
                System.out.println("shipDocId  " + shipDocId);
                itmRq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                     " and CldId ='" + getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() +
                                     "' and DocId ='" + docId + "' and ShipmntId='" + shipDocId + "'");

                System.out.println("expression ==========" + itmRq.getExprStr());
                Row itmfilteredRow[] = itmVo.getFilteredRows(itmRq);
                System.out.println(" item filtwrw row length " + itmfilteredRow.length);
                int i = 0;
                if (itmfilteredRow.length > 0) {
                    i++;
                    System.out.println(" i  ===" + i);
                    for (Row rr : itmfilteredRow) {
                        String itmId = (String)rr.getAttribute("ItmId");
                        Number rcptQnt = (Number)rr.getAttribute("RcptQty");
                        Number rejQnt = (Number)rr.getAttribute("RejQty");
                        Number rwkQnt = (Number)rr.getAttribute("RwkQty");
                        Number okQnt = (Number)rr.getAttribute("OkQty");
                        Number totalSum = new Number(0);
                        System.out.println(" itmId " + itmId);
                        totalSum = totalSum.add(okQnt.add(rwkQnt.add(rejQnt)));
                        System.out.println(" rcptQnt==" + rcptQnt + " okQnt ==" + okQnt + " rwkQnt==" + rwkQnt +
                                           " rejQnt==" + rejQnt + " totalSum ==" + totalSum +
                                           " rcptQnt.compareTo(totalSum) " + rcptQnt.compareTo(totalSum));
                        if (rcptQnt.compareTo(totalSum) != 0) {
                            String valToshow = "";
                            System.out.println("inside validation message");
                            ViewObjectImpl itmNmVo = this.getItemNameLov1();
                            RowQualifier rrq = new RowQualifier(itmNmVo);
                            rrq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                               " and CldId ='" + getparamCldId() + "' and HoOrgId ='" +
                                               getparamHoOrgId() + "' and ItmId='" + itmId + "'");
                            Row itmFltrRow[] = itmNmVo.getFilteredRows(rrq);
                            System.out.println("rrq.  " + rrq.getExprStr());

                            System.out.println("shipDocId =-=-=-=-=----=-=-====" + shipDocId);

                            ViewObjectImpl lovshipVo = this.getShipDispDocIdLOV1();
                            RowQualifier rrrq = new RowQualifier(lovshipVo);
                            rrrq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                                " and CldId ='" + getparamCldId() + "' and HoOrgId ='" +
                                                getparamHoOrgId() + "' and DocId='" + shipDocId + "'");
                            System.out.println("rrq.=-=-=-=-=-=  " + rrrq.getExprStr());
                            System.out.println("nmzhcmchaj fhakjhdsf");
                            Row shipFilteredRow[] = lovshipVo.getFilteredRows(rrrq);
                            System.out.println(" item filtered row lenggth " + itmFltrRow.length +
                                               " shipFilteredRow.length =-=-=-= " + shipFilteredRow.length);
                            if (itmFltrRow.length > 0 && shipFilteredRow.length > 0) {
                                System.out.println("set 1111  " + shipFilteredRow[0].getAttribute("ShipmntId"));
                                System.out.println("set 121212" + itmFltrRow[0].getAttribute("ItmDesc"));
                                valToshow =
                                        "Item Name : " + itmFltrRow[0].getAttribute("ItmDesc") + " </br>Of Shipment No. :" +
                                        shipFilteredRow[0].getAttribute("ShipmntId");
                                itemVal.add(valToshow);
                            }
                        }
                    }
                }

            }
        }
        System.out.println(" finally returned Item array list vaue is " + itemVal);
        return itemVal;
    }

    /**
     * Container's getter for ShipDispDocIdLOV1.
     * @return ShipDispDocIdLOV1
     */
    public ViewObjectImpl getShipDispDocIdLOV1() {
        return (ViewObjectImpl)findViewObject("ShipDispDocIdLOV1");
    }

    /**
     * Container's getter for LovGeId1.
     * @return LovGeId1
     */
    public ViewObjectImpl getLovGeId1() {
        return (ViewObjectImpl)findViewObject("LovGeId1");
    }

    /*****Method to delete data from lot bin nad serial table*****/
    public void deleteLotBinSrData() { /*
        System.out.println("Inside deleteLotBinData method ");
        ViewObjectImpl lotVo = this.getSlsRmaItmLot2();
        ViewObjectImpl binVo = this.getSlsRmaItmBin2();
        ViewObjectImpl srVo = this.getSlsRmaItmSr2();
        RowQualifier lotRq = new RowQualifier(lotVo);
        RowQualifier binRq = new RowQualifier(binVo);
        RowQualifier srRq = new RowQualifier(srVo);
        String orgUsebinCheck = getparamBinCheck();
        System.out.println("bin hcek " + orgUsebinCheck);

        Row itmVoRow = this.getSlsRmaItem2().getCurrentRow();
        //checking whether organisation is using bin or not

        if ("Y".equalsIgnoreCase(orgUsebinCheck)) {
            System.out.println("when org use bin");
            if (itmVoRow != null) {
                System.out.println("set 1" + itmVoRow);
                String itmId = (String)itmVoRow.getAttribute("ItmId");
                String shipId = (String)itmVoRow.getAttribute("ShipmntId");
                String rmaDocId = (String)itmVoRow.getAttribute("DocId");
                String soId = (String)itmVoRow.getAttribute("SoId");
                String itmSerializeFlg = (String)itmVoRow.getAttribute("TransItmSerializedFlg");
                //rows in lot
                System.out.println(" itmSerializeFlg " + itmSerializeFlg);
                lotRq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                     " and CldId ='" + getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() +
                                     "' and DocId='" + rmaDocId + "' and ItmId ='" + itmId + "' and ShipmntId='" +
                                     shipId + "'and SoId='"+soId+"'");
                System.out.println("lot query expresiiion.=-=-=-=-=-=  " + lotRq.getExprStr());
                System.out.println("--===--=-=-=-=-");
                Row lotFiltedRow[] = lotVo.getFilteredRows(lotRq);
                System.out.println("lot filtererd row " + lotFiltedRow.length);
                if (lotFiltedRow.length > 0) {
                    for (Row lotRow : lotFiltedRow) {
                        String lotId = (String)lotRow.getAttribute("LotId");
                        String soIdLot=(String)lotRow.getAttribute("SoId");
                        //rows in binId
                        System.out.println("lot id" + lotId);
                        binRq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                             " and CldId ='" + getparamCldId() + "' and HoOrgId ='" +
                                             getparamHoOrgId() + "' and DocId='" + rmaDocId + "' and ItmId ='" +
                                             itmId + "' and ShipmntId='" + shipId + "' and LotId='" + lotId +"'and SoId='"+soIdLot+ "'");
                        System.out.println("bin query expression=-=-=-=-=-=  " + binRq.getExprStr());
                        System.out.println("============");
                        Row binFiltredRow[] = binVo.getFilteredRows(binRq);
                        System.out.println("bin filtererd row " + binFiltredRow.length);
                        if (binFiltredRow.length > 0) {
                            for (Row binRow : binFiltredRow) {
                                String binId = (String)binRow.getAttribute("BinId");
                                String binSoId=(String)binRow.getAttribute("SoId");
                                //rows in sserial table.
                                System.out.println("Bin id " + binId);
                                if ("Y".equalsIgnoreCase(itmSerializeFlg)) {
                                    System.out.println("when item is serilized");
                                    srRq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" +
                                                        getparamSlocId() + " and CldId ='" + getparamCldId() +
                                                        "' and HoOrgId ='" + getparamHoOrgId() + "' and DocId='" +
                                                        rmaDocId + "' and ItmId ='" + itmId + "' and ShipmntId='" +
                                                        shipId + "' and LotId='" + lotId + "' and BinId='" + binId +"'and SoId='"+binSoId+
                                                        "'");
                                    System.out.println("sr query expression.=-=-=-=-=-=  " + srRq.getExprStr());
                                    System.out.println("----------");
                                    Row srFiltredRow[] = srVo.getFilteredRows(srRq);
                                    System.out.println("sr filtererd row " + srFiltredRow.length);
                                    if (srFiltredRow.length > 0) {
                                        for (Row srRow : srFiltredRow) {
                                            System.out.println("removing serial table row " + srRow.getKey());
                                            srRow.remove();
                                        }
                                    }
                                }
                                System.out.println("removing bin table row " + binRow.getKey());
                                binRow.remove();
                            }
                        }
                        System.out.println("removing lot table row " + lotRow.getKey());
                        lotRow.remove();
                    }
                }
            }
            lotVo.executeQuery();

            binVo.executeQuery();

            srVo.executeQuery();

        } else {
            System.out.println("when org nor used bin");
            if (itmVoRow != null) {
                String itmId = (String)itmVoRow.getAttribute("ItmId");
                String shipId = (String)itmVoRow.getAttribute("ShipmntId");
                String rmaDocId = (String)itmVoRow.getAttribute("DocId");
                String rmaSoId= (String)itmVoRow.getAttribute("SoId");
                String itmSerializeFlg = (String)itmVoRow.getAttribute("TransItmSerializedFlg");
                //rows in lot
                lotRq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                     " and CldId ='" + getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() +
                                     "' and DocId='" + rmaDocId + "' and ItmId ='" + itmId + "' and ShipmntId='" +
                                     shipId + "'and SoId='"+rmaSoId+"'");
                System.out.println("rrq.=-=-=-=-=-=  " + lotRq.getExprStr());
                System.out.println("nmzhcmchaj fhakjhdsf");
                Row lotFiltedRow[] = lotVo.getFilteredRows(lotRq);
                System.out.println("lot filtererd row " + lotFiltedRow.length);
                if (lotFiltedRow.length > 0) {
                    for (Row lotRow : lotFiltedRow) {
                        String lotId = (String)lotRow.getAttribute("LotId");
                        String lotSoId=(String)lotRow.getAttribute("SoId");
                        //rows in bin
                        binRq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                             " and CldId ='" + getparamCldId() + "' and HoOrgId ='" +
                                             getparamHoOrgId() + "' and DocId='" + rmaDocId + "' and ItmId ='" +
                                             itmId + "' and ShipmntId='" + shipId + "' and LotId='" + lotId +"'and SoId='"+lotSoId+ "'");
                        System.out.println("bin query expression=-=-=-=-=-=  " + binRq.getExprStr());
                        System.out.println("============");
                        Row binFiltredRow[] = binVo.getFilteredRows(binRq);
                        System.out.println("lot filtererd row " + binFiltredRow.length);

                        if ("Y".equalsIgnoreCase(itmSerializeFlg)) {

                            srRq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                                " and CldId ='" + getparamCldId() + "' and HoOrgId ='" +
                                                getparamHoOrgId() + "' and DocId='" + rmaDocId + "' and ItmId ='" +
                                                itmId + "' and ShipmntId='" + shipId + "' and LotId='" + lotId +
                                                "' and BinId='" + 0 +"'and SoId='"+lotSoId+ "'");
                            System.out.println("sr query expression.=-=-=-=-=-=  " + binRq.getExprStr());
                            System.out.println("----------");
                            Row srFiltredRow[] = srVo.getFilteredRows(srRq);
                            System.out.println("lot filtererd row " + srFiltredRow.length);
                            if (srFiltredRow.length > 0) {
                                for (Row srRow : srFiltredRow) {
                                    srRow.remove();
                                }
                            }
                        }
                        lotRow.remove();
                    }
                }
            }
        } */
        ViewObjectImpl lotVo = this.getSlsRmaItmLot1();
        LovShipWiseLotVOImpl shipLotVo = this.getLovShipWiseLotVO2();
        ViewObjectImpl binVo = this.getSlsRmaItmBin1();
        ViewObjectImpl srVo = this.getSlsRmaItmSr1();
        RowSetIterator shipLotItr = shipLotVo.createRowSetIterator(null);
        System.out.println("shipLotVo rows:-" + shipLotItr.getRowCount());
        while (shipLotItr.hasNext()) {
            shipLotItr.next().remove();

        }
        shipLotItr.closeRowSetIterator();
        shipLotVo.executeQuery();

        RowSetIterator srItr = srVo.createRowSetIterator(null);
        System.out.println("SrItr Rows:-" + srItr.getRowCount());
        while (srItr.hasNext()) {
            Row next = srItr.next();
            Key key = next.getKey();
            SlsRmaItmSrEOImpl srEo =
                (SlsRmaItmSrEOImpl)SlsRmaItmSrEOImpl.getDefinitionObject().findByPrimaryKey(getDBTransaction(), key);
            srEo.remove();
        }
        srItr.closeRowSetIterator();
        srVo.executeQuery();
        RowSetIterator binItr = binVo.createRowSetIterator(null);
        System.out.println("BinItr Rows :-" + binItr.getRowCount());
        while (binItr.hasNext()) {
            Row next = binItr.next();
            Key key = next.getKey();
            SlsRmaItmBinEOImpl binEo =
                (SlsRmaItmBinEOImpl)SlsRmaItmBinEOImpl.getDefinitionObject().findByPrimaryKey(getDBTransaction(), key);
            binEo.remove();
        }
        binItr.closeRowSetIterator();
        binVo.executeQuery();
        RowSetIterator lotItr = lotVo.createRowSetIterator(null);
        System.out.println("LotItr Rows:-" + lotItr.getRowCount());
        while (lotItr.hasNext()) {
            Row next = lotItr.next();
            Key key = next.getKey();
            SlsRmaItmLotEOImpl lotEo =
                (SlsRmaItmLotEOImpl)SlsRmaItmLotEOImpl.getDefinitionObject().findByPrimaryKey(getDBTransaction(), key);
            lotEo.remove();
        }
        lotItr.closeRowSetIterator();
        lotVo.executeQuery();

    }

    /**
     * Container's getter for SlsRmaItmBin2.
     * @return SlsRmaItmBin2
     */
    public ViewObjectImpl getSlsRmaItmBin2() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmBin2");
    }

    /**
     * Container's getter for SlsRmaItmSr2.
     * @return SlsRmaItmSr2
     */
    public ViewObjectImpl getSlsRmaItmSr2() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmSr2");
    }

    public void setShipLovToNull() {
        if (this.getTempVo1().getCurrentRow() != null) {
            this.getTempVo1().getCurrentRow().setAttribute("TransShipmntId", null); ///
            this.getTempVo1().getCurrentRow().setAttribute("TransShipmntDate", null);
        }
    }

    Number oldOkQty = new Number(0);
    Number oldRcptQnt = new Number(0);
    Number oldRwkQty = new Number(0);
    Number oldRejQty = new Number(0);

    public void getOldRcptOkRwkRejQnt() {
        oldOkQty = new Number(0);
        oldRcptQnt = new Number(0);
        oldRwkQty = new Number(0);
        oldRejQty = new Number(0);
        System.out.println("old data is  in amimpl " + oldOkQty + " oldRcptQnt=" + oldRcptQnt + "oldRwkQty= " +
                           oldRwkQty + "oldRejQty= " + oldRejQty);
        Row itmRow = this.getSlsRmaItem2().getCurrentRow();
        if (itmRow != null) {
            oldOkQty = (Number)itmRow.getAttribute("OkQty");
            oldRcptQnt = (Number)itmRow.getAttribute("RcptQty");
            oldRwkQty = (Number)itmRow.getAttribute("RwkQty");
            oldRejQty = (Number)itmRow.getAttribute("RejQty");
            System.out.println("old data is  in amimpl " + oldOkQty + " oldRcptQnt=" + oldRcptQnt + "oldRwkQty= " +
                               oldRwkQty + "oldRejQty= " + oldRejQty);
        }
    }

    public Number setOldRecptQnt() {
        System.out.println("+oldRcptQnt " + oldRcptQnt);
        this.getSlsRmaItem2().getCurrentRow().setAttribute("RcptQty", oldRcptQnt);
        return oldRcptQnt;
    }

    public Number setOldOkQnt() {
        System.out.println("+oldOkQty " + oldOkQty);
        this.getSlsRmaItem2().getCurrentRow().setAttribute("OkQty", oldOkQty);
        return oldOkQty;
    }

    public Number setOldRejQnt() {
        System.out.println("+oldRejQty " + oldRejQty);
        this.getSlsRmaItem2().getCurrentRow().setAttribute("RejQty", oldRejQty);
        return oldRejQty;
    }

    public Number setOldRwkQnt() {
        System.out.println("+oldRwkQty " + oldRwkQty);
        this.getSlsRmaItem2().getCurrentRow().setAttribute("RwkQty", oldRwkQty);
        return oldRwkQty;
    }

    /**
     * Container's getter for LovRmaNo1.
     * @return LovRmaNo1
     */
    public ViewObjectImpl getLovRmaNo1() {
        return (ViewObjectImpl)findViewObject("LovRmaNo1");
    }

    public String chekShipDays() {
        System.out.println("in checkshipdays methd of amimpl");
        String rtndays = "Y";
        BigDecimal days = new BigDecimal(0);
        ViewObjectImpl orgSlPrfVo = this.getOrgSlsPrf1();
        RowQualifier rqqq = new RowQualifier(orgSlPrfVo);
        String isSaleRtnUsed = "Y";
        rqqq.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and HoOrgId='" +
                            getparamHoOrgId() + "' and CldId='" + getparamCldId() + "' and StopSlsRet='" +
                            isSaleRtnUsed + "'");

        System.out.println("row qualifier " + rqqq.getExprStr());
        Row orgfltredRow[] = orgSlPrfVo.getFilteredRows(rqqq);
        System.out.println("org filter row " + orgfltredRow.length);
        if (orgfltredRow.length > 0) {
            Row tempVoRow = this.getTempVo1().getCurrentRow();
            if (tempVoRow != null) {
                String shipId = (String)tempVoRow.getAttribute("TransShipmntId");
                Timestamp shipDt = (Timestamp)tempVoRow.getAttribute("TransShipmntDate");
                Timestamp rmaDt = (Timestamp)this.getSlsRma1().getCurrentRow().getAttribute("DocDt");
                System.out.println("parameter ship date=" + shipDt + "rma dt =" + rmaDt + " ship id=" + shipId);

                days =
(BigDecimal)callStoredFunction(INTEGER, "SLS.fn_chk_ship_rma_days(?,?,?,?,?,?)", new Object[] { getparamSlocId(),
                                                                                                getparamCldId(),
                                                                                                getparamHoOrgId(),
                                                                                                getparamOrgId(),
                                                                                                shipDt, rmaDt });


            }
            System.out.println("days " + days + " condition==" + days.compareTo(new BigDecimal(0)));

            if (days.compareTo(new BigDecimal(0)) == 0) {
                rtndays = "Y";
            } else {
                rtndays = "N";
                System.out.println("message");
                FacesMessage message =
                    new FacesMessage("<html><body>You can not add this Shipment because Shipment is<b> " + days +
                                     " </b> days more than the tpecified days in the profile </body></html>");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }
            System.out.println("rtn days " + rtndays);

        }
        return rtndays;
    }

    public String getUsrNm(Integer usrId) {
        System.out.println("usr id " + usrId);
        ViewObjectImpl usrNmVo = this.getLovUserNameVO1();
        Row usrNm[] = usrNmVo.getFilteredRows("UsrId", usrId);
        System.out.println("usr id  filter erow lenght " + usrNm.length);
        if (usrNm.length > 0) {
            return (String)usrNm[0].getAttribute("UsrName");
        }
        return "";
    }

    /**
     * Container's getter for LovUserNameVO1.
     * @return LovUserNameVO1
     */
    public ViewObjectImpl getLovUserNameVO1() {
        return (ViewObjectImpl)findViewObject("LovUserNameVO1");
    }

    public void addItmwithOutGateEntry() {
        ViewObject shpItmVw = this.getshpmntItmViewVO1();
        ViewObjectImpl slsRmaItm = this.getSlsRmaItem2();
        Row slsRMA = this.getSlsRma1().getCurrentRow();
        shpItmVw.setRangeSize(-1);
        Row allShpIt[] = shpItmVw.getAllRowsInRange();
        _log.info("---------" + slsRMA.getAttribute("WhId"));
        System.out.println("allShpIt length " + allShpIt.length);
        if (allShpIt.length > 0) {
            for (Row viewRow : allShpIt) {
                String itmId = (String)viewRow.getAttribute("ItmId");
                Number returnQty = (Number)viewRow.getAttribute("rejectedQuantTrans");
                if (returnQty != null && returnQty.compareTo(0) >= 0) {
                    ViewObjectImpl shipVo = this.getSlsRma1();

                }
            }

        }


    }

    public StringBuffer checkTaxRvrlApplied() {
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String refOrg =
                (String)callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] { p_cldId,
                                                                                                            p_sloc_id,
                                                                                                            p_org_id,
                                                                                                            "CHK_TAX_REVERSAL" });

            if (refOrg == null || refOrg.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(refOrg.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    /**
     * Container's getter for LovSoDispIdVO1.
     * @return LovSoDispIdVO1
     */
    public ViewObjectImpl getLovSoDispIdVO1() {
        return (ViewObjectImpl)findViewObject("LovSoDispIdVO1");
    }

    public void setDocDtInSlsRmaItmLot1() {
        /* ViewObjectImpl impl = this.getSlsRmaItmLot1();

        RowSetIterator itr =  impl.createRowSetIterator(null);

        System.out.println("in AmImpl Method Doc Date is ---->"+this.getSlsRma1().getCurrentRow().getAttribute("DocDt"));
       System.out.println(itr.getRowCount());
        while (itr.hasNext()) {
            Row row = itr.next();
            row.setAttribute("DocDt",(Timestamp)this.getSlsRma1().getCurrentRow().getAttribute("DocDt"));
        }
        itr.closeRowSetIterator(); */
    }

    /**
     * Container's getter for SlsShipItmVO1.
     * @return SlsShipItmVO1
     */
    public ViewObjectImpl getSlsShipItmVO1() {
        return (ViewObjectImpl)findViewObject("SlsShipItmVO1");
    }

    public Boolean doRmaValidationsPass() {
        System.out.println("Entering in Boolean");
        String binChk = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        System.out.println("Binchk is " + binChk);
        Boolean b = true;
        Row rmaRow = this.getSlsRma1().getCurrentRow();
        Integer rmaType = (rmaRow.getAttribute("RmaTypId") == null ? -1 : (Integer)rmaRow.getAttribute("RmaTypId"));
        System.out.println("RMA Type id is :" + (Integer)rmaRow.getAttribute("RmaTypId"));
        if (rmaType.equals(-1)) {
            b = false;
            FacesMessage message =
                new FacesMessage("<html><body>You Can not Proceed RMA Type Is not Selected</body></html>");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            System.out.println("Rma Type not Selected.");
        } else if (!rmaType.equals(401)) {
            /* ViewObjectImpl shipVo = this.getSlsRmaShipmnt2();
            RowSetIterator shipItr = shipVo.createRowSetIterator(null);
            while (shipItr.hasNext()) {

                Row shipRow = shipItr.next(); */
            ViewObjectImpl itemVo = this.getSlsRmaItem3();
            /*  itemVo.getFilteredRows("ShipmntId", shipRow.getAttribute("ShipmntId"));
                itemVo.getFilteredRows("ShipmntDt", shipRow.getAttribute("ShipmntDt")); */
            itemVo.executeQuery();
            ViewObjectImpl lotVo = this.getSlsRmaItmLotVoForLotItmValidationVo();
            lotVo.executeQuery();
            RowSetIterator itmItr = itemVo.createRowSetIterator(null);
            System.out.println("itemVo total rows:-" + itmItr.getRowCount());
            while (itmItr.hasNext()) {
                lotVo = this.getSlsRmaItmLotVoForLotItmValidationVo();
                int loti = lotVo.getRangeSize();
                lotVo.setRangeSize(-1);
                Row itmRow = itmItr.next();
                RowQualifier rq = new RowQualifier(lotVo);
                rq.setWhereClause("OrgId ='" + getparamOrgId() + "'and HoOrgId='" + getparamHoOrgId() +
                                  "'and SlocId='" + getparamSlocId() + "'and CldId='" + getparamCldId() +
                                  "'and ItmId='" + itmRow.getAttribute("ItmId") + "'and ShipmntDt='" +
                                  itmRow.getAttribute("ShipmntDt") + "'and ShipmntId='" +
                                  itmRow.getAttribute("ShipmntId") + "'and WhId='" + itmRow.getAttribute("WhId") +
                                  "'and ItmUom='" + itmRow.getAttribute("ItmUom") + "'");
                System.out.println(rq.getExprStr());
                Row[] filterLotVO = lotVo.getFilteredRows(rq);
                lotVo.setRangeSize(loti);
                System.out.println("after filter no of rows-->" + filterLotVO.length);
                if (filterLotVO.length == 0) {
                    b = false;
                    break;
                } else if (binChk.equalsIgnoreCase("Y")) {
                    ViewObjectImpl binVo = this.getSlsRmaItmBin3();
                    int ibin = binVo.getRangeSize();
                    binVo.setRangeSize(-1);
                    RowQualifier rqbin = new RowQualifier(binVo);

                    rqbin.setWhereClause("OrgId ='" + getparamOrgId() + "'and HoOrgId='" + getparamHoOrgId() +
                                         "'and SlocId='" + getparamSlocId() + "'and CldId='" + getparamCldId() +
                                         "'and ItmId='" + filterLotVO[0].getAttribute("ItmId") + "'and ShipmntDt='" +
                                         filterLotVO[0].getAttribute("ShipmntDt") + "'and ShipmntId='" +
                                         filterLotVO[0].getAttribute("ShipmntId") + "'and LotId='" +
                                         filterLotVO[0].getAttribute("LotId") + "'and ItmUom='" +
                                         filterLotVO[0].getAttribute("ItmUom") + "'");
                    System.out.println(rq.getExprStr());
                    Row[] filterBinVO = binVo.getFilteredRows(rqbin);
                    binVo.setRangeSize(ibin);
                    if (filterBinVO.length == 0) {
                        b = false;
                        break;
                    }
                }
            }
            itmItr.closeRowSetIterator();
        }

        return b;
    }

    /**
     * Container's getter for SlsRmaItmLotVoForLotItmValidationVo.
     * @return SlsRmaItmLotVoForLotItmValidationVo
     */
    public ViewObjectImpl getSlsRmaItmLotVoForLotItmValidationVo() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmLotVoForLotItmValidationVo");
    }

    /**
     * Container's getter for RmaToLotVL1.
     * @return RmaToLotVL1
     */
    public ViewLinkImpl getRmaToLotVL1() {
        return (ViewLinkImpl)findViewLink("RmaToLotVL1");
    }

    /**
     * Container's getter for SlsRmaItem3.
     * @return SlsRmaItem3
     */
    public ViewObjectImpl getSlsRmaItem3() {
        return (ViewObjectImpl)findViewObject("SlsRmaItem3");
    }

    /**
     * Container's getter for RmaToItemLink1.
     * @return RmaToItemLink1
     */
    public ViewLinkImpl getRmaToItemLink1() {
        return (ViewLinkImpl)findViewLink("RmaToItemLink1");
    }

    /**
     * Container's getter for SlsRmaItmBin3.
     * @return SlsRmaItmBin3
     */
    public ViewObjectImpl getSlsRmaItmBin3() {
        return (ViewObjectImpl)findViewObject("SlsRmaItmBin3");
    }

    /**
     * Container's getter for RmaToBinLink1.
     * @return RmaToBinLink1
     */
    public ViewLinkImpl getRmaToBinLink1() {
        return (ViewLinkImpl)findViewLink("RmaToBinLink1");
    }

    public boolean checkRmaValidation() {
        boolean pass = true;
        System.out.println("Entering in validation....!!!");
        String binChk = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        ViewObjectImpl itemVo = this.getSlsRmaItem3();
        int j = itemVo.getRangeSize();
        itemVo.setRangeSize(-1);
        itemVo.executeQuery();
        HashSet itemSet = new HashSet();
        RowSetIterator itemItr = itemVo.createRowSetIterator(null);
        System.out.println("Before item while Loop");
        while (itemItr.hasNext()) {
            Row itmRow = itemItr.next();
            System.out.println("Inside  item while Loop");
            StringBuilder i =
                (itmRow.getAttribute("ItmId") == null ? new StringBuilder("") : new StringBuilder(itmRow.getAttribute("ItmId").toString()));
            System.out.println("Before item add while Loop");
            itemSet.add(i);
        }
        System.out.println("After item while Loop");
        itemItr.closeRowSetIterator();

        Iterator itmItr = itemSet.iterator();
        ArrayList<ItmRcpt> itmDtls = new ArrayList<ItmRcpt>();
        while (itmItr.hasNext()) {
            StringBuilder e = (StringBuilder)itmItr.next();
            Row[] filteredRows = itemVo.getFilteredRows("ItmId", e.toString());
            Number rcptQty = new Number(0);
            Number approvQtyItm = new Number(0);
            StringBuilder itmFlag = null;
            for (Row f : filteredRows) {
                System.out.println("Getting filtered rows....");
                Number l = (f.getAttribute("RcptQty") == null ? new Number(0) : (Number)f.getAttribute("RcptQty"));
                System.out.println("L is " + l);
                Number okQty = (f.getAttribute("OkQty") == null ? new Number(0) : (Number)f.getAttribute("OkQty"));
                /*   itmFlag= (f.getAttribute("TransItmSerializedFlg") == null ? new StringBuilder( "N") : (StringBuilder)f.getAttribute("TransItmSerializedFlg"));
                System.out.println("Item Flag is "+itmFlag); */
                rcptQty = rcptQty.add(l);
                approvQtyItm=approvQtyItm.add(okQty);
                System.out.println("Rcpt Qty " + rcptQty);
            }
            System.out.println("After filtered rows....");
            itmDtls.add(new ItmRcpt(e, rcptQty, approvQtyItm));
        }
        itemVo.setRangeSize(j);

        ViewObjectImpl lotVO = this.getSlsRmaItmLotVoForLotItmValidationVo();
        j = lotVO.getRangeSize();
        lotVO.setRangeSize(-1);
        lotVO.executeQuery();

        for (ItmRcpt s : itmDtls) {
            Row[] itmLotRows = lotVO.getFilteredRows("ItmId", s.getItmNm().toString());
            StringBuilder itmId=(StringBuilder)s.getItmNm();
            System.out.println("Item Id Is "+itmId);
            Number totLot = new Number(0);
            System.out.println("Item Name is   ----->" + s.getItmNm().toString());
            System.out.println("Inside ItmDtls----->");
            System.out.println("No of filtered Rows" + itmLotRows.length);
            if (itmLotRows.length > 0) {
                for (Row r : itmLotRows) {
                    Number approv =
                        (r.getAttribute("RcptQtyBs") == null ? new Number(0) : (Number)r.getAttribute("RcptQtyBs"));
                    System.out.println("Approv Qty----->" + approv);
                    Number reject =
                        (r.getAttribute("RejQty") == null ? new Number(0) : (Number)r.getAttribute("RejQty"));
                    System.out.println("reject Qty----->" + reject);
                    Number rwk = (r.getAttribute("RwkQty") == null ? new Number(0) : (Number)r.getAttribute("RwkQty"));
                    System.out.println("rwk Qty----->" + rwk);
                    totLot = totLot.add(approv).add(reject).add(rwk);
                    System.out.println("totLot Qty----->" + totLot);
                   
                    if (s.getItmRcptQty().compareTo(totLot) != 0) {
                        pass = false;
                        System.out.println("The Value of pass is " + pass);
                        //sop
                      break; 
                    }
                   // itmDtls.add(new ItmRcpt(itmId, totLot, approv));
                }
            }else{
                pass=false;
            }
        }
        lotVO.setRangeSize(j);
        if (pass) {
            if (binChk.equalsIgnoreCase("Y")) {
                ViewObjectImpl binVO = this.getSlsRmaItmBin3();
                j = binVO.getRangeSize();
                binVO.setRangeSize(-1);
                binVO.executeQuery();
                for (ItmRcpt s : itmDtls) {
                    Row[] itmBinRows = binVO.getFilteredRows("ItmId", s.getItmNm().toString());
                    System.out.println("Item id in bin ---->"+s.getItmNm());
                    Number totBin = new Number(0);
                    if(itmBinRows.length>0){
                        for (Row r : itmBinRows) {
                            Number approv =
                                (r.getAttribute("RcptQtyBs") == null ? new Number(0) : (Number)r.getAttribute("RcptQtyBs"));
                            System.out.println("rcpt qty---->"+ (Number)r.getAttribute("RcptQtyBs"));
                            System.out.println("s.getAprovQty()------------->"+s.getAprovQty());
                            totBin = totBin.add(approv);
                            if (s.getAprovQty().compareTo(totBin) != 0) {

                                pass = false;
                                System.out.println("The Value of pass is " + pass);

                                //sop
                                break;
                            }
                            System.out.println("The value of pass ----1" + pass);
                        }   
                    }
                    else{
                        pass=false;
                      
                    }
                    
                    System.out.println("The value of pass ----2" + pass);
                }

                System.out.println("The value of pass ----3" + pass);
            }

            System.out.println("The value of pass ----4" + pass);
        }


        return pass;
    }
}
