package slsreptemplateapp.model.module;

import java.math.BigDecimal;


import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import slsreptemplateapp.model.module.common.SlsRepTemplateAppAM;
import slsreptemplateapp.model.views.SearchTemplateVORowImpl;
import slsreptemplateapp.model.views.SlsSearchTmplDetVOImpl;
import slsreptemplateapp.model.views.SlsSearchTmplVORowImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.JboException;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.RowQualifier;

import slsreptemplateapp.model.views.AddDetailVORowImpl;
import slsreptemplateapp.model.views.LOVCustomerVORowImpl;
import slsreptemplateapp.model.views.SlsSearchTmplDetVORowImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 03 19:28:35 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsRepTemplateAppAMImpl extends ApplicationModuleImpl implements SlsRepTemplateAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SlsRepTemplateAppAMImpl() {
    }


    /**
     * Container's getter for SlsSearchTmpl1.
     * @return SlsSearchTmpl1
     */
    public ViewObjectImpl getSlsSearchTmpl1() {
        return (ViewObjectImpl)findViewObject("SlsSearchTmpl1");
    }

    /**
     * Container's getter for SearchTemplate1.
     * @return SearchTemplate1
     */
    public ViewObjectImpl getSearchTemplate1() {
        return (ViewObjectImpl)findViewObject("SearchTemplate1");
    }

    public void searchTemplate() {
        ViewObjectImpl objectImpl = this.getSearchTemplate1();
        if (objectImpl != null && objectImpl.getCurrentRow() != null) {
            SearchTemplateVORowImpl dual = (SearchTemplateVORowImpl)objectImpl.getCurrentRow();
            // System.out.println("Value are : "+ dual.getCldId()+"  "+dual.getSlocId()+"  "+dual.getHoOrgId()+"  "+dual.getOrgId()+"   "+dual.getTmpId());
            ViewObjectImpl impl = this.getSlsSearchTmpl1();
            impl.setNamedWhereClauseParam("Cld_Id_Bind", dual.getCldId());
            impl.setNamedWhereClauseParam("Sloc_Id_Bind", dual.getSlocId());
            impl.setNamedWhereClauseParam("Ho_Org_Id_Bind", dual.getHoOrgId());
            impl.setNamedWhereClauseParam("Org_Id_Bind", dual.getOrgId());
            impl.setNamedWhereClauseParam("Tmp_Id_Bind", dual.getTmpId());
            impl.executeQuery();
        }
    }

    public void resetTemplate() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String sloc_Id = resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        String Org_Id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl impl = this.getSlsSearchTmpl1();
        impl.setNamedWhereClauseParam("Cld_Id_Bind", cld_id);
        impl.setNamedWhereClauseParam("Sloc_Id_Bind", (sloc_Id != null) ? Integer.parseInt(sloc_Id) : null);
        impl.setNamedWhereClauseParam("Ho_Org_Id_Bind", ho_org_id);
        impl.setNamedWhereClauseParam("Org_Id_Bind", Org_Id);
        impl.setNamedWhereClauseParam("Tmp_Id_Bind", null);
        impl.executeQuery();
        this.getSearchTemplate1().executeQuery();
    }

    /**
     * Container's getter for SlsSearchTmplDet1.
     * @return SlsSearchTmplDet1
     */
    public ViewObjectImpl getSlsSearchTmplDet1() {
        return (ViewObjectImpl)findViewObject("SlsSearchTmplDet1");
    }

    /**
     * Container's getter for SearchTmplToSearchDtlVL1.
     * @return SearchTmplToSearchDtlVL1
     */
    public ViewLinkImpl getSearchTmplToSearchDtlVL1() {
        return (ViewLinkImpl)findViewLink("SearchTmplToSearchDtlVL1");
    }

    /**
     * Container's getter for AddDetail1.
     * @return AddDetail1
     */
    public ViewObjectImpl getAddDetail1() {
        return (ViewObjectImpl)findViewObject("AddDetail1");
    }

    public void setBindVarSearchTemp() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Object sloc_Id = resolvElO("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        String Org_Id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Object tmp_Para = resolvElO("#{pageFlowScope.TEMPLATE_PARAM}");
        ViewObjectImpl impl = this.getSlsSearchTmpl1();
        impl.setNamedWhereClauseParam("Cld_Id_Bind", cld_id);
        impl.setNamedWhereClauseParam("Ho_Org_Id_Bind", ho_org_id);
        impl.setNamedWhereClauseParam("Sloc_Id_Bind", (sloc_Id != null) ? Integer.parseInt(sloc_Id.toString()) : null);
        impl.setNamedWhereClauseParam("Org_Id_Bind", Org_Id);
        impl.setNamedWhereClauseParam("Tmp_Id_Bind", (tmp_Para != null)?Integer.parseInt(tmp_Para.toString()):null);
        impl.executeQuery();
        
        if(tmp_Para == null) {
            ViewObjectImpl objectImpl = this.getSlsSearchTmpl1();
            Row row = objectImpl.createRow();
            objectImpl.insertRow(row);
            
            System.out.println("came in the new Row.....");
            if(objectImpl != null && objectImpl.getCurrentRow() != null) {
                System.out.println("Came in the new current row----------");
                SlsSearchTmplVORowImpl curRow = (SlsSearchTmplVORowImpl)objectImpl.getCurrentRow();
                curRow.setCldId(cld_id);
                curRow.setHoOrgId(ho_org_id);
                curRow.setSlocId((sloc_Id != null) ? Integer.parseInt(sloc_Id.toString()) : null);
                curRow.setOrgId(Org_Id);
                saveTemplate();
            }
        }
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message; 
    }
    
    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Container's getter for LOVForCatgryType1.
     * @return LOVForCatgryType1
     */
    public ViewObjectImpl getLOVForCatgryType1() {
        return (ViewObjectImpl)findViewObject("LOVForCatgryType1");
    }

    /**
     * Container's getter for LOVForCurrType1.
     * @return LOVForCurrType1
     */
    public ViewObjectImpl getLOVForCurrType1() {
        return (ViewObjectImpl)findViewObject("LOVForCurrType1");
    }

    /**
     * Container's getter for LOVForCustType1.
     * @return LOVForCustType1
     */
    public ViewObjectImpl getLOVForCustType1() {
        return (ViewObjectImpl)findViewObject("LOVForCustType1");
    }

    /**
     * Container's getter for LOVForItmGrpType1.
     * @return LOVForItmGrpType1
     */
    public ViewObjectImpl getLOVForItmGrpType1() {
        return (ViewObjectImpl)findViewObject("LOVForItmGrpType1");
    }

    /**
     * Container's getter for LOVForItmType1.
     * @return LOVForItmType1
     */
    public ViewObjectImpl getLOVForItmType1() {
        return (ViewObjectImpl)findViewObject("LOVForItmType1");
    }

    /**
     * Container's getter for LOVForOrgType1.
     * @return LOVForOrgType1
     */
    public ViewObjectImpl getLOVForOrgType1() {
        return (ViewObjectImpl)findViewObject("LOVForOrgType1");
    }

    /**
     * Container's getter for LOVForSlsManType1.
     * @return LOVForSlsManType1
     */
    public ViewObjectImpl getLOVForSlsManType1() {
        return (ViewObjectImpl)findViewObject("LOVForSlsManType1");
    }

    /**
     * Container's getter for LOVForStusType1.
     * @return LOVForStusType1
     */
    public ViewObjectImpl getLOVForStusType1() {
        return (ViewObjectImpl)findViewObject("LOVForStusType1");
    }

    public void saveTemplate() {
        ViewObjectImpl impl = this.getSlsSearchTmpl1();
        if (impl.getCurrentRow() != null) {
            SlsSearchTmplVORowImpl row = (SlsSearchTmplVORowImpl)impl.getCurrentRow();
            String cld_id = row.getCldId();
            String ho_org_id = row.getHoOrgId();
            String orgId = row.getOrgId();
            Integer slocId = row.getSlocId();

            if (cld_id != null && ho_org_id != null && orgId != null && slocId != null) {
                BigDecimal TempId =
                    (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.GET_TEMPLATE_ID(?,?,?,?)", new Object[] { cld_id,
                                                                                                                 slocId,
                                                                                                                 ho_org_id,
                                                                                                                 orgId });
                row.setTemplateId(TempId.intValue());
                System.out.println("Generated id Is: " + TempId);
            }
        }
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public void filterTemplateDetail(Integer val) {
        ViewObjectImpl det1 = this.getSlsSearchTmplDet1();
        if (val == 0) {
            det1.setNamedWhereClauseParam("TempParaIdBind", null);
        } else {
            det1.setNamedWhereClauseParam("TempParaIdBind", val);
        }
        det1.executeQuery();
    }

    public boolean validateOrg(String orgId) {
        //  System.out.println("Came in Validator Org ----------");
        if (this.getSlsSearchTmpl1().getCurrentRow() != null) {
            //      System.out.println("Came in Detail -----------------");
            SlsSearchTmplVORowImpl master = (SlsSearchTmplVORowImpl)this.getSlsSearchTmpl1().getCurrentRow();
            Integer tmpId = master.getTemplateId();
            //   System.out.println("Template id is:  "+tmpId);
            ViewObjectImpl det1 = this.getSlsSearchTmplDet1();
            RowQualifier rq = new RowQualifier(det1);
            rq.setWhereClause("TemplateId = " + tmpId + " and TemplateParaId = 472 and ParaId = " + orgId);
            Row[] rows = det1.getFilteredRows(rq);
            if (rows.length > 0) {
                //     System.out.println("Came in length -----------which is greate than zero----");
                return false;
            } else {
                //      System.out.println("came in else ----------------------");
                return true;
            }
        }
        //System.out.println("Not go for any value return with false--------------------");
        return false;
    }

    public boolean validateitmGrp(String grpId) {
        System.out.println("Caame in impl----------");
        ViewObjectImpl addDetail1 = this.getAddDetail1();

        if (addDetail1.getCurrentRow() != null) {
            System.out.println("----------------------2");
            AddDetailVORowImpl dual = (AddDetailVORowImpl)addDetail1.getCurrentRow();
            RowSet cat = dual.getLOVItmGrpVO1();
            Row[] filteredRowsInRange = cat.getFilteredRows("ChildGrp", grpId);
            System.out.println(filteredRowsInRange);
            System.out.println(filteredRowsInRange.length);
            System.out.println(filteredRowsInRange[0].getAttribute("GrpId"));
            String catId = filteredRowsInRange[0].getAttribute("GrpId").toString();

            Integer tmpId =
                Integer.parseInt(this.getSlsSearchTmpl1().getCurrentRow().getAttribute("TemplateId").toString());
            ViewObjectImpl det1 = this.getSlsSearchTmplDet1();
            RowQualifier rq = new RowQualifier(det1);
            rq.setWhereClause("TemplateId = " + tmpId + " and TemplateParaId = 476 and ParaId = '" + catId+"'");
            Row[] filteredRows = det1.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                return false;
            }
        }
        return true;
    }

    public boolean validateStatus(String stusId) {

        if (this.getSlsSearchTmpl1().getCurrentRow() != null) {
            SlsSearchTmplVORowImpl master = (SlsSearchTmplVORowImpl)this.getSlsSearchTmpl1().getCurrentRow();
            Integer tmpId = master.getTemplateId();
            ViewObjectImpl det1 = this.getSlsSearchTmplDet1();
            RowQualifier rq = new RowQualifier(det1);
            rq.setWhereClause("TemplateId = " + tmpId + " and TemplateParaId = 473 and ParaId = " + stusId);
            Row[] rows = det1.getFilteredRows(rq);
            if (rows.length > 0) {
                return false;
            } else {
                return true;
            }
        }
        return false;
    }


    /**
     * Container's getter for LOVCustomer1.
     * @return LOVCustomer1
     */
    public ViewObjectImpl getLOVCustomer1() {
        return (ViewObjectImpl)findViewObject("LOVCustomer1");
    }

    public boolean validateCutomer(String name) {
        System.out.println("Caame in impl----------");
        ViewObjectImpl addDetail1 = this.getAddDetail1();

        if (addDetail1.getCurrentRow() != null) {
            System.out.println("----------------------2");
            /* AddDetailVORowImpl dual = (AddDetailVORowImpl)addDetail1.getCurrentRow();
            RowSet cat = dual.getLOVCustomerVO1();
            Row[] filteredRowsInRange = cat.getFilteredRows("EoNm", name);
            System.out.println(filteredRowsInRange);
            System.out.println(filteredRowsInRange.length);
            System.out.println(filteredRowsInRange[0].getAttribute("EoId"));
            Integer catId = Integer.parseInt(filteredRowsInRange[0].getAttribute("EoId").toString()); */

            Integer tmpId =
                Integer.parseInt(this.getSlsSearchTmpl1().getCurrentRow().getAttribute("TemplateId").toString()); 
            
            ViewObjectImpl custForFil = this.getCustForFilter1();
            String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String sloc_Id = resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
            
            custForFil.setNamedWhereClauseParam("cld_id_Bind", cld_id);
            custForFil.setNamedWhereClauseParam("sloc_id_Bind", (sloc_Id != null)? Integer.parseInt(sloc_Id):null);
            custForFil.setNamedWhereClauseParam("ho_org_id_Bind", ho_org_id);
            custForFil.setNamedWhereClauseParam("Eo_Nm_Bind", name);
            custForFil.executeQuery();
            Row[] allRowsInRange = custForFil.getAllRowsInRange();
            Integer catId =0;
            if(allRowsInRange.length > 0) {
                catId = Integer.parseInt(allRowsInRange[0].getAttribute("EoId").toString());
            }
            ViewObjectImpl det1 = this.getSlsSearchTmplDet1();
            RowQualifier rq = new RowQualifier(det1);
            rq.setWhereClause("TemplateId = " + tmpId + " and TemplateParaId = 471 and ParaId = " + catId);
            Row[] filteredRows = det1.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                return false;
            }
        }
        return true;
    }

    public boolean validateCategory(String name) {

        System.out.println("Caame in impl----------");
        ViewObjectImpl addDetail1 = this.getAddDetail1();

        if (addDetail1.getCurrentRow() != null) {
            System.out.println("----------------------2");
            AddDetailVORowImpl dual = (AddDetailVORowImpl)addDetail1.getCurrentRow();
            RowSet cat = dual.getLOVCategoryVO1();
            Row[] filteredRowsInRange = cat.getFilteredRows("AttNm", name);
            System.out.println(filteredRowsInRange);
            System.out.println(filteredRowsInRange.length);
            System.out.println(filteredRowsInRange[0].getAttribute("AttId"));
            Integer catId = Integer.parseInt(filteredRowsInRange[0].getAttribute("AttId").toString());

            Integer tmpId =
                Integer.parseInt(this.getSlsSearchTmpl1().getCurrentRow().getAttribute("TemplateId").toString());
            ViewObjectImpl det1 = this.getSlsSearchTmplDet1();
            RowQualifier rq = new RowQualifier(det1);
            rq.setWhereClause("TemplateId = " + tmpId + " and TemplateParaId = 477 and ParaId = " + catId);
            Row[] filteredRows = det1.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                return false;
            }
        }
        return true;
    }


    public boolean validateCurrency(String name) {

        System.out.println("Caame in impl----------");
        ViewObjectImpl addDetail1 = this.getAddDetail1();

        if (addDetail1.getCurrentRow() != null) {
            System.out.println("----------------------2");
            AddDetailVORowImpl dual = (AddDetailVORowImpl)addDetail1.getCurrentRow();
            RowSet cat = dual.getLOVCurrVO1();

            Row[] filteredRowsInRange = cat.getFilteredRows("CurrDesc", name);
            System.out.println(filteredRowsInRange);
            System.out.println(filteredRowsInRange.length);
            System.out.println(filteredRowsInRange[0].getAttribute("CurrId"));
            Integer catId = Integer.parseInt(filteredRowsInRange[0].getAttribute("CurrId").toString());

            Integer tmpId =
                Integer.parseInt(this.getSlsSearchTmpl1().getCurrentRow().getAttribute("TemplateId").toString());
            ViewObjectImpl det1 = this.getSlsSearchTmplDet1();
            RowQualifier rq = new RowQualifier(det1);
            rq.setWhereClause("TemplateId = " + tmpId + " and TemplateParaId = 478 and ParaId = " + catId);
            Row[] filteredRows = det1.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                return false;
            }
        }
        return true;
    }

    /**
     * Container's getter for LOVCurr1.
     * @return LOVCurr1
     */
    public ViewObjectImpl getLOVCurr1() {
        return (ViewObjectImpl)findViewObject("LOVCurr1");
    }


    public boolean validateSalesMan(String name) {
        System.out.println("Caame in impl----------");
        ViewObjectImpl addDetail1 = this.getAddDetail1();

        if (addDetail1.getCurrentRow() != null) {
            System.out.println("----------------------2");
            AddDetailVORowImpl dual = (AddDetailVORowImpl)addDetail1.getCurrentRow();
            RowSet cat = dual.getLOVSalesManVO1();

            Row[] filteredRowsInRange = cat.getFilteredRows("EoNm", name);
            System.out.println(filteredRowsInRange);
            System.out.println(filteredRowsInRange.length);
            System.out.println(filteredRowsInRange[0].getAttribute("EoId"));
            Integer catId = Integer.parseInt(filteredRowsInRange[0].getAttribute("EoId").toString());

            Integer tmpId =
                Integer.parseInt(this.getSlsSearchTmpl1().getCurrentRow().getAttribute("TemplateId").toString());
            ViewObjectImpl det1 = this.getSlsSearchTmplDet1();
            RowQualifier rq = new RowQualifier(det1);
            rq.setWhereClause("TemplateId = " + tmpId + " and TemplateParaId = 475 and ParaId = " + catId);
            Row[] filteredRows = det1.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                return false;
            }
        }
        return true;
    }


    public boolean validateItem(String name) {
        System.out.println("Caame in impl----------");
        ViewObjectImpl addDetail1 = this.getAddDetail1();

        if (addDetail1.getCurrentRow() != null) {
            System.out.println("----------------------2");
            AddDetailVORowImpl dual = (AddDetailVORowImpl)addDetail1.getCurrentRow();
            RowSet cat = dual.getLOVItemVO1();
            Row[] filteredRowsInRange = cat.getFilteredRows("ItmDesc", name);
            System.out.println(filteredRowsInRange);
            System.out.println(filteredRowsInRange.length);
            System.out.println(filteredRowsInRange[0].getAttribute("ItmId"));
            String catId = filteredRowsInRange[0].getAttribute("ItmId").toString();

            Integer tmpId =
                Integer.parseInt(this.getSlsSearchTmpl1().getCurrentRow().getAttribute("TemplateId").toString());
            ViewObjectImpl det1 = this.getSlsSearchTmplDet1();
            RowQualifier rq = new RowQualifier(det1);
            rq.setWhereClause("TemplateId = " + tmpId + " and TemplateParaId = 474 and ParaId = '" + catId + "'");
            System.out.println(rq.getExprStr());
            Row[] filteredRows = det1.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                return false;
            }
        }
        return true;
    }

    public boolean validateTemplateName(String name) {
        ViewObjectImpl impl = this.getSlsSearchTmpl1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != impl.getCurrentRow()) {
                if ((next.getAttribute("TemplateDesc").toString()).equalsIgnoreCase(name)) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Container's getter for CustForFilter1.
     * @return CustForFilter1
     */
    public ViewObjectImpl getCustForFilter1() {
        return (ViewObjectImpl)findViewObject("CustForFilter1");
    }
    
    public Integer getDtlRowCount() {
        return this.getSlsSearchTmplDet1().getRowCount();
    }
}
