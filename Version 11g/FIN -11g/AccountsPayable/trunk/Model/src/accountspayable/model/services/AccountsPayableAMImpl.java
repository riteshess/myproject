package accountspayable.model.services;


import accountspayable.model.services.common.AccountsPayableAM;
import accountspayable.model.views.CreditorAgeingSummaryVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.model.binding.DCIteratorBinding;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 19 17:29:06 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AccountsPayableAMImpl extends ApplicationModuleImpl implements AccountsPayableAM {

    private String filterType = "I";
    private Integer coaId = null;
    private Row currentRow = null;


    /**
     * This is the default constructor (do not remove).
     */
    public AccountsPayableAMImpl() {
    }

    /**
     * Container's getter for CreditorAgeingSummary1.
     * @return CreditorAgeingSummary1
     */
    public CreditorAgeingSummaryVOImpl getCreditorAgeingSummary1() {
        return (CreditorAgeingSummaryVOImpl)findViewObject("CreditorAgeingSummary1");
    }

    public Integer curCoaId() {
        Integer coa = (Integer)getCreditorAgeingSummary1().getCurrentRow().getAttribute("CoaId");

        return coa;
    }


    public void getItemsForAgeingSummary(String CldId, String OrgId) {
        
        filterType = "I";
        
        ViewObjectImpl vo = this.getCreditorAgeingSummary1();
        vo.setNamedWhereClauseParam("BindCldId", CldId);
        vo.setNamedWhereClauseParam("BindOrgId", OrgId);
        vo.setNamedWhereClauseParam("BindDtType", filterType);

        vo.executeQuery();

        this.getCreditorAgeingSummary1().setWhereClause(null);
        this.getCreditorAgeingSummary1().executeQuery();

        RequestContext.getCurrentInstance().getPageFlowScope().put("Voucher_Type", filterType);

        ViewObject vo1 = this.getAppGraph1();
        vo1.setNamedWhereClauseParam("BindCldId", CldId);
        vo1.setNamedWhereClauseParam("BindOrgId", OrgId);
        vo1.setNamedWhereClauseParam("BindDtType", filterType);
        vo1.executeQuery();

        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        ViewObjectImpl baseCurrency1 = this.getBaseCurrency1();
        baseCurrency1.setNamedWhereClauseParam("BindCldId", CldId);
        baseCurrency1.setNamedWhereClauseParam("BindOrgId", OrgId);
        baseCurrency1.setNamedWhereClauseParam("BindSlocId", sloc_id);
        baseCurrency1.executeQuery();


    }

    /**
     *Get Filtered Rows accordingly
     *
     */

    public void getFilteredRowsOnVCL(String type) {

        this.filterType = type;

        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();

        RequestContext.getCurrentInstance().getPageFlowScope().put("Voucher_Type", type);

        ViewObjectImpl vo = this.getCreditorAgeingSummary1();
        vo.setNamedWhereClauseParam("BindCldId", cld_id);
        vo.setNamedWhereClauseParam("BindOrgId", org_id);
        vo.setNamedWhereClauseParam("BindDtType", filterType);
        vo.executeQuery();

        ViewObject vo1 = this.getAppGraph1();
        vo1.setNamedWhereClauseParam("BindCldId", cld_id);
        vo1.setNamedWhereClauseParam("BindOrgId", org_id);
        vo.setNamedWhereClauseParam("BindDtType", filterType);
        vo1.executeQuery();

        ViewObjectImpl impl = this.getsupplierDetail1();
        impl.setNamedWhereClauseParam("BindOrgId", org_id);
        impl.setNamedWhereClauseParam("BindCldId", cld_id);
        impl.setNamedWhereClauseParam("BindSlocId", sloc_id);
        impl.setNamedWhereClauseParam("BindDtType", filterType);
        impl.executeQuery();

    }

    /**
     *For Supplier Query
     *
     */

    public void SupplierFilter() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();

        ViewObjectImpl detail1 = this.getsupplierDetail1();
        //System.out.println("Filter Type is "+filterType);
        if (this.getCreditorAgeingSummary1().getCurrentRow() != null) {
            coaId = (Integer)this.getCreditorAgeingSummary1().getCurrentRow().getAttribute("CoaId");
            currentRow = this.getCreditorAgeingSummary1().getCurrentRow();
            System.out.println("Current row " + currentRow);
            //parentIter = (DCIteratorBinding)BindingContext.getCurrent().getCurrentBindingsEntry().get("CreditorAgeingSummary1Iterator");
            //parentKey = parentIter.getCurrentRow().getKey();
            //  parentKey = this.getCreditorAgeingSummary1().getCurrentRow().getKey();

            ViewObjectImpl impl = this.getsupplierDetail1();
            impl.setNamedWhereClauseParam("BindOrgId", org_id);
            impl.setNamedWhereClauseParam("BindCldId", cld_id);
            impl.setNamedWhereClauseParam("BindSlocId", sloc_id);
            impl.setNamedWhereClauseParam("BindDtType", filterType);
            impl.executeQuery();

        } else {


            System.out.println("Current row is: " + currentRow + " coa id :" + coaId);
            this.getCreditorAgeingSummary1().executeQuery();
            this.getCreditorAgeingSummary1().setCurrentRow(currentRow);


            detail1.setNamedWhereClauseParam("BindDtType", filterType);
            detail1.executeQuery();

            System.out.println("Coa Id " + coaId);
            System.out.println("Filter type=" + filterType);
            System.out.println("Current row is " + this.getCreditorAgeingSummary1().getCurrentRow());
            this.getCreditorAgeingSummary1().setWhereClause("COA_ID = " + coaId);
            this.getCreditorAgeingSummary1().executeQuery();


            ViewObjectImpl impl = this.getsupplierDetail1();
            impl.setNamedWhereClauseParam("BindOrgId", org_id);
            impl.setNamedWhereClauseParam("BindCldId", cld_id);
            impl.setNamedWhereClauseParam("BindSlocId", sloc_id);
            impl.setNamedWhereClauseParam("BindDtType", filterType);
            impl.executeQuery();

            /* ViewCriteria criteria = detail1.getViewCriteria("supplierDetailVOCriteria");
            detail1.applyViewCriteria(criteria);
            detail1.setNamedWhereClauseParam("cldIdBind", cld_id);
            detail1.setNamedWhereClauseParam("orgIdBind", org_id);
            detail1.setNamedWhereClauseParam("coaIdBind", coaId);
            detail1.executeQuery(); */


            System.out.println("End of query");
        }
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = "0";
        if (valueExp.getValue(elContext) != null) {
            msg = valueExp.getValue(elContext).toString();
        }

        return msg;
    }


    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    public Integer on_load_page() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction(VARCHAR, "APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                           new Object[] { cld_id, sloc_id, org_id, 1, usr_id });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);

        return count;
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    /**
     * Container's getter for supplierDetail1.
     * @return supplierDetail1
     */
    public ViewObjectImpl getsupplierDetail1() {
        return (ViewObjectImpl)findViewObject("supplierDetail1");
    }

    /**
     * Container's getter for CreditorAgeingSummary2SupplierDtlVL1.
     * @return CreditorAgeingSummary2SupplierDtlVL1
     */
    public ViewLinkImpl getCreditorAgeingSummary2SupplierDtlVL1() {
        return (ViewLinkImpl)findViewLink("CreditorAgeingSummary2SupplierDtlVL1");
    }


    /**
     * Container's getter for AppGraph1.
     * @return AppGraph1
     */
    public ViewObjectImpl getAppGraph1() {
        return (ViewObjectImpl)findViewObject("AppGraph1");
    }

    public void setFilterType(String filterType) {
        this.filterType = filterType;
    }

    public String getFilterType() {
        return filterType;
    }

    public void setCoaId(Integer coaId) {
        this.coaId = coaId;
    }

    public Integer getCoaId() {
        return coaId;
    }

    public void setCurrentRow(Row currentRow) {
        this.currentRow = currentRow;
    }

    public Row getCurrentRow() {
        return currentRow;
    }


    /**
     * Container's getter for BaseCurrency1.
     * @return BaseCurrency1
     */
    public ViewObjectImpl getBaseCurrency1() {
        return (ViewObjectImpl)findViewObject("BaseCurrency1");
    }
}
