package naturalaccounts.model.entities;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 01 13:51:13 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FinAccNaEOImpl extends EntityImpl {
    /**
     * Add locking logic here.
     */
    public void lock() {
       // super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if(operation==DML_UPDATE){
             Integer  UserId =Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                setUsrIdMod(UserId);
                setUsrIdModDt((Date)Date.getCurrentDate());
                
         } 
        super.doDML(operation, e);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        AccId {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccId();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccId((Integer)value);
            }
        }
        ,
        AccSlocId {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccSlocId();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccSlocId((Integer)value);
            }
        }
        ,
        AccNm {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccNm();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccNm((String)value);
            }
        }
        ,
        AccAlias {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccAlias();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccAlias((String)value);
            }
        }
        ,
        AccLegCode {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccLegCode();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccLegCode((String)value);
            }
        }
        ,
        AccType {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccType();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccType((Integer)value);
            }
        }
        ,
        PartOfBdgt {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getPartOfBdgt();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setPartOfBdgt((String)value);
            }
        }
        ,
        BdgtCalcLogic {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getBdgtCalcLogic();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setBdgtCalcLogic((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setUsrIdModDt((Date)value);
            }
        }
        ,
        AccMultInst {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccMultInst();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccMultInst((String)value);
            }
        }
        ,
        AccActv {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccActv();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccActv((String)value);
            }
        }
        ,
        AccTypeId {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccTypeId();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccTypeId((Integer)value);
            }
        }
        ,
        AccCldId {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccCldId();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccCldId((String)value);
            }
        }
        ,
        HoOrgId {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        AccNmTrans {
            public Object get(FinAccNaEOImpl obj) {
                return obj.getAccNmTrans();
            }

            public void put(FinAccNaEOImpl obj, Object value) {
                obj.setAccNmTrans((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(FinAccNaEOImpl object);

        public abstract void put(FinAccNaEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ACCID = AttributesEnum.AccId.index();
    public static final int ACCSLOCID = AttributesEnum.AccSlocId.index();
    public static final int ACCNM = AttributesEnum.AccNm.index();
    public static final int ACCALIAS = AttributesEnum.AccAlias.index();
    public static final int ACCLEGCODE = AttributesEnum.AccLegCode.index();
    public static final int ACCTYPE = AttributesEnum.AccType.index();
    public static final int PARTOFBDGT = AttributesEnum.PartOfBdgt.index();
    public static final int BDGTCALCLOGIC = AttributesEnum.BdgtCalcLogic.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int ACCMULTINST = AttributesEnum.AccMultInst.index();
    public static final int ACCACTV = AttributesEnum.AccActv.index();
    public static final int ACCTYPEID = AttributesEnum.AccTypeId.index();
    public static final int ACCCLDID = AttributesEnum.AccCldId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ACCNMTRANS = AttributesEnum.AccNmTrans.index();

    /**
     * This is the default constructor (do not remove).
     */
    public FinAccNaEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("naturalaccounts.model.entities.FinAccNaEO");
    }

    /**
     * Gets the attribute value for AccId, using the alias name AccId.
     * @return the value of AccId
     */
    public Integer getAccId() {
        return (Integer)getAttributeInternal(ACCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccId.
     * @param value value to set the AccId
     */
    public void setAccId(Integer value) {
        setAttributeInternal(ACCID, value);
    }

    /**
     * Gets the attribute value for AccSlocId, using the alias name AccSlocId.
     * @return the value of AccSlocId
     */
    public Integer getAccSlocId() {
        return (Integer)getAttributeInternal(ACCSLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccSlocId.
     * @param value value to set the AccSlocId
     */
    public void setAccSlocId(Integer value) {
        setAttributeInternal(ACCSLOCID, value);
    }

    /**
     * Gets the attribute value for AccNm, using the alias name AccNm.
     * @return the value of AccNm
     */
    public String getAccNm() {
        return (String)getAttributeInternal(ACCNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccNm.
     * @param value value to set the AccNm
     */
    public void setAccNm(String value) {
        setAttributeInternal(ACCNM, value.toUpperCase());
    }

    /**
     * Gets the attribute value for AccAlias, using the alias name AccAlias.
     * @return the value of AccAlias
     */
    public String getAccAlias() {
        return (String)getAttributeInternal(ACCALIAS);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccAlias.
     * @param value value to set the AccAlias
     */
    public void setAccAlias(String value) {
        setAttributeInternal(ACCALIAS, value);
    }

    /**
     * Gets the attribute value for AccLegCode, using the alias name AccLegCode.
     * @return the value of AccLegCode
     */
    public String getAccLegCode() {
        return (String)getAttributeInternal(ACCLEGCODE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccLegCode.
     * @param value value to set the AccLegCode
     */
    public void setAccLegCode(String value) {
        setAttributeInternal(ACCLEGCODE, value);
    }

    /**
     * Gets the attribute value for AccType, using the alias name AccType.
     * @return the value of AccType
     */
    public Integer getAccType() {
        return (Integer)getAttributeInternal(ACCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccType.
     * @param value value to set the AccType
     */
    public void setAccType(Integer value) {
        setAttributeInternal(ACCTYPE, value);
    }


    /**
     * Gets the attribute value for PartOfBdgt, using the alias name PartOfBdgt.
     * @return the value of PartOfBdgt
     */
    public String getPartOfBdgt() {
        return (String)getAttributeInternal(PARTOFBDGT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PartOfBdgt.
     * @param value value to set the PartOfBdgt
     */
    public void setPartOfBdgt(String value) {
        setAttributeInternal(PARTOFBDGT, value);
    }

    /**
     * Gets the attribute value for BdgtCalcLogic, using the alias name BdgtCalcLogic.
     * @return the value of BdgtCalcLogic
     */
    public String getBdgtCalcLogic() {
        return (String)getAttributeInternal(BDGTCALCLOGIC);
    }

    /**
     * Sets <code>value</code> as the attribute value for BdgtCalcLogic.
     * @param value value to set the BdgtCalcLogic
     */
    public void setBdgtCalcLogic(String value) {
        setAttributeInternal(BDGTCALCLOGIC, value);
    }


    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Date getUsrIdCreateDt() {
        return (Date)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Date getUsrIdModDt() {
        return (Date)getAttributeInternal(USRIDMODDT);
    }
    public void setUsrIdModDt(Date value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for AccMultInst, using the alias name AccMultInst.
     * @return the value of AccMultInst
     */
    public String getAccMultInst() {
        return (String)getAttributeInternal(ACCMULTINST);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccMultInst.
     * @param value value to set the AccMultInst
     */
    public void setAccMultInst(String value) {
        setAttributeInternal(ACCMULTINST, value);
    }

    /**
     * Gets the attribute value for AccActv, using the alias name AccActv.
     * @return the value of AccActv
     */
    public String getAccActv() {
        return (String)getAttributeInternal(ACCACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccActv.
     * @param value value to set the AccActv
     */
    public void setAccActv(String value) {
        setAttributeInternal(ACCACTV, value);
    }

    /**
     * Gets the attribute value for AccTypeId, using the alias name AccTypeId.
     * @return the value of AccTypeId
     */
    public Integer getAccTypeId() {
        return (Integer)getAttributeInternal(ACCTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccTypeId.
     * @param value value to set the AccTypeId
     */
    public void setAccTypeId(Integer value) {
        setAttributeInternal(ACCTYPEID, value);
    }

    /**
     * Gets the attribute value for AccCldId, using the alias name AccCldId.
     * @return the value of AccCldId
     */
    public String getAccCldId() {
        return (String)getAttributeInternal(ACCCLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccCldId.
     * @param value value to set the AccCldId
     */
    public void setAccCldId(String value) {
        setAttributeInternal(ACCCLDID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for AccNmTrans, using the alias name AccNmTrans.
     * @return the value of AccNmTrans
     */
    public String getAccNmTrans() {
        return (String)getAttributeInternal(ACCNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for AccNmTrans.
     * @param value value to set the AccNmTrans
     */
    public void setAccNmTrans(String value) {
        setAttributeInternal(ACCNMTRANS, value);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param accId key constituent
     * @param accSlocId key constituent
     * @param accCldId key constituent
     * @param hoOrgId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer accId, Integer accSlocId, String accCldId, String hoOrgId) {
        return new Key(new Object[]{accId, accSlocId, accCldId, hoOrgId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        Integer  UserId =Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String org_id=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer sloc_id=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        setUsrIdCreate(UserId);
        setHoOrgId(org_id);
        setAccCldId(cld_id);
        setAccSlocId(sloc_id);
        
        super.create(attributeList);
        
    }
    
    public String resolvEl(String data){
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message=valueExp.getValue(elContext).toString();
        return Message;
      }
}
