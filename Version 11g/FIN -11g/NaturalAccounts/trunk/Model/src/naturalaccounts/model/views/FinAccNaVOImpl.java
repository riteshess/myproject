package naturalaccounts.model.views;

import java.sql.ResultSet;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import naturalaccounts.model.helper.IndexCharacter;


import naturalaccounts.model.views.common.FinAccNaVO;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jan 07 16:25:27 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FinAccNaVOImpl extends ViewObjectImpl implements FinAccNaVO {
    /**
     * This is the default constructor (do not remove).
     */
    public FinAccNaVOImpl() {
    }


    public List<IndexCharacter> getCharacterIndexList() {

        String[] alphabet =
        { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V",
          "W", "X", "Y", "Z" };

        //list that contains 26 entries
        List<IndexCharacter> list = new ArrayList<IndexCharacter>();

        //a list of all initial characters that are found in the row set last_name
        //attribute
        HashMap map = new HashMap();

        RowSet rs = this.getRowSet();

        this.executeQuery();
        Row row = rs.first();

        //query all rows and memorize the initial characters of all employees last
        //name entries
        if (row != null) {
            String character = ((String)row.getAttribute("AccNm")).toUpperCase().substring(0, 1);
            updateMap(map, row, character);
            while (rs.hasNext()) {
                row = rs.next();
                character = ((String)row.getAttribute("AccNm")).toUpperCase().substring(0, 1);
                updateMap(map, row, character);
            }
        }

        for (int i = 0; i < alphabet.length; ++i) {

            //A poor man's debugging hint :-)
            //System.out.println("Map contains "+alphabet[i].toUpperCase()+" ? "+map.containsKey(alphabet[i].toUpperCase()));

            if (map.containsKey(alphabet[i].toUpperCase())) {
                IndexCharacter ico = new IndexCharacter();
                ico.setCharacter(alphabet[i].toUpperCase());
                ico.setFound(true);
                //get rowIndex from map
                ico.setRowIndex(((Key)map.get((alphabet[i].toUpperCase()))));
                list.add(i, ico);
            } else {
                IndexCharacter ico = new IndexCharacter();
                ico.setCharacter(alphabet[i].toUpperCase());
                ico.setFound(false);
                //get rowIndex from map
                ico.setRowIndex(null);
                list.add(i, ico);
            }

            rs.first();
        }
        return list;
    }

    private void updateMap(HashMap map, Row row, String character) {
        if (!map.containsKey(character)) {
            //remember character and first occurence in rowSet
            map.put(character, row.getKey());
        }
    }

    /**
     * Returns the variable value for AccNameVar.
     * @return variable value for AccNameVar
     */
    public String getAccNameVar() {
        return (String)ensureVariableManager().getVariableValue("AccNameVar");
    }

    /**
     * Sets <code>value</code> for variable AccNameVar.
     * @param value value to bind as AccNameVar
     */
    public void setAccNameVar(String value) {
        ensureVariableManager().setVariableValue("AccNameVar", value);
    }


    /**
     * Returns the variable value for AccSlocIdBind.
     * @return variable value for AccSlocIdBind
     */
    public Integer getAccSlocIdBind() {
        return (Integer)ensureVariableManager().getVariableValue("AccSlocIdBind");
    }

    /**
     * Sets <code>value</code> for variable AccSlocIdBind.
     * @param value value to bind as AccSlocIdBind
     */
    public void setAccSlocIdBind(Integer value) {
        ensureVariableManager().setVariableValue("AccSlocIdBind", value);
        this.executeQuery();
    }

    /**
     * Returns the variable value for HoOrgIdBind.
     * @return variable value for HoOrgIdBind
     */
    public String getHoOrgIdBind() {
        return (String)ensureVariableManager().getVariableValue("HoOrgIdBind");
    }

    /**
     * Sets <code>value</code> for variable HoOrgIdBind.
     * @param value value to bind as HoOrgIdBind
     */
    public void setHoOrgIdBind(String value) {
        ensureVariableManager().setVariableValue("HoOrgIdBind", value);
        this.executeQuery();
    }

    /**
     * Returns the variable value for CldIdBind.
     * @return variable value for CldIdBind
     */
    public String getCldIdBind() {
        return (String)ensureVariableManager().getVariableValue("CldIdBind");
    }

    /**
     * Sets <code>value</code> for variable CldIdBind.
     * @param value value to bind as CldIdBind
     */
    public void setCldIdBind(String value) {
        ensureVariableManager().setVariableValue("CldIdBind", value);
        this.executeQuery();
    }
    public void setBindVar(Integer slocId,String cldId,String orgId){
        setAccSlocIdBind(slocId);
        setCldIdBind(cldId);
        setHoOrgIdBind(orgId);
    }
    int counter=0;
       protected ViewRowImpl createRowFromResultSet(Object object, ResultSet resultSet) {
           counter++;
       ViewRowImpl row = super.createRowFromResultSet(object, resultSet);
     // System.out.println("Row fetched with key: " + row.getKey() + ", for VO: " + this.getName() + " row count: " + counter);

       return row;
       }
}
