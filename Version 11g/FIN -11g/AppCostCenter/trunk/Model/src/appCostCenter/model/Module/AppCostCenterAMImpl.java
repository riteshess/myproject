package appCostCenter.model.Module;

import appCostCenter.model.Module.common.AppCostCenterAM;
import appCostCenter.model.View.AppCcDocVOImpl;
import appCostCenter.model.View.AppCcPrfVOImpl;

import appCostCenter.model.View.AppCcStructVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 13 09:58:47 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppCostCenterAMImpl extends ApplicationModuleImpl implements AppCostCenterAM {
    /**
     * This is the default constructor (do not remove).
     */
    public AppCostCenterAMImpl() {
    }

    /**
     * Container's getter for AppCcPrf.
     * @return AppCcPrf
     */
    public AppCcPrfVOImpl getAppCcPrf() {
        return (AppCcPrfVOImpl)findViewObject("AppCcPrf");
    }

    /**
     * Container's getter for AppCcStruct.
     * @return AppCcStruct
     */
    public ViewObjectImpl getAppCcStruct() {
        return (ViewObjectImpl)findViewObject("AppCcStruct");
    }

    /**
     * Container's getter for AppCcDoc.
     * @return AppCcDoc
     */
    public ViewObjectImpl getAppCcDoc() {
        return (ViewObjectImpl)findViewObject("AppCcDoc");
    }

    /**
     * Container's getter for AppCCPrfTOAppCCStructVL1.
     * @return AppCCPrfTOAppCCStructVL1
     */
    public ViewLinkImpl getAppCCPrfTOAppCCStructVL1() {
        return (ViewLinkImpl)findViewLink("AppCCPrfTOAppCCStructVL1");
    }

    /**
     * Container's getter for AppCcPrfToAppCcDocVL1.
     * @return AppCcPrfToAppCcDocVL1
     */
    public ViewLinkImpl getAppCcPrfToAppCcDocVL1() {
        return (ViewLinkImpl)findViewLink("AppCcPrfToAppCcDocVL1");
    }

    public void setbindVarval(Integer SlocIdBindVar, String CldIdBindVar, String HoOrgIdBindVar, String OrgIdBindVar) {
System.out.println(SlocIdBindVar+"--"+CldIdBindVar+"--"+HoOrgIdBindVar+"--"+OrgIdBindVar);
        AppCcPrfVOImpl prfVo = (AppCcPrfVOImpl)this.getAppCcPrf();
        prfVo.setSlocIdBindVar(SlocIdBindVar);
        prfVo.setCldIdBindVar(CldIdBindVar);
        prfVo.setHoOrgIdBindVar(HoOrgIdBindVar);
        prfVo.setOrgIdBindVar(OrgIdBindVar);
        prfVo.executeQuery();

    }

    /**
     * Container's getter for ParentEntityLOV1.
     * @return ParentEntityLOV1
     */
    public ViewObjectImpl getParentEntityLOV1() {
        return (ViewObjectImpl)findViewObject("ParentEntityLOV1");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
  
    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    
    public Integer on_load_page()
            {  int count = 0;
            String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
            Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
            String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
            Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
            callStoredFunction(VARCHAR,"APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                       new Object[] { cld_id, sloc_id, org_id,46,usr_id});
            String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
            if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
            {            count = 1;
                }
            else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
            {
                count = 1;
                }
            else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
            {
               count = 1; 
                }
            else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
            {
               count = 1; 
                }
             else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
            {
               count = 1; 
                }
            Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
            paramMap.put("PARAM_PG_ADD_MD", add_mode); 
            paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
            paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
            paramMap.put("PARAM_PG_DEL_MD", del_mode); 
            String addMode =  resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString(); 
             String editMode =  resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString(); 
             String viewMode =  resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString(); 
             String deleteMode =  resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();       
      return count;
        }
    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }
    public void searchPrf(){
        ViewObjectImpl srch = this.getSearchCcPrf1();
        AppCcPrfVOImpl appCcPrf = this.getAppCcPrf();
        Row currentRow = srch.getCurrentRow();
        if(currentRow.getAttribute("NoOfComponent")!=null){
            appCcPrf.setNamedWhereClauseParam("CcCompBindVar", currentRow.getAttribute("NoOfComponent"));
        }
        else{
            appCcPrf.setNamedWhereClauseParam("CcCompBindVar", null);
        }
        if(currentRow.getAttribute("ProfileNm")!=null){
            appCcPrf.setNamedWhereClauseParam("PrfNameBindVar", currentRow.getAttribute("ProfileNm").toString());
        }
        else{
            appCcPrf.setNamedWhereClauseParam("PrfNameBindVar", null);
        }
        if(currentRow.getAttribute("StartDate")!=null){
            appCcPrf.setNamedWhereClauseParam("StartDateBindVar", currentRow.getAttribute("StartDate"));
        }
        else{
            appCcPrf.setNamedWhereClauseParam("StartDateBindVar", null);
        }
        
        if(currentRow.getAttribute("EndDate")!=null){
        System.out.println("end date---"+currentRow.getAttribute("EndDate"));
            appCcPrf.setNamedWhereClauseParam("EndDateBindVar", currentRow.getAttribute("EndDate"));
        }
        else{
            appCcPrf.setNamedWhereClauseParam("EndDateBindVar", null);
        }
            
        appCcPrf.executeQuery();
    }
    
    public void resetPrfSrch(){
        AppCcPrfVOImpl appCcPrf = this.getAppCcPrf();
        ViewObjectImpl srch = this.getSearchCcPrf1();
        Row currentRow = srch.getCurrentRow();
        currentRow.setAttribute("NoOfComponent", null);
        currentRow.setAttribute("StartDate", null);
        currentRow.setAttribute("EndDate", null);
        currentRow.setAttribute("ProfileNm", null);
        appCcPrf.setNamedWhereClauseParam("EndDateBindVar", null);
        appCcPrf.setNamedWhereClauseParam("StartDateBindVar", null);
        appCcPrf.setNamedWhereClauseParam("PrfNameBindVar", null);
        appCcPrf.setNamedWhereClauseParam("CcCompBindVar", null);
        appCcPrf.executeQuery();
        srch.executeQuery();
    }

    /**
     * Container's getter for SearchCcPrf1.
     * @return SearchCcPrf1
     */
    public ViewObjectImpl getSearchCcPrf1() {
        return (ViewObjectImpl)findViewObject("SearchCcPrf1");
    }
}
