package taxtype.model.entities;

import java.math.BigDecimal;
import java.math.BigInteger;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;

import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import taxtype.model.module.TaxTypeAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 22 16:26:26 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppTaxEOImpl extends EntityImpl {
    public void setTemp_na_id(Integer temp_na_id) {
        this.temp_na_id = temp_na_id;
    }

    public Integer getTemp_na_id() {
        return temp_na_id;
    }
    private TaxTypeAMImpl getAm() {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data.TaxTypeAMDataControl.dataProvider}", Object.class);
        return (TaxTypeAMImpl)valueExp.getValue(elContext);
    }
    protected Object callStoredFunction2(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            st = getAm().getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }


    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        TaxId {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxId();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxId((Long)value);
            }
        }
        ,
        TaxSlocId {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxSlocId();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxSlocId((Integer)value);
            }
        }
        ,
        TaxNm {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxNm();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxNm((String)value);
            }
        }
        ,
        TaxPer {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxPer();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxPer((Number)value);
            }
        }
        ,
        TaxTypeId {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxTypeId();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxTypeId((Long)value);
            }
        }
        ,
        TaxRecovType {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxRecovType();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxRecovType((String)value);
            }
        }
        ,
        TaxRoundOffFlg {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxRoundOffFlg();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxRoundOffFlg((String)value);
            }
        }
        ,
        TaxRegFlg {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxRegFlg();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxRegFlg((String)value);
            }
        }
        ,
        TaxRegNm {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxRegNm();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxRegNm((String)value);
            }
        }
        ,
        TaxDescOnDocFlg {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxDescOnDocFlg();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxDescOnDocFlg((String)value);
            }
        }
        ,
        TaxDescOnDoc {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxDescOnDoc();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxDescOnDoc((String)value);
            }
        }
        ,
        TaxDefResv {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxDefResv();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxDefResv((String)value);
            }
        }
        ,
        TaxDefActv {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxDefActv();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxDefActv((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(AppTaxEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(AppTaxEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(AppTaxEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(AppTaxEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setUsrIdModDt((Date)value);
            }
        }
        ,
        TaxNaId {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxNaId();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxNaId((Integer)value);
            }
        }
        ,
        HoOrgId {
            public Object get(AppTaxEOImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        TaxRuleInst {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxRuleInst();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxRuleInst((Integer)value);
            }
        }
        ,
        CldId {
            public Object get(AppTaxEOImpl obj) {
                return obj.getCldId();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        TaxRegType {
            public Object get(AppTaxEOImpl obj) {
                return obj.getTaxRegType();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setTaxRegType((String)value);
            }
        }
        ,
        AppTaxType {
            public Object get(AppTaxEOImpl obj) {
                return obj.getAppTaxType();
            }

            public void put(AppTaxEOImpl obj, Object value) {
                obj.setAppTaxType((AppTaxTypeEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppTaxEOImpl object);

        public abstract void put(AppTaxEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TAXID = AttributesEnum.TaxId.index();
    public static final int TAXSLOCID = AttributesEnum.TaxSlocId.index();
    public static final int TAXNM = AttributesEnum.TaxNm.index();
    public static final int TAXPER = AttributesEnum.TaxPer.index();
    public static final int TAXTYPEID = AttributesEnum.TaxTypeId.index();
    public static final int TAXRECOVTYPE = AttributesEnum.TaxRecovType.index();
    public static final int TAXROUNDOFFFLG = AttributesEnum.TaxRoundOffFlg.index();
    public static final int TAXREGFLG = AttributesEnum.TaxRegFlg.index();
    public static final int TAXREGNM = AttributesEnum.TaxRegNm.index();
    public static final int TAXDESCONDOCFLG = AttributesEnum.TaxDescOnDocFlg.index();
    public static final int TAXDESCONDOC = AttributesEnum.TaxDescOnDoc.index();
    public static final int TAXDEFRESV = AttributesEnum.TaxDefResv.index();
    public static final int TAXDEFACTV = AttributesEnum.TaxDefActv.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int TAXNAID = AttributesEnum.TaxNaId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int TAXRULEINST = AttributesEnum.TaxRuleInst.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int TAXREGTYPE = AttributesEnum.TaxRegType.index();
    public static final int APPTAXTYPE = AttributesEnum.AppTaxType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppTaxEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("taxtype.model.entities.AppTaxEO");
    }

    /**
     * Gets the attribute value for TaxId, using the alias name TaxId.
     * @return the value of TaxId
     */
    public Long getTaxId() {
        return (Long)getAttributeInternal(TAXID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxId.
     * @param value value to set the TaxId
     */
    public void setTaxId(Long value) {
        setAttributeInternal(TAXID, value);
    }

    /**
     * Gets the attribute value for TaxSlocId, using the alias name TaxSlocId.
     * @return the value of TaxSlocId
     */
    public Integer getTaxSlocId() {
        return (Integer)getAttributeInternal(TAXSLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxSlocId.
     * @param value value to set the TaxSlocId
     */
    public void setTaxSlocId(Integer value) {
        setAttributeInternal(TAXSLOCID, value);
    }

    /**
     * Gets the attribute value for TaxNm, using the alias name TaxNm.
     * @return the value of TaxNm
     */
    public String getTaxNm() {
        return (String)getAttributeInternal(TAXNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxNm.
     * @param value value to set the TaxNm
     */
    public void setTaxNm(String value) {
        setAttributeInternal(TAXNM, value.toUpperCase());
    }

    /**
     * Gets the attribute value for TaxPer, using the alias name TaxPer.
     * @return the value of TaxPer
     */
    public oracle.jbo.domain.Number getTaxPer() {
        return (oracle.jbo.domain.Number)getAttributeInternal(TAXPER);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxPer.
     * @param value value to set the TaxPer
     */
    public void setTaxPer(oracle.jbo.domain.Number value) {
        setAttributeInternal(TAXPER, value);
    }

    /**
     * Gets the attribute value for TaxTypeId, using the alias name TaxTypeId.
     * @return the value of TaxTypeId
     */
    public Long getTaxTypeId() {
        return (Long)getAttributeInternal(TAXTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxTypeId.
     * @param value value to set the TaxTypeId
     */
    public void setTaxTypeId(Long value) {
        setAttributeInternal(TAXTYPEID, value);
    }

    /**
     * Gets the attribute value for TaxRecovType, using the alias name TaxRecovType.
     * @return the value of TaxRecovType
     */
    public String getTaxRecovType() {
        return (String)getAttributeInternal(TAXRECOVTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxRecovType.
     * @param value value to set the TaxRecovType
     */
    public void setTaxRecovType(String value) {
        setAttributeInternal(TAXRECOVTYPE, value);
    }

    /**
     * Gets the attribute value for TaxRoundOffFlg, using the alias name TaxRoundOffFlg.
     * @return the value of TaxRoundOffFlg
     */
    public String getTaxRoundOffFlg() {
        return (String)getAttributeInternal(TAXROUNDOFFFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxRoundOffFlg.
     * @param value value to set the TaxRoundOffFlg
     */
    public void setTaxRoundOffFlg(String value) {
        setAttributeInternal(TAXROUNDOFFFLG, value);
    }

    /**
     * Gets the attribute value for TaxRegFlg, using the alias name TaxRegFlg.
     * @return the value of TaxRegFlg
     */
    public String getTaxRegFlg() {
        return (String)getAttributeInternal(TAXREGFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxRegFlg.
     * @param value value to set the TaxRegFlg
     */
    public void setTaxRegFlg(String value) {
        setAttributeInternal(TAXREGFLG, value);
    }

    /**
     * Gets the attribute value for TaxRegNm, using the alias name TaxRegNm.
     * @return the value of TaxRegNm
     */
    public String getTaxRegNm() {
        return (String)getAttributeInternal(TAXREGNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxRegNm.
     * @param value value to set the TaxRegNm
     */
    public void setTaxRegNm(String value) {
        setAttributeInternal(TAXREGNM, value);
    }

    /**
     * Gets the attribute value for TaxDescOnDocFlg, using the alias name TaxDescOnDocFlg.
     * @return the value of TaxDescOnDocFlg
     */
    public String getTaxDescOnDocFlg() {
        return (String)getAttributeInternal(TAXDESCONDOCFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxDescOnDocFlg.
     * @param value value to set the TaxDescOnDocFlg
     */
    public void setTaxDescOnDocFlg(String value) {
        setAttributeInternal(TAXDESCONDOCFLG, value);
    }

    /**
     * Gets the attribute value for TaxDescOnDoc, using the alias name TaxDescOnDoc.
     * @return the value of TaxDescOnDoc
     */
    public String getTaxDescOnDoc() {
        return (String)getAttributeInternal(TAXDESCONDOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxDescOnDoc.
     * @param value value to set the TaxDescOnDoc
     */
    public void setTaxDescOnDoc(String value) {
        setAttributeInternal(TAXDESCONDOC, value);
    }

    /**
     * Gets the attribute value for TaxDefResv, using the alias name TaxDefResv.
     * @return the value of TaxDefResv
     */
    public String getTaxDefResv() {
        return (String)getAttributeInternal(TAXDEFRESV);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxDefResv.
     * @param value value to set the TaxDefResv
     */
    public void setTaxDefResv(String value) {
        setAttributeInternal(TAXDEFRESV, value);
    }

    /**
     * Gets the attribute value for TaxDefActv, using the alias name TaxDefActv.
     * @return the value of TaxDefActv
     */
    public String getTaxDefActv() {
        return (String)getAttributeInternal(TAXDEFACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxDefActv.
     * @param value value to set the TaxDefActv
     */
    public void setTaxDefActv(String value) {
        setAttributeInternal(TAXDEFACTV, value);
    }


    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Date getUsrIdCreateDt() {
        return (Date)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Date getUsrIdModDt() {
        return (Date)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Date value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for TaxNaId, using the alias name TaxNaId.
     * @return the value of TaxNaId
     */
    public Integer getTaxNaId() {
        if((Integer)getAttributeInternal(TAXNAID)!= null){
            temp_na_id=(Integer)getAttributeInternal(TAXNAID);
        }
        return (Integer)getAttributeInternal(TAXNAID);
    }
public Integer temp_na_id;
    /**
     * Sets <code>value</code> as the attribute value for TaxNaId.
     * @param value value to set the TaxNaId
     */
    public void setTaxNaId(Integer value) {
        setAttributeInternal(TAXNAID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for TaxRuleInst, using the alias name TaxRuleInst.
     * @return the value of TaxRuleInst
     */
    public Integer getTaxRuleInst() {
        return (Integer)getAttributeInternal(TAXRULEINST);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxRuleInst.
     * @param value value to set the TaxRuleInst
     */
    public void setTaxRuleInst(Integer value) {
        setAttributeInternal(TAXRULEINST, value);
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }


    /**
     * Gets the attribute value for TaxRegType, using the alias name TaxRegType.
     * @return the value of TaxRegType
     */
    public String getTaxRegType() {
        return (String)getAttributeInternal(TAXREGTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxRegType.
     * @param value value to set the TaxRegType
     */
    public void setTaxRegType(String value) {
        setAttributeInternal(TAXREGTYPE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity AppTaxTypeEOImpl.
     */
    public AppTaxTypeEOImpl getAppTaxType() {
        return (AppTaxTypeEOImpl)getAttributeInternal(APPTAXTYPE);
    }

    /**
     * Sets <code>value</code> as the associated entity AppTaxTypeEOImpl.
     */
    public void setAppTaxType(AppTaxTypeEOImpl value) {
        setAttributeInternal(APPTAXTYPE, value);
    }


    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */


    /**
     * @param taxId key constituent
     * @param taxSlocId key constituent
     * @param hoOrgId key constituent
     * @param cldId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Long taxId, Integer taxSlocId, String hoOrgId, String cldId) {
        return new Key(new Object[]{taxId, taxSlocId, hoOrgId, cldId});
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    public void callStoredProcedure(String stmt, Object[] bindVars) {
         PreparedStatement st = null;
         try {
             st =
     getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
             if (bindVars != null) {
                 for (int z = 0; z < bindVars.length; z++) {
                     st.setObject(z + 1, bindVars[z]);
                 }
             }
             st.executeUpdate();
         } catch (SQLException e) {
             throw new JboException(e);
         } finally {

             if (st != null) {
                 try {
                     st.close();
                 } catch (SQLException e) {
                     System.out.println("error = "+e);
                     e.printStackTrace();
                 }
             }
         }
     }
    
    protected void doDML(int operation, TransactionEvent e) {
        if(operation==DML_UPDATE){
           System.out.println("getTaxNaId = "+getTaxNaId()+"--------------------------------------->>>>>>>>>>>>>>>>>>");
            //callStoredProcedure("APP.UPD_FIN_NA_FROM_TAX(?,?,?)",new Object[] {getTaxSlocId(),getTaxNm(),getTaxId()});
            System.out.println("getTaxNaId before cndtn = "+getTaxNaId()+"--------------------------------------->>>>>>>>>>>>>>>>>>");

           if(getTaxNaId()== null){
               setTaxNaId(temp_na_id);
           }
                    System.out.println("getTaxNaId after cndtn = "+getTaxNaId()+"--------------------------------------->>>>>>>>>>>>>>>>>>");
                   
                  String res =
                (String)callStoredFunction2(Types.VARCHAR,"APP.FN_UPD_FIN_NA_FROM_TAX(?,?,?,?,?)",
                                        new Object[] { getCldId(), getHoOrgId(), getTaxSlocId(),getTaxId(), getTaxNm()
                                                        });
System.out.println("getCldId = "+getCldId()+"getHoOrgId() = "+getHoOrgId() +" getTaxSlocId() = "+getTaxSlocId() +" getTaxId() = "+getTaxId() +" getTaxNm() = "+getTaxNm()+" and result = "+res);
                    Integer UserId = Integer.parseInt(resolvElDC("#{pageFlowScope.GLBL_APP_USR}"));
                    setUsrIdMod(UserId);
                    setUsrIdModDt((Date)Date.getCurrentDate());
                
            
        }

        super.doDML(operation, e);
    }




    protected void create(AttributeList attributeList) {
        Integer UserId=Integer.parseInt(resolvElDC("#{pageFlowScope.GLBL_APP_USR}"));
        Integer InstId=Integer.parseInt(resolvElDC("#{pageFlowScope.GLBL_APP_INST_ID}"));
        setTaxRuleInst(InstId);
        setUsrIdCreate(UserId);
        this.setTaxRegFlg("Y");
        this.setTaxRegType("T");
        super.create(attributeList);
        
                
    }
    
    public String resolvElDC(String data) {
         FacesContext fc = FacesContext.getCurrentInstance();
         Application app = fc.getApplication();
         ExpressionFactory elFactory = app.getExpressionFactory();
         ELContext elContext = fc.getELContext();
         ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
         String Message = valueExp.getValue(elContext).toString();
         return Message;
     }
}
