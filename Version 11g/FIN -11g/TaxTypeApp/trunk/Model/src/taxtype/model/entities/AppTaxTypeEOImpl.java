package taxtype.model.entities;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 22 15:24:17 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppTaxTypeEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        TaxTypeId {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getTaxTypeId();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setTaxTypeId((Integer)value);
            }
        }
        ,
        TaxTypeSlocId {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getTaxTypeSlocId();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setTaxTypeSlocId((Integer)value);
            }
        }
        ,
        TaxTypeNm {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getTaxTypeNm();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setTaxTypeNm((String)value);
            }
        }
        ,
        TaxTypeCalcRule {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getTaxTypeCalcRule();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setTaxTypeCalcRule((String)value);
            }
        }
        ,
        TaxTypeResv {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getTaxTypeResv();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TaxTypeActv {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getTaxTypeActv();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setTaxTypeActv((String)value);
            }
        }
        ,
        TaxTypeDef {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getTaxTypeDef();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setTaxTypeDef((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setUsrIdModDt((Date)value);
            }
        }
        ,
        TaxTypeTds {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getTaxTypeTds();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setTaxTypeTds((String)value);
            }
        }
        ,
        HoOrgId {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        CldId {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getCldId();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        AppTax {
            public Object get(AppTaxTypeEOImpl obj) {
                return obj.getAppTax();
            }

            public void put(AppTaxTypeEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppTaxTypeEOImpl object);

        public abstract void put(AppTaxTypeEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int TAXTYPEID = AttributesEnum.TaxTypeId.index();
    public static final int TAXTYPESLOCID = AttributesEnum.TaxTypeSlocId.index();
    public static final int TAXTYPENM = AttributesEnum.TaxTypeNm.index();
    public static final int TAXTYPECALCRULE = AttributesEnum.TaxTypeCalcRule.index();
    public static final int TAXTYPERESV = AttributesEnum.TaxTypeResv.index();
    public static final int TAXTYPEACTV = AttributesEnum.TaxTypeActv.index();
    public static final int TAXTYPEDEF = AttributesEnum.TaxTypeDef.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int TAXTYPETDS = AttributesEnum.TaxTypeTds.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int APPTAX = AttributesEnum.AppTax.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppTaxTypeEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("taxtype.model.entities.AppTaxTypeEO");
    }

    /**
     * Gets the attribute value for TaxTypeId, using the alias name TaxTypeId.
     * @return the value of TaxTypeId
     */
    public Integer getTaxTypeId() {
        return (Integer)getAttributeInternal(TAXTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxTypeId.
     * @param value value to set the TaxTypeId
     */
    public void setTaxTypeId(Integer value) {
        setAttributeInternal(TAXTYPEID, value);
    }

    /**
     * Gets the attribute value for TaxTypeSlocId, using the alias name TaxTypeSlocId.
     * @return the value of TaxTypeSlocId
     */
    public Integer getTaxTypeSlocId() {
        return (Integer)getAttributeInternal(TAXTYPESLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxTypeSlocId.
     * @param value value to set the TaxTypeSlocId
     */
    public void setTaxTypeSlocId(Integer value) {
        setAttributeInternal(TAXTYPESLOCID, value);
    }

    /**
     * Gets the attribute value for TaxTypeNm, using the alias name TaxTypeNm.
     * @return the value of TaxTypeNm
     */
    public String getTaxTypeNm() {
        return (String)getAttributeInternal(TAXTYPENM);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxTypeNm.
     * @param value value to set the TaxTypeNm
     */
    public void setTaxTypeNm(String value) {
        setAttributeInternal(TAXTYPENM, value.toUpperCase());
    }

    /**
     * Gets the attribute value for TaxTypeCalcRule, using the alias name TaxTypeCalcRule.
     * @return the value of TaxTypeCalcRule
     */
    public String getTaxTypeCalcRule() {
        return (String)getAttributeInternal(TAXTYPECALCRULE);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxTypeCalcRule.
     * @param value value to set the TaxTypeCalcRule
     */
    public void setTaxTypeCalcRule(String value) {
        setAttributeInternal(TAXTYPECALCRULE, value);
    }

    /**
     * Gets the attribute value for TaxTypeResv, using the alias name TaxTypeResv.
     * @return the value of TaxTypeResv
     */
    public String getTaxTypeResv() {
        return (String)getAttributeInternal(TAXTYPERESV);
    }


    /**
     * Gets the attribute value for TaxTypeActv, using the alias name TaxTypeActv.
     * @return the value of TaxTypeActv
     */
    public String getTaxTypeActv() {
        return (String)getAttributeInternal(TAXTYPEACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxTypeActv.
     * @param value value to set the TaxTypeActv
     */
    public void setTaxTypeActv(String value) {
        setAttributeInternal(TAXTYPEACTV, value);
    }

    /**
     * Gets the attribute value for TaxTypeDef, using the alias name TaxTypeDef.
     * @return the value of TaxTypeDef
     */
    public String getTaxTypeDef() {
        return (String)getAttributeInternal(TAXTYPEDEF);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxTypeDef.
     * @param value value to set the TaxTypeDef
     */
    public void setTaxTypeDef(String value) {
        setAttributeInternal(TAXTYPEDEF, value);
    }


    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Date getUsrIdCreateDt() {
        return (Date)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Date getUsrIdModDt() {
        return (Date)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Date value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for TaxTypeTds, using the alias name TaxTypeTds.
     * @return the value of TaxTypeTds
     */
    public String getTaxTypeTds() {
        return (String)getAttributeInternal(TAXTYPETDS);
    }

    /**
     * Sets <code>value</code> as the attribute value for TaxTypeTds.
     * @param value value to set the TaxTypeTds
     */
    public void setTaxTypeTds(String value) {
        setAttributeInternal(TAXTYPETDS, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAppTax() {
        return (RowIterator)getAttributeInternal(APPTAX);
    }


    /**
     * @param taxTypeId key constituent
     * @param taxTypeSlocId key constituent
     * @param hoOrgId key constituent
     * @param cldId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer taxTypeId, Integer taxTypeSlocId, String hoOrgId, String cldId) {
        return new Key(new Object[]{taxTypeId, taxTypeSlocId, hoOrgId, cldId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        String CloudId = resolvElDC("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String OrgId = resolvElDC("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer SlocId=Integer.parseInt(resolvElDC("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer UserId=Integer.parseInt(resolvElDC("#{pageFlowScope.GLBL_APP_USR}"));
        
        
        
        setTaxTypeSlocId(SlocId);
        setUsrIdCreate(UserId);
        setHoOrgId(OrgId);
        setCldId(CloudId);
        super.create(attributeList);
    }
    public String resolvElDC(String data) {
         FacesContext fc = FacesContext.getCurrentInstance();
         Application app = fc.getApplication();
         ExpressionFactory elFactory = app.getExpressionFactory();
         ELContext elContext = fc.getELContext();
         ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
         String Message = valueExp.getValue(elContext).toString();
         return Message;
     }

     public Object resolvEl(String data) {
         FacesContext fc = FacesContext.getCurrentInstance();
         Application app = fc.getApplication();
         ExpressionFactory elFactory = app.getExpressionFactory();
         ELContext elContext = fc.getELContext();
         ValueExpression valueExp =
             elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
         return valueExp.getValue(elContext);
     }
    /**
     * Add locking logic here.
     */
    public void lock() {
        super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {

        if (operation == DML_UPDATE) {
            Integer UserId=Integer.parseInt(resolvElDC("#{pageFlowScope.GLBL_APP_USR}"));
            
            setUsrIdMod(UserId);
            setUsrIdModDt((Date)Date.getCurrentDate());
        }
        super.doDML(operation, e);
    }
}
