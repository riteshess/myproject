package chartofaccount.model.view;



import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 05 12:23:39 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CoaVOImpl extends ViewObjectImpl{
    /**
     * This is the default constructor (do not remove).
     */
    public CoaVOImpl() {
    }


    private static int NUMERIC = Types.NUMERIC;

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;

        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Returns the variable value for CoaNmBindVar.
     * @return variable value for CoaNmBindVar
     */
    public String getCoaNmBindVar() {
        return (String)ensureVariableManager().getVariableValue("CoaNmBindVar");
    }

    /**
     * Sets <code>value</code> for variable CoaNmBindVar.
     * @param value value to bind as CoaNmBindVar
     */
    public void setCoaNmBindVar(String value) {
        ensureVariableManager().setVariableValue("CoaNmBindVar", value);
    }

    /**
     * Returns the variable value for CoaName.
     * @return variable value for CoaName
     */
    public String getCoaName() {
        return (String)ensureVariableManager().getVariableValue("CoaName");
    }

    /**
     * Sets <code>value</code> for variable CoaName.
     * @param value value to bind as CoaName
     */
    public void setCoaName(String value) {
        ensureVariableManager().setVariableValue("CoaName", value);
    }

    /**
     * Returns the variable value for CogId.
     * @return variable value for CogId
     */
    public Integer getCogId() {
        return (Integer)ensureVariableManager().getVariableValue("CogId");
    }

    /**
     * Sets <code>value</code> for variable CogId.
     * @param value value to bind as CogId
     */
    public void setCogId(Integer value) {
        ensureVariableManager().setVariableValue("CogId", value);
    }

    /**
     * Returns the variable value for AccId.
     * @return variable value for AccId
     */
    public Integer getAccId() {
        return (Integer)ensureVariableManager().getVariableValue("AccId");
    }

    /**
     * Sets <code>value</code> for variable AccId.
     * @param value value to bind as AccId
     */
    public void setAccId(Integer value) {
        ensureVariableManager().setVariableValue("AccId", value);
    }

    /**
     * Returns the variable value for Alias.
     * @return variable value for Alias
     */
    public String getAlias() {
        return (String)ensureVariableManager().getVariableValue("Alias");
    }

    /**
     * Sets <code>value</code> for variable Alias.
     * @param value value to bind as Alias
     */
    public void setAlias(String value) {
        ensureVariableManager().setVariableValue("Alias", value);
    }

    /**
     * Returns the variable value for BindCoaId.
     * @return variable value for BindCoaId
     */
    public Integer getBindCoaId() {
        return (Integer)ensureVariableManager().getVariableValue("BindCoaId");
    }

    /**
     * Sets <code>value</code> for variable BindCoaId.
     * @param value value to bind as BindCoaId
     */
    public void setBindCoaId(Integer value) {
        ensureVariableManager().setVariableValue("BindCoaId", value);
    }

    /**
     * Returns the variable value for SlocIdBind.
     * @return variable value for SlocIdBind
     */
    public Integer getSlocIdBind() {
        return (Integer)ensureVariableManager().getVariableValue("SlocIdBind");
    }

    /**
     * Sets <code>value</code> for variable SlocIdBind.
     * @param value value to bind as SlocIdBind
     */
    public void setSlocIdBind(Integer value) {
        ensureVariableManager().setVariableValue("SlocIdBind", value);
    }

    /**
     * Returns the variable value for CoaCldIdBind.
     * @return variable value for CoaCldIdBind
     */
    public String getCoaCldIdBind() {
        return (String)ensureVariableManager().getVariableValue("CoaCldIdBind");
    }

    /**
     * Sets <code>value</code> for variable CoaCldIdBind.
     * @param value value to bind as CoaCldIdBind
     */
    public void setCoaCldIdBind(String value) {
        ensureVariableManager().setVariableValue("CoaCldIdBind", value);
    }

    /**
     * Returns the variable value for CoaHoOrgIdBind.
     * @return variable value for CoaHoOrgIdBind
     */
    public String getCoaHoOrgIdBind() {
        return (String)ensureVariableManager().getVariableValue("CoaHoOrgIdBind");
    }

    /**
     * Sets <code>value</code> for variable CoaHoOrgIdBind.
     * @param value value to bind as CoaHoOrgIdBind
     */
    public void setCoaHoOrgIdBind(String value) {
        ensureVariableManager().setVariableValue("CoaHoOrgIdBind", value);
    }

    public void exeFromEntity(Integer SlocId, String CldId, String HoOrgId, Integer EoId, Integer EoType) {

        BigDecimal Value =
            (BigDecimal)callStoredFunction(NUMERIC, "app.pkg_app$ee_eo.FN_GET_NA_ID(?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                EoType,
                                                                                                                EoId,
                                                                                                                CldId,
                                                                                                                HoOrgId });
        Integer val = Value.intValue();
        
       /*  System.out.println(val);
        System.out.println(EoType);
        System.out.println(CldId);
        System.out.println(HoOrgId);
        System.out.println(SlocId); */
        
        
        setCoaCldIdBind(CldId);
        setCoaHoOrgIdBind(HoOrgId);
        setSlocIdBind(SlocId);
        setAccId(val);
        executeQuery();

    }
    int counter=0;
       protected ViewRowImpl createRowFromResultSet(Object object, ResultSet resultSet) {
           counter++;
       ViewRowImpl row = super.createRowFromResultSet(object, resultSet);
      System.out.println("Row fetched with key: " + row.getKey() + ", for VO: " + this.getName() + " row count: " + counter);

       return row;
       }
}
