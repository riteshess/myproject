package chartofaccount.model.view;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 16 14:12:11 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SearchVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Slocid {
            public Object get(SearchVORowImpl obj) {
                return obj.getSlocid();
            }

            public void put(SearchVORowImpl obj, Object value) {
                obj.setSlocid((Integer)value);
            }
        }
        ,
        Cldid {
            public Object get(SearchVORowImpl obj) {
                return obj.getCldid();
            }

            public void put(SearchVORowImpl obj, Object value) {
                obj.setCldid((String)value);
            }
        }
        ,
        Hoorgid {
            public Object get(SearchVORowImpl obj) {
                return obj.getHoorgid();
            }

            public void put(SearchVORowImpl obj, Object value) {
                obj.setHoorgid((String)value);
            }
        }
        ,
        Orgid {
            public Object get(SearchVORowImpl obj) {
                return obj.getOrgid();
            }

            public void put(SearchVORowImpl obj, Object value) {
                obj.setOrgid((String)value);
            }
        }
        ,
        Coaname {
            public Object get(SearchVORowImpl obj) {
                return obj.getCoaname();
            }

            public void put(SearchVORowImpl obj, Object value) {
                obj.setCoaname((String)value);
            }
        }
        ,
        LovCoaNewVO1 {
            public Object get(SearchVORowImpl obj) {
                return obj.getLovCoaNewVO1();
            }

            public void put(SearchVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SearchVORowImpl object);

        public abstract void put(SearchVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.Slocid.index();
    public static final int CLDID = AttributesEnum.Cldid.index();
    public static final int HOORGID = AttributesEnum.Hoorgid.index();
    public static final int ORGID = AttributesEnum.Orgid.index();
    public static final int COANAME = AttributesEnum.Coaname.index();
    public static final int LOVCOANEWVO1 = AttributesEnum.LovCoaNewVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SearchVORowImpl() {
    }
    public String resolvEl(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
          String msg = valueExp.getValue(elContext).toString();
          return msg;
      }
    /**
     * Gets the attribute value for the calculated attribute Slocid.
     * @return the Slocid
     */
    public Integer getSlocid() {
        if(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}")!=null)
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}".toString()));
        else
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Slocid.
     * @param value value to set the  Slocid
     */
    public void setSlocid(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calcurlated attribute Cldid.
     * @return the Cldid
     */
    public String getCldid() {
        if(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}")!=null)
            return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}".toString());
        else
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Cldid.
     * @param value value to set the  Cldid
     */
    public void setCldid(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Hoorgid.
     * @return the Hoorgid
     */
    public String getHoorgid() {
        if(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}")!=null)
            return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}".toString());
        else
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Hoorgid.
     * @param value value to set the  Hoorgid
     */
    public void setHoorgid(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Orgid.
     * @return the Orgid
     */
    public String getOrgid() {
        if(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}")!=null)
            return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}".toString());
        else
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Orgid.
     * @param value value to set the  Orgid
     */
    public void setOrgid(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Coaname.
     * @return the Coaname
     */
    public String getCoaname() {
        return (String) getAttributeInternal(COANAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Coaname.
     * @param value value to set the  Coaname
     */
    public void setCoaname(String value) {
        setAttributeInternal(COANAME, value);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LovCoaNewVO1.
     */
    public RowSet getLovCoaNewVO1() {
        return (RowSet)getAttributeInternal(LOVCOANEWVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
