package GlReportApplication.model.module;

import GlReportApplication.model.module.common.GlReportAM;
import GlReportApplication.model.module.view.AppDocTxnVOImpl;
import GlReportApplication.model.view.CoaLOVImpl;

import GlReportApplication.model.view.CoaLOVRowImpl;

import GlReportApplication.model.view.FinCoaDtlVwVOImpl;

import java.sql.CallableStatement;


import java.sql.SQLException;

import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 23 14:00:00 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GlReportAMImpl extends ApplicationModuleImpl implements GlReportAM {
    
    private static int VARCHAR = Types.VARCHAR;
       String add_mode = null;
       String edit_mode = null;
       String view_mode = null;
       String del_mode = null;
       
    /**
     * This is the default constructor (do not remove).
     */
    public GlReportAMImpl() {
    }

    /**
     * Container's getter for CoaLOV.
     * @return CoaLOV
     */
    public ViewObjectImpl getCoaLOV() {
        return (ViewObjectImpl)findViewObject("CoaLOV");
    }

    /**
     * Container's getter for CurrencyLOV.
     * @return CurrencyLOV
     */
    public ViewObjectImpl getCurrencyLOV() {
        return (ViewObjectImpl)findViewObject("CurrencyLOV");
    }

    /**
     * Container's getter for FileSelectionLOV.
     * @return FileSelectionLOV
     */
    public ViewObjectImpl getFileSelectionLOV() {
        return (ViewObjectImpl)findViewObject("FileSelectionLOV");
    }

    /**
     * Container's getter for OrganisationLOV.
     * @return OrganisationLOV
     */
    public ViewObjectImpl getOrganisationLOV() {
        return (ViewObjectImpl)findViewObject("OrganisationLOV");
    }

    /**
     * Container's getter for CogLOV.
     * @return CogLOV
     */
    public ViewObjectImpl getCogLOV() {
        return (ViewObjectImpl)findViewObject("CogLOV");
    }
    
    
    public String resolvEl(String data) {
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           String msg = valueExp.getValue(elContext).toString();
           return msg;
       }
    
    
   
       protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
           CallableStatement st = null;
           try {
               
               st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               
               st.registerOutParameter(1, sqlReturnType);
              // System.out.println("cacz");
               
                   
                   try {
               if (bindVars != null) {
                   for (int z = 0; z < bindVars.length; z++) {
                       st.setObject(z + 2, bindVars[z]);
                       
                   }
                   
               }
               
               st.registerOutParameter(7, VARCHAR);
               st.registerOutParameter(8, VARCHAR);
               st.registerOutParameter(9, VARCHAR);
               st.registerOutParameter(10, VARCHAR);
               
               st.executeUpdate();
              
               
               
                   setAdd_mode(st.getObject(7).toString());
                   setEdit_mode((st.getObject(8).toString()));
                   setView_mode(st.getObject(9).toString());
                   setDel_mode(st.getObject(10).toString());
                   
               } catch (NullPointerException e) {
                  
                   e.printStackTrace();
               }
               return st.getObject(1);

           } catch (SQLException e) {
               throw new JboException(e);
           } finally {
               if (st != null) {
                   try {
                       st.close();
                   } catch (SQLException e) {
                       

                   }
               }
           }
       }
   
   
   
    public Integer on_load_page()
               {  int count = 0;
               String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
              
               Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
               
               String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
              
               Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
              
           
               callStoredFunction(VARCHAR,"app.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",new Object[] { cld_id, sloc_id, org_id, 56,usr_id});
            // System.out.println("<<<---------_____......function called successfully....._____------>>>");
               String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
               if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
               {            count = 1;
                   }
               else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
               {
                   count = 1;
                   }
               else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
               else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
                else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
               {
                  count = 1; 
                   }
               Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
               paramMap.put("PARAM_PG_ADD_MD", add_mode); 
               paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
               paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
               paramMap.put("PARAM_PG_DEL_MD", del_mode); 
               String addMode =  resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString(); 
                String editMode =  resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString(); 
                String viewMode =  resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString(); 
                String deleteMode =  resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();       
         return count;
           }
    

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    /**
     * Container's getter for PostFlagLOV1.
     * @return PostFlagLOV1
     */
    public ViewObjectImpl getPostFlagLOV1() {
        return (ViewObjectImpl)findViewObject("PostFlagLOV1");
    }


    /**
     * Container's getter for AppDocTxn1.
     * @return AppDocTxn1
     */
    public AppDocTxnVOImpl getAppDocTxn1() {
        return (AppDocTxnVOImpl)findViewObject("AppDocTxn1");
    }

    /**
     * Container's getter for FinCoaDtlVw1.
     * @return FinCoaDtlVw1
     */
    public ViewObjectImpl getFinCoaDtlVw1() {
        return (ViewObjectImpl)findViewObject("FinCoaDtlVw1");
    }

    /**
     * Container's getter for IncomeOrExpense1.
     * @return IncomeOrExpense1
     */
    public ViewObjectImpl getIncomeOrExpense1() {
        return (ViewObjectImpl)findViewObject("IncomeOrExpense1");
    }
    protected Object callStoredFunction2(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    System.out.println(e.getMessage());
                }
            }
        }
    }


    public Date currentFyDate(String p_org_id) {
        //System.out.println("p_org_id = "+p_org_id);
        Date date = (Date)Date.getCurrentDate();
       // System.out.println("Date = "+date);
        Date dt=null;

        try {
//            dt =
//               new Date(callStoredFunction2(Types.DATE, "APP.PKG_APP.GET_ORG_FY_START_DATE(?,?,?)", new Object[]{date,p_org_id,"FY"}));
           dt =
                   new Date(callStoredFunction2(Types.DATE, "APP.fn_get_fy_start_date(?,?,?,?)", new Object[]{resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString()
                                                                                                               ,p_org_id
                                                                                                             ,date
                                                                                                             ,"FY"}));
        } catch (SQLException e) {
            
            e.printStackTrace();
        }
       // System.out.println("date after function = "+dt);
        return dt;
    }
    
    public void setAttribute(Object o,int i){
        try {
            if (i == 1) {
                
                ((CoaLOVRowImpl)(this.getCoaLOV().getCurrentRow())).setVoucherType((Integer)i);
            }

            if (i == 2) {
                
                System.out.println("getting lov   " + this.getCoaLOV());
                System.out.println("Getting Current Row       "+ this.getCoaLOV().getCurrentRow());

                ((CoaLOVRowImpl)(this.getCoaLOV().getCurrentRow())).setStartDate((Date)o);

            }

            if (i == 3) {

                ((CoaLOVRowImpl)(this.getCoaLOV().getCurrentRow())).setEndDate((Date)o);

            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }


    /**
     * Container's getter for EntityGroup1.
     * @return EntityGroup1
     */
    public ViewObjectImpl getEntityGroup1() {
        return (ViewObjectImpl)findViewObject("EntityGroup1");
    }
}
