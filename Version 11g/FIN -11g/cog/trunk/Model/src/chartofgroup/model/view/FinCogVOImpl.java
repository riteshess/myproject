package chartofgroup.model.view;

import chartofgroup.model.entity.help.IndexCharacterObject;


import chartofgroup.model.view.common.FinCogVO;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 24 16:44:32 IST 2011
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FinCogVOImpl extends ViewObjectImpl implements FinCogVO {
    /**
     * This is the default constructor (do not remove).
     */
    public FinCogVOImpl() {
    }
    public List<IndexCharacterObject> getCharacterIndexList() {

        String[] alphabet =
        { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
          "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };

        //list that contains 26 entries
        List<IndexCharacterObject> list =
            new ArrayList<IndexCharacterObject>();

        //a list of all initial characters that are found in the row set last_name
        //attribute
        HashMap map = new HashMap();

        RowSet rs = this.getRowSet();

        this.executeQuery();
        Row row = rs.first();

        //query all rows and memorize the initial characters of all employees last
        //name entries
        if (row != null) {
            String character =
                ((String)row.getAttribute("CogNm")).toUpperCase().substring(0,1);
            updateMap(map, row, character);
            while (rs.hasNext()) {
                row = rs.next();
                character = ((String) row.getAttribute("CogNm")).toUpperCase().substring(0,1);
                updateMap(map, row, character);
            }
        }

        for (int i = 0; i < alphabet.length; ++i) {

            //A poor man's debugging hint :-)
            //System.out.println("Map contains "+alphabet[i].toUpperCase()+" ? "+map.containsKey(alphabet[i].toUpperCase()));

            if (map.containsKey(alphabet[i].toUpperCase())) {
                IndexCharacterObject ico = new IndexCharacterObject();
                ico.setCharacter(alphabet[i].toUpperCase());
                ico.setFound(true);
                //get rowIndex from map
                ico.setRowIndex(((Key)map.get((alphabet[i].toUpperCase()))));
                list.add(i, ico);
            } else {
                IndexCharacterObject ico = new IndexCharacterObject();
                ico.setCharacter(alphabet[i].toUpperCase());
                ico.setFound(false);
                //get rowIndex from map
                ico.setRowIndex(null);
                list.add(i, ico);
            }

            rs.first();
        }
        return list;
    }

    private void updateMap(HashMap map, Row row, String character) {
        if (!map.containsKey(character)) {
            //remember character and first occurence in rowSet
            map.put(character, row.getKey());
        }
    }


    /**
     * Returns the variable value for OrgIdBindVar.
     * @return variable value for OrgIdBindVar
     */
    public String getOrgIdBindVar() {
        return (String)ensureVariableManager().getVariableValue("OrgIdBindVar");
    }

    /**
     * Sets <code>value</code> for variable OrgIdBindVar.
     * @param value value to bind as OrgIdBindVar
     */
    public void setOrgIdBindVar(String value) {
        ensureVariableManager().setVariableValue("OrgIdBindVar", value);
        this.executeQuery();
    }

    /**
     * Returns the variable value for CldIdBindVar.
     * @return variable value for CldIdBindVar
     */
    public String getCldIdBindVar() {
        return (String)ensureVariableManager().getVariableValue("CldIdBindVar");
    }

    /**
     * Sets <code>value</code> for variable CldIdBindVar.
     * @param value value to bind as CldIdBindVar
     */
    public void setCldIdBindVar(String value) {
        ensureVariableManager().setVariableValue("CldIdBindVar", value);
        this.executeQuery();
    }

    /**
     * Returns the variable value for SlocIdBindVar.
     * @return variable value for SlocIdBindVar
     */
    public Integer getSlocIdBindVar() {
        return (Integer)ensureVariableManager().getVariableValue("SlocIdBindVar");
    }

    /**
     * Sets <code>value</code> for variable SlocIdBindVar.
     * @param value value to bind as SlocIdBindVar
     */
    public void setSlocIdBindVar(Integer value) {
        ensureVariableManager().setVariableValue("SlocIdBindVar", value);
        this.executeQuery();
    }
    
    public void setBindVar(String OrgId,String CldId,Integer SlocId){
        this.setOrgIdBindVar(OrgId);
        this.setSlocIdBindVar(SlocId);
        this.setCldIdBindVar(CldId);
        this.executeQuery();
    }
}
