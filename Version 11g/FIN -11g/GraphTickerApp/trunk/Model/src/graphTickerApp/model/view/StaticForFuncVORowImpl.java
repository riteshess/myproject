package graphTickerApp.model.view;

import graphTickerApp.model.view.common.StaticForFuncVORow;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 12 11:42:06 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class StaticForFuncVORowImpl extends ViewRowImpl implements StaticForFuncVORow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(StaticForFuncVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(StaticForFuncVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        OpBal {
            public Object get(StaticForFuncVORowImpl obj) {
                return obj.getOpBal();
            }

            public void put(StaticForFuncVORowImpl obj, Object value) {
                obj.setOpBal((Integer)value);
            }
        }
        ,
        OpCurr {
            public Object get(StaticForFuncVORowImpl obj) {
                return obj.getOpCurr();
            }

            public void put(StaticForFuncVORowImpl obj, Object value) {
                obj.setOpCurr((String)value);
            }
        }
        ,
        OpBalType {
            public Object get(StaticForFuncVORowImpl obj) {
                return obj.getOpBalType();
            }

            public void put(StaticForFuncVORowImpl obj, Object value) {
                obj.setOpBalType((String)value);
            }
        }
        ,
        OpBalUnit {
            public Object get(StaticForFuncVORowImpl obj) {
                return obj.getOpBalUnit();
            }

            public void put(StaticForFuncVORowImpl obj, Object value) {
                obj.setOpBalUnit((String)value);
            }
        }
        ,
        TrendVal {
            public Object get(StaticForFuncVORowImpl obj) {
                return obj.getTrendVal();
            }

            public void put(StaticForFuncVORowImpl obj, Object value) {
                obj.setTrendVal((Integer)value);
            }
        }
        ,
        TrendValUnit {
            public Object get(StaticForFuncVORowImpl obj) {
                return obj.getTrendValUnit();
            }

            public void put(StaticForFuncVORowImpl obj, Object value) {
                obj.setTrendValUnit((String)value);
            }
        }
        ,
        TrendValType {
            public Object get(StaticForFuncVORowImpl obj) {
                return obj.getTrendValType();
            }

            public void put(StaticForFuncVORowImpl obj, Object value) {
                obj.setTrendValType((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(StaticForFuncVORowImpl object);

        public abstract void put(StaticForFuncVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int OPBAL = AttributesEnum.OpBal.index();
    public static final int OPCURR = AttributesEnum.OpCurr.index();
    public static final int OPBALTYPE = AttributesEnum.OpBalType.index();
    public static final int OPBALUNIT = AttributesEnum.OpBalUnit.index();
    public static final int TRENDVAL = AttributesEnum.TrendVal.index();
    public static final int TRENDVALUNIT = AttributesEnum.TrendValUnit.index();
    public static final int TRENDVALTYPE = AttributesEnum.TrendValType.index();

    /**
     * This is the default constructor (do not remove).
     */
    public StaticForFuncVORowImpl() {
    }
    String op_curr = null;
    Integer op_val = 0;
    String op_val_type = null;
    String op_val_unit = null;
    Integer trend_val = 0;
    String trend_val_unit = null;
    String trend_val_typ = null;
    String org_id = "01";
    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OpBal.
     * @return the OpBal
     */
    public Integer getOpBal() {
        return (Integer) getAttributeInternal(OPBAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OpBal.
     * @param value value to set the  OpBal
     */
    public void setOpBal(Integer value) {
        setAttributeInternal(OPBAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OpCurr.
     * @return the OpCurr
     */
    public String getOpCurr() {
        return (String) getAttributeInternal(OPCURR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OpCurr.
     * @param value value to set the  OpCurr
     */
    public void setOpCurr(String value) {
        setAttributeInternal(OPCURR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OpBalType.
     * @return the OpBalType
     */
    public String getOpBalType() {
        return (String) getAttributeInternal(OPBALTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OpBalType.
     * @param value value to set the  OpBalType
     */
    public void setOpBalType(String value) {
        setAttributeInternal(OPBALTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OpBalUnit.
     * @return the OpBalUnit
     */
    public String getOpBalUnit() {
        return (String) getAttributeInternal(OPBALUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OpBalUnit.
     * @param value value to set the  OpBalUnit
     */
    public void setOpBalUnit(String value) {
        setAttributeInternal(OPBALUNIT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TrendVal.
     * @return the TrendVal
     */
    public Integer getTrendVal() {
        return (Integer) getAttributeInternal(TRENDVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TrendVal.
     * @param value value to set the  TrendVal
     */
    public void setTrendVal(Integer value) {
        setAttributeInternal(TRENDVAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TrendValUnit.
     * @return the TrendValUnit
     */
    public String getTrendValUnit() {
        return (String) getAttributeInternal(TRENDVALUNIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TrendValUnit.
     * @param value value to set the  TrendValUnit
     */
    public void setTrendValUnit(String value) {
        setAttributeInternal(TRENDVALUNIT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TrendValType.
     * @return the TrendValType
     */
    public String getTrendValType() {
        return (String) getAttributeInternal(TRENDVALTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TrendValType.
     * @param value value to set the  TrendValType
     */
    public void setTrendValType(String value) {
        setAttributeInternal(TRENDVALTYPE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    private static int NUMBER = Types.INTEGER;
           private static int STRING = Types.VARCHAR;
    protected Object callStoredFunction(String stmt, Object[] bindVars) {

                CallableStatement st = null;
                try { 
                    
                    // 1. Create a JDBC CallabledStatement
                    st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                    // 2. Register the first bind variable for the return value
                    st.registerOutParameter(1, NUMBER);
                    st.registerOutParameter(5, STRING);
                    st.registerOutParameter(6, NUMBER);
                    st.registerOutParameter(7, STRING);
                    st.registerOutParameter(8, STRING);
                    st.registerOutParameter(9, NUMBER);
                    st.registerOutParameter(10, STRING);
                    st.registerOutParameter(11, STRING);
                   
                    
                    if (bindVars != null) {
                        // 3. Loop over values for the bind variables passed in, if any
                        for (int z = 0; z < bindVars.length; z++) {
                            // 4. Set the value of user-supplied bind vars in the stmt
                            st.setObject(z + 2, bindVars[z]);
                        }
                    }
                    // 5. Set the value of user-supplied bind vars in the stmt
                    st.executeUpdate();
                    // 6. Return the value of the first bind variable
                   op_curr = st.getObject(5).toString();
            op_val = Integer.parseInt(st.getObject(6).toString());
            op_val_type = st.getObject(7).toString();
            op_val_unit = st.getObject(8).toString();
            trend_val = Integer.parseInt(st.getObject(9).toString());
            trend_val_unit = st.getObject(10).toString();
            trend_val_typ = st.getObject(11).toString();
                    return null;
                } catch (SQLException e) {
                    throw new JboException(e);
                } finally {
                    if (st != null) {
                        try {
                            // 7. Close the statement
                            st.close();
                        } catch (SQLException e) {
                            System.out.println(e.getMessage());
                        }
                    }
                }
            }
    public void callTickerFuncInVO() 
        {
            callStoredFunction("fin.pkg_fin_trial.calc_ticker(?,?,?,?,?,?,?,?,?,?)", new Object[] { 1, 1,org_id });
           
            this.setOpBal(op_val);
            this.setOpBalType(op_val_type);
            this.setOpBalUnit(op_val_unit);
            this.setOpCurr(op_curr);
            this.setTrendVal(trend_val);
            this.setTrendValType(trend_val_typ);
            this.setTrendValUnit(trend_val_unit);
            
        }
}
