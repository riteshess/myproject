package glApp.model.module;

import glApp.model.module.common.GlAppAM;
import glApp.model.view.ARAPOSVOImpl;
import glApp.model.view.GlAdjTmpDtl1VOImpl;
import glApp.model.view.GlAdjTmpDtlVOImpl;
import glApp.model.view.GlAdjTmpVOImpl;
import glApp.model.view.GlAdvDtlVOImpl;
import glApp.model.view.GlBillDtlVOImpl;
import glApp.model.view.GlLineInstrumntVOImpl;
import glApp.model.view.GlLinesVOImpl;
import glApp.model.view.GlOcVOImpl;
import glApp.model.view.GlSearchFieldVOImpl;
import glApp.model.view.GlSearchViewVOImpl;
import glApp.model.view.GlTaxRuleLineVOImpl;
import glApp.model.view.GlTaxRuleVOImpl;
import glApp.model.view.GlTdsLineVOImpl;
import glApp.model.view.GlTdsRuleLineVOImpl;
import glApp.model.view.GlVOImpl;
import glApp.model.view.GlVORowImpl;

import glApp.model.view.Gl_vwVOImpl;
import glApp.model.view.LOVCoaAdvVOImpl;
import glApp.model.view.LovCoaForHdVOImpl;
import glApp.model.view.LovCoaVOImpl;
import glApp.model.view.LovCogIdVOImpl;
import glApp.model.view.LovCurrIdVOImpl;
import glApp.model.view.LovCurrLatestImpl;
import glApp.model.view.LovDistCoaVOImpl;
import glApp.model.view.LovDistVouTypVOImpl;
import glApp.model.view.LovEoMstNmVOImpl;
import glApp.model.view.LovEoVOImpl;
import glApp.model.view.LovGlTypeIdVOImpl;
import glApp.model.view.LovNaIdVOImpl;
import glApp.model.view.LovOrgIdVOImpl;
import glApp.model.view.LovSubTypeIdVOImpl;
import glApp.model.view.LovVouIdVOImpl;
import glApp.model.view.glAmtDtlVOImpl;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Mar 15 16:45:35 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GlAppAMImpl extends ApplicationModuleImpl  {


    private String add_mode = null;
    private String edit_mode = null;
    private String view_mode = null;
    private String del_mode = null;

    /**
     * This is the default constructor (do not remove).
     */
    public GlAppAMImpl() {
    }

    /**
     * This method is for calling database fucntion to get the security parameters.
     * **/
    protected Object callStoredFunctionamParam(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    public Integer on_load_page() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunctionamParam(VARCHAR, "app.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                  new Object[] { cld_id, sloc_id, org_id, 56, usr_id });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);
        String addMode = resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString();
        String editMode = resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString();
        String viewMode = resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString();
        String deleteMode = resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();
        return count;
    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object msg = valueExp.getValue(elContext);
        return msg;
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    /**
     * Container's getter for Gl1.
     * @return Gl1
     */
    public GlVOImpl getGl1() {
        return (GlVOImpl)findViewObject("Gl1");
    }

    /**
     * Container's getter for GlLines1.
     * @return GlLines1
     */
    public GlLinesVOImpl getGlLines1() {
        return (GlLinesVOImpl)findViewObject("GlLines1");
    }

    /**
     * Container's getter for Gl_vw.
     * @return Gl_vw
     */
    public ViewObjectImpl getGl_vw() {
        return (ViewObjectImpl)findViewObject("Gl_vw");
    }

    /**
     * Container's getter for GlGlinesVL1.
     * @return GlGlinesVL1
     */
    public ViewLinkImpl getGlGlinesVL1() {
        return (ViewLinkImpl)findViewLink("GlGlinesVL1");
    }

    private Number Sum = new Number(0);
    private static Number as = new Number();
    private static Number asCr = new Number();

    /**
     * @return
     */
    public String processTaxForHdr() {
        this.setSum(new Number(0));
        this.setAs(new Number(0));
        setAsCr(new Number(0));
        ViewObjectImpl v = getGlTaxRule1();
        Row row = v.getCurrentRow();
        Integer taxRuleId = Integer.parseInt(row.getAttribute("GlTaxRuleId").toString());
        System.out.println("Tax RUle ID is--->" + taxRuleId);
        ViewObjectImpl e = getGl1();

        Row row123 = e.getCurrentRow();
        ViewObject v1 = getGlLines1();
        RowSetIterator rit = v1.createRowSetIterator(null);


        if (rit.first() != null && rit.first().getAttribute("GlTxnTypTax").equals("Y") &&
            rit.first().getAttribute("GlAmtTyp").equals("Dr")) {
            as = (Number)(rit.first().getAttribute("GlAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("GlTxnTypTax").equals("Y") && lineRow.getAttribute("GlAmtTyp").equals("Dr")) {
                as = as.add((Number)(lineRow.getAttribute("GlAmtSp")));

            }
        }


        if (rit.first() != null && rit.first().getAttribute("GlTxnTypTax").equals("Y") &&
            rit.first().getAttribute("GlAmtTyp").equals("Cr")) {
            asCr = (Number)(rit.first().getAttribute("GlAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("GlTxnTypTax").equals("Y") && lineRow.getAttribute("GlAmtTyp").equals("Cr")) {
                asCr = asCr.add((Number)(lineRow.getAttribute("GlAmtSp")));

            }
        }


        if (as.compareTo(asCr) == 1) {
            setSum((Number)(as.minus(asCr)));
        } else if (as.compareTo(asCr) == -1) {

            setSum((Number)(asCr.minus(as)));
        }


        //     Row taxHdRow = taxVouHd.getCurrentRow();
        System.out.println(Sum + "ssssssssssssssuuuuuuummmmm");
        row.setAttribute("GlTaxableAmt", Sum);
        row.setAttribute("GlTaxAmtSp", 100);
        row.setAttribute("GlCurrIdSp", 1);
        row.setAttribute("UsrIdCreate", 1);

        String vouId = row123.getAttribute("GlVouId").toString();
        Integer slocId = Integer.parseInt(row123.getAttribute("GlSlocId").toString());
        String orgId = row123.getAttribute("GlOrgId").toString();

        Integer currIdsp = Integer.parseInt(row123.getAttribute("GlCurrIdSp").toString());
        Integer userId = Integer.parseInt(row123.getAttribute("UsrIdCreate").toString());
        Number finAmt = (Number)row.getAttribute("GlTaxableAmt");
        System.out.println(finAmt + "ffffffffffffffffi");

        String op = "1";
        Integer y = 1;
        GlVORowImpl row678 = (GlVORowImpl)e.getCurrentRow();
        Date usrDt = (Date)row678.getGlVouDt();
        Date tvouDt = (Date)row678.getGlVouDt();
        String cldId = row123.getAttribute("GlCldId").toString();
        String hoOrgId = row123.getAttribute("GlHoOrgId").toString();

        Integer slNo = 0;
        Integer appInst = 1;
        System.out.println("Sloc id---" + slocId + "---Org---" + orgId + "--Vou----" + vouId + "---Vou Dt---" +
                           tvouDt + "---SLNO---" + slNo + "---TaxRule---" + taxRuleId + "---FinAmt---" + finAmt +
                           "---CurrId---" + currIdsp + "--ParamOp----" + op + "----UsrId--" + userId + "---VouDt---" +
                           tvouDt + "---Inst---" + appInst + "hoOrgId---->" + hoOrgId + "cld id is-->" + cldId);
        try {
            callStoredProcedure("FIN.PKG_FIN_GL.INS_GL_TAX_LINE(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                new Object[] { slocId, orgId, vouId, tvouDt, slNo, taxRuleId, finAmt, currIdsp, op,
                                               userId, tvouDt, appInst, hoOrgId, cldId });
        } catch (Exception e1) {
            System.out.println(e1.getMessage() + "Inside catch Ins Tax Line ");

        }
        System.out.println("After Function Call Ins gl tax line");
        ViewObject z = this.findViewObject("GlTaxRuleLine1");
        z.refreshProperty("GlTaxRuleLine1");
        ViewObject ruleLine = getGlTaxRuleLine1();
        ruleLine.executeQuery();
        return null;
    }

    /**New Method For Tax VCE 12-04-2013 @Ashish Kumar*/
    public String procTaxForHdr(Integer ruleId) {
        this.setSum(new Number(0));
        this.setAs(new Number(0));
        setAsCr(new Number(0));
        ViewObjectImpl v = getGlTaxRule1();
        Row row = v.getCurrentRow();
        Integer taxRuleId = ruleId;
        System.out.println("Tax RUle ID is--->" + taxRuleId);
        ViewObjectImpl e = getGl1();

        Row row123 = e.getCurrentRow();
        ViewObject v1 = getGlLines1();
        RowSetIterator rit = v1.createRowSetIterator(null);


        if (rit.first() != null && rit.first().getAttribute("GlTxnTypTax").equals("Y") &&
            rit.first().getAttribute("GlAmtTyp").equals("Dr")) {
            as = (Number)(rit.first().getAttribute("GlAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("GlTxnTypTax").equals("Y") && lineRow.getAttribute("GlAmtTyp").equals("Dr")) {
                as = as.add((Number)(lineRow.getAttribute("GlAmtSp")));

            }
        }


        if (rit.first() != null && rit.first().getAttribute("GlTxnTypTax").equals("Y") &&
            rit.first().getAttribute("GlAmtTyp").equals("Cr")) {
            asCr = (Number)(rit.first().getAttribute("GlAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("GlTxnTypTax").equals("Y") && lineRow.getAttribute("GlAmtTyp").equals("Cr")) {
                asCr = asCr.add((Number)(lineRow.getAttribute("GlAmtSp")));

            }
        }


        if (as.compareTo(asCr) == 1) {
            setSum((Number)(as.minus(asCr)));
        } else if (as.compareTo(asCr) == -1) {

            setSum((Number)(asCr.minus(as)));
        }


        //     Row taxHdRow = taxVouHd.getCurrentRow();
        System.out.println(Sum + "ssssssssssssssuuuuuuummmmm");
        row.setAttribute("GlTaxableAmt", Sum);
        row.setAttribute("GlTaxAmtSp", 100);
        row.setAttribute("GlCurrIdSp", 1);
        row.setAttribute("UsrIdCreate", 1);

        String vouId = row123.getAttribute("GlVouId").toString();
        Integer slocId = Integer.parseInt(row123.getAttribute("GlSlocId").toString());
        String orgId = row123.getAttribute("GlOrgId").toString();

        Integer currIdsp = Integer.parseInt(row123.getAttribute("GlCurrIdSp").toString());
        Integer userId = Integer.parseInt(row123.getAttribute("UsrIdCreate").toString());
        Number finAmt = (Number)row.getAttribute("GlTaxableAmt");
        System.out.println(finAmt + "ffffffffffffffffi");

        String op = "1";
        Integer y = 1;
        GlVORowImpl row678 = (GlVORowImpl)e.getCurrentRow();
        Date usrDt = (Date)row678.getGlVouDt();
        Date tvouDt = (Date)row678.getGlVouDt();
        String cldId = row123.getAttribute("GlCldId").toString();
        String hoOrgId = row123.getAttribute("GlHoOrgId").toString();

        Integer slNo = 0;
        Integer appInst = 1;
        System.out.println("Sloc id---" + slocId + "---Org---" + orgId + "--Vou----" + vouId + "---Vou Dt---" +
                           tvouDt + "---SLNO---" + slNo + "---TaxRule---" + taxRuleId + "---FinAmt---" + finAmt +
                           "---CurrId---" + currIdsp + "--ParamOp----" + op + "----UsrId--" + userId + "---VouDt---" +
                           tvouDt + "---Inst---" + appInst + "hoOrgId---->" + hoOrgId + "cld id is-->" + cldId);
        try {
            callStoredProcedure("FIN.PKG_FIN_GL.INS_GL_TAX_LINE(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                new Object[] { slocId, orgId, vouId, tvouDt, slNo, taxRuleId, finAmt, currIdsp, op,
                                               userId, tvouDt, appInst, hoOrgId, cldId });
        } catch (Exception e1) {
            System.out.println(e1.getMessage() + "Inside catch Ins Tax Line ");

        }
        System.out.println("After Function Call Ins gl tax line");
        ViewObject z = this.findViewObject("GlTaxRuleLine1");
        z.refreshProperty("GlTaxRuleLine1");
        ViewObject ruleLine = getGlTaxRuleLine1();
        ruleLine.executeQuery();
        return null;
    }

    public String processTdsForLine() {

        this.setSum(new Number(0));
        this.setAs(new Number(0));
        setAsCr(new Number(0));
        ViewObjectImpl v = getGlTdsLine1();
        Row row = v.getCurrentRow();
        Integer tdsRuleId = Integer.parseInt(row.getAttribute("GlTdsRuleId").toString());
        ViewObjectImpl gl = getGl1();
        Row glRow = gl.getCurrentRow();
        ViewObject v1 = getGlLines1();
        RowSetIterator rit = v1.createRowSetIterator(null);

        if (rit.first() != null && rit.first().getAttribute("GlTxnTypTds").equals("Y") &&
            rit.first().getAttribute("GlAmtTyp").equals("Dr")) {
            as = (Number)(rit.first().getAttribute("GlAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("GlTxnTypTds").equals("Y") && lineRow.getAttribute("GlAmtTyp").equals("Dr")) {
                as = as.add((Number)(lineRow.getAttribute("GlAmtSp")));

            }
        }


        if (rit.first() != null && rit.first().getAttribute("GlTxnTypTds").equals("Y") &&
            rit.first().getAttribute("GlAmtTyp").equals("Cr")) {
            asCr = (Number)(rit.first().getAttribute("GlAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("GlTxnTypTds").equals("Y") && lineRow.getAttribute("GlAmtTyp").equals("Cr")) {
                asCr = asCr.add((Number)(lineRow.getAttribute("GlAmtSp")));

            }
        }


        if (as.compareTo(asCr) == 1) {
            setSum((Number)(as.minus(asCr)));
        } else if (as.compareTo(asCr) == -1) {

            setSum((Number)(asCr.minus(as)));
        }

        System.out.println(Sum + "Total Amount for TDS Charge");
        row.setAttribute("GlTaxableAmt", Sum);
        row.setAttribute("GlTdsAmtSp", 100);
        row.setAttribute("GlCurrIdSp", 1);
        row.setAttribute("UsrIdCreate", 1);
        //  row.setAttribute("GlTdsAmtSp", glCurRow.getAttribute("GlAmtSp"));
        row.setAttribute("GlCurrIdSp", glRow.getAttribute("GlCurrIdSp").toString());
        row.setAttribute("GlSlNo", 0);
        String vouId = glRow.getAttribute("GlVouId").toString();
        Integer slocId = Integer.parseInt(glRow.getAttribute("GlSlocId").toString());
        String orgId = glRow.getAttribute("GlOrgId").toString();

        Integer currIdsp = Integer.parseInt(glRow.getAttribute("GlCurrIdSp").toString());
        Integer userId = Integer.parseInt(glRow.getAttribute("UsrIdCreate").toString());
        Number finAmt = (Number)row.getAttribute("GlTaxableAmt");
        System.out.println(finAmt + "Total AMount Fin---->");

        String op = "1";
        Integer y = 1;
        GlVORowImpl row678 = (GlVORowImpl)gl.getCurrentRow();
        Date usrDt = (Date)row678.getGlVouDt();
        Date tvouDt = (Date)row678.getGlVouDt();

        String cldId = glRow.getAttribute("GlCldId").toString();
        String hoOrgId = glRow.getAttribute("GlHoOrgId").toString();
        Integer slNo = 0;
        Integer appInst = 1;


        /* String vouId = curRow.getAttribute("GlVouId").toString();

        Integer slocId = Integer.parseInt(curRow.getAttribute("GlSlocId").toString());
        String orgId = curRow.getAttribute("GlOrgId").toString();
    //  Number amtSp = (Number)glCurRow.getAttribute("GlAmtSp");
        Integer currSp = Integer.parseInt(curRow.getAttribute("GlCurrIdSp").toString());
        Integer usrId = Integer.parseInt(curRow.getAttribute("UsrIdCreate").toString());
        Number finAmt = (Number)glCurRow.getAttribute("GlAmtSp");
        String Op = "1";
        Integer y = 1;
        GlLinesVORowImpl row678 = (GlLinesVORowImpl)glVo.getCurrentRow();
        Date tvouDt = (Date)row678.getGlVouDt();
        GlLinesVORowImpl row901 = (GlLinesVORowImpl)glVo.getCurrentRow();
        Integer slNo = row901.getGlSlNo();
                System.out.println("Serial No inside INS TDS--> "+slNo);
        row.setAttribute("GlTaxableAmt", finAmt);
                System.out.println("Serial no to be set in tds---"+glCurRow.getAttribute("GlSlNo"));
        row.setAttribute("GlSlNo", glCurRow.getAttribute("GlSlNo"));

        Integer appInst = 1;
        String cldId=glCurRow.getAttribute("GlCldId").toString();
        String hoOrgId=glCurRow.getAttribute("GlHoOrgId").toString(); */
        try {

            System.out.println("SlocId-->" + slocId + " OrgId--->" + orgId + " VouId--->" + vouId + "vou dt--->" +
                               tvouDt + "slno-->" + slNo + "tds ruleid-->" + tdsRuleId + "finamt-->" + finAmt +
                               "currsp-->" + currIdsp + "op-->" + op);
            callStoredProcedure("FIN.PKG_FIN_GL.INS_GL_TDS_LINE(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                new Object[] { slocId, orgId, vouId, tvouDt, slNo, tdsRuleId, finAmt, currIdsp, op,
                                               userId, tvouDt, appInst, hoOrgId, cldId });

        } catch (Exception e) {
            System.out.println(e.getMessage() + "Inside catch INS TDS LINE");

        }

        ViewObject z = this.findViewObject("GlTdsRuleLine1");
        z.refreshProperty("GlTdsRuleLine1");
        ViewObject ruleLine = getGlTdsRuleLine1();
        ruleLine.executeQuery();
        return null;

    }

    /**New Method for TDS 12-04-2013*/
    public String procTdsForLine(Integer ruleId) {

        this.setSum(new Number(0));
        this.setAs(new Number(0));
        setAsCr(new Number(0));
        ViewObjectImpl v = getGlTdsLine1();
        Row row = v.getCurrentRow();
        Integer tdsRuleId = ruleId;
        ViewObjectImpl gl = getGl1();
        Row glRow = gl.getCurrentRow();
        ViewObject v1 = getGlLines1();
        RowSetIterator rit = v1.createRowSetIterator(null);

        if (rit.first() != null && rit.first().getAttribute("GlTxnTypTds").equals("Y") &&
            rit.first().getAttribute("GlAmtTyp").equals("Dr")) {
            as = (Number)(rit.first().getAttribute("GlAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("GlTxnTypTds").equals("Y") && lineRow.getAttribute("GlAmtTyp").equals("Dr")) {
                as = as.add((Number)(lineRow.getAttribute("GlAmtSp")));

            }
        }


        if (rit.first() != null && rit.first().getAttribute("GlTxnTypTds").equals("Y") &&
            rit.first().getAttribute("GlAmtTyp").equals("Cr")) {
            asCr = (Number)(rit.first().getAttribute("GlAmtSp"));

        }
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            if (lineRow.getAttribute("GlTxnTypTds").equals("Y") && lineRow.getAttribute("GlAmtTyp").equals("Cr")) {
                asCr = asCr.add((Number)(lineRow.getAttribute("GlAmtSp")));

            }
        }


        if (as.compareTo(asCr) == 1) {
            setSum((Number)(as.minus(asCr)));
        } else if (as.compareTo(asCr) == -1) {

            setSum((Number)(asCr.minus(as)));
        }

        System.out.println(Sum + "Total Amount for TDS Charge");
        row.setAttribute("GlTaxableAmt", Sum);
        row.setAttribute("GlTdsAmtSp", 100);
        row.setAttribute("GlCurrIdSp", 1);
        row.setAttribute("UsrIdCreate", 1);
        //  row.setAttribute("GlTdsAmtSp", glCurRow.getAttribute("GlAmtSp"));
        row.setAttribute("GlCurrIdSp", glRow.getAttribute("GlCurrIdSp").toString());
        row.setAttribute("GlSlNo", 0);
        String vouId = glRow.getAttribute("GlVouId").toString();
        Integer slocId = Integer.parseInt(glRow.getAttribute("GlSlocId").toString());
        String orgId = glRow.getAttribute("GlOrgId").toString();

        Integer currIdsp = Integer.parseInt(glRow.getAttribute("GlCurrIdSp").toString());
        Integer userId = Integer.parseInt(glRow.getAttribute("UsrIdCreate").toString());
        Number finAmt = (Number)row.getAttribute("GlTaxableAmt");
        System.out.println(finAmt + "Total AMount Fin---->");

        String op = "1";
        Integer y = 1;
        GlVORowImpl row678 = (GlVORowImpl)gl.getCurrentRow();
        Date usrDt = (Date)row678.getGlVouDt();
        Date tvouDt = (Date)row678.getGlVouDt();

        String cldId = glRow.getAttribute("GlCldId").toString();
        String hoOrgId = glRow.getAttribute("GlHoOrgId").toString();
        Integer slNo = 0;
        Integer appInst = 1;


        /* String vouId = curRow.getAttribute("GlVouId").toString();

     Integer slocId = Integer.parseInt(curRow.getAttribute("GlSlocId").toString());
     String orgId = curRow.getAttribute("GlOrgId").toString();
 //  Number amtSp = (Number)glCurRow.getAttribute("GlAmtSp");
     Integer currSp = Integer.parseInt(curRow.getAttribute("GlCurrIdSp").toString());
     Integer usrId = Integer.parseInt(curRow.getAttribute("UsrIdCreate").toString());
     Number finAmt = (Number)glCurRow.getAttribute("GlAmtSp");
     String Op = "1";
     Integer y = 1;
     GlLinesVORowImpl row678 = (GlLinesVORowImpl)glVo.getCurrentRow();
     Date tvouDt = (Date)row678.getGlVouDt();
     GlLinesVORowImpl row901 = (GlLinesVORowImpl)glVo.getCurrentRow();
     Integer slNo = row901.getGlSlNo();
             System.out.println("Serial No inside INS TDS--> "+slNo);
     row.setAttribute("GlTaxableAmt", finAmt);
             System.out.println("Serial no to be set in tds---"+glCurRow.getAttribute("GlSlNo"));
     row.setAttribute("GlSlNo", glCurRow.getAttribute("GlSlNo"));

     Integer appInst = 1;
     String cldId=glCurRow.getAttribute("GlCldId").toString();
     String hoOrgId=glCurRow.getAttribute("GlHoOrgId").toString(); */
        try {

            System.out.println("SlocId-->" + slocId + " OrgId--->" + orgId + " VouId--->" + vouId + "vou dt--->" +
                               tvouDt + "slno-->" + slNo + "tds ruleid-->" + tdsRuleId + "finamt-->" + finAmt +
                               "currsp-->" + currIdsp + "op-->" + op);
            callStoredProcedure("FIN.PKG_FIN_GL.INS_GL_TDS_LINE(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                new Object[] { slocId, orgId, vouId, tvouDt, slNo, tdsRuleId, finAmt, currIdsp, op,
                                               userId, tvouDt, appInst, hoOrgId, cldId });

        } catch (Exception e) {
            System.out.println(e.getMessage() + "Inside catch INS TDS LINE");

        }

        ViewObject z = this.findViewObject("GlTdsRuleLine1");
        z.refreshProperty("GlTdsRuleLine1");
        ViewObject ruleLine = getGlTdsRuleLine1();
        ruleLine.executeQuery();
        return null;

    }


    public void setSum(Number Sum) {
        this.Sum = Sum;
    }

    public Number getSum() {
        return Sum;
    }

    public static void setAs(Number as) {
        GlAppAMImpl.as = as;
    }

    public static Number getAs() {
        return as;
    }

    public static void setAsCr(Number asCr) {
        GlAppAMImpl.asCr = asCr;
    }

    public static Number getAsCr() {
        return asCr;
    }

    public void callStoredProcedure(String stmt, Object[] bindVars) throws SQLException {
        System.out.println("function calll------------");
        PreparedStatement st = null;
        try {
            st = getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                    System.out.println();
                }
            }
            st.executeUpdate();
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");

            throw new JboException(e.getMessage().substring(11, end));

        } finally {

            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    /**
     * Container's getter for GlTaxRule1.
     * @return GlTaxRule1
     */
    public ViewObjectImpl getGlTaxRule1() {
        return (ViewObjectImpl)findViewObject("GlTaxRule1");
    }

    /**
     * Container's getter for GlTaxRuleVL1.
     * @return GlTaxRuleVL1
     */
    public ViewLinkImpl getGlTaxRuleVL1() {
        return (ViewLinkImpl)findViewLink("GlTaxRuleVL1");
    }

    /**
     * Container's getter for GlTdsLine1.
     * @return GlTdsLine1
     */
    public ViewObjectImpl getGlTdsLine1() {
        return (ViewObjectImpl)findViewObject("GlTdsLine1");
    }

    /**
     * Container's getter for GlTdsRuleVL1.
     * @return GlTdsRuleVL1
     */
    public ViewLinkImpl getGlTdsRuleVL1() {
        return (ViewLinkImpl)findViewLink("GlTdsRuleVL1");
    }

    /**
     * Container's getter for GlTaxRuleLine1.
     * @return GlTaxRuleLine1
     */
    public ViewObjectImpl getGlTaxRuleLine1() {
        return (ViewObjectImpl)findViewObject("GlTaxRuleLine1");
    }

    /**
     * Container's getter for TaxRuleVL1.
     * @return TaxRuleVL1
     */
    public ViewLinkImpl getTaxRuleVL1() {
        return (ViewLinkImpl)findViewLink("TaxRuleVL1");
    }

    /**
     * Container's getter for GlTdsRuleLine1.
     * @return GlTdsRuleLine1
     */
    public ViewObjectImpl getGlTdsRuleLine1() {
        return (ViewObjectImpl)findViewObject("GlTdsRuleLine1");
    }

    /**
     * Container's getter for TdsRuleVL1.
     * @return TdsRuleVL1
     */
    public ViewLinkImpl getTdsRuleVL1() {
        return (ViewLinkImpl)findViewLink("TdsRuleVL1");
    }

    /**
     * Container's getter for GlOc1.
     * @return GlOc1
     */
    public ViewObjectImpl getGlOc1() {
        return (ViewObjectImpl)findViewObject("GlOc1");
    }

    /**
     * Container's getter for GlOcVL1.
     * @return GlOcVL1
     */
    public ViewLinkImpl getGlOcVL1() {
        return (ViewLinkImpl)findViewLink("GlOcVL1");
    }
    private static int NUMBER = Types.INTEGER;
    private static int VARCHAR = Types.VARCHAR;


    public void taxConsolidation() {

        ViewObjectImpl tvouV = getGl1();

        Row tvouVRow = tvouV.getCurrentRow();
        Integer vouSubTyp;
        String vouId = tvouVRow.getAttribute("GlVouId").toString();
        Integer vouTyp = Integer.parseInt(tvouVRow.getAttribute("GlTypeId").toString());
        Integer tvouSpId = Integer.parseInt(tvouVRow.getAttribute("GlCurrIdSp").toString());
        if (tvouVRow.getAttribute("GlSubTypeId") != null) {
            vouSubTyp = Integer.parseInt(tvouVRow.getAttribute("GlSubTypeId").toString());
        } else {
            vouSubTyp = 0;
        }
        /**New Parameter added in Database functions as of 02-03-2013**/
        Integer slocid = Integer.parseInt(tvouVRow.getAttribute("GlSlocId").toString());
        String orgId = tvouVRow.getAttribute("GlOrgId").toString();
        String cldId = tvouVRow.getAttribute("GlCldId").toString();
        String hoOrgId = tvouVRow.getAttribute("GlHoOrgId").toString();

        Integer vouInsId = Integer.parseInt(tvouVRow.getAttribute("GlApplInstId").toString());
        System.out.println(vouId + vouTyp + vouSubTyp + vouInsId + tvouSpId);
        callStoredFunction(NUMBER, "FIN.PKG_FIN_GL.FN_GL_TAX(?,?,?,?,?,?,?,?,?)",
                           new Object[] { vouId, vouTyp, vouSubTyp, vouInsId, tvouSpId, orgId, slocid, cldId,
                                          hoOrgId });
        System.out.println("taxConsolidation------->" + vouId + "----" + vouTyp + "----" + vouSubTyp + "----" +
                           vouInsId + "----" + tvouSpId);
        ViewObjectImpl glLines = getGlLines1();
        glLines.executeQuery();
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            //    int end = e.getMessage().indexOf("\n");
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    public void tdsConsolidation() {
        ViewObjectImpl tvouV = getGl1();

        Row tvouVRow = tvouV.getCurrentRow();
        Integer vouSubTyp;
        String vouId = tvouVRow.getAttribute("GlVouId").toString();
        Integer vouTyp = Integer.parseInt(tvouVRow.getAttribute("GlTypeId").toString());
        Integer tvouSpId = Integer.parseInt(tvouVRow.getAttribute("GlCurrIdSp").toString());
        /**New Parameter added in Database functions 26-02-2013**/
        Integer slocid = Integer.parseInt(tvouVRow.getAttribute("GlSlocId").toString());
        String orgId = tvouVRow.getAttribute("GlOrgId").toString();
        String cldId = tvouVRow.getAttribute("GlCldId").toString();
        String hoOrgId = tvouVRow.getAttribute("GlHoOrgId").toString();

        if (tvouVRow.getAttribute("GlSubTypeId") != null) {
            vouSubTyp = Integer.parseInt(tvouVRow.getAttribute("GlSubTypeId").toString());
        } else {
            vouSubTyp = 0;
        }
        Integer vouInsId = Integer.parseInt(tvouVRow.getAttribute("GlApplInstId").toString());
        System.out.println("tdsConsolidation FN_GL_TDS Call..........VOUID...." + vouId + "-TYP---" + vouTyp +
                           "-STYP---" + vouSubTyp + "--INST--" + vouInsId + "-SPID---" + tvouSpId + "Orgid--->" +
                           orgId + "Cldid--->" + cldId + "HoOrgId-->" + hoOrgId);
        callStoredFunction(NUMBER, "FIN.PKG_FIN_GL.FN_GL_TDS(?,?,?,?,?,?,?,?,?)",
                           new Object[] { vouId, vouTyp, vouSubTyp, vouInsId, tvouSpId, orgId, slocid, cldId,
                                          hoOrgId });

        ViewObjectImpl glLines = getGlLines1();
        glLines.executeQuery();


    }

    public void tvouOtherCharges() {

        ViewObjectImpl tvouV = getGl1();

        Row tvouVRow = tvouV.getCurrentRow();

        String vouId = tvouVRow.getAttribute("GlVouId").toString();
        /**New Parameter added in Database functions 27-02-2013**/
        Integer slocid = Integer.parseInt(tvouVRow.getAttribute("GlSlocId").toString());
        String orgId = tvouVRow.getAttribute("GlOrgId").toString();
        String cldId = tvouVRow.getAttribute("GlCldId").toString();
        String hoOrgId = tvouVRow.getAttribute("GlHoOrgId").toString();
        System.out.println("CLD ID--->" + cldId + "Ho orgid-->" + hoOrgId);
        callStoredFunction(NUMBER, "FIN.PKG_FIN_GL.FN_GL_OC (?,?,?,?,?)",
                           new Object[] { vouId, orgId, slocid, cldId, hoOrgId });
        System.out.println("tvouOtherCharges..........Function Called....");
        ViewObjectImpl glLines = getGlLines1();
        glLines.executeQuery();
    }

    /**
     * Container's getter for GlAdjTmp1.
     * @return GlAdjTmp1
     */
    public GlAdjTmpVOImpl getGlAdjTmp1() {
        return (GlAdjTmpVOImpl)findViewObject("GlAdjTmp1");
    }

    /**
     * Container's getter for GlLinesGlAdjVL1.
     * @return GlLinesGlAdjVL1
     */
    public ViewLinkImpl getGlLinesGlAdjVL1() {
        return (ViewLinkImpl)findViewLink("GlLinesGlAdjVL1");
    }

    /**
     * Container's getter for ARAPOS1.
     * @return ARAPOS1
     */
    public ARAPOSVOImpl getARAPOS1() {
        return (ARAPOSVOImpl)findViewObject("ARAPOS1");
    }
    private static String arApFlg;
    String tab;
    private Integer currId;

    public Integer checkVoucher(String arVouId, String table, String vouId) {
        Integer count = null;
        String query =
            "SELECT count(*) from " + table + " WHERE RADJ_VOU_ID = '" + arVouId + "' and ADJ_VOU_ID = '" + vouId +
            "'";
        System.out.println(query);
        PreparedStatement st = null;
        try {
            Connection conn = getDBTransaction().createCallableStatement("select 1 from dual", 0).getConnection();
            st = conn.prepareStatement(query);

            ResultSet rs = st.executeQuery();
            while (rs.next()) {
                if (rs.getObject(1) == null) {
                    count = 0;
                } else
                    count = rs.getInt(1);

            }
            System.out.println(st + "count from Check Voucher Method " + count);
            return count;
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * @param accType
     */
    public void getViewValues(String accType) {
        ViewObject v1 = getARAPOS1();

        // RowSet rowset = v1.getRowSet();

        ViewObjectImpl tVou = getGlAdjTmp1();
        ViewObject tVouLine = getGlLines1();

        Row LnRow = tVouLine.getCurrentRow();
        setCurrId(Integer.parseInt(LnRow.getAttribute("GlCurrIdSp").toString()));

        if (Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 2 ||
            Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 4) {
            setTab("Cr");
            setArApFlg("AP");
            // setArApFlg("AR");
        }
        if (Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 3 ||
            Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 5) {
            setTab("Dr");
            setArApFlg("AR");
        }

        v1.setWhereClause("ARAP_COA_ID = " + LnRow.getAttribute("GlCoaId") + "and ARAP_FLG = '" + getArApFlg() +
                          "'and ARAP_AMT_TYP = '" + getTab() + "' and ARAP_NET_AMT_OT > 0");


        v1.executeQuery();
        // if (tVou.getFetchedRowCount() == 0) {
        RowSetIterator rit = v1.createRowSetIterator(null);
        while (rit.hasNext()) {
            Row currentRow = rit.next();

            /** Create new row in tvouAdj view for every row of ARAP view Iterator. */
            if (checkVoucher(currentRow.getAttribute("ArapVouId").toString(), "GL_ADJ_TMP",
                             LnRow.getAttribute("GlVouId").toString()) < 1) {
                /* System.out.println("Total Row after filtering--->"+tVou.getFilteredRows("AdjMstVouId", LnRow.getAttribute("GlVouId")).length);
            RowQualifier rqua=new RowQualifier((ViewObjectImpl)tVou);
            rqua.setWhereClause("RadjVouId="+currentRow.getAttribute("ArapVouId").toString()+" AND AdjVouId="+LnRow.getAttribute("GlVouId").toString());
            System.out.println("No of rows in View--->"+tVou.getFilteredRows(rqua).length);
            if(tVou.getFilteredRows(rqua).length<1){  */
                System.out.println("Rows are inserted---->");
                Row newRow = tVou.createRow();

                tVou.insertRow(newRow);
                newRow.setAttribute("AdjSlocId", currentRow.getAttribute("ArapSlocId"));
                System.out.println(newRow.getAttribute("AdjSlocId"));
                newRow.setAttribute("AdjApplInstId", currentRow.getAttribute("ArapApplInstId"));
                System.out.println(newRow.getAttribute("AdjApplInstId"));
                newRow.setAttribute("AdjOrgId", currentRow.getAttribute("ArapOrgId"));
                System.out.println(newRow.getAttribute("AdjOrgId"));
                newRow.setAttribute("AdjCoaId", currentRow.getAttribute("ArapCoaId"));
                System.out.println(newRow.getAttribute("AdjCoaId"));
                newRow.setAttribute("AdjSlNo", currentRow.getAttribute("ArapGlSlNo"));
                System.out.println(newRow.getAttribute("AdjSlNo"));
                newRow.setAttribute("AdjArapSlNo", currentRow.getAttribute("ArapslNo"));
                System.out.println(newRow.getAttribute("AdjArapSlNo"));
                newRow.setAttribute("AdjCurrIdSp", currentRow.getAttribute("ArapCurrIdSp"));
                System.out.println(newRow.getAttribute("AdjCurrIdSp"));
                newRow.setAttribute("AdjTab", currentRow.getAttribute("ArapFlg"));
                System.out.println(newRow.getAttribute("AdjTab"));
                newRow.setAttribute("AdjAmtAdj", currentRow.getAttribute("ArapAmtAdj"));
                System.out.println("Adjusted amount is----->" + currentRow.getAttribute("ArapAmtAdj"));
                System.out.println(newRow.getAttribute("AdjAmtAdj"));
                newRow.setAttribute("RadjAmtSp", currentRow.getAttribute("ArapAmtSp"));
                System.out.println(newRow.getAttribute("RadjAmtSp"));
                newRow.setAttribute("AdjTxnFlg", currentRow.getAttribute("ArapTxnAdvFlg"));
                System.out.println(newRow.getAttribute("AdjTxnFlg"));
                newRow.setAttribute("RadjVouId", currentRow.getAttribute("ArapVouId"));
                System.out.println("RadjVouId is---->" + newRow.getAttribute("RadjVouId"));
                newRow.setAttribute("RadjVouDt", currentRow.getAttribute("ArapVouDt"));
                System.out.println(newRow.getAttribute("RadjVouDt"));
                newRow.setAttribute("RadjSlNo", currentRow.getAttribute("ArapGlSlNo"));
                System.out.println(newRow.getAttribute("RadjSlNo"));
                newRow.setAttribute("RadjAmtAdj", new Number(0));
                System.out.println(newRow.getAttribute("RadjAmtAdj"));
                newRow.setAttribute("RadjArapSlNo", currentRow.getAttribute("ArapslNo"));
                System.out.println(newRow.getAttribute("RadjArapSlNo"));
                newRow.setAttribute("RadjTab", currentRow.getAttribute("ArapFlg"));
                System.out.println(newRow.getAttribute("RadjTab"));
                newRow.setAttribute("GlAdjAmtOT", currentRow.getAttribute("ArapNetAmtOt"));
                System.out.println(newRow.getAttribute("GlAdjAmtOT"));
                newRow.setAttribute("GlTxnTyp", "B");
                System.out.println(newRow.getAttribute("GlTxnTyp"));
                Date d1 = (Date)newRow.getAttribute("RadjVouDt");
                String mstVouId = newRow.getAttribute("AdjVouId").toString();
                Date MstVouDt = (Date)newRow.getAttribute("AdjVouDt");
                Integer MstSlNo = Integer.parseInt(newRow.getAttribute("AdjSlNo").toString());
                newRow.setAttribute("AdjMstVouId", mstVouId);
                System.out.println(newRow.getAttribute("AdjMstVouId"));
                newRow.setAttribute("AdjMstVouDt", MstVouDt);
                System.out.println(newRow.getAttribute("AdjMstVouDt"));
                newRow.setAttribute("AdjMstSlNo", MstSlNo);
                System.out.println(newRow.getAttribute("AdjMstSlNo"));
                System.out.println("User ID :" + newRow.getAttribute("UsrIdCreate"));
                tVou.executeQuery();
            }
            /*    getViewValues1(Integer.parseInt(currentRow.getAttribute("ArapEoId").toString()),
                               newRow.getAttribute("TvouRadjVouId").toString(), d1, mstVouId, MstVouDt, MstSlNo,
                               getArApFlg()); */

            //        }

        }
        /* if (tVou.getRowCount() != 0) {
            RowSetIterator adjItr = tVou.createRowSetIterator(null);

            while (adjItr.hasNext()) {
                Row tvouAdjRow = adjItr.next();
                if (Integer.parseInt(tvouAdjRow.getAttribute("TvouRadjAmtAdj").toString()) != 0) {
                    Date d1 = (Date)tvouAdjRow.getAttribute("TvouRadjVouDt");
                    String mstVouId = tvouAdjRow.getAttribute("TvouAdjVouId").toString();
                    Date MstVouDt = (Date)tvouAdjRow.getAttribute("TvouAdjVouDt");
                    Integer MstSlNo = Integer.parseInt(tvouAdjRow.getAttribute("TvouAdjSlNo").toString());

                    getViewValues1((tvouAdjRow.getAttribute("TvouAdjCoaId").toString()),
                                   tvouAdjRow.getAttribute("TvouRadjVouId").toString(), d1, mstVouId, MstVouDt,
                                   MstSlNo, getArApFlg());

                }
            }
            adjItr.closeRowSetIterator();
        } */
        rit.closeRowSetIterator();
        v1.setWhereClause("");
        v1.executeQuery();
        //  TvouAdjVORowImpl empRow = (TvouAdjVORowImpl)tVou.getCurrentRow();
    }

    public void setArApFlg(String arApFlg) {
        GlAppAMImpl.arApFlg = arApFlg;
    }

    public String getArApFlg() {
        return arApFlg;
    }

    public void setTab(String tab) {
        this.tab = tab;
    }

    public String getTab() {
        return tab;
    }


    /**
     * Container's getter for GlAdjTmpDtl1.
     * @return GlAdjTmpDtl1
     */
    public ViewObjectImpl getGlAdjTmpDtl1() {
        return (ViewObjectImpl)findViewObject("GlAdjTmpDtl1");
    }

    /**
     * Container's getter for AdjAdjDtlVL1.
     * @return AdjAdjDtlVL1
     */
    public ViewLinkImpl getAdjAdjDtlVL1() {
        return (ViewLinkImpl)findViewLink("AdjAdjDtlVL1");
    }

    /**
     * Container's getter for GlAdjTmpDtl1_1.
     * @return GlAdjTmpDtl1_1
     */
    public ViewObjectImpl getGlAdjTmpDtl1_1() {
        return (ViewObjectImpl)findViewObject("GlAdjTmpDtl1_1");
    }

    /**
     * Container's getter for AdjDtlDtl1VL1.
     * @return AdjDtlDtl1VL1
     */
    public ViewLinkImpl getAdjDtlDtl1VL1() {
        return (ViewLinkImpl)findViewLink("AdjDtlDtl1VL1");
    }

    public void refreshAdvanceValues(String eoOrCoa) {
        System.out.println(eoOrCoa);
        ViewObject tVou = getGlAdjTmp1();
        ViewObject arapView = getARAPOS1();

        ViewObject tVouDtl = getGlAdjTmpDtl1();

        ViewObject tVouLine = getGlLines1();
        Row LnRow = tVouLine.getCurrentRow();
        setCurrId(Integer.parseInt(LnRow.getAttribute("GlCurrIdSp").toString()));

        if (Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 2 ||
            Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 4) {
            setTab("Dr");

        }
        if (Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 3 ||
            Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 5) {
            setTab("Cr");

        }

        // System.out.println(arapView.getRowCount());
        if (tVou.getEstimatedRowCount() != 0) {

            if (eoOrCoa.equals("coa")) {
                arapView.setWhereClause("ARAP_COA_ID = " + tVou.getCurrentRow().getAttribute("AdjCoaId") +
                                        "and ARAP_AMT_TYP = '" + getTab() + "' and ARAP_NET_AMT_OT > 0");
                arapView.executeQuery();
                // System.out.println("where clause" + arapView.getRowCount());
            }
            if (eoOrCoa.equals("eo")) {
                getEoFronCoa("pkg_fin.get_coa_msteo(?,?,?,?,?,?)",
                             new Object[] { tVou.getCurrentRow().getAttribute("AdjSlocId"),
                                            tVou.getCurrentRow().getAttribute("AdjCoaId"),
                                            tVou.getCurrentRow().getAttribute("AdjOrgId") });
                arapView.setWhereClause("ARAP_EOMST_ID = " + getEoId() + "and ARAP_AMT_TYP = '" + getTab() +
                                        "' and ARAP_NET_AMT_OT > 0");
                arapView.executeQuery();
                //System.out.println("where clause" + arapView.getRowCount());
            }
            RowSetIterator adjItr = arapView.createRowSetIterator(null);
            //RowSetIterator rit = tVou.createRowSetIterator(null);
            //      while (rit.hasNext()) {
            //System.out.println("adj row " + rit.getRowCount());
            Row adjRow = tVou.getCurrentRow();
            /*   while (adjItr.hasNext()) {
                // System.out.println("arap count" + adjItr.getRowCount());
                //check for l2 is allowed or not
                //l2.eo_mst_id = l1.eo_mst_id
                //l2.change eo_id like l1.eo_id
                //remove l2.coa_id linkage
                //balance opposite of L1
                //outstanding bal > 0

                Row currentTouDt = adjItr.next();

                Row newAdjDt = tVouDtl.createRow();
                // System.out.println("rowinsert");
                newAdjDt.setAttribute("AdjSlocId", currentTouDt.getAttribute("ArapSlocId"));
                newAdjDt.setAttribute("AdjApplInstId", currentTouDt.getAttribute("ArapApplInstId"));
                newAdjDt.setAttribute("AdjOrgId", currentTouDt.getAttribute("ArapOrgId"));
                // System.out.println("coaid of arapcoaid is==="+currentTouDt.getAttribute("ArapCoaId"));
                newAdjDt.setAttribute("AdjCoaId", currentTouDt.getAttribute("ArapCoaId"));
                newAdjDt.setAttribute("AdjSlNo", currentTouDt.getAttribute("ArapGlSlNo"));
                newAdjDt.setAttribute("AdjArapSlNo", currentTouDt.getAttribute("ArapslNo"));
                newAdjDt.setAttribute("AdjCurrIdSp", currentTouDt.getAttribute("ArapCurrIdSp"));
                newAdjDt.setAttribute("RadjTab", currentTouDt.getAttribute("ArapFlg"));
                newAdjDt.setAttribute("RadjAmtSp", currentTouDt.getAttribute("ArapAmtSp"));
                newAdjDt.setAttribute("AdjAmtAdj", currentTouDt.getAttribute("ArapAmtAdj"));
                newAdjDt.setAttribute("RadjAmtAdj", new Number(0));
                newAdjDt.setAttribute("AdjTxnFlg", currentTouDt.getAttribute("ArapTxnAdvFlg"));
                newAdjDt.setAttribute("RadjVouId", currentTouDt.getAttribute("ArapVouId"));
                newAdjDt.setAttribute("RadjVouDt", currentTouDt.getAttribute("ArapVouDt"));
                newAdjDt.setAttribute("RadjSlNo", currentTouDt.getAttribute("ArapGlSlNo"));
                newAdjDt.setAttribute("RadjArapSlNo", currentTouDt.getAttribute("ArapslNo"));
                newAdjDt.setAttribute("AdjTab", currentTouDt.getAttribute("ArapFlg"));
                newAdjDt.setAttribute("GlAdjAmtOT", currentTouDt.getAttribute("ArapNetAmtOt"));
                newAdjDt.setAttribute("AdjMstVouId", adjRow.getAttribute("AdjMstVouId"));
                newAdjDt.setAttribute("AdjMstVouDt", adjRow.getAttribute("AdjMstVouDt"));
                newAdjDt.setAttribute("AdjMstSlNo", adjRow.getAttribute("AdjMstSlNo"));
                newAdjDt.setAttribute("sumAdjVl", new Number(0));
                newAdjDt.setAttribute("GlRefId", adjRow.getAttribute("RadjVouId"));
                newAdjDt.setAttribute("GlRefDt", adjRow.getAttribute("RadjVouDt"));
                //System.out.println("hooorgid iss====="+adjRow.getAttribute("GlHoOrgId"));
                // System.out.println("cldidddd iss====="+adjRow.getAttribute("GlCldId"));
                newAdjDt.setAttribute("GlCldId", adjRow.getAttribute("GlCldId"));
                newAdjDt.setAttribute("GlHoOrgId", adjRow.getAttribute("GlHoOrgId"));
                //newAdjDt.setAttribute("GlAmtTyp", currentTouDt.getAttribute("ArapAmtTyp"));
                newAdjDt.setAttribute("GlTxnTyp", "A");
                tVouDtl.insertRow(newAdjDt);

                //      }
            }

            //     }
            tVouDtl.executeQuery();
        } */
            arapView.setWhereClause("");
            arapView.executeQuery();
        }
    }
    private Integer eoId;

    protected Object getEoFronCoa(String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, NUMBER);
            st.registerOutParameter(5, NUMBER);
            st.registerOutParameter(6, VARCHAR);
            st.registerOutParameter(7, VARCHAR);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                    System.out.println(z + " .....  " + bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            System.out.println("1 " + st.getObject(1) + " 2 " + st.getObject(5) + " 3 " + st.getObject(6) + " 4 " +
                               st.getObject(7));
            setEoId(Integer.parseInt(st.getObject(5).toString()));
            //       setTvouEomstId(Integer.parseInt(st.getObject(5).toString()));
            return null;
        } catch (SQLException e) {

            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    public void setEoId(Integer eoId) {
        this.eoId = eoId;
    }

    public Integer getEoId() {
        return eoId;
    }

    public void drCrNoteAdj() {

        ViewObject v1 = getARAPOS1();
        RowSetIterator rit = v1.createRowSetIterator(null);
        ViewObject tVou = getGlAdjTmp1();
        ViewObject tVouLine = getGlLines1();
        Row LnRow = tVouLine.getCurrentRow();

        if (Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 9 ||
            Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 10) {
            tab = "Cr";
        }
        if (Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 11 ||
            Integer.parseInt(LnRow.getAttribute("GlTypeId").toString()) == 12) {
            tab = "Dr";
        }
        // if (tVou.getFetchedRowCount() == 0) {
        while (rit.hasNext()) {
            Row currentRow = rit.next();
            if (LnRow.getAttribute("GlCoaId").equals(currentRow.getAttribute("ArapCoaId")) &&
                currentRow.getAttribute("ArapAmtTyp").equals(tab)) {

                Row newRow = tVou.createRow();
                newRow.setAttribute("AdjSlocId", currentRow.getAttribute("ArapSlocId"));
                newRow.setAttribute("AdjApplInstId", currentRow.getAttribute("ArapApplInstId"));
                newRow.setAttribute("AdjOrgId", currentRow.getAttribute("ArapOrgId"));
                newRow.setAttribute("AdjCoaId", currentRow.getAttribute("ArapCoaId"));
                newRow.setAttribute("AdjSlNo", currentRow.getAttribute("ArapGlSlNo"));
                newRow.setAttribute("AdjArapSlNo", currentRow.getAttribute("ArapslNo"));
                newRow.setAttribute("AdjCurrIdSp", currentRow.getAttribute("ArapCurrIdSp"));
                newRow.setAttribute("AdjTab", currentRow.getAttribute("ArapFlg"));
                newRow.setAttribute("AdjAmtAdj", currentRow.getAttribute("ArapAmtAdj"));
                newRow.setAttribute("RadjAmtSp", currentRow.getAttribute("ArapAmtSp"));
                newRow.setAttribute("AdjTxnFlg", currentRow.getAttribute("ArapTxnAdvFlg"));
                newRow.setAttribute("RadjVouId", currentRow.getAttribute("ArapVouId"));
                newRow.setAttribute("RadjVouDt", currentRow.getAttribute("ArapVouDt"));
                newRow.setAttribute("RadjSlNo", currentRow.getAttribute("ArapGlSlNo"));
                newRow.setAttribute("RadjAmtAdj", new Number(0));
                System.out.println(currentRow.getAttribute("ArapFlg"));
                newRow.setAttribute("RadjArapSlNo", currentRow.getAttribute("ArapslNo"));
                newRow.setAttribute("RadjTab", currentRow.getAttribute("ArapFlg"));
                newRow.setAttribute("AdjAmtOT", currentRow.getAttribute("ArapNetAmtOt"));
                newRow.setAttribute("GlTxnTyp", "B");

                Date d1 = (Date)newRow.getAttribute("RadjVouDt");
                String mstVouId = newRow.getAttribute("AdjVouId").toString();
                Date MstVouDt = (Date)newRow.getAttribute("AdjVouDt");
                Integer MstSlNo = Integer.parseInt(newRow.getAttribute("AdjSlNo").toString());
                newRow.setAttribute("AdjMstVouId", mstVouId);
                newRow.setAttribute("AdjMstVouDt", MstVouDt);
                newRow.setAttribute("AdjMstSlNo", MstSlNo);
                tVou.insertRow(newRow);
                tVou.executeQuery();

                //               }
                //        }
            }

        }

        //System.out.println(tVou.getRowCount());
        rit.closeRowSetIterator();
    }

    public void setCurrId(Integer currId) {
        this.currId = currId;
    }

    public Integer getCurrId() {
        return currId;
    }


    public String validateChqNo(Integer p_sloc_id, Integer p_bnk_id, Integer p_chq_buk_id, Number p_chq_no) {
        System.out.println(p_bnk_id + "-----" + p_chq_buk_id + "-------" + p_chq_no);
        return (String)callStoredFunction(VARCHAR, "pkg_fin.fn_validate_chq_no (?,?,?,?)",
                                          new Object[] { p_sloc_id, p_bnk_id, p_chq_buk_id, p_chq_no });
    }

    public String updateChqNo(Integer p_sloc_id, Integer p_bnk_id, Integer p_chq_buk_id, Number p_chq_no,
                              String p_org_id, Integer p_doc_id, String p_vou_id, Date p_vou_dt, Integer p_usr_id,
                              Integer p_chq_bk_stat, Date p_chq_bk_stat_dt, Date p_mod_dt, String p_post_flg) {
        System.out.println(p_sloc_id + " " + p_bnk_id + " " + p_chq_buk_id + " " + p_chq_no + " " + p_org_id + " " +
                           p_doc_id + " " + p_vou_id + " " + p_vou_dt + " " + p_usr_id + " " + p_chq_bk_stat + " " +
                           p_chq_bk_stat_dt + " " + p_mod_dt + " " + p_post_flg);

        return (String)callStoredFunction(VARCHAR, "pkg_fin.fn_upd_chq_no_data (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                          new Object[] { p_sloc_id, p_bnk_id, p_chq_buk_id, p_chq_no, p_org_id,
                                                         p_doc_id, p_vou_id, p_vou_dt, p_usr_id, p_chq_bk_stat,
                                                         p_chq_bk_stat_dt, p_mod_dt, p_post_flg });

    }


    public String getLastChqNo(Integer p_sloc_id, Integer p_bnk_id, String p_search_mode, Integer p_chq_buk_id) {

        String chqSlNO =
            callStoredFunction(VARCHAR, "pkg_fin.fn_get_chq_no (?,?,?,?)", new Object[] { p_sloc_id, p_bnk_id,
                                                                                          p_search_mode,
                                                                                          p_chq_buk_id }).toString();
        System.out.println("Cheque Book Serial No.----->" + chqSlNO);
        return chqSlNO;
    }

    /**
     * Container's getter for LovVouId1.
     * @return LovVouId1
     */
    public ViewObjectImpl getLovVouId1() {
        return (ViewObjectImpl)findViewObject("LovVouId1");
    }

    /**
     * Container's getter for LovSubTypeId1.
     * @return LovSubTypeId1
     */
    public ViewObjectImpl getLovSubTypeId1() {
        return (ViewObjectImpl)findViewObject("LovSubTypeId1");
    }

    /**
     * Container's getter for LovOrgId1.
     * @return LovOrgId1
     */
    public LovOrgIdVOImpl getLovOrgId1() {
        return (LovOrgIdVOImpl)findViewObject("LovOrgId1");
    }

    /**
     * Container's getter for LovGlTypeId1.
     * @return LovGlTypeId1
     */
    public ViewObjectImpl getLovGlTypeId1() {
        return (ViewObjectImpl)findViewObject("LovGlTypeId1");
    }

    /**
     * Container's getter for LovDistVouTyp1.
     * @return LovDistVouTyp1
     */
    public ViewObjectImpl getLovDistVouTyp1() {
        return (ViewObjectImpl)findViewObject("LovDistVouTyp1");
    }

    /**
     * Container's getter for LovDistCoa1.
     * @return LovDistCoa1
     */
    public ViewObjectImpl getLovDistCoa1() {
        return (ViewObjectImpl)findViewObject("LovDistCoa1");
    }

    /**
     * Container's getter for LovCogId1.
     * @return LovCogId1
     */
    public ViewObjectImpl getLovCogId1() {
        return (ViewObjectImpl)findViewObject("LovCogId1");
    }

    /**
     * Container's getter for GlSearchView.
     * @return GlSearchView
     */
    public GlSearchViewVOImpl getGlSearchView() {
        return (GlSearchViewVOImpl)findViewObject("GlSearchView");
    }

    /**
     * Container's getter for LovCurrId1.
     * @return LovCurrId1
     */
    public ViewObjectImpl getLovCurrId1() {
        return (ViewObjectImpl)findViewObject("LovCurrId1");
    }

    /**
     * Container's getter for LovCoa1.
     * @return LovCoa1
     */
    public ViewObjectImpl getLovCoa1() {
        return (ViewObjectImpl)findViewObject("LovCoa1");
    }

    /**
     * Container's getter for LovCogId2.
     * @return LovCogId2
     */
    public ViewObjectImpl getLovCogId2() {
        return (ViewObjectImpl)findViewObject("LovCogId2");
    }

    /**
     * Container's getter for LovCoaForHd1.
     * @return LovCoaForHd1
     */
    public LovCoaForHdVOImpl getLovCoaForHd1() {
        return (LovCoaForHdVOImpl)findViewObject("LovCoaForHd1");
    }

    /**
     * Container's getter for LovEo1.
     * @return LovEo1
     */
    public ViewObjectImpl getLovEo1() {
        return (ViewObjectImpl)findViewObject("LovEo1");
    }

    /**
     * Container's getter for LovEoMstNm1.
     * @return LovEoMstNm1
     */
    public ViewObjectImpl getLovEoMstNm1() {
        return (ViewObjectImpl)findViewObject("LovEoMstNm1");
    }

    /**
     * Container's getter for LovNaId1.
     * @return LovNaId1
     */
    public ViewObjectImpl getLovNaId1() {
        return (ViewObjectImpl)findViewObject("LovNaId1");
    }

    /**
     * Container's getter for LovCurrLatest1.
     * @return LovCurrLatest1
     */
    public ViewObjectImpl getLovCurrLatest1() {
        return (ViewObjectImpl)findViewObject("LovCurrLatest1");
    }

    /**
     * Function to call a database function for inserting opposite line for bank and cash vouchers in to tvou line.
     * */
    public void glLineOp() {
        try {
            ViewObjectImpl glV = getGl1();
            Row glVRow = glV.getCurrentRow();
            String vouId = glVRow.getAttribute("GlVouId").toString();
            Integer slocid = Integer.parseInt(glVRow.getAttribute("GlSlocId").toString());
            String orgId = glVRow.getAttribute("GlOrgId").toString();
            String cldId = glVRow.getAttribute("GlCldId").toString();
            String hoOrgId = glVRow.getAttribute("GlHoOrgId").toString();
            System.out.println("Voucher id for this Voucher--->" + vouId + "org-->" + orgId + "cld--" + cldId +
                               "go org--" + hoOrgId);
            callStoredFunction(NUMBER, "FIN.PKG_FIN_GL.FN_GL_LINE_HDR_LINE_OP(?,?,?,?,?)",
                               new Object[] { vouId, slocid, orgId, hoOrgId, cldId });
        } catch (Exception nfe) {
            System.out.println(nfe);
            nfe.printStackTrace();
        }
    }

    public void fnInsPageNavigation(Integer P_USR_ID, Integer P_DOC_ID, Date P_NAV_DATE) {
        System.out.println("fnInsPageNavigation---Ashish " + P_USR_ID + " " + P_DOC_ID + " " + P_NAV_DATE);
        callStoredFunction(VARCHAR, "APP.PKG_APP_ACTIVITY.FN_INS_PAGE_NAV_ACTIVITY(?,?,?)",
                           new Object[] { P_USR_ID, P_DOC_ID, P_NAV_DATE });
    }

    /** Function to call a database function to forward voucher according work flow.
     * @param slocId server location Id
     * @param orgId Organisation Id
     * @param docId Documentation Id (For GL its 56)
     * @param docTypEntId Document Entity Type (Which is 5055)
     * @param docTypeId voucher type id
     * @param docTxnId voucher id
     * @param docTxnDt voucher date
     * @param docUsrId user id
     * @param userLvlFwd level of user to which voucher is forwarded
     * @param docUsrIdFwd user to whom voucher is forwarded
     * @param docFwdPri forward priority
     * @param txnMode mode of forwarding
     * @param comment comment if any
     */
    public void forwardVoucherFun(Integer slocId, String orgId, Integer docId, Integer docTypeId, String docTxnId,
                                  Date docTxnDt, Integer wfId, Integer docUsrId, Integer docUsrIdFwd,
                                  Integer docFwdPri, String txnMode, String comment) {

        System.out.println("forward function " + slocId + " " + orgId + " " + docId + " " + docTypeId + " " +
                           docTxnId + " " + docTxnDt + " " + wfId + " " + docUsrId + " " + docUsrIdFwd + " " +
                           docFwdPri + " " + txnMode + " " + comment);

        callStoredFunction(VARCHAR, "APP.WF_FWD (?,?,?,?,?,?,?,?,?,?,?,?)",
                           new Object[] { slocId, orgId, docId, docTypeId, docTxnId, docTxnDt, wfId, docUsrId,
                                          docUsrIdFwd, docFwdPri, txnMode, comment });

    }

    public void fnInsDocActivity(Integer P_SLOC_ID, Integer P_USR_ID_OWN, Integer P_USR_ID_OTHR1,
                                 Integer P_USR_ID_OTHR2, String P_ACTIVITY, String P_DISP_DOC_ID, Date P_DISP_DOC_DATE,
                                 Integer P_DOC_ID, Integer P_DOC_TYPE_ID, Integer P_DOC_SUB_TYPE_ID) {
        System.out.println("PARAMS--- fnInsDocActivity " + P_SLOC_ID + "--   " + P_USR_ID_OWN + "   " +
                           P_USR_ID_OTHR1 + "  " + P_USR_ID_OTHR2 + " " + P_ACTIVITY + "  " + P_DISP_DOC_ID + ",  " +
                           P_DISP_DOC_DATE + ",  " + P_DOC_ID + " " + P_DOC_TYPE_ID);
        callStoredFunction(VARCHAR, "APP.PKG_APP_ACTIVITY.FN_INS_DOC_ACTIVITY(?,?,?,?,?,?,?,?,?,?)",
                           new Object[] { P_SLOC_ID, P_USR_ID_OWN, P_USR_ID_OTHR1, P_USR_ID_OTHR2, P_ACTIVITY,
                                          P_DISP_DOC_ID, P_DISP_DOC_DATE, P_DOC_ID, P_DOC_TYPE_ID,
                                          P_DOC_SUB_TYPE_ID });
    }

    public String isOrgDocInWf(Integer P_SLOC_ID, String P_ORG_ID, Integer P_DOC_ID) {
        System.out.println("isOrgDocInWf " + P_SLOC_ID + " " + P_ORG_ID + " " + P_DOC_ID);
        return callStoredFunction(VARCHAR, "APP.PKG_WF.fn_is_ORG_doc_in_wf(?,?,?)",
                                  new Object[] { P_SLOC_ID, P_ORG_ID, P_DOC_ID }).toString();
    }


    public String fnChkOrgDocActivity(Integer P_SLOC_ID, String P_ORG_ID, Integer P_DOC_ID, Integer P_DOC_TYPE_ID,
                                      String P_ACTIVITY) {
        System.out.println("fnChkOrgDocActivity  " + P_SLOC_ID + " " + P_ORG_ID + " " + P_DOC_ID + " " +
                           P_DOC_TYPE_ID + " " + P_ACTIVITY);
        return callStoredFunction(VARCHAR, "APP.PKG_APP_ACTIVITY.FN_CHK_ORG_DOC_ACTIVITY_PROP(?,?,?,?,?)",
                                  new Object[] { P_SLOC_ID, P_ORG_ID, P_DOC_ID, P_DOC_TYPE_ID,
                                                 P_ACTIVITY }).toString();
    }

    /**
     * Container's getter for GlTaxRuleLine2.
     * @return GlTaxRuleLine2
     */
    public ViewObjectImpl getGlTaxRuleLine2() {
        return (ViewObjectImpl)findViewObject("GlTaxRuleLine2");
    }

    /**
     * Task Flow Global Exception Handeler
     * @ Ashish Kumar- 12-03-2013
     */
    public void exceptionHandeler() {
        System.out.println("Inside Handeler");
        StringBuilder msg = new StringBuilder();
        msg.append("<html><body><p><b>Failed to load content-Network Error</b></p>");
        msg.append("<p><b>Data Processing Failed-</b></p>");
        msg.append("<ul><li>Reload the page</li><li>Or close tab</li><li>Something went wrong-Contact ESS!</li></ul>");
        msg.append("</body></html>");
        FacesMessage message = new FacesMessage(msg.toString());
        message.setSeverity(FacesMessage.SEVERITY_WARN);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, message);

    }

    /**
     * Container's getter for glAmtDtl1.
     * @return glAmtDtl1
     */
    public ViewObjectImpl getglAmtDtl1() {
        return (ViewObjectImpl)findViewObject("glAmtDtl1");
    }

    /**
     * Container's getter for GlAdjTmpTOGlAmtDtlVL1.
     * @return GlAdjTmpTOGlAmtDtlVL1
     */
    public ViewLinkImpl getGlAdjTmpTOGlAmtDtlVL1() {
        return (ViewLinkImpl)findViewLink("GlAdjTmpTOGlAmtDtlVL1");
    }

    /**
     * Container's getter for GlAdvDtl1.
     * @return GlAdvDtl1
     */
    public ViewObjectImpl getGlAdvDtl1() {
        return (ViewObjectImpl)findViewObject("GlAdvDtl1");
    }

    /**
     * Container's getter for GlAdjTmpTOGlAdvDtlVL1.
     * @return GlAdjTmpTOGlAdvDtlVL1
     */
    public ViewLinkImpl getGlAdjTmpTOGlAdvDtlVL1() {
        return (ViewLinkImpl)findViewLink("GlAdjTmpTOGlAdvDtlVL1");
    }

    /**
     * Container's getter for LovCoa3.
     * @return LovCoa3
     */
    public ViewObjectImpl getLovCoa3() {
        return (ViewObjectImpl)findViewObject("LovCoa3");
    }

    /**
     * Container's getter for GlBillDtlVO1.
     * @return GlBillDtlVO1
     */
    public ViewObjectImpl getGlBillDtlVO1() {
        return (ViewObjectImpl)findViewObject("GlBillDtlVO1");
    }

    /**
     * Container's getter for GlLinesTOGlBilDtlVL1.
     * @return GlLinesTOGlBilDtlVL1
     */
    public ViewLinkImpl getGlLinesTOGlBilDtlVL1() {
        return (ViewLinkImpl)findViewLink("GlLinesTOGlBilDtlVL1");
    }


    /**
     * Container's getter for GlLineInstrumnt.
     * @return GlLineInstrumnt
     */
    public ViewObjectImpl getGlLineInstrumnt() {
        return (ViewObjectImpl)findViewObject("GlLineInstrumnt");
    }

    /**
     * Container's getter for GlInstrumentVL1.
     * @return GlInstrumentVL1
     */
    public ViewLinkImpl getGlInstrumentVL1() {
        return (ViewLinkImpl)findViewLink("GlInstrumentVL1");
    }

    /**
     * Container's getter for GlSearchFieldVO.
     * @return GlSearchFieldVO
     */
    public ViewObjectImpl getGlSearchFieldVO() {
        return (ViewObjectImpl)findViewObject("GlSearchFieldVO");
    }

    /**
     * Container's getter for GlLinesVO1.
     * @return GlLinesVO1
     */
    public GlLinesVOImpl getGlLinesVO1() {
        return (GlLinesVOImpl)findViewObject("GlLinesVO1");
    }

    public void setparmvalue() {
        ViewObjectImpl vo = getGlLines1();
        ViewObjectImpl vo1 = getARAPOS1();
        //System.out.println("vo.getCurrentRow().getAttribute(\"GlSlocId\")"+vo.getCurrentRow().getAttribute("GlSlocId"));
        //System.out.println(" vo.getCurrentRow().getAttribute(\"GlOrgId\"))"+ vo.getCurrentRow().getAttribute("GlOrgId"));
        //System.out.println("vo.getCurrentRow().getAttribute(\"GlCoaId\")"+vo.getCurrentRow().getAttribute("GlCoaId"));
        //System.out.println("vo.getCurrentRow().getAttribute(\"GlVouId\")"+vo.getCurrentRow().getAttribute("GlVouId"));
        vo1.setNamedWhereClauseParam("slocidbind", vo.getCurrentRow().getAttribute("GlSlocId"));
        vo1.setNamedWhereClauseParam("orgidbind", vo.getCurrentRow().getAttribute("GlOrgId"));
        vo1.setNamedWhereClauseParam("coaidbind", vo.getCurrentRow().getAttribute("GlCoaId"));
        // vo1.setNamedWhereClauseParam("vouidbind",  vo.getCurrentRow().getAttribute("GlVouId"));

    }

    /**
     * Container's getter for LOVCoaAdvVO1.
     * @return LOVCoaAdvVO1
     */
    public LOVCoaAdvVOImpl getLOVCoaAdvVO1() {
        return (LOVCoaAdvVOImpl)findViewObject("LOVCoaAdvVO1");
    }

    /**
     * Container's getter for GlLineInfoVO1.
     * @return GlLineInfoVO1
     */
    public ViewObjectImpl getGlLineInfoVO1() {
        return (ViewObjectImpl)findViewObject("GlLineInfoVO1");
    }

    /**
     * Container's getter for GlLinesToGlLinesInfo1.
     * @return GlLinesToGlLinesInfo1
     */
    public ViewLinkImpl getGlLinesToGlLinesInfo1() {
        return (ViewLinkImpl)findViewLink("GlLinesToGlLinesInfo1");
    }


    /**
     * Container's getter for GlAdjTmpVO1.
     * @return GlAdjTmpVO1
     */
    public GlAdjTmpVOImpl getGlAdjTmpVO1() {
        return (GlAdjTmpVOImpl)findViewObject("GlAdjTmpVO1");
    }

    /**
     * Container's getter for GlToGlAdjTmpVL1.
     * @return GlToGlAdjTmpVL1
     */
    public ViewLinkImpl getGlToGlAdjTmpVL1() {
        return (ViewLinkImpl)findViewLink("GlToGlAdjTmpVL1");
    }

    public void setbindforGlAutoAdvDtl() {
        ViewObjectImpl glvo = getGl1();
        ViewObjectImpl gllinevo = getGlLines1();
        ViewObjectImpl autoadvvo = getGlAutoAdvDtlVO1();
        ViewObjectImpl adjadvDtlVO = getGlAdjAdvDtlVO1();
        ViewObjectImpl vo = getGlAdjTmpVO1();
        ViewObjectImpl vo1 = getGlAdjTmp1();
        autoadvvo.setNamedWhereClauseParam("BindCldID", glvo.getCurrentRow().getAttribute("GlCldId"));
        autoadvvo.setNamedWhereClauseParam("BindSlocID", glvo.getCurrentRow().getAttribute("GlSlocId"));
        autoadvvo.setNamedWhereClauseParam("BindVouID", glvo.getCurrentRow().getAttribute("GlVouId"));
        autoadvvo.executeQuery();
        adjadvDtlVO.setNamedWhereClauseParam("MstVouIdBind", glvo.getCurrentRow().getAttribute("GlVouId"));
        adjadvDtlVO.setNamedWhereClauseParam("SlocIdBind", glvo.getCurrentRow().getAttribute("GlSlocId"));
        adjadvDtlVO.setNamedWhereClauseParam("CldIdbind", glvo.getCurrentRow().getAttribute("GlCldId"));
        adjadvDtlVO.executeQuery();
        vo.setNamedWhereClauseParam("BindMstVouId", glvo.getCurrentRow().getAttribute("GlVouId"));
        vo.executeQuery();
        vo1.setNamedWhereClauseParam("BindMstVouId", gllinevo.getCurrentRow().getAttribute("GlVouId"));
        vo1.executeQuery();


    }

    /**
     * Container's getter for GlAutoAdvDtlVO1.
     * @return GlAutoAdvDtlVO1
     */
    public ViewObjectImpl getGlAutoAdvDtlVO1() {
        return (ViewObjectImpl)findViewObject("GlAutoAdvDtlVO1");
    }

    /**
     * Container's getter for GlAdjAdvDtlVO1.
     * @return GlAdjAdvDtlVO1
     */
    public ViewObjectImpl getGlAdjAdvDtlVO1() {
        return (ViewObjectImpl)findViewObject("GlAdjAdvDtlVO1");
    }

    /**
     * Container's getter for SumVO1.
     * @return SumVO1
     */
    public ViewObjectImpl getSumVO1() {
        return (ViewObjectImpl)findViewObject("SumVO1");
    }

    /**
     * Container's getter for UserLovVO1.
     * @return UserLovVO1
     */
    public ViewObjectImpl getUserLovVO1() {
        return (ViewObjectImpl)findViewObject("UserLovVO1");
    }

    /**
     * Container's getter for LovCoaVO1.
     * @return LovCoaVO1
     */
    public LovCoaVOImpl getLovCoaVO1() {
        return (LovCoaVOImpl)findViewObject("LovCoaVO1");
    }
}
