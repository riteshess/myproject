package opbalforallcoa.model.module;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import opbalforallcoa.model.module.common.OpBalCoasAM;
import opbalforallcoa.model.views.LovCoaIdVOImpl;
import opbalforallcoa.model.views.LovOrgFyIdVOImpl;
import opbalforallcoa.model.views.LovOrgIdVOImpl;
import opbalforallcoa.model.views.OrgCoaFyVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 04 10:45:08 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OpBalCoasAMImpl extends ApplicationModuleImpl implements OpBalCoasAM {
    /**
     * This is the default constructor (do not remove).
     */

    String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());

    public OpBalCoasAMImpl() {
    }

    /**
     * Container's getter for OrgCoaFy1.
     * @return OrgCoaFy1
     */
    public ViewObjectImpl getOrgCoaFy1() {
        return (ViewObjectImpl)findViewObject("OrgCoaFy1");
    }

    /**
     * Container's getter for LovOrgId1.
     * @return LovOrgId1
     */
    public ViewObjectImpl getLovOrgId1() {
        return (ViewObjectImpl)findViewObject("LovOrgId1");
    }

    /**
     * Container's getter for LovOrgFyId1.
     * @return LovOrgFyId1
     */
    public ViewObjectImpl getLovOrgFyId1() {
        return (ViewObjectImpl)findViewObject("LovOrgFyId1");
    }

    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaId1() {
        return (ViewObjectImpl)findViewObject("LovCoaId1");
    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object msg = valueExp.getValue(elContext);
        return msg;
    }


    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }


    public Integer on_load_page() {
        int count = 0;
        /*   String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
               Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
               String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
               Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());  */
        callStoredFunction(VARCHAR, "app.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                           new Object[] { cld_id, sloc_id, org_id, 1, usr_id });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        // paramMap.put("PARAM_PG_ADD_MD", add_mode);
        // paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        // paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        // paramMap.put("PARAM_PG_DEL_MD", del_mode);
        String addMode = resolvEl("#{pageFlowScope.PARAM_PG_ADD_MD}").toString();
        String editMode = resolvEl("#{pageFlowScope.PARAM_PG_EDIT_MD}").toString();
        String viewMode = resolvEl("#{pageFlowScope.PARAM_PG_VIEW_MD}").toString();
        String deleteMode = resolvEl("#{pageFlowScope.PARAM_PG_DEL_MD}").toString();
        return count;
    }

    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }


    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Container's getter for trnsSrch1.
     * @return trnsSrch1
     */
    public ViewObjectImpl gettrnsSrch1() {
        return (ViewObjectImpl)findViewObject("trnsSrch1");
    }

    /**
     * Container's getter for LovCurrId.
     * @return LovCurrId
     */
    public ViewObjectImpl getLovCurrId() {
        return (ViewObjectImpl)findViewObject("LovCurrId");
    }

    public void initViewExecution() {

        Integer fyid = null;
        if (resolvEl("#{pageFlowScope.PARAM_FY_ID}") != null) {
            fyid = Integer.parseInt(resolvEl("#{pageFlowScope.PARAM_FY_ID}").toString());
        }
        Integer coaId = null;
        if (resolvEl("#{pageFlowScope.PARAM_COA_ID}") != null) {
            coaId = Integer.parseInt(resolvEl("#{pageFlowScope.PARAM_COA_ID}").toString());
        }
        System.out.println("<<----- Parameters are cld_id = " + cld_id + " sloc_id = " + sloc_id + " ho_org_id = " +
                           ho_org_id + " org_id = " + org_id + " fyid = " + fyid + " coaId = " + coaId + "---->>" +
                           "mode  = " + resolvEl("#{pageFlowScope.PARAM_PG_CALLED}"));

        if (resolvEl("#{pageFlowScope.PARAM_PG_CALLED}") != null) {
            if (resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString().equalsIgnoreCase("P")) {
                System.out.println("in if when mode is p");
                ViewObjectImpl vo = this.getOrgCoaFy1();
                vo.setNamedWhereClauseParam("BindCldId", cld_id);
                vo.setNamedWhereClauseParam("BindSlocId", sloc_id);
                vo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);

                vo.setNamedWhereClauseParam("BindOrgId", org_id);
                vo.setNamedWhereClauseParam("BindFyId", fyid);
                vo.setNamedWhereClauseParam("BindCoaId", coaId);
                vo.executeQuery();
            }

        }

    }


    public void searchAction() {

        ViewObjectImpl trnsVo = this.gettrnsSrch1();
        System.out.println("in search action");

        if (trnsVo != null) {
            Row row = trnsVo.getCurrentRow();
            System.out.println("current row = " + row);
            if (row != null) {
                ViewObjectImpl vo = this.getOrgCoaFy1();
                System.out.println("vo = " + vo);
                if (vo != null) {
                    System.out.println("row.getAttribute(\"coaId\") = " + row.getAttribute("coaId"));
                    System.out.println("row.getAttribute(\"fytemp\") = " + row.getAttribute("fytemp"));
                    vo.setNamedWhereClauseParam("BindCldId", cld_id);
                    vo.setNamedWhereClauseParam("BindSlocId", sloc_id);
                    vo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
                    vo.setNamedWhereClauseParam("BindOrgId", org_id);
                    vo.setNamedWhereClauseParam("BindCoaId", row.getAttribute("coaId"));
                    vo.setNamedWhereClauseParam("BindFyId", row.getAttribute("fytemp"));
                    vo.executeQuery();
                    System.out.println("cld_id = " + cld_id + " sloc_id = " + sloc_id + " ho_org_id = " + ho_org_id +
                                       " org_id = " + org_id + " length  =" + vo.getAllRowsInRange().length);
                }
            }
        }
    }

    public void resetAction() {
        ViewObjectImpl vo = this.getOrgCoaFy1();
        if (vo != null) {
            vo.setNamedWhereClauseParam("BindCldId", null);
            vo.setNamedWhereClauseParam("BindSlocId", null);
            vo.setNamedWhereClauseParam("BindHoOrgId", null);

            vo.setNamedWhereClauseParam("BindOrgId", null);
            vo.setNamedWhereClauseParam("BindFyId", null);
            vo.setNamedWhereClauseParam("BindCoaId", null);
            vo.executeQuery();
        }
    }

}
