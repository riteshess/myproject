package batchpayment.model.views;

import batchpayment.model.module.BatchpayAMImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 07 10:36:34 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ParameterVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        J1 {
            public Object get(ParameterVORowImpl obj) {
                return obj.getJ1();
            }

            public void put(ParameterVORowImpl obj, Object value) {
                obj.setJ1((Integer)value);
            }
        }
        ,
        coa_id {
            public Object get(ParameterVORowImpl obj) {
                return obj.getcoa_id();
            }

            public void put(ParameterVORowImpl obj, Object value) {
                obj.setcoa_id((Integer)value);
            }
        }
        ,
        inst_dt {
            public Object get(ParameterVORowImpl obj) {
                return obj.getinst_dt();
            }

            public void put(ParameterVORowImpl obj, Object value) {
                obj.setinst_dt((Date)value);
            }
        }
        ,
        inst_no {
            public Object get(ParameterVORowImpl obj) {
                return obj.getinst_no();
            }

            public void put(ParameterVORowImpl obj, Object value) {
                obj.setinst_no((Integer)value);
            }
        }
        ,
        CldId {
            public Object get(ParameterVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(ParameterVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(ParameterVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(ParameterVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        HoOrgId {
            public Object get(ParameterVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(ParameterVORowImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        OrgId {
            public Object get(ParameterVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(ParameterVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        Fin_CoaVO1 {
            public Object get(ParameterVORowImpl obj) {
                return obj.getFin_CoaVO1();
            }

            public void put(ParameterVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ParameterVORowImpl object);

        public abstract void put(ParameterVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int J1 = AttributesEnum.J1.index();
    public static final int COA_ID = AttributesEnum.coa_id.index();
    public static final int INST_DT = AttributesEnum.inst_dt.index();
    public static final int INST_NO = AttributesEnum.inst_no.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int FIN_COAVO1 = AttributesEnum.Fin_CoaVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ParameterVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute J1.
     * @return the J1
     */
    public Integer getJ1() {
        return (Integer) getAttributeInternal(J1);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute J1.
     * @param value value to set the  J1
     */
    public void setJ1(Integer value) {
        setAttributeInternal(J1, value);
    }

    /**
     * Gets the attribute value for the calculated attribute coa_id.
     * @return the coa_id
     */
    public Integer getcoa_id() {
        BatchpayAMImpl am = (BatchpayAMImpl)getApplicationModule();
        ApPayVORowImpl pay = (ApPayVORowImpl)am.getApPay1().getCurrentRow();
        if(pay.getApPayBnkCoa() != null)
         return pay.getApPayBnkCoa();
        
        return (Integer) getAttributeInternal(COA_ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute coa_id.
     * @param value value to set the  coa_id
     */
    public void setcoa_id(Integer value) {
        setAttributeInternal(COA_ID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute inst_dt.
     * @return the inst_dt
     */
    public Date getinst_dt() {
        return (Date) getAttributeInternal(INST_DT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute inst_dt.
     * @param value value to set the  inst_dt
     */
    public void setinst_dt(Date value) {
        setAttributeInternal(INST_DT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute inst_no.
     * @return the inst_no
     */
    public Integer getinst_no() {
        return (Integer) getAttributeInternal(INST_NO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute inst_no.
     * @param value value to set the  inst_no
     */
    public void setinst_no(Integer value) {
        setAttributeInternal(INST_NO, value);
    }


    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        
        String str = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        if(str != null)
            return str;
        
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        String str = resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString();
                if(str != null)
                    return Integer.parseInt(str);
                
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        
        String str = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
                if(str != null)
                    return str;
                
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        String str = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                if(str != null)
                    return str;
                
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> Fin_CoaVO1.
     */
    public RowSet getFin_CoaVO1() {
        return (RowSet)getAttributeInternal(FIN_COAVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    public String resolvEl(String data){
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data,
        Object.class);
        String Message=valueExp.getValue(elContext).toString();
        return Message;
        }
    
}
