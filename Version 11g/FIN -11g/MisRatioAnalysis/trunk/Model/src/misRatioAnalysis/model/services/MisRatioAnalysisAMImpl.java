package misRatioAnalysis.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import misRatioAnalysis.model.services.common.MisRatioAnalysisAM;

import misRatioAnalysis.model.view.CategoryViewVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 15 11:37:08 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MisRatioAnalysisAMImpl extends ApplicationModuleImpl implements MisRatioAnalysisAM {

    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR; 
    private Integer maxFyId;
    private Integer financialyear;
   // public Integer catId;

    /**
     * This is the default constructor (do not remove).
     */
    public MisRatioAnalysisAMImpl() {
    }


    public void setProfitabilityRatioParameters(String p_org_id, String p_cld_id, Integer p_fy_id, Integer p_coa_id,
                                                Integer p_qtr_id, Integer p_mon_id) {
       Integer fyId = getMaxFyId(p_org_id, p_cld_id, p_fy_id);
        ViewObjectImpl profitYear = this.getProfitabiltyRatioYearVO();
        profitYear.setNamedWhereClauseParam("BindOrgId", p_org_id);
        profitYear.setNamedWhereClauseParam("BindCldId", p_cld_id);
        profitYear.executeQuery();

        ViewObjectImpl profitComp = this.getProfitabilityRatioComponentVO();
        profitComp.setNamedWhereClauseParam("BindOrgId", p_org_id);
        profitComp.setNamedWhereClauseParam("BindCldId", p_cld_id);
        profitComp.setNamedWhereClauseParam("BindFyId", fyId);
        profitComp.executeQuery();
    
        ViewObjectImpl profitQuad = this.getProfitabilityRatioQuarter1();
        
        profitQuad.setNamedWhereClauseParam("BindOrgId", p_org_id);
        profitQuad.setNamedWhereClauseParam("BindCldId", p_cld_id);    
        profitQuad.setNamedWhereClauseParam("BindFyId", fyId);

        profitQuad.executeQuery();

        ViewObjectImpl profitMonth = this.getProfitabilityRatioMonthlyVO();
        profitMonth.setNamedWhereClauseParam("BindOrgId", p_org_id);
        profitMonth.setNamedWhereClauseParam("BindCldId", p_cld_id);    
        profitMonth.setNamedWhereClauseParam("BindFyId", fyId);
        profitMonth.executeQuery();


    }    
    public void setParametersOfActivityRatio(String p_org_id, String p_cld_id, Integer p_fy_id) {
        Integer fyId = getMaxFyId(p_org_id, p_cld_id, p_fy_id);
        ViewObjectImpl yearActivity = this.getYearActivityRatioVO();
        yearActivity.setNamedWhereClauseParam("BindOrgId", p_org_id);
        yearActivity.setNamedWhereClauseParam("BindCldId", p_cld_id);
        
        yearActivity.executeQuery();

        ViewObjectImpl compActivity = this.getComponentActivityRatioVO();
        compActivity.setNamedWhereClauseParam("BindOrgId", p_org_id);
        compActivity.setNamedWhereClauseParam("BindCldId", p_cld_id);
        compActivity.setNamedWhereClauseParam("BindFyId", fyId);
        compActivity.executeQuery();

        ViewObjectImpl quadActivity = this.getQuarterActivityRatio1();
        quadActivity.setNamedWhereClauseParam("BindOrgId", p_org_id);
        quadActivity.setNamedWhereClauseParam("BindCldId", p_cld_id);
        quadActivity.setNamedWhereClauseParam("BindFyId", fyId);
        quadActivity.executeQuery();

        ViewObjectImpl monthActivity = this.getMonthActivityRatio1();
        monthActivity.setNamedWhereClauseParam("BindOrgId", p_org_id);
        monthActivity.setNamedWhereClauseParam("BindCldId", p_cld_id);
        monthActivity.setNamedWhereClauseParam("BindFyId", fyId);

        monthActivity.executeQuery();
    }
    public void setParametersOfLiquidityRatio(String p_org_id, String p_cld_id, Integer p_fy_id) {
        Integer fyId = getMaxFyId(p_org_id, p_cld_id, p_fy_id);
        ViewObjectImpl yearLiquidity = this.getYearLiquidityRatio1();
        yearLiquidity.setNamedWhereClauseParam("BindOrgId", p_org_id);
        yearLiquidity.setNamedWhereClauseParam("BindCldId", p_cld_id);
        
        yearLiquidity.executeQuery();

        ViewObjectImpl compLiquidity = this.getComponentLiquidityRatio1();
        compLiquidity.setNamedWhereClauseParam("BindOrgId", p_org_id);
        compLiquidity.setNamedWhereClauseParam("BindCldId", p_cld_id);
        compLiquidity.setNamedWhereClauseParam("BindFyId", fyId);
        compLiquidity.executeQuery();

        ViewObjectImpl quadLiquidity = this.getQuarterlyLiquidityRatio1();
        quadLiquidity.setNamedWhereClauseParam("BindOrgId", p_org_id);
        quadLiquidity.setNamedWhereClauseParam("BindCldId", p_cld_id);
        quadLiquidity.setNamedWhereClauseParam("BindFyId", fyId);

        quadLiquidity.executeQuery();

        ViewObjectImpl monthLiquidity = this.getMonthlyLiquidityRatio1();
        monthLiquidity.setNamedWhereClauseParam("BindOrgId", p_org_id);
        monthLiquidity.setNamedWhereClauseParam("BindCldId", p_cld_id);
        monthLiquidity.setNamedWhereClauseParam("BindFyId", fyId);

        monthLiquidity.executeQuery();

    }

    public void setParameters(String p_org_id, String p_cld_id, Integer p_fy_id, Integer p_coa_id, Integer p_qtr_id,
                              Integer p_mon_id) {
        Integer fyId = getMaxFyId(p_org_id, p_cld_id, p_fy_id);
        financialyear=fyId;       
        setProfitabilityRatioParameters(p_org_id, p_cld_id, fyId, p_coa_id, p_qtr_id, p_mon_id);
        setParametersOfActivityRatio(p_org_id,p_cld_id,fyId);        

        setParametersOfLiquidityRatio(p_org_id,p_cld_id,fyId);
        setLiquidityRatioComponent("CR");
        getFyId(p_org_id, p_cld_id, fyId);
      

     
    }

    public Integer getMaxFyId(String p_org_id, String p_cld_id, Integer p_fy_id) {

        if (p_fy_id == null && maxFyId == null) {

            maxFyId = getFyId(p_cld_id, p_org_id);

        } else {
            maxFyId = p_fy_id;
        }
        return maxFyId;
    }

    public void setLiquidityRatioComponent(String p_ratio_id) {
        ViewObjectImpl liquidityRatioComponent = this.getComponentLiquidityRatio1();
        liquidityRatioComponent.setNamedWhereClauseParam("BindRatioId", p_ratio_id);
        liquidityRatioComponent.executeQuery();

    }

    public void setActivityRatioComponent(String p_ratio_id) {

        ViewObjectImpl activityRatioComponent = this.getComponentActivityRatioVO();
        activityRatioComponent.setNamedWhereClauseParam("BindRatioId", p_ratio_id);
        activityRatioComponent.executeQuery();

    }
    public void setProfitabilityRatioComponent(String p_ratio_id) {
        ViewObjectImpl profitRatio = this.getProfitabilityRatioComponentVO();
        profitRatio.setNamedWhereClauseParam("BindRatioId", p_ratio_id);
        profitRatio.executeQuery();
    }

    public String getFyDesc(String p_cld_id, String p_org_id) {
        String fyDesc = "Current Financial Year";

        try {
            fyDesc =
                    (callStoredFunction(VARCHAR, "APP.FN_GET_MAX_FY_DESC(?,?,?)", new Object[] { p_cld_id, p_org_id, "FY" }).toString());
           
        } catch (NumberFormatException nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
        }
        return fyDesc;
    }

    private Integer getFyId(String cldId, String orgId) {

        Integer fyId = null;

        try {
            fyId =
Integer.parseInt(callStoredFunction(NUMERIC, "APP.FN_GET_MAX_FY(?,?,?)", new Object[] { cldId, orgId,
                                                                                        "FY" }).toString());
            

        } catch (NumberFormatException nfe) {
            // TODO: Add catch code
            // fyId = Integer.parseInt(getLovOrgFyVO().first().getAttribute("OrgFyId").toString());
            nfe.printStackTrace();
        }
        return fyId;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.getMessage().indexOf("\n");

            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }


    /**
     * Container's getter for ProfitabiltyRatioYearVO.
     * @return ProfitabiltyRatioYearVO
     */
    public ViewObjectImpl getProfitabiltyRatioYearVO() {
        return (ViewObjectImpl)findViewObject("ProfitabiltyRatioYearVO");
    }

    /**
     * Container's getter for ProfitabilityRatioComponentVO.
     * @return ProfitabilityRatioComponentVO
     */
    public ViewObjectImpl getProfitabilityRatioComponentVO() {
        return (ViewObjectImpl)findViewObject("ProfitabilityRatioComponentVO");
    }

    /**
     * Container's getter for ProfitabilityRatioMonthlyVO.
     * @return ProfitabilityRatioMonthlyVO
     */
    public ViewObjectImpl getProfitabilityRatioMonthlyVO() {
        return (ViewObjectImpl)findViewObject("ProfitabilityRatioMonthlyVO");
    }

    /**
     * Container's getter for ProfitabilityRatioQuarter1.
     * @return ProfitabilityRatioQuarter1
     */
    public ViewObjectImpl getProfitabilityRatioQuarter1() {
        return (ViewObjectImpl)findViewObject("ProfitabilityRatioQuarter1");
    }


    /**
     * Container's getter for YearActivityRatioVO.
     * @return YearActivityRatioVO
     */
    public ViewObjectImpl getYearActivityRatioVO() {
        return (ViewObjectImpl)findViewObject("YearActivityRatioVO");
    }


    /**
     * Container's getter for ComponentActivityRatioVO.
     * @return ComponentActivityRatioVO
     */
    public ViewObjectImpl getComponentActivityRatioVO() {
        return (ViewObjectImpl)findViewObject("ComponentActivityRatioVO");
    }

    /**
     * Container's getter for QuarterActivityRatio1.
     * @return QuarterActivityRatio1
     */
    public ViewObjectImpl getQuarterActivityRatio1() {
        return (ViewObjectImpl)findViewObject("QuarterActivityRatio1");
    }

    /**
     * Container's getter for MonthActivityRatio1.
     * @return MonthActivityRatio1
     */
    public ViewObjectImpl getMonthActivityRatio1() {
        return (ViewObjectImpl)findViewObject("MonthActivityRatio1");
    }

    /**
     * Container's getter for YearLiquidityRatio1.
     * @return YearLiquidityRatio1
     */
    public ViewObjectImpl getYearLiquidityRatio1() {
        return (ViewObjectImpl)findViewObject("YearLiquidityRatio1");
    }


    /**
     * Container's getter for ComponentLiquidityRatio1.
     * @return ComponentLiquidityRatio1
     */
    public ViewObjectImpl getComponentLiquidityRatio1() {
        return (ViewObjectImpl)findViewObject("ComponentLiquidityRatio1");
    }

    /**
     * Container's getter for QuarterlyLiquidityRatio1.
     * @return QuarterlyLiquidityRatio1
     */
    public ViewObjectImpl getQuarterlyLiquidityRatio1() {
        return (ViewObjectImpl)findViewObject("QuarterlyLiquidityRatio1");
    }

    /**
     * Container's getter for MonthlyLiquidityRatio1.
     * @return MonthlyLiquidityRatio1
     */
    public ViewObjectImpl getMonthlyLiquidityRatio1() {
        return (ViewObjectImpl)findViewObject("MonthlyLiquidityRatio1");
    }
    public void getCategoryId(String catDesc) {
     
    }
    
    public String getCategoryId1(String catDesc) {
         String categoryId="001";
         
        System.out.println(" catDesc "+catDesc);
        
        CategoryViewVOImpl category = (CategoryViewVOImpl)this.getCategoryView1();
        Row[] filteredRows = category.getFilteredRows("RptCatDesc", catDesc);
       
        
        if(filteredRows.length>0) {
            
           categoryId = (String)filteredRows[0].getAttribute("RptCatId");
        }
        return categoryId;
    }

    /**
     * Container's getter for CategoryView1.
     * @return CategoryView1
     */
    public ViewObjectImpl getCategoryView1() {
        return (ViewObjectImpl)findViewObject("CategoryView1");
    }

    public int getFyId(String p_org_id, String p_cld_id, Integer p_fy_id) {
      
            return financialyear;
        
    }
}
