package suggestedorder.model.entities;

import java.math.BigInteger;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 01 15:54:24 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmSoEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(MmSoEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(MmSoEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        CldId {
            public Object get(MmSoEOImpl obj) {
                return obj.getCldId();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        DocId {
            public Object get(MmSoEOImpl obj) {
                return obj.getDocId();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        DocDt {
            public Object get(MmSoEOImpl obj) {
                return obj.getDocDt();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setDocDt((Date)value);
            }
        }
        ,
        SoId {
            public Object get(MmSoEOImpl obj) {
                return obj.getSoId();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setSoId((String)value);
            }
        }
        ,
        SoDt {
            public Object get(MmSoEOImpl obj) {
                return obj.getSoDt();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setSoDt((Date)value);
            }
        }
        ,
        SoBasisDtFrm {
            public Object get(MmSoEOImpl obj) {
                return obj.getSoBasisDtFrm();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setSoBasisDtFrm((Date)value);
            }
        }
        ,
        SoBasisDtTo {
            public Object get(MmSoEOImpl obj) {
                return obj.getSoBasisDtTo();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setSoBasisDtTo((Date)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(MmSoEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(MmSoEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(MmSoEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(MmSoEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SoBasis {
            public Object get(MmSoEOImpl obj) {
                return obj.getSoBasis();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setSoBasis((Integer)value);
            }
        }
        ,
        EntityId {
            public Object get(MmSoEOImpl obj) {
                return obj.getEntityId();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setEntityId((BigInteger)value);
            }
        }
        ,
        SoClose {
            public Object get(MmSoEOImpl obj) {
                return obj.getSoClose();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setSoClose((String)value);
            }
        }
        ,
        MmSoItm {
            public Object get(MmSoEOImpl obj) {
                return obj.getMmSoItm();
            }

            public void put(MmSoEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;
       

        public abstract Object get(MmSoEOImpl object);

        public abstract void put(MmSoEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    /**
     * This is the default constructor (do not remove).
     */
    
     final Lock lock = new ReentrantLock();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int SOID = AttributesEnum.SoId.index();
    public static final int SODT = AttributesEnum.SoDt.index();
    public static final int SOBASISDTFRM = AttributesEnum.SoBasisDtFrm.index();
    public static final int SOBASISDTTO = AttributesEnum.SoBasisDtTo.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int SOBASIS = AttributesEnum.SoBasis.index();
    public static final int ENTITYID = AttributesEnum.EntityId.index();
    public static final int SOCLOSE = AttributesEnum.SoClose.index();
    public static final int MMSOITM = AttributesEnum.MmSoItm.index();

    public MmSoEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("suggestedorder.model.entities.MmSoEO");
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }
    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Date getDocDt() {
        return (Date)getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Date value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for SoId, using the alias name SoId.
     * @return the value of SoId
     */
    public String getSoId() {
        return (String)getAttributeInternal(SOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SoId.
     * @param value value to set the SoId
     */
    public void setSoId(String value) {
        setAttributeInternal(SOID, value);
    }

    /**
     * Gets the attribute value for SoDt, using the alias name SoDt.
     * @return the value of SoDt
     */
    public Date getSoDt() {
        return (Date)getAttributeInternal(SODT);
    }

    /**
     * Sets <code>value</code> as the attribute value for SoDt.
     * @param value value to set the SoDt
     */
    public void setSoDt(Date value) {
        setAttributeInternal(SODT, value);
    }

    /**
     * Gets the attribute value for SoBasisDtFrm, using the alias name SoBasisDtFrm.
     * @return the value of SoBasisDtFrm
     */
    public Date getSoBasisDtFrm() {
        return (Date)getAttributeInternal(SOBASISDTFRM);
    }

    /**
     * Sets <code>value</code> as the attribute value for SoBasisDtFrm.
     * @param value value to set the SoBasisDtFrm
     */
    public void setSoBasisDtFrm(Date value) {
        setAttributeInternal(SOBASISDTFRM, value);
    }

    /**
     * Gets the attribute value for SoBasisDtTo, using the alias name SoBasisDtTo.
     * @return the value of SoBasisDtTo
     */
    public Date getSoBasisDtTo() {
        return (Date)getAttributeInternal(SOBASISDTTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SoBasisDtTo.
     * @param value value to set the SoBasisDtTo
     */
    public void setSoBasisDtTo(Date value) {
        setAttributeInternal(SOBASISDTTO, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }


    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }


    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }


    /**
     * Gets the attribute value for SoBasis, using the alias name SoBasis.
     * @return the value of SoBasis
     */
    public Integer getSoBasis() {
        return (Integer)getAttributeInternal(SOBASIS);
    }

    /**
     * Sets <code>value</code> as the attribute value for SoBasis.
     * @param value value to set the SoBasis
     */
    public void setSoBasis(Integer value) {
        setAttributeInternal(SOBASIS, value);
    }


    /**
     * Gets the attribute value for EntityId, using the alias name EntityId.
     * @return the value of EntityId
     */
    public BigInteger getEntityId() {
        return (BigInteger)getAttributeInternal(ENTITYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EntityId.
     * @param value value to set the EntityId
     */
    public void setEntityId(BigInteger value) {
        setAttributeInternal(ENTITYID, value);
    }

    /**
     * Gets the attribute value for SoClose, using the alias name SoClose.
     * @return the value of SoClose
     */
    public String getSoClose() {
        return (String)getAttributeInternal(SOCLOSE);
    }

    /**
     * Sets <code>value</code> as the attribute value for SoClose.
     * @param value value to set the SoClose
     */
    public void setSoClose(String value) {
        setAttributeInternal(SOCLOSE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMmSoItm() {
        return (RowIterator)getAttributeInternal(MMSOITM);
    }


    /**
     * @param slocId key constituent
     * @param orgId key constituent
     * @param cldId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer slocId, String orgId, String cldId, String docId) {
        return new Key(new Object[]{slocId, orgId, cldId, docId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    private static int VARCHAR = Types.VARCHAR;

    protected void create(AttributeList attributeList) {
        super.create(attributeList);
              Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}").toString());
              String orgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}").toString();
              String cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}").toString();
          /* 
        Integer fyId = (Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {cldId,orgId,new Timestamp(System.currentTimeMillis())});
        String soId = (String)callStoredFunction(VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {slocid,cldId,orgId,"MM$SO",null,fyId});*/
        setOrgId(orgId);
        setSlocId(slocid);
        setCldId(cldId);
        String docId = getDocId(getUsrIdCreate(), getOrgId(), getSlocId(), 18501 ,getCldId());
        setDocId(docId);
    }
    
    public static Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object msg = valueExp.getValue(elContext);
        return msg;
    }
    
    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        lock.lock();
                try {super.lock();}
        catch(Exception e){}
                finally{lock.unlock();}
                
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        
        super.doDML(operation, e);
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            // if (e.getMessage().length() < 11) {
            throw new JboException(e.getMessage());
            /*  } else {
                int end = e.getMessage().indexOf("\n");
                throw new JboException(e.getMessage().substring(11, end));
            } */
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }
    
    public String getDocId(Integer userid, String OrgId, Integer slocid, Integer docId,String cldId) {
        /** call db function "pkg_app.get_txn_id" */
        return (String)callStoredFunction(VARCHAR, "app.pkg_app.get_txn_id(?,?,?,?,?)",
                                          new Object[] { userid, OrgId, slocid, docId,cldId });
    }

}
