package mmstockadjustment.model.view;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 27 11:51:20 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class transSrchVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(transSrchVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(transSrchVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        stkAdjtNo {
            public Object get(transSrchVORowImpl obj) {
                return obj.getstkAdjtNo();
            }

            public void put(transSrchVORowImpl obj, Object value) {
                obj.setstkAdjtNo((String)value);
            }
        }
        ,
        fromDate {
            public Object get(transSrchVORowImpl obj) {
                return obj.getfromDate();
            }

            public void put(transSrchVORowImpl obj, Object value) {
                obj.setfromDate((Timestamp)value);
            }
        }
        ,
        toDate {
            public Object get(transSrchVORowImpl obj) {
                return obj.gettoDate();
            }

            public void put(transSrchVORowImpl obj, Object value) {
                obj.settoDate((Timestamp)value);
            }
        }
        ,
        stckStat {
            public Object get(transSrchVORowImpl obj) {
                return obj.getstckStat();
            }

            public void put(transSrchVORowImpl obj, Object value) {
                obj.setstckStat((Integer)value);
            }
        }
        ,
        STKADJTVO1 {
            public Object get(transSrchVORowImpl obj) {
                return obj.getSTKADJTVO1();
            }

            public void put(transSrchVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        StckStatVO1 {
            public Object get(transSrchVORowImpl obj) {
                return obj.getStckStatVO1();
            }

            public void put(transSrchVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(transSrchVORowImpl object);

        public abstract void put(transSrchVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int STKADJTNO = AttributesEnum.stkAdjtNo.index();
    public static final int FROMDATE = AttributesEnum.fromDate.index();
    public static final int TODATE = AttributesEnum.toDate.index();
    public static final int STCKSTAT = AttributesEnum.stckStat.index();
    public static final int STKADJTVO1 = AttributesEnum.STKADJTVO1.index();
    public static final int STCKSTATVO1 = AttributesEnum.StckStatVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public transSrchVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute stkAdjtNo.
     * @return the stkAdjtNo
     */
    public String getstkAdjtNo() {
        return (String) getAttributeInternal(STKADJTNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute stkAdjtNo.
     * @param value value to set the  stkAdjtNo
     */
    public void setstkAdjtNo(String value) {
        setAttributeInternal(STKADJTNO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute fromDate.
     * @return the fromDate
     */
    public Timestamp getfromDate() {
        return (Timestamp) getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute fromDate.
     * @param value value to set the  fromDate
     */
    public void setfromDate(Timestamp value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute toDate.
     * @return the toDate
     */
    public Timestamp gettoDate() {
        return (Timestamp) getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute toDate.
     * @param value value to set the  toDate
     */
    public void settoDate(Timestamp value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute stckStat.
     * @return the stckStat
     */
    public Integer getstckStat() {
        
        if((Integer) getAttributeInternal(STCKSTAT) == null)
            return 352;
        
        return (Integer) getAttributeInternal(STCKSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute stckStat.
     * @param value value to set the  stckStat
     */
    public void setstckStat(Integer value) {
        setAttributeInternal(STCKSTAT, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> STKADJTVO1.
     */
    public RowSet getSTKADJTVO1() {
        return (RowSet)getAttributeInternal(STKADJTVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> StckStatVO1.
     */
    public RowSet getStckStatVO1() {
        return (RowSet)getAttributeInternal(STCKSTATVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
