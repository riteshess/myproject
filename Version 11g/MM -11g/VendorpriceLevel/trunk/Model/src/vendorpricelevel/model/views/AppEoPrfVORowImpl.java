package vendorpricelevel.model.views;

import java.math.BigInteger;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import vendorpricelevel.model.services.vendorpriceAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Mar 29 15:06:18 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppEoPrfVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        EoSlocId {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getEoSlocId();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setEoSlocId((Integer)value);
            }
        }
        ,
        EoType {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getEoType();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setEoType((Integer)value);
            }
        }
        ,
        EoId {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getEoId();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setEoId((Integer)value);
            }
        }
        ,
        EoNm {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getEoNm();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setEoNm((String)value);
            }
        }
        ,
        EoCldId {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getEoCldId();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setEoCldId((String)value);
            }
        }
        ,
        OrgId {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        EoHoOrgId {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getEoHoOrgId();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setEoHoOrgId((String)value);
            }
        }
        ,
        SuppCurrId {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getSuppCurrId();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setSuppCurrId((Integer)value);
            }
        }
        ,
        TransSuppCurrNotation {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getTransSuppCurrNotation();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setTransSuppCurrNotation((String)value);
            }
        }
        ,
        SuppCurrDesc {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getSuppCurrDesc();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setSuppCurrDesc((String)value);
            }
        }
        ,
        MmEoItm {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getMmEoItm();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovCurrVwVO {
            public Object get(AppEoPrfVORowImpl obj) {
                return obj.getLovCurrVwVO();
            }

            public void put(AppEoPrfVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppEoPrfVORowImpl object);

        public abstract void put(AppEoPrfVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int EOSLOCID = AttributesEnum.EoSlocId.index();
    public static final int EOTYPE = AttributesEnum.EoType.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int EONM = AttributesEnum.EoNm.index();
    public static final int EOCLDID = AttributesEnum.EoCldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int EOHOORGID = AttributesEnum.EoHoOrgId.index();
    public static final int SUPPCURRID = AttributesEnum.SuppCurrId.index();
    public static final int TRANSSUPPCURRNOTATION = AttributesEnum.TransSuppCurrNotation.index();
    public static final int SUPPCURRDESC = AttributesEnum.SuppCurrDesc.index();
    public static final int MMEOITM = AttributesEnum.MmEoItm.index();
    public static final int LOVCURRVWVO = AttributesEnum.LovCurrVwVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppEoPrfVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute EoSlocId.
     * @return the EoSlocId
     */
    public Integer getEoSlocId() {
        return (Integer) getAttributeInternal(EOSLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoSlocId.
     * @param value value to set the  EoSlocId
     */
    public void setEoSlocId(Integer value) {
        setAttributeInternal(EOSLOCID, value);
    }


    /**
     * Gets the attribute value for the calculated attribute EoType.
     * @return the EoType
     */
    public Integer getEoType() {
        return (Integer) getAttributeInternal(EOTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoType.
     * @param value value to set the  EoType
     */
    public void setEoType(Integer value) {
        setAttributeInternal(EOTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EoId.
     * @return the EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoId.
     * @param value value to set the  EoId
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EoNm.
     * @return the EoNm
     */
    public String getEoNm() {
        return (String) getAttributeInternal(EONM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoNm.
     * @param value value to set the  EoNm
     */
    public void setEoNm(String value) {
        setAttributeInternal(EONM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EoCldId.
     * @return the EoCldId
     */
    public String getEoCldId() {
        return (String) getAttributeInternal(EOCLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoCldId.
     * @param value value to set the  EoCldId
     */
    public void setEoCldId(String value) {
        setAttributeInternal(EOCLDID, value);
    }


    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EoHoOrgId.
     * @return the EoHoOrgId
     */
    public String getEoHoOrgId() {
        return (String) getAttributeInternal(EOHOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoHoOrgId.
     * @param value value to set the  EoHoOrgId
     */
    public void setEoHoOrgId(String value) {
        setAttributeInternal(EOHOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SuppCurrId.
     * @return the SuppCurrId
     */
    public Integer getSuppCurrId() {
        return (Integer) getAttributeInternal(SUPPCURRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SuppCurrId.
     * @param value value to set the  SuppCurrId
     */
    public void setSuppCurrId(Integer value) {
        setAttributeInternal(SUPPCURRID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSuppCurrNotation.
     * @return the TransSuppCurrNotation
     */
    public String getTransSuppCurrNotation() {
        if(getAttributeInternal(TRANSSUPPCURRNOTATION)!=null)
        return (String) getAttributeInternal(TRANSSUPPCURRNOTATION);
        else
        {
          
                vendorpriceAMImpl am = (vendorpriceAMImpl)resolvElDC("vendorpriceAMDataControl");
             Row r[]=am.getLovCurrVwVO1().getFilteredRows("CurrId", getSuppCurrId());
            if(r.length>0)
                return (String)r[0].getAttribute("CurrNotationAlias");
            else
                return (String) getAttributeInternal(TRANSSUPPCURRNOTATION);
            }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSuppCurrNotation.
     * @param value value to set the  TransSuppCurrNotation
     */
    public void setTransSuppCurrNotation(String value) {
        setAttributeInternal(TRANSSUPPCURRNOTATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SuppCurrDesc.
     * @return the SuppCurrDesc
     */
    public String getSuppCurrDesc() {
        if(getAttributeInternal(SUPPCURRDESC)!=null)
        return (String) getAttributeInternal(SUPPCURRDESC);
        else
        {
          
                vendorpriceAMImpl am = (vendorpriceAMImpl)resolvElDC("vendorpriceAMDataControl");
             Row r[]=am.getLovCurrVwVO1().getFilteredRows("CurrId", getSuppCurrId());
            if(r.length>0)
                return (String)r[0].getAttribute("CurrDesc");
            else
                return (String) getAttributeInternal(SUPPCURRDESC);
            }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SuppCurrDesc.
     * @param value value to set the  SuppCurrDesc
     */
    public void setSuppCurrDesc(String value) {
        setAttributeInternal(SUPPCURRDESC, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmEoItm.
     */
    public RowIterator getMmEoItm() {
        return (RowIterator)getAttributeInternal(MMEOITM);
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);

    }
    /**
     * Gets the view accessor <code>RowSet</code> LovCurrVwVO.
     */
    public RowSet getLovCurrVwVO() {
        return (RowSet)getAttributeInternal(LOVCURRVWVO);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
