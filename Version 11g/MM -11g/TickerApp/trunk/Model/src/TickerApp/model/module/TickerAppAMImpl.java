package TickerApp.model.module;

import TickerApp.model.module.common.TickerAppAM;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Apr 09 16:18:08 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TickerAppAMImpl extends ApplicationModuleImpl implements TickerAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public TickerAppAMImpl() {
    }

    /**
     * Container's getter for MmTkr1.
     * @return MmTkr1
     */
    public ViewObjectImpl getMmTkr1() {
        return (ViewObjectImpl)findViewObject("MmTkr1");
    }

    /**
     * Container's getter for MmTkrUsr1.
     * @return MmTkrUsr1
     */
    public ViewObjectImpl getMmTkrUsr1() {
        return (ViewObjectImpl)findViewObject("MmTkrUsr1");
    }

    /**
     * Container's getter for dual1.
     * @return dual1
     */
    public ViewObjectImpl getdual1() {
        return (ViewObjectImpl)findViewObject("dual1");
    }
    public String resolvEl(String data){
                   FacesContext fc = FacesContext.getCurrentInstance();
                   Application app = fc.getApplication();
                   ExpressionFactory elFactory = app.getExpressionFactory();
                   ELContext elContext = fc.getELContext();
                   ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
                   String Message=valueExp.getValue(elContext).toString();
                   return Message;
                 }
    
    public void setValuesInMmTkr(){
        String tId=null;
        String tNm=null;
        String tdesc=null;
        String Actve=null;
        ViewObjectImpl dual1 = this.getdual1();
        ViewObjectImpl glbltkr = this.getMmGlBlTkr1();
        ViewObjectImpl mmtkr = this.getMmTkr1();
        Row currentRow = dual1.getCurrentRow();
        if(currentRow.getAttribute("TickerId")!=null){
            System.out.println("tkr id--"+currentRow.getAttribute("TickerId"));
            currentRow.getAttribute("TickerId").toString();
            Row[] filteredRows = glbltkr.getFilteredRows("TkrId", currentRow.getAttribute("TickerId").toString());
            if(filteredRows.length>0){
                if(filteredRows[0].getAttribute("TkrId")!=null){
                 tId = filteredRows[0].getAttribute("TkrId").toString();
                }
                if(filteredRows[0].getAttribute("TkrNm")!=null){
                 tNm = filteredRows[0].getAttribute("TkrNm").toString();
                }
                if(filteredRows[0].getAttribute("TkrDesc")!=null){
                tdesc = filteredRows[0].getAttribute("TkrDesc").toString(); 
                }
                if(filteredRows[0].getAttribute("Actv")!=null){
               Actve= filteredRows[0].getAttribute("Actv").toString();
                }

              // Row createRow = mmtkr.createRow();

               // System.out.println("current ro----"+createRow.getKey());
                
                /* createRow.setAttribute("TkrId", tId);
                createRow.setAttribute("TkrNm", tNm);
                createRow.setAttribute("TkrDesc", tdesc);
                createRow.setAttribute("Actv", Actve);
                mmtkr.insertRow(createRow); */
                mmtkr.getCurrentRow().setAttribute("TkrId", tId);
                mmtkr.getCurrentRow().setAttribute("TkrNm", tNm);
                mmtkr.getCurrentRow().setAttribute("TkrDesc", tdesc);
                mmtkr.getCurrentRow().setAttribute("Actv", Actve);
                //mmtkr.executeQuery();
               // this.getDBTransaction().postChanges();
            }
           
        }
    }
    
    public void setTkronEdit(){
        ViewObjectImpl dual1 = this.getdual1();
        ViewObjectImpl mmtkr = this.getMmTkr1();
        Row currentRow = dual1.getCurrentRow();
        if(currentRow.getAttribute("TickerId")!=null){
           String id= currentRow.getAttribute("TickerId").toString();
           // mmtkr.setWhereClause("TKR_ID= '"+id+"' ");
           System.out.println("id not null--"+id);
           mmtkr.setNamedWhereClauseParam("BindTkrId", id);
        }
        else{
            System.out.println("id null");
            mmtkr.setNamedWhereClauseParam("BindTkrId", null); 
        }
        mmtkr.executeQuery();
    }
    
    public void addUserToTkr(){
        System.out.println("in am method---");
        String id=null;
        ViewObjectImpl usrVo = this.getMmTkrUsr2();
        ViewObjectImpl dual1 = this.getdual1();
        Row currentRow = dual1.getCurrentRow();
        System.out.println("dual current row--"+currentRow);
        System.out.println("before get id");
        if(currentRow.getAttribute("UserId")!=null){
            System.out.println("user id--"+currentRow.getAttribute("UserId"));
           id= currentRow.getAttribute("UserId").toString();
            Row createRow = usrVo.createRow();
            createRow.setAttribute("UsrId", id);
            usrVo.insertRow(createRow);
        }
    }
    
    public void deleteUserRow(){
        ViewObjectImpl userVo = this.getMmTkrUsr2();
        userVo.getCurrentRow().remove();
    }
    public String usrNmValidator(Integer Id){
        System.out.println("inside am valid");
        ViewObjectImpl usrvo = this.getMmTkrUsr2();
        RowQualifier rq=new RowQualifier(usrvo);
        rq.setWhereClause("UsrId = "+Id);
        Row row[]=usrvo.getFilteredRows(rq);
        System.out.println("lengh  "+row.length);
        if(row.length>0){
            return "Y";
        }
        return "N";
    }
    public void refreshOnCancel(){
        this.getMmTkr1().executeQuery();
        this.getMmTkrUsr2().executeQuery();
        this.getdual1().executeQuery();
    }


    /**
     * Container's getter for MmGlBlTkr1.
     * @return MmGlBlTkr1
     */
    public ViewObjectImpl getMmGlBlTkr1() {
        return (ViewObjectImpl)findViewObject("MmGlBlTkr1");
    }


    /**
     * Container's getter for MmTkrUsr2.
     * @return MmTkrUsr2
     */
    public ViewObjectImpl getMmTkrUsr2() {
        return (ViewObjectImpl)findViewObject("MmTkrUsr2");
    }

    /**
     * Container's getter for TkrTOUsrVL1.
     * @return TkrTOUsrVL1
     */
    public ViewLinkImpl getTkrTOUsrVL1() {
        return (ViewLinkImpl)findViewLink("TkrTOUsrVL1");
    }
    public void refreshOnSave() {
       /*  ViewObjectImpl mmtkr = this.getMmTkr1();
        Row createRow = mmtkr.createRow(); */
        //this.getMmGlBlTkr1().executeQuery();
         this.getMmTkr1().executeQuery();
        this.getMmTkrUsr2().executeQuery();
        this.getdual1().executeQuery(); 
        
    }
    public void setbindvar() {
        ViewObjectImpl vo= this.getMmTkr1();
        vo.setNamedWhereClauseParam("BINDCLDID",resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        vo.setNamedWhereClauseParam("BINDORGID", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        vo.setNamedWhereClauseParam("BINDSLOCID", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        vo.executeQuery();
    }
}
