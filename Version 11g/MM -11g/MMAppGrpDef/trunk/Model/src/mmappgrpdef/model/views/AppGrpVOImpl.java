package mmappgrpdef.model.views;

import java.util.ArrayList;
import java.util.HashMap;

import java.util.List;

import mmappgrpdef.model.entities.IndexCharacterObject;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 28 15:49:58 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppGrpVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public AppGrpVOImpl() {
    }
    /*   public void afterCommit(TransactionEvent e){
          executeQuery();
      } */
      
      public List<IndexCharacterObject> getCharacterIndexList() {

          String[] alphabet =
          { "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
            "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z" };

          //list that contains 26 entries
          List<IndexCharacterObject> list =
              new ArrayList<IndexCharacterObject>();

          //a list of all initial characters that are found in the row set last_name
          //attribute
          HashMap map = new HashMap();

          RowSet rs = this.getRowSet();

          this.executeQuery();
          Row row = rs.first();

          //query all rows and memorize the initial characters of all employees last
          //name entries
          if (row != null) {
              String character =
                  ((String)row.getAttribute("GrpNm")).toUpperCase().substring(0,1);
              updateMap(map, row, character);
              while (rs.hasNext()) {
                  row = rs.next();
                  character = ((String) row.getAttribute("GrpNm")).toUpperCase().substring(0,1);
                  updateMap(map, row, character);
              }
          }

          for (int i = 0; i < alphabet.length; ++i) {

              //A poor man's debugging hint :-)
              //System.out.println("Map contains "+alphabet[i].toUpperCase()+" ? "+map.containsKey(alphabet[i].toUpperCase()));

              if (map.containsKey(alphabet[i].toUpperCase())) {
                  IndexCharacterObject ico = new IndexCharacterObject();
                  ico.setCharacter(alphabet[i].toUpperCase());
                  ico.setFound(true);
                  //get rowIndex from map
                  ico.setRowIndex(((Key)map.get((alphabet[i].toUpperCase()))));
                  list.add(i, ico);
              } else {
                  IndexCharacterObject ico = new IndexCharacterObject();
                  ico.setCharacter(alphabet[i].toUpperCase());
                  ico.setFound(false);
                  //get rowIndex from map
                  ico.setRowIndex(null);
                  list.add(i, ico);
              }

              rs.first();
          }
          return list;
      }

      private void updateMap(HashMap map, Row row, String character) {
          if (!map.containsKey(character)) {
              //remember character and first occurence in rowSet
              map.put(character, row.getKey());
          }
      }
    /**
     * Returns the variable value for BindParentId.
     * @return variable value for BindParentId
     */
    public String getBindParentId() {
        return (String)ensureVariableManager().getVariableValue("BindParentId");
    }

    /**
     * Sets <code>value</code> for variable BindParentId.
     * @param value value to bind as BindParentId
     */
    public void setBindParentId(String value) {
        ensureVariableManager().setVariableValue("BindParentId", value);
    }
}
