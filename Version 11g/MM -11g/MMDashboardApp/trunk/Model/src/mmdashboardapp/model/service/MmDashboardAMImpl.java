package mmdashboardapp.model.service;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
//import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmdashboardapp.model.ds.TickerRowDS;
import mmdashboardapp.model.service.common.MmDashboardAM;

import oracle.adf.share.logging.ADFLogger;

import oracle.adf.share.logging.ADFLoggerFactory;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Mar 06 10:58:56 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmDashboardAMImpl extends ApplicationModuleImpl implements MmDashboardAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MmDashboardAMImpl() {
    }
   private static ADFLogger adfLog  = ADFLogger.createADFLogger(MmDashboardAMImpl.class);
    
    /**
     * Method to call a Database function
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        //_log.info("__________________________________________begin");
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // _log.info(""+bindVars[z]);
                }
            }
            st.executeUpdate();
            // _log.info("__________________________________________end");
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }
  
    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
  
  
    /**
     * Method to Get SlocId
     * @return
     */
    public Integer getSlocId(){
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }
    /**
     * Method to Get OrgId
     * @return
     */
    public String getOrgId(){
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }
    /**
     * Method to Get HoOrgId
     * @return
     */
    public String getHoOrgId(){
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }
    /**
     * Method to Get CldId
     * @return
     */
    public String getCldId(){
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }
    /**
     * Method to Get UsrId
     * @return
     */
    public String getUsrId(){
        return resolvEl("#{pageFlowScope.GLBL_APP_USR}");
    }

    
    
    /**
     * Method that returns the WorkFlow Document Count
     * @param DocTypeId
     * @param CountType
     * @return
     */
    public Number getDocPendingCountForMyApproval(Integer DocTypeId, StringBuffer CountType){
        Number count = new Number(0);
        /* sls_doc_wf_cnt(
        p_cld_id varchar2,
        p_sloc_id number,
        p_org_id varchar2,
        p_usr_id number,
        p_doc_id number,
        p_wf_type varchar2 /* O--Pending with others ,M--Pending of my approval,U--Pending for posting
        )
         */
        try {
            BigDecimal s =  (BigDecimal)callStoredFunction(Types.NUMERIC, "MM_GET_DOC_CNT(?,?,?,?,?,?)", new Object[] {
                                                                                                    this.getCldId(),
                                                                                                    this.getSlocId(),
                                                                                                    this.getOrgId(),
                                                                                                    DocTypeId,
                                                                                                    this.getUsrId(),
                                                                                                    CountType.toString() });
            count = new Number(s);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'MM_GET_DOC_CNT' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
       
        
        return count;
    }
    
    /**
     * Method to execute executeTopSuppliersRating 
     */
    public void executeTopSuppliersRating(Integer val){
        ViewObjectImpl suppVO = this.getTopSupplierRatingVO();
        suppVO.setNamedWhereClauseParam("BindCldId", this.getCldId());
        suppVO.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
        suppVO.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgId()); 
        suppVO.setNamedWhereClauseParam("CountBind", val); 
       
        suppVO.executeQuery();
    }
    
    /**
     * Method to execute executeTopNProductVO 
     */
    public void executeTopNProductVO(Integer val){
        ViewObjectImpl productVO = this.getTopNProductVO();
        productVO.setNamedWhereClauseParam("CldIdBind", this.getCldId());
        productVO.setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
        productVO.setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId()); 
        productVO.setNamedWhereClauseParam("CountBind", val); 
       
        productVO.executeQuery();
    }
    
    /**
     * Method to execute executeTopNProductGrpVO 
     */
    public void executeTopNProductGrpVO(Integer val){
        ViewObjectImpl productGrpVO = this.getTopNProductGrpVO();
        productGrpVO.setNamedWhereClauseParam("CldIdBind", this.getCldId());
        productGrpVO.setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
        productGrpVO.setNamedWhereClauseParam("HoOrgIdBind", this.getHoOrgId()); 
        productGrpVO.setNamedWhereClauseParam("CountBind", val); 
       
        productGrpVO.executeQuery();
    }
    
    /**
     * Set Initial Parameters for getWFViewQuotationVO()
     * @param type
     */
    public void setWFQuotationView(StringBuffer type){
        if(type != null){
            ViewObjectImpl quot = this.getWFViewQuotationVO();
            quot.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            quot.setNamedWhereClauseParam("BindCldId", this.getCldId());
            quot.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            quot.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            quot.setNamedWhereClauseParam("BindOpType", type.toString());
            quot.executeQuery();    
        }
        
    }
    
    
    /**
     * Method to getCurrentDocId of  Quotation
     * @return
     */
    public StringBuffer getCurrDocIdfoQuot(){
        StringBuffer docId = new StringBuffer("");
       if(this.getWFViewQuotationVO().getCurrentRow() != null)
       {
           docId = new StringBuffer(this.getWFViewQuotationVO().getCurrentRow().getAttribute("DocId").toString());
       }
       return docId;
    }
    
    
    /**
     * Set Initial Parameters for setWFRfqView()
     * @param type
     */
    public void setWFRfqView(StringBuffer type){
        if(type != null){
            ViewObjectImpl rfq = this.getWfRfqVO();
            rfq.setNamedWhereClauseParam("SlocIdBind", this.getSlocId());
            rfq.setNamedWhereClauseParam("CldIdBind", this.getCldId());
            rfq.setNamedWhereClauseParam("OrgIdBind", this.getOrgId());
            rfq.setNamedWhereClauseParam("UserIdBind", this.getUsrId());
            rfq.setNamedWhereClauseParam("OpTypeBind", type.toString());
            rfq.executeQuery();    
        }
        
    }
    
    
    /**
     * Set Initial Parameters for setWFPurOrdView()
     * @param type
     */
    public void setWFPurOrdView(StringBuffer type){
        if(type != null){
            ViewObjectImpl purOrd = this.getWfViewPurOrdVo();
            purOrd.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            purOrd.setNamedWhereClauseParam("BindCldId", this.getCldId());
            purOrd.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            purOrd.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            purOrd.setNamedWhereClauseParam("BindOpType", type.toString());
            purOrd.executeQuery();    
        }
        
    }
    
    /**
     * Set Initial Parameters for setWFTrfOrdView()
     * @param type
     */
    public void setWFTrfOrdView(StringBuffer type){
        if(type != null){
            ViewObjectImpl trfOrd = this.getWFViewTrfOrdVO();
            trfOrd.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            trfOrd.setNamedWhereClauseParam("BindCldId", this.getCldId());
            trfOrd.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            trfOrd.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            trfOrd.setNamedWhereClauseParam("BindOpType", type.toString());
            trfOrd.executeQuery();    
        }
        
    }
    
    /**
     * Set Initial Parameters for setWFMRSView()
     * @param type
     */
    public void setWFMRSView(StringBuffer type){
        if(type != null){
            ViewObjectImpl mrs = this.getWFViewMRSVO();
            mrs.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            mrs.setNamedWhereClauseParam("BindCldId", this.getCldId());
            mrs.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            mrs.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            mrs.setNamedWhereClauseParam("BindOpType", type.toString());
            mrs.executeQuery();
        }
        
    }
    
    
    /**
     * Set Initial Parameters for setWFRcptView()
     * @param type
     */
    public void setWFRcptView(StringBuffer type){
        if(type != null){
            ViewObjectImpl rcpt = this.getWFViewRcptVO();
            rcpt.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            rcpt.setNamedWhereClauseParam("BindCldId", this.getCldId());
            rcpt.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            rcpt.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            rcpt.setNamedWhereClauseParam("BindOpType", type.toString());
            rcpt.executeQuery();
        }
        
    }
    
    /**
     * Set Initial Parameters for setWFStockTakeView()
     * @param type
     */
    public void setWFStockTakeView(StringBuffer type){
        if(type != null){
            ViewObjectImpl stockTake = this.getWfViewStockTakeVO();
            stockTake.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            stockTake.setNamedWhereClauseParam("BindCldId", this.getCldId());
            stockTake.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            stockTake.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            stockTake.setNamedWhereClauseParam("BindOpType", type.toString());
            stockTake.executeQuery();
        }
        
    }
    
    
    /**
     * Set Initial Parameters for setWFStockAdjView()
     * @param type
     */
    public void setWFStockAdjView(StringBuffer type){
        if(type != null){
            ViewObjectImpl stockAdj = this.getWfViewStockAdjVO();
            stockAdj.setNamedWhereClauseParam("BindSlocId", this.getSlocId());
            stockAdj.setNamedWhereClauseParam("BindCldId", this.getCldId());
            stockAdj.setNamedWhereClauseParam("BindOrgId", this.getOrgId());
            stockAdj.setNamedWhereClauseParam("BindUsrId", this.getUsrId());
            stockAdj.setNamedWhereClauseParam("BindOpType", type.toString());
            stockAdj.executeQuery();
        }
        
    }
    
    
    
    public void executeQueryForAllViews(){
        executeTopNProductGrpVO(5);
        executeTopSuppliersRating(5);
        executeTopNProductVO(5);
    }
    /**
     * Container's getter for TopSupplierRatingVO.
     * @return TopSupplierRatingVO
     */
    public ViewObjectImpl getTopSupplierRatingVO() {
        return (ViewObjectImpl)findViewObject("TopSupplierRatingVO");
    }

    /**
     * Container's getter for WFViewQuotationVO.
     * @return WFViewQuotationVO
     */
    public ViewObjectImpl getWFViewQuotationVO() {
        return (ViewObjectImpl)findViewObject("WFViewQuotationVO");
    }

    /**
     * Container's getter for WfRfqVO.
     * @return WfRfqVO
     */
    public ViewObjectImpl getWfRfqVO() {
        return (ViewObjectImpl)findViewObject("WfRfqVO");
    }

    /**
     * Container's getter for WfViewPurOrdVo.
     * @return WfViewPurOrdVo
     */
    public ViewObjectImpl getWfViewPurOrdVo() {
        return (ViewObjectImpl)findViewObject("WfViewPurOrdVo");
    }

    /**
     * Container's getter for WFViewTrfOrdVO.
     * @return WFViewTrfOrdVO
     */
    public ViewObjectImpl getWFViewTrfOrdVO() {
        return (ViewObjectImpl)findViewObject("WFViewTrfOrdVO");
    }

    /**
     * Container's getter for WFViewMRSVO.
     * @return WFViewMRSVO
     */
    public ViewObjectImpl getWFViewMRSVO() {
        return (ViewObjectImpl)findViewObject("WFViewMRSVO");
    }

    /**
     * Container's getter for WFViewMRSVO1.
     * @return WFViewMRSVO1
     */
    public ViewObjectImpl getWFViewMRSVO1() {
        return (ViewObjectImpl)findViewObject("WFViewMRSVO1");
    }

    /**
     * Container's getter for WFViewRcptVO.
     * @return WFViewRcptVO
     */
    public ViewObjectImpl getWFViewRcptVO() {
        return (ViewObjectImpl)findViewObject("WFViewRcptVO");
    }
    
   
    /**
     * Container's getter for MmGlblTkrVO.
     * @return MmGlblTkrVO
     */
    public ViewObjectImpl getMmGlblTkrVO() {
        return (ViewObjectImpl)findViewObject("MmGlblTkrVO");
    }
    
    public ArrayList<Number> executeTkrQuery(String tkrId){
        ViewObjectImpl glblTkr = this.getMmGlblTkrVO();
        ArrayList<Number> queryVal  = new ArrayList<Number>();
        Row [] rr = glblTkr.getFilteredRows("TkrId", tkrId);
        String query =null;
        StringBuilder cldNew = new StringBuilder();
        cldNew.append("'");
        cldNew.append(getCldId());
        cldNew.append("'");
        StringBuilder orgNew = new StringBuilder();
        orgNew.append("'");
        orgNew.append(getOrgId());
        orgNew.append("'");
       Integer fyId =getFYid();
       adfLog.info("tickerid    "+tkrId);
       if(rr.length>0){
           if(rr[0].getAttribute("TkrQry")!=null){
           query = rr[0].getAttribute("TkrQry").toString();
           }
        }
        if(query!=null){
                String newQuery =  query.replaceAll(":BindCldId", cldNew.toString()).replaceAll(":BindOrgId", orgNew.toString()).replaceAll(":BindSlocId", getSlocId().toString()).replaceAll(":BindFyId",fyId.toString());
              
                 
                 
                 
              ResultSet rs;
                          Number code = null;
                          Number codenew =null;
                          try {
                              rs = getDBTransaction().createStatement(0).executeQuery(newQuery);
                              if (rs.next()) {
                                  BigDecimal currAmt = ((BigDecimal) rs.getObject(1));
                                  BigDecimal prvAmt = ((BigDecimal) rs.getObject(2));
                                  if(currAmt!=null){
                                      code = new Number(currAmt); 
                                      queryVal.add(code);
                                  }
                                  if(prvAmt!=null){
                                      codenew = new Number(prvAmt);
                                      queryVal.add(codenew);
                                  }
                                 
                              }

                              rs.close();
        
                             // return code;

                          } catch (SQLException e) {
                              throw new JboException(e);
                          }
                 
                 
          }
        
        return queryVal;
    }

    public Integer getFYid(){
        Timestamp date = new Timestamp(System.currentTimeMillis());
        Integer fyId =(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {getCldId(),getOrgId(),date}));
        if(fyId>0){
            return fyId;
        }else
            return 1;
    
    }
    
    public String getTkrLableName(Integer tkrPos){
       String tkrId = null;
       String tkrName = null;
        ViewObjectImpl tkrUseVo = this.getMmTkrUsrVO();
        tkrUseVo.executeQuery();
        RowQualifier rq = new RowQualifier(tkrUseVo);
        rq.setWhereClause("CldId = '"+this.getCldId()+"' AND  SlocId = "+this.getSlocId()+" AND TkrPos = "+tkrPos+"  AND OrgId ='"+this.getOrgId()+"' AND UsrId = "+this.getUsrId()); 
        Row[] filteredRows = tkrUseVo.getFilteredRows(rq);
        if(filteredRows.length>0){
            tkrId =filteredRows[0].getAttribute("TkrId").toString();
        }
        if(tkrId!=null){
            Row [] mmtkr = this.getMmGlblTkrVO().getFilteredRows("TkrId", tkrId);
            if(mmtkr.length>0){
                tkrName = mmtkr[0].getAttribute("TkrNm").toString();
            }
        }
        return tkrName;
    }
    public String getTkrIdValue(Integer tkrPos){
       String tkrId = null;
        ViewObjectImpl tkrUseVo = this.getMmTkrUsrVO();
        tkrUseVo.executeQuery();
        RowQualifier rq = new RowQualifier(tkrUseVo);
        rq.setWhereClause("CldId = '"+this.getCldId()+"' AND  SlocId = "+this.getSlocId()+" AND TkrPos = "+tkrPos+"  AND OrgId ='"+this.getOrgId()+"' AND UsrId = "+this.getUsrId()); 
        Row[] filteredRows = tkrUseVo.getFilteredRows(rq);
        if(filteredRows.length>0){
            tkrId =filteredRows[0].getAttribute("TkrId").toString();
        }
        return tkrId;
    }
    
    /**
     * Container's getter for MmTkrUsrVO.
     * @return MmTkrUsrVO
     */
    public ViewObjectImpl getMmTkrUsrVO() {
        return (ViewObjectImpl)findViewObject("MmTkrUsrVO");
    }
    
    /**
     *
     * @param seqNo
     * @param tickeId
     */
    
    public void updateTickerSettingForUsr(Integer seqNo, String tickeId){
        ViewObjectImpl tkrUsr =this.getMmTkrUsrVO();
        tkrUsr.executeQuery();
        RowQualifier rq = new RowQualifier(tkrUsr);
        rq.setWhereClause("CldId = '"+this.getCldId()+"' AND  SlocId = "+this.getSlocId()+" AND OrgId ='"+this.getOrgId()+"' AND TkrId ='"+tickeId+"' AND UsrId = "+this.getUsrId()); 
        Row[] filteredRows = tkrUsr.getFilteredRows(rq);
        if(filteredRows.length>0){
            for(Row rr :filteredRows){
                    if(rr.getAttribute("TkrId")!=null){
                        rr.setAttribute("TkrPos", seqNo);
                    }
              
            }
        }
    }
    
    public void unsetAllTkrPosForUsr(){
        ViewObjectImpl tkrUsr =this.getMmTkrUsrVO();
        tkrUsr.executeQuery();
        RowQualifier rq = new RowQualifier(tkrUsr);
        rq.setWhereClause("CldId = '"+this.getCldId()+"' AND  SlocId = "+this.getSlocId()+" AND OrgId ='"+this.getOrgId()+"' AND UsrId = "+this.getUsrId()); 
        Row[] filteredRows = tkrUsr.getFilteredRows(rq);
        if(filteredRows.length>0){
            for(Row rr :filteredRows){
                rr.setAttribute("TkrPos", 0);
            }
        }
    }
    /**
     * Method to fetch all the tickers
     * @return
     */
    public ArrayList<TickerRowDS> getTickerList(){
       

        ArrayList<TickerRowDS> list = new ArrayList<TickerRowDS>();
        ViewObjectImpl impl = this.getMmTkrUsrVO();
        ViewObjectImpl mmtkr = this.getMmTkrVO();
        RowQualifier rq = new RowQualifier(impl);
        rq.setWhereClause("CldId = '"+this.getCldId()+"' AND  SlocId = "+this.getSlocId()+" AND OrgId ='"+this.getOrgId()+"' AND UsrId = "+this.getUsrId());
        Row [] rr = this.getMmTkrUsrVO().getFilteredRows(rq);
        Integer i = 1;
        Integer j = 0; 
        if(rr.length>0){
            for(Row tkr : rr){
                if(tkr.getAttribute("TkrId")!=null){
                    String tkrId =tkr.getAttribute("TkrId").toString();
                    String tkrName =null;
                    RowQualifier rqtkr = new RowQualifier(mmtkr);
                    rqtkr.setWhereClause("CldId = '"+this.getCldId()+"' AND  SlocId = "+this.getSlocId()+" AND OrgId ='"+this.getOrgId()+"' AND TkrId = '"+tkrId+"' ");
                    Row [] rrTr = this.getMmTkrVO().getFilteredRows(rqtkr);
                    if(rrTr.length>0){
                        tkrName = rrTr[0].getAttribute("TkrNm").toString();
                    }
                
                    if(tkrName!=null){
                        list.add(new TickerRowDS(tkrId ,i,new StringBuffer(tkrName)));
                        i=i+1;
                    }
                    
                }
          }
        }
        return list;
    }
    
    /**
     * Method to fetch all the tickers
     * @return
     */
    public ArrayList<TickerRowDS> getSelectedTickerList(){
        ArrayList<TickerRowDS> selectedSettingsList = new ArrayList<TickerRowDS>();
        ViewObjectImpl mapViewVO = this.getMmTkrUsrVO();
        ViewObjectImpl mmtkr = this.getMmTkrVO();
        mapViewVO.executeQuery();
        RowQualifier rq = new RowQualifier(mapViewVO);
        Integer zero =0;
        StringBuffer query = new StringBuffer("CldId = '"+this.getCldId()+"' AND  SlocId = "+this.getSlocId()+" AND OrgId ='"+this.getOrgId()+"' AND UsrId = "+this.getUsrId()+ " AND TkrPos > "+zero); 
        rq.setWhereClause(query.toString());
        
        Row[] filteredRows = mapViewVO.getFilteredRows(rq);
        Integer i = 1;
        for(Row rr :filteredRows){
            if(rr.getAttribute("TkrId")!=null){
                String tkrId =rr.getAttribute("TkrId").toString();
                String tkrName =null;
                RowQualifier rqtkr = new RowQualifier(mmtkr);
                rqtkr.setWhereClause("CldId = '"+this.getCldId()+"' AND  SlocId = "+this.getSlocId()+" AND OrgId ='"+this.getOrgId()+"' AND TkrId = '"+tkrId+"' ");
                Row [] rrTr = this.getMmTkrVO().getFilteredRows(rqtkr);
                if(rrTr.length>0){
                    tkrName = rrTr[0].getAttribute("TkrNm").toString();
                }
            if(tkrName!=null){
              selectedSettingsList.add(new TickerRowDS(rr.getAttribute("TkrId").toString(),(Integer)rr.getAttribute("TkrPos"),new StringBuffer(tkrName)));
            }
        }
        }
        adfLog.info("Rows in AM :");
        for(TickerRowDS r : selectedSettingsList){
           
        }
            
        return selectedSettingsList;
    

    }
    /**
     * Container's getter for MmTkrVO.
     * @return MmTkrVO
     */
    public ViewObjectImpl getMmTkrVO() {
        return (ViewObjectImpl)findViewObject("MmTkrVO");
    }

    /**
     * Container's getter for WfViewStockAdjVO.
     * @return WfViewStockAdjVO
     */
    public ViewObjectImpl getWfViewStockAdjVO() {
        return (ViewObjectImpl)findViewObject("WfViewStockAdjVO");
    }

    /**
     * Container's getter for WfViewStockTakeVO.
     * @return WfViewStockTakeVO
     */
    public ViewObjectImpl getWfViewStockTakeVO() {
        return (ViewObjectImpl)findViewObject("WfViewStockTakeVO");
    }

    /**
     * Container's getter for WfViewQuotAnaVO.
     * @return WfViewQuotAnaVO
     */
    public ViewObjectImpl getWfViewQuotAnaVO() {
        return (ViewObjectImpl)findViewObject("WfViewQuotAnaVO");
    }

    /**
     * Container's getter for WfViewPurReturnVO.
     * @return WfViewPurReturnVO
     */
    public ViewObjectImpl getWfViewPurReturnVO() {
        return (ViewObjectImpl)findViewObject("WfViewPurReturnVO");
    }

    /**
     * Container's getter for TopNProductGrpVO.
     * @return TopNProductGrpVO
     */
    public ViewObjectImpl getTopNProductGrpVO() {
        return (ViewObjectImpl)findViewObject("TopNProductGrpVO");
    }

    /**
     * Container's getter for TopNProductVO.
     * @return TopNProductVO
     */
    public ViewObjectImpl getTopNProductVO() {
        return (ViewObjectImpl)findViewObject("TopNProductVO");
    }
}
