package mminvoice.model.views;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mminvoice.model.services.MMInvoiceAMImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 25 13:07:07 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmInvcDtlVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMINVCDTLEO = 0;

private static ADFLogger adfLog=(ADFLogger)ADFLogger.createADFLogger(MmInvcDtlVORowImpl.class);
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
     public enum AttributesEnum {
        CldId {
            public Object get(MmInvcDtlVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmInvcDtlVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(MmInvcDtlVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmInvcDtlVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(MmInvcDtlVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmInvcDtlVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        DocId {
            public Object get(MmInvcDtlVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmInvcDtlVORowImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        DocIdRcpt {
            public Object get(MmInvcDtlVORowImpl obj) {
                return obj.getDocIdRcpt();
            }

            public void put(MmInvcDtlVORowImpl obj, Object value) {
                obj.setDocIdRcpt((String)value);
            }
        }
        ,
        DocDtRcpt {
            public Object get(MmInvcDtlVORowImpl obj) {
                return obj.getDocDtRcpt();
            }

            public void put(MmInvcDtlVORowImpl obj, Object value) {
                obj.setDocDtRcpt((Timestamp)value);
            }
        }
        ,
        TransDocNm {
            public Object get(MmInvcDtlVORowImpl obj) {
                return obj.getTransDocNm();
            }

            public void put(MmInvcDtlVORowImpl obj, Object value) {
                obj.setTransDocNm((String)value);
            }
        }
        ,
        TransRcptAmtSp {
            public Object get(MmInvcDtlVORowImpl obj) {
                return obj.getTransRcptAmtSp();
            }

            public void put(MmInvcDtlVORowImpl obj, Object value) {
                obj.setTransRcptAmtSp((Number)value);
            }
        }
        ,
        MmInvcSrc {
            public Object get(MmInvcDtlVORowImpl obj) {
                return obj.getMmInvcSrc();
            }

            public void put(MmInvcDtlVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmInvcDtlVORowImpl object);

        public abstract void put(MmInvcDtlVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDRCPT = AttributesEnum.DocIdRcpt.index();
    public static final int DOCDTRCPT = AttributesEnum.DocDtRcpt.index();
    public static final int TRANSDOCNM = AttributesEnum.TransDocNm.index();
    public static final int TRANSRCPTAMTSP = AttributesEnum.TransRcptAmtSp.index();
    public static final int MMINVCSRC = AttributesEnum.MmInvcSrc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmInvcDtlVORowImpl() {
    }

    /**
     * Gets MmInvcDtlEO entity object.
     * @return the MmInvcDtlEO
     */
    public EntityImpl getMmInvcDtlEO() {
        return (EntityImpl)getEntity(ENTITY_MMINVCDTLEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_ID_RCPT using the alias name DocIdRcpt.
     * @return the DOC_ID_RCPT
     */
    public String getDocIdRcpt() {
        return (String) getAttributeInternal(DOCIDRCPT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_RCPT using the alias name DocIdRcpt.
     * @param value value to set the DOC_ID_RCPT
     */
    public void setDocIdRcpt(String value) {
        setAttributeInternal(DOCIDRCPT, value);
    }

    /**
     * Gets the attribute value for DOC_DT_RCPT using the alias name DocDtRcpt.
     * @return the DOC_DT_RCPT
     */
    public Timestamp getDocDtRcpt() {
        return (Timestamp) getAttributeInternal(DOCDTRCPT);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT_RCPT using the alias name DocDtRcpt.
     * @param value value to set the DOC_DT_RCPT
     */
    public void setDocDtRcpt(Timestamp value) {
        setAttributeInternal(DOCDTRCPT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDocNm.
     * @return the TransDocNm
     */
    public String getTransDocNm() {
        MMInvoiceAMImpl am = (MMInvoiceAMImpl)this.getApplicationModule();
        Row curr=am.getMmInvc().getCurrentRow();
        Integer type=(Integer)curr.getAttribute("InvcType");
        Integer fyId=(Integer)curr.getAttribute("FyId");
        Integer coaId=(Integer)curr.getAttribute("CurrIdSp");
        Integer currSpId=(Integer)curr.getAttribute("CoaId");
        
        Object obj = curr.getAttribute("InvcNo");
        String ret="";
        if(type==455){ //Purchase Invoice
                Row[] rws=null;
                 
                 if(obj==null)
                 {rws= am.getLovRcpt().getFilteredRows("DocId",this.getDocIdRcpt());}
                 
                 else
                 {rws= am.getLovRcptStat1().getFilteredRows("DocId",this.getDocIdRcpt());}
                 
                  if(rws.length>0){
                    ret=rws[0].getAttribute("RcptNo").toString();
                    return ret;
                  }
                  else
                  {return (String) getAttributeInternal(TRANSDOCNM);}
         }
        
       else if(type==456){ //Transfer Invoice or supplimentary transfer invoice
                Row[] rws=null;
                Object val=null;    
                    // mtlIssuVo.executeQuery(); 
                 if(obj==null)
                 {
                     ViewObjectImpl mtlIssuVo = am.getLovIssuVO1();
                     mtlIssuVo.setNamedWhereClauseParam("bindOrgId", getOrgId());
                     mtlIssuVo.setNamedWhereClauseParam("bindSlocId", getSlocId());
                     mtlIssuVo.setNamedWhereClauseParam("bindCldId", getCldId());
                    rws= mtlIssuVo.getFilteredRows("DocId",this.getDocIdRcpt());
                }
                 
                 else
                 {  
                   /*
                    val =(Object)(callStoredFunction(Types.VARCHAR, "MM.MM_GET_ISSUE_NO(?,?,?,?)", new Object[] {this.getCldId(),this.getSlocId(),this.getOrgId(),this.getDocIdRcpt()}));    
                     if(val != null)
                        return val.toString();
                     else
                        return (String) getAttributeInternal(TRANSDOCNM);
                    */ 
                     ViewObjectImpl mtlIssuVo = am.getLovStat1();
                     mtlIssuVo.setNamedWhereClauseParam("bindOrgId", getOrgId());
                     mtlIssuVo.setNamedWhereClauseParam("bindSlocId", getSlocId());
                     mtlIssuVo.setNamedWhereClauseParam("bindCldId", getCldId());
                     rws= mtlIssuVo.getFilteredRows("DocId",this.getDocIdRcpt()); 
                }
                 
                  if(rws.length>0){
                    ret=rws[0].getAttribute("IssuNo").toString();
                    return ret;
                  }
                  else
                  {return (String) getAttributeInternal(TRANSDOCNM);}
         }
        
        else if(type==457){ //Cash Purchase Invoice
                      Row[] rws=null;
                     
                  if(obj==null)
                  {
                      ViewObjectImpl cpoVo = am.getLovRcptCPO1();
                      ViewObjectImpl cpoVo1 = am.getMMDTLCOAVW1();
                   /*    ViewCriteria vc = cpoVo.getViewCriteria("LovRcptCPOVOCriteria");
                      cpoVo.applyViewCriteria(vc);
                      cpoVo.setNamedWhereClauseParam("bindOrgId", getOrgId());
                      cpoVo.setNamedWhereClauseParam("bindSlocId", getSlocId());
                      cpoVo.setNamedWhereClauseParam("bindCldId", getCldId());
                      cpoVo.setNamedWhereClauseParam("bindRcptId", getDocIdRcpt());
                      cpoVo.setNamedWhereClauseParam("bindFyId", fyId);
                      cpoVo.setNamedWhereClauseParam("bindCurrSpId", currSpId);
                      cpoVo.setNamedWhereClauseParam("bindCoaId", coaId);
                      cpoVo.executeQuery(); */
                      
                    //  System.out.println(this.getDocIdRcpt() + " Obj == null "+cpoVo.getRowCount()+" "+cpoVo.getQuery());
                    //  System.out.println(fyId + "  "+currSpId+" "+coaId+" "+getOrgId()+" "+getSlocId()+" "+getCldId());
                     // rws= cpoVo.getFilteredRows("RcptDocId",this.getDocIdRcpt());
                      //rws= cpoVo1.getFilteredRows("RcptDocId",this.getDocIdRcpt());
                      
                      RowQualifier rq = new RowQualifier(cpoVo1);
                      rq.setWhereClause("CldId = '"+getCldId()+"' AND SlocId = "+getSlocId()+" AND OrgId = '"+getOrgId()+"' AND RcptDocId = '"+getDocIdRcpt()+"'");
                      rws= cpoVo1.getFilteredRows(rq);
                   }
                  
                  else
                  {   ViewObjectImpl cpoVo = am.getLovRcptCpo1_1();
                      cpoVo.setNamedWhereClauseParam("bindOrgId", getOrgId());
                      cpoVo.setNamedWhereClauseParam("bindSlocId", getSlocId());
                      cpoVo.setNamedWhereClauseParam("bindCldId", getCldId());
                      cpoVo.setNamedWhereClauseParam("bindRcptId", getDocIdRcpt());
                      //cpoVo.executeQuery();
                      rws= cpoVo.getFilteredRows("DocId",this.getDocIdRcpt());
                 }
                  
                   if(rws.length>0){
                     ret=rws[0].getAttribute("RcptNo").toString();
                     return ret;
                   }
                   else
                   {return (String) getAttributeInternal(TRANSDOCNM);}
          }
        else if(type==737 || type==739){
          Object ret11=null;
            if(type==455 || type == 492 || type == 737 || type == 739){
                ret11 =(Object)(callStoredFunction(Types.VARCHAR, "MM.MM_GET_PO_NO(?,?,?,?)", new Object[] {this.getCldId(),this.getSlocId(),this.getOrgId(),this.getDocIdRcpt()}));    
            }
            if(ret11 !=null)
            {return String.valueOf(ret11);}
              else
              {return (String) getAttributeInternal(TRANSDOCNM);}
        }
      
        /**
         * no need b'coz this table not displays in case of supplimentary invoice and suplimentary transfer invoice */
       
      /*  else if(type==492){ //Supplimentary Invoice
                Row[] rws=null;
                 rws= am.getLovRcptStat1().getFilteredRows("DocId",this.getDocIdRcpt());
                 if(rws.length>0){
                    ret=rws[0].getAttribute("RcptNo").toString();
                    return ret;
                  }
                  else
                  {return (String) getAttributeInternal(TRANSDOCNM);}
        }
        else if(type==716){//supplimentary transfer invoice
            ViewObjectImpl issuVo=am.getLovIssuforview();
            issuVo.setNamedWhereClauseParam("bindCldId", getCldId());
            issuVo.setNamedWhereClauseParam("bindSlocId", getSlocId());
            issuVo.setNamedWhereClauseParam("bindOrgId", getOrgId());
            issuVo.setNamedWhereClauseParam("bindDocId", getDocIdRcpt());
            issuVo.executeQuery();
            Row [] rr1=issuVo.getFilteredRows("DocId", getDocIdRcpt());
            if(rr1.length>0){
                return rr1[0].getAttribute("IssuNo").toString();
            }
            else{return (String) getAttributeInternal(TRANSDOCNM);}
        }
         */
        
        else{
            return (String) getAttributeInternal(TRANSDOCNM);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDocNm.
     * @param value value to set the  TransDocNm
     */
    public void setTransDocNm(String value) {
        setAttributeInternal(TRANSDOCNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransRcptAmtSp.
     * @return the TransRcptAmtSp
     */
    public Number getTransRcptAmtSp() {
        return (Number) getAttributeInternal(TRANSRCPTAMTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransRcptAmtSp.
     * @param value value to set the  TransRcptAmtSp
     */
    public void setTransRcptAmtSp(Number value) {
        setAttributeInternal(TRANSRCPTAMTSP, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmInvcSrc.
     */
    public RowIterator getMmInvcSrc() {
        return (RowIterator)getAttributeInternal(MMINVCSRC);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute
     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }
    
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
          CallableStatement st = null;
          try {
               st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
              if (bindVars != null) {
                  for (int z = 0; z < bindVars.length; z++) {
                      st.setObject(z + 2, bindVars[z]);
                  }
              }
              st.executeUpdate();

              return st.getObject(1);
          } catch (SQLException e) {
              
             int end = e.getMessage().indexOf("\n");
              //  throw new JboException(e.getMessage().substring(11, end));
              String msg = e.getMessage();
              FacesMessage ermsg = new FacesMessage(msg);
              ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
              FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);
              return null;
          } finally {
              if (st != null) {
                  try {
                      st.close();
                  } catch (SQLException e) {
                      
                     e.printStackTrace(); 
                  }
              }
          }
      }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
