package appitematt.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 13 17:22:21 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SerachDualVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(SerachDualVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(SerachDualVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        TransHoOrgId {
            public Object get(SerachDualVORowImpl obj) {
                return obj.getTransHoOrgId();
            }

            public void put(SerachDualVORowImpl obj, Object value) {
                obj.setTransHoOrgId((String)value);
            }
        }
        ,
        TransCldId {
            public Object get(SerachDualVORowImpl obj) {
                return obj.getTransCldId();
            }

            public void put(SerachDualVORowImpl obj, Object value) {
                obj.setTransCldId((String)value);
            }
        }
        ,
        TransSlocId {
            public Object get(SerachDualVORowImpl obj) {
                return obj.getTransSlocId();
            }

            public void put(SerachDualVORowImpl obj, Object value) {
                obj.setTransSlocId((Integer)value);
            }
        }
        ,
        TransItmAttNm {
            public Object get(SerachDualVORowImpl obj) {
                return obj.getTransItmAttNm();
            }

            public void put(SerachDualVORowImpl obj, Object value) {
                obj.setTransItmAttNm((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SerachDualVORowImpl object);

        public abstract void put(SerachDualVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int TRANSCLDID = AttributesEnum.TransCldId.index();
    public static final int TRANSSLOCID = AttributesEnum.TransSlocId.index();
    public static final int TRANSITMATTNM = AttributesEnum.TransItmAttNm.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SerachDualVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }
    private String resolvEl(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
          String msg = valueExp.getValue(elContext).toString();
          return msg;
      }
    

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        if(getAttributeInternal(TRANSHOORGID)==null){
            String hoorgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            return hoorgId;
        }else{
        return (String) getAttributeInternal(TRANSHOORGID);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCldId.
     * @return the TransCldId
     */
    public String getTransCldId() {
        if(getAttributeInternal(TRANSCLDID)==null){
            String cldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            return cldId;
        }else{
        return (String) getAttributeInternal(TRANSCLDID);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCldId.
     * @param value value to set the  TransCldId
     */
    public void setTransCldId(String value) {
        setAttributeInternal(TRANSCLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSlocId.
     * @return the TransSlocId
     */
    public Integer getTransSlocId() {
        if(getAttributeInternal(TRANSSLOCID)==null){
            Integer slocId= Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
      return slocId;
        }else{
        return (Integer) getAttributeInternal(TRANSSLOCID);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSlocId.
     * @param value value to set the  TransSlocId
     */
    public void setTransSlocId(Integer value) {
        setAttributeInternal(TRANSSLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmAttNm.
     * @return the TransItmAttNm
     */
    public String getTransItmAttNm() {
        return (String) getAttributeInternal(TRANSITMATTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmAttNm.
     * @param value value to set the  TransItmAttNm
     */
    public void setTransItmAttNm(String value) {
        setAttributeInternal(TRANSITMATTNM, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
