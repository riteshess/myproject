package mmreceiptmtl.model.views;

import mmreceiptmtl.model.services.MMReceiptMtlAMImpl;
import mmreceiptmtl.model.views.common.MmMtlRcptBinVO;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 18 11:20:28 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMtlRcptBinVOImpl extends ViewObjectImpl implements MmMtlRcptBinVO {
    /**
     * This is the default constructor (do not remove).
     */
    public MmMtlRcptBinVOImpl() {
    }

    /**
     * Returns the variable value for CldIdBVar.
     * @return variable value for CldIdBVar
     */
    public String getCldIdBVar() {
        return (String)ensureVariableManager().getVariableValue("CldIdBVar");
    }

    /**
     * Sets <code>value</code> for variable CldIdBVar.
     * @param value value to bind as CldIdBVar
     */
    public void setCldIdBVar(String value) {
        ensureVariableManager().setVariableValue("CldIdBVar", value);
    }

    /**
     * Returns the variable value for SlocIdBVar.
     * @return variable value for SlocIdBVar
     */
    public Integer getSlocIdBVar() {
        return (Integer)ensureVariableManager().getVariableValue("SlocIdBVar");
    }

    /**
     * Sets <code>value</code> for variable SlocIdBVar.
     * @param value value to bind as SlocIdBVar
     */
    public void setSlocIdBVar(Integer value) {
        ensureVariableManager().setVariableValue("SlocIdBVar", value);
    }

    /**
     * Returns the variable value for OrgIdBVar.
     * @return variable value for OrgIdBVar
     */
    public String getOrgIdBVar() {
        return (String)ensureVariableManager().getVariableValue("OrgIdBVar");
    }

    /**
     * Sets <code>value</code> for variable OrgIdBVar.
     * @param value value to bind as OrgIdBVar
     */
    public void setOrgIdBVar(String value) {
        ensureVariableManager().setVariableValue("OrgIdBVar", value);
    }

    /**
     * Returns the variable value for WhIdBVar.
     * @return variable value for WhIdBVar
     */
    public String getWhIdBVar() {
        return (String)ensureVariableManager().getVariableValue("WhIdBVar");
    }

    /**
     * Sets <code>value</code> for variable WhIdBVar.
     * @param value value to bind as WhIdBVar
     */
    public void setWhIdBVar(String value) {
        ensureVariableManager().setVariableValue("WhIdBVar", value);
    }

    /**
     * Returns the variable value for DocIdBVar.
     * @return variable value for DocIdBVar
     */
    public String getDocIdBVar() {
        return (String)ensureVariableManager().getVariableValue("DocIdBVar");
    }

    /**
     * Sets <code>value</code> for variable DocIdBVar.
     * @param value value to bind as DocIdBVar
     */
    public void setDocIdBVar(String value) {
        ensureVariableManager().setVariableValue("DocIdBVar", value);
    }

    /**
     * Returns the variable value for DocIdSrcBVar.
     * @return variable value for DocIdSrcBVar
     */
    public String getDocIdSrcBVar() {
        return (String)ensureVariableManager().getVariableValue("DocIdSrcBVar");
    }

    /**
     * Sets <code>value</code> for variable DocIdSrcBVar.
     * @param value value to bind as DocIdSrcBVar
     */
    public void setDocIdSrcBVar(String value) {
        ensureVariableManager().setVariableValue("DocIdSrcBVar", value);
    }

    /**
     * Returns the variable value for ItmIdBVar.
     * @return variable value for ItmIdBVar
     */
    public String getItmIdBVar() {
        return (String)ensureVariableManager().getVariableValue("ItmIdBVar");
    }

    /**
     * Sets <code>value</code> for variable ItmIdBVar.
     * @param value value to bind as ItmIdBVar
     */
    public void setItmIdBVar(String value) {
        ensureVariableManager().setVariableValue("ItmIdBVar", value);
    }

    /**
     * Returns the variable value for ItmUomBVar.
     * @return variable value for ItmUomBVar
     */
    public String getItmUomBVar() {
        return (String)ensureVariableManager().getVariableValue("ItmUomBVar");
    }

    /**
     * Sets <code>value</code> for variable ItmUomBVar.
     * @param value value to bind as ItmUomBVar
     */
    public void setItmUomBVar(String value) {
        ensureVariableManager().setVariableValue("ItmUomBVar", value);
    }

    /**
     * Returns the variable value for LotIdBVar.
     * @return variable value for LotIdBVar
     */
    public String getLotIdBVar() {
        return (String)ensureVariableManager().getVariableValue("LotIdBVar");
    }

    /**
     * Sets <code>value</code> for variable LotIdBVar.
     * @param value value to bind as LotIdBVar
     */
    public void setLotIdBVar(String value) {
        ensureVariableManager().setVariableValue("LotIdBVar", value);
    }

    /**
     * Returns the variable value for SchDlNoBVar.
     * @return variable value for SchDlNoBVar
     */
    public Integer getSchDlNoBVar() {
        return (Integer)ensureVariableManager().getVariableValue("SchDlNoBVar");
    }

    /**
     * Sets <code>value</code> for variable SchDlNoBVar.
     * @param value value to bind as SchDlNoBVar
     */
    public void setSchDlNoBVar(Integer value) {
        ensureVariableManager().setVariableValue("SchDlNoBVar", value);
    }
    /**
     * Method used for checking if Bin selected is valid.
     * */
    public String isBinValid(String Binid){
       
        String stat="N";
        String lotNo=this.getCurrentRow().getAttribute("LotId").toString();
        Row[] filRw=this.getFilteredRows("LotId", lotNo);
        for(Row lrw:filRw){
            if(lrw!=this.getCurrentRow()){
                if(lrw.getAttribute("BinId")!=null){
                    String bin=lrw.getAttribute("BinId").toString();
                    if(bin.equalsIgnoreCase(Binid)){
                        stat="Y";
                    }
                }
            }
        }
        System.out.println("isBinValid vo imple "+stat);
        return stat;
    }
    
    /**
     * Method to check if bin quantity is valid.
     * @return Y-Invalid Bin Quantity
     *         N- Valid
     * */
    public String isBinQtyValid(String lotNo,String binId,Number obj){
        MMReceiptMtlAMImpl am=(MMReceiptMtlAMImpl)this.getApplicationModule();
        Number lotqty=new Number(0);
        String stat="N";
        if(this.getCurrentRow().getAttribute("LotId")!=null || this.getCurrentRow().getAttribute("BinId")!=null){
       //  String lotNo=this.getCurrentRow().getAttribute("LotId").toString();
       //  String binId=this.getCurrentRow().getAttribute("BinId").toString();
         System.out.println("lotn-"+lotNo+":bin-"+binId);
         Row[] r=am.getMmMtlRcptLot1().getFilteredRows("LotId", lotNo);
         if(r.length>0){
            lotqty= (Number)r[0].getAttribute("LotQty");
         }
         RowQualifier rq=new RowQualifier(this);
         rq.setWhereClause("LotId='"+lotNo+"'");
        //    and BinId='"+binId+"'
         Row[] filRw=this.getFilteredRows(rq);
         
         Number sumqty=new Number(0);
         for(Row lrw:filRw){
            if(lrw!=this.getCurrentRow()){
                  Number binqty=(Number)lrw.getAttribute("BinQtyBs");
                  if(binqty==null){
                      binqty=new Number(0);
                  }
                  sumqty=sumqty.add(binqty);
            }
         }
         
         sumqty=sumqty.add(obj);
         System.out.println("SUMQTY="+sumqty+"---- LOTQTY="+lotqty);
         if(sumqty.compareTo(lotqty)==1){
             stat="Y";
         }
        }
        return stat;
    }
    
    public Number getBinQtyForSr(String LotId,String BinId){
        Number zero=new Number(0);
        RowQualifier rq=new RowQualifier(this);
        rq.setWhereClause("LotId='"+LotId+"' and BinId='"+BinId+"'");
        Row[] rows=this.getFilteredRows(rq);
        if(rows.length>0){
            return (Number)rows[0].getAttribute("BinQty");
        }else{
            return zero;
        }
    }
    
    public void setValBinQtyBs(Number binQty){
        //Twist here. We are setting BinQtyBs to BinQty.Opposite to Function Name. As on Page it is BinQtyBs.
        MMReceiptMtlAMImpl am=(MMReceiptMtlAMImpl)this.getApplicationModule();
        Row curR=am.getMmMtlRcptItm1().getCurrentRow();
        Number fctr=(Number)curR.getAttribute("UomConvFctr");
     //   Row r=this.getCurrentRow();
        if(binQty==null){
            binQty=new Number(0);
        }
        
        Number mult=(binQty).divide(fctr);
        System.out.println("binQty::: vo imple  "+binQty);
        this.getCurrentRow().setAttribute("BinQty",mult);
        if(this.getCurrentRow().getAttribute("DocDtSrc")==null){
            this.getCurrentRow().setAttribute("DocDtSrc",curR.getAttribute("DocDtSrc"));
        }
      
    }
}
