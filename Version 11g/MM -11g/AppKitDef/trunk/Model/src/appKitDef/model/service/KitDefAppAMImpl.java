package appKitDef.model.service;

import appKitDef.model.service.common.KitDefAppAM;
import appKitDef.model.views.AppKitNewVOImpl;
import appKitDef.model.views.AppKitVOImpl;


import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 21 12:36:01 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class KitDefAppAMImpl extends ApplicationModuleImpl implements KitDefAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    
     public static int VARCHAR = Types.VARCHAR;
         String add_mode = null;
         String edit_mode = null;
         String view_mode = null;
         String del_mode = null;
    public KitDefAppAMImpl() {
    }

    /**
     * Container's getter for AppGrp1.
     * @return AppGrp1
     */
    public ViewObjectImpl getAppGrp1() {
        return (ViewObjectImpl)findViewObject("AppGrp1");
    }

    /**
     * Container's getter for AppItmPrf1.
     * @return AppItmPrf1
     */
    public ViewObjectImpl getAppItmPrf1() {
        return (ViewObjectImpl)findViewObject("AppItmPrf1");
    }

    /**
     * Container's getter for AppKitNew1.
     * @return AppKitNew1
     */
    public ViewObjectImpl getAppKitNew1() {
        return (ViewObjectImpl)findViewObject("AppKitNew1");
    }

    /**
     * Container's getter for AppKit1.
     * @return AppKit1
     */
    public AppKitVOImpl getAppKit1() {
        return (AppKitVOImpl)findViewObject("AppKit1");
    }

    /**
     * Container's getter for GrpTOItmPrfVL1.
     * @return GrpTOItmPrfVL1
     */
    public ViewLinkImpl getGrpTOItmPrfVL1() {
        return (ViewLinkImpl)findViewLink("GrpTOItmPrfVL1");
    }

    /**
     * Container's getter for KitNewToAppKitVL2.
     * @return KitNewToAppKitVL2
     */
    public ViewLinkImpl getKitNewToAppKitVL2() {
        return (ViewLinkImpl)findViewLink("KitNewToAppKitVL2");
    }

    /**
     * Container's getter for LovInputItmId1.
     * @return LovInputItmId1
     */
    public ViewObjectImpl getLovInputItmId1() {
        return (ViewObjectImpl)findViewObject("LovInputItmId1");
    }

    /**
     * Container's getter for AppKitSearch1.
     * @return AppKitSearch1
     */
    public ViewObjectImpl getAppKitSearch1() {
        return (ViewObjectImpl)findViewObject("AppKitSearch1");
    }

    /**
     * Container's getter for ViewItmDesc1.
     * @return ViewItmDesc1
     */
    public ViewObjectImpl getViewItmDesc1() {
        return (ViewObjectImpl)findViewObject("ViewItmDesc1");
    }

    /**
     * Container's getter for LovUomID1.
     * @return LovUomID1
     */
    public ViewObjectImpl getLovUomID1() {
        return (ViewObjectImpl)findViewObject("LovUomID1");
    }
    
    public String resolvEl(String data) {
         FacesContext fc = FacesContext.getCurrentInstance();
         Application app = fc.getApplication();
         ExpressionFactory elFactory = app.getExpressionFactory();
         ELContext elContext = fc.getELContext();
         ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
         String msg = valueExp.getValue(elContext).toString();
         return msg;
     }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
           CallableStatement st = null;
           try {
               st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
               if (bindVars != null) {
                   for (int z = 0; z < bindVars.length; z++) {
                       st.setObject(z + 2, bindVars[z]);
                   }
               }
               st.registerOutParameter(7, VARCHAR);
               st.registerOutParameter(8, VARCHAR);
               st.registerOutParameter(9, VARCHAR);
               st.registerOutParameter(10, VARCHAR);
               st.executeUpdate();
               try {
                   setAdd_mode(st.getObject(7).toString());
                   setEdit_mode((st.getObject(8).toString()));
                   setView_mode(st.getObject(9).toString());
                   setDel_mode(st.getObject(10).toString());
               } catch (NullPointerException e) {
                   System.out.println(e);
                   e.printStackTrace();
               }
               return st.getObject(1);

           } catch (SQLException e) {
               throw new JboException(e);
           } finally {
               if (st != null) {
                   try {
                       st.close();
                   } catch (SQLException e) {

                   }
               }
           }
       }

    protected Object callStoredFunctionNew(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
          System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }
    
       
       public Integer on_load_page()
               {  int count = 0;
               String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
               Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
               String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
               Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()); 
               callStoredFunction(VARCHAR,"APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)",
                                          new Object[] { cld_id, sloc_id, org_id, 1,usr_id});
               String calledFrom =  resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString(); 
               if(add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false)
               {            count = 1;
                   }
               else if(edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false)
               {
                   count = 1;
                   }
               else if(view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
               else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false)
               {
                  count = 1; 
                   }
                else if(calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false)
               {
                  count = 1; 
                   }
               Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
               paramMap.put("PARAM_PG_ADD_MD", add_mode); 
               paramMap.put("PARAM_PG_EDIT_MD", edit_mode); 
               paramMap.put("PARAM_PG_VIEW_MD", view_mode); 
               paramMap.put("PARAM_PG_DEL_MD", del_mode); 
                     
         return count;
           }
    public String isItemDeletable(){
        //FN_IS_RQMT_DELETABLE
        String flag="N";
        String cld_id =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
        String org_id =  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString(); 
        ViewObjectImpl appkit=getAppKitNew1();
        if(appkit.getCurrentRow().getAttribute("OutputItmId")!=null){
        String itmId=appkit.getCurrentRow().getAttribute("OutputItmId").toString();
           String Output1 =(callStoredFunctionNew(Types.VARCHAR, "mm.MM_IS_KIT_EDITABLE (?,?,?,?)", new Object[] {cld_id,sloc_id,org_id,itmId})).toString();
       
       if(Output1!=null){
           //System.out.println("MM.MM_IS_KIT_EDITABLE : "+Output1);
           if(Output1.equalsIgnoreCase("N")){
               flag="N";
           }
           else{
               flag="Y";
           }
       }
     }
       
        return flag;
    }
    

    public String optserializeflag(){
        String cldId =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
        String hoOrgId =  resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString(); 
        String flag=null;
        
        Row curr=this.getAppKitNew1().getCurrentRow();
        
        if(curr!=null && curr.getAttribute("OutputItmId")!=null){
        ViewObjectImpl newitmvo=this.getnewItmPrf();
        newitmvo.setNamedWhereClauseParam("BindCldId", cldId);
        newitmvo.setNamedWhereClauseParam("BindSlocId", slocId);
        newitmvo.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        newitmvo.setNamedWhereClauseParam("BindItmId", curr.getAttribute("OutputItmId"));
        newitmvo.executeQuery();
        
        Row [] filteredRows=newitmvo.getAllRowsInRange();
        if(filteredRows.length>0){
            flag=filteredRows[0].getAttribute("SerializedFlg").toString();
        }
        
        }
        return flag;
    }
    
    
    public String inptSerializeflag(){
        String cldId =  resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString(); 
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()); 
        String hoOrgId =  resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString(); 
        String flag=null;
        
        Row curr=this.getAppKit1().getCurrentRow();
        
        if(curr!=null && curr.getAttribute("InputItmId")!=null){
        ViewObjectImpl newitmvo=this.getnewItmPrf();
        newitmvo.setNamedWhereClauseParam("BindCldId", cldId);
        newitmvo.setNamedWhereClauseParam("BindSlocId", slocId);
        newitmvo.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        newitmvo.setNamedWhereClauseParam("BindItmId", curr.getAttribute("InputItmId"));
        newitmvo.executeQuery();
        
        Row [] filteredRows=newitmvo.getAllRowsInRange();
        if(filteredRows.length>0){
            flag=filteredRows[0].getAttribute("SerializedFlg").toString();
        }
        
        }
        return flag;
    }


       public void setAdd_mode(String add_mode) {
           this.add_mode = add_mode;
       }

       public String getAdd_mode() {
           return add_mode;
       }

       public void setEdit_mode(String edit_mode) {
           this.edit_mode = edit_mode;
       }

       public String getEdit_mode() {
           return edit_mode;
       }

       public void setView_mode(String view_mode) {
           this.view_mode = view_mode;
       }

       public String getView_mode() {
           return view_mode;
       }

       public void setDel_mode(String del_mode) {
           this.del_mode = del_mode;
       }

       public String getDel_mode() {
           return del_mode;
       }

    /**
     * Container's getter for newItmPrf.
     * @return newItmPrf
     */
    public ViewObjectImpl getnewItmPrf() {
        return (ViewObjectImpl)findViewObject("newItmPrf");
    }
}
