package materialreturnnote.model.service;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import materialreturnnote.model.service.common.MaterialReturnNoteAM;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
//import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Number;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 02 17:36:52 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MaterialReturnNoteAMImpl extends ApplicationModuleImpl implements MaterialReturnNoteAM {
    /**
     * This is the default constructor (do not remove).
     */
     
    public MaterialReturnNoteAMImpl() {
    }
    /**
     * Container's getter for MmMrn.
     * @return MmMrn
     */
    public ViewObjectImpl getMmMrn() {
        return (ViewObjectImpl)findViewObject("MmMrn");
    }

    private static  ADFLogger adflog = ADFLogger.createADFLogger(MaterialReturnNoteAMImpl.class);

    /**
     * Container's getter for MmMrnItm.
     * @return MmMrnItm
     */
    public ViewObjectImpl getMmMrnItm() {
        return (ViewObjectImpl)findViewObject("MmMrnItm");
    }

    /**
     * Container's getter for FkMmMrnItmVL1.
     * @return FkMmMrnItmVL1
     */
    public ViewLinkImpl getFkMmMrnItmVL1() {
        return (ViewLinkImpl)findViewLink("FkMmMrnItmVL1");
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
          adflog.info("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    } 
    
    /**
     *  Create DocId and DocDt 
     * @param UsrId
     * @param CldId
     * @param SlocId
     * @param OrgId
     */
    
    
    public void setTxnIdForCurrentRow(Integer UsrId,String CldId,Integer SlocId,String OrgId){
    
      Row currentRow=this.getMmMrn().getCurrentRow();
    // String txnId = (String)callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?)", new Object[]{SlocId,CldId,OrgId,tableName}); 
     String docId =(String)(callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {CldId,SlocId, OrgId,UsrId, new Integer(18528),new Integer(0)})); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        adflog.info("--TxnId new created--"+docId);
     currentRow.setAttribute("DocId", docId);
     currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
     currentRow.setAttribute("MrnStatDt", new Timestamp(System.currentTimeMillis()));
     currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
    
    }
    
    /**
     * Generate Issue No
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param TableName
     * @return
     */
    public String generateMRNNo (Integer SlocId ,String CldId, String OrgId, String TableName,Integer fyId){
        Row mrnRw=this.getMmMrn().getCurrentRow();
        String mrnNo=null;
        if(mrnRw.getAttribute("MrnNo")==null){
        
           mrnNo = (String)callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[]{SlocId,CldId,OrgId,TableName,null ,fyId});
         adflog.info("new id    "+mrnNo);
         this.getMmMrn().getCurrentRow().setAttribute("MrnNo", mrnNo);
        }else{
            mrnNo = mrnRw.getAttribute("MrnNo").toString();
        }
         return mrnNo;
    }
    
    /**
     *
     * @param CldId
     * @param OrgId
     * @param geDate
     * @param Mode
     * @return
     */
    
    public Integer getFYid(String CldId,String OrgId,Timestamp geDate,String Mode){
        ViewObjectImpl mrn = this.getMmMrn();
        Integer fyId=-1;
        if(mrn.getCurrentRow().getAttribute("DocDt")!=null){
            if(geDate!=null){
                  fyId =(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {CldId,OrgId,geDate}));
            }else{
                fyId =(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {CldId,OrgId,mrn.getCurrentRow().getAttribute("DocDt")}));
            }
        
        adflog.info("-FY RETURNED-"+fyId);
        if(Mode.equalsIgnoreCase("A")){
            adflog.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmMrn();
            if(fyId>0){
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        }else if(Mode.equalsIgnoreCase("V")){
            adflog.info("In case mode is validation");
            fyId=(Integer)mrn.getCurrentRow().getAttribute("FyId");
        }
            return fyId;
        }
        return fyId;
    }

    public void addItmFormMrNTable() {
        ViewObjectImpl mrnVo = this.getMmMrn();
        ViewObjectImpl mrnItmVo = this.getMmMrnItm();
        ViewObjectImpl issuItm = this.getLovItmIdFromIssue();
        ViewObjectImpl mrnItmcheck = this.getMmMrnItm1();

        Row currMrn = mrnVo.getCurrentRow();
        String docIdIssue = currMrn.getAttribute("DocIdIssu").toString();
        String itmDesc = currMrn.getAttribute("TransItemId").toString();
        // String issueNo = currMrn.getAttribute("TransIssueNo").toString();
        String ItemId = currMrn.getAttribute("TransTempId").toString();

     
        Number totQty=new Number(0);
        RowQualifier rq=new RowQualifier(getMmMrn1());
        rq.setWhereClause("DocIdIssu='"+docIdIssue+"' and AuthStat='Y'");
        Row[] rr1 = this.getMmMrn1().getFilteredRows(rq);
        String mrnDoc = null;
        adflog.info("rr1 mrn after filter  length------ " + rr1.length);

        if (rr1.length > 0) {
        for(Row r111: rr1){
                mrnDoc = r111.getAttribute("DocId").toString();

                //TransTempId
                if (mrnDoc != null) {
                    RowQualifier rq1 = new RowQualifier(mrnItmcheck);
                    rq1.setWhereClause("DocId = '" + mrnDoc + "' and ItmId = '" + ItemId + "'");
                    Row[] rr2 = mrnItmcheck.getFilteredRows(rq1);
                    adflog.info("rr2 length------ " + rr2.length +" doc id is "+ mrnDoc +" item id is "+ItemId);

                    if (rr2.length > 0) {
                        for (Row r : rr2) {
                            Number sum = new Number(0);
                            Number okQty = (Number)r.getAttribute("OkQty");
                            Number scrpQty = (Number)r.getAttribute("ScrpQty");
                            Number rwkQty = (Number)r.getAttribute("RwkQty");
                            Number rejQty = (Number)r.getAttribute("RejQty");
                            sum = okQty.add(scrpQty).add(rwkQty).add(rejQty);
                            totQty=totQty.add(sum);
                            adflog.info("total quantity and sum is : "+totQty+ " "+sum);
                        }
                    }
                }
            }
                System.out.println("sum of all previous value is " + totQty);
                RowQualifier rowQualifier = new RowQualifier(issuItm);
                rowQualifier.setWhereClause("DocId = '" + docIdIssue + "' and ItmDesc = '" + itmDesc + "'");
                Row[] issueItmR = issuItm.getFilteredRows(rowQualifier);
                adflog.info("issu item string "+rowQualifier.getExprStr() + "---- length ---- issu qty " +issueItmR[0].getAttribute("IssuQty")+"  "+ issueItmR.length + " " +
                            ((Number)issueItmR[0].getAttribute("IssuQty")).compareTo(totQty));
                if (issueItmR.length > 0) {
                    if (((Number)issueItmR[0].getAttribute("IssuQty")).compareTo(totQty) > 0) {

                        for (Row r : issueItmR) {
                            adflog.info(r.getAttribute("ItmId") + "--------" + r.getAttribute("ItmUom"));
                            Row newMrnItm = mrnItmVo.createRow();
                            newMrnItm.setAttribute("ItmId", r.getAttribute("ItmId"));
                            newMrnItm.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                            newMrnItm.setAttribute("TransTotAvlQty",
                                                   ((Number)issueItmR[0].getAttribute("IssuQty")).minus(totQty));
                            mrnItmVo.insertRow(newMrnItm);
                        }
                        adflog.info("tot available quantity is " +
                                    mrnItmVo.getCurrentRow().getAttribute("TransTotAvlQty"));
                    }else{
                        FacesMessage message = new FacesMessage("Issue quantity not available for this item");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext fc = FacesContext.getCurrentInstance();
                        fc.addMessage(null, message);
                    }
                }


            
        } else {
            RowQualifier rowQualifier = new RowQualifier(issuItm);
            rowQualifier.setWhereClause("DocId = '" + docIdIssue + "' and ItmDesc = '" + itmDesc + "'");
            Row[] issueItmR = issuItm.getFilteredRows(rowQualifier);
            adflog.info(rowQualifier.getExprStr() + "---- length ----" + issueItmR.length);
            if (issueItmR.length > 0) {

                for (Row r : issueItmR) {
                    adflog.info(r.getAttribute("ItmId") + "--------" + r.getAttribute("ItmUom"));
                    Row newMrnItm = mrnItmVo.createRow();
                    newMrnItm.setAttribute("ItmId", r.getAttribute("ItmId"));
                    newMrnItm.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                    mrnItmVo.insertRow(newMrnItm);
                }
                adflog.info("tot available quantity is " + mrnItmVo.getCurrentRow().getAttribute("TransTotAvlQty"));

            }
        }


        /* */
        currMrn.setAttribute("TransItemId", null);
        currMrn.setAttribute("TransTempId", null);
    }


    public void filterSrNo(){
         ViewObject vo = this.getMmMrn();
         ViewObjectImpl servo = this.getMmMrnItm();
         ViewObjectImpl srVo = this.getLocSRNoFromIssue();
         Row currItm = servo.getCurrentRow();
         Row currRow = vo.getCurrentRow();
         adflog.info("---cld "+currRow.getAttribute("CldId")+"-------"+currRow.getAttribute("SlocId")+"------------"+currRow.getAttribute("OrgId")+"------"+currRow.getAttribute("DocIdIssu")+"---"+currItm.getAttribute("ItmId"));
       ViewCriteria vc = srVo.getViewCriteria("LocSRNoFromIssueVOCriteria");
       srVo.applyViewCriteria(vc);
        srVo.setNamedWhereClauseParam("SrCldIdBind", currRow.getAttribute("CldId"));
        srVo.setNamedWhereClauseParam("SrSlocIdBind", currRow.getAttribute("SlocId"));
        srVo.setNamedWhereClauseParam("SrOrgIdBind", currRow.getAttribute("OrgId"));
        srVo.setNamedWhereClauseParam("SrDocIdBind", currRow.getAttribute("DocIdIssu"));
        srVo.setNamedWhereClauseParam("SrItmIdBind", currItm.getAttribute("ItmId"));
        adflog.info(srVo.getQuery());
        srVo.executeQuery();
    }
    
    public String isItmNameDuplicate(String value){
        ViewObjectImpl mrnVo = this.getMmMrn();
        ViewObjectImpl mrnItmVo = this.getMmMrnItm();
        Row currRow = mrnVo.getCurrentRow();
        String cld_id = currRow.getAttribute("CldId").toString();
        Integer sloc_id = Integer.parseInt(currRow.getAttribute("SlocId").toString());
        String org_id = currRow.getAttribute("OrgId").toString();
        String doc_id = currRow.getAttribute("DocId").toString();
        String retvalue = "N";
        adflog.info("value--------------------"+value);
        if(value!=null){
            String itmId = null;
            Row [] itmrow = this.getLovItmId().getFilteredRows("ItmDesc", value);
            if(itmrow.length>0){
                itmId = itmrow[0].getAttribute("ItmId").toString();
            }
            if(itmId!=null){
               RowQualifier  rowQualifier = new RowQualifier(mrnItmVo);
               rowQualifier.setWhereClause("CldId = '"+cld_id+"' and SlocId = "+sloc_id+" and OrgId = '"+org_id+"' and DocId = '"+doc_id+"' and ItmId = '"+itmId+"'");
              
               Row []row = mrnItmVo.getFilteredRows(rowQualifier);
                adflog.info(rowQualifier.getExprStr()+"-------------  "+row.length);
               if(row.length>0){
                   retvalue= "Y";
               }
            }
        }
        return retvalue;
    }
    
    public String isSrNoDuplicate(String value){
        ViewObjectImpl mrnVo = this.getMmMrn();
        ViewObjectImpl mrnItmVo = this.getMmMrnItm();
        ViewObjectImpl mrnItmStkVo =this.getMmMrnItmStk(); 
        Row currRow = mrnVo.getCurrentRow();
        String cld_id = currRow.getAttribute("CldId").toString();
        Integer sloc_id = Integer.parseInt(currRow.getAttribute("SlocId").toString());
        String org_id = currRow.getAttribute("OrgId").toString();
        String doc_id = currRow.getAttribute("DocId").toString();
        Row itmRow = mrnItmStkVo.getCurrentRow();
        String itmId = itmRow.getAttribute("ItmId").toString();
        String retvalue = "N";
        adflog.info("value--------------------"+value);
        if(value!=null && itmId!=null){
               RowQualifier  rowQualifier = new RowQualifier(mrnItmStkVo);
               rowQualifier.setWhereClause("CldId = '"+cld_id+"' and SlocId = "+sloc_id+" and OrgId = '"+org_id+"' and DocId = '"+doc_id+"' and ItmId = '"+itmId+"' and SrNo = '"+value+"'");
              
               Row []row = mrnItmStkVo.getFilteredRows(rowQualifier);
                adflog.info(rowQualifier.getExprStr()+"-------------  "+row.length);
               if(row.length>0){
                   for(Row r : row){
                       adflog.info("cournt 11----------");
                       if(r != itmRow){
                           
                           retvalue= "Y";
                       }
                   }
                 
               }
            }
        
        return retvalue;
    }
    
    
    public String isLotNoDuplicate(String value){
        ViewObjectImpl mrnVo = this.getMmMrn();
        ViewObjectImpl mrnItmVo = this.getMmMrnItm();
        ViewObjectImpl mrnItmStkVo =this.getMmMrnItmStk(); 
        Row currRow = mrnVo.getCurrentRow();
        String cld_id = currRow.getAttribute("CldId").toString();
        Integer sloc_id = Integer.parseInt(currRow.getAttribute("SlocId").toString());
        String org_id = currRow.getAttribute("OrgId").toString();
        String doc_id = currRow.getAttribute("DocId").toString();
        Row itmRow = mrnItmStkVo.getCurrentRow();
        String itmId = itmRow.getAttribute("ItmId").toString();
        String srNo = itmRow.getAttribute("SrNo").toString();
        String retvalue = "N";
        adflog.info("value--------------------"+value);
        if(value!=null && itmId!=null){
               RowQualifier  rowQualifier = new RowQualifier(mrnItmStkVo);
               rowQualifier.setWhereClause("CldId = '"+cld_id+"' and SlocId = "+sloc_id+" and OrgId = '"+org_id+"' and DocId = '"+doc_id+"' and ItmId = '"+itmId+"' and SrNo = '"+srNo+"' and LotId = '"+value+"'");
              
               Row []row = mrnItmStkVo.getFilteredRows(rowQualifier);
                adflog.info(rowQualifier.getExprStr()+"-------------  "+row.length);
               if(row.length>0){
                   for(Row r : row){
                       adflog.info("cournt 11----------");
                       if(r != itmRow){
                           
                           retvalue= "Y";
                       }
                   }
                 
               }
            }
        
        return retvalue;
    }
    // view Mrn detail from serach page  
    public void mrnViewQuery(){
         ViewObject vo = this.getMmMrn();
         ViewObjectImpl servo = this.getSearchMrn();
         Row currRow = servo.getCurrentRow();
       ViewCriteria vc = getMmMrn().getViewCriteria("MmMrnVOCriteria");
       vo.applyViewCriteria(vc);
       vo.setNamedWhereClauseParam("CldIdBindVar", currRow.getAttribute("CldId"));
       vo.setNamedWhereClauseParam("SlocIdBindVar", currRow.getAttribute("SlocId"));
       vo.setNamedWhereClauseParam("OrgIdBindVar", currRow.getAttribute("OrgId"));
       vo.setNamedWhereClauseParam("DocIdBindVar", currRow.getAttribute("DocId"));
      
       vo.executeQuery();
    }
    
    public void searchMrnAction(){
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl trnsSrchVo = this.getTransMrnSearch();
        ViewObjectImpl searchVo = this.getSearchMrn();
        Row currTransSrch = trnsSrchVo.getCurrentRow();
        
       String itmId = null;
       if(currTransSrch.getAttribute("TransItmNm")!=null){
           Row []xx = this.getLovItmId().getFilteredRows("ItmDesc", currTransSrch.getAttribute("TransItmNm"));
           if(xx.length>0){
               itmId = xx[0].getAttribute("ItmId").toString();
           }
       }
        adflog.info("BindOrgId--"+p_org_id+"TransMrnNo---"+currTransSrch.getAttribute("TransMrnNo")+"TransRqmtAreaId---"+currTransSrch.getAttribute("TransRqmtAreaId")+"TransWhIdRetTo"+currTransSrch.getAttribute("TransWhIdRetTo")+"TransOrgIdRetTo---"+currTransSrch.getAttribute("TransOrgIdRetTo"));
        adflog.info("TransMrnStat---"+currTransSrch.getAttribute("TransMrnStat")+"TransMrsDtFrom----"+currTransSrch.getAttribute("TransMrsDtFrom")+"TransMrsDtTo----"+currTransSrch.getAttribute("TransMrsDtTo")+"TransSrNo-----"+currTransSrch.getAttribute("TransSrNo")+"itmId---"+itmId);
        searchVo.setNamedWhereClauseParam("BindOrgId", p_org_id);
        searchVo.setNamedWhereClauseParam("BindMrnNo", currTransSrch.getAttribute("TransMrnNo"));
        searchVo.setNamedWhereClauseParam("BindRqmtAreaId", currTransSrch.getAttribute("TransRqmtAreaId"));
        searchVo.setNamedWhereClauseParam("BindWhIdRetTo", currTransSrch.getAttribute("TransWhIdRetTo"));
        searchVo.setNamedWhereClauseParam("BindOrgIdRetTo", currTransSrch.getAttribute("TransOrgIdRetTo"));
        searchVo.setNamedWhereClauseParam("BindMrnStat", currTransSrch.getAttribute("TransMrnStat"));
        searchVo.setNamedWhereClauseParam("BindDateFrom", currTransSrch.getAttribute("TransMrsDtFrom"));
        searchVo.setNamedWhereClauseParam("BindDateTo", currTransSrch.getAttribute("TransMrsDtTo"));
        searchVo.setNamedWhereClauseParam("BindItmId", itmId);
        searchVo.setNamedWhereClauseParam("BindSrNo", currTransSrch.getAttribute("TransSrNo"));
        searchVo.executeQuery();
        
    }
    public void resetSearch(){
        ViewObjectImpl trnsSrchVo = this.getTransMrnSearch();
        ViewObjectImpl searchVo = this.getSearchMrn();
        //Row currTransSrch = trnsSrchVo.getCurrentRow();
        searchVo.setNamedWhereClauseParam("BindOrgId", "-1");
        searchVo.setNamedWhereClauseParam("BindMrnNo", null);
        searchVo.setNamedWhereClauseParam("BindRqmtAreaId", null);
        searchVo.setNamedWhereClauseParam("BindWhIdRetTo", null);
        searchVo.setNamedWhereClauseParam("BindOrgIdRetTo", null);
        searchVo.setNamedWhereClauseParam("BindMrnStat",null);
        searchVo.setNamedWhereClauseParam("BindDateFrom", null);
        searchVo.setNamedWhereClauseParam("BindDateTo", null);
        searchVo.setNamedWhereClauseParam("BindItmId", null);
        searchVo.setNamedWhereClauseParam("BindSrNo", null);
        searchVo.executeQuery();
    }
    
    public void mrnItmStkRmv(){
       ViewObjectImpl mrnVo = this.getMmMrnItmStk();
       Row r= mrnVo.getCurrentRow();
       r.remove();
    }
    
    public String issueDupValid(String issueno){
        String flag="N";
      /* ViewObjectImpl mmMrnVo=getMmMrn();
       String cldId=mmMrnVo.getCurrentRow().getAttribute("CldId").toString();
       int slocId=Integer.parseInt(mmMrnVo.getCurrentRow().getAttribute("SlocId").toString());
       String orgId=mmMrnVo.getCurrentRow().getAttribute("OrgId").toString();
      if(issueno!=null){
       RowQualifier rowQualifier = new RowQualifier(this.getLovMtlIssueNo1());
       rowQualifier.setWhereClause("CldId='"+cldId+"' AND SlocId= "+slocId+" AND OrgId='"+orgId+"' AND IssuNo='"+issueno+"'");
       Row[] filteredRows = this.getLovMtlIssueNo1().getFilteredRows(rowQualifier); 
       if(filteredRows.length>0){
           //new mmmrn1 vo instance without any filteration
           for(Row r:filteredRows){
               String issuedocId=r.getAttribute("DocId").toString();
               System.out.println("issuedocId"+issuedocId);
               Row[] rows=getMmMrn().getFilteredRows("DocIdIssu",issuedocId);
               System.out.println("mrn length after doc id found-----"+rows.length);
               if(rows.length>0){
               for(Row mrn1R: rows){
                   if(mrn1R!=getMmMrn().getCurrentRow()){
                       flag="Y";
                       System.out.println("doc issue id match found");
                   }
                   else{
                       
                   }
                 }
               }
               else{
                   flag="N";
               }
           }
       }
           
        }    
    */             
        return flag;
    }
    
    
    public String getWfNo(Integer SlocId,String CldId,String OrgId,Integer DocNo) 
       {
           try {
               Object obj=callStoredFunction(Types.VARCHAR,"APP.WF_GET_ID(?,?,?,?,?)",new Object[] {SlocId, CldId,OrgId, DocNo,0 });
               return obj.toString();
           } catch (Exception e) {
               return "0";
           }
       
       }
       
       private static int INTEGER = Types.NUMERIC;
       private static int DATE = Types.DATE;
       private static int STRING = Types.VARCHAR;
       private static int NUMBER = Types.NUMERIC;
       
       
       public Integer getUsrLvl(Integer SlocId,String CldId,String OrgId,Integer UsrId,String WfNo,String DocNo)
       {
           Object obj= callStoredFunction(NUMBER,"APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {SlocId,CldId,OrgId,UsrId,WfNo,DocNo,0 });
           if(obj!=null){
               UsrId=Integer.parseInt(obj.toString());
           }
           
           return (Integer)UsrId;
       }
       
       public Integer insIntoTxn(Integer SlocId,String CldId,String OrgId,Integer DocNo,String WfNo,Integer usr_idFrm,Integer usr_idTo,Integer levelTo,Integer levelFrm,String action,String remark,Number amount )
       {
       String DocId=getMmMrn().getCurrentRow().getAttribute("DocId").toString();
    
      // Integer DocNo1 = 18528; 
           adflog.info("DocNo-------"+DocNo+"  DocId----"+DocId+"  WfNo----"+WfNo+"DocNo1-----"+DocNo);
         Object obj=callStoredFunction(NUMBER,"APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)",new Object[] { SlocId, CldId,OrgId, DocNo,0, 
                                                                                                                          WfNo, DocId,usr_idFrm,
                                                                                                                          usr_idTo, levelFrm, levelTo, 
                                                                                                                          action, remark,amount});
            adflog.info("function return a value inthe txn is "+obj);
                Integer temp=Integer.parseInt(obj.toString());
                return temp;
       
       }
       
       public Integer pendingCheck(Integer SlocId,String CldId,String OrgId,Integer DocNo){
          
           String DocId= getMmMrn().getCurrentRow().getAttribute("DocId").toString();
           //System.out.println("DOCIDTXN--"+docIdTxn);
          // Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId });
          Object obj= Integer.parseInt(callStoredFunction(NUMBER,"APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {SlocId,CldId,OrgId,DocNo,DocId,0}).toString());

             Integer UsrId=null; 
             if(obj!=null){
                 UsrId=Integer.parseInt(obj.toString());
             }
             return UsrId;
          }
       
    public void setoutcome(String wfvalue) {
        System.out.println("set outcome"+wfvalue);
        if(wfvalue.equalsIgnoreCase("A")){
            
            this.getMmMrn().getCurrentRow().setAttribute("AuthStat", "Y"); 
            this.getMmMrn().getCurrentRow().setAttribute("MrnStat", "424"); 
            this.getMmMrn().getCurrentRow().setAttribute("MrnStatDt",new Timestamp(System.currentTimeMillis())); 
            //System.out.println("set outcome"+getMmMrn().getCurrentRow().getAttribute("AuthStat"));
            
            String cldId=getMmMrn().getCurrentRow().getAttribute("CldId").toString();
            int slocId=Integer.parseInt(getMmMrn().getCurrentRow().getAttribute("SlocId").toString());
            String orgId=getMmMrn().getCurrentRow().getAttribute("OrgId").toString();
            String docId=getMmMrn().getCurrentRow().getAttribute("DocId").toString();
            Integer fyId=Integer.parseInt(getMmMrn().getCurrentRow().getAttribute("FyId").toString());
            
            String output=callStoredFunction(NUMBER, "mm.mm_updt_mrn_scrp(?,?,?,?,?)", new Object[] { cldId,slocId,orgId,docId,fyId}).toString();
            adflog.info("output of mmmrn updatescrap "+output);
            //mm_updt_mrn_scrp
        }
        
    }
    public String getUsrNm(Integer usrId){
        String usrNm=null;
        ViewObjectImpl usrvo=this.getLovUsrId();
            Row [] row1=usrvo.getFilteredRows("UsrId", usrId);
            if(row1.length>0){
                usrNm=row1[0].getAttribute("UsrName").toString();
            }
            System.out.println("user namepending is "+usrNm);
        return usrNm;
    }
    
    
    public String setTrasTotStkValue(){
  /*     Row curr=getMmMrnItmStk().getCurrentRow();
      adflog.info("lot id is "+curr.getAttribute("LotId")+"current row is "+curr);
      if(curr!=null && curr.getAttribute("LotId")!=null){
        Integer slocId=Integer.parseInt(curr.getAttribute("SlocId").toString());
        Number avlQty = (Number)callStoredFunction(Types.NUMERIC, "MM_MRN_AVL_QTY(?,?,?,?,?,?)", new Object[]{curr.getAttribute("CldId"),slocId,curr.getAttribute("OrgId"),curr.getAttribute("LotId"),curr.getAttribute("ItmId") });
          adflog.info("available quantity is "+avlQty);
        if(avlQty!=null){
            curr.setAttribute("TranstotIssLotQty", avlQty);
        }
      } */
        return null;
    }
    /**
     * Container's getter for MmMrnItmStk.
     * @return MmMrnItmStk
     */
    public ViewObjectImpl getMmMrnItmStk() {
        return (ViewObjectImpl)findViewObject("MmMrnItmStk");
    }

    /**
     * Container's getter for FkMmMrnItmStkVL1.
     * @return FkMmMrnItmStkVL1
     */
    public ViewLinkImpl getFkMmMrnItmStkVL1() {
        return (ViewLinkImpl)findViewLink("FkMmMrnItmStkVL1");
    }

    /**
     * Container's getter for LovItmIdFromIssue.
     * @return LovItmIdFromIssue
     */
    public ViewObjectImpl getLovItmIdFromIssue() {
        return (ViewObjectImpl)findViewObject("LovItmIdFromIssue");
    }

    /**
     * Container's getter for LocSRNoFromIssue.
     * @return LocSRNoFromIssue
     */
    public ViewObjectImpl getLocSRNoFromIssue() {
        return (ViewObjectImpl)findViewObject("LocSRNoFromIssue");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl)findViewObject("LovItmId");
    }

    /**
     * Container's getter for SearchMrn.
     * @return SearchMrn
     */
    public ViewObjectImpl getSearchMrn() {
        return (ViewObjectImpl)findViewObject("SearchMrn");
    }

    /**
     * Container's getter for TransMrnSearch.
     * @return TransMrnSearch
     */
    public ViewObjectImpl getTransMrnSearch() {
        return (ViewObjectImpl)findViewObject("TransMrnSearch");
    }

    /**
     * Container's getter for LovMtlIssueNo.
     * @return LovMtlIssueNo
     */
    public ViewObjectImpl getLovMtlIssueNo() {
        return (ViewObjectImpl)findViewObject("LovMtlIssueNo");
    }

    /**
     * Container's getter for LovMtlIssueNo1.
     * @return LovMtlIssueNo1
     */
    public ViewObjectImpl getLovMtlIssueNo1() {
        return (ViewObjectImpl)findViewObject("LovMtlIssueNo1");
    }

    /**
     * Container's getter for MmMrn1.
     * @return MmMrn1
     */
    public ViewObjectImpl getMmMrn1() {
        return (ViewObjectImpl)findViewObject("MmMrn1");
    }

    /**
     * Container's getter for LovUsrId.
     * @return LovUsrId
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl)findViewObject("LovUsrId");
    }

    /**
     * Container's getter for MmMrnItm1.
     * @return MmMrnItm1
     */
    public ViewObjectImpl getMmMrnItm1() {
        return (ViewObjectImpl)findViewObject("MmMrnItm1");
    }

    /**
     * Container's getter for SrNoForView.
     * @return SrNoForView
     */
    public ViewObjectImpl getSrNoForView() {
        return (ViewObjectImpl)findViewObject("SrNoForView");
    }
}
