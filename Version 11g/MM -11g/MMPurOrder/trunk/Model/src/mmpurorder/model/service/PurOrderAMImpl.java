package mmpurorder.model.service;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmpurorder.model.service.common.PurOrderAM;
import mmpurorder.model.views.DlvSchdlBalanceViewImpl;
import mmpurorder.model.views.LovCoaIdImpl;
import mmpurorder.model.views.LovItmIdImpl;
import mmpurorder.model.views.LovItmIdNewVOImpl;
import mmpurorder.model.views.LovRefPoDocIdImpl;
import mmpurorder.model.views.LovUomVwVOImpl;
import mmpurorder.model.views.MmDrftPoDlvSchdlVOImpl;
import mmpurorder.model.views.MmDrftPoItmVOImpl;

import mmpurorder.model.views.MmDrftPoOcVOImpl;
import mmpurorder.model.views.MmDrftPoTncVOImpl;
import mmpurorder.model.views.MmDrftPoTrLinesVOImpl;
import mmpurorder.model.views.MmDrftPoTrVOImpl;
import mmpurorder.model.views.MmDrftPoVOImpl;

import mmpurorder.model.views.MmPendOrdVwVOImpl;
import mmpurorder.model.views.PoSearchVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 30 12:42:02 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PurOrderAMImpl extends ApplicationModuleImpl implements PurOrderAM {
  
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;
    private static ADFLogger _log =(ADFLogger)ADFLogger.createADFLogger(PurOrderAMImpl.class);
    /**
     * This is the default constructor (do not remove).
     */
    public PurOrderAMImpl() {
    }

    /**
     * Container's getter for MmDrftPo.
     * @return MmDrftPo
     */
    public ViewObjectImpl getMmDrftPo() {
        return (ViewObjectImpl)findViewObject("MmDrftPo");
    }

    /**
     * Container's getter for MmDrftPoDlvSchdl.
     * @return MmDrftPoDlvSchdl
     */
    public ViewObjectImpl getMmDrftPoDlvSchdl() {
        return (ViewObjectImpl)findViewObject("MmDrftPoDlvSchdl");
    }

    /**
     * Container's getter for MmDrftPoItm.
     * @return MmDrftPoItm
     */
    public ViewObjectImpl getMmDrftPoItm() {
        return (ViewObjectImpl)findViewObject("MmDrftPoItm");
    }

    /**
     * Container's getter for MmDrftPoOc.
     * @return MmDrftPoOc
     */
    public ViewObjectImpl getMmDrftPoOc() {
        return (ViewObjectImpl)findViewObject("MmDrftPoOc");
    }

    /**
     * Container's getter for MmDrftPoPmtSchdl.
     * @return MmDrftPoPmtSchdl
     */
    public ViewObjectImpl getMmDrftPoPmtSchdl() {
        return (ViewObjectImpl)findViewObject("MmDrftPoPmtSchdl");
    }

    /**
     * Container's getter for MmDrftPoTnc.
     * @return MmDrftPoTnc
     */
    public ViewObjectImpl getMmDrftPoTnc() {
        return (ViewObjectImpl)findViewObject("MmDrftPoTnc");
    }

    /**
     * Container's getter for MmDrftPoTr.
     * @return MmDrftPoTr
     */
    public ViewObjectImpl getMmDrftPoTr() {
        return (ViewObjectImpl)findViewObject("MmDrftPoTr");
    }

    /**
     * Container's getter for MmDrftPoTrLines.
     * @return MmDrftPoTrLines
     */
    public ViewObjectImpl getMmDrftPoTrLines() {
        return (ViewObjectImpl)findViewObject("MmDrftPoTrLines");
    }

    /**
     * Container's getter for PoSearch.
     * @return PoSearch
     */
    public PoSearchVOImpl getPoSearch() {
        return (PoSearchVOImpl)findViewObject("PoSearch");
    }

    /**
     * Container's getter for LovEoId.
     * @return LovEoId
     */
    public ViewObjectImpl getLovEoId() {
        
        return (ViewObjectImpl)findViewObject("LovEoId");
    }

    /**
     * Container's getter for LovOrgId.
     * @return LovOrgId
     */
    public ViewObjectImpl getLovOrgId() {
        return (ViewObjectImpl)findViewObject("LovOrgId");
    }

    /**
     * Container's getter for DrftPoToDrftPoDlvSchdlVL1.
     * @return DrftPoToDrftPoDlvSchdlVL1
     */
    public ViewLinkImpl getDrftPoToDrftPoDlvSchdlVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoToDrftPoDlvSchdlVL1");
    }

    /**
     * Container's getter for DrftPoToDrftPoItmVL1.
     * @return DrftPoToDrftPoItmVL1
     */
    public ViewLinkImpl getDrftPoToDrftPoItmVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoToDrftPoItmVL1");
    }

    /**
     * Container's getter for DrftPoToDrftPoOcVL1.
     * @return DrftPoToDrftPoOcVL1
     */
    public ViewLinkImpl getDrftPoToDrftPoOcVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoToDrftPoOcVL1");
    }

    /**
     * Container's getter for DrftPoToDrftPoPmtSchdlVL1.
     * @return DrftPoToDrftPoPmtSchdlVL1
     */
    public ViewLinkImpl getDrftPoToDrftPoPmtSchdlVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoToDrftPoPmtSchdlVL1");
    }

    /**
     * Container's getter for DrftPoToDrftPoTncVL1.
     * @return DrftPoToDrftPoTncVL1
     */
    public ViewLinkImpl getDrftPoToDrftPoTncVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoToDrftPoTncVL1");
    }

    /**
     * Container's getter for DrftPoToDrftPoTrVL1.
     * @return DrftPoToDrftPoTrVL1
     */
    public ViewLinkImpl getDrftPoToDrftPoTrVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoToDrftPoTrVL1");
    }

    /**
     * Container's getter for DrftPoTrToDrftPoTrLinesVL1.
     * @return DrftPoTrToDrftPoTrLinesVL1
     */
    public ViewLinkImpl getDrftPoTrToDrftPoTrLinesVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoTrToDrftPoTrLinesVL1");
    }

    /**
     * Container's getter for LovCurrId.
     * @return LovCurrId
     */
    public ViewObjectImpl getLovCurrId() {
        return (ViewObjectImpl)findViewObject("LovCurrId");
    }
    
    public void searchQuery(Integer SlocId,String OrgId,String DocId,String CldId ){
          ViewObject v1=this.getMmDrftPo();
          String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
          v1.setWhereClause("SLOC_ID="+SlocId+" AND ORG_ID='"+orgId+"' AND DOC_ID='"+DocId+"' and CLD_ID='"+CldId+"'");
          v1.executeQuery();
         System.out.println("Rows remainings="+v1.getEstimatedRowCount());
          /*  if(v1.getEstimatedRowCount()>0)
          {
             Row[] allRows= v1.getAllRowsInRange();
            // allRows[0].getKey();
             System.out.println("No. of rows in range="+allRows.length);
             v1.setCurrentRow(allRows[0]);
              } */
      
      }
    
    public void resetQuery(){
          ViewObject v1=this.getMmDrftPo();
          v1.setWhereClause(null);
          v1.executeQuery();
      
      }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public LovItmIdImpl getLovItmId() {
        return (LovItmIdImpl)findViewObject("LovItmId");
    }

    /**
     * Container's getter for LovPoType.
     * @return LovPoType
     */
    public ViewObjectImpl getLovPoType() {
        return (ViewObjectImpl)findViewObject("LovPoType");
    }

    /**
     * Container's getter for LovCoaId.
     * @return LovCoaId
     */
    public ViewObjectImpl getLovCoaId() {
        return (ViewObjectImpl)findViewObject("LovCoaId");
    }

    /**
     * Container's getter for DlvSchdlBalanceView.
     * @return DlvSchdlBalanceView
     */
    public ViewObjectImpl getDlvSchdlBalanceView() {
        return (ViewObjectImpl)findViewObject("DlvSchdlBalanceView");
    }

    /**
     * Container's getter for DrftPoToDrftPoDlvSchdlBalanceVwVL1.
     * @return DrftPoToDrftPoDlvSchdlBalanceVwVL1
     */
    public ViewLinkImpl getDrftPoToDrftPoDlvSchdlBalanceVwVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoToDrftPoDlvSchdlBalanceVwVL1");
    }

    /**
     * Container's getter for LovWhIdAddr.
     * @return LovWhIdAddr
     */
    public ViewObjectImpl getLovWhIdAddr() {
        return (ViewObjectImpl)findViewObject("LovWhIdAddr");
    }

    /**
     * Container's getter for LovWhId.
     * @return LovWhId
     */
    public ViewObjectImpl getLovWhId() {
        return (ViewObjectImpl)findViewObject("LovWhId");
    }

    /**
     * Container's getter for LovPoSource.
     * @return LovPoSource
     */
    public ViewObjectImpl getLovPoSource() {
        return (ViewObjectImpl)findViewObject("LovPoSource");
    }

    /**
     * Container's getter for LovSuggestSupplier.
     * @return LovSuggestSupplier
     */
    public ViewObjectImpl getLovSuggestSupplier() {
        return (ViewObjectImpl)findViewObject("LovSuggestSupplier");
    }

    /**
     * Container's getter for MmPendOrdVw.
     * @return MmPendOrdVw
     */
    public ViewObjectImpl getMmPendOrdVw() {
        return (ViewObjectImpl)findViewObject("MmPendOrdVw");
    }

    /**
     * Container's getter for DrftPoItmToPendOrdVwVL1.
     * @return DrftPoItmToPendOrdVwVL1
     */
    public ViewLinkImpl getDrftPoItmToPendOrdVwVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoItmToPendOrdVwVL1");
    }

    /**
     * Container's getter for LovSuppAddress.
     * @return LovSuppAddress
     */
    public ViewObjectImpl getLovSuppAddress() {
        return (ViewObjectImpl)findViewObject("LovSuppAddress");
    }

    /**
     * Container's getter for LovItmUom.
     * @return LovItmUom
     */
    public ViewObjectImpl getLovItmUom() {
        return (ViewObjectImpl)findViewObject("LovItmUom");
    }

    /**
     * Container's getter for MmTmpPoSuggSupp.
     * @return MmTmpPoSuggSupp
     */
    public ViewObjectImpl getMmTmpPoSuggSupp() {
        return (ViewObjectImpl)findViewObject("MmTmpPoSuggSupp");
    }

    /**
     * Container's getter for LovItmIdEo.
     * @return LovItmIdEo
     */
    public ViewObjectImpl getLovItmIdEo() {
        return (ViewObjectImpl)findViewObject("LovItmIdEo");
    }

    /**
     * Container's getter for MmTmpPoSuggSupp1.
     * @return MmTmpPoSuggSupp1
     */
    public ViewObjectImpl getMmTmpPoSuggSupp1() {
        return (ViewObjectImpl)findViewObject("MmTmpPoSuggSupp1");
    }

    /**
     * Container's getter for MmTmpPoSuggSupp2.
     * @return MmTmpPoSuggSupp2
     */
    public ViewObjectImpl getMmTmpPoSuggSupp2() {
        return (ViewObjectImpl)findViewObject("MmTmpPoSuggSupp2");
    }

    /**
     * Container's getter for MMDrftPoToSuggSuppVoVL1.
     * @return MMDrftPoToSuggSuppVoVL1
     */
    public ViewLinkImpl getMMDrftPoToSuggSuppVoVL1() {
        return (ViewLinkImpl)findViewLink("MMDrftPoToSuggSuppVoVL1");
    }

    /**
     * Container's getter for LovQuotDocId.
     * @return LovQuotDocId
     */
    public ViewObjectImpl getLovQuotDocId() {
        return (ViewObjectImpl)findViewObject("LovQuotDocId");
    }

    /**
     * Container's getter for LovRefPoDocId.
     * @return LovRefPoDocId
     */
    public LovRefPoDocIdImpl getLovRefPoDocId() {
        return (LovRefPoDocIdImpl)findViewObject("LovRefPoDocId");
    }

    /**
     * Container's getter for LovTmpltPoId.
     * @return LovTmpltPoId
     */
    public ViewObjectImpl getLovTmpltPoId() {
        return (ViewObjectImpl)findViewObject("LovTmpltPoId");
    }

    /**
     * Container's getter for LovTncId.
     * @return LovTncId
     */
    public ViewObjectImpl getLovTncId() {
        return (ViewObjectImpl)findViewObject("LovTncId");
    }
    
    public void saveAsPO(){
        
        ViewObjectImpl drftPo=getMmDrftPo();
        Row drftpoRw=drftPo.getCurrentRow();
        String docId=drftpoRw.getAttribute("DocId").toString();
        String whid=null;
        Integer fyid=Integer.parseInt(drftpoRw.getAttribute("FyId").toString());
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        Integer userId = Integer.parseInt(drftpoRw.getAttribute("UsrIdCreate").toString());
        
     if(drftpoRw.getAttribute("PoBasis").equals(175))
       {
         String auth=null;
           RowQualifier rq= new RowQualifier (this.getMmDrftPo1());
                   rq.setWhereClause("CldId='"+cld_id+"' and SlocId="+slocId+" and OrgId='"+orgId+"' and DocId='"+drftpoRw.getAttribute("RefPoDocId")+"'"); 
                   Row[] r=this.getMmDrftPo1().getFilteredRows(rq);
                   if(r.length>0)
                   auth = (String)r[0].getAttribute("AuthPoNo");
            drftpoRw.setAttribute("AuthPoNo",auth);    
        }
         else if(drftpoRw.getAttribute("PoBasis").equals(490))
              {
                       
                      String auth=null;
                        RowQualifier rq= new RowQualifier (this.getMmDrftPo1());
                                rq.setWhereClause("CldId='"+cld_id+"' and SlocId="+slocId+" and OrgId='"+orgId+"' and DocId='"+drftpoRw.getAttribute("RefPoDocId")+"'"); 
                                Row[] r=this.getMmDrftPo1().getFilteredRows(rq);
                                if(r.length>0)
                                auth = (String)r[0].getAttribute("AuthPoNo");
                         drftpoRw.setAttribute("AuthPoNo",auth); 
                         System.out.println("cld_id   "+cld_id+" open doc id"+drftpoRw.getAttribute("RefPoDocId"));
                      BigDecimal retval=(BigDecimal)(callStoredFunction(NUMBER, "MM.MM_GET_OPEN_ORD_VAL(?,?,?,?)",
                                                                               new Object[] { cld_id,slocId,orgId,drftpoRw.getAttribute("RefPoDocId") }));
                      Number val=new Number(0);
                      if(retval!=null)
                      try {
                          val=new Number(retval);
                      } catch (SQLException e) {
                          System.out.println("error in cast="+e);
                      }
                      if(val.compareTo(new Number(0))==0)
                          r[0].setAttribute("PoStatus", 218);
                  }
        if(drftpoRw.getAttribute("AuthPoNo")!=null)
        {
            StringBuilder saveMsg =new StringBuilder("<html><body><p><b>Purchase Order successfully Translated with PO Id - "+drftpoRw.getAttribute("AuthPoNo")+".</b></p>");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        else
        {
        String   poId =(String)(callStoredFunction(Types.VARCHAR, "MM.fn_mm_gen_id(?,?,?,?,?,?)",new Object[] {slocId,cld_id,orgId,"MM$PO",whid,fyid}));  
        if(poId!=null){
            
            drftpoRw.setAttribute("AuthPoNo",poId);
        }
        System.out.println("In save PO---"+poId);
        StringBuilder saveMsg =new StringBuilder("<html><body><p><b>Draft Purchase Order successfully translated to Purchase Order with PO Id - "+poId+"</b></p>");
        saveMsg.append("</body></html>");
        FacesMessage msg = new FacesMessage(saveMsg.toString());
        msg.setSeverity(FacesMessage.SEVERITY_INFO);
        FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        drftpoRw.setAttribute("PoMode", new Integer(231));
       this.getDBTransaction().commit();
       System.out.println("Data commited");
       if(drftpoRw.getAttribute("PoType").equals(173))
       {}
       else
       {
        Object obj= callStoredFunction(NUMBER, "MM.MM_UPDT_ORD_STK(?,?,?,?,?)", new Object[] { cld_id,slocId,orgId,fyid,docId});
            System.out.println("Updated stock="+obj);
       }
    }
    
   /*  public void revertAndReject(){
        ViewObjectImpl drftPo=getMmDrftPo();
        Row drftpoRw=drftPo.getCurrentRow();
        String docId=drftpoRw.getAttribute("DocId").toString();
        String whid=null;
        Integer fyid=Integer.parseInt(drftpoRw.getAttribute("FyId").toString());
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        Integer userId = Integer.parseInt(drftpoRw.getAttribute("UsrIdCreate").toString());
        
        pendingPOCheck(slocId,cld_id,orgId,18504)
         
    } */
    
    public Integer pendingPOCheck(Integer SlocId,String CldId,String OrgId,Integer PoDocNo){
        Row currPO=this.getMmDrftPo().getCurrentRow();
        String docIdTxn= currPO.getAttribute("DocId").toString();
        System.out.println("DOCIDTXN--"+docIdTxn);
        Integer poType = (Integer)currPO.getAttribute("PoType");
        Object obj= callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,PoDocNo,docIdTxn,poType });
        Integer usrId=null; 
        if(obj!=null){
            usrId=Integer.parseInt(obj.toString());
        }
      /*   Integer.parseInt(callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                   CldId,
                                                                                                                   OrgId,
                                                                                                                   PoDocNo,
                                                                                                                   docIdTxn }).toString()); */
       System.out.println("User id pending in impl--"+usrId);
        return usrId;
        
    }
    
    public String getWfNo(Integer sloc_id,String cld_id,String org_id,Integer doc_no) {
        try {
            Integer poType = (Integer)this.getMmDrftPo().getCurrentRow().getAttribute("PoType");
            System.out.println("Sloc="+sloc_id+" and cld_id="+cld_id+"and org_id="+org_id+" and doc_no="+doc_no+" and PoType="+poType);
            Object obj=callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)",
                                      new Object[] {sloc_id, cld_id, org_id, doc_no, poType });
            _log.info("WFNO in AMimpl:"+obj);
            return obj.toString();
        } catch (Exception e) {
            System.out.println("GETWFNO--"+e);
            return "0";
        }
    }
    
    public Integer getUsrLvl(Integer SlocId,String CldId,String OrgId,Integer usr_id,String WfNum,String PoDocId){
        Integer poType = (Integer)this.getMmDrftPo().getCurrentRow().getAttribute("PoType");

        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId,CldId,
                                                                                                                                OrgId,
                                                                                                                                usr_id,
                                                                                                                                WfNum,
                                                                                                                                PoDocId , poType}).toString());


    }
    public Integer insIntoTxn(Integer sloc_id,String cld_id,String pOrgId,Integer PO_DOC_NO,String WfNum,String poDocId,Integer usr_idFrm,Integer usr_idTo,Integer levelTo,Integer levelFrm,String action,String remark,Number amount,String post ){
   
        Integer poType = (Integer)this.getMmDrftPo().getCurrentRow().getAttribute("PoType");

     return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                        new Object[] { sloc_id, cld_id, pOrgId, PO_DOC_NO,poType, WfNum, poDocId,
                                                       usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
                                                       amount,post}).toString());
  
    }
    
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /** Function to call a database procedure.
     * @param stmt
     * @param bindVars
     * @throws SQLException
     */
    public void callStoredProcedure(String stmt, Object[] bindVars) {
        PreparedStatement st = null;
        try {
            st = getDBTransaction().createPreparedStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                }
            }
            st.executeUpdate();
        } catch (SQLException e) {
            
            System.out.println(e.getMessage()+" "+e);
            int end = e.getMessage().indexOf("\n");
            String message = e.getMessage().substring(11, end);
            FacesMessage ermsg = new FacesMessage(message);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
          //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            String msg = e.getMessage().substring(11, end);
           
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;


        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Container's getter for LovPoMode.
     * @return LovPoMode
     */
    public ViewObjectImpl getLovPoMode() {
        return (ViewObjectImpl)findViewObject("LovPoMode");
    }

    /**
     * Container's getter for LovUsrId.
     * @return LovUsrId
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl)findViewObject("LovUsrId");
    }
    
    public String amendPo(String P_CLDID,String p_orgid,Integer p_slocid, String p_doc_id,String p_ref_doc_id,Integer p_usr_id) {
       String  amendOk = callStoredFunction(STRING, "MM.PKG_MM_PO.amend_po(?,?,?,?,?,?)", new Object[]{P_CLDID,p_orgid,p_slocid,p_doc_id,p_ref_doc_id,p_usr_id}).toString();
       return amendOk;
    }

    /**
     * Container's getter for OrgMmPrf1.
     * @return OrgMmPrf1
     */
    public ViewObjectImpl getOrgMmPrf1() {
        return (ViewObjectImpl)findViewObject("OrgMmPrf1");
    }

    /**
     * Container's getter for LovCurrency.
     * @return LovCurrency
     */
    public ViewObjectImpl getLovCurrency() {
        return (ViewObjectImpl)findViewObject("LovCurrency");
    }

    /**
     * Container's getter for LovUomVw1.
     * @return LovUomVw1
     */
    public ViewObjectImpl getLovUomVw1() {
        return (ViewObjectImpl)findViewObject("LovUomVw1");
    }

    /**
     * Container's getter for MmDrftPoTrLinesVO1.
     * @return MmDrftPoTrLinesVO1
     */
    public MmDrftPoTrLinesVOImpl getMmDrftPoTrLinesVO1() {
        return (MmDrftPoTrLinesVOImpl)findViewObject("MmDrftPoTrLinesVO1");
    }

    /**
     * Container's getter for MmDrftPoTr1.
     * @return MmDrftPoTr1
     */
    public MmDrftPoTrVOImpl getMmDrftPoTr1() {
        return (MmDrftPoTrVOImpl)findViewObject("MmDrftPoTr1");
    }

    /**
     * Container's getter for MmDrftPoItmToTrVL1.
     * @return MmDrftPoItmToTrVL1
     */
    public ViewLinkImpl getMmDrftPoItmToTrVL1() {
        return (ViewLinkImpl)findViewLink("MmDrftPoItmToTrVL1");
    }

    /**
     * Container's getter for MmDrftPoTrLines1.
     * @return MmDrftPoTrLines1
     */
    public MmDrftPoTrLinesVOImpl getMmDrftPoTrLines1() {
        return (MmDrftPoTrLinesVOImpl)findViewObject("MmDrftPoTrLines1");
    }

    /**
     * Container's getter for DrftPoTrToDrftPoTrLinesVL2.
     * @return DrftPoTrToDrftPoTrLinesVL2
     */
    public ViewLinkImpl getDrftPoTrToDrftPoTrLinesVL2() {
        return (ViewLinkImpl)findViewLink("DrftPoTrToDrftPoTrLinesVL2");
    }

    /**
     * Container's getter for MmDrftPoItm1.
     * @return MmDrftPoItm1
     */
    public MmDrftPoItmVOImpl getMmDrftPoItm1() {
        return (MmDrftPoItmVOImpl)findViewObject("MmDrftPoItm1");
    }

    /**
     * Container's getter for MmDrftPoOc1.
     * @return MmDrftPoOc1
     */
    public MmDrftPoOcVOImpl getMmDrftPoOc1() {
        return (MmDrftPoOcVOImpl)findViewObject("MmDrftPoOc1");
    }

    /**
     * Container's getter for MmDrftPoPmtSchdl1.
     * @return MmDrftPoPmtSchdl1
     */
    public ViewObjectImpl getMmDrftPoPmtSchdl1() {
        return (ViewObjectImpl)findViewObject("MmDrftPoPmtSchdl1");
    }

    /**
     * Container's getter for MmDrftPoTr2.
     * @return MmDrftPoTr2
     */
    public MmDrftPoTrVOImpl getMmDrftPoTr2() {
        return (MmDrftPoTrVOImpl)findViewObject("MmDrftPoTr2");
    }

    /**
     * Container's getter for MmDrftPoDlvSchdl1.
     * @return MmDrftPoDlvSchdl1
     */
    public MmDrftPoDlvSchdlVOImpl getMmDrftPoDlvSchdl1() {
        return (MmDrftPoDlvSchdlVOImpl)findViewObject("MmDrftPoDlvSchdl1");
    }

    /**
     * Container's getter for MmDrftPoTnc1.
     * @return MmDrftPoTnc1
     */
    public MmDrftPoTncVOImpl getMmDrftPoTnc1() {
        return (MmDrftPoTncVOImpl)findViewObject("MmDrftPoTnc1");
    }

    /**
     * Container's getter for LovOpenOrdBasis.
     * @return LovOpenOrdBasis
     */
    public ViewObjectImpl getLovOpenOrdBasis() {
        return (ViewObjectImpl)findViewObject("LovOpenOrdBasis");
    }

    /**
     * Container's getter for MmDrftPo1.
     * @return MmDrftPo1
     */
    public MmDrftPoVOImpl getMmDrftPo1() {
        return (MmDrftPoVOImpl)findViewObject("MmDrftPo1");
    }

    /**
     * Container's getter for AppEoPricePlc.
     * @return AppEoPricePlc
     */
    public ViewObjectImpl getAppEoPricePlc() {
        return (ViewObjectImpl)findViewObject("AppEoPricePlc");
    }
    
    public void criteriaForSupplierList()
    {
            String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            ViewObjectImpl eoVo=this.getLovEoId();
            ViewCriteria vc=eoVo.getViewCriteria("LovEoIdVOCriteria");
            eoVo.setNamedWhereClauseParam("slocIdBind", slocId);
            eoVo.setNamedWhereClauseParam("hoOrgIdBind", hoOrg_id);
            eoVo.setNamedWhereClauseParam("cldIdBind", cld_id);
            eoVo.setNamedWhereClauseParam("orgIdBind", orgId);
            eoVo.applyViewCriteria(vc);
            eoVo.executeQuery();
            
            ViewObjectImpl tncVo=this.getLovTncId();
            ViewCriteria vctnc=eoVo.getViewCriteria("LovTncIdCriteria");
            tncVo.setNamedWhereClauseParam("slocIdBind", slocId);
            tncVo.setNamedWhereClauseParam("cldBind", cld_id);
            tncVo.setNamedWhereClauseParam("orgBind", orgId);
            tncVo.applyViewCriteria(vctnc);
            tncVo.executeQuery();
            
            
            ViewObjectImpl tncVo1=this.getLovTncId();
            tncVo1.setNamedWhereClauseParam("BindSlocId", slocId);
            tncVo1.setNamedWhereClauseParam("BindCldId", cld_id);
            tncVo1.setNamedWhereClauseParam("BindOrgId", orgId);
            tncVo1.executeQuery();
        }
    
    public void CancelOrShortclosePo(String vis)
    {
            System.out.println("1.variable="+vis);

        String wfRet=null;
        if(resolvEl("#{pageFlowScope.WF_RET_VALUE}")!=null)
        {
            wfRet=resolvEl("#{pageFlowScope.WF_RET_VALUE}");
            if(wfRet.equals("A")){
            System.out.println("variable="+vis);
             if(vis.equals("C"))
            this.getMmDrftPo().getCurrentRow().setAttribute("PoStatus", 220);
             else if(vis.equals("S"))
             this.getMmDrftPo().getCurrentRow().setAttribute("PoStatus", 219);
             String CldId = (String)this.getMmDrftPo().getCurrentRow().getAttribute("CldId");
             Integer SlocId = (Integer)this.getMmDrftPo().getCurrentRow().getAttribute("SlocId");
             String OrgId = (String)this.getMmDrftPo().getCurrentRow().getAttribute("OrgId");
             Integer FyId = (Integer)this.getMmDrftPo().getCurrentRow().getAttribute("FyId");
             String DocId = (String)this.getMmDrftPo().getCurrentRow().getAttribute("DocId");
                this.getDBTransaction().commit();
                System.out.println("Parameters are as, DocId="+DocId);
             Object ret =
                 (Object)callStoredFunction(NUMBER, "MM.MM_UPDT_ORD_STK(?,?,?,?,?)",
                                                new Object[] { CldId,SlocId,OrgId, FyId, DocId});
            }
            else if(wfRet.equals("R"))
            {
                    this.getMmDrftPo().getCurrentRow().setAttribute("PoStatus", 217);
                }
            else if(wfRet.equals("V"))
            {
                    String CldId = (String)this.getMmDrftPo().getCurrentRow().getAttribute("CldId");
                    Integer SlocId = (Integer)this.getMmDrftPo().getCurrentRow().getAttribute("SlocId");
                    String OrgId = (String)this.getMmDrftPo().getCurrentRow().getAttribute("OrgId");
                  Integer usrPend=null;
                    usrPend=pendingPOCheck(SlocId,CldId,OrgId,18504);
                    Integer usrCrt = (Integer)this.getMmDrftPo().getCurrentRow().getAttribute("UsrIdCreate");
                        if(usrPend!=null && usrPend.compareTo(usrCrt)==0)
                            this.getMmDrftPo().getCurrentRow().setAttribute("PoStatus", 217);      
                }
        }
        }

    /**
     * Container's getter for LovAppPricePlc.
     * @return LovAppPricePlc
     */
    public ViewObjectImpl getLovAppPricePlc() {
        return (ViewObjectImpl)findViewObject("LovAppPricePlc");
    }
    
    public Integer checkOpenPurchaseValidity(String orgId , String cldId ,Integer slocId ,String refDocId ){
        
        ViewObjectImpl refVo = this.getLovRefPoDocId();
        RowQualifier rq = new RowQualifier(refVo);
        rq.setWhereClause("CldId = '"+cldId+"' and OrgId = '"+orgId+"' and SlocId = "+slocId+" and DocId = '"+refDocId+"'  ");
        Row [] rr = refVo.getFilteredRows(rq);
      _log.info(rq.getExprStr()+"  row lenth      "+rr.length);
      Date date =null;
        Date dateCurr =
            (Date)new Date().getCurrentDate();
        _log.info(" curr date "+dateCurr);
      if(rr.length>0){
          date = (Date)rr[0].getAttribute("ValidToDt");
      }
      if(date!=null){
          if(dateCurr.compareTo(date) > 0){
              return 1;
          }else{
              return 0;
          }
          
      }else{
          return 0;
      }    
    }
    
    public Integer checkOpenPurchaseDateValidity(Date opDate){
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        ViewObjectImpl poVo =this.getMmDrftPo();
        Row curR = poVo.getCurrentRow();
        ViewObjectImpl refVo = this.getLovRefPoDocId();
        RowQualifier rq = new RowQualifier(refVo);
        rq.setWhereClause("CldId = '"+cldId+"' and OrgId = '"+orgId+"' and SlocId = "+slocId+" and DocId = '"+curR.getAttribute("RefPoDocId").toString()+"' ");
        Row [] rr = refVo.getFilteredRows(rq);
      _log.info(rq.getExprStr()+"  row lenth      "+rr.length);
      Date dateUpto =null;
      Date dateFrom =null;
        /* Date dateCurr =
            (Date)new Date().getCurrentDate();
        _log.info(" curr date "+dateCurr); */
      if(rr.length>0){
          dateUpto = (Date)rr[0].getAttribute("ValidToDt");
          dateFrom =  (Date)rr[0].getAttribute("ValidFrmDt");
      }
      _log.info( opDate+" po  date   "+dateUpto+"  ref po date upto   "+dateFrom+ " ref doc from "+opDate.compareTo(dateUpto)+" from "+opDate.compareTo(dateFrom));
      if(dateFrom!=null && dateUpto !=null){
          if(opDate.compareTo(dateFrom) < 0){
              return 1;
          }else if(opDate.compareTo(dateUpto) > 0){
              return 2;
          }
          else{
              return 0;
          }
          
      }else{
          return 0;
      }    
    }

    /**
     * Container's getter for LovItmIdNew.
     * @return LovItmIdNew
     */
    public LovItmIdNewVOImpl getLovItmIdNew() {
        return (LovItmIdNewVOImpl)findViewObject("LovItmIdNew");
    }

    /**
     * Container's getter for LovItmDesc.
     * @return LovItmDesc
     */
    public ViewObjectImpl getLovItmDesc() {
        return (ViewObjectImpl)findViewObject("LovItmDesc");
    }

    /**
     * Container's getter for LovCoaTune.
     * @return LovCoaTune
     */
    public ViewObjectImpl getLovCoaTune() {
        return (ViewObjectImpl)findViewObject("LovCoaTune");
    }

    /**
     * Container's getter for MmDrftPoContnr.
     * @return MmDrftPoContnr
     */
    public ViewObjectImpl getMmDrftPoContnr() {
        return (ViewObjectImpl)findViewObject("MmDrftPoContnr");
    }

    /**
     * Container's getter for DrftPoToDrftPoContnrVL1.
     * @return DrftPoToDrftPoContnrVL1
     */
    public ViewLinkImpl getDrftPoToDrftPoContnrVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoToDrftPoContnrVL1");
    }

    /**
     * Container's getter for MmDrftPoPorts.
     * @return MmDrftPoPorts
     */
    public ViewObjectImpl getMmDrftPoPorts() {
        return (ViewObjectImpl)findViewObject("MmDrftPoPorts");
    }

    /**
     * Container's getter for DrftPoToDrftPoPortsVL1.
     * @return DrftPoToDrftPoPortsVL1
     */
    public ViewLinkImpl getDrftPoToDrftPoPortsVL1() {
        return (ViewLinkImpl)findViewLink("DrftPoToDrftPoPortsVL1");
    }

    public void addContainerDetails() {
        ViewObjectImpl poVo = this.getMmDrftPo();
        Row poR = poVo.getCurrentRow();
        if (poR.getAttribute("TransContnrNm") != null && poR.getAttribute("TransContnrSize") != null &&
            poR.getAttribute("TransContnrQty") != null) {
            Row contnrR = this.getMmDrftPoContnr().createRow();
            contnrR.setAttribute("ContNm", poR.getAttribute("TransContnrNm").toString());
            contnrR.setAttribute("ContSize", poR.getAttribute("TransContnrSize").toString());
            contnrR.setAttribute("ContQty", (Number)poR.getAttribute("TransContnrQty"));
            this.getMmDrftPoContnr().insertRow(contnrR);
        }
        poR.setAttribute("TransContnrNm", null);
        poR.setAttribute("TransContnrSize", null);
        poR.setAttribute("TransContnrQty", null);
    }
    
    public void addPortsDetails(Integer trvlSeqNo) {
        _log.info(trvlSeqNo+" trvlSeqNo:::::::::");
        ViewObjectImpl poVo = this.getMmDrftPo();
        Row poR = poVo.getCurrentRow();
        if (poR.getAttribute("TransPortsNm") != null) {
            ViewObjectImpl voport = this.getLovPortId();
            String portId = null;
            Row[] rr = voport.getFilteredRows("PortNm", poR.getAttribute("TransPortsNm").toString());
            if (rr.length > 0) {
                portId = rr[0].getAttribute("PortId").toString();
            }
            if (portId != null) {
                Row portsR = this.getMmDrftPoPorts().createRow();
                portsR.setAttribute("PortId", portId);
                portsR.setAttribute("TrvlSeq", trvlSeqNo);
                portsR.setAttribute("Eta", poR.getAttribute("TransEtaDate"));
                portsR.setAttribute("Etd", poR.getAttribute("TransEtdDate"));
                portsR.setAttribute("Remarks", poR.getAttribute("TransPortRemarks"));
                this.getMmDrftPoPorts().insertRow(portsR);
            }
        }
        poR.setAttribute("TransPortsNm", null);
        poR.setAttribute("TransEtaDate", null);
        poR.setAttribute("TransEtdDate", null);
        poR.setAttribute("TransPortRemarks", null);
    }
    
    public String isPartNameDuplicate(String porName){
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        ViewObjectImpl poVo = this.getMmDrftPo();
        ViewObjectImpl poPortVo =this.getMmDrftPoPorts1();
        Row poR = poVo.getCurrentRow();
        if(porName!=null){
            ViewObjectImpl voport = this.getLovPortId();
            String portId = null;
            Row[] rr = voport.getFilteredRows("PortNm", porName);
            if (rr.length > 0) {
                portId = rr[0].getAttribute("PortId").toString();
            }
            if(portId!=null){
            RowQualifier rqPort = new RowQualifier(poPortVo);
            rqPort.setWhereClause("CldId ='"+cldId+"' and SlocId ="+slocId+" and OrgId ='"+orgId+"' and DocId ='"+poR.getAttribute("DocId").toString()+"' and PortId = '"+portId+"' ");
            Row []rrP = poPortVo.getFilteredRows(rqPort);
            _log.info(rqPort.getExprStr()+"   ::    "+rrP.length);
            if(rrP.length > 0){
                return "Y";
            }else{
                return "N";
            }
            }else {
                return "N";
            }
        }else{
        return "N";
        }
    }
    
    
    public String isContainerNameDuplicate(String cntnrName){
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        ViewObjectImpl poVo = this.getMmDrftPo();
        ViewObjectImpl poPortVo =this.getMmDrftPoContnr1();
        Row poR = poVo.getCurrentRow();
        if(cntnrName!=null){
            RowQualifier rqPort = new RowQualifier(poPortVo);
            rqPort.setWhereClause("CldId ='"+cldId+"' and SlocId ="+slocId+" and OrgId ='"+orgId+"' and DocId ='"+poR.getAttribute("DocId").toString()+"' and ContNm = '"+cntnrName+"' ");
            Row []rrP = poPortVo.getFilteredRows(rqPort);
            _log.info(rqPort.getExprStr()+"   ::    "+rrP.length);
            if(rrP.length > 0){
                return "Y";
            }else{
                return "N";
            }
            }else {
                return "N";
            }
    }
    
    /**
     * Container's getter for LovPortId.
     * @return LovPortId
     */
    public ViewObjectImpl getLovPortId() {
        return (ViewObjectImpl)findViewObject("LovPortId");
    }

    /**
     * Container's getter for LovCfa.
     * @return LovCfa
     */
    public ViewObjectImpl getLovCfa() {
        return (ViewObjectImpl)findViewObject("LovCfa");
    }

    /**
     * Container's getter for LovShippingCompany.
     * @return LovShippingCompany
     */
    public ViewObjectImpl getLovShippingCompany() {
        return (ViewObjectImpl)findViewObject("LovShippingCompany");
    }

    /**
     * Container's getter for LovShippingCfa.
     * @return LovShippingCfa
     */
    public ViewObjectImpl getLovShippingCfa() {
        return (ViewObjectImpl)findViewObject("LovShippingCfa");
    }

    /**
     * Container's getter for MmDrftPoPorts1.
     * @return MmDrftPoPorts1
     */
    public ViewObjectImpl getMmDrftPoPorts1() {
        return (ViewObjectImpl)findViewObject("MmDrftPoPorts1");
    }

    /**
     * Container's getter for MmDrftPoContnr1.
     * @return MmDrftPoContnr1
     */
    public ViewObjectImpl getMmDrftPoContnr1() {
        return (ViewObjectImpl)findViewObject("MmDrftPoContnr1");
    }
}
