package mmqcsetupapp.model.service;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmqcsetupapp.model.service.common.QcSetupAM;

import mmqcsetupapp.model.views.MmQcParamGrpVOImpl;
import mmqcsetupapp.model.views.MmQcParamItmVOImpl;

import mmqcsetupapp.model.views.MmQcParamVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 06 18:48:38 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QcSetupAMImpl extends ApplicationModuleImpl implements QcSetupAM {
    /**
     * This is the default constructor (do not remove).
     */
    public QcSetupAMImpl() {
    }
    public static ADFLogger adfLog = ADFLogger.createADFLogger(QcSetupAMImpl.class) ;
    private static int NUMBER = Types.NUMERIC;
   
    /**
     * Container's getter for MmQcParam.
     * @return MmQcParam
     */
    public ViewObjectImpl getMmQcParam() {
        return (ViewObjectImpl)findViewObject("MmQcParam");
    }

    /**
     * Container's getter for Item.
     * @return Item
     */
    public ViewObjectImpl getItem() {
        return (ViewObjectImpl)findViewObject("Item");
    }

    /**
     * Container's getter for Group.
     * @return Group
     */
    public ViewObjectImpl getGroup() {
        return (ViewObjectImpl)findViewObject("Group");
    }

    /**
     * Container's getter for MmQcParamGrp.
     * @return MmQcParamGrp
     */
    public MmQcParamGrpVOImpl getMmQcParamGrp() {
        return (MmQcParamGrpVOImpl)findViewObject("MmQcParamGrp");
    }

    /**
     * Container's getter for MmQcParamItm.
     * @return MmQcParamItm
     */
    public ViewObjectImpl getMmQcParamItm() {
        return (ViewObjectImpl)findViewObject("MmQcParamItm");
    }

    /**
     * Container's getter for MmQcParamItm1.
     * @return MmQcParamItm1
     */
    public ViewObjectImpl getMmQcParamItm1() {
        return (ViewObjectImpl)findViewObject("MmQcParamItm1");
    }

    /**
     * Container's getter for MmQcParamGrp1.
     * @return MmQcParamGrp1
     */
    public MmQcParamGrpVOImpl getMmQcParamGrp1() {
        return (MmQcParamGrpVOImpl)findViewObject("MmQcParamGrp1");
    }

    /**
     * Container's getter for GroupToParamGrpVL1.
     * @return GroupToParamGrpVL1
     */
    public ViewLinkImpl getGroupToParamGrpVL1() {
        return (ViewLinkImpl)findViewLink("GroupToParamGrpVL1");
    }

    /**
     * Container's getter for ItemToQcParamItmVL1.
     * @return ItemToQcParamItmVL1
     */
    public ViewLinkImpl getItemToQcParamItmVL1() {
        return (ViewLinkImpl)findViewLink("ItemToQcParamItmVL1");
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            adfLog.info("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    
    public String generateParamId (Integer SlocId ,String CldId, String OrgId, String TableName){
        String paramId = (String)callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?)", new Object[]{SlocId,CldId,OrgId,TableName});
        System.out.println(" paramId    "+paramId);
         return paramId;
    }
    public void addItmFromGrp(String CldId, Integer SlocId ,String HoOrgId ,String OrgId, String GrpId , String modeValue) {
        this.getDBTransaction().postChanges();
        Integer retVal = Integer.parseInt(callStoredFunction(NUMBER,"FN_MM_CP_QCPARAM_FRM_GP(?,?,?,?,?,?)", new Object[]{CldId,SlocId,HoOrgId, OrgId, GrpId,modeValue}).toString());
           adfLog.info("fuction ret val  "+retVal);
    }
    public Integer isParamIdDuplicate(String value){
    
            ViewObjectImpl itmParamVo =this.getMmQcParamItm();
            Row rowCurr = itmParamVo.getCurrentRow();
            Row[] itmRow = itmParamVo.getFilteredRows("ItmId", rowCurr.getAttribute("ItmId"));
        int count =0;
       String paramId = "";
       if(itmRow.length>0){
        for (Row r : itmRow) {

            if (!r.equals(rowCurr)) {
                try {
                    paramId = r.getAttribute("ParamId").toString();
                } catch (NullPointerException npe) {
                    adfLog.info("NPE:" + npe);
                    paramId = "";
                }
                if (paramId.equalsIgnoreCase(value)) {
                    count = count + 1;
                }
            }

        }
           
       }
        return count;
    }
    public Integer isParamIdGrpDuplicate(String value){
    
            ViewObjectImpl grpParamVo =this.getMmQcParamGrp();
            Row rowCurr = grpParamVo.getCurrentRow();
            Row[] grpRow = grpParamVo.getFilteredRows("GrpId", rowCurr.getAttribute("GrpId"));
        int count =0;
       String paramId = "";
       if(grpRow.length>0){
        for (Row r : grpRow) {

            if (!r.equals(rowCurr)) {
                try {
                    paramId = r.getAttribute("ParamId").toString();
                } catch (NullPointerException npe) {
                    adfLog.info("NPE:" + npe);
                    paramId = "";
                }
                if (paramId.equalsIgnoreCase(value)) {
                    count = count + 1;
                }
            }

        }
           
       }
        return count;
    }
    public String isParamDeletable(String ChkType){
        ViewObjectImpl paramVo = this.getMmQcParam();
        ViewObjectImpl paramItm = this.getMmQcParamItm();
        Row currParam = paramVo.getCurrentRow();
        Row currItm   = paramItm.getCurrentRow();
        /* FUNCTION MM_CHK_QC_PRM_DEL (P_CLDID VARCHAR2,
                                                      P_SLOCID NUMBER,
                                                      P_ORGID VARCHAR2,
                                                      P_CHK_TYPE VARCHAR2,  -- P for parameter | I for item
                                                      P_PARAMID VARCHAR2,   -- For checking complete item delete this will be null 
                                                      P_ITMID VARCHAR2 DEFAULT NULL  -- For checking parameter delete this will be null
                                                      ) */
        
        String retValue =null;
        if("P".equalsIgnoreCase(ChkType)){
            adfLog.info("parameter--------");
             retValue = (String)callStoredFunction(Types.VARCHAR, "MM_CHK_QC_PRM_DEL(?,?,?,?,?,?)", new Object[]{currParam.getAttribute("CldId").toString(),Integer.parseInt(currParam.getAttribute("SlocId").toString()),currParam.getAttribute("OrgId").toString(),ChkType,currParam.getAttribute("ParamId").toString(),null});
        }else if("I".equalsIgnoreCase(ChkType)){
            adfLog.info("item chk------------");
            retValue = (String)callStoredFunction(Types.VARCHAR, "MM_CHK_QC_PRM_DEL(?,?,?,?,?,?)", new Object[]{currItm.getAttribute("CldId").toString(),Integer.parseInt(currItm.getAttribute("SlocId").toString()),currItm.getAttribute("OrgId").toString(),ChkType,currItm.getAttribute("ParamId").toString(),currItm.getAttribute("ItmId").toString()});
        }
        return retValue;
    }
    /**
     * Container's getter for LovParamId.
     * @return LovParamId
     */
    public ViewObjectImpl getLovParamId() {
        return (ViewObjectImpl)findViewObject("LovParamId");
    }

    /**
     * Container's getter for LovParamType.
     * @return LovParamType
     */
    public ViewObjectImpl getLovParamType() {
        return (ViewObjectImpl)findViewObject("LovParamType");
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    
    public void filterOrgCld(){
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String p_cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
      ViewObject vo = this.getMmQcParam();
      ViewObject itmVo = this.getItem();
      ViewObject grpVo = this.getGroup();
      ViewObject grpLovVo = this.getLovGrpId();
      ViewObject itmLovVo = this.getLovItemId();
      //   ViewObjectImpl servo = this.getMtlQcSearchVO();
        // Row currRow = servo.getCurrentRow();
       ViewCriteria vc = getMmQcParam().getViewCriteria("MmQcParamVOCriteria");
       vo.applyViewCriteria(vc);
       vo.setNamedWhereClauseParam("ParamCldId", p_cldId);
       vo.setNamedWhereClauseParam("ParamSlocIdBind", p_sloc_id);
       vo.setNamedWhereClauseParam("ParamOrgIdBind", p_org_id);
       vo.executeQuery();
        ViewCriteria vcItm = getItem().getViewCriteria("ItemVOCriteria");
        itmVo.applyViewCriteria(vcItm);
        itmVo.setNamedWhereClauseParam("ItmCldIdBind", p_cldId);
        itmVo.setNamedWhereClauseParam("ItmSlocIdBind", p_sloc_id);
        itmVo.setNamedWhereClauseParam("ItmOrgIdBind", p_org_id);
        itmVo.executeQuery();
        
        ViewCriteria vcGrp = getGroup().getViewCriteria("GroupVOCriteria");
        grpVo.applyViewCriteria(vcGrp);
        grpVo.setNamedWhereClauseParam("GrpCldIdBind", p_cldId);
        grpVo.setNamedWhereClauseParam("GrpSlocIdBind", p_sloc_id);
        grpVo.setNamedWhereClauseParam("GrpOrgIdBind", p_org_id);
        grpVo.setNamedWhereClauseParam("BindHoOrgId", p_ho_org_id);
        
        grpVo.executeQuery();
        ViewCriteria vcitmLov = getLovItemId().getViewCriteria("LovItemIdVOCriteria1");
                itmLovVo.applyViewCriteria(vcitmLov);
                itmLovVo.setNamedWhereClauseParam("ItmCldBind", p_cldId);
                itmLovVo.setNamedWhereClauseParam("ItmSlocBind", p_sloc_id);
                itmLovVo.setNamedWhereClauseParam("ItmOrgBind", p_org_id);
                itmLovVo.executeQuery();
        ViewCriteria vcGrpLov = getLovGrpId().getViewCriteria("LovGrpIdVOCriteria1");
        grpLovVo.applyViewCriteria(vcGrpLov);
        grpLovVo.setNamedWhereClauseParam("CldIdBind", p_cldId);
        grpLovVo.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        grpLovVo.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        grpLovVo.setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
        
        grpLovVo.executeQuery();
        
      
    }
    
    public String isItmRequired(){
        ViewObjectImpl itmVo = this.getItem();
        Row currRow = itmVo.getCurrentRow();
       String retValue= "N";
        if(currRow.getAttribute("ItmDesc")==null){
            retValue= "Y";
        }
        return retValue;
    }

    public String isGrpRequired(){
        ViewObjectImpl itmVo = this.getGroup();
        Row currRow = itmVo.getCurrentRow();
       String retValue= "N";
        if(currRow.getAttribute("GrpNm")==null){
            retValue= "Y";
        }
        return retValue;
    }

    /**
     * Container's getter for LovGrpId.
     * @return LovGrpId
     */
    public ViewObjectImpl getLovGrpId() {
        return (ViewObjectImpl)findViewObject("LovGrpId");
    }

    /**
     * Container's getter for LovItemId.
     * @return LovItemId
     */
    public ViewObjectImpl getLovItemId() {
        return (ViewObjectImpl)findViewObject("LovItemId");
    }
}
