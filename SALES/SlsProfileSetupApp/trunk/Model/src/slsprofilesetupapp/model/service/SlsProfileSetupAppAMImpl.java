package slsprofilesetupapp.model.service;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.util.ArrayList;
import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsprofilesetupapp.model.service.common.SlsProfileSetupAppAM;
import slsprofilesetupapp.model.views.OrgSlsPrfVOImpl;

import oracle.jbo.domain.Number;

import oracle.jbo.server.RowQualifier;

import slsprofilesetupapp.model.sequence.DiscPlcItm;
import slsprofilesetupapp.model.views.TransDualVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 24 17:08:32 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsProfileSetupAppAMImpl extends ApplicationModuleImpl implements SlsProfileSetupAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SlsProfileSetupAppAMImpl() {
    }

    /**
     * Container's getter for OrgSlsPrf1.
     * @return OrgSlsPrf1
     */
    public OrgSlsPrfVOImpl getOrgSlsPrf1() {
        return (OrgSlsPrfVOImpl) findViewObject("OrgSlsPrf1");
    }

    public void getSearchByOrg(String organisation) {
        if (organisation != null) {
            ViewObject slsPrfSetupVo = this.getOrgSlsPrf1();
            if (slsPrfSetupVo != null) {
                getResetSearchByOrg(null);
                slsPrfSetupVo.executeQuery();
                slsPrfSetupVo.setNamedWhereClauseParam("orgIdBindVar", organisation);
                slsPrfSetupVo.executeQuery();
            }
        }
    }


    public void getResetSearchByOrg(String organisation) {
        System.out.println("Am Impl reset");
        try {
            ViewObject slsPrfSetupVo = this.getOrgSlsPrf1();
            if (slsPrfSetupVo != null) {
                System.out.println("slsPrfSetupVo  not null am Impl reset");
                slsPrfSetupVo.setNamedWhereClauseParam("orgIdBindVar", null);
                slsPrfSetupVo.executeQuery();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public void setUserIdCreateOnsaveVlick() {
    }

    public boolean areValidationsOk() {
        Boolean b = false;
        OrgSlsPrfVOImpl impl = this.getOrgSlsPrf1();
        Row currentRow = impl.getCurrentRow();


        Object freezeO = currentRow.getAttribute("FreezePrf");
        StringBuffer freeze = (freezeO == null ? new StringBuffer("") : new StringBuffer(freezeO.toString()));

        Object usrDiscO = currentRow.getAttribute("TransUsrDiscAcc");
        StringBuffer usrDisc = (usrDiscO == null ? new StringBuffer("") : new StringBuffer(usrDiscO.toString()));

        Object usrCashO = currentRow.getAttribute("TransCashCustAcc");
        StringBuffer usrCash = (usrCashO == null ? new StringBuffer("") : new StringBuffer(usrCashO.toString()));

        if (freeze.toString().equals("Y")) {
            if (usrCash.toString().equals("")) {
                FacesMessage message =
                    new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2596")); //Cash Customer Account is not selected. Sales Profile cannot be freezed without Cash Customer Account. Please select Cash Customer Account!
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);

            } else if (usrDisc.toString().equals("")) {
                FacesMessage message =
                    new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2597")); //Discount Account is not selected. Sales Profile cannot be freezed without Discount Account. Please select Discount!
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else if (!isPaymentCoaDefinedForAllPaymntModes()) {
                b = false;
            } else {
                b = true;
            }
        } else {
            b = true;
        }

        return b;
    }

    public Boolean areValidationsValid() {
        Boolean b = false;
        OrgSlsPrfVOImpl impl = this.getOrgSlsPrf1();
        Row soRow = impl.getCurrentRow();
        if (soRow != null) {
            Object stopRmaCkO = soRow.getAttribute("StopSlsRet");
            Object stopRmaValO = soRow.getAttribute("StopSlsRetDays");
            Object soAdvCkO = soRow.getAttribute("CheckSoAdv");
            Object soAdvTypO = soRow.getAttribute("SoAdvType");
            Object soAdvValO = soRow.getAttribute("SoAdvVal");

            String stopRmaCk = (stopRmaCkO == null ? "N" : stopRmaCkO.toString());
            Integer stopRmaVal = (stopRmaValO == null ? 0 : (Integer) stopRmaValO);
            String soAdvCk = (soAdvCkO == null ? "N" : soAdvCkO.toString());
            String soAdvTyp = (soAdvTypO == null ? null : soAdvTypO.toString());
            Number soAdvVal = (soAdvValO == null ? new Number(0) : (Number) soAdvValO);

            System.out.println("Stop RMA : " + stopRmaCk);
            System.out.println("Stop RMA Days : " + stopRmaVal);
            System.out.println("So Advance : " + soAdvCk);
            System.out.println("Advance Type : " + soAdvTyp);
            System.out.println("Advance Value : " + soAdvVal);
            if (stopRmaCk.equals("Y") && stopRmaVal <= 0) {
                FacesMessage message =
                    new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2598")); //Stop RMA Days should be greater than zero when Stop RMA is selected. Please enter RMA Days!
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else if (soAdvCk.equals("Y") && soAdvVal.compareTo(0) <= 0) { //&& soAdvTyp != null
                FacesMessage message = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2599")); //Advance Payment Amount should be greater than zero when Check Advance Payment Of Sales Order is selected. Please enter Advance Payment Amount!
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else if (!areValidationsOk()) {
                b = false;
            } else
                b = true;
        }
        return b;
    }

    public void removeAllfromOrgSLSCoa() {
        ViewObjectImpl coaVO1 = this.getOrgSLSPrfCoaVO1();
        RowSetIterator ctr = coaVO1.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();
            next.remove();
        }
    }

    /**
     * Container's getter for TransDual1.
     * @return TransDual1
     */
    public TransDualVOImpl getTransDual1() {
        return (TransDualVOImpl) findViewObject("TransDual1");
    }

    /**
     * Container's getter for LOVPaymentModeVO1.
     * @return LOVPaymentModeVO1
     */
    public ViewObjectImpl getLOVPaymentModeVO1() {
        return (ViewObjectImpl) findViewObject("LOVPaymentModeVO1");
    }

    /**
     * Container's getter for OrgSLSPrfCoaVO1.
     * @return OrgSLSPrfCoaVO1
     */
    public ViewObjectImpl getOrgSLSPrfCoaVO1() {
        return (ViewObjectImpl) findViewObject("OrgSLSPrfCoaVO1");
    }

    /**
     * Container's getter for SLSOrgToSLSCoaPrfVL1.
     * @return SLSOrgToSLSCoaPrfVL1
     */
    public ViewLinkImpl getSLSOrgToSLSCoaPrfVL1() {
        return (ViewLinkImpl) findViewLink("SLSOrgToSLSCoaPrfVL1");
    }

    /**
     * Method to check if Duplicate Coa Exists or not
     * @param coaId
     * @return
     */
    public Boolean isCoaDuplicate(Integer pymntId) {
        Boolean flag = false;
        ViewObjectImpl coaVO1 = getOrgSLSPrfCoaVO1();
        RowSetIterator ctr = coaVO1.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row row = ctr.next();
            Object cO = row.getAttribute("CoaId");
            Object pO = row.getAttribute("CoaFor");
            Integer c = (cO == null ? 0 : (Integer) cO);
            Integer p = (pO == null ? 0 : (Integer) pO);
            if (p.equals(pymntId)) {
                flag = true;
            }
        }
        ctr.closeRowSetIterator();
        return flag;
    }

    /**
     * Method to add COA to profile
     * @return
     * 0 :  Added SuccessFully
     * 1 :  Coa is not Defined
     * 2 :  PymntMode is not Selected
     * 3 :  Duplicate Coa and Payment Combination
     */
    public Integer addCoaToProfile() {
        Integer i = 0;
        TransDualVOImpl dual1 = this.getTransDual1();
        Row currentRow = dual1.getCurrentRow();
        Object coaIdO = currentRow.getAttribute("TransCoaId");
        Object pymntModeO = currentRow.getAttribute("TransPaymentMode");
        Integer coaId = (coaIdO == null ? -1 : (Integer) coaIdO);
        Integer pymntMode = (pymntModeO == null ? -1 : (Integer) pymntModeO);
        if (coaId == -1) {
            i = 1;
        } else if (pymntMode == -1) {
            i = 2;
        } else if (isCoaDuplicate(pymntMode)) {
            i = 3;
        } else {
            ViewObjectImpl coaVO1 = this.getOrgSLSPrfCoaVO1();
            Row createRow = coaVO1.createRow();
            coaVO1.insertRow(createRow);
            createRow.setAttribute("CoaFor", pymntMode);
            createRow.setAttribute("CoaId", coaId);
            dual1.executeQuery();
        }
        return i;
    }

    /**
     * Method to check if Coa for all the payment modes are defined or Not
     * @return
     */
    public Boolean isPaymentCoaDefinedForAllPaymntModes() {
        Boolean b = true;
        OrgSlsPrfVOImpl impl = getOrgSlsPrf1();
        Row currentRow = impl.getCurrentRow();
        Object postSoAdvO = currentRow.getAttribute("PostSoAdv");
        String postSoAdv = (postSoAdvO == null ? "N" : postSoAdvO.toString());
        if ("Y".equals(postSoAdv)) {
            ViewObjectImpl lOVPaymentModeVO1 = getLOVPaymentModeVO1();
            RowSetIterator itr = lOVPaymentModeVO1.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row row = itr.next();
                Integer payId = (Integer) row.getAttribute("AttId");
                ViewObjectImpl coaVO1 = getOrgSLSPrfCoaVO1();
                coaVO1.setRangeSize(-1);
                Row[] filteredRows = coaVO1.getFilteredRows("CoaFor", payId);
                if (filteredRows.length <= 0) {
                    b = false;
                    break;
                }
            }
            itr.closeRowSetIterator();
            if (getOrgSLSPrfCoaVO1().getAllRowsInRange().length <= 0) {
                b = false;
            }
        }
        if (!b) {
            String msg1 =
                (ADFModelUtils.resolvRsrc("MSG.2605")); //Post So Advance is checked in profile but Coa's for Payment Modes are not defined for one or more Payment Modes.
            String msg2 = (ADFModelUtils.resolvRsrc("MSG.2604")); //Please define Coa for all the Payment Modes.
            String msg3 = msg1.concat("<b /><b />");
            msg3 = msg3.concat(msg2);
            StringBuffer msg = new StringBuffer(ADFModelUtils.resolvRsrc("MSG.2605"));
            msg.append("<html> <b/><b/> </html>");
            msg.append(ADFModelUtils.resolvRsrc("MSG.2604"));
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2601"), msg.toString(),
                                                    FacesMessage.SEVERITY_ERROR);

        }
        return b;
    }


    /**
     * Container's getter for OrgSlsPrfDiscPlcSeqVO1.
     * @return OrgSlsPrfDiscPlcSeqVO1
     */
    public ViewObjectImpl getOrgSlsPrfDiscPlcSeqVO1() {
        return (ViewObjectImpl) findViewObject("OrgSlsPrfDiscPlcSeqVO1");
    }

    /**
     * Container's getter for SLSOrgToSLSDiscPlcSeqVL1.
     * @return SLSOrgToSLSDiscPlcSeqVL1
     */
    public ViewLinkImpl getSLSOrgToSLSDiscPlcSeqVL1() {
        return (ViewLinkImpl) findViewLink("SLSOrgToSLSDiscPlcSeqVL1");
    }

    /**
     * Method to be an array of Discount type Sequence
     * @return
     */
    public ArrayList<DiscPlcItm> getDiscountPolicySeq() {
        ArrayList<DiscPlcItm> list = new ArrayList<DiscPlcItm>();
        ViewObjectImpl discPlcSeqVO1 = getOrgSlsPrfDiscPlcSeqVO1();
        discPlcSeqVO1.setRangeSize(-1);
        System.out.println("No of Rows : " + discPlcSeqVO1.getRowCount());
        Row[] allRowsInRange = discPlcSeqVO1.getAllRowsInRange();
        for (Row row : allRowsInRange) {
            Row[] filteredRows = getDiscPolicyTypeVO1().getFilteredRows("AttId", row.getAttribute("DiscType"));
            System.out.println("Filtered Rows : " + filteredRows.length);
            if (filteredRows.length > 0) {
                Object attNmO = filteredRows[0].getAttribute("AttNm");
                list.add(new DiscPlcItm((Integer) row.getAttribute("DiscType"), attNmO.toString()));
            }
        }
        return list;
    }

    /**
     * Container's getter for DiscPolicyTypeVO1.
     * @return DiscPolicyTypeVO1
     */
    public ViewObjectImpl getDiscPolicyTypeVO1() {
        return (ViewObjectImpl) findViewObject("DiscPolicyTypeVO1");
    }

    public void populateDiscountPlcDataOnAdd() {
        getDiscPolicyTypeVO1().setRangeSize(-1);
        Row[] allRowsInRange = getDiscPolicyTypeVO1().getAllRowsInRange();
        int i = 0;
        for (Row row : allRowsInRange) {
            System.out.println(row.getAttribute("AttId") +  "  Att -ID ==============================" );
            System.out.println(i + "  The value of I =================================");
            ViewObjectImpl discPlcSeqVO = getOrgSlsPrfDiscPlcSeqVO1();
            Row newRow = discPlcSeqVO.createRow();
            
            discPlcSeqVO.insertRow(newRow);
            newRow.setAttribute("DiscType", row.getAttribute("AttId"));
            newRow.setAttribute("SeqNo", i);
            i = i + 1;
            System.out.println(newRow.getKey());
        }
    }

    /**
     * Method to set Discount Policy Data on Save.
     * @param list
     */
    public void setDiscountPolicyDataOnSave(ArrayList list) {
        if (list != null) {
            ArrayList<DiscPlcItm> list1 = (ArrayList<DiscPlcItm>) list;
            ViewObjectImpl discPlcSeqVO = getOrgSlsPrfDiscPlcSeqVO1();
            Row[] allRowsInRange = discPlcSeqVO.getAllRowsInRange();
            for (Row row : allRowsInRange) {
                row.remove();
            }
            discPlcSeqVO.executeQuery();
            Integer i = 1;
            for (DiscPlcItm row : list1) {
                Row newRow = discPlcSeqVO.createRow();
                discPlcSeqVO.insertRow(newRow);
                System.out.println("Row Id : " + row.getId());
                newRow.setAttribute("SeqNo", i);
                newRow.setAttribute("DiscType", row.getId());
                i = i + 1;
            }
            discPlcSeqVO.executeQuery();
        }
    }

    /**
     * Method to create new Sales Profile
     * @return
     */
    public Integer createNewSlsPrf() {
        Integer i = 0;
        OrgSlsPrfVOImpl orgSlsPrfVo = getOrgSlsPrf1();
        Row newPrfRow = orgSlsPrfVo.createRow();
        orgSlsPrfVo.insertRow(newPrfRow);

        ViewObjectImpl glblPrfVO = getSlsPrfGlblVO1();
        glblPrfVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        glblPrfVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        glblPrfVO.executeQuery();

        Row[] allRowsInRange = glblPrfVO.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Row glblRow = allRowsInRange[0];
            newPrfRow.setAttribute("VldtExtDocNoDt", glblRow.getAttribute("VldtExtDocNoDt"));
            newPrfRow.setAttribute("UsrSalesReturnAcc", glblRow.getAttribute("UsrSalesReturnAcc"));
            newPrfRow.setAttribute("UsrSalesAcc", glblRow.getAttribute("UsrSalesAcc"));
            newPrfRow.setAttribute("UsrInvAcc", glblRow.getAttribute("UsrInvAcc"));
            newPrfRow.setAttribute("UsrDiscAcc", glblRow.getAttribute("UsrDiscAcc"));
            newPrfRow.setAttribute("UsrCostOfGoodAcc", glblRow.getAttribute("UsrCostOfGoodAcc"));
            newPrfRow.setAttribute("UsrCashCustAcc", glblRow.getAttribute("UsrCashCustAcc"));
            newPrfRow.setAttribute("UseWty", glblRow.getAttribute("UseWty"));
            newPrfRow.setAttribute("UseTrnptMdl", glblRow.getAttribute("UseTrnptMdl"));
            newPrfRow.setAttribute("UseScheme", glblRow.getAttribute("UseScheme"));
            newPrfRow.setAttribute("UseQuotEntry", glblRow.getAttribute("UseQuotEntry"));
            newPrfRow.setAttribute("UsePricePlc", glblRow.getAttribute("UsePricePlc"));
            newPrfRow.setAttribute("UsePartNoInTran", glblRow.getAttribute("UsePartNoInTran"));
            newPrfRow.setAttribute("UsePackEntry", glblRow.getAttribute("UsePackEntry"));
            newPrfRow.setAttribute("UseOppEntry", glblRow.getAttribute("UseOppEntry"));
            newPrfRow.setAttribute("UseLc", glblRow.getAttribute("UseLc"));
            newPrfRow.setAttribute("UseGateEntry", glblRow.getAttribute("UseGateEntry"));
            newPrfRow.setAttribute("UseDocOrigin", glblRow.getAttribute("UseDocOrigin"));
            newPrfRow.setAttribute("UseDiscPlc", glblRow.getAttribute("UseDiscPlc"));
            newPrfRow.setAttribute("UseDfltSchm", glblRow.getAttribute("UseDfltSchm"));
            newPrfRow.setAttribute("StopSlsRetDays", glblRow.getAttribute("StopSlsRetDays"));
            newPrfRow.setAttribute("StopSlsRet", glblRow.getAttribute("StopSlsRet"));
            newPrfRow.setAttribute("SoAdvVal", glblRow.getAttribute("SoAdvVal"));
            newPrfRow.setAttribute("SoAdvType", glblRow.getAttribute("SoAdvType"));
            newPrfRow.setAttribute("ShowOrdTracking", glblRow.getAttribute("ShowOrdTracking"));
            newPrfRow.setAttribute("ShowOldPrice", glblRow.getAttribute("ShowOldPrice"));
            newPrfRow.setAttribute("ShowItmBasis", glblRow.getAttribute("ShowItmBasis"));
            newPrfRow.setAttribute("ShowItmAtt", glblRow.getAttribute("ShowItmAtt"));
            newPrfRow.setAttribute("ShowCustOutDtl", glblRow.getAttribute("ShowCustOutDtl"));
            newPrfRow.setAttribute("ShowAsblVal", glblRow.getAttribute("ShowAsblVal"));
            newPrfRow.setAttribute("ResvAgainstMrs", glblRow.getAttribute("ResvAgainstMrs"));
            newPrfRow.setAttribute("PostSoAdv", glblRow.getAttribute("PostSoAdv"));
            newPrfRow.setAttribute("InvCurrConvType", glblRow.getAttribute("InvCurrConvType"));
            //newPrfRow.setAttribute("FreezePrf", glblRow.getAttribute("FreezePrf"));
            newPrfRow.setAttribute("FinAdjUsingExtDoc", glblRow.getAttribute("FinAdjUsingExtDoc"));
            newPrfRow.setAttribute("ExciseTrdOrg", glblRow.getAttribute("ExciseTrdOrg"));
            newPrfRow.setAttribute("EntTransporter", glblRow.getAttribute("EntTransporter"));
            newPrfRow.setAttribute("EntItmIdInSo", glblRow.getAttribute("EntItmIdInSo"));
            newPrfRow.setAttribute("EditEoPrice", glblRow.getAttribute("EditEoPrice"));
            newPrfRow.setAttribute("EditAsblVal", glblRow.getAttribute("EditAsblVal"));
            newPrfRow.setAttribute("DefTaxType", glblRow.getAttribute("DefTaxType"));
            newPrfRow.setAttribute("ChkTaxReversal", glblRow.getAttribute("ChkTaxReversal"));
            newPrfRow.setAttribute("ChkDlvSchdlTlrnc", glblRow.getAttribute("ChkDlvSchdlTlrnc"));
            newPrfRow.setAttribute("ChkDlvQtyTlrnc", glblRow.getAttribute("ChkDlvQtyTlrnc"));
            newPrfRow.setAttribute("CheckSoAdv", glblRow.getAttribute("CheckSoAdv"));
        }
        return i;
    }

    /**
     * Container's getter for LOVOrg1.
     * @return LOVOrg1
     */
    public ViewObjectImpl getLOVOrg1() {
        return (ViewObjectImpl) findViewObject("LOVOrg1");
    }

    /**
     * Container's getter for SlsPrfGlblVO1.
     * @return SlsPrfGlblVO1
     */
    public ViewObjectImpl getSlsPrfGlblVO1() {
        return (ViewObjectImpl) findViewObject("SlsPrfGlblVO1");
    }
    /**
     * Method to remove discont sequence when profile is removed.
     */
    public void removeDiscPolySeq(){
        ViewObjectImpl discSeq = this.getOrgSlsPrfDiscPlcSeqVO1();
        RowSetIterator ctr = discSeq.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();
            next.remove();
        }
    }
}
