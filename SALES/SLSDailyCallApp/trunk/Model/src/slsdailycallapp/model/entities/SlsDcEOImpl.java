package slsdailycallapp.model.entities;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 25 10:54:45 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsDcEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getCldId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        HoOrgId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setHoOrgId((String) value);
            }
        }
        ,
        OrgId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        DocId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getDocId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        }
        ,
        DocDt {
            public Object get(SlsDcEOImpl obj) {
                return obj.getDocDt();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setDocDt((Timestamp) value);
            }
        }
        ,
        EoId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getEoId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setEoId((Integer) value);
            }
        }
        ,
        AssignedTo {
            public Object get(SlsDcEOImpl obj) {
                return obj.getAssignedTo();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setAssignedTo((Integer) value);
            }
        }
        ,
        DcId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getDcId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setDcId((String) value);
            }
        }
        ,
        EoAdds {
            public Object get(SlsDcEOImpl obj) {
                return obj.getEoAdds();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setEoAdds((String) value);
            }
        }
        ,
        ContactNm {
            public Object get(SlsDcEOImpl obj) {
                return obj.getContactNm();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setContactNm((String) value);
            }
        }
        ,
        ContactType {
            public Object get(SlsDcEOImpl obj) {
                return obj.getContactType();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setContactType((Integer) value);
            }
        }
        ,
        NextAction {
            public Object get(SlsDcEOImpl obj) {
                return obj.getNextAction();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setNextAction((String) value);
            }
        }
        ,
        NextDate {
            public Object get(SlsDcEOImpl obj) {
                return obj.getNextDate();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setNextDate((Timestamp) value);
            }
        }
        ,
        ExpctdAmt {
            public Object get(SlsDcEOImpl obj) {
                return obj.getExpctdAmt();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setExpctdAmt((Number) value);
            }
        }
        ,
        ExpctdCloserOn {
            public Object get(SlsDcEOImpl obj) {
                return obj.getExpctdCloserOn();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setExpctdCloserOn((Timestamp) value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(SlsDcEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer) value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(SlsDcEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Timestamp) value);
            }
        }
        ,
        UsrIdMod {
            public Object get(SlsDcEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer) value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(SlsDcEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setUsrIdModDt((Timestamp) value);
            }
        }
        ,
        FyId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getFyId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setFyId((Integer) value);
            }
        }
        ,
        DcDesc {
            public Object get(SlsDcEOImpl obj) {
                return obj.getDcDesc();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setDcDesc((String) value);
            }
        }
        ,
        StageId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getStageId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setStageId((Integer) value);
            }
        }
        ,
        EoPhNo {
            public Object get(SlsDcEOImpl obj) {
                return obj.getEoPhNo();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setEoPhNo((String) value);
            }
        }
        ,
        EoEmailId {
            public Object get(SlsDcEOImpl obj) {
                return obj.getEoEmailId();
            }

            public void put(SlsDcEOImpl obj, Object value) {
                obj.setEoEmailId((String) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SlsDcEOImpl object);

        public abstract void put(SlsDcEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int ASSIGNEDTO = AttributesEnum.AssignedTo.index();
    public static final int DCID = AttributesEnum.DcId.index();
    public static final int EOADDS = AttributesEnum.EoAdds.index();
    public static final int CONTACTNM = AttributesEnum.ContactNm.index();
    public static final int CONTACTTYPE = AttributesEnum.ContactType.index();
    public static final int NEXTACTION = AttributesEnum.NextAction.index();
    public static final int NEXTDATE = AttributesEnum.NextDate.index();
    public static final int EXPCTDAMT = AttributesEnum.ExpctdAmt.index();
    public static final int EXPCTDCLOSERON = AttributesEnum.ExpctdCloserOn.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int DCDESC = AttributesEnum.DcDesc.index();
    public static final int STAGEID = AttributesEnum.StageId.index();
    public static final int EOPHNO = AttributesEnum.EoPhNo.index();
    public static final int EOEMAILID = AttributesEnum.EoEmailId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsDcEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("slsdailycallapp.model.entities.SlsDcEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp)getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for EoId, using the alias name EoId.
     * @return the value of EoId
     */
    public Integer getEoId() {
        return (Integer)getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoId.
     * @param value value to set the EoId
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for AssignedTo, using the alias name AssignedTo.
     * @return the value of AssignedTo
     */
    public Integer getAssignedTo() {
        return (Integer)getAttributeInternal(ASSIGNEDTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for AssignedTo.
     * @param value value to set the AssignedTo
     */
    public void setAssignedTo(Integer value) {
        setAttributeInternal(ASSIGNEDTO, value);
    }

    /**
     * Gets the attribute value for DcId, using the alias name DcId.
     * @return the value of DcId
     */
    public String getDcId() {
        return (String)getAttributeInternal(DCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DcId.
     * @param value value to set the DcId
     */
    public void setDcId(String value) {
        if(value != null){
            System.out.println("Setting DC ID to null : |"+value+"|");
            setAttributeInternal(DCID, value);    
        }
    }

    /**
     * Gets the attribute value for EoAdds, using the alias name EoAdds.
     * @return the value of EoAdds
     */
    public String getEoAdds() {
        return (String)getAttributeInternal(EOADDS);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoAdds.
     * @param value value to set the EoAdds
     */
    public void setEoAdds(String value) {
        setAttributeInternal(EOADDS, value);
    }

    /**
     * Gets the attribute value for ContactNm, using the alias name ContactNm.
     * @return the value of ContactNm
     */
    public String getContactNm() {
        return (String)getAttributeInternal(CONTACTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactNm.
     * @param value value to set the ContactNm
     */
    public void setContactNm(String value) {
        setAttributeInternal(CONTACTNM, value);
    }

    /**
     * Gets the attribute value for ContactType, using the alias name ContactType.
     * @return the value of ContactType
     */
    public Integer getContactType() {
        return (Integer)getAttributeInternal(CONTACTTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ContactType.
     * @param value value to set the ContactType
     */
    public void setContactType(Integer value) {
        setAttributeInternal(CONTACTTYPE, value);
    }


    /**
     * Gets the attribute value for NextAction, using the alias name NextAction.
     * @return the value of NextAction
     */
    public String getNextAction() {
        return (String)getAttributeInternal(NEXTACTION);
    }

    /**
     * Sets <code>value</code> as the attribute value for NextAction.
     * @param value value to set the NextAction
     */
    public void setNextAction(String value) {
        setAttributeInternal(NEXTACTION, value);
    }

    /**
     * Gets the attribute value for NextDate, using the alias name NextDate.
     * @return the value of NextDate
     */
    public Timestamp getNextDate() {
        return (Timestamp)getAttributeInternal(NEXTDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for NextDate.
     * @param value value to set the NextDate
     */
    public void setNextDate(Timestamp value) {
        setAttributeInternal(NEXTDATE, value);
    }

    /**
     * Gets the attribute value for ExpctdAmt, using the alias name ExpctdAmt.
     * @return the value of ExpctdAmt
     */
    public Number getExpctdAmt() {
        return (Number)getAttributeInternal(EXPCTDAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpctdAmt.
     * @param value value to set the ExpctdAmt
     */
    public void setExpctdAmt(Number value) {
        setAttributeInternal(EXPCTDAMT, value);
    }

    /**
     * Gets the attribute value for ExpctdCloserOn, using the alias name ExpctdCloserOn.
     * @return the value of ExpctdCloserOn
     */
    public oracle.jbo.domain.Timestamp getExpctdCloserOn() {
        return (oracle.jbo.domain.Timestamp)getAttributeInternal(EXPCTDCLOSERON);
    }

    /**
     * Sets <code>value</code> as the attribute value for ExpctdCloserOn.
     * @param value value to set the ExpctdCloserOn
     */
    public void setExpctdCloserOn(Timestamp value) {
        setAttributeInternal(EXPCTDCLOSERON, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer)getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for DcDesc, using the alias name DcDesc.
     * @return the value of DcDesc
     */
    public String getDcDesc() {
        return (String)getAttributeInternal(DCDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DcDesc.
     * @param value value to set the DcDesc
     */
    public void setDcDesc(String value) {
        setAttributeInternal(DCDESC, value);
    }

    /**
     * Gets the attribute value for StageId, using the alias name StageId.
     * @return the value of StageId
     */
    public Integer getStageId() {
        return (Integer)getAttributeInternal(STAGEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for StageId.
     * @param value value to set the StageId
     */
    public void setStageId(Integer value) {
        setAttributeInternal(STAGEID, value);
    }

    /**
     * Gets the attribute value for EoPhNo, using the alias name EoPhNo.
     * @return the value of EoPhNo
     */
    public String getEoPhNo() {
        return (String) getAttributeInternal(EOPHNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoPhNo.
     * @param value value to set the EoPhNo
     */
    public void setEoPhNo(String value) {
        setAttributeInternal(EOPHNO, value);
    }

    /**
     * Gets the attribute value for EoEmailId, using the alias name EoEmailId.
     * @return the value of EoEmailId
     */
    public String getEoEmailId() {
        return (String) getAttributeInternal(EOEMAILID);
    }

    /**
     * Sets <code>value</code> as the attribute value for EoEmailId.
     * @param value value to set the EoEmailId
     */
    public void setEoEmailId(String value) {
        setAttributeInternal(EOEMAILID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param orgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String orgId, String docId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, orgId, docId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer( (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}")).toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer fyId = 0;
        try {
            //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
            fyId =(Integer)callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {cldId.toString(),orgId.toString(), new Timestamp(System.currentTimeMillis()) });
           System.out.println("FY :"+fyId);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' in EoImpl !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        
        this.setFyId(fyId);
        try {
            //GET_TXN_ID(USR_ID NUMBER,ORG_ID VARCHAR2 DEFAULT '00', SVR_LOC_ID NUMBER DEFAULT 0, DOC_ID NUMBER DEFAULT 0,p_cld_id varchar2)
            StringBuffer DOC_ID =  new StringBuffer((callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[]{cldId.toString(),slocId,orgId.toString(),userId,21513,0})).toString());
           this.setDocId(DOC_ID.toString());
           System.out.println("DocId :"+DOC_ID);
            //GET_ORG_DEF_CURR_BS1(PARAM_ORG_ID VARCHAR2)
            /* Integer i = (Integer)callStoredFunction(Types.INTEGER, "APP.PKG_APP.GET_ORG_DEF_CURR_BS1(?)", new Object[]{orgId.toString()});
            System.out.println("Curr id bs "+i);
            this.setCurrIdBs(i);
             */
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage message = new FacesMessage("There have been an error in calling function 'GET_TXN_ID' !");   
            message.setSeverity(FacesMessage.SEVERITY_ERROR);   
            FacesContext.getCurrentInstance().addMessage(null, message);
        }

        this.setCldId(cldId.toString());
        this.setOrgId(orgId.toString());
        this.setHoOrgId(hoOrgId.toString());
        this.setSlocId(slocId);
        this.setDocDt(new Timestamp(System.currentTimeMillis()));
        this.setUsrIdCreate(userId);
        this.setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        this.setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
        this.setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        
        
    }
    
    private void checkInconsistentAttrs() {
        int count = getAttributeCount();
        // Store the current values of the attributes; we're going to munge them during the check
        Object[] currValues = new Object[count];
        boolean[] attributeChanges = new boolean[count];
        for (int i=0; i<count; i++) {
            currValues[i] = getAttribute(i);
            attributeChanges[i] = isAttributeChanged(i);
            System.out.println("Current Values : "+getAttribute(i)+" is it changed : "+isAttributeChanged(i));
            if (isAttributeChanged(i)) {
                populateAttributeAsChanged(i, currValues[i]);
            }
        }
        // Change all attribute values to match current DB values (good thing we saved them first!)
        /* refresh(REFRESH_WITH_DB_FORGET_CHANGES);
        // For each attribute...
        for (int i=0; i<count; i++) {
            // compare the current value (from the DB) with the original value queried from DB.
            Object origValue = getPostedAttribute(i);
            Object currDbValue = getAttribute(i);
            // Watch your nulls! Nobody likes NPEs.
            System.out.println("Old Values : "+origValue);
            if ((origValue == null && currDbValue != null) ||
                (origValue != null && (currDbValue == null || !origValue.equals(currDbValue))))
            {
                // If they don't match, tell us about it.
                System.out.println("  Inconsistent attribute " + getAttributeNames()[i]);
                System.out.println("  Queried from DB = " + origValue);
                System.out.println("  Now in DB = " + currDbValue);
            }
            // Set this EO instance back to the way it was
             if (attributeChanges[i]) {
                 populateAttributeAsChanged(i, currValues[i]);
             } else {
                 populateAttribute(i, currValues[i]);
             }
        } */ 
    }

    /*
    * For resolving the El
    */ 
    public Object resolvEl(String data){
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           Object Message=valueExp.getValue(elContext);
           return Message;
         }
    /**
     * Method to call a Database function
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                        //System.out.println("___________:"+bindVars[z]);
                    }
                }
                st.executeUpdate();
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {
                    }
                }
            }
        }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //super.lock();
           try{
             super.lock();
         }catch(Exception e){
             //checkInconsistentAttrs() ;
             //e.printStackTrace();
         } 
          
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {         
        if(operation == DML_UPDATE){
             this.setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
             this.setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
         }
         if(operation == DML_INSERT){
             this.setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
             this.setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
         }
        super.doDML(operation, e);
    }
}
