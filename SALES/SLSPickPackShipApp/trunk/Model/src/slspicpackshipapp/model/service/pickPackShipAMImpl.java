package slspicpackshipapp.model.service;


import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.EbizParamsAPPUtils;
import adf.utils.ebiz.EbizParamsMMUtils;
import adf.utils.ebiz.EbizParamsSLSUtils;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import com.tangosol.dev.assembler.New;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCIteratorBinding;
import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.binding.BindingContainer;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.uicli.binding.JUCtrlListBinding;

import org.apache.myfaces.trinidad.context.RequestContext;

import slspicpackshipapp.model.datatype.LotData;
import slspicpackshipapp.model.datatype.LotRow;
import slspicpackshipapp.model.datatype.PickDtlsDS;
import slspicpackshipapp.model.helper.PickAMHelper;
import slspicpackshipapp.model.helper.PickPackShipSendMailHelper;
import slspicpackshipapp.model.service.common.pickPackShipAM;
import slspicpackshipapp.model.views.DualPackMtlVOImpl;
import slspicpackshipapp.model.views.LOVForPackagingMaterialItemQueryVOImpl;
import slspicpackshipapp.model.views.LovEoIdVOImpl;
import slspicpackshipapp.model.views.LovPickIdVOImpl;
import slspicpackshipapp.model.views.PackagingMtrlVOImpl;
import slspicpackshipapp.model.views.SLSPckMtlBinVOImpl;
import slspicpackshipapp.model.views.SLSPckMtlLotVOImpl;
import slspicpackshipapp.model.views.SLSPckMtlSRVOImpl;
import slspicpackshipapp.model.views.SlsPackVORowImpl;
import slspicpackshipapp.model.views.SlsPickIssuLotVOImpl;
import slspicpackshipapp.model.views.SlsPickIssuSrVOImpl;
import slspicpackshipapp.model.views.SlsPickVOImpl;
import slspicpackshipapp.model.views.SlsPickVORowImpl;
import slspicpackshipapp.model.views.ViewMmStkSummBinVOImpl;
import slspicpackshipapp.model.views.ViewMmStkSummLotVOImpl;
import slspicpackshipapp.model.views.ViewMmStkSummSrVOImpl;
import slspicpackshipapp.model.views.ViewSlsSoPickItmVOImpl;
import slspicpackshipapp.model.views.viewSlsSoPickVOImpl;
//import org.apache.myfaces.trinidad.context.RequestContext;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 01 12:20:45 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class pickPackShipAMImpl extends ApplicationModuleImpl implements pickPackShipAM {
    private static ADFLogger _log = ADFLogger.createADFLogger(pickPackShipAMImpl.class);
    private Timestamp pickDateBean = null;
    private String ItmIdSearch = null;
    private String wareHouId = null;
    //private StringBuffer ShipDocId = new StringBuffer("");
    private Integer itmAddFlg = 0;
    private String shipDocIdBind = null;

    /**
     * This is the default constructor (do not remove).
     */
    public pickPackShipAMImpl() {
    }

    /**
     * Container's getter for SlsPick1.
     * @return SlsPick1
     */
    public SlsPickVOImpl getSlsPick1() {
        return (SlsPickVOImpl) findViewObject("SlsPick1");
    }

    /**
     * Container's getter for SlsPickItm1.
     * @return SlsPickItm1
     */
    public ViewObjectImpl getSlsPickItm1() {
        return (ViewObjectImpl) findViewObject("SlsPickItm1");
    }

    /**
     * Container's getter for SlsPickTOSlsPickItmVL1.
     * @return SlsPickTOSlsPickItmVL1
     */
    public ViewLinkImpl getSlsPickTOSlsPickItmVL1() {
        return (ViewLinkImpl) findViewLink("SlsPickTOSlsPickItmVL1");
    }

    /**
     * Container's getter for viewSlsSoPick1.
     * @return viewSlsSoPick1
     */
    public viewSlsSoPickVOImpl getviewSlsSoPick1() {
        return (viewSlsSoPickVOImpl) findViewObject("viewSlsSoPick1");
    }

    /**
     * Container's getter for ViewSlsSoPickItm1.
     * @return ViewSlsSoPickItm1
     */
    public ViewSlsSoPickItmVOImpl getViewSlsSoPickItm1() {
        return (ViewSlsSoPickItmVOImpl) findViewObject("ViewSlsSoPickItm1");
    }

    /**
     * Container's getter for viewSlsSoPickTOviewSlsSoPickItmVL1.
     * @return viewSlsSoPickTOviewSlsSoPickItmVL1
     */
    public ViewLinkImpl getviewSlsSoPickTOviewSlsSoPickItmVL1() {
        return (ViewLinkImpl) findViewLink("viewSlsSoPickTOviewSlsSoPickItmVL1");
    }

    /*****Methods to be used in Managed bean *********/

    /**Methods to get Global Parameter.
     * @return
     */
    public Integer getparamSlocId() {
        return EbizParams.GLBL_APP_SERV_LOC();
    }

    /**
     * @return
     */
    public Integer getparamUsrId() {
        return EbizParams.GLBL_APP_USR();
    }

    /**
     * @return
     */
    public String getparamOrgId() {
        return EbizParams.GLBL_APP_USR_ORG();
    }

    /**
     * @return
     */
    public String getparamCldId() {
        return EbizParams.GLBL_APP_CLD_ID();
    }

    /**
     * @return
     */
    public String getparamHoOrgId() {
        return EbizParams.GLBL_HO_ORG_ID();
    }

    /**Method to resolve expression- returns String value.
     * @param data
     * @return
     */
    public String resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();
        return Message.toString();
    }

    /**Method to generate Sr No.
     * @param voName
     */
    public void serialNumGen(String voName) {
        /**New Code to get Serial No.- 6-03-2013-@Ashish Kumar*/
        ViewObject soItm = this.findViewObject(voName);
        Integer Srno = 0;
        Integer max = 0;
        soItm.setRangeSize(-1);
        Row row[] = soItm.getAllRowsInRange();
        for (Row r : row) {
            try {
                Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
            } catch (NullPointerException e) {
                Srno = 0;

            }
            if (Srno > max) {
                max = Srno;
            }
        }

        max = max + 1;
        _log.warning("Max Value is-->" + max);
        soItm.getCurrentRow().setAttribute("SrNo", max);
    }


    /**Method to filter tree according to pick date.
     * @param pickDate
     */
    public void filterOrderData(Timestamp pickDate) {
        oracle.jbo.domain.Date newPickDate = new oracle.jbo.domain.Date();
        ViewObjectImpl impl = this.getSlsPick1();
        Row pickRow = impl.getCurrentRow();
        if (pickRow != null && pickRow.getAttribute("EoId") != null) {
            Object EoIdO = pickRow.getAttribute("EoId");
            Integer EoId = (EoIdO == null ? -1 : (Integer) EoIdO);
            if (isCoaIdIsNull().equals("N")) {
                Object AddsIdO = pickRow.getAttribute("DlvAddsId");
                Object WhIdO = pickRow.getAttribute("WhId");
                Object SoIdTransO = pickRow.getAttribute("SoIdTrans");
                Object ItmIdTransO = pickRow.getAttribute("ItmIdTrans");
                Object pickDocIdO = pickRow.getAttribute("DocId");
                Object currIdSpO = pickRow.getAttribute("CurrIdSp");
                Object prj = pickRow.getAttribute("PrjId");


                StringBuilder AddsId =
                    (AddsIdO == null ? new StringBuilder("") : new StringBuilder(AddsIdO.toString()));
                StringBuilder WhId = (WhIdO == null ? new StringBuilder("") : new StringBuilder(WhIdO.toString()));

                String pick_doc_id_bind = (pickDocIdO == null ? null : pickDocIdO.toString());
                setShipDocIdBind(pick_doc_id_bind); // To set current Pick id for the purpose of shipment selection.

                _log.info("EoId= " + EoId + "  AddsId= " + AddsId + " WhId= " + WhId + " SoIdTrans= " + SoIdTransO +
                          " ItmIdTrans= " + ItmIdTransO + " pick_doc_id_bind=" + pick_doc_id_bind);
                if (false) {
                    ADFModelUtils.showFormattedFacesMessage("WareHouse for Pick is not selected !",
                                                            "Please select WareHouse before adding Item to Current Pick !",
                                                            FacesMessage.SEVERITY_FATAL);
                } else {
                    try {
                        newPickDate = new oracle.jbo.domain.Date(pickDate.dateValue().toString());
                    } catch (SQLException e) {
                        _log.info("In Exception on Date Conversion : " + e);
                    }
                    _log.info("Pick Date is : " + newPickDate);
                    viewSlsSoPickVOImpl slssoPickVw = (viewSlsSoPickVOImpl) this.getviewSlsSoPick1();
                    _log.info("So Rows Before filter : " + slssoPickVw.getRowCount());
                    slssoPickVw.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
                    slssoPickVw.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
                    slssoPickVw.setNamedWhereClauseParam("SlocIdBind", getparamSlocId());
                    slssoPickVw.setNamedWhereClauseParam("CldIdBind", getparamCldId());
                    slssoPickVw.setNamedWhereClauseParam("EoIdBind", EoId);
                    slssoPickVw.setNamedWhereClauseParam("SoIdDocBind", SoIdTransO);
                    slssoPickVw.setNamedWhereClauseParam("ShipAddBind", AddsId.toString());
                    slssoPickVw.setNamedWhereClauseParam("WhIdBind", WhId.toString());
                    slssoPickVw.setNamedWhereClauseParam("bindDlvDt", newPickDate);
                    slssoPickVw.setNamedWhereClauseParam("CurrIdSpBind", currIdSpO);
                    slssoPickVw.setNamedWhereClauseParam("ItmIdBind", ItmIdTransO);
                    _log.info("So Rows After filter : " + slssoPickVw.getRowCount());

                    ViewSlsSoPickItmVOImpl slsSoPickItmVw = (ViewSlsSoPickItmVOImpl) this.getViewSlsSoPickItm1();
                    if (doOrgUseTolerance().equals("Y")) {
                        try {
                            _log.info("Uses Tolerance");
                            slssoPickVw.setNamedWhereClauseParam("TolernceDtBind", newPickDate);
                            slssoPickVw.setNamedWhereClauseParam("bindDlvDt", null); //14 july 2014
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    } else {
                        try {
                            _log.info("Do Not Use Tolerance");
                            slssoPickVw.setNamedWhereClauseParam("bindDlvDt", newPickDate);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    slssoPickVw.executeQuery();
                    getViewSlsSoPickItmVO1().setNamedWhereClauseParam("whIdBind", -1);
                    this.getViewSlsSoPickItmVO1().executeQuery();

                    this.pickDateBean = pickDate;
                }
            } else {
                ADFModelUtils.showFormattedFacesMessage("COA is not defined for the selected Customer.",
                                                        "Pick cannot be made for a Customer whose COA is not defined. Please define COA for the currently selected Customer !",
                                                        FacesMessage.SEVERITY_ERROR);
            }


        } else {
            viewSlsSoPickVOImpl slssoPickVw = (viewSlsSoPickVOImpl) this.getviewSlsSoPick1();
            _log.info("So Rows Before filter : " + slssoPickVw.getRowCount());
            slssoPickVw.setNamedWhereClauseParam("EoIdBind", -1);
            slssoPickVw.executeQuery();
            getViewSlsSoPickItmVO1().setNamedWhereClauseParam("whIdBind", -1);
            this.getViewSlsSoPickItmVO1().executeQuery();

        }
    }

    /**Method to Filter TreeTable Childs (As Per Items).
     * @param itmId
     */
    public void searchTreeasPerItmId(String itmId) {
        ViewObject slssoPickVw = this.getviewSlsSoPick1();
        ViewObject slsSoPickItmVw = this.getViewSlsSoPickItm1();
        slssoPickVw.executeQuery();
        slsSoPickItmVw.executeQuery();
        this.setItmIdSearch(itmId);
        // Filter It Using Key Attribute
        Row[] grpRow = slssoPickVw.getAllRowsInRange();
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet) r.getAttribute("ViewSlsSoPickItm");
                childRows.executeQuery();
            }
        }
    }

    /**Method to Populate Item in Picklist from Tree on pick date basis.
     * @param curRow
     */
    public void populateItemToPickList(Row curRow) {
        _log.info("curRow in amimpl is ==" + curRow);
        itmAddFlg = 1;
        String flag = "Y";
        ViewObjectImpl slsPickItm = this.getSlsPickItm1();
        //ViewObjectImpl
        ViewObject slsPick = this.getSlsPick1();
        Row pickRow = slsPick.getCurrentRow();
        ViewObject slsSoPick = this.getviewSlsSoPick1();

        curRow.setAttribute("SelectItemChkBxTrans", "Y");
        RowQualifier rq = new RowQualifier(slsPickItm);
        rq.setWhereClause("SoId='" + curRow.getAttribute("DocId") + "' and ItmId='" + curRow.getAttribute("ItmIdSo") +
                          "' and DlvDt='" + curRow.getAttribute("DlvDt") + "'");
        Row fltrdRows[] = slsPickItm.getFilteredRows(rq);
        if (fltrdRows.length == 0) {

            _log.info("Currency in PickList header-" + pickRow.getAttribute("CurrIdSp") + "and in tree child-" +
                      curRow.getAttribute("CurrIdSp"));
            if (pickRow.getAttribute("CurrIdSp") == null) {
                pickRow.setAttribute("CurrIdSp", curRow.getAttribute("CurrIdSp"));
                pickRow.setAttribute("CurrConvFctr", curRow.getAttribute("CurrConvFctr"));
                slsSoPick.setNamedWhereClauseParam("currIdSpBind", curRow.getAttribute("CurrIdSp"));
                slsSoPick.executeQuery();
            } else {
                Integer pickCurrId = Integer.parseInt(pickRow.getAttribute("CurrIdSp").toString());
                Integer currIdOrd = Integer.parseInt(curRow.getAttribute("CurrIdSp").toString());
                if (pickCurrId.compareTo(currIdOrd) != 0) {
                    flag = "N";
                    FacesMessage errMsg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.966"));
                    errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, errMsg);
                } else {
                    flag = "Y";
                }
            }

            if (flag.equalsIgnoreCase("Y")) {
                Row newRow = slsPickItm.createRow();
                slsPickItm.insertRow(newRow);
                serialNumGen("SlsPickItm1");
                newRow.setAttribute("SoId", curRow.getAttribute("DocId"));
                newRow.setAttribute("ItmId", curRow.getAttribute("ItmIdSo"));
                if (this.getSlsPick1().getCurrentRow() != null) {
                    SlsPickVORowImpl row = (SlsPickVORowImpl) this.getSlsPick1().getCurrentRow();
                    Row[] filteredRows = row.getLovBarcodeVO1().getFilteredRows("ItmId", row.getItmIdTrans());
                    if (filteredRows.length > 0 && filteredRows[0].getAttribute("BcNo") != null) {
                        newRow.setAttribute("BcNo", (String) filteredRows[0].getAttribute("BcNo"));
                    }
                }
                newRow.setAttribute("ItmUom", curRow.getAttribute("ItmUomSo"));
                newRow.setAttribute("SoItmQty", curRow.getAttribute("PendingQty"));
                newRow.setAttribute("DlvDt", curRow.getAttribute("DlvDt"));
                newRow.setAttribute("PickQty", curRow.getAttribute("SchdlQuantTrans"));
                newRow.setAttribute("ItmPrice", curRow.getAttribute("ItmRate"));
                newRow.setAttribute("SoDt", curRow.getAttribute("SoDt"));
                Number totQty = (Number) curRow.getAttribute("PendingQty");
                Number pickedQty = (Number) curRow.getAttribute("SchdlQuantTrans");
                newRow.setAttribute("BalQty", totQty.subtract(pickedQty));
                String baseUom = getBaseUom(newRow.getAttribute("ItmId").toString());
                Number convFactor =
                    EbizParamsMMUtils.getItmUomConvFactor(this, newRow.getAttribute("ItmId").toString(),
                                                          newRow.getAttribute("ItmUom").toString(), baseUom);

                newRow.setAttribute("ItmUomBs", baseUom);
                newRow.setAttribute("UomConvFctr", convFactor);
                newRow.setAttribute("ItmQtyBs",
                                    ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty.multiply(convFactor)));
                autoIssueItmOnAdd(newRow);

                //this.getSlsPickItm1().findAndSetCurrentRowByKey(newRow.getKey(),1);
                _log.info("Row Inserted--");
            }
        } else {
            System.out.println("enter in else");
            Number prevPickQty = StaticValue.NUMBER_ZERO;
            prevPickQty = (Number) fltrdRows[0].getAttribute("PickQty");
            Number curPickQty = StaticValue.NUMBER_ZERO;
            curPickQty = (Number) curRow.getAttribute("SchdlQuantTrans");
            Number totQty = (Number) curRow.getAttribute("PendingQty");
            Number penddingQnt = (Number) fltrdRows[0].getAttribute("BalQty"); //added by Rohit
            _log.info("Previous Qty-" + prevPickQty + "And Current Qty-" + curPickQty + " penddingQnt =" + penddingQnt +
                      " totQty =" + totQty);
            fltrdRows[0].setAttribute("PickQty", (prevPickQty.add(curPickQty)));
            fltrdRows[0].setAttribute("BalQty", totQty.subtract(curPickQty)); //added by Rohit
            autoIssueItmOnAdd(fltrdRows[0]);
            //
            /* FacesMessage errMsg = new FacesMessage("Item Quantity is updated in PickList for this Sales Order"); */
            FacesMessage errMsg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.967"));

            errMsg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
        }
        getFYidOrgPick(getparamCldId(), getparamOrgId());
        this.getDBTransaction().validate();
        this.getDBTransaction().postChanges();
        this.getViewSlsSoPickItm1().executeQuery();
        slsPickItm.executeQuery();
        Row[] grpRow = this.getviewSlsSoPick1().getAllRowsInRange();
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet) r.getAttribute("ViewSlsSoPickItm");
                childRows.executeQuery();
            }
        }
        // for autoissuing item on Add
        this.getviewSlsSoPick1().executeQuery();
        itmAddFlg = 0;
    }

    /**
     * at the time of Insertion updating cost in lot through calling this function.
     * @param lotId
     * @param pickQty
     * @return
     */
    public Number getPriceForLot(String lotId, Number pickQty) {
        _log.info("getPriceForLot : ");
        ViewObject slsPick = getSlsPick1();
        Row cRow = slsPick.getCurrentRow();
        String whId = null;
        ViewObject slsPickItm = getSlsPickItm1();
        Row cItmRow = slsPickItm.getCurrentRow();
        Number multiply = StaticValue.NUMBER_ZERO;
        Number avail = StaticValue.NUMBER_ZERO;
        try {
            whId = cRow.getAttribute("WhId").toString();
            Object availBD = callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_APP_USR_ORG(), whId, cItmRow.getAttribute("ItmId"),
                                                lotId, EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this)
            });
            avail = new Number(availBD);
            multiply = pickQty.multiply(new Number(avail));
            multiply = ADFBeanUtils.roundOff(multiply);
            return multiply;
        } catch (Exception e) {
            e.printStackTrace();
            return multiply;
        }

    }

    public Number getPriceForLotForPckMtrl(String lotId, Number pickQty) {
        _log.info("getPriceForLot : ");
        System.out.println("In Lot COst The Lot Id and PickQty Is " + lotId + "  :::" + pickQty);
        ViewObject slsPckMtrl = this.getPackagingMtrlVO1();
        Row cRow = slsPckMtrl.getCurrentRow();
        String whId = null;


        Number multiply = StaticValue.NUMBER_ZERO;
        Number avail = StaticValue.NUMBER_ZERO;
        try {
            whId = cRow.getAttribute("WhId").toString();
            System.out.println("WHID in Lot COst :::" + whId);
            System.out.println("cRow.getAttribute(\"ItmId\")::::: " + cRow.getAttribute("ItmId"));
            Object res = callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_APP_USR_ORG(), whId, cRow.getAttribute("ItmId"), lotId,
                                            EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this)
            });
            avail = new Number(res);
            System.out.println("Avail VAlue in Lot Cost is :::::: " + avail);
            multiply = (Number) pickQty.multiply(new Number(avail));
            multiply = ADFBeanUtils.roundOff(multiply);
            System.out.println("Return From Lot COst Function:::::: " + multiply);
            return multiply;
        } catch (Exception e) {
            e.printStackTrace();
            return multiply;
        }

    }

    /**To Add Item Lot Wise
     * Method to select lot for item (If Organisation is not using bin and Items are not serialised).
     * @return
     */
    public String insertIntoPickItmLot() {
        ViewObjectImpl mtlItm = this.getSlsPickItm1();
        ViewObjectImpl mtlLot = this.getSlsPickIssuLot1();

        Row currItm = mtlItm.getCurrentRow();
        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getViewMmStkSummLot1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("lenth sr     " + srRow.length);
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {
                        // Filter Lot Table to ckeck Lot exist or not, Basis of DocId , SoId , ItmId and LotId
                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and SoId ='" +
                                                    currItm.getAttribute("SoId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        _log.info("" + rowQualifier.getExprStr());
                        // Check that Lot exist or not for that item
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                r.remove();

                                /* if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) ==
                                    0) {
                                    _log.info("Lot remove-------------------");
                                    System.out.println("removing row is:   " + r + "----------------!");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >
                                           0) {

                                    _log.info("Lot Update -------------------");
                                    r.setAttribute("PickQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                    Number pickedQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                    String baseUom = getBaseUom(r.getAttribute("ItmId").toString());

                                    Number convFactor =
                                        EbizParamsMMUtils.getItmUomConvFactor(this, r.getAttribute("ItmId").toString(),
                                                                              r.getAttribute("ItmUom").toString(),
                                                                              baseUom);

                                    pickedQty = ADFBeanUtils.roundOff(pickedQty.multiply(convFactor));
                                    r.setAttribute("PickQty", pickedQty);
                                    // Changes done for Tolerance - start
                                    r.setAttribute("DlvDt", currItm.getAttribute("DlvDt"));
                                    // Changes done for Tolerance - end

                                    String lotId = rr.getAttribute("LotId").toString();
                                    Number qty = (Number) rr.getAttribute("TransIssuQtyValue");


                                    _log.info(" key :" + lotId + " lotval :" + qty);
                                    if (this.getPriceForLot(lotId, qty) != null) {
                                        r.setAttribute("ItmLotCost", this.getPriceForLot(lotId, qty));
                                    }
                                    System.out.println("updated row is:   " + r + "----------------!");
                                }*/
                            }
                        }

                        if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                            Row lotInst = mtlLot.createRow();
                            lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                            lotInst.setAttribute("SoId", currItm.getAttribute("SoId"));
                            lotInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));


                            lotInst.setAttribute("PickQtyBs", rr.getAttribute("TransIssuQtyValue"));

                            Number pickedQty = (Number) rr.getAttribute("TransIssuQtyValue");
                            String baseUom = getBaseUom(lotInst.getAttribute("ItmId").toString());
                            lotInst.setAttribute("ItmUom", baseUom);
                            Number convFactor =
                                EbizParamsMMUtils.getItmUomConvFactor(this, lotInst.getAttribute("ItmId").toString(),
                                                                      lotInst.getAttribute("ItmUom").toString(),
                                                                      baseUom);

                            lotInst.setAttribute("PickQty",
                                                 ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(),
                                                                       pickedQty.divide(convFactor)));


                            // Changes done for Tolerance - start
                            lotInst.setAttribute("DlvDt", currItm.getAttribute("DlvDt"));
                            // Changes done for Tolerance - end
                            String lotId = rr.getAttribute("LotId").toString();
                            Number qty = (Number) rr.getAttribute("TransIssuQtyValue");
                            _log.info(" lotId :" + lotId + " lotval :" + qty);
                            if (this.getPriceForLot(lotId, qty) != null) {
                                lotInst.setAttribute("ItmLotCost", this.getPriceForLot(lotId, qty));
                            }
                            mtlLot.insertRow(lotInst);
                            mtlLot.executeQuery();

                            System.out.println("inserted row is:   " + lotInst + "----------------!");
                        }


                    }
                } else {
                    RowQualifier rowQualifier = new RowQualifier(mtlLot);
                    rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and SoId ='" +
                                                currItm.getAttribute("SoId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                rr.getAttribute("LotId").toString() + "'");
                    Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                    for (Row r : rows) {
                        r.remove();
                    }
                }

                //   getDBTransaction().postChanges(); // 1 july 2014
            }
        }
        return null;
    }


    /**To Select Bin and Lot for Item
     * Method to select lot and bin for item (If Organisation is using bin and Items are not serialised).
     */
    public void insertIntoPickItmBin() {
        _log.info("=====insertIntoPickItmBin method of am impl=======");

        ViewObjectImpl mtlItm = this.getSlsPickItm1();
        ViewObjectImpl mtlBin = this.getSlsPickIssuBin1();
        ViewObjectImpl mtlLot = this.getSlsPickIssuLot1();
        Row currItm = mtlItm.getCurrentRow();
        Number zero = StaticValue.NUMBER_ZERO;
        ViewObjectImpl mmStkSummBinVo = this.getViewMmStkSummBin1();
        RowQualifier mmStkSummBinRq = new RowQualifier(mmStkSummBinVo);
        mmStkSummBinRq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() +
                                      " and OrgId='" + getparamOrgId() + "' and ItmId='" +
                                      currItm.getAttribute("ItmId"));
        Row[] binRow = mmStkSummBinVo.getFilteredRows(mmStkSummBinRq);
        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                    }
                }
            }
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        _log.info(" Lot size  " + lotset.size() + " lotset " + lotset);
        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = StaticValue.NUMBER_ZERO;
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            // Check lot already created or not
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" SoId ='" + currItm.getAttribute("SoId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());


            Number pickedQty = StaticValue.NUMBER_ZERO;
            Number pickedQtyBs = StaticValue.NUMBER_ZERO;
            if (rows.length > 0) {

                for (Row r : rows) {
                    r.remove();
                    /*
                    pickedQtyBs = lotQty;
                    r.setAttribute("PickQtyBs", pickedQtyBs);
                    String baseUom = getBaseUom(r.getAttribute("ItmId").toString());
                    Number convFactor =
                        EbizParamsMMUtils.getItmUomConvFactor(this, r.getAttribute("ItmId").toString(),
                                                              r.getAttribute("ItmUom").toString(), baseUom);


                    pickedQty = pickedQty.divide(convFactor);
                    pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                    r.setAttribute("PickQty", pickedQty);

                    _log.info(" key :" + lotId + " lotval :" + pickedQtyBs);
                    if (this.getPriceForLot(lotId, pickedQtyBs) != null) {
                        r.setAttribute("ItmLotCost", this.getPriceForLot(lotId, pickedQtyBs));
                    }
                    //lotCurrRowKey = r.getKey();
                    this.getSlsPickIssuLotVO1().executeQuery();*/
                }

            } 
                pickedQtyBs = lotQty;
                pickedQty = lotQty;
                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("PickQtyBs", pickedQtyBs);
                instLot.setAttribute("SoId", currItm.getAttribute("SoId"));
                instLot.setAttribute("SoDt", currItm.getAttribute("SoDt"));


                String baseUom = getBaseUom(instLot.getAttribute("ItmId").toString());
                instLot.setAttribute("ItmUom", baseUom);
                Number convFactor =
                    EbizParamsMMUtils.getItmUomConvFactor(this, instLot.getAttribute("ItmId").toString(),
                                                          instLot.getAttribute("ItmUom").toString(), baseUom);


                pickedQty = pickedQty.divide(convFactor);
                pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);

                instLot.setAttribute("PickQty", pickedQty);

                _log.info(" key :" + lotId + " lotval :" + pickedQtyBs);
                if (this.getPriceForLot(lotId, pickedQtyBs) != null) {
                    instLot.setAttribute("ItmLotCost", this.getPriceForLot(lotId, pickedQtyBs));
                }
                _log.info("So Id in Lot -->" + currItm.getAttribute("SoId") + "and SoDate is-->" +
                          currItm.getAttribute("SoDt"));
                //   lotCurrRowKey = instLot.getKey();

                mtlLot.executeQuery();
                this.getSlsPickIssuLotVO1().executeQuery();
            
        }
        if (mtlLot.getRowCount() > lotset.size()) {
            RowSetIterator mtlitr = mtlLot.createRowSetIterator(null);
            //Iterator<String> iterator = lotset.iterator();
            while (mtlitr.hasNext()) {
                System.out.println("Set 1");
                Row next = mtlitr.next();
                String lid = next.getAttribute("LotId").toString();
                System.out.println("ro wid " + lid + " lotset.contains(lid) " + lotset.contains(lid));
                if (!(lotset.contains(lid))) {
                    System.out.println("remove");
                    next.remove();
                }
            }
            mtlitr.closeRowSetIterator();

            // mtlLot.executeQuery();
            // mtlLot.clearCache();
            this.getSlsPickIssuLotVO1().executeQuery();
            this.getSlsPickIssuLotVO1().clearCache();
        }
        _log.info("----------" + lotset);
        if (binRow.length > 0) {
            System.out.println("entring qty in bin logic");
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        _log.info("Condition true create Bin");

                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" SoId ='" + currItm.getAttribute("SoId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        _log.info("" + rowQualifier.getExprStr());
                        _log.info("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    _log.info("bin row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    _log.info("bin row update ----------");
                                    r.setAttribute("PickQtyBs", rr.getAttribute("TransIssueQty"));
                                    Number pickedQty = (Number) rr.getAttribute("TransIssueQty");
                                    String baseUom = getBaseUom(r.getAttribute("ItmId").toString());
                                    Number convFactor =
                                        EbizParamsMMUtils.getItmUomConvFactor(this, r.getAttribute("ItmId").toString(),
                                                                              r.getAttribute("ItmUom").toString(),
                                                                              baseUom);
                                    pickedQty = pickedQty.divide(convFactor);
                                    pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);


                                    r.setAttribute("PickQty", pickedQty);
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                _log.info("row created in  bin ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("PickQtyBs", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                Number pickedQty = (Number) rr.getAttribute("TransIssueQty");
                                String baseUom = getBaseUom(rr.getAttribute("ItmId").toString());
                                binInst.setAttribute("ItmUom", baseUom);

                                Number convFactor =
                                    EbizParamsMMUtils.getItmUomConvFactor(this,
                                                                          binInst.getAttribute("ItmId").toString(),
                                                                          currItm.getAttribute("ItmUom").toString(),
                                                                          baseUom);

                                pickedQty = pickedQty.divide(convFactor);
                                pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);

                                binInst.setAttribute("PickQty", pickedQty);

                                mtlBin.insertRow(binInst);
                                //   binCurrRowKey = binInst.getKey();
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        _log.info("clering cache");

        mmStkSummBinVo.clearCache();
    }

    /**To Select Bin,Lot and SrNo for Item
     * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised).
     *
     */
    public void insertIntoPickItmSr() {
        ViewObjectImpl mtlItm = this.getSlsPickItm1();
        ViewObjectImpl mtlSr = this.getSlsPickIssuSr1();
        ViewObjectImpl mtlBin = this.getSlsPickIssuBin1();
        ViewObjectImpl mtlLot = this.getSlsPickIssuLot1();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummSr1();
        Row currItm = mtlItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = viewSummSr.getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("lenth sr     " + srRow.length);

        ArrayList<String> arrlist = new ArrayList<String>();
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        _log.info("lot id new    " + lotId);
                    }
                }
            }
            _log.info(" array size " + arrlist);
        }

        // Using Set to remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        Number lotT = StaticValue.NUMBER_ZERO;
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotval = StaticValue.NUMBER_ZERO;
            try {
                lotval = new Number(lotQty);
            } catch (Exception e) {
                _log.info(e);
            }
            _log.info(key + ": " + Collections.frequency(arrlist, key) + "------" + lotval);

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" SoId ='" + currItm.getAttribute("SoId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                _log.info("Lot ALready added- now updating values");
                for (Row r : rows) {

                    String baseUom = getBaseUom(r.getAttribute("ItmId").toString());

                    Number convFactor =
                        EbizParamsMMUtils.getItmUomConvFactor(this, r.getAttribute("ItmId").toString(),
                                                              currItm.getAttribute("ItmUom").toString(), baseUom);


                    Number pickedQty = lotval;

                    r.setAttribute("PickQtyBs", lotval);
                    pickedQty = pickedQty.divide(convFactor);
                    pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);


                    r.setAttribute("PickQty", pickedQty);
                    _log.info(" key :" + key + " lotval :" + pickedQty);
                    if (this.getPriceForLot(key, pickedQty) != null) {
                        r.setAttribute("ItmLotCost", this.getPriceForLot(key, lotval));
                    }
                }
            } else {
                _log.info("Creating new Lot--");
                Row insrtLot = mtlLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("SoDt", currItm.getAttribute("SoDt"));

                String baseUom = getBaseUom(insrtLot.getAttribute("ItmId").toString());

                Number convFactor =
                    EbizParamsMMUtils.getItmUomConvFactor(this, insrtLot.getAttribute("ItmId").toString(),
                                                          currItm.getAttribute("ItmUom").toString(), baseUom);


                Number pickedQty = lotval;

                insrtLot.setAttribute("PickQtyBs", lotval);
                pickedQty = pickedQty.divide(convFactor);
                pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                insrtLot.setAttribute("ItmUom", baseUom);
                insrtLot.setAttribute("PickQty", pickedQty);


                _log.info(" key :" + key + " lotval :" + pickedQty);
                if (this.getPriceForLot(key, pickedQty) != null) {
                    insrtLot.setAttribute("ItmLotCost", this.getPriceForLot(key, lotval));
                }
                mtlLot.insertRow(insrtLot);
            }
            mtlLot.executeQuery();

        }

        //for removing the lot row which are not selected over the pop up.
        if (mtlLot.getRowCount() > lotset.size()) {
            RowSetIterator itr = mtlLot.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                String att = next.getAttribute("LotId").toString();
                if (!lotset.contains(att)) {
                    next.remove();
                }
            }
            itr.closeRowSetIterator();
        }

        Iterator i = lotset.iterator();
        _log.info("----------" + lotset);
        Number binQtyT = StaticValue.NUMBER_ZERO;
        // Add Bin in bin Table for using lotSet Value When organisation using Bin pageflow scope check is- binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            int totBinCount = 0;
            Integer binQty = 0;
            Number binval = StaticValue.NUMBER_ZERO;
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                _log.info("-lot in bin-----" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoChkBxTrans") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoChkBxTrans").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                            System.out.println("Bin no is: ---- " + r2.getAttribute("BinId").toString());
                        }
                    }
                }
                totBinCount += arrListbin.size();
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                System.out.println("Bin set is:  ---- " + binSet);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    binQty = Collections.frequency(arrListbin, key);
                    binval = StaticValue.NUMBER_ZERO;
                    _log.info("Quantity in Bin-" + binQty);

                    try {
                        binval = new Number(binQty);
                    } catch (SQLException e) {
                        _log.info(e);
                    }

                    // Check bin already created or not

                    RowQualifier rowQualifier = new RowQualifier(mtlBin);
                    rowQualifier.setWhereClause(" SoId ='" + currItm.getAttribute("SoId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId = '" + key + "'");
                    Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                    if (rows.length > 0) {
                        for (Row bRow : rows) {
                            _log.info("Bin Already Added- Update existing");

                            String baseUom = getBaseUom(bRow.getAttribute("ItmId").toString());
                            Number convFactor =
                                EbizParamsMMUtils.getItmUomConvFactor(this, bRow.getAttribute("ItmId").toString(),
                                                                      currItm.getAttribute("ItmUom").toString(),
                                                                      baseUom);

                            Number pickedQty = binval;

                            bRow.setAttribute("PickQtyBs", binval);
                            pickedQty = pickedQty.divide(convFactor);
                            pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                            bRow.setAttribute("ItmUom", baseUom);
                            bRow.setAttribute("PickQty", pickedQty);

                        }
                    } else {
                        _log.info("Create New Bin--Creating----");
                        Row binInst = mtlBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);

                        String baseUom = getBaseUom(binInst.getAttribute("ItmId").toString());
                        Number convFactor =
                            EbizParamsMMUtils.getItmUomConvFactor(this, binInst.getAttribute("ItmId").toString(),
                                                                  currItm.getAttribute("ItmUom").toString(), baseUom);

                        Number pickedQty = binval;

                        binInst.setAttribute("PickQtyBs", binval);
                        pickedQty = pickedQty.divide(convFactor);
                        pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                        binInst.setAttribute("ItmUom", baseUom);
                        binInst.setAttribute("PickQty", pickedQty);


                        binInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                        mtlBin.insertRow(binInst);
                    }
                }
                Row[] filteredRows = mtlBin.getFilteredRows("LotId", lot);
                if (filteredRows.length > binSet.size()) {
                    for (Row r : filteredRows) {
                        if (r.getAttribute("BinId") != null && !binSet.contains(r.getAttribute("BinId").toString())) {
                            System.out.println("bin id is going to remove :  " + r.getAttribute("BinId").toString());
                            r.remove();
                        }
                    }
                }
                mtlBin.executeQuery();
            }
            System.out.println("Total bin in selected: " + totBinCount);
            System.out.println("Total bin in table: " + srRow.length);

            // 5 july 2014 for removing un alloted extra bin entries.
            if (totBinCount < mtlBin.getRowCount()) {
                RowSetIterator itr = mtlBin.createRowSetIterator(null);
                while (itr.hasNext()) {
                    Row next = itr.next();
                    Object attribute = next.getAttribute("LotId").toString();
                    if (!lotset.contains(attribute)) {
                        next.remove();
                    }
                }
                itr.closeRowSetIterator();
            }

        }

        if (srRow.length > 0) {

            // this code is written on 07july 2014
            mtlSr.executeQuery();
            RowSetIterator itr = mtlSr.createRowSetIterator(null);
            while (itr.hasNext()) {
                itr.next().remove();
            }
            itr.closeRowSetIterator();
            //----------------------------07-july 2014

            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        _log.info("Insert Serial Number--");
                        Row srInst = mtlSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        Number binQty = StaticValue.NUMBER_ZERO;
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));

                        String baseUom = getBaseUom(srInst.getAttribute("ItmId").toString());

                        srInst.setAttribute("ItmUom", baseUom);
                        srInst.setAttribute("PickQty", new Number(1));
                        srInst.setAttribute("PickQtyBs", new Number(1));
                        srInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                        mtlSr.insertRow(srInst);
                        mtlSr.executeQuery();
                    }
                }
            }
        }
        this.getDBTransaction().postChanges();
    }


    /**Method to filter Stock Summary View for Serial Number.
     */
    public void filterPickSrNoTable() {
        ViewObjectImpl issItm = this.getSlsPickItm1();
        Row curRow = issItm.getCurrentRow();
        this.getViewMmStkSummSr1().setNamedWhereClauseParam("ItmIdBind", curRow.getAttribute("ItmId"));

        //Added to set bind values in dual for serial no. search
        this.getDualSrItemSearch().setNamedWhereClauseParam("BindItmId", curRow.getAttribute("ItmId"));
        this.getDualSrItemSearch().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        this.getDualSrItemSearch().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        this.getDualSrItemSearch().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        this.getDualSrItemSearch().setNamedWhereClauseParam("BindWhId", curRow.getAttribute("WhId"));


        /* .setWhereClause("SR_NO NOT IN (SELECT SR_NO from SLS$PICK$ISSU$SR where itm_id = '" +
                                                  curRow.getAttribute("ItmId").toString()+ "')");
       */this.getViewMmStkSummSr1().executeQuery();
    }

    public void filterPickSrNoTableForPckMtrl() {
        ViewObjectImpl issItm = this.getPackagingMtrlVO1();
        Row curRow = issItm.getCurrentRow();
        this.getViewMmStkSummSrVO1().setNamedWhereClauseParam("ItmIdBind", curRow.getAttribute("ItmId"));
        /* setWhereClause("SR_NO NOT IN (SELECT SR_NO from SLS$PICK$ISSU$SR where itm_id = '" +
                                                    curRow.getAttribute("ItmId").toString().toString() + "')");
         */
        this.getViewMmStkSummSrVO1().executeQuery();
    }

    /**Method to call database function.
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }


    /**
     * Method used to call function to get the fy id and Set in SLS$PICK.
     * @param CldId
     * @param OrgId
     * @return FY Id
     */
    public Integer getFYidOrgPick(String CldId, String OrgId) {
        ViewObjectImpl slspick = this.getSlsPick1();
        Integer fyId = 0;
        _log.info("PicDocDate --" + slspick.getCurrentRow().getAttribute("DocDt"));
        if (slspick.getCurrentRow().getAttribute("DocDt") != null) {
            fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                 CldId, OrgId, slspick.getCurrentRow().getAttribute("DocDt")
            }));


            if (fyId > 0 && slspick.getCurrentRow().getAttribute("FyId") == null) {
                _log.info("Set FY id in Pick");
                slspick.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        _log.info("Fyid Pick is--" + fyId);
        return fyId;
    }

    /**
     * Method used to call function to get the fy id and Set in SLS$PACK.
     * @param CldId
     * @param OrgId
     * @return FY Id
     */
    public Integer getFYidOrgPack(String CldId, String OrgId) {
        ViewObjectImpl slspack = this.getSlsPack1();
        Integer fyId = 0;
        //  _log.info("DocDate --" + slspack.getCurrentRow().getAttribute("DocDt"));
        if (slspack.getCurrentRow().getAttribute("DocDt") != null) {
            fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                 CldId, OrgId, slspack.getCurrentRow().getAttribute("DocDt")
            }));


            if (fyId > 0 && slspack.getCurrentRow().getAttribute("FyId") == null) {
                //  _log.info("Set FY id in Pick");
                slspack.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        _log.info("Fyid Pick is--" + fyId);
        return fyId;
    }


    /**Methhod to generate display id.
     * @param flag
     * @return
     */
    public String generateDispDocNo(String flag) {
        Integer docId = 0;
        String ret = null;

        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        _log.info("Flag is--" + flag);

        if (flag.equalsIgnoreCase("pick")) {
            ViewObject vo = this.getSlsPick1();
            Row curRow = vo.getCurrentRow();
            docId = 21506;
            String p_doc_id = curRow.getAttribute("DocId").toString();
            _log.info("Inside Pick--doc_id=" + p_doc_id);
            if (curRow.getAttribute("PickId") == null) {
                ret = callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                         getparamSlocId(), getparamCldId(), getparamOrgId(), docId, p_doc_id,
                                         new Integer(0), "SLS$PICK", getFYidOrgPick(p_cldId, p_org_id)
                }).toString();
                _log.info("Value Set in Current Row---" + ret);
                curRow.setAttribute("PickId", ret);
            } else {
                ret = curRow.getAttribute("PickId").toString();
            }
            executePickViewObjects();
        } else if (flag.equalsIgnoreCase("pack")) {
            ViewObject vo = this.getSlsPack1();

            Row curRow = vo.getCurrentRow();
            docId = 21507;
            String p_doc_id = curRow.getAttribute("DocId").toString();
            // vo.executeQuery();
            System.out.println("doc id === " + p_doc_id);
            if (curRow.getAttribute("PackId") == null) {
                System.out.println("when pack id is null");
                ret = callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                         p_sloc_id, p_cldId, p_org_id, docId, p_doc_id, new Integer(0), "SLS$PACK",
                                         getFYidOrgPack(p_cldId, p_org_id)
                }).toString();
                System.out.println("Value Set in Current Row---" + ret);
                curRow.setAttribute("PackId", ret);
                this.getDBTransaction().commit();
            } else {
                ret = curRow.getAttribute("PackId").toString();
            }
            executePackViewObjects();
        }
        System.out.println("return DisplyId is-->" + ret);
        return ret;
    }

    /**Method to get Binding Container.
     * @return
     */
    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    /**Method to Execute PickList ViewObjects.
     */

    public void executePickViewObjects() {
        //  this.getSlsPick1().executeQuery();
        this.getSlsPickIssuBin1().executeQuery();
        this.getSlsPickIssuLot1().executeQuery();
        this.getSlsPickIssuSr1().executeQuery();
        this.getSlsPickItm1().executeQuery();
    }

    /**Method to Execute Pack ViewObjects.
     */

    public void executePackViewObjects() {
        this.getSlsPack1().executeQuery();
        this.getSlsPackItm1().executeQuery();
    }

    /**Method to populate item from shuttle to pack item.
     * @return
     */
    public Key insertItmInPackItm() {
        Key key = null;
        Key packKey = null;
        _log.info("Inside Shuttle Method--");
        JUCtrlListBinding listBindings = (JUCtrlListBinding) getBindings().get("viewPickPackItm1");

        ViewObjectImpl packItm = this.getSlsPackItm1();
        ViewObjectImpl packvo = this.getSlsPack1();
        Row packCurrRow = packvo.getCurrentRow();
        if (packCurrRow != null) {
            packKey = packCurrRow.getKey();
            //     System.out.println("packk key  " + packKey);
        }
        ViewObject vwPickPackItm = this.getviewPickPackItm1();
        Object str[] = listBindings.getSelectedValues();
        // System.out.println("Total selected component-->" + str.length);
        for (int i = 0; i < str.length; i++) {
            //    System.out.println(str[i]);
            RowQualifier rq = new RowQualifier(packItm);
            rq.setWhereClause("ItmId='" + str[i] + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                              getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and CldId='" +
                              getparamCldId() + "'");
            Row packRows[] = packItm.getFilteredRows(rq);
            //  System.out.println("expession=" + rq.getExprStr());
            //  System.out.println("lenght===" + packRows.length);
            if (packRows.length == 0) {
                Row itmRow = packItm.createRow();
                packItm.insertRow(itmRow);
                Row filterdRows[] = vwPickPackItm.getFilteredRows("ItmId", str[i]);
                //    System.out.println("Filterd Rows -==->" + filterdRows.length);
                if (filterdRows.length > 0) {
                    //      System.out.println("seyt1");
                    itmRow.setAttribute("ItmId", str[i]);
                    itmRow.setAttribute("ItmUom", filterdRows[0].getAttribute("ItmUom"));
                    itmRow.setAttribute("PackQty", filterdRows[0].getAttribute("PickQty"));
                    itmRow.setAttribute("PickQty", filterdRows[0].getAttribute("PickQty"));
                    itmRow.setAttribute("BalQty", new Number(0));

                }
                //  System.out.println(" this.getSlsPack1().getCurrentRow().getAttribute(\"PickId\")" +
                //                      this.getSlsPack1().getCurrentRow().getAttribute("PickId"));
                itmRow.setAttribute("PickId", this.getSlsPack1().getCurrentRow().getAttribute("PickId"));
                //  System.out.println("Itm id inserted is--" + str[i]);

                key = itmRow.getKey();
                //  packItm.executeQuery();
                //  System.out.println("Key is  : " + key);
            }
            vwPickPackItm.executeQuery();
            getFYidOrgPack(getparamCldId(), getparamOrgId());
        }
        //System.out.println("pack item key in amimpl" + key);
        //System.out.println("pack key in amimpl" + packKey);

        // System.out.println("post changes " + this.getDBTransaction().isDirty());
        this.getDBTransaction().postChanges();
        return (Key) key;
    }

    /**Method to return ViewObect of PackItem.
     * @return
     */
    public ViewObject getPackObject() {
        return this.getSlsPack1();
    }

    /**Method to return ViewObect of SearchLov.
     * @return
     */
    public ViewObject getSearchObject() {
        return this.getsearchLov1();
    }

    /**Execute pickPackItm ViewObject.
     */
    public void executeViewPickPackItm() {
        this.getviewPickPackItm1().executeQuery();
    }

    /**Method to delete Item From PickList.
     * @return
     */
    public String deleteItmFrmPickList() {
        String retval = "N";
        ViewObject slsPick = this.getSlsPick1();
        //ViewObject slsPickItmLLot = this.getSlsPickIssuLot1();
        ViewObject slspack = this.getSlsPack1();
        ViewObjectImpl pickItmVo = this.getSlsPickItm1();
        Row pickItmRow = pickItmVo.getCurrentRow();
        String currpickId = (String) pickItmRow.getAttribute("DocId");
        String currSoDockId = (String) pickItmRow.getAttribute("SoId");
        String currWhId = (String) pickItmRow.getAttribute("WhId");
        String currItmId = (String) pickItmRow.getAttribute("ItmId");

        if (slspack.getRowCount() > 0) {
            retval = "P";
        } else {
            final ViewObjectImpl issuLot1 = this.getSlsPickIssuLot1();
            final ViewObjectImpl impl = this.getSlsPickIssuSr1();
            final ViewObjectImpl bin1 = this.getSlsPickIssuBin1();

            Runnable lotRun = new Runnable() {
                public void run() {
                    RowSetIterator lotItr = issuLot1.createRowSetIterator(null);
                    int lotCount = 0;
                    while (lotItr.hasNext()) {
                        lotCount++;
                        lotItr.next().remove();
                    }
                    lotItr.closeRowSetIterator();
                    System.out.println("no of lots deleted are:  " + lotCount + " ---");
                }
            };
            Runnable srRun = new Runnable() {
                public void run() {
                    RowSetIterator itr = impl.createRowSetIterator(null);
                    int srcount = 0;
                    while (itr.hasNext()) {
                        srcount++;
                        itr.next().remove();
                    }
                    itr.closeRowSetIterator();
                    System.out.println("no of Serial deleted are:  " + srcount + " ---");
                }
            };
            Runnable binRun = new Runnable() {
                public void run() {
                    RowSetIterator binItr = bin1.createRowSetIterator(null);
                    int binCount = 0;
                    while (binItr.hasNext()) {
                        binCount++;
                        binItr.next().remove();
                    }
                    binItr.closeRowSetIterator();
                    System.out.println("no of bin deleted are:  " + binCount + " ---");
                }
            };

            Thread t1 = new Thread(lotRun, "Lot");
            Thread t2 = new Thread(binRun, "Bin");
            Thread t3 = new Thread(srRun, "Serial");

            t1.start();
            t2.start();
            t3.start();
            try {
                t1.join();
                t2.join();
                t3.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Came herer.........!!!!!");
            issuLot1.executeQuery();
            impl.executeQuery();
            bin1.executeQuery();

            if (this.getSlsPickItm1().getRowCount() == 1) {
                Row curRow = slsPick.getCurrentRow();
                curRow.setAttribute("CurrIdSp", null);
                curRow.setAttribute("CurrConvFctr", null);
            }
            retval = "N";
        }
        getDBTransaction().postChanges();


        System.out.println("Post Chnages done........................1");
        return retval;
    }

    /**Method to Filter TreeTable Childs (As Per Items).
     * @param itmDesc
     */
    public void searchTreeasPerItm(String itmDesc) {
        ViewObject itmVo = null;
        ViewObject slssoPickVw = this.getviewSlsSoPick1();
        ViewObject slsSoPickItmVw = this.getViewSlsSoPickItm1();
        slssoPickVw.executeQuery();
        slsSoPickItmVw.executeQuery();
        // _log.info("Iteem Name is--" + itmDesc);
        Row filtrRows[] = itmVo.getFilteredRows("ItmDesc", itmDesc);
        if (filtrRows.length > 0) {
            //   _log.info("Total Rows--" + filtrRows.length);
            if (filtrRows[0].getAttribute("ItmId") != null) {
                String itmId = filtrRows[0].getAttribute("ItmId").toString();
                this.setItmIdSearch(itmId);
            }
        }
        // Filter It Using Key Attribute
        Row[] grpRow = slssoPickVw.getAllRowsInRange();
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet) r.getAttribute("ViewSlsSoPickItm");
                _log.info("Rows in ViewLink-->" + childRows.getRowCount());
                //Execute Child Rowset
                childRows.executeQuery();
            }
        }
    }

    /**Method to reset TreeTable****.
     */
    public void resetTreeTableFilter() {
        this.getviewSlsSoPick1().setNamedWhereClauseParam("EoIdBind", -1);
        this.getviewSlsSoPick1().executeQuery();
        this.getViewSlsSoPickItmVO1().setNamedWhereClauseParam("whIdBind", -1);
        this.getViewSlsSoPickItmVO1().executeQuery();
    }

    /**Method to filter shipment table as per Delivery Date.
     * @param dlvDt
     */
    public void filterShipment(Timestamp dlvDt) {
        ViewObject shipmntVo = this.getviewSlsShipmntGen1();
        shipmntVo.setNamedWhereClauseParam("dlvDtBind", dlvDt);
        shipmntVo.executeQuery();
    }

    /**Method to get FYID.


    /**
     * Method used to call function to get the fy id and Set in SLS$SHPMNT.
     * @param CldId
     * @param OrgId
     * @param docDt
     * @return FY Id
     */
    public Integer getFYidOrgShip(String CldId, String OrgId, Timestamp docDt) {
        Integer fyId = 0;
        //  _log.info("Current Shi Row-" + slsShip.getCurrentRow());
        try {
            if (docDt != null) {
                fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, docDt
                }));
            }
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'GET_ORG_FY_ID' ! " + e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_FATAL);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        //  _log.info("Fyid Pick is--" + fyId);
        return fyId;
    }


    /**Method to generate Shipment.
     * @return
     */
    //private String displayId = null;
    //private String docIdFrst = null;
    /*    public String generateShipment() {
        Boolean fnCallSucess = true;

        Integer shpmntRow = 0;
        String retVal = "N";
        String doc_id = null;
        ViewObject viewSlsShip = this.getviewSlsShipmntGen1();
        ViewObject slsShipmnt = this.getSlsShipmnt1();
        Timestamp date = new Timestamp(System.currentTimeMillis());
        Integer Uid = 0;

        Integer fyIdO = null;
        Object docIdO = null;
        Object WhIdO = null;
        Integer eoIdO = -1;

        RowSetIterator rsi = viewSlsShip.createRowSetIterator(null);
        int count = 0;
        while (rsi.hasNext()) {
            Row curRow = rsi.next();
            String pickId = curRow.getAttribute("PickId").toString();
            _log.info("Setting pick Id to : " + pickId);
            String whId = curRow.getAttribute("WhId").toString();
            String prjId = curRow.getAttribute("PrjId").toString();
            System.out.println(prjId + " <<<------ project id");
            Integer eoId = Integer.parseInt(curRow.getAttribute("EoId").toString());
            eoIdO = eoId;
            if (curRow.getAttribute("selectPickListCbTrans") != null &&
                "Y".equalsIgnoreCase(curRow.getAttribute("selectPickListCbTrans").toString())) {

                Integer transporterId = 0;
                String remarks = null;
                Integer mode = null;
                String vchlno = null;
                String grno = null;
                String contn = null;
                Integer engId = 0;

                Row currentRow = this.getsearchShipmnt1().getCurrentRow();

                if (currentRow.getAttribute("TransporterIdTrans") != null) {
                    transporterId = (Integer) currentRow.getAttribute("TransporterIdTrans");
                }
                if (currentRow.getAttribute("RemarksTrans") != null) {
                    remarks = currentRow.getAttribute("RemarksTrans").toString();
                }
                if (currentRow.getAttribute("TransMode") != null) {
                    mode = (Integer) currentRow.getAttribute("TransMode");
                }
                if (currentRow.getAttribute("TransVchNo") != null) {
                    vchlno = currentRow.getAttribute("TransVchNo").toString();
                }
                if (currentRow.getAttribute("TransGrNo") != null) {
                    grno = currentRow.getAttribute("TransGrNo").toString();
                }
                if (currentRow.getAttribute("TransContonrNo") != null) {
                    contn = currentRow.getAttribute("TransContonrNo").toString();
                }
                //Added by mousham  on 23-june-15
                //Adding Engineer on shipment
                if (currentRow.getAttribute("EngineerId") != null) {
                    engId = (Integer) currentRow.getAttribute("EngineerId");
                }


                Row curRowShip = slsShipmnt.createRow();
                slsShipmnt.insertRow(curRowShip);

                if (curRowShip != null) {
                    if (shpmntRow == 0) {
                        doc_id = curRowShip.getAttribute("DocId").toString();
                        docIdFrst = doc_id;
                    }
                    Timestamp docDt = (Timestamp) curRowShip.getAttribute("DocDt");
                    date = docDt;

                    Uid = (Integer) curRowShip.getAttribute("UsrIdCreate");
                    _log.info("Ship DocId i-->" + doc_id + "and date is-" + docDt);

                    ShipDocId = new StringBuffer(doc_id);
                    curRowShip.setAttribute("PrjId", prjId);
                    curRowShip.setAttribute("WhId", whId);
                    curRowShip.setAttribute("PickId", pickId);
                    curRowShip.setAttribute("DocId", docIdFrst);
                    docIdO = docIdFrst;
                    WhIdO = whId;
                    curRowShip.setAttribute("EoId", eoId);
                    curRowShip.setAttribute("CurrIdSp", curRow.getAttribute("CurrIdSp"));
                    curRowShip.setAttribute("CurrConvFctr", curRow.getAttribute("CurrConvFctr"));
                    if (transporterId != 0) {
                        curRowShip.setAttribute("TransporterId", transporterId);
                    }
                    curRowShip.setAttribute("Remarks", remarks);
                    curRowShip.setAttribute("TransMode", mode);
                    curRowShip.setAttribute("TransVhNo", vchlno);
                    curRowShip.setAttribute("TransGrNo", grno);
                    curRowShip.setAttribute("TransContnrNo", contn);
                    curRowShip.setAttribute("EmpEoId", engId); // added on 23-june-15 for enginner id in shipment
                    curRowShip.setAttribute("ShipAdds", curRow.getAttribute("DlvAddsId"));

                    curRowShip.setAttribute("ReqTyp", currentRow.getAttribute("ReqType"));
                    curRowShip.setAttribute("VehicleTyp", currentRow.getAttribute("VehicleTyp"));
                    curRowShip.setAttribute("RouteDocId", currentRow.getAttribute("RouteIdTrans"));
                    curRowShip.setAttribute("ToPay", currentRow.getAttribute("ToPayTrans"));

                    Integer fyId = getFYidOrgShip(getparamCldId(), getparamOrgId(), docDt);

                    _log.info("FYid is-" + fyId);
                    if (fyId > 0) {
                        fyIdO = fyId;
                        curRowShip.setAttribute("FyId", fyId);
                    }
                    _log.info("Function called for Pick Id->" + pickId + "eoid-" + eoId + "whi--" + whId);
                    try {
                        Integer retrunv = 0;
                        Object o = callStoredFunction(Types.INTEGER, "SLS.FN_INS_PICK_TO_SHIP(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      getparamCldId(), getparamSlocId(), getparamHoOrgId(),
                                                      getparamOrgId(), whId, doc_id, docDt, eoId, pickId,
                                                      getparamUsrId(), new Timestamp(System.currentTimeMillis())
                        });
                        retrunv = (o == null ? -1 : (Integer) o);
                        if (retrunv == -1) {
                            fnCallSucess = false;
                            ADFModelUtils.showFormattedFacesMessage("There have been a problem in calling database function FN_INS_PICK_TO_SHIP !",
                                                                    "Please contact ESS !",
                                                                    FacesMessage.SEVERITY_ERROR);
                            break;
                        }
                        _log.info("Value Returned from Shipment function-->" + retrunv);
                    } catch (Exception e) {
                        fnCallSucess = false;
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'FN_INS_PICK_TO_SHIP' ! " +
                                             e.getMessage());
                        message.setSeverity(FacesMessage.SEVERITY_FATAL);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        break;
                    }


                    System.out.println("retv para----" + getparamCldId() + "  " + getparamSlocId() + "  " +
                                       getparamHoOrgId() + "  " + getparamOrgId() + "  " + whId + "  " +
                                       EbizParams.getFyIdOnCurrDtAndCurrOrg(this) + "  " + docDt + "  " + doc_id +
                                       "  " + docDt + "  " + eoId + "  " + getparamUsrId() + "  " +
                                       new Timestamp(System.currentTimeMillis()));
                    count++;
                    try {
                        if (shpmntRow == 0) {
                            String ret = callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                                            getparamSlocId(), getparamCldId(), getparamOrgId(),
                                                            new Integer(21508), doc_id, new Integer(0), "SLS$SHIPMNT",
                                                            fyId
                            }).toString();
                            displayId = ret;

                        }
                        _log.info("Shipment id--" + displayId);
                        curRowShip.setAttribute("ShipmntId", displayId);
                        shpmntRow++;

                        pushDataToLoadingRequest(doc_id, currentRow.getAttribute("ReqType"), transporterId, eoId, fyId,
                                                 currentRow.getAttribute("RouteIdTrans"),
                                                 currentRow.getAttribute("VehicleTyp"), curRow.getAttribute("CurrIdSp"),
                                                 curRow.getAttribute("CurrConvFctr"));

                    } catch (Exception e) {
                        fnCallSucess = false;
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'GEN_DISP_DOC_ID' ! " +
                                             e.getMessage());
                        message.setSeverity(FacesMessage.SEVERITY_FATAL);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        break;
                    }


                }
            }
        }
        if (fnCallSucess == true) {
            String retvalShp = null;
            try {
                retvalShp = callStoredFunction(Types.VARCHAR, "SLS.FN_SLS_TO_MM_SHIP_ITM(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                               getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
                                               WhIdO, EbizParams.getFyIdOnCurrDtAndCurrOrg(this), date, doc_id, date,
                                               eoIdO, getparamUsrId(), new Timestamp(System.currentTimeMillis())
                }).toString();
                _log.info("Value from MMtoShp function--" + retvalShp);

            } catch (Exception e) {
                fnCallSucess = false;
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_SLS_TO_MM_SHIP_ITM' ! " +
                                     e.getMessage());
                message.setSeverity(FacesMessage.SEVERITY_FATAL);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }
            this.getDBTransaction().postChanges();
            try {
                Object retval = callStoredFunction(Types.NUMERIC, "MM.mm_updt_stk_rels(?,?,?,?,?,?,?)", new Object[] {
                                                   getparamCldId(), getparamSlocId(), getparamOrgId(), WhIdO, fyIdO,
                                                   329, docIdO
                });
                _log.info("Return Value from Release-" + retval);
            } catch (Exception e) {
                fnCallSucess = false;
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'mm_updt_stk_rels' ! " +
                                     e.getMessage());
                message.setSeverity(FacesMessage.SEVERITY_FATAL);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }
            try {
                Object ret = callStoredFunction(Types.NUMERIC, "MM.MM_UPDT_STK(?,?,?,?,?,?)", new Object[] {
                                                getparamCldId(), getparamSlocId(), getparamOrgId(), WhIdO, retvalShp,
                                                "I"
                });

                _log.info("Update STK return-" + ret);
            } catch (Exception e) {
                fnCallSucess = false;
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'MM_UPDT_STK' ! " + e.getMessage());
                message.setSeverity(FacesMessage.SEVERITY_FATAL);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }
            this.getDBTransaction().postChanges();
            try {
                String s = callStoredFunction(Types.VARCHAR, "FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] {
                                              doc_id, date, Uid, getparamOrgId(), getparamSlocId(), getparamHoOrgId(),
                                              getparamCldId(), "S"
                }).toString();
                System.out.println("Return from FN_SLS_TO_FIN_COST_OF_GOOD : " + s);

            } catch (Exception e) {
                fnCallSucess = false;
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_COST_OF_GOOD' ! " +
                                     e.getMessage());
                message.setSeverity(FacesMessage.SEVERITY_FATAL);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }

        _log.info("Value of Count--" + count);
        if (count == 0) {
            retVal = "N";
        } else if (fnCallSucess == true) {
            DBTransaction bTransaction = this.getDBTransaction();
            bTransaction.commit();
            retVal = displayId;
        } else if (fnCallSucess == false) {
            retVal = "E";
            this.getDBTransaction().rollback();
        }

        //DBTransaction bTransaction = this.getDBTransaction();
        //bTransaction.commit();


        slsShipmnt.executeQuery();
        viewSlsShip.executeQuery();

        return retVal;
    }  */


    /**
     * Method which will push data from shipment to Loading Request present in transporter module
     */
    private Integer pushDataToLoadingRequest(Object shipId, Object lrType, Object trnpId, Object eoId, Object fyId,
                                             Object routeId, Object vhclType, Object currId, Object convfctr) {
        Integer i = 0;
        StringBuffer buffer = PickAMHelper.checkforProfileValues(this, "USE_TRNPT_MDL");
        if ("Y".equals(buffer.toString())) {
            if (shipId != null && lrType != null && trnpId != null && routeId != null && vhclType != null) {
                try {
                    String s =
                        callStoredFunction(Types.VARCHAR, "fn_trnp_ins_shpmt_to_lr(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           getparamSlocId(), this.getparamCldId(), this.getparamHoOrgId(),
                                           getparamOrgId(), shipId, lrType, trnpId, eoId, fyId, routeId, vhclType,
                                           currId, convfctr, this.getparamUsrId(), StaticValue.getCurrDtWidTimestamp()
                    }).toString();
                    System.out.println("Return from fn_trnp_ins_shpmt_to_lr : " + s);

                } catch (Exception e) {
                    i = -1;
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'fn_trnp_ins_shpmt_to_lr' ! " +
                                         e.getMessage());
                    message.setSeverity(FacesMessage.SEVERITY_FATAL);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                }
            } else {
                FacesMessage message = new FacesMessage("Please select mandatory fields of transporter.");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }
        }
        return i;
    }


    /**Get ViewObject Of Shipment View.
     * @return
     */
    public ViewObject getShipmntSearchView() {
        return this.getviewSlsShipmntGen1();
    }

    /**Method to Reset Shipment View.
     *
     */
    public void resetShipment() {

        ViewObject searchShip = this.getviewSlsShipmntGen1();
        searchShip.setNamedWhereClauseParam("pickDtFrm", null);
        searchShip.setNamedWhereClauseParam("eoIdBind", -1);
        searchShip.setNamedWhereClauseParam("whIdBind", null);
        searchShip.setNamedWhereClauseParam("pickDtTo", null);
        searchShip.setNamedWhereClauseParam("ShipDocIdBind", null);
        searchShip.setNamedWhereClauseParam("PickDocId", null);
        searchShip.setNamedWhereClauseParam("DlvAddsBind", null);
        searchShip.setNamedWhereClauseParam("PickDispIdBind", null);
        searchShip.setNamedWhereClauseParam("CldIdBind", null);
        searchShip.setNamedWhereClauseParam("OrgIdBind", null);
        searchShip.setNamedWhereClauseParam("HoOrgIdBind", null);
        searchShip.setNamedWhereClauseParam("SlocIdBind", null);
        searchShip.executeQuery();

        //        getShipmntSearchView().setNamedWhereClauseParam("pickDtFrm", null);
        //        getShipmntSearchView().setNamedWhereClauseParam("eoIdBind", null);
        //        getShipmntSearchView().setNamedWhereClauseParam("pickDtTo", null);
        //        getShipmntSearchView().setNamedWhereClauseParam("whIdBind", null);
        //        getShipmntSearchView().setNamedWhereClauseParam("ShipDocIdBind", null);
        //        getShipmntSearchView().setNamedWhereClauseParam("PickDocId", null);
        //        getShipmntSearchView().setNamedWhereClauseParam("DlvAddsBind", null);
        //        getShipmntSearchView().setNamedWhereClauseParam("PickDispIdBind", null);
        //        getShipmntSearchView().executeQuery();
        this.getsearchShipmnt1().executeQuery();

        //showSoShip
        //showSoItnShip
        //getviewSlsShipmntGen1
    }

    /**Method to Check that all Items are Issued with full quantity or Not, if Not then it will show Validation Message.
     * @return
     */
    public ArrayList checkItemIssueValidation() {
        System.out.println("in amimpl save set 12");
        ArrayList itemVal = new ArrayList();
        ViewObject slsPickItm = this.getSlsPickItm1();
        this.getSlsPickIssuLot3().executeQuery();
        ViewObjectImpl slsPickLot = this.getSlsPickIssuLot3();
        slsPickLot.setRangeSize(-1);
        for (Row r : slsPickLot.getAllRowsInRange()) {
            System.out.println("Lot Key Is : " + r.getKey());
        }
        // slsPickLot.executeQuery();
        System.out.println("in amimpl save set 13");
        RowSetIterator rsiII = slsPickItm.createRowSetIterator(null);
        System.out.println("in amimpl save set 14");
        while (rsiII.hasNext()) {
            Row curItmRow = rsiII.next();
            if (curItmRow != null) {
                Number pickedQtyItm = (Number) curItmRow.getAttribute("ItmQtyBs");
                System.out.println("Pick Quantity in starting" + pickedQtyItm);
                Number lotTotQty = StaticValue.NUMBER_ZERO;
                RowQualifier rq = new RowQualifier(slsPickLot);
                // Changes made for tolerance
                //                rq.setWhereClause("CldId='" + curItmRow.getAttribute("CldId") + "' and  SlocId=" +
                //                                  curItmRow.getAttribute("SlocId") + " and OrgId='" + curItmRow.getAttribute("OrgId") +
                //                                  "' and DocId='" + curItmRow.getAttribute("DocId") + "' and SoId='" +
                //                                  curItmRow.getAttribute("SoId") + "' and ItmId='" + curItmRow.getAttribute("ItmId") +
                //                                  "' and DlvDt = '" + curItmRow.getAttribute("DlvDt") + "'");
                rq.setWhereClause("SoId='" + curItmRow.getAttribute("SoId") + "' and ItmId='" +
                                  curItmRow.getAttribute("ItmId") + "' and DlvDt = '" +
                                  curItmRow.getAttribute("DlvDt") + "'");
                System.out.println("RowQuali Expression-- " + rq.getExprStr());
                Row fltrdRows[] = slsPickLot.getFilteredRows(rq);
                System.out.println("Total Row in Lot for This Item-- " + fltrdRows.length + " Item is- " +
                                   curItmRow.getAttribute("ItmId"));
                if (fltrdRows.length > 0) {
                    for (Row r : fltrdRows) {
                        System.out.println("Picked Quantity : " + r.getAttribute("PickQtyBs")); //
                        lotTotQty = lotTotQty.add((Number) r.getAttribute("PickQtyBs"));
                    }
                }
                System.out.println("Picked quantity " + pickedQtyItm + " Total Issued Quantity- " + lotTotQty);
                if (pickedQtyItm.compareTo(lotTotQty) == 0) {

                } else {
                    itemVal.add(EbizParamsAPPUtils.getItemDescFrmItmId(this,
                                                                       curItmRow.getAttribute("ItmId").toString()));
                }
            }
        }
        _log.info("Un-Issued Items--" + itemVal);
        return itemVal;
    }

    /**To Filter TreeTable Customer Wise.
     * @param eo_nm
     */
    public void filterTreeCustomerWise(String eo_nm) {
        Integer eo_id = null;
        ViewObject soPickVw = this.getviewSlsSoPick1();
        _log.info("EoId is AM-" + eo_nm + " And RowCount before-" + soPickVw.getRowCount());

        Row fltrdRow[] = this.getLovEoIdVO1().getFilteredRows("EoNm", eo_nm);
        if (fltrdRow.length > 0) {
            eo_id = Integer.parseInt(fltrdRow[0].getAttribute("EoId").toString());
        }


        soPickVw.setNamedWhereClauseParam("eoIdBind", eo_id);
        soPickVw.executeQuery();
        _log.info("After Row count-" + soPickVw.getRowCount());
    }


    /**Returns ViewObject of Main Search View.
     * @return
     */
    public ViewObject getmainSearchView() {
        return this.getsearchPickPackShip1();
    }


    /**Method to sEARCH Main Search View.
     *
     */
    public void searchMainSearch() {
        Row currentRow = this.getsearchPickListDual1().getCurrentRow();
        if (currentRow != null) {
            ViewObject searchShip = this.getsearchPickPackShip1();
            searchShip.setNamedWhereClauseParam("cldIdBind", getparamCldId());
            searchShip.setNamedWhereClauseParam("orgIdBind", getparamOrgId());
            searchShip.setNamedWhereClauseParam("hoOrgIdBind", getparamHoOrgId());
            searchShip.setNamedWhereClauseParam("slocIdBind", getparamSlocId());
            searchShip.setNamedWhereClauseParam("eoIdBind", currentRow.getAttribute("EoIdSrch"));
            searchShip.setNamedWhereClauseParam("soDocIdBind", currentRow.getAttribute("SoDocIdSrch"));
            searchShip.setNamedWhereClauseParam("pickIdBind", currentRow.getAttribute("PickDocIdSrch"));
            searchShip.setNamedWhereClauseParam("shpmntIdBind", currentRow.getAttribute("ShpmntDocIdSrch"));
            searchShip.setNamedWhereClauseParam("dlvModeBind", currentRow.getAttribute("DlvModeSrch"));
            searchShip.setNamedWhereClauseParam("pickDateBind", currentRow.getAttribute("PickDtSrch"));

            searchShip.setNamedWhereClauseParam("SoIdDispBind", currentRow.getAttribute("SoDispIdTrans"));
            searchShip.setNamedWhereClauseParam("PickDispIdBind", currentRow.getAttribute("PickDispIdTrans"));
            searchShip.setNamedWhereClauseParam("ShipmntIdDispBind", currentRow.getAttribute("ShipDispIdTrans"));
            searchShip.setNamedWhereClauseParam("BindExtDocNo", currentRow.getAttribute("ExtDocNo"));
            searchShip.setNamedWhereClauseParam("BindDlvAdds", currentRow.getAttribute("DeliveryAddsId"));

            searchShip.executeQuery();
        }
    }

    /**Method to Reset Main Search View.
     *
     */
    public void resetMainSearch() {
        ViewObject searchShip = this.getsearchPickPackShip1();
        searchShip.setNamedWhereClauseParam("eoIdBind", -1);
        searchShip.setNamedWhereClauseParam("soDocIdBind", null);
        searchShip.setNamedWhereClauseParam("pickIdBind", null);
        searchShip.setNamedWhereClauseParam("shpmntIdBind", null);
        searchShip.setNamedWhereClauseParam("dlvModeBind", null);
        searchShip.setNamedWhereClauseParam("pickDateBind", null);
        searchShip.setNamedWhereClauseParam("BindExtDocNo", null);
        searchShip.setNamedWhereClauseParam("BindDlvAdds", null);
        searchShip.executeQuery();
        this.getsearchPickListDual1().executeQuery();
    }

    /**Method to Filter Picklist page as per selected picklist in search page.
     *
     */
    public void goToPickListAction() {
        ViewObject slsPickVo = this.getSlsPick1();
        ViewObject pickPackShpSrchVo = this.getsearchPickPackShip1();
        Row srchCurRow = pickPackShpSrchVo.getCurrentRow();
        _log.info("Current Row is-" + srchCurRow);
        if (srchCurRow != null) {
            _log.info("PickId  is-" + srchCurRow.getAttribute("PickdocId"));
            if (srchCurRow.getAttribute("PickdocId") != null) {
                String pickId = srchCurRow.getAttribute("PickdocId").toString();
                slsPickVo.setNamedWhereClauseParam("docIdBind", pickId);
                slsPickVo.executeQuery();
            }
        }
        viewSlsSoPickVOImpl slssoPickVw = this.getviewSlsSoPick1();
        _log.info("So Rows Before filter : " + slssoPickVw.getRowCount());
        slssoPickVw.setNamedWhereClauseParam("EoIdBind", -1);
        slssoPickVw.executeQuery();
        getViewSlsSoPickItmVO1().setNamedWhereClauseParam("whIdBind", -1);
        this.getViewSlsSoPickItmVO1().executeQuery();


    }

    /**Method to populate key value in Pack Header.
     */
    public void populateValinPack() {
        ViewObject slsPick = this.getSlsPick1();
        ViewObject slspack = this.getSlsPack1();
        Row packRow = slspack.getCurrentRow();
        Row pickRow = slsPick.getCurrentRow();
        if (packRow != null) {
            packRow.setAttribute("SlocId", pickRow.getAttribute("SlocId"));
            packRow.setAttribute("OrgId", pickRow.getAttribute("OrgId"));
            packRow.setAttribute("HoOrgId", pickRow.getAttribute("HoOrgId"));
            packRow.setAttribute("CldId", pickRow.getAttribute("CldId"));
            packRow.setAttribute("PickId", pickRow.getAttribute("DocId"));
            _log.info("Pick Id from parent--" + pickRow.getAttribute("DocId"));
        }

    }

    /**Vallidation to check whether same customer is selected to generate Shipment from picklist or not*.
     * @return
     */


    public String validateGenShipment() {
        int count = 0;
        ViewObject shpmntGen = this.getviewSlsShipmntGen1();
        Row chkdRow[] = shpmntGen.getFilteredRows("selectPickListCbTrans", "Y");
        _log.info("Selected Rows are--" + chkdRow.length);
        if (chkdRow.length > 0) {
            Integer frstEoId = Integer.parseInt(chkdRow[0].getAttribute("EoId").toString());
            for (Row r : chkdRow) {
                if (r.getAttribute("EoId") != null) {
                    Integer nextEoId = Integer.parseInt(r.getAttribute("EoId").toString());
                    _log.info("First Eo -" + frstEoId + "And Next Eo-" + nextEoId);
                    if (frstEoId.compareTo(nextEoId) != 0) {
                        count++;
                    }
                }
            }
            _log.info("Count is-" + count);
            if (count > 0) {
                StringBuilder msg =
                    /*  new StringBuilder("<html><body><b><p style='color:red'>Can not select different customer to generate Shipment</p></b>");
                msg.append("<ul><b><li>Select Same customer and try again</li></b></ul></body></html>"); */
                    new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.968") +
                                      "</p></b>");
                msg.append("<ul><b><li>" + ADFModelUtils.resolvRsrc("MSG.969") + "</li></b></ul></body></html>");


                FacesMessage errMsg = new FacesMessage(msg.toString());
                errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, errMsg);
                return "N";
            } else {
                return "Y";
            }
        } else {
            /*  FacesMessage errMsg = new FacesMessage("Please Select atleast one Picklist to generate Shipment"); */
            FacesMessage errMsg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.932"));

            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
            return "N";
        }


    }

    /**Get Basic UOM of Item**.
     * @param itmId
     * @return
     */

    public String getBaseUom(String itmId) {
        String baseUom = EbizParamsMMUtils.getBaseUomOfPassedItm(this, itmId);
        return baseUom;
    }

    public String getBaseUomforPckMtrl(String itmId) {
        String baseUom = EbizParamsMMUtils.getBaseUomOfPassedItm(this, itmId);
        return baseUom;

    }

    /**Method to Auto Issue item from Stock in case of LIFO/FIFO.
     */

    public void issueAutoItem() {
        // All the changes to this method needs to be copied to method autoIssueItmOnAdd(),
        String uomBase = null;
        ViewObject pickItm = this.getSlsPickItm1();
        Row itmRow = pickItm.getCurrentRow();
        Row pickRow = getSlsPick1().getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

        _log.info("wh-" + itmRow.getAttribute("WhId") + "itm-" + itmRow.getAttribute("ItmId") + "pickQty-" +
                  itmRow.getAttribute("PickQty") + "PickOrd-" + itmRow.getAttribute("TransItmPickOrder") + "SrNo-" +
                  itmRow.getAttribute("SrNo") + "DocID-" + itmRow.getAttribute("DocId") + "Uom-" +
                  itmRow.getAttribute("ItmUom"));

        //  if (getBaseUom((String) itmRow.getAttribute("ItmId")) != null) {
        //  uomBase = getBaseUom(itmRow.getAttribute("ItmId").toString());

        //  } else {
        //     uomBase = itmRow.getAttribute("ItmUom").toString();
        //  }
        uomBase = EbizParamsMMUtils.getBaseUomOfPassedItm(this, itmRow.getAttribute("ItmId").toString());
        Number convFactor =
            EbizParamsMMUtils.getItmUomConvFactor(this, itmRow.getAttribute("ItmId").toString(),
                                                  itmRow.getAttribute("ItmUom").toString(), uomBase);


        Object ret =
            ADFModelUtils.callFunction(this,
                                       new StringBuilder("SLS.FN_SLS_PICK_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                       getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
                                       itmRow.getAttribute("WhId"), itmRow.getAttribute("ItmId"),
                                       itmRow.getAttribute("PickQty"), itmRow.getAttribute("TransItmPickOrder"),
                                       itmRow.getAttribute("TransItmSerializedFlg"), binChkFlg,
                                       itmRow.getAttribute("DocId"), itmRow.getAttribute("SoId"),
                                       itmRow.getAttribute("SoDt"), uomBase, itmRow.getAttribute("ItmUom"), convFactor,
                                       itmRow.getAttribute("DlvDt"), pickRow.getAttribute("FyId")
        }, Types.NUMERIC);
        _log.info("Retval AutoIssue-" + ret);
        getDBTransaction().postChanges();
        this.getSlsPickIssuLot1().executeQuery();
        this.getSlsPickIssuBin1().executeQuery();
        this.getSlsPickIssuSr1().executeQuery();
    }

    /**Method to get current docId from SLS$PICK.
     * @return
     */
    public String getCurrentdocId() {
        Row curRow = this.getSlsPick1().getCurrentRow();
        if (curRow.getAttribute("DocId") != null) {
            String docId = curRow.getAttribute("DocId").toString();
            return docId;
        } else {
            return "N";
        }
    }

    /**
     * @param pickId
     */
    public void setOncurRow(String pickId) {
        ViewObject slsPickVo = this.getSlsPick1();
        slsPickVo.setNamedWhereClauseParam("docIdBind", pickId);
        slsPickVo.executeQuery();
    }

    /**Method to filter tree as per Warehouse selected.
     * @param whId
     */
    public void filterTreeWarehouse(String whId) {
        ViewObject slssoPickVw = this.getviewSlsSoPick1();
        ViewObject slsSoPickItmVw = this.getViewSlsSoPickItm1();
        slssoPickVw.executeQuery();
        slsSoPickItmVw.executeQuery();
        setWareHouId(whId);
        // Filter It Using Key Attribute
        Row[] grpRow = slssoPickVw.getAllRowsInRange();
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet) r.getAttribute("ViewSlsSoPickItm");
                //Execute Child Rowset
                childRows.executeQuery();
            }
        }
    }

    /**Method to set value of TaskFlow Parameter(Pack Visible or Not) as Per Org Sales Profile.
     * @return
     */
    public String setPackVsblParam() {
        String usePack = "N";
        this.getviewSlsShipmntGen1().executeQuery();
        this.getLovPickIdVO1().executeQuery();
        ViewObjectImpl orgPrf = this.getorgSlsPrfVO1();
        orgPrf.executeQuery();
        RowQualifier rq = new RowQualifier(orgPrf);
        rq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                          getparamOrgId() + "'");
        _log.info("Rq is-" + rq.getExprStr());
        Row orgRows[] = orgPrf.getFilteredRows(rq);
        _log.info("Total Rows for Org-" + orgRows.length);
        if (orgRows.length > 0) {
            if (orgRows[0].getAttribute("UsePackEntry") != null) {
                usePack = orgRows[0].getAttribute("UsePackEntry").toString();
                _log.info("Value of Use Pack is--" + usePack);
                return usePack;
            } else {
                return "N";
            }
        } else {
            return "N";
        }

    }

    /**Method to update PickList Staus in case of Cancellation.
     * @param canc_Flag
     */
    public void updatePickStausCancel(String canc_Flag) {
        ViewObject slsSo = this.getSlsPick1();
        Row soRow = slsSo.getCurrentRow();
        if (canc_Flag.equalsIgnoreCase("true")) {
            _log.info("Order is Cancelled--");
            soRow.setAttribute("PickStat", 220);
        }
    }

    /**Method to update Shipment Staus in case of Cancellation.
     * @param canc_Flag
     * @param eoId
     * @param usrIdCreateDt
     * @param shipId
     * @param ShipDt
     * @param whId
     * @param docId
     */
    public void updateShipmentStausCancel(String canc_Flag, Integer eoId, Date usrIdCreateDt, String shipId,
                                          Date ShipDt, String whId, String docId) {
        System.out.println("Came in cancel shipment");
        ViewObject slsSo = this.getSlsShipmnt1();
        ViewObject slsPick = this.getSlsPick1();
        Row soRow = slsSo.getCurrentRow();
        if (canc_Flag.equalsIgnoreCase("true")) {
            //getshipOnCancel(eoId, usrIdCreateDt, docId, ShipDt, whId);
            String statVal =
                getshipAftrCancel((Integer) slsSo.getCurrentRow().getAttribute("EoId"), usrIdCreateDt, docId, ShipDt,
                                  whId);
            _log.info("statVal--" + statVal);
            if (statVal.equalsIgnoreCase("Y")) {
                _log.info("Order is Cancelled--");
                soRow.setAttribute("ShipmntStat", 220);
                if (slsSo.getCurrentRow().getAttribute("PickId") != null) {
                    String pickId = slsSo.getCurrentRow().getAttribute("PickId").toString();
                    Row fltrdRow[] = slsPick.getFilteredRows("DocId", pickId);
                    if (fltrdRow.length > 0) {
                        fltrdRow[0].setAttribute("PickStat", 217);
                        _log.info("Pick Status Updated-");
                    }
                }
            }
        }
    }

    public void refreshAllVoOncancellation() {
        //        getSlsShipmntHdrVO1().setNamedWhereClauseParam("SlocIdBind", -1);
        //        getSlsShipmntHdrVO1().executeQuery();
        //        getSlsShipmntHdrVO1().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getSlsShipmntHdrVO1().executeQuery();
        //this.getSlsPick1().executeQuery();
        this.getviewSlsShipmntGen1().executeQuery();
        this.getsearchPickPackShip1().executeQuery();
    }

    /**Method to reserve stock when PickList is saved.
     */
    public Boolean reserveStock() {
        Boolean b = true;
        ViewObject slsPick = this.getSlsPick1();
        Row pickRow = slsPick.getCurrentRow();

        try {
            Object ret = callStoredFunction(Types.INTEGER, "MM.MM_UPDT_STK_RESV(?,?,?,?,?,?,?)", new Object[] {
                                            getparamCldId(), getparamSlocId(), getparamOrgId(),
                                            pickRow.getAttribute("WhId"),
                                            EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this), 329,
                                            pickRow.getAttribute("DocId")
            });
            Integer i = (ret == null ? -1 : (Integer) ret);
            if (i.equals(1)) {
                b = true;
            } else {
                b = false;
                ADFModelUtils.showFormattedFacesMessage("Stock is unavailable for reservation ! ",
                                                        "Stock for few of the Items selected in Pick is not available for reservation. Please make sure that, the stock is available for Items present in Current Pick.",
                                                        FacesMessage.SEVERITY_ERROR);
            }
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'MM_UPDT_STK_RESV' ! " + e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            b = false;
            e.printStackTrace();
        }
        return b;
    }

    /**Method to check Whether shipment is created or not.
     * @return
     */
    public String shipmntCrtdOrNt() {
        String retVal = "N";
        ViewObject slsPick = this.getSlsPick1();
        /* ViewObjectImpl slsShpmnt = this.getSlsShipmntVO2();
        RowQualifier rq = new RowQualifier(slsShpmnt);
        Row pickRow = slsPick.getCurrentRow();
        if (pickRow != null && pickRow.getAttribute("DocId") != null) {
            System.out.println("pick id at the time of edit " + pickRow.getAttribute("DocId"));
            rq.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and PickId='" +
                              pickRow.getAttribute("DocId") + "'");
            System.out.println("clause  " + rq.getExprStr());
            Row shpmntRow[] = slsShpmnt.getFilteredRows(rq);
            System.out.println("shpmntRow.length " + shpmntRow.length);
            if (shpmntRow.length > 0) {
                retVal = "Y";
            } else {
                retVal = "N";
            }
        } */
        Row pickRow = slsPick.getCurrentRow();
        if (pickRow != null && pickRow.getAttribute("DocId") != null && pickRow.getAttribute("PickStat") != null) {
            Object attribute = pickRow.getAttribute("PickStat");
            Integer stat = Integer.parseInt(attribute.toString());
            if (stat == 217) {
                retVal = "N";
            } else {
                retVal = "Y";
            }
        }
        return retVal;
    }

    public void postChange() {
        this.getDBTransaction().postChanges();
        filterSoPickItems();
    }

    /**
     * Container's getter for ViewMmStkSummBin1.
     * @return ViewMmStkSummBin1
     */
    public ViewMmStkSummBinVOImpl getViewMmStkSummBin1() {
        return (ViewMmStkSummBinVOImpl) findViewObject("ViewMmStkSummBin1");
    }

    /**
     * Container's getter for slsPickItmTOviewMmStkSummBinVL1.
     * @return slsPickItmTOviewMmStkSummBinVL1
     */
    public ViewLinkImpl getslsPickItmTOviewMmStkSummBinVL1() {
        return (ViewLinkImpl) findViewLink("slsPickItmTOviewMmStkSummBinVL1");
    }

    /**
     * Container's getter for ViewMmStkSummLot1.
     * @return ViewMmStkSummLot1
     */
    public ViewMmStkSummLotVOImpl getViewMmStkSummLot1() {
        return (ViewMmStkSummLotVOImpl) findViewObject("ViewMmStkSummLot1");
    }

    /**
     * Container's getter for slsPickItmTOviewMmStkSummLotVL1.
     * @return slsPickItmTOviewMmStkSummLotVL1
     */
    public ViewLinkImpl getslsPickItmTOviewMmStkSummLotVL1() {
        return (ViewLinkImpl) findViewLink("slsPickItmTOviewMmStkSummLotVL1");
    }

    /**
     * Container's getter for ViewMmStkSummSr1.
     * @return ViewMmStkSummSr1
     */
    public ViewMmStkSummSrVOImpl getViewMmStkSummSr1() {
        return (ViewMmStkSummSrVOImpl) findViewObject("ViewMmStkSummSr1");
    }

    /**
     * Container's getter for slsPickItmTOviewMmStkSummSrVL1.
     * @return slsPickItmTOviewMmStkSummSrVL1
     */
    public ViewLinkImpl getslsPickItmTOviewMmStkSummSrVL1() {
        return (ViewLinkImpl) findViewLink("slsPickItmTOviewMmStkSummSrVL1");
    }

    /**
     * Container's getter for SlsPickIssuBin1.
     * @return SlsPickIssuBin1
     */
    public ViewObjectImpl getSlsPickIssuBin1() {
        return (ViewObjectImpl) findViewObject("SlsPickIssuBin1");
    }

    /**
     * Container's getter for SlsPickItmTOSlsPickIssueBinVL1.
     * @return SlsPickItmTOSlsPickIssueBinVL1
     */
    public ViewLinkImpl getSlsPickItmTOSlsPickIssueBinVL1() {
        return (ViewLinkImpl) findViewLink("SlsPickItmTOSlsPickIssueBinVL1");
    }

    /**
     * Container's getter for SlsPickIssuLot1.
     * @return SlsPickIssuLot1
     */
    public SlsPickIssuLotVOImpl getSlsPickIssuLot1() {
        return (SlsPickIssuLotVOImpl) findViewObject("SlsPickIssuLot1");
    }

    /**
     * Container's getter for SlsPickItmTOSlsPickIssueLotVL1.
     * @return SlsPickItmTOSlsPickIssueLotVL1
     */
    public ViewLinkImpl getSlsPickItmTOSlsPickIssueLotVL1() {
        return (ViewLinkImpl) findViewLink("SlsPickItmTOSlsPickIssueLotVL1");
    }

    /**
     * Container's getter for SlsPickIssuSr1.
     * @return SlsPickIssuSr1
     */
    public SlsPickIssuSrVOImpl getSlsPickIssuSr1() {
        return (SlsPickIssuSrVOImpl) findViewObject("SlsPickIssuSr1");
    }

    /**
     * Container's getter for SlsPickItmTOSlsPickIssueSrVL1.
     * @return SlsPickItmTOSlsPickIssueSrVL1
     */
    public ViewLinkImpl getSlsPickItmTOSlsPickIssueSrVL1() {
        return (ViewLinkImpl) findViewLink("SlsPickItmTOSlsPickIssueSrVL1");
    }

    /**
     * @param pickDateBean
     */
    public void setPickDateBean(Timestamp pickDateBean) {
        this.pickDateBean = pickDateBean;
    }

    /**
     * @return
     */
    public Timestamp getPickDateBean() {
        return pickDateBean;
    }

    /**
     * Container's getter for SlsPack1.
     * @return SlsPack1
     */
    public ViewObjectImpl getSlsPack1() {
        return (ViewObjectImpl) findViewObject("SlsPack1");
    }

    /**
     * Container's getter for SlsPickTOSlsPackVL1.
     * @return SlsPickTOSlsPackVL1
     */
    public ViewLinkImpl getSlsPickTOSlsPackVL1() {
        return (ViewLinkImpl) findViewLink("SlsPickTOSlsPackVL1");
    }

    /**
     * Container's getter for SlsPackItm1.
     * @return SlsPackItm1
     */
    public ViewObjectImpl getSlsPackItm1() {
        return (ViewObjectImpl) findViewObject("SlsPackItm1");
    }

    /**
     * Container's getter for SlsPackTOSlsPackItmVL1.
     * @return SlsPackTOSlsPackItmVL1
     */
    public ViewLinkImpl getSlsPackTOSlsPackItmVL1() {
        return (ViewLinkImpl) findViewLink("SlsPackTOSlsPackItmVL1");
    }

    /**
     * Container's getter for viewPickPackItm1.
     * @return viewPickPackItm1
     */
    public ViewObjectImpl getviewPickPackItm1() {
        return (ViewObjectImpl) findViewObject("viewPickPackItm1");
    }

    /**
     * Container's getter for SlsPackTOviewPickPackItmVL1.
     * @return SlsPackTOviewPickPackItmVL1
     */
    public ViewLinkImpl getSlsPackTOviewPickPackItmVL1() {
        return (ViewLinkImpl) findViewLink("SlsPackTOviewPickPackItmVL1");
    }

    /**
     * Container's getter for searchLov1.
     * @return searchLov1
     */
    public ViewObjectImpl getsearchLov1() {
        return (ViewObjectImpl) findViewObject("searchLov1");
    }


    /**
     * @param ItmIdSearch
     */
    public void setItmIdSearch(String ItmIdSearch) {
        this.ItmIdSearch = ItmIdSearch;
    }

    /**
     * @return
     */
    public String getItmIdSearch() {
        return ItmIdSearch;
    }

    /**
     * Container's getter for viewSlsShipmntGen1.
     * @return viewSlsShipmntGen1
     */
    public ViewObjectImpl getviewSlsShipmntGen1() {
        return (ViewObjectImpl) findViewObject("viewSlsShipmntGen1");
    }

    /**
     * Container's getter for searchShipmnt1.
     * @return searchShipmnt1
     */
    public ViewObjectImpl getsearchShipmnt1() {
        return (ViewObjectImpl) findViewObject("searchShipmnt1");
    }

    /**
     * Container's getter for showSoShip1.
     * @return showSoShip1
     */
    public ViewObjectImpl getshowSoShip1() {
        return (ViewObjectImpl) findViewObject("showSoShip1");
    }

    /**
     * Container's getter for viewSlsShpmntToShowSoShipVL1.
     * @return viewSlsShpmntToShowSoShipVL1
     */
    public ViewLinkImpl getviewSlsShpmntToShowSoShipVL1() {
        return (ViewLinkImpl) findViewLink("viewSlsShpmntToShowSoShipVL1");
    }

    /**
     * Container's getter for ShowSoItmShip1.
     * @return ShowSoItmShip1
     */
    public ViewObjectImpl getShowSoItmShip1() {
        return (ViewObjectImpl) findViewObject("ShowSoItmShip1");
    }

    /**
     * Container's getter for ShowSoShipTOShowSoItmShipVL1.
     * @return ShowSoShipTOShowSoItmShipVL1
     */
    public ViewLinkImpl getShowSoShipTOShowSoItmShipVL1() {
        return (ViewLinkImpl) findViewLink("ShowSoShipTOShowSoItmShipVL1");
    }


    /**
     * Container's getter for SlsPickIssuLot2.
     * @return SlsPickIssuLot2
     */
    public SlsPickIssuLotVOImpl getSlsPickIssuLot2() {
        return (SlsPickIssuLotVOImpl) findViewObject("SlsPickIssuLot2");
    }

    /**
     * Container's getter for searchPickPackShip1.
     * @return searchPickPackShip1
     */
    public ViewObjectImpl getsearchPickPackShip1() {
        return (ViewObjectImpl) findViewObject("searchPickPackShip1");
    }

    /**
     * Container's getter for searchPickListDual1.
     * @return searchPickListDual1
     */
    public ViewObjectImpl getsearchPickListDual1() {
        return (ViewObjectImpl) findViewObject("searchPickListDual1");
    }

    /**
     * @param wareHouId
     */
    public void setWareHouId(String wareHouId) {
        this.wareHouId = wareHouId;
    }

    /**
     * @return
     */
    public String getWareHouId() {
        return wareHouId;
    }

    /**
     * Container's getter for LovEoIdVO1.
     * @return LovEoIdVO1
     */
    public LovEoIdVOImpl getLovEoIdVO1() {
        return (LovEoIdVOImpl) findViewObject("LovEoIdVO1");
    }

    /**
     * Container's getter for orgSlsPrfVO1.
     * @return orgSlsPrfVO1
     */
    public ViewObjectImpl getorgSlsPrfVO1() {
        return (ViewObjectImpl) findViewObject("orgSlsPrfVO1");
    }

    /**
     * Container's getter for SlsShipmntVO1.
     * @return SlsShipmntVO1
     */
    public ViewObjectImpl getSlsShipmntVO1() {
        return (ViewObjectImpl) findViewObject("SlsShipmntVO1");
    }

    /**
     * Container's getter for LovPickIdVO1.
     * @return LovPickIdVO1
     */
    public LovPickIdVOImpl getLovPickIdVO1() {
        return (LovPickIdVOImpl) findViewObject("LovPickIdVO1");
    }

    /**
     * Method used to call function to get the fy id and Set in SLS$SHPMNT.
     * @param CldId
     * @param OrgId
     * @param docDt
     * @return FY Id
     */
    public Integer getFYidOrgShip(String CldId, String OrgId, Date docDt) {
        return EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
    }


    /**
     * @param DocId
     * @param DocDt
     * @param uidPost
     * @param p_org_id
     * @param p_sloc_id
     * @param p_hoOrgId
     * @param p_cldId
     * @return
     */
    public String getship(String DocId, Date DocDt, Integer uidPost, String p_org_id, Integer p_sloc_id,
                          String p_hoOrgId, String p_cldId) {
        _log.info("getship ()");
        _log.info("DocId  : " + DocId);
        _log.info("DocDt  :" + DocDt);
        _log.info("uidPost  :" + uidPost);
        _log.info("p_org_id  :" + p_org_id);
        _log.info("p_sloc_id  :" + p_sloc_id);
        _log.info("p_hoOrgId  :" + p_hoOrgId);
        _log.info("p_cldId  :" + p_cldId);
        String s = null;
        try {

            s = callStoredFunction(Types.VARCHAR, "FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] {
                                   DocId, DocDt, uidPost, p_org_id, p_sloc_id, p_hoOrgId, p_cldId, "S"
            }).toString();
            System.out.println("Return from FN_SLS_TO_FIN_COST_OF_GOOD : " + s);
            _log.info(" after try result getShip()" + s);
            return s;

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_COST_OF_GOOD' ! " +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
            _log.info(" after catch result getShip()" + s);
            return s;
        }
    }


    /*  //sls_to_mm_updt_ship_can_stk
    public Number getshipOnCancel(Integer eoId,Date usrIdCreateDt,String shipId,Date ShipDt,String whId){
      String p_cld_id=getparamCldId() ;
      Integer p_sloc_id=getparamSlocId();
      String p_ho_org_id=getparamHoOrgId() ;
      String p_org_id =getparamOrgId();
      String p_wh_id =whId;
      Date p_doc_dt=ShipDt;
      Integer p_fy_id=getFYidOrgShip(getparamCldId(), getparamOrgId(), ShipDt);
      String p_doc_id_src =shipId ;
      Date p_doc_dt_src =ShipDt ;
      Integer p_eo_id =eoId;
      Integer p_usr_create=getparamUsrId() ;
      Date p_usr_create_dt =usrIdCreateDt ;
        _log.info("getship ()");
        _log.info("p_doc_id_src  : "+ p_doc_id_src);
        _log.info("p_doc_dt  :"+ p_doc_dt);
        _log.info("uidPost  :"+ p_usr_create);
        _log.info("p_org_id  :"+ p_org_id);
        _log.info("p_sloc_id  :"+ p_sloc_id);
        _log.info("p_ho_org_id  :"+ p_ho_org_id);
        _log.info("p_cld_id  :"+ p_cld_id);
        _log.info("p_wh_id  :"+ p_wh_id);
        _log.info("p_fy_id  :"+ p_fy_id);
        _log.info("p_usr_create_dt  :"+ p_usr_create_dt);
        _log.info("p_eo_id  :"+ p_eo_id);
        Number s=null;
        BigDecimal a=null;
        try {

            a =
                (BigDecimal)callStoredFunction(Types.NUMERIC, "sls_to_mm_updt_ship_can_stk(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                                            p_cld_id,
                                                                                            p_sloc_id,
                                                                                            p_ho_org_id,
                                                                                            p_org_id,
                                                                                            p_wh_id,
                                                                                            p_fy_id,
                                                                                            p_doc_dt,
                                                                                            p_doc_id_src,
                                                                                            p_doc_dt_src,
                                                                                            p_eo_id,
                                                                                            p_usr_create,
                                                                                            p_usr_create_dt});
             System.out.println("Return from sls_to_mm_updt_ship_can_stk : "+a);
            s=new Number(a);
            _log.info(" after try result getShip()" + s);
            return s;

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'sls_to_mm_updt_ship_can_stk' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
            _log.info(" after catch result getShip()" + s);
            return s;
        }

    } */


    //fn_sls_to_mm_ship_itm_can

    /**
     * @param eoId
     * @param usrIdCreateDt
     * @param shipId
     * @param ShipDt
     * @param whId
     * @return
     */
    public String getshipAftrCancel(Integer eoId, Date usrIdCreateDt, String shipId, Date ShipDt, String whId) {
        String p_cld_id = getparamCldId();
        Integer p_sloc_id = getparamSlocId();
        String p_ho_org_id = getparamHoOrgId();
        String p_org_id = getparamOrgId();
        String p_wh_id = whId;
        Date p_doc_dt = ShipDt;
        Integer p_fy_id = getFYidOrgShip(getparamCldId(), getparamOrgId(), ShipDt);
        String p_doc_id_src = shipId;
        Date p_doc_dt_src = ShipDt;
        Integer p_eo_id = eoId;
        Integer p_usr_create = getparamUsrId();
        Date p_usr_create_dt = usrIdCreateDt;
        _log.info("getship ()");
        _log.info("p_doc_id_src  : " + p_doc_id_src);
        _log.info("p_doc_dt  :" + p_doc_dt);
        _log.info("uidPost  :" + p_usr_create);
        _log.info("p_org_id  :" + p_org_id);
        _log.info("p_sloc_id  :" + p_sloc_id);
        _log.info("p_ho_org_id  :" + p_ho_org_id);
        _log.info("p_cld_id  :" + p_cld_id);
        _log.info("p_wh_id  :" + p_wh_id);
        _log.info("p_fy_id  :" + p_fy_id);
        _log.info("p_usr_create_dt  :" + p_usr_create_dt);
        _log.info("p_eo_id  :" + p_eo_id);

        String p = null;
        try {

            p = callStoredFunction(Types.VARCHAR, "fn_sls_to_mm_ship_itm_can(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   p_cld_id, p_sloc_id, p_ho_org_id, p_org_id, p_wh_id, p_fy_id, p_doc_dt, p_doc_id_src,
                                   p_doc_dt_src, p_eo_id, p_usr_create, p_usr_create_dt
            }).toString();
            System.out.println("Return from fn_sls_to_mm_ship_itm_can : " + p);
            _log.info(" after try result getShip()" + p);
            return p;

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'fn_sls_to_mm_ship_itm_can' !\n" +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
            _log.info(" after catch result getShip()" + p);
            return p;
        }

    }

    public void filterSelectedShipment(String pickDocId, String shipDocId) {

        System.out.println(" ship id from search page " + shipDocId);
        System.out.println(" pack id from search page " + pickDocId);
        setShipmentSearchView(getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(), pickDocId,
                              shipDocId, null, null, null, null, null);
    }

    /**
     * @return
     */
    public boolean doShipmentExist() {
        Row currentRow = this.getsearchPickPackShip1().getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("ShipmntDocId") != null) {
                if (!currentRow.getAttribute("ShipmntDocId").toString().equals("")) {
                    return true;
                }
            }
        }
        return false;
    }

    public void setInitialBindVariablesInSlsShipmntGenVO() {
        ViewObjectImpl impl = this.getviewSlsShipmntGen1();
        impl.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        impl.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
        impl.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
        impl.setNamedWhereClauseParam("SlocIdBind", getparamSlocId()); //
        ViewObject searchShip = this.getsearchPickPackShip1();
        searchShip.setNamedWhereClauseParam("cldIdBind", getparamCldId());
        searchShip.setNamedWhereClauseParam("orgIdBind", getparamOrgId());
        searchShip.setNamedWhereClauseParam("hoOrgIdBind", getparamHoOrgId());
        searchShip.setNamedWhereClauseParam("slocIdBind", getparamSlocId());
        searchShip.setNamedWhereClauseParam("eoIdBind", -1);
        searchShip.setNamedWhereClauseParam("soDocIdBind", null);
        searchShip.setNamedWhereClauseParam("pickIdBind", null);
        searchShip.setNamedWhereClauseParam("shpmntIdBind", null);
        searchShip.setNamedWhereClauseParam("dlvModeBind", null);
        searchShip.setNamedWhereClauseParam("pickDateBind", null);
        searchShip.executeQuery();
    }

    /**
     * @return
     */
    public String getAlertFlag() {
        //FN_GET_ORDER_VAL(P_SLOCID IN NUMBER,P_CLDID IN VARCHAR2,P_HO_ORGID IN VARCHAR2,P_ORGID IN VARCHAR2,
        //P_EO_ID IN NUMBER,P_DOC_ID IN NUMBER)
        Number Amount = StaticValue.NUMBER_ZERO;
        String AlertFlag = "";
        Integer EoId = 0;
        String DocId = "";
        Row currentRow = this.getSlsPick1().getCurrentRow();
        if (currentRow != null) {
            EoId = (Integer) currentRow.getAttribute("EoId");
            DocId = (String) currentRow.getAttribute("DocId");
        }

        try {
            Object res = callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ORDER_VAL(?,?,?,?,?,?)", new Object[] {
                                            this.getparamSlocId(), this.getparamCldId(), this.getparamHoOrgId(),
                                            this.getparamOrgId(), EoId, DocId
            });
            System.out.println("Amount :" + Amount);
            Amount = new Number(res);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_GET_ORDER_VAL' in AmImpl ! " +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        Number value = StaticValue.NUMBER_ZERO;

        value = (Amount == null ? StaticValue.NUMBER_ZERO : Amount);

        try {
            //FN_GET_CREDIT_LIMIT_ALERT_TYPE(P_SLOCID IN NUMBER,P_CLDID IN VARCHAR2,P_HO_ORGID IN VARCHAR2,P_ORGID IN VARCHAR2,
            //P_SRC_ID IN VARCHAR2/***EO_ID**/,P_UTL_VAL IN NUMBER
            AlertFlag = (String) callStoredFunction(Types.VARCHAR, "SLS.FN_GET_CREDIT_LIMIT_ALERT_TYPE(?,?,?,?,?,?)", new Object[] {
                                                    this.getparamSlocId(), this.getparamCldId(), this.getparamHoOrgId(),
                                                    this.getparamOrgId(), EoId,
                                                    /***EO_ID**/value
            });
            System.out.println("Alert Flag :" + AlertFlag);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_GET_CREDIT_LIMIT_ALERT_TYPE' in AmImpl ! " +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        return AlertFlag;
    }

    /**
     * Select and set current pickId in shipment
     */
    public void selectCurrentPiclistOnShipmntPage() {
        //PickId
        //PickDocId
        //  String PickId = null;
        Row currentRow = this.getSlsPick1().getCurrentRow();
        if (currentRow != null) {
            System.out.println(currentRow.getAttribute("DocId") +
                               " This is the pick that need to get display ++++++++++++++++++");
            setShipmentSearchView(getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
                                  currentRow.getAttribute("DocId"), null, null, null, null, null, null);

        }
    }

    public void refreshPickLov() {
        Row currentRow = this.getSlsPack1().getCurrentRow();
        if (currentRow != null) {
            SlsPackVORowImpl row = (SlsPackVORowImpl) currentRow;
            //_log.info("CldId : "+)
            _log.info("Row count before execute : " + row.getLovPickIdVO1().getRowCount());
            row.getLovPickIdVO1().executeQuery();
            _log.info("Row count after execute : " + row.getLovPickIdVO1().getRowCount());
        }
    }

    public Integer getPackItmRowCount() {
        return this.getSlsPackItm1().getRowCount();
    }

    public void setValuesForShipmentPage() {
        ViewObjectImpl shipmntGen = this.getviewSlsShipmntGen1();
        Row currentRow = shipmntGen.getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl hdrVO1 = getSlsShipmntHdrVO1();
            hdrVO1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            hdrVO1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            hdrVO1.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            hdrVO1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            hdrVO1.setNamedWhereClauseParam("DocIdBind", currentRow.getAttribute("ShipmntDocId"));
            hdrVO1.executeQuery();


            /* ViewObjectImpl impl = this.getSlsShipmnt1VO();
            System.out.println("Row count is  : " + impl.getRowCount());
            System.out.println("org id " + currentRow.getAttribute("OrgId") + " sloc id " +
                               currentRow.getAttribute("SlocId") + " ho org idd " + currentRow.getAttribute("HoOrgId") +
                               " cld id  " + currentRow.getAttribute("CldId") + " pic id " +
                               currentRow.getAttribute("PickId") + " eo id " + currentRow.getAttribute("EoId"));
            impl.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("OrgId"));
            impl.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocId"));
            impl.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgId"));
            impl.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldId"));
            impl.setNamedWhereClauseParam("BindPickId", currentRow.getAttribute("PickId"));
            impl.setNamedWhereClauseParam("EoIdBind", currentRow.getAttribute("EoId"));
            System.out.println("Emp id id = " + currentRow.getAttribute("EoId"));
            if (currentRow.getAttribute("ShipIdFull") != null) {
                impl.setNamedWhereClauseParam("BindShipId", currentRow.getAttribute("ShipmntDocId"));
                System.out.println("Shipment Doc id is :  " + currentRow.getAttribute("ShipmntDocId"));
            } else {
                impl.setNamedWhereClauseParam("BindShipId", null);
                System.out.println("Shipment id is:  " + null);
            }
            impl.executeQuery();
            System.out.println("Row count is  : " + impl.getRowCount()); */
        }


    }

    /**
     *
     * @return
     */
    public String callFunctionToGetGeneratedVouId(String shipmntDocId) {
        String VoucherId = "0";
        try {
            VoucherId = (String) callStoredFunction(Types.VARCHAR, "SLS.FN_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] {
                                                    shipmntDocId, this.getparamUsrId(), this.getparamOrgId(),
                                                    this.getparamSlocId(), this.getparamHoOrgId(), this.getparamCldId(),
                                                    "S"
            });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'SLS.FN_GET_VOU_NO' in AmImpl ! " +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        this.getSlsPick1().executeQuery();
        return VoucherId;
    }

    public boolean isPackQuantityValid(Number val) {
        Number n = StaticValue.NUMBER_ZERO;
        Number p = StaticValue.NUMBER_ZERO;
        Row currentRow = this.getSlsPackItm1().getCurrentRow();
        if (currentRow.getAttribute("ItmId") != null) {
            RowSetIterator itr = this.getSlsPack1().createRowSetIterator(null);
            //System.out.println("Iterator rowCount : " + itr.getRowCount());
            while (itr.hasNext()) {
                Row next = itr.next();
                if (next.getAttribute("DocId") != null) {

                }
                this.getSlsPackItmVO1().setRangeSize(-1);
                RowQualifier rq = new RowQualifier(this.getSlsPackItmVO1());
                rq.setWhereClause("DocId ='" + next.getAttribute("DocId").toString() + "' AND ItmId ='" +
                                  currentRow.getAttribute("ItmId"));
                //  System.out.println("Qualifier : " + rq.getExprStr());
                Row[] filteredRows = this.getSlsPackItmVO1().getFilteredRows(rq);
                //  System.out.println("Filtered rows : " + filteredRows.length);
                for (Row r : filteredRows) {
                    _log.info("Current Row is : " + currentRow + ":" + currentRow.getKey() + " and Iterator row is :" +
                              r + " : " + r.getKey() + " : " + (currentRow != r) + " : " + currentRow.equals(r) +
                              " : " + !currentRow.getKey().equals(r.getKey()));
                    if (!currentRow.getKey().equals(r.getKey())) {
                        //      System.out.println("Not a current row !");
                        n = n.add((Number) r.getAttribute("PackQty"));
                    }
                }
            }
            itr.closeRowSetIterator();
            if (this.getSlsPick1().getCurrentRow() != null) {
                int i = this.getSlsPickItm1().getRangeSize();
                this.getSlsPickItm1().setRangeSize(-1);
                Row[] allRowsInRange = this.getSlsPickItm1().getAllRowsInRange();

                for (Row r1 : allRowsInRange) {
                    if (r1.getAttribute("ItmId").toString().equals(currentRow.getAttribute("ItmId").toString())) {
                        p = p.add((Number) r1.getAttribute("PickQty"));
                    }
                }
            }

        }
        // System.out.println("Quantity in Pack : " + n + " Quantity in Pick : " + p);
        //  System.out.println("Quantity after addition:" + val.add(n));
        //  System.out.println("Quantity in Pack : " + n + " Quantity in Pick : " + p);
        // System.out.println("Comparision : " + ((val.add(n)).compareTo(p) == -1));
        if ((val.add(n)).compareTo(p) == 1) {
            return false;
        } else {
            return true;
        }


    }

    /**
     * Container's getter for SlsPackItmVO1.
     * @return SlsPackItmVO1
     */
    public ViewObjectImpl getSlsPackItmVO1() {
        return (ViewObjectImpl) findViewObject("SlsPackItmVO1");
    }

    /**
     * Container's getter for LovEoNmFromEoIdVO1.
     * @return LovEoNmFromEoIdVO1
     */
    public ViewObjectImpl getLovEoNmFromEoIdVO1() {
        return (ViewObjectImpl) findViewObject("LovEoNmFromEoIdVO1");
    }

    /**
     * Method to get EoNm
     * @return
     */
    public StringBuffer getPickEoNm() {
        StringBuffer EoNm = new StringBuffer("");
        Row currentRow = this.getSlsPick1().getCurrentRow();
        if (currentRow != null) {
            Object nm = currentRow.getAttribute("EoNmTrans");
            if (nm != null) {
                EoNm = new StringBuffer(nm.toString());
            }
        }
        return EoNm;
    }

    /**
     * Method to execute pick item vo for preventing link to be disabled(Added By Rohit on 26 March 2014
     * @return
     */

    public void executePickItmVo() {
        // System.out.println("executePickItmVo in amimpl");
        ViewObject slsPickItm = this.getSlsPickItm1();
        slsPickItm.executeQuery(); //addd by rohit
    }

    public void setAddsValToNoneOnPageRun() {
        //  System.out.println("enter in setAddsValToNoneOnPageRun");

        ViewObjectImpl addsVo = this.getLovAddsId1();
        //  System.out.println("add row befor " + addsVo.getRowCount());
        ViewCriteria vc = addsVo.getViewCriteria("LovAddsIdVOCriteria");
        addsVo.applyViewCriteria(vc);
        addsVo.setNamedWhereClauseParam("slocIdBind", -1);
        addsVo.setNamedWhereClauseParam("orgIdBind", null);
        addsVo.setNamedWhereClauseParam("cldIdBind", null);
        addsVo.setNamedWhereClauseParam("eoIdBind", null);
        addsVo.setNamedWhereClauseParam("addBind", -1);
        addsVo.executeQuery();
        //  System.out.println("add row befor " + addsVo.getRowCount());

    }

    /**
     * Container's getter for LovAddsId1.
     * @return LovAddsId1
     */
    public ViewObjectImpl getLovAddsId1() {
        return (ViewObjectImpl) findViewObject("LovAddsId1");
    }

    public void setCurrPickItmRowWithKey() {
        //  System.out.println("setCurrPickItmRowWithKey");
        ViewObjectImpl pickItmVo = this.getSlsPickItm1();
        //  System.out.println("set setCurrPickItmRowWithKey 1");
        pickItmVo.executeQuery();
        //   System.out.println("set setCurrPickItmRowWithKey 2");
        RowSetIterator rsaa = pickItmVo.createRowSetIterator(null);
        if (rsaa != null) {
            //   System.out.println("srs" + rsaa + "rs.hasNext() " + rsaa.hasNext());
            while (rsaa.hasNext()) {
                Key key11 = rsaa.next().getKey();
                //    System.out.println("key in iteratorc" + key11);
                Row rrr = this.getSlsPackItm1().getRow(key11);
                this.getSlsPickItm1().setCurrentRow(rrr);
                break;
            }
        }
        rsaa.closeRowSetIterator();
        /*  Key k = pickItmVo.getCurrentRow().getKey();
        System.out.println("set setCurrPickItmRowWithKey 3");
        System.out.println("cureent key " + k);
        Row row = pickItmVo.getRow(k);
        System.out.println("Row : " + row);
        pickItmVo.setCurrentRow(row); */
    }


    /**
     * @param itmAddFlg
     */
    public void setItmAddFlg(Integer itmAddFlg) {
        this.itmAddFlg = itmAddFlg;
    }

    /**
     * @return
     */
    public Integer getItmAddFlg() {
        return itmAddFlg;
    }

    /**
     * @param packKey
     */
    public void setPackRowWithkey(Key packKey) {
        ViewObjectImpl packVo = this.getSlsPack1();
        if (packKey != null) {
            Row row = packVo.getRow(packKey);
            packVo.setCurrentRow(row);
        }
    }


    public void isOrgUsedPackSetUp() {

        String checkPack = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                       this.getparamCldId(), this.getparamSlocId(),
                                                       this.getparamOrgId(), "USE_PACK_ENTRY"
        });
        // System.out.println("return value is " + checkPack);
        // Map pageFlowScope = RequestContext.getCurrentInstance().getPageFlowScope();
        // pageFlowScope.put("CHECK_PAGE_MODE", "V");
    }


    /**
     * @return
     */
    public String isCoaIdIsNull() {
        StringBuilder v = new StringBuilder("Y");
        ViewObjectImpl pickVo = this.getSlsPick1();
        Row pickRow = pickVo.getCurrentRow();
        if (pickRow != null && pickRow.getAttribute("EoId") != null) {
            Integer coaIdFrmEoId = EbizParamsAPPUtils.getCoaIdFrmEoId(this, (Integer) pickRow.getAttribute("EoId"));
            if (!coaIdFrmEoId.equals(-1)) {
                v = new StringBuilder("N");
            }
            /*  ViewObjectImpl custVo = this.getCustCoaVO1();
                custVo.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                custVo.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                custVo.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
                custVo.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                custVo.setNamedWhereClauseParam("EoIdBind", eoId);
                custVo.executeQuery();
                Row[] allRowsInRange = custVo.getAllRowsInRange();
                if(allRowsInRange.length > 0){
                    Object o = allRowsInRange[0].getAttribute("CoaId");
                    if(o != null){
                        v = new StringBuilder("N");
                    }
                }
            } */
        }

        return v.toString();
    }

    /**
     * Container's getter for CustCoaVO1.
     * @return CustCoaVO1
     */
    public ViewObjectImpl getCustCoaVO1() {
        return (ViewObjectImpl) findViewObject("CustCoaVO1");
    }


    /**
     * @param pickDate
     */
    public void resetOrderData(Timestamp pickDate) {
        ViewObjectImpl impl = this.getSlsPick1();
        Integer EoId = -1;
        String AddsId = null;
        String WhId = null;
        String SoIdTrans = null;
        String ItmNmBind = null;
        String ItmIdTrans = null;
        if (impl.getCurrentRow() != null) {
            Row currentRow = impl.getCurrentRow();
            if (currentRow.getAttribute("EoId") != null) {
                EoId = (Integer) currentRow.getAttribute("EoId");
                if (currentRow.getAttribute("DlvAddsId") != null) {
                    AddsId = currentRow.getAttribute("DlvAddsId").toString();
                }
                if (currentRow.getAttribute("WhId") != null) {
                    WhId = currentRow.getAttribute("WhId").toString();
                }
                if (currentRow.getAttribute("SoIdTrans") != null) {
                    SoIdTrans = currentRow.getAttribute("SoIdTrans").toString();
                }
                if (currentRow.getAttribute("ItmIdTrans") != null) {
                    ItmIdTrans = currentRow.getAttribute("ItmIdTrans").toString();
                }
                /* if(currentRow.getAttribute("ItmNmBind") != null){
                    ItmNmBind = currentRow.getAttribute("ItmNmBind").toString();
                } */

            }

        }
        try {
            pickDate = new Timestamp(pickDate.dateValue());
        } catch (SQLException e) {
            _log.info("In Exception-" + e);
        }
        _log.info("Pick Date is : " + pickDate + " Eo Id : " + EoId + " Adds Id :" + AddsId + " So Id : " + SoIdTrans +
                  " Itm nm : " + ItmIdTrans);
        ViewObject slssoPickVw = this.getviewSlsSoPick1();
        //_log.info("So Rows Before filter : "+slssoPickVw.getRowCount());
        slssoPickVw.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
        slssoPickVw.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
        slssoPickVw.setNamedWhereClauseParam("SlocIdBind", -1);
        slssoPickVw.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        slssoPickVw.setNamedWhereClauseParam("EoIdBind", EoId);
        slssoPickVw.setNamedWhereClauseParam("SoIdDocBind", SoIdTrans);
        slssoPickVw.setNamedWhereClauseParam("ShipAddBind", AddsId);
        getViewSlsSoPickItmVO1().setNamedWhereClauseParam("whIdBind", -1);
        getViewSlsSoPickItmVO1().executeQuery();

        try {
            _log.info("Date : " + pickDate.dateValue());
            _log.info("Timestamp : " + pickDate);
            slssoPickVw.setNamedWhereClauseParam("bindDlvDt", pickDate);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  System.out.println("quey " + slssoPickVw.getQuery());
        slssoPickVw.executeQuery();
        Row curRow = this.getSlsPick1().getCurrentRow();
        //curRow.setAttribute("DocDt", null);
        curRow.setAttribute("WhId", null);
        curRow.setAttribute("SoSearchTrans", null);
        curRow.setAttribute("EoNmTrans", null);
        curRow.setAttribute("CurrIdSp", null);
        curRow.setAttribute("BarCodeNmTrans", null);
        curRow.setAttribute("DlvAddsTrans", null);
        curRow.setAttribute("ItmNmBind", null);
        curRow.setAttribute("EoId", null);
        curRow.setAttribute("DlvAddsId", null);
        // curRow.setAttribute("PrjId", defaultProjId);
        //.executeQuery(); // 30 jun 2014 for  make reset the field to populate data.
        //  System.out.println("quey " + slssoPickVw.getQuery());
    }

    /**
     * @return
     */
    public String doOrgUseTolerance() {

        String checkPack = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                       this.getparamCldId(), this.getparamSlocId(),
                                                       this.getparamOrgId(), "CHK_DLV_SCHDL_TLRNC"
        });
        //  System.out.println("return value is " + checkPack);
        return checkPack;
        //Map pageFlowScope = RequestContext.getCurrentInstance().getPageFlowScope();
        //pageFlowScope.put("CHECK_PAGE_MODE", "V");
    }

    public void delLotbinSrData() {
        _log.info("in remove lot bin sr data ");
        ViewObjectImpl lotVo = this.getSlsPickIssuLot3();
        ViewObjectImpl binVo = this.getSlsPickIssuBin2();
        ViewObjectImpl srVo = this.getSlsPickIssuSr2();

        binVo.executeQuery(); // for detecting the row to delete for auto issue because it is coming through the function.
        srVo.executeQuery();

        RowQualifier rqwLot = new RowQualifier(lotVo);
        RowQualifier rqwBin = new RowQualifier(binVo);
        RowQualifier rqwSr = new RowQualifier(srVo);

        _log.info("Pick iD==" + pickdocId + " =whId =" + pickWhId + " soId =" + sodocId + " and item id " + soItmId);

        rqwLot.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                              getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickdocId +
                              "' and SoId='" + sodocId + "' and ItmId='" + soItmId + "' and WhId='" + pickWhId + "'");
        // _log.info("clause " + rqwLot.getExprStr());

        Row lotfltRw[] = lotVo.getFilteredRows(rqwLot);
        //  System.out.println(" " + lotfltRw.length);
        if (lotfltRw.length > 0) {
            for (Row r2 : lotfltRw) {
                r2.remove();
            }
        }
        // _log.info("======================");

        rqwBin.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                              getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickdocId +
                              "' and SoId='" + sodocId + "' and ItmId='" + soItmId + "' and WhId='" + pickWhId + "'");
        //  System.out.println("clause " + rqwBin.getExprStr());

        Row binfltRw[] = binVo.getFilteredRows(rqwBin);
        //System.out.println(" " + binfltRw.length);
        if (binfltRw.length > 0) {
            for (Row r3 : binfltRw) {
                r3.remove();
            }
        }
        // System.out.println("===========================");

        rqwSr.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                             getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickdocId +
                             "' and SoId='" + sodocId + "' and ItmId='" + soItmId + "' and WhId='" + pickWhId + "'");
        //  System.out.println("clause " + rqwSr.getExprStr());

        Row srfltRw[] = srVo.getFilteredRows(rqwSr);
        //System.out.println(" " + srfltRw.length);
        if (srfltRw.length > 0) {
            for (Row r4 : srfltRw) {
                r4.remove();
            }
        }

        lotVo.executeQuery();
        binVo.executeQuery();
        srVo.executeQuery();
        this.getDBTransaction().postChanges();
    }

    String pickdocId = null;
    String sodocId = null;
    String soItmId = null;
    String pickWhId = null;
    Row rrr = null;

    /**
     * @param r
     * @return
     */
    public String isLotDataExist(Row r) {
        rrr = r;
        ViewObjectImpl pickVo = this.getSlsPick1();
        this.getSlsPickIssuLot3().executeQuery();
        ViewObjectImpl lotVo1 = this.getSlsPickIssuLot3();
        //   System.out.println("the Row count are: " + lotVo1.getRowCount());
        RowQualifier rqw = new RowQualifier(lotVo1);
        pickdocId = (String) pickVo.getCurrentRow().getAttribute("DocId");
        pickWhId = (String) pickVo.getCurrentRow().getAttribute("WhId");
        sodocId = (String) r.getAttribute("DocId");
        soItmId = (String) r.getAttribute("ItmIdSo");
        rqw.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                           getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickdocId +
                           "' and SoId='" + sodocId + "' and ItmId='" + soItmId + "' and WhId='" + pickWhId +
                           "'  and DlvDt = '" + r.getAttribute("DlvDt"));
        //  System.out.println("clause " + rqw.getExprStr());
        Row fltRw[] = lotVo1.getFilteredRows(rqw);
        //  System.out.println("Filter rows are:  " + fltRw.length);
        _log.info(" fltRw " + fltRw.length);
        if (fltRw.length > 0) {
            _log.info("set 1 return 1 ");
            return "Y";
        }
        _log.info("set 2 return 0");
        return "N";
    }

    public void rePopulateItemToPickList() {
        _log.info("curRow in amimpl is rr ==" + rrr);
        itmAddFlg = 1;
        String flag = "Y";
        ViewObjectImpl slsPickItm = this.getSlsPickItm1();
        ViewObject slsPick = this.getSlsPick1();
        Row pickRow = slsPick.getCurrentRow();
        ViewObject slsSoPick = this.getviewSlsSoPick1();
        //  rrr.setAttribute("SelectItemChkBxTrans", "Y");
        _log.info("Select Item Val->" + rrr.getAttribute("SelectItemChkBxTrans") + " ==itm  is-->" +
                  rrr.getAttribute("ItmIdSo"));

        _log.info("Total Row in itm-" + slsPickItm.getRowCount());
        RowQualifier rq = new RowQualifier(slsPickItm);
        rq.setWhereClause("SoId='" + rrr.getAttribute("DocId") + "' and ItmId='" + rrr.getAttribute("ItmIdSo") +
                          "' and DlvDt='" + rrr.getAttribute("DlvDt") + "'");
        _log.info("Where Clause is-->" + rq.getExprStr());
        Row fltrdRows[] = slsPickItm.getFilteredRows(rq);
        _log.info("Total Row for This Itm->" + fltrdRows.length);

        if (fltrdRows.length == 0) {
            _log.info("when lot data dos not exist");

        } else {
            Number prevPickQty = (Number) fltrdRows[0].getAttribute("PickQty");
            Number curPickQty = (Number) rrr.getAttribute("SchdlQuantTrans");
            _log.info("__________________________________________________ set 1");
            Number totQty = (Number) rrr.getAttribute("PendingQty");
            _log.info("__________________________________________________ set 3");
            Number penddingQnt = (Number) fltrdRows[0].getAttribute("BalQty"); //added by Rohit
            _log.info("Previous Qty-" + prevPickQty + "And Current Qty-" + curPickQty + " penddingQnt =" + penddingQnt +
                      " totQty =" + totQty);
            fltrdRows[0].setAttribute("PickQty", (prevPickQty.add(curPickQty)));
            fltrdRows[0].setAttribute("BalQty", totQty.subtract(curPickQty)); //added by Rohit
            autoIssueItmOnAdd(fltrdRows[0]);

            /* FacesMessage errMsg = new FacesMessage("Item Quantity is updated in PickList for this Sales Order"); */
            FacesMessage errMsg = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.967"));
            errMsg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
        }
        //  _log.info("__________________________________________________ 18");
        getFYidOrgPick(getparamCldId(), getparamOrgId());
        _log.info("__________________________________________________ 19");
        this.getDBTransaction().validate();
        //for checking 30 jun 2014
        this.getSlsPickIssuLotVO1().executeQuery();
        this.getSlsPickIssuLot1().executeQuery();
        this.getDBTransaction().postChanges();
        this.getViewSlsSoPickItm1().executeQuery();
        slsPickItm.executeQuery();
        // Filter It Using Key Attribute
        Row[] grpRow = this.getviewSlsSoPick1().getAllRowsInRange();
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            for (Row r : grpRow) {
                RowSet childRows = (RowSet) r.getAttribute("ViewSlsSoPickItm");
                //Execute Child Rowset
                childRows.executeQuery();
            }
        }
        this.getviewSlsSoPick1().executeQuery();
        itmAddFlg = 0;
        this.getViewSlsSoPickItm1().executeQuery(); // 14 july 2014
    }

    /**
     * Container's getter for SlsPickIssuBinVO1.
     * @return SlsPickIssuBinVO1
     */
    public ViewObjectImpl getSlsPickIssuBinVO1() {
        return (ViewObjectImpl) findViewObject("SlsPickIssuBinVO1");
    }

    /**
     * Container's getter for SlsPickIssuSrVO1.
     * @return SlsPickIssuSrVO1
     */
    public SlsPickIssuSrVOImpl getSlsPickIssuSrVO1() {
        return (SlsPickIssuSrVOImpl) findViewObject("SlsPickIssuSrVO1");
    }


    /**
     * @return
     */
    public Boolean isPickSelected() {
        Boolean b = true;
        ViewObjectImpl shipeGenView = this.getviewSlsShipmntGen1();
        RowSetIterator createRowSetIterator = shipeGenView.createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row r = createRowSetIterator.next();
            // System.out.println("CB value : " + r.getAttribute("selectPickListCbTrans"));
            String c =
                r.getAttribute("selectPickListCbTrans") == null ? "N" :
                r.getAttribute("selectPickListCbTrans").toString();
            if (c.equals("Y")) {
                b = false;
                break;
            }
        }
        createRowSetIterator.closeRowSetIterator();
        //  System.out.println("b in amimpl :"+b);
        return b;
    }

    /**
     * Container's getter for SlsShipmntVO2.
     * @return SlsShipmntVO2
     */
    public ViewObjectImpl getSlsShipmntVO2() {
        return (ViewObjectImpl) findViewObject("SlsShipmntVO2");
    }


    /**
     * Container's getter for SlsPickIssuLotVO1.
     * @return SlsPickIssuLotVO1
     */
    public SlsPickIssuLotVOImpl getSlsPickIssuLotVO1() {
        return (SlsPickIssuLotVOImpl) findViewObject("SlsPickIssuLotVO1");
    }

    /**
     * Container's getter for SlsPickIssuLot3.
     * @return SlsPickIssuLot3
     */
    public SlsPickIssuLotVOImpl getSlsPickIssuLot3() {
        return (SlsPickIssuLotVOImpl) findViewObject("SlsPickIssuLot3");
    }

    /**
     * Container's getter for SlsPickToSlsIssueLotVL1.
     * @return SlsPickToSlsIssueLotVL1
     */
    public ViewLinkImpl getSlsPickToSlsIssueLotVL1() {
        return (ViewLinkImpl) findViewLink("SlsPickToSlsIssueLotVL1");
    }

    /**
     * Container's getter for SlsPickIssuBin2.
     * @return SlsPickIssuBin2
     */
    public ViewObjectImpl getSlsPickIssuBin2() {
        return (ViewObjectImpl) findViewObject("SlsPickIssuBin2");
    }

    /**
     * Container's getter for SlsPickToSlsIssueBinVL1.
     * @return SlsPickToSlsIssueBinVL1
     */
    public ViewLinkImpl getSlsPickToSlsIssueBinVL1() {
        return (ViewLinkImpl) findViewLink("SlsPickToSlsIssueBinVL1");
    }

    /**
     * Container's getter for SlsPickIssuSr2.
     * @return SlsPickIssuSr2
     */
    public SlsPickIssuSrVOImpl getSlsPickIssuSr2() {
        return (SlsPickIssuSrVOImpl) findViewObject("SlsPickIssuSr2");
    }

    /**
     * Container's getter for SlsPickSlsIssueSrkVL1.
     * @return SlsPickSlsIssueSrkVL1
     */
    public ViewLinkImpl getSlsPickSlsIssueSrkVL1() {
        return (ViewLinkImpl) findViewLink("SlsPickSlsIssueSrkVL1");
    }

    /**
     * @param shipDocIdBind
     */
    public void setShipDocIdBind(String shipDocIdBind) {
        this.shipDocIdBind = shipDocIdBind;
    }

    /**
     * @return
     */
    public String getShipDocIdBind() {
        return shipDocIdBind;
    }

    /**
     * @return
     */
    public String cancelPickList() {
        Row row = this.getSlsPick1().getCurrentRow();
        Integer fyId = Integer.parseInt(row.getAttribute("FyId").toString());
        Timestamp doc_dt = (Timestamp) row.getAttribute("DocDt");
        String doc_id = row.getAttribute("DocId").toString();
        Integer EoId = Integer.parseInt(row.getAttribute("EoId").toString());


        Integer usr_id = getparamUsrId();
        Date d = new Date();
        //System.out.println("value are: " + fyId + "\n" + doc_dt + "\n" + doc_id + "\n" + EoId + "\n");
        //  System.out.println(getparamCldId());
        //  System.out.println(getparamHoOrgId());
        //  System.out.println(getparamSlocId());
        //  System.out.println(getparamUsrId());
        //   System.out.println(getparamOrgId());
        //  System.out.println(d);
        String flag = "N";
        try {
            /* System.out.println("val from function is:  -- "+callStoredFunction(Types.VARCHAR, "SLS.FN_SLS_PICK_CAN(?,?,?,?,?,?,?,?,?,?)",
                                           new Object[] {  getparamCldId(),getparamSlocId(),getparamHoOrgId(), getparamOrgId(),
                                                          fyId, doc_dt.dateValue(),doc_id,EoId,

                                                          usr_id, d }).toString()); */
            Date usrDate = ((Timestamp) row.getAttribute("UsrIdCreateDt")).dateValue();
            //   System.out.println("User date is:  " + usrDate);
            Object result = callStoredFunction(Types.VARCHAR, "SLS.FN_SLS_PICK_CAN(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                               getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
                                               fyId, doc_dt.dateValue(), doc_id, EoId, usr_id, usrDate
            }).toString();

            if (result != null) {
                flag = result.toString();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        //  System.out.println("Flag vale in amimpl is:  " + flag);
        return flag;
    }

    /**
     * @param flag
     */
    public void UpdateOrdStat(String flag) {
        Boolean b = true;
        Row row = this.getSlsPick1().getCurrentRow();
        Object fyId = row.getAttribute("FyId");
        Object whId = row.getAttribute("WhId").toString();
        Object docId = row.getAttribute("DocId");
        try {
            Object o = ADFModelUtils.callFunction(this, new StringBuilder("FN_SLS_PICK_SO_STATUS(?,?,?,?,?,?,?,?)"), new Object[] {
                                                  getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
                                                  whId, fyId, docId, flag
            }, Types.VARCHAR);

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
    }

    /**
     * @param flag
     */
    //    public Boolean UpdateOrdStatNew(String flag) {
    //        Boolean b = true;
    //        Row row = this.getSlsPick1().getCurrentRow();
    //        Object fyId = row.getAttribute("FyId");
    //        Object whId = row.getAttribute("WhId").toString();
    //        Object docId = row.getAttribute("DocId");
    //        try {
    //            Object o = ADFModelUtils.callFunction(this, new StringBuilder("FN_SLS_PICK_SO_STATUS(?,?,?,?,?,?,?,?)"), new Object[] {
    //                                                  getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
    //                                                  whId, fyId, docId, flag
    //            }, Types.VARCHAR);
    //            String s = (o == null ? "N" : o.toString());
    //            if (!s.equals("Y")) {
    //                b = false;
    //            }
    //        } catch (Exception e) {
    //            ADFModelUtils.showFormattedFacesMessage("There was some problem while calling function FN_SLS_PICK_SO_STATUS !",
    //                                                    "</br>Please try again! </br></br>If the problem persists, contact ESS !</br></br>"+e.getMessage(),
    //                                                    FacesMessage.SEVERITY_INFO);
    //            e.printStackTrace();
    //        }
    //        return b;
    //    }


    /**
     * @return
     */
    public StringBuilder isLotQtyValid() {
        StringBuilder g = new StringBuilder("Y");
        //ArrayList to store lots who have been selected for Issuing
        ArrayList<Row> selectedLot = new ArrayList<Row>();
        ViewMmStkSummLotVOImpl issueLotVo = getViewMmStkSummLot1();
        RowSetIterator issueLotItr = issueLotVo.createRowSetIterator(null);
        while (issueLotItr.hasNext()) {
            Row issueRow = issueLotItr.next();
            Object issueQtyO = issueRow.getAttribute("TransIssuQtyValue");
            Number issueQty = (issueQtyO == null ? StaticValue.NUMBER_ZERO : (Number) issueQtyO);
            if (issueQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                selectedLot.add(issueRow);
            }
        }
        issueLotItr.closeRowSetIterator();
        //Lot vo to check total issued qty of a lot
        ViewObjectImpl lotVo = this.getSlsPickIssuLot3();
        lotVo.executeQuery();
        int i = lotVo.getRangeSize();
        lotVo.setRangeSize(-1);
        for (Row r : selectedLot) {
            Object lotAvlQtyO = r.getAttribute("TotStk");
            Object entredIssueQuantO = r.getAttribute("TransIssuQtyValue");

            Number lotAvlQty = (lotAvlQtyO == null ? StaticValue.NUMBER_ZERO : (Number) lotAvlQtyO);
            Number entredIssueQuant =
                (entredIssueQuantO == null ? StaticValue.NUMBER_ZERO : (Number) entredIssueQuantO);

            StringBuilder clause = new StringBuilder("");
            clause.append("ItmId = '").append(r.getAttribute("ItmId")).append("'");
            clause.append("AND LotId = '").append(r.getAttribute("LotId")).append("'");
            RowQualifier rq = new RowQualifier(lotVo);
            rq.setWhereClause(clause.toString());
            Row[] lotRows = lotVo.getFilteredRows(rq);
            Number totPickQty = StaticValue.NUMBER_ZERO;
            for (Row lotR : lotRows) {
                Object pickO = lotR.getAttribute("PickQty");
                if (pickO != null) {
                    totPickQty = totPickQty.add((Number) pickO);
                }
            }
            totPickQty = totPickQty.add(entredIssueQuant);
            if (totPickQty.compareTo(lotAvlQty) > 0) {
                g = new StringBuilder("Total Issue Quantity of lot id : ");
                g.append(r.getAttribute("LotId"));
                g.append(" for selected Item in current PickList is Exceeding the Total Available Quantity.\n\n");
                g.append("<br /><br />Lot Available Quantity : ");
                g.append(lotAvlQty);
                g.append("<br /><br />Total Picked Quantity for Selected Item Currently : ");
                g.append(totPickQty);
                g.append("<br /><br />Please enter correct Issue Quantity !");
                break;
                // Total Issue Quantity of lot id : for selected Item in this PickList is Exceeding the Total Avalable Quantity.
            }
        }
        lotVo.setRangeSize(i);
        return g;
    }


    /**
     * @return
     */
    public StringBuilder isBinQtyValid() {
        StringBuilder g = new StringBuilder("Y");
        //ArrayList to store lots who have been selected for Issuing
        ArrayList<Row> selectedBin = new ArrayList<Row>();
        ViewMmStkSummBinVOImpl issueBinVo = getViewMmStkSummBin1();
        RowSetIterator issueBinItr = issueBinVo.createRowSetIterator(null);
        while (issueBinItr.hasNext()) {
            Row issueRow = issueBinItr.next();
            Object issueQtyO = issueRow.getAttribute("TransIssueQty");
            Number issueQty = (issueQtyO == null ? StaticValue.NUMBER_ZERO : (Number) issueQtyO);
            if (issueQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                selectedBin.add(issueRow);
            }
        }
        issueBinItr.closeRowSetIterator();
        //Lot vo to check total issued qty of a lot
        ViewObjectImpl BinVo = this.getSlsPickIssuBin2();
        BinVo.executeQuery();
        int i = BinVo.getRangeSize();
        BinVo.setRangeSize(-1);
        for (Row r : selectedBin) {
            Object lotAvlQtyO = r.getAttribute("TotStk");
            Object entredIssueQuantO = r.getAttribute("TransIssueQty");

            Number lotAvlQty = (lotAvlQtyO == null ? StaticValue.NUMBER_ZERO : (Number) lotAvlQtyO);
            Number entredIssueQuant =
                (entredIssueQuantO == null ? StaticValue.NUMBER_ZERO : (Number) entredIssueQuantO);

            StringBuilder clause = new StringBuilder("");
            clause.append("ItmId = '").append(r.getAttribute("ItmId")).append("'");
            clause.append("AND LotId = '").append(r.getAttribute("LotId")).append("'");
            clause.append("AND BinId = '").append(r.getAttribute("BinId")).append("'");
            _log.info("caluse in bin filter: " + clause);
            RowQualifier rq = new RowQualifier(BinVo);
            rq.setWhereClause(clause.toString());
            Row[] lotRows = BinVo.getFilteredRows(rq);
            Number totPickQty = StaticValue.NUMBER_ZERO;
            for (Row lotR : lotRows) {
                Object pickO = lotR.getAttribute("PickQty");
                if (pickO != null) {
                    totPickQty = totPickQty.add((Number) pickO);
                }
            }
            totPickQty = totPickQty.add(entredIssueQuant);
            if (totPickQty.compareTo(lotAvlQty) > 0) {
                g = new StringBuilder("Total Issue Quantity of Bin id : ");
                g.append(r.getAttribute("BinId"));
                g.append(" for selected Item in current PickList is Exceeding the Total Available Quantity.\n\n");
                g.append("<br /><br />Bin Available Quantity : ");
                g.append(lotAvlQty);
                g.append("<br /><br />Total Picked Quantity for Selected Item Currently : ");
                g.append(totPickQty);
                g.append("<br /><br />Please enter correct Issue Quantity !");
                break;
                // Total Issue Quantity of lot id : for selected Item in this PickList is Exceeding the Total Avalable Quantity.
            }
        }
        BinVo.setRangeSize(i);
        _log.info("Bin Check Returned. " + g);
        return g;
    }


    /**
     * @return
     */
    public StringBuilder isIssueQtyValid() {
        StringBuilder g = new StringBuilder("");
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        if (binChkFlg == null) {
            ADFModelUtils.showFacesMessage("Error when getting #{pageFlowScope.GLBL_ORG_BIN_CHK}", null,
                                           FacesMessage.SEVERITY_ERROR, null);
        } else {
            if ("Y".equals(binChkFlg.toString())) {
                g = isBinQtyValid();
            } else {
                g = isLotQtyValid();
            }
        }
        return g;
    }

    /**
     * Method to check if the Item Amount and Item Lot amount matches in case of Excise trading.
     * @return
     */
    public Boolean isCheckForExiseValid() {
        Boolean b = true;
        // System.out.println("Came here.");
        Row currentRow = this.getSlsPick1().getCurrentRow();
        if (currentRow != null) {
            getDBTransaction().postChanges();
            Object o = null;
            try {
                o = ADFModelUtils.callFunction(this, new StringBuilder("fn_chk_excise_validation(?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                               EbizParams.GLBL_APP_USR_ORG(), currentRow.getAttribute("DocId"), 21506
                }, Types.VARCHAR);
                if (o != null && o.toString().equals("N")) {
                    b = false;
                }
            } catch (Exception e) {
                ADFModelUtils.showFormattedFacesMessage("There have been some error while calling function  fn_chk_exise_validation!",
                                                        e.getMessage(), FacesMessage.SEVERITY_FATAL);
                e.printStackTrace();
            }
        }
        if (!b) {
            ADFModelUtils.showFormattedFacesMessage("The Current Organisation is a Excise Trading Organisation!",
                                                    "Sales Excise Value cannot be more than Purchase Exise Value.",
                                                    FacesMessage.SEVERITY_ERROR);
        }
        // System.out.println("Returned : " + b);
        return b;
    }

    /**
     * Method that autoissues Items automatically
     * @param currentRow
     */
    public void autoIssueItmOnAdd(Row currentRow) {
        // All the changes to this method needs to be copied to method autoIssueItm(),
        if (currentRow != null) {
            Row pickRow = this.getSlsPick1().getCurrentRow();
            currentRow.getAttribute("ItmNmTrans");
            Object o = currentRow.getAttribute("TransItmPickOrder");

            Integer transPickOrdr = (o == null ? -1 : (Integer) o);
            _log.info("Trans Item Pick Order : " + transPickOrdr);
            if (transPickOrdr.equals(305) || transPickOrdr.equals(306)) {
                String uomBase = null;
                ViewObject pickItm = this.getSlsPickItm1();
                Row itmRow = currentRow; //pickItm.getCurrentRow();
                String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

                _log.info("wh-" + itmRow.getAttribute("WhId") + "itm-" + itmRow.getAttribute("ItmId") + "pickQty-" +
                          itmRow.getAttribute("PickQty") + "PickOrd-" + itmRow.getAttribute("TransItmPickOrder") +
                          "SrNo-" + itmRow.getAttribute("SrNo") + "DocID-" + itmRow.getAttribute("DocId") + "Uom-" +
                          itmRow.getAttribute("ItmUom"));

                if (getBaseUom((String) itmRow.getAttribute("ItmId")) != null) {
                    uomBase = getBaseUom(itmRow.getAttribute("ItmId").toString());
                } else {
                    uomBase = itmRow.getAttribute("ItmUom").toString();
                }

                Number convFactor =
                    EbizParamsMMUtils.getItmUomConvFactor(this, itmRow.getAttribute("ItmId").toString(),
                                                          itmRow.getAttribute("ItmUom").toString(), uomBase);


                Object ret =
                    ADFModelUtils.callFunction(this,
                                               new StringBuilder("SLS.FN_SLS_PICK_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                               getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
                                               itmRow.getAttribute("WhId"), itmRow.getAttribute("ItmId"),
                                               itmRow.getAttribute("PickQty"), itmRow.getAttribute("TransItmPickOrder"),
                                               itmRow.getAttribute("TransItmSerializedFlg"), binChkFlg,
                                               itmRow.getAttribute("DocId"), itmRow.getAttribute("SoId"),
                                               itmRow.getAttribute("SoDt"), uomBase, itmRow.getAttribute("ItmUom"),
                                               convFactor, itmRow.getAttribute("DlvDt"), pickRow.getAttribute("FyId")
                }, Types.NUMERIC);
                _log.info("Retval AutoIssue-" + ret);
                getDBTransaction().postChanges();
                this.getSlsPickIssuLot1().executeQuery();
                this.getSlsPickIssuBin1().executeQuery();
                this.getSlsPickIssuSr1().executeQuery();
            }
            //#{row.TransItmPickOrder == 305 or row.TransItmPickOrder == 306}
        }
    }

    public void autoIssueItmOnAdd() {
    }

    /**
     * Container's getter for ViewSlsSoPickItmVO1.
     * @return ViewSlsSoPickItmVO1
     */
    public ViewSlsSoPickItmVOImpl getViewSlsSoPickItmVO1() {
        return (ViewSlsSoPickItmVOImpl) findViewObject("ViewSlsSoPickItmVO1");
    }

    /**
     *  Method To filter so Items on the basis of selected soPick.
     */
    public void filterSoPickItems() {
        viewSlsSoPickVOImpl soImpl = this.getviewSlsSoPick1();
        RowSetIterator ctr = soImpl.createRowSetIterator(null);
        StringBuilder inClause = new StringBuilder("");
        StringBuilder clause = new StringBuilder("");
        Boolean isAnySelected = false;
        int i = 1;
        while (ctr.hasNext()) {
            Row row = ctr.next();
            Object obj = row.getAttribute("SelectedTrans");
            StringBuffer selected = new StringBuffer(obj == null ? "N" : obj.toString());
            if (selected.toString().equalsIgnoreCase("Y")) {
                isAnySelected = true;
                if (i == 1) {
                    clause.append("'" + row.getAttribute("DocId").toString() + "'");
                    i = 0;
                } else {
                    clause.append(",'" + row.getAttribute("DocId").toString() + "'");
                }
            }
        }
        ctr.closeRowSetIterator();
        if (isAnySelected) {
            inClause = new StringBuilder(" AND DOC_ID IN(");
            inClause = inClause.append(clause);
            inClause.append(")");
        } else {
            inClause = new StringBuilder(" AND DOC_ID IN('-1')");
        }
        _log.info("In Clause is : " + inClause);

        Row pickRow = this.getSlsPick1().getCurrentRow();
        Timestamp pickDt = (Timestamp) pickRow.getAttribute("DocDt");
        pickDt = StaticValue.getTruncatedDt(pickDt);


        ViewSlsSoPickItmVOImpl soItm = this.getViewSlsSoPickItmVO1();
        String soItmQuery = soItm.getQuery();
        soItm.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        soItm.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        soItm.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        soItm.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        soItm.setNamedWhereClauseParam("pickDocIdBind", pickRow.getAttribute("DocId"));
        soItm.setNamedWhereClauseParam("tolrnceDtBind", pickDt);
        soItm.setNamedWhereClauseParam("whIdBind", pickRow.getAttribute("WhId"));

        StringBuilder finalQuery = new StringBuilder(soItmQuery);
        finalQuery.append(inClause);
        soItm.setQuery(finalQuery.toString());
        _log.info("Final Query for soPickItm is : " + finalQuery);
        soItm.executeQuery();
        // Setting the default query
        soItm.setQuery(soItmQuery);

    }

    /**
     * Select all the pickSo
     */
    public void selectAllPickSo() {
        _log.info("Setting select to 'Y' to all SalesOrder.");
        viewSlsSoPickVOImpl soImpl = this.getviewSlsSoPick1();
        RowSetIterator ctr = soImpl.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row row = ctr.next();
            row.setAttribute("SelectedTrans", "Y");
        }
        ctr.closeRowSetIterator();
    }

    /**
     * DeSelect all the pickSo
     */
    public void deSelectAllPickSo() {
        _log.info("Setting select to 'N' to all SalesOrder.");
        viewSlsSoPickVOImpl soImpl = this.getviewSlsSoPick1();
        RowSetIterator ctr = soImpl.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row row = ctr.next();
            row.setAttribute("SelectedTrans", "N");
        }
        ctr.closeRowSetIterator();
    }

    /**
     * Select all the pickSoItems
     */
    public void selectAllPickSoItms() {
        _log.info("Setting select to 'Y' to all SalesOrderItms.");
        ViewObjectImpl soItmImpl = this.getViewSlsSoPickItmVO1();
        RowSetIterator ctr = soItmImpl.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row row = ctr.next();
            row.setAttribute("SelectItemChkBxTrans", "Y");
        }
        ctr.closeRowSetIterator();
    }

    /**
     * DeSelect all the pickSoItems
     */
    public void deSelectAllPickSoItms() {
        _log.info("Setting select to 'N' to all SalesOrderItms.");
        ViewObjectImpl soItmImpl = this.getViewSlsSoPickItmVO1();
        RowSetIterator ctr = soItmImpl.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row row = ctr.next();
            row.setAttribute("SelectItemChkBxTrans", "N");
        }
        ctr.closeRowSetIterator();
    }

    /**
     * Method to check if data exists in Lot Bin Serial or not
     * @param row
     * @return
     */
    public Boolean doLotDataExistForSoPickRow(Row row) {
        Boolean k = false;
        ViewObjectImpl pickVo = this.getSlsPick1();
        Row pickCurrRow = pickVo.getCurrentRow();

        this.getSlsPickIssuLot3().executeQuery();
        ViewObjectImpl lotVo1 = this.getSlsPickIssuLot3();
        int i = lotVo1.getRangeSize();
        lotVo1.setRangeSize(-1);
        RowQualifier rqw = new RowQualifier(lotVo1);
        Object pickdocIdO = pickCurrRow.getAttribute("DocId");
        Object pickWhIdO = pickCurrRow.getAttribute("WhId");
        Object sodocIdO = row.getAttribute("DocId");
        Object soItmIdO = row.getAttribute("ItmIdSo");
        Object dlvDtO = row.getAttribute("DlvDt");
        rqw.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                           getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickdocIdO +
                           "' and SoId='" + sodocIdO + "' and ItmId='" + soItmIdO + "' and WhId='" + pickWhIdO +
                           "'  and DlvDt = '" + dlvDtO);
        _log.info("Clause " + rqw.getExprStr());
        Row fltRw[] = lotVo1.getFilteredRows(rqw);
        _log.info("Filtered rows :  " + fltRw.length);
        lotVo1.setRangeSize(i);
        if (fltRw.length > 0) {
            _log.info("set 1 return 1 ");
            k = true;
        }
        _log.info("set 2 return 0");
        return k;
    }

    /**
     * Method to check if Item Being updated is already issued or not
     * Returns arraylist of already issued items    getparamSlocId() + " " + getparamHoOrgId() + " " + getparamOrgId() + " " +
//                                           mtrlVO1.getCurrentRow().getAttribute("WhId").toString() + " " +
//                                           getFYidOrgPack(getparamCldId(), getparamOrgId()) + " " +
//                                           cRow.getAttribute("DocDt") + " " + cRow.getAttribute("DocId") + " " +
//                                           cRow.getAttribute("DocDt") + " " + eoIdVar + "  " +
//                                           cRow.getAttribute("UsrIdCreate") + " " + cRow.getAttribute("UsrIdCreateDt"));
     * @return
     */
    public ArrayList<StringBuilder> checkIfLotDataExistForAnyOfSelectedRows() {
        ArrayList<StringBuilder> i = new ArrayList<StringBuilder>();
        ArrayList<Row> issuedRows = new ArrayList<Row>();

        ViewObjectImpl soItmImpl = this.getViewSlsSoPickItmVO1();
        RowSetIterator ctr = soItmImpl.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row row = ctr.next();
            Object o = row.getAttribute("SelectItemChkBxTrans");
            if (o != null) {
                if ("Y".equals(o.toString())) {
                    Boolean b = doLotDataExistForSoPickRow(row);
                    if (b) {
                        issuedRows.add(row);
                    }
                }
            }
        }
        ctr.closeRowSetIterator();

        if (issuedRows.size() > 0) {
            for (Row r : issuedRows) {
                StringBuilder v = new StringBuilder("So Id :");
                v.append(r.getAttribute("SoId"));
                v.append(" | ");
                v.append(" Item : ");
                v.append(r.getAttribute("ItmDesc"));
                v.append(" | ");
                v.append(" Delivery Date : ");
                v.append(r.getAttribute("DlvDt"));
                i.add(v);
            }
        }
        return i;
    }

    /**
     * Method to add selected Items to pickItems
     * @return
     */
    public Boolean addSelectedItemsToPick() {
        Boolean v = validateItemsToBePicked();
        if (v) {
            ViewObjectImpl soItmImpl = this.getViewSlsSoPickItmVO1();
            RowSetIterator ctr = soItmImpl.createRowSetIterator(null);
            ViewObjectImpl slsPickItm = this.getSlsPickItm1();
            Boolean anyItmSelected = false;
            while (ctr.hasNext()) {
                Row row = ctr.next();
                Object o = row.getAttribute("SelectItemChkBxTrans");
                Object schdlQtyO = row.getAttribute("SchdlQuantTrans");
                Number schdlQty = (Number) schdlQtyO;
                if (o != null && schdlQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                    if ("Y".equals(o.toString())) {
                        itmAddFlg = 1;
                        anyItmSelected = true;
                        RowQualifier rq = new RowQualifier(slsPickItm);
                        rq.setWhereClause("SoId='" + row.getAttribute("DocId") + "' and ItmId='" +
                                          row.getAttribute("ItmIdSo") + "' and DlvDt='" + row.getAttribute("DlvDt") +
                                          "'");
                        Row filteredPickRows[] = slsPickItm.getFilteredRows(rq);
                        if (filteredPickRows.length == 0) {
                            Row newRow = slsPickItm.createRow();
                            newRow.setAttribute("SrNo", getMaxPickSrNo());
                            slsPickItm.insertRow(newRow);
                            newRow.setAttribute("SoId", row.getAttribute("DocId"));
                            newRow.setAttribute("ItmId", row.getAttribute("ItmIdSo"));
                            newRow.setAttribute("ItmUom", row.getAttribute("ItmUomSo"));
                            newRow.setAttribute("SoItmQty", row.getAttribute("PendingQty"));
                            newRow.setAttribute("DlvDt", row.getAttribute("DlvDt"));
                            _log.info("Pick Quantity : " + row.getAttribute("SchdlQuantTrans"));
                            newRow.setAttribute("PickQty", row.getAttribute("SchdlQuantTrans"));
                            newRow.setAttribute("ItmPrice", row.getAttribute("ItmRate"));
                            newRow.setAttribute("SoDt", row.getAttribute("SoDt"));
                            Number totQty = (Number) row.getAttribute("PendingQty");
                            Number pickedQty = (Number) row.getAttribute("SchdlQuantTrans");
                            newRow.setAttribute("BalQty", totQty.subtract(pickedQty));
                            String baseUom = getBaseUom(newRow.getAttribute("ItmId").toString());

                            Number convFactor =
                                EbizParamsMMUtils.getItmUomConvFactor(this, newRow.getAttribute("ItmId").toString(),
                                                                      newRow.getAttribute("ItmUom").toString(),
                                                                      baseUom);

                            newRow.setAttribute("ItmUomBs", baseUom);
                            newRow.setAttribute("UomConvFctr", convFactor);
                            newRow.setAttribute("ItmQtyBs", pickedQty.multiply(convFactor));
                            // newRow.setAttribute("PrjId", row.getAttribute("PrjId"));
                            //autoIssueItmOnAdd(newRow);
                        } else {

                            Row existingRow = filteredPickRows[0];
                            delLotbinSrData(existingRow);
                            Number prevPickQty = StaticValue.NUMBER_ZERO;
                            Number curPickQty = StaticValue.NUMBER_ZERO;
                            prevPickQty = (Number) existingRow.getAttribute("PickQty");
                            curPickQty = (Number) row.getAttribute("SchdlQuantTrans");
                            Number totQty = (Number) row.getAttribute("PendingQty");
                            Number penddingQnt = (Number) existingRow.getAttribute("BalQty"); //added by Rohit
                            _log.info("Previous Qty-" + prevPickQty + "And Current Qty-" + curPickQty +
                                      " penddingQnt =" + penddingQnt + " totQty =" + totQty);
                            existingRow.setAttribute("PickQty", (prevPickQty.add(curPickQty)));
                            Number b = totQty.subtract(curPickQty);
                            Number balQty = (b.compareTo(StaticValue.NUMBER_ZERO) < 0 ? StaticValue.NUMBER_ZERO : b);
                            existingRow.setAttribute("BalQty", balQty);
                            String baseUom = getBaseUom(existingRow.getAttribute("ItmId").toString());

                            Number convFactor =
                                EbizParamsMMUtils.getItmUomConvFactor(this,
                                                                      existingRow.getAttribute("ItmId").toString(),
                                                                      existingRow.getAttribute("ItmUom").toString(),
                                                                      baseUom);

                            existingRow.setAttribute("ItmUomBs", baseUom);
                            existingRow.setAttribute("UomConvFctr", convFactor);
                            Number itmQtyBs = ((prevPickQty.add(curPickQty)).multiply(convFactor));
                            itmQtyBs = ADFBeanUtils.roundOff(itmQtyBs);
                            existingRow.setAttribute("ItmQtyBs", itmQtyBs);
                            //autoIssueItmOnAdd(existingRow);
                        }
                        itmAddFlg = 0;
                    }
                }
            }

            if (anyItmSelected) {
                ctr.closeRowSetIterator();
                this.getDBTransaction().validate();
                this.getDBTransaction().postChanges();
                this.getViewSlsSoPickItm1().executeQuery();
                slsPickItm.executeQuery();
                filterSoPickItems();
            } else {
                ADFModelUtils.showFormattedFacesMessage("No. of Items Selected for picking is zero / Scheduled Quantity is zero.",
                                                        "Please select one or more than one Items from Sales Order Details that need to be added to Pick Item. The Scheduled Quantity of Selected Items should be greater than zero.",
                                                        FacesMessage.SEVERITY_WARN);
            }
        }


        return false;
    }

    /**
     * Method to validate the Enteried quantity of Picked Items
     * @return
     */
    public Boolean validateItemsToBePicked() {
        Boolean b = true;
        ViewObjectImpl soItmImpl = this.getViewSlsSoPickItmVO1();
        RowSetIterator ctr = soItmImpl.createRowSetIterator(null);
        Integer odrTyp = -1;

        ViewObjectImpl pickItmVo = getSlsPickItm1();
        int range = pickItmVo.getRangeSize();
        Row[] allRowsInRange = pickItmVo.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Object soTypeO = allRowsInRange[0].getAttribute("SoTypeTrans");
            odrTyp = (Integer) soTypeO;
        }
        pickItmVo.setRangeSize(range);
        //            -------------------------- Need to Work on This ----------------------------

        while (ctr.hasNext()) {
            Row next = ctr.next();
            Object object = next.getAttribute("SchdlQuantTrans");
            if (object != null) {
                Object selectedO = next.getAttribute("SelectItemChkBxTrans");
                StringBuilder selected =
                    (selectedO == null ? new StringBuilder("N") : new StringBuilder(selectedO.toString()));
                if ("Y".equals(selected.toString())) {
                    Object availableQtyO = next.getAttribute("ItmAvlQty");
                    Object pendingQtyO = next.getAttribute("PendingQty");
                    Object tolQtyO = next.getAttribute("DlvQtySo");
                    Object orderTypeO = next.getAttribute("OrderType");
                    Integer orderType = (orderTypeO == null ? -1 : (Integer) orderTypeO);

                    if (odrTyp == -1) {
                        odrTyp = orderType;
                    }

                    Number availableQty = (availableQtyO == null ? StaticValue.NUMBER_ZERO : (Number) availableQtyO);
                    Number pendingQty = (pendingQtyO == null ? StaticValue.NUMBER_ZERO : (Number) pendingQtyO);
                    Number tolTotQty = (tolQtyO == null ? StaticValue.NUMBER_ZERO : (Number) tolQtyO);
                    Number schdlQty = (Number) object;
                    pendingQty = pendingQty.add(tolTotQty);
                    //  System.out.println("totQtyO : " + tolTotQty + " " + tolQtyO);
                    //  System.out.println("availableQty : " + availableQty);
                    //  System.out.println("pendingQty : " + pendingQty);
                    //  System.out.println("schdlQty : " + schdlQty);

                    if (!odrTyp.equals(orderType)) { //Single Pick cannot be made for Items from Consignment Order and Non-Consignment Orders.
                        ADFModelUtils.showFormattedFacesMessage("Single Pick cannot be made for Items from Consignment Order and Non-Consignment Order.",
                                                                "Please select Items from single type of Sales Order in current Pick.",
                                                                FacesMessage.SEVERITY_ERROR);
                        b = false;
                        break;
                    } else if (ADFBeanUtils.isNumberNegative(schdlQty)) {
                        ADFModelUtils.showFormattedFacesMessage("Scheduled Quantity of selected item [ " +
                                                                next.getAttribute("ItmDesc") +
                                                                "] with Tolerance cannot be less than or equal to Zero!",
                                                                "Please select a Valid Scheduled Quantity!",
                                                                FacesMessage.SEVERITY_ERROR);
                        b = false;
                        break;

                    } else if (schdlQty.compareTo(pendingQty) == 1) {
                        ADFModelUtils.showFormattedFacesMessage("Scheduled Quantity of selected item [ " +
                                                                next.getAttribute("ItmDesc") +
                                                                "] cannot be greater than Pending Quantity!",
                                                                "Please select a Valid Scheduled Quantity!",
                                                                FacesMessage.SEVERITY_ERROR);
                        b = false;
                        break;
                    } else if (schdlQty.compareTo(availableQty) == 1) {
                        ADFModelUtils.showFormattedFacesMessage("Scheduled Quantity of selected item [ " +
                                                                next.getAttribute("ItmDesc") +
                                                                "] cannot be greater than Available Quantity!",
                                                                "Please select a Valid Scheduled Quantity!",
                                                                FacesMessage.SEVERITY_ERROR);
                        b = false;
                        break;
                    }
                }
            }
        }
        ctr.closeRowSetIterator();
        return b;
    }

    public Integer getMaxPickSrNo() {
        ViewObject soItm = this.getSlsPickItm1();
        Integer Srno = 0;
        Integer max = 0;
        soItm.setRangeSize(-1);
        Row row[] = soItm.getAllRowsInRange();
        for (Row r : row) {
            Srno = (Integer) r.getAttribute("SrNo");
            if (Srno > max) {
                max = Srno;
            }
        }

        max = max + 1;
        return max;
    }

    /**
     * Method to check if pick entries are valid before populating Sales Order.
     * @return
     */
    public Boolean arePickEntriesValid() {
        Boolean b = false;
        String coaIdIsNull = isCoaIdIsNull();
        Row row = this.getSlsPick1().getCurrentRow();
        Object dlvAddsIdO = row.getAttribute("DlvAddsId");
        Object eoIdO = row.getAttribute("EoId");
        Object currIdSpO = row.getAttribute("CurrIdSp");
        Object doctO = row.getAttribute("DocDt");
        Object prj = row.getAttribute("PrjId");
        StringBuilder dlvAddsId =
            (dlvAddsIdO == null ? new StringBuilder("") : new StringBuilder(dlvAddsIdO.toString()));
        Integer currIdSp = (currIdSpO == null ? -1 : (Integer) currIdSpO);
        Integer eoId = (eoIdO == null ? -1 : (Integer) eoIdO);
        StringBuilder projecId = (prj == null ? new StringBuilder("") : new StringBuilder(prj.toString()));
        if (eoId.equals(-1)) {
            ADFModelUtils.showFormattedFacesMessage("Customer is not defined for the Current Pick.",
                                                    "Pick cannot be made without defining Customer. Please define Customer for the current Pick!",
                                                    FacesMessage.SEVERITY_ERROR);
        } else if ("Y".equals(coaIdIsNull)) {
            ADFModelUtils.showFormattedFacesMessage("COA is not defined for the selected Customer.",
                                                    "Pick cannot be made for a Customer whose COA is not defined. Please define COA for the currently selected Customer !",
                                                    FacesMessage.SEVERITY_ERROR);
        } else if ("".equals(dlvAddsId)) {
            ADFModelUtils.showFormattedFacesMessage("Delivery Address is not defined for the Current Pick.",
                                                    "Pick cannot be made without defining Delivery Address. Please define Delivery Address for the current Pick!",
                                                    FacesMessage.SEVERITY_ERROR);
        } else if (currIdSp.equals(-1)) {
            ADFModelUtils.showFormattedFacesMessage("Currency is not defined for the Current Pick.",
                                                    "Pick cannot be made without defining Currency. Please define Currency for the current Pick!",
                                                    FacesMessage.SEVERITY_ERROR);

        } else if ("".equals(projecId)) {
            ADFModelUtils.showFormattedFacesMessage("Project is not Selected for the Current Pick.",
                                                    "Pick cannot be made without Project. Please select Project for the current Pick!",
                                                    FacesMessage.SEVERITY_ERROR);
        } else {
            b = true;
            filterOrderData(StaticValue.getTruncatedDt((Timestamp) doctO));
        }

        return b;
    }

    public void delLotbinSrData(Row row) {
        Object pickDocIdO = row.getAttribute("DocId");
        Object whIdO = row.getAttribute("WhId");
        Object itmIdO = row.getAttribute("ItmId");
        Object soIdO = row.getAttribute("SoId");
        _log.info("in remove lot bin sr data ");
        ViewObjectImpl lotVo = this.getSlsPickIssuLot3();
        ViewObjectImpl binVo = this.getSlsPickIssuBin2();
        ViewObjectImpl srVo = this.getSlsPickIssuSr2();

        binVo.executeQuery(); // for detecting the row to delete for auto issue because it is coming through the function.
        srVo.executeQuery();

        RowQualifier rqwLot = new RowQualifier(lotVo);
        RowQualifier rqwBin = new RowQualifier(binVo);
        RowQualifier rqwSr = new RowQualifier(srVo);

        _log.info("Pick iD==" + pickDocIdO + " =whId =" + whIdO + " soId =" + soIdO + " and item id " + itmIdO);

        rqwLot.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                              getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickDocIdO +
                              "' and SoId='" + soIdO + "' and ItmId='" + itmIdO + "' and WhId='" + whIdO + "'");
        // _log.info("clause " + rqwLot.getExprStr());

        Row lotfltRw[] = lotVo.getFilteredRows(rqwLot);
        // System.out.println(" " + lotfltRw.length);
        if (lotfltRw.length > 0) {
            for (Row r2 : lotfltRw) {
                r2.remove();
            }
        }
        // _log.info("======================");

        rqwBin.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                              getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickDocIdO +
                              "' and SoId='" + soIdO + "' and ItmId='" + itmIdO + "' and WhId='" + whIdO + "'");
        //  System.out.println("clause " + rqwBin.getExprStr());

        Row binfltRw[] = binVo.getFilteredRows(rqwBin);
        // System.out.println(" " + binfltRw.length);
        if (binfltRw.length > 0) {
            for (Row r3 : binfltRw) {
                r3.remove();
            }
        }
        // System.out.println("===========================");

        rqwSr.setWhereClause("OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and SlocId=" +
                             getparamSlocId() + " and CldId='" + getparamCldId() + "' and DocId='" + pickDocIdO +
                             "' and SoId='" + soIdO + "' and ItmId='" + itmIdO + "' and WhId='" + whIdO + "'");
        //  System.out.println("clause " + rqwSr.getExprStr());

        Row srfltRw[] = srVo.getFilteredRows(rqwSr);
        // System.out.println(" " + srfltRw.length);
        if (srfltRw.length > 0) {
            for (Row r4 : srfltRw) {
                r4.remove();
            }
        }

        lotVo.executeQuery();
        binVo.executeQuery();
        srVo.executeQuery();
        this.getDBTransaction().postChanges();
    }


    public void setSoDataOnEdit() {
        Row currentRow = this.getSlsPick1().getCurrentRow();
        Object dt = currentRow.getAttribute("DocDt");
        StaticValue.getTruncatedDt((Timestamp) dt);
        filterOrderData(StaticValue.getTruncatedDt((Timestamp) dt));
        HashSet soIds = new HashSet();
        ViewObjectImpl impl = this.getSlsPickItm1();
        RowSetIterator ctr = impl.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();
            Object soId = next.getAttribute("SoId");
            soIds.add((soId == null ? new StringBuilder("") : new StringBuilder(soId.toString())));
        }
        ctr.hasNext();
        _log.info(" No. of So : " + soIds.size());
        RowSetIterator soItmItr = this.getviewSlsSoPick1().createRowSetIterator(null);
        while (soItmItr.hasNext()) {
            Row next = soItmItr.next();
            Object soIdO = next.getAttribute("DocId");
            StringBuilder soId = (soIdO == null ? new StringBuilder(" ") : new StringBuilder(soIdO.toString()));
            Iterator soIdItr = soIds.iterator();
            while (soIdItr.hasNext()) {
                StringBuilder next_2 = (StringBuilder) soIdItr.next();
                _log.info("Available So id : " + soId);
                _log.info("ViewSoPick So id : " + next_2);
                if (soId.toString().equals(next_2.toString())) {
                    next.setAttribute("SelectedTrans", "Y");
                    _log.info("Setting SO_ID : " + soId + " To : Y");
                    break;
                }
            }
        }
        soItmItr.closeRowSetIterator();
        filterSoPickItems();
    }

    /**
     * Method to fetch current Pick Item Quantity
     * @return
     */
    public Number getCurrentPickQty() {
        Number n = StaticValue.NUMBER_ZERO;
        Row row = this.getSlsPickItm1().getCurrentRow();
        if (row != null) {
            Object pickQtyO = row.getAttribute("ItmQtyBs");
            if (pickQtyO != null) {
                n = (Number) pickQtyO;
            }
        }
        _log.info("Current pick Quantity : " + n);
        return n;
    }

    public void filterShipGenVw() {
        ViewObjectImpl impl = this.getviewSlsShipmntGen1();
        Row currentRow = impl.getCurrentRow();
        Object cb = currentRow.getAttribute("selectPickListCbTrans");
        StringBuilder c = (cb == null ? new StringBuilder("N") : new StringBuilder(cb.toString()));
        impl.setNamedWhereClauseParam("DlvAddsBind", null);
        impl.setNamedWhereClauseParam("PickDispIdBind", null);
        impl.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        impl.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
        impl.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
        impl.setNamedWhereClauseParam("SlocIdBind", getparamSlocId());
        impl.setNamedWhereClauseParam("ShipDocIdBind", null);
        if ("N".equals(c.toString())) {
            impl.setNamedWhereClauseParam("DlvAddsBind", currentRow.getAttribute("DlvAddsId"));
            impl.setNamedWhereClauseParam("eoIdBind", currentRow.getAttribute("EoId"));
            impl.setNamedWhereClauseParam("whIdBind", currentRow.getAttribute("WhId"));

        } else {
            impl.setNamedWhereClauseParam("DlvAddsBind", null);
            impl.setNamedWhereClauseParam("eoIdBind", null);
            impl.setNamedWhereClauseParam("whIdBind", null);
        }

        impl.executeQuery();

        impl.findAndSetCurrentRowByKey(currentRow.getKey(), 1);
        currentRow.setAttribute("selectPickListCbTrans", cb);
        //  System.out.println("Query Executed!");
    }

    /**
     * Method to fetch Shipping adds on the basis of EoId
     * @param eoId
     * @return
     */
    public String getDefaultShippingAddsOfCurrEo(Integer eoId) {
        Object shipAddsO =
            ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_DFLT_SHIP_ADDS_OF_EO_ID(?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                       EbizParams.GLBL_HO_ORG_ID(), eoId
        }, Types.VARCHAR);
        _log.info("Setting ShipAdds to : " + shipAddsO);
        return (shipAddsO == null ? null : shipAddsO.toString());
    }

    /**
     * flag = S for Save and C for cancel
     * @param flag
     * @return
     */
    //    public String functionsCallOnPickSave(String flag) {
    //        Boolean b = true;
    //        String dispDocNo = generateDispDocNo("pick");
    //        StringBuilder m = new StringBuilder("");
    //        try {
    //            if (flag.toString().equals("S")) {
    //                getSlsPick1().getCurrentRow().setAttribute("Freeze", "Y");
    //            } else if (flag.toString().equals("C")) {
    //                String cancelPickList = cancelPickList();
    //                if ("Y".equals(cancelPickList)) {
    //                    UpdateOrdStat("C");
    //                    if (b) {
    //                        m = new StringBuilder("PickId <b>");
    //                        m.append(dispDocNo);
    //                        m.append(" </b> Cancelled !");
    //                        m.append("</br></br> Now the Sales Order Items in this Pick will be available for Pick. ");
    //                    }
    //                } else {
    //                    b = false;
    //                    _log.info("Pick Cancellation failed...");
    //                    ADFModelUtils.showFormattedFacesMessage("There was some problem in Cancelling Pick !",
    //                                                            "There was some problem while Cancelling current Pick.</br>Please try again! </br></br>If the problem persists, contact ESS !",
    //                                                            FacesMessage.SEVERITY_INFO);
    //                    return null;
    //                }
    //            } else if (flag.toString().equals("M")) {
    //                UpdateOrdStat("S");
    //                _log.info("Updated Sales Order status Changes...");
    //            }
    //        } catch (Exception e) {
    //            b = false;
    //            ADFModelUtils.showFormattedFacesMessage("There have been some error during saving Data !</br> Please Try again ! If the problem persists contact ESS !",
    //                                                    e.getMessage(), FacesMessage.SEVERITY_FATAL);
    //            e.printStackTrace();
    //        }
    //
    //        if (b) {
    //            try {
    //                getDBTransaction().commit();
    //            }    catch (Exception e) {
    //                b = false;
    //                ADFModelUtils.showFormattedFacesMessage("There have been some error during saving Data !</br> Please Try again ! If the problem persists contact ESS !",
    //                                                        e.getMessage(),
    //                                                        FacesMessage.SEVERITY_FATAL); // TODO: Add catch code
    //                e.printStackTrace();
    //                getDBTransaction().rollback();
    //            }
    //        }
    //        if (b) {
    //            getSlsPick1().executeQuery();
    //            resetTreeTableFilter();
    //            String currentdocId = getCurrentdocId();
    //            setOncurRow(currentdocId);
    //            StringBuilder mc = new StringBuilder("PickId <b>");
    //            mc.append(dispDocNo);
    //            mc.append(" </b> saved Sucessfully !");
    //            if (!flag.equals("M")) {
    //                if (m.length() == 0) {
    //                    m.append("The Pick List is saved Sucessfully ! </br></br> Now this Pick will be available for Shipment.");
    //                }
    //            } else {
    //                if (m.length() == 0) {
    //                    m.append("The Pick List is saved Sucessfully ! </br></br> Now you can reserve stock for this Pick. After this Pick will be available for Shipment.");
    //                }
    //            }
    //            ADFModelUtils.showFormattedFacesMessage(mc.toString(), m.toString(), FacesMessage.SEVERITY_INFO);
    //        }else{
    //            ADFModelUtils.showFormattedFacesMessage("There have been some error during saving Data !","</br> Please Try again ! If the problem persists contact ESS !",
    //                                                    FacesMessage.SEVERITY_FATAL); // TODO: Add catch code
    //        }
    //        return b ? "V" : null;
    //    }
    public String functionsCallOnPickSave(String flag) {
        try {
            StringBuilder m = new StringBuilder("");
            String dispDocNo = generateDispDocNo("pick");
            if (flag.toString().equals("S")) {
                getSlsPick1().getCurrentRow().setAttribute("Freeze", "Y");
            } else if (flag.toString().equals("C")) {
                String cancelPickList = cancelPickList();
                if ("Y".equals(cancelPickList)) {
                    UpdateOrdStat("C");
                    _log.info("Updated Sales Order status Changes...");
                    //updatePickStausCancel("true");
                    _log.info("Pick Cancelled sucessfully...");
                    m = new StringBuilder("PickId <b>");
                    m.append(dispDocNo);
                    m.append(" </b> Cancelled !");
                    m.append("</br></br> Now the Sales Order Items in this Pick will be available for Pick. ");
                } else {
                    _log.info("Pick Cancellation failed...");
                    ADFModelUtils.showFormattedFacesMessage("There was some problem in Cancelling Pick !",
                                                            "There was some problem while Cancelling current Pick.</br>Please try again! </br></br>If the problem persists, contact ESS !",
                                                            FacesMessage.SEVERITY_INFO);
                    return null;
                }
            } else if (flag.toString().equals("M")) {
                /* getDBTransaction().postChanges();
                _log.info("Posted Changes...");
                reserveStock();
                _log.info("Stock Reserved...");*/
                UpdateOrdStat("S");
                _log.info("Updated Sales Order status Changes...");
            }
            String currentdocId = getCurrentdocId();
            getDBTransaction().commit();
            getSlsPick1().executeQuery();
            resetTreeTableFilter();
            setOncurRow(currentdocId);
            StringBuilder mc = new StringBuilder("PickId <b>");
            mc.append(dispDocNo);
            mc.append(" </b> saved Sucessfully !");
            if (!flag.equals("M")) {
                if (m.length() == 0) {
                    m.append("The Pick List is saved Sucessfully ! </br></br> Now this Pick will be available for Shipment.");
                }
            } else {
                if (m.length() == 0) {
                    m.append("The Pick List is saved Sucessfully ! </br></br> Now you can reserve stock for this Pick. After this Pick will be available for Shipment.");
                }
            }
            ADFModelUtils.showFormattedFacesMessage(mc.toString(), m.toString(), FacesMessage.SEVERITY_INFO);
            return "V";
        } catch (Exception e) {
            ADFModelUtils.showFormattedFacesMessage("There have been some error during saving Data !</br> Please Try again ! If the problem persists contact ESS !",
                                                    e.getMessage(), FacesMessage.SEVERITY_FATAL);
            e.printStackTrace();
        }


        return null;
        //his.pick_mode = "V";
    }

    public Integer callRelsFunctionOnEdit() {
        Integer i = -1;

        try {

            /* MM.MM_UPDT_STK_RESV_CNCL(P_CLD_ID,P_SLOC_ID,P_ORG_ID,P_DOC_ID,P_FY_ID,329)  */
            Row currentRow = this.getSlsPick1().getCurrentRow();
            Object o = ADFModelUtils.callFunction(this, new StringBuilder("MM.MM_UPDT_STK_RESV_CNCL(?,?,?,?,?,?)"), new Object[] {
                                                  getparamCldId(), getparamSlocId(), getparamOrgId(),
                                                  currentRow.getAttribute("DocId"), currentRow.getAttribute("FyId"), 329
            }, Types.INTEGER);
            i = (o == null ? -1 : (Integer) o);
            if (i == 1) {
                getDBTransaction().postChanges();
            }

            _log.info("Return Value from Release : " + i);
        } catch (Exception e) {
            i = -1;
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'MM_UPDT_STK_RELS' ! " + e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_FATAL);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }
        return i;
    }

    /**
     * Container's getter for LovItmNmFrmIdVO1.
     * @return LovItmNmFrmIdVO1
     */
    public ViewObjectImpl getLovItmNmFrmIdVO1() {
        return (ViewObjectImpl) findViewObject("LovItmNmFrmIdVO1");
    }

    /**
     * Container's getter for PackagingMtrl1.
     * @return PackagingMtrl1
     */
    public PackagingMtrlVOImpl getPackagingMtrl1() {
        return (PackagingMtrlVOImpl) findViewObject("PackagingMtrl1");
    }


    /**
     * Container's getter for LOVForPackagingMaterialItemQuery1.
     * @return LOVForPackgingMaterialItemQuery1
     */
    public LOVForPackagingMaterialItemQueryVOImpl getLOVForPackagingMaterialItemQuery1() {
        return (LOVForPackagingMaterialItemQueryVOImpl) findViewObject("LOVForPackagingMaterialItemQuery1");
    }

    /**
     * Container's getter for PackagingMtrlVO1.
     * @return PackagingMtrlVO1
     */
    public PackagingMtrlVOImpl getPackagingMtrlVO1() {
        return (PackagingMtrlVOImpl) findViewObject("PackagingMtrlVO1");
    }

    /**
     * Container's getter for PckToPckMtrlVL1.
     * @return PckToPckMtrlVL1
     */
    public ViewLinkImpl getPckToPckMtrlVL1() {
        return (ViewLinkImpl) findViewLink("PckToPckMtrlVL1");
    }

    /*
     * This Method is used to insert the Packaging Material Data
     * into the SLS$PACK$PCK$MTL table.
     */
    public void insertIntoPck() {
        ViewObjectImpl pckMtlVO = this.getPackagingMtrlVO1();
        ViewObjectImpl impl = this.getSlsPack1();
        String itemIdVar = null;
        String itemUomVar = null;
        Number itmQtyVar = new Number(0);
        String isReturnVar = null;
        String whIdVar = null;
        DualPackMtlVOImpl dualPackMtl1 = this.getDualPackMtl1();
        Row dualCRow = dualPackMtl1.getCurrentRow();
        //  Row cRow = pckMtlVO.getCurrentRow();
        if (dualCRow != null) {
            itemIdVar =
                (dualCRow.getAttribute("TransItmId") == null ? " " : dualCRow.getAttribute("TransItmId").toString());
            //   System.out.println("Item Id" + itemIdVar);
            itemUomVar =
                (dualCRow.getAttribute("TransUOMId") == null ? " " : dualCRow.getAttribute("TransUOMId").toString());
            //   System.out.println("Item Uom" + itemUomVar);
            itmQtyVar =
                (dualCRow.getAttribute("TransPckQty") == null ? new Number(0) :
                 (Number) dualCRow.getAttribute("TransPckQty"));
            //  System.out.println("Itm Qty" + itmQtyVar);
            isReturnVar =
                (dualCRow.getAttribute("TransIsReturnable") == null ? " " :
                 dualCRow.getAttribute("TransIsReturnable").toString());
            //   System.out.println("Return" + isReturnVar);

            whIdVar =
                (dualCRow.getAttribute("TransWhId") == null ? " " : dualCRow.getAttribute("TransWhId").toString());
        }
        Integer pckOdr = new Integer(0);
        String ItmSerialFlagVar = null;
        String itmBaseUomVar = null;
        RowSet frmIdVO1 = this.getLOVForPackagingMaterialItemQuery1();
        Row[] filteredRows = frmIdVO1.getFilteredRows("ItmId", itemIdVar);
        //  System.out.println("Fileterd rows are" + filteredRows.length);
        if (filteredRows.length > 0) {
            if (filteredRows[0].getAttribute("PickOrder") != null) {
                pckOdr = ((Integer) filteredRows[0].getAttribute("PickOrder"));
                //       System.out.println("Pick Order is" + pckOdr);
            } else {
                pckOdr = 307;
            }
            ItmSerialFlagVar = ((String) filteredRows[0].getAttribute("SerializedFlg"));
            itmBaseUomVar = ((String) filteredRows[0].getAttribute("UomBasic"));
            //  setIsItemSerializedFlagTrans((String)filteredRows[0].getAttribute("SerializedFlg"));
        }
        if (itemIdVar != " " && itemUomVar != " " && whIdVar != " ") {
            Row createRow = pckMtlVO.createRow();
            //  Row createRow = pckMtlVO.getCurrentRow();
            if (createRow != null) {
                createRow.setAttribute("ItmId", itemIdVar);
                createRow.setAttribute("ItmUom", itemUomVar);
                createRow.setAttribute("PckItmQty", itmQtyVar);
                Object eoIdO = getSlsPick1().getCurrentRow().getAttribute("EoId");
                Object projId = getSlsPick1().getCurrentRow().getAttribute("PrjId");
                //     System.out.println("Eo Id is : " + eoIdO);

                Object callDbProcedure =
                    ADFModelUtils.callFunction(this, new StringBuilder("fn_get_eo_pack_rtrn_flg(?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), eoIdO
                }, Types.VARCHAR);

                createRow.setAttribute("RetFlg", callDbProcedure == null ? "N" : callDbProcedure.toString());
                createRow.setAttribute("IsConsumable", "Y");
                createRow.setAttribute("WhId", whIdVar);
                createRow.setAttribute("PrjId", projId);
                createRow.setAttribute("TransPickOrder", pckOdr);
                createRow.setAttribute("TransItemSerialized", ItmSerialFlagVar);
                createRow.setAttribute("IsItemSerializedFlagTrans", ItmSerialFlagVar);
                createRow.setAttribute("ItmUomBs", itmBaseUomVar);
                pckMtlVO.insertRow(createRow);
                impl.getCurrentRow().setAttribute("WhId", whIdVar);
                this.getDBTransaction().commit();
                dualCRow.setAttribute("TransItmId", null);
                dualCRow.setAttribute("TransWhId", null);
                dualCRow.setAttribute("TransUOMId", null);
                dualCRow.setAttribute("TransPckQty", null);
                dualCRow.setAttribute("TransItemName", null);
                dualCRow.setAttribute("TransAvailableQty", null);
                executeLovItem();
            }

        } else {
            ADFModelUtils.showFormattedFacesMessage("Please Select the Required Fields!!",
                                                    "You Might have not selected Item Name , Wharehouse Name or Item Uom!!",
                                                    FacesMessage.SEVERITY_ERROR);
        }
    }

    /**
     * Container's getter for DualPackMtl1.
     * @return DualPackMtl1
     */
    public DualPackMtlVOImpl getDualPackMtl1() {
        return (DualPackMtlVOImpl) findViewObject("DualPackMtl1");
    }

    /**
     * Container's getter for SLSPckMtlLot1.
     * @return SLSPckMtlLot1
     */
    public SLSPckMtlLotVOImpl getSLSPckMtlLot1() {
        return (SLSPckMtlLotVOImpl) findViewObject("SLSPckMtlLot1");
    }

    /**
     * Container's getter for SLSPckMtlBin1.
     * @return SLSPckMtlBin1
     */
    public SLSPckMtlBinVOImpl getSLSPckMtlBin1() {
        return (SLSPckMtlBinVOImpl) findViewObject("SLSPckMtlBin1");
    }

    /**
     * Container's getter for SLSPckMtlSR1.
     * @return SLSPckMtlSR1
     */
    public SLSPckMtlSRVOImpl getSLSPckMtlSR1() {
        return (SLSPckMtlSRVOImpl) findViewObject("SLSPckMtlSR1");
    }

    /**
     * Container's getter for PackagingMtrl2.
     * @return PackagingMtrl2
     */
    public PackagingMtrlVOImpl getPackagingMtrl2() {
        return (PackagingMtrlVOImpl) findViewObject("PackagingMtrl2");
    }

    /**
     * Container's getter for SLSPckMtlLot2.
     * @return SLSPckMtlLot2
     */
    public SLSPckMtlLotVOImpl getSLSPckMtlLot2() {
        return (SLSPckMtlLotVOImpl) findViewObject("SLSPckMtlLot2");
    }

    /**
     * Container's getter for PckMtrlToPckMrtlLOTVL.
     * @return PckMtrlToPckMrtlLOTVL
     */
    public ViewLinkImpl getPckMtrlToPckMrtlLOTVL() {
        return (ViewLinkImpl) findViewLink("PckMtrlToPckMrtlLOTVL");
    }

    public void issueAutoItemInPckMtrl() {
        // All the changes to this method needs to be copied to method autoIssueItmOnAdd(),
        String uomBase = null;
        ViewObject packItm = this.getPackagingMtrlVO1();
        Row itmRow = packItm.getCurrentRow();
        Row pickRow = getSlsPick1().getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

        _log.info("wh-" + itmRow.getAttribute("WhId") + "itm-" + itmRow.getAttribute("ItmId") + "pickQty-" +
                  itmRow.getAttribute("PckItmQty") + "PickOrd-" + itmRow.getAttribute("TransPickOrder") + "SrNo-" +
                  //  itmRow.getAttribute("SrNo") + "DocID-" + itmRow.getAttribute("DocId") + "Uom-" +
                  itmRow.getAttribute("ItmUom"));

        // if (getBaseUomforPckMtrl((String) itmRow.getAttribute("ItmId")) != null) {
        //     uomBase = getBaseUomforPckMtrl(itmRow.getAttribute("ItmId").toString());
        // } else {
        //     uomBase = itmRow.getAttribute("ItmUom").toString();
        // }
        uomBase = EbizParamsMMUtils.getUomOfPassedItm(this, itmRow.getAttribute("ItmId").toString(), "B");
        Number convFactor =
            EbizParamsMMUtils.getItmUomConvFactor(this, itmRow.getAttribute("ItmId").toString(),
                                                  itmRow.getAttribute("ItmUom").toString(), uomBase);

        Object ret =
            ADFModelUtils.callFunction(this,
                                       new StringBuilder("SLS.FN_SLS_PCK_MTL_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                       getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
                                       itmRow.getAttribute("WhId"), itmRow.getAttribute("ItmId"),
                                       itmRow.getAttribute("PckItmQty"), itmRow.getAttribute("TransPickOrder"),
                                       itmRow.getAttribute("TransItemSerialized"), binChkFlg,
                                       itmRow.getAttribute("DocId"), itmRow.getAttribute("PickId"),
                                       pickRow.getAttribute("DocDt"), uomBase, itmRow.getAttribute("ItmUom"),
                                       convFactor, pickRow.getAttribute("FyId")
        }, Types.NUMERIC);
        _log.info("Retval AutoIssue-" + ret);
        getDBTransaction().postChanges();
        this.getSLSPckMtlBinVO1().executeQuery();
        this.getSLSPckMtlLotVO1().executeQuery();
        this.getSLSPckMtlSRVO1().executeQuery();
    }

    /**
     * Container's getter for SLSPckMtlBinVO1.
     * @return SLSPckMtlBinVO1
     */
    public SLSPckMtlBinVOImpl getSLSPckMtlBinVO1() {
        return (SLSPckMtlBinVOImpl) findViewObject("SLSPckMtlBinVO1");
    }

    /**
     * Container's getter for SLSPckMtrlTOPckMtrlBinVL1.
     * @return SLSPckMtrlTOPckMtrlBinVL1
     */
    public ViewLinkImpl getSLSPckMtrlTOPckMtrlBinVL1() {
        return (ViewLinkImpl) findViewLink("SLSPckMtrlTOPckMtrlBinVL1");
    }

    /**
     * Container's getter for SLSPckMtlLotVO1.
     * @return SLSPckMtlLotVO1
     */
    public SLSPckMtlLotVOImpl getSLSPckMtlLotVO1() {
        return (SLSPckMtlLotVOImpl) findViewObject("SLSPckMtlLotVO1");
    }

    /**
     * Container's getter for SLSPckMtrlTOPckLotVL1.
     * @return SLSPckMtrlTOPckLotVL1
     */
    public ViewLinkImpl getSLSPckMtrlTOPckLotVL1() {
        return (ViewLinkImpl) findViewLink("SLSPckMtrlTOPckLotVL1");
    }

    /**
     * Container's getter for SLSPckMtlSRVO1.
     * @return SLSPckMtlSRVO1
     */
    public SLSPckMtlSRVOImpl getSLSPckMtlSRVO1() {
        return (SLSPckMtlSRVOImpl) findViewObject("SLSPckMtlSRVO1");
    }

    /**
     * Container's getter for SLSPckMtrlToPckMtrlSrVL1.
     * @return SLSPckMtrlToPckMtrlSrVL1
     */
    public ViewLinkImpl getSLSPckMtrlToPckMtrlSrVL1() {
        return (ViewLinkImpl) findViewLink("SLSPckMtrlToPckMtrlSrVL1");
    }

    /**
     * Container's getter for ViewMmStkSummBinVO1.
     * @return ViewMmStkSummBinVO1
     */
    public ViewMmStkSummBinVOImpl getViewMmStkSummBinVO1() {
        return (ViewMmStkSummBinVOImpl) findViewObject("ViewMmStkSummBinVO1");
    }

    /**
     * Container's getter for SLSPckMtrlToViewMMStkBinVL1.
     * @return SLSPckMtrlToViewMMStkBinVL1
     */
    public ViewLinkImpl getSLSPckMtrlToViewMMStkBinVL1() {
        return (ViewLinkImpl) findViewLink("SLSPckMtrlToViewMMStkBinVL1");
    }

    /**
     * Container's getter for ViewMmStkSummLotVO1.
     * @return ViewMmStkSummLotVO1
     */
    public ViewMmStkSummLotVOImpl getViewMmStkSummLotVO1() {
        return (ViewMmStkSummLotVOImpl) findViewObject("ViewMmStkSummLotVO1");
    }

    /**
     * Container's getter for PckMtrlToViewMMStkLotVL1.
     * @return PckMtrlToViewMMStkLotVL1
     */
    public ViewLinkImpl getPckMtrlToViewMMStkLotVL1() {
        return (ViewLinkImpl) findViewLink("PckMtrlToViewMMStkLotVL1");
    }

    /**
     * Container's getter for ViewMmStkSummSrVO1.
     * @return ViewMmStkSummSrVO1
     */
    public ViewMmStkSummSrVOImpl getViewMmStkSummSrVO1() {
        return (ViewMmStkSummSrVOImpl) findViewObject("ViewMmStkSummSrVO1");
    }

    /**
     * Container's getter for SLSPckMtrlTOViewMMStkSrVL1.
     * @return SLSPckMtrlTOViewMMStkSrVL1
     */
    public ViewLinkImpl getSLSPckMtrlTOViewMMStkSrVL1() {
        return (ViewLinkImpl) findViewLink("SLSPckMtrlTOViewMMStkSrVL1");
    }

    public StringBuilder isLotQtyValidForPckMtrl() {

        StringBuilder g = new StringBuilder("Y");
        //ArrayList to store lots who have been selected for Issuing
        ArrayList<Row> selectedLot = new ArrayList<Row>();
        ViewMmStkSummLotVOImpl issueLotVo = getViewMmStkSummLotVO1();
        RowSetIterator issueLotItr = issueLotVo.createRowSetIterator(null);
        while (issueLotItr.hasNext()) {
            Row issueRow = issueLotItr.next();
            Object issueQtyO = issueRow.getAttribute("TransIssuQtyValue");
            Number issueQty = (issueQtyO == null ? StaticValue.NUMBER_ZERO : (Number) issueQtyO);
            if (issueQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                selectedLot.add(issueRow);
            }
        }
        issueLotItr.closeRowSetIterator();
        //Lot vo to check total issued qty of a lot
        ViewObjectImpl lotVo = this.getSLSPckMtlLotVO1();
        lotVo.executeQuery();
        int i = lotVo.getRangeSize();
        lotVo.setRangeSize(-1);
        for (Row r : selectedLot) {
            Object lotAvlQtyO = r.getAttribute("TotStk");
            Object entredIssueQuantO = r.getAttribute("TransIssuQtyValue");

            Number lotAvlQty = (lotAvlQtyO == null ? StaticValue.NUMBER_ZERO : (Number) lotAvlQtyO);
            Number entredIssueQuant =
                (entredIssueQuantO == null ? StaticValue.NUMBER_ZERO : (Number) entredIssueQuantO);

            StringBuilder clause = new StringBuilder("");
            clause.append("ItmId = '").append(r.getAttribute("ItmId")).append("'");
            clause.append("AND LotId = '").append(r.getAttribute("LotId")).append("'");
            RowQualifier rq = new RowQualifier(lotVo);
            rq.setWhereClause(clause.toString());
            Row[] lotRows = lotVo.getFilteredRows(rq);
            Number totPickQty = StaticValue.NUMBER_ZERO;
            for (Row lotR : lotRows) {
                Object pickO = lotR.getAttribute("PckQty");
                if (pickO != null) {
                    totPickQty = totPickQty.add((Number) pickO);
                }
            }
            totPickQty = totPickQty.add(entredIssueQuant);
            if (totPickQty.compareTo(lotAvlQty) > 0) {
                g = new StringBuilder("Total Issue Quantity of lot id : ");
                g.append(r.getAttribute("LotId"));
                g.append(" for selected Item in current PickList is Exceeding the Total Available Quantity.\n\n");
                g.append("<br /><br />Lot Available Quantity : ");
                g.append(lotAvlQty);
                g.append("<br /><br />Total Picked Quantity for Selected Item Currently : ");
                g.append(totPickQty);
                g.append("<br /><br />Please enter correct Issue Quantity !");
                break;
                // Total Issue Quantity of lot id : for selected Item in this PickList is Exceeding the Total Avalable Quantity.
            }
        }
        lotVo.setRangeSize(i);
        return g;
    }

    public Number getCurrentPickQtyForPckMtrl() {
        Number n = StaticValue.NUMBER_ZERO;
        Row row = this.getPackagingMtrlVO1().getCurrentRow();
        if (row != null) {
            Object pickQtyO = row.getAttribute("PckItmQtyBs");
            if (pickQtyO != null) {
                n = (Number) pickQtyO;
            }
        }
        _log.info("Current pick Quantity : " + n);
        return n;
    }

    public String insertIntoPickItmLotForPckMtrl() {
        ViewObjectImpl mtlItm = this.getPackagingMtrlVO1();
        ViewObjectImpl mtlLot = this.getSLSPckMtlLotVO1();

        Row currItm = mtlItm.getCurrentRow();
        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getViewMmStkSummLotVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("lenth sr     " + srRow.length);
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {
                        // Filter Lot Table to ckeck Lot exist or not, Basis of DocId , SoId , ItmId and LotId
                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and PickId ='" +
                                                    currItm.getAttribute("PickId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        _log.info("" + rowQualifier.getExprStr());
                        // Check that Lot exist or not for that item
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) ==
                                    0) {
                                    _log.info("Lot remove-------------------");
                                    //  System.out.println("removing row is:   " + r + "----------------!");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >
                                           0) {

                                    _log.info("Lot Update -------------------");
                                    r.setAttribute("PckQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                    Number pickedQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                    //     System.out.println("PickQty From PopUp::::::: " + pickedQty);
                                    String baseUom = getBaseUomforPckMtrl(rr.getAttribute("ItmId").toString());
                                    //     System.out.println("BAseUom in Lot INsert:::" + baseUom);


                                    Object convFctr =
                                        ADFModelUtils.callFunction(this,
                                                                   new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                                                   EbizParams.GLBL_APP_SERV_LOC(),
                                                                   EbizParams.GLBL_APP_CLD_ID(),
                                                                   EbizParams.GLBL_APP_USR_ORG(),
                                                                   rr.getAttribute("ItmId"),
                                                                   currItm.getAttribute("ItmUom"),
                                                                   currItm.getAttribute("ItmUomBs")
                                    }, Types.NUMERIC);
                                    /* BigDecimal convFctr =
                                                (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)",
                                                                               new Object[] { getparamSlocId(), getparamCldId(), getparamOrgId(),
                                                                                              newRow.getAttribute("ItmId"), baseUom,
                                                                                              newRow.getAttribute("ItmUom") }); */
                                    Number uomFctr = new Number(1);
                                    try {
                                        uomFctr = new Number(convFctr);
                                    } catch (Exception e) {
                                        _log.info(e);
                                    }
                                    if (!uomFctr.equals(-1)) {
                                        pickedQty = ADFBeanUtils.roundOff(pickedQty.multiply(uomFctr));
                                        r.setAttribute("PckQty", pickedQty);
                                    } else {
                                        pickedQty = ADFBeanUtils.roundOff(pickedQty.multiply(1));
                                        r.setAttribute("PckQty", pickedQty);
                                    }
                                    // Changes done for Tolerance - start
                                    //  r.setAttribute("DlvDt", currItm.getAttribute("DlvDt"));
                                    // Changes done for Tolerance - end

                                    String lotId = rr.getAttribute("LotId").toString();
                                    Number qty = (Number) rr.getAttribute("TransIssuQtyValue");
                                    //   System.out.println("Lot Id is In InsertLot::::" + lotId + " :: " + qty);
                                    //   System.out.println("this.getPriceForLotForPckMtrl(lotId, qty)::::::: " +
                                    //                    this.getPriceForLotForPckMtrl(lotId, qty));
                                    _log.info(" key :" + lotId + " lotval :" + qty);
                                    if (this.getPriceForLotForPckMtrl(lotId, qty) != null) {
                                        r.setAttribute("ItmLotCost", this.getPriceForLotForPckMtrl(lotId, qty));
                                    }
                                    //   System.out.println("updated row is:   " + r + "----------------!");
                                    this.getSLSPckMtlLotVO1().executeQuery();
                                }
                            }
                        } else {

                            if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("PickId", currItm.getAttribute("PickId"));
                                //  lotInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));


                                lotInst.setAttribute("PckQtyBs", rr.getAttribute("TransIssuQtyValue"));

                                Number pickedQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                String baseUom = getBaseUomforPckMtrl(rr.getAttribute("ItmId").toString());
                                lotInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                Object convFctr =
                                    ADFModelUtils.callFunction(this,
                                                               new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                                               EbizParams.GLBL_APP_SERV_LOC(),
                                                               EbizParams.GLBL_APP_CLD_ID(),
                                                               EbizParams.GLBL_APP_USR_ORG(), rr.getAttribute("ItmId"),
                                                               rr.getAttribute("ItmUom"), rr.getAttribute("ItmUomBs")
                                }, Types.NUMERIC);
                                /* BigDecimal convFctr =
                                            (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)",
                                                                           new Object[] { getparamSlocId(), getparamCldId(), getparamOrgId(),
                                                                                          newRow.getAttribute("ItmId"), baseUom,
                                                                                          newRow.getAttribute("ItmUom") }); */
                                Number uomFctr = new Number(1);
                                try {
                                    uomFctr = new Number(convFctr);
                                } catch (Exception e) {
                                    _log.info(e);
                                }
                                //  System.out.println(" pickedQty.multiply(uomFctr):::: " + pickedQty.multiply(uomFctr));
                                lotInst.setAttribute("PckQty",
                                                     ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(),
                                                                           pickedQty.multiply(uomFctr)));


                                // Changes done for Tolerance - start
                                //   lotInst.setAttribute("DlvDt", currItm.getAttribute("DlvDt"));
                                // Changes done for Tolerance - end
                                String lotId = rr.getAttribute("LotId").toString();
                                Number qty = (Number) rr.getAttribute("TransIssuQtyValue");
                                //  System.out.println("this.getPriceForLotForPckMtrl(lotId, qty)::::::: " +
                                //                    this.getPriceForLotForPckMtrl(lotId, qty));
                                _log.info(" lotId :" + lotId + " lotval :" + qty);
                                if (this.getPriceForLotForPckMtrl(lotId, qty) != null) {
                                    lotInst.setAttribute("ItmLotCost", this.getPriceForLotForPckMtrl(lotId, qty));
                                }
                                mtlLot.insertRow(lotInst);
                                mtlLot.executeQuery();

                                //   System.out.println("inserted row is:   " + lotInst + "----------------!");
                            }
                        }

                    }
                } else {
                    RowQualifier rowQualifier = new RowQualifier(mtlLot);
                    rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and PickId ='" +
                                                currItm.getAttribute("PickId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                rr.getAttribute("LotId").toString() + "'");
                    Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                    for (Row r : rows) {
                        r.remove();
                    }
                }

                //  getDBTransaction().postChanges(); // 1 july 2014
            }
        }
        return null;
    }

    public StringBuilder isBinQtyValidForPckMtrl() {
        StringBuilder g = new StringBuilder("Y");
        //ArrayList to store lots who have been selected for Issuing
        ArrayList<Row> selectedBin = new ArrayList<Row>();
        ViewMmStkSummBinVOImpl issueBinVo = getViewMmStkSummBinVO1();
        RowSetIterator issueBinItr = issueBinVo.createRowSetIterator(null);
        while (issueBinItr.hasNext()) {
            Row issueRow = issueBinItr.next();
            Object issueQtyO = issueRow.getAttribute("TransIssueQty");
            Number issueQty = (issueQtyO == null ? StaticValue.NUMBER_ZERO : (Number) issueQtyO);
            if (issueQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                selectedBin.add(issueRow);
            }
        }
        issueBinItr.closeRowSetIterator();
        //Lot vo to check total issued qty of a lot
        ViewObjectImpl BinVo = this.getSLSPckMtlBinVO1();
        BinVo.executeQuery();
        int i = BinVo.getRangeSize();
        BinVo.setRangeSize(-1);
        for (Row r : selectedBin) {
            Object lotAvlQtyO = r.getAttribute("TotStk");
            Object entredIssueQuantO = r.getAttribute("TransIssueQty");

            Number lotAvlQty = (lotAvlQtyO == null ? StaticValue.NUMBER_ZERO : (Number) lotAvlQtyO);
            Number entredIssueQuant =
                (entredIssueQuantO == null ? StaticValue.NUMBER_ZERO : (Number) entredIssueQuantO);

            StringBuilder clause = new StringBuilder("");
            clause.append("ItmId = '").append(r.getAttribute("ItmId")).append("'");
            clause.append("AND LotId = '").append(r.getAttribute("LotId")).append("'");
            clause.append("AND BinId = '").append(r.getAttribute("BinId")).append("'");
            _log.info("caluse in bin filter: " + clause);
            RowQualifier rq = new RowQualifier(BinVo);
            rq.setWhereClause(clause.toString());
            Row[] lotRows = BinVo.getFilteredRows(rq);
            Number totPickQty = StaticValue.NUMBER_ZERO;
            for (Row lotR : lotRows) {
                Object pickO = lotR.getAttribute("PckQty");
                if (pickO != null) {
                    totPickQty = totPickQty.add((Number) pickO);
                }
            }
            totPickQty = totPickQty.add(entredIssueQuant);
            if (totPickQty.compareTo(lotAvlQty) > 0) {
                g = new StringBuilder("Total Issue Quantity of Bin id : ");
                g.append(r.getAttribute("BinId"));
                g.append(" for selected Item in current PickList is Exceeding the Total Available Quantity.\n\n");
                g.append("<br /><br />Bin Available Quantity : ");
                g.append(lotAvlQty);
                g.append("<br /><br />Total Picked Quantity for Selected Item Currently : ");
                g.append(totPickQty);
                g.append("<br /><br />Please enter correct Issue Quantity !");
                break;
                // Total Issue Quantity of lot id : for selected Item in this PickList is Exceeding the Total Avalable Quantity.
            }
        }
        BinVo.setRangeSize(i);
        _log.info("Bin Check Returned. " + g);
        return g;
    }


    public void insertIntoPickItmSrForPckMtrl() {
        ViewObjectImpl mtlItm = this.getPackagingMtrlVO1();
        ViewObjectImpl mtlSr = this.getSLSPckMtlSRVO1();
        ViewObjectImpl mtlBin = this.getSLSPckMtlBinVO1();
        ViewObjectImpl mtlLot = this.getSLSPckMtlLotVO1();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummSrVO1();
        Row currItm = mtlItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = viewSummSr.getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("lenth sr     " + srRow.length);

        ArrayList<String> arrlist = new ArrayList<String>();
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        _log.info("lot id new    " + lotId);
                    }
                }
            }
            _log.info(" array size " + arrlist);
        }

        // Using Set to remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        Number lotT = StaticValue.NUMBER_ZERO;
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotval = StaticValue.NUMBER_ZERO;
            try {
                lotval = new Number(lotQty);
            } catch (Exception e) {
                _log.info(e);
            }
            _log.info(key + ": " + Collections.frequency(arrlist, key) + "------" + lotval);

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" PickId ='" + currItm.getAttribute("PickId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                _log.info("Lot ALready added- now updating values");
                for (Row r : rows) {

                    String baseUom = getBaseUomforPckMtrl(currItm.getAttribute("ItmId").toString());
                    Object convFctr =
                        ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                   EbizParams.GLBL_APP_USR_ORG(), currItm.getAttribute("ItmId"),
                                                   currItm.getAttribute("ItmUom"), currItm.getAttribute("ItmUom")
                    }, Types.NUMERIC);
                    Number uomFctr = new Number(1);
                    try {
                        uomFctr = new Number(convFctr);
                    } catch (Exception e) {
                        _log.info(e);
                    }

                    Number pickedQty = lotval;
                    r.setAttribute("PckQtyBs", lotval);
                    pickedQty = pickedQty.divide(uomFctr);
                    pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                    r.setAttribute("PckQty", pickedQty);
                    _log.info(" key :" + key + " lotval :" + pickedQty);
                    if (this.getPriceForLotForPckMtrl(key, pickedQty) != null) {
                        r.setAttribute("ItmLotCost", this.getPriceForLotForPckMtrl(key, lotval));
                    }
                }
            } else {
                _log.info("Creating new Lot--");
                Row insrtLot = mtlLot.createRow();
                insrtLot.setAttribute("LotId", key);
                //  insrtLot.setAttribute("SoDt", currItm.getAttribute("SoDt"));

                String baseUom = getBaseUomforPckMtrl(currItm.getAttribute("ItmId").toString());

                Object convFctr =
                    ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                               EbizParams.GLBL_APP_USR_ORG(), currItm.getAttribute("ItmId"),
                                               currItm.getAttribute("ItmUom"), currItm.getAttribute("ItmUom")
                }, Types.NUMERIC);
                /* BigDecimal convFctr =
                        (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)",
                                                       new Object[] { getparamSlocId(), getparamCldId(), getparamOrgId(),
                                                                      newRow.getAttribute("ItmId"), baseUom,
                                                                      newRow.getAttribute("ItmUom") }); */
                Number uomFctr = new Number(1);
                try {
                    uomFctr = new Number(convFctr);
                } catch (Exception e) {
                    _log.info(e);
                }

                Number pickedQty = lotval;

                insrtLot.setAttribute("PckQtyBs", lotval);
                pickedQty = pickedQty.divide(uomFctr);
                pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                insrtLot.setAttribute("PckQty", pickedQty);


                _log.info(" key :" + key + " lotval :" + pickedQty);
                if (this.getPriceForLotForPckMtrl(key, pickedQty) != null) {
                    insrtLot.setAttribute("ItmLotCost", this.getPriceForLotForPckMtrl(key, lotval));
                }
                mtlLot.insertRow(insrtLot);
            }
            mtlLot.executeQuery();

        }

        //for removing the lot row which are not selected over the pop up.
        if (mtlLot.getRowCount() > lotset.size()) {
            RowSetIterator itr = mtlLot.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                String att = null;
                if (next.getAttribute("LotId") != null) {
                    att = next.getAttribute("LotId").toString();
                }
                if (!lotset.contains(att)) {
                    next.remove();
                }
            }
            itr.closeRowSetIterator();
        }

        Iterator i = lotset.iterator();
        _log.info("----------" + lotset);
        Number binQtyT = StaticValue.NUMBER_ZERO;
        // Add Bin in bin Table for using lotSet Value When organisation using Bin pageflow scope check is- binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            int totBinCount = 0;
            Integer binQty = 0;
            Number binval = StaticValue.NUMBER_ZERO;
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                _log.info("-lot in bin-----" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoChkBxTrans") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoChkBxTrans").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                            //   System.out.println("Bin no is: ---- " + r2.getAttribute("BinId").toString());
                        }
                    }
                }
                totBinCount += arrListbin.size();
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                //   System.out.println("Bin set is:  ---- " + binSet);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    binQty = Collections.frequency(arrListbin, key);
                    binval = StaticValue.NUMBER_ZERO;
                    _log.info("Quantity in Bin-" + binQty);

                    try {
                        binval = new Number(binQty);
                    } catch (SQLException e) {
                        _log.info(e);
                    }

                    // Check bin already created or not

                    RowQualifier rowQualifier = new RowQualifier(mtlBin);
                    rowQualifier.setWhereClause(" PickId ='" + currItm.getAttribute("PickId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId = '" + key + "'");
                    Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                    // System.out.println("Entering in Bin Before");
                    if (rows.length > 0) {
                        for (Row bRow : rows) {
                            _log.info("Bin Already Added- Update existing");
                            //    System.out.println("Entering in Bin Before--Bin Already Added- Update existing");
                            String baseUom = getBaseUomforPckMtrl(currItm.getAttribute("ItmId").toString());
                            //    System.out.println("Base Uom Of bin is " + baseUom);
                            Object convFctr =
                                ADFModelUtils.callFunction(this,
                                                           new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                                           EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                           EbizParams.GLBL_APP_USR_ORG(), currItm.getAttribute("ItmId"),
                                                           currItm.getAttribute("ItmUom"),
                                                           currItm.getAttribute("ItmUom")
                            }, Types.NUMERIC);
                            /* BigDecimal convFctr =
                                    (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)",
                                                                   new Object[] { getparamSlocId(), getparamCldId(), getparamOrgId(),
                                                                                  newRow.getAttribute("ItmId"), baseUom,
                                                                                  newRow.getAttribute("ItmUom") }); */
                            Number uomFctr = new Number(1);
                            try {
                                uomFctr = new Number(convFctr);
                            } catch (Exception e) {
                                _log.info(e);
                            }

                            Number pickedQty = binval;

                            bRow.setAttribute("PckQtyBs", binval);
                            pickedQty = pickedQty.divide(uomFctr);
                            pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                            bRow.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                            bRow.setAttribute("PckQty", pickedQty);

                        }
                    } else {
                        _log.info("Create New Bin--Creating----");
                        Row binInst = mtlBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        //  System.out.println("Create New Bin--Creating----");
                        //   System.out.println("Item Id " + currItm.getAttribute("ItmId").toString());
                        String baseUom = getBaseUomforPckMtrl(currItm.getAttribute("ItmId").toString());
                        //   System.out.println("Base Uom Of bin is " + baseUom);
                        Object convFctr =
                            ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                       EbizParams.GLBL_APP_USR_ORG(), currItm.getAttribute("ItmId"),
                                                       currItm.getAttribute("ItmUom"), currItm.getAttribute("ItmUom")
                        }, Types.NUMERIC);
                        /* BigDecimal convFctr =
                                (BigDecimal)callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)",
                                                               new Object[] { getparamSlocId(), getparamCldId(), getparamOrgId(),
                                                                              newRow.getAttribute("ItmId"), baseUom,
                                                                              newRow.getAttribute("ItmUom") }); */
                        Number uomFctr = new Number(1);
                        try {
                            uomFctr = new Number(convFctr);
                        } catch (Exception e) {
                            _log.info(e);
                        }

                        Number pickedQty = binval;

                        binInst.setAttribute("PckQtyBs", binval);
                        pickedQty = pickedQty.divide(uomFctr);
                        pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                        binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                        binInst.setAttribute("PckQty", pickedQty);


                        // binInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                        mtlBin.insertRow(binInst);
                    }
                }
                Row[] filteredRows = mtlBin.getFilteredRows("LotId", lot);
                if (filteredRows.length > binSet.size()) {
                    for (Row r : filteredRows) {
                        if (r.getAttribute("BinId") != null && !binSet.contains(r.getAttribute("BinId").toString())) {
                            //   System.out.println("bin id is going to remove :  " + r.getAttribute("BinId").toString());
                            r.remove();
                        }
                    }
                }
                mtlBin.executeQuery();
            }

            // 5 july 2014 for removing un alloted extra bin entries.
            if (totBinCount < mtlBin.getRowCount()) {
                RowSetIterator itr = mtlBin.createRowSetIterator(null);
                while (itr.hasNext()) {
                    Row next = itr.next();
                    Object attribute = next.getAttribute("LotId").toString();
                    if (!lotset.contains(attribute)) {
                        next.remove();
                    }
                }
                itr.closeRowSetIterator();
            }

        }

        if (srRow.length > 0) {

            // this code is written on 07july 2014
            mtlSr.executeQuery();
            RowSetIterator itr = mtlSr.createRowSetIterator(null);
            while (itr.hasNext()) {
                itr.next().remove();
            }
            itr.closeRowSetIterator();
            //----------------------------07-july 2014

            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        _log.info("Insert Serial Number--");
                        Row srInst = mtlSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));

                        String baseUom = getBaseUomforPckMtrl(currItm.getAttribute("ItmId").toString());
                        Object convFctr =
                            ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                       EbizParams.GLBL_APP_USR_ORG(), currItm.getAttribute("ItmId"),
                                                       currItm.getAttribute("ItmUom"), currItm.getAttribute("ItmUom")
                        }, Types.NUMERIC);
                        Number uomFctr = new Number(1);
                        try {
                            uomFctr = new Number(convFctr);
                        } catch (Exception e) {
                            _log.info(e);
                        }

                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                        srInst.setAttribute("PckQty", new Number(1));
                        srInst.setAttribute("PckQtyBs", new Number(1));
                        mtlSr.insertRow(srInst);
                        mtlSr.executeQuery();
                    }
                }
            }
        }
        this.getDBTransaction().postChanges();
    }

    public void AllocationCommit() {
        this.getDBTransaction().commit();
    }

    public String freezeProfile() {
        String Flag = "N";
        ViewObjectImpl impl = this.getSlsPack1();
        PackagingMtrlVOImpl mtrlVO1 = this.getPackagingMtrlVO1();
        Row cRow = impl.getCurrentRow();
        if (mtrlVO1 != null) {
            getDBTransaction().postChanges();
            RowSetIterator crt = impl.createRowSetIterator(null);
            Row packRow = null;
            if (crt.hasNext()) {
                packRow = crt.next();
                if (packRow != null) {
                    Integer eoIdVar = (Integer) impl.getCurrentRow().getAttribute("EoId");
                    try {
                        String res =
                            (String) callStoredFunction(Types.VARCHAR,
                                                        "SLS.FN_SLS_TO_MM_PACK_PCK_MTL_ITM(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        getparamCldId(), getparamSlocId(), getparamHoOrgId(),
                                                        getparamOrgId(),
                                                        mtrlVO1.getCurrentRow().getAttribute("WhId").toString(),
                                                        getFYidOrgPack(getparamCldId(), getparamOrgId()),
                                                        cRow.getAttribute("DocDt"), cRow.getAttribute("DocId"),
                                                        cRow.getAttribute("DocDt"), eoIdVar,
                                                        cRow.getAttribute("UsrIdCreate"),
                                                        cRow.getAttribute("UsrIdCreateDt")
                        });
                    } catch (Exception e) {
                        ADFModelUtils.showFormattedFacesMessage("There has been Some Error while caling function SLS.FN_SLS_TO_MM_PACK_PCK_MTL_ITM",
                                                                e.getMessage(), FacesMessage.SEVERITY_ERROR);
                        Flag = "N";
                        e.printStackTrace();
                    }
                    try {
                        Object res2 =
                            callStoredFunction(Types.NUMERIC, "SLS.fn_sls_to_fin_cost_of_good(?,?,?,?,?,?,?,?)", new Object[] {
                                               cRow.getAttribute("DocId"), cRow.getAttribute("DocDt"),
                                               cRow.getAttribute("UsrIdCreate"), getparamOrgId(), getparamSlocId(),
                                               getparamHoOrgId(), getparamCldId(), "P"
                        });
                    } catch (Exception e) {
                        // TODO: Add catch code

                        ADFModelUtils.showFormattedFacesMessage("There has been Some Error while calling function SLS.fn_sls_to_fin_cost_of_good",
                                                                e.getMessage(), FacesMessage.SEVERITY_ERROR);
                        Flag = "N";
                        e.printStackTrace();
                    }
                    //    System.out.println("Second----->" + res2);y
                    try {
                        String res3 =
                            (String) callStoredFunction(Types.VARCHAR,
                                                        "SLS.FN_SLS_TO_MM_PCK_MTL_GP(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        getparamCldId(), getparamSlocId(), getparamHoOrgId(),
                                                        getparamOrgId(),
                                                        mtrlVO1.getCurrentRow().getAttribute("WhId").toString(),
                                                        getFYidOrgPack(getparamCldId(), getparamOrgId()),
                                                        cRow.getAttribute("DocDt"), cRow.getAttribute("DocId"),
                                                        cRow.getAttribute("DocDt"), eoIdVar,
                                                        cRow.getAttribute("UsrIdCreate"),
                                                        cRow.getAttribute("UsrIdCreateDt")
                        });
                        //    System.out.println("Third----->" + res3);
                        Flag = "Y";
                    } catch (Exception e) {
                        // TODO: Add catch code

                        ADFModelUtils.showFormattedFacesMessage("There has been Some Error while calling function SLS.FN_SLS_TO_MM_PCK_MTL_GP",
                                                                e.getMessage(), FacesMessage.SEVERITY_ERROR);
                        Flag = "N";
                        e.printStackTrace();
                    }
                }
            }

            if (Flag.equalsIgnoreCase("Y")) {
                try {
                    this.getDBTransaction().commit();

                } catch (Exception e) {
                    ADFModelUtils.showFormattedFacesMessage("There has been some problem while saving Pack Material details.",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    e.printStackTrace();
                    this.getDBTransaction().rollback();
                }
            } else {
                this.getDBTransaction().rollback();
            }
        }
        return Flag;
    }

    /**
     * Container's getter for LovForItmUomForPckMtrl1.
     * @return LovForItmUomForPckMtrl1
     */
    public ViewObjectImpl getLovForItmUomForPckMtrl1() {
        return (ViewObjectImpl) findViewObject("LovForItmUomForPckMtrl1");
    }

    public String chkDuplicateItemforPck(String itmIdBind) {
        String Flag = "N";
        Row currentRow = this.getPackagingMtrlVO1().getCurrentRow();
        String itmIdVar =
            this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmId") == null ? "" :
            this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmId").toString();
        RowSetIterator crt = this.getPackagingMtrlVO1().createRowSetIterator(null);
        while (crt.hasNext()) {
            Row next = crt.next();
            if (next != currentRow) {
                if (next.getAttribute("ItmId").equals(itmIdVar)) {
                    Flag = "Y";
                } else {
                    Flag = "N";
                }
            }
        }

        return Flag;
    }

    public void fiterItmUom() {
        ViewObjectImpl itmUomVo = this.getLovForItmUomForPckMtrl1();
        DualPackMtlVOImpl dualVO = this.getDualPackMtl1();
        if (dualVO.getCurrentRow() != null) {
            if (dualVO.getCurrentRow().getAttribute("TransItmId") != null) {
                String itmIdVar = dualVO.getCurrentRow().getAttribute("TransItmId").toString();
                Row[] ftrRows = itmUomVo.getFilteredRows("ItmId", itmIdVar);
                itmUomVo.executeQuery();
                if (ftrRows.length > 0) {
                    //   System.out.println("Fitered ROWS OF ITM UOM" + ftrRows)































                }
            }
        }
    }

    public String getAvailStock(Number pckQty, String whIdVarBind) {

        // DualPackMtlVOImpl dualVO = this.getDualPackMtl1();
        PackagingMtrlVOImpl mtrlVO1 = this.getPackagingMtrlVO1();
        ViewObjectImpl impl = this.getSlsPack1();
        String whIdVar = null;
        String itmIdVar = null;
        String uomBaseVAr = null;
        String itmUomVar = null;
        Number convFctr = null;
        Integer pckQtyVar = null;
        Number avlStk = null;
        if (mtrlVO1.getCurrentRow() != null) {
            //  System.out.println("Whid is =====" + mtrlVO1.getCurrentRow().getAttribute("WhId"));
            whIdVar = whIdVarBind;
            /* dualVO.getCurrentRow().getAttribute("TransWhId") == null ? "" :
                dualVO.getCurrentRow().getAttribute("TransWhId").toString(); */
            itmIdVar =
                mtrlVO1.getCurrentRow().getAttribute("ItmId") == null ? "" :
                mtrlVO1.getCurrentRow().getAttribute("ItmId").toString();
            uomBaseVAr = getBaseUom(itmIdVar) == null ? "" : getBaseUom(itmIdVar);
            itmUomVar =
                mtrlVO1.getCurrentRow().getAttribute("ItmUom") == null ? "" :
                mtrlVO1.getCurrentRow().getAttribute("ItmUom").toString();
            /*    pckQtyVar =
                (Integer) dualVO.getCurrentRow().getAttribute("TransPckQty") == null ? 0 :
                (Integer) dualVO.getCurrentRow().getAttribute("TransPckQty"); */
        }
        try {
            Object res = callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                            getparamSlocId(), getparamCldId(), getparamOrgId(), itmIdVar, itmUomVar,
                                            itmUomVar
            });
            convFctr = new Number(res);
        } catch (Exception e) {
            //  System.out.println("Error in converstion factor");
        }
        try {
            // System.out.println("Docdate is :" + impl.getCurrentRow().getAttribute("DocDt") + "CLD ID---" +
            //                    EbizParams.GLBL_APP_CLD_ID() + "Server Id--" + EbizParams.GLBL_APP_SERV_LOC() +
            //                   "Org Id" + EbizParams.GLBL_APP_USR_ORG() + "ItmId==" + itmIdVar + "whIdVar--" + whIdVar +
            //                  "Conv fctr---" + convFctr);

            Object avlRes = callStoredFunction(Types.NUMERIC, "SLS.FN_MM_GET_AVAIL_STK(?,?,?,?,?,?,?)", new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_APP_USR_ORG(), itmIdVar, whIdVar,
                                               impl.getCurrentRow().getAttribute("DocDt"), convFctr
            });
            avlStk = new Number(avlRes);
        } catch (Exception e) {
            e.printStackTrace();
            //  System.out.println("Something Wrong in Get Avail Stk Function");
        }
        if (pckQty != null) {
            Number n = avlStk;

            // System.out.println("Available Qty is " + n);
            // System.out.println("Picked  Qty is " + pckQty);

            // mtrlVO1.getCurrentRow().setAttribute("PckItmQtyBs",pckQtyBsVar);
            if (pckQty.compareTo(n) < 0) {
                //  System.out.println("Return Y:::::::" + pckQty.compareTo(n));
                return "Y";
            } else {
                ADFModelUtils.showFormattedFacesMessage("The Available Quantity for this item is " + n + "",
                                                        "Hence , this can not be allowed to save..!!",
                                                        FacesMessage.SEVERITY_INFO);
                return "N";

            }
        }
        return "N";
    }

    public void editIntoPck() {
        /*  ViewObjectImpl pckMtlVO = this.getPackagingMtrlVO1();
        ViewObjectImpl impl = this.getSlsPack1();
        String itemIdVar = null;
        String itemUomVar = null;
        Number itmQtyVar = new Number(0);
        String isReturnVar = null;
        String isConsumeVar = null;
        String whIdVar = null;
        DualPackMtlVOImpl dualPackMtl1 = this.getDualPackMtl1();
        Row dualCRow = dualPackMtl1.getCurrentRow();
        //  Row cRow = pckMtlVO.getCurrentRow();
        if (dualCRow != null) {
            itemIdVar =
                (dualCRow.getAttribute("TransItmId") == null ? " " : dualCRow.getAttribute("TransItmId").toString());
        //    System.out.println("Item Id" + itemIdVar);
            itemUomVar =
                (dualCRow.getAttribute("TransUOMId") == null ? " " : dualCRow.getAttribute("TransUOMId").toString());
         //   System.out.println("Item Uom" + itemUomVar);
            itmQtyVar =
                (dualCRow.getAttribute("TransPckQty") == null ? new Number(0) :
         //        (Number) dualCRow.getAttribute("TransPckQty"));
            System.out.println("Itm Qty" + itmQtyVar);
            isReturnVar =
                (dualCRow.getAttribute("TransIsReturnable") == null ? " " :
                 dualCRow.getAttribute("TransIsReturnable").toString());
            System.out.println("Return" + isReturnVar);

            whIdVar =
                (dualCRow.getAttribute("TransWhId") == null ? " " : dualCRow.getAttribute("TransWhId").toString());
        }
        Integer pckOdr = new Integer(0);
        String ItmSerialFlagVar = null;
        String itmBaseUomVar = null;
        RowSet frmIdVO1 = this.getLOVForPackagingMaterialItemQuery1();
        Row[] filteredRows = frmIdVO1.getFilteredRows("ItmId", itemIdVar);
        System.out.println("Fileterd rows are" + filteredRows.length);
        if (filteredRows.length > 0) {
            if (filteredRows[0].getAttribute("PickOrder") != null) {
                pckOdr = ((Integer) filteredRows[0].getAttribute("PickOrder"));
            } else {
                pckOdr = 307;
            }
            ItmSerialFlagVar = ((String) filteredRows[0].getAttribute("SerializedFlg"));
            itmBaseUomVar = ((String) filteredRows[0].getAttribute("UomBasic"));

            //  setIsItemSerializedFlagTrans((String)filteredRows[0].getAttribute("SerializedFlg"));


        }
        // Row createRow = pckMtlVO.createRow();
        Row createRow = pckMtlVO.getCurrentRow();
        if (createRow != null) {
            if (itemIdVar != " " && itemUomVar != " " && whIdVar != " ") {
                createRow.setAttribute("ItmId", itemIdVar);
                createRow.setAttribute("ItmUom", itemUomVar);
                createRow.setAttribute("PckItmQty", itmQtyVar);
                createRow.setAttribute("RetFlg", isReturnVar);
                createRow.setAttribute("IsConsumable", "Y");
                createRow.setAttribute("WhId", whIdVar);
                createRow.setAttribute("TransPickOrder", pckOdr);
                createRow.setAttribute("TransItemSerialized", ItmSerialFlagVar);
                createRow.setAttribute("IsItemSerializedFlagTrans", ItmSerialFlagVar);
                createRow.setAttribute("ItmUomBs", itmBaseUomVar);
                //   pckMtlVO.insertRow(createRow);
                impl.getCurrentRow().setAttribute("WhId", whIdVar);
                this.getDBTransaction().commit();
                dualCRow.setAttribute("TransItmId", null);
                dualCRow.setAttribute("TransWhId", null);
                dualCRow.setAttribute("TransUOMId", null);
                dualCRow.setAttribute("TransPckQty", null);
                dualCRow.setAttribute("TransItemName", null);
                dualCRow.setAttribute("TransAvailableQty", null);
                this.getLOVForPackagingMaterialItemQuery1().executeQuery();

            } else {
                ADFModelUtils.showFormattedFacesMessage("Please Select the Required Fields!!",
                                                        "You Might have not selected Item Name , Wharehouse Name or Item Uom!!",
                                                        FacesMessage.SEVERITY_ERROR);
            }
        } */
    }

    public String validateLotBinSRForEachPck() {
        String Flag = "N";
        String itmIdVar = null;
        Integer count = new Integer(0);
        ViewObjectImpl pckMtrlVO = this.getPackagingMtrlVO1();
        SLSPckMtlBinVOImpl binVo = this.getSLSPckMtlBin1();
        SLSPckMtlLotVOImpl lotVo = this.getSLSPckMtlLotVO2();
        SLSPckMtlSRVOImpl srVo = this.getSLSPckMtlSRVO1();
        RowSetIterator crtPck = pckMtrlVO.createRowSetIterator(null);
        int i = pckMtrlVO.getRowCount();
        //   System.out.println("Total Rows of Pack are::::" + i);
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

        while (crtPck.hasNext()) {
            Row next = crtPck.next();
            System.out.println("In Pck Iterator====  " + next);
            itmIdVar = next.getAttribute("ItmId") == null ? "" : next.getAttribute("ItmId").toString();
            System.out.println("ItmId Count is ::" + ++count + " :" + itmIdVar);
            System.out.println("Lot VO Rows  " + lotVo.getRowCount());
            int j = lotVo.getRowCount();
            Row[] ftr = lotVo.getFilteredRows("ItmId", itmIdVar);
            System.out.println("The filtered Lot  rows are:::::: " + ftr.length);
            if (ftr.length > 0) {
                System.out.println("Inside Y");
                Flag = "Y";
            } else {
                System.out.println("Inside N");
                Flag = "N";
                break;
            }


        }

        System.out.println("Returned Flag is -----" + Flag);
        return Flag;
    }

    public void cancelPckPrf() {
        ViewObjectImpl impl = this.getSlsPack1();
        DualPackMtlVOImpl dualPackMtl1 = this.getDualPackMtl1();
        PackagingMtrlVOImpl mtrlVO1 = this.getPackagingMtrlVO1();
        Row cRow = impl.getCurrentRow();
        if (dualPackMtl1 != null) {
            RowSetIterator itr = dualPackMtl1.createRowSetIterator(null);
            RowSetIterator crt = impl.createRowSetIterator(null);
            Row packRow = null;
            if (crt.hasNext())
                packRow = crt.next();
            Row row = null;
            if (itr.hasNext())
                row = itr.next();
            if (row != null) {
                // System.out.println("row is: "+dualPackMtl1.getCurrentRow());
                //  System.out.println("Row is: " + row + "\n" + row.getAttribute("cancelPckPrf"));

                String cancelVar = row.getAttribute("cancelPckPrf").toString();
                // Integer eoIdVar = (Integer) impl.getCurrentRow().getAttribute("EoId");
                if (cancelVar.equalsIgnoreCase("Y")) {

                    Object res2 = callStoredFunction(Types.NUMERIC, "SLS.fn_sls_to_fin_cost_of_good(?,?,?,?,?,?,?,?)", new Object[] {
                                                     cRow.getAttribute("DocId"), cRow.getAttribute("DocDt"),
                                                     cRow.getAttribute("UsrIdCreate"), getparamOrgId(),
                                                     getparamSlocId(), getparamHoOrgId(), getparamCldId(), "PC"
                    });
                    //    System.out.println("Second----->" + res2);

                }

            }
        }
        impl.getCurrentRow().setAttribute("PackStat", 220);
        this.getDBTransaction().commit();
        ADFModelUtils.showFormattedFacesMessage("Your pack has been canceled Successfully..", "",
                                                FacesMessage.SEVERITY_INFO);
    }

    public void cancelShipPrf() {
        ViewObjectImpl impl = this.getSlsShipmnt1();

        Row cRow = impl.getCurrentRow();
        if (cRow != null) {

            RowSetIterator crt = impl.createRowSetIterator(null);
            Row shipRow = null;
            if (crt.hasNext())
                shipRow = crt.next();

            if (shipRow != null) {
                // System.out.println("row is: "+dualPackMtl1.getCurrentRow());
                // System.out.println("Row is: " + shipRow + "\n" + shipRow.getAttribute("cancelShipFlagTrans"));

                String cancelVar = shipRow.getAttribute("cancelShipFlagTrans").toString();
                // Integer eoIdVar = (Integer) impl.getCurrentRow().getAttribute("EoId");
                if (cancelVar.equalsIgnoreCase("Y")) {

                    Object res2 = callStoredFunction(Types.NUMERIC, "SLS.fn_sls_to_fin_cost_of_good(?,?,?,?,?,?,?,?)", new Object[] {
                                                     cRow.getAttribute("DocId"), cRow.getAttribute("DocDt"),
                                                     cRow.getAttribute("UsrIdCreate"), getparamOrgId(),
                                                     getparamSlocId(), getparamHoOrgId(), getparamCldId(), "SC"
                    });
                    //  System.out.println("Second----->" + res2);
                }
            }
        }
        //  impl.getCurrentRow().setAttribute("ShipmntStat", 218);
        this.getDBTransaction().commit();
    }

    /**
     * Method to call workflow functions.
     * @return
     */
    public String callWfFunctions() {
        Row currentRow = getSlsPick1().getCurrentRow();
        try {
            WorkFlowUtils.insertWfTxnEntriesForCurrDoc(this, 21506, 0, currentRow.getAttribute("DocId"),
                                                       EbizParams.GLBL_APP_USR(), EbizParams.GLBL_APP_USR(), "arg6",
                                                       new Number(1000));
            getDBTransaction().commit();
            return "Y";

        } catch (Exception e) {
            ADFModelUtils.showFormattedFacesMessage("There have been some problem while passing entries of Workflow !",
                                                    e.getMessage(), FacesMessage.SEVERITY_FATAL);
            e.printStackTrace();
        }
        return "N";
    }

    /**
     * Method to fetch workflow id of pick
     * @return
     */
    public String getWorkFlowIdForPick() {
        Object flowId = WorkFlowUtils.getWorkFlowId(this, 21506, 0);
        return flowId == null ? "" : flowId.toString();
    }

    /**
     *  Method to call functions on return from workflow
     *
     *   P_CLDID  VARCHAR2,
    P_SLOCID NUMBER,
    P_ORGID  VARCHAR2,
    P_WHID   VARCHAR2,
    P_FYID   NUMBER,
    P_DOCID  VARCHAR2
     */
    //    public void functionCallAfterReturnFrmWfFromPick() {
    //        Boolean success = true;
    //        Object wfFlgO = ADFModelUtils.resolvEl("#{pageFlowScope.PICK_WF_RET_PARAM}");
    //        if (wfFlgO != null) {
    //            if ("A".equals(wfFlgO.toString())) {
    //                if (isResvQtyAvail()) {
    //                    Row currentRow = getSlsPick1().getCurrentRow();
    //                    currentRow.setAttribute("PickMode", 314);
    //                    getDBTransaction().postChanges();
    //                    _log.info("Posted Changes...");
    //                    success = reserveStock();
    //                } else {
    //                    ADFModelUtils.showFormattedFacesMessage("Stock is unavailable for reservation ! ",
    //                                                            "Stock for few of the Items selected in Pick is not available for reservation. Please make sure that, the stock is available for Items present in Current Pick.",
    //                                                            FacesMessage.SEVERITY_ERROR);
    //                    success = false;
    //                }
    //                //UpdateOrdStat("S");
    //                //_log.info("Updated Sales Order status Changes...");
    //            } else if ("F".equals(wfFlgO.toString())) {
    //                Row currentRow = getSlsPick1().getCurrentRow();
    //                currentRow.setAttribute("PickMode", 317);
    //            }
    //            if (success) {
    //                try {
    //                   getDBTransaction().commit();
    //               } catch (Exception e) {
    //                    ADFModelUtils.showFormattedFacesMessage("There has been some problem while saving Pick ",
    //                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
    //                    e.printStackTrace();
    //                    getDBTransaction().rollback();
    //                }
    //            } else {
    //                getDBTransaction().rollback();
    //            }
    //        }
    //    }

    public void functionCallAfterReturnFrmWfFromPick() {
        Boolean success = true;
        Object wfFlgO = ADFModelUtils.resolvEl("#{pageFlowScope.PICK_WF_RET_PARAM}");
        if (wfFlgO != null) {
            if ("A".equals(wfFlgO.toString())) {
                if (isResvQtyAvail()) {
                    Row currentRow = getSlsPick1().getCurrentRow();
                    currentRow.setAttribute("PickMode", 314);
                    getDBTransaction().postChanges();
                    _log.info("Posted Changes...");
                    success = reserveStock();
                    _log.info("Stock Reserved...");

                } else {
                    ADFModelUtils.showFormattedFacesMessage("Stock is unavailable for reservation ! ",
                                                            "Stock for few of the Items selected in Pick is not available for reservation. Please make sure that, the stock is available for Items present in Current Pick.",
                                                            FacesMessage.SEVERITY_ERROR);
                    success = false;
                }
                //UpdateOrdStat("S");
                //_log.info("Updated Sales Order status Changes...");
            } else if ("F".equals(wfFlgO.toString())) {
                Row currentRow = getSlsPick1().getCurrentRow();
                currentRow.setAttribute("PickMode", 317);
            }
            if (success) {
                getDBTransaction().commit();
            } else {
                getDBTransaction().rollback();
            }
        }
    }


    /**
     * Method to check if Stock is available for Reserve or not.
     * @return
     */
    protected Boolean isResvQtyAvail() {
        Boolean b = false;
        Row currentRow = getSlsPick1().getCurrentRow();
        try {
            Object callFunction =
                ADFModelUtils.callFunction(this, new StringBuilder("sls.FN_CHK_PICK_RESV_STK_ITM(?,?,?,?,?,?)"), new Object[] {
                                           currentRow.getAttribute("CldId"), currentRow.getAttribute("SlocId"),
                                           currentRow.getAttribute("OrgId"), currentRow.getAttribute("WhId"),
                                           currentRow.getAttribute("FyId"), currentRow.getAttribute("DocId")
            }, Types.VARCHAR);
            if (callFunction == null) {
                b = false;
            } else if ("Y".equals(callFunction.toString())) {
                b = true;
            } else {
                b = false;
            }

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_CHK_PICK_RESV_STK_ITM' ! " +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            b = false;
            e.printStackTrace();
        }
        return b;
    }


    /**
     * Method to autoissue items at the time of stock release.
     * @return
     */
    public Integer autoIssueAddedItems() {
        Integer i = 0;
        RowSetIterator ctr = getSlsPickItm1().createRowSetIterator(null);
        while (ctr.hasNext()) {
            autoIssueItmOnAdd(ctr.next());
        }
        ctr.closeRowSetIterator();
        return i;
    }

    /**
     * Method to check if user is allowed to eidt
     * @return
     */
    public Integer isUserAllowedToEditPick() {
        Integer i = -1;
        Row currentRow = getSlsPick1().getCurrentRow();
        Integer a = WorkFlowUtils.docPendingAt(this, 21506, 0, currentRow.getAttribute("DocId"));
        if (!a.equals(EbizParams.GLBL_APP_USR()) && a != -1) {
            ADFModelUtils.showFormattedFacesMessage("The current pick is Pending for Approval at [" +
                                                    EbizParams.getUsrDescFrmUsrId(this, a) + "]",
                                                    "You cannot not edit this pick as the current pick have been send to another user for Approval. Only the user on whome this document is pending at can edit this Pick.",
                                                    FacesMessage.SEVERITY_FATAL);

        } else {
            i = 1;
        }

        return i;
    }

    /**
     * Method to check if the branch is exise trading
     * @return
     */
    public Boolean isBranchExiseTrading() {
        StringBuffer buffer = PickAMHelper.checkforProfileValues(this, "EXCISE_TRD_ORG");
        if ("Y".equals(buffer.toString())) {
            return true;
        } else {
            return false;
        }
    }

    public void setAvlStk() {
        Object convFctr = callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                             EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                             EbizParams.GLBL_APP_USR_ORG(),
                                             this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmId") == null ?
                                             "" :
                                             this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmId").toString(),
                                             this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmUom") == null ?
                                             "" :
                                             this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmUom").toString(),
                                             this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmUom") == null ?
                                             "" :
                                             this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmUom").toString()
        });
        Object avlStk = callStoredFunction(Types.NUMERIC, "SLS.FN_MM_GET_AVAIL_STK(?,?,?,?,?,?,?)", new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_APP_USR_ORG(),
                                           this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmId") == null ?
                                           "" :
                                           this.getPackagingMtrlVO1().getCurrentRow().getAttribute("ItmId").toString(),
                                           this.getPackagingMtrlVO1().getCurrentRow().getAttribute("WhId") == null ?
                                           "" :
                                           this.getPackagingMtrlVO1().getCurrentRow().getAttribute("WhId").toString(),
                                           this.getSlsPack1().getCurrentRow().getAttribute("DocDt") == null ? "" :
                                           this.getSlsPack1().getCurrentRow().getAttribute("DocDt"), convFctr
        });

    }

    public void executeLovItem() {
        LOVForPackagingMaterialItemQueryVOImpl frmIdVO1 = this.getLOVForPackagingMaterialItemQuery1();
        frmIdVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        frmIdVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        frmIdVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        frmIdVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        frmIdVO1.executeQuery();
    }

    public void allowFreezePrf() {
        this.getSlsPack1().getCurrentRow().setAttribute("WhId",
                                                        this.getPackagingMtrlVO1().getCurrentRow().getAttribute("WhId").toString());
        this.getSlsPack1().getCurrentRow().setAttribute("FreezePackItm", "Y");
    }

    /**
     * Container's getter for SlsPack2.
     * @return SlsPack2
     */
    public ViewObjectImpl getSlsPack2() {
        return (ViewObjectImpl) findViewObject("SlsPack2");
    }

    /**
     * Container's getter for SLSPckMtlLot3.
     * @return SLSPckMtlLot3
     */
    public SLSPckMtlLotVOImpl getSLSPckMtlLot3() {
        return (SLSPckMtlLotVOImpl) findViewObject("SLSPckMtlLot3");
    }

    /**
     * Container's getter for PackToPckMtrlLotVL.
     * @return PackToPckMtrlLotVL
     */
    public ViewLinkImpl getPackToPckMtrlLotVL() {
        return (ViewLinkImpl) findViewLink("PackToPckMtrlLotVL");
    }

    /**
     * Container's getter for SLSPckMtlLotVO2.
     * @return SLSPckMtlLotVO2
     */
    public SLSPckMtlLotVOImpl getSLSPckMtlLotVO2() {
        return (SLSPckMtlLotVOImpl) findViewObject("SLSPckMtlLotVO2");
    }

    /**
     * Container's getter for PackToPckMtrlLotVL1.
     * @return PackToPckMtrlLotVL1
     */
    public ViewLinkImpl getPackToPckMtrlLotVL1() {
        return (ViewLinkImpl) findViewLink("PackToPckMtrlLotVL1");
    }

    /**
     * Checks if the tables to be updated on Pick are locked or not.
     * @return
     */
    public Boolean areTablesToBeUpdatedLocked() {
        Boolean b = areSchemedItemsValid();
        if (b) {
            RowSetIterator ctr = getSlsPickItm1().createRowSetIterator(null);
            while (ctr.hasNext()) {
                Row row = ctr.next();
                Object callFunction = null;
                try {
                    callFunction = ADFModelUtils.callFunction(this, new StringBuilder("SLS.fn_chk_so_itm(?,?,?,?,?)"), new Object[] {
                                                              EbizParams.GLBL_APP_SERV_LOC(),
                                                              EbizParams.GLBL_APP_CLD_ID(),
                                                              EbizParams.GLBL_APP_USR_ORG(), row.getAttribute("SoId"),
                                                              row.getAttribute("ItmId")
                    }, Types.VARCHAR);
                    b = false;
                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'fn_chk_so_itm' ! " +
                                         e.getMessage());
                    message.setSeverity(FacesMessage.SEVERITY_FATAL);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                    b = true;
                }
                StringBuilder c =
                    (callFunction == null ? new StringBuilder("N") : new StringBuilder(callFunction.toString()));
                if ("Y".equals(c.toString())) {
                    b = true;
                    ADFModelUtils.showFormattedFacesMessage("The Sales Order/Orders of Currently Picked Items are being Opened by Another User in View/Edit Mode. So Current Pick cannot be saved!",
                                                            "Another User is Trying to Edit the Sales Order which is being Picked. Please make sure that no Other User is Editing/Viewing the Sales Order for which Pick is being made!",
                                                            FacesMessage.SEVERITY_ERROR);
                    break;
                }
            }
        } else {
            b = true;
        }
        return b;
    }

    public void searchShipment() {
        Row r = getsearchShipmnt1().getCurrentRow();
        setShipmentSearchView(getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
                              r.getAttribute("PickDocId"), null, r.getAttribute("EoIdSrch"),
                              r.getAttribute("PickDateFromSrch"), r.getAttribute("PickDateToSrch"),
                              r.getAttribute("DlvAddsTrans"), r.getAttribute("WhIdSrch"));

    }

    protected void setShipmentSearchView(String cldId, Integer slocId, String hoOrgId, String orgId, Object pickDocId,
                                         Object shipDocId, Object eoId, Object pickDtFrom, Object pickDtTo,
                                         Object dlvAdd, Object whId) {
        System.out.println(shipDocId + " the shipint doc to be filtered");
        System.out.println(pickDocId + " the pick doc to be filtered");
        System.out.println(pickDtTo + " to timestamp");
        System.out.println(pickDtFrom + " from Timestamp");
        Date from = null;
        Date to = null;
        try {
            from = pickDtFrom == null ? null : ((Timestamp) pickDtFrom).dateValue();
            to = pickDtTo == null ? null : ((Timestamp) pickDtTo).dateValue();
            System.out.println(from + " from date");
            System.out.println(to + " to date");
        } catch (Exception e) {
            e.printStackTrace();
        }
        getviewSlsShipmntGen1().setNamedWhereClauseParam("pickDtFrm", from);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("eoIdBind", eoId);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("pickDtTo", to);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("whIdBind", whId);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("PickDocId", pickDocId);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("ShipDocId", shipDocId);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("DlvAddsBind", dlvAdd);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("CldIdBind", cldId);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("OrgIdBind", orgId);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("HoOrgIdBind", hoOrgId);
        getviewSlsShipmntGen1().setNamedWhereClauseParam("SlocIdBind", slocId);
        getviewSlsShipmntGen1().executeQuery();
    }


    /**
     * Method to cancel Shipment
     * @return
     */
    public Boolean cancelShipmnt() {
        Boolean success = false;
        ViewObjectImpl impl = this.getSlsShipmntHdrVO1();
        Row cRow = impl.getCurrentRow();
        try {
            ADFModelUtils.callFunction(this, new StringBuilder("FN_SLS_TO_MM_SHIP_ITM_CAN(?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       cRow.getAttribute("WhId"), cRow.getAttribute("FyId"), cRow.getAttribute("DocDt"),
                                       cRow.getAttribute("DocId"), cRow.getAttribute("DocDt"),
                                       cRow.getAttribute("EoId"), EbizParams.GLBL_APP_USR(),
                                       StaticValue.getCurrDtWidTimestamp()
            }, Types.VARCHAR);
            success = true;
        } catch (Exception e) {
            ADFModelUtils.showFacesMessage("There have been an error in calling function 'FN_SLS_TO_MM_SHIP_ITM_CAN' ! ",
                                           e.getMessage(), FacesMessage.SEVERITY_FATAL, null);
            success = false;
            e.printStackTrace();
        }
        if (success) {
            try {
                //cRow.setAttribute("ShipmntStat", 220);
                ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)"), new Object[] {
                                           cRow.getAttribute("DocId"), cRow.getAttribute("DocDt"),
                                           cRow.getAttribute("UsrIdCreate"), getparamOrgId(), getparamSlocId(),
                                           getparamHoOrgId(), getparamCldId(), "SC"
                }, Types.NUMERIC);
                success = true;
            } catch (Exception e) {
                ADFModelUtils.showFacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_COST_OF_GOOD' ! ",
                                               e.getMessage(), FacesMessage.SEVERITY_FATAL, null);
                success = false;
                e.printStackTrace();
            }
        }
        if (success) {
            try {
                getDBTransaction().commit();
                refreshAllVoOncancellation();
            } catch (Exception e) {
                ADFModelUtils.showFacesMessage("There have been an error cancelling shipment ! ", e.getMessage(),
                                               FacesMessage.SEVERITY_FATAL, null);
                success = false;
                getDBTransaction().rollback();
                e.printStackTrace();
            }
        } else {
            getDBTransaction().rollback();
            success = false;
        }
        getSlsShipmntHdrVO1().executeQuery();
        return success;
    }

    /**
     * Method to check if AutoIssue button needs to be enabled or disabled.
     * @return
     */
    public Boolean isAutoIssueItemExist() {
        Boolean b = true;
        RowSetIterator itr = getSlsPickItm1().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            next.getAttribute("ItmNmTrans");
            Integer pikOrd = (Integer) next.getAttribute("TransItmPickOrder");
            if (pikOrd == 305 || pikOrd == 306) {
                b = false;
                break;
            }
        }
        itr.closeRowSetIterator();
        System.out.println(b + " The result");
        return b;
    }

    /**
     * Method to check if schemed Items are correctly picked or not.
     * @return
     */
    public Boolean areSchemedItemsValid() {
        Boolean b = true;
        ViewObjectImpl pickItmVo = getSlsPickItm1();
        RowSetIterator ctr = pickItmVo.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row row = ctr.next();
            Object o = ADFModelUtils.callFunction(this, new StringBuilder("FN_CHK_PICK_SCHM_ITM(?,?,?,?,?,?,?,?)"), new Object[] {
                                                  row.getAttribute("CldId"), row.getAttribute("SlocId"),
                                                  row.getAttribute("OrgId"), row.getAttribute("WhId"),
                                                  EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this),
                                                  row.getAttribute("DocId"), row.getAttribute("SoId"),
                                                  row.getAttribute("ItmId")
            }, Types.VARCHAR);
            String a = (o == null ? "N" : o.toString());
            if ("N".equals(a)) {
                b = false;
                ADFModelUtils.showFormattedFacesMessage("Item with Scheme have been improperly Picked !",
                                                        "Either the selected Item is a free Item and Its Parent Item has not been picked or the Item Picked has free Item and it's free item has not been picked in the current Pick.",
                                                        //"Picked Item [" + row.getAttribute("ItmId") +


                    //  "] is a free Item and the Item on which it is free have not been picked in the current Pick. <br/><br/>Please either pick its Parent Item or remove this Item from Current Pick.",


                    FacesMessage.SEVERITY_WARN);
                break;
            }
        }
        ctr.closeRowSetIterator();
        return b;
    }


    //Method to get Customer Id for the current Shipment
    protected Object getCustomerId() {

        return getviewSlsShipmntGen1().getCurrentRow().getAttribute("EoId");

    }

    /**
     *Method to call procedure for mail configuration
     * @param stmt
     * @return
     * @throws Exception
     */
    public HashMap<String, String> getConfig(String stmt) throws Exception {
        try {

            HashMap<String, String> map = new HashMap<>();
            CallableStatement stForSet = this.getDBTransaction().createCallableStatement("begin  " + stmt + ";end;", 0);
            stForSet.setObject(1, null);

            stForSet.registerOutParameter(2, Types.VARCHAR);
            stForSet.registerOutParameter(3, Types.VARCHAR);
            stForSet.registerOutParameter(4, Types.VARCHAR);
            stForSet.registerOutParameter(5, Types.VARCHAR);
            stForSet.registerOutParameter(6, Types.VARCHAR);
            stForSet.execute();
            map.put("Domain", stForSet.getString(2));
            map.put("Port", stForSet.getString(3));
            map.put("Security", stForSet.getString(4));
            map.put("From", stForSet.getString(5));
            map.put("Password", stForSet.getString(6));
            return map;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e.getMessage());
        }
    }


    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }


    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 21506);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }


    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 21506);

        Row currentRow = this.getSlsShipmnt1().getCurrentRow(); //getSlsShipmnt1
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getSlsShipmnt1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                              System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                              System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                 attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                              */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    public void declareGlblValuesForCC1(Row currentRow) {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 21506);

        //  Row currentRow = this.getSlsShipmnt1().getCurrentRow(); //getSlsShipmnt1
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getSlsShipmnt1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                              System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                              System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                 attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                              */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }


    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
         * @param cldId
         * @param slocId
         * @param hoOrgId
         * @param orgId
         * @param tempId
         * @param tempSrc
         * @param docId
         * @param usrId
         * @param tempCcId
         * @param amount
         * @param pCcLevel1
         * @param pCcLevel2
         * @param pCcLevel3
         * @param pCcLevel4
         * @param pCcLevel5
         */
            // SlsSoVOImpl impl = this.getSlsShipmnt1();

            Row currentRow = this.getSlsShipmntHdrVO1().getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC1(currentRow);

                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "H", 21506,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                           new Number(0),
                                           (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));


            }
        }
    }


    /**
     * Method which will be called when user click on generate Cost Ceneter in Detail Part
     */
    public void generateCostCenter(String shipDocId) {
        AppCostCenterServiceAMImpl amCC = getAppAM();
        ViewObjectImpl impl = getSlsShipmntItm2();
        ViewCriteria vo = impl.getViewCriteria("SlsShipmntItmVOCriteria");
        impl.applyViewCriteria(vo);
        impl.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());

        impl.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        impl.setNamedWhereClauseParam("BindDocId", shipDocId);
        impl.executeQuery();
        System.out.println(getSlsShipmntItm2().getRowCount() + "   =============== Total Rows");
        RowSetIterator itr = getSlsShipmntItm2().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row currentRow = itr.next();
            declareGlblValuesForCC1(currentRow);
            amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), shipDocId, "L",
                                       21506, EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       sumLotAmount(currentRow.getAttribute("ItmId").toString(), shipDocId,
                                                    currentRow.getAttribute("PickId").toString()),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

        }
        itr.closeRowSetIterator();
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDateFromTempCcToSlsSoCc(String shipDocId) {
        System.out.println(shipDocId + " <<< Shipment Id for cost center");
        if (shipDocId != null) {

            if (chkCcApplicableOrNot()) {

                try {
                    callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21506, "sls",
                                       "SLS$SHIPMNT$COST$CENTER", shipDocId
                    });
                } catch (Exception e) {

                    e.printStackTrace();
                }
            }
        }
    }


    public void deleteCostCenterItem(String shipDocId) {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside delete method");

            // SlsSoItmVOImpl impl = this.getSlsSoItm1();
            Row currentRow = getSlsShipmnt1().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    System.out.println("------------------ Not null");
                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), shipDocId, "L",
                                       21506, EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       new Number(0), (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                }
            }
            System.out.println("After calling delete method");
        }
    }


    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt(String shipDocId) {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            // SlsSoItmVOImpl impl = this.getSlsSoItm1();
            Row currentRow = getSlsShipmnt1().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                sumLotAmount(currentRow.getAttribute("ItmId").toString(), shipDocId,
                             currentRow.getAttribute("PickId").toString()).compareTo(0) == 1) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    declareGlblValuesForCC();
                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), shipDocId, "L",
                                            21506, EbizParams.GLBL_APP_USR(),
                                            currentRow.getAttribute("CcId").toString(),
                                            sumLotAmount(currentRow.getAttribute("ItmId").toString(), shipDocId,
                                                         currentRow.getAttribute("PickId").toString()),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    /**
     * Method to check cost center is applicable for this sales order or not.
     */

    public Boolean isCostCenterApplicable() {
        Boolean b = false;
        try {
            // App.fn_is_cost_center_present(p_cld_id,p_sloc_id,p_ho_org_id,p_org_id,p_doc_id)
            Object callF =
                ADFModelUtils.callFunction(this, new StringBuilder("App.fn_is_cost_center_present(?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21506
            }, Types.INTEGER);

            Integer a = (callF == null ? 0 : (Integer) callF);
            b = (a == 1 ? true : false);
            //System.out.println(" ############################# the value of cost center appp  " + b +"   no. of rows "+ a);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return b;
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }


    public void InsertItemInCosCenter() {
        RowSetIterator itr = getSlsShipmntItm1().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
        }
        itr.closeRowSetIterator();
    }

    /**
     *Method to sum the total amount for each item from its lot
     * @param itmId
     * @return
     */
    public Number sumLotAmount(String itmId, String shiDocId, String pickId) {
        Number sum = new Number(0);
        ViewObjectImpl impl = getSlsShipmntItmLot3();
        ViewCriteria vo = impl.getViewCriteria("SlsShipmntItmLotVOCriteria");
        impl.applyViewCriteria(vo);
        impl.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        impl.setNamedWhereClauseParam("BindDocId", shiDocId);
        impl.setNamedWhereClauseParam("BindItmId", itmId);
        impl.setNamedWhereClauseParam("BindPickId", pickId);
        impl.executeQuery();
        getSlsShipmntItmLot3().setRangeSize(-1);
        System.out.println("Lot calculation for item ====== " + itmId);
        Row r[] = getSlsShipmntItmLot3().getFilteredRows("ItmId", itmId);
        for (int i = 0; i < r.length; i++) {
            Number tmp = (Number) r[i].getAttribute("ItmLotCost");
            sum = sum.add(tmp);
        }
        System.out.println(" Sum of lot price >> " + sum);
        return sum;
    }


    /**
     * Container's getter for SlsShipmntItm2.
     * @return SlsShipmntItm2
     */
    public ViewObjectImpl getSlsShipmntItm2() {
        return (ViewObjectImpl) findViewObject("SlsShipmntItm2");
    }


    /**
     * Container's getter for SlsShipmntItmLot2.
     * @return SlsShipmntItmLot2
     */
    public ViewObjectImpl getSlsShipmntItmLot2() {
        return (ViewObjectImpl) findViewObject("SlsShipmntItmLot2");
    }

    /**
     * Container's getter for SlsShpmntItmTOSlsShpmntItmLotVL2.
     * @return SlsShpmntItmTOSlsShpmntItmLotVL2
     */
    public ViewLinkImpl getSlsShpmntItmTOSlsShpmntItmLotVL2() {
        return (ViewLinkImpl) findViewLink("SlsShpmntItmTOSlsShpmntItmLotVL2");
    }

    /**
     * Container's getter for SlsShipmntItmLot3.
     * @return SlsShipmntItmLot3
     */
    public ViewObjectImpl getSlsShipmntItmLot3() {
        return (ViewObjectImpl) findViewObject("SlsShipmntItmLot3");
    }

    public void refreshPickCurr() {
        SlsPickVORowImpl impl = (SlsPickVORowImpl) getSlsPick1().getCurrentRow();
        impl.getLovCurrIdVO1().executeQuery();
    }

    /**
     * Method to fetch header Details from Sal
     * @return
     * 0 : Sucess
     * 1 : Sales Order is not Selected
     */
    public Integer fetchPickHeaderDetailsFromSo() {
        Integer i = 0;
        SlsPickVORowImpl pickRow = (SlsPickVORowImpl) getSlsPick1().getCurrentRow();
        Object soIdO = pickRow.getAttribute("SoIdForSelectionTrans");
        Object soDocIdO = pickRow.getAttribute("SoDocIdForSelectionTrans");
        System.out.println("soDocIdO : " + soDocIdO);
        if (soDocIdO == null) {
            i = 1;
        } else {
            RowSet idVO1 = pickRow.getLovOrderIdVO1();
            idVO1.setNamedWhereClauseParam("DocIdBind", soDocIdO);
            idVO1.executeQuery();
            Row[] soRows = idVO1.getAllRowsInRange();
            if (soRows.length > 0) {
                pickRow.setAttribute("EoId", soRows[0].getAttribute("EoId"));
                pickRow.setAttribute("WhId", soRows[0].getAttribute("WhId"));
                pickRow.setAttribute("DlvAddsId", soRows[0].getAttribute("ShipAdds"));
                pickRow.setAttribute("CurrIdSp", soRows[0].getAttribute("CurrIdSp"));
                pickRow.setAttribute("SoSearchTrans", soIdO);
                pickRow.setAttribute("SoIdTrans", soDocIdO);
                String projId = EbizParamsAPPUtils.getPrjIdFrmWhId(this, soRows[0].getAttribute("WhId").toString());

                pickRow.setAttribute("PrjId", projId);

                idVO1.setNamedWhereClauseParam("DocIdBind", null);
                idVO1.executeQuery();

            }
        }

        return i;
    }

    /**
     * Method to check for Pick can be saved or not
     *  FN_CHK_SO_ADVNC(
    P_CLD_ID      VARCHAR2,
    P_SLOC_ID     NUMBER,
    P_ORG_ID      VARCHAR2,
    P_HO_ORG_ID   VARCHAR2,
    P_PICK_DOC_ID VARCHAR2)
     */
    public Boolean chkSoAdvance(String docId) {
        Row pickRow = getSlsPick1().getCurrentRow();
        RowSetIterator ctr = getSlsPickItm1().createRowSetIterator(null);
        Boolean result = null;
        while (ctr.hasNext()) {
            Row itmRow = ctr.next();
            try {
                Object o = ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_CHK_SO_ADVNC(?,?,?,?,?,?,?)"), new Object[] {
                                                      EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                      EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                                      pickRow.getAttribute("DocId"), itmRow.getAttribute("SoId"),
                                                      pickRow.getAttribute("EoId")
                }, Types.VARCHAR);
                if (o != null) {
                    result = o.toString().equalsIgnoreCase("Y") ? true : false;
                } else {
                    result = false;
                }
                if (!result) {
                    StringBuilder s = new StringBuilder("");
                    s.append("The Current Pick Contains Sales Order No. <b style='color:blue;'>");
                    s.append(itmRow.getAttribute("SoIdTrans"));
                    s.append("</b><br />But Advance Payment is not made for the Selected Sales Order. So we cannot save current Pick !");
                    s.append("<br /><br />Please make Advance Payment Entry on Sales Order to make Pick using this Sales Order");

                    ADFModelUtils.showFormattedFacesMessage("The Current Pick cannot be saved as Advance Payment is not made for Sales Order/Orders selected in Current Pick!",
                                                            s.toString(), FacesMessage.SEVERITY_ERROR);
                    break;
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        ctr.closeRowSetIterator();

        return result;
    }


    public void sendMail() {
        PickPackShipSendMailHelper.sendMail(this);
    }

    /**
     * Container's getter for DualSrItemSearch1.
     * @return DualSrItemSearch1
     */
    public ViewObjectImpl getDualSrItemSearch() {
        return (ViewObjectImpl) findViewObject("DualSrItemSearch");
    }

    /**
     * Container's getter for LOVWhIdAdds1.
     * @return LOVWhIdAdds1
     */
    public ViewObjectImpl getLOVWhIdAddsVO1() {
        return (ViewObjectImpl) findViewObject("LOVWhIdAddsVO1");
    }

    /**
     * Container's getter for LOVRouteName1.
     * @return LOVRouteName1
     */
    public ViewObjectImpl getLOVRouteNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVRouteNameVO1");
    }

    /**
     * Container's getter for LOVGetLocId1.
     * @return LOVGetLocId1
     */
    public ViewObjectImpl getLOVGetLocIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVGetLocIdVO1");
    }


    /**
     * Method to get the Route Id for the given warehouse and shipment
     */
    public void createRouteInTransport() {
        // this.getsearchShipmnt1().getCurrentRow().getAttribute("")
        //fn_trnp_ins_route_prf
        Object o = null;
        System.out.println("==========================================================");
        System.out.println(this.getsearchShipmnt1().getCurrentRow().getAttribute("TransAddRouteName"));
        System.out.println(this.getsearchShipmnt1().getCurrentRow().getAttribute("whIdTrans"));
        System.out.println(this.getsearchShipmnt1().getCurrentRow().getAttribute("ShippingAddressTrans"));
        System.out.println(this.getsearchShipmnt1().getCurrentRow().getAttribute("TransRouteDist"));
        try {
            o = ADFModelUtils.callFunction(this, new StringBuilder("SLS.fn_trnp_ins_route_prf(?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           EbizParamsAPPUtils.getFyId(this, EbizParams.GLBL_APP_USR_ORG(),
                                                                      StaticValue.getCurrDtWidTimestamp()),
                                           this.getsearchShipmnt1().getCurrentRow().getAttribute("TransAddRouteName"),
                                           this.getsearchShipmnt1().getCurrentRow().getAttribute("ShippingAddressTrans"),
                                           this.getsearchShipmnt1().getCurrentRow().getAttribute("whIdTrans"),
                                           this.getsearchShipmnt1().getCurrentRow().getAttribute("TransRouteDist"),
                                           EbizParams.GLBL_APP_USR(), StaticValue.getCurrDtWidTimestamp()
            }, Types.VARCHAR);
            _log.info("Route Id Created=" + o);
            if (o != null) {
                String res = (String) o;
                if (res.equalsIgnoreCase("-1")) {
                    ADFModelUtils.showFormattedFacesMessage("Error in Function",
                                                            "There have been some ERROR in function SLS.fn_trnp_ins_route_prf! Contact ESS",
                                                            FacesMessage.SEVERITY_ERROR);
                }
                if (res.equalsIgnoreCase("-2")) {
                    ADFModelUtils.showFormattedFacesMessage("Transportation Location not Defined!",
                                                            "Please define address for Source (Warehouse) Address.",
                                                            FacesMessage.SEVERITY_ERROR);
                }
                if (res.equalsIgnoreCase("-3")) {
                    ADFModelUtils.showFormattedFacesMessage("Transportation Location not Defined!",
                                                            "Please define Destination (Shipment) address.",
                                                            FacesMessage.SEVERITY_ERROR);
                }
            }

        } catch (Exception e) {

            e.printStackTrace();
        }

        // this.getsearchShipmnt1().getCurrentRow().getAttribute("DeptPointTrans"),
        // this.getsearchShipmnt1().getCurrentRow().getAttribute("ArrPointTrans"),
        //searchShipmntVORowImpl rowimpl = (searchShipmntVORowImpl) this.getsearchShipmnt1().getCurrentRow();
        this.getLOVRouteNameVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        this.getLOVRouteNameVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        this.getLOVRouteNameVO1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        this.getLOVRouteNameVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        this.getLOVRouteNameVO1().setNamedWhereClauseParam("BindArrPoint",
                                                           this.getsearchShipmnt1().getCurrentRow().getAttribute("ArrPointTrans"));
        this.getLOVRouteNameVO1().setNamedWhereClauseParam("BindDeptPoint",
                                                           this.getsearchShipmnt1().getCurrentRow().getAttribute("DeptPointTrans"));
        this.getLOVRouteNameVO1().executeQuery();
        _log.info("No. of rows in route name=" + this.getLOVRouteNameVO1().getEstimatedRowCount());
        this.getsearchShipmnt1().getCurrentRow().setAttribute("RouteIdTrans", o);
        this.getsearchShipmnt1().getCurrentRow().setAttribute("TransAddRouteName", null);
        this.getsearchShipmnt1().getCurrentRow().setAttribute("TransRouteDist", null);
    }

    /**
     * Method to check for Profile Values
     * @param columnNm
     * @return
     */
    public String checkProfileValues(String columnNm) {
        return PickAMHelper.checkforProfileValues(this, columnNm).toString();
    }


    /**
     * Container's getter for SlsPickSrNote1.
     * @return SlsPickSrNote1
     */
    public ViewObjectImpl getSlsPickSrNote1() {
        return (ViewObjectImpl) findViewObject("SlsPickSrNote1");
    }

    /**
     * Container's getter for SlsPickItemToSlsPickSrNoteVL1.
     * @return SlsPickItemToSlsPickSrNoteVL1
     */
    public ViewLinkImpl getSlsPickItemToSlsPickSrNoteVL1() {
        return (ViewLinkImpl) findViewLink("SlsPickItemToSlsPickSrNoteVL1");
    }

    /**
     * Method to add serial no as user defined for the pick item
     */
    public String addUserDefinedSrForItem() {
        String chk = "N";
        ViewObjectImpl slsPickSrNot = this.getSlsPickSrNote1();
        Row r = getSlsPick1().getCurrentRow();
        if (r != null) {
            Object value = r.getAttribute("UsrDefindSrTrans");
            if (value != null) {
                //Number count = new Number(0);
                Integer rowCount = slsPickSrNot.getRowCount();
                System.out.println(rowCount + " <<<<< No. of Rows.");
                /* try {
                    count = rowCount == 0 ? new Number(0) : new Number(rowCount);
                } catch (SQLException sqle) {
                    // TODO: Add catch code
                    sqle.printStackTrace();
                }*/
                Row newRow = slsPickSrNot.createRow();
                slsPickSrNot.insertRow(newRow);
                newRow.setAttribute("SrlNo", rowCount + 1);
                newRow.setAttribute("SrNo", value);
                r.setAttribute("UsrDefindSrTrans", null);
                //System.out.println(newRow.getAttributeHints("SrlNo") + " Serail no that is added");
                slsPickSrNot.executeQuery();
                chk = "Y";
            }
        }
        return chk;
    }

    /**
     * Method to remove the serial value for an item
     */
    public void removeUsrDefindSerial(Integer sr_No) {
        System.out.println(sr_No + " <<<< This is the serial that need to be removed");
        Row[] r = getSlsPickSrNote1().getAllRowsInRange();
        for (int i = 0; i < r.length; i++) {
            if (r[i].getAttribute("SrlNo") == sr_No) {
                r[i].remove();
            }
        }
        reorderSrNo(sr_No);
        getSlsPickSrNote1().executeQuery();
    }

    /**
     * Method to reorder the serial no of the item
     */
    public void reorderSrNo(Integer sr_No) {

        RowSetIterator rit = getSlsPickSrNote1().createRowSetIterator(null);
        Row srRow = null;
        Integer currSrNO = 0;
        while (rit.hasNext()) {
            srRow = rit.next();
            currSrNO = (Integer) srRow.getAttribute("SrlNo");

            if (currSrNO.compareTo(sr_No) == 1) {
                System.out.println("set " + (currSrNO - 1));
                srRow.setAttribute("SrlNo", currSrNO - 1);
            }

        }
        rit.closeRowSetIterator();
    }

    /**
     * Method to check to display user defiend serial or not
     *         p_cld_id    VARCHAR2,
        p_sloc_id   NUMBER,
        p_org_id    VARCHAR2,
        p_col       VARCHAR2
     */
    public Boolean chkMMPrf() {
        Boolean res = false;
        try {
            Object r = ADFModelUtils.callFunction(this, new StringBuilder("MM.mm_chk_org_prf(?,?,?,?)"), new Object[] {
                                                  EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                  EbizParams.GLBL_APP_USR_ORG(), "ITM_ADDL_INFO"
            }, Types.VARCHAR);
            if (r != null) {
                if ("Y".equalsIgnoreCase(r.toString())) {
                    res = true;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return res;

    }

    /**
     * Method to generate Shipment
     * @return
     * 0 : Shipment Created successfully
     * 1 : Not even one pick is selected for Shipment Creation.
     * 2 : Transport route is not defined.
     * 3 : Vehical Type is not defined
     * -1 : Error
     */
    public Integer generateShipment(ArrayList pickList) {
        Integer i = 0;
        ArrayList<PickDtlsDS> pickDtls = (ArrayList<PickDtlsDS>) pickList;

        if (pickDtls.size() == 0) {
            i = 1;
        } else if (validateTransporterDetails() == 1) { // Still need to work and minimise the method call
            i = 2;
        } else if (validateTransporterDetails() == 2) {
            i = 3;
        } else if (validateTransporterDetails() == 3) {
            i = 4;
        } else {
            PickDtlsDS dS = pickDtls.get(0);
            Integer eoId = dS.getEoId();
            String whId = dS.getWhId();
            Integer currIdSp = dS.getCurrIdSp();
            Number currConvFctr = EbizParamsAPPUtils.getCurrRateForCurrId(this, currIdSp);
            String prjId = dS.getPrjId();
            String shipAdds = dS.getShipAdds();
            Integer fyId = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);

            Row trnpRow = this.getsearchShipmnt1().getCurrentRow();
            Object trnpIdO = trnpRow.getAttribute("TransporterIdTrans");
            Object rmrksO = trnpRow.getAttribute("RemarksTrans");
            Object trnsModeO = trnpRow.getAttribute("TransMode");
            Object trnsVchNoO = trnpRow.getAttribute("TransVchNo");
            Object trnsGrNoO = trnpRow.getAttribute("TransGrNo");
            Object trnsCntrNoO = trnpRow.getAttribute("TransContonrNo");
            Object engnrIdO = trnpRow.getAttribute("EngineerId");
            Object reqTypO = trnpRow.getAttribute("ReqType");
            Object vehicalTypO = trnpRow.getAttribute("VehicleTyp");
            Object routeIdO = trnpRow.getAttribute("RouteIdTrans");
            Object toPayO = trnpRow.getAttribute("ToPayTrans");
            Object itmPricTypO = trnpRow.getAttribute("ItmPriceType");
            if (itmPricTypO == null) {
                itmPricTypO = new Number(937);
            }
            ViewObject slsShipmntHdr = this.getSlsShipmntHdrVO1();
            ViewObjectImpl shipmntVo = getSlsShipmnt1();
            Row shipHdrRow = slsShipmntHdr.createRow();
            slsShipmntHdr.insertRow(shipHdrRow);
            Object shipmntDocTxnIdO = EbizParams.generateDocTxnId(this, 21503, 0);
            Object dispDocId = null;
            Timestamp docDt = StaticValue.getCurrDtWidTimestamp();
            if (shipmntDocTxnIdO == null) {
                i = -1;
            }
            if (i == 0) {
                shipHdrRow.setAttribute("CldId", EbizParams.GLBL_APP_CLD_ID());
                shipHdrRow.setAttribute("SlocId", EbizParams.GLBL_APP_SERV_LOC());
                shipHdrRow.setAttribute("OrgId", EbizParams.GLBL_APP_USR_ORG());
                shipHdrRow.setAttribute("HoOrgId", EbizParams.GLBL_HO_ORG_ID());
                shipHdrRow.setAttribute("DocId", shipmntDocTxnIdO);
                shipHdrRow.setAttribute("DocDt", docDt);
                shipHdrRow.setAttribute("WhId", whId);
                shipHdrRow.setAttribute("PrjId", prjId);
                shipHdrRow.setAttribute("EoId", eoId);

                try {
                    dispDocId =
                        ADFModelUtils.callFunction(this, new StringBuilder("SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)"), new Object[] {
                                                   getparamSlocId(), getparamCldId(), getparamOrgId(),
                                                   new Integer(21508), shipmntDocTxnIdO, new Integer(0), "SLS$SHIPMNT",
                                                   fyId
                    }, Types.VARCHAR);
                } catch (Exception e) {
                    ADFModelUtils.showFormattedFacesMessage("There have been a problem in calling database function GEN_DISP_DOC_ID !",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    e.printStackTrace();
                    i = -1;
                }

                shipHdrRow.setAttribute("ShipmntId", dispDocId);
                shipHdrRow.setAttribute("CurrIdSp", currIdSp);
                shipHdrRow.setAttribute("CurrConvFctr", currConvFctr);
                shipHdrRow.setAttribute("ShipmntStat", 217);
                shipHdrRow.setAttribute("CogsVouId", null);
                shipHdrRow.setAttribute("TransporterId", trnpIdO);
                shipHdrRow.setAttribute("Remarks", rmrksO);
                shipHdrRow.setAttribute("TransMode", trnsModeO);
                shipHdrRow.setAttribute("TransVhNo", trnsVchNoO);
                shipHdrRow.setAttribute("TransGrNo", trnsGrNoO);
                shipHdrRow.setAttribute("TransContnrNo", trnsCntrNoO);
                shipHdrRow.setAttribute("ShipAdds", shipAdds);
                shipHdrRow.setAttribute("RevCogsVouId", null);
                shipHdrRow.setAttribute("EmpEoId", engnrIdO);
                shipHdrRow.setAttribute("ReqTyp", reqTypO);
                shipHdrRow.setAttribute("VehicleTyp", vehicalTypO);
                shipHdrRow.setAttribute("RouteDocId", routeIdO);
                shipHdrRow.setAttribute("ToPay", toPayO);
                shipHdrRow.setAttribute("FyId", fyId);
                shipHdrRow.setAttribute("ItmPriceType", itmPricTypO);
                if (i == 0) {
                    for (PickDtlsDS pickRow : pickDtls) {
                        Row shipRow = shipmntVo.createRow();
                        shipmntVo.insertRow(shipRow);
                        shipRow.setAttribute("DocId", shipmntDocTxnIdO);
                        shipRow.setAttribute("DocDt", docDt);
                        shipRow.setAttribute("CldId", EbizParams.GLBL_APP_CLD_ID());
                        shipRow.setAttribute("SlocId", EbizParams.GLBL_APP_SERV_LOC());
                        shipRow.setAttribute("OrgId", EbizParams.GLBL_APP_USR_ORG());
                        shipRow.setAttribute("HoOrgId", EbizParams.GLBL_HO_ORG_ID());
                        shipRow.setAttribute("PrjId", prjId);
                        shipRow.setAttribute("WhId", whId);
                        shipRow.setAttribute("PickId", pickRow.getPickDocId());
                        shipRow.setAttribute("EoId", eoId);
                        shipRow.setAttribute("CurrIdSp", currIdSp);
                        shipRow.setAttribute("CurrConvFctr", currConvFctr);
                        shipRow.setAttribute("TransporterId", trnpIdO);
                        shipRow.setAttribute("Remarks", rmrksO);
                        shipRow.setAttribute("TransMode", trnsModeO);
                        shipRow.setAttribute("TransVhNo", trnsVchNoO);
                        shipRow.setAttribute("TransGrNo", trnsGrNoO);
                        shipRow.setAttribute("TransContnrNo", trnsCntrNoO);
                        shipRow.setAttribute("EmpEoId", engnrIdO);
                        shipRow.setAttribute("ShipAdds", shipAdds);
                        shipRow.setAttribute("ReqTyp", reqTypO);
                        shipRow.setAttribute("VehicleTyp", vehicalTypO);
                        shipRow.setAttribute("RouteDocId", routeIdO);
                        shipRow.setAttribute("ToPay", toPayO);
                        shipRow.setAttribute("FyId", fyId);
                        shipRow.setAttribute("ShipmntId", dispDocId);

                        try {
                            Integer r = null;
                            Object o =
                                ADFModelUtils.callFunction(this,
                                                           new StringBuilder("SLS.FN_INS_PICK_TO_SHIP(?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                           whId, shipmntDocTxnIdO, docDt, eoId, pickRow.getPickDocId(),
                                                           EbizParams.GLBL_APP_USR(),
                                                           StaticValue.getCurrDtWidTimestamp(), itmPricTypO
                            }, Types.INTEGER);
                            r = (o == null ? -1 : (Integer) o);
                            if (r == -1) {
                                ADFModelUtils.showFormattedFacesMessage("There have been a problem in calling database function FN_INS_PICK_TO_SHIP !",
                                                                        "Please try again.</br></br>If the problem persists please contact ESS !",
                                                                        FacesMessage.SEVERITY_ERROR);
                                break;
                            }
                        } catch (Exception e) {
                            i = -1;
                            FacesMessage message =
                                new FacesMessage("There have been an error in calling function 'FN_INS_PICK_TO_SHIP' ! " +
                                                 e.getMessage());
                            message.setSeverity(FacesMessage.SEVERITY_FATAL);
                            FacesContext.getCurrentInstance().addMessage(null, message);
                            break;
                        }
                        if (i == 0) {
                            Integer j =
                                pushDataToLoadingRequest(shipmntDocTxnIdO, reqTypO, trnpIdO, eoId, fyId, routeIdO,
                                                         vehicalTypO, currIdSp, currConvFctr);
                            i = j;
                        }

                        if (i == -1) {
                            break;
                        }
                    }
                }
            }

            if (i == 0) {
                String mtlIssuDocTxnId = null;
                try {
                    mtlIssuDocTxnId =
                        callStoredFunction(Types.VARCHAR, "SLS.FN_SLS_TO_MM_SHIP_ITM(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(), whId,
                                           fyId, docDt, shipmntDocTxnIdO, docDt, eoId, getparamUsrId(),
                                           StaticValue.getCurrDtWidTimestamp()
                    }).toString();
                } catch (Exception e) {
                    i = -1;
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'FN_SLS_TO_MM_SHIP_ITM' ! " +
                                         e.getMessage());
                    message.setSeverity(FacesMessage.SEVERITY_FATAL);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                }
                if (i == 0) {
                    this.getDBTransaction().postChanges();
                    try {
                        callStoredFunction(Types.NUMERIC, "MM.mm_updt_stk_rels(?,?,?,?,?,?,?)", new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_APP_USR_ORG(), whId, fyId, 329, shipmntDocTxnIdO
                        });
                    } catch (Exception e) {
                        i = -1;
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'mm_updt_stk_rels' ! " +
                                             e.getMessage());
                        message.setSeverity(FacesMessage.SEVERITY_FATAL);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                    }
                }
                if (i == 0) {
                    try {
                        ADFModelUtils.callFunction(this, new StringBuilder("MM.MM_UPDT_STK(?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                   EbizParams.GLBL_APP_USR_ORG(), whId, mtlIssuDocTxnId, "I"
                        }, Types.NUMERIC);
                    } catch (Exception e) {
                        i = -1;
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'MM_UPDT_STK' ! " +
                                             e.getMessage());
                        message.setSeverity(FacesMessage.SEVERITY_FATAL);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                    }
                }
                if (i == 0) {
                    this.getDBTransaction().postChanges();
                    try {
                        String s = callStoredFunction(Types.VARCHAR, "FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] {
                                                      shipmntDocTxnIdO, docDt, EbizParams.GLBL_APP_USR(),
                                                      EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_SERV_LOC(),
                                                      EbizParams.GLBL_HO_ORG_ID(), getparamCldId(), "S"
                        }).toString();
                        System.out.println("Return from FN_SLS_TO_FIN_COST_OF_GOOD : " + s);

                    } catch (Exception e) {
                        i = -1;
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_COST_OF_GOOD' ! " +
                                             e.getMessage());
                        message.setSeverity(FacesMessage.SEVERITY_FATAL);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                }
            }
            if (i == 0) {
                generateCostCenter(shipmntDocTxnIdO.toString());
                this.getDBTransaction().postChanges();
                sendDateFromTempCcToSlsSoCc(shipmntDocTxnIdO.toString());
            }
            if (i == 0) {
                DBTransaction bTransaction = this.getDBTransaction();

                try {
                    getsearchShipmnt1().executeQuery();
                    bTransaction.commit();
                    String callFunctionToGetGeneratedVouId =
                        callFunctionToGetGeneratedVouId(shipmntDocTxnIdO.toString());
                    getviewSlsShipmntGen1().executeQuery();
                    StringBuilder dtl = new StringBuilder("");
                    if (!"0".equals(callFunctionToGetGeneratedVouId)) {
                        dtl.append("Shipment have been created SuccessFully.</br></br>");
                        dtl.append("Cost of Goods Voucher with Voucher No. ");
                        dtl.append(callFunctionToGetGeneratedVouId);
                        dtl.append(" have been passed.");
                    }

                    ADFModelUtils.showFormattedFacesMessage("Shipment No. " + dispDocId + " generated Successfully.",
                                                            dtl.toString(), FacesMessage.SEVERITY_INFO);
                } catch (Exception e) {
                    ADFModelUtils.showFormattedFacesMessage("There have been an error while Creating Shipment.",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    e.printStackTrace();
                    this.getDBTransaction().rollback();
                }
            } else {
                this.getDBTransaction().rollback();
            }
        }
        return i;
    }

    /**
     * Method to validate Transporter Details
     * 0 : Transporter details are valid
     * 1 : Route is not defined.
     * 2 : Vehical Type is not defined
     */
    public Integer validateTransporterDetails() {
        Integer i = 0;
        StringBuffer buffer = PickAMHelper.checkforProfileValues(this, "USE_TRNPT_MDL");
        if ("Y".equals(buffer.toString())) {
            Row currentRow = this.getsearchShipmnt1().getCurrentRow();
            Object routeIdO = currentRow.getAttribute("RouteIdTrans");
            Object vehicalTypeO = currentRow.getAttribute("VehicleTyp");
            Object transporter = currentRow.getAttribute("TransporterIdTrans");
            if (routeIdO == null) {
                i = 1;
            } else if (vehicalTypeO == null) {
                i = 2;
            } else if (transporter == null) {
                i = 3;
            }
        }
        return i;
    }

    /**
     * Container's getter for SlsShipmntHdrVO1.
     * @return SlsShipmntHdrVO1
     */
    public ViewObjectImpl getSlsShipmntHdrVO1() {
        return (ViewObjectImpl) findViewObject("SlsShipmntHdrVO1");
    }

    @Override
    public String generateShipment() {
        // TODO Implement this method
        return null;
    }

    @Override
    public String callFunctionToGetGeneratedVouId() {
        // TODO Implement this method
        return null;
    }

    @Override
    public Boolean chkMandTrnpFldsEnterOrNot() {
        // TODO Implement this method
        return null;
    }

    /**
     * Container's getter for SlsShipmntVO3.
     * @return SlsShipmntVO3
     */
    public ViewObjectImpl getSlsShipmnt1() {
        return (ViewObjectImpl) findViewObject("SlsShipmnt1");
    }

    /**
     * Container's getter for ShipmntHdrToShipmntVL1.
     * @return ShipmntHdrToShipmntVL1
     */
    public ViewLinkImpl getShipmntHdrToShipmntVL1() {
        return (ViewLinkImpl) findViewLink("ShipmntHdrToShipmntVL1");
    }

    /**
     * Container's getter for SlsShipmntItmVO1.
     * @return SlsShipmntItmVO1
     */
    public ViewObjectImpl getSlsShipmntItm1() {
        return (ViewObjectImpl) findViewObject("SlsShipmntItm1");
    }

    /**
     * Container's getter for SlsShpmntTOSlsShpmntItmVL2.
     * @return SlsShpmntTOSlsShpmntItmVL2
     */
    public ViewLinkImpl getSlsShpmntTOSlsShpmntItmVL2() {
        return (ViewLinkImpl) findViewLink("SlsShpmntTOSlsShpmntItmVL2");
    }

    /**
     * Container's getter for SlsShipmntItmBinVO1.
     * @return SlsShipmntItmBinVO1
     */
    public ViewObjectImpl getSlsShipmntItmBin1() {
        return (ViewObjectImpl) findViewObject("SlsShipmntItmBin1");
    }

    /**
     * Container's getter for SlsShpmntItmTOSlsShpmntItmBinVL2.
     * @return SlsShpmntItmTOSlsShpmntItmBinVL2
     */
    public ViewLinkImpl getSlsShpmntItmTOSlsShpmntItmBinVL2() {
        return (ViewLinkImpl) findViewLink("SlsShpmntItmTOSlsShpmntItmBinVL2");
    }

    /**
     * Container's getter for SlsShipmntItmLotVO1.
     * @return SlsShipmntItmLotVO1
     */
    public ViewObjectImpl getSlsShipmntItmLot1() {
        return (ViewObjectImpl) findViewObject("SlsShipmntItmLot1");
    }

    /**
     * Container's getter for SlsShpmntItmTOSlsShpmntItmLotVL3.
     * @return SlsShpmntItmTOSlsShpmntItmLotVL3
     */
    public ViewLinkImpl getSlsShpmntItmTOSlsShpmntItmLotVL3() {
        return (ViewLinkImpl) findViewLink("SlsShpmntItmTOSlsShpmntItmLotVL3");
    }

    /**
     * Container's getter for SlsShipmntItmSrVO1.
     * @return SlsShipmntItmSrVO1
     */
    public ViewObjectImpl getSlsShipmntItmSr1() {
        return (ViewObjectImpl) findViewObject("SlsShipmntItmSr1");
    }

    /**
     * Container's getter for SlsShpmntItmTOSlsShpmntItmSrVL2.
     * @return SlsShpmntItmTOSlsShpmntItmSrVL2
     */
    public ViewLinkImpl getSlsShpmntItmTOSlsShpmntItmSrVL2() {
        return (ViewLinkImpl) findViewLink("SlsShpmntItmTOSlsShpmntItmSrVL2");
    }

    /**
     * Method to check if any shipment has been created against the pick
     * fn_chk_ship
(
p_sloc number,
P_CLD VARCHAR2,
p_org varchar2,
p_doc varchar2
)
     */
    public Boolean isShipPresntForPick() {
        Boolean result = true;

        Object pickId = resolvEl("#{pageFlowScope.PICK_DOC_ID}");
        System.out.println(pickId + " <<< current Pick Id");
        if (pickId != null) {

            Object o = null;
            try {
                o = ADFModelUtils.callFunction(this, new StringBuilder("fn_chk_Pack_alwd_for_pick(?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), pickId
                }, Types.VARCHAR);
            } catch (Exception e) {
                e.printStackTrace();
            }
            System.out.println(o + " <>><<<  This is the return from function");
            if (o != null && "N".equalsIgnoreCase(o.toString())) {
                result = false;
            }
        }
        return result;
    }


    /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    public void insertIntoPickItmBinForPckMtr() {
        ViewObjectImpl mtlItm = this.getPackagingMtrlVO1();
        ViewObjectImpl mtlBin = this.getSLSPckMtlBinVO1();
        ViewObjectImpl mtlLot = this.getSLSPckMtlLotVO1();
        Row currItm = mtlItm.getCurrentRow();
        Number zero = StaticValue.NUMBER_ZERO;
        ViewObjectImpl mmStkSummBinVo = this.getViewMmStkSummBinVO1();
        RowQualifier mmStkSummBinRq = new RowQualifier(mmStkSummBinVo);
        mmStkSummBinRq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() +
                                      " and OrgId='" + getparamOrgId() + "' and ItmId='" +
                                      currItm.getAttribute("ItmId"));
        Row[] binRow = mmStkSummBinVo.getFilteredRows(mmStkSummBinRq);
        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                    }
                }
            }
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        _log.info(" Lot size  " + lotset.size() + " lotset " + lotset);
        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = StaticValue.NUMBER_ZERO;
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            // Check lot already created or not
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" PickId ='" + currItm.getAttribute("PickId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());


            Number pickedQty = StaticValue.NUMBER_ZERO;
            Number pickedQtyBs = StaticValue.NUMBER_ZERO;
            if (rows.length > 0) {

                for (Row r : rows) {

                    pickedQtyBs = lotQty;
                    r.setAttribute("PckQtyBs", pickedQtyBs);
                    String baseUom = getBaseUomforPckMtrl(currItm.getAttribute("ItmId").toString());
                    Object convFctr =
                        ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                   EbizParams.GLBL_APP_USR_ORG(), currItm.getAttribute("ItmId"),
                                                   r.getAttribute("ItmUom"), r.getAttribute("ItmUom")
                    }, Types.NUMERIC);
                    Number uomFctr = new Number(1);
                    try {
                        uomFctr = new Number(convFctr);
                    } catch (Exception e) {
                        _log.info(e);
                    }
                    pickedQty = pickedQty.divide(uomFctr);
                    pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                    r.setAttribute("PckQty", pickedQty);

                    _log.info(" key :" + lotId + " lotval :" + pickedQtyBs);
                    if (this.getPriceForLotForPckMtrl(lotId, pickedQtyBs) != null) {
                        r.setAttribute("ItmLotCost", this.getPriceForLotForPckMtrl(lotId, pickedQtyBs));
                    }
                    this.getSLSPckMtlLotVO1().executeQuery();
                }
            } else {
                pickedQtyBs = lotQty;
                pickedQty = lotQty;
                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("PckQtyBs", pickedQtyBs);
                instLot.setAttribute("PickId", currItm.getAttribute("PickId"));

                String baseUom = getBaseUomforPckMtrl(currItm.getAttribute("ItmId").toString());
                instLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                Object convFctr =
                    ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                               EbizParams.GLBL_APP_USR_ORG(), currItm.getAttribute("ItmId"),
                                               instLot.getAttribute("ItmUom"), instLot.getAttribute("ItmUom")
                }, Types.NUMERIC);
                Number uomFctr = new Number(1);
                try {
                    uomFctr = new Number(convFctr);
                } catch (Exception e) {
                    _log.info(e);
                }
                pickedQty = pickedQty.divide(uomFctr);
                pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);

                instLot.setAttribute("PckQty", pickedQty);

                _log.info(" key :" + lotId + " lotval :" + pickedQtyBs);
                if (this.getPriceForLotForPckMtrl(lotId, pickedQtyBs) != null) {
                    instLot.setAttribute("ItmLotCost", this.getPriceForLotForPckMtrl(lotId, pickedQtyBs));
                }
                _log.info("Pick Id in Lot -->" + currItm.getAttribute("PickId"));
                mtlLot.executeQuery();
                this.getSLSPckMtlLotVO1().executeQuery();
            }
        }
        if (mtlLot.getRowCount() > lotset.size()) {
            RowSetIterator mtlitr = mtlLot.createRowSetIterator(null);
            while (mtlitr.hasNext()) {
                Row next = mtlitr.next();
                String lid = next.getAttribute("LotId").toString();
                if (!(lotset.contains(lid))) {
                    next.remove();
                }
            }
            mtlitr.closeRowSetIterator();
            this.getSLSPckMtlLotVO1().executeQuery();
            this.getSLSPckMtlLotVO1().clearCache();
        }
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        // Check bin already created or not
                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" PickId ='" + currItm.getAttribute("PickId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        _log.info("" + rowQualifier.getExprStr());
                        _log.info("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    _log.info("bin row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    _log.info("bin row update ----------");
                                    r.setAttribute("PckQtyBs", rr.getAttribute("TransIssueQty"));
                                    Number pickedQty = (Number) rr.getAttribute("TransIssueQty");
                                    String baseUom = getBaseUomforPckMtrl(currItm.getAttribute("ItmId").toString());
                                    Object convFctr =
                                        ADFModelUtils.callFunction(this,
                                                                   new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                                                   EbizParams.GLBL_APP_SERV_LOC(),
                                                                   EbizParams.GLBL_APP_CLD_ID(),
                                                                   EbizParams.GLBL_APP_USR_ORG(),
                                                                   currItm.getAttribute("ItmId"),
                                                                   currItm.getAttribute("ItmUom"),
                                                                   currItm.getAttribute("ItmUom")
                                    }, Types.NUMERIC);
                                    Number uomFctr = new Number(1);
                                    try {
                                        uomFctr = new Number(convFctr);
                                    } catch (Exception e) {
                                        _log.info(e);
                                    }
                                    pickedQty = pickedQty.divide(uomFctr);
                                    pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);
                                    r.setAttribute("PckQty", pickedQty);
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                _log.info("row created in  bin ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("PckQtyBs", rr.getAttribute("TransIssueQty"));
                                //    binInst.setAttribute("SoDt", currItm.getAttribute("SoDt"));
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                Number pickedQty = (Number) rr.getAttribute("TransIssueQty");
                                String baseUom = getBaseUomforPckMtrl(rr.getAttribute("ItmId").toString());
                                binInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                                Object convFctr =
                                    ADFModelUtils.callFunction(this,
                                                               new StringBuilder("APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)"), new Object[] {
                                                               EbizParams.GLBL_APP_SERV_LOC(),
                                                               EbizParams.GLBL_APP_CLD_ID(),
                                                               EbizParams.GLBL_APP_USR_ORG(),
                                                               currItm.getAttribute("ItmId"),
                                                               currItm.getAttribute("ItmUom"),
                                                               currItm.getAttribute("ItmUom")
                                }, Types.NUMERIC);
                                Number uomFctr = new Number(1);
                                try {
                                    uomFctr = new Number(convFctr);
                                } catch (Exception e) {
                                    _log.info(e);
                                }
                                pickedQty = pickedQty.divide(uomFctr);
                                pickedQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQty);

                                binInst.setAttribute("PckQty", pickedQty);

                                mtlBin.insertRow(binInst);
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        _log.info("clering cache");

        mmStkSummBinVo.clearCache();
    }
    /*********************************************************************************************************************************************************/

    /**
     * Method to add lot data for Packing Material
     * @return
     */
    public String insertIntoPickItmLotForPckMtrl1() {
        Boolean success = true;
        ViewObjectImpl mtlItm = this.getPackagingMtrlVO1();
        ViewObjectImpl mtlBin = this.getSLSPckMtlBinVO1();
        ViewObjectImpl mtlLot = this.getSLSPckMtlLotVO1();
        Row packRow = mtlItm.getCurrentRow();
        Object itmIdO = packRow.getAttribute("ItmId");
        Object itmUomO = packRow.getAttribute("ItmUom");
        if (itmIdO == null || itmUomO == null) {
            success = false;
            ADFModelUtils.showFormattedFacesMessage("Item Id or Item Uom is not defined.",
                                                    "Please Select the value for defined attributes.",
                                                    FacesMessage.SEVERITY_ERROR);
        }
        if (success) {
            ViewObjectImpl mmStkSummBinVo = this.getViewMmStkSummLotVO1();
            removeAllDataFromLotBinSrForPckMtl();
            LotData data = new LotData();
            RowSetIterator binCtr = mmStkSummBinVo.createRowSetIterator(null);
            while (binCtr.hasNext()) {
                Row row = binCtr.next();
                Object issuQtyO = row.getAttribute("TransIssuQtyValue");
                if (issuQtyO != null) {
                    Number issuQty = (issuQtyO == null ? StaticValue.NUMBER_ZERO : (Number) issuQtyO);
                    if (issuQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                        Object lotIdO = row.getAttribute("LotId");
                        Object itmLotPriceO = row.getAttribute("ItmLotPrice");
                        Number itmLotPrice = (itmLotPriceO == null ? StaticValue.NUMBER_ZERO : (Number) itmLotPriceO);
                        LotRow lotRow = new LotRow(lotIdO.toString(), "", "", issuQty, itmLotPrice);
                        data.addLotData(lotRow);
                    }
                }
            }

            ArrayList<String> lotData = data.getDistinctLotId();
            for (String lotId : lotData) {
                addDataToPckMtlLot(lotId, data.getTotOkQtyForLot(lotId), itmIdO.toString(), itmUomO.toString());
            }
            mmStkSummBinVo.clearCache();
        }
        return null;
    }


    /**
     *  Method for adding Packing material Lot Bin data for PackMaterial
     */
    public void insertIntoPickItmBinForPckMtrl() {
        Boolean success = true;
        ViewObjectImpl mtlItm = this.getPackagingMtrlVO1();
        ViewObjectImpl mtlBin = this.getSLSPckMtlBinVO1();
        ViewObjectImpl mtlLot = this.getSLSPckMtlLotVO1();
        Row packRow = mtlItm.getCurrentRow();
        Object itmIdO = packRow.getAttribute("ItmId");
        Object itmUomO = packRow.getAttribute("ItmUom");
        if (itmIdO == null || itmUomO == null) {
            success = false;
            ADFModelUtils.showFormattedFacesMessage("Item Id or Item Uom is not defined.",
                                                    "Please Select the value for defined attributes.",
                                                    FacesMessage.SEVERITY_ERROR);
        }
        if (success) {
            ViewObjectImpl mmStkSummBinVo = this.getViewMmStkSummBinVO1();
            removeAllDataFromLotBinSrForPckMtl();
            LotData data = new LotData();
            RowSetIterator binCtr = mmStkSummBinVo.createRowSetIterator(null);
            while (binCtr.hasNext()) {
                Row row = binCtr.next();
                Object issuQtyO = row.getAttribute("TransIssueQty");
                if (issuQtyO != null) {
                    Number issuQty = (issuQtyO == null ? StaticValue.NUMBER_ZERO : (Number) issuQtyO);
                    if (issuQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                        Object lotIdO = row.getAttribute("LotId");
                        Object binIdO = row.getAttribute("BinId");
                        Object itmLotPriceO = row.getAttribute("ItmLotPrice");
                        Number itmLotPrice = (itmLotPriceO == null ? StaticValue.NUMBER_ZERO : (Number) itmLotPriceO);
                        LotRow lotRow = new LotRow(lotIdO.toString(), binIdO.toString(), "", issuQty, itmLotPrice);
                        data.addLotData(lotRow);
                    }
                }
            }

            ArrayList<String> lotData = data.getDistinctLotId();
            for (String lotId : lotData) {
                addDataToPckMtlLot(lotId, data.getTotOkQtyForLot(lotId), itmIdO.toString(), itmUomO.toString());
            }

            ArrayList<String[]> lotBinData = data.getDistinctLotBinId();
            for (String[] binDtls : lotBinData) {
                String lotId = binDtls[0];
                String binId = binDtls[1];
                addDataToPckMtlBin(lotId, binId, data.getTotOkQtyForLotBin(lotId, binId), itmIdO.toString(),
                                   itmUomO.toString());
            }
            mmStkSummBinVo.clearCache();
        }
    }

    public void insertIntoPickItmSrForPckMtrl1() {
        Boolean success = true;
        ViewObjectImpl mtlItm = this.getPackagingMtrlVO1();
        ViewObjectImpl mtlBin = this.getSLSPckMtlBinVO1();
        ViewObjectImpl mtlLot = this.getSLSPckMtlLotVO1();
        ViewObjectImpl mtlSr = this.getSLSPckMtlSRVO1();
        Row packRow = mtlItm.getCurrentRow();
        Object itmIdO = packRow.getAttribute("ItmId");
        Object itmUomO = packRow.getAttribute("ItmUom");
        if (itmIdO == null || itmUomO == null) {
            success = false;
            ADFModelUtils.showFormattedFacesMessage("Item Id or Item Uom is not defined.",
                                                    "Please Select the value for defined attributes.",
                                                    FacesMessage.SEVERITY_ERROR);
        }
        if (success) {
            ViewObjectImpl mmStkSummBinVo = this.getViewMmStkSummBinVO1();
            removeAllDataFromLotBinSrForPckMtl();
            LotData data = new LotData();
            RowSetIterator binCtr = mmStkSummBinVo.createRowSetIterator(null);
            while (binCtr.hasNext()) {
                Row row = binCtr.next();
                Object issuQtyO = row.getAttribute("SelectSrNoChkBxTrans");
                if (issuQtyO != null) {
                    String issuQty = (issuQtyO == null ? "N" : issuQtyO.toString());
                    if ("Y".equals(issuQty)) {
                        Object lotIdO = row.getAttribute("LotId");
                        Object binIdO = row.getAttribute("BinId");
                        Object srNoO = row.getAttribute("SrNo");
                        Object itmLotPriceO = row.getAttribute("ItmLotPrice");
                        Number itmLotPrice = (itmLotPriceO == null ? StaticValue.NUMBER_ZERO : (Number) itmLotPriceO);
                        LotRow lotRow =
                            new LotRow(lotIdO.toString(), binIdO.toString(), srNoO.toString(), new Number(1),
                                       itmLotPrice);
                        data.addLotData(lotRow);
                    }
                }
            }

            ArrayList<String> lotData = data.getDistinctLotId();
            for (String lotId : lotData) {
                addDataToPckMtlLot(lotId, data.getTotOkQtyForLot(lotId), itmIdO.toString(), itmUomO.toString());
            }

            ArrayList<String[]> lotBinData = data.getDistinctLotBinId();
            for (String[] binDtls : lotBinData) {
                String lotId = binDtls[0];
                String binId = binDtls[1];
                addDataToPckMtlBin(lotId, binId, data.getTotOkQtyForLotBin(lotId, binId), itmIdO.toString(),
                                   itmUomO.toString());
            }

            ArrayList<LotRow> lotBinSrData = data.getData();
            for (LotRow binSrDtls : lotBinSrData) {
                addDataToPckMtlSr(binSrDtls.getLotId(), binSrDtls.getBinId(), binSrDtls.getSrNo(), new Number(1),
                                  itmUomO.toString());
            }
            mmStkSummBinVo.clearCache();
        }
        this.getDBTransaction().postChanges();
    }

    /**
     * Method to add data for lot
     * @param lotId
     * @param pickQtyBs
     * @param itmId
     * @param itmUom
     */
    public void addDataToPckMtlLot(String lotId, Number pickQtyBs, String itmId, String itmUom) {
        System.out.println("Pick Quantity in Lot is : " + pickQtyBs);
        ViewObjectImpl mtlLot = this.getSLSPckMtlLotVO1();
        Row instLot = mtlLot.createRow();
        mtlLot.insertRow(instLot);
        instLot.setAttribute("LotId", lotId);
        String baseUomOfPassedItm = EbizParamsMMUtils.getBaseUomOfPassedItm(this, itmId);
        instLot.setAttribute("ItmUom", itmUom);
        Number convFctor = EbizParamsMMUtils.getItmUomConvFactor(this, itmId, itmUom, baseUomOfPassedItm);
        instLot.setAttribute("PckQtyBs", pickQtyBs);
        instLot.setAttribute("PckQty", ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickQtyBs.divide(convFctor)));
        Number lotPrice = getPriceForLotForPckMtrl1(lotId, itmId, instLot.getAttribute("WhId"));
        Number lotCost = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), lotPrice.multiply(pickQtyBs));
        instLot.setAttribute("ItmLotCost", lotCost);
        //mtlLot.executeQuery();
    }

    /**
     * Method to add data for bin
     * @param lotId
     * @param binId
     * @param pickQtyBs
     * @param itmId
     * @param itmUom
     */
    public void addDataToPckMtlBin(String lotId, String binId, Number pickQtyBs, String itmId, String itmUom) {
        ViewObjectImpl mtlBin = this.getSLSPckMtlBinVO1();
        Row instBin = mtlBin.createRow();
        mtlBin.insertRow(instBin);
        instBin.setAttribute("LotId", lotId);
        instBin.setAttribute("BinId", binId);
        String baseUomOfPassedItm = EbizParamsMMUtils.getBaseUomOfPassedItm(this, itmId);
        instBin.setAttribute("ItmUom", itmUom);

        Number convFctor = EbizParamsMMUtils.getItmUomConvFactor(this, itmId, itmUom, baseUomOfPassedItm);
        instBin.setAttribute("PckQtyBs", pickQtyBs);
        instBin.setAttribute("PckQty", ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickQtyBs.divide(convFctor)));
        //instBin.executeQuery();
    }

    /**
     * Method to add data for bin
     * @param lotId
     * @param binId
     * @param srNo
     * @param pickQtyBs
     * @param itmId
     * @param itmUom
     */
    public void addDataToPckMtlSr(String lotId, String binId, String srNo, Number pickQtyBs, String itmUom) {
        ViewObjectImpl mtlSr = this.getSLSPckMtlSRVO1();
        Row instSr = mtlSr.createRow();
        mtlSr.insertRow(instSr);
        instSr.setAttribute("LotId", lotId);
        instSr.setAttribute("BinId", binId);
        instSr.setAttribute("SrNo", srNo);
        instSr.setAttribute("ItmUom", itmUom);
        instSr.setAttribute("PckQtyBs", pickQtyBs);
        instSr.setAttribute("PckQty", pickQtyBs);
        //instBin.executeQuery();
    }

    /**
     * Get price for PackLot Material
     * @param lotId
     * @param itmId
     * @param whId
     * @return
     */
    public Number getPriceForLotForPckMtrl1(String lotId, String itmId, Object whId) {
        Number cost = StaticValue.NUMBER_ZERO;
        try {
            Object res = callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_APP_USR_ORG(), whId, itmId, lotId,
                                            EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this)
            });
            cost = new Number(res);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return cost;
    }

    /**
     *  Method to remove the entries of Packing Material
     */
    public void removeAllDataFromLotBinSrForPckMtl() {
        ViewObjectImpl mtlSr = getSLSPckMtlSRVO1();
        RowSetIterator srCtr = mtlSr.createRowSetIterator(null);
        while (srCtr.hasNext()) {
            srCtr.next().remove();
        }
        srCtr.closeRowSetIterator();
        ViewObjectImpl mtlBin = this.getSLSPckMtlBinVO1();
        RowSetIterator mtlCtr = mtlBin.createRowSetIterator(null);
        while (mtlCtr.hasNext()) {
            mtlCtr.next().remove();
        }
        mtlCtr.closeRowSetIterator();
        ViewObjectImpl mtlLot = this.getSLSPckMtlLotVO1();
        RowSetIterator lotCtr = mtlLot.createRowSetIterator(null);
        while (lotCtr.hasNext()) {
            lotCtr.next().remove();
        }
        lotCtr.closeRowSetIterator();
    }

    /**
     * Container's getter for TempPackVo1.
     * @return TempPackVo1
     */
    public ViewObjectImpl getTempPackVo1() {
        return (ViewObjectImpl) findViewObject("TempPackVo1");
    }

    /**
     * Method to add pack material Item
     * @return
     * 1 : Wharehouse is not Selected.
     * 2 : Item is not Selected.
     * 3 : Item Uom is not Selected.
     * 4 : Item Uom Bs is not Selected.
     * 5 : PickQuantity is less than or Equal to zero
     * 6 : PickQuantity is greater than Available Quantity.
     */
    public Integer addPackMtlItm() {
        Integer i = 0;
        Row packTempRow = getTempPackVo1().getCurrentRow();
        Object whIdO = packTempRow.getAttribute("WhIdTrans");
        Object itmIdO = packTempRow.getAttribute("ItmIdTrans");
        Object itmUomO = packTempRow.getAttribute("ItmUomIdTrans");
        Object availQtyO = packTempRow.getAttribute("AvailQtyTrans");
        Object itmUomBsO = packTempRow.getAttribute("ItmUomBsTrans");
        Object pickQtyO = packTempRow.getAttribute("PickQtyTrans");

        String whId = (whIdO == null ? "" : whIdO.toString());
        String itmId = (itmIdO == null ? "" : itmIdO.toString());
        String itmUom = (itmUomO == null ? "" : itmUomO.toString());
        String itmUomBs = (itmUomBsO == null ? "" : itmUomBsO.toString());
        Number availQty = (availQtyO == null ? StaticValue.NUMBER_ZERO : (Number) availQtyO);
        Number pickQty = (pickQtyO == null ? StaticValue.NUMBER_ZERO : (Number) pickQtyO);
        String res = chkDupPackMatItem();
        if (res.equalsIgnoreCase("Y")) {
            i = 8; //duplicate Item
        } else if ("".equals(whId)) {
            i = 1;
        } else if ("".equals(itmId)) {
            i = 2;
        } else if ("".equals(itmUom)) {
            i = 3;
        } else if ("".equals(itmUomBs)) {
            i = 4;
        } else if (pickQty.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
            i = 5;
        } else if (pickQty.compareTo(availQty) > 0) {
            i = 6;
        } else {
            PackagingMtrlVOImpl impl = getPackagingMtrlVO1();
            Row createRow = impl.createRow();
            impl.insertRow(createRow);
            System.out.println("Base =======================" + itmUomBs);
            System.out.println("sp =====================" + itmUom);
            createRow.setAttribute("ItmId", itmId);
            createRow.setAttribute("ItmUom", itmUom);
            createRow.setAttribute("PckItmQty", pickQty);
            createRow.setAttribute("IsConsumable", "Y");
            createRow.setAttribute("RetFlg", "Y");
            Number convFactor = EbizParamsMMUtils.getItmUomConvFactor(this, itmId, itmUom, itmUomBs);
            createRow.setAttribute("UomConvFctr", convFactor);
            createRow.setAttribute("PckItmQtyBs",
                                   ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickQty.multiply(convFactor)));
            createRow.setAttribute("WhId", whId);
            createRow.setAttribute("ItmUomBs", itmUomBs);
            createRow.setAttribute("PckItmQty", pickQty);
            createRow.setAttribute("PckItmQty", pickQty);
            getTempPackVo1().executeQuery();
        }
        return i;
    }

    /**
     * Method to save pack material details
     * @return
     * 0 : Success
     * 1 : LotBin not allocated
     */
    public Integer savePackingMtrlIssuDtls() {
        Integer i = 0;
        String binSRForEachPck = validateLotBinSRForEachPck();
        if ("N".equals(binSRForEachPck)) {
            ADFModelUtils.showFormattedFacesMessage("Please Allocate the Lot/Bin/Serial for all the Packaging Material Items.",
                                                    "Some Items have not been issued properly.",
                                                    FacesMessage.SEVERITY_ERROR);
            i = 1;
        } else if (!passStockEntries()) {

        } else {
            ADFModelUtils.showFormattedFacesMessage("Packaging Material Profile has been Saved Successfully.",
                                                    "Stock have been release for this Pack. ",
                                                    FacesMessage.SEVERITY_INFO);
        }
        return i;
    }

    /**
     *For Stock entries.
     * @return
     */
    public Boolean passStockEntries() {
        Boolean success = true;
        ViewObjectImpl impl = this.getSlsPack1();
        PackagingMtrlVOImpl mtrlVO1 = this.getPackagingMtrlVO1();

        if (success) {
            getDBTransaction().postChanges();
            Row packRow = impl.getCurrentRow();
            Object eoIdO = packRow.getAttribute("EoId");
            Object whIdO = packRow.getAttribute("WhId");
            Object docId = packRow.getAttribute("DocId");
            Object docDtO = packRow.getAttribute("DocDt");
            Object usrIdCreateO = packRow.getAttribute("UsrIdCreate");
            Integer fyId = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);

            try {
                Object res =
                    ADFModelUtils.callFunction(this,
                                               new StringBuilder("SLS.FN_SLS_TO_MM_PACK_PCK_MTL_ITM(?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                               getparamCldId(), getparamSlocId(), getparamHoOrgId(), getparamOrgId(),
                                               whIdO, fyId, docDtO, docId, docDtO, eoIdO, usrIdCreateO, docDtO
                }, Types.VARCHAR);
            } catch (Exception e) {
                ADFModelUtils.showFormattedFacesMessage("There has been Some Error while caling function SLS.FN_SLS_TO_MM_PACK_PCK_MTL_ITM",
                                                        e.getMessage(), FacesMessage.SEVERITY_ERROR);
                success = false;
                e.printStackTrace();
            }
            if (success) {
                try {
                    Object res2 =
                        ADFModelUtils.callFunction(this,
                                                   new StringBuilder("SLS.fn_sls_to_fin_cost_of_good(?,?,?,?,?,?,?,?)"), new Object[] {
                                                   docId, docDtO, usrIdCreateO, getparamOrgId(), getparamSlocId(),
                                                   getparamHoOrgId(), getparamCldId(), "P"
                    }, Types.NUMERIC);
                } catch (Exception e) {
                    ADFModelUtils.showFormattedFacesMessage("There has been Some Error while calling function SLS.fn_sls_to_fin_cost_of_good",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    success = false;
                    e.printStackTrace();
                }
            }

            if (success) {
                try {
                    Object res3 =
                        ADFModelUtils.callFunction(this,
                                                   new StringBuilder("SLS.FN_SLS_TO_MM_PCK_MTL_GP(?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                   getparamCldId(), getparamSlocId(), getparamHoOrgId(),
                                                   getparamOrgId(), whIdO, fyId, docDtO, docId, docDtO, eoIdO,
                                                   usrIdCreateO, docDtO
                    }, Types.VARCHAR);
                    //    System.out.println("Third----->" + res3);
                } catch (Exception e) {
                    // TODO: Add catch code

                    ADFModelUtils.showFormattedFacesMessage("There has been Some Error while calling function SLS.FN_SLS_TO_MM_PCK_MTL_GP",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    success = false;
                    e.printStackTrace();
                }
            }
            if (success) {
                try {
                    this.getSlsPack1().getCurrentRow().setAttribute("FreezePackItm", "Y");
                    this.getDBTransaction().commit();
                } catch (Exception e) {
                    ADFModelUtils.showFormattedFacesMessage("There has been some problem while saving Pack Material details.",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    e.printStackTrace();
                    this.getDBTransaction().rollback();
                }
            } else {
                this.getDBTransaction().rollback();
            }
        }
        return success;
    }

    /**
     * Method to validate Required fields are entered fro pack setup
     */
    public Boolean validatedpackSetup() {
        Boolean res = true;

        Row r = getSlsPack1().getCurrentRow();
        Object wh = r.getAttribute("WhId");
        Object pkTy = r.getAttribute("PackTypId");
        // System.out.println(wh + " <<<<<<<< wh id");
        // System.out.println(pkTy + " <<<<<<<< pack typ id");
        if (wh == null) {
            ADFModelUtils.showFormattedFacesMessage("Warehouse has not been selected",
                                                    "Please select Warehouse to continue", FacesMessage.SEVERITY_ERROR);
            res = false;
        } else if (pkTy == null) {
            ADFModelUtils.showFormattedFacesMessage("Pack Type has not been selected",
                                                    "Please select Pack Type to continue", FacesMessage.SEVERITY_ERROR);
            res = false;
        }
        return res;
    }

    /**
     * Method to check is pack used by the organization
     */
    public Boolean isPackUsed() {
        Boolean checkPack = false;
        try {
            Object chkPrf = EbizParamsSLSUtils.checkSLSProfileValues(this, "USE_PACK_ENTRY");
            if (chkPrf != null && "Y".equalsIgnoreCase(chkPrf.toString())) {
                checkPack = true;
            }
        } catch (Exception e) {
            checkPack = false;
            e.printStackTrace();
            //System.out.println("error in callin fucntion fn_sls_chk_org_prf" + e + "checkPack in catch" + checkPack);
        }
        // System.out.println("return value is " + checkPack);
        return checkPack;

    }

    /**
     * Method to set arrival and departure address for the shipment creation on selection of Pick
     */
    public void setValueForTransport(String whId, String shipAddId) {
        Row trnpRow = this.getsearchShipmnt1().getCurrentRow();
        if (trnpRow.getAttribute("whIdTrans") == null) {
            trnpRow.setAttribute("whIdTrans", whId);
        }
        if (trnpRow.getAttribute("ShippingAddressTrans") == null) {
            trnpRow.setAttribute("ShippingAddressTrans", shipAddId);
        }
    }

    /**
     * Method to check duplicate pakaging material
     */
    public String chkDupPackMatItem() {
        Row curRow = getTempPackVo1().getCurrentRow();

        String curItem =
            curRow.getAttribute("ItmIdTrans") == null ? null : curRow.getAttribute("ItmIdTrans").toString();

        String res = "N";
        int count = 0;
        if (curItem != null) {
            Row r[] = getPackagingMtrlVO1().getAllRowsInRange();
            for (int x = 0; x < r.length; x++) {
                if (r[x].getAttribute("ItmId") != null) {
                    if (curItem.equalsIgnoreCase(r[x].getAttribute("ItmId").toString())) {
                        count++;
                    }
                }
            }
            if (count > 0) {
                res = "Y";
            }
        }
        return res;

    }

    /**
     * Method to check So selection applicable or not
     */
    public Boolean isSoSeachApplicable() {
        Boolean res = false;
        try {
            String val = EbizParamsSLSUtils.checkSLSProfileValues(this, "SHOW_SO_SLCT_ON_PICK");
            if ("Y".equalsIgnoreCase(val)) {
                res = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return res;
    }

    /**
     * Method to check item basis selection applicable or not
     */
    public Boolean isItemPriceBasisApplicable() {
        Boolean res = false;
        try {
            String val = EbizParamsSLSUtils.checkSLSProfileValues(this, "SHOW_PRICE_BASIS_ON_SHIPMNT");
            if ("Y".equalsIgnoreCase(val)) {
                res = true;
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return res;
    }

}

