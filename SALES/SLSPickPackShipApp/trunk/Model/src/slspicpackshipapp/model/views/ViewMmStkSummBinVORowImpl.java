package slspicpackshipapp.model.views;

import java.sql.Timestamp;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 20 18:32:28 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ViewMmStkSummBinVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SlocId {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        OrgId {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        WhId {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getWhId();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ItmId {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        LotId {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getLotId();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        BinId {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getBinId();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        TotStk {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getTotStk();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        UsrIdMod {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        UsrIdModDt {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        BinNm {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getBinNm();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ItmLotPrice {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getItmLotPrice();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        LotDtls {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getLotDtls();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        TransIssueQty {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getTransIssueQty();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setTransIssueQty((Number) value);
            }
        },
        LovBinIdVO1 {
            public Object get(ViewMmStkSummBinVORowImpl obj) {
                return obj.getLovBinIdVO1();
            }

            public void put(ViewMmStkSummBinVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(ViewMmStkSummBinVORowImpl object);

        public abstract void put(ViewMmStkSummBinVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int LOTID = AttributesEnum.LotId.index();
    public static final int BINID = AttributesEnum.BinId.index();
    public static final int TOTSTK = AttributesEnum.TotStk.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int BINNM = AttributesEnum.BinNm.index();
    public static final int ITMLOTPRICE = AttributesEnum.ItmLotPrice.index();
    public static final int LOTDTLS = AttributesEnum.LotDtls.index();
    public static final int TRANSISSUEQTY = AttributesEnum.TransIssueQty.index();
    public static final int LOVBINIDVO1 = AttributesEnum.LovBinIdVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ViewMmStkSummBinVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }


    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }


    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }


    /**
     * Gets the attribute value for the calculated attribute WhId.
     * @return the WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }


    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }


    /**
     * Gets the attribute value for the calculated attribute LotId.
     * @return the LotId
     */
    public String getLotId() {
        return (String) getAttributeInternal(LOTID);
    }


    /**
     * Gets the attribute value for the calculated attribute BinId.
     * @return the BinId
     */
    public String getBinId() {
        return (String) getAttributeInternal(BINID);
    }


    /**
     * Gets the attribute value for the calculated attribute TotStk.
     * @return the TotStk
     */
    public Number getTotStk() {
        return (Number) getAttributeInternal(TOTSTK);
    }


    /**
     * Gets the attribute value for the calculated attribute UsrIdMod.
     * @return the UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }


    /**
     * Gets the attribute value for the calculated attribute UsrIdModDt.
     * @return the UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }


    /**
     * Gets the attribute value for the calculated attribute BinNm.
     * @return the BinNm
     */
    public String getBinNm() {
        return (String) getAttributeInternal(BINNM);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmLotPrice.
     * @return the ItmLotPrice
     */
    public Number getItmLotPrice() {
        return (Number) getAttributeInternal(ITMLOTPRICE);
    }

    /**
     * Gets the attribute value for the calculated attribute LotDtls.
     * @return the LotDtls
     */
    public String getLotDtls() {
        return (String) getAttributeInternal(LOTDTLS);
    }

    /**
     * Gets the attribute value for the calculated attribute TransIssueQty.
     * @return the TransIssueQty
     */
    public Number getTransIssueQty() {
        if (getAttributeInternal(TRANSISSUEQTY) == null) {
            return new Number(0);
        }
        return (Number) getAttributeInternal(TRANSISSUEQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransIssueQty.
     * @param value value to set the  TransIssueQty
     */
    public void setTransIssueQty(Number value) {
        if (value == null) {
            setAttributeInternal(TRANSISSUEQTY, new Number(0));
        }
        setAttributeInternal(TRANSISSUEQTY, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovBinIdVO1.
     */
    public RowSet getLovBinIdVO1() {
        return (RowSet) getAttributeInternal(LOVBINIDVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
