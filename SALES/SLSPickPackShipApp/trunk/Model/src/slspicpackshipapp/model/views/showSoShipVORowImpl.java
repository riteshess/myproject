package slspicpackshipapp.model.views;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 11 12:50:11 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class showSoShipVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(showSoShipVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(showSoShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        OrgId {
            public Object get(showSoShipVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(showSoShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        HoOrgId {
            public Object get(showSoShipVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(showSoShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SlocId {
            public Object get(showSoShipVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(showSoShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SoId {
            public Object get(showSoShipVORowImpl obj) {
                return obj.getSoId();
            }

            public void put(showSoShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        PickId {
            public Object get(showSoShipVORowImpl obj) {
                return obj.getPickId();
            }

            public void put(showSoShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SoDispIdTrans {
            public Object get(showSoShipVORowImpl obj) {
                return obj.getSoDispIdTrans();
            }

            public void put(showSoShipVORowImpl obj, Object value) {
                obj.setSoDispIdTrans((String) value);
            }
        },
        ShowSoItmShip {
            public Object get(showSoShipVORowImpl obj) {
                return obj.getShowSoItmShip();
            }

            public void put(showSoShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SoIdFrmSoDocIdVO1 {
            public Object get(showSoShipVORowImpl obj) {
                return obj.getSoIdFrmSoDocIdVO1();
            }

            public void put(showSoShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(showSoShipVORowImpl object);

        public abstract void put(showSoShipVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int SOID = AttributesEnum.SoId.index();
    public static final int PICKID = AttributesEnum.PickId.index();
    public static final int SODISPIDTRANS = AttributesEnum.SoDispIdTrans.index();
    public static final int SHOWSOITMSHIP = AttributesEnum.ShowSoItmShip.index();
    public static final int SOIDFRMSODOCIDVO1 = AttributesEnum.SoIdFrmSoDocIdVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public showSoShipVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute SoId.
     * @return the SoId
     */
    public String getSoId() {
        return (String) getAttributeInternal(SOID);
    }

    /**
     * Gets the attribute value for the calculated attribute PickId.
     * @return the PickId
     */
    public String getPickId() {
        return (String) getAttributeInternal(PICKID);
    }

    /**
     * Gets the attribute value for the calculated attribute SoDispIdTrans.
     * @return the SoDispIdTrans
     */
    public String getSoDispIdTrans() {
        if (getAttributeInternal(SODISPIDTRANS) == null && getSoId() != null) {
            RowSet docIdVO = getSoIdFrmSoDocIdVO1();
            docIdVO.setNamedWhereClauseParam("CldIdBind", getCldId());
            docIdVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
            docIdVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
            docIdVO.setNamedWhereClauseParam("OrgIdBind", getOrgId());
            docIdVO.setNamedWhereClauseParam("DocIdBind", getSoId());
            docIdVO.executeQuery();
            Row[] allRowsInRange = docIdVO.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                Object soDiscpIdO = allRowsInRange[0].getAttribute("SoId");
                setSoDispIdTrans(soDiscpIdO == null ? null : soDiscpIdO.toString());
            }

        }
        return (String) getAttributeInternal(SODISPIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SoDispIdTrans.
     * @param value value to set the  SoDispIdTrans
     */
    public void setSoDispIdTrans(String value) {
        setAttributeInternal(SODISPIDTRANS, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link ShowSoItmShip.
     */
    public RowIterator getShowSoItmShip() {
        return (RowIterator) getAttributeInternal(SHOWSOITMSHIP);
    }

    /**
     * Gets the view accessor <code>RowSet</code> SoIdFrmSoDocIdVO1.
     */
    public RowSet getSoIdFrmSoDocIdVO1() {
        return (RowSet) getAttributeInternal(SOIDFRMSODOCIDVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

