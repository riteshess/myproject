package slsrmaapp.model.services.common;

import java.math.BigDecimal;

import java.util.ArrayList;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.domain.Timestamp;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 09 15:09:48 IST 2013
// ---------------------------------------------------------------------
public interface SlsRmaAppAM extends ApplicationModule {

    String validateRejectedQuant(oracle.jbo.domain.Number _rejectedQuant);

    void addLotDetails();

    void addItmToLotBin();

    void setbinQtyBsVal();

    void addItemToSerialNo();

    boolean isLotQtyValid(oracle.jbo.domain.Number obj);

    boolean isBinQntValid(oracle.jbo.domain.Number _obj);


    void setDataInShipmntTbl(StringBuffer ShipId);

    void executeRowSetLov();

    boolean isDuplicateship(String _ShipId);

    void executeSlsRmaItemSrVo();

    void executeSlsRmaItemLotVo();

    void searchRma();

    void restetRma();

    void executeSearchedRma();


    String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo);


    Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo);

    String getTxnId();

    void settxnidlast(String txn);

    void executesearchVo();

    BigDecimal getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, Integer DocNo);

    void executePageWithGlobalparam();

    String generateDispDocNo();

    void execteBinVo();

    void executeLotVo();

    void executeSrVo();


    void fnsToInsertDataInShipmentAndItemTable(String gatePassDocId);


    void deleteRma();

    Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                       Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                       oracle.jbo.domain.Number amount);


    void delteBinRow();

    void delteLotRow();

    void delteSrRow();

    void refreshLovSwitcher();


    String isLotAutoGen();


    ArrayList checkItemRcvdValidation();

    String serialiazedItemRcptCheck();

    void filterShpmntCustWise();


    BigDecimal instoTnsInShipNItm();

    void getapprovedId();

    void executeShipWiseLotVo();

    void addItmInLot();

    String validRcptQnt();

    String validLotQnty();

    ArrayList checkOkRejRwkQnt();

    String onSaveClickValidItmQnt();

    String compareItmWiseReceiveQtyToGeQty(oracle.jbo.domain.Number rcptQnty);


    void setOkRejRwkToZero();

    ArrayList isAllGateEntryitmAdjusted();

    void returnLotQnt();

    ArrayList checkItmRcvQntToOkRejRekQnt();

    void deleteLotBinSrData();

    void getOldRcptOkRwkRejQnt();

    oracle.jbo.domain.Number setOldOkQnt();

    oracle.jbo.domain.Number setOldRecptQnt();

    oracle.jbo.domain.Number setOldRejQnt();

    oracle.jbo.domain.Number setOldRwkQnt();

    String chekShipDays();

    String getUsrNm(Integer usrId);

    StringBuffer checkTaxRvrlApplied();

    void insertItemToRmaFrmShpmnt();

    void setDocDtInSlsRmaItmLot1();

    Boolean doRmaValidationsPass();

    boolean checkRmaValidation();

    boolean isFyIdValid();

    boolean checkForOkQtyOnRMAType(oracle.jbo.domain.Number okQty);

    Integer addShipmntForItm();

    void filterShipmntViewForItmSelection(String shipmntId);

    Integer checkIfQtyIsProperlyAlloted();

    Integer validateBinQty();

    Integer addBinForItmLot();

    void removeItemShpmntFrmRma(String shipDocId);

    void filterLotBinItem();

    void filterSerialItem();


    void insertSelectedSrItem();

    oracle.jbo.domain.Number getTotalSelectedSrItem();

    oracle.jbo.domain.Number getTotalSrItemForRma();

    Boolean validateLotBinSrItmQty();

    Integer fnsToInsertInItemTable(String geId);

    void filterShipmntViewForShipmentSelection(String itmId);

    void insertShipmentForGateEntry();

    Integer validatedShipmentQtyForGe();

    Integer isAllGeItmAdded();

    Integer addSrToLot();

    void resetSrSelectedValue(String srType);

    void executeTrAndTrLines();

    Boolean chkCcApplicableOrNot();


    void generateCostCenter(String shipDocId);


    void declareGlblValuesForCC();

    Boolean isCostCenterApplicable();

    Boolean chkRmaTaxRvslApwd();

    void updateCostCenterAmt();

    void sendDateFromTempCcToSlsRmaCc();

    void updateCostCenterOnSave();
}
