package slsrmaapp.model.views;

import java.sql.Timestamp;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 23 12:55:44 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LovShipWiseLotVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlocId {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgId {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        HoOrgId {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItmId {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DocId {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DocDt {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getDocDt();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        WhId {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getWhId();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LotId1 {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getLotId1();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItmUom {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getItmUom();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ShipmntQty {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getShipmntQty();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItmLotCost {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getItmLotCost();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ShipmntQtyBs {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getShipmntQtyBs();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SoId {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getSoId();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PickId {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getPickId();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        BinId1 {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getBinId1();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TransRejQty {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getTransRejQty();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setTransRejQty((Number) value);
            }
        }
        ,
        TreansRcvRejQuty {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getTreansRcvRejQuty();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setTreansRcvRejQuty((Number) value);
            }
        }
        ,
        TransRcvRwkQty {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getTransRcvRwkQty();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setTransRcvRwkQty((Number) value);
            }
        }
        ,
        ItemNameTrans {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getItemNameTrans();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setItemNameTrans((String) value);
            }
        }
        ,
        ItemNameLovVO1 {
            public Object get(LovShipWiseLotVORowImpl obj) {
                return obj.getItemNameLovVO1();
            }

            public void put(LovShipWiseLotVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(LovShipWiseLotVORowImpl object);

        public abstract void put(LovShipWiseLotVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int LOTID1 = AttributesEnum.LotId1.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int SHIPMNTQTY = AttributesEnum.ShipmntQty.index();
    public static final int ITMLOTCOST = AttributesEnum.ItmLotCost.index();
    public static final int SHIPMNTQTYBS = AttributesEnum.ShipmntQtyBs.index();
    public static final int SOID = AttributesEnum.SoId.index();
    public static final int PICKID = AttributesEnum.PickId.index();
    public static final int BINID1 = AttributesEnum.BinId1.index();
    public static final int TRANSREJQTY = AttributesEnum.TransRejQty.index();
    public static final int TREANSRCVREJQUTY = AttributesEnum.TreansRcvRejQuty.index();
    public static final int TRANSRCVRWKQTY = AttributesEnum.TransRcvRwkQty.index();
    public static final int ITEMNAMETRANS = AttributesEnum.ItemNameTrans.index();
    public static final int ITEMNAMELOVVO1 = AttributesEnum.ItemNameLovVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LovShipWiseLotVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }


    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }


    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }


    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }


    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String)getAttributeInternal(ITMID);
    }


    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }


    /**
     * Gets the attribute value for the calculated attribute DocDt.
     * @return the DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp)getAttributeInternal(DOCDT);
    }


    /**
     * Gets the attribute value for the calculated attribute WhId.
     * @return the WhId
     */
    public String getWhId() {
        return (String)getAttributeInternal(WHID);
    }


    /**
     * Gets the attribute value for the calculated attribute LotId1.
     * @return the LotId1
     */
    public String getLotId1() {
        return (String) getAttributeInternal(LOTID1);
    }


    /**
     * Gets the attribute value for the calculated attribute ItmUom.
     * @return the ItmUom
     */
    public String getItmUom() {
        return (String)getAttributeInternal(ITMUOM);
    }


    /**
     * Gets the attribute value for the calculated attribute ShipmntQty.
     * @return the ShipmntQty
     */
    public Number getShipmntQty() {
        return (Number)getAttributeInternal(SHIPMNTQTY);
    }


    /**
     * Gets the attribute value for the calculated attribute ItmLotCost.
     * @return the ItmLotCost
     */
    public Number getItmLotCost() {
        return (Number)getAttributeInternal(ITMLOTCOST);
    }


    /**
     * Gets the attribute value for the calculated attribute ShipmntQtyBs.
     * @return the ShipmntQtyBs
     */
    public Number getShipmntQtyBs() {
        return (Number)getAttributeInternal(SHIPMNTQTYBS);
    }


    /**
     * Gets the attribute value for the calculated attribute SoId.
     * @return the SoId
     */
    public String getSoId() {
        return (String) getAttributeInternal(SOID);
    }


    /**
     * Gets the attribute value for the calculated attribute PickId.
     * @return the PickId
     */
    public String getPickId() {
        return (String) getAttributeInternal(PICKID);
    }

    /**
     * Gets the attribute value for the calculated attribute BinId1.
     * @return the BinId1
     */
    public String getBinId1() {
        return (String) getAttributeInternal(BINID1);
    }

    /**
     * Gets the attribute value for the calculated attribute TransRejQty.
     * @return the TransRejQty
     */
    public Number getTransRejQty() {
        if (getAttributeInternal(TRANSREJQTY) == null) { //
            /*  SlsRmaAppAMImpl am = (SlsRmaAppAMImpl)this.getApplicationModule();
            ViewObjectImpl lotRow = am.getSlsRmaItmLot1();
            RowSetIterator itr = lotRow.createRowSetIterator(null);
            while (itr != null) {
                if (itr.hasNext()) {
                    Row r = itr.next();
                    Number okQnt = (Number)r.getAttribute("RcptQtyBs");
                    String ItemId = (String)r.getAttribute("ItmId");
                    String lotId = (String)r.getAttribute("LotId");
                    if (lotId.equals(getLotId()) && ItemId.equals(getItmId())) {
                        System.out.println("ok quantity in in getter of lovShipWiseLot vo " + okQnt);
                        return okQnt;
                    }

                }
            }
            if (lotRow != null) {
                Number okQnt = (Number)lotRow.getAttribute("RcptQtyBs");
                System.out.println("ok quantity in in getter of lovShipWiseLot vo "+okQnt);
                return okQnt;
            } else {
                return new Number(0);
            } */
            return new Number(0);
        }
        return (Number)getAttributeInternal(TRANSREJQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransRejQty.
     * @param value value to set the  TransRejQty
     */
    public void setTransRejQty(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSREJQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TreansRcvRejQuty.
     * @return the TreansRcvRejQuty
     */
    public Number getTreansRcvRejQuty() {
        if (getAttributeInternal(TREANSRCVREJQUTY) == null) {
            return new Number(0);
        }
        return (Number)getAttributeInternal(TREANSRCVREJQUTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TreansRcvRejQuty.
     * @param value value to set the  TreansRcvRejQuty
     */
    public void setTreansRcvRejQuty(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TREANSRCVREJQUTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransRcvRwkQty.
     * @return the TransRcvRwkQty
     */
    public Number getTransRcvRwkQty() {
        if (getAttributeInternal(TRANSRCVRWKQTY) == null) {
            return new Number(0);
        }
        return (Number)getAttributeInternal(TRANSRCVRWKQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransRcvRwkQty.
     * @param value value to set the  TransRcvRwkQty
     */
    public void setTransRcvRwkQty(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSRCVRWKQTY, value);
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = null;
        if (valueExp.getValue(elContext) != null)
            msg = valueExp.getValue(elContext).toString();
        else
            msg = null;
        return msg;
    }
    /**
     * Gets the attribute value for the calculated attribute ItemNameTrans.
     * @return the ItemNameTrans
     */
    public String getItemNameTrans() {
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String HoOrgId =resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        if (getAttributeInternal(ITEMNAMETRANS) == null && getItmId() != null) {
            
                    StringBuffer s = new StringBuffer("");
                    RowSet itmNmVO1 = this.getItemNameLovVO1();
                    System.out.println(" so id  " + getItmId() + " getAttributeInternal(SOIDTRANS) " +
                                       getAttributeInternal(ITEMNAMETRANS));
                    itmNmVO1.setNamedWhereClauseParam("BindCldId", CldId);
                    itmNmVO1.setNamedWhereClauseParam("BindSlocId", SlocId);
                    itmNmVO1.setNamedWhereClauseParam("BindOrgId", OrgId);
                    itmNmVO1.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
                    itmNmVO1.setNamedWhereClauseParam("BindItemId", getItmId());
                    itmNmVO1.executeQuery();
                    Row[] allRowsInRange = itmNmVO1.getAllRowsInRange();
                    System.out.println("allRowsInRange in shipment" + allRowsInRange.length);
                    if (allRowsInRange.length > 0) {
                        Object so = allRowsInRange[0].getAttribute("ItmDesc");
                        System.out.println("s0  in shipment : " + so);
                        s = (so == null ? null : new StringBuffer(so.toString()));
                        System.out.println("s in shipment :" + s);
                        setItemNameTrans(s.toString());
                    }
                }
        
        
        return (String) getAttributeInternal(ITEMNAMETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemNameTrans.
     * @param value value to set the  ItemNameTrans
     */
    public void setItemNameTrans(String value) {
        setAttributeInternal(ITEMNAMETRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ItemNameLovVO1.
     */
    public RowSet getItemNameLovVO1() {
        return (RowSet)getAttributeInternal(ITEMNAMELOVVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
