package slsrmaapp.model.views;

import java.math.BigInteger;

import java.sql.Timestamp;

import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 05 13:16:34 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LovDistnctShipVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        ShipmntId {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getShipmntId();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DocId {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DocDt {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getDocDt();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlocId {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgId {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CldId {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        HoOrgId {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EoId {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getEoId();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        FyId {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getFyId();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DisplayDate {
            public Object get(LovDistnctShipVORowImpl obj) {
                return obj.getDisplayDate();
            }

            public void put(LovDistnctShipVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(LovDistnctShipVORowImpl object);

        public abstract void put(LovDistnctShipVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SHIPMNTID = AttributesEnum.ShipmntId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int DISPLAYDATE = AttributesEnum.DisplayDate.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LovDistnctShipVORowImpl() {
    }


    /**
     * Gets the attribute value for the calculated attribute ShipmntId.
     * @return the ShipmntId
     */
    public String getShipmntId() {
        String shipId=(String) getAttributeInternal(SHIPMNTID);
      String  newShipId=shipId.substring(2);
      return newShipId;
       // return (String) getAttributeInternal(SHIPMNTID);
    }


    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }


    /**
     * Gets the attribute value for the calculated attribute DocDt.
     * @return the DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }


    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }


    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }


    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }


    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }


    /**
     * Gets the attribute value for the calculated attribute EoId.
     * @return the EoId
     */
    public BigInteger getEoId() {
        return (BigInteger) getAttributeInternal(EOID);
    }


    /**
     * Gets the attribute value for the calculated attribute FyId.
     * @return the FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }


    /**
     * Gets the attribute value for the calculated attribute DisplayDate.
     * @return the DisplayDate
     */
    public String getDisplayDate() {
        return (String) getAttributeInternal(DISPLAYDATE);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
