package slsordrsplittingapp.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.ebiz.EbizParamsAPPUtils;

import adf.utils.model.ADFModelUtils;

import java.sql.Types;

import javax.faces.application.FacesMessage;

import oracle.jbo.domain.Number;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import oracle.mds.internal.util.StringBuilderKey;

import slsordrsplittingapp.model.services.common.SLSOrdrSplittingApp;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 04 12:03:50 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SLSOrdrSplittingAppImpl extends ApplicationModuleImpl implements SLSOrdrSplittingApp {
    /**
     * This is the default constructor (do not remove).
     */
    public SLSOrdrSplittingAppImpl() {
    }

    /**
     * Container's getter for SLSOrdrSplittingSearchVO1.
     * @return SLSOrdrSplittingSearchVO1
     */
    public ViewObjectImpl getSLSOrdrSplittingSearchVO1() {
        return (ViewObjectImpl) findViewObject("SLSOrdrSplittingSearchVO1");
    }

    public void initalFilter() {
        ViewObjectImpl impl = getSLSOrdrSplittingSearchVO1();
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("OrgIdBind", -1);
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("DispIdBind", null);
        impl.setNamedWhereClauseParam("EoNmBind", null);
        impl.executeQuery();
    }

    /**
     * Container's getter for SoVO1.
     * @return SoVO1
     */
    public ViewObjectImpl getSoVO() {
        return (ViewObjectImpl) findViewObject("SoVO");
    }

    public void openSelectedOrder() {
        ViewObjectImpl impl = getSoVO();
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("SoDocIdBind", ADFModelUtils.resolvEl("#{pageFlowScope.DOC_ID}"));
        impl.executeQuery();

        impl = getSoItmVO1();
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("SoDocIdBind", ADFModelUtils.resolvEl("#{pageFlowScope.DOC_ID}"));
        impl.executeQuery();

        getTempVo1().executeQuery();
    }

    /**
     * Container's getter for SoItmVO1.
     * @return SoItmVO1
     */
    public ViewObjectImpl getSoItmVO1() {
        return (ViewObjectImpl) findViewObject("SoItmVO1");
    }

    /**
     * Container's getter for TempVo1.
     * @return TempVo1
     */
    public ViewObjectImpl getTempVo1() {
        return (ViewObjectImpl) findViewObject("TempVo1");
    }


    /**
     * Container's getter for SlsSoSplitDtlVO1.
     * @return SlsSoSplitDtlVO1
     */
    public ViewObjectImpl getSlsSoSplitDtlVO1() {
        return (ViewObjectImpl) findViewObject("SlsSoSplitDtlVO1");
    }

    /**
     * Container's getter for SoToSplitVL1.
     * @return SoToSplitVL1
     */
    public ViewLinkImpl getSoToSplitVL1() {
        return (ViewLinkImpl) findViewLink("SoToSplitVL1");
    }

    /**
     * Method to add Item
     * @return
     * 0 : Added Successfully
     * 1 : Customer not Selected
     * 2 : Item not selected
     * 3 : Item Quantity is not valid
     * 4 : Item RowAlready Exist
     * 5 : Item Quantity is greater than Sales Order Item Quantity.
     */

    public Integer addItem() {
        Integer i = 0;
        Row tempRow = getTempVo1().getCurrentRow();
        Object eoIdO = tempRow.getAttribute("TransEoId");
        Object itmIdO = tempRow.getAttribute("TransItmId");
        Object itmQtyO = tempRow.getAttribute("TransItmQty");
        Integer eoId = (eoIdO == null ? -1 : (Integer) eoIdO);
        String itmId = (itmIdO == null ? "" : itmIdO.toString());
        Number itmQty = (itmQtyO == null ? StaticValue.NUMBER_ZERO : (Number) itmQtyO);

        if (eoId.equals(-1)) {
            i = 1;
        } else if (itmId.equals("")) {
            i = 2;
        } else if (itmQty.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
            i = 3;
        }else if(!ADFBeanUtils.isPrecisionValid(itmQty)){
            i=6;
        }
        else {
            Integer j = isRowDuplicate(eoId, itmId, itmQty);
            if (j.equals(1)) {
                i = 4;
            } else if (j.equals(2)) {
                i = 5;
            } else {
                ViewObjectImpl dtlVO1 = getSlsSoSplitDtlVO1();
                Row createRow = dtlVO1.createRow();
                createRow.setAttribute("ItmId", tempRow.getAttribute("TransItmId"));
                createRow.setAttribute("EoId", tempRow.getAttribute("TransEoId"));
                createRow.setAttribute("ItmQty", tempRow.getAttribute("TransItmQty"));
                dtlVO1.insertRow(createRow);
                getTempVo1().executeQuery();
            }
        }
        System.out.println("returned : " + i);
        return i;
    }

    /**
     * Method to validate the Temprory Row
     * @param eoId
     * @param itmId
     * @return
     * 1 : Eo and Itm Already exists
     * 2 : Item Quantity cannot be greater than order Item Quantity
     * 0 : Row is not Duplicate
     */
    public Integer isRowDuplicate(Integer eoId, String itmId, Number itmQty) {
        Integer b = 0;
        Number itmQ = StaticValue.NUMBER_ZERO;
        ViewObjectImpl dtlVO = getSlsSoSplitDtlVO1();
        RowSetIterator ctr = dtlVO.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();
            Object eoIdO = next.getAttribute("EoId");
            Object itmIdO = next.getAttribute("ItmId");
            Integer eo = (eoIdO == null ? -1 : (Integer) eoIdO);
            String itm = (itmIdO == null ? "" : itmIdO.toString());
            if (eo.equals(eoId) && itm.equals(itmId)) {
                b = 1;
                break;
            }

            if (itm.equals(itmId)) {
                Object qtyO = next.getAttribute("ItmQty");
                itmQ = itmQ.add((qtyO == null ? StaticValue.NUMBER_ZERO : (Number) qtyO));
            }
        }
        ctr.closeRowSetIterator();
        itmQ = itmQ.add(itmQty);

        if (b == 0) {
            ViewObjectImpl impl = getSoItmVO1();
            int i = impl.getRangeSize();
            impl.setRangeSize(-1);
            Row[] filteredRows = impl.getFilteredRows("ItmId", itmId);
            if (filteredRows.length > 0) {
                Object itmQt = filteredRows[0].getAttribute("ItmQty");
                Number q = (itmQt == null ? StaticValue.NUMBER_ZERO : (Number) itmQt);
                if (q.compareTo(itmQ) < 0) {
                    b = 2;
                }
            }
        }
        System.out.println("returedn : " + b);
        return b;
    }


    public Integer saveSplitData() {
        Integer i = 0;
        try {
            if(isSalesOrderSplitQtyValid()){
                getDBTransaction().commit();
            }else{
                i = 1;
            }
        } catch (Exception e) {
            i = -1;
            e.printStackTrace();
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2161"), e.getMessage(),             //"There have been an Error on Saving Data!"
                                                    FacesMessage.SEVERITY_ERROR);
        }
        if (i == 0) {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.1260"),                                            //"Saved Successfully !"
                                                    ADFModelUtils.resolvRsrc("MSG.2164"),               //"Sales Order Splitting details saved successfully !"
                                                    FacesMessage.SEVERITY_INFO);
        }
        return i;
    }
    
    public Boolean isSalesOrderSplitQtyValid(){
        Boolean b = true;
        ViewObjectImpl dtlVO1 = getSlsSoSplitDtlVO1();
        int i = dtlVO1.getRangeSize();
        dtlVO1.setRangeSize(-1);
        ViewObjectImpl soImplVo = getSoItmVO1();
        while(soImplVo.hasNext()){
            Row row = soImplVo.next();
            Object itmIdO = row.getAttribute("ItmId");
            Object qtyO = row.getAttribute("ItmQty");
            Number itmQty = (qtyO == null ? StaticValue.NUMBER_ZERO : (Number)qtyO);
            Number splitDtlqty = StaticValue.NUMBER_ZERO;
            if(itmIdO != null){
                Row[] filteredRows = dtlVO1.getFilteredRows("ItmId", itmIdO);
                
                for(Row r : filteredRows){
                    Object itmQtyO = r.getAttribute("ItmQty");
                    if(itmQtyO != null){
                        splitDtlqty = splitDtlqty.add((Number)itmQtyO);
                    }
                }
            }
            if(itmQty.compareTo(splitDtlqty) > 0){
                Object itmDesc = EbizParamsAPPUtils.getItemDescFrmItmId(this, itmIdO == null ? null : itmIdO.toString());
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2165"),                                                                         //"Sales Order Items are not fully Splitted !"
                                                        ADFModelUtils.resolvRsrc("MSG.2171")+itmDesc+ ADFModelUtils.resolvRsrc("MSG.2173"), FacesMessage.SEVERITY_WARN);
                                                        //"Item : " //" is not fully Splitted. <br /><br/>Please make sure that all the Items of the Parent Sales Order fully Splitted."
                b = false;
                break;
            }
        }
        soImplVo.closeRowSetIterator();
        dtlVO1.setRangeSize(i);
        return b;
    }

    public Integer cancelSplitData() {
        getDBTransaction().rollback();
        return 0;
    }

    /**
     * Container's getter for TempSearchVO1.
     * @return TempSearchVO1
     */
    public ViewObjectImpl getTempSearchVO1() {
        return (ViewObjectImpl) findViewObject("TempSearchVO1");
    }

    /**
     * Method to search Sales Order on the basis of Sales Order
     */
    public void search() {
        Row currentRow = getTempSearchVO1().getCurrentRow();
        ViewObjectImpl impl = getSLSOrdrSplittingSearchVO1();
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("DispIdBind", currentRow.getAttribute("TransSoDispId"));
        impl.setNamedWhereClauseParam("EoNmBind", currentRow.getAttribute("TransCustNm"));
        impl.executeQuery();
        getTempSearchVO1().executeQuery();

    }

    /**
     * Method to reset Sales Order
     */
    public void reset() {
        ViewObjectImpl impl = getSLSOrdrSplittingSearchVO1();
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("OrgIdBind", -1);
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("DispIdBind", null);
        impl.setNamedWhereClauseParam("EoNmBind", null);
        impl.executeQuery();
        getTempSearchVO1().executeQuery();
    }

    /**
     * Method to split the order among selected customer
     * fn_sls_ord_split(
		p_slocid IN NUMBER,
		p_cldid IN VARCHAR2,
		p_ho_orgid IN VARCHAR2,
		p_orgid IN VARCHAR2,
		p_doc_id IN VARCHAR2,
		p_usr_id IN NUMBER)
     */
    public void splitORder(String soDocId) {
        String retVal=null;
        Row r = getSoVO().getCurrentRow();
        Object soId = r.getAttribute("DocId");
        try {
            Object res = ADFModelUtils.callFunction(this, new StringBuilder("sls.fn_sls_ord_split(?,?,?,?,?,?)"), new Object[] {
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                    EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_HO_ORG_ID(), soId,
                                                    EbizParams.GLBL_APP_USR()
            }, Types.VARCHAR);
            
            if(res!=null){
                retVal = res.toString();
            }
            System.out.println(" Return from function is  ============= "+ retVal);
            if(retVal.equalsIgnoreCase("Y")){
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2166"),                            //"Order Split Successfull !"
                                                        ADFModelUtils.resolvRsrc("MSG.2167"),        //"Splitted Sales Order generated successfully !"
                                                        FacesMessage.SEVERITY_INFO);
                getDBTransaction().commit();
                getSoVO().executeQuery();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    /**
     * Method to reset data on back to search page
     */
    public void resetSearchonBack(){
        System.out.println(" The reset on back ========= ");
        ViewObjectImpl impl = getSLSOrdrSplittingSearchVO1();
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("OrgIdBind",  EbizParams.GLBL_APP_USR_ORG());
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("DispIdBind", null);
        impl.setNamedWhereClauseParam("EoNmBind", null);
        impl.executeQuery();
    }
    
}

