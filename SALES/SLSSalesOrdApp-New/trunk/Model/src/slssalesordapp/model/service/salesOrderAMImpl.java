package slssalesordapp.model.service;


import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.EbizParamsAPPUtils;
import adf.utils.ebiz.EbizParamsMMUtils;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import custommandtrychkapp.model.MandatoryAttCheck;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

import java.math.BigDecimal;

import java.sql.SQLException;
import java.sql.Types;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Set;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;

import slssalesordapp.model.helper.SoAmHelper;
import slssalesordapp.model.service.common.salesOrderAM;
import slssalesordapp.model.views.LovEoIdImpl;
import slssalesordapp.model.views.LovItmIdVOImpl;
import slssalesordapp.model.views.MMGrpHdrTempVOImpl;
import slssalesordapp.model.views.MmSoItmPoVORowImpl;
import slssalesordapp.model.views.SlsSoCalcVOImpl;
import slssalesordapp.model.views.SlsSoItmTrfVORowImpl;
import slssalesordapp.model.views.SlsSoItmVOImpl;
import slssalesordapp.model.views.SlsSoItmVORowImpl;
import slssalesordapp.model.views.SlsSoVOImpl;
import slssalesordapp.model.views.SlsSoVORowImpl;
import slssalesordapp.model.views.TempPaymntVORowImpl;
import slssalesordapp.model.views.ViewMmStkSummBinFreeVOImpl;
import slssalesordapp.model.views.ViewMmStkSummBinVOImpl;
import slssalesordapp.model.views.ViewMmStkSummLotFreeVOImpl;
import slssalesordapp.model.views.ViewMmStkSummLotVOImpl;
import slssalesordapp.model.views.ViewMmStkSummSrFreeVOImpl;
import slssalesordapp.model.views.ViewMmStkSummSrVOImpl;
import slssalesordapp.model.views.orderSearchVOImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 27 15:10:33 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class salesOrderAMImpl extends ApplicationModuleImpl implements salesOrderAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger _log = ADFLogger.createADFLogger(salesOrderAMImpl.class);
    //private String shipadds = null;

    public salesOrderAMImpl() {
    }
    /*******
 * Methods to be used in Managed Bean
 *
 * *****************/

    /**Method to generate Serial Number for Table Rows
     * **.
     * @param voName
     */
    public void serialNumGen(String voName) {
        /**New Code to get Serial No.- 6-03-2013-@Ashish Kumar*/
        ViewObject soItm = this.findViewObject(voName);
        Integer Srno = 0;
        Integer max = 0;
        soItm.setRangeSize(-1);
        Row row[] = soItm.getAllRowsInRange();
        for (Row r : row) {
            try {
                Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
            } catch (NullPointerException e) {
                Srno = 0;
            }
            if (Srno > max) {
                max = Srno;
            }

        }

        max = max + 1;
        _log.warning("Max Value is-->" + max);
        soItm.getCurrentRow().setAttribute("SrNo", max);
    }

    /**Method to resolve expression- returns String value.
     * @param data
     * @return
     */
    public String resolvEl(String data) {
        return ADFModelUtils.resolvEl(data).toString();
    }

    /**Method to resolve expression- returns String value.
     * @param data
     * @return
     */
    public Object resolvElO(String data) {
        return ADFModelUtils.resolvEl(data);
    }

    /**Method to generate Schedule Number (as per Sales Order,Item and Delivery Date).
     * @param dlvDt
     * @return
     */
    public Integer generateScheduleNo(Timestamp dlvDt, Object whIdO) {
        Integer schdlNo = 1;
        ViewObjectImpl dlvSchdl = this.getSlsSoDlvSchdl1();
        dlvSchdl.setRangeSize(-1);
        RowQualifier rq = new RowQualifier(dlvSchdl);
        rq.setWhereClause("DlvDt = '" + dlvDt + "' and WhId = '" + whIdO + "'");
        System.out.println("Expression is : " + rq.getExprStr());
        Row fltrRow[] = dlvSchdl.getFilteredRows(rq);
        _log.info("Row for this date IN dLVsCHDL-" + fltrRow.length);
        if (fltrRow.length > 0) {
            if (fltrRow[0].getAttribute("DlvSchdlNo") != null) {
                schdlNo = Integer.parseInt(fltrRow[0].getAttribute("DlvSchdlNo").toString());
            }
        } else {
            Integer Srno = 0;
            Integer max = 0;
            Row row[] = dlvSchdl.getAllRowsInRange();
            for (Row r : row) {
                try {
                    Srno = Integer.parseInt(r.getAttribute("DlvSchdlNo").toString());
                } catch (NullPointerException e) {
                    Srno = 0;
                }
                if (Srno > max) {
                    max = Srno;
                }
            }

            max = max + 1;
            _log.warning("Max Schdl No is-->" + max);
            schdlNo = max;

        }
        _log.info("Delivery Schedule Number is" + schdlNo);
        return schdlNo;
    }

    /**Method to save deivery details as per order type(ALL/RATE-Contract).
     * @return
     */
    public String saveDeliverySchedule() {
        ViewObject slsSo = getSlsSo1();
        Row poCurr = slsSo.getCurrentRow();
        ViewObject dlvVo = null;
        String availVarName = "";

        if (poCurr.getAttribute("OrderType").equals(311)) {
            dlvVo = this.getRateContractVw1();
            availVarName = "AvailableAmtTrans";
        } else {
            dlvVo = this.getDlvShdlView1();
            availVarName = "availableStockTrans";
        }

        ViewObjectImpl slsdlvVo = getSlsSoDlvSchdl1(); //to

        String returnVal = null;
        _log.info("Inside AmImpl method");
        _log.info("Delv Date is-->" + poCurr.getAttribute("DvlDateTrans"));


        RowSetIterator rsi = dlvVo.createRowSetIterator(null);
        Timestamp ordDate = (Timestamp) poCurr.getAttribute("DocDt");
        ordDate = StaticValue.getTruncatedDt(ordDate);
        Object dlvModeO = poCurr.getAttribute("DlvModeTrans");
        Object projectId = poCurr.getAttribute("ProjectIdTrans");
        String projId = (projectId == null ? null : projectId.toString());
        Integer dlvMode = (dlvModeO == null ? -1 : (Integer) dlvModeO);
        if (dlvMode.equals(-1)) {
            returnVal = "T";
        } else if (poCurr.getAttribute("DvlDateTrans") != null) {
            while (rsi.hasNext()) {
                Row cur = rsi.next();
                Object o = cur.getAttribute("SelectItmChekBoxTrans");
                _log.warning("checkBox vale-->" + o);
                if (o != null) {
                    if ("Y".equalsIgnoreCase(o.toString())) {
                        if (cur.getAttribute("SchdlQuantTrans") != null) {
                            if (poCurr.getAttribute("WhIdDlvTrans") != null) {

                                if (poCurr.getAttribute("ProjectIdTrans") != null) {


                                    oracle.jbo.domain.Timestamp dt =
                                        (oracle.jbo.domain.Timestamp) poCurr.getAttribute("DvlDateTrans");
                                    try {
                                        ordDate = new Timestamp(ordDate.dateValue());
                                    } catch (SQLException e) {
                                    }
                                    String itmid = null;
                                    if (poCurr.getAttribute("OrderType").equals(311)) {
                                        itmid = cur.getAttribute("ItmIdRc").toString();
                                    } else {
                                        itmid = cur.getAttribute("ItemId").toString();

                                    }

                                    String whId = poCurr.getAttribute("WhIdDlvTrans").toString();
                                    RowQualifier rq = new RowQualifier(slsdlvVo);
                                    rq.setWhereClause("ItmId='" + itmid + "' And DlvDt='" + dt + "' And WhId = '" +
                                                      whId + "' ");
                                    Row[] filteredRows = slsdlvVo.getFilteredRows(rq);
                                    if (filteredRows.length > 0) {

                                        returnVal = "D";
                                        break;

                                    } else {

                                        try {
                                            System.out.println("Delivery Date : " + dt);
                                            System.out.println("Order Date : " + ordDate);
                                            if (dt.dateValue().compareTo(ordDate.dateValue()) == -1) {
                                                _log.info("Deliver Date is Less-");
                                                //  FacesMessage msg = new FacesMessage("Delivery Date can not be less than Order Date");
                                                FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.849']}"));
                                                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                                                FacesContext.getCurrentInstance().addMessage(null, msg);
                                                break;
                                            } else {
                                                rq.setWhereClause(null);
                                                Integer schdlNo =
                                                    generateScheduleNo(dt, poCurr.getAttribute("WhIdDlvTrans"));
                                                Row dlvRow = slsdlvVo.createRow();
                                                slsdlvVo.insertRow(dlvRow);
                                                serialNumGen("SlsSoDlvSchdl1");
                                                // System.out.println("Available quantity :" + availVarName + ": Value :" +
                                                //                   cur.getAttribute(availVarName));
                                                dlvRow.setAttribute("AvlQty", cur.getAttribute(availVarName));
                                                dlvRow.setAttribute("DlvDt", dt);
                                                dlvRow.setAttribute("DlvQty", cur.getAttribute("SchdlQuantTrans"));
                                                dlvRow.setAttribute("DlvMode", poCurr.getAttribute("DlvModeTrans"));
                                                dlvRow.setAttribute("WhId", poCurr.getAttribute("WhIdDlvTrans"));
                                                dlvRow.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
                                                dlvRow.setAttribute("DlvAddsId",
                                                                    poCurr.getAttribute("WhIdAddrIdTrans"));
                                                dlvRow.setAttribute("DlvSchdlNo", schdlNo);
                                                dlvRow.setAttribute("ItmUomBs", cur.getAttribute("ItmUomBs"));
                                                Object rem = poCurr.getAttribute("DelRemarksTrans");
                                                dlvRow.setAttribute("PrjId", poCurr.getAttribute("ProjectIdTrans"));
                                                StringBuffer r = new StringBuffer("");
                                                if (rem != null) {
                                                    r = new StringBuffer(rem.toString());
                                                }
                                                dlvRow.setAttribute("Remarks", r.toString());


                                                // To calculate and add pending Quantity
                                                Number pendingQty = StaticValue.NUMBER_ZERO;
                                                if (poCurr.getAttribute("OrderType").equals(311)) {

                                                } else {
                                                    if (cur.getAttribute(availVarName) != null &&
                                                        cur.getAttribute("SchdlQuantTrans") != null) {
                                                        Number avail = (Number) cur.getAttribute(availVarName);
                                                        Number schDlQty = (Number) cur.getAttribute("SchdlQuantTrans");
                                                        if (avail.compareTo(schDlQty) == -1) {
                                                            pendingQty = (Number) schDlQty.minus(avail);
                                                        }
                                                    }
                                                }

                                                dlvRow.setAttribute("BalQty", pendingQty);
                                                Number uomConvFctr = new Number(1);
                                                if (cur.getAttribute("UomConvFctr") != null) {
                                                    uomConvFctr = (Number) cur.getAttribute("UomConvFctr");
                                                }
                                                dlvRow.setAttribute("UomConvFctr", uomConvFctr);
                                                //DlvQtyBs
                                                Number bsQty = StaticValue.NUMBER_ZERO;
                                                bsQty =
                                                    (Number) uomConvFctr.mul((Number) cur.getAttribute("SchdlQuantTrans"));
                                                dlvRow.setAttribute("DlvQtyBs", bsQty);
                                                _log.info("Order Type -->" + poCurr.getAttribute("OrderType"));
                                                if (poCurr.getAttribute("OrderType").equals(311)) {
                                                    dlvRow.setAttribute("ItmId", cur.getAttribute("ItmIdRc"));
                                                    dlvRow.setAttribute("ItmUom", cur.getAttribute("ItmUomRc"));
                                                } else {
                                                    dlvRow.setAttribute("TotQty", cur.getAttribute("OrdQty"));
                                                    dlvRow.setAttribute("ItmId", cur.getAttribute("ItemId"));
                                                    dlvRow.setAttribute("ItmUom", cur.getAttribute("ItemUom"));
                                                }

                                            }
                                        } catch (SQLException e) {
                                            e.printStackTrace();
                                        }
                                    }
                                } else {
                                    returnVal = "P";
                                }
                            } else {

                                returnVal = "W";
                            }
                        } else {

                            returnVal = "S";
                        }
                    }
                }
            }
            /**Set transient to blank*/
            poCurr.setAttribute("DlvModeTrans", null);
            poCurr.setAttribute("WhIdDlvTrans", null);
            poCurr.setAttribute("DvlDateTrans", null);
            poCurr.setAttribute("ProjectIdTrans", null);
            rsi.closeRowSetIterator();

            this.getDBTransaction().validate();
            this.getDBTransaction().postChanges();
            slsdlvVo.executeQuery();
            dlvVo.executeQuery();
            //executeViewObjects();

        } else {
            // FacesMessage msg = new FacesMessage("Please Specify Delivery Date");
            FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.847']}"));
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        return returnVal;
    }

    /**Method to Save payment schedule.
     */
    public void donePaySchdlAction() {
        //system.out.println("Came in dlvy Action......");
        ViewObject pmtVo = this.getSlsSoPmntSchdl1();
        ViewObject slsSo = this.getSlsSo1();
        String flg = "N";
        //String returnVal = null;
        Row currSo = slsSo.getCurrentRow();

        if (currSo.getAttribute("PayDateTrans") != null) {
            //system.out.println("Came in payTrans");
            Timestamp dt = (Timestamp) currSo.getAttribute("PayDateTrans");
            Timestamp soDt = (Timestamp) currSo.getAttribute("DocDt");
            java.sql.Date ordDate = null;
            java.sql.Date payDt = null;
            java.util.Date ordUtilDt = null;
            java.util.Date payUtilDt = null;
            try {

                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                ordDate = soDt.dateValue();
                payDt = dt.dateValue();
                ordUtilDt = sdf.parse(ordDate.toString());
                payUtilDt = sdf.parse(dt.toString());
            } catch (SQLException e) {
                _log.info("Eception in Date Conveersion->" + e);
            } catch (ParseException e) {
                _log.info(e);
            }
            if (currSo.getAttribute("PayAdvFlgTrans") != null) {
                flg = currSo.getAttribute("PayAdvFlgTrans").toString();
            }
            _log.info("Order Date is-->" + ordDate + "and pay date is-->" + payDt + "And Compare -->" +
                      ordUtilDt.after(payUtilDt));
            //if Doc Date is less than Payment Date & Advance Flag is checked.
            if ("Y".equalsIgnoreCase(flg) && soDt.compareTo(dt) == -1) {
                // String msg2 = "Payment Date must be less than or equal to Order Date for Advance";
                String msg2 = resolvEl("#{bundle['MSG.846']}");
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);

                //if Order Date is more than Payment Date & Advance Flag is unchecked.

            } else if ("N".equalsIgnoreCase(flg) && (ordUtilDt.after(payUtilDt))) {
                // String msg2 = "Payment Date cannot be less than Order Date";
                String msg2 = resolvEl("#{bundle['MSG.845']}");
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);

            } else if (currSo.getAttribute("PayAmtTrans") != null) {
                Number amt = (Number) currSo.getAttribute("PayAmtTrans");
                Number zero = StaticValue.NUMBER_ZERO;
                if (amt.compareTo(zero) == 1) {

                    //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                    Number totAmt = (Number) currSo.getAttribute("OrderTotalCostTrans");
                    totAmt = (Number) totAmt.round(EbizParams.GLBL_AMT_DIGIT());
                    Integer payMode = 160;
                    if (currSo.getAttribute("PayModeTrans") != null) {
                        payMode = Integer.parseInt(currSo.getAttribute("PayModeTrans").toString());
                    }
                    if (dt != null && (amt != null || amt.compareTo(zero) == 1)) {

                        Row pmtCurr = pmtVo.createRow();
                        pmtCurr.setAttribute("PayDt", dt);
                        pmtCurr.setAttribute("PayAmt", amt);
                        pmtCurr.setAttribute("DocId", currSo.getAttribute("DocId"));

                        pmtCurr.setAttribute("OrgId", currSo.getAttribute("OrgId"));
                        pmtCurr.setAttribute("SlocId", currSo.getAttribute("SlocId"));
                        pmtCurr.setAttribute("TotAmt", totAmt);
                        pmtCurr.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
                        pmtCurr.setAttribute("AdvFlg", flg);
                        pmtCurr.setAttribute("PayMode", payMode);
                        //      pmtVo.insertRow(pmtCurr);
                    }

                    Number num = (Number) currSo.getAttribute("PayAmtSumTrans");
                    Number remain = totAmt.subtract(num);
                    if (remain.compareTo(zero) == 0) {
                        currSo.setAttribute("PayAmtTrans", StaticValue.NUMBER_ZERO);
                    } else if (remain.compareTo(zero) == 1) {
                        currSo.setAttribute("PayAmtTrans", remain);
                    }
                    currSo.setAttribute("PayAmtTrans", StaticValue.NUMBER_ZERO);
                    currSo.setAttribute("PayDateTrans", null);
                    currSo.setAttribute("PayAdvFlgTrans", "N");

                } else {
                    String msg2 = resolvEl("#{bundle['MSG.265']}");
                    FacesMessage message2 = new FacesMessage(msg2);
                    message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message2);
                }
            } else {
                String msg2 = resolvEl("#{bundle['MSG.422']}");
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);
            }
        } else {
            String msg2 = resolvEl("#{bundle['MSG.423']}");
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message2);
        }
        pmtVo.executeQuery();
        //executeViewObjects();
    }

    /**Payment Date validation for duplicate value.
     * @param paydt
     * @return
     */
    public String paymentDateValidation(Timestamp paydt) {
        /** _log.info("Inside AM Validator");
        ViewObject slsPmt = this.getSlsSoPmntSchdl1();
        _log.info("Date is-->" + paydt);
        if (paydt != null) {
            Row rows[] = slsPmt.getFilteredRows("PayDt", paydt);
            _log.info("Total row with same date is-->" + rows.length);
            if (rows.length > 0) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return null;
        }
        */
        Integer countVal = 0;
        Row x = getSlsSo1().getCurrentRow();
        if (x != null) {
            Timestamp selDate = (Timestamp) x.getAttribute("PayDateTrans");
            Integer mode = (Integer) x.getAttribute("PayModeTrans");

            RowSetIterator rSetIter = getSlsSoPmntSchdl1().createRowSetIterator(null);
            // System.out.println(selDate + "   " + mode);
            if (selDate != null) {
                while (rSetIter.hasNext()) {
                    Row r = rSetIter.next();
                    if (selDate.equals(r.getAttribute("PayDt")) && mode.equals(r.getAttribute("PayMode"))) {
                        //  System.out.println("1 param Found : " + paramName.equals(r.getAttribute("TransSO")));
                        countVal = countVal + 1;
                        //   System.out.println(" count increased " + countVal);





















































                    }
                }
                rSetIter.closeRowSetIterator();
                /*Row currentRow = getSlsInvPmntSchdl().getCurrentRow();
                if (currentRow != null) {
                    if (selDate.equals(currentRow.getAttribute("PayDt")) &&
                        mode.equals(currentRow.getAttribute("PayMode"))) {
                        // System.out.println("2 param Id Found : " + paramName.equals(currentRow.getAttribute("TransSO")));
                        countVal = countVal - 1;
                    }
                } */
            }

        }
        return countVal > 0 ? "Y" : "F";

    }
    //Mehtod to delete each deliverly schedule
    public void postChangesDlvSchdl() {
        deleteDlvSchdl();
        //vo.executeQuery();
        this.getDBTransaction().postChanges();
        getSlsSoDlvSchdl1().executeQuery();
        ViewObject dlvSchdl = this.getDlvShdlView1();
        dlvSchdl.executeQuery();
    }

    /**
     *  Method to delete delivery schedule
     */
    public void deleteDlvSchdl() {
        Row dlcSchdlRow = getSlsSoDlvSchdl1().getCurrentRow();
        Object dlvQty0 = dlcSchdlRow.getAttribute("DlvQty");
        Object pickedQtyO = dlcSchdlRow.getAttribute("ItmPickedQtyTrans");
        Number dlvQty = (dlvQty0 == null ? StaticValue.NUMBER_ZERO : (Number) dlvQty0);
        Number pickedQty = (pickedQtyO == null ? StaticValue.NUMBER_ZERO : (Number) pickedQtyO);
        if (pickedQty.compareTo(StaticValue.NUMBER_ZERO) == 0) {
            dlcSchdlRow.remove();
        } else if (dlvQty.compareTo(pickedQty) > 0) {
            Object convFctrO = dlcSchdlRow.getAttribute("UomConvFctr");
            Number convFctr = (convFctrO == null ? new Number(1) : (Number) convFctrO);
            dlcSchdlRow.setAttribute("DlvQty", pickedQty);
            dlcSchdlRow.setAttribute("DlvQtyBs", ADFBeanUtils.roundOff(convFctr.multiply(pickedQty)));

        }
    }

    /**Disclosure Listener for panel tab to execute viewObject data.
     */
    public void dlvrySchdlDiscList() {
        SlsSoVOImpl slsSo = this.getSlsSo1();
        Row row = this.getSlsSo1().getCurrentRow();
        row.getKey();
        String docId = this.getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        slsSo.executeQuery();
        executeViewObjects();
        this.getDBTransaction().postChanges(); //Commented on June 22, for error in delivery schedule.
        executeViewObjects();
        slsSo.executeQuery();
        slsSo.setBindVar(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                         docId, EbizParams.GLBL_APP_CLD_ID());
        slsSo.findAndSetCurrentRowByKey(row.getKey(), 1);

        ViewObjectImpl dlvSchdl = this.getDlvShdlView1();
        dlvSchdl.setNamedWhereClauseParam("FlagBind", 1);
        dlvSchdl.executeQuery();
    }

    /**
     * @param val
     */
    public void selectAllCheckBox(boolean val) {
        ViewObject dlvView = this.getDlvShdlView1();
        RowSetIterator rit = dlvView.createRowSetIterator(null);
        /** Iterate through every visible row of view */

        while (rit.hasNext()) {
            Row row = rit.next();
            _log.info("Value of checkbox is-->" + val);
            if (val) {
                row.setAttribute("SelectItmChekBoxTrans", "Y");
                row.setAttribute("SchdlQuantTrans", row.getAttribute("BalanceQty"));
            } else {
                row.setAttribute("SelectItmChekBoxTrans", "N");
                row.setAttribute("SchdlQuantTrans", StaticValue.NUMBER_ZERO);
            }
        }
        rit.closeRowSetIterator();
    }

    /**Method to be used in drop listener to add T&C.
     * @param curRow
     */
    public void addTnCAction(Row curRow) {
        ViewObject tnc = this.getSlsSoTnc1();

        Row filtRows[] = tnc.getFilteredRows("TncId", curRow.getAttribute("TncId"));
        _log.info("Total Row in VO for same tncc-->" + filtRows.length);
        if (filtRows.length > 0) {
            //FacesMessage mesg = new FacesMessage("Duplicate Terms & Conditions, Please select other one");
            FacesMessage mesg = new FacesMessage(resolvEl("#{bundle['MSG.972']}").toString());
            mesg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, mesg);
        } else {
            Row tncRow = tnc.createRow();
            tnc.insertRow(tncRow);
            tncRow.setAttribute("TncId", curRow.getAttribute("TncId"));
        }
        tnc.executeQuery();
        this.getSlsSoItm1().executeQuery();
    }

    /**
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }


    /**
     * @param ruleId
     * Method to insert tax order wise.
     */
    public void procTaxOrder(Integer ruleId) {
        // this.getSlsSoTrLinesVO1().executeQuery();
        //  this.getSlsSoItm1().executeQuery();
        ViewObject slsSo = this.getSlsSo1();
        Row soCurRow = slsSo.getCurrentRow();
        Number itmAmtSum = StaticValue.NUMBER_ZERO;
        Number taxableAmt = StaticValue.NUMBER_ZERO;
        String taxAftDiscFlg = "N";
        itmAmtSum = (Number) (soCurRow.getAttribute("ItmAmtSpSumTrans"));
        taxableAmt = itmAmtSum;

        _log.info("Tax AftDisc Flag-->" + taxAftDiscFlg);
        String p_doc_id = soCurRow.getAttribute("DocId").toString();
        Number p_curr_fctr = (Number) soCurRow.getAttribute("CurrConvFctr");
        String shpmntId =
            soCurRow.getAttribute("ShipAdds") == null ? null : soCurRow.getAttribute("ShipAdds").toString();
        String CustmrId = soCurRow.getAttribute("EoId") == null ? null : soCurRow.getAttribute("EoId").toString();
        String formType =
            soCurRow.getAttribute("TaxFormTypId") == null ? null : soCurRow.getAttribute("TaxFormTypId").toString();
        String taxExmptd = "N";
        System.out.println(soCurRow.getAttribute("TransExmptTaxChk") + " The original exampt tax check box value");
        if (soCurRow.getAttribute("TransExmptTaxChk") != null) {
            if ("true".equalsIgnoreCase(soCurRow.getAttribute("TransExmptTaxChk").toString())) {
                taxExmptd = "Y";
            } else if ("false".equalsIgnoreCase(soCurRow.getAttribute("TransExmptTaxChk").toString())) {
                taxExmptd = "N";
            } else {
                taxExmptd = soCurRow.getAttribute("TransExmptTaxChk").toString();
            }
        }
        System.out.println(taxExmptd + " ===========  Order wise tax exmpted value");

        ViewObjectImpl forOrdrWiseTaxInsertion = this.getSlsSoTrVO2();
        int i = forOrdrWiseTaxInsertion.getRangeSize();
        forOrdrWiseTaxInsertion.setRangeSize(-1);
        _log.info("Range size of tr : " + i);
        _log.info("No of tax rule already inserted : " + forOrdrWiseTaxInsertion.getEstimatedRowCount());
        ViewObjectImpl impl = this.getSlsSoItm1();

        RowSetIterator createRowSetIterator = impl.createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row tr = null;
            String taxAlreadyExists = "N";
            StringBuffer itmId = new StringBuffer("");
            Row itmRow = createRowSetIterator.next();
            if (itmRow.getAttribute("ItmId") != null) {
                itmId = new StringBuffer(itmRow.getAttribute("ItmId").toString());
            }
            // To get the taxable amount for item with Tax rule flag Y
            itmRow.setAttribute("TaxRuleFlg", "Y");

            /* Number taxableAmountInItm =
                (itmRow.getAttribute("ItmAmtGsSp") == null ? StaticValue.NUMBER_ZERO :
                 (Number) itmRow.getAttribute("ItmAmtGsSp"));*/ //Amount without other charges

            Number taxableAmtWitOtrChrg =
                (itmRow.getAttribute("TotalAmtWithOtrCharSP") == null ? StaticValue.NUMBER_ZERO :
                 (Number) itmRow.getAttribute("TotalAmtWithOtrCharSP"));
            System.out.println(taxableAmtWitOtrChrg + " Amount on which tax is applied");

            Number asblAmt =
                (itmRow.getAttribute("AsblAmtSp") == null ? StaticValue.NUMBER_ZERO :
                 (Number) itmRow.getAttribute("AsblAmtSp"));

            Row[] filteredRows = forOrdrWiseTaxInsertion.getFilteredRows("ItmId", itmId.toString());
            if (filteredRows.length > 0) {
                taxAlreadyExists = "Y";
                tr = filteredRows[0];
            }

            _log.info("Tax exists : " + taxAlreadyExists + " DocId :" + p_doc_id);
            if (tr == null) {
                tr = this.getSlsSoTr2().createRow();
                this.getSlsSoTr2().insertRow(tr);
                tr.setAttribute("SrNo", 1);
                tr.setAttribute("SrNoDest", 0);
                tr.setAttribute("ExmptFlg", taxExmptd);
                tr.setAttribute("ItmId", itmId.toString());
                _log.info("New Row Created : " + tr.getKey() + " DocId : " + tr.getAttribute("DocId"));
            }
            tr.setAttribute("TaxableAmt", taxableAmtWitOtrChrg);
            tr.setAttribute("TaxRuleId", ruleId);
            tr.setAttribute("ExmptFlg", taxExmptd);
            // _log.info("TaxRuleId : "+ruleId+" and in row : "+tr.getAttribute("TaxRuleId"));
            /**
             *        p_sloc_id NUMBER,
        p_cldid IN VARCHAR2,
        p_ho_orgid IN VARCHAR2,
        p_org_id         VARCHAR2,
        p_doc_id         VARCHAR2,
        p_itm_id         VARCHAR2,
        p_tax_rule_id    NUMBER,
        p_user_id        NUMBER,
        p_taxable_amount NUMBER,
        p_asbl_amount    NUMBER,
        --- p_tax_rule_flg varchar2,
        p_conv_fctr  NUMBER,
        p_exempt_flg VARCHAR2 DEFAULT 'N',
        p_adds_id    VARCHAR2 DEFAULT 0,
        p_eo_id      NUMBER DEFAULT 0,
        p_form_typ   NUMBER DEFAULT NULL)
             */
            BigDecimal ret =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_INS_SO_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), p_doc_id,
                                                itmId.toString(), ruleId, EbizParams.GLBL_APP_USR(),
                                                taxableAmtWitOtrChrg, asblAmt, p_curr_fctr, taxExmptd, shpmntId,
                                                CustmrId, formType
            });
            Number retVal = StaticValue.NUMBER_ZERO;
            _log.fine("Return total tax amout-->" + ret);
            try {
                retVal = new Number(ret);
            } catch (SQLException e) {
                _log.info(e);
            }

            tr.setAttribute("TaxAmtSp", retVal);
            Number res = retVal.multiply(p_curr_fctr);
            res = ADFBeanUtils.roundOff(res);
            tr.setAttribute("TaxAmtBs", res);

            //For tax rule description recalculating
            itmRow.setAttribute("TransTaxRuleId", null);
            // To initiate Recalculations
            itmRow.setAttribute("TempAmtSp", StaticValue.NUMBER_ZERO);
            itmRow.setAttribute("taxableAmountTrans", null);
            itmRow.setAttribute("taxAmountTrans", null);
            itmRow.setAttribute("TaxDescriptionTrans", null);
            itmRow.setAttribute("TotalAmtWithOtrCharSP", null);
        }
        createRowSetIterator.closeRowSetIterator();
        forOrdrWiseTaxInsertion.setRangeSize(i);

        this.getSlsSoTrLinesVO1().executeQuery();
        // this.getSlsSoItm1().executeQuery();
    }

    /**
     * Method to apply Item wise tax rule.
     * @param ruleId
     */
    public void procTaxItem(Integer ruleId) {
        ViewObject slsSo = this.getSlsSo1();
        Row soCurRow = slsSo.getCurrentRow();
        Row trcurr = this.getSlsSoTr2().getCurrentRow();
        Row itmCur = this.getSlsSoItm1().getCurrentRow();
        String itmId = "0";
        /*Number taxableAmountInItm =
            (itmCur.getAttribute("ItmAmtGsSp") == null ? StaticValue.NUMBER_ZERO :
             (Number) itmCur.getAttribute("ItmAmtGsSp"));*/ //without othercharge amount
        itmCur.setAttribute("TaxRuleFlg", "Y");
        Number taxableAmtWitOtrChrg =
            (itmCur.getAttribute("TotalAmtWithOtrCharSP") == null ? StaticValue.NUMBER_ZERO :
             (Number) itmCur.getAttribute("TotalAmtWithOtrCharSP"));
        System.out.println(taxableAmtWitOtrChrg + " Amount on which tax is applied");
        Number asblAmt =
            (itmCur.getAttribute("AsblAmtSp") == null ? StaticValue.NUMBER_ZERO :
             (Number) itmCur.getAttribute("AsblAmtSp"));
        String p_doc_id = trcurr.getAttribute("DocId").toString();
        Number p_curr_fctr = (Number) soCurRow.getAttribute("CurrConvFctr");

        String shpmntId =
            soCurRow.getAttribute("ShipAdds") == null ? null : soCurRow.getAttribute("ShipAdds").toString();
        String CustmrId = soCurRow.getAttribute("EoId") == null ? null : soCurRow.getAttribute("EoId").toString();
        String formType =
            soCurRow.getAttribute("TaxFormTypId") == null ? null : soCurRow.getAttribute("TaxFormTypId").toString();

        String taxExmptd = "N";
        if (trcurr.getAttribute("ExmptFlg") != null) {
            taxExmptd = trcurr.getAttribute("ExmptFlg").toString();
        }

        //trcurr.setAttribute("TaxableAmt", taxableAmountInItm);//without othercharge amount
        trcurr.setAttribute("TaxableAmt", taxableAmtWitOtrChrg);

        Number p_taxable_amount = (Number) trcurr.getAttribute("TaxableAmt");
        if ("I".equalsIgnoreCase(soCurRow.getAttribute("TaxRuleFlg").toString())) {
            itmId = (itmCur.getAttribute("ItmId").toString());
        }


        BigDecimal ret =
            (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_INS_SO_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), p_doc_id, itmId,
                                            ruleId, EbizParams.GLBL_APP_USR(), p_taxable_amount, asblAmt, p_curr_fctr,
                                            taxExmptd, shpmntId, CustmrId, formType
        });
        Number retVal = StaticValue.NUMBER_ZERO;
        System.out.println("Return total Itemtax amoutn--> " + ret);
        try {
            retVal = new Number(ret);
            retVal = ADFBeanUtils.roundOff(retVal); //(Number) retVal.round(amt_no);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Number mul = retVal.multiply(p_curr_fctr);
        mul = ADFBeanUtils.roundOff(mul); //(Number) mul.round(amt_no);
        trcurr.setAttribute("TaxAmtSp", retVal);
        trcurr.setAttribute("TaxAmtBs", mul);
        itmCur.setAttribute("TempAmtSp", StaticValue.NUMBER_ZERO);


        //for tax description recalculating
        itmCur.setAttribute("TaxRuleFlg", "Y");
        itmCur.setAttribute("TransTaxRuleId", null);
        itmCur.setAttribute("taxableAmountTrans", null);
        itmCur.setAttribute("taxAmountTrans", null);
        itmCur.setAttribute("TaxDescriptionTrans", null);
        itmCur.setAttribute("TotalAmtWithOtrCharSP", null);
        //
        this.getSlsSoTr2().executeQuery();
        this.getSlsSoTrLines2().executeQuery();
        // this.getSlsSoItm1().executeQuery();
    }

    /**check for creating new tax rule in order wise tax.
     * @return
     */
    public String newOrOldtax() {
        return "N";
    }

    /**check for creating new tax rule in item wise tax.
     * @return
     */
    public String newOrOldtaxItem() {
        Integer rowCount = this.getSlsSoTr2().getRowCount();
        Row currentRow = getSlsSo1().getCurrentRow();
        Object taxTypO = currentRow.getAttribute("TaxRuleFlg");
        String taxTyp = (taxTypO == null ? "" : taxTypO.toString());
        System.out.println(taxTyp + " == Tax type to be followed");
        if (rowCount == 0 && taxTyp.equals("I")) {
            System.out.println("Creating new line for Tax : _____---------------------------");
            getSlsSoItm1().getCurrentRow().setAttribute("TaxRuleFlg", "Y");
            Row row = getSlsSoTr2().createRow();
            getSlsSoTr2().insertRow(row);
            row.setAttribute("SrNo", 1);
            // Method to fetch and set default tax
            fetchAndSetDefaultTaxItemWise(row);
            return "Y";
        } else {
            this.getSlsSoTr2().executeQuery();
            this.getSlsSoTrLines2().executeQuery();
            this.getSlsSoTrLinesVO1().executeQuery();

            return "N";

        }
    }

    /**
     * Method to reset incase of Tax is not selected in the love on pop up cancel
     */
    public void resetItemWiseTax() {
        Row r = getSlsSoTr2().getCurrentRow();
        Row itmRow = getSlsSoItm1().getCurrentRow();
        if (r != null) {
            System.out.println(r + " << the current row of tr ");
            String taxRule = r.getAttribute("TaxRuleId") == null ? null : r.getAttribute("TaxRuleId").toString();
            System.out.println(taxRule + " ======================= The current tax tule ID");
            if (taxRule == null) {
                System.out.println("=======================================row removed.");
                r.remove();
                itmRow.setAttribute("TaxRuleFlg", "N");
                itmRow.setAttribute("TransTaxRuleId", null);
                itmRow.setAttribute("TaxDescriptionTrans", null);
                itmRow.setAttribute("taxAmountTrans", StaticValue.NUMBER_ZERO);
                itmRow.setAttribute("taxableAmountTrans", StaticValue.NUMBER_ZERO);
            }
            getSlsSoTr2().executeQuery();
        }
    }

    /**
     * Method to add other charges to sales Order.
     */
    public void addOcValues() {
        ViewObject slsOc = this.getSlsSoOc1();
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Row ocRow = slsOc.getCurrentRow();
        if (soRow.getAttribute("CurrConvFctr") != null) {
            ocRow.setAttribute("CurrRate", soRow.getAttribute("CurrConvFctr"));
        }
        if (soRow.getAttribute("CurrIdSp") != null) {
            ocRow.setAttribute("CurrId", soRow.getAttribute("CurrIdSp"));
        }
        _log.info("Curr Rate in Oc-->" + soRow.getAttribute("CurrConvFctr") + "and currId is-->" +
                  soRow.getAttribute("CurrIdSp"));
    }


    /**Method to validate payment amount.
     * @param pmtAmt
     * @return
     */
    public String paymntAmtValidator(Number pmtAmt) {
        String retVal = "N";
        if (pmtAmt == null) {

        } else {
            ViewObject slsSo = this.getSlsSo1();
            Object payAmt = slsSo.getCurrentRow().getAttribute("PayAmtSumTrans");
            Number soAmtSp = (Number) slsSo.getCurrentRow().getAttribute("OrderTotalCostTrans");
            Number ptAmt = StaticValue.NUMBER_ZERO;

            Number totPmtAmt = StaticValue.NUMBER_ZERO;
            if (payAmt != null) {
                ptAmt = (Number) payAmt;
            }

            totPmtAmt = pmtAmt.add(ptAmt);
            _log.info("Total Amount to pay--->" + soAmtSp.round(EbizParams.GLBL_AMT_DIGIT()) + "and paid amount-->" +
                      totPmtAmt.round(EbizParams.GLBL_AMT_DIGIT()));
            if (totPmtAmt.round(EbizParams.GLBL_AMT_DIGIT()).compareTo(soAmtSp.round(EbizParams.GLBL_AMT_DIGIT())) ==
                1) {
                retVal = "Y";
            }
        }
        return retVal;
    }

    /**Method to remove
     * tax from Order.
     */
    public void removeOrdTax() {
        ViewObjectImpl trVo = this.getSlsSoTrVO2();
        ViewObjectImpl trLineVo = this.getSlsSoTrLinesVO2();
        // To remove trLines
        RowSetIterator crt = trLineVo.createRowSetIterator(null);
        while (crt.hasNext()) {
            crt.next().remove();
        }
        crt.closeRowSetIterator();

        // To remove tr
        ViewObjectImpl itmVo = this.getSlsSoItm1();
        RowSetIterator crtl = trVo.createRowSetIterator(null);
        while (crtl.hasNext()) {
            Row next = crtl.next();
            next.remove();
        }
        crtl.closeRowSetIterator();

        RowSetIterator itr = itmVo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            next.setAttribute("TaxRuleFlg", "N");
            next.setAttribute("TransTaxRuleId", null);
            next.setAttribute("TaxDescriptionTrans", null);
            next.setAttribute("taxAmountTrans", StaticValue.NUMBER_ZERO);
            next.setAttribute("taxableAmountTrans", StaticValue.NUMBER_ZERO);
            next.getAttribute("taxAmountTrans");
            next.getAttribute("taxableAmountTrans");
            System.out.println("Tax amount :" + next.getAttribute("taxAmountTrans"));
            System.out.println("Taxable amount :" + next.getAttribute("taxableAmountTrans"));
        }
        itr.closeRowSetIterator();
        //commented on 7th july for table row changed automatically
        //this.getDBTransaction().postChanges();
        trLineVo.executeQuery();
        trVo.executeQuery();
        //itmVo.executeQuery();
        ViewObjectImpl soVo = this.getSlsSo1();
        Row currentRow = soVo.getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("TrRuleTrans", 0);
        }

        _log.info("After deletetion TrRows : " + trVo.getEstimatedRowCount() + " TrLineRows : " +
                  trLineVo.getEstimatedRowCount());
    }

    /**Method to remove
     * tax from Item Line.
     */
    public void removeItmTax() {
        ViewObject soItm = this.getSlsSoItm1();
        ViewObject taxRule = this.getSlsSoTrVO2();
        ViewObject ruleLine = this.getSlsSoTrLinesVO3();
        Row itmRow = soItm.getCurrentRow();
        ruleLine.setRangeSize(-1);
        Row totRow[] = ruleLine.getFilteredRows("ItmId", itmRow.getAttribute("ItmId"));
        _log.info("Tr Lines to be removed | Count : " + totRow.length);
        for (Row r : totRow) {
            _log.info("Row Removed from trline for itemtax");
            r.remove();
        }
        ruleLine.executeQuery();
        taxRule.setRangeSize(-1);
        Row totRowTax[] = taxRule.getFilteredRows("ItmId", itmRow.getAttribute("ItmId"));
        _log.info("Tr to be removed | Count : " + totRowTax.length);
        for (Row r : totRowTax) {
            _log.info("Row Removed from trline for itemtax");
            r.remove();
        }
        ruleLine.executeQuery();
        taxRule.executeQuery();
        itmRow.setAttribute("TaxRuleFlg", "N");
        itmRow.setAttribute("TransTaxRuleId", null);
        itmRow.setAttribute("TaxDescriptionTrans", null);
        itmRow.setAttribute("taxAmountTrans", StaticValue.NUMBER_ZERO);
        itmRow.setAttribute("taxableAmountTrans", StaticValue.NUMBER_ZERO);
        // At first it was commented.
        // It was uncommented as trLines were not displaying n tax removal.07-08-2015|AJ
        getDBTransaction().postChanges();
    }

    /**Method to check whether taxable amount is changed or not.
     * @return
     */

    public String checkOrderTaxAmt() {
        String retVal = "N";
        String taxmode = "";
        Number curTaxableAmt = StaticValue.NUMBER_ZERO;
        ViewObject slsSo = this.getSlsSo1();
        ViewObject slsoItm = this.getSlsSoItm1();
        Row soRow = slsSo.getCurrentRow();

        if (soRow.getAttribute("TaxRuleFlg") != null) {
            taxmode = soRow.getAttribute("TaxRuleFlg").toString();
        }
        soRow.getAttribute("TotTaxAmtOrdTrans"); // used to recalculate the tax amount
        Number taxableAmtP = (Number) soRow.getAttribute("TotTaxableAmtTrans");
        if ("O".equalsIgnoreCase(taxmode)) {
            _log.info("Orderwise Tax");
            System.out.println(" GrossCostBeforeTaxTrans  :" + soRow.getAttribute("GrossCostBeforeTaxTrans"));
            if (soRow.getAttribute("GrossCostBeforeTaxTrans") != null) {
                //curTaxableAmt = (Number)soRow.getAttribute("CostBeforeTaxTrans");
                curTaxableAmt = (Number) soRow.getAttribute("GrossCostBeforeTaxTrans");
            } else {
                curTaxableAmt = StaticValue.NUMBER_ZERO;
            }
        } else if ("I".equalsIgnoreCase(taxmode)) {
            _log.info("Itemwise Tax");
            RowSetIterator rit = slsoItm.createRowSetIterator(null);
            while (rit.hasNext()) {
                Row lineRow = rit.next();
                if (lineRow.getAttribute("TaxRuleFlg") != null) {
                    if (lineRow.getAttribute("TaxRuleFlg").equals("Y")) {
                        curTaxableAmt =
                            /* curTaxableAmt.add(lineRow.getAttribute("ItmAmtGsSp") == null ? new Number(0) :
                                              (Number) (lineRow.getAttribute("ItmAmtGsSp")));*/ //for other charges amount
                            curTaxableAmt.add(lineRow.getAttribute("TotalAmtWithOtrCharSP") == null ? new Number(0) :
                                              (Number) (lineRow.getAttribute("TotalAmtWithOtrCharSP")));
                        //curTaxableAmt = curTaxableAmt.add((Number) (lineRow.getAttribute("AsblAmtSp")));
                    }
                }
            }
            rit.closeRowSetIterator();
        } else {
            taxableAmtP = StaticValue.NUMBER_ZERO;
        }
        taxableAmtP = ADFBeanUtils.roundOff(taxableAmtP);
        curTaxableAmt = ADFBeanUtils.roundOff(curTaxableAmt);
        _log.info("Previous taxable Amt-->" + taxableAmtP + "current -->" + curTaxableAmt);
        if (taxableAmtP.compareTo(curTaxableAmt) != 0) {
            StringBuilder msg = new StringBuilder("<ul>");
            msg.append("<li>Previous Taxable Amount on which tax have been calculated : ");
            msg.append(taxableAmtP);
            msg.append(" </li>");
            msg.append("<li>New Taxable Amount that exists currently : ");
            msg.append(curTaxableAmt);
            msg.append(" </li>");
            msg.append("</ul>");
            msg.append("There is a difference between the above two amounts. Please Re-apply tax to recalcuate tax on new Taxable Amount ! ");
            ADFModelUtils.showFormattedFacesMessage("There have been mismatch in Current Taxable Amount and Taxable Amount (Old Taxable Amount) on which tax was calculated !",
                                                    msg.toString(), FacesMessage.SEVERITY_ERROR);
        } else {
            retVal = "Y";
        }
        return retVal;
    }

    /**Method to check if Tax is selected in Header and Not applied.
     * @return
     */
    public String checkTaxApplOrNot() {
        Integer taxItmCount = 1;
        String retVal = "N";
        String taxmode = null;
        ViewObject slsSo = this.getSlsSo1();
        ViewObject slsoItm = this.getSlsSoItm1();
        Row soRow = slsSo.getCurrentRow();
        ViewObjectImpl forOrdrWiseTaxInsertion = this.getSlsSoTrVO2();
        _log.info("Estimated row count : " + forOrdrWiseTaxInsertion.getEstimatedRowCount());
        _log.info("Estimated row count with parameters : " + forOrdrWiseTaxInsertion.getEstimatedRowCount());
        if (soRow.getAttribute("TaxRuleFlg") != null) {
            taxmode = soRow.getAttribute("TaxRuleFlg").toString();
        }
        if ("O".equalsIgnoreCase(taxmode)) {
            _log.info("Tr row count : " + forOrdrWiseTaxInsertion.getEstimatedRowCount());
            if (forOrdrWiseTaxInsertion.getRowCount() > 0) {
                retVal = "N";
            } else {
                ADFModelUtils.showFormattedFacesMessage("Please Select Order Wise Tax !",
                                                        "Tax Type for Current Sales Order is Orderwise, but Orderwise tax is not applied on Current Sales Order.</br></br> Please select Orderwise Tax !",
                                                        FacesMessage.SEVERITY_ERROR);

                retVal = "O";
            }
        }
        if ("I".equalsIgnoreCase(taxmode)) {
            _log.info("Tr row count : " + forOrdrWiseTaxInsertion.getEstimatedRowCount());
            if (forOrdrWiseTaxInsertion.getRowCount() > 0) {
                retVal = "N";
            } else {
                ADFModelUtils.showFormattedFacesMessage("Please Select Item Wise Tax !",
                                                        "Tax Type for Current Sales Order is Item Wise, but Item Wise tax is not applied on any one Item for Current Sales Order.</br></br> Please select Item Wise Tax !",
                                                        FacesMessage.SEVERITY_ERROR);

                retVal = "I";
            }
        }
        return retVal;
    }

    /**DB Function call to insert scheme lines in to SlsSoItmSchm.
     * @param schmId
     */
    public Number insertIntoSchm(String schmId) {
        Number discount = new Number(0);
        Number currRate = new Number(1);
        //System.out.println("Scheme Id is " + schmId);
        if (schmId != null) {
            Row currentRow = this.getSlsSo1().getCurrentRow();
            if (currentRow != null) {
                Object cur = currentRow.getAttribute("CurrConvFctr");
                if (cur != null) {
                    currRate = (Number) cur;
                }
            }
            ViewObject itmVo = this.getSlsSoItm1();
            Row itmRow = itmVo.getCurrentRow();
            ViewObject schmItm = this.getSlsSoItmSch1();
            String doc_id = currentRow.getAttribute("DocId").toString();
            String itmId = itmRow.getAttribute("ItmId").toString();
            String itmUom = itmRow.getAttribute("ItmUom").toString();
            Number itmQty = (Number) itmRow.getAttribute("ItmQty");
            //itmRow.setAttribute("ItmDiscVal", 0);
            //getDBTransaction().postChanges();
            //itmRow.setAttribute("ItmDiscVal", StaticValue.NUMBER_ZERO);
            Timestamp userDt = (Timestamp) itmRow.getAttribute("UsrIdCreateDt");
            _log.info("sloc-->" + EbizParams.GLBL_APP_SERV_LOC() + "ItmId-->" + itmId + "qty--" + itmQty + "uom--" +
                      itmUom + "schmId--" + schmId + "usrid--" + EbizParams.GLBL_APP_USR() + "usrDt--" + userDt);
            Object result = callStoredFunction(Types.VARCHAR, "SLS.FN_INS_SO_SCH_ITM(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), doc_id,
                                               itmId, itmUom, itmQty, currRate, schmId, EbizParams.GLBL_APP_USR(),
                                               userDt
            });

            //System.out.println("Reuslt from Scheme function-->" + result);

            String discType = "A";
            Object discVal = 0;
            if (result != null && result.toString().length() >= 1) {
                String r = result.toString();
                discType = r.substring(0, 1);
                discVal = r.substring(1);
                //   System.out.println("Scheme Type :::: : " + getSchmTyp(schmId));
                //  System.out.println("Discount type is  --->>> " + discType);

                //  System.out.println("Discount Value is --->>> " + discVal);
                if ("A".equals(getSchmTyp(schmId).toString())) { // this is Amount type scheme, discount policy not applicable


                    if ("".equals(discVal)) { //Setting discount value to zero(0), In case if there is no discount in the scheme

                        itmRow.setAttribute("ItmDiscTyp", discType);
                        itmRow.setAttribute("ItmDiscVal", StaticValue.NUMBER_ZERO);
                        //  System.out.println(" i'm here inside esle setting discount to Zero(0) ");

                    } else { //Setting discount based on the scheme.
                        itmRow.setAttribute("ItmDiscTyp", discType);
                        itmRow.setAttribute("ItmDiscVal", discVal);
                        //    System.out.println(" setting value to  --->>> " + discVal);
                    }

                    try {
                        discount = (Number) itmRow.getAttribute("ItmDiscVal");
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                } else { // For the quantity bases scheme discount settings
                    System.out.println(" Scheme type is Q");
                    if ("".equals(discVal)) {
                        System.out.println("Setting null to get discount policy");
                        discount = null; // for the discount from the discount policy
                        itmRow.setAttribute("ItmDiscTyp", discType);
                    } else {
                        //Setting discount based on the scheme.
                        System.out.println("scheme Discount for quantity -- >> " + discVal);
                        itmRow.setAttribute("ItmDiscTyp", discType);
                        itmRow.setAttribute("ItmDiscVal", discVal);
                    }

                }
            }

            itmRow.setAttribute("SchmFlg", "Y");
            //itmRow.setAttribute("ItmDiscVal", discount);

            // System.out.println("Value of Qty is " + itmRow.getAttribute("ItmDiscTyp") + " -- " +
            //                   itmRow.getAttribute("ItmDiscVal"));
            getSlsSoItmSch1().executeQuery();
            /* Commented on 15-June-15, 3:20, for scheme issues.*/

            // itmVo.executeQuery();

        }
        //System.out.println(discount + " ::::::::::::::::::::: scheme Discount value");
        return discount;
    }

    /**
     * @return
     */
    public ViewObject searchVo() {
        ViewObject searchVo = this.getorderSearch1();
        return searchVo;
    }

    public void resetAction() {
        this.getSearchLov1().executeQuery();
    }

    /**Item Id Validator for Lines.
     * @param itmName
     * @return
     */

    public String itmIdValidator(String itmName) {
        StringBuffer itmId = new StringBuffer("");
        ViewObjectImpl itmLov = this.getLovItmNmVo1();
        itmLov.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        itmLov.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        itmLov.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        itmLov.setNamedWhereClauseParam("ItmDescBind", itmName);
        itmLov.setNamedWhereClauseParam("ItmIdBind", null);
        itmLov.executeQuery();

        Row[] itmRows = itmLov.getAllRowsInRange();
        if (itmRows.length > 0) {
            Object itmIdO = itmRows[0].getAttribute("ItmId");
            itmId = (itmIdO == null ? new StringBuffer("") : new StringBuffer(itmIdO.toString()));
        }
        _log.info("Item Name is : " + itmName + " Item Id : " + itmId);
        Integer count = 0;
        Integer countfreeItm = 0;
        if (!itmId.toString().equals("")) {
            ViewObjectImpl itmVO = this.getSlsSoItm1();
            Row currentItmRow = itmVO.getCurrentRow();
            RowSetIterator itmItr = itmVO.createRowSetIterator(null);
            while (itmItr.hasNext()) {
                Row row = itmItr.next();
                if (!row.equals(currentItmRow)) {
                    Object itmIdO = row.getAttribute("ItmId");
                    StringBuffer itmIdr = (itmIdO == null ? new StringBuffer("") : new StringBuffer(itmIdO.toString()));
                    if (itmIdr.toString().equals(itmId.toString())) {
                        count = 1;
                        break;
                    }
                }
            }
            itmItr.closeRowSetIterator();
            /**Commenting on 18 june-2015, Since Scheme Item can be used multiple times, this duplicate value validator is not required.
            if (count == 0) {
                RowSetIterator schItr = this.getSlsSoItmSchVO2().createRowSetIterator(null);
                while (schItr.hasNext()) {
                    Row row = schItr.next();
                    //if (!row.equals(currentItmRow)) {
                    Object itmIdO = row.getAttribute("ItmId");
                    StringBuffer itmIdr = (itmIdO == null ? new StringBuffer("") : new StringBuffer(itmIdO.toString()));
                    _log.info("Curr Itm Id : " + itmId + "Free Item Id : " + itmIdr);

                    if (itmIdr.toString().equals(itmId.toString())) {
                        countfreeItm = 1;
                        break;
                    }
                    //}
                }
                schItr.closeRowSetIterator();
            }
                */
        }
        _log.info("Total Count -->" + count);
        if (countfreeItm > 0) {
            return "F";
        } else if (count > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    /**
     * Shows validation message whether item is present in scheme table or not.
     * @param itmName
     * @return
     */
    public String ChkItemInSchmPresentOrNot(String itmName) {
        StringBuffer itmId = new StringBuffer("");
        ViewObjectImpl itmLov = this.getLovItmNmVo1();
        itmLov.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        itmLov.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        itmLov.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        itmLov.setNamedWhereClauseParam("ItmDescBind", itmName);
        itmLov.setNamedWhereClauseParam("ItmIdBind", null);
        itmLov.executeQuery();

        Row[] itmRows = itmLov.getAllRowsInRange();
        if (itmRows.length > 0) {
            Object itmIdO = itmRows[0].getAttribute("ItmId");
            itmId = (itmIdO == null ? new StringBuffer("") : new StringBuffer(itmIdO.toString()));
        }
        Integer count = 0;
        if (!itmId.toString().equals("")) {
            ViewObjectImpl itmVO = this.getSlsSoItmSch1();
            Row currentItmRow = itmVO.getCurrentRow();
            RowSetIterator itmItr = itmVO.createRowSetIterator(null);
            while (itmItr.hasNext()) {
                Row row = itmItr.next();
                if (!row.equals(currentItmRow)) {
                    Object itmIdO = row.getAttribute("ItmId");
                    StringBuffer itmIdr = (itmIdO == null ? new StringBuffer("") : new StringBuffer(itmIdO.toString()));
                    if (itmIdr.toString().equals(itmId.toString())) {
                        count = 1;
                        break;
                    }
                }
            }
            itmItr.closeRowSetIterator();
        }
        _log.info("Total Count -->" + count);
        if (count > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    /**
     * Method used to call function to get the fy id.
     * @param CldId
     * @param OrgId
     * @return FY Id
     */
    public Integer getFYidOrg(String CldId, String OrgId) {
        ViewObjectImpl slsSo = this.getSlsSo1();
        Integer fyId = 0;
        _log.info("DocDate --" + slsSo.getCurrentRow().getAttribute("DocDt"));
        if (slsSo.getCurrentRow().getAttribute("DocDt") != null) {
            fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                 CldId, OrgId, slsSo.getCurrentRow().getAttribute("DocDt")
            }));
            if (fyId > 0 && slsSo.getCurrentRow().getAttribute("FyId") == null) {
                _log.info("Set FY id in Order");
                slsSo.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        _log.info("Fyid is--" + fyId);
        return fyId;
    }


    /**Methhod to generate display id.
     * @return
     */
    public String generateDispDocNo() {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        String ret = null;
        String p_doc_id = curRow.getAttribute("DocId").toString();
        Integer soTyp = (curRow.getAttribute("OrderType") == null ? 0 : (Integer) curRow.getAttribute("OrderType"));
        Integer soSubTyp = (curRow.getAttribute("SoSubType") == null ? 0 : (Integer) curRow.getAttribute("SoSubType"));

        if (curRow.getAttribute("SoId") == null) {
            ret = callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                     EbizParams.GLBL_APP_USR_ORG(), new Integer(21503), p_doc_id, soTyp, "SLS$SO",
                                     EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this), soSubTyp
            }).toString();
            _log.info("DisplyId is-->" + ret);
            curRow.setAttribute("SoId", ret);
        } else {
            ret = curRow.getAttribute("SoId").toString();
        }
        try {
            Integer c = (Integer) curRow.getAttribute("EoId");
            Object assignedTo = curRow.getAttribute("AssignedTo");
            Object currIdSp = curRow.getAttribute("CurrIdSp");
            Object currConFac = curRow.getAttribute("CurrConvFctr");
            Object shipAdds = curRow.getAttribute("ShipAdds");
            Object eoPricePlc = curRow.getAttribute("EoPricePlc");
            extDocDtVar = curRow.getAttribute("ExtDocDt");
            extDocNoVar = curRow.getAttribute("ExtDocNo");

            _log.info("Before Commmit.");
            _log.info("EoId is : " + curRow.getAttribute("EoId"));
            this.getDBTransaction().validate();
            _log.info("Validated rows.");
            /* if (shipadds != null) {
                curRow.setAttribute("ShipAdds", shipadds);
                _log.info("ShipAdds is : " + curRow.getAttribute("ShipAdds"));
            } */
            curRow.setAttribute("EoId", c);
            curRow.setAttribute("AssignedTo", assignedTo);
            curRow.setAttribute("CurrIdSp", currIdSp);
            curRow.setAttribute("ShipAdds", shipAdds);
            curRow.setAttribute("CurrConvFctr", currConFac);
            curRow.setAttribute("EoPricePlc", eoPricePlc);
            //------------------------------------------------- for
            this.getDBTransaction().postChanges();
            curRow.setAttribute("ExtDocDt", extDocDtVar);
            curRow.setAttribute("ExtDocNo", extDocNoVar);
            _log.info("Post changes.");

        } catch (Exception e) {
            _log.info("Error in Commmiting.");
            e.printStackTrace();
        }
        _log.info("After Commmit.");
        slsSo.executeQuery();
        setOnCurRow(p_doc_id);
        _log.info("Return Var is  : " + ret);
        _log.info("ShipAdds is : " + curRow.getAttribute("ShipAdds"));
        curRow.setAttribute("ExtDocDt", extDocDtVar);
        curRow.setAttribute("ExtDocNo", extDocNoVar);
        return ret;
    }

    /**Method to return Amount Sp And Bs for Save Message.
     * @return
     */
    public Number TotAmtSp() {
        Number amtSp = StaticValue.NUMBER_ZERO;
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        if (curRow.getAttribute("TotAmtSp") != null) {
            amtSp = (Number) curRow.getAttribute("TotAmtSp");
        }
        return amtSp;
    }

    /**
     * @return
     */
    public Number TotAmtBs() {
        Number amtBs = StaticValue.NUMBER_ZERO;
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        if (curRow.getAttribute("TotAmtBs") != null) {
            amtBs = (Number) curRow.getAttribute("TotAmtBs");
        }
        return amtBs;
    }

    /**Method to populate data from Quotation to SalesOrder.
     * @param quotId
     */

    public void populateQuotToSo(String quotId) {
        _log.info("inside am method");


        SlsSoVOImpl slsSo = (SlsSoVOImpl) this.getSlsSo1();
        SlsSoVORowImpl curRow = (SlsSoVORowImpl) slsSo.getCurrentRow();
        String quotDocId = curRow.getAttribute("QuotId") == null ? null : curRow.getAttribute("QuotId").toString();
        Integer fyId = curRow.getAttribute("FyId") == null ? null : (Integer) curRow.getAttribute("FyId");
        Integer customerId = curRow.getAttribute("EoId") == null ? null : (Integer) curRow.getAttribute("EoId");

        setValuesFromSelectedQuotation(quotDocId, fyId, customerId);
        //  RowSet lovVO1 = curRow.getquotationLovVO1();
        //  Row[] filteredRows = lovVO1.getFilteredRows("DispDocId", quotId);
        //  if (filteredRows.length > 0) {
        //      quotId = filteredRows[0].getAttribute("DocId").toString();
        //   }
        System.out.println(quotDocId + " ==== Quotation Doc id for sales Order");
        _log.info("Quot DocId is : " + quotId);

        if (quotDocId != null || !quotDocId.equals("")) {
            //String docId = (String)curRow.getAttribute("DocId");
            String p_doc_id = curRow.getAttribute("DocId").toString();
            String ret = callStoredFunction(Types.VARCHAR, "SLS.FN_QUOT_TO_SO(?,?,?,?,?,?,?)", new Object[] {
                                            EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                            EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), quotDocId,
                                            p_doc_id, EbizParams.GLBL_APP_USR()
            }).toString();
            _log.info("Output from QuotTOSo--->" + ret);

            this.getSlsSoItm1().executeQuery();
            executeViewObjects();
            //  SlsSoVORowImpl soRow = (SlsSoVORowImpl) this.getSlsSo1().getCurrentRow();
            //  _log.info("Total Item Sp Sum -" + soRow.getItmAmtSpSumTrans() + "Total Row in item table-" +
            //            soRow.getSlsSoItm().getRowCount());
            //  this.getSlsSoItm1().executeQuery();
            //   executeViewObjects();


            /**To Refresh Accessor of SO$ITEM*/
            Row[] grpRow = slsSo.getFilteredRows("DocId", p_doc_id);
            curRow.getAttribute("TotTaxAmtOrdTrans");
            if (grpRow.length > 0) {
                RowSet childRows = (RowSet) grpRow[0].getAttribute("SlsSoItm");
                childRows.executeQuery();
            }
            SlsSoItmVORowImpl currentRow = (SlsSoItmVORowImpl) this.getSlsSoItm1().getCurrentRow();
            currentRow.getLovSchemeNameVo1().executeQuery();
            _log.info("Tax Amount : " + curRow.getAttribute("TotTaxAmtOrdTrans"));
            //  _log.info("After Refrshing Accessor-" + soRow.getSlsSoItm().getRowCount());
        }
    }

    /**
     *Method to get the data from selected quotation and set it in the sales order on applying quotation
     * @param QotDocId
     * @param fyId
     * @param customerId
     */
    public void setValuesFromSelectedQuotation(String qotDocId, Integer fyId, Integer customerId) {
        Row curRow = getSlsSo1().getCurrentRow();
        getquotationLov().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        getquotationLov().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        getquotationLov().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        getquotationLov().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        getquotationLov().setNamedWhereClauseParam("FyIdBind", fyId);
        getquotationLov().setNamedWhereClauseParam("EoIdBind", customerId);
        getquotationLov().setNamedWhereClauseParam("BindQotDocId", qotDocId);
        getquotationLov().executeQuery();
        Row r[] = getquotationLov().getAllRowsInRange();

        if (r.length > 0) {
            curRow.setAttribute("CurrIdSp", r[0].getAttribute("CurrIdSp"));
            curRow.setAttribute("DiscType", r[0].getAttribute("DiscType"));
            curRow.setAttribute("DiscVal", r[0].getAttribute("DiscPercVal"));
            curRow.setAttribute("CurrConvFctr", r[0].getAttribute("CurrConvFctr"));
            curRow.setAttribute("TaxRuleFlg", r[0].getAttribute("TaxRuleFlg"));
            curRow.setAttribute("DocDt", r[0].getAttribute("DocDt"));
            curRow.setAttribute("AssignedTo", r[0].getAttribute("AssignedTo"));
            curRow.setAttribute("PayModeTrans", r[0].getAttribute("PayMode"));
        }

    }

    /**Method to
     * remove Scheme
     * from Item.
     * Modified on 19-jun-2015
     * making method with parameter, specific for item id and scheme id
     */
    public void removeScheme(String itmId, String schmId) {

        //Getting all the values before post changes, since row get changed after post changes
        ViewObject slsItm = this.getSlsSoItm1();
        Row itmRow = slsItm.getCurrentRow();
        String docId = (String) itmRow.getAttribute("DocId");
        String curritmId =
            (String) itmRow.getAttribute("ItmId"); /* Commented on 19-June-15, for scheme method with parameter.*/
        ViewObjectImpl freeItmLotVO1 = this.getSlsSoFreeItmLotVO1();

        /* Commented on 15-June-15, 3:20, for scheme issues.*/
        //System.out.println(" This Item's Scheme is getting removed ---->>> " + curritmId);
        //  System.out.println(" This Scheme is getting removed ---->>> " + schmId);
        getSlsSoItm1().executeQuery(); //Created on 22-june to counter to many objects before postchanges
        getDBTransaction().postChanges();
        RowSetIterator rsiFreeItmLot = freeItmLotVO1.createRowSetIterator(null);
        while (rsiFreeItmLot.hasNext()) {
            FacesMessage message =
                new FacesMessage("Lot has been already added for Scheme Item. You cannot remove Scheme.");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }
        //System.out.println("before condition loop in remove scheme");
        if (rsiFreeItmLot.getAllRowsInRange().length == 0) {

            // System.out.println(itmRow.getAttribute("ItmId") + "  <<----- This Item Scheme will be removed.");
            Object result = ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_INS_SCHM_DEL(?,?,?,?,?,?,?,?)"), new Object[] {
                                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                       EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                                       docId, schmId, curritmId, EbizParams.GLBL_APP_USR()
            }, Types.NUMERIC);
            // System.out.println("The result of remove scheme Item ================== " + result);
            itmRow.setAttribute("SchmFlg", "N");
            //itmRow.setAttribute("SchId", null);
            ((SlsSoItmVORowImpl) itmRow).setCurrentSchId(); // To set the scheme ID to null in case of removing scheme... commented on 20-june-15 for scheme issue

        }
        //SlsSoItmVORowImpl currentRow = (SlsSoItmVORowImpl) this.getSlsSoItm1().getCurrentRow();
        //currentRow.setSchId(null); // Comment on 19-june for scheme issue

        // currentRow.getLovSchemeNameVo1().executeQuery();

        rsiFreeItmLot.closeRowSetIterator();
        getSlsSoItmSch1().executeQuery();
        //getSlsSoItm1().executeQuery(); //Created on 22-june to counter to many objects before postchanges
        /* Commented on 15-June-15, 3:20, for scheme issues.*/
        getDBTransaction().postChanges();
        //  this.getSlsSoItm1().executeQuery();
        /* Commented on 19-June-15, for scheme issues.*/
        this.getSlsSoItmSch1().executeQuery();
        //this.getDlvShdlView1().executeQuery();
    }

    /**Method to insert data in SLS$SO$CALC.
     */
    public void orderCalculation() {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        String dodId = curRow.getAttribute("DocId").toString();
        Object ret = null;
        try {
            ret = callStoredFunction(Types.VARCHAR, "SLS.FN_INS_SO_CALC(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                     EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), dodId,
                                     EbizParams.GLBL_APP_USR(), new Integer(0), curRow.getAttribute("CurrIdSp"),
                                     curRow.getAttribute("CurrIdBs"), curRow.getAttribute("CurrConvFctr")
            });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_INS_SO_CALC' in SoVoImpl ! " +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        _log.info("Value form fucntion is-->" + ret);
    }

    /**Method to call database function for Rush Order/Cash Sale Order to issue material and update stock.
     * @return
     */
    public Boolean rushOrderDispatch() {
        Boolean success = false;
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        Object shipAddsO = curRow.getAttribute("ShipAdds");
        String p_doc_id = curRow.getAttribute("DocId").toString();
        try {
            Object retvalPick =
                callStoredFunction(Types.VARCHAR, "SLS.FN_INS_SO_TO_PICK(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                   curRow.getAttribute("WhId"), p_doc_id, curRow.getAttribute("DocDt"),
                                   curRow.getAttribute("EoId"), curRow.getAttribute("CoaId"), EbizParams.GLBL_APP_USR(),
                                   new Timestamp(System.currentTimeMillis()), curRow.getAttribute("CurrIdSp"),
                                   curRow.getAttribute("CurrConvFctr"),
                                   EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this), curRow.getAttribute("OrderType"),
                                   (shipAddsO == null ? -1 : shipAddsO)
            });
            success = true;
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_INS_SO_TO_PICK' in EoImpl !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            success = false;
            e.printStackTrace();
        }
        return success;
    }

    /**Method to populate data from Previous Sales Order to SalesOrder.
     * @param refDocId
     */

    public void populatePrevOrdToSo(String refDocId) {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        ViewObjectImpl lovDsipId = this.getLovDispOrdId1();
        String ref_doc_id = null;

        String p_doc_id = curRow.getAttribute("DocId").toString();
        RowQualifier rq = new RowQualifier(lovDsipId);
        rq.setWhereClause("SlocId=" + EbizParams.GLBL_APP_SERV_LOC() + " and OrgId='" + EbizParams.GLBL_APP_USR_ORG() +
                          "' and HoOrgId='" + EbizParams.GLBL_HO_ORG_ID() + "' and CldId='" +
                          EbizParams.GLBL_APP_CLD_ID() + "' and DispDocId='" + refDocId + "'");
        _log.info(rq.getExprStr());
        Row rows[] = lovDsipId.getFilteredRows(rq);
        _log.info("Total Row after Filtering-->" + rows.length);
        if (rows.length > 0) {
            ref_doc_id = rows[0].getAttribute("DocId").toString();
        }

        _log.info("DocId-->" + p_doc_id + "Reference doc id--->" + ref_doc_id);
        String ret = callStoredFunction(Types.VARCHAR, "SLS.FN_POPULATE_FROM_PREV_SO(?,?,?,?,?,?)", new Object[] {
                                        EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                        EbizParams.GLBL_APP_USR_ORG(), p_doc_id, ref_doc_id, EbizParams.GLBL_APP_USR()
        }).toString();
        _log.info("Output from PrevSoTOSo--->" + ret);
        SlsSoVORowImpl soRow = (SlsSoVORowImpl) this.getSlsSo1().getCurrentRow();

        _log.info("Total Item Sp Sum -" + soRow.getItmAmtSpSumTrans() + "Total Row in item table-" +
                  soRow.getSlsSoItm().getRowCount());
        this.getSlsSoItm1().executeQuery();
        executeViewObjects();


        /**To Refresh Accessor of SO$ITEM*/
        // Filter It Using Key Attribute
        Row[] grpRow = slsSo.getFilteredRows("DocId", p_doc_id);
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            RowSet childRows = (RowSet) grpRow[0].getAttribute("SlsSoItm");
            //Execute Child Rowset
            childRows.executeQuery();
        }
        _log.info("After Refrshing Accessor-" + soRow.getSlsSoItm().getRowCount());

    }

    /**Method To save Sales Order as Template.
     * @param tmplDesc
     * @return
     */

    public String saveAsTemp(String tmplDesc) {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        String ret = null;
        String p_doc_id = curRow.getAttribute("DocId").toString();
        ViewObjectImpl descVO1 = this.getSLSSOTmplDescVO1();
        descVO1.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
        descVO1.setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        descVO1.setNamedWhereClauseParam("bindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        descVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        descVO1.setNamedWhereClauseParam("BindTmplSoDesc", tmplDesc);
        descVO1.executeQuery();
        Row[] allRowsInRange = descVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            ADFModelUtils.showFormattedFacesMessage("The Description of the Template already exists!",
                                                    "Please select a Different Description.",
                                                    FacesMessage.SEVERITY_ERROR);
        } else {
            ret = callStoredFunction(Types.VARCHAR, "SLS.FN_SAVE_AS_TEMPLATE_SO(?,?,?,?,?,?)", new Object[] {
                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                     EbizParams.GLBL_APP_USR_ORG(), p_doc_id, EbizParams.GLBL_APP_USR(), tmplDesc
            }).toString();
            executeViewObjects();

        }
        return ret;
    }

    /**Method to populate Sales Order from Template.
     * @param templId
     */

    public void populateTemplateToSo(String templId) {
        _log.info("inside am method and RefDocId is-->" + templId);
        ViewObject slsSo = this.getSlsSo1();
        SlsSoVORowImpl curRow = (SlsSoVORowImpl) slsSo.getCurrentRow();
        String ref_doc_id = null;
        Integer fyId = 0;
        try {
            //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
            fyId = (Integer) callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                (Timestamp) curRow.getAttribute("DocDt")
            });
            //system.out.println("FY :" + fyId);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' in EoImpl !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }


        String p_doc_id = curRow.getAttribute("DocId").toString();

        RowSetIterator createRowSetIterator = curRow.getLovTmplDocIdVO1().createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            if (next.getAttribute("DispDocId").toString().equals(templId)) {
                ref_doc_id = next.getAttribute("DocId").toString();
                _log.info("refDocId :" + ref_doc_id);
            }
        }
        createRowSetIterator.closeRowSetIterator();
        // _log.info("Total Row after Filtering-->" + rows.length);

        _log.info("DocId-->" + p_doc_id + "Reference doc id--->" + ref_doc_id);
        String ret = callStoredFunction(Types.VARCHAR, "SLS.FN_POPULATE_FROM_PREV_TEMPLATE(?,?,?,?,?,?,?)", new Object[] {
                                        EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                        EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), ref_doc_id,
                                        p_doc_id, EbizParams.GLBL_APP_USR_ORG()
        }).toString();
        _log.info("Output from TemplateTOSo--->" + ret);
        executeViewObjects();

        SlsSoVORowImpl soRow = (SlsSoVORowImpl) this.getSlsSo1().getCurrentRow();

        _log.info("Total Item Sp Sum -" + soRow.getItmAmtSpSumTrans() + "Total Row in item table-" +
                  soRow.getSlsSoItm().getRowCount());
        this.getSlsSoItm1().executeQuery();
        executeViewObjects();


        /**To Refresh Accessor of SO$ITEM*/
        // Filter It Using Key Attribute
        Row[] grpRow = slsSo.getFilteredRows("DocId", p_doc_id);
        // Get Child Rows using ViewLink Accessor
        if (grpRow.length > 0) {
            RowSet childRows = (RowSet) grpRow[0].getAttribute("SlsSoItm");
            //Execute Child Rowset
            childRows.executeQuery();
        }
        _log.info("After Refrshing Accessor-" + soRow.getSlsSoItm().getRowCount());
    }

    /**OC Specific Amount Validator.
     * @param ocAmt
     * @return
     */
    public String ocAmtValidator(Number ocAmt) {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        Number totOrdCost = StaticValue.NUMBER_ZERO;
        Number ocAmtTot = StaticValue.NUMBER_ZERO;
        if (curRow.getAttribute("ocAmtSumWidSign") != null) {
            ocAmtTot = (Number) curRow.getAttribute("ocAmtSumWidSign");
        }
        if (curRow.getAttribute("costBfrOcTrans") != null) {
            totOrdCost = (Number) curRow.getAttribute("costBfrOcTrans");
        }

        _log.info("Oc Amt Sum is-->" + ocAmtTot + "and Total Cost is-->" + totOrdCost);
        if (ocAmtTot.compareTo(0) == -1 && (ocAmtTot.multiply(-1)).compareTo(totOrdCost) == 1) {
            return "Y";
        } else {
            return "N";
        }
    }

    /**Method to Validate Order Date.
     * @param ordDate
     * @return
     */
    public String orderDtValidate(Timestamp ordDate) {
        /* Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String dtFlg = (String) callStoredFunction(Types.VARCHAR, "APP.PKG_APP.GET_FY_STAT_FOR_TXN(?,?,?)", new Object[] {
                                                   SlocId, p_org_id, ordDate
        });


        return dtFlg; */
        return null;
    }

    /**Method to get Latest price of Item according to selected supplier.
     * @param lovIndex
     * @return
     */
    public Number getLatestItmPrice(Integer lovIndex) {
        ViewObject mmSoItmPo = this.getMmSoItmPo1();
        Number itmPrice = StaticValue.NUMBER_ZERO;
        Row curRow = mmSoItmPo.getCurrentRow();
        Integer eoId = null;
        MmSoItmPoVORowImpl soItmPoRow = (MmSoItmPoVORowImpl) this.getMmSoItmPo1().getCurrentRow();
        RowSet rset = soItmPoRow.getLovSuppItmScoreVO1();
        Row atRangeIndex = rset.getRowAtRangeIndex(lovIndex);
        if (atRangeIndex.getAttribute("EoId") != null) {
            eoId = Integer.parseInt(atRangeIndex.getAttribute("EoId").toString());
        }
        _log.info("Eo Id From RowSet-" + eoId);

        if (curRow.getAttribute("ItmId") != null && eoId != null) {
            String itmId = curRow.getAttribute("ItmId").toString();
            BigDecimal price = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_LATEST_PRICE(?,?,?,?,?,?)", new Object[] {
                                                               EbizParams.GLBL_APP_CLD_ID(),
                                                               EbizParams.GLBL_APP_SERV_LOC(),
                                                               EbizParams.GLBL_HO_ORG_ID(),
                                                               EbizParams.GLBL_APP_USR_ORG(), itmId, eoId,
            });
            try {
                itmPrice = new Number(price);
            } catch (SQLException e) {
                _log.info(e);
            }
        } else {
            itmPrice = new Number(-2);
        }
        return itmPrice;
    }

    /**Method to select and de-select checkBox.
     * @param val
     */
    public void selectAllCheckBoxSugst(boolean val) {
        ViewObject dlvView = this.getMmSoItmPo1();
        RowSetIterator rit = dlvView.createRowSetIterator(null);
        /** Iterate through every visible row of view */

        while (rit.hasNext()) {
            Row row = rit.next();
            Integer id = (row.getAttribute("EoId") == null ? 0 : (Integer) row.getAttribute("EoId"));
            _log.info("Value of checkbox is-->" + val);
            if (id != 0) {
                if (val) {
                    row.setAttribute("CheckItemTrans", "Y");

                } else {
                    row.setAttribute("CheckItemTrans", "N");
                }
            }
        }
        rit.closeRowSetIterator();
    }

    /**After Commmit method to be used to execute ViewObject.
     */
    public void executeViewObjects() {
        ViewObject slsSoItm = this.getSlsSoItm1();
        ViewObject slsDlcSchdl = this.getSlsSoDlvSchdl1();
        ViewObject slsPaymntSchdl = this.getSlsSoPmntSchdl1();
        ViewObject slsOc = this.getSlsSoOc1();
        ViewObject slsTnc = this.getSlsSoTnc1();
        ViewObject slsItmTr = this.getSlsSoTr2();
        ViewObject slsItmTrline = this.getSlsSoTrLines2();

        slsSoItm.executeQuery();
        slsDlcSchdl.executeQuery();
        slsPaymntSchdl.executeQuery();
        slsOc.executeQuery();
        slsTnc.executeQuery();
        slsItmTr.executeQuery();
        slsItmTrline.executeQuery();
        this.getSlsSoItmBin1().executeQuery();
        this.getSlsSoItmLot1().executeQuery();
        this.getSlsSoItmSr1().executeQuery();
        this.getDlvShdlView1().executeQuery();
        this.getLovItmId1().executeQuery();
    }

    /**Method to get Item Price for Customer.
     * @param itmDesc
     * @return
     */
    public Number getLatestItmPriceSo(String itmDesc) {
        _log.info("Inside AM method Rate");
        ViewObject slsSo = this.getSlsSo1();

        Integer p_sloc_id = EbizParams.GLBL_APP_SERV_LOC();
        String p_org_id = EbizParams.GLBL_APP_USR_ORG();
        String p_cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer p_user_id = EbizParams.GLBL_APP_USR();
        String p_hoOrgId = EbizParams.GLBL_HO_ORG_ID();

        ViewObjectImpl impl = this.getLovItmNmVo1();
        impl.setNamedWhereClauseParam("ItmIdBind", null);
        impl.setNamedWhereClauseParam("CldIdBind", p_cldId);
        impl.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        impl.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
        impl.setNamedWhereClauseParam("ItmDescBind", itmDesc);
        impl.executeQuery();


        Number itmPrice = StaticValue.NUMBER_ZERO;
        Row curRow = slsSo.getCurrentRow();


        String itemId = null;
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            itemId = allRowsInRange[0].getAttribute("ItmId").toString();
        }
        _log.info("ItmId : " + itemId);
        Number conv = new Number(1);
        _log.info("Before function call Customer is-->" + curRow.getAttribute("EoId") + "and Item is-->" + itemId);
        if (curRow.getAttribute("EoId") != null && itemId != null) {
            Integer eoId = (Integer) curRow.getAttribute("EoId");
            Integer currId = (Integer) curRow.getAttribute("CurrIdSp");
            conv = (Number) curRow.getAttribute("CurrConvFctr");
            Timestamp p_doc_dt = (Timestamp) curRow.getAttribute("DocDt");
            _log.info("Customer is-->" + eoId + "and Item is-->" + itemId);

            if (checkPolicyApplied().toString().equals("Y")) {
                BigDecimal price = new BigDecimal(0);
                BigDecimal policyPrice =
                    (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                    p_cldId, p_sloc_id, p_hoOrgId, p_org_id, eoId, itemId, "SO"
                });
                // _log.info("Policy Price is : " + policyPrice);
                policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                if (policyPrice.compareTo(new BigDecimal(-2)) == 0 || policyPrice.compareTo(new BigDecimal(0)) == 0) {
                    price =
                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                        "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId, itemId, p_doc_dt,
                                                        p_user_id, new Timestamp(System.currentTimeMillis()), currId,
                                                        conv
                    });
                    _log.info("Value from Function Rate--" + price);
                    try {
                        itmPrice = new Number(new Number(price).round(EbizParams.GLBL_AMT_DIGIT()));
                    } catch (SQLException e) {
                    }

                } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                    itmPrice = new Number(-3);
                } else {
                    price = policyPrice;
                    try {
                        itmPrice = new Number(new Number(price));
                        itmPrice = itmPrice.divide(conv);
                        itmPrice = (Number) itmPrice.round(EbizParams.GLBL_AMT_DIGIT());
                    } catch (SQLException e) {
                    }
                }
            } else {
                _log.info("Price from EO Price.");
                BigDecimal price =
                    (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId, itemId, p_doc_dt,
                                                    p_user_id, new Timestamp(System.currentTimeMillis()), currId, conv
                });
                _log.info("Value from Function Rate--" + price);
                try {
                    itmPrice = new Number(new Number(price).round(EbizParams.GLBL_AMT_DIGIT()));
                } catch (SQLException e) {
                }
            }


        }
        if (itmPrice.compareTo(-1) == 0) {
            itmPrice = StaticValue.NUMBER_ZERO;

        }

        // uom,id,uomBaisc
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        if (currentRow != null && itmPrice.compareTo(StaticValue.NUMBER_ZERO) >= 0) {
            currentRow.setAttribute("ItmRate", itmPrice);
        }
        _log.info("Latest Price for item is-->" + itmPrice);

        return itmPrice;
    }


    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param DocNo
     * @return
     */
    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Integer docType = (Integer) this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
            Object flowId = WorkFlowUtils.getWorkFlowId(this, 21503, docType);
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, docType
            });
            // System.out.println(" obj in getWfNo fucntion " + obj);

            return (obj == null ? null : obj.toString());
        } catch (Exception e) {
            //  System.out.println("in catfch getWfNo");
            return "0";
        }

    }

    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param UsrId
     * @param WfNo
     * @param DocNo
     * @return
     */
    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Integer docType = (Integer) this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, UsrId, WfNo, DocNo, docType
    }).toString());


    }

    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param UsrId
     * @param WfNo
     * @param DocNo
     * @return
     */
    public Integer checkForWf(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Integer i = -1;
        try {
            Integer docType = (Integer) this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
            // System.out.println("Oreder type checkForWf" + docType);
            i = Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                    SlocId, CldId, OrgId, UsrId, WfNo, DocNo, docType
            }).toString());
        } catch (Exception e) {
            i = -1;
            e.printStackTrace();
        }
        return i;
    }

    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param DocNo
     * @param WfNo
     * @param usr_idFrm
     * @param usr_idTo
     * @param levelTo
     * @param levelFrm
     * @param action
     * @param remark
     * @param amount
     * @return
     */
    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        Integer docType = (Integer) this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
        // System.out.println("Oreder type insIntoTxn" + docType);
        String DocId = this.getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo, docType, WfNo, DocId, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, "S"
    }).toString());

    }

    /**
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param DocNo
     * @return
     */
    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        Integer docType = (Integer) this.getSlsSo1().getCurrentRow().getAttribute("OrderType");
        //System.out.println("Oreder type pendingCheck" + docType);
        ////system.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, DocId, docType
        });
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }


    /**To Add Item Lot Wise
     * Method to select lot for item (If Organisation is not using bin and Items are not serialised).
     * @return
     *
     */
    public String insertIntoSoItmLot() {
        insertIntoSoItmLot2();
        return null;

    }


    public void insertIntoSoItmLot2() {
        //insertIntoPickItmSr
        ViewObjectImpl mtlItm = this.getSlsSoItm1();
        ViewObjectImpl mtlLot = this.getSlsSoItmLot1();
        ViewObject slsSo = this.getSlsSo1();
        Row currItm = mtlItm.getCurrentRow();
        Row soRow = slsSo.getCurrentRow();
        // oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getViewMmStkSummLot1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        // System.out.println("lenth sr     " + srRow.length);


        // ViewObjectImpl mtlItm = this.getSlsSoItm1();
        //ViewObjectImpl mtlBin = this.getSlsSoItmBin1();
        //ViewObjectImpl mtlLot = this.getSlsSoItmLot1();
        //Row currItm = mtlItm.getCurrentRow();
        //ViewObject slsSo = this.getSlsSo1();
        //Row soRow = slsSo.getCurrentRow();
        Number zero = StaticValue.NUMBER_ZERO;
        ViewObjectImpl stkSummLot = this.getViewMmStkSummLot1();
        //  Row[] binRow = this.getViewMmStkSummBin1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("TransIssuQtyValue") != null) {
                    if (((Number) r1.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        //    System.out.println("lot id Bin-- " + lotId);
                    }
                }
            }
            //    System.out.println(" Lot ArrayList size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = StaticValue.NUMBER_ZERO;
            for (Row r1 : srRow) {
                if (r1.getAttribute("TransIssuQtyValue") != null) {
                    if (((Number) r1.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssuQtyValue"));
                    }
                }
            }
            //  System.out.println(" lot id   ---" + lotId + "----qty------" + lotQty);
            // Check lot already created or not
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            //  System.out.println("" + rowQualifier.getExprStr());
            //  System.out.println("Lot Rows for Lot Id " + lotId + " is : " + rows.length);
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQtyBs", lotQty);
                    Number conv =
                        getUomConvFactor(r.getAttribute("ItmId").toString(), r.getAttribute("ItmUom").toString());
                    Number issueQty = lotQty;
                    r.setAttribute("ItmQty", issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummLot);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummLot.getFilteredRows(rq);
                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);


                instLot.setAttribute("ItmUom", getBaseUom(instLot.getAttribute("ItmId").toString()));
                instLot.setAttribute("ItmQtyBs", lotQty);
                Number conv =
                    getUomConvFactor(instLot.getAttribute("ItmId").toString(),
                                     instLot.getAttribute("ItmUom").toString());
                Number issueQty = lotQty;
                instLot.setAttribute("ItmQty", issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));
                //   System.out.println("Adding Items : Set Lot Qty to : " +
                //                    issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));

                instLot.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                instLot.setAttribute("WhId", soRow.getAttribute("WhId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = soRow.getAttribute("WhId").toString();
                    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                    StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                    StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                    //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                    //                                         p_sloc_id       NUMBER,
                    //                                         p_org_id        VARCHAR2,
                    //                                         p_wh_id         VARCHAR2,
                    //                                         p_itm_id        VARCHAR2,
                    //                                         p_lot_id VARCHAR2
                    //                                               )
                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            cldId.toString(), p_sloc_id, orgId.toString(), whId,
                                                            currItm.getAttribute("ItmId"), lotId,
                                                            EbizParams.getFyIdOnCurrDtAndCurrOrg(this)
                    });


                    /*  Number avl = StaticValue.NUMBER_ZERO;

                    try{
                        avl = new Number(avail);
                    }catch(Exception e){
                        e.printStackTrace();
                    } */
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = StaticValue.NUMBER_ZERO;
                try {
                    multiply = (Number) lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                // System.out.println("Item Lot Cost : " + multiply);
                instLot.setAttribute("ItmLotCost", multiply);


                mtlLot.executeQuery();
            }
        }
        //  System.out.println("----------" + lotset);
        if (srRow.length > 0) {
            //   System.out.println("length of mtl lot  " + srRow.length);
            for (Row rr : srRow) {
                //  System.out.println("loopin for the no. of length *********** " + rr);
                //   System.out.println(rr.getAttribute("TransIssuQtyValue") + " -    ----- -- transIssueQtyValue");
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {
                        //   System.out.println("Condition true create lot");
                        //  System.out.println(rr.getAttribute("LotId") + " lot id to be insert ");
                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        //  System.out.println("" + rowQualifier.getExprStr());
                        //    System.out.println("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) == 0) {
                                    //  System.out.println("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    //   System.out.println("row update ----------");


                                    //instLot.setAttribute("ItmUom", getBaseUom(instLot.getAttribute("ItmId").toString()));
                                    r.setAttribute("ItmQtyBs", r.getAttribute("TransIssuQtyValue"));
                                    Number conv =
                                        getUomConvFactor(r.getAttribute("ItmId").toString(),
                                                         r.getAttribute("ItmUom").toString());
                                    Number issueQty = (Number) r.getAttribute("TransIssuQtyValue");
                                    r.setAttribute("ItmQty", issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));


                                    //r.setAttribute("ItmQty", rr.getAttribute("TransIssueQty"));
                                    //r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                //  System.out.println("row created ----------");
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                //binInst.setAttribute("BinId", rr.getAttribute("BinId"));

                                lotInst.setAttribute("ItmUom", getBaseUom(lotInst.getAttribute("ItmId").toString()));
                                lotInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                Number conv =
                                    getUomConvFactor(lotInst.getAttribute("ItmId").toString(),
                                                     lotInst.getAttribute("ItmUom").toString());
                                Number issueQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                lotInst.setAttribute("ItmQty",
                                                     issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));
                                lotInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                                lotInst.setAttribute("WhId", soRow.getAttribute("WhId"));


                                mtlLot.insertRow(lotInst);
                                mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }

        this.getSlsSoItmBin1().executeQuery();
        this.getSlsSoItmLot1().executeQuery();
        this.getSlsSoItmSr1().executeQuery();

    }


    /**To Select Bin and Lot for Item
     * Method to select lot and bin for item (If Organisation is using bin and Items are not serialised).
     *
     */
    public void insertIntoSoItmBin() {
        //insertIntoPickItmSr
        ViewObjectImpl mtlItm = this.getSlsSoItm1();
        ViewObjectImpl mtlBin = this.getSlsSoItmBin1();
        ViewObjectImpl mtlLot = this.getSlsSoItmLot1();
        Row currItm = mtlItm.getCurrentRow();
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Number zero = StaticValue.NUMBER_ZERO;
        ViewObjectImpl stkSummBin = this.getViewMmStkSummBin1();
        Row[] binRow = this.getViewMmStkSummBin1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        _log.info("lot id Bin-- " + lotId);
                    }
                }
            }
            _log.info(" Lot ArrayList size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = StaticValue.NUMBER_ZERO;
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            _log.info(" lot id   ---" + lotId + "----qty------" + lotQty);
            // Check lot already created or not
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            _log.info("Lot Rows for Lot Id " + lotId + " is : " + rows.length);
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("ItmQtyBs", lotQty);
                    Number conv =
                        getUomConvFactor(r.getAttribute("ItmId").toString(), r.getAttribute("ItmUom").toString());
                    Number issueQty = lotQty;
                    r.setAttribute("ItmQty", issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummBin);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummBin.getFilteredRows(rq);
                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);


                instLot.setAttribute("ItmUom", getBaseUom(instLot.getAttribute("ItmId").toString()));
                instLot.setAttribute("ItmQtyBs", lotQty);
                Number conv =
                    getUomConvFactor(instLot.getAttribute("ItmId").toString(),
                                     instLot.getAttribute("ItmUom").toString());
                Number issueQty = lotQty;
                instLot.setAttribute("ItmQty", issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));
                _log.info("Adding Items : Set Lot Qty to : " +
                          issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));

                instLot.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                instLot.setAttribute("WhId", soRow.getAttribute("WhId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = soRow.getAttribute("WhId").toString();
                    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                    StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                    StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                    //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                    //                                         p_sloc_id       NUMBER,
                    //                                         p_org_id        VARCHAR2,
                    //                                         p_wh_id         VARCHAR2,
                    //                                         p_itm_id        VARCHAR2,
                    //                                         p_lot_id VARCHAR2
                    //                                               )
                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            cldId.toString(), p_sloc_id, orgId.toString(), whId,
                                                            currItm.getAttribute("ItmId"), lotId,
                                                            EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this)
                    });

                    /*  Number avl = StaticValue.NUMBER_ZERO;

                    try{
                        avl = new Number(avail);
                    }catch(Exception e){
                        e.printStackTrace();
                    } */
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = StaticValue.NUMBER_ZERO;
                try {
                    multiply = (Number) lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                _log.info("Item Lot Cost : " + multiply);
                instLot.setAttribute("ItmLotCost", multiply);


                mtlLot.executeQuery();
            }
        }
        _log.info("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        _log.info("Condition true create Bin");

                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "' and BinId = '" +
                                                    rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        _log.info("" + rowQualifier.getExprStr());
                        _log.info("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    _log.info("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    _log.info("row update ----------");


                                    //instLot.setAttribute("ItmUom", getBaseUom(instLot.getAttribute("ItmId").toString()));
                                    r.setAttribute("ItmQtyBs", r.getAttribute("TransIssueQty"));
                                    Number conv =
                                        getUomConvFactor(r.getAttribute("ItmId").toString(),
                                                         r.getAttribute("ItmUom").toString());
                                    Number issueQty = (Number) r.getAttribute("TransIssueQty");
                                    r.setAttribute("ItmQty", issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));


                                    //r.setAttribute("ItmQty", rr.getAttribute("TransIssueQty"));
                                    //r.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                _log.info("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));

                                binInst.setAttribute("ItmUom", getBaseUom(binInst.getAttribute("ItmId").toString()));
                                binInst.setAttribute("ItmQtyBs", rr.getAttribute("TransIssueQty"));
                                Number conv =
                                    getUomConvFactor(binInst.getAttribute("ItmId").toString(),
                                                     binInst.getAttribute("ItmUom").toString());
                                Number issueQty = (Number) rr.getAttribute("TransIssueQty");
                                binInst.setAttribute("ItmQty",
                                                     issueQty.divide(conv).round(EbizParams.GLBL_QTY_DIGIT()));
                                binInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                                binInst.setAttribute("WhId", soRow.getAttribute("WhId"));


                                mtlBin.insertRow(binInst);
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }

        this.getSlsSoItmBin1().executeQuery();
        this.getSlsSoItmLot1().executeQuery();
        this.getSlsSoItmSr1().executeQuery();

    }


    /**To Select Bin,Lot and SrNo for Item
     * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised).
     */
    public void insertIntoPickItmSr() {

        ViewObjectImpl soItm = this.getSlsSoItm1();
        ViewObjectImpl soItmSr = this.getSlsSoItmSr1();
        ViewObjectImpl soItmBin = this.getSlsSoItmBin1();
        ViewObjectImpl soItmLot = this.getSlsSoItmLot1();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummSr1();

        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Row currItm = soItm.getCurrentRow();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = this.getViewMmStkSummSr1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("Lenth (Num) of serial number : " + srRow.length);

        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        //
                        arrlist.add(lotId);
                        _log.info("Lot id new : " + lotId);
                    }
                }
            }
            _log.info("No of lots added : " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);

        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = StaticValue.NUMBER_ZERO;
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {

            }
            _log.info(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(soItmLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = soItmLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                _log.info(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    String lotId = (String) r.getAttribute("LotId");
                    _log.info(" Lot id is : -----" + lotId);
                    Number prLotVal = (Number) r.getAttribute("ItmQty");
                    Number newQty = prLotVal.add(lotvalu);
                    _log.info("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("ItmQty", newQty);
                    r.setAttribute("ItmQtyBs", newQty);

                    BigDecimal avail = new BigDecimal(0);
                    try {
                        String whId = soRow.getAttribute("WhId").toString();
                        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                        //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                        //                                         p_sloc_id       NUMBER,
                        //                                         p_org_id        VARCHAR2,
                        //                                         p_wh_id         VARCHAR2,
                        //                                         p_itm_id        VARCHAR2,
                        //                                         p_lot_id VARCHAR2
                        //                                               )
                        avail =
                            (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            cldId.toString(), p_sloc_id, orgId.toString(), whId,
                                                            currItm.getAttribute("ItmId"), lotId,
                                                            EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this)
                        });

                        /*  Number avl = StaticValue.NUMBER_ZERO;

                        try{
                            avl = new Number(avail);
                        }catch(Exception e){
                            e.printStackTrace();
                        } */
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                        avail = new BigDecimal(0);
                    }
                    Number multiply = StaticValue.NUMBER_ZERO;
                    try {
                        multiply = (Number) newQty.multiply(new Number(avail));
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    _log.info("Item Lot Cost : " + multiply);
                    r.setAttribute("ItmLotCost", multiply);


                }
            } else {
                _log.info("CREATE NEW  LOT-----");
                Row insrtLot = soItmLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("ItmQty", lotvalu);
                insrtLot.setAttribute("ItmQtyBs", lotvalu);
                insrtLot.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                insrtLot.setAttribute("WhId", soRow.getAttribute("WhId"));
                insrtLot.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = soRow.getAttribute("WhId").toString();
                    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                    StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                    StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                    //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                    //                                         p_sloc_id       NUMBER,
                    //                                         p_org_id        VARCHAR2,
                    //                                         p_wh_id         VARCHAR2,
                    //                                         p_itm_id        VARCHAR2,
                    //                                         p_lot_id VARCHAR2
                    //                                               )
                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            cldId.toString(), p_sloc_id, orgId.toString(), whId,
                                                            currItm.getAttribute("ItmId"), key,
                                                            EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this)
                    });


                    //Number avl = StaticValue.NUMBER_ZERO;
                    _log.info("Lot price is : " + avail);
                    /* try{
                        avl = new Number(avail);
                    }catch(Exception e){
                        e.printStackTrace();
                    } */
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = StaticValue.NUMBER_ZERO;
                try {
                    multiply = (Number) lotvalu.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                _log.info("Lot inserted");
                insrtLot.setAttribute("ItmLotCost", multiply);
                soItmLot.insertRow(insrtLot);
                soItmLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        _log.info("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                _log.info("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoChkBxTrans") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoChkBxTrans").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = StaticValue.NUMBER_ZERO;
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(soItmBin);
                    rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = soItmBin.getFilteredRows(rowQualifier);
                    _log.info("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        _log.info("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("ItmQty");
                            Number newQty = prBinVal.add(binvalu);
                            _log.info("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("ItmQty", newQty);
                            r.setAttribute("ItmQtyBs", newQty);
                        }
                    } else {
                        _log.info("Create new Bin For Lot-----");
                        Row binInst = soItmBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("ItmQty", binvalu);
                        binInst.setAttribute("ItmQtyBs", binvalu);
                        binInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                        _log.info("Values in Bin-" + lot + "Bin id-" + key + "quant-" + binvalu);

                        binInst.setAttribute("WhId", soRow.getAttribute("WhId"));
                        binInst.setAttribute("ItmUom", getBaseUom(binInst.getAttribute("ItmId").toString()));

                        soItmBin.insertRow(binInst);
                        soItmBin.executeQuery();
                        _log.info(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
                _log.info("" + arrListbin);
                _log.info("" + binSet);

            }

        }

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        _log.info("Create SrNo for Selected Serials");
                        Row srInst = soItmSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("ItmQty", new Number(1));
                        srInst.setAttribute("ItmQtyBs", new Number(1));
                        srInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                        srInst.setAttribute("WhId", soRow.getAttribute("WhId"));
                        srInst.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));

                        soItmSr.insertRow(srInst);
                        soItmSr.executeQuery();
                    }
                }
            }
        }

        _log.info("Post Changes ____");
        this.getDBTransaction().postChanges();
        this.getSlsSoItmBin1().executeQuery();
        this.getSlsSoItmLot1().executeQuery();
        this.getSlsSoItmSr1().executeQuery();
        viewSummSr.executeQuery();
    }


    /**Method to filter Serial Number View ,as per Item Selected.
     */
    public void filterSrNoAsPerItem() {
        ViewObjectImpl issItm = this.getSlsSoItm1();
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Row curRow = issItm.getCurrentRow();
        this.getViewMmStkSummSr1().setWhereClause("SR_NO NOT IN (SELECT SR_NO from SLS$SO$ITM$SR where itm_id = '" +
                                                  curRow.getAttribute("ItmId").toString() + "')");
        this.getViewMmStkSummSr1().executeQuery();

        if (soRow != null) {
            ViewObject stkSr = this.getViewMmStkSummSr1();
            _log.info("Total Row in Srno-" + stkSr.getRowCount());
            stkSr.setNamedWhereClauseParam("whIdBind", soRow.getAttribute("WhId"));
            stkSr.executeQuery();
            _log.info("Total Row in SrNo after filter-" + stkSr.getRowCount());
        }
    }

    /**Method to Check that all Items are Issued with full quantity or Not, if Not then it will show Validation Message.
     * @return
     */
    public ArrayList checkItemIssueValidation() {
        this.getSlsSoItmLotVO1().executeQuery();
        ArrayList itemVal = new ArrayList();
        ViewObject slsPickItm = this.getSlsSoItm1();
        ViewObjectImpl slsPickLot = this.getSlsSoItmLotVO1();
        slsPickLot.setRangeSize(-1);
        RowSetIterator rsi = slsPickItm.createRowSetIterator(null);
        rsi.setRangeSize(-1);
        while (rsi.hasNext()) {
            Row curItmRow = rsi.next();
            if (curItmRow != null) {
                Number pickedQtyItm = StaticValue.NUMBER_ZERO;
                if (curItmRow.getAttribute("ItmQtyBs") != null) {
                    pickedQtyItm = (Number) curItmRow.getAttribute("ItmQtyBs");
                    //system.out.println("Picked Quantity is:  " + pickedQtyItm);
                }
                Number lotTotQty = StaticValue.NUMBER_ZERO;
                RowQualifier rq = new RowQualifier(slsPickLot);
                rq.setWhereClause("CldId='" + curItmRow.getAttribute("CldId") + "' and  SlocId=" +
                                  curItmRow.getAttribute("SlocId") + " and OrgId='" + curItmRow.getAttribute("OrgId") +
                                  "' and DocId='" + curItmRow.getAttribute("DocId") + "' and ItmId='" +
                                  curItmRow.getAttribute("ItmId") + "'");
                _log.info("RowQuali Expression--" + rq.getExprStr());
                Row fltrdRows[] = slsPickLot.getFilteredRows(rq);
                _log.info("Total Row in Lot for This Item--" + fltrdRows.length + "Item is-" +
                          curItmRow.getAttribute("ItmId"));
                if (fltrdRows.length > 0) {
                    for (Row r : fltrdRows) {
                        lotTotQty = lotTotQty.add((Number) r.getAttribute("ItmQtyBs"));
                    }
                }
                _log.info("Picked Qty-" + pickedQtyItm + "Total Issued Quantity-" + lotTotQty);
                if (pickedQtyItm.compareTo(lotTotQty) == 0) {

                } else {
                    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                    //String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
                    String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                    //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                    String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

                    String itmDesc = null;
                    ViewObjectImpl impl = this.getLovItmNmVo1();
                    impl.setNamedWhereClauseParam("ItmIdBind", curItmRow.getAttribute("ItmId").toString());
                    impl.setNamedWhereClauseParam("CldIdBind", p_cldId);
                    impl.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
                    impl.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
                    impl.setNamedWhereClauseParam("ItmDescBind", null);
                    impl.executeQuery();
                    Row[] allRowsInRange = impl.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        itmDesc = allRowsInRange[0].getAttribute("ItmDesc").toString();
                    }
                    itemVal.add(itmDesc);
                    _log.info("Inside Else == " + itmDesc);
                }
            }
        }
        rsi.closeRowSetIterator();
        // System.out.println("Un-Issued Items  =========== " + itemVal);
        return itemVal;
    }

    /**Method to return current Row of OC viewObject.
     * @return
     */

    public Row getCurOcRow() {
        ViewObject v1 = this.getSlsSoOc1();
        return v1.getCurrentRow();
    }

    /**Method to execute Item table*.
     */
    public void itmDisclosureList() {
        ViewObject slsSoItm = this.getSlsSoItm1();
        slsSoItm.executeQuery();
    }

    /**
     * @param itmId
     * @param qty
     * @return
     */
    public Boolean ChkItmIdExistOrNot(String itmId, Number qty) {
        Boolean val = true;
        ViewObject dlvSchdl = this.getSlsSoDlvSchdl1();
        RowSetIterator dlvSchdlRsi = dlvSchdl.createRowSetIterator(null);
        while (dlvSchdlRsi.hasNext()) {
            Row dlvNext = dlvSchdlRsi.next();
            Object dlvItmId = dlvNext.getAttribute("ItmId");
            if (dlvItmId.equals(itmId)) {
                val = false;

                Number dlvItmFreeQty = (Number) dlvNext.getAttribute("TotQty");
                dlvItmFreeQty = dlvItmFreeQty.add((Number) qty);
                dlvNext.setAttribute("TotQty", dlvItmFreeQty);
                dlvNext.setAttribute("DlvQty", dlvItmFreeQty);

                String whId = "";
                String addsId = "";
                if (resolvElO("#{pageFlowScope.PARAM_USR_WH_ID}") != null) {
                    whId = resolvElO("#{pageFlowScope.PARAM_USR_WH_ID}").toString();
                }
                SlsSoVORowImpl currentRow = (SlsSoVORowImpl) this.getSlsSo1().getCurrentRow();
                Row[] filteredRows = currentRow.getLovWhIdVO1().getFilteredRows("WhId", whId);
                if (filteredRows.length > 1) {
                    if (filteredRows[0].getAttribute("AddsId") != null) {
                        addsId = filteredRows[0].getAttribute("AddsId").toString();
                    }
                }
                _log.info("AddsId is : " + addsId + " WareHouse Id is : " + whId);
                dlvNext.setAttribute("WhId", whId);
                dlvNext.setAttribute("DlvAddsId", addsId);
                Number n = StaticValue.NUMBER_ZERO;
                try {
                    BigDecimal v =
                        (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] {
                                                        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                        EbizParams.GLBL_APP_USR_ORG(), itmId, whId,
                                                        new Timestamp(System.currentTimeMillis())
                    });

                    n = new Number(v);
                    ////system.out.println("v :"+v);
                } catch (Exception e) {
                    e.printStackTrace();
                    //system.out.println("error in calling function !!!!!!!!!!!!!!!!!!!");
                }
                dlvNext.setAttribute("AvlQty", n);
            }
        }
        dlvSchdlRsi.closeRowSetIterator();
        return val;
    }

    /**Method to insert lines in Dellivery Schedule,
     * in case user doesn't
     *
     * create any schedule********.
     */

    public Boolean generateAutoDlvSchdl() {
        Boolean chk = true;
        String soItmId = null;
        String soItmSchmId = null;
        Number qty = new Number(0);
        ViewObjectImpl soItm = this.getSlsSoItm1();
        ViewObjectImpl soItmSchm = this.getSlsSoItmSchVO2();
        soItm.setRangeSize(-1);
        soItmSchm.setRangeSize(-1);
        ViewObjectImpl dlvSchdl = this.getSlsSoDlvSchdl1();
        dlvSchdl.setRangeSize(-1);
        if (dlvSchdl.getRowCount() == 0) {
            Row soRow = this.getSlsSo1().getCurrentRow();
            Timestamp docdt = new Timestamp(System.currentTimeMillis());
            try {
                docdt = new Timestamp(((Timestamp) soRow.getAttribute("DocDt")).dateValue());
            } catch (SQLException e) {
                e.printStackTrace();
            }

            String whId = "";
            String addsId = "";
            String projId = "PROJ0000";
            String chkWhApplicable = "N";
            Object headerWh = headerWh = soRow.getAttribute("WhId");
            Object chkWh = resolvElO("#{pageFlowScope.GLBL_ORG_WH_CHK}");
            if (chkWh != null) {
                chkWhApplicable = chkWh.toString();
            }
            if (chkWhApplicable.equalsIgnoreCase("N")) {
                Object wh = resolvElO("#{pageFlowScope.PARAM_USR_WH_ID}");
                if (wh != null) {
                    whId = wh.toString();
                }
            } else if (chkWhApplicable.equalsIgnoreCase("Y")) {
                whId = headerWh == null ? null : headerWh.toString();
            }

            if (whId != null) {
                projId = EbizParamsAPPUtils.getPrjIdFrmWhId(this, whId);

                SlsSoVORowImpl currentRow = (SlsSoVORowImpl) this.getSlsSo1().getCurrentRow();
                Row[] filteredRows = currentRow.getLovWhIdVO1().getFilteredRows("WhId", whId);
                if (filteredRows.length > 0) {
                    if (filteredRows[0].getAttribute("AddsId") != null) {
                        addsId = filteredRows[0].getAttribute("AddsId").toString();
                    }
                }

                RowSetIterator rsi = soItm.createRowSetIterator(null);
                while (rsi.hasNext()) {

                    Row row = rsi.next();
                    soItmId = (String) row.getAttribute("ItmId");
                    qty = (Number) row.getAttribute("ItmQty");


                    Row dlvRow = dlvSchdl.createRow();
                    dlvSchdl.insertRow(dlvRow);
                    serialNumGen("SlsSoDlvSchdl1");

                    Integer Srno = 0;
                    Integer max = 0;

                    Row rowa[] = soItm.getAllRowsInRange();
                    for (Row r : rowa) {
                        try {
                            Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
                        } catch (NullPointerException e) {
                            Srno = 0;
                        }
                        if (Srno > max) {
                            max = Srno;
                        }
                    }

                    max = max + 1;
                    Integer schdlNo = generateScheduleNo((Timestamp) soRow.getAttribute("DocDt"), whId);
                    dlvRow.setAttribute("SrNo", max);
                    dlvRow.setAttribute("ItmId", soItmId);
                    dlvRow.setAttribute("DlvSchdlNo", schdlNo);
                    dlvRow.setAttribute("DlvDt", StaticValue.getTruncatedCurrDt());
                    dlvRow.setAttribute("TotQty", qty);
                    dlvRow.setAttribute("DlvQty", qty);
                    dlvRow.setAttribute("DlvQtyBs", row.getAttribute("ItmQtyBs"));
                    dlvRow.setAttribute("DlvMode", 163);
                    dlvRow.setAttribute("WhId", whId);
                    dlvRow.setAttribute("DlvAddsId", addsId);
                    dlvRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));
                    dlvRow.setAttribute("ItmUomBs", row.getAttribute("ItmUomBs"));
                    Object uomConvO = row.getAttribute("UomConvFctr");
                    Number uomConv = (uomConvO == null ? new Number(1) : (Number) uomConvO);
                    dlvRow.setAttribute("UomConvFctr", uomConv);
                    dlvRow.setAttribute("PrjId", projId);


                    Number n = StaticValue.NUMBER_ZERO;
                    dlvRow.setAttribute("BalQty", n);
                    if (whId != null) {
                        try {
                            BigDecimal v =
                                (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] {
                                                                EbizParams.GLBL_APP_CLD_ID(),
                                                                EbizParams.GLBL_APP_SERV_LOC(),
                                                                EbizParams.GLBL_APP_USR_ORG(),
                                                                row.getAttribute("ItmId").toString(), whId,
                                                                new Timestamp(System.currentTimeMillis())
                            });

                            n = new Number(v);
                        } catch (Exception e) {
                            //e.printStackTrace();
                            //system.out.println("error in calling function !!!!!!!!!!!!!!!!!!!");
                        }
                    }
                    dlvRow.setAttribute("AvlQty", n);
                }
                rsi.closeRowSetIterator();

                RowSetIterator rsiSchm = soItmSchm.createRowSetIterator(null);
                RowQualifier rQ = new RowQualifier(dlvSchdl);
                while (rsiSchm.hasNext()) {
                    Row rowSchm = rsiSchm.next();
                    soItmSchmId = (String) rowSchm.getAttribute("ItmId");
                    rQ.setWhereClause("CldId='" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId=" +
                                      EbizParams.GLBL_APP_SERV_LOC() + " and HoOrgId='" + EbizParams.GLBL_HO_ORG_ID() +
                                      "' and OrgId='" + EbizParams.GLBL_APP_USR_ORG() + "' and ItmId='" + soItmSchmId +
                                      "'");
                    Row[] fR = dlvSchdl.getFilteredRows(rQ);

                    if (fR.length > 0) {
                        qty = (Number) fR[0].getAttribute("TotQty");
                        Object schmQty = rowSchm.getAttribute("ItmFreeQty");
                        if (schmQty != null) {
                            //  System.out.println("Inside if qty schm");
                            qty = qty.add((Number) schmQty);
                        }

                        fR[0].setAttribute("TotQty", qty);
                        fR[0].setAttribute("DlvQty", qty);

                    } else {
                        Row dlvRow = dlvSchdl.createRow();
                        dlvSchdl.insertRow(dlvRow);
                        serialNumGen("SlsSoDlvSchdl1");
                        Integer Srno = 0;
                        Integer max = 0;
                        soItmSchm.setRangeSize(-1);
                        Row rowa[] = soItmSchm.getAllRowsInRange();
                        for (Row r : rowa) {
                            try {
                                Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
                            } catch (NullPointerException e) {
                                Srno = 0;
                            }
                            if (Srno > max) {
                                max = Srno;
                            }
                        }

                        max = max + 1;
                        Integer schdlNo = generateScheduleNo((Timestamp) soRow.getAttribute("DocDt"), whId);
                        dlvRow.setAttribute("SrNo", max);
                        dlvRow.setAttribute("ItmId", soItmSchmId);

                        _log.info("Date is : " + docdt + " Sr No is :" + max + " Scheule no : " + schdlNo);
                        dlvRow.setAttribute("DlvSchdlNo", schdlNo);
                        //Number avail = (Number)row.getAttribute("ItmQty");
                        dlvRow.setAttribute("DlvDt", docdt);
                        dlvRow.setAttribute("TotQty", rowSchm.getAttribute("ItmFreeQty"));
                        dlvRow.setAttribute("DlvQty", rowSchm.getAttribute("ItmFreeQty"));
                        dlvRow.setAttribute("DlvMode", 163);

                        _log.info("AddsId is : " + addsId + " WareHouse Id is : " + whId);
                        dlvRow.setAttribute("WhId", whId);
                        dlvRow.setAttribute("DlvAddsId", addsId);
                        //ItmUomBs
                        dlvRow.setAttribute("ItmUom", rowSchm.getAttribute("ItmUom"));
                        dlvRow.setAttribute("ItmUomBs", rowSchm.getAttribute("ItmUomBs"));
                        dlvRow.setAttribute("UomConvFctr", rowSchm.getAttribute("UomConvFctr"));

                        Number n = StaticValue.NUMBER_ZERO;
                        dlvRow.setAttribute("BalQty", n);
                        if (whId != null) {
                            try {
                                BigDecimal v =
                                    (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                    "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] {
                                                                    EbizParams.GLBL_APP_CLD_ID(),
                                                                    EbizParams.GLBL_APP_SERV_LOC(),
                                                                    EbizParams.GLBL_APP_USR_ORG(),
                                                                    rowSchm.getAttribute("ItmId").toString(), whId,
                                                                    new Timestamp(System.currentTimeMillis())
                                });

                                n = new Number(v);
                            } catch (Exception e) {
                                e.printStackTrace();
                                //system.out.println("error in calling function !!!!!!!!!!!!!!!!!!!");
                            }
                        }
                        dlvRow.setAttribute("AvlQty", n);
                    }
                }
                rsiSchm.closeRowSetIterator();
                dlvSchdl.executeQuery();
                soItm.executeQuery();
                this.getDlvShdlView1().executeQuery();
                _log.info("Delivery Schedule is created " + this.getDlvShdlView1().getEstimatedRowCount());
                chk = true;
            } else {
                chk = false;
            }
        }
        return chk;
    }

    /**Method to insert lines in Payment Schedule,
     * in case user doesn't
     *
     * make any schedule********.
     */

    public void generateAutoPaymentSchdl() {
        ViewObject slsSo = this.getSlsSo1();
        ViewObject pmtSchdl = this.getSlsSoPmntSchdl1();
        Row soRow = slsSo.getCurrentRow();
        if (pmtSchdl.getRowCount() == 0) {
            Row pmtRow = pmtSchdl.createRow();
            pmtSchdl.insertRow(pmtRow);
            pmtRow.setAttribute("PayDt", soRow.getAttribute("DocDt"));
            pmtRow.setAttribute("PayMode", 160);
            pmtRow.setAttribute("TotAmt", soRow.getAttribute("OrderTotalCostTrans"));
            pmtRow.setAttribute("PayAmt", soRow.getAttribute("OrderTotalCostTrans"));
            pmtRow.setAttribute("AdvFlg", "N");

            pmtSchdl.executeQuery();
        }
        _log.info("Payment Schedule is created");
    }


    /**Method to check whether Delivery Schedule is created for Item Or Not.
     * @return
     */

    public boolean checkDlvSchdlFrItm() {
        ViewObject slsDlv = this.getSlsSoDlvSchdl1();
        if (slsDlv.getEstimatedRowCount() > 0) {
            return true;
        } else {
            return false;
        }
    }

    /**Get Basic UOM of Item**.
     * @param itmId
     * @return
     */

    public String getBaseUom(String itmId) {
        String baseUom = null;
        ViewObjectImpl impl = this.getLovItmNmVo1();
        impl.setNamedWhereClauseParam("ItmIdBind", itmId);
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("ItmDescBind", null);
        impl.executeQuery();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            baseUom = allRowsInRange[0].getAttribute("UomBasic").toString();
        }

        _log.info("Base Uom is-" + baseUom);
        return baseUom;
    }

    /**Method to Auto Issue item from Stock in case of LIFO/FIFO.
     */

    public void issueAutoItem() {
        getDBTransaction().postChanges();
        String uomBase = null;
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        ViewObject pickItm = this.getSlsSoItm1();
        Row itmRow = pickItm.getCurrentRow();
        String binChkFlg = (String) ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

        _log.info("wh-" + soRow.getAttribute("WhId") + "itm-" + itmRow.getAttribute("ItmId") + "pickQty-" +
                  itmRow.getAttribute("ItmQty") + "PickOrd-" + itmRow.getAttribute("TransItmPickOrder") + "SrNo-" +
                  itmRow.getAttribute("TransItmSerializedFlg") + "DocID-" + itmRow.getAttribute("DocId") + "Uom-" +
                  itmRow.getAttribute("ItmUom"));

        if (getBaseUom((String) itmRow.getAttribute("ItmId")) != null) {
            uomBase = getBaseUom(itmRow.getAttribute("ItmId").toString());
        } else {
            uomBase = itmRow.getAttribute("ItmUom").toString();
        }
        Number convFctr =
            SoAmHelper.getUomConvFactor(this, itmRow.getAttribute("ItmId").toString(),
                                        itmRow.getAttribute("ItmUom").toString());

        /* BigDecimal convFctr = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                                              EbizParams.GLBL_APP_SERV_LOC(),
                                                              EbizParams.GLBL_APP_CLD_ID(),
                                                              EbizParams.GLBL_APP_USR_ORG(),
                                                              itmRow.getAttribute("ItmId"), uomBase,
                                                              itmRow.getAttribute("ItmUom")
        });

        _log.info("UomBase-" + uomBase + "ConvFctr-" + convFctr);
        if (convFctr == null) {
            convFctr = new BigDecimal(1);
        }
         */
        Integer ret =
            (Integer) ADFModelUtils.callFunction(this,
                                                 new StringBuilder("SLS.FN_SLS_SO_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                 EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                 EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                 soRow.getAttribute("WhId"), itmRow.getAttribute("ItmId"),
                                                 itmRow.getAttribute("ItmQty"),
                                                 itmRow.getAttribute("TransItmPickOrder"),
                                                 itmRow.getAttribute("TransItmSerializedFlg"), binChkFlg,
                                                 itmRow.getAttribute("DocId"), itmRow.getAttribute("ItmUom"),
                                                 itmRow.getAttribute("ItmUom"), convFctr, soRow.getAttribute("FyId")
        }, Types.INTEGER);
        _log.info("Retval AutoIssue-" + ret);
        this.getSlsSoItmLot1().executeQuery();
        this.getSlsSoItmBin1().executeQuery();
        this.getSlsSoItmSr1().executeQuery();
        if (ret != 1) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "There have been an error in Auto Item Issue !" + "</p></b>");
            saveMsg.append("<b>Please try again or contact ESS !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }

    }


    /**Method to get DocId of Current Row.
     * @return
     */
    public String getcurDocID() {
        String docId = "";
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        if (curRow != null && curRow.getAttribute("DocId") != null) {
            docId = curRow.getAttribute("DocId").toString();
        } else {
            ADFModelUtils.showFormattedFacesMessage("There have been some problem in fetching Current DocId !",
                                                    "There have been some problem in fetching Current DocId !",
                                                    FacesMessage.SEVERITY_WARN);
        }
        return docId;
    }

    /**Method to execute ViewCriteria on Header table to set on current Row.
     * @param doc_id
     */
    public void setOnCurRow(String doc_id) {
        ViewObject slsSo = this.getSlsSo1();
        //slsSo.executeQuery();
        _log.info("In Am -" + doc_id);
        slsSo.setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        slsSo.setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        slsSo.setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        slsSo.setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        slsSo.setNamedWhereClauseParam("docIdBind", doc_id);
        slsSo.executeQuery();
        //executeViewObjects();
    }

    /**Method to be called in case of Cash-Sale Order to Update Finance and in Rush Order to Issue Items and Update Stock.
     * @param p_cldId
     * @param p_sloc_id
     * @param p_hoOrgId
     * @param p_org_id
     * @param uidPost
     * @return
     */


    public Boolean updFinCashSale(String p_cldId, Integer p_sloc_id, String p_hoOrgId, String p_org_id,
                                  Integer uidPost) {
        Boolean success = true;
        //BigDecimal retval = new BigDecimal(0);
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        if (curRow.getAttribute("OrderType") != null) {
            Integer ordTyp = Integer.parseInt(curRow.getAttribute("OrderType").toString());
            if (ordTyp == 309 || ordTyp == 310 || ordTyp == 892) {
                success = rushOrderDispatch();
            }
        }
        /* if(success){
            this.getDBTransaction().commit();
        }else{
            this.getDBTransaction().rollback();
        } */
        return success;
    }

    /**Method to update Sales Order Mode after WorkFlow Call.
     */
    public void updOrderStatus() {
        Boolean b = true;
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Integer type = (Integer) soRow.getAttribute("OrderType");
        Object wfFlag = ADFModelUtils.resolvEl("#{pageFlowScope.PARAM_WF_RET_VAL}");
        if (wfFlag != null) {
            if (wfFlag.toString().equalsIgnoreCase("A")) {
                b = genTransferOrder(soRow);
            }
            if (b) {

                if (soRow.getAttribute("SoMode") != null) {
                    if (wfFlag.toString().equalsIgnoreCase("A")) {
                        //Method to call and insert IR for Advance payment in Sales Order
                        soRow.setAttribute("SoMode", 314);
                        if (type == 309 || type == 310) {
                            _log.info("Order is closed--");
                            soRow.setAttribute("OrderStat", 834);
                        }
                        if (type == 892 || type == 897) {
                            soRow.setAttribute("OrderStat", 218);
                            rushOrderDispatch(); //to generate shipment and invoice for the cash sales service order after approval.
                        }
                        if (type != 310) {
                            callFuntionToInsertIr();
                        }

                    } else if (wfFlag.toString().equalsIgnoreCase("F")) {
                        soRow.setAttribute("SoMode", 317);
                    } else if (wfFlag.toString().equalsIgnoreCase("R")) {
                        soRow.setAttribute("SoMode", 313);
                    }
                }
            }
            if (b) {
                this.getDBTransaction().commit();
                executeViewObjects();
                // System.out.println("End Of Order Status ________Comitted");
                this.getorderSearch1().executeQuery();
            } else {
                this.getDBTransaction().rollback();
                executeViewObjects();
                // System.out.println("End Of Order Status ________Rollbakc");
                this.getorderSearch1().executeQuery();
                ADFModelUtils.showFormattedFacesMessage("There have been some problem during function call after approval !",
                                                        "Please try again. If the problem persists please contact ESS!",
                                                        FacesMessage.SEVERITY_ERROR);
            }
        }
    }

    /**
     *Method called after lot bin updated on rush order
     * @return
     */
    public Boolean updateLotStatus() {
        Boolean sucess = true;

        getDBTransaction().postChanges();
        sucess =
            updFinCashSale(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                           EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR());
        if (sucess) {
            setRushOrderStatus();
        }
        return sucess;
    }

    /**
     * Method to set the order status for rush order or cash sales order after stock release
     * 309 == Rush order
     * 310 == Cash Sales order
     * 892 == CASH SALES ORDER (SERVICES)
     */
    public void setRushOrderStatus() {
        ;
        Row soRow = this.getSlsSo1().getCurrentRow();
        Integer mode = (Integer) soRow.getAttribute("SoMode");
        Integer type = (Integer) soRow.getAttribute("OrderType");
        if (type.compareTo(309) == 0 || type.compareTo(310) == 0) {
            if (mode.compareTo(314) == 0) {
                _log.info("Order is closed--");
                soRow.setAttribute("OrderStat", 217);
            }
            if (mode.compareTo(314) != 0) {
                _log.info("Order is pending Stock release--");
                soRow.setAttribute("OrderStat", 834);
            }
        }
    }

    /**Get User Name for Given UserId*.
     * @param uid
     * @return
     */
    public String getUserName(Integer uid) {

        String uname = "Anounymous";
        ViewObject usrVo = this.getLovUsrId1();
        Row[] filteredRows = usrVo.getFilteredRows("UsrId", uid);
        _log.info("Total Row-" + filteredRows.length);
        if (filteredRows.length > 0) {
            uname = filteredRows[0].getAttribute("UsrName").toString();
        }
        _log.info("Uid is-" + uid + "And name is-" + uname);
        return uname;
    }

    /**Method to update Order Staus in case of Cancellation.
     * @param canc_Flag
     */
    public void updateOrderStausCancel(String canc_Flag) {
        ViewObject slsSo = this.getSlsSo1();
        //Row soRow = slsSo.getCurrentRow();
        SlsSoVORowImpl soRow = (SlsSoVORowImpl) slsSo.getCurrentRow();

        if (canc_Flag.equalsIgnoreCase("true")) {
            _log.info("Order is Cancelled--");
            soRow.setAttribute("OrderStat", 220);
            Integer soBasis = (Integer) soRow.getAttribute("SoBasis");
            if (soBasis.equals(390)) {
                String id = soRow.getQuotId();
                String cldId = soRow.getCldId();
                Integer slocId = soRow.getSlocId();
                String orgId = soRow.getOrgId();

                if (id != null) {
                    try {
                        // System.out.println("Values which are passing to the function:  " + id + "  " + cldId + " " +
                        //                    slocId + " " + orgId);
                        BigDecimal v =
                            (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_UPDATE_QUOT_STAT(?,?,?,?,?)", new Object[] {
                                                            cldId, slocId, orgId, id, "C"
                        });
                        int flag = v.intValue();
                        //system.out.println("value of function is:  " + flag);
                        if (flag == -1) {
                            FacesMessage msg =
                                new FacesMessage("There is an error in calling the function SLS.FN_UPDATE_QUOT_STAT");
                            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, msg);
                        }
                    } catch (Exception e) {
                        FacesMessage msg =
                            new FacesMessage("There is an error in calling the function SLS.FN_UPDATE_QUOT_STAT");
                        msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, msg);
                    }
                    soRow.getquotationLovVO1().executeQuery();
                }
            }
        }
    }

    /**Method to update Order Staus in case of Cancellation.
     * @param srt_close_Flag
     */
    public void updateOrderStausShortClose(String srt_close_Flag) {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        if (srt_close_Flag.equalsIgnoreCase("true")) {
            _log.info("Order is short closed--");
            soRow.setAttribute("OrderStat", 219);
        }
    }

    /**Delete Item Check Action/TAX is applied or Item is issued.
     * @return
     */

    public String checkItemDelete() {
        ViewObject slsSoLot = this.getSlsSoItmLot1();
        ViewObject slsSotr = this.getSlsSoTr2();

        if (slsSoLot.getRowCount() > 0) {
            return "L";
        } else if (slsSotr.getRowCount() > 0) {
            return "T";
        } else {
            return "Y";
        }
    }

    /**Validation - to check whether all items are scheduled to deliver and payment schedule is done or not*.
     * @return
     */
    public String checkValidateSaveandForward() {
        String retVal = "Y";
        Number ordTotCost = StaticValue.NUMBER_ZERO;
        Number payAmt = StaticValue.NUMBER_ZERO;
        ViewObject dlvScdlVw = this.getDlvShdlView1();
        Row soRow = this.getSlsSo1().getCurrentRow();
        if (soRow.getAttribute("OrderTotalCostTrans") != null) {
            ordTotCost = (Number) soRow.getAttribute("OrderTotalCostTrans");
        }
        if (soRow.getAttribute("PayAmtSumTrans") != null) {
            payAmt = (Number) soRow.getAttribute("PayAmtSumTrans");
        }
        ordTotCost = (Number) ordTotCost.round(EbizParams.GLBL_AMT_DIGIT());
        payAmt = (Number) payAmt.round(EbizParams.GLBL_AMT_DIGIT());
        if (dlvScdlVw.getRowCount() > 0) {
            retVal = "D";
        } else if (ordTotCost.compareTo(payAmt) != 0) {
            retVal = "P";
        }
        _log.info("Return Value is--" + retVal);
        return retVal;
    }

    /**
     * @return
     */
    public Row[] getOrgPrfFltrdRow() {

        //String usePack = "N";
        ViewObjectImpl orgPrf = this.getorgSlsPrfVO1();
        orgPrf.executeQuery();
        RowQualifier rq = new RowQualifier(orgPrf);
        rq.setWhereClause("CldId='" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId=" + EbizParams.GLBL_APP_SERV_LOC() +
                          " and OrgId='" + EbizParams.GLBL_APP_USR_ORG() + "'");
        // _log.info("Rq is-" + rq.getExprStr());
        Row orgRows[] = orgPrf.getFilteredRows(rq);
        return orgRows;
    }

    /**
     * Method to get whether Tolerance Days is used or not as per Sales Profile.
     * @return
     */
    public String tlrncDaysUsedParam() {
        Object chkPrfVals =
            SoAmHelper.checkforProfileValuesObjectReturnV(this, new StringBuffer("CHK_DLV_SCHDL_TLRNC"));
        if (chkPrfVals == null) {
            return "N";
        } else {
            return chkPrfVals.toString();
        }
        /* String tlrncused = "N";
        Row orgRows[] = getOrgPrfFltrdRow();
        _log.info("Total Rows for Org-" + orgRows.length);
        if (orgRows.length > 0) {
            if (orgRows[0].getAttribute("ChkDlvSchdlTlrnc") != null) {
                tlrncused = orgRows[0].getAttribute("ChkDlvSchdlTlrnc").toString();
                if (tlrncused.equalsIgnoreCase("Y")) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "N";
            }
        } else {
            return "N";
        } */
    }


    /**
     * Method to get whether Tolerance Quantity is used or not as per Sales Profile.
     * @return
     */
    public String tlrncQtyUsedParam() {
        Object chkPrfVals = SoAmHelper.checkforProfileValuesObjectReturnV(this, new StringBuffer("CHK_DLV_QTY_TLRNC"));
        if (chkPrfVals == null) {
            return "N";
        } else {
            return chkPrfVals.toString();
        }
        /* String tlrncQty = "N";
        Row orgRows[] = getOrgPrfFltrdRow();
        _log.info("Total Rows for Org-" + orgRows.length);
        if (orgRows.length > 0) {
            if (orgRows[0].getAttribute("ChkDlvQtyTlrnc") != null) {
                tlrncQty = orgRows[0].getAttribute("ChkDlvQtyTlrnc").toString();
                if (tlrncQty.equalsIgnoreCase("Y")) {
                    return "Y";
                } else {
                    return "N";
                }

            } else {
                return "N";
            }
        } else {
            return "N";
        } */
    }

    /**Set Value in TaskFlow Param (To use tolerance days and quantity)
     * *.
     */
    public void setTFParamTlrnc() {

        //Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        //String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String tolrncQty = tlrncQtyUsedParam();
        String tolrncDys = tlrncDaysUsedParam();
        _log.info("Used tlrnc dys-" + tolrncDys + " and qty is-" + tolrncQty);
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_TLRNC_DYS_USED", tolrncDys);
        paramMap.put("PARAM_TLRNC_QTY_USED", tolrncQty);
        /*  ViewObject eoVo = this.getLovEoId1();
        _log.info("Total Customer bfr-" + eoVo.getRowCount());
        eoVo.setNamedWhereClauseParam("slocIdBind", p_sloc_id);
        eoVo.setNamedWhereClauseParam("orgIdBind", p_org_id);
        eoVo.setNamedWhereClauseParam("hoOrgIdBind", p_hoOrgId);
        eoVo.setNamedWhereClauseParam("cldIdBind", p_cldId);
        eoVo.executeQuery();
        _log.info("Total Customer aftr-" + eoVo.getRowCount()); */
    }


    /**Method to validate discount -Order Wise.
     * @param discVal
     * @return
     */
    public String checkOrdAmtDisc(Number discVal) {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Number costBfrDisc = StaticValue.NUMBER_ZERO;
        //Number costBfrTax = StaticValue.NUMBER_ZERO;
        //String taxAftDisc = "N";

        if (soRow.getAttribute("CostBeforeDiscTrans") != null) {
            costBfrDisc = (Number) soRow.getAttribute("CostBeforeDiscTrans");
        }

        /*  if (soRow.getAttribute("TaxAfterDiscFlg") != null) {
            taxAftDisc = soRow.getAttribute("TaxAfterDiscFlg").toString();
        } */

        /* if (soRow.getAttribute("CostBeforeTaxTrans") != null) {
            costBfrTax = (Number)soRow.getAttribute("CostBeforeTaxTrans");
        } */

        _log.info("Cost bfr disc=" + costBfrDisc + "and cost before tax-" + "" + "And disc val-" + discVal);
        /*  if ("Y".equalsIgnoreCase(taxAftDisc) && discVal.compareTo(costBfrTax) != -1) {
            return "Y";
        } else  */
        if ( /* "N".equalsIgnoreCase(taxAftDisc) && */discVal.compareTo(costBfrDisc) != -1) {
            return "Y";
        } else {
            return "N";
        }

    }

    /**Method to Convert Quantity to base quantity.
     * @param itmQty
     */
    public void setQtyBs(Number itmQty) {
        ViewObject slsItm = this.getSlsSoItm1();
        Row itmRow = slsItm.getCurrentRow();
        Number convFctr =
            SoAmHelper.getUomConvFactor(this, itmRow.getAttribute("ItmId").toString(),
                                        itmRow.getAttribute("ItmUom").toString());
        /* BigDecimal convFctr = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                                              EbizParams.GLBL_APP_SERV_LOC(),
                                                              EbizParams.GLBL_APP_CLD_ID(),
                                                              EbizParams.GLBL_APP_USR_ORG(),
                                                              itmRow.getAttribute("ItmId"),
                                                              itmRow.getAttribute("ItmUomBs"),
                                                              itmRow.getAttribute("ItmUom")
        });
        _log.info("Uom Factor-" + convFctr);
        Number uomConv = new Number(1);
        */
        Number qtyBs = convFctr.multiply(itmQty);
        _log.info("Uom Factor is-" + convFctr + "qty bs-" + qtyBs);
        itmRow.setAttribute("UomConvFctr", convFctr);
        itmRow.setAttribute("ItmQtyBs", qtyBs);
        itmRow.setAttribute("BalQty", qtyBs);

    }

    /**Method to get Amendment Number.
     * @return
     */
    public Integer getCurrentAmdNo() {
        Integer amdNo = 0;
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        if (soRow.getAttribute("AmdNo") != null) {
            amdNo = Integer.parseInt(soRow.getAttribute("AmdNo").toString());
        }
        _log.info("Amendment No is-" + amdNo);
        return amdNo;
    }

    /**Set Order Amendment Details.
     * @param amdNo
     */
    public void setAmndmntDtl(String amdNo) {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Integer amnndmntNo = Integer.parseInt(amdNo);
        BigDecimal retval = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_AMD_SO(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                                            EbizParams.GLBL_APP_SERV_LOC(),
                                                            EbizParams.GLBL_APP_USR_ORG(), soRow.getAttribute("DocId"),
                                                            EbizParams.GLBL_APP_USR(),
                                                            soRow.getAttribute("UsrIdCreateDt"), amnndmntNo - 1,
                                                            soRow.getAttribute("AmdDt")
        });
        _log.info("Amend function returns-" + retval);

        _log.info("Amd no to set is--" + amdNo);
        soRow.setAttribute("AmdNo", amdNo);
        soRow.setAttribute("AmdDt", StaticValue.getTruncatedCurrDt());
        soRow.setAttribute("SoMode", 315);
        soRow.setAttribute("OrderStat", 217);
        //this.getDBTransaction().commit();
    }

    /**Method to filter Stock Lot data warehouse wise.
     */
    public void filterLotWhWise() {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        if (soRow != null) {
            ViewObject stkLot = this.getViewMmStkSummLot1();
            _log.info("Total Row in Lot-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("WhIdBind", soRow.getAttribute("WhId"));
            stkLot.executeQuery();
            _log.info("Total Row in Lot after filter-" + stkLot.getRowCount());
        }
    }

    /**Method to filter Stock Bin data warehouse wise.
     */
    public void filterBinWhWise() {
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        if (soRow != null) {
            ViewObject stkLot = this.getViewMmStkSummBin1();
            _log.info("Total Row in Bin-" + stkLot.getRowCount());
            stkLot.setNamedWhereClauseParam("whIdBind", soRow.getAttribute("WhId"));
            stkLot.executeQuery();
            _log.info("Total Row in Bin after filter-" + stkLot.getRowCount());
        }
    }


    /**
     *
     * Container's getter for SlsSo1.
     * @return SlsSo1
     */
    public SlsSoVOImpl getSlsSo1() {
        return (SlsSoVOImpl) findViewObject("SlsSo1");
    }

    /**
     * Container's getter for SlsSoItm1.
     * @return SlsSoItm1
     */
    public SlsSoItmVOImpl getSlsSoItm1() {
        return (SlsSoItmVOImpl) findViewObject("SlsSoItm1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoItmVL1.
     * @return SlsSoTOSlsSoItmVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoItmVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoTOSlsSoItmVL1");
    }


    /**
     * Container's getter for DlvShdlView1.
     * @return DlvShdlView1
     */
    public ViewObjectImpl getDlvShdlView1() {
        return (ViewObjectImpl) findViewObject("DlvShdlView1");
    }

    /**
     * Container's getter for SlsSoToDlvSchdlViewVL1.
     * @return SlsSoToDlvSchdlViewVL1
     */
    public ViewLinkImpl getSlsSoToDlvSchdlViewVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoToDlvSchdlViewVL1");
    }

    /**
     * Container's getter for SlsSoDlvSchdl1.
     * @return SlsSoDlvSchdl1
     */
    public ViewObjectImpl getSlsSoDlvSchdl1() {
        return (ViewObjectImpl) findViewObject("SlsSoDlvSchdl1");
    }

    /**
     * Container's getter for SoSlsTOSoSlsDlvSchdlVL1.
     * @return SoSlsTOSoSlsDlvSchdlVL1
     */
    public ViewLinkImpl getSoSlsTOSoSlsDlvSchdlVL1() {
        return (ViewLinkImpl) findViewLink("SoSlsTOSoSlsDlvSchdlVL1");
    }


    /**
     * Container's getter for SlsSoPmntSchdl1.
     * @return SlsSoPmntSchdl1
     */
    public ViewObjectImpl getSlsSoPmntSchdl1() {
        return (ViewObjectImpl) findViewObject("SlsSoPmntSchdl1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoPmtSchdlVL1.
     * @return SlsSoTOSlsSoPmtSchdlVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoPmtSchdlVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoTOSlsSoPmtSchdlVL1");
    }


    /**
     * Container's getter for SlsSoTnc1.
     * @return SlsSoTnc1
     */
    public ViewObjectImpl getSlsSoTnc1() {
        return (ViewObjectImpl) findViewObject("SlsSoTnc1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoTncVL1.
     * @return SlsSoTOSlsSoTncVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoTncVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoTOSlsSoTncVL1");
    }

    /**
     * Container's getter for LovTnc1.
     * @return LovTnc1
     */
    public ViewObjectImpl getLovTnc1() {
        return (ViewObjectImpl) findViewObject("LovTnc1");
    }


    /**
     * Container's getter for SlsSoOc1.
     * @return SlsSoOc1
     */
    public ViewObjectImpl getSlsSoOc1() {
        return (ViewObjectImpl) findViewObject("SlsSoOc1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoOcVL1.
     * @return SlsSoTOSlsSoOcVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoOcVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoTOSlsSoOcVL1");
    }


    /**
     * Container's getter for SlsSoTr2.
     * @return SlsSoTr2
     */
    public ViewObjectImpl getSlsSoTr2() {
        return (ViewObjectImpl) findViewObject("SlsSoTr2");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSoTrVL1.
     * @return SlsSoItmTOSlsSoTrVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSoTrVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmTOSlsSoTrVL1");
    }

    /**
     * Container's getter for SlsSoTrLines2.
     * @return SlsSoTrLines2
     */
    public ViewObjectImpl getSlsSoTrLines2() {
        return (ViewObjectImpl) findViewObject("SlsSoTrLines2");
    }

    /**
     * Container's getter for SlsSoTrTOSlsSoTrLinesVL2.
     * @return SlsSoTrTOSlsSoTrLinesVL2
     */
    public ViewLinkImpl getSlsSoTrTOSlsSoTrLinesVL2() {
        return (ViewLinkImpl) findViewLink("SlsSoTrTOSlsSoTrLinesVL2");
    }


    /**
     * Container's getter for orderSearch1.
     * @return orderSearch1
     */
    public orderSearchVOImpl getorderSearch1() {
        return (orderSearchVOImpl) findViewObject("orderSearch1");
    }

    /**
     * Container's getter for SearchLov1.
     * @return SearchLov1
     */
    public ViewObjectImpl getSearchLov1() {
        return (ViewObjectImpl) findViewObject("SearchLov1");
    }


    /**
     * Container's getter for SlsSoItmSch1.
     * @return SlsSoItmSch1
     */
    public ViewObjectImpl getSlsSoItmSch1() {
        return (ViewObjectImpl) findViewObject("SlsSoItmSch1");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSchItmVL1.
     * @return SlsSoItmTOSlsSchItmVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSchItmVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmTOSlsSchItmVL1");
    }


    /**
     * Container's getter for RateContractVw1.
     * @return RateContractVw1
     */
    public ViewObjectImpl getRateContractVw1() {
        return (ViewObjectImpl) findViewObject("RateContractVw1");
    }

    /**
     * Container's getter for SlsSoToSlsRateCntrctVwVL1.
     * @return SlsSoToSlsRateCntrctVwVL1
     */
    public ViewLinkImpl getSlsSoToSlsRateCntrctVwVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoToSlsRateCntrctVwVL1");
    }


    /**
     * Container's getter for LovDispOrdId1.
     * @return LovDispOrdId1
     */
    public ViewObjectImpl getLovDispOrdId1() {
        return (ViewObjectImpl) findViewObject("LovDispOrdId1");
    }


    /**
     * Container's getter for LovTmplDocId1.
     * @return LovTmplDocId1
     */
    public ViewObjectImpl getLovTmplDocId1() {
        return (ViewObjectImpl) findViewObject("LovTmplDocId1");
    }

    /**
     * Container's getter for SlsSoCalc1.
     * @return SlsSoCalc1
     */
    public ViewObjectImpl getSlsSoCalc1() {
        return (ViewObjectImpl) findViewObject("SlsSoCalc1");
    }

    /**
     * Container's getter for SlsSoTOSlsSoOrdCalcVL1.
     * @return SlsSoTOSlsSoOrdCalcVL1
     */
    public ViewLinkImpl getSlsSoTOSlsSoOrdCalcVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoTOSlsSoOrdCalcVL1");
    }

    /**
     * Container's getter for MmSoItmPo1.
     * @return MmSoItmPo1
     */
    public ViewObjectImpl getMmSoItmPo1() {
        return (ViewObjectImpl) findViewObject("MmSoItmPo1");
    }

    /**
     * Container's getter for SlsSoToMMSoItmPoVL1.
     * @return SlsSoToMMSoItmPoVL1
     */
    public ViewLinkImpl getSlsSoToMMSoItmPoVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoToMMSoItmPoVL1");
    }

    /**
     * Container's getter for MmSo1.
     * @return MmSo1
     */
    public ViewObjectImpl getMmSo1() {
        return (ViewObjectImpl) findViewObject("MmSo1");
    }


    /**
     * Container's getter for MMGrpHdrTemp1.
     * @return MMGrpHdrTemp1
     */
    public MMGrpHdrTempVOImpl getMMGrpHdrTemp1() {
        return (MMGrpHdrTempVOImpl) findViewObject("MMGrpHdrTemp1");
    }

    /**
     * Container's getter for MMGrpItmDtlTemp1.
     * @return MMGrpItmDtlTemp1
     */
    public ViewObjectImpl getMMGrpItmDtlTemp1() {
        return (ViewObjectImpl) findViewObject("MMGrpItmDtlTemp1");
    }

    /**
     * Container's getter for MmSoGrp1.
     * @return MmSoGrp1
     */
    public ViewObjectImpl getMmSoGrp1() {
        return (ViewObjectImpl) findViewObject("MmSoGrp1");
    }

    /**
     * Container's getter for MMGrpHdrTOMMGrpItmDtlVL1.
     * @return MMGrpHdrTOMMGrpItmDtlVL1
     */
    public ViewLinkImpl getMMGrpHdrTOMMGrpItmDtlVL1() {
        return (ViewLinkImpl) findViewLink("MMGrpHdrTOMMGrpItmDtlVL1");
    }

    /**
     * Container's getter for MmSoItm1.
     * @return MmSoItm1
     */
    public ViewObjectImpl getMmSoItm1() {
        return (ViewObjectImpl) findViewObject("MmSoItm1");
    }

    /**
     * Container's getter for MMDrftPoView1.
     * @return MMDrftPoView1
     */
    public ViewObjectImpl getMMDrftPoView1() {
        return (ViewObjectImpl) findViewObject("MMDrftPoView1");
    }

    /**
     * Container's getter for SlsSoToMMDrftPoViewVL1.
     * @return SlsSoToMMDrftPoViewVL1
     */
    public ViewLinkImpl getSlsSoToMMDrftPoViewVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoToMMDrftPoViewVL1");
    }

    /**
     * Container's getter for LovSoBasis1.
     * @return LovSoBasis1
     */
    public ViewObjectImpl getLovSoBasis1() {
        return (ViewObjectImpl) findViewObject("LovSoBasis1");
    }

    /**
     * Container's getter for SlsSoItmBin1.
     * @return SlsSoItmBin1
     */
    public ViewObjectImpl getSlsSoItmBin1() {
        return (ViewObjectImpl) findViewObject("SlsSoItmBin1");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSoItmBinVL1.
     * @return SlsSoItmTOSlsSoItmBinVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSoItmBinVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmTOSlsSoItmBinVL1");
    }

    /**
     * Container's getter for SlsSoItmLot1.
     * @return SlsSoItmLot1
     */
    public ViewObjectImpl getSlsSoItmLot1() {
        return (ViewObjectImpl) findViewObject("SlsSoItmLot1");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSoItmLotVL1.
     * @return SlsSoItmTOSlsSoItmLotVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSoItmLotVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmTOSlsSoItmLotVL1");
    }

    /**
     * Container's getter for SlsSoItmSr1.
     * @return SlsSoItmSr1
     */
    public ViewObjectImpl getSlsSoItmSr1() {
        return (ViewObjectImpl) findViewObject("SlsSoItmSr1");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSoItmSrVL1.
     * @return SlsSoItmTOSlsSoItmSrVL1
     */
    public ViewLinkImpl getSlsSoItmTOSlsSoItmSrVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmTOSlsSoItmSrVL1");
    }

    /**
     * Container's getter for ViewMmStkSummBin1.
     * @return ViewMmStkSummBin1
     */
    public ViewMmStkSummBinVOImpl getViewMmStkSummBin1() {
        return (ViewMmStkSummBinVOImpl) findViewObject("ViewMmStkSummBin1");
    }

    /**
     * Container's getter for SlsSoItmTOViewMmStkSummBinVL1.
     * @return SlsSoItmTOViewMmStkSummBinVL1
     */
    public ViewLinkImpl getSlsSoItmTOViewMmStkSummBinVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmTOViewMmStkSummBinVL1");
    }

    /**
     * Container's getter for ViewMmStkSummLot1.
     * @return ViewMmStkSummLot1
     */
    public ViewObjectImpl getViewMmStkSummLot1() {
        return (ViewObjectImpl) findViewObject("ViewMmStkSummLot1");
    }

    /**
     * Container's getter for SlsSoItmTOViewMMStkSummLotVL1.
     * @return SlsSoItmTOViewMMStkSummLotVL1
     */
    public ViewLinkImpl getSlsSoItmTOViewMMStkSummLotVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmTOViewMMStkSummLotVL1");
    }

    /**
     * Container's getter for ViewMmStkSummSr1.
     * @return ViewMmStkSummSr1
     */
    public ViewObjectImpl getViewMmStkSummSr1() {
        return (ViewObjectImpl) findViewObject("ViewMmStkSummSr1");
    }

    /**
     * Container's getter for SlsSoItmTOViewMmStkSummSrVL1.
     * @return SlsSoItmTOViewMmStkSummSrVL1
     */
    public ViewLinkImpl getSlsSoItmTOViewMmStkSummSrVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmTOViewMmStkSummSrVL1");
    }

    /**
     * Container's getter for SlsSoItmLotVO1.
     * @return SlsSoItmLotVO1
     */
    public ViewObjectImpl getSlsSoItmLotVO1() {
        return (ViewObjectImpl) findViewObject("SlsSoItmLotVO1");
    }

    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrId1() {
        return (ViewObjectImpl) findViewObject("LovUsrId1");
    }

    /**
     * Container's getter for orgSlsPrfVO1.
     * @return orgSlsPrfVO1
     */
    public ViewObjectImpl getorgSlsPrfVO1() {
        return (ViewObjectImpl) findViewObject("orgSlsPrfVO1");
    }

    /**
     * Container's getter for LovEoId1.
     * @return LovEoId1
     */
    public LovEoIdImpl getLovEoId1() {
        return (LovEoIdImpl) findViewObject("LovEoId1");
    }

    /**
     * Container's getter for SlsPickFrSoVO1.
     * @return SlsPickFrSoVO1
     */
    public ViewObjectImpl getSlsPickFrSoVO1() {
        return (ViewObjectImpl) findViewObject("SlsPickFrSoVO1");
    }

    /**
     * Method to set WhId in dlvSchView and RateContractVo.
     * @param WhId
     */
    public void setWhIdInDlvSchVw(StringBuffer WhId) {
        RowSetIterator citr = this.getDlvShdlView1().createRowSetIterator(null);
        while (citr.hasNext()) {
            //system.out.println("setting wh :" + WhId);
            Row next = citr.next();
            next.setAttribute("whIdTrans", WhId.toString());
        }
        citr.closeRowSetIterator();
        RowSetIterator cit = this.getRateContractVw1().createRowSetIterator(null);
        while (cit.hasNext()) {
            //system.out.println("setting wh in rate :" + WhId);
            Row next = cit.next();
            next.setAttribute("WhIdTrans", WhId.toString());
        }
        cit.closeRowSetIterator();
    }


    /**
     * Container's getter for SlsSoItmTrf1.
     * @return SlsSoItmTrf1
     */
    public ViewObjectImpl getSlsSoItmTrf1() {
        return (ViewObjectImpl) findViewObject("SlsSoItmTrf1");
    }

    /**
     * Container's getter for SoDilvSchdlToSoQuantTrfVL1.
     * @return SoDilvSchdlToSoQuantTrfVL1
     */
    public ViewLinkImpl getSoDilvSchdlToSoQuantTrfVL1() {
        return (ViewLinkImpl) findViewLink("SoDilvSchdlToSoQuantTrfVL1");
    }

    /**
     * Method to insert.
     */
    public void createAndInsertRowInSoDilvSchdlToSoQuantTrfVL1() {

    }

    /**
     * @param whId
     */
    public void setAvailableQuantityOnWarehouseSelection(StringBuffer whId) {
        //        SLS.fn_mm_get_avail_stk (
        //           p_cld_id    VARCHAR2,
        //           p_sloc_id   NUMBER,
        //           p_org_id    VARCHAR2,
        //           p_itm_id    VARCHAR2,
        //           p_wh_id     VARCHAR2,
        //           P_DOC_DT DATE
        Number n = StaticValue.NUMBER_ZERO;
        Row currentRow = this.getSlsSoItmTrf1().getCurrentRow();
        if (currentRow != null) {
            try {
                BigDecimal v = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] {
                                                               EbizParams.GLBL_APP_CLD_ID(),
                                                               EbizParams.GLBL_APP_SERV_LOC(),
                                                               EbizParams.GLBL_APP_USR_ORG(),
                                                               currentRow.getAttribute("ItmId"), whId.toString(),
                                                               new Timestamp(System.currentTimeMillis())
                });

                n = new Number(v);
            } catch (Exception e) {
            }

        }
        currentRow.setAttribute("AvlQty", n);
    }

    /**
     * Method to generatetransfer order.
     * @param flag
     * @return
     */
    public Integer setTransferOrderFlag(StringBuffer flag) {
        ViewObjectImpl impl = this.getSlsSoItmTrfVO1();
        //Row soCurrrow = this.getSlsSo1().getCurrentRow();
        Row trfCurrentRow = impl.getCurrentRow();
        trfCurrentRow.setAttribute("TrfStat", flag.toString());
        return null;
    }

    /**
     * Method to validate the WhIdSrc.
     * @param whIdSrc
     * @return
     */
    public boolean isOrgIdSrcVALID(String whIdSrc) {
        if (whIdSrc != null) {
            Row currentRow = this.getSlsSoItmTrf1().getCurrentRow();
            RowSetIterator itr = this.getSlsSoItmTrf1().createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                // System.out.println("WhId :" + whIdSrc + " : " + next.getAttribute("WhIdSrc") +
                //          " : "); //+(next.getAttribute("WhIdSrc").equalsIgnoreCase((Object)whIdSrc)));
                if (next != currentRow) {
                    //system.out.println("WhId :" + next.getAttribute("WhIdDest") + " :: " + whIdSrc);
                    if (next.getAttribute("WhIdDest").toString().equalsIgnoreCase(whIdSrc)) {
                        //system.out.println("_____________________6");
                        itr.closeRowSetIterator();
                        return false;
                    }
                }
            }
            itr.closeRowSetIterator();
        }
        return true;
    }

    /**
     * To Check if all the transfer order are generated or not.
     * @return
     */
    public boolean isTransferOrderValid() {
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            if (row.getAttribute("TrfStat").toString().equals("N")) {
                itr.closeRowSetIterator();
                return false;
            }
        }
        itr.closeRowSetIterator();
        return true;
    }

    /**
     * @param orgIdDest
     */
    public void refreshDestWareHouse(StringBuffer orgIdDest) {
        SlsSoItmTrfVORowImpl soTrfRow = (SlsSoItmTrfVORowImpl) this.getSlsSoItmTrf1().getCurrentRow();
        soTrfRow.setOrgIdDest(orgIdDest.toString());
        soTrfRow.getLovWhIdVO2().executeQuery();
        //system.out.println("refresh");
    }

    /**
     * @return
     */
    public Integer getSalesOrderType() {
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            return (Integer) currentRow.getAttribute("OrderType");
        }
        return null;
    }

    public void setaxableAmount() {
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        if (currentRow != null) {

        }
    }

    /**
     * @return
     */
    public boolean isItemPriceForEachItmValid() {
        System.out.println("Calling the is iten pricads sadf as");
        Boolean b = false;
        ArrayList<Row> rowList = new ArrayList<Row>();
        rowList.add(this.getSlsSo1().getCurrentRow());
        MandatoryAttCheck ck =
            new MandatoryAttCheck(this, new StringBuilder(EbizParams.GLBL_APP_CLD_ID()),
                                  new StringBuilder(EbizParams.GLBL_APP_USR_ORG()), EbizParams.GLBL_APP_SERV_LOC());

        try {
            b = ck.isMandatoryAttributesEntered(21503, new StringBuilder("SlsSo1"), new StringBuilder("SLS$SO"), null,
                                                rowList);
            System.out.println("Returned :::::::::::::::::::::::::::::::: " + b);
        } catch (Exception e) {
            e.printStackTrace();
        }

        if (b) {
            ViewObjectImpl impl = this.getSlsSoItm1();
            RowSetIterator itr = impl.createRowSetIterator(null);
            //Number n = StaticValue.NUMBER_ZERO;
            while (itr.hasNext()) {
                Row next = itr.next();
                Object itmAmtSpO = next.getAttribute("ItmAmtSp");
                Object itmRateO = next.getAttribute("ItmRate");
                Object itmIdO = next.getAttribute("ItmId");
                Number itmAmtSp = (itmAmtSpO == null ? StaticValue.NUMBER_ZERO : (Number) itmAmtSpO);
                Number itmRate = (itmRateO == null ? StaticValue.NUMBER_ZERO : (Number) itmRateO);
                if (itmIdO == null) {
                    System.out.println(" ::::::::::::::::::: itm id " + itmIdO);
                    FacesMessage msg =
                        new FacesMessage("<html><body>Item is not selected '<b style='color:red'>" +
                                         "</b> Please select Item for one of the Item Details.</body></html>");
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                    itr.closeRowSetIterator();
                    b = false;
                    break;
                }


                if (itmRate.compareTo(StaticValue.NUMBER_ZERO) == 0) {
                    FacesMessage msg =
                        new FacesMessage("<html><body>Item Rate for Item id '<b style='color:red'>" +
                                         next.getAttribute("ItmId") +
                                         "</b>' is <b>0.00</b>. Please Define Price for the given Item.</body></html>");
                    msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                    itr.closeRowSetIterator();
                    b = false;
                    break;
                } else if (itmAmtSp.compareTo(StaticValue.NUMBER_ZERO) < 0) {
                    StringBuilder msg = new StringBuilder("Total Item Amount for Item Id : ");
                    msg.append(next.getAttribute("ItmId").toString());
                    msg.append(" is : ");
                    msg.append(itmAmtSp);
                    msg.append(" which is less than zero. </br></br>Please check the entries in Sales Order.");
                    ADFModelUtils.showFormattedFacesMessage("Item Total Amount cannot be less than zero ! ",
                                                            msg.toString(), FacesMessage.SEVERITY_ERROR);
                    b = false;
                    break;
                }
            }
            itr.closeRowSetIterator();
        }
        return b;
    }

    /**
     * Check if po exists or not.
     * @return
     */
    public boolean doPoExist() {
        String DocId = "";
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            DocId = (String) currentRow.getAttribute("DocId");
        }
        String d =
            isPoCreated(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(),
                        DocId);
        System.out.println(d + " the return of is po Created");
        if (d.equalsIgnoreCase("N")) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * Container's getter for LovItmNmVo1.
     * @return LovItmNmVo1
     */
    public ViewObjectImpl getLovItmNmVo1() {
        return (ViewObjectImpl) findViewObject("LovItmNmVo1");
    }

    /**
     * Method to check if quotId is null.
     * @return
     */
    public boolean isQuotIdNull() {
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("QuotId") != null) {
                if (currentRow.getAttribute("QuotId").toString().equals("")) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Container's getter for SlsSoTrVOForOrdrWiseTaxInsertion.
     * @return SlsSoTrVOForOrdrWiseTaxInsertion
     */
    public ViewObjectImpl getSlsSoTrVOForOrdrWiseTaxInsertion() {
        return (ViewObjectImpl) findViewObject("SlsSoTrVOForOrdrWiseTaxInsertion");
    }

    /**
     * Container's getter for SlsSoTrLinesVO1.
     * @return SlsSoTrLinesVO1
     */
    public ViewObjectImpl getSlsSoTrLinesVO1() {
        return (ViewObjectImpl) findViewObject("SlsSoTrLinesVO1");
    }

    /**
     * Container's getter for SlsSoTrVO2.
     * @return SlsSoTrVO2
     */
    public ViewObjectImpl getSlsSoTrVO2() {
        return (ViewObjectImpl) findViewObject("SlsSoTrVO2");
    }

    /**
     * Container's getter for SlsSoTOSlsSoTrVL2.
     * @return SlsSoTOSlsSoTrVL2
     */
    public ViewLinkImpl getSlsSoTOSlsSoTrVL2() {
        return (ViewLinkImpl) findViewLink("SlsSoTOSlsSoTrVL2");
    }

    /**
     * Container's getter for SlsSoTrLinesVO2.
     * @return SlsSoTrLinesVO2
     */
    public ViewObjectImpl getSlsSoTrLinesVO2() {
        return (ViewObjectImpl) findViewObject("SlsSoTrLinesVO2");
    }

    /**
     * Container's getter for SlsSoTrTOSlsSoTrLines1.
     * @return SlsSoTrTOSlsSoTrLines1
     */
    public ViewLinkImpl getSlsSoTrTOSlsSoTrLines1() {
        return (ViewLinkImpl) findViewLink("SlsSoTrTOSlsSoTrLines1");
    }

    public void changeQuotationStatus() {
        ViewObjectImpl impl = this.getSlsSo1();
        if (impl != null && impl.getCurrentRow() != null) {
            //system.out.println("Found the current row..............");
            SlsSoVORowImpl currentRow = (SlsSoVORowImpl) impl.getCurrentRow();
            Integer basis = currentRow.getSoBasis();
            if (basis == 390) {
                String id = currentRow.getQuotId();
                String cldId = currentRow.getCldId();
                Integer slocId = currentRow.getSlocId();
                String orgId = currentRow.getOrgId();

                if (id != null) {
                    try {
                        //   System.out.println("Values which are passing to the function:  " + id + "  " + cldId + " " +
                        //                      slocId + " " + orgId);
                        BigDecimal v =
                            (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_UPDATE_QUOT_STAT(?,?,?,?,?)", new Object[] {
                                                            cldId, slocId, orgId, id, "A"
                        });
                        int flag = v.intValue();
                        //system.out.println("value of function is:  " + flag);
                        if (flag == -1) {
                            FacesMessage msg =
                                new FacesMessage("There is an error in calling the function SLS.FN_UPDATE_QUOT_STAT");
                            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, msg);
                        }
                    } catch (Exception e) {
                        FacesMessage msg =
                            new FacesMessage("There is an error in calling the function SLS.FN_UPDATE_QUOT_STAT");
                        msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, msg);
                    }
                    currentRow.getquotationLovVO1().executeQuery();
                }
            }
        }
    }

    /**
     * Check whether mandatory fields entered in header Part or not.
     * @return
     */

    public Integer chkSlsSo() {
        Integer retval = 0;
        //system.out.println("Inside chkSlsSo");

        Row currentRow = this.getSlsSo1().getCurrentRow();
        //system.out.println("Current row is " + currentRow);
        Object dt = currentRow.getAttribute("DocDt");
        Object contractType = currentRow.getAttribute("SoContractBasis");
        Object contractValue = currentRow.getAttribute("ContractValueTrans");
        Object customer = currentRow.getAttribute("EoNmTrans");
        Object currency = currentRow.getAttribute("CurrDescTrans");
        Object address = currentRow.getAttribute("AddressTrans");
        Object ship = currentRow.getAttribute("ShipAdds");

        // System.out.println(dt + " " + contractType + " " + contractValue + " " + currency + " " + customer + " " +
        //                    address);
        if (dt != null && dt.toString().length() > 0) {
            if (contractType != null && contractType.toString().length() > 0) {
                if (customer != null && customer.toString().length() > 0) {
                    if (currency != null && currency.toString().length() > 0) {
                        if ((address != null && address.toString().length() > 0) ||
                            (ship != null && ship.toString().length() > 0)) {
                            if (contractValue != null && contractValue.toString().length() > 0) {
                                if (contractType.toString().equalsIgnoreCase("487")) {
                                    currentRow.setAttribute("SoContractQty", contractValue);
                                } else if (contractType.toString().equalsIgnoreCase("488")) {
                                    currentRow.setAttribute("SoContractPrice", contractValue);
                                } else if (contractType.toString().equalsIgnoreCase("489")) {
                                    currentRow.setAttribute("SoContractValue", contractValue);
                                }
                            } else {
                                retval = 6;
                            }
                        } else {
                            retval = 5;
                        }
                    } else {
                        retval = 4;
                    }
                } else {
                    retval = 3;
                }
            } else {
                retval = 2;
            }
        } else {
            retval = 1;
        }
        //system.out.println("Return value is " + retval);
        return retval;
    }

    public void setpolicy() {
        String i = "";
        Object plcId = resolvElO("#{pageFlowScope.PRICE_POLICY_ID}");
        _log.info("Policy id : " + plcId);
        if (plcId != null) {
            i = plcId.toString();
        }
        if (!i.equals("")) {
            ViewObjectImpl impl = this.getSlsSo1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                currentRow.setAttribute("EoPricePlc", i);
                _log.info("Setting policy Id to : " + i);
            }
        }
    }

    /**
     * @return
     */
    private StringBuffer policyApp = null;

    /**
     * @return
     */
    public StringBuffer checkPolicyApplied() {
        if (policyApp == null) {
            try {
                String policyPrice = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                                 EbizParams.GLBL_APP_CLD_ID(),
                                                                 EbizParams.GLBL_APP_SERV_LOC(),
                                                                 EbizParams.GLBL_APP_USR_ORG(), "USE_PRICE_PLC"
                });

                if (policyPrice == null || policyPrice.equals("")) {
                    policyApp = new StringBuffer("N");
                } else {
                    policyApp = new StringBuffer(policyPrice.toString());
                }

            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }

        _log.info("Policy Applied : " + policyApp);
        return policyApp;
    }

    /**
     * @param colName
     * @return
     */
    public StringBuffer checkforProfileValues(StringBuffer colName) {
        return SoAmHelper.checkforProfileValues(this, colName);
    }

    /**
     * @return
     */
    public StringBuffer checkShowAtt() {
        return SoAmHelper.checkforProfileValues(this, new StringBuffer("SHOW_ITM_ATT"));
    }

    /**
     * Check Whether entity belongs to customer or prospect or not.
     * @param eoName
     * @return
     */

    public Integer chkEntityType(String eoName) {
        Integer retVal = 68;
        //System.out.println("Came in validator : EoName is " + eoName);
        if (eoName != null) {
            //Object eoNm = eoName;
            ViewObjectImpl eoNmVo = this.getLovEoTypeFromEoNmVO1();
            eoNmVo.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            eoNmVo.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            eoNmVo.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            eoNmVo.setNamedWhereClauseParam("EoNameBind", eoName);
            eoNmVo.setNamedWhereClauseParam("EoIdBind", null);
            eoNmVo.setNamedWhereClauseParam("BindEoType", null);
            eoNmVo.executeQuery();
            Row[] allRowsInRange = eoNmVo.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                Object EoType = allRowsInRange[0].getAttribute("EoType");
                retVal = (Integer) EoType;;
                getSlsSo1().getCurrentRow().setAttribute("EoCatgId", allRowsInRange[0].getAttribute("CatgId"));
            }
        }
        return retVal;
    }
    
    public void setEoIdAfterSettingCatgId(){
        Row currentRow = getSlsSo1().getCurrentRow();
        Object eoId = currentRow.getAttribute("EoId");
        
    }
    /**
     * Following code is used to convert prospect to customer.
     * @return
     */

    public Integer chngProsToCust() {
        Integer retVal = 0;

        try {
            Row currentRow = this.getSlsSo1().getCurrentRow();
            Integer eoId = (Integer) currentRow.getAttribute("EoId");
            //  System.out.println("Eo id is " + eoId);
            if (eoId != null && this.getSlsSo1().getCurrentRow().getAttribute("CategoryTrans") != null) {

                Integer val = (Integer) callStoredFunction(Types.INTEGER, "APP.fn_change_eo_type(?,?,?,?,?,?,?)", new Object[] {
                                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                           eoId, 68,
                                                           this.getSlsSo1().getCurrentRow().getAttribute("CategoryTrans")
                });

                //  System.out.println("Value is " + val);
            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }

        return retVal;
    }

    //    /**
    //     * Set Address for the prospect which is converted to Customer.
    //     */
    //    public void setAddressForCust() {
    //        String addsId = ADFModelUtils.resolvEl("#{pageFlowScope.Adds_Id}").toString();
    //        String addsNm = ADFModelUtils.resolvEl("#{pageFlowScope.Ret_Adds_Id}").toString();
    //        getDBTransaction().postChanges();
    //        // System.out.println(addsId + " ==== Address ID");
    //        if (addsId != null) {
    //            ADFModelUtils.callFunction(this, new StringBuilder("app.FN_INS_EO_ADDS(?,?,?,?,?,?,?)"), new Object[] {
    //                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
    //                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
    //                                       getSlsSo1().getCurrentRow().getAttribute("EoId"), addsId,
    //                                       EbizParams.GLBL_APP_USR()
    //            }, Types.NUMERIC);
    //        }
    //        this.getLovEoAdds1().executeQuery();
    //        //System.out.println(getSlsSo1().getCurrentRow().getAttribute("EoId") + " ==== The Prospect");
    //        if (addsId != null && addsNm != null) {
    //            this.getSlsSo1().getCurrentRow().setAttribute("custAddressTrans", addsId);
    //            this.getSlsSo1().getCurrentRow().setAttribute("ShipAdds", addsId);
    //            this.getSlsSo1().getCurrentRow().setAttribute("AddressTrans", addsNm);
    //            this.shipadds = addsId;
    //        }
    //    }

    public void prospectAddSetUp() {
        // System.out.println("Inside return value--------------------------- >>");
        String addsId = ADFModelUtils.resolvEl("#{pageFlowScope.Adds_Id}").toString();
        String addsNm = ADFModelUtils.resolvEl("#{pageFlowScope.Ret_Adds_Id}").toString();
        getDBTransaction().postChanges();
        // System.out.println(addsId + " ==== Address ID");
        if (addsId != null) {
            ADFModelUtils.callFunction(this, new StringBuilder("app.FN_INS_EO_ADDS(?,?,?,?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       getSlsSo1().getCurrentRow().getAttribute("EoId"), addsId,
                                       EbizParams.GLBL_APP_USR()
            }, Types.NUMERIC);
        }
        this.getLovEoAdds1().executeQuery();
        // System.out.println(getSlsSo1().getCurrentRow().getAttribute("EoId") + " ==== The Prospect");
        if (addsId != null && addsNm != null) {
            this.getSlsSo1().getCurrentRow().setAttribute("custAddressTrans", addsId);
            this.getSlsSo1().getCurrentRow().setAttribute("ShipAdds", addsId);
            this.getSlsSo1().getCurrentRow().setAttribute("AddressTrans", addsNm);
            //this.shipadds = addsId;
        }
    }

    /**
     * Container's getter for LovEoAdds1.
     * @return LovEoAdds1
     */
    public ViewObjectImpl getLovEoAdds1() {
        return (ViewObjectImpl) findViewObject("LovEoAdds1");
    }

    //    /**
    //     * @param shipadds
    //     */
    //    public void setShipadds(String shipadds) {
    //        this.shipadds = shipadds;
    //    }
    //
    //    /**
    //     * @return
    //     */
    //    public String getShipadds() {
    //        return shipadds;
    //    }

    /**
     * Set every value to null.
     */
    public void setSlsSoToNull() {
        ViewObjectImpl impl = this.getSlsSo1();
        SlsSoVORowImpl currentRow = (SlsSoVORowImpl)impl.getCurrentRow();
        if (currentRow != null) {
            currentRow.updateValueOnEOChange(null);
            currentRow.setAttribute("EoId", null);
            currentRow.setAttribute("EoNmTrans", null);
            currentRow.setAttribute("CurrIdSp", null);
            currentRow.setAttribute("CurrConvFctr", null);
            currentRow.setAttribute("CoaId", null);
            currentRow.setAttribute("ShipAdds", null);
        }
    }

    /**
     * Container's getter for LovEoTypeFromEoNmVO1.
     * @return LovEoTypeFromEoNmVO1
     */
    public ViewObjectImpl getLovEoTypeFromEoNmVO1() {
        return (ViewObjectImpl) findViewObject("LovEoTypeFromEoNmVO1");
    }


    /**
     * @return
     */
    public Boolean checkSchemeAppliedOrNot() {
        Boolean c = false;
        StringBuffer ck = new StringBuffer("");
        try {
            String policyPrice = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                             EbizParams.GLBL_APP_CLD_ID(),
                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                             EbizParams.GLBL_APP_USR_ORG(), "USE_SCHEME"
            });
            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }
            if (ck.toString().equalsIgnoreCase("Y")) {
                c = true;
            } else {
                c = false;
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return c;
    }

    /**
     * Container's getter for SlsSoPaymntVO1.
     * @return SlsSoPaymntVO1
     */
    public ViewObjectImpl getSlsSoPaymntVO1() {
        return (ViewObjectImpl) findViewObject("SlsSoPaymntVO1");
    }

    /**
     * Container's getter for SOToPaymntVL1.
     * @return SOToPaymntVL1
     */
    public ViewLinkImpl getSOToPaymntVL1() {
        return (ViewLinkImpl) findViewLink("SOToPaymntVL1");
    }

    /**
     * Container's getter for TempPaymntVO1.
     * @return TempPaymntVO1
     */
    public ViewObjectImpl getTempPaymntVO1() {
        return (ViewObjectImpl) findViewObject("TempPaymntVO1");
    }

    public void addPaymnt() {
        getSlsSoItm1().executeQuery();
        ViewObjectImpl impl = this.getTempPaymntVO1();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        if (allRowsInRange.length == 1) {
            Object currIdSp_ = allRowsInRange[0].getAttribute("PaymntCurrIdTrans");
            Integer currIdSp = (currIdSp_ == null ? 0 : (Integer) currIdSp_);

            Object payMod_ = allRowsInRange[0].getAttribute("PaymntModTrans");
            Integer payMod = (payMod_ == null ? 0 : (Integer) payMod_);

            Object amt_ = allRowsInRange[0].getAttribute("PaymntAmtTrans");
            Number amt = (amt_ == null ? StaticValue.NUMBER_ZERO : (Number) amt_);

            if (payMod == 0) {
                FacesMessage message = new FacesMessage("", "Please select Payment Mode !");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else if (currIdSp == 0) {
                FacesMessage message = new FacesMessage("", "Please select Currency !");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else if (amt.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                FacesMessage message = new FacesMessage("", "Payment Amount must be greater than zero !");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else {
                ViewObjectImpl o1 = this.getSlsSoPaymntVO1();
                RowSetIterator itr = o1.createRowSetIterator(null);
                Integer srNo = 0;
                while (itr.hasNext()) {
                    Row next = itr.next();
                    Integer attribute = (Integer) next.getAttribute("SrNo");
                    if (attribute >= srNo) {
                        srNo = attribute;
                    }
                }
                itr.closeRowSetIterator();
                Row pymntRow = o1.createRow();
                o1.insertRow(pymntRow);
                pymntRow.setAttribute("SrNo", srNo + 1);


                Object bankAccNo_ = allRowsInRange[0].getAttribute("PaymntBankAccNoTrans");
                StringBuffer bankAccNo =
                    (bankAccNo_ == null ? new StringBuffer("") : new StringBuffer(bankAccNo_.toString()));
                pymntRow.setAttribute("BankAcNo", bankAccNo.toString());
                Object bankAddsId_ = allRowsInRange[0].getAttribute("PaymntAddsTrans");
                StringBuffer bankAddsId =
                    (bankAddsId_ == null ? new StringBuffer("") : new StringBuffer(bankAddsId_.toString()));
                pymntRow.setAttribute("AddsId", bankAddsId.toString());

                Object currConv_ = allRowsInRange[0].getAttribute("PaymntCurrConvTrans");
                Number currConv = (currConv_ == null ? StaticValue.NUMBER_ZERO : (Number) currConv_);
                pymntRow.setAttribute("CurrConvFctr", currConv);
                Object currIdBs_ = allRowsInRange[0].getAttribute("PaymntCurrIdBsTrans");
                Integer currIdBs = (currIdBs_ == null ? 0 : (Integer) currIdBs_);
                pymntRow.setAttribute("CurrIdBs", currIdBs);
                pymntRow.setAttribute("CurrIdSp", currIdSp);

                pymntRow.setAttribute("PayMode", payMod);

                Object paymntDt_ = allRowsInRange[0].getAttribute("PaymntDtTrans");
                Timestamp paymntDt = (paymntDt_ == null ? new Timestamp() : (Timestamp) paymntDt_);
                pymntRow.setAttribute("PayTypeDt", paymntDt);

                Object paymntTypNo_ = allRowsInRange[0].getAttribute("PaymntTypNoTrans");
                StringBuffer paymntTypNo =
                    (paymntTypNo_ == null ? new StringBuffer("") : new StringBuffer(paymntTypNo_.toString()));
                pymntRow.setAttribute("PayTypeNo", paymntTypNo);

                Object remrks_ = allRowsInRange[0].getAttribute("PaymntRemarksTrans");
                StringBuffer remrks = (remrks_ == null ? new StringBuffer("") : new StringBuffer(remrks_.toString()));
                pymntRow.setAttribute("Remarks", remrks);

                pymntRow.setAttribute("TotAmtSp", amt);

                amt = amt.multiply(currConv);
                Integer amt_no = EbizParams.GLBL_AMT_DIGIT();
                try {
                    amt = (Number) amt.round(amt_no);
                } catch (Exception e) {
                }
                pymntRow.setAttribute("TotAmtBs", amt);
                _log.info("TotAmtSp  : " + amt + "TotAmtBs : " + amt);

                impl.executeQuery();
                o1.executeQuery();

            }
        }
    }

    /**
     * To check if the payment amount is valid.
     * @param amt
     * @return
     */
    public boolean isPaymntAmtValid(Number amt) {
        Boolean c = false;
        if (amt != null) {
            Number soBsAmt = StaticValue.NUMBER_ZERO;
            ViewObjectImpl so = this.getSlsSo1();
            Row currentRow = so.getCurrentRow();
            if (currentRow != null) {
                soBsAmt = (Number) currentRow.getAttribute("TotAmtBs");
                soBsAmt = (Number) soBsAmt.round(EbizParams.GLBL_AMT_DIGIT());
            }

            Number pmntTotAmtBs = StaticValue.NUMBER_ZERO;
            ViewObjectImpl impl = this.getSlsSoPaymntVO1();
            RowSetIterator itr = impl.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                pmntTotAmtBs = pmntTotAmtBs.add((Number) next.getAttribute("TotAmtBs"));
            }
            itr.closeRowSetIterator();
            Number currConv = new Number(1);
            ViewObjectImpl o1 = this.getTempPaymntVO1();
            Row row = o1.getCurrentRow();
            if (row != null) {
                if (row.getAttribute("PaymntCurrConvTrans") != null) {
                    currConv = (Number) row.getAttribute("PaymntCurrConvTrans");
                }
            }

            pmntTotAmtBs = pmntTotAmtBs.add((Number) amt.multiply(currConv));
            pmntTotAmtBs = (Number) pmntTotAmtBs.round(EbizParams.GLBL_AMT_DIGIT());

            Number diff = (Number) pmntTotAmtBs.minus(soBsAmt);

            // if (pmntTotAmtBs.compareTo(soBsAmt) == 1) {
            if (diff.intValue() >= 1) {
                c = false;
            } else {
                c = true;
            }
            _log.info("Amt passed is :" + amt + " SoAmtBs : " + soBsAmt + " TotalPaymentAmount : " + pmntTotAmtBs +
                      " ConvFctr : " + currConv);
        }
        return c;
    }

    /**
     * @param CurrId
     */
    public void fetchandSetRemainingPaymntAmt(Integer CurrId) {
        Number currConv = StaticValue.NUMBER_ZERO;
        ViewObjectImpl impl = this.getTempPaymntVO1();
        TempPaymntVORowImpl row = (TempPaymntVORowImpl) impl.getCurrentRow();
        RowSet currId1 = row.getLovCurrId1();
        Row[] filteredRows = currId1.getFilteredRows("CcCurrIdTxn", CurrId);
        if (filteredRows.length > 0) {
            if (filteredRows[0].getAttribute("CcSell") != null) {
                currConv = (Number) filteredRows[0].getAttribute("CcSell");
            }
        }
        _log.info("CurrConv is : " + currConv + " for currId : " + CurrId);


        //Number n = StaticValue.NUMBER_ZERO;
        Number soBsAmt = StaticValue.NUMBER_ZERO;
        ViewObjectImpl so = this.getSlsSo1();
        Row currentRow = so.getCurrentRow();
        row.setPaymntAmtTrans(StaticValue.NUMBER_ZERO);

        if (currentRow != null) {
            soBsAmt = (Number) currentRow.getAttribute("TotAmtBs");
        }

        Number paidAmt = StaticValue.NUMBER_ZERO;
        ViewObjectImpl o1 = this.getSlsSoPaymntVO1();
        RowSetIterator itr = o1.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            if (r.getAttribute("TotAmtBs") != null) {
                paidAmt = paidAmt.add((Number) r.getAttribute("TotAmtBs"));
            }

        }
        itr.closeRowSetIterator();
        _log.info("TotalSoAmtBS : " + soBsAmt + " PaidAmt  : " + paidAmt);
        Number remain = StaticValue.NUMBER_ZERO;
        if (soBsAmt.compareTo(paidAmt) == 1) {
            remain = soBsAmt.subtract(paidAmt);
            remain = remain.divide(currConv);
            Integer amt_no = EbizParams.GLBL_AMT_DIGIT();
            try {
                remain = (Number) remain.round(amt_no);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        row.setPaymntAmtTrans(remain);
        _log.info("Remaining : " + remain);
    }

    public void delPaymntDtl() {
        ViewObjectImpl impl = this.getSlsSoPaymntVO1();
        Row currentRow = impl.getCurrentRow();
        if (currentRow != null) {
            currentRow.remove();
        }
    }

    /**
     * Check for EoType,
     * Name of the method is wrongly defined.
     * @return
     */
    public Boolean checkIfCoaExistsForSelectedEo() {
        Boolean b = false;

        if (this.getSlsSoItm1().getEstimatedRowCount() == 0) {
            //ViewObjectImpl eoNmVO1 = getLovEoTypeFromEoNmVO1();
            Row soRow = this.getSlsSo1().getCurrentRow();
            Integer ordType = (Integer) soRow.getAttribute("OrderType");
            System.out.println(soRow.getAttribute("EoId") + " <<<<< === = The Customer for cash sales order");
            getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("EoNameBind", null);
            getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("EoIdBind", soRow.getAttribute("EoId"));
            getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("BindEoType", 68);

            getLovEoTypeFromEoNmVO1().executeQuery();
            System.out.println("length of row after filter === >>>>> " +
                               getLovEoTypeFromEoNmVO1().getEstimatedRowCount());
            getLovEoTypeFromEoNmVO1().setRangeSize(-1);
            Row x[] = getLovEoTypeFromEoNmVO1().getAllRowsInRange();
            System.out.println("length of row after filter ===>>> " + x.length);
            if (x.length > 0) {
                b = true;
            } else {
                b = false;
                ADFModelUtils.showFormattedFacesMessage("Customer have not been selected / Selected Entity is Prospect !",
                                                        "Sales Order cannot be made for a Prospect.<br/></br>Please Convert the Selected Entity to Customer before Adding Items to Currrent Sale Order",
                                                        FacesMessage.SEVERITY_WARN);
            }
            //309 = rush order, 310 = cash sales order
            if (b && (ordType.compareTo(309) == 0 || ordType.compareTo(310) == 0 || ordType.compareTo(892) == 0)) {


                if (soRow.getAttribute("EoId") != null) {
                    Integer coaIdFrmEoId =
                        EbizParamsAPPUtils.getCoaIdFrmEoId(this, (Integer) soRow.getAttribute("EoId"));
                    if (coaIdFrmEoId == -1) {
                        b = false;
                        ADFModelUtils.showFormattedFacesMessage("Customer have not been selected / Selected Entity is Prospect !",
                                                                "Sales Order cannot be made for a Prospect.<br/></br>Please Convert the Selected Entity to Customer before Adding Items to Currrent Sale Order</br>In Case of Rush order or Cash Sales Order, Please create COA for the Customer.",
                                                                FacesMessage.SEVERITY_WARN);
                    } else {
                        b = true;
                    }
                }
            }

            /* StringBuffer EoNm = new StringBuffer("");
            if (soRow != null) {
                if (soRow.getAttribute("EoId") != null) {
                    EoNm = new StringBuffer(soRow.getAttribute("EoNmTrans").toString());
                }
            }
            ViewObjectImpl eoNmVO1 = this.getLovEoTypeFromEoNmVO1();
            eoNmVO1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            eoNmVO1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            eoNmVO1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            eoNmVO1.setNamedWhereClauseParam("EoNameBind", EoNm.toString());
            eoNmVO1.setNamedWhereClauseParam("EoIdBind", null);
            eoNmVO1.executeQuery();

            Row[] allRowsInRange = eoNmVO1.getAllRowsInRange();
            for (Row r : allRowsInRange) {
                //_log.info("COA ID IS : "+r.getAttribute("CoaId"));
                Object attribute = r.getAttribute("EoType");
                if (attribute != null) {
                    if (((Integer) attribute).equals(68)) {
                        b = true;
                    } else {
                        b = false;
                    }

                } else {
                    b = false;
                }
                break;
            } */
        } else {
            b = true;
        }
        resetEoTypeVo();
        //_log.info("B: "+b);
        return b;
    }


    public void resetEoTypeVo() {
        getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("SlocIdBind", null);
        getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("HoOrgIdBind", null);
        getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("EoNameBind", null);
        getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("EoIdBind", null);
        getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("CldIdBind", null);
        getLovEoTypeFromEoNmVO1().setNamedWhereClauseParam("BindEoType", null);
        getLovEoTypeFromEoNmVO1().executeQuery();
    }

    /**
     * @return
     */
    public StringBuffer checkRefOrgApplied() {
        StringBuffer ck = new StringBuffer("");
        try {
            String refOrg = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                        EbizParams.GLBL_APP_USR_ORG(), "USE_DOC_ORIGIN"
            });

            if (refOrg == null || refOrg.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(refOrg.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    /**
     * Method to get and set discount policy from discount policy matrix
     * @return
     */
    public Number getAndSetDiscountForItmFromPolicy() {
        Number n = StaticValue.NUMBER_ZERO;
        if (checkforProfileValues(new StringBuffer("USE_DISC_PLC")).toString().equals("Y")) {
            try {
                Row curRow = this.getSlsSo1().getCurrentRow();
                Row itmRow = this.getSlsSoItm1().getCurrentRow();
                if (itmRow != null && itmRow.getAttribute("ItmId") != null) {
                    Object itmIdO = itmRow.getAttribute("ItmId");
                    Object eoCatgO = curRow.getAttribute("EoCatgTrans");
                    Object itmGrpO = itmRow.getAttribute("ItmGrpIdTrans");
                    Object salesExecO = curRow.getAttribute("AssignedTo");
                    Object itmQtyO = itmRow.getAttribute("ItmQty");
                    Object itmRateO = itmRow.getAttribute("ItmRate");

                    Number itmRate = (itmRateO == null ? StaticValue.NUMBER_ZERO : (Number) itmRateO);
                    /*                     if (itmRate.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                       _log.info("Fetching ItemProce");
                       // itmRate =  getLatestItmPriceSobyItmId(itmIdO.toString());
                   } */
                    Number currRate =
                        (curRow.getAttribute("CurrConvFctr") == null ? new Number(1) :
                         (Number) curRow.getAttribute("CurrConvFctr"));
                    Number itmQty = (itmQtyO == null ? StaticValue.NUMBER_ZERO : (Number) itmQtyO);
                    Object val = callStoredFunction(Types.NUMERIC, "fn_sls_get_disc_plc_val(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                    EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), itmIdO,
                                                    curRow.getAttribute("EoId"), eoCatgO, itmGrpO, salesExecO, null,
                                                    itmQty, itmRate, currRate
                    });
                    n = StaticValue.NUMBER_ZERO;
                    if (val != null) {
                        n = new Number(val);
                        n = ADFBeanUtils.roundOff(EbizParams.GLBL_DISC_DIGIT(), n);
                    }
                    itmRow.setAttribute("ItmDiscTyp", "A");
                    itmRow.setAttribute("ItmDiscVal", n);
                    // System.out.println("AmtType : A,  AmtVal : " + n +
                    //                    " Amount in ItmDiscVal >>>>>>>>>>>>>>>>>>>>>>>>>>  " +
                    //                    itmRow.getAttribute("ItmDiscVal"));
                }
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return n;
    }

    /**
     * @return
     */
    public Boolean isAdvancePaymentConditionTrue() {

        Boolean b = true;
        StringBuffer soAdvUsed = checkforProfileValues(new StringBuffer("CHECK_SO_ADV"));
        _log.info("Use so Advance : " + soAdvUsed);

        ViewObjectImpl soVo = this.getSlsSo1();
        Row currentRow = soVo.getCurrentRow();
        Object ordrTypO = currentRow.getAttribute("OrderType");
        Integer ordrTyp = (ordrTypO == null ? null : (Integer) ordrTypO);
        _log.info("Order Type : " + ordrTyp);
        if (ordrTyp.equals(481) || ordrTyp.equals(311)) {

        } else if ("Y".equals(soAdvUsed.toString())) {
            Number currPaymntAmt = StaticValue.NUMBER_ZERO;
            ViewObjectImpl pymntVo = this.getSlsSoPaymntVO1();
            int i = pymntVo.getRangeSize();
            pymntVo.setRangeSize(-1);
            Row[] allRowsInRange = pymntVo.getAllRowsInRange();
            for (Row row : allRowsInRange) {
                currPaymntAmt = currPaymntAmt.add((Number) row.getAttribute("TotAmtBs"));
            }
            pymntVo.setRangeSize(i);

            //ViewObjectImpl soVo = this.getSlsSo1();
            Row currentSoRow = soVo.getCurrentRow();
            Number soAmt =
                (currentSoRow.getAttribute("TotAmtBs") == null ? StaticValue.NUMBER_ZERO :
                 (Number) currentSoRow.getAttribute("TotAmtBs"));
            StringBuffer amtTyp = checkforProfileValues(new StringBuffer("SO_ADV_TYPE"));
            Object amt = checkforProfileValuesObjectReturn(new StringBuffer("SO_ADV_VAL"));
            _log.info("So Advance Type : " + amtTyp);
            _log.info("So Advance Value : " + amt);
            Number adVal = StaticValue.NUMBER_ZERO;
            try {
                adVal = (amt == null ? StaticValue.NUMBER_ZERO : new Number(amt));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            Number reqPaymntAmt = StaticValue.NUMBER_ZERO;
            if ("P".equals(amtTyp.toString())) {
                reqPaymntAmt = soAmt.multiply(adVal).divide(new Number(100));
            } else if ("A".equals(amtTyp.toString())) {
                reqPaymntAmt = adVal;
            }
            _log.info("Advance needed : " + reqPaymntAmt + " Actual advance : " + currPaymntAmt + " Condition : " +
                      currPaymntAmt.compareTo(reqPaymntAmt));
            if (currPaymntAmt.compareTo(reqPaymntAmt) >= 0) {
                b = true;
            } else {
                b = false;
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><b><p style='color:red'>" +
                                      "Advance Payment condition is not met !" + "</p></b>");
                saveMsg.append("<ul>");
                saveMsg.append("<li>Minimum Advance needed to Save this Sales Order is : <span style='font-weight:bold;'>" +
                               reqPaymntAmt + "</span></li>");
                saveMsg.append("</ul>");
                saveMsg.append("<b>Please book the minimum payment amount to save the current sales order.");
                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext.getCurrentInstance().addMessage(null, msg);

            }
        }
        return b;
    }

    /**
     * @param colName
     * @return
     */
    public Object checkforProfileValuesObjectReturn(StringBuffer colName) {
        colName = (colName == null ? new StringBuffer("") : colName);
        Object obj = null;
        try {
            obj = callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                     EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                     EbizParams.GLBL_APP_USR_ORG(), colName.toString()
            });
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //_log.info(colName+" : "+ck);
        return obj;
    }

    /**
     * @param colName
     * @return
     */
    public Object checkforProfileValuesObjectReturnV(StringBuffer colName) {
        return SoAmHelper.checkforProfileValuesObjectReturnV(this, colName);
    }


    /**
     * @param policyId
     * @return
     */
    public Boolean insertPolicyEntry(StringBuffer policyId) {
        Boolean b = true;
        Object obj = null;
        ViewObjectImpl impl = this.getSlsSo1();
        Row soRow = impl.getCurrentRow();
        Object eoid = soRow.getAttribute("EoId");
        Integer eoId = (eoid == null ? -1 : (Integer) soRow.getAttribute("EoId"));
        // System.out.println("Came here : 1");
        if (eoId != -1 && policyId != null) {
            try {
                /* P_CLDID VARCHAR2,
                                                                P_SLOCID NUMBER,
                                                                P_HO_ORGID VARCHAR2,
                                                                P_EOID NUMBER,
                                                                P_PLCID VARCHAR2,
                                                                P_USRID NUMBER */

                obj = callStoredFunction(Types.NUMERIC, "APP.FN_INS_EO_PRICE_PLC(?,?,?,?,?,?)", new Object[] {
                                         EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                         EbizParams.GLBL_HO_ORG_ID(), eoId, policyId.toString(),
                                         EbizParams.GLBL_APP_USR()
                });
                //  System.out.println("Retudn : " + obj);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            BigDecimal r = (obj == null ? new BigDecimal(-1) : (BigDecimal) obj);
            if (r.compareTo(new BigDecimal(-1)) == 0) {
                b = false;
                soRow.setAttribute("EoPricePlc", null);
            }
        }
        return b;
    }

    /**
     * @param ItmId
     * @return
     */
    public Number getLatestItmPriceSobyItmId(String ItmId) {
        ViewObject slsSo = this.getSlsSo1();
        Row curRow = slsSo.getCurrentRow();
        Number itmPrice = StaticValue.NUMBER_ZERO;
        Object eoIdO = curRow.getAttribute("EoId");
        Object currIdO = curRow.getAttribute("CurrIdSp");
        Object currConvO = curRow.getAttribute("CurrConvFctr");
        Object docDtO = curRow.getAttribute("DocDt");
        Number currConv = (currConvO == null ? new Number(1) : (Number) currConvO);

        _log.info("Before function call Customer is-->" + curRow.getAttribute("EoId") + "and Item is-->" + ItmId);
        if (eoIdO != null && ItmId != null) {
            _log.info("Customer is-->" + eoIdO + "and Item is-->" + ItmId);
            if (checkPolicyApplied().toString().equals("Y")) {
                BigDecimal price = new BigDecimal(0);
                BigDecimal policyPrice =
                    (BigDecimal) ADFModelUtils.callFunction(this,
                                                            new StringBuilder("APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)"), new Object[] {
                                                            EbizParams.GLBL_APP_CLD_ID(),
                                                            EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                                                            EbizParams.GLBL_APP_USR_ORG(), eoIdO, ItmId, "SO"
                }, Types.NUMERIC);
                policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                if (policyPrice.compareTo(new BigDecimal(-2)) == 0 || policyPrice.compareTo(new BigDecimal(0)) == 0) {
                    price =
                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                        "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                        EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                                        eoIdO, ItmId, docDtO, EbizParams.GLBL_APP_USR(),
                                                        new Timestamp(System.currentTimeMillis()), currIdO, currConv
                    });
                    _log.info("Value from Function Rate--" + price);
                    try {
                        itmPrice = new Number(new Number(price).round(EbizParams.GLBL_AMT_DIGIT()));
                    } catch (SQLException e) {
                    }

                } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                    itmPrice = new Number(-3);
                } else {
                    price = policyPrice;
                    try {
                        itmPrice = new Number(new Number(price));
                        itmPrice = itmPrice.divide(currConv);
                        itmPrice = (Number) itmPrice.round(EbizParams.GLBL_AMT_DIGIT());
                    } catch (SQLException e) {
                    }
                }

            } else {
                _log.info("Price from EO Price.");
                BigDecimal price =
                    (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                    EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), eoIdO,
                                                    ItmId, docDtO, EbizParams.GLBL_APP_USR(),
                                                    new Timestamp(System.currentTimeMillis()), currIdO, currConv
                });
                _log.info("Value from Function Rate--" + price);
                try {
                    itmPrice = new Number(new Number(price).round(EbizParams.GLBL_AMT_DIGIT()));
                } catch (SQLException e) {
                }
            }
        }
        if (itmPrice.compareTo(-1) == 0) {
            itmPrice = StaticValue.NUMBER_ZERO;
        }
        Row currentRow = this.getSlsSoItm1().getCurrentRow();

        if (currentRow != null && itmPrice.compareTo(StaticValue.NUMBER_ZERO) >= 0) {
            currentRow.setAttribute("ItmRate", itmPrice);
        }
        _log.info("Latest Price for item is-->" + itmPrice);
        return itmPrice;
    }

    /**
     * @param itmId
     * @return
     */
    public String ValidateItmId(String itmId) {
        StringBuffer b = new StringBuffer("N");
        ViewObjectImpl impl = this.getSlsSoItm1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != impl.getCurrentRow() && next.getAttribute("ItmId").toString().equalsIgnoreCase(itmId)) {
                b = new StringBuffer("Y");
                break;
            }
        }
        /** Validation on Scheme Item, Commented as this is validation is not required  on 18 june-2015
        if (b.toString().equals("N")) {
            RowSetIterator schItr = this.getSlsSoItmSchVO2().createRowSetIterator(null);
            while (schItr.hasNext()) {
                Row row = schItr.next();
                //if (!row.equals(currentItmRow)) {
                Object itmIdO = row.getAttribute("ItmId");
                StringBuffer itmIdr = (itmIdO == null ? new StringBuffer("") : new StringBuffer(itmIdO.toString()));
                _log.info("Curr Itm Id : " + itmId + "Free Item Id : " + itmIdr);

                if (itmIdr.toString().equals(itmId.toString())) {
                    b = new StringBuffer("F");
                    break;
                }
                //}
            }
            schItr.closeRowSetIterator();
        }*/

        itr.closeRowSetIterator();
        System.out.println(b + " <<<==== value of item id validator");
        return b.toString();

    }

    /**
     * Container's getter for AppWfAttch1.
     * @return AppWfAttch1
     */
    public ViewObjectImpl getAppWfAttch1() {
        return (ViewObjectImpl) findViewObject("AppWfAttch1");
    }

    /**
     * Container's getter for SlsSoToAppWfAttchVl1.
     * @return SlsSoToAppWfAttchVl1
     */
    public ViewLinkImpl getSlsSoToAppWfAttchVl1() {
        return (ViewLinkImpl) findViewLink("SlsSoToAppWfAttchVl1");
    }

    public void setValueInRemarkVo() {
        ViewObjectImpl impl = this.getSlsSo1();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        //System.out.println("Remark -----3");
        if (allRowsInRange.length > 0) {
            Row soRow = allRowsInRange[0];
            SlsSoVORowImpl row = (SlsSoVORowImpl) soRow;
            ViewObjectImpl rmkVo = this.getWfRmk1();
            rmkVo.setNamedWhereClauseParam("CLD_ID", row.getCldId());
            rmkVo.setNamedWhereClauseParam("SLOC_ID", row.getSlocId());
            rmkVo.setNamedWhereClauseParam("ORG_ID", row.getOrgId());
            rmkVo.setNamedWhereClauseParam("TXN_DOC_ID", row.getDocId());
            rmkVo.executeQuery();

            ViewObjectImpl lovTnc1 = this.getLovTnc1();
            lovTnc1.setNamedWhereClauseParam("Cld_id_Bind", row.getCldId());
            lovTnc1.setNamedWhereClauseParam("Org_Id_Bind", row.getOrgId());
            lovTnc1.setNamedWhereClauseParam("Sloc_Id_Bind", row.getSlocId());
            lovTnc1.executeQuery();
            policyApp = null;
        }
    }

    /**
     * Container's getter for WfRmk1.
     * @return WfRmk1
     */
    public ViewObjectImpl getWfRmk1() {
        return (ViewObjectImpl) findViewObject("WfRmk1");
    }

    /**
     * Method to check if the workflow and user is valid or not.
     * @return
     */
    public Boolean isWorkFlowAndUserValid() {
        Boolean b = true;
        String no =
            getWfNo(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(), 21503);
        StringBuffer attachedWithTheDoc = (no == null ? null : new StringBuffer(no));
        if (attachedWithTheDoc == null) {
            FacesMessage message =
                new FacesMessage("WorkFlow is not Defined for this Document! Please define a WorkFlow !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            b = false;
        } else {
            //Integer usrLvl = getUsrLvl(sloc_Id, cld_Id, org_Id, usr_Id, attachedWithTheDoc.toString(), "21503");
            /*  if (usrLvl.equals(0)) {
                FacesMessage message =
                    new FacesMessage("Current User is not Assigned any level in the WorkfLow of this document. Please add user to Workflow !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                b = false;
            } */
        }
        return b;
    }

    public void executeDlvVws() {
        this.getDlvShdlView1().executeQuery();
        this.getRateContractVw1().executeQuery();
    }

    /**
     * Container's getter for LovAddsFrmAddsId1.
     * @return LovAddsFrmAddsId1
     */
    public ViewObjectImpl getLovAddsFrmAddsId1() {
        return (ViewObjectImpl) findViewObject("LovAddsFrmAddsId1");
    }

    /**
     * @return
     */
    public Boolean areEntriesValidForTaxApplication() {
        Boolean b = true;
        ViewObjectImpl itmVo = this.getSlsSoItm1();
        RowSetIterator itmItr = itmVo.createRowSetIterator(null);
        while (itmItr.hasNext()) {
            if (itmItr.next().getAttribute("ItmId") == null) {
                b = false;
                break;
            }
        }
        itmItr.closeRowSetIterator();
        return b;
    }

    /**
     * Container's getter for SlsSoItmLotVO.
     * @return SlsSoItmLotVO
     */
    public ViewObjectImpl getSlsSoItmLotVO() {
        return (ViewObjectImpl) findViewObject("SlsSoItmLotVO");
    }

    /**
     * Container's getter for SoToLovVL1.
     * @return SoToLovVL1
     */
    public ViewLinkImpl getSoToLovVL1() {
        return (ViewLinkImpl) findViewLink("SoToLovVL1");
    }

    /**
     * @return
     */
    public Boolean areValidationsOfSalesOrderValid() {
        Boolean b = true;
        SlsSoVORowImpl soRow = (SlsSoVORowImpl) this.getSlsSo1().getCurrentRow();
        Integer ordrTyp = (soRow.getOrderType() == null ? -1 : soRow.getOrderType());
        Integer eoId = (soRow.getEoId() == null ? -1 : soRow.getEoId());
        Integer currIdSp = (soRow.getCurrIdSp() == null ? -1 : soRow.getCurrIdSp());
        //Number convFctr = (soRow.getCurrConvFctr() == null ? new Number(-1) : soRow.getCurrConvFctr());
        Object shipAddsO = soRow.getShipAdds();
        String shipAdds = (shipAddsO == null ? "" : shipAddsO.toString());
        String eoPricePlc = (soRow.getEoPricePlc() == null ? "" : soRow.getEoPricePlc());

        if (ordrTyp == -1) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "Sales Order Type is Mandatory for Sales Order !" + "</p></b>");
            saveMsg.append("<b>Please select Sales Order Type.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (eoId.equals(-1)) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "Customer selection is Mandatory for Sales Order !" + "</p></b>");
            saveMsg.append("<b>Please select Customer for Sales Order.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (currIdSp.equals(-1)) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "Customer Currency is Mandatory for Sales Order !" + "</p></b>");
            saveMsg.append("<b>Please select Currency for Sales Order.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (shipAdds.equals("")) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "Shipment Address is Mandatory for Sales Order !" + "</p></b>");
            saveMsg.append("<b>Please select Shipment Address for Sales Order.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("Y".equals(checkPolicyApplied().toString()) && "".equals(eoPricePlc)) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "Price Policy is Mandatory for Sales Order !" + "</p></b>");
            saveMsg.append("<b>Your Organisation uses Customer Price Policy. Please select Customer Price Policy for selected Customer.");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        return b;
    }

    /**
     * Container's getter for LovOrderTyp1.
     * @return LovOrderTyp1
     */
    public ViewObjectImpl getLovOrderTyp1() {
        return (ViewObjectImpl) findViewObject("LovOrderTyp1");
    }


    public void setDefltTaxType() {
        StringBuffer defTyp = checkforProfileValues(new StringBuffer("DEF_TAX_TYPE"));
        if (!defTyp.toString().equals("")) {

        }
    }

    /**
     * @return
     */
    public Boolean isFinancialYearValid() {
        Boolean b = true;
        Integer fYidOrg = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
        if (fYidOrg.equals(-1)) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "Financial Year is not Open for this Organization on Current Date!" + "</p></b>");
            saveMsg.append("<b>Please Open Financial Year for Current Date before creating any document !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
            b = false;
        }
        if (!isWhExists()) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "Warehouse is not Defiend for this Organization on Current Date!" + "</p></b>");
            saveMsg.append("<b>Please Define Warehouse for this Organization before creating any document !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
            b = false;
        }
        return b;
    }

    /**
     * @param CldId
     * @param OrgId
     * @return
     */
    public Integer getFYId(String CldId, String OrgId) {
        return EbizParams.getFyIdOnCurrDtAndCurrOrg(this);
    }


    /**
     * @return
     */
    public Boolean exportToExcel() {
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFSheet sheet = workbook.createSheet("Sheet1");
        HSSFCellStyle cellStyle = workbook.createCellStyle();

        HSSFFont font = workbook.createFont();
        font.setFontName(HSSFFont.FONT_ARIAL);
        font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);
        cellStyle.setFont(font);


        HSSFRow createRow = sheet.createRow(0);
        for (int i = 0; i <= 5; i++) {
            Cell cell = createRow.createCell(i);
            // sheet.autoSizeColumn(i);
            // sheet.setColumnWidth(100+i,100);
            switch (i) {
            case 0:
                cell.setCellValue("ITM_ID");
                cell.setCellStyle(cellStyle);
                break;
            case 1:
                cell.setCellValue("ITM_UOM");
                cell.setCellStyle(cellStyle);
                break;
            case 2:
                cell.setCellValue("ITEM_PRICE");
                cell.setCellStyle(cellStyle);
                break;
            case 3:
                cell.setCellValue("QUANTITY");
                cell.setCellStyle(cellStyle);
                break;
            case 4:
                cell.setCellValue("DISCOUNT_TYPE");
                cell.setCellStyle(cellStyle);
                break;
            case 5:
                cell.setCellValue("DISCOUNT");
                cell.setCellStyle(cellStyle);
                break;
            }
        }
        ViewObjectImpl soItm = this.getSlsSoItm1();
        RowSetIterator itr = soItm.createRowSetIterator(null);
        int rownum = 1;
        while (itr.hasNext()) {
            Row next = itr.next();
            HSSFRow row = sheet.createRow(rownum++);
            Object ItmIdO = next.getAttribute("ItmId");
            Object ItmRateO = next.getAttribute("ItmRate");
            Object ItmUomO = next.getAttribute("ItmUom");
            Object ItmQtyO = next.getAttribute("ItmQty");
            Object ItmDiscTypO = next.getAttribute("ItmDiscTyp");
            Object ItmDiscValO = next.getAttribute("ItmDiscVal");


            StringBuilder ItmId = (ItmIdO == null ? new StringBuilder("") : new StringBuilder(ItmIdO.toString()));
            StringBuilder ItmRate =
                (ItmRateO == null ? new StringBuilder("0") : new StringBuilder(ItmRateO.toString()));
            StringBuilder ItmUom = (ItmUomO == null ? new StringBuilder("") : new StringBuilder(ItmUomO.toString()));
            StringBuilder ItmQty = (ItmQtyO == null ? new StringBuilder("0") : new StringBuilder(ItmQtyO.toString()));
            StringBuilder ItmDiscTyp =
                (ItmDiscTypO == null ? new StringBuilder("N") : new StringBuilder(ItmDiscTypO.toString()));
            StringBuilder ItmDiscVal =
                (ItmDiscValO == null ? new StringBuilder("0") : new StringBuilder(ItmDiscValO.toString()));

            Cell cell0 = row.createCell(0);
            Cell cell1 = row.createCell(1);
            Cell cell2 = row.createCell(2);
            Cell cell3 = row.createCell(3);
            Cell cell4 = row.createCell(4);
            Cell cell5 = row.createCell(5);
            cell0.setCellValue(ItmId.toString());
            cell1.setCellValue(ItmRate.toString());
            cell2.setCellValue(ItmUom.toString());
            cell3.setCellValue(ItmQty.toString());
            cell4.setCellValue(ItmDiscTyp.toString());
            cell5.setCellValue(ItmDiscVal.toString());
            //   System.out.println("Row added ___________________");

        }
        itr.closeRowSetIterator();

        //String path = "/home/amaan/AmanJunaidDocs/data.xls";
        //InputStream in;
        File file = new File("sample.xls");

        FileOutputStream out = null;
        try {
            out = new FileOutputStream(file);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
        try {
            workbook.write(out);
            out.flush();
            out.close();
        } catch (IOException e) {
            e.printStackTrace();
        }
        return true;
    }

    /**
     * @return
     */
    public Row[] getItemRows() {
        ViewObjectImpl soItm = this.getSlsSoItm1();
        int i = soItm.getRangeSize();
        soItm.setRangeSize(i);
        Row[] allRowsInRange = soItm.getAllRowsInRange();
        return allRowsInRange;
    }

    /**
     * @return
     */
    public StringBuilder getExportLink() {
        StringBuilder link = new StringBuilder("");
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            Object docIdO = currentRow.getAttribute("DocId");
            Object slocIdO = currentRow.getAttribute("SlocId");
            Object cldIdO = currentRow.getAttribute("CldId");
            Object orgIdO = currentRow.getAttribute("OrgId");
            Object hoOrgIdO = currentRow.getAttribute("HoOrgId");
            if (docIdO != null) {
                link.append("/exportservlet?path=");
                link.append(" DOC_ID ='" + docIdO + "' AND ORG_ID ='" + orgIdO + "' AND SLOC_ID = " + slocIdO +
                            " AND CLD_ID = '" + cldIdO + "' AND  HO_ORG_ID = '" + hoOrgIdO + "'");
            } else {
                link = null;
            }
        }
        System.out.println("In am Impl : " + link);
        return link;
    }

    /**
     * Get Price * Qty value for the purpose of Discount amount validations.
     * @return
     */
    public Number getTotPriceQtyAmount() {
        Number n = StaticValue.NUMBER_ZERO;
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        Number itmRate =
            (currentRow.getAttribute("ItmRate") == null ? StaticValue.NUMBER_ZERO :
             (Number) currentRow.getAttribute("ItmRate"));
        Number itmqty =
            (currentRow.getAttribute("ItmQty") == null ? StaticValue.NUMBER_ZERO :
             (Number) currentRow.getAttribute("ItmQty"));
        n = itmRate.multiply(itmqty);
        return n;
    }

    /**
     * Method to get suggested Item in AutoSuggest.
     * @param itmStr
     * @return
     */
    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        Row slsRow = this.getSlsSo1().getCurrentRow();
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        String smpl = "N";
        Integer catogry = 869;
        Integer eoId = null;
        Integer orderType = null;
        String servItm = null;
        if (currentRow != null) {
            Object sO = currentRow.getAttribute("AllowSampleItemTrans");
            smpl = (sO == null ? "N" : sO.toString());
            catogry = (Integer) currentRow.getAttribute("ItmBasis");
            eoId = (Integer) slsRow.getAttribute("EoId");
            orderType = (Integer) slsRow.getAttribute("OrderType");
        }
        if (orderType == 892 || orderType == 897) {
            servItm = "Y";
        } else if (orderType == 310 || orderType == 309) {
            servItm = "N";
        }
        ArrayList<String> h = new ArrayList<String>();
        ViewObjectImpl autoSuggestVO = this.getItmVoForAutoSuggestVO1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        autoSuggestVO.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        autoSuggestVO.setNamedWhereClauseParam("ItmNmBind", itmStr);
        autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.setNamedWhereClauseParam("BindEoId", eoId);
        autoSuggestVO.setNamedWhereClauseParam("bindcustitm", catogry);
        autoSuggestVO.setNamedWhereClauseParam("BindServFlg", servItm);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }

    /**
     * Container's getter for ItmVoForAutoSuggestVO1.
     * @return ItmVoForAutoSuggestVO1
     */
    public ViewObjectImpl getItmVoForAutoSuggestVO1() {
        return (ViewObjectImpl) findViewObject("ItmVoForAutoSuggestVO1");
    }

    //#{bindings.OrderType.inputValue==311 ? 'rateContract' : 'AllOrder'}

    /**
     * Method to check if Delivery Schedule Qty is Valid.
     *
     * @return
     */
    public Boolean isDeliveryQtyValidForDlvSchdl() {
        Boolean b = true;
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            Object ordrTypO = currentRow.getAttribute("OrderType");
            Integer ordrTyp = (ordrTypO == null ? -1 : (Integer) ordrTypO);
            _log.info("Sales Order Type : " + ordrTyp);
            if (ordrTyp.equals(-1)) {
                b = false;
                ADFModelUtils.showFacesMessage("",
                                               "There was some error in fetching order type ! Pease contact ESS !  ",
                                               FacesMessage.SEVERITY_FATAL, null);
            } else if (ordrTyp.equals(311)) {
                ViewObjectImpl contractVwVo = this.getRateContractVw1();
                RowSetIterator ctr = contractVwVo.createRowSetIterator(null);
                while (ctr.hasNext()) {
                    Row next = ctr.next();
                    StringBuilder chkBx =
                        (next.getAttribute("SelectItmChekBoxTrans") == null ? new StringBuilder("") :
                         new StringBuilder(next.getAttribute("SelectItmChekBoxTrans").toString()));
                    _log.info("RateContrat Selected : " + chkBx);
                    if ("Y".equals(chkBx.toString())) {
                        Object qtyO = next.getAttribute("SchdlQuantTrans");

                        Number qty = (qtyO == null ? StaticValue.NUMBER_ZERO : (Number) qtyO);
                        if (qty.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                            ADFModelUtils.showFormattedFacesMessage("Scheduled Qty should be greater than zero",
                                                                    "Delivery Schedule for Qty for Item " +
                                                                    next.getAttribute("ItmDescTrans") +
                                                                    " should be greate than zero !",
                                                                    FacesMessage.SEVERITY_ERROR);
                            b = false;
                            break;
                        }
                    }
                }
                ctr.closeRowSetIterator();
            } else {
                ViewObjectImpl delVwVo = this.getDlvShdlView1();
                RowSetIterator ctr = delVwVo.createRowSetIterator(null);
                while (ctr.hasNext()) {
                    Row next = ctr.next();
                    StringBuilder chkBx =
                        (next.getAttribute("SelectItmChekBoxTrans") == null ? new StringBuilder("") :
                         new StringBuilder(next.getAttribute("SelectItmChekBoxTrans").toString()));
                    _log.info("Normal Order Selected : " + chkBx);
                    if ("Y".equals(chkBx.toString())) {
                        Object qtyO = next.getAttribute("SchdlQuantTrans");
                        Number qty = (qtyO == null ? StaticValue.NUMBER_ZERO : (Number) qtyO);
                        if (qty.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                            ADFModelUtils.showFormattedFacesMessage("Scheduled Qty should be greater than zero",
                                                                    "Delivery Schedule for Qty for Item " +
                                                                    next.getAttribute("ItmDescTrans") +
                                                                    " should be greate than zero !",
                                                                    FacesMessage.SEVERITY_ERROR);
                            b = false;
                            break;
                        }
                    }
                }
                ctr.closeRowSetIterator();
            }
        }
        return b;
    }

    /**
     * Method to insert data into Sales Order Item from Excel.
     */
    public void insertSoItm() {
        Object el = this.resolvElO("#{pageFlowScope.DATA_LIST}");
        // System.out.println("El is: " + el);
        if (el != null) {
            //   System.out.println("el is not nulkl");
            List data = (List) el;
            ListIterator<List> iterator = data.listIterator();
            ViewObjectImpl impl = this.getSlsSoItm1();
            while (iterator.hasNext()) {
                List row = (List) iterator.next();
                Boolean flag = this.chekDuplicateItmId(row.get(6) == null ? null : row.get(6).toString());
                if (flag.equals(true)) {
                    continue;
                }
                Row createRow = impl.createRow();
                impl.insertRow(createRow);
                serialNumGen("SlsSoItm1");
                createRow.setAttribute("ItmId", row.get(6)); // 7 9
                createRow.setAttribute("ItmRate", row.get(7));
                createRow.setAttribute("ItmQty", row.get(9));
                setQtyBs((Number) createRow.getAttribute("ItmQty"));
                if (row.get(10) != null) {
                    if (row.get(10).toString().equalsIgnoreCase("A")) {
                        createRow.setAttribute("ItmDiscTyp", "A");
                        if (row.get(11) == null) {
                            createRow.setAttribute("ItmDiscVal", new Number(0));
                        } else {
                            createRow.setAttribute("ItmDiscVal", row.get(11));
                        }
                    } else if (row.get(10).toString().equalsIgnoreCase("P")) {
                        createRow.setAttribute("ItmDiscTyp", "P");
                        if (row.get(11) == null) {
                            createRow.setAttribute("ItmDiscVal", new Number(0));
                        } else {
                            createRow.setAttribute("ItmDiscVal", row.get(11));
                        }
                    } else {
                        createRow.setAttribute("ItmDiscTyp", "A");
                        createRow.setAttribute("ItmDiscVal", new Number(0));
                    }
                } else {
                    createRow.setAttribute("ItmDiscTyp", "A");
                    createRow.setAttribute("ItmDiscVal", new Number(0));
                }
                createRow.setAttribute("Remarks", row.get(14));
                //  System.out.println("909090  " + row.get(15));
                //System.out.println("909090  " + row.get(16));
                if (row.get(15) != null) {
                    if (row.get(15).toString().equalsIgnoreCase("A")) {
                        createRow.setAttribute("TlrncQtyType", "A");
                        if (row.get(16) == null) {
                            createRow.setAttribute("TlrncQtyVal", 0);
                        } else {
                            createRow.setAttribute("TlrncQtyVal", row.get(16));
                        }
                    } else if (row.get(15).toString().equalsIgnoreCase("P")) {
                        createRow.setAttribute("TlrncQtyType", "P");
                        if (row.get(16) == null) {
                            createRow.setAttribute("TlrncQtyVal", 0);
                        } else {
                            createRow.setAttribute("TlrncQtyVal", row.get(16));
                        }
                    } else {
                        createRow.setAttribute("TlrncQtyType", "A");
                        createRow.setAttribute("TlrncQtyVal", 0);
                    }
                } else {
                    createRow.setAttribute("TlrncQtyType", "A");
                    createRow.setAttribute("TlrncQtyVal", 0);
                }
            }
            //  System.out.println("Data :"+data);
            impl.executeQuery();
        }
    }

    /**
     * Method to check duplicate ItemId.
     * @param itmId
     * @return
     */
    public Boolean chekDuplicateItmId(String itmId) {
        if (itmId != null) {
            ViewObjectImpl impl = this.getSlsSoItm1();
            RowSetIterator itr = impl.createRowSetIterator(null);
            while (itr.hasNext()) {
                SlsSoItmVORowImpl next = (SlsSoItmVORowImpl) itr.next();
                if (next.getItmId().equalsIgnoreCase(itmId)) {
                    return true;
                }
            }
            itr.closeRowSetIterator();
        }
        return false;
    }

    public void calcAndSetAscblVal() {
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        if (currentRow != null) {
            currentRow.getAttribute("ItmAmtSpTrans");
            currentRow.getAttribute("ItmAmtSpTrans");
            currentRow.getAttribute("ItmAmtSpTrans");
            currentRow.getAttribute("ItmAmtSpTrans");
            currentRow.getAttribute("ItmAmtGsSp");
            currentRow.setAttribute("AsblAmtSp", currentRow.getAttribute("ItmAmtGsSp"));
            // System.out.println("Setting AsblAmtSp to :" + currentRow.getAttribute("ItmAmtGsSp"));
            //currentRow.setAttribute("AsblAmtSp", amt);
        }
    }

    /**
     * Container's getter for LovItmId1.
     * @return LovItmId1
     */
    public LovItmIdVOImpl getLovItmId1() {
        LovItmIdVOImpl itmVo = (LovItmIdVOImpl) findViewObject("LovItmId1");
        itmVo.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        itmVo.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        itmVo.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        itmVo.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        return itmVo;
        // return (ViewObjectImpl)findViewObject("LovItmId1");
    }

    /**
     * Container's getter for SlsSoFreeItmLot1.
     * @return SlsSoFreeItmLot1
     */
    public ViewObjectImpl getSlsSoFreeItmLotVO1() {
        return (ViewObjectImpl) findViewObject("SlsSoFreeItmLotVO1");
    }

    /**
     * Container's getter for SlsSoItmSchmTOSlsSoFreeItmLotVL1.
     * @return SlsSoItmSchmTOSlsSoFreeItmLotVL1
     */
    public ViewLinkImpl getSlsSoItmSchmTOSlsSoFreeItmLotVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmSchmTOSlsSoFreeItmLotVL1");
    }

    /**
     * Container's getter for SlsSoFreeItmBin1.
     * @return SlsSoFreeItmBin1
     */
    public ViewObjectImpl getSlsSoFreeItmBinVO1() {
        return (ViewObjectImpl) findViewObject("SlsSoFreeItmBinVO1");
    }

    /**
     * Container's getter for SlsSoItmSchmTOSlsSoFreeItmBinVL1.
     * @return SlsSoItmSchmTOSlsSoFreeItmBinVL1
     */
    public ViewLinkImpl getSlsSoItmSchmTOSlsSoFreeItmBinVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmSchmTOSlsSoFreeItmBinVL1");
    }

    /**
     * Container's getter for SlsSoFreeItmSr1.
     * @return SlsSoFreeItmSr1
     */
    public ViewObjectImpl getSlsSoFreeItmSrVO1() {
        return (ViewObjectImpl) findViewObject("SlsSoFreeItmSrVO1");
    }

    /**
     * Container's getter for SlsSoItmSchmTOSlsSoFreeItmSrVL1.
     * @return SlsSoItmSchmTOSlsSoFreeItmSrVL1
     */
    public ViewLinkImpl getSlsSoItmSchmTOSlsSoFreeItmSrVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmSchmTOSlsSoFreeItmSrVL1");
    }

    /**
     * Container's getter for ViewMmStkSummLotFree1.
     * @return ViewMmStkSummLotFree1
     */
    public ViewMmStkSummLotFreeVOImpl getViewMmStkSummLotFreeVO1() {
        return (ViewMmStkSummLotFreeVOImpl) findViewObject("ViewMmStkSummLotFreeVO1");
    }

    /**
     * Container's getter for SlsSoItmSchmTOViewMMStkSummLotFreeVL1.
     * @return SlsSoItmSchmTOViewMMStkSummLotFreeVL1
     */
    public ViewLinkImpl getSlsSoItmSchmTOViewMMStkSummLotFreeVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmSchmTOViewMMStkSummLotFreeVL1");
    }

    /**
     * Container's getter for ViewMmStkSummBinFree1.
     * @return ViewMmStkSummBinFree1
     */
    public ViewMmStkSummBinFreeVOImpl getViewMmStkSummBinFreeVO1() {
        return (ViewMmStkSummBinFreeVOImpl) findViewObject("ViewMmStkSummBinFreeVO1");
    }

    /**
     * Container's getter for SlsSoItmSchmTOViewMmStkSummBinFreeVL1.
     * @return SlsSoItmSchmTOViewMmStkSummBinFreeVL1
     */
    public ViewLinkImpl getSlsSoItmSchmTOViewMmStkSummBinFreeVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmSchmTOViewMmStkSummBinFreeVL1");
    }

    /**
     * Container's getter for ViewMmStkSummSrFree1.
     * @return ViewMmStkSummSrFree1
     */
    public ViewMmStkSummSrFreeVOImpl getViewMmStkSummSrFreeVO1() {
        return (ViewMmStkSummSrFreeVOImpl) findViewObject("ViewMmStkSummSrFreeVO1");
    }

    /**
     * Container's getter for SlsSoItmSchmTOViewMmStkSummSrFreeVL1.
     * @return SlsSoItmSchmTOViewMmStkSummSrFreeVL1
     */
    public ViewLinkImpl getSlsSoItmSchmTOViewMmStkSummSrFreeVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmSchmTOViewMmStkSummSrFreeVL1");
    }

    /**Method to Auto Issue item from Stock in case of LIFO/FIFO.
     */

    public void IssueAutoItemFree() {
        String uomBase = null;
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        ViewObject pickItm = this.getSlsSoItmSch1();
        Row itmRow = pickItm.getCurrentRow();
        String binChkFlg = ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();

        _log.info("wh-" + soRow.getAttribute("WhId") + "itm-" + itmRow.getAttribute("ItmId") + "pickQty-" +
                  itmRow.getAttribute("ItmFreeQty") + "PickOrd-" + itmRow.getAttribute("TransItmPickOrder") + "SrNo-" +
                  itmRow.getAttribute("TransItmSerializedFlg") + "DocID-" + itmRow.getAttribute("DocId") + "Uom-" +
                  itmRow.getAttribute("ItmUom"));

        if (getBaseUom((String) itmRow.getAttribute("ItmId")) != null) {
            uomBase = getBaseUom(itmRow.getAttribute("ItmId").toString());
        } else {
            uomBase = itmRow.getAttribute("ItmUom").toString();
        }

        Number convFctr =
            SoAmHelper.getUomConvFactor(this, itmRow.getAttribute("ItmId").toString(),
                                        itmRow.getAttribute("ItmUom").toString());
        /* BigDecimal convFctr = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                                              EbizParams.GLBL_APP_SERV_LOC(),
                                                              EbizParams.GLBL_APP_CLD_ID(),
                                                              EbizParams.GLBL_APP_USR_ORG(),
                                                              itmRow.getAttribute("ItmId"), uomBase,
                                                              itmRow.getAttribute("ItmUom")
        }); */
        _log.info("UomBase-" + uomBase + "ConvFctr-" + convFctr);
        /* BigDecimal ret =
            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                            "SLS.FN_SLS_SO_SCHM_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            p_cldId, p_sloc_id, p_hoOrgId, p_org_id, soRow.getAttribute("WhId"),
                                            itmRow.getAttribute("ItmId"), itmRow.getAttribute("DestItmId"),
                                            itmRow.getAttribute("ItmFreeQty"), itmRow.getAttribute("TransItmPickOrder"),
                                            itmRow.getAttribute("TransItmSerializedFlg"), binChkFlg,
                                            itmRow.getAttribute("DocId"), itmRow.getAttribute("ItmUom"),
                                            itmRow.getAttribute("ItmUom"), convFctr,soRow.getAttribute("FyId")
        }); */

        BigDecimal ret =
            (BigDecimal) ADFModelUtils.callFunction(this,
                                                    new StringBuilder("SLS.FN_SLS_SO_SCHM_ISSU_AUTO(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                    EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                    EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                    soRow.getAttribute("WhId"), itmRow.getAttribute("ItmId"),
                                                    itmRow.getAttribute("DestItmId"), itmRow.getAttribute("ItmFreeQty"),
                                                    itmRow.getAttribute("TransItmPickOrder"),
                                                    itmRow.getAttribute("TransItmSerializedFlg"), binChkFlg,
                                                    itmRow.getAttribute("DocId"), itmRow.getAttribute("ItmUom"),
                                                    itmRow.getAttribute("ItmUom"), convFctr, soRow.getAttribute("FyId")
        }, Types.NUMERIC);


        _log.info("Retval AutoIssue-" + ret);

        this.getSlsSoFreeItmLotVO1().executeQuery();
        this.getSlsSoFreeItmBinVO1().executeQuery();
        this.getSlsSoFreeItmSrVO1().executeQuery();
        this.getSlsSoItmSch1().executeQuery();
        //getDBTransaction().postChanges();
        if (ret.compareTo(new BigDecimal(1)) != 0) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "There have been an error in Auto Item Issue !" + "</p></b>");
            saveMsg.append("<b>Please try again or contact ESS !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
    }

    /**Method to filter Serial Number View ,as per Item Selected.
     */
    public void FilterSrNoAsPerFreeItem() {
        ViewObjectImpl issItm = this.getSlsSoItmSch1();
        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Row curRow = issItm.getCurrentRow();
        setBindValuesSrFree(soRow.getAttribute("WhId").toString(), curRow.getAttribute("ItmId").toString(),
                            soRow.getAttribute("DocId").toString());
        this.getViewMmStkSummSrFreeVO1().setWhereClause("SR_NO NOT IN (SELECT SR_NO from SLS$SO$ITM$SR where itm_id = '" +
                                                        curRow.getAttribute("ItmId").toString() + "')");
        this.getViewMmStkSummSrFreeVO1().executeQuery();

        if (soRow != null) {
            ViewObject stkSr = this.getViewMmStkSummSrFreeVO1();
            _log.info("Total Row in Srno-" + stkSr.getRowCount());
            stkSr.setNamedWhereClauseParam("whIdBind", soRow.getAttribute("WhId"));
            stkSr.executeQuery();
            _log.info("Total Row in SrNo after filter-" + stkSr.getRowCount());
        }
    }

    /**To Select Bin,Lot and SrNo for Item
     * Method to select lot, bin and SrNo for item (If Organisation is using/not using bin and Items  serialised).
     */
    public void InsertIntoPickItmSrForFree() {

        ViewObjectImpl soItm = this.getSlsSoItmSch1();
        ViewObjectImpl soItmSr = this.getSlsSoFreeItmSrVO1();
        ViewObjectImpl soItmBin = this.getSlsSoFreeItmBinVO1();
        ViewObjectImpl soItmLot = this.getSlsSoFreeItmLotVO1();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummSrFreeVO1();

        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Row currItm = soItm.getCurrentRow();
        String binChkFlg = (String) ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = this.getViewMmStkSummSrFreeVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("Lenth (Num) of serial number : " + srRow.length);

        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        //
                        arrlist.add(lotId);
                        _log.info("Lot id new : " + lotId);
                    }
                }
            }
            _log.info("No of lots added : " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = StaticValue.NUMBER_ZERO;
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {

            }
            _log.info(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(soItmLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and FreeItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = soItmLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                _log.info(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    String lotId = (String) r.getAttribute("LotId");
                    _log.info(" Lot id is : -----" + lotId);
                    Number prLotVal = (Number) r.getAttribute("ItmQty");
                    Number newQty = prLotVal.add(lotvalu);
                    _log.info("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("FreeItmQty", newQty);
                    r.setAttribute("FreeItmQtyBs", newQty);

                    BigDecimal avail = new BigDecimal(0);
                    try {
                        String whId = soRow.getAttribute("WhId").toString();
                        avail =
                            (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            EbizParams.GLBL_APP_CLD_ID(),
                                                            EbizParams.GLBL_APP_SERV_LOC(),
                                                            EbizParams.GLBL_APP_USR_ORG(), whId,
                                                            currItm.getAttribute("ItmId"), lotId,
                                                            EbizParams.getFyIdOnCurrDtAndCurrOrg(this)
                        });


                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                        avail = new BigDecimal(0);
                    }
                    Number multiply = StaticValue.NUMBER_ZERO;
                    try {
                        multiply = (Number) newQty.multiply(new Number(avail));
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    _log.info("Item Lot Cost : " + multiply);
                    r.setAttribute("FreeItmLotCost", multiply);
                }
            } else {
                _log.info("CREATE NEW  LOT-----");
                Row insrtLot = soItmLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("FreeItmQty", lotvalu);
                insrtLot.setAttribute("FreeItmQtyBs", lotvalu);
                insrtLot.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                insrtLot.setAttribute("WhId", soRow.getAttribute("WhId"));
                insrtLot.setAttribute("FreeItmUom", currItm.getAttribute("ItmUom"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = soRow.getAttribute("WhId").toString();
                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            EbizParams.GLBL_APP_CLD_ID(),
                                                            EbizParams.GLBL_APP_SERV_LOC(),
                                                            EbizParams.GLBL_APP_USR_ORG(), whId,
                                                            currItm.getAttribute("ItmId"), key,
                                                            EbizParams.getFyIdOnCurrDtAndCurrOrg(this)
                    });
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = StaticValue.NUMBER_ZERO;
                try {
                    multiply = (Number) lotvalu.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                _log.info("Lot inserted");
                insrtLot.setAttribute("FreeItmLotCost", multiply);
                soItmLot.insertRow(insrtLot);
                soItmLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        _log.info("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                _log.info("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("SelectSrNoChkBxTrans") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("SelectSrNoChkBxTrans").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = StaticValue.NUMBER_ZERO;
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(soItmBin);
                    rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and FreeItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = soItmBin.getFilteredRows(rowQualifier);
                    _log.info("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        _log.info("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("ItmQty");
                            Number newQty = prBinVal.add(binvalu);
                            _log.info("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("FreeItmQty", newQty);
                            r.setAttribute("FreeItmQtyBs", newQty);
                        }
                    } else {
                        _log.info("Create new Bin For Lot-----");
                        Row binInst = soItmBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("FreeItmQty", binvalu);
                        binInst.setAttribute("FreeItmQtyBs", binvalu);
                        binInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                        _log.info("Values in Bin-" + lot + "Bin id-" + key + "quant-" + binvalu);

                        binInst.setAttribute("WhId", soRow.getAttribute("WhId"));
                        binInst.setAttribute("FreeItmUom", currItm.getAttribute("ItmUom"));

                        soItmBin.insertRow(binInst);
                        soItmBin.executeQuery();
                        _log.info(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
                _log.info("" + arrListbin);
                _log.info("" + binSet);
            }
        }
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("SelectSrNoChkBxTrans") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("SelectSrNoChkBxTrans").toString())) {
                        _log.info("Create SrNo for Selected Serials");
                        Row srInst = soItmSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("FreeItmQty", new Number(1));
                        srInst.setAttribute("FreeItmQtyBs", new Number(1));
                        srInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                        srInst.setAttribute("WhId", soRow.getAttribute("WhId"));
                        srInst.setAttribute("FreeItmUom", currItm.getAttribute("ItmUom"));

                        soItmSr.insertRow(srInst);
                        soItmSr.executeQuery();
                    }
                }
            }
        }

        _log.info("Post Changes ____");
        // this.getDBTransaction().postChanges();
        this.getSlsSoFreeItmBinVO1().executeQuery();
        this.getSlsSoFreeItmLotVO1().executeQuery();
        this.getSlsSoFreeItmSrVO1().executeQuery();
        viewSummSr.executeQuery();
    }

    /**Method to filter Stock Lot data warehouse wise.
     */
    public void FilterLotWhWiseFree() {
        //  System.out.println("Inside free lot itm filter method");
        Row soRow = this.getSlsSo1().getCurrentRow();
        //   System.out.println("Total Row in Lot-" + getSlsSo1().getRowCount());
        if (soRow !=
            null) {
            //ViewObject stkLot = this.getViewMmStkSummLotFreeVO1();
            //     System.out.println("Total Row in Lot-" + getViewMmStkSummLotFreeVO1().getRowCount());
            setBindValuesLotFree(soRow.getAttribute("WhId").toString(), soRow.getAttribute("FreeItmId").toString(),
                                 soRow.getAttribute("DocId").toString());

            //stkLot.setNamedWhereClauseParam("WhIdBind", soRow.getAttribute("WhId"));
            // stkLot.executeQuery();
            //    System.out.println("Total Row in Lot after filter-" + getViewMmStkSummLotFreeVO1().getRowCount());
        }
    }

    /**To Add Item Lot Wise
     * Method to select lot for item (If Organisation is not using bin and Items are not serialised).
     * @return
     *
     */
    public String InsertIntoSoItmLotFree() {

        ViewObjectImpl mtlItm = this.getSlsSoItmSch1();
        ViewObjectImpl mtlLot = this.getSlsSoFreeItmLotVO1();
        ViewObject slsSo = this.getSlsSo1();

        Row currItm = mtlItm.getCurrentRow();
        Row soRow = slsSo.getCurrentRow();

        oracle.jbo.domain.Number zero = new oracle.jbo.domain.Number(0);
        Row[] srRow = this.getViewMmStkSummLotFreeVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        _log.info("lenth sr     " + srRow.length);

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {

                        // Filter Lot Table to ckeck Lot exist or not, Basis of DocId , SoId , ItmId and LotId

                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") +
                                                    "' and FreeItmId = '" + currItm.getAttribute("ItmId") +
                                                    "' and LotId = '" + rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        _log.info("RowQuali String-" + rowQualifier.getExprStr());

                        // Check that Lot exist or not for that item
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) ==
                                    0) {

                                    _log.info("Lot remove-------------------");
                                    r.remove();
                                } else if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >
                                           0) {

                                    _log.info("Lot Update -------------------");
                                    r.setAttribute("FreeItmQty", rr.getAttribute("TransIssuQtyValue"));
                                    r.setAttribute("FreeItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                    String LotId = (String) r.getAttribute("LotId");
                                    _log.info("Lot Already Exists | Lot Number is : " + LotId);

                                    //-------------------------------------------------------------------------------------------------------------
                                    BigDecimal avail = new BigDecimal(0);
                                    try {
                                        String whId = soRow.getAttribute("WhId").toString();
                                        avail =
                                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                            "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                                            EbizParams.GLBL_APP_CLD_ID(),
                                                                            EbizParams.GLBL_APP_SERV_LOC(),
                                                                            EbizParams.GLBL_APP_USR_ORG(), whId,
                                                                            currItm.getAttribute("ItmId"), LotId,
                                                                            EbizParams.getFyIdOnCurrDtAndCurrOrg(this)
                                        });

                                        /*  Number avl = StaticValue.NUMBER_ZERO;

                                         try{
                                             avl = new Number(avail);
                                         }catch(Exception e){
                                             e.printStackTrace();
                                         } */

                                    } catch (Exception e) {
                                        e.printStackTrace();
                                    }
                                    if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                        avail = new BigDecimal(0);
                                    }
                                    Number lotQty = StaticValue.NUMBER_ZERO;
                                    lotQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                    Number multiply = StaticValue.NUMBER_ZERO;
                                    try {
                                        multiply = (Number) lotQty.multiply(new Number(avail));
                                    } catch (SQLException e) {
                                        e.printStackTrace();
                                    }
                                    _log.info("Item Lot Cost : " + multiply);
                                    r.setAttribute("FreeItmLotCost", multiply);

                                    //-------------------------------------------------------------------------------------------------------------
                                }
                            }
                        } else {

                            if (((oracle.jbo.domain.Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("FreeItmQty", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("FreeItmQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("FreeItmUom", currItm.getAttribute("ItmUom"));
                                _log.info("Warehouse is--" + rr.getAttribute("WhId"));
                                lotInst.setAttribute("WhId", rr.getAttribute("WhId"));
                                lotInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                                //-------------------------------------------------------------------------------------------------------------
                                String LotId = (String) rr.getAttribute("LotId");
                                _log.info("Lot Do not Exists | New Lot Number is generated : " + LotId);
                                BigDecimal avail = new BigDecimal(0);
                                try {
                                    String whId = soRow.getAttribute("WhId").toString();
                                    //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                                    //                                         p_sloc_id       NUMBER,
                                    //                                         p_org_id        VARCHAR2,
                                    //                                         p_wh_id         VARCHAR2,
                                    //                                         p_itm_id        VARCHAR2,
                                    //                                         p_lot_id VARCHAR2
                                    //                                               )
                                    avail =
                                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                        "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                                        EbizParams.GLBL_APP_CLD_ID(),
                                                                        EbizParams.GLBL_APP_SERV_LOC(),
                                                                        EbizParams.GLBL_APP_USR_ORG(), whId,
                                                                        currItm.getAttribute("ItmId"), LotId,
                                                                        EbizParams.getFyIdOnCurrDtAndCurrOrg(this)
                                    });

                                    /*  Number avl = StaticValue.NUMBER_ZERO;

                                     try{
                                         avl = new Number(avail);
                                     }catch(Exception e){
                                         e.printStackTrace();
                                     } */

                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                                Number lotQty = StaticValue.NUMBER_ZERO;
                                lotQty = (Number) rr.getAttribute("TransIssuQtyValue");
                                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                                    avail = new BigDecimal(0);
                                }
                                Number multiply = StaticValue.NUMBER_ZERO;
                                try {
                                    multiply = (Number) lotQty.multiply(new Number(avail));
                                } catch (SQLException e) {
                                    e.printStackTrace();
                                }
                                _log.info("Item Lot Cost : " + multiply);
                                lotInst.setAttribute("FreeItmLotCost", multiply);

                                mtlLot.insertRow(lotInst);
                                mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }

        mtlItm.executeQuery();
        getDBTransaction().postChanges();
        return null;
    }

    /**Method to filter Stock Bin data warehouse wise.
     */
    public void FilterFreeBinWhWise(String itmId) {

        //  System.out.println("Inside free lot itm filter method   ===  " + itmId);
        Row soRow = this.getSlsSo1().getCurrentRow();
        //  System.out.println("Total Row in Lot - " + getSlsSo1().getRowCount());
        if (soRow != null) {
            //ViewObject stkLot = this.getViewMmStkSummBinFreeVO1();
            //     System.out.println("Total Row in Lot-" + getViewMmStkSummLotFreeVO1().getRowCount());
            setBindValuesBinFree(soRow.getAttribute("WhId").toString(), itmId, soRow.getAttribute("DocId").toString());

            //stkLot.setNamedWhereClauseParam("WhIdBind", soRow.getAttribute("WhId"));
            // stkLot.executeQuery();
            //    System.out.println("Total Row in Lot after filter-" + getViewMmStkSummLotFreeVO1().getRowCount());
        }
    }

    /**To Select Bin and Lot for Item
     * Method to select lot and bin for item (If Organisation is using bin and Items are not serialised).
     *
     */
    public void InsertIntoSoItmBinFree() {

        ViewObjectImpl mtlItm = this.getSlsSoItmSch1();
        ViewObjectImpl mtlBin = this.getSlsSoFreeItmBinVO1();

        ViewObjectImpl mtlLot = this.getSlsSoFreeItmLotVO1();
        Row currItm = mtlItm.getCurrentRow();

        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        Number zero = StaticValue.NUMBER_ZERO;
        ViewObjectImpl stkSummBin = this.getViewMmStkSummBinFreeVO1();
        Row[] binRow = this.getViewMmStkSummBinFreeVO1().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));

        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        _log.info("lot id Bin-- " + lotId);
                    }
                }
            }
            _log.info(" Lot ArrayList size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);

        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = StaticValue.NUMBER_ZERO;
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            _log.info(" lot id   ---" + lotId + "----qty------" + lotQty);

            // Check lot already created or not

            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") + "' and FreeItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            _log.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("FreeItmQty", lotQty);
                    r.setAttribute("FreeItmQtyBs", lotQty);
                }
            } else {
                RowQualifier rq = new RowQualifier(stkSummBin);
                rq.setWhereClause("ItmId='" + currItm.getAttribute("ItmId"));
                Row binRows[] = stkSummBin.getFilteredRows(rq);
                //system.out.println("Total Item for This Lot -" + binRows.length);

                Row instLot = mtlLot.createRow();
                mtlLot.insertRow(instLot);
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("FreeItmQty", lotQty);
                instLot.setAttribute("FreeItmQtyBs", lotQty);
                instLot.setAttribute("FreeItmUom", currItm.getAttribute("ItmUom"));
                instLot.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                instLot.setAttribute("WhId", soRow.getAttribute("WhId"));
                BigDecimal avail = new BigDecimal(0);
                try {
                    String whId = soRow.getAttribute("WhId").toString();
                    //                SLS.FN_GET_ITM_LOT_PRICE (p_cld_id        VARCHAR2,
                    //                                         p_sloc_id       NUMBER,
                    //                                         p_org_id        VARCHAR2,
                    //                                         p_wh_id         VARCHAR2,
                    //                                         p_itm_id        VARCHAR2,
                    //                                         p_lot_id VARCHAR2
                    //                                               )
                    avail = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_ITM_LOT_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                            EbizParams.GLBL_APP_CLD_ID(),
                                                            EbizParams.GLBL_APP_SERV_LOC(),
                                                            EbizParams.GLBL_APP_USR_ORG(), whId,
                                                            currItm.getAttribute("ItmId"), lotId,
                                                            EbizParams.getFyIdOnCurrDtAndCurrOrg(this)
                    });

                    /*  Number avl = StaticValue.NUMBER_ZERO;

                    try{
                        avl = new Number(avail);
                    }catch(Exception e){
                        e.printStackTrace();
                    } */
                } catch (Exception e) {
                    e.printStackTrace();
                }
                if (avail.compareTo(new BigDecimal(-1)) == 0) {
                    avail = new BigDecimal(0);
                }
                Number multiply = StaticValue.NUMBER_ZERO;
                try {
                    multiply = (Number) lotQty.multiply(new Number(avail));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                _log.info("Item Lot Cost : " + multiply);
                instLot.setAttribute("FreeItmLotCost", multiply);


                mtlLot.executeQuery();
            }
        }
        _log.info("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        _log.info("Condition true create Bin");

                        // Check bin already created or not

                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocId ='" + currItm.getAttribute("DocId") +
                                                    "' and FreeItmId = '" + currItm.getAttribute("ItmId") +
                                                    "' and LotId = '" + rr.getAttribute("LotId").toString() +
                                                    "' and BinId = '" + rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        _log.info("" + rowQualifier.getExprStr());
                        _log.info("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    _log.info("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    _log.info("row update ----------");
                                    r.setAttribute("FreeItmQty", rr.getAttribute("TransIssueQty"));
                                    r.setAttribute("FreeItmQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                _log.info("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("FreeItmQty", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("FreeItmQtyBs", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("DocDt", soRow.getAttribute("DocDt"));
                                binInst.setAttribute("WhId", soRow.getAttribute("WhId"));
                                binInst.setAttribute("FreeItmUom", currItm.getAttribute("ItmUom"));

                                mtlBin.insertRow(binInst);
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        this.getSlsSoFreeItmBinVO1().executeQuery();
        this.getSlsSoFreeItmLotVO1().executeQuery();
        this.getSlsSoFreeItmSrVO1().executeQuery();
    }

    /**
     * Container's getter for LOVSchemeId1.
     * @return LOVSchemeId1
     */
    public ViewObjectImpl getLOVSchemeIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVSchemeIdVO1");
    }

    /**
     * Container's getter for SlsSoItmSch2.
     * @return SlsSoItmSch2
     */
    public ViewObjectImpl getSlsSoItmSchVO2() {
        return (ViewObjectImpl) findViewObject("SlsSoItmSchVO2");
    }

    /**
     * Container's getter for SlsSoToSlsSoItmSchmVL1.
     * @return SlsSoToSlsSoItmSchmVL1
     */
    public ViewLinkImpl getSlsSoToSlsSoItmSchmVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoToSlsSoItmSchmVL1");
    }

    /**
     * Method to set Default Item Id in Item Row.
     */
    public void setDefaultItmIdIfItmIdIsNull() {
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        if (currentRow != null) {
            Object o = currentRow.getAttribute("ItmId");
            if (o == null) {
                currentRow.setAttribute("ItmId", -1);
            }
            currentRow.remove();
        }
    }

    /**
     * Method that returns the Sales Order Type of Current Sales Order.
     * @return
     */
    public Integer getOrdrType() {
        Integer i = -1;
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            Object o = currentRow.getAttribute("OrderType");
            if (o != null) {
                i = (Integer) o;
            }
        }
        return i;
    }

    /**
     * Function which tells whether scheme item exist or not.
     * @return
     */
    public Boolean ItemExistInSchmOrNot() {
        Boolean val = false;
        SlsSoItmVOImpl soItm = this.getSlsSoItm1();
        Row currentRow = soItm.getCurrentRow();
        if (currentRow != null) {
            Object itemId = currentRow.getAttribute("ItmId");
            if (itemId != null) {
                this.getSlsSoItmSchVO2().executeQuery();
                ViewObjectImpl impl = this.getSlsSoItmSchVO2();
                impl.setRangeSize(-1);
                //  System.out.println("Item id is " + itemId + " count rows is " + impl.getEstimatedRowCount());
                RowQualifier rQ = new RowQualifier(impl);
                rQ.setWhereClause("ItmId='" + itemId.toString() + "'");
                Row[] filteredRows = impl.getFilteredRows(rQ);
                //  System.out.println("Filtered rows is " + filteredRows.length);
                if (filteredRows.length > 0) {
                    val = true;
                }
            }
        }
        //System.out.println("Value is " + val);
        return val;
    }

    /**
     * Function will be called after Scheme is applied
     * It will check whether all items which were present in scheme does exist in SOItem or Not and perform operations accordingly.
     *
     * @param showErrorMessaage conditionally display a faces message
     * @param changeDiscountValue conditionally set discount value to zeero
     * @return
     */
    public void ItemPresentInSoItemOrNot(Boolean showErrorMessaage, Boolean changeDiscountValue) {
        ViewObjectImpl soItm = this.getSlsSoItm1();
        ViewObjectImpl soItmSchm = this.getSlsSoItmSch1();
        RowSetIterator rsiSchmItm = soItmSchm.createRowSetIterator(null);
        Number discVal = new Number(0);
        while (rsiSchmItm.hasNext()) {
            Row rSchmItm = rsiSchmItm.next();
            Object itmId = rSchmItm.getAttribute("ItmId");
            RowQualifier rQ = new RowQualifier(soItm);
            rQ.setWhereClause("ItmId='" + itmId + "'");
            Row[] filteredRows = soItm.getFilteredRows(rQ);
            discVal = new Number(0);
            if (filteredRows.length > 0) {
                discVal = (Number) filteredRows[0].getAttribute("ItmDiscVal");
                if (changeDiscountValue && discVal.compareTo(0) > 0) {
                    filteredRows[0].setAttribute("ItmDiscVal", new Number(0));
                    if (showErrorMessaage) {
                        StringBuilder saveMsg =
                            new StringBuilder("<html><body><p>" + "Discount value for this item id : ");
                        saveMsg.append("<b>" + itmId + "</b>");
                        saveMsg.append(" has been changed to zero. You cannot apply discount for this item as it is present in Scheme");
                        saveMsg.append("</p></body></html>");
                        FacesMessage msg = new FacesMessage(saveMsg.toString());
                        msg.setSeverity(FacesMessage.SEVERITY_INFO);
                        FacesContext.getCurrentInstance().addMessage(null, msg);
                    }
                }
            }
        }
        rsiSchmItm.closeRowSetIterator();
    }

    /**
     * Container's getter for PriceHistoryVO1.
     * @return PriceHistoryVO1
     */
    public ViewObjectImpl getPriceHistoryVO1() {
        return (ViewObjectImpl) findViewObject("PriceHistoryVO1");
    }

    /**
     * Method to fetch old price from price history.
     */
    public void fetchOldPrice() {
        Row soRow = this.getSlsSo1().getCurrentRow();
        Row itmRow = this.getSlsSoItm1().getCurrentRow();
        ViewObjectImpl historyVO1 = this.getPriceHistoryVO1();
        historyVO1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        historyVO1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        historyVO1.setNamedWhereClauseParam("EoIdBind", soRow.getAttribute("EoId"));
        historyVO1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        historyVO1.setNamedWhereClauseParam("ItmIdBind", itmRow.getAttribute("ItmId"));
        historyVO1.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        historyVO1.executeQuery();
    }

    /**
     * Method to fetch Current Eo Id.
     * @return
     */
    public Integer getCustomerId() {
        Integer i = null;
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            Object eoIdO = currentRow.getAttribute("EoId");
            if (eoIdO != null) {
                i = (Integer) eoIdO;
            }
        }
        return i;
    }

    /**
     * @param eoId
     */
    public void setDefaultValuesonCustSelection(Integer eoId) {
        Row currentRow = this.getSlsSo1().getCurrentRow();
    }

    /**
     * Method to fetch category Id on the basis of EoId.
     * @param eoId
     * @return
     */

    public Integer getCatgIdForCurrEo(Integer eoId) {
        Integer catgId = null;
        ViewObjectImpl eoNmVO1 = this.getLovEoTypeFromEoNmVO1();
        eoNmVO1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        eoNmVO1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        eoNmVO1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        eoNmVO1.setNamedWhereClauseParam("EoNameBind", null);
        eoNmVO1.setNamedWhereClauseParam("EoIdBind", eoId);
        eoNmVO1.setNamedWhereClauseParam("BindEoType", null);
        eoNmVO1.executeQuery();
        Row[] allRowsInRange = eoNmVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            catgId = (Integer) allRowsInRange[0].getAttribute("EoType");
        }
        _log.info("Setting Category Id to : " + catgId);
        return catgId;
    }

    /**
     * Method to fetch Currency rate on the basis of EoId.
     * @param currId
     * @return
     * @param eoId
     */
    public Number getCurrRateForCurrId(Integer currId) {
        Number currRate = new Number(1);
        currId = (currId == null ? -1 : currId);
        // System.out.println("Currency Id : " + currId);
        if (currId != -1) {
            //FN_GET_CURR_RATE_FRM_CURR_ID
            Object currRateO = EbizParamsAPPUtils.getCurrRateForCurrId(this, currId);
            currRate = (Number) currRateO;
        }
        _log.info("Setting Curr Rate to : " + currRate);
        return currRate;
    }

    /**
     * Method to fetch Sales Executive Id on the basis of EoId.
     * @param eoId
     * @return
     */

    public Integer getSalesExecForEo(Integer eoId) {
        Integer excId = null;
        Object execO = ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_EXEC_ID_FRM_EO_ID(?,?,?,?)"), new Object[] {
                                                  EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                  EbizParams.GLBL_HO_ORG_ID(), eoId
        }, Types.INTEGER);
        excId = (execO == null ? null : (execO == -1 ? 0 : (Integer) execO));
        return excId;
    }

    /**
     * Method to fetch Default currency Id of given EoId.
     * @param eoId
     * @return
     */
    public Integer getCurrIdSpForCurrEo(Integer eoId) {
        Integer currId = null;
        Object currIdO = ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_CURR_ID_FRM_EO_ID(?,?,?,?)"), new Object[] {
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                    EbizParams.GLBL_HO_ORG_ID(), eoId
        }, Types.INTEGER);
        currId = (currIdO == null ? null : (Integer) currIdO);

        return currId;

    }

    /**
     * Method to fetch Price Policy Id on the basis of EoId.
     * @param eoId
     * @return
     */
    public String getPricePolicyForCurrEo(Integer eoId) {
        String plcId = null;
        if (checkPolicyApplied().toString().equals("Y")) {
            Object plcIdO = ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_PLC_ID_FRM_EO_ID(?,?,?,?)"), new Object[] {
                                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                       EbizParams.GLBL_HO_ORG_ID(), eoId
            }, Types.VARCHAR);
            plcId = (plcIdO == null ? null : plcIdO.toString());
        }
        // System.out.println("Setting Price Plc to : " + plcId);
        _log.info("Setting Price Plc to : " + plcId);
        return plcId;
    }

    /**
     * Method to fetch Coa Id on the basis of EoId.
     * @param eoId
     * @return
     */
    public Integer getCoaIdForCurrEo(Integer eoId) {
        Object coaIdO = ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_COA_ID_FRM_EO_ID(?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), eoId
        }, Types.INTEGER);
        _log.info("Setting CoaId to : " + coaIdO);
        return (coaIdO == null ? null : (Integer) (coaIdO));
    }

    /**
     * Method to fetch Shipping adds on the basis of EoId.
     * @param eoId
     * @return
     */
    public String getDefaultShippingAddsOfCurrEo(Integer eoId) {
        Object shipAddsO =
            ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_DFLT_SHIP_ADDS_OF_EO_ID(?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                       EbizParams.GLBL_HO_ORG_ID(), eoId
        }, Types.VARCHAR);
        _log.info("Setting ShipAdds to : " + shipAddsO);
        return (shipAddsO == null ? null : shipAddsO.toString());
    }

    /**
     * Method to valuidate the Header Entries in Sales order before adding items to Sales Order.
     * 0 : All enteries are valid.
     * 1 : Sales Order Date is not Defined
     * 2 : Sales Order Type is not Defined
     * 3 : Customer is not defined
     * 4 : Currency is not defined
     * 5 : Currency Conversion factor is zero or less than zero.
     * 6 : Shipment Address in not selected.
     * 7 : Quotation is not selected.
     * 8 : Template No not selected.
     * 9 : Previous Sales order to Copy from is not selected.
     * 10 : Warehouse is not selected.
     * 11 : Price Policy not selected.
     * 12 : Validity date is not selected for Open Contract and Rate Contract
     * @return
     */
    public Integer validateMandatoryFieldsBeforeAddingItems() {
        Integer i = 0;
        Row currentRow = this.getSlsSo1().getCurrentRow();
        if (this.getSlsSoItm1().getEstimatedRowCount() == 0) {
            if (currentRow != null) {
                Object eoIdO = currentRow.getAttribute("EoId");
                Object docDtO = currentRow.getAttribute("DocDt");
                Object currIdSpO = currentRow.getAttribute("CurrIdSp");
                Object currConvFctrO = currentRow.getAttribute("CurrConvFctr");
                Object orderTypeO = currentRow.getAttribute("OrderType");
                Object soBasisO = currentRow.getAttribute("SoBasis");
                Object eoPricePlcO = currentRow.getAttribute("EoPricePlc");
                Object quotIdO = currentRow.getAttribute("QuotId");
                Object whIdO = currentRow.getAttribute("WhId");
                Object shipAddsO = currentRow.getAttribute("ShipAdds");
                Object tmplDocIdO = currentRow.getAttribute("TmplDocId");
                Object refSoDocIdO = currentRow.getAttribute("RefSoDocId");
                Object soVldtDtO = currentRow.getAttribute("SoVldtDt");

                //Object eoIdO = currentRow.getAttribute("EoId");

                Integer eoId = (eoIdO == null ? -1 : (Integer) eoIdO);
                Timestamp docDt = (docDtO == null ? null : (Timestamp) docDtO);
                Integer currIdSp = (currIdSpO == null ? -1 : (Integer) currIdSpO);
                Number currConvFctr = (currConvFctrO == null ? StaticValue.NUMBER_ZERO : (Number) currConvFctrO);
                Integer orderType = (orderTypeO == null ? -1 : (Integer) orderTypeO);
                Integer soBasis = (soBasisO == null ? -1 : (Integer) soBasisO);
                StringBuilder eoPricePlc =
                    (eoPricePlcO == null ? new StringBuilder("") : new StringBuilder(eoPricePlcO.toString()));
                StringBuilder quotId =
                    (quotIdO == null ? new StringBuilder("") : new StringBuilder(quotIdO.toString()));
                StringBuilder whId = (whIdO == null ? new StringBuilder("") : new StringBuilder(whIdO.toString()));
                StringBuilder shipAdds =
                    (shipAddsO == null ? new StringBuilder("") : new StringBuilder(shipAddsO.toString()));
                StringBuilder tmplDocId =
                    (tmplDocIdO == null ? new StringBuilder("") : new StringBuilder(tmplDocIdO.toString()));
                StringBuilder refSoDocId =
                    (refSoDocIdO == null ? new StringBuilder("") : new StringBuilder(refSoDocIdO.toString()));

                if (docDt == null) {
                    i = 1;
                } else if (orderType.equals(-1)) {
                    i = 2;
                } else if (eoId.equals(-1)) {
                    i = 3;
                } else if (currIdSp.equals(-1)) {
                    i = 4;
                } else if (currConvFctr.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                    i = 5;
                } else if (!(orderType.equals(310) || orderType.equals(892) || orderType.equals(897)) &&
                           shipAdds.toString().equals("")) {
                    i = 6;
                } else if (soBasis.equals(390) && quotId.toString().equals("")) {
                    i = 7;
                } else if (soBasis.equals(388) && tmplDocId.toString().equals("")) {
                    i = 8;
                } else if (soBasis.equals(389) && refSoDocId.toString().equals("")) {
                    i = 9;
                } else if ((orderType.equals(309) || orderType.equals(310) || orderType.equals(892) ||
                            orderType.equals(897)) && whId.toString().equals("")) {
                    i = 10;
                } else if (checkPolicyApplied().toString().equals("Y") && eoPricePlc.toString().equals("")) {
                    i = 11;
                } else if (orderType.equals(311) && soVldtDtO == null) {
                    i = 12;
                }
            } else {
                i = -1;
                ADFModelUtils.showFormattedFacesMessage("There have been some problem during validating fields of Current Sales Order.",
                                                        "Please try again ! If the problem persists please contact Ess !",
                                                        FacesMessage.SEVERITY_ERROR);
            }
        }
        _log.info("Sales Order Header Returning : " + i);
        return i;
    }

    /**
     * Method to fetch Item quantity on the basis of EoId.
     * @return
     * @param eoId
     */

    public Number getItmQtyForCurrentItemRow() {
        Number qty = StaticValue.NUMBER_ZERO;
        Row itmRow = this.getSlsSoItm1().getCurrentRow();
        if (itmRow != null) {
            Object o = itmRow.getAttribute("ItmQty");
            qty = (o == null ? qty : (Number) o);
        }

        return qty;
    }

    /**
     * Method to fetch UOM Conversion factor on the basis of EoId.
     * @param ItmId
     * @param ItmUom
     * @return
     * @param eoId
     */
    public Number getUomConvFactor(String ItmId, String ItmUom) {
        return SoAmHelper.getUomConvFactor(this, ItmId, ItmUom);
    }

    /**
     * Method to fetch UOM Conversion factor on the basis of EoId.
     * @return
     * @param eoId
     */
    public Number getUomConvFactorForCurrItm() {
        Number convFactor = new Number(1);
        Row itmRow = this.getSlsSoItm1().getCurrentRow();
        if (itmRow != null && itmRow.getAttribute("ItmId") != null && itmRow.getAttribute("ItmUom") != null) {
            convFactor =
                getUomConvFactor(itmRow.getAttribute("ItmId").toString(), itmRow.getAttribute("ItmUom").toString());
        } else if (itmRow.getAttribute("ItmUom") == null) {
            convFactor = new Number(-2);
        }
        // System.out.println("UOM Conversion factor : " + convFactor);
        return convFactor;
    }

    /**
     * Method to get cash customer for Current Organisation.
     * @return
     */
    public Integer getCashCustomerAccForCurrOrg() {
        Object eoIdO = ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_CASH_CUST_EO_ID_FR_ORG(?,?,?,?)"), new Object[] {
                                                  EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                  EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG()
        }, Types.INTEGER);
        return (eoIdO == null ? -1 : (Integer) eoIdO);
    }


    /**
     * @param schmDocId
     * @return
     */
    public StringBuilder getSchmTyp(String schmDocId) {
        //StringBuilder schmTyp = new StringBuilder("");
        Object typO = ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_SCHM_TYP_FRM_SCHM_ID(?,?,?,?)"), new Object[] {
                                                 EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                 EbizParams.GLBL_HO_ORG_ID(), schmDocId
        }, Types.VARCHAR);
        if (typO != null) {
            return new StringBuilder(typO.toString());
        } else {
            return new StringBuilder("");
        }
        //return schmTyp;
    }


    /**
     * Container's getter for SchmItemsVO1.
     * @return SchmItemsVO1
     */
    public ViewObjectImpl getSchmItemsVO1() {
        return (ViewObjectImpl) findViewObject("SchmItemsVO1");
    }

    /**
     * Method to check if the current Scheme is valid or not.
     * @param schDocId
     * @return
     */
    public Boolean isSchemeValid(String schDocId) {
        Boolean b = true;
        ViewObjectImpl impl = this.getSchmItemsVO1();
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("DocIdBind", schDocId);
        impl.executeQuery();
        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        if (currentRow.getAttribute("ItmId") != null) {

            // String currItmId = currentRow.getAttribute("ItmId").toString();
            RowSetIterator itmItr = this.getSlsSoItm1().createRowSetIterator(null);
            while (itmItr.hasNext()) {
                Row next = itmItr.next();
                Row[] filteredRows = impl.getFilteredRows("FreeItmId", next.getAttribute("ItmId"));
                if (filteredRows.length > 0) {
                    b = false;
                    break;
                }
            }
        }
        if (!b) {
            ((SlsSoItmVORowImpl) currentRow).setCurrentSchId();
        }
        return b;
    }

    public void changesSoStatusNdModeOnAmendMent() {
        this.getSlsSo1().getCurrentRow().setAttribute("SoMode", 313);
    }

    /**
     * @return
     */
    public Boolean isOcAmtValid() {
        Boolean b = false;
        return b;
    }

    /**
     * Method to add Other charges.
     * @return
     * 0 : Other charges added
     * 1 : Coa Id is null
     * 2 : Other charges Desc is null
     * 3 : Amount type is null
     * 4 : Amount is null
     * 5 : Amount is greater than So Amount
     * 6 : Duplicate Coa
     */
    public Integer addOtherCharges() {
        Integer i = 0;
        // ViewObjectImpl tc = this.getTempOtherChrgesVO1();
        //Row currentRow = tc.getCurrentRow();
        Row currentRow = getOtherCharges().getCurrentRow();
        Integer coaId = (Integer) currentRow.getAttribute("CoaId");
        String ocChrgsDesc = currentRow.getAttribute("OcNm").toString();
        Integer ocCatigory = (Integer) currentRow.getAttribute("OcCat");
        String ocId = currentRow.getAttribute("OcId").toString();

        Object otherChargesAmtO = currentRow.getAttribute("OtherChargeAmount");
        Object amtTypTransO = currentRow.getAttribute("OcCalcType");


        Number otherChargesAmt = (otherChargesAmtO == null ? StaticValue.NUMBER_ZERO : (Number) otherChargesAmtO);
        StringBuilder amtTypTrans = new StringBuilder("Cr");
        //    (amtTypTransO == null ? new StringBuilder("") : new StringBuilder(amtTypTransO.toString()));

        if (otherChargesAmt.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
            i = 4;
        } else if (isOtherChargeExist(ocId)) {
            System.out.println(" other charge exist ++++++++++++++++ ");
            StringBuilder msg =
                new StringBuilder("Selected Other Charges \"" + ocChrgsDesc +
                                  "\" is already added, Please selected different other charges.");
            ADFModelUtils.showFormattedFacesMessage("Selected Other Charges already exist !", msg.toString(),
                                                    FacesMessage.SEVERITY_ERROR);
        } else {

            Row row = this.getSlsSo1().getCurrentRow();
            Number itmAmt = (Number) row.getAttribute("CostBeforeDiscTrans");
            Number discAmt = (Number) row.getAttribute("SoDiscAmtTrans");
            Number soAmt = itmAmt.subtract(discAmt);
            Number ocAmt = StaticValue.NUMBER_ZERO;
            RowSetIterator ocItr = getSlsSoOc1().createRowSetIterator(null);
            while (ocItr.hasNext()) {
                Row next = ocItr.next();
                Number o =
                    (next.getAttribute("AmtSp") == null ? StaticValue.NUMBER_ZERO :
                     (Number) next.getAttribute("AmtSp"));
                StringBuilder Trantyp =
                    (next.getAttribute("TranType") == null ? new StringBuilder("") :
                     new StringBuilder(next.getAttribute("TranType").toString()));
                if ("Dr".equals(Trantyp.toString())) {
                    ocAmt = ocAmt.add((Number) o);
                } else if ("Cr".equals(Trantyp.toString())) {
                    ocAmt = ocAmt.subtract((Number) o);
                }
            }
            ocItr.closeRowSetIterator();
            if ("Dr".equals(amtTypTrans.toString())) {
                otherChargesAmt = ocAmt.add(otherChargesAmt);
            } else {
                otherChargesAmt = ocAmt.subtract(otherChargesAmt);
            }

            if (otherChargesAmt.compareTo(soAmt) > 0) {
                i = 5;
            } else {
                Row sRow = this.getSlsSo1().getCurrentRow();
                Number convFctr =
                    (sRow.getAttribute("CurrConvFctr") == null ? new Number(1) :
                     (Number) sRow.getAttribute("CurrConvFctr"));
                Row r = this.getSlsSoOc1().createRow();
                this.getSlsSoOc1().insertRow(r);
                r.setAttribute("CoaId", coaId);
                r.setAttribute("AmtSp", otherChargesAmtO);
                r.setAttribute("AmtBs", ADFBeanUtils.roundOff(((Number) otherChargesAmtO).multiply(convFctr)));
                r.setAttribute("OcDesc", ocCatigory);
                r.setAttribute("CurrId", sRow.getAttribute("CurrIdSp"));
                r.setAttribute("CurrRate", convFctr);
                r.setAttribute("TranType", amtTypTrans.toString());
                r.setAttribute("OcId", ocId);
                getSlsSoOc1().executeQuery();

                Object at = row.getAttribute("OrderTotalCostTrans");
                System.out.println("Total Amount is width Sign : " + row.getAttribute("ocAmtSumWidSign"));
                System.out.println("Total Amount is : " + row.getAttribute("OrderTotalCostTrans"));
                // System.out.println("Total Cost : " + at);
                currentRow.setAttribute("OtherChargeAmount", null);
            }


        }

        return i;
    }

    /**
     * Method to check Other charges exist or not
     */
    protected Boolean isOtherChargeExist(String othChrId) {
        System.out.println(" checking other charge exist or not " + othChrId);
        RowSetIterator itr = getSlsSoOc1().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            if (othChrId.equalsIgnoreCase(r.getAttribute("OcId").toString())) {
                System.out.println(" Other charge exist");
                return true;
            }
        }

        return false;
    }

    /**
     * Method to check if Other charges Amount is Valid.
     * @param coaId
     * @return
     */
    public Boolean isOtherChargesCoaValid(Integer coaId) {
        Boolean b = true;
        RowSetIterator ctr = this.getSlsSoOc1().createRowSetIterator(null);
        while (ctr.hasNext()) {
            Object coaIdO = ctr.next().getAttribute("CoaId");
            if (coaId.equals((Integer) coaIdO)) {
                b = false;
                break;
            }
        }
        ctr.closeRowSetIterator();
        return b;
    }

    /**
     * Container's getter for TempOtherChrgesVO1.
     * @return TempOtherChrgesVO1
     */
    public ViewObjectImpl getTempOtherChrgesVO1() {
        return (ViewObjectImpl) findViewObject("TempOtherChrgesVO1");
    }

    /**
     * Container's getter for TempTrfVO1.
     * @return TempTrfVO1
     */
    public ViewObjectImpl getTempTrfVO1() {
        return (ViewObjectImpl) findViewObject("TempTrfVO1");
    }

    /**
     * Container's getter for SlsSoItmTrfVO1.
     * @return SlsSoItmTrfVO1
     */
    public ViewObjectImpl getSlsSoItmTrfVO1() {
        return (ViewObjectImpl) findViewObject("SlsSoItmTrfVO1");
    }

    /**
     * Container's getter for SoToTrfVL1.
     * @return SoToTrfVL1
     */
    public ViewLinkImpl getSoToTrfVL1() {
        return (ViewLinkImpl) findViewLink("SoToTrfVL1");
    }

    /**
     * Method to check if Item Being Added is not duplicate.
     * @param itmId
     * @return
     */
    public Boolean validateTrfItmId(String itmId) {
        Boolean b = true;
        RowSetIterator ctr = this.getSlsSoItmTrfVO1().createRowSetIterator(null);
        while (ctr.hasNext()) {
            Object itmIdO = ctr.next().getAttribute("ItmId");
            if (itmIdO == null) {
                b = false;
                break;
            } else if (itmIdO != null && itmId.equals(itmIdO.toString())) {
                b = false;
                break;
            }
        }
        ctr.closeRowSetIterator();

        return b;
    }

    /**
     * Method to add Item Trf line to Sales Order.
     * @return
     * -1 : Some Error Occured
     * 1 : Item is not Selected.
     * 2 : Duplicate Item is Selected.
     * 3 : Source Organisation is not Selected.
     * 4 : Warehouse Id Scource is not Selected.
     * 5 : Destination Organisation is not Selected.
     * 6 : Warehouse Id Destination is not Selected.
     * 7 : Source and Destination Warehouse Id are same.
     * 8 : Transfer Quantity should be greater than zero.
     * 9 : UOM is not defined for this Item.
     * 10 : UOM Conversion factor with the Base UOM is not Defined.
     *
     */

    public Integer addItmToTrf() {
        return SoAmHelper.addItmToTrf(this);
    }

    /**
     * Method to show Saved Sucessfully Message.
     */
    public void showSaveSucessfullMessage() {
        Row soRow = getSlsSo1().getCurrentRow();
        StringBuilder msg = new StringBuilder("");
        msg.append("<ul style='color:blue;'>");
        msg.append("<li><span style='font-weight:normal;'>Sales Order no. : </span>");
        msg.append(soRow.getAttribute("SoId"));
        msg.append("</li>");
        msg.append("<li><span style='font-weight:normal;'>Customer name : </span>");
        msg.append(soRow.getAttribute("EoNmTrans"));
        msg.append("</li>");
        msg.append("<li><span style='font-weight:normal;'>Currency : </span>");
        msg.append(EbizParams.getCurrDescFrmCurrId(this, (Integer) soRow.getAttribute("CurrIdSp"))); //curId sp
        msg.append("</li>");
        msg.append("<li><span style='font-weight:normal;'>Amount (Specific) : </span>");
        msg.append(soRow.getAttribute("TotAmtSp"));
        msg.append("</li>");
        msg.append("<li><span style='font-weight:normal;'>Amount (Basic) : </span>");
        msg.append(soRow.getAttribute("TotAmtBs"));
        msg.append("</li>");
        msg.append("</ul>");

        /*
        if ((ordTyp.compareTo(309) == 0 || ordTyp.compareTo(310) == 0) && mode.compareTo(314) == 0 &&
            ordState.compareTo(834) == 0) {
            msg.append("Now this Sales Order is available for stock release.");
            System.out.println(309 + " "+ 310 +" "+834 + " " + 314);

        } else if ((ordTyp != 309 || ordTyp != 310) && mode.compareTo(314) == 0) {
            msg.append("Now this Sales Order will be available for Pick. ");
            System.out.println(309 + "N "+ 310 +"N "+ 314);
        } else if((ordTyp.compareTo(309) == 0 || ordTyp.compareTo(310) == 0) && mode.compareTo(314)==0 && ordState.compareTo(218) == 0) {
            msg.append("Stock Released for this  Sales Order");
            System.out.println(309 + " "+ 310 +" "+218 + " " + 314);
        } */


        ADFModelUtils.showFormattedFacesMessage("Sales Order Saved Sucessfully !", msg.toString(),
                                                FacesMessage.SEVERITY_INFO);
    }

    /**
     * Method used to check if External Document No is.
     * @param docNoO
     * @param docDtO
     * @return
     */
    public Boolean isDocNoValid(String docNoO, Timestamp docDtO) {
        Boolean b = true;
        ///  System.out.println(docNoO + " -------------- The external doc No from the page ");
        StringBuffer valExtNo = checkforProfileValues(new StringBuffer("VLDT_EXT_DOC_NO_DT"));
        //  System.out.println(valExtNo + " --------------- return the result of external chcek for profile");
        if ("Y".equals(valExtNo.toString())) {
            Row soRow = this.getSlsSo1().getCurrentRow();
            if (docNoO == null && docDtO == null) {
                docNoO = soRow.getAttribute("ExtDocNo").toString();
                docDtO = (Timestamp) soRow.getAttribute("ExtDocDt");
            } else if (docNoO == null) {
                docNoO = soRow.getAttribute("ExtDocNo").toString();
            } else if (docDtO == null && soRow.getAttribute("ExtDocDt") != null) {
                docDtO = (Timestamp) soRow.getAttribute("ExtDocDt");
            }
            ViewObjectImpl extDocNoVO = this.getExtDocNoVO1();
            extDocNoVO.setNamedWhereClauseParam("CldIdBind", soRow.getAttribute("CldId"));
            extDocNoVO.setNamedWhereClauseParam("SlocIdBind", soRow.getAttribute("SlocId"));
            extDocNoVO.setNamedWhereClauseParam("OrgIdBind", soRow.getAttribute("OrgId"));
            extDocNoVO.setNamedWhereClauseParam("HoOrgIdBind", soRow.getAttribute("HoOrgId"));
            extDocNoVO.setNamedWhereClauseParam("CurrSoDocIdBind", soRow.getAttribute("DocId"));
            extDocNoVO.setNamedWhereClauseParam("ExtDocNoBind", docNoO);
            try {
                if (docDtO != null) {
                    extDocNoVO.setNamedWhereClauseParam("ExtDocDtBind", docDtO.dateValue());
                } else {
                    extDocNoVO.setNamedWhereClauseParam("ExtDocDtBind", null);
                }
            } catch (SQLException e) {
            }
            extDocNoVO.executeQuery();
            if (extDocNoVO.getAllRowsInRange().length > 0)
                b = false;
        }
        return b;
    }

    /**
     * Container's getter for ExtDocNoVO1.
     * @return ExtDocNoVO1
     */
    public ViewObjectImpl getExtDocNoVO1() {
        return (ViewObjectImpl) findViewObject("ExtDocNoVO1");
    }

    /**
     * Method to set new Item Price and is called from Bean
     * @param price
     */
    public Number setNewItmPrice(Number price) {
        System.out.println("Current Rate is : " + price);
        Number newPrice = price;
        Row r = this.getSlsSo1().getCurrentRow();
        if (r.getAttribute("CurrConvFctr") != null) {
            Number curConFactor = (Number) r.getAttribute("CurrConvFctr");
            if (curConFactor.compareTo(0) > 0) {
                newPrice = price.divide(curConFactor);
                newPrice = (Number) newPrice.round(EbizParams.GLBL_CURR_DIGIT());
                System.out.println("Current conversion factor is : " + curConFactor);
            }
        }
        System.out.println("Current Rate divide by currency conveter is  : " + newPrice);
        this.getSlsSoItm1().getCurrentRow().setAttribute("ItmRate", newPrice);
        return newPrice;
    }


    /*     public void callFunctionAfterReturnFromWf() {
        Boolean operationSuccessfull = true;
        Object wfO = ADFModelUtils.resolvEl("#{pageFlowScope.PARAM_WF_RET_VAL}");
        StringBuilder wf = (wfO == null ? new StringBuilder("") : new StringBuilder(wfO.toString()));
        if ("A".equals(wf.toString())) {
            Object retval = null;
            ViewObject slsSo = this.getSlsSo1();
            Row curRow = slsSo.getCurrentRow();
            Object DocId = curRow.getAttribute("DocId");
            Object DocDt = curRow.getAttribute("DocDt");
            if (curRow.getAttribute("OrderType") != null) {
                Integer ordTyp = (Integer) (curRow.getAttribute("OrderType"));
                if (ordTyp.equals(309) || ordTyp.equals(310)) {
                    rushOrder Dispatch();
                    try {
                        Object s = callStoredFunction(Types.VARCHAR, "FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] {
                                                      DocId, DocDt, EbizParams.GLBL_APP_USR(),
                                                      EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_SERV_LOC(),
                                                      EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_CLD_ID(), "O"
                        });

                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_COST_OF_GOOD'! " +
                                             e.getMessage());
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                        operationSuccessfull = false;
                    }
                    _log.info("Update Stock and Dispatch to MTL$ISSUE");
                }
                if (ordTyp == 310) {
                    try {
                        retval =
                            callStoredFunction(Types.NUMERIC, "SLS.FN_SLS_CASH_SALES_GL_INS(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                               curRow.getAttribute("DocId"), curRow.getAttribute("DocDt"),
                                               curRow.getAttribute("TotAmtSp"), EbizParams.GLBL_APP_USR(),
                                               EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_CLD_ID(),
                                               curRow.getAttribute("EoId"), curRow.getAttribute("CoaId"),
                                               curRow.getAttribute("CurrIdSp")
                        });
                        _log.info("Return Value from --" + retval);
                    } catch (Exception e) {

                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'SLS.FN_SLS_CASH_SALES_GL_INS' ! " +
                                             e.getMessage());
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                        operationSuccessfull = false;
                    }
                }
            }
            Object amdO = curRow.getAttribute("AmdNo");
            Integer amd = (amdO == null ? 0 : Integer.parseInt(amdO.toString()));
            if (amd == 0) {
                Integer i = 0;
                System.out.println("Calling TRF.");
                try {
                    i = (Integer) callStoredFunction(Types.INTEGER, "SLS.FN_INS_SO_TO_TRF(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                     EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                     EbizParams.getFyIdOnCurrDtAndCurrOrg(this),
                                                     curRow.getAttribute("DocDt"),
                                                     curRow.getAttribute("DocId").toString(), EbizParams.GLBL_APP_USR(),
                                                     new Timestamp(System.currentTimeMillis())
                    });
                    System.out.println("tRF Retun : " + i);
                    if (i == 1) {
                    } else {
                    }
                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'SLS.FN_INS_SO_TO_TRF' ! " +
                                         e.getMessage());
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                    operationSuccessfull = false;
                }
            }
        }

        ViewObject slsSo = this.getSlsSo1();
        Row soRow = slsSo.getCurrentRow();
        if (soRow.getAttribute("SoMode") != null) {
            if ("A".equals(wf.toString())) {
                soRow.setAttribute("SoMode", 314);
            } else if ("f".equals(wf.toString())) {
                soRow.setAttribute("SoMode", 317);
            }
        }
        if (operationSuccessfull) {
            this.getDBTransaction().commit();
        } else {
            this.getDBTransaction().rollback();
        }
        executeViewObjects();
        this.getorderSearch1().executeQuery();
    } */

    /**
     *  Variables defind preserv the value of External DocDt and DocNo before save
     *  so that they can be used after commit.
     */

    private Object extDocNoVar;
    private Object extDocDtVar;

    public void getValuesBeforeCommit() {
    }

    public void setValuesBeforeCommit() {

    }

    /**
     * Method to check Mandatory attribute in Sales Order on Save.
     * @return
     */
    public Boolean mandatoryCheck() {
        Boolean b = false;
        ArrayList<Row> rowList = new ArrayList<Row>();
        rowList.add(this.getSlsSo1().getCurrentRow());
        MandatoryAttCheck ck =
            new MandatoryAttCheck(this, new StringBuilder(EbizParams.GLBL_APP_CLD_ID()),
                                  new StringBuilder(EbizParams.GLBL_APP_USR_ORG()), EbizParams.GLBL_APP_SERV_LOC());

        try {
            b = ck.isMandatoryAttributesEntered(21503, new StringBuilder("SlsSo1"), new StringBuilder("SLS$SO"), null,
                                                rowList);
            //  System.out.println("Returned : " + b);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return b;
    }

    public Boolean isPricePolicyValid() {
        Boolean b = true;
        return b;
    }

    public String getEoPricePlcMethod() {
        String Flag = "N";
        SlsSoVOImpl impl = this.getSlsSo1();
        Row cRow = impl.getCurrentRow();
        if (cRow != null) {
            if (cRow.getAttribute("EoPricePlc") != null) {
                Flag = "N";
            } else {
                Flag = "Y";
            }
        }
        return Flag;
    }

    /**
     * Container's getter for SlsSoTrLinesVO3.
     * @return SlsSoTrLinesVO3
     */
    public ViewObjectImpl getSlsSoTrLinesVO3() {
        return (ViewObjectImpl) findViewObject("SlsSoTrLinesVO3");
    }

    /**
     * Container's getter for SlsSoToTrLinesVL1.
     * @return SlsSoToTrLinesVL1
     */
    public ViewLinkImpl getSlsSoToTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoToTrLinesVL1");
    }

    public Boolean isExciseValid() {
        Boolean b = true;
        Row currentRow = getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            Integer ordrType = (Integer) currentRow.getAttribute("OrderType");
            StringBuilder c = null;
            if (ordrType.compareTo(310) == 0 || ordrType.compareTo(309) == 0 || ordrType.compareTo(892) == 0 ||
                ordrType.compareTo(897) == 0) {

                Object callFunction =
                    ADFModelUtils.callFunction(this, new StringBuilder("fn_chk_excise_validation(?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                               EbizParams.GLBL_APP_USR_ORG(), currentRow.getAttribute("DocId"), 21503
                }, Types.VARCHAR);
                if (callFunction != null) {
                    // System.out.println(callFunction + " This is the result of callfunction +++++++++++++++++++++++");
                    if ("Y".equals(callFunction.toString())) {
                        b = true;
                    } else {
                        b = false;
                    }
                } else {
                    b = false;
                }
                if (!b) {
                    ADFModelUtils.showFormattedFacesMessage("The Current Organisation is a Excise Trading Organisation!",
                                                            "Sales Excise Value cannot be more than Purchase Exise Value.",
                                                            FacesMessage.SEVERITY_ERROR);
                }
            }
        }
        return b;
    }

    /**
     * Container's getter for SLSSOTmplDescVO1.
     * @return SLSSOTmplDescVO1
     */
    public ViewObjectImpl getSLSSOTmplDescVO1() {
        return (ViewObjectImpl) findViewObject("SLSSOTmplDescVO1");
    }

    /**
     * Container's getter for MmSoItmPo2.
     * @return MmSoItmPo2
     */
    public ViewObjectImpl getMmSoItmPo2() {
        return (ViewObjectImpl) findViewObject("MmSoItmPo2");
    }

    public void setBindValuesLotFree(String whId, String itmId, String docId) {
        Row r = getSlsSo1().getCurrentRow();
        getViewMmStkSummLotFreeVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getViewMmStkSummLotFreeVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getViewMmStkSummLotFreeVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getViewMmStkSummLotFreeVO1().setNamedWhereClauseParam("BindWhId", r.getAttribute("WhId"));
        getViewMmStkSummLotFreeVO1().setNamedWhereClauseParam("BindItmId", itmId);
        getViewMmStkSummLotFreeVO1().setNamedWhereClauseParam("BindDocId", r.getAttribute("DocId"));
        getViewMmStkSummLotFreeVO1().executeQuery();
    }

    public void setBindValuesLot(String whId, String itmId, String docId) {
        Row r = getSlsSo1().getCurrentRow();
        getViewMmStkSummLot1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getViewMmStkSummLot1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getViewMmStkSummLot1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getViewMmStkSummLot1().setNamedWhereClauseParam("BindWhId", r.getAttribute("WhId"));
        getViewMmStkSummLot1().setNamedWhereClauseParam("BindItmId", itmId);
        getViewMmStkSummLot1().setNamedWhereClauseParam("BindDocId", r.getAttribute("DocId"));
        getViewMmStkSummLot1().executeQuery();
    }

    public void setBindValuesBinFree(String whId, String itmId, String docId) {
        Row r = getSlsSo1().getCurrentRow();
        getViewMmStkSummBinFreeVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getViewMmStkSummBinFreeVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getViewMmStkSummBinFreeVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getViewMmStkSummBinFreeVO1().setNamedWhereClauseParam("BindWhId", r.getAttribute("WhId"));
        getViewMmStkSummBinFreeVO1().setNamedWhereClauseParam("BindItmId", itmId);
        getViewMmStkSummBinFreeVO1().setNamedWhereClauseParam("BindDocId", r.getAttribute("DocId"));
        getViewMmStkSummBinFreeVO1().executeQuery();
    }

    public void setBindValuesBin(String whId, String itmId, String docId) {
        Row r = getSlsSo1().getCurrentRow();
        getViewMmStkSummBin1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getViewMmStkSummBin1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getViewMmStkSummBin1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getViewMmStkSummBin1().setNamedWhereClauseParam("BindWhId", r.getAttribute("WhId"));
        getViewMmStkSummBin1().setNamedWhereClauseParam("BindItmId", itmId);
        getViewMmStkSummBin1().setNamedWhereClauseParam("BindDocId", r.getAttribute("DocId"));
        getViewMmStkSummBin1().executeQuery();
    }

    public void setBindValuesSrFree(String whId, String itmId, String docId) {
        Row r = getSlsSo1().getCurrentRow();
        getViewMmStkSummSrFreeVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getViewMmStkSummSrFreeVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getViewMmStkSummSrFreeVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getViewMmStkSummSrFreeVO1().setNamedWhereClauseParam("BindWhId", r.getAttribute("WhId"));
        getViewMmStkSummSrFreeVO1().setNamedWhereClauseParam("BindItmId", itmId);
        getViewMmStkSummSrFreeVO1().setNamedWhereClauseParam("BindDocId", r.getAttribute("DocId"));
        getViewMmStkSummSrFreeVO1().executeQuery();
    }

    public void setBindValuesSr(String whId, String itmId, String docId) {
        Row r = getSlsSo1().getCurrentRow();
        getViewMmStkSummSr1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getViewMmStkSummSr1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getViewMmStkSummSr1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getViewMmStkSummSr1().setNamedWhereClauseParam("BindWhId", r.getAttribute("WhId"));
        getViewMmStkSummSr1().setNamedWhereClauseParam("BindItmId", itmId);
        getViewMmStkSummSr1().setNamedWhereClauseParam("BindDocId", r.getAttribute("DocId"));
        getViewMmStkSummSr1().executeQuery();
    }

    /**
     *
     * @return
     */
    public Boolean isOrderEligibleToShortClose() {
        Boolean b = false;
        try {
            Row row = getSlsSo1().getCurrentRow();
            Object callF = ADFModelUtils.callFunction(this, new StringBuilder("FN_CHK_SO_PICK_STAT(?,?,?,?,?)"), new Object[] {
                                                      row.getAttribute("CldId"), row.getAttribute("SlocId"),
                                                      row.getAttribute("OrgId"), row.getAttribute("FyId"),
                                                      row.getAttribute("DocId")
            }, Types.VARCHAR);
            String a = (callF == null ? "N" : callF.toString());
            b = ("N".equals(a) ? false : true);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return b;
    }

    /**
     * Container's getter for SlsSoFreeItmLot1.
     * @return SlsSoFreeItmLot1
     */
    public ViewObjectImpl getSlsSoFreeItmLot() {
        return (ViewObjectImpl) findViewObject("SlsSoFreeItmLot");
    }

    /**Method to Check that all Free Items are Issued with full quantity or Not, if Not then it will show Validation Message.
     * @return
     */
    public ArrayList checkFreeItemIssueValidation() {
        System.out.println("Inside free item validator =========================== ");
        this.getSlsSoFreeItmLot().executeQuery();
        ViewObject slsPickItm = this.getSlsSoItmSch1();
        ViewObjectImpl slsPickLot = this.getSlsSoFreeItmLot();
        slsPickLot.setRangeSize(-1);
        ArrayList itemVal = new ArrayList();
        RowSetIterator rsi = slsPickItm.createRowSetIterator(null);
        rsi.setRangeSize(-1);
        while (rsi.hasNext()) {
            Row curItmRow = rsi.next();
            if (curItmRow != null) {
                Number pickedQtyItm = StaticValue.NUMBER_ZERO;
                if (curItmRow.getAttribute("ItmFreeQtyBs") != null) {
                    pickedQtyItm = (Number) curItmRow.getAttribute("ItmFreeQtyBs");
                    System.out.println("Picked Quantity is:  " + pickedQtyItm);
                }
                Number lotTotQty = StaticValue.NUMBER_ZERO;
                RowQualifier rq = new RowQualifier(slsPickLot);
                rq.setWhereClause("CldId='" + curItmRow.getAttribute("CldId") + "' and  SlocId=" +
                                  curItmRow.getAttribute("SlocId") + " and OrgId='" + curItmRow.getAttribute("OrgId") +
                                  "' and DocId='" + curItmRow.getAttribute("DocId") + "' and FreeItmId='" +
                                  curItmRow.getAttribute("ItmId") + "'");
                System.out.println("RowQuali Expression--" + rq.getExprStr());
                Row fltrdRows[] = slsPickLot.getFilteredRows(rq);
                System.out.println("Total Row in Lot for This Item--" + fltrdRows.length + "Item is-" +
                                   curItmRow.getAttribute("ItmId"));
                if (fltrdRows.length > 0) {
                    for (Row r : fltrdRows) {
                        lotTotQty = lotTotQty.add((Number) r.getAttribute("FreeItmQtyBs"));
                    }
                }
                System.out.println("Picked Qty-" + pickedQtyItm + "Total Issued Quantity-" + lotTotQty);
                if (pickedQtyItm.compareTo(lotTotQty) == 0) {

                } else {

                    String itmDesc = null;
                    ViewObjectImpl impl = this.getLovItmNmVo1();
                    impl.setNamedWhereClauseParam("ItmIdBind", curItmRow.getAttribute("ItmId").toString());
                    impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                    impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                    impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                    impl.setNamedWhereClauseParam("ItmDescBind", null);
                    impl.executeQuery();
                    Row[] allRowsInRange = impl.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        itmDesc = allRowsInRange[0].getAttribute("ItmDesc").toString();
                    }
                    itemVal.add(itmDesc);
                    System.out.println("Inside Else ++" + itmDesc);
                }
            }
        }
        rsi.closeRowSetIterator();
        System.out.println("Un-Issued Free Items +++++++++++++   " + itemVal);
        return itemVal;
    }

    /**
     * Method to call AppCostCenterServiceAMImpl from cost center Jar
     * */

    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 21503);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            SlsSoVOImpl impl = this.getSlsSo1();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();

                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "H", 21503,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                           new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

            }
        }
    }


    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 21503);

        Row currentRow = this.getSlsSoItm1().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getSlsSoItm1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                              System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                              System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                 attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                              */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        //  System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            //  System.out.println("i is " + i + " Cost center Value is " +
                            //                   currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    //   System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    public void declareGlblValuesForCC1(Row currentRow) {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 21503);

        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getSlsSoItm1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                              System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                              System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                 attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                              */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        //   System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            //     System.out.println("i is " + i + " Cost center Value is " +
                            //                       currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    //   System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDateFromTempCcToSlsSoCc() {
        if (chkCcApplicableOrNot()) {
            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21503, "SLS",
                               "sls$so$cost$center", this.getSlsSo1().getCurrentRow().getAttribute("DocId")
            });
        }
    }


    /**
     * Method which will be called when user click on generate Cost Ceneter in Detail Part
     */
    public void generateCostCenter() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            SlsSoItmVOImpl impl = this.getSlsSoItm1();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();
                //  System.out.println(currentRow.getAttribute("AsblAmtSp") + " n***************************** aslbAmtSp");
                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "L", 21503,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                           (Number) currentRow.getAttribute("ItmAmtGsSp"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

                /* ADFModelUtils.showFormattedFacesMessage("Cost ceneter", "Data Inserted into cost center successfullt",
                                                    FacesMessage.SEVERITY_INFO); */

            }
        }
    }


    /**
     * Method which will call cost center bean0.0000
     */
    public void deleteCostCenterItem() {
        if (chkCcApplicableOrNot()) {
            //  System.out.println("Inside delete method");

            SlsSoItmVOImpl impl = this.getSlsSoItm1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                //   System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       currentRow.getAttribute("DocId").toString(), "L", 21506,
                                       EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

                }
            }
            //  System.out.println("After calling delete method");
        }
    }


    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {
        if (chkCcApplicableOrNot()) {
            // System.out.println("Inside cost ceneter update amount method");
            SlsSoItmVOImpl impl = this.getSlsSoItm1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ItmAmtGsSp") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                //  System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    //  System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", 21503,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("ItmAmtGsSp"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            //   System.out.println("After calling Update method");
        }
    }

    public void updateCostCenterOnSave() {
        //   System.out.println(" Inside AM Method to save all the item for cost ceneter ::::::::::::::::::");
        if (chkCcApplicableOrNot()) {
            //    System.out.println("Inside cost ceneter update amount method");
            SlsSoItmVOImpl impl = this.getSlsSoItm1();
            Row allRow[] = impl.getAllRowsInRange();
            for (int i = 0; i < allRow.length; i++) {
                if (allRow[i].getAttribute("CcId") != null && allRow[i].getAttribute("ItmAmtGsSp") != null) {
                    AppCostCenterServiceAMImpl amCC = getAppAM();
                    //      System.out.println("Inside Am after cresting object");
                    if (amCC != null) {
                        String P_CC_LEVEL1 = resolvElO("#{pageFlowScope.P_CC_LEVEL1}") == null ? null : resolvElO("#{pageFlowScope.P_CC_LEVEL1}").toString();
                        String P_CC_LEVEL2 = resolvElO("#{pageFlowScope.P_CC_LEVEL2}")== null ? null : resolvElO("#{pageFlowScope.P_CC_LEVEL2}").toString();
                        String P_CC_LEVEL3 = resolvElO("#{pageFlowScope.P_CC_LEVEL3}")== null ? null : resolvElO("#{pageFlowScope.P_CC_LEVEL3}").toString();
                        String P_CC_LEVEL4 = resolvElO("#{pageFlowScope.P_CC_LEVEL4}")== null ? null : resolvElO("#{pageFlowScope.P_CC_LEVEL4}").toString();
                        String P_CC_LEVEL5 = resolvElO("#{pageFlowScope.P_CC_LEVEL5}") == null ? null : resolvElO("#{pageFlowScope.P_CC_LEVEL5}").toString();
                        declareGlblValuesForCC1(allRow[i]);
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                allRow[i].getAttribute("DocId").toString(), "L", 21503,
                                                EbizParams.GLBL_APP_USR(), allRow[i].getAttribute("CcId").toString(),
                                                (Number) allRow[i].getAttribute("ItmAmtGsSp"), P_CC_LEVEL1,P_CC_LEVEL2,P_CC_LEVEL3,P_CC_LEVEL4,P_CC_LEVEL5
                                               );
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
            }
        }
    }


    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }

    /**
     * Method to get the default scheme per item qty for a customer
     * (
		p_sloc_id NUMBER,
		p_cld_id  VARCHAR2,
		p_org_id  VARCHAR2,
		p_itm_id  VARCHAR2,
		p_eo_id   NUMBER,
		p_grp_id  VARCHAR2,
		p_exec_id NUMBER,
		p_catg_id NUMBER,
		p_tran_dt DATE,
		p_qty     NUMBER,
		p_amt     NUMBER )
     */
    public String setDefaultSchemPerQty() {
        String schemName = null;
        String schemId = null;
        Object us = checkforProfileValuesObjectReturnV(new StringBuffer("use_dflt_schm"));
        String autoSchm = us.toString();
        if (autoSchm.equalsIgnoreCase("Y")) {

            Object x = null;
            Row r = getSlsSoItm1().getCurrentRow();
            //   System.out.println(r + " ----------------------- the current Row");
            x = ADFModelUtils.callFunction(this, new StringBuilder("fn_get_elgbl_schm_id(?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                           EbizParams.GLBL_APP_USR_ORG(), r.getAttribute("ItmId"),
                                           r.getAttribute("EoIdFromHeadTrans"), r.getAttribute("ItmGrpIdTrans"),
                                           r.getAttribute("EoExecIdFromHeadTrans"),
                                           r.getAttribute("EoCatgIdFromHeadTrans"), r.getAttribute("UsrIdCreateDt"),
                                           r.getAttribute("ItmQty"), r.getAttribute("ItmRate")
            }, Types.VARCHAR);
            //   System.out.println(" ============ the scheme id " + schemId);

            schemId = x == null ? null : (String) x;
            if (schemId != null) {
                r.setAttribute("SchId", schemId);


                getLOVSchemeIdVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
                getLOVSchemeIdVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
                getLOVSchemeIdVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
                getLOVSchemeIdVO1().setNamedWhereClauseParam("BindSchmId", schemId);
                getLOVSchemeIdVO1().executeQuery();
                Row s[] = getLOVSchemeIdVO1().getAllRowsInRange();
                if (s.length > 0) {
                    schemName = s[0].getAttribute("SchmNm") == null ? null : (String) s[0].getAttribute("SchmNm");
                }
            }
            //  System.out.println("Scheme name ======== " + schemName);
        }
        return schemId;
    }

    /**
     * Method to check cost center is applicable for this sales order or not.
     */

    public Boolean isCostCenterApplicable() {
        Boolean b = false;
        try {
            // App.fn_is_cost_center_present(p_cld_id,p_sloc_id,p_ho_org_id,p_org_id,p_doc_id)
            Object callF =
                ADFModelUtils.callFunction(this, new StringBuilder("App.fn_is_cost_center_present(?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21503
            }, Types.NUMERIC);
            java.math.BigDecimal a = (callF == null ? new java.math.BigDecimal(0) : (java.math.BigDecimal) callF);
            b = (a.compareTo(new java.math.BigDecimal(1)) == 0 ? true : false);
            //System.out.println(" ############################# the value of cost center appp  " + b +"   no. of rows "+ a);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return b;
    }

    public void deleteAllDeliverySchedule() {
        ViewCriteria vo = getSlsSoDlvSchdl1().getViewCriteria("SlsSoDlvSchdlVOCriteria");
        getSlsSoDlvSchdl1().applyViewCriteria(vo);
        Row currentRow = getSlsSo1().getCurrentRow();
        //  System.out.println("deletting for sales order ********* "+ currentRow.getAttribute("DocId"));
        getSlsSoDlvSchdl1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getSlsSoDlvSchdl1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getSlsSoDlvSchdl1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getSlsSoDlvSchdl1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getSlsSoDlvSchdl1().setNamedWhereClauseParam("BindDocId", currentRow.getAttribute("DocId"));
        getSlsSoDlvSchdl1().executeQuery();

        Row[] r = getSlsSoDlvSchdl1().getFilteredRows("IsItemPicked", "N");
        //    System.out.println("Inside delet all method ================== " + r.length);
        for (int i = 0; i < r.length; i++) {
            //   System.out.println(" Row with delivery date removed ======= "+ r[i].getAttribute("DlvDt"));
            r[i].remove();
        }
        getDBTransaction().postChanges();
        getSlsSoDlvSchdl1().executeQuery();

    }

    /** Method to check weather any item is selected or not for Purchase Order
     * @return
     */
    public Boolean isItemsForSuggestedOrderSelected() {
        Boolean b = false;
        RowSetIterator cItr = this.getMmSoItmPo1().createRowSetIterator(null);
        while (cItr.hasNext()) {
            Row next = cItr.next();
            Object chckedO = next.getAttribute("CheckItemTrans");
            //  System.out.println("Checked : " + chckedO);
            StringBuilder g = (chckedO == null ? new StringBuilder("") : new StringBuilder(chckedO.toString()));
            if (g.toString().equals("Y")) {
                b = true;
                break;
            }
        }
        cItr.closeRowSetIterator();

        Boolean c = true;
        ViewObject dlvView = this.getMmSoItmPo1();
        RowSetIterator rit = dlvView.createRowSetIterator(null);
        /** Iterate through every visible row of view */
        while (rit.hasNext()) {
            Row row = rit.next();
            Integer id = (row.getAttribute("EoId") == null ? 0 : (Integer) row.getAttribute("EoId"));
            StringBuilder r =
                (row.getAttribute("CheckItemTrans") == null ? new StringBuilder("N") :
                 new StringBuilder(row.getAttribute("CheckItemTrans").toString()));
            if (r.equals("Y")) {
                if (id == 0) {
                    c = false;
                    break;
                }
            }
        }
        rit.closeRowSetIterator();


        if (b == false) {
            FacesMessage message2 = new FacesMessage("Please select an Item before Grouping Items !");
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
        }
        if (c == false) {
            FacesMessage message2 =
                new FacesMessage("Supplier for one or more Items is not selected. Please select a Supplier for selected Item !");
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
        }

        Boolean e = ((b && c) == false ? false : true);
        //   System.out.println("Returned : " + e);

        return e;
    }

    /**Method to group selected item in Sugested Order.
     */
    public void groupSelectedItem() {
        Integer itmCount = 0;
        String grpId = null;

        ViewObjectImpl grpVO = this.getMmSoGrp1();
        ViewObjectImpl soItempo = this.getMmSoItmPo1();
        MMGrpHdrTempVOImpl tempGrpVo = this.getMMGrpHdrTemp1();
        ViewObject tempGrpDtlVo = this.getMMGrpItmDtlTemp1();
        ViewObject mmSoItm = this.getMmSoItm1();
        Row soItmPoRow = soItempo.getCurrentRow();
        String doc_id = null;
        if (soItmPoRow.getAttribute("DocId") != null) {
            doc_id = soItmPoRow.getAttribute("DocId").toString();
        }
        Row filtrdRow[] = mmSoItm.getFilteredRows("DocId", doc_id);
        _log.info("Total Rows In SoItm-->" + filtrdRow.length);
        if (filtrdRow.length > 0) {
            _log.info("grp--" + filtrdRow[0].getAttribute("SoGrpId"));
            if (filtrdRow[0].getAttribute("SoGrpId") != null) {
                grpId = filtrdRow[0].getAttribute("SoGrpId").toString();
            }
        } else {
            grpId =
                getGroupId(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG());
        }


        RowSetIterator rsit = this.getMmSoItmPo1().createRowSetIterator(null);
        while (rsit.hasNext()) {
            Row itmpoRow = rsit.next();
            _log.info("CheckBox Value is-->" + itmpoRow.getAttribute("CheckItemTrans"));
            if (itmpoRow.getAttribute("CheckItemTrans") != null &&
                itmpoRow.getAttribute("CheckItemTrans").equals("Y")) {
                String purItmId = itmpoRow.getAttribute("ItmId").toString();
                Number qty = (Number) itmpoRow.getAttribute("OrdQty");

                String baseUom = EbizParamsMMUtils.getUomOfPassedItm(this, purItmId, "B");
                String purUom = EbizParamsMMUtils.getUomOfPassedItm(this, purItmId, "P");
                //ApplicationModuleImpl am, String itmId, String itmUom, String baseUom
                Object tmpConUom = EbizParamsMMUtils.getItmUomConvFactor(this, purItmId, purUom, baseUom);
                System.out.println(tmpConUom + " <<< uom converstion factor");
                Number uomConFac = new Number(1);
                if (tmpConUom != null) {
                    try {
                        uomConFac = (Number) tmpConUom;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }

                Number newQty = qty.multiply(uomConFac);
                newQty = ADFBeanUtils.roundOff(newQty);
                System.out.println(newQty + " <<< New Qty");
                System.out.println(qty + " <<<  original Qty");
                itmCount++;
                Row createRow = grpVO.createRow();
                createRow.setAttribute("SlocId", itmpoRow.getAttribute("SlocId"));
                createRow.setAttribute("OrgId", itmpoRow.getAttribute("OrgId"));
                createRow.setAttribute("CldId", itmpoRow.getAttribute("CldId"));
                createRow.setAttribute("SoGrpId", grpId);
                createRow.setAttribute("EoId", itmpoRow.getAttribute("EoId"));
                createRow.setAttribute("ItmId", purItmId);
                createRow.setAttribute("ItmUom", purUom);
                createRow.setAttribute("TotSoQty", qty);
                grpVO.insertRow(createRow);

                Row soItmRow = mmSoItm.createRow();
                mmSoItm.insertRow(soItmRow);

                soItmRow.setAttribute("SlocId", itmpoRow.getAttribute("SlocId"));
                soItmRow.setAttribute("OrgId", itmpoRow.getAttribute("OrgId"));
                soItmRow.setAttribute("ItmId", purItmId);
                soItmRow.setAttribute("OrdQty", newQty);
                soItmRow.setAttribute("ItmUom", purUom);
                soItmRow.setAttribute("DocId", itmpoRow.getAttribute("DocId"));
                soItmRow.setAttribute("EoId", itmpoRow.getAttribute("EoId"));
                soItmRow.setAttribute("SoGrpId", grpId);
                soItmRow.setAttribute("CldId", itmpoRow.getAttribute("CldId"));
                soItmRow.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
                soItmRow.setAttribute("SoQty", qty);
                soItmRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            }
        }
        rsit.closeRowSetIterator();
        if (itmCount == 0) {
            FacesMessage errMsg = new FacesMessage("Select Items to Group");
            errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, errMsg);
        } else {
            _log.info("Before Post Changes");
            this.getDBTransaction().postChanges();

            tempGrpVo.setsoGrpIdBind(grpId);
            grpVO.executeQuery();
            tempGrpDtlVo.executeQuery();
            tempGrpVo.executeQuery();
            soItempo.executeQuery();
            refreshChildGroupTree(grpId);
            _log.info("Row in Group Detail-->" + tempGrpVo.getRowCount());
        }
    }

    /**Method to Ungroup selected item in Sugested Order.
     */

    public void filterGroupedItem(String soDocId) {
        //  System.out.println("Inside filter group method");
        String grpId = null;
        String doc_id = null;

        //ViewObject empVO = this.createViewObject
        Row r[] = getMmSoItmPo1().getFilteredRows("PoDocId", soDocId);
        if (r.length > 0) {

            if (r[0].getAttribute("DocId") != null) {
                doc_id = r[0].getAttribute("DocId").toString();
            }
            Row filtrdRow[] = this.getMmSoItm1().getFilteredRows("DocId", doc_id);
            //   System.out.println("Total Rows In SoItm-->" + filtrdRow.length);
            if (filtrdRow.length > 0) {
                //        System.out.println("grp--" + filtrdRow[0].getAttribute("SoGrpId"));
                if (filtrdRow[0].getAttribute("SoGrpId") != null) {
                    grpId = filtrdRow[0].getAttribute("SoGrpId").toString();
                }
            }
        } else {
            grpId =
                getGroupId(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG());
        }

        //  System.out.println(" Group Id  == " + grpId);

        getMMGrpHdrTemp1().setsoGrpIdBind(grpId);
        getMMGrpHdrTemp1().executeQuery();


    }

    public void filterEmployees(Integer empId, String instanceName) {
        if (instanceName != null) {
            //  System.out.println("Instance name=" + instanceName);
            ViewObject empVoInstance = findViewObject(instanceName);
            if (empVoInstance == null) {
                ViewObject empVO = this.createViewObject(instanceName, this.getMmSoItmPo1().getDefFullName());
                ViewCriteria vc = empVO.createViewCriteria();
                ViewCriteriaRow vcRow = vc.createViewCriteriaRow();
                vcRow.setAttribute("EmployeeId", "= " + empId);
                vc.addElement(vcRow);
                empVO.applyViewCriteria(vc);
                this.findViewObject(instanceName).executeQuery();
            } else {
                //instance will be reused
            }
            /*  this.getEmployeesVO().setNamedWhereClauseParam("empIdBindVar", empId);
        this.getEmployeesVO().executeQuery(); */
        }
    }

    /**Method to generate Draft Po after Item Grouping.
     */

    public void genDrftPurOrder() {
        String grpId = null;
        Integer eoId = null;
        Integer selectCount = 0;
        Integer retVal = 0;
        ViewObject grpTemp = this.getMMGrpHdrTemp1();
        ViewObject slsSo = this.getSlsSo1();
        ViewObject drftPo = this.getMMDrftPoView1();
        Row soRow = slsSo.getCurrentRow();
        Timestamp txnDt = (Timestamp) soRow.getAttribute("DocDt");
        RowSetIterator rsi = grpTemp.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row grpHdrCurRow = rsi.next();
            _log.info("Select Supp Flag-->" + grpHdrCurRow.getAttribute("SelectSuppTrans"));
            if (grpHdrCurRow.getAttribute("SelectSuppTrans") != null &&
                grpHdrCurRow.getAttribute("SelectSuppTrans").equals("true")) {
                selectCount = selectCount + 1;
                _log.info("Count is-->" + selectCount);
                if (grpHdrCurRow.getAttribute("SoGrpId") != null) {
                    grpId = grpHdrCurRow.getAttribute("SoGrpId").toString();
                }
                if (grpHdrCurRow.getAttribute("EoIdGrp") != null) {
                    eoId = Integer.parseInt(grpHdrCurRow.getAttribute("EoIdGrp").toString());
                }
                _log.info("Sloc-" + EbizParams.GLBL_APP_SERV_LOC() + "cldId-" + EbizParams.GLBL_APP_CLD_ID() +
                          "orgId-" + EbizParams.GLBL_APP_USR_ORG() + "grpId-" + grpId + "eoid-" + eoId + "userId-" +
                          EbizParams.GLBL_APP_USR() + "hoOrg-" + EbizParams.GLBL_HO_ORG_ID());
                retVal =
                    insSuppItmGrp(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                  EbizParams.GLBL_APP_USR_ORG(), grpId, eoId, EbizParams.GLBL_APP_USR(),
                                  EbizParams.GLBL_HO_ORG_ID());
            }

        }
        rsi.closeRowSetIterator();
        if (selectCount == 0) {
            String mass = resolvEl("#{bundle['MSG.466']}");
            FacesMessage msg = new FacesMessage(mass);
            msg.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fctx = FacesContext.getCurrentInstance();
            fctx.addMessage(null, msg);
        } else if (retVal != -1) {
            this.getDBTransaction().commit();
            generatePO(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(),
                       grpId, 171, EbizParams.GLBL_APP_USR(), EbizParams.GLBL_HO_ORG_ID(),
                       EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this));
            this.getDBTransaction().commit();

            MMGrpHdrTempVOImpl tempGrpVo = this.getMMGrpHdrTemp1();
            tempGrpVo.setsoGrpIdBind(grpId);
            tempGrpVo.executeQuery();

            drftPo.setWhereClause("SO_GRP_ID='" + grpId + "'");
            drftPo.executeQuery();

        }
    }

    /**Method to populate data in MM$SO$ITM$PO from SLS$SO$ITM.
     */
    public void populateSoToSoItmPo() {
        String docId = this.getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        String isPoExist =
            isPoCreated(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(),
                        docId);

        RowSetIterator rsi = this.getSlsSoItm1().createRowSetIterator(null);
        if (this.getMmSoItmPo1().getRowCount() == 0 && isPoExist.equalsIgnoreCase("N")) {
            Row mmSoRow = this.getMmSo1().createRow();
            while (rsi.hasNext()) {
                Row itmRow = rsi.next();
                String purItmId = itmRow.getAttribute("ItmId").toString();
                Number qty = (Number) itmRow.getAttribute("ItmQtyBs");
                String baseUom = EbizParamsMMUtils.getUomOfPassedItm(this, purItmId, "B");
                String purUom = EbizParamsMMUtils.getUomOfPassedItm(this, purItmId, "P");
                //ApplicationModuleImpl am, String itmId, String itmUom, String baseUom

                Object tmpConUom = EbizParamsMMUtils.getItmUomConvFactor(this, purItmId, purUom, baseUom);
                System.out.println(tmpConUom + " <<< uom converstion factor");
                Number uomConFac = new Number(1);
                if (tmpConUom != null) {
                    try {
                        uomConFac = (Number) tmpConUom;

                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                System.out.println(uomConFac + " <<< Final converstion factor Qty");
                Number newQty = qty.multiply(uomConFac);
                newQty = ADFBeanUtils.roundOff(newQty);
                System.out.println(newQty + " <<< New Qty");
                System.out.println(qty + " <<<  original Qty");

                Row poRow = getMmSoItmPo1().createRow();
                poRow.setAttribute("ItmId", purItmId);
                poRow.setAttribute("OrdQty", newQty);
                poRow.setAttribute("ItmUom", purUom);
                poRow.setAttribute("DocId", mmSoRow.getAttribute("DocId"));
                poRow.setAttribute("ItmPrice", itmRow.getAttribute("ItmRate"));
                poRow.setAttribute("ItemSelPriceTrans", itmRow.getAttribute("ItmRate"));

                _log.info("Doc Id In SpItmPo is-->" + mmSoRow.getAttribute("DocId"));
            }
            rsi.closeRowSetIterator();
            MMGrpHdrTempVOImpl tempGrpVo = this.getMMGrpHdrTemp1();
            tempGrpVo.setsoGrpIdBind("1");
            tempGrpVo.executeQuery();
            this.getMmSoItmPo1().executeQuery();
        } else {
            //   System.out.println(" ******************************** filtering drouped item");
            //  filterGroupedItem(docId);
        }


    }


    public void insertSoToSoItmPo(String docId) {
        getDBTransaction().postChanges();
        String isPoExist =
            isPoCreated(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(),
                        docId);

        RowSetIterator rsi = this.getSlsSoItm1().createRowSetIterator(null);
        if (this.getMmSoItmPo1().getRowCount() == 0 && isPoExist.equalsIgnoreCase("N")) {
            Row mmSoRow = this.getMmSo1().createRow();
            while (rsi.hasNext()) {
                Row itmRow = rsi.next();
                Row poRow = getMmSoItmPo1().createRow();

                String purItmId = itmRow.getAttribute("ItmId").toString();
                Number qty = (Number) itmRow.getAttribute("ItmQtyBs");
                String baseUom = EbizParamsMMUtils.getUomOfPassedItm(this, purItmId, "B");
                String purUom = EbizParamsMMUtils.getUomOfPassedItm(this, purItmId, "P");
                //ApplicationModuleImpl am, String itmId, String itmUom, String baseUom
                Object tmpConUom = EbizParamsMMUtils.getItmUomConvFactor(this, purItmId, purUom, baseUom);
                System.out.println(tmpConUom + " <<< uom converstion factor");
                Number uomConFac = new Number(1);
                if (tmpConUom != null) {
                    try {
                        uomConFac = (Number) tmpConUom;
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                Number newQty = qty.multiply(uomConFac);
                newQty = ADFBeanUtils.roundOff(newQty);
                System.out.println(newQty + " <<< New Qty");
                System.out.println(qty + " <<<  original Qty");
                // soItmPo.insertRow(poRow);
                poRow.setAttribute("ItmId", purItmId);
                poRow.setAttribute("OrdQty", newQty);
                poRow.setAttribute("ItmUom", purUom);
                poRow.setAttribute("DocId", mmSoRow.getAttribute("DocId"));
                poRow.setAttribute("ItmPrice", itmRow.getAttribute("ItmRate"));
                poRow.setAttribute("ItemSelPriceTrans", itmRow.getAttribute("ItmRate"));

                _log.info("Doc Id In SpItmPo is-->" + mmSoRow.getAttribute("DocId"));
            }
            rsi.closeRowSetIterator();
            MMGrpHdrTempVOImpl tempGrpVo = this.getMMGrpHdrTemp1();
            tempGrpVo.setsoGrpIdBind("1");
            tempGrpVo.executeQuery();
            this.getMmSoItmPo1().executeQuery();
        }

        //        MMGrpHdrTempVOImpl tempGrpVo = this.getMMGrpHdrTemp1();
        //        tempGrpVo.setsoGrpIdBind("1");
        //        tempGrpVo.executeQuery();
        //        this.getMmSoItmPo1().executeQuery();
    }

    public void rollbackSuggestedOrder() {
        String docId = this.getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        //  if (!isSupplierSelected()) {
        removePoItem(docId);
        getMmSoItmPo1().executeQuery();
        //   getDBTransaction().postChanges();
        //  }

    }

    /**
     * method to remove item from mmsoitmpo
     */
    public void removePoItem(String docId) {

        Row r[] = getMmSoItmPo2().getFilteredRows("PoDocId", docId);
        System.out.println(r.length + " ============ the length of the row");
        if (r.length > 0) {
            for (int i = 0; i < r.length; i++) {
                r[i].remove();
                System.out.println("Row removed. ");
            }
            getMmSoItmPo2().executeQuery();
        }
    }

    /**
     * Method to check if the supplier is selected for any given item
     */
    public Boolean isSupplierSelected() {
        Boolean b = false;
        String docId = this.getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        ArrayList<String> itemList = new ArrayList<String>();
        ArrayList<String> suppList = new ArrayList<String>();

        Row r[] = this.getMmSoItmPo1().getFilteredRows("PoDocId", docId);
        //  System.out.println(r.length + " ============ the length of the row");
        if (r.length > 0) {
            for (int i = 0; i < r.length; i++) {
                itemList.add(r[i].getAttribute("ItmId").toString());
                if (r[i].getAttribute("EoId") != null) {
                    suppList.add(r[i].getAttribute("EoId").toString());
                }
                //    System.out.println("Item Added.===  " + r[i].getAttribute("ItmId"));
                //   System.out.println("Supp Added.===  " + r[i].getAttribute("EoId"));
            }
            getMmSoItmPo1().executeQuery();
        }
        Integer totItem = itemList.size();
        Integer totSupp = suppList.size();
        //  System.out.println("Item Size.======  " + totItem);
        //   System.out.println("Supp Size.======  " + totSupp);
        if (totItem.compareTo(totSupp) == 0) {
            b = true;
        }
        return b;
    }

    /**Method to generate group Id.
     * @param sloc
     * @param cld
     * @param org
     * @return
     */
    public String getGroupId(Integer sloc, String cld, String org) {

        String soId = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {
                                                  sloc, cld, org, "MM$SO$EO$ITM$GRP", null, null
        });
        return soId;
    }

    /**Method to check whether PO is created or not for current Back order type Sales Order.
     * @param slocId
     * @param cldId
     * @param orgId
     * @param docId
     * @return
     */

    public String isPoCreated(Integer slocId, String cldId, String orgId, String docId) {
        Row currentRow = this.getSlsSo1().getCurrentRow();
        String retVal = "N";
        if (currentRow != null) {
            Object orderTypeO = currentRow.getAttribute("OrderType");
            Integer ordrTyp = (orderTypeO == null ? -1 : (Integer) orderTypeO);
            if (ordrTyp.equals(312)) {
                retVal = (String) callStoredFunction(Types.VARCHAR, "SLS.FN_CHK_SO_TO_SUGG (?,?,?,?)", new Object[] {
                                                     slocId, cldId, orgId, docId
                });
            }
        }
        System.out.println(retVal + " Return value of function SLS.FN_CHK_SO_TO_SUGG ");
        return retVal;
    }


    /**Method to refresh Child of Tree Table (Group Items).
     * @param grpId
     */
    public void refreshChildGroupTree(String grpId) {
        ViewObjectImpl vo = this.getMMGrpHdrTemp1();
        _log.info("GrpId in refrsh--" + grpId);

        Row[] grpRow = vo.getFilteredRows("SoGrpId", grpId);
        _log.info("Row in GrpHeader-" + grpRow.length);
        if (grpRow.length > 0) {
            RowSet childRows = (RowSet) grpRow[0].getAttribute("MMGrpItmDtlTemp");
            childRows.executeQuery();
        }
    }

    /**Method call to insert item wise supplier.
     * @param p_SLOCID
     * @param p_CLDID
     * @param p_ORGID
     * @param p_SOGRPID
     * @param p_EOID
     * @param p_USRID
     * @param pHoOrgId
     * @return
     */
    public Integer insSuppItmGrp(Integer p_SLOCID, String p_CLDID, String p_ORGID, String p_SOGRPID, Integer p_EOID,
                                 Integer p_USRID, String pHoOrgId) {
        Integer retVal = Integer.parseInt(callStoredFunction(Types.INTEGER, "SLS.FN_INS_SUPP_ITM_GRP (?,?,?,?,?,?,?)", new Object[] {
                                                             p_SLOCID, p_ORGID, p_CLDID, pHoOrgId, p_SOGRPID, p_EOID,
                                                             p_USRID
        }).toString());

        return retVal;
    }

    /**Method call to generate Draft Po.
     * @param p_SLOCID
     * @param p_CLDID
     * @param p_ORGID
     * @param p_SOGRPID
     * @param p_POTYPE
     * @param p_USRID
     * @param pHoOrgId
     * @param fyId
     */
    public void generatePO(Integer p_SLOCID, String p_CLDID, String p_ORGID, String p_SOGRPID, Integer p_POTYPE,
                           Integer p_USRID, String pHoOrgId, Integer fyId) {
        Integer retVal =
            Integer.parseInt(callStoredFunction(Types.INTEGER, "SLS.FN_GEN_DRFT_PO_FRM_SO (?,?,?,?,?,?,?,?)", new Object[] {
                                                p_SLOCID, p_CLDID, p_ORGID, pHoOrgId, p_SOGRPID, p_POTYPE, p_USRID, fyId
        }).toString());
    }


    /**Method to calculate total issued quantity
     * @return
     */
    public Number getTotalItemIssueQtyLot(String itmId) {
        //  int totalCount =this.getRowCount();
        //   this.setRangeSize(totalCount);
        // System.out.println(itmId + "  Lot for this item");
        String tmpImId = null;
        if (itmId == null) {
            Row x = getSlsSoItm1().getCurrentRow();
            tmpImId = x.getAttribute("ItmId") == null ? null : x.getAttribute("ItmId").toString();
        }
        // System.out.println(tmpImId + " ----- item id from current row");
        Row[] rr = this.getViewMmStkSummLot1().getFilteredRows("ItmId", itmId);
        //  System.out.println(rr.length + " ==== This is the length of Total lot for this item ==== " + itmId);
        Number totIssue = new Number(0);
        Number zero = new Number(0);
        for (Row r : rr) {
            if (r.getAttribute("TransIssuQtyValue") != null) {
                if (((Number) r.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                    totIssue = totIssue.add((Number) r.getAttribute("TransIssuQtyValue"));
                }
            }
        }
        ///  System.out.println("Sum of lot is ===== " + totIssue);
        return totIssue;
    }

    /**
     * Method to generate transfer order
     */
    public Boolean genTransferOrder(Row curRow) {
        Boolean sucess = true;

        Object amdO = curRow.getAttribute("AmdNo");
        Integer amd = (amdO == null ? 0 : Integer.parseInt(amdO.toString()));
        if (amd == 0) {
            Integer i = 0;
            try {
                i = (Integer) callStoredFunction(Types.INTEGER, "SLS.FN_INS_SO_TO_TRF(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                 EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                 EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this),
                                                 curRow.getAttribute("DocDt"), curRow.getAttribute("DocId").toString(),
                                                 EbizParams.GLBL_APP_USR(), new Timestamp(System.currentTimeMillis())
                });
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'SLS.FN_INS_SO_TO_TRF' ! " +
                                     e.getMessage());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
                sucess = false;
            }
        }
        return sucess;
    }

    /**
     * Container's getter for PickDtlsVO1.
     * @return PickDtlsVO1
     */
    public ViewObjectImpl getPickDtlsVOForTracking() {
        return (ViewObjectImpl) findViewObject("PickDtlsVOForTracking");
    }

    /**
     * Container's getter for ShipmntDtlsVO1.
     * @return ShipmntDtlsVO1
     */
    public ViewObjectImpl getShipmntDtlsForTracking() {
        return (ViewObjectImpl) findViewObject("ShipmntDtlsForTracking");
    }

    /**
     * Container's getter for PickToShipVL1.
     * @return PickToShipVL1
     */
    public ViewLinkImpl getPickToShipVL1() {
        return (ViewLinkImpl) findViewLink("PickToShipVL1");
    }

    /**
     * Container's getter for InvoiceDtlsVO1.
     * @return InvoiceDtlsVO1
     */
    public ViewObjectImpl getInvoiceDtlsForTracking() {
        return (ViewObjectImpl) findViewObject("InvoiceDtlsForTracking");
    }

    /**
     * Container's getter for ShipToInvVL1.
     * @return ShipToInvVL1
     */
    public ViewLinkImpl getShipToInvVL1() {
        return (ViewLinkImpl) findViewLink("ShipToInvVL1");
    }

    /**
     *  Method to set bind validables on Pick Tracking
     */
    public void methodToSetVarsToPickTracking() {
        Row currentRow = getSlsSo1().getCurrentRow();
        ViewObjectImpl dtlsVOForTracking = getPickDtlsVOForTracking();
        dtlsVOForTracking.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocId"));
        dtlsVOForTracking.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("OrgId"));
        dtlsVOForTracking.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgId"));
        dtlsVOForTracking.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldId"));
        dtlsVOForTracking.setNamedWhereClauseParam("SoDocIdBind", currentRow.getAttribute("DocId"));
        dtlsVOForTracking.executeQuery();
    }

    /**
     * Method to get the default part no for the item
     * FN_GET_EOPART_NO
     * (P_SLOC_ID NUMBER,
     * P_CLD_ID VARCHAR2,
     * P_ORG_ID VARCHAR2,
     * P_ITM_ID
     * VARCHAR2,
     * P_EO_ID VARCHAR2)
     */
    public String getDefaultPartNo(String itmId) {
        String defPartNo = null;
        String chkPrfVals =
            (String) SoAmHelper.checkforProfileValuesObjectReturnV(this, new StringBuffer("USE_PART_NO_IN_TRAN"));
        if (chkPrfVals.equalsIgnoreCase("Y")) {
            String eoId = getSlsSo1().getCurrentRow().getAttribute("EoId").toString();

            try {
                defPartNo = (String) callStoredFunction(Types.VARCHAR, "SLS.FN_GET_EOPART_NO(?,?,?,?,?)", new Object[] {
                                                        EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                        EbizParams.GLBL_APP_USR_ORG(), itmId, eoId
                });

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'SLS.FN_GET_EOPART_NO' ! " +
                                     e.getMessage());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
            // System.out.println(defPartNo + "  <<---- part no for this item " + itmId);
        }

        return defPartNo;
    }

    /**Disclosure Listener for panel tab to execute viewObject data for delivery schedule.
     */
    public void refreshSchdlDiscList() {
        /**
         * SlsSoVOImpl slsSo = this.getSlsSo1();
        Row row = this.getSlsSo1().getCurrentRow();
        row.getKey();
        String docId = this.getSlsSo1().getCurrentRow().getAttribute("DocId").toString();
        this.getDBTransaction().postChanges();
        executeViewObjects();
        slsSo.executeQuery();
        slsSo.setBindVar(EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                         docId, EbizParams.GLBL_APP_CLD_ID());
        slsSo.findAndSetCurrentRowByKey(row.getKey(), 1);
        */
        ViewObjectImpl dlvSchdl = this.getDlvShdlView1();
        dlvSchdl.setNamedWhereClauseParam("FlagBind", 0);
        dlvSchdl.executeQuery();
        getSlsSoDlvSchdl1().executeQuery();
    }

    /**
     *Method to check is stock available for release or not
     * @return
     */
    protected Boolean isQtyAvlblForReles() {
        Boolean b = false;
        Row currentRow = getSlsSo1().getCurrentRow();
        try {
            Object callFunction =
                ADFModelUtils.callFunction(this, new StringBuilder("sls.FN_CHK_SO_RESV_STK_ITM(?,?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_APP_USR_ORG(), currentRow.getAttribute("WhId"),
                                           currentRow.getAttribute("FyId"), currentRow.getAttribute("DocId")
            }, Types.VARCHAR);
            if (callFunction == null) {
                b = false;
            } else if ("Y".equals(callFunction.toString())) {
                b = true;
            } else {
                b = false;
            }

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_CHK_SO_RESV_STK_ITM' ! " +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            b = false;
            e.printStackTrace();
        }
        return b;
    }

    /**
     *  Method to fetch default TaxRule Id
     */
    protected void fetchAndSetDefaultTaxItemWise(Row row) {
        Integer taxRuleId = getDefaultTaxRuleId("I");
        if (taxRuleId != -1) {
            row.setAttribute("TaxRuleId", taxRuleId);
            procTaxItem(taxRuleId);
        }
    }

    /**
     *  Method to fetch default TaxRule Id Order Wise
     */
    public void fetchAndSetDefaultTaxOrderWise() {
        long count = this.getSlsSoTrVO2().getEstimatedRowCount();
        if (count <= 0) {
            Integer taxRuleId = getDefaultTaxRuleId("O");
            if (taxRuleId != -1) {
                procTaxOrder(taxRuleId);
                Row currentRow = getSlsSo1().getCurrentRow();
                currentRow.setAttribute("TrRuleTrans", taxRuleId);
            }
        }
    }

    /**
     * Method to get Default Tax
     * @return
     * I - ItemWise
     * O - Orderwise
     */
    public Integer getDefaultTaxRuleId(String taxMode) {
        Row soRow = getSlsSo1().getCurrentRow();
        Row itmRow = getSlsSoItm1().getCurrentRow();

        // The below line should not be comitted as this is used to fetch GrpId
        itmRow.getAttribute("ItmNmTrans");
        Integer taxRuleId = -1;
        try {
            if ("I" == taxMode) {
                Object o =
                    ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                               soRow.getAttribute("CldId"), soRow.getAttribute("SlocId"),
                                               soRow.getAttribute("ShipAdds"), soRow.getAttribute("OrgId"),
                                               soRow.getAttribute("HoOrgId"), itmRow.getAttribute("ItmId"),
                                               soRow.getAttribute("EoId"), 21503, soRow.getAttribute("TaxFormTypId")
                }, Types.INTEGER);
                System.out.println("Tr Id is : " + o);
                if (o != null) {
                    taxRuleId = (Integer) o;
                }
            } else if ("O" == taxMode) {
                Object o =
                    ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                               soRow.getAttribute("CldId"), soRow.getAttribute("SlocId"),
                                               soRow.getAttribute("ShipAdds"), soRow.getAttribute("OrgId"),
                                               soRow.getAttribute("HoOrgId"), 0, soRow.getAttribute("EoId"), 21503,
                                               soRow.getAttribute("TaxFormTypId")
                }, Types.INTEGER);
                System.out.println("Tr Id is : " + o);
                if (o != null) {
                    taxRuleId = (Integer) o;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        }

        return taxRuleId;
    }

    /**
     * Checnk if all the items have same uom
     * @return
     */
    private Integer i = 0;

    public Boolean isUomSame() {
        i = i + 1;
        long j = System.currentTimeMillis();
        Boolean b = true;
        int count = getSlsSoItm1().getRowCount();
        Row currentRow = getSlsSoItm1().getCurrentRow();
        System.out.println("Current row :" + currentRow);
        if (currentRow != null) {
            Object itmUomO = currentRow.getAttribute("ItmUom");
            Row[] filteredRows = getSlsSoItm1().getFilteredRows("ItmUom", itmUomO);
            System.out.println(filteredRows.length + " | " + count);
            if (filteredRows.length != count) {
                b = false;
            }
        }
        System.out.println("Count Item Uom : " + i + " Time Taken :" + (j - System.currentTimeMillis()));
        return b;
    }


    /**
     * Method to get TaxFormId
     * @return
     */
    public Object getTaxFormType() {
        Object o = null;
        Row currentRow = getSlsSo1().getCurrentRow();
        if (currentRow != null) {
            o = currentRow.getAttribute("TaxFormTypId");
        }
        return o;
    }

    /**
     * Method to check if Stock is available for the Items in Rush and Cash Sales Order
     * @return
     * 0 : Quantity is available
     * -1 : Qunatity not available
     *
     */
    public Integer isStockAvailableForItems() {
        Integer i = 0;
        Object whIdO = getSlsSo1().getCurrentRow().getAttribute("WhId");
        RowSetIterator itmItr = getSlsSoItm1().createRowSetIterator(null);
        StringBuilder msg = new StringBuilder("<ul>");
        while (itmItr.hasNext()) {
            Row row = itmItr.next();
            Object itmQtyBsO = row.getAttribute("ItmQtyBs");
            Number itmQtyBs = (itmQtyBsO == null ? StaticValue.NUMBER_ZERO : (Number) itmQtyBsO);
            Number availQty = SoAmHelper.getItemAvailableStock(this, row.getAttribute("ItmId"), whIdO);
            if (availQty.compareTo(itmQtyBs) < 0) {
                msg.append("<li>");
                msg.append("Item : ");
                msg.append(row.getAttribute("ItmNmForTableTrans"));
                msg.append("| ");
                msg.append("Required Quantity in Basic Uom : ");
                msg.append(itmQtyBsO);
                msg.append("| ");
                msg.append("Available Quantity : ");
                msg.append(availQty);
                msg.append("</li>");
                i = 1;
            }
        }
        itmItr.closeRowSetIterator();
        if (i == 1) {
            msg.append("</ul><br />");
            msg.append("Inorder to Release Stock for the Current Order, please Update Stock for the above Items.");
            ADFModelUtils.showFormattedFacesMessage("Required Item Quantity is not Available in Stock for one/more Items.",
                                                    msg.toString(), FacesMessage.SEVERITY_ERROR);
        }

        return i;
    }

    /**
     * Container's getter for OtherCharges1.
     * @return OtherCharges1
     */
    public ViewObjectImpl getOtherCharges() {
        return (ViewObjectImpl) findViewObject("OtherCharges");
    }

    /**
     * Method to set the bind variable for other charges Vo to populate data
     */
    public void filterOtherCharges() {
        Row r = getSlsSo1().getCurrentRow();
        Integer ordType = r.getAttribute("OrderType") == null ? null : (Integer) r.getAttribute("OrderType");

        getOtherCharges().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        getOtherCharges().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        getOtherCharges().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        getOtherCharges().setNamedWhereClauseParam("DocIdBind", 21503);
        getOtherCharges().setNamedWhereClauseParam("DocTypeIdBind", ordType);
        getOtherCharges().executeQuery();

    }

    /**
     * Method to Call function from Finnace to insert  FN_INS_IR on Sales order approval.
     * FN_INS_IR (
param_cld_id varchar2,
param_insT_id NUMBER,
param_sloc_id number,
param_ho_org_id varchar2,
param_org_id varchar2,
param_doc_id  VARCHAR2,
param_GLBL_doc_id NUMBER,
param_proj_id varchar2 default 'PROJ0000',
param_eo_id number,
param_curr_id number,
param_curr_rate number,
param_uid number,
param_usr_dt date)
     */
    public String callFuntionToInsertIr() {
        String ret = "";
        Row r = getSlsSo1().getCurrentRow();

        if (checkforProfileValues(new StringBuffer("POST_SO_ADV")).toString().equals("Y")) {

            try {
                ret =
                    (String) ADFModelUtils.callFunction(this,
                                                        new StringBuilder("FIN.FN_INS_IR(?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                        EbizParams.GLBL_APP_CLD_ID(), 1, EbizParams.GLBL_APP_SERV_LOC(),
                                                        EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                        r.getAttribute("DocId"), 21503, r.getAttribute("PrjId"),
                                                        r.getAttribute("EoId"), r.getAttribute("CurrIdSp"),
                                                        r.getAttribute("CurrConvFctr"), r.getAttribute("UsrIdCreate"),
                                                        r.getAttribute("UsrIdCreateDt")
                }, Types.VARCHAR);
                if (ret.equalsIgnoreCase("F1") || ret.equalsIgnoreCase("F2")) {
                    StringBuilder saveMsg =
                        new StringBuilder("<html><body><b><p style='color:red'>" +
                                          "There have been an error in Calling Function FN_INS_IR !" + "</p></b>");
                    saveMsg.append("<b>Please try again or contact ESS !");
                    saveMsg.append("</body></html>");
                    FacesMessage msg = new FacesMessage(saveMsg.toString());
                    msg.setSeverity(FacesMessage.SEVERITY_WARN);
                    FacesContext.getCurrentInstance().addMessage(null, msg);
                } else if (ret.equalsIgnoreCase("E")) {
                    // funtion returns exists when IR created on sales order creation and sales is amended
                } else if (ret.equalsIgnoreCase("C")) {
                    ADFModelUtils.showFormattedFacesMessage("Finance Request Not Generated!",
                                                            "COA not Defiend for current Customer.",
                                                            FacesMessage.SEVERITY_INFO);
                } else {
                    StringBuilder saveMsg = new StringBuilder("Finance Request : " + ret + " Generated Sucessfully !");


                    ADFModelUtils.showFormattedFacesMessage("Finance Request Generated!", saveMsg.toString(),
                                                            FacesMessage.SEVERITY_INFO);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return ret;
    }

    /**
     * Method to reset to value of project on each warehouse change for delivery schedule or Sails Order Header part
     */
    public void resetProjectId(String WhrHoId, String areTyp) {

        String projId = "PROJ0000";
        if (resolvElO("#{pageFlowScope.GLBL_ORG_PROJ_ID}") != null) {
            projId = resolvElO("#{pageFlowScope.GLBL_ORG_PROJ_ID}").toString();
        }

        Row r = getSlsSo1().getCurrentRow();

        if (areTyp.equalsIgnoreCase("D")) {
            r.setAttribute("ProjectIdTrans", projId);
        }
        if (areTyp.equalsIgnoreCase("H")) {
            r.setAttribute("PrjId", projId);

        }
        //getLOVProject().setNamedWhereClauseParam("BindWhId", r.getAttribute("WhId"));
        // getLOVProject().executeQuery();
    }

    /**
     * Container's getter for LOVProject1.
     * @return LOVProject1
     */
    public ViewObjectImpl getLOVProject() {
        return (ViewObjectImpl) findViewObject("LOVProject");
    }

    /**
     * Method to call cancelation check message
     * fn_chk_Fin_Req_Adv
(
     p_cld_id    varchar2,
     p_sloc_id    number,
     p_ho_org_id varchar2,
     p_org_id    in varchar2,
     p_src_Glbl_Doc_Id    number,
     p_src_doc_id varchar2
)
     */
    public String cancelOrderReq() {
        String msg = "N";
        Row r = getSlsSo1().getCurrentRow();
        if (checkforProfileValues(new StringBuffer("CHECK_SO_ADV")).toString().equals("Y")) {
            try {
                Object o = ADFModelUtils.callFunction(this, new StringBuilder("FIN.fn_chk_ir_adv_row(?,?,?,?,?,?)"), new Object[] {
                                                      EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                      EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21503,
                                                      r.getAttribute("DocId")
                }, Types.VARCHAR).toString();
                // System.out.println(o + " <<<-- cancel function result");
                if (o != null) {
                    msg = o.toString();

                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return msg;
    }

    /**
     * Method to check Item Basis is applicable for this sales order or not.
     */

    public Boolean isItemBasisApplicable() {
        Boolean b = false;

        Object chkPrfVals = SoAmHelper.checkforProfileValuesObjectReturnV(this, new StringBuffer("SHOW_ITM_BASIS"));
        if (chkPrfVals == null) {
            return false;
        } else if ("Y".equalsIgnoreCase(chkPrfVals.toString())) {
            b = true;
        } else {
            b = false;
        }
        return b;
    }

    /**
     * Method to check sales Tracking is applicable for this sales order or not.
     */

    public Boolean isTrackingApplicable() {
        Boolean b = false;

        Object chkPrfVals = SoAmHelper.checkforProfileValuesObjectReturnV(this, new StringBuffer("SHOW_ORD_TRACKING"));
        if (chkPrfVals == null) {
            return false;
        } else if ("Y".equalsIgnoreCase(chkPrfVals.toString())) {
            b = true;
        } else {
            b = false;
        }
        return b;
    }

    /**
     * Method to check if Wharehouse Exist or not
     */
    public Boolean isWhExists() {
        Boolean b = true;

        Object chkWh = ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_WH_CHK}");
        String isWhUsed = chkWh == null ? "N" : chkWh.toString();
        String defultWhId = null;
        if (isWhUsed.equalsIgnoreCase("Y")) {
            /**p_sloc_id   NUMBER,
                p_cld_id    VARCHAR2,
                p_ho_org_id VARCHAR2,
                p_org_id      VARCHAR2,
                p_usr_id      NUMBER
            **/
            defultWhId = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_get_dflt_org_wh(?,?,?,?,?)", new Object[] {
                                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                     EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                     EbizParams.GLBL_APP_USR()
            });
        } else {
            Object defWh = ADFModelUtils.resolvEl("#{pageFlowScope.PARAM_USR_WH_ID}");
            defultWhId = defWh == null ? "WH00001" : defWh.toString();
        }

        if (defultWhId == null || defultWhId.equalsIgnoreCase(" ") || defultWhId.equalsIgnoreCase("")) {
            b = false;
        } else {
            b = true;
        }
        return b;
    }

    public void resetTaxableAmountOnAsblAmtChange() {
        ViewObjectImpl vo = getSlsSoTr2();
        vo.setRangeSize(-1);
        Row[] allRowsInRange = vo.getAllRowsInRange();
        System.out.println("S-------------------111");
        Row itmRow = getSlsSoItm1().getCurrentRow();
        if (allRowsInRange.length > 0) {
            System.out.println("Resetting Taxable Amount.111");
            allRowsInRange[0].setAttribute("TaxableAmt", StaticValue.NUMBER_ZERO);
            allRowsInRange[0].setAttribute("TaxAmtSp", StaticValue.NUMBER_ZERO);
            itmRow.setAttribute("TempAmtSp", StaticValue.NUMBER_ZERO);
            itmRow.setAttribute("taxableAmountTrans", null);
            itmRow.setAttribute("taxAmountTrans", null);
            itmRow.setAttribute("TaxDescriptionTrans", null);
        }
    }

    /**
     * Container's getter for SlsSoFlx1.
     * @return SlsSoFlx1
     */
    public ViewObjectImpl getSlsSoFlx1() {
        return (ViewObjectImpl) findViewObject("SlsSoFlx1");
    }

    /**
     * Container's getter for SlsSoToSlsFlexFldVL1.
     * @return SlsSoToSlsFlexFldVL1
     */
    public ViewLinkImpl getSlsSoToSlsFlexFldVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoToSlsFlexFldVL1");
    }

    /**
     * Method to create insert rows in flexi field
     */

    public void createFlexiField() {
        if (isFlexApplicable()) {
            Row r = getSlsSo1().getCurrentRow();
            Integer ordTyp = (Integer) r.getAttribute("OrderType");
            System.out.println(ordTyp + " This is the order type");
            ViewObjectImpl flex = this.getLOVFlexFldData();
            flex.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            flex.setNamedWhereClauseParam("BindDocId", 21503);
            flex.setNamedWhereClauseParam("BindDocType", ordTyp);
            flex.executeQuery();

            RowSetIterator itr = flex.createRowSetIterator(null);
            System.out.println(itr.getRowCount());
            if (itr.getRowCount() > 0) {
                while (itr.hasNext()) {
                    Row appRow = itr.next();
                    ViewObjectImpl fldsVO = getSlsSoFlx1();

                    // System.out.println(appRow.getAttribute("DocId") + "|" + appRow.getAttribute("FldId"));
                    Row cRow = fldsVO.createRow();
                    //cRow.setAttribute("DocId", appRow.getAttribute("DocId"));
                    cRow.setAttribute("FieldId", appRow.getAttribute("FldId"));
                    cRow.setAttribute("FieldVal", null);
                    cRow.setAttribute("DataType", appRow.getAttribute("DataType"));
                    cRow.setAttribute("DataLen", appRow.getAttribute("DataLen"));
                    cRow.setAttribute("Reqd", appRow.getAttribute("Reqd"));
                    fldsVO.insertRow(cRow);
                }
            }
        }
    }

    /**
     * Method to check all mendatroy field for flexy is not null
     */
    public Boolean isflexFieldNull() {
        Boolean result = false;
        Row allR[] = getSlsSoFlx1().getAllRowsInRange();
        for (int x = 0; x < allR.length; x++) {
            if (allR[x].getAttribute("Reqd") != null) {
                if ("Y".equalsIgnoreCase(allR[x].getAttribute("Reqd").toString())) {
                    if (allR[x].getAttribute("FieldVal") == null) {
                        System.out.println("Trrue value is setting, Field is empty");

                        return true;
                    }
                }
            }
        }
        return result;
    }

    /**
     * method to check flexi field applilcable or not
     */
    public Boolean isFlexApplicable() {
        Boolean res = true;
        Object chkPrfVals = SoAmHelper.checkforProfileValuesObjectReturnV(this, new StringBuffer("USE_FLX_FLD_IN_SO"));
        if (chkPrfVals == null) {
            return false;
        } else if ("Y".equalsIgnoreCase(chkPrfVals.toString())) {
            res = true;
        } else {
            res = false;
        }
        return res;
    }

    /**
     * Container's getter for LOVFlexFldData1.
     * @return LOVFlexFldData1
     */
    public ViewObjectImpl getLOVFlexFldData() {
        return (ViewObjectImpl) findViewObject("LOVFlexFldData");
    }

    /**
     * Method to calculate total other charges for an item if it is part of cost.
     */
    public Number calTotalOtherCharge() {
        Number totalOcAmt = StaticValue.NUMBER_ZERO;
        Row soRow = getSlsSo1().getCurrentRow();
        Integer ordTyp = (Integer) soRow.getAttribute("OrderType");
        RowSetIterator ocItr = this.getSlsSoOc1().createRowSetIterator(null);
        if (ocItr != null) {
            while (ocItr.hasNext()) {
                Row vur = ocItr.next();
                String othrChr = vur.getAttribute("OcId").toString();
                String pOc = "N";
                Object o = null;
                try {
                    o = ADFModelUtils.callFunction(this,
                                                   new StringBuilder("SLS.FN_IS_OTHR_CHARGE_PRT_OF_COST(?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                   EbizParams.GLBL_HO_ORG_ID(), 21503, ordTyp, othrChr
                    }, Types.VARCHAR);

                } catch (Exception e) {
                    e.printStackTrace();
                }
                //  System.out.println(o + "  <<< The original result  part of Cost");
                pOc = o == null ? "N" : o.toString();
                // System.out.println(pOc + "  <<< Is part of Cost");
                Number tmpAmt = (Number) vur.getAttribute("AmtSp");
                //  System.out.println(tmpAmt + " = amount of other charge is ");
                if (pOc.equalsIgnoreCase("Y")) {
                    totalOcAmt = totalOcAmt.add(tmpAmt);
                }

            }
            // System.out.println(totalOcAmt + " The calculated other charges for the order");
        } else {
            //   System.out.println(" The row is null for the other charges Vo");
        }
        ocItr.closeRowSetIterator();
        return totalOcAmt;
    }

    /**
     * Method to calculate other charges for each Item.
     */
    public Number calItmWiseOtherCharge(Row curRow) {
        String taxTyp = getSlsSo1().getCurrentRow().getAttribute("TaxRuleFlg").toString();
        Number totOthrChrg = calTotalOtherCharge();
        Number totItmTaxAmount = StaticValue.NUMBER_ZERO;
        Number otherChargesAmt = StaticValue.NUMBER_ZERO;
        Object c = curRow.getAttribute("ItmAmtGsSp");
        Number currItmAmtSp = (c == null ? StaticValue.NUMBER_ZERO : (Number) c);
        RowSetIterator rit = getSlsSoItm1().createRowSetIterator(null);
        while (rit.hasNext()) {
            Row lineRow = rit.next();
            Object taxFlgO = lineRow.getAttribute("TaxRuleFlg");
            String taxRuleFlg = (taxFlgO == null ? "N" : taxFlgO.toString());
            if (taxTyp.equalsIgnoreCase("O") || taxRuleFlg.equalsIgnoreCase("Y")) {
                totItmTaxAmount =
                    totItmTaxAmount.add(lineRow.getAttribute("ItmAmtGsSp") == null ? new Number(0) :
                                        (Number) (lineRow.getAttribute("ItmAmtGsSp")));
            }
        }
        rit.closeRowSetIterator();
        // System.out.println(totItmTaxAmount + " Total item Amount  === " + curRow.getAttribute("ItmId"));

        if (totItmTaxAmount.compareTo(new Number(0)) == 1) {
            otherChargesAmt = totOthrChrg.divide(totItmTaxAmount);
            //System.out.println(otherChargesAmt + " Amount after division from total order");
            otherChargesAmt = otherChargesAmt.multiply(currItmAmtSp);
            // System.out.println(otherChargesAmt + " Amount after multiplying with current amount");
        }
        return otherChargesAmt;


    }

    /**
     * Container's getter for quotationLov1.
     * @return quotationLov1
     */
    public ViewObjectImpl getquotationLov() {
        return (ViewObjectImpl) findViewObject("quotationLov");
    }

    /**
     * Container's getter for ViewDiscSeq1.
     * @return ViewDiscSeq1
     */
    public ViewObjectImpl getViewDiscSeq() {
        return (ViewObjectImpl) findViewObject("ViewDiscSeq");
    }


    /**
     * Container's getter for SlsSoDiscVO2.
     * @return SlsSoDiscVO2
     */
    public ViewObjectImpl getSlsSoDiscVO() {
        return (ViewObjectImpl) findViewObject("SlsSoDiscVO");
    }

    /**
     * Container's getter for SlsSoItmTOSlsSoDiscVL2.
     * @return SlsSoItmTOSlsSoDiscVL2
     */
    public ViewLinkImpl getSlsSoItmTOSlsSoDiscVL() {
        return (ViewLinkImpl) findViewLink("SlsSoItmTOSlsSoDiscVL");
    }

    /**
     * Method to insert vales for each item in sales discount table
     *  DiscAmtBs	Number	sp*cc
        DiscAmtSp	Number
        DiscBasis	Integer	
        DiscSelFlg	String	Y N
        DiscType	String	A P
        DiscVal	        Number	
     FN_INS_SO_DISC_LINES(
         P_CLD_ID         VARCHAR2,
         P_SLOC_ID        NUMBER,
         P_ORG_ID         VARCHAR2,
         P_HO_ORG_ID      VARCHAR2,
         P_DOC_TXN_ID     VARCHAR2,
         P_ITM_ID         VARCHAR2 ,
         P_EO_ID          VARCHAR2 ,
         P_CATG_ID        NUMBER ,
         P_GRP_ID         VARCHAR2 ,
         P_ASSIGNED_TO    NUMBER ,
         P_ITM_QTY        NUMBER,
         P_ITM_PRICE      NUMBER,
         P_CURR_CONV_RATE NUMBER DEFAULT 1,
         P_USR_ID         NUMBER
     */
    public void insertDiscountForItem() {
        System.out.println("Inside discount insertion");
        Row hdrRow = getSlsSo1().getCurrentRow();
        Row itmRow = getSlsSoItm1().getCurrentRow();

        Object soDocId = hdrRow.getAttribute("DocId");
        Object custmor = hdrRow.getAttribute("EoId");
        Object assignTo = hdrRow.getAttribute("AssignedTo");
        Object currConv = hdrRow.getAttribute("CurrConvFctr");
        Object catId = hdrRow.getAttribute("EoCatgTrans");
        Object itmId = itmRow.getAttribute("ItmId");
        Object grpId = itmRow.getAttribute("ItmGrpIdTrans");
        Object itmQty = itmRow.getAttribute("ItmQty");
        Object itmRate = itmRow.getAttribute("ItmRate");

        try {
            Object o =
                ADFModelUtils.callFunction(this,
                                           new StringBuilder("SLS.FN_INS_SO_DISC_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), soDocId, itmId,
                                           custmor, catId, grpId, assignTo, itmQty, itmRate, currConv,
                                           EbizParams.GLBL_APP_USR()
            }, Types.VARCHAR);
            System.out.println(o + " The function result value");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for ViewDiscSeqVO1.
     * @return ViewDiscSeqVO1
     */
    public ViewObjectImpl getViewDiscSeqVO1() {
        return (ViewObjectImpl) findViewObject("ViewDiscSeqVO1");
    }

    /**
     * Container's getter for SlsSoItmToSeqDiscViewVL1.
     * @return SlsSoItmToSeqDiscViewVL1
     */
    public ViewLinkImpl getSlsSoItmToSeqDiscViewVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoItmToSeqDiscViewVL1");
    }

    /**
     * method to refresh the discount vo
     */
    public void refreshDiscountBasis() {
        System.out.println("Inside refreshing discount basis");
        getSlsSoDiscVO().executeQuery();

        getViewDiscSeqVO1().executeQuery();
        System.out.println(getViewDiscSeqVO1().getRowCount() + "  This is the total row for desciount basis");

    }

    /**
     * Method to remove discount basis for each item removed.
     *  P_CLD_ID     VARCHAR2,
    P_SLOC_ID    NUMBER,
    P_ORG_ID     VARCHAR2,
    P_HO_ORG_ID  VARCHAR2,
    P_DOC_TXN_ID VARCHAR2,
    P_ITM_ID     VARCHAR2
     */
    public void removeDiscBasisForItem() {
        Row itmRow = getSlsSoItm1().getCurrentRow();
        Object itmId = itmRow.getAttribute("ItmId");
        Object soDocId = itmRow.getAttribute("DocId");
        try {
            Object o = ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_DEL_SO_DISC_LINES(?,?,?,?,?,?)"), new Object[] {
                                                  EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                  EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), soDocId,
                                                  itmId
            }, Types.VARCHAR);
            System.out.println(o + " The function result value");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Method to check Payment have been received against Finance Request for this Sales Order.
        Payment have been received against Finance Request for this Sales Order.
        New Finance Request will not be generated on Approval of this Current Sales Order.
     FN_CHK_IR_PMNT_RCVD_AGNST_SO(
         P_CLD_ID     VARCHAR2,
         P_SLOC_ID    NUMBER,
         P_ORG_ID     VARCHAR2,
         P_HO_ORG_ID  VARCHAR2,
         P_DOC_TXN_ID VARCHAR2,
         P_EO_ID      NUMBER)

     */
    public String chkPaymentAgaisntIR() {
        String res = null;
        Row soRow = getSlsSo1().getCurrentRow();
        Object stats = soRow.getAttribute("SoMode");
        if (stats.equals(314)) {
            Object customr = soRow.getAttribute("EoId");
            Object soDocId = soRow.getAttribute("DocId");

            Object o;
            try {
                o = ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_CHK_IR_PMNT_RCVD_AGNST_SO(?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), soDocId,
                                               customr
                }, Types.VARCHAR);
                if (o != null) {
                    res = o.toString();
                    System.out.println(o + " ************************ result fo return function");
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        System.out.println( res + " ########## value in AM for is IR paid" );
        return res;
    }
}
