package slssalesordapp.model.views;

import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 07 10:23:35 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ViewDiscSeqVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlocId {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        HoOrgId {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgId {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SeqNo {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getSeqNo();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DiscBasis {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getDiscBasis();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DiscTypeNm {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getDiscTypeNm();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DocId {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItmId {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setItmId((String) value);
            }
        }
        ,
        DiscType {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getDiscType();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setDiscType((String) value);
            }
        }
        ,
        DiscVal {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getDiscVal();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setDiscVal((Number) value);
            }
        }
        ,
        DiscSelFlg {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getDiscSelFlg();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setDiscSelFlg((String) value);
            }
        }
        ,
        TotalDiscValueTrans {
            public Object get(ViewDiscSeqVORowImpl obj) {
                return obj.getTotalDiscValueTrans();
            }

            public void put(ViewDiscSeqVORowImpl obj, Object value) {
                obj.setTotalDiscValueTrans((Number) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(ViewDiscSeqVORowImpl object);

        public abstract void put(ViewDiscSeqVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SEQNO = AttributesEnum.SeqNo.index();
    public static final int DISCBASIS = AttributesEnum.DiscBasis.index();
    public static final int DISCTYPENM = AttributesEnum.DiscTypeNm.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int DISCTYPE = AttributesEnum.DiscType.index();
    public static final int DISCVAL = AttributesEnum.DiscVal.index();
    public static final int DISCSELFLG = AttributesEnum.DiscSelFlg.index();
    public static final int TOTALDISCVALUETRANS = AttributesEnum.TotalDiscValueTrans.index();

    /**
     * This is the default constructor (do not remove).
     */
    public ViewDiscSeqVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute SeqNo.
     * @return the SeqNo
     */
    public Integer getSeqNo() {
        return (Integer) getAttributeInternal(SEQNO);
    }

    /**
     * Gets the attribute value for the calculated attribute DiscBasis.
     * @return the DiscBasis
     */
    public Integer getDiscBasis() {
        return (Integer) getAttributeInternal(DISCBASIS);
    }

    /**
     * Gets the attribute value for the calculated attribute DiscTypeNm.
     * @return the DiscTypeNm
     */
    public String getDiscTypeNm() {
        return (String) getAttributeInternal(DISCTYPENM);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmId.
     * @param value value to set the  ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DiscType.
     * @return the DiscType
     */
    public String getDiscType() {
        return (String) getAttributeInternal(DISCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DiscType.
     * @param value value to set the  DiscType
     */
    public void setDiscType(String value) {
        setAttributeInternal(DISCTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DiscVal.
     * @return the DiscVal
     */
    public Number getDiscVal() {
        return (Number) getAttributeInternal(DISCVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DiscVal.
     * @param value value to set the  DiscVal
     */
    public void setDiscVal(Number value) {
        setAttributeInternal(DISCVAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DiscSelFlg.
     * @return the DiscSelFlg
     */
    public String getDiscSelFlg() {
        return (String) getAttributeInternal(DISCSELFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DiscSelFlg.
     * @param value value to set the  DiscSelFlg
     */
    public void setDiscSelFlg(String value) {
        setAttributeInternal(DISCSELFLG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotalDiscValueTrans.
     * @return the TotalDiscValueTrans
     */
    public Number getTotalDiscValueTrans() {
        return new Number(100);
        //return (Number) getAttributeInternal(TOTALDISCVALUETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotalDiscValueTrans.
     * @param value value to set the  TotalDiscValueTrans
     */
    public void setTotalDiscValueTrans(Number value) {
        setAttributeInternal(TOTALDISCVALUETRANS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

