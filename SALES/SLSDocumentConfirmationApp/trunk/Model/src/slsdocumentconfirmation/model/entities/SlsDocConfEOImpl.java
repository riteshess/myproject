package slsdocumentconfirmation.model.entities;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.ebiz.EbizParamsAPPUtils;
import adf.utils.model.ADFModelUtils;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowIterator;
import oracle.jbo.domain.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import slsdocumentconfirmation.model.service.slsdocumentconfirmationAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 12 10:24:55 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsDocConfEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        FyId,
        ConfId,
        ConfStat,
        ConfRevNo,
        ConfRevDt,
        ConfRmrk,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        ConfType,
        SLSDocConfSrcEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int CONFID = AttributesEnum.ConfId.index();
    public static final int CONFSTAT = AttributesEnum.ConfStat.index();
    public static final int CONFREVNO = AttributesEnum.ConfRevNo.index();
    public static final int CONFREVDT = AttributesEnum.ConfRevDt.index();
    public static final int CONFRMRK = AttributesEnum.ConfRmrk.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int CONFTYPE = AttributesEnum.ConfType.index();
    public static final int SLSDOCCONFSRCEO = AttributesEnum.SLSDocConfSrcEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsDocConfEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("slsdocumentconfirmation.model.entities.SlsDocConfEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocDt, using the alias name DocDt.
     * @return the value of DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDt.
     * @param value value to set the DocDt
     */
    public void setDocDt(Timestamp value) {
        setAttributeInternal(DOCDT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for ConfId, using the alias name ConfId.
     * @return the value of ConfId
     */
    public String getConfId() {
        return (String) getAttributeInternal(CONFID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfId.
     * @param value value to set the ConfId
     */
    public void setConfId(String value) {
        setAttributeInternal(CONFID, value);
    }

    /**
     * Gets the attribute value for ConfStat, using the alias name ConfStat.
     * @return the value of ConfStat
     */
    public Integer getConfStat() {
        return (Integer) getAttributeInternal(CONFSTAT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfStat.
     * @param value value to set the ConfStat
     */
    public void setConfStat(Integer value) {
        setAttributeInternal(CONFSTAT, value);
    }

    /**
     * Gets the attribute value for ConfRevNo, using the alias name ConfRevNo.
     * @return the value of ConfRevNo
     */
    public Integer getConfRevNo() {
        return (Integer) getAttributeInternal(CONFREVNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfRevNo.
     * @param value value to set the ConfRevNo
     */
    public void setConfRevNo(Integer value) {
        setAttributeInternal(CONFREVNO, value);
    }

    /**
     * Gets the attribute value for ConfRevDt, using the alias name ConfRevDt.
     * @return the value of ConfRevDt
     */
    public Timestamp getConfRevDt() {
        return (Timestamp) getAttributeInternal(CONFREVDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfRevDt.
     * @param value value to set the ConfRevDt
     */
    public void setConfRevDt(Timestamp value) {
        setAttributeInternal(CONFREVDT, value);
    }

    /**
     * Gets the attribute value for ConfRmrk, using the alias name ConfRmrk.
     * @return the value of ConfRmrk
     */
    public String getConfRmrk() {
        return (String) getAttributeInternal(CONFRMRK);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfRmrk.
     * @param value value to set the ConfRmrk
     */
    public void setConfRmrk(String value) {
        setAttributeInternal(CONFRMRK, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for ConfType, using the alias name ConfType.
     * @return the value of ConfType
     */
    public Integer getConfType() {
        return (Integer) getAttributeInternal(CONFTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ConfType.
     * @param value value to set the ConfType
     */
    public void setConfType(Integer value) {
        setAttributeInternal(CONFTYPE, value);
    }


    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSLSDocConfSrcEO() {
        return (RowIterator) getAttributeInternal(SLSDOCCONFSRCEO);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param orgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String orgId, String docId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, orgId, docId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        setCldId(EbizParams.GLBL_APP_CLD_ID());
        setOrgId(EbizParams.GLBL_APP_USR_ORG());
        setHoOrgId(EbizParams.GLBL_HO_ORG_ID());
        setSlocId(EbizParams.GLBL_APP_SERV_LOC());
        setUsrIdCreate(EbizParams.GLBL_APP_USR());
        setUsrIdCreateDt(StaticValue.getCurrDtWidTimestamp());
        setDocId(generateDocTxnId());
        setDocDt(StaticValue.getCurrDtWidTimestamp());
        setFyId(EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(getAm()));
        super.create(attributeList);
    }
    /**
     * Method to generate docTxnId
     * @return
     */
    public String generateDocTxnId() {
        return (String) (ADFModelUtils.callFunction(getAm(), new StringBuilder("app.get_txn_id (?,?,?,?,?,?)"), new Object[] {
                                                  getCldId(), getSlocId(), getOrgId(), getUsrIdCreate(),
                                                    new Integer(21510), new Integer(0)
    }, Types.VARCHAR));
    }
    /*
     * This Method is used to create the Disp Doc Id of Shipment Confirmation.
     */
    public String getDispDocIdForSLSDocConf() {
           String dispIdFromFum = "0";
           Integer fyIdVar=EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(getAm());

           try {
             dispIdFromFum= (String) (ADFModelUtils.callFunction(getAm(), new StringBuilder("GEN_DISP_DOC_ID (?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                                  getSlocId(), getCldId() , getOrgId(),new Integer(21516), getDocId(),getConfType(),
                                                                   "SLS$DOC$CONF", fyIdVar,null,null
                   }, Types.VARCHAR));
               

           } catch (Exception e) {
               e.printStackTrace();
               System.out.println("ERROR IN CALLING FUNCTION at EOImpl:" + e.getMessage());
           }
           System.out.println("===========" + dispIdFromFum);

           return dispIdFromFum;
       }
    public slsdocumentconfirmationAMImpl getAm(){
        return (slsdocumentconfirmationAMImpl) ADFModelUtils.resolvEl("#{data.slsdocumentconfirmationAMDataControl.dataProvider}");
    }
    public String resolvEl(String data) {
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           String Message = valueExp.getValue(elContext).toString();
           return Message;
       }
    /**
     * Add locking logic here.
     */
    public void lock() {
        /*   super.lock(); */
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            
            
            this.setUsrIdMod(EbizParams.GLBL_APP_USR());
            this.setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        } else if (operation == DML_INSERT) {
            
            this.setConfId(getDispDocIdForSLSDocConf());
            
            
        }
       
        super.doDML(operation, e);
    }
}

