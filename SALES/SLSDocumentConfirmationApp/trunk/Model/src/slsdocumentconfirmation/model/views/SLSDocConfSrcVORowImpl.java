package slsdocumentconfirmation.model.views;

import adf.utils.ebiz.EbizParams;

import java.sql.Timestamp;

import oracle.jbo.ApplicationModule;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import slsdocumentconfirmation.model.service.slsdocumentconfirmationAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 26 13:04:47 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SLSDocConfSrcVORowImpl extends ViewRowImpl {


    public static final int ENTITY_SLSDOCCONFSRCEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocTypeSrc,
        DocIdSrc,
        DocDtSrc,
        transDispId,
        DocGlblIdTrans,
        SlsDocConfFlxVO,
        LOVQueryForDocIdVO1,
        LOVQueryForDocTypeVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCTYPESRC = AttributesEnum.DocTypeSrc.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int DOCDTSRC = AttributesEnum.DocDtSrc.index();
    public static final int TRANSDISPID = AttributesEnum.transDispId.index();
    public static final int DOCGLBLIDTRANS = AttributesEnum.DocGlblIdTrans.index();
    public static final int SLSDOCCONFFLXVO = AttributesEnum.SlsDocConfFlxVO.index();
    public static final int LOVQUERYFORDOCIDVO1 = AttributesEnum.LOVQueryForDocIdVO1.index();
    public static final int LOVQUERYFORDOCTYPEVO1 = AttributesEnum.LOVQueryForDocTypeVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SLSDocConfSrcVORowImpl() {
    }

    /**
     * Gets SLSDocConfSrcEO entity object.
     * @return the SLSDocConfSrcEO
     */
    public EntityImpl getSLSDocConfSrcEO() {
        return (EntityImpl) getEntity(ENTITY_SLSDOCCONFSRCEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_TYPE_SRC using the alias name DocTypeSrc.
     * @return the DOC_TYPE_SRC
     */
    public Integer getDocTypeSrc() {
        return (Integer) getAttributeInternal(DOCTYPESRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_TYPE_SRC using the alias name DocTypeSrc.
     * @param value value to set the DOC_TYPE_SRC
     */
    public void setDocTypeSrc(Integer value) {
        setAttributeInternal(DOCTYPESRC, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @return the DOC_ID_SRC
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @param value value to set the DOC_ID_SRC
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for DOC_DT_SRC using the alias name DocDtSrc.
     * @return the DOC_DT_SRC
     */
    public Timestamp getDocDtSrc() {
        return (Timestamp) getAttributeInternal(DOCDTSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT_SRC using the alias name DocDtSrc.
     * @param value value to set the DOC_DT_SRC
     */
    public void setDocDtSrc(Timestamp value) {
        setAttributeInternal(DOCDTSRC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transDispId.
     * @return the transDispId
     */
    public String gettransDispId() {
        if(getDocIdSrc()!=null && getAttributeInternal(TRANSDISPID)==null ){
            slsdocumentconfirmationAMImpl am = (slsdocumentconfirmationAMImpl)getApplicationModule();
            ViewObjectImpl docIdVO1 = am.getLOVQueryForDocIdVO1();
            docIdVO1.setNamedWhereClauseParam("CldIdBind", getCldId());
            docIdVO1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            docIdVO1.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            docIdVO1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            docIdVO1.setNamedWhereClauseParam("DocTypeBind", getDocGlblIdTrans());
            docIdVO1.setNamedWhereClauseParam("DocIdBind", getDocIdSrc());
            docIdVO1.executeQuery();
            Row[] allRowsInRange = docIdVO1.getAllRowsInRange();
            if(allRowsInRange.length>0){
                Object  o = allRowsInRange[0].getAttribute("DispId");
                System.out.println(o + " This ithe trans doc Display Id");
                settransDispId(o == null ? "" : o.toString());
            }
        }
        return (String) getAttributeInternal(TRANSDISPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transDispId.
     * @param value value to set the  transDispId
     */
    public void settransDispId(String value) {
        setAttributeInternal(TRANSDISPID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocGlblIdTrans.
     * @return the DocGlblIdTrans
     */
    public Integer getDocGlblIdTrans() {
        if(getAttributeInternal(DOCGLBLIDTRANS) == null && getDocTypeSrc() != null){
            RowSet docTypeVO1 = getLOVQueryForDocTypeVO1();
            docTypeVO1.setRangeSize(-1);
            Row[] filteredRows = docTypeVO1.getFilteredRows("AttId", getDocTypeSrc());
            if(filteredRows.length>0){
                Object a = filteredRows[0].getAttribute("GlblDocId");
                System.out.println(a +" This i the doc Id Trans");
                setDocGlblIdTrans((Integer)a);
            }
        }
        return (Integer) getAttributeInternal(DOCGLBLIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocGlblIdTrans.
     * @param value value to set the  DocGlblIdTrans
     */
    public void setDocGlblIdTrans(Integer value) {
        setAttributeInternal(DOCGLBLIDTRANS, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SlsDocConfFlxVO.
     */
    public RowIterator getSlsDocConfFlxVO() {
        return (RowIterator) getAttributeInternal(SLSDOCCONFFLXVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVQueryForDocIdVO1.
     */
    public RowSet getLOVQueryForDocIdVO1() {
        return (RowSet) getAttributeInternal(LOVQUERYFORDOCIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVQueryForDocTypeVO1.
     */
    public RowSet getLOVQueryForDocTypeVO1() {
        return (RowSet) getAttributeInternal(LOVQUERYFORDOCTYPEVO1);
    }
}

