package slsdocumentconfirmation.model.views;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import java.sql.Timestamp;

import java.sql.Types;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Date;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import slsdocumentconfirmation.model.entities.SlsDocConfFlxEOImpl;
import slsdocumentconfirmation.model.service.slsdocumentconfirmationAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 25 16:26:13 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsDocConfFlxVORowImpl extends ViewRowImpl {


    public static final int ENTITY_SLSDOCCONFFLX = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        FieldId,
        FieldVal,
        DataType,
        DataLen,
        Reqd,
        FldValDate,
        FldValBol,
        FldValString,
        FldValNum,
        TransFieldNM,
        DocIdSrc,
        FldValLovTrans,
        HasLovTrans,
        LovFlxFldVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int FIELDID = AttributesEnum.FieldId.index();
    public static final int FIELDVAL = AttributesEnum.FieldVal.index();
    public static final int DATATYPE = AttributesEnum.DataType.index();
    public static final int DATALEN = AttributesEnum.DataLen.index();
    public static final int REQD = AttributesEnum.Reqd.index();
    public static final int FLDVALDATE = AttributesEnum.FldValDate.index();
    public static final int FLDVALBOL = AttributesEnum.FldValBol.index();
    public static final int FLDVALSTRING = AttributesEnum.FldValString.index();
    public static final int FLDVALNUM = AttributesEnum.FldValNum.index();
    public static final int TRANSFIELDNM = AttributesEnum.TransFieldNM.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int FLDVALLOVTRANS = AttributesEnum.FldValLovTrans.index();
    public static final int HASLOVTRANS = AttributesEnum.HasLovTrans.index();
    public static final int LOVFLXFLDVO1 = AttributesEnum.LovFlxFldVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsDocConfFlxVORowImpl() {
    }

    /**
     * Gets SlsDocConfFlx entity object.
     * @return the SlsDocConfFlx
     */
    public SlsDocConfFlxEOImpl getSlsDocConfFlx() {
        return (SlsDocConfFlxEOImpl) getEntity(ENTITY_SLSDOCCONFFLX);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for FIELD_ID using the alias name FieldId.
     * @return the FIELD_ID
     */
    public String getFieldId() {
        return (String) getAttributeInternal(FIELDID);
    }

    /**
     * Sets <code>value</code> as attribute value for FIELD_ID using the alias name FieldId.
     * @param value value to set the FIELD_ID
     */
    public void setFieldId(String value) {
        
        setAttributeInternal(FIELDID, value);
    }

    /**
     * Gets the attribute value for FIELD_VAL using the alias name FieldVal.
     * @return the FIELD_VAL
     */
    public String getFieldVal() {
        return (String) getAttributeInternal(FIELDVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for FIELD_VAL using the alias name FieldVal.
     * @param value value to set the FIELD_VAL
     */
    public void setFieldVal(String value) {
        setAttributeInternal(FIELDVAL, value);
    }

    /**
     * Gets the attribute value for DATA_TYPE using the alias name DataType.
     * @return the DATA_TYPE
     */
    public Integer getDataType() {
        return (Integer) getAttributeInternal(DATATYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DATA_TYPE using the alias name DataType.
     * @param value value to set the DATA_TYPE
     */
    public void setDataType(Integer value) {
        setAttributeInternal(DATATYPE, value);
    }

    /**
     * Gets the attribute value for DATA_LEN using the alias name DataLen.
     * @return the DATA_LEN
     */
    public Integer getDataLen() {
        return (Integer) getAttributeInternal(DATALEN);
    }

    /**
     * Sets <code>value</code> as attribute value for DATA_LEN using the alias name DataLen.
     * @param value value to set the DATA_LEN
     */
    public void setDataLen(Integer value) {
        setAttributeInternal(DATALEN, value);
    }

    /**
     * Gets the attribute value for REQD using the alias name Reqd.
     * @return the REQD
     */
    public String getReqd() {
        return (String) getAttributeInternal(REQD);
    }

    /**
     * Sets <code>value</code> as attribute value for REQD using the alias name Reqd.
     * @param value value to set the REQD
     */
    public void setReqd(String value) {
        setAttributeInternal(REQD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldValDate.
     * @return the FldValDate
     */
    public Timestamp getFldValDate() {
        if (getFieldVal() != null && getDataType().compareTo(756) == 0) {
            try {
                final String OLD_FORMAT = "yyyy-MM-dd";
                final String NEW_FORMAT = "yyyy-MM-dd HH:mm:ss.SSS";
                String oldDateString = getFieldVal();
                String newDateString;

                DateFormat formatter = new SimpleDateFormat(OLD_FORMAT);
                Date d = formatter.parse(oldDateString);
                ((SimpleDateFormat) formatter).applyPattern(NEW_FORMAT);
                newDateString = formatter.format(d);
                // System.out.println(newDateString);

                Timestamp ts = Timestamp.valueOf(newDateString);
                //  System.out.println(ts);
                return (ts);
            } catch (Exception e) {
                // System.out.println("Exception  occured:::" + e);
            }
        }
        return (Timestamp) getAttributeInternal(FLDVALDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldValDate.
     * @param value value to set the  FldValDate
     */
    public void setFldValDate(Timestamp value) {
        if (value != null) {
            String date = value.toString();
            setFieldVal(date);
        }
        setAttributeInternal(FLDVALDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldValBol.
     * @return the FldValBol
     */
    public String getFldValBol() {
        if (getFieldVal() != null && getDataType().compareTo(759) == 0) {
            return (getFieldVal());
        }
        return (String) getAttributeInternal(FLDVALBOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldValBol.
     * @param value value to set the  FldValBol
     */
    public void setFldValBol(String value) {
        if (value != null) {
            System.out.println("Value of Boll::" + value);
            setFieldVal(value);
        }
        setAttributeInternal(FLDVALBOL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldValString.
     * @return the FldValString
     */
    public String getFldValString() {
        if (getFieldVal() != null && getDataType().compareTo(757) == 0) {
            return (getFieldVal());
        }
        return (String) getAttributeInternal(FLDVALSTRING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldValString.
     * @param value value to set the  FldValString
     */
    public void setFldValString(String value) {
        if (value != null) {
            setFieldVal(value);
        }
        setAttributeInternal(FLDVALSTRING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldValNum.
     * @return the FldValNum
     */
    public Number getFldValNum() {
        Number val = new Number(0);
        if (getFieldVal() != null && getDataType().compareTo(758) == 0) {
            try {
                val = new Number(getFieldVal());
            } catch (Exception e) {
                System.out.println("Exception  occured::" + e);
            }
            return (val);
        }
        return (Number) getAttributeInternal(FLDVALNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldValNum.
     * @param value value to set the  FldValNum
     */
    public void setFldValNum(Number value) {
        if (value != null) {
            String num = value.toString();
            setFieldVal(num);
        }
        setAttributeInternal(FLDVALNUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFieldNM.
     * @return the TransFieldNM
     */
    public String getTransFieldNM() {
        if (getFieldId() != null && getAttributeInternal(TRANSFIELDNM) == null) {
            slsdocumentconfirmationAMImpl am = (slsdocumentconfirmationAMImpl) getApplicationModule();
            ViewObjectImpl conf1 = am.getSlsDocConf1();
            Integer confTypeVar =
                conf1.getCurrentRow().getAttribute("ConfType") == null ? new Integer(0) :
                (Integer) conf1.getCurrentRow().getAttribute("ConfType");
            ViewObjectImpl fields1 = am.getLOVQueryForPopulatingFlexFields1();
            fields1.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
            fields1.setNamedWhereClauseParam("bindDocId", 21516);
            fields1.setNamedWhereClauseParam("BindDocTypeId", confTypeVar);
            fields1.executeQuery();
            Row[] ftrRows = fields1.getFilteredRows("FldId", getFieldId());
            String fieldNm=null;
            if(ftrRows.length>0){
             fieldNm=   ftrRows[0].getAttribute("FldNm")==null?" ":ftrRows[0].getAttribute("FldNm").toString();
            }
            System.out.println("fieldNm"+fieldNm);
            setTransFieldNM(fieldNm);
          //  return fieldNm;
        }
        return (String) getAttributeInternal(TRANSFIELDNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFieldNM.
     * @param value value to set the  TransFieldNM
     */
    public void setTransFieldNM(String value) {
        setAttributeInternal(TRANSFIELDNM, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @return the DOC_ID_SRC
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @param value value to set the DOC_ID_SRC
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldValLovTrans.
     * @return the FldValLovTrans
     */
    public String getFldValLovTrans() {
        return (String) getAttributeInternal(FLDVALLOVTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldValLovTrans.
     * @param value value to set the  FldValLovTrans
     */
    public void setFldValLovTrans(String value) {
        setAttributeInternal(FLDVALLOVTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HasLovTrans.
     * @return the HasLovTrans
     */
    public String getHasLovTrans() {
        if(getAttributeInternal(HASLOVTRANS) == null){
            if (getFieldId() != null) {
                Object o = null;
                try {
                    o = ADFModelUtils.callFunction((ApplicationModuleImpl) this.getApplicationModule(), new StringBuilder("SLS.fn_sls_flx_fld_Lov (?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), 21516, getFieldId()
                    }, Types.VARCHAR);
                } catch (Exception e) {
                    e.printStackTrace();
                }
                setHasLovTrans(o == null ? "N" : o.toString());
            }
        }
        return (String) getAttributeInternal(HASLOVTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HasLovTrans.
     * @param value value to set the  HasLovTrans
     */
    public void setHasLovTrans(String value) {
        setAttributeInternal(HASLOVTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovFlxFldVO1.
     */
    public RowSet getLovFlxFldVO1() {
        return (RowSet) getAttributeInternal(LOVFLXFLDVO1);
    }
}

