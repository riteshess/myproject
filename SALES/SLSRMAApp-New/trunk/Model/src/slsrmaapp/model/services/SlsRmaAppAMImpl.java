package slsrmaapp.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.custom.EbizMethod;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.EbizParamsAPPUtils;
import adf.utils.ebiz.EbizParamsMMUtils;
import adf.utils.ebiz.EbizParamsSLSUtils;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;

import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import slsrmaapp.model.dc.ItmRcpt;
import slsrmaapp.model.dc.LotData;
import slsrmaapp.model.dc.LotRow;
import slsrmaapp.model.entities.SlsRmaItmBinEOImpl;
import slsrmaapp.model.entities.SlsRmaItmLotEOImpl;
import slsrmaapp.model.entities.SlsRmaItmSrEOImpl;
import slsrmaapp.model.services.common.SlsRmaAppAM;
import slsrmaapp.model.views.CustomerTypeLovVOImpl;
import slsrmaapp.model.views.LovShipWiseLotVOImpl;
import slsrmaapp.model.views.SlsRmaItemVOImpl;
import slsrmaapp.model.views.SlsRmaItemVORowImpl;
import slsrmaapp.model.views.SlsRmaItmBinVOImpl;
import slsrmaapp.model.views.SlsRmaItmLotVORowImpl;
import slsrmaapp.model.views.SlsRmaVOImpl;
import slsrmaapp.model.views.SlsSearchRmaVOImpl;
import slsrmaapp.model.views.TempVoVORowImpl;
import slsrmaapp.model.views.TransSearchAttVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 05 18:20:40 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsRmaAppAMImpl extends ApplicationModuleImpl implements SlsRmaAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SlsRmaAppAMImpl() {
    }
    private static ADFLogger _log = ADFLogger.createADFLogger(SlsRmaAppAMImpl.class);

    /**
     * Container's getter for SlsRmaItem1.
     * @return SlsRmaItem1
     */
    public SlsRmaItemVOImpl getSlsRmaItem1() {
        return (SlsRmaItemVOImpl) findViewObject("SlsRmaItem1");
    }

    /**
     * Container's getter for SlsRmaShipmnt1.
     * @return SlsRmaShipmnt1
     */
    public ViewObjectImpl getSlsRmaShipmnt1() {
        return (ViewObjectImpl) findViewObject("SlsRmaShipmnt1");
    }

    /**
     * Container's getter for SlsRma1.
     * @return SlsRma1
     */
    public SlsRmaVOImpl getSlsRma1() {
        return (SlsRmaVOImpl) findViewObject("SlsRma1");
    }

    /**
     * Container's getter for SlsRmaItmTemp1.
     * @return SlsRmaItmTemp1
     */
    public ViewObjectImpl getSlsRmaItmTemp1() {
        return (ViewObjectImpl) findViewObject("SlsRmaItmTemp1");
    }


    /**
     * Container's getter for SlsRmaItmTemp2.
     * @return SlsRmaItmTemp2
     */
    public ViewObjectImpl getSlsRmaItmTemp2() {
        return (ViewObjectImpl) findViewObject("SlsRmaItmTemp2");
    }

    /**
     * Container's getter for SlsRmaToSlsRmaItmTempVL1.
     * @return SlsRmaToSlsRmaItmTempVL1
     */
    public ViewLinkImpl getSlsRmaToSlsRmaItmTempVL1() {
        return (ViewLinkImpl) findViewLink("SlsRmaToSlsRmaItmTempVL1");
    }


    /**
     * Container's getter for TempVo1.
     * @return TempVo1
     */
    public ViewObjectImpl getTempVo1() {
        return (ViewObjectImpl) findViewObject("TempVo1");
    }


    /**
     * Container's getter for CustomerTypeLov1.
     * @return CustomerTypeLov1
     */
    public CustomerTypeLovVOImpl getCustomerTypeLov1() {
        return (CustomerTypeLovVOImpl) findViewObject("CustomerTypeLov1");
    }


    /*********************************Methods to be used in managed bean code*********************************************/

    /**Method to add Lot Details**.
     */
    public void addLotDetails() {
        ViewObject vo = this.getSlsRmaItmLot1();
        Row curRow = vo.getCurrentRow();
        if (curRow.getAttribute("RcptQty") != null) {
            //  _log.info(" IN AMIMPLE CLASS ----->>>Rcpt Qunat--" + curRow.getAttribute("RcptQty"));
            curRow.setAttribute("RcptQtyBs", curRow.getAttribute("RcptQty"));
        }
        this.getSlsRmaItmLot1().executeQuery();
    }

    /**Method to add LotWise Bin**.
     */
    public void addItmToLotBin() {
        ViewObject lot = this.getSlsRmaItmLot1();
        ViewObject bin = this.getSlsRmaItmBin1();
        Row lotRow = lot.getCurrentRow();
        Row binRow = bin.getCurrentRow();
        binRow.setAttribute("LotId", lotRow.getAttribute("LotId"));
    }


    /*****Method to Validate Lot Quantity*****/


    public boolean isLotQtyValid(oracle.jbo.domain.Number obj) {
        oracle.jbo.domain.Number _rejQty =
            (oracle.jbo.domain.Number) getSlsRmaItem2().getCurrentRow().getAttribute("RejQty");
        ViewObjectImpl _lotVo = (ViewObjectImpl) findViewObject("SlsRmaItmLot1");
        Row curRw = _lotVo.getCurrentRow();
        RowSetIterator rsi = _lotVo.createRowSetIterator(null);
        oracle.jbo.domain.Number sum = new oracle.jbo.domain.Number(0);
        while (rsi.hasNext()) {
            Row cur = rsi.next();
            if (cur != null && curRw != cur) {
                oracle.jbo.domain.Number _lotRejQnt = (oracle.jbo.domain.Number) cur.getAttribute("RcptQtyBs");
                if (_lotRejQnt != null) {
                    sum = sum.add(_lotRejQnt);
                }
            }
        }
        rsi.closeRowSetIterator();
        sum = sum.add(obj);
        if (_rejQty != null && sum.compareTo(_rejQty) == 1) {
            return true;
        }
        return false;
    }

    /*****Method to validate bin quantity******/

    public boolean isBinQntValid(oracle.jbo.domain.Number _obj) {
        System.out.println("object  " + _obj);
        oracle.jbo.domain.Number _lotRejQty = new Number(0);
        String lotId = "";
        Row lotVwRow = (Row) getSlsRmaItmLot1().getCurrentRow();
        if (lotVwRow != null) {
            _lotRejQty = (oracle.jbo.domain.Number) lotVwRow.getAttribute("RcptQtyBs");
            lotId = (String) lotVwRow.getAttribute("LotId");
        }

        System.out.println("Lot id--" + lotId);
        System.out.println("LOT Rej Quant--" + _lotRejQty);
        ViewObjectImpl _binVo = (ViewObjectImpl) findViewObject("SlsRmaItmBin1");
        Row binRow = _binVo.getCurrentRow();
        Row filteredRow[] = _binVo.getFilteredRows("LotId", lotId);
        System.out.println("Filtered row length--" + filteredRow.length);
        oracle.jbo.domain.Number sum = new oracle.jbo.domain.Number(0);
        if (filteredRow.length > 0) {
            System.out.println("set 1");
            for (Row cur : filteredRow) {
                System.out.println("set 2");
                if (binRow != cur) {
                    System.out.println("set 3");
                    oracle.jbo.domain.Number _binRcptQnt = (oracle.jbo.domain.Number) cur.getAttribute("RcptQtyBs");
                    if (_binRcptQnt != null) {
                        System.out.println("set 4");
                        sum = sum.add(_binRcptQnt);
                        System.out.println("Sum- in amimpl--" + sum);
                    }
                }

            }
        }
        sum = sum.add(_obj);
        System.out.println("final sum- in bin-->" + sum + "_lotRejQty " + _lotRejQty);
        if (_lotRejQty != null && sum.compareTo(_lotRejQty) == 1) {
            return true;
        }

        return false;
    }

    /*****Method to Insert Gate entry item Data In Rma Item Table****
     * Modified by Mousham on 1st July
     *
     * 2 : Customer have not been selected.
     * 1 : gate Entry is not Selected
     * */

    public Integer fnsToInsertInItemTable(String geId) {
        Integer valid = 0;
        System.out.println("row of ge " + this.getLovGeId1().getRowCount());
        Row rmaRow = this.getSlsRma1().getCurrentRow();
        if (rmaRow != null) {

            String docId = rmaRow.getAttribute("DocId") == null ? null : rmaRow.getAttribute("DocId").toString();
            Timestamp docDt = rmaRow.getAttribute("DocDt") == null ? null : (Timestamp) rmaRow.getAttribute("DocDt");
            Integer eoId = rmaRow.getAttribute("EoId") == null ? null : (Integer) rmaRow.getAttribute("EoId");
            Integer uCreate =
                rmaRow.getAttribute("UsrIdCreate") == null ? null : (Integer) rmaRow.getAttribute("UsrIdCreate");
            Timestamp uDate =
                rmaRow.getAttribute("UsrIdCreateDt") == null ? null : (Timestamp) rmaRow.getAttribute("UsrIdCreateDt");
            String geDocId = rmaRow.getAttribute("GeDocId") == null ? null : rmaRow.getAttribute("GeDocId").toString();
            // System.out.println("Parameters Values... " + _cldId + "  " + _slocId + "   " + _hoOrgId + "    " + _orgId +
            //      "    " + _docId + "    " + _docDt + "    " + _eoId + "    " + geId + "    " + _uCreate +
            //     "    " + _uDate);

            if (geDocId == null) {
                valid = 1;
            } else if (eoId == null) {
                valid = 2;
            } else {

                try {
                    Object res =
                        ADFModelUtils.callFunction(this,
                                                   new StringBuilder("SLS.FN_INS_GE_ITM_TO_RMA(?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), docId,
                                                   docDt, eoId, geDocId, uCreate, uDate
                    }, VARCHAR);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                    ADFModelUtils.showFormattedFacesMessage("There have  been Some Error in calling function FN_INS_GE_ITM_TO_RMA ",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);

                }
            }
            getSlsRmaItmTemp2().executeQuery();
            this.getTempVo1().executeQuery();
        }

        return valid;

    }


    /*****This function is use to Call Daabade Function*****/
    protected Object callStoredFunction2(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }


    /**
     **
     **
     ***Fuction CAlls database function to insert data in shipment table**
     *
     *
     ****/
    public BigDecimal instoTnsInShipNItm() {
        System.out.println("Inside me---->");
        BigDecimal i = new BigDecimal(0);
        try {

            Row _rmaVoRow = this.getSlsRma1().getCurrentRow();
            Row _shipVoRow = this.getSlsRmaShipmnt2().getCurrentRow();
            Row _itmTempVoRow = this.getSlsRmaItmTemp2().getCurrentRow();

            if (_rmaVoRow != null && _shipVoRow != null && _itmTempVoRow != null) {
                Integer _slocId = (Integer) _rmaVoRow.getAttribute("SlocId");
                String cldId = (String) _rmaVoRow.getAttribute("CldId");
                String _orgId = (String) _rmaVoRow.getAttribute("OrgId");
                String _hoOrgId = (String) _rmaVoRow.getAttribute("HoOrgId");
                String _docId = (String) _rmaVoRow.getAttribute("DocId");
                Timestamp _docDt = (Timestamp) _rmaVoRow.getAttribute("DocDt");
                Integer _eoId = (Integer) _rmaVoRow.getAttribute("EoId");
                String _shipId = (String) _shipVoRow.getAttribute("ShipmntId");
                Timestamp shipDate = (Timestamp) _shipVoRow.getAttribute("ShipmntDt");
                String _geDocId = (String) _rmaVoRow.getAttribute("GeDocId");
                String _itmId = (String) _itmTempVoRow.getAttribute("ItmId");
                Integer _usrIdCreate = (Integer) _rmaVoRow.getAttribute("UsrIdCreate");
                Timestamp _usrCtreatDt = (Timestamp) _rmaVoRow.getAttribute("UsrIdCreateDt");
                String _wareHouse = (String) _rmaVoRow.getAttribute("WhId");
                System.out.println(_wareHouse + "---------ware house");
                System.out.println("SERVER LOCATION ID =" + _slocId + "CLOUD ID IS=" + cldId + "ORGANISATION ID IS=" +
                                   _orgId + "HEAD OFFICE ORG ID IS=" + _hoOrgId + "DOC ID  IS=" + _docId +
                                   "DOC DATE IS=" + _docDt + "CUSTOMER ID IS=" + _eoId + "SHIPMENT ID=" + _shipId +
                                   "SHIPMENT DATE IS=" + shipDate + "GATE ENTRY ID IS=" + _geDocId + "ITEM ID IS=" +
                                   _itmId + "CRETAED BY ID IS=" + _usrIdCreate + "CREATE ADTE IS=" + _usrCtreatDt);
                i = (BigDecimal) callStoredFunction2(INTEGER,
                                                     "SLS.FN_INS_GE_TO_SHIP_ITM_RMA(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     cldId, _slocId, _hoOrgId, _orgId, _docId, _docDt, _eoId, _shipId,
                                                     shipDate, _geDocId, _itmId, _usrIdCreate, _usrCtreatDt, _wareHouse
                });
                // System.out.println("return value from function  " + i);

                getSlsRmaItem2().executeQuery();
                getSlsRmaItem1().executeQuery();
                /*   System.out.println("shipment id iin claaling ddb fns---" +
                                   this.getSlsRmaItem2().getCurrentRow().getAttribute("ShipmntId") + " key is----" +
                                   this.getSlsRmaItem2().getCurrentRow().getKey()); */
                return i;
            }
            //    System.out.println("return value from function  " + i);

            // getSlsRmaItem2().executeQuery();
        } catch (Exception e) {
            e.printStackTrace();
            // System.out.println("in catch");
            return i;
        }

        /*         System.out.println("shipment id in caling db fns---" +
                           this.getSlsRmaItem2().getCurrentRow().getAttribute("ShipmntId") + " key is----" +
                           this.getSlsRmaItem2().getCurrentRow().getKey()); */
        this.getSlsRmaShipmnt2().executeQuery();
        //  this.getSlsRmaItem2().executeQuery();
        return i;

    }

    private static int VARCHAR = Types.VARCHAR;


    public void fnsToInsertDataInShipmentAndItemTable(String gatePassDocId) {
    }


    /*****This function is use to Call Database Function*****/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }


    /*****This function is use to Call Daabade Function*****/
    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }

    /***Function To Validate Rejected Quantity in SLS$RMA$ITM Table *****/
    public String validateRejectedQuant(oracle.jbo.domain.Number _rejectedQuant) {
        Row currRow = this.getSlsRmaItem2().getCurrentRow();
        if (currRow != null) {
            oracle.jbo.domain.Number _shipQuant = (oracle.jbo.domain.Number) currRow.getAttribute("ShipmntQty");
            if (_shipQuant != null) {
                /*    System.out.println("_rejectedQuant " + _rejectedQuant + "_shipQuant " + _shipQuant +
                                   "_rejectedQuant.compareTo(_shipQuant) == -1" +
                                   _rejectedQuant.compareTo(_shipQuant)); */
                if (_rejectedQuant.compareTo(_shipQuant) <= 0) { //_rejectedQuant.intValue() <= _shipQuant.intValue()
                    return "OK";
                } else {
                    return "NOT_OK";
                }
            }

        }
        return "NOT_OK";
    }


    /****Methods to get Global Parameter*/
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public String getparamHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getparamBinCheck() {
        return resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
    }

    public String getparamGeChk() {
        return resolvEl("#{pageFlowScope.GLBL_ORG_GE_CHK}");
    }

    /*****Functon to set data in Transiant fields i.e. trnasShipId amd TransShipDate*****/

    public void setDataInShipmntTbl(StringBuffer ShipId) {
        /*String geDocId = "";
        Timestamp date = null;
        Row rmaRow = this.getSlsRma1().getCurrentRow();
        if (rmaRow != null) {
            geDocId = (String) rmaRow.getAttribute("GeDocId");
        }

        TempVoVORowImpl currentRow = (TempVoVORowImpl) this.getTempVo1().getCurrentRow();
        RowSet idVO2 = currentRow.getLovDistnctShipVO1(); //LOV when NO GATE ENTRY

        RowSetIterator it2 = idVO2.createRowSetIterator(null); //ITERSSTOR WHEN NO GATE ENTRYs
        if (geDocId != null) {
            while (it.hasNext()) {
                Row r = it.next();
                if (r.getAttribute("DocId").toString().equals(ShipId.toString())) {
                    java.sql.Timestamp sql = (java.sql.Timestamp) r.getAttribute("DocDt");
                    date = new Timestamp(sql);
                    System.out.println("DOC Date is---" + date);

                }
            }
            it.closeRowSetIterator();
            if (ShipId != null) {
                //System.out.println("Insertion in process");
                Row shpmntRow = this.getSlsRmaShipmnt2().getCurrentRow();
                shpmntRow.setAttribute("ShipmntId", ShipId);
                shpmntRow.setAttribute("ShipmntDt", date);
                shpmntRow.setAttribute("CldId", getparamCldId());
                shpmntRow.setAttribute("SlocId", getparamSlocId());
                shpmntRow.setAttribute("OrgId", getparamOrgId());
                shpmntRow.setAttribute("HoOrgId", getparamHoOrgId());
                //System.out.println("Id-" + rmaRow.getAttribute("DocId") + " Date-" + rmaRow.getAttribute("DocDt"));
                shpmntRow.setAttribute("DocId", rmaRow.getAttribute("DocId"));
                shpmntRow.setAttribute("DocDt", rmaRow.getAttribute("DocDt"));
                // System.out.println("inserted data in rma shpmnt");
            }
        } else {
            //System.out.println("in else when gate entry is null");
            while (it2.hasNext()) {
                Row r = it2.next();
                //System.out.println("row " + r);
                //  System.out.println("Inside While");
                if (r.getAttribute("DocId").toString().equals(ShipId.toString())) {
                    java.sql.Timestamp sql = (java.sql.Timestamp) r.getAttribute("DocDt");
                    date = new Timestamp(sql);
                    System.out.println("Shipment Date is ---->" + date);

                }
            }
            it.closeRowSetIterator();
            if (ShipId != null) {
                //System.out.println("Insertion in process");
                Row shpmntRow = this.getSlsRmaShipmnt2().getCurrentRow();
                shpmntRow.setAttribute("ShipmntId", ShipId);
                shpmntRow.setAttribute("ShipmntDt", date);
                shpmntRow.setAttribute("CldId", getparamCldId());
                shpmntRow.setAttribute("SlocId", getparamSlocId());
                shpmntRow.setAttribute("OrgId", getparamOrgId());
                shpmntRow.setAttribute("HoOrgId", getparamHoOrgId());
                // System.out.println("Id-" + rmaRow.getAttribute("DocId") + " Date-" + rmaRow.getAttribute("DocDt"));
                shpmntRow.setAttribute("DocId", rmaRow.getAttribute("DocId"));
                shpmntRow.setAttribute("DocDt", rmaRow.getAttribute("DocDt"));
                // System.out.println("inserted data in rma shpmnt");
            }
        } */


    }

    /*****Functon execute tempvo*****/

    public void executeRowSetLov() {
        ViewObject temp = this.getTempVo1();
        temp.executeQuery();
        // this.getSlsRmaItem2().executeQuery();
    }

    /*****Functon to check duplicate shipment*****/
    public boolean isDuplicateship(String _ShipId) {
        ViewObjectImpl impl = this.getSlsRmaShipmnt2();
        RowQualifier rq = new RowQualifier(impl);
        rq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                          getparamOrgId() + "' and ShipmntId ='" + _ShipId + "'");
        // System.out.println("rq.getExprStr();" + rq.getExprStr());
        Row[] filteredRows = impl.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            return true;
        } else
            return false;
    }


    public void executeSlsRmaItemSrVo() {
        this.getSlsRmaItmSr1().executeQuery();
    }

    public void executeSlsRmaItemLotVo() {
        this.getSlsRmaItmLot1().executeQuery();
    }

    /**
     * Container's getter for SlsSearchRma1.
     * @return SlsSearchRma1
     */
    public ViewObjectImpl getSlsSearchRma1() {
        return (ViewObjectImpl) findViewObject("SlsSearchRma1");
    }

    /**
     * Container's getter for TransSearchAtt1.
     * @return TransSearchAtt1
     */
    public ViewObjectImpl getTransSearchAtt1() {
        return (ViewObjectImpl) findViewObject("TransSearchAtt1");
    }


    public void searchRma() {
        String _eoNm = null;
        String rmadocId = null;
        String _rmaTypDesc = null;
        oracle.jbo.domain.Timestamp _frmDt = null;
        oracle.jbo.domain.Timestamp _toDt = null;

        ViewObjectImpl _searchVo = this.getSlsSearchRma1();
        ViewObjectImpl _transVo = this.getTransSearchAtt1();
        Row _transRow = _transVo.getCurrentRow();
        String rmaNo = "";
        if (_transRow != null) {
            _eoNm = (String) _transRow.getAttribute("TransNewEoNm");
            rmadocId = (String) _transRow.getAttribute("TransRmaDocId");
            rmaNo = (String) _transRow.getAttribute("TransRmaNo");
            //System.out.println("rma no" + rmaNo);
            _rmaTypDesc = (String) _transRow.getAttribute("TransRmaTypeDesc");
            _frmDt = (oracle.jbo.domain.Timestamp) _transRow.getAttribute("TransFrmDt");
            // _frmDt= new Timestamp(_sqlFrmDt);
            _toDt = (oracle.jbo.domain.Timestamp) _transRow.getAttribute("TransToDt");
            //_toDt= new Timestamp(_sqlToDt);
            if (_toDt != null) {
                java.sql.Date date;
                try {
                    date = _toDt.dateValue();
                    date.setDate(date.getDate() + 1);
                    // System.out.println("Date is :" + date);
                    _toDt = new Timestamp(date);
                } catch (SQLException e) {
                }
            }
        }
        /*   System.out.println("SEARCH ATTRIBUTE VALUE--->>" + _eoNm + "<------>" + rmadocId + "<-------->" + _rmaTypDesc +
                           "<------>" + _frmDt + "<------->" + _toDt); */

        ViewCriteria vc = _searchVo.getViewCriteria("SlsSearchRmaVOCriteria2");
        //System.out.println("view criteris " + vc.getAllRowsInRange().length + "d");
        _searchVo.applyViewCriteria(vc);
        _searchVo.setNamedWhereClauseParam("BindEoNm", _eoNm);
        _searchVo.setNamedWhereClauseParam("BindRmaDocId", rmadocId);
        _searchVo.setNamedWhereClauseParam("BindRmaTypeDesc", _rmaTypDesc);
        _searchVo.setNamedWhereClauseParam("BindRmaStartDate", _frmDt);
        _searchVo.setNamedWhereClauseParam("BindRmaEndDate", _toDt);
        _searchVo.setNamedWhereClauseParam("BindCldID", getparamCldId());
        _searchVo.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        _searchVo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        _searchVo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        _searchVo.setNamedWhereClauseParam("BindDispDocId", _transRow.getAttribute("TransDocDispId"));
        _searchVo.executeQuery();
        //System.out.println(_searchVo.getQuery());
        //System.out.println("row count of serarch " + _searchVo.getRowCount());

    }

    public void restetRma() {
        //getTransSearchAtt1().reset();
        // getSlsSearchRma1().reset();

        ViewObjectImpl _searchVo = this.getSlsSearchRma1();
        // ViewObjectImpl _transVo = this.getTransSearchAtt1();
        // Row _transRow = _transVo.getCurrentRow();
        ViewCriteria vc = _searchVo.getViewCriteria("SlsSearchRmaVOCriteria");
        _searchVo.applyViewCriteria(vc);
        _searchVo.setNamedWhereClauseParam("BindEoNm", -1);
        _searchVo.setNamedWhereClauseParam("BindDispDocId", null);
        _searchVo.setNamedWhereClauseParam("BindRmaTypeDesc", null);
        _searchVo.setNamedWhereClauseParam("BindRmaStartDate", null);
        _searchVo.setNamedWhereClauseParam("BindRmaEndDate", null);
        _searchVo.setNamedWhereClauseParam("BindCldID", getparamCldId());
        _searchVo.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        _searchVo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        _searchVo.setNamedWhereClauseParam("BindDispDocId", null);
        _searchVo.executeQuery();

    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);

    }

    public void executeSearchedRma() {
        String _docId = "";
        Integer _slocd = new Integer(1);
        String _cldId = "";
        String _orgId = "";
        String _hoOrgId = "";
        ViewObjectImpl _searchVo = this.getSlsSearchRma1();
        Row r = _searchVo.getCurrentRow();
        if (resolvElDCMsg("#{pageFlowScope.PASSED_DOCID}") != null) {
            _docId = resolvElDCMsg("#{pageFlowScope.PASSED_DOCID}").toString();
            _slocd = Integer.parseInt(resolvElDCMsg("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            _cldId = resolvElDCMsg("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            _orgId = resolvElDCMsg("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            _hoOrgId = resolvElDCMsg("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

            SlsRmaVOImpl _rmVo = this.getSlsRma1();
            _rmVo.setBindDocId(_docId);
            _rmVo.setBindCldId(_cldId);
            _rmVo.setBindOrgId(_orgId);
            _rmVo.setBindSlocId(_slocd);
            _rmVo.setBindHoOrgId(_hoOrgId);
            _rmVo.executeQuery();
        } else if (r != null) {
            _docId = (String) r.getAttribute("DocId");
            _slocd = (Integer) r.getAttribute("SlocId");
            _cldId = (String) r.getAttribute("CldId");
            _orgId = (String) r.getAttribute("OrgId");
            _hoOrgId = (String) r.getAttribute("HoOrgId");

            SlsRmaVOImpl _rmVo = this.getSlsRma1();
            _rmVo.setBindDocId(_docId);
            _rmVo.setBindCldId(_cldId);
            _rmVo.setBindOrgId(_orgId);
            _rmVo.setBindSlocId(_slocd);
            _rmVo.setBindHoOrgId(_hoOrgId);
            _rmVo.executeQuery();
            //_hoOrgId=(String)r.getAttribute("DocId");
        } else {
            FacesMessage msg =
                new FacesMessage(resolvEl("#{bundle['MSG.1766']}")); //"Something went wrong,Go Back to Search & try again ");
            msg.setSeverity(FacesMessage.SEVERITY_FATAL);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        }
    }

    /*****This function is use to Call Daabade Function*****/
    protected Object callStoredProcedure(int sqlReturnType, String stmt, Object[] bindVars) {
        // System.out.println("<<<-----IN AMIMPL CLASS METHOD = callStoredProcedure---->>>" + sqlReturnType + "--" +
        //  stmt + "   ---" + bindVars);
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        // System.out.println("set  1");
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();

            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            //  System.out.println("----" + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }


    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        System.out.println("in wf txn methos==");
        //System.out.println("Doc id of shipment  " + this.getSlsRmaItem2().getCurrentRow().getAttribute("ShipmntId"));

        try {
            Integer docType = (Integer) this.getSlsRma1().getCurrentRow().getAttribute("RmaTypId");
            System.out.println("Oreder type getWfNo" + docType);
            System.out.println(" SlocId " + SlocId + " CldId " + CldId + " OrgId " + OrgId + " DocNo  " + DocNo);

            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, docType
            });
            System.out.println(" wf number  fucntion " + obj);
            return obj.toString();
        } catch (Exception e) {
            System.out.println("-- ");
            e.printStackTrace();
            String msg2 = resolvEl("#{bundle['MSG.1767']}"); //"Work Flow No. Is Not Defined For This User"MSG.1767);
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
            return null;
        }
    }

    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;


    public BigDecimal getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, Integer DocNo) {
        BigDecimal lev = new BigDecimal(0);
        Integer docType = (Integer) this.getSlsRma1().getCurrentRow().getAttribute("RmaTypId");
        System.out.println("Oreder type getWfNo" + docType);
        System.out.println(" SlocId " + SlocId + " CldId " + CldId + " OrgId " + OrgId + " DocNo  " + DocNo + "UsrId " +
                           UsrId);
        try {


            lev = (BigDecimal) callStoredFunction(INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                  SlocId, CldId, OrgId, UsrId, WfNo, new Integer(21510), docType
            });


            System.out.println("Level in am=" + lev);

        } catch (Exception e) {
            e.printStackTrace();
            String msg2 = resolvEl("#{bundle['MSG.1768']}"); //resolvEl("Level Is Not Defined For This User");
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
            lev = null;
        }
        System.out.println("return level is " + lev);
        return lev;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        try {
            String DocId = getSlsRma1().getCurrentRow().getAttribute("DocId").toString();
            Integer docType = (Integer) this.getSlsRma1().getCurrentRow().getAttribute("RmaTypId");
            System.out.println("RmaTypId type insIntoTxn " + docType);
            System.out.println(" SlocId " + SlocId + " CldId " + CldId + " OrgId " + OrgId + " DocNo  " + DocNo +
                               "UsrId " + usr_idFrm + " usr_idTo " + usr_idTo + " levelTo " + levelTo + " levelFrm " +
                               levelFrm + " action " + action + " remark " + remark + "v amount " + amount);
            /*   System.out.println(" calling ins into txn fns iin impl " +
                               callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                  new Object[] { SlocId, CldId, OrgId, DocNo, WfNo,docType, DocId, usr_idFrm,
                                                                 usr_idTo, levelFrm, levelTo, action, remark,
                                                                 amount,"S" }).toString()); */
            return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       SlocId, CldId, OrgId, DocNo, docType, WfNo, DocId, usr_idFrm,
                                                       usr_idTo, levelFrm, levelTo, action, remark, amount, "S"
        }).toString());
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("e " + e);
            String msg2 =
                resolvEl("#{bundle['MSG.1769']}"); //resolvEl("There is an error while calling insIntoTxn function");
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message2);
            return null;
        }

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getSlsRma1().getCurrentRow().getAttribute("DocId").toString();
        System.out.println("DOCIDTXN--" + DocId);
        Integer docType = (Integer) this.getSlsRma1().getCurrentRow().getAttribute("RmaTypId");
        System.out.println("Oreder type getWfNo" + docType);
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, DocId, docType
        });
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        System.out.println(" pendingCheck obj " + obj);
        return UsrId;
    }

    public String getTxnId() {
        String DocId = getSlsRma1().getCurrentRow().getAttribute("DocId").toString();
        return DocId;
    }

    public void settxnidlast(String txn) {
        TxnIdLast = txn;
    }
    private String TxnIdLast = null;

    public void executesearchVo() {
        this.getSlsSearchRma1().executeQuery();
    }

    public String resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();
        return Message.toString();
    }

    public void executePageWithGlobalparam() {
        ViewObjectImpl impl = getSlsSearchRma1();
        impl.setNamedWhereClauseParam("BindCldID", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("BindOrgId", -1);
        impl.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        impl.executeQuery();
    }


    /**
     * Method used to call function to get the fy id
     * @return FY Id
     * */
    public Integer getFYidOrg(String CldId, String OrgId) {
        ViewObjectImpl slsSo = this.getSlsRma1();
        Integer fyId = 0;
        _log.info("DocDate --" + slsSo.getCurrentRow().getAttribute("DocDt"));
        System.out.println("DocDate --" + slsSo.getCurrentRow().getAttribute("DocDt"));
        if (slsSo.getCurrentRow().getAttribute("DocDt") != null) {
            fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                 CldId, OrgId, slsSo.getCurrentRow().getAttribute("DocDt")
            }));


            if (fyId > 0 && slsSo.getCurrentRow().getAttribute("FyId") == null) {
                _log.info("Set FY id in Order");
                slsSo.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        _log.info("Fyid is--" + fyId);
        return fyId;
    }


    /*Methhod to generate display id*/

    public String generateDispDocNo() {
        ViewObject slsSo = this.getSlsRma1();
        Row curRow = slsSo.getCurrentRow();
        String ret = null;
        String p_doc_id = curRow.getAttribute("DocId").toString();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer typId = (curRow.getAttribute("RmaTypId") == null ? 0 : (Integer) curRow.getAttribute("RmaTypId"));

        if (curRow.getAttribute("RmaId") == null) {
            ret = callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                     p_sloc_id, p_cldId, p_org_id, new Integer(21510), p_doc_id, typId, "SLS$RMA",
                                     getFYidOrg(p_cldId, p_org_id)
            }).toString();
            _log.info("DisplyId is-->" + ret);
            curRow.setAttribute("RmaId", ret);
        } else {
            ret = "01" + curRow.getAttribute("RmaId").toString();
            String sast = "01" + ret;
            System.out.println("new strng---" + sast);
            System.out.println("in amimpl rtn value is when rma is already exist " + ret);
        }
        this.getDBTransaction().postChanges();
        return ret;
    }


    /**
     * Container's getter for LovWhId1.
     * @return LovWhId1
     */
    public ViewObjectImpl getLovWhId1() {
        return (ViewObjectImpl) findViewObject("LovWhId1");
    }

    /**
     * Container's getter for CurrIdLov1.
     * @return CurrIdLov1
     */
    public ViewObjectImpl getCurrIdLov1() {
        return (ViewObjectImpl) findViewObject("CurrIdLov1");
    }

    public void executeLotVo() {
        getSlsRmaItmLot1().executeQuery();
    }

    public void execteBinVo() {
        getSlsRmaItmBin1().executeQuery();
    }

    public void executeSrVo() {
        getSlsRmaItmSr1().executeQuery();
    }


    public String saveCredit() {
        String returnVal = null;
        Row _rmaVoRow = this.getSlsRma1().getCurrentRow();
        if (_rmaVoRow != null) {
            Integer _slocId = (Integer) _rmaVoRow.getAttribute("SlocId");
            String cldId = (String) _rmaVoRow.getAttribute("CldId");
            String _orgId = (String) _rmaVoRow.getAttribute("OrgId");
            String _hoOrgId = (String) _rmaVoRow.getAttribute("HoOrgId");
            String _docId = (String) _rmaVoRow.getAttribute("DocId");
            Timestamp _docDt = (Timestamp) _rmaVoRow.getAttribute("DocDt");
            Integer _eoId = (Integer) _rmaVoRow.getAttribute("EoId");
            String _geDocId = (String) _rmaVoRow.getAttribute("GeDocId");
            Integer _usrIdCreate = (Integer) _rmaVoRow.getAttribute("UsrIdCreate");
            Timestamp _usrCtreatDt = (Timestamp) _rmaVoRow.getAttribute("UsrIdCreateDt");
            String _wareHouse = (String) _rmaVoRow.getAttribute("WhId");
            Integer fyid = (Integer) _rmaVoRow.getAttribute("FyId");
            System.out.println(_wareHouse + "---------ware house" + "ans fy id is   " + fyid);
            System.out.println("SERVER LOCATION ID =" + _slocId + "--CLOUD ID IS=" + cldId + "--ORGANISATION ID IS=" +
                               _orgId + "--HEAD OFFICE ORG ID IS=" + _hoOrgId + "---DOC ID  IS=" + _docId +
                               "DOC DATE IS=" + _docDt + "--CRETAED BY ID IS=" + _usrIdCreate + "--CREATE ADTE IS=" +
                               _usrCtreatDt);
            try {
                returnVal = (String) callStoredFunction2(VARCHAR, "SLS.FN_SLS_TO_MM_RMA_ITM(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         cldId, _slocId, _hoOrgId, _orgId, _wareHouse, fyid, _docDt,
                                                         _docId, _docDt, _eoId, _usrIdCreate, _usrCtreatDt
                });

            } catch (Exception e) {
                ADFModelUtils.showFacesMessage("There have been an error in calling function FN_SLS_TO_MM_RMA_ITM ! Please try again !",
                                               e.getMessage(), FacesMessage.SEVERITY_ERROR, null);
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return returnVal;
    }

    public Boolean callMM_UPDT_STK(String returnVal) {
        Boolean b = false;
        Row _rmaVoRow = this.getSlsRma1().getCurrentRow();
        if (_rmaVoRow != null) {
            String PARAM_SOURCE_DOC_ID = returnVal;
            Integer PARAM_SLOC_ID = (Integer) _rmaVoRow.getAttribute("SlocId");
            String PARAM_CLD_ID = (String) _rmaVoRow.getAttribute("CldId");
            String PARAM_ORG_ID = (String) _rmaVoRow.getAttribute("OrgId");
            String _wareHouse = (String) _rmaVoRow.getAttribute("WhId");

            String p_upd_type = "R";
            try {
                Integer retunFrmUpdateStk = (Integer) callStoredFunction2(Types.INTEGER, "MM.MM_UPDT_STK(?,?,?,?,?,?)", new Object[] {
                                                                          PARAM_CLD_ID, PARAM_SLOC_ID, PARAM_ORG_ID,
                                                                          _wareHouse, PARAM_SOURCE_DOC_ID, p_upd_type
                });
                b = true;
            } catch (Exception e) {
                ADFModelUtils.showFormattedFacesMessage("There have  been Some Error in calling function MM_UPDT_STK ",
                                                        e.getMessage(), FacesMessage.SEVERITY_ERROR);
                e.printStackTrace();
                b = false;

            }
        }
        return b;
    }

    public Boolean callFN_SLS_TO_FIN_CREDIT_NOTE() {
        Boolean b = false;
        Row _rmaVoRow = this.getSlsRma1().getCurrentRow();
        if (_rmaVoRow != null) {
            String PARAM_SOURCE_DOC_ID = (String) _rmaVoRow.getAttribute("DocId");
            Integer PARAM_SLOC_ID = (Integer) _rmaVoRow.getAttribute("SlocId");
            String PARAM_CLD_ID = (String) _rmaVoRow.getAttribute("CldId");
            String PARAM_ORG_ID = (String) _rmaVoRow.getAttribute("OrgId");
            String PARAM_HO_ORG_ID = (String) _rmaVoRow.getAttribute("HoOrgId");
            Timestamp PARAM_SOURCE_DOC_DT = (Timestamp) _rmaVoRow.getAttribute("DocDt");
            oracle.jbo.domain.Number PARAM_SOURCE_AMT = new oracle.jbo.domain.Number(0);
            Integer UID_POST = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            Integer PARAM_EO_ID = (Integer) _rmaVoRow.getAttribute("EoId");
            Integer PARAM_COA_ID = (Integer) _rmaVoRow.getAttribute("CoaId");
            String PARAM_SOURCE_TYPE = "R";
            System.out.println("SERVER LOCATION ID =" + PARAM_SLOC_ID + "CLOUD ID IS=" + PARAM_CLD_ID +
                               "ORGANISATION ID IS=" + PARAM_ORG_ID + "HEAD OFFICE ORG ID IS=" + PARAM_HO_ORG_ID +
                               "DOC ID  IS=" + PARAM_SOURCE_DOC_ID + "DOC DATE IS=" + PARAM_SOURCE_DOC_DT +
                               "CUSTOMER ID IS=" + PARAM_EO_ID + "PARAM_SOURCE_AMT" + PARAM_SOURCE_AMT + "UID_POST--" +
                               UID_POST + "PARAM_COA_ID--" + PARAM_COA_ID + "PARAM_SOURCE_TYPE---" + PARAM_SOURCE_TYPE +
                               "PARAM_COA_ID--->" + PARAM_COA_ID);
            try {
                Integer a =
                    (Integer) callStoredFunction2(Types.INTEGER, "SLS.FN_SLS_TO_FIN_CREDIT_NOTE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                  PARAM_SOURCE_DOC_ID, PARAM_SOURCE_DOC_DT, PARAM_SOURCE_AMT, UID_POST,
                                                  PARAM_ORG_ID, PARAM_SLOC_ID, PARAM_HO_ORG_ID, PARAM_CLD_ID,
                                                  PARAM_EO_ID, PARAM_COA_ID, PARAM_SOURCE_TYPE
                });
                b = true;
                System.out.println("reurn from FN_SLS_TO_FIN_CREDIT_NOTE ---" + a);
            } catch (Exception e) {
                ADFModelUtils.showFormattedFacesMessage("There have  been Some Error in calling function FN_SLS_TO_FIN_CREDIT_NOTE ",
                                                        e.getMessage(), FacesMessage.SEVERITY_ERROR);
                e.printStackTrace();
                b = false;
            }
        }
        return b;

    }

    public Boolean fnsToUpdateGeState() {
        Boolean b = false;
        Row _rmaVoRow = this.getSlsRma1().getCurrentRow();
        if (_rmaVoRow != null) {
            Integer fyid = (Integer) _rmaVoRow.getAttribute("FyId");
            String geid = (String) _rmaVoRow.getAttribute("GeDocId");
            _log.info("Fy Id  is" + fyid + "NAd Gaet entri doc Id is---" + geid);
            try {
                Integer a = (Integer) callStoredFunction2(Types.INTEGER, "SLS.FN_UPDATE_GE_STAT(?,?,?,?,?)", new Object[] {
                                                          getparamCldId(), getparamSlocId(), getparamOrgId(), geid, fyid
                });
                b = true;
            } catch (Exception e) {
                ADFModelUtils.showFormattedFacesMessage("There have  been Some Error in calling function FN_UPDATE_GE_STAT ",
                                                        e.getMessage(), FacesMessage.SEVERITY_ERROR);
                e.printStackTrace();
                b = false;
            }
        }
        return b;
    }

    public void getapprovedId() {
        Boolean success = false;
        String actionT = resolvEl("#{pageFlowScope.WF_RET_VALUE}").toString();
        System.out.println("Action is " + actionT);
        ViewObjectImpl rmaVo = this.getSlsRma1();
        Row newRmaRow = rmaVo.getCurrentRow();
        Row rmaVoRow = this.getSlsRma1().getCurrentRow();
        Object whIdO = rmaVoRow.getAttribute("WhId");
        String WhId = (whIdO == null ? "" : whIdO.toString());

        System.out.println("Approved  doc is  " + rmaVoRow.getAttribute("DocId"));
        String curRmaDocId = rmaVoRow.getAttribute("DocId").toString();

        if (actionT.equals("A")) {
            if (rmaVoRow != null) {
                Integer rmaTypeId = (Integer) rmaVoRow.getAttribute("RmaTypId");
                if (rmaTypeId == 401) {
                    /*******************RMA  WITH CREDIT ONLY*****************************/
                    this.getDBTransaction().postChanges();
                    success = reverse_Tax_Function();
                    if (success) {
                        this.getDBTransaction().postChanges();
                        success = callFN_SLS_TO_FIN_CREDIT_NOTE();
                    }
                    if (success) {
                        showVoucherNo();
                    }

                } else if (rmaTypeId == 405) {
                    /*******************RMA  WITH RECEIPT AND CREDIT*****************************/
                    this.getDBTransaction().postChanges();
                    Object docTxnId = saveCredit();
                    if (docTxnId == null) {
                        success = false;
                    } else {
                        success = true;
                    }
                    this.getDBTransaction().postChanges();
                    if (success) {
                        success = callMM_UPDT_STK(docTxnId.toString());
                    }
                    this.getDBTransaction().postChanges();
                    if (success) {
                        success = reverse_Tax_Function();
                    }

                    this.getDBTransaction().postChanges();
                    if (success) {
                        success = callFN_SLS_TO_FIN_CREDIT_NOTE();
                    }
                    this.getDBTransaction().postChanges();
                    if (success) {
                        success = fnsToUpdateGeState();
                    }
                    /***************function to update cost of good***********************/
                    if (success) {
                        try {
                            Integer b =
                                (Integer) callStoredFunction2(Types.INTEGER,
                                                              "SLS.FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] {
                                                              rmaVoRow.getAttribute("DocId"),
                                                              rmaVoRow.getAttribute("DocDt"),
                                                              rmaVoRow.getAttribute("UsrIdCreate"), getparamOrgId(),
                                                              getparamSlocId(), getparamHoOrgId(), getparamCldId(), "R"
                            });
                            success = true;
                        } catch (Exception e) {
                            ADFModelUtils.showFormattedFacesMessage("There have  been Some Error in calling function FN_SLS_TO_FIN_COST_OF_GOOD ",
                                                                    e.getMessage(), FacesMessage.SEVERITY_ERROR);
                            e.printStackTrace();
                            success = false;
                        }
                    }
                    this.getDBTransaction().postChanges();
                    /***************************************************function to FN_GET_VOU_NO***********************/
                    if (success) {
                        showVoucherNo();
                    }
                } else if (rmaTypeId == 404) {
                    /*******************RMA  WITH RECEIPT AND NO CREDIT*****************************/

                    this.getDBTransaction().postChanges();
                    Object docTxnId = saveCredit();
                    if (docTxnId == null) {
                        success = false;
                    } else {
                        success = true;
                    }
                    this.getDBTransaction().postChanges();
                    if (success) {
                        success = callMM_UPDT_STK(docTxnId.toString());
                    }

                    this.getDBTransaction().postChanges();
                    if (success) {
                        success = fnsToUpdateGeState();
                    }
                    /***************function to update cost of good***********************/

                    if (success) {
                        try {
                            Integer b =
                                (Integer) callStoredFunction2(Types.INTEGER,
                                                              "SLS.FN_SLS_TO_FIN_COST_OF_GOOD(?,?,?,?,?,?,?,?)", new Object[] {
                                                              rmaVoRow.getAttribute("DocId"),
                                                              rmaVoRow.getAttribute("DocDt"),
                                                              rmaVoRow.getAttribute("UsrIdCreate"), getparamOrgId(),
                                                              getparamSlocId(), getparamHoOrgId(), getparamCldId(), "R"
                            });
                            success = true;
                            _log.info("-return value is---" + b);
                        } catch (Exception e) {
                            ADFModelUtils.showFormattedFacesMessage("There have  been Some Error in calling function FN_SLS_TO_FIN_COST_OF_GOOD ",
                                                                    e.getMessage(), FacesMessage.SEVERITY_ERROR);
                            e.printStackTrace();
                            success = false;
                        }
                    }

                    this.getDBTransaction().postChanges();
                    /***************function to FN_GET_VOU_NO***********************/
                    /* if(success){
                        showVoucherNo();
                    } */

                } else if (rmaTypeId == 402) {
                    _log.info("set 101 rma with repair ...." + rmaTypeId);

                    success = fnsToUpdateGeState();

                } else {
                    _log.info("set 101 .... rma with replacement" + rmaTypeId);
                    success = fnsToUpdateGeState();

                }
            }
            System.out.println("---setting mode for approved");
            newRmaRow.setAttribute("RmaMode", 314);
            System.out.println("WhId ::: Before Setting ::: " + WhId);
            newRmaRow.setAttribute("WhId", WhId);
            System.out.println("newRmaRow :::::: WhId ::::: " + newRmaRow.getAttribute("WhId"));
            System.out.println("Approved  doc is  " + rmaVoRow.getAttribute("DocId"));

            /******************function to update ram status****************************************************************************************************/
            if (success) {
                Integer a = null;
                try {
                    a = (Integer) callStoredFunction2(Types.INTEGER, "SLS.FN_UPDATE_RMA_STAT(?,?,?,?,?)", new Object[] {
                                                      getparamCldId(), getparamSlocId(), getparamOrgId(),
                                                      rmaVoRow.getAttribute("DocId"), 314
                    });
                    success = true;
                } catch (Exception e) {
                    ADFModelUtils.showFormattedFacesMessage("There have  been Some Error in calling function FN_GET_VOU_NO ",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    e.printStackTrace();
                    success = false;
                }
                if (success) {
                }
            }
        } else if (actionT.equals("F")) {
            newRmaRow.setAttribute("RmaMode", 317);
            System.out.println("forwarded ");
            Integer a = 0;
            try {
                a = (Integer) callStoredFunction2(Types.INTEGER, "SLS.FN_UPDATE_RMA_STAT(?,?,?,?,?)", new Object[] {
                                                  getparamCldId(), getparamSlocId(), getparamOrgId(),
                                                  rmaVoRow.getAttribute("DocId"), 317
                });
                success = true;
            } catch (Exception e) {
                ADFModelUtils.showFacesMessage("There have been an error in calling function FN_UPDATE_RMA_STAT ! Please try again !",
                                               e.getMessage(), FacesMessage.SEVERITY_ERROR, null);
                success = false;
                e.printStackTrace();
            }
        } else {
            _log.info("if cancel");
        }
        if (success) {
            this.getDBTransaction().commit();
        } else {

            // SlsRmaVOImpl rmVo = this.getSlsRma1();get
            ViewCriteria vo = getSlsRma1().getViewCriteria("SlsRmaVOCriteria");
            getSlsRma1().applyViewCriteria(vo);
            getSlsRma1().setBindDocId(curRmaDocId);
            getSlsRma1().setBindCldId(EbizParams.GLBL_APP_CLD_ID());
            getSlsRma1().setBindOrgId(EbizParams.GLBL_APP_USR_ORG());
            getSlsRma1().setBindSlocId(EbizParams.GLBL_APP_SERV_LOC());
            getSlsRma1().setBindHoOrgId(EbizParams.GLBL_HO_ORG_ID());
            getSlsRma1().executeQuery();
            this.getDBTransaction().rollback();

        }
    }

    /**
     *  Method to show voucher no. after approval
     */
    public void showVoucherNo() {
        Row rmaVoRow = this.getSlsRma1().getCurrentRow();
        try {

            Object voucherIdO = callStoredFunction(Types.VARCHAR, "SLS.FN_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] {
                                                   rmaVoRow.getAttribute("DocId"), rmaVoRow.getAttribute("UsrIdCreate"),
                                                   getparamOrgId(), getparamSlocId(), getparamHoOrgId(),
                                                   getparamCldId(), "R"
            });
            if (voucherIdO != null) {
                System.out.println("message");
                FacesMessage message =
                    new FacesMessage("<html><body>" + resolvEl("#{bundle['MSG.1773']} ") + voucherIdO + " </b>" +
                                     resolvEl(" #{bundle['MSG.1772']} ") + "</body></html>");
                message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }
        } catch (Exception e) {
            ADFModelUtils.showFormattedFacesMessage("There have  been Some Error in calling function FN_GET_VOU_NO ",
                                                    e.getMessage(), FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }

    }


    public void deleteRma() {

    }

    /**
     * Container's getter for SlsRmaShipmntVO1.
     * @return SlsRmaShipmntVO1
     */
    public ViewObjectImpl getSlsRmaShipmnt2() {
        return (ViewObjectImpl) findViewObject("SlsRmaShipmnt2");
    }

    /**
     * Container's getter for SlsRmaToSlsRmaShipmntVL1.
     * @return SlsRmaToSlsRmaShipmntVL1
     */
    public ViewLinkImpl getSlsRmaToSlsRmaShipmntVL1() {
        return (ViewLinkImpl) findViewLink("SlsRmaToSlsRmaShipmntVL1");
    }

    /**
     * Container's getter for SlsRmaItemVO1.
     * @return SlsRmaItemVO1
     */
    public SlsRmaItemVOImpl getSlsRmaItem2() {
        return (SlsRmaItemVOImpl) findViewObject("SlsRmaItem2");
    }

    /**
     * Container's getter for SlsRmaShipmntToSlslRmaItemVL1.
     * @return SlsRmaShipmntToSlslRmaItemVL1
     */
    public ViewLinkImpl getSlsRmaShipmntToSlslRmaItemVL1() {
        return (ViewLinkImpl) findViewLink("SlsRmaShipmntToSlslRmaItemVL1");
    }

    /**
     * Container's getter for SlsRmaItmBinVO1.
     * @return SlsRmaItmBinVO1
     */
    public SlsRmaItmBinVOImpl getSlsRmaItmBin1() {
        return (SlsRmaItmBinVOImpl) findViewObject("SlsRmaItmBin1");
    }

    /**
     * Container's getter for SlsRmaItmTOSlsRmaItmBin1.
     * @return SlsRmaItmTOSlsRmaItmBin1
     */
    public ViewLinkImpl getSlsRmaItmTOSlsRmaItmBin1() {
        return (ViewLinkImpl) findViewLink("SlsRmaItmTOSlsRmaItmBin1");
    }

    /**
     * Container's getter for SlsRmaItmLotVO1.
     * @return SlsRmaItmLotVO1
     */
    public ViewObjectImpl getSlsRmaItmLot1() {
        return (ViewObjectImpl) findViewObject("SlsRmaItmLot1");
    }

    /**
     * Container's getter for SlsRmaItmTOSlsRmaItmLotVL1.
     * @return SlsRmaItmTOSlsRmaItmLotVL1
     */
    public ViewLinkImpl getSlsRmaItmTOSlsRmaItmLotVL1() {
        return (ViewLinkImpl) findViewLink("SlsRmaItmTOSlsRmaItmLotVL1");
    }

    /**
     * Container's getter for SlsRmaItmSrVO1.
     * @return SlsRmaItmSrVO1
     */
    public ViewObjectImpl getSlsRmaItmSr1() {
        return (ViewObjectImpl) findViewObject("SlsRmaItmSr1");
    }

    /**
     * Container's getter for SlsRmaItmTOSlsRmaItmSrVL1.
     * @return SlsRmaItmTOSlsRmaItmSrVL1
     */
    public ViewLinkImpl getSlsRmaItmTOSlsRmaItmSrVL1() {
        return (ViewLinkImpl) findViewLink("SlsRmaItmTOSlsRmaItmSrVL1");
    }

    /**
     * Container's getter for shpmntItmViewVO1.
     * @return shpmntItmViewVO1
     */
    public ViewObjectImpl getshpmntItmViewVO1() {
        return (ViewObjectImpl) findViewObject("shpmntItmViewVO1");
    }

    /**
     * Container's getter for RmaShipTOShipItmVL1.
     * @return RmaShipTOShipItmVL1
     */
    public ViewLinkImpl getRmaShipTOShipItmVL1() {
        return (ViewLinkImpl) findViewLink("RmaShipTOShipItmVL1");
    }


    public void enterItmInRmaItmOnSoBasis() {
        ViewObjectImpl rmaVo = this.getSlsRma1();
        ViewObjectImpl rmaItmVo = this.getSlsRmaItem1();
        ViewObjectImpl rmaItmVo2 = this.getSlsRmaItem2();
        RowQualifier rmaItmRq = new RowQualifier(rmaItmVo);
        Row _rmaVoRow = rmaVo.getCurrentRow();
        Row _shipVoRow = this.getSlsRmaShipmnt2().getCurrentRow();
        ViewObjectImpl vo = this.getshpmntItmViewVO1();
        rmaItmRq.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and CldId='" +
                                getparamCldId() + "' and HoOrgId='" + getparamHoOrgId() + "' and DocId='" +
                                _rmaVoRow.getAttribute("DocId") + "' and ShipmntId='" +
                                _shipVoRow.getAttribute("ShipmntId") + "'");
        System.out.println("caluse  " + rmaItmRq.getExprStr());
        Row fltRmaItmRow[] = rmaItmVo.getFilteredRows(rmaItmRq);
        System.out.println("row length  :" + fltRmaItmRow.length);
        if (fltRmaItmRow.length > 0) {
            for (Row r : fltRmaItmRow) {
                r.remove();
                System.out.println("row removed  ");

            }

        }
        this.getSlsRmaItem2().executeQuery();
        this.getSlsRmaItem1().executeQuery();

        ViewObjectImpl slsShipItmVo = this.getSlsShipItmVO1();
        // RowQualifier shiItmRq = new RowQualifier(slsShipItmVo);

        slsShipItmVo.setNamedWhereClauseParam("BindShipSlocId", getparamSlocId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipCldId", getparamCldId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipOrgId", getparamOrgId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipHoOrgId", getparamHoOrgId());
        slsShipItmVo.setNamedWhereClauseParam("BindShipId", _shipVoRow.getAttribute("ShipmntId"));
        slsShipItmVo.executeQuery();
        int i = slsShipItmVo.getRangeSize();
        slsShipItmVo.setRangeSize(-1);
        if (_rmaVoRow != null && _shipVoRow != null) {
            Integer _slocId = (Integer) _rmaVoRow.getAttribute("SlocId");
            String cldId = (String) _rmaVoRow.getAttribute("CldId");
            String _orgId = (String) _rmaVoRow.getAttribute("OrgId");
            String _hoOrgId = (String) _rmaVoRow.getAttribute("HoOrgId");
            String _docId = (String) _rmaVoRow.getAttribute("DocId");
            Timestamp _docDt = (Timestamp) _rmaVoRow.getAttribute("DocDt");
            Integer _eoId = (Integer) _rmaVoRow.getAttribute("EoId");
            String _shipId = (String) _shipVoRow.getAttribute("ShipmntId");
            Timestamp shipDate = (Timestamp) _shipVoRow.getAttribute("ShipmntDt");
            Integer _usrIdCreate = (Integer) _rmaVoRow.getAttribute("UsrIdCreate");
            Timestamp _usrCtreatDt = (Timestamp) _rmaVoRow.getAttribute("UsrIdCreateDt");
            String _wareHouse = (String) _rmaVoRow.getAttribute("WhId");
            System.out.println(_wareHouse + "---------ware house");

            _log.info("SERVER LOCATION ID =" + _slocId + "CLOUD ID IS=" + cldId + "ORGANISATION ID IS=" + _orgId +
                      "HEAD OFFICE ORG ID IS=" + _hoOrgId + "DOC ID  IS=" + _docId + "DOC DATE IS=" + _docDt +
                      "CUSTOMER ID IS=" + _eoId + "SHIPMENT ID=" + _shipId + "SHIPMENT DATE IS=" + shipDate +
                      "CRETAED BY ID IS=" + _usrIdCreate + "CREATE ADTE IS=" + _usrCtreatDt);
            RowSetIterator soItr = vo.createRowSetIterator(null);
            while (soItr.hasNext()) {
                Row viewRow = soItr.next();
                Number rcptQty = (Number) viewRow.getAttribute("rejectedQuantTrans");
                String _itmId = (String) viewRow.getAttribute("ItmId");
                Number balanceQty = new Number(0);
                balanceQty = rcptQty;
                _log.info("rcptQty =" + rcptQty + " _itmId " + _itmId + " rcptQty.compareTo(0 " + rcptQty.compareTo(0) +
                          " balanceQty :" + balanceQty);
                if (balanceQty.compareTo(0) == 1) {
                    Row shipItmFltRow[] = slsShipItmVo.getFilteredRows("ItmId", _itmId);
                    _log.info("Filtrererd ro w:" + shipItmFltRow.length);
                    if (shipItmFltRow.length > 0) {
                        for (Row shipItmRow : shipItmFltRow) {
                            String SoDocId = (String) shipItmRow.getAttribute("SoId");
                            Number shipItmQty = (Number) shipItmRow.getAttribute("ShipmntQty");
                            _log.info(" Shipment quanitty :" + shipItmQty + "  received quantity : " + rcptQty +
                                      " leftQty :" + balanceQty);
                            if (balanceQty.compareTo(new Number(0)) > 0) {
                                if (balanceQty.compareTo(shipItmQty) >= 0) {
                                    Row slsRMaItmRow = rmaItmVo2.createRow();
                                    rmaItmVo2.insertRow(slsRMaItmRow);
                                    slsRMaItmRow.setAttribute("RcptQty", shipItmQty);
                                    rmaItmVo2.getCurrentRow().setAttribute("SoId", SoDocId);
                                    balanceQty = balanceQty.subtract(shipItmQty);
                                } else {
                                    Row slsRMaItmRow = rmaItmVo2.createRow();
                                    rmaItmVo2.insertRow(slsRMaItmRow);
                                    slsRMaItmRow.setAttribute("RcptQty", balanceQty);
                                    rmaItmVo2.getCurrentRow().setAttribute("SoId", SoDocId);
                                    balanceQty = new Number(0);
                                }
                            }

                        }
                    }
                }


                soItr.closeRowSetIterator();
                this.getSlsRmaItem2().executeQuery();
                this.getSlsRmaItem1().executeQuery();
            }


        }

    }

    public void delteBinRow() {
        this.getSlsRmaItmBin1().getCurrentRow().remove();

    }

    public void delteLotRow() {
        this.getSlsRmaItmLot1().getCurrentRow().remove();

    } /*  */

    public void delteSrRow() {
        this.getSlsRmaItmSr1().getCurrentRow().remove();

    }

    /**
     * Container's getter for ItemNameLov1.
     * @return ItemNameLov1
     */
    public ViewObjectImpl getItemNameLov1() {
        return (ViewObjectImpl) findViewObject("ItemNameLov1");
    }

    public void refreshLovSwitcher() {
        /* ViewObject temVo = this.getTempVo1();
        TempVoVORowImpl currRoo = (TempVoVORowImpl) temVo.getCurrentRow();
        RowSet rs = currRoo.getLovShipmentIdVO1();
        System.out.println("RowCount in rowset-" + rs.getRowCount());
        rs.executeQuery();
        temVo.executeQuery();
        System.out.println("Rowcoutn aftr-" + rs.getRowCount()); */

    }

    /**Method to Validate Lot No (Duplicate Lot No Organisation and Warehouse Wise)
     * @param lot
     * @return
     */
    public ArrayList<String> LotNoValidator(String lot) {
        ArrayList<String> retVAl = new ArrayList<String>(2);
        String inFlg = "N";
        String previousLot = "";
        int count = 0;
        String checkLotWhWise = "N";
        ViewObjectImpl v = this.getviewStkSummLotVO1();
        ViewObject slsRma = this.getSlsRma1();
        ViewObjectImpl orgMM = this.getorgMMPrfVO1();

        ViewObject slsRmaItm = this.getSlsRmaItem2();
        Row itmRow = slsRmaItm.getCurrentRow();

        Row rmaRow = slsRma.getCurrentRow();
        ViewObject rmaLotPage = this.getSlsRmaItmLot1();
        ViewObjectImpl slsRmaLot = this.getSlsRmaItmLot2();

        RowQualifier rqLot = new RowQualifier(slsRmaLot);
        rqLot.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and CldId='" +
                             getparamCldId() + "' and HoOrgId='" + getparamHoOrgId() + "' and DocId='" +
                             rmaRow.getAttribute("DocId") + "' and ItmId='" + itmRow.getAttribute("ItmId") + "'");
        Row lotFltrdRow[] = slsRmaLot.getFilteredRows(rqLot);
        //  System.out.println("Total Row in Lot Table-" + lotFltrdRow.length);
        // System.out.println("Row in Lot table on page-" + rmaLotPage.getRowCount());
        if (lotFltrdRow.length > 1 && rmaLotPage.getRowCount() > 0) {
            Row curLotRwPg = rmaLotPage.getCurrentRow();

            for (Row rsi : lotFltrdRow) {
                Row nxtLotRo = rsi;

                if (!(nxtLotRo.getKey()).equals(curLotRwPg.getKey())) {
                    if (nxtLotRo.getAttribute("LotId") != null) {
                        String lotFrmRow = nxtLotRo.getAttribute("LotId").toString();

                        System.out.println("Lot From table row is-" + lotFrmRow);
                        if (!lot.equalsIgnoreCase(lotFrmRow)) {
                            if (count == 0) {
                                previousLot = lotFrmRow;
                            }
                            count++;
                        }
                    }
                }

            }
            if (count > 0) {
                retVAl.add(0, "NS");
                retVAl.add(1, previousLot);
                inFlg = "NS";
            }
        }
        if (inFlg != "NS") {
            RowQualifier rqMM = new RowQualifier(orgMM);
            rqMM.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and CldId='" +
                                getparamCldId() + "'");

            Row orgMMRow[] = orgMM.getFilteredRows(rqMM);
            if (orgMMRow.length > 0) {
                if (orgMMRow[0].getAttribute("GenLotWhLvl") != null) {
                    checkLotWhWise = orgMMRow[0].getAttribute("GenLotWhLvl").toString();
                }

                if ("Y".equalsIgnoreCase(checkLotWhWise)) {
                    RowQualifier rq = new RowQualifier(v);
                    rq.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() +
                                      " and CldId='" + getparamCldId() + "' and WhId='" + rmaRow.getAttribute("WhId") +
                                      "' and LotId='" + lot + "' and ItmId='" + itmRow.getAttribute("ItmId") + "'");
                    Row[] filteredRows = v.getFilteredRows(rq);
                    System.out.println("Total Row for this lot in warehouse is--- " + filteredRows.length);
                    if (filteredRows.length > 0) {
                        retVAl.add(0, "Y");
                        inFlg = "Y";
                    } else {
                        retVAl.add(0, "N");
                        inFlg = "N";
                    }
                } else {
                    RowQualifier rq = new RowQualifier(v);
                    rq.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() +
                                      " and CldId='" + getparamCldId() + "' and LotId='" + lot + "' and ItmId='" +
                                      itmRow.getAttribute("ItmId") + "'");
                    Row[] filteredRows = v.getFilteredRows(rq);
                    System.out.println("Total Row for this lot in Org is--- " + filteredRows.length);
                    if (filteredRows.length > 0) {
                        retVAl.add(0, "Y");
                        inFlg = "Y";
                    } else {
                        retVAl.add(0, "N");
                        inFlg = "N";
                    }
                }
            } else {
                inFlg = "NP";
                retVAl.add(0, "NP"); //NP- No Profile defined for this organisation
            }
        }
        //  System.out.println("Return Val is--" + retVAl);
        return retVAl;


    }

    /**
     * Container's getter for OrgSlsPrf1.
     * @return OrgSlsPrf1
     */
    public ViewObjectImpl getOrgSlsPrf1() {
        return (ViewObjectImpl) findViewObject("OrgSlsPrf1");
    }


    /**
     * Fns to check whether lot is Auto generated or not..
     *
     */

    public String isLotAutoGen() {
        ViewObject slsRma = this.getSlsRma1();
        Row curRow = slsRma.getCurrentRow();
        ViewObject slsRmaLot = this.getSlsRmaItmLot1();
        Row curLotRow = slsRmaLot.getCurrentRow();
        String isLotAtutoGen = "N";
        ViewObjectImpl orgMM = this.getorgMMPrfVO1();
        RowQualifier rqMM = new RowQualifier(orgMM);
        rqMM.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and CldId='" +
                            getparamCldId());

        Row orgMMRow[] = orgMM.getFilteredRows(rqMM);
        if (orgMMRow.length > 0) {
            if (orgMMRow[0].getAttribute("AutoLotGen") != null) {
                isLotAtutoGen = orgMMRow[0].getAttribute("AutoLotGen").toString();
            }
            // System.out.println("Automatic Lot generation-" + isLotAtutoGen);
            if (isLotAtutoGen.equalsIgnoreCase("Y")) {
                try {
                    /*    System.out.println("Warehouse is--" + curRow.getAttribute("WhId") + "and OrgId is-" +
                                       getparamOrgId()); */
                    String lotNo = (String) callStoredFunction1(VARCHAR, "MM.mm_gen_lot(?,?,?,?,?)", new Object[] {
                                                                getparamCldId(), getparamSlocId(), getparamOrgId(),
                                                                curRow.getAttribute("WhId"),
                                                                curLotRow.getAttribute("ItmId")
                    });
                    // System.out.println("AutoGen Lot Nu is-" + lotNo);
                    curLotRow.setAttribute("LotId", lotNo);
                } catch (Exception e) {
                    //System.out.println("Exception-" + e);
                    isLotAtutoGen = "N";
                }

            }
        }
        return isLotAtutoGen;
    }

    /**
     * Container's getter for SlsRmaItmLot2.
     * @return SlsRmaItmLot2
     */
    public ViewObjectImpl getSlsRmaItmLot2() {
        return (ViewObjectImpl) findViewObject("SlsRmaItmLot2");
    }

    /**
     * Container's getter for viewStkSummLotVO1.
     * @return viewStkSummLotVO1
     */
    public ViewObjectImpl getviewStkSummLotVO1() {
        return (ViewObjectImpl) findViewObject("viewStkSummLotVO1");
    }

    /**
     * Container's getter for orgMMPrfVO1.
     * @return orgMMPrfVO1
     */
    public ViewObjectImpl getorgMMPrfVO1() {
        return (ViewObjectImpl) findViewObject("orgMMPrfVO1");
    }


    /**Method to Check that all Items are received with full quantity or Not, if Not then it will show Validation Message
     * @return
     */
    public ArrayList checkItemRcvdValidation() {
        /*  System.out.println("shupment id iin slsrmaitm table---" +
                           this.getSlsRmaItem2().getCurrentRow().getAttribute("ShipmntId") + " key is----" +
                           this.getSlsRmaItem2().getCurrentRow().getKey()); */
        ArrayList itemVal = new ArrayList();
        Row rmaRow = this.getSlsRma1().getCurrentRow();
        ViewObjectImpl slsRmaItm = this.getSlsRmaItem1();
        ViewObjectImpl slsRmaLot = this.getSlsRmaItmLot2();


        RowQualifier rqItm = new RowQualifier(slsRmaItm);
        rqItm.setWhereClause("CldId='" + getparamCldId() + "' and  SlocId=" + getparamSlocId() + " and OrgId='" +
                             getparamOrgId() + "' and DocId='" + rmaRow.getAttribute("DocId") + "'");

        Row itmFltrd[] = slsRmaItm.getFilteredRows(rqItm);
        System.out.println("Total Item in this RMA-" + itmFltrd.length);
        //   RowSetIterator rsi = slsRmaItm.createRowSetIterator(null);
        for (Row curItmRow : itmFltrd) {
            if (curItmRow != null) {
                Number pickedQtyItm = (Number) curItmRow.getAttribute("RcptQty");
                Object uomConvFctrO = curItmRow.getAttribute("UomConvFctr");
                Number uomConvFctr = (uomConvFctrO == null ? new Number(1) : (Number) uomConvFctrO);
                pickedQtyItm = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), pickedQtyItm.multiply(uomConvFctr));
                Number lotTotQty = new Number(0);
                RowQualifier rq = new RowQualifier(slsRmaLot);
                rq.setWhereClause("CldId='" + curItmRow.getAttribute("CldId") + "' and  SlocId=" +
                                  curItmRow.getAttribute("SlocId") + " and OrgId='" + curItmRow.getAttribute("OrgId") +
                                  "' and DocId='" + curItmRow.getAttribute("DocId") + "' and ItmId='" +
                                  curItmRow.getAttribute("ItmId") + "' and ShipmntId='" +
                                  curItmRow.getAttribute("ShipmntId") + "'");
                //  _log.info("RowQuali Expression--" + rq.getExprStr());
                Row fltrdRows[] = slsRmaLot.getFilteredRows(rq);
                _log.info("Total Row in Lot for This Item--" + fltrdRows.length + "Item is-" +
                          curItmRow.getAttribute("ItmId"));
                if (fltrdRows.length > 0) {
                    for (Row r : fltrdRows) {
                        Number okQnt = (Number) r.getAttribute("RcptQtyBs");
                        Number rejtQnt = (Number) r.getAttribute("RejQtyBs");
                        Number rwkQnt = (Number) r.getAttribute("RwkQtyBs");
                        _log.info("RECEIVE QUANTITY ---" + pickedQtyItm + " --REWORKABLE QUANTITY-- " + rwkQnt +
                                  "--REJECTD QUANTITY-- " + rejtQnt + "--- OK QUANTITY-- " + okQnt);
                        lotTotQty = lotTotQty.add(okQnt.add(rejtQnt.add(rwkQnt)));
                        _log.info("total quantiity in lot---" + lotTotQty);
                        //  lotTotQty = lotTotQty.add((Number)r.getAttribute("RcptQtyBs"));
                    }
                }
                _log.info("recived quqntity-" + pickedQtyItm + "Total Rcvd Quantity-" + lotTotQty);
                if (pickedQtyItm.compareTo(lotTotQty) == 0) {

                } else {
                    Row itmFltrRow[] = this.getItemNameLov1().getFilteredRows("ItmId", curItmRow.getAttribute("ItmId"));
                    if (itmFltrRow.length > 0) {
                        Number pendQty = pickedQtyItm.subtract(lotTotQty);
                        _log.info("Inside Else--" + itmFltrRow[0].getAttribute("ItmDesc"));
                        String valToshow = itmFltrRow[0].getAttribute("ItmDesc") + " Pending Quantity = " + pendQty;
                        itemVal.add(valToshow);
                    }
                }
            }
        }
        // _log.info("Un-Issued Items--" + itemVal);
        return itemVal;
    }


    /**Method to check Whether serail should be created or not
     * @return
     */
    public String serialiazedItemRcptCheck() {
        ViewObject lot = this.getSlsRmaItmLot1();
        ViewObject srNo = this.getSlsRmaItmSr1();
        Number lotQty = new Number(0);
        Number srQty = new Number(0);
        RowSetIterator lotIter = lot.createRowSetIterator(null);
        while (lotIter.hasNext()) {
            Row nextLotRow = lotIter.next();
            if (nextLotRow.getAttribute("RcptQtyBs") != null) {
                lotQty = lotQty.add((Number) nextLotRow.getAttribute("RcptQtyBs"));
            }
        }
        // System.out.println("Total Quantity in lot for this item-" + lotQty);
        srQty = new Number(srNo.getRowCount());
        if (lotQty.compareTo(srQty) == 1) {
            return "Y";
        } else {
            return "N";
        }
    }

    public void filterShpmntCustWise() {
        /* TempVoVORowImpl curRow = (TempVoVORowImpl) this.getTempVo1().getCurrentRow();
        SlsRmaVOImpl impl = this.getSlsRma1();
        Row currentRow = impl.getCurrentRow();
        //String geIdVar= null;
        if (currentRow.getAttribute("GeDocId") != null) {
            curRow.getLovShipmentIdVO1();
        } else {
            curRow.getLovDistnctShipVO1();
        }
        this.getTempVo1().executeQuery(); */
    }

    /**
     * Container's getter for getBinCapacityVO1.
     * @return getBinCapacityVO1
     */
    public ViewObjectImpl getgetBinCapacityVO1() {
        return (ViewObjectImpl) findViewObject("getBinCapacityVO1");
    }

    /**
     * Container's getter for viewStkSummBinVO1.
     * @return viewStkSummBinVO1
     */
    public ViewObjectImpl getviewStkSummBinVO1() {
        return (ViewObjectImpl) findViewObject("viewStkSummBinVO1");
    }

    /**
     * Container's getter for LovDistnctShipVO1.
     * @return LovDistnctShipVO1
     */
    public ViewObjectImpl getLovDistnctShipVO1() {
        return (ViewObjectImpl) findViewObject("LovDistnctShipVO1");
    }

    /**
     * Container's getter for LovShipmentIdVO1.
     * @return LovShipmentIdVO1
     */
    public ViewObjectImpl getLovShipmentIdVO1() {
        return (ViewObjectImpl) findViewObject("LovShipmentIdVO1");
    }

    /**
     * Container's getter for LovShipWiseLotVO1.
     * @return LovShipWiseLotVO1
     */
    public LovShipWiseLotVOImpl getLovShipWiseLotVO1() {
        return (LovShipWiseLotVOImpl) findViewObject("LovShipWiseLotVO1");
    }

    public void executeShipWiseLotVo() {

        String itmId = "";
        String shipId = "";
        ViewObjectImpl lotWiseShipVo = this.getLovShipWiseLotVO1();
        Row itmRow = this.getSlsRmaItem2().getCurrentRow();
        if (itmRow != null) {
            itmId = (String) itmRow.getAttribute("ItmId");
            shipId = (String) itmRow.getAttribute("ShipmntId");
            //_log.info("Item Id ANd Shipment Id " + itmId + "-----" + shipId);
        }
        // _log.info("Item Id ANd Shipment Id " + itmId + "-----" + shipId);
        ViewCriteria vc = lotWiseShipVo.getViewCriteria("LovShipWiseLotVOCriteria");
        lotWiseShipVo.applyViewCriteria(vc);
        lotWiseShipVo.setNamedWhereClauseParam("BindRmaStartDate", itmId);
        lotWiseShipVo.setNamedWhereClauseParam("BindRmaEndDate", shipId);
        lotWiseShipVo.setNamedWhereClauseParam("BindCldID", getparamCldId());
        lotWiseShipVo.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        lotWiseShipVo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        lotWiseShipVo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        lotWiseShipVo.executeQuery();

    }


    public String validLotQnty() {
        Number totalQntInLot = new Number(0);
        ViewObjectImpl itmView = this.getSlsRmaItem2();
        Row itmRow = itmView.getCurrentRow();
        Number rcptQnt = (Number) itmRow.getAttribute("RcptQty");
        ViewObjectImpl slsShipWiselot = this.getLovShipWiseLotVO1();
        RowSetIterator itr = slsShipWiselot.createRowSetIterator(null);
        boolean b = itr.hasNext();
        // _log.info("return not ok ---" + b);
        try {
            while (itr.hasNext()) {
                //   _log.info("inside iterator ");
                Row r = itr.next();
                Number okQnt = (Number) r.getAttribute("TransRejQty");
                Number rejtQnt = (Number) r.getAttribute("TreansRcvRejQuty");
                Number rwkQnt = (Number) r.getAttribute("TransRcvRwkQty");

                /*  _log.info("RECEIVE QUANTITY ---" + rcptQnt + " --REWORKABLE QUANTITY-- " + rwkQnt +
                          "--REJECTD QUANTITY-- " + rejtQnt + "--- OK QUANTITY-- " + okQnt); */
                totalQntInLot = totalQntInLot.add(okQnt.add(rejtQnt.add(rwkQnt)));
                _log.info("total quantiity in lot---" + totalQntInLot);
            }
        } catch (Exception e) {
            return null;
        }

        itr.closeRowSetIterator();
        /*  _log.info("total quantiity in lot---" + totalQntInLot + " and receipt qnt " + rcptQnt +
                  " after losing iterator"); */
        if (totalQntInLot.compareTo(rcptQnt) == 0) {
            // _log.info("total quantiity in lot---" + totalQntInLot + " and receipt qnt " + rcptQnt + " when ok");
            return "OK";
        } /* else {
            _log.info("total quantiity in lot---" + totalQntInLot + " and receipt qnt " + rcptQnt + " when not ok...");
            return "NOTOK";
        } */
        //_log.info("total quantiity in lot---" + totalQntInLot + " and receipt qnt " + rcptQnt + " when not ok...");
        _log.info("total quantiity in lot---" + totalQntInLot);
        return "NOTOK";
    }

    public ArrayList checkOkRejRwkQnt() {
        Number totalQntInLot = new Number(0);
        Number totalOkQnt = new Number(0);
        Number totalrejQnt = new Number(0);
        Number totalrwkQnt = new Number(0);
        ArrayList itmQnt = new ArrayList();
        ViewObjectImpl itmView = this.getSlsRmaItem2();
        Row itmRow = itmView.getCurrentRow();
        Number rcptQnt = (Number) itmRow.getAttribute("RcptQty");
        ViewObjectImpl slsShipWiselot = this.getLovShipWiseLotVO1();
        RowSetIterator itr = slsShipWiselot.createRowSetIterator(null);
        boolean b = itr.hasNext();
        // _log.info("return not ok ---" + b);
        try {
            while (itr.hasNext()) {
                // _log.info("inside iterator ");
                Row r = itr.next();
                Number okQnt = (Number) r.getAttribute("TransRejQty");
                Number rejtQnt = (Number) r.getAttribute("TreansRcvRejQuty");
                Number rwkQnt = (Number) r.getAttribute("TransRcvRwkQty");
                totalOkQnt = totalOkQnt.add(okQnt);
                totalrejQnt = totalrejQnt.add(rejtQnt);
                totalrwkQnt = totalrwkQnt.add(rwkQnt);
                /*  _log.info("RECEIVE QUANTITY ---" + rcptQnt + " --REWORKABLE QUANTITY-- " + rwkQnt +
                          "--REJECTD QUANTITY-- " + rejtQnt + "--- OK QUANTITY-- " + okQnt + "totalOkQnt" +
                          totalOkQnt + "totalrejQnt" + totalrejQnt + "totalrwkQnt" + totalrwkQnt); */
                totalQntInLot = totalQntInLot.add(okQnt.add(rejtQnt.add(rwkQnt)));
                // _log.info("total quantiity in lot---" + totalQntInLot);

            }
        } catch (Exception e) {
            return null;
        }
        // itr.closeRowSetIterator();
        itmQnt.add(totalrejQnt);
        itmQnt.add(totalOkQnt);
        itmQnt.add(totalrwkQnt);
        itr.closeRowSetIterator();
        //  _log.info("Value in Array List  " + itmQnt);
        return itmQnt;
    }

    public String onSaveClickValidItmQnt() {
        Number sumOfAllQnt = new Number(0);
        Number totalOkQnt = new Number(0);
        Number totalrejQnt = new Number(0);
        Number totalrwkQnt = new Number(0);
        Number totalRcptQnt = new Number(0);
        ViewObjectImpl itmView = this.getSlsRmaItem1();
        RowQualifier rq = new RowQualifier(itmView);
        String doId = (String) this.getSlsRma1().getCurrentRow().getAttribute("DocId");
        _log.info("doId " + doId);
        rq.setWhereClause("OrgId = '" + getparamOrgId() + "' and SlocId =" + getparamSlocId() + " and CldId ='" +
                          getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() + "' and DocId ='" + doId + "'");
        _log.info("query  " + rq.getExprStr());
        Row filterItemRow[] = itmView.getFilteredRows(rq);
        _log.info("filterItemRow  " + filterItemRow.length);
        if (filterItemRow.length > 0) {
            for (Row r : filterItemRow) {
                Number rcptQnt = (Number) r.getAttribute("RcptQty");
                Number okQnt = (Number) r.getAttribute("OkQty");
                Number rejtQnt = (Number) r.getAttribute("RejQty");
                Number rwkQnt = (Number) r.getAttribute("RwkQty");
                totalRcptQnt = totalRcptQnt.add(rcptQnt);
                totalOkQnt = totalOkQnt.add(okQnt);
                totalrejQnt = totalrejQnt.add(rejtQnt);
                totalrwkQnt = totalrwkQnt.add(rwkQnt);
                _log.info("RECEIVE QUANTITY ---" + rcptQnt + "total receipt quantity---" + totalRcptQnt +
                          " --REWORKABLE QUANTITY-- " + rwkQnt + "--REJECTD QUANTITY-- " + rejtQnt +
                          "--- OK QUANTITY-- " + okQnt + "totalOkQnt" + totalOkQnt + "totalrejQnt" + totalrejQnt +
                          "totalrwkQnt" + totalrwkQnt);
            }
        }
        sumOfAllQnt = sumOfAllQnt.add(totalOkQnt.add(totalrejQnt.add(totalrwkQnt)));
        _log.info("total quantiity in lot---" + sumOfAllQnt);

        _log.info(" receipt qnt---" + totalRcptQnt + "  and sum of all " + sumOfAllQnt);
        _log.info("rcptQnt.compareTo(sumOfAllQnt)" + totalRcptQnt.compareTo(sumOfAllQnt));

        if (totalRcptQnt.compareTo(sumOfAllQnt) != 0) {
            return "Y";
        }
        /*  else if(totalRcptQnt.compareTo(sumOfAllQnt) == 0){
            return "Y";
        } */
        else {
            return "N";
        }
    }

    public String validRcptQnt() {
        Number totalQunt = new Number(0);
        ViewObjectImpl itmView = this.getSlsRmaItem2();
        Row itmRow = itmView.getCurrentRow();
        RowQualifier itmrq = new RowQualifier(itmView);
        itmrq.setWhereClause(" ItmId ='" + itmRow.getAttribute("ItmId") + "' and ShipmntId ='" +
                             itmRow.getAttribute("ShipmntId") + "' and DocId='" + itmRow.getAttribute("DocId"));


        if (itmRow != null) {
            // _log.info("If item row not Null");
            Number rcptQnt = (Number) itmRow.getAttribute("RcptQty");
            Number rejQnt = (Number) itmRow.getAttribute("RejQty");
            Number rwkQnt = (Number) itmRow.getAttribute("RwkQty");
            Number okQnt = (Number) itmRow.getAttribute("OkQty");
            _log.info("RECEIVE QUANTITY ---" + rcptQnt + " --REWORKABLE QUANTITY-- " + rwkQnt +
                      "--REJECTD QUANTITY-- " + rejQnt + "--- OK QUANTITY-- " + okQnt);
            totalQunt = totalQunt.add(okQnt.add(rwkQnt.add(rejQnt)));
            _log.info("TOTAL SUM___" + totalQunt);
            if (totalQunt.compareTo(rcptQnt) == 0) {
                _log.info("when total is greater than received qquantity");
                return "OK";
            }
            _log.info("return not ok ");
            return "NOTOK";
        }

        return null;
    }


    public ArrayList isAllGateEntryitmAdjusted() {
        System.out.println("in isAllGateEntryitmAdjusted ");
        ArrayList itmList = new ArrayList();
        _log.info("Is list emppty=" + itmList.isEmpty());
        // String itemVal = "YES";
        Row rmaRow = this.getSlsRma1().getCurrentRow();
        ViewObjectImpl slsRmaItm = this.getSlsRmaItem1();
        ViewObjectImpl slsRmaitmTemp = this.getSlsRmaItmTemp2();
        Number totalGeQty = new Number(0);
        Number totalRcptQnt = new Number(0);
        // Number ItmRcvQnt = new Number(0);
        RowSetIterator itr = slsRmaitmTemp.createRowSetIterator(null);
        // _log.info(" itr.has next loop ke upar " + itr.hasNext());
        while (itr.hasNext()) {
            // Number totalGeQty2 = new Number(0);
            Row itmTmpRow = itr.next();
            String geId = (String) itmTmpRow.getAttribute("GeId");
            String geitmIdId = (String) itmTmpRow.getAttribute("ItmId");
            Number geQty = (Number) itmTmpRow.getAttribute("GeQty");
            totalGeQty = totalGeQty.add(geQty);

            _log.info("Total item quantity in temp table uis  " + totalGeQty + " for this tgis item " + geitmIdId +
                      " in this gate entry is " + geId);
        }

        itr.closeRowSetIterator();

        RowQualifier rqItm = new RowQualifier(slsRmaItm);
        rqItm.setWhereClause("CldId='" + getparamCldId() + "' and  SlocId=" + getparamSlocId() + " and OrgId='" +
                             getparamOrgId() + "' and DocId='" + rmaRow.getAttribute("DocId") + "'");

        Row itmFltrd[] = slsRmaItm.getFilteredRows(rqItm);
        //  _log.info("Total Item in this RMA in ITM TABLE-" + itmFltrd.length);
        //   RowSetIterator rsi = slsRmaItm.createRowSetIterator(null);
        if (itmFltrd.length > 0) {
            for (Row curItmRow : itmFltrd) {
                //if (curItmRow != null) {
                Number pickedQtyItm = (Number) curItmRow.getAttribute("RcptQty");
                totalRcptQnt = totalRcptQnt.add(pickedQtyItm);
                _log.info("total quantiity in in item table for this item " + curItmRow.getAttribute("ItmId") +
                          "  pick quant---" + pickedQtyItm + " totalRcptQnt " + totalRcptQnt + " totalGeQty " +
                          totalGeQty);
                _log.info("----in looop" + totalGeQty.compareTo(totalRcptQnt));
            }
        }
        System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
        System.out.println("recived quqntity- condition ==" + totalGeQty.compareTo(totalRcptQnt));
        if (totalGeQty.compareTo(totalRcptQnt) == 0) {
            System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
            System.out.println(" in if---of with con " + totalGeQty.compareTo(totalRcptQnt));
            itmList.clear();
            return itmList;

        } else {
            System.out.println("in else");
            Number sumOfRcptQnt = new Number(0);
            //Number prndingQnt= new Number(0);
            RowSetIterator geItr = slsRmaitmTemp.createRowSetIterator(null);
            System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
            while (geItr.hasNext()) {
                System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
                Row geRow = geItr.next();
                String geitmIdId = (String) geRow.getAttribute("ItmId");
                Number geQty = (Number) geRow.getAttribute("GeQty");
                _log.info("TotaAL QUANTITY FOR THSI ITEM  " + geitmIdId + " is " + geQty);
                // Row itmFltrRow[] = this.getItemNameLov1().getFilteredRows("ItmId", geitmIdId);
                //_log.info("Inside Else--" + itmFltrRow[0].getAttribute("ItmDesc"));
                String itemName =
                    (geRow.getAttribute("TransItemDescTrans") == null ? "" :
                     geRow.getAttribute("TransItemDescTrans").toString());

                ViewObjectImpl itmView = this.getSlsRmaItem1();
                RowQualifier itmtblRq = new RowQualifier(slsRmaItm);
                itmtblRq.setWhereClause("CldId='" + getparamCldId() + "' and  SlocId=" + getparamSlocId() +
                                        " and OrgId='" + getparamOrgId() + "' and DocId='" +
                                        rmaRow.getAttribute("DocId") + "' and ItmId ='" + geitmIdId + "'");

                Row fltRow[] = itmView.getFilteredRows(itmtblRq);
                _log.info("Filtered row is  ---" + fltRow.length);
                String message = "";
                System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty);
                if (fltRow.length > 0) {
                    message = "";
                    // itmList.clear();
                    System.out.println("Row count :" + itmList.size());
                    sumOfRcptQnt = new Number(0);
                    System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty +
                                       " sumOfRcptQnt " + sumOfRcptQnt);
                    for (Row curItmRow : fltRow) {
                        System.out.println(" totalRcptQnt " + totalRcptQnt + " totalGeQty " + totalGeQty +
                                           " sumOfRcptQnt " + sumOfRcptQnt);
                        Number pickedQtyItm = (Number) curItmRow.getAttribute("RcptQty");
                        sumOfRcptQnt = sumOfRcptQnt.add(pickedQtyItm);
                        System.out.println("v  sumOfRcptQnt " + sumOfRcptQnt);
                        Number pendingQnt = geQty.subtract(sumOfRcptQnt);
                        System.out.println("pendingQnt " + pendingQnt);
                        if (pendingQnt.compareTo(Number.zero()) < 0) {
                            message =
                                "Item Name :" + itemName +
                                " </br><span style='color:red' >received quantity is more then gate entry quantity</span>";

                        } else if (pendingQnt.compareTo(Number.zero()) > 0) {
                            message =
                                "Item Name :" + itemName + "</br>Pending Quantity :<span style='color:red' >" +
                                pendingQnt + "</span>";
                        } else {
                            //itmList.clear();
                            message = "";
                        }

                        System.out.println("Item In List " + itmList);

                    }
                    itmList.add(message);
                    System.out.println(" out for loop Item In List " + itmList);
                    //itmList.add(message);
                } else if (fltRow.length == 0) {
                    System.out.println("when filtered row is zero");
                    message =
                        "Item Name :" + itemName + "</br>Pending Quantity :<span style='color:red' >" + geQty +
                        "</span>";
                    itmList.add(message);
                }
            }
            geItr.closeRowSetIterator();
            System.out.println("finally return " + itmList);
            return itmList;
        }
    }

    public String compareItmWiseReceiveQtyToGeQty(Number rcptQnty) {
        String valid = "YES";
        String gateEntryParam = null;
        if (getparamGeChk() != null) {
            gateEntryParam = getparamGeChk();
        }
        _log.info("Gate Entry Globle Parameter=" + gateEntryParam);
        if ("Y".equalsIgnoreCase(gateEntryParam)) {
            Row rmaRow = this.getSlsRma1().getCurrentRow();
            String docId = (String) rmaRow.getAttribute("DocId");
            ViewObjectImpl slsRmaItm = this.getSlsRmaItem1();
            ViewObjectImpl slsRmaItm2 = this.getSlsRmaItem2();
            ViewObjectImpl slsRmaitmTemp = this.getSlsRmaItmTemp2();
            Number totalGeQty = new Number(0);
            Number totalRcptQnt = new Number(0);
            String itmId = (String) slsRmaItm2.getCurrentRow().getAttribute("ItmId");
            RowQualifier itmTmpRq = new RowQualifier(slsRmaitmTemp);
            itmTmpRq.setWhereClause(" CldId ='" + getparamCldId() + "' and SlocId =" + getparamSlocId() +
                                    " and OrgId ='" + getparamOrgId() + "' and HoOrgId ='" + getparamHoOrgId() +
                                    "' and DocId ='" + docId + "' and ItmId ='" + itmId + "'");
            Row itmTmpFiltrdRow[] = slsRmaitmTemp.getFilteredRows(itmTmpRq);
            if (itmTmpFiltrdRow.length > 0) {
                totalGeQty = (Number) itmTmpFiltrdRow[0].getAttribute("GeQty");
            }
            RowQualifier rq = new RowQualifier(slsRmaItm);
            rq.setWhereClause(" CldId ='" + getparamCldId() + "' and SlocId ='" + getparamSlocId() + "' and OrgId ='" +
                              getparamOrgId() + "' and HoOrgId ='" + getparamHoOrgId() + "' and DocId ='" + docId +
                              "' and ItmId ='" + itmId + "'");
            Row filtrdRow[] = slsRmaItm.getFilteredRows(rq);
            if (filtrdRow.length > 0) {
                for (Row r : filtrdRow) {
                    String itemID = (String) r.getAttribute("ItmId");
                    Number rcpQnt = (Number) r.getAttribute("RcptQty");
                    totalRcptQnt = totalRcptQnt.add(rcpQnt);
                }
            }
            if (totalRcptQnt.compareTo(totalGeQty) == 1) {
                _log.info("Set 11"); //check  total receive quantity is more than the gate entry quantity
                valid = "MORE";
            }
            _log.info("Return value from functuon is  " + valid);
            return valid;
        }
        _log.info("When Or Not uSed Gate Entry then Return value from functuon is  " + valid);
        return valid;
    }


    public void setOkRejRwkToZero() {
        // System.out.println("calling deleteLotBinData");
        // deleteLotBinSrData();
        // System.out.println("caledd ");
        Row itmRow = this.getSlsRmaItem2().getCurrentRow();
        if (itmRow != null) {
            itmRow.setAttribute("RejQty", new Number(0)); //
            itmRow.setAttribute("OkQty", new Number(0));
            itmRow.setAttribute("RwkQty", new Number(0));
        }
    }

    public void returnLotQnt() {
        ViewObjectImpl lotRow = this.getSlsRmaItmLot1();
        ViewObjectImpl lotRow2 = this.getSlsRmaItmLot2();
        ViewObjectImpl shipWiseLot = this.getLovShipWiseLotVO1();
        ViewObjectImpl shipWiseLot2 = this.getLovShipWiseLotVO1();
        shipWiseLot.clearCache();
        shipWiseLot2.clearCache();
        RowSetIterator itr = lotRow.createRowSetIterator(null);
        while (itr.hasNext()) {
            System.out.println("entring in iteriator returnLotQnt");
            /// if (itr.hasNext()) {


            Row r = itr.next();
            Number okQnt = (Number) r.getAttribute("RcptQtyBs");
            Number rejectedQnt = (Number) r.getAttribute("RejQty");
            Number rwkQnt = (Number) r.getAttribute("RwkQty");
            String ItemId = (String) r.getAttribute("ItmId");
            String lotId = (String) r.getAttribute("LotId");
            System.out.println(" slslRMaItm lot Id is ==" + lotId + " ==and Itm Id is ==" + ItemId + " ==okQnt is=== " +
                               okQnt + " ==rejectedQnt==" + rejectedQnt + "== RwkQty ==" + rwkQnt + " ");
            RowQualifier rq = new RowQualifier(shipWiseLot);
            rq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() + " and CldId ='" +
                              getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() + "' and ItmId ='" + ItemId +
                              "' and LotId1 ='" + lotId + "'");
            System.out.println(" expression " + rq.getExprStr());
            Row filteredRow[] = shipWiseLot.getFilteredRows(rq);
            System.out.println("filtetre row " + filteredRow.length);
            if (filteredRow.length > 0) {
                for (Row rr : filteredRow) {
                    System.out.println("ok quantity to set " + okQnt + "  rejected quantity " + rejectedQnt +
                                       "  reworkable wuanotty " + rwkQnt);
                    rr.setAttribute("TransRejQty", okQnt);
                    rr.setAttribute("TreansRcvRejQuty", rejectedQnt);
                    rr.setAttribute("TransRcvRwkQty", rwkQnt);
                    System.out.println("exiting");
                }
            }
            // }
            System.out.println("exiting finally from the iterator");
        }
        itr.closeRowSetIterator();
        System.out.println("exiting from methos of return lot quantity");
    }

    public ArrayList checkItmRcvQntToOkRejRekQnt() {
        System.out.println("Inside checkItmRcvQntToOkRejRekQnt ");
        ArrayList itemVal = new ArrayList();
        ViewObjectImpl rmaVo = this.getSlsRma1();
        ViewObjectImpl shipVo = this.getSlsRmaShipmnt2();
        ViewObjectImpl itmVo = this.getSlsRmaItem1();
        String docId = (String) rmaVo.getCurrentRow().getAttribute("DocId");
        RowQualifier rq = new RowQualifier(shipVo);
        rq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() + " and CldId ='" +
                          getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() + "' and DocId ='" + docId + "'");

        System.out.println("expression " + rq.getExprStr());
        Row filteredRow[] = shipVo.getFilteredRows(rq);
        System.out.println(" filtwrw row length " + filteredRow.length);
        if (filteredRow.length > 0) {
            for (Row r : filteredRow) {
                String shipDocId = (String) r.getAttribute("ShipmntId");
                RowQualifier itmRq = new RowQualifier(itmVo);
                System.out.println("shipDocId  " + shipDocId);
                itmRq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                     " and CldId ='" + getparamCldId() + "' and HoOrgId ='" + getparamHoOrgId() +
                                     "' and DocId ='" + docId + "' and ShipmntId='" + shipDocId + "'");

                System.out.println("expression ==========" + itmRq.getExprStr());
                Row itmfilteredRow[] = itmVo.getFilteredRows(itmRq);
                System.out.println(" item filtwrw row length " + itmfilteredRow.length);
                int i = 0;
                if (itmfilteredRow.length > 0) {
                    i++;
                    System.out.println(" i  ===" + i);
                    for (Row rr : itmfilteredRow) {
                        String itmId = (String) rr.getAttribute("ItmId");
                        Number rcptQnt = (Number) rr.getAttribute("RcptQty");
                        Number rejQnt = (Number) rr.getAttribute("RejQty");
                        Number rwkQnt = (Number) rr.getAttribute("RwkQty");
                        Number okQnt = (Number) rr.getAttribute("OkQty");
                        Number totalSum = new Number(0);
                        System.out.println(" itmId " + itmId);
                        totalSum = totalSum.add(okQnt.add(rwkQnt.add(rejQnt)));
                        System.out.println(" rcptQnt==" + rcptQnt + " okQnt ==" + okQnt + " rwkQnt==" + rwkQnt +
                                           " rejQnt==" + rejQnt + " totalSum ==" + totalSum +
                                           " rcptQnt.compareTo(totalSum) " + rcptQnt.compareTo(totalSum));
                        if (rcptQnt.compareTo(totalSum) != 0) {
                            String valToshow = "";
                            System.out.println("inside validation message");
                            ViewObjectImpl itmNmVo = this.getItemNameLov1();
                            RowQualifier rrq = new RowQualifier(itmNmVo);
                            rrq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                               " and CldId ='" + getparamCldId() + "' and HoOrgId ='" +
                                               getparamHoOrgId() + "' and ItmId='" + itmId + "'");
                            Row itmFltrRow[] = itmNmVo.getFilteredRows(rrq);
                            System.out.println("rrq.  " + rrq.getExprStr());

                            System.out.println("shipDocId =-=-=-=-=----=-=-====" + shipDocId);

                            ViewObjectImpl lovshipVo = this.getShipDispDocIdLOV1();
                            RowQualifier rrrq = new RowQualifier(lovshipVo);
                            rrrq.setWhereClause("OrgId ='" + getparamOrgId() + "' and SlocId =" + getparamSlocId() +
                                                " and CldId ='" + getparamCldId() + "' and HoOrgId ='" +
                                                getparamHoOrgId() + "' and DocId='" + shipDocId + "'");
                            System.out.println("rrq.=-=-=-=-=-=  " + rrrq.getExprStr());
                            System.out.println("nmzhcmchaj fhakjhdsf");
                            Row shipFilteredRow[] = lovshipVo.getFilteredRows(rrrq);
                            System.out.println(" item filtered row lenggth " + itmFltrRow.length +
                                               " shipFilteredRow.length =-=-=-= " + shipFilteredRow.length);
                            if (itmFltrRow.length > 0 && shipFilteredRow.length > 0) {
                                System.out.println("set 1111  " + shipFilteredRow[0].getAttribute("ShipmntId"));
                                System.out.println("set 121212" + itmFltrRow[0].getAttribute("ItmDesc"));
                                valToshow =
                                    "Item Name : " + itmFltrRow[0].getAttribute("ItmDesc") + " </br>Of Shipment No. :" +
                                    shipFilteredRow[0].getAttribute("ShipmntId");
                                itemVal.add(valToshow);
                            }
                        }
                    }
                }

            }
        }
        System.out.println(" finally returned Item array list vaue is " + itemVal);
        return itemVal;
    }

    /**
     * Container's getter for ShipDispDocIdLOV1.
     * @return ShipDispDocIdLOV1
     */
    public ViewObjectImpl getShipDispDocIdLOV1() {
        return (ViewObjectImpl) findViewObject("ShipDispDocIdLOV1");
    }

    /**
     * Container's getter for LovGeId1.
     * @return LovGeId1
     */
    public ViewObjectImpl getLovGeId1() {
        return (ViewObjectImpl) findViewObject("LovGeId1");
    }

    /*****Method to delete data from lot bin nad serial table*****/
    public void deleteLotBinSrData() {
        ViewObjectImpl lotVo = this.getSlsRmaItmLot1();
        LovShipWiseLotVOImpl shipLotVo = this.getLovShipWiseLotVO1();
        ViewObjectImpl binVo = this.getSlsRmaItmBin1();
        ViewObjectImpl srVo = this.getSlsRmaItmSr1();
        RowSetIterator shipLotItr = shipLotVo.createRowSetIterator(null);
        System.out.println("shipLotVo rows:-" + shipLotItr.getRowCount());
        while (shipLotItr.hasNext()) {
            shipLotItr.next().remove();

        }
        shipLotItr.closeRowSetIterator();
        shipLotVo.executeQuery();

        RowSetIterator srItr = srVo.createRowSetIterator(null);
        System.out.println("SrItr Rows:-" + srItr.getRowCount());
        while (srItr.hasNext()) {
            Row next = srItr.next();
            Key key = next.getKey();
            SlsRmaItmSrEOImpl srEo =
                (SlsRmaItmSrEOImpl) SlsRmaItmSrEOImpl.getDefinitionObject().findByPrimaryKey(getDBTransaction(), key);
            srEo.remove();
        }
        srItr.closeRowSetIterator();
        srVo.executeQuery();
        RowSetIterator binItr = binVo.createRowSetIterator(null);
        System.out.println("BinItr Rows :-" + binItr.getRowCount());
        while (binItr.hasNext()) {
            Row next = binItr.next();
            Key key = next.getKey();
            SlsRmaItmBinEOImpl binEo =
                (SlsRmaItmBinEOImpl) SlsRmaItmBinEOImpl.getDefinitionObject().findByPrimaryKey(getDBTransaction(), key);
            binEo.remove();
        }
        binItr.closeRowSetIterator();
        binVo.executeQuery();
        RowSetIterator lotItr = lotVo.createRowSetIterator(null);
        System.out.println("LotItr Rows:-" + lotItr.getRowCount());
        while (lotItr.hasNext()) {
            Row next = lotItr.next();
            Key key = next.getKey();
            SlsRmaItmLotEOImpl lotEo =
                (SlsRmaItmLotEOImpl) SlsRmaItmLotEOImpl.getDefinitionObject().findByPrimaryKey(getDBTransaction(), key);
            lotEo.remove();
        }
        lotItr.closeRowSetIterator();
        lotVo.executeQuery();

    }

    /**
     * Container's getter for SlsRmaItmBin2.
     * @return SlsRmaItmBin2
     */
    public SlsRmaItmBinVOImpl getSlsRmaItmBin2() {
        return (SlsRmaItmBinVOImpl) findViewObject("SlsRmaItmBin2");
    }

    /**
     * Container's getter for SlsRmaItmSr2.
     * @return SlsRmaItmSr2
     */
    public ViewObjectImpl getSlsRmaItmSr2() {
        return (ViewObjectImpl) findViewObject("SlsRmaItmSr2");
    }

    public void setShipLovToNull() {
        if (this.getTempVo1().getCurrentRow() != null) {
            this.getTempVo1().getCurrentRow().setAttribute("TransShipmntId", null); ///
            this.getTempVo1().getCurrentRow().setAttribute("TransShipmntDate", null);
        }
    }

    Number oldOkQty = new Number(0);
    Number oldRcptQnt = new Number(0);
    Number oldRwkQty = new Number(0);
    Number oldRejQty = new Number(0);

    public void getOldRcptOkRwkRejQnt() {
        oldOkQty = new Number(0);
        oldRcptQnt = new Number(0);
        oldRwkQty = new Number(0);
        oldRejQty = new Number(0);
        System.out.println("old data is  in amimpl " + oldOkQty + " oldRcptQnt=" + oldRcptQnt + "oldRwkQty= " +
                           oldRwkQty + "oldRejQty= " + oldRejQty);
        Row itmRow = this.getSlsRmaItem2().getCurrentRow();
        if (itmRow != null) {
            oldOkQty = (Number) itmRow.getAttribute("OkQty");
            oldRcptQnt = (Number) itmRow.getAttribute("RcptQty");
            oldRwkQty = (Number) itmRow.getAttribute("RwkQty");
            oldRejQty = (Number) itmRow.getAttribute("RejQty");
            System.out.println("old data is  in amimpl " + oldOkQty + " oldRcptQnt=" + oldRcptQnt + "oldRwkQty= " +
                               oldRwkQty + "oldRejQty= " + oldRejQty);
        }
    }

    public Number setOldRecptQnt() {
        System.out.println("+oldRcptQnt " + oldRcptQnt);
        this.getSlsRmaItem2().getCurrentRow().setAttribute("RcptQty", oldRcptQnt);
        return oldRcptQnt;
    }

    public Number setOldOkQnt() {
        System.out.println("+oldOkQty " + oldOkQty);
        this.getSlsRmaItem2().getCurrentRow().setAttribute("OkQty", oldOkQty);
        return oldOkQty;
    }

    public Number setOldRejQnt() {
        System.out.println("+oldRejQty " + oldRejQty);
        this.getSlsRmaItem2().getCurrentRow().setAttribute("RejQty", oldRejQty);
        return oldRejQty;
    }

    public Number setOldRwkQnt() {
        System.out.println("+oldRwkQty " + oldRwkQty);
        this.getSlsRmaItem2().getCurrentRow().setAttribute("RwkQty", oldRwkQty);
        return oldRwkQty;
    }

    /**
     * Container's getter for LovRmaNo1.
     * @return LovRmaNo1
     */
    public ViewObjectImpl getLovRmaNo1() {
        return (ViewObjectImpl) findViewObject("LovRmaNo1");
    }

    public String chekShipDays() {
        System.out.println("in checkshipdays methd of amimpl");
        String rtndays = "Y";
        BigDecimal days = new BigDecimal(0);
        ViewObjectImpl orgSlPrfVo = this.getOrgSlsPrf1();
        RowQualifier rqqq = new RowQualifier(orgSlPrfVo);
        String isSaleRtnUsed = "Y";
        rqqq.setWhereClause("OrgId='" + getparamOrgId() + "' and SlocId=" + getparamSlocId() + " and HoOrgId='" +
                            getparamHoOrgId() + "' and CldId='" + getparamCldId() + "' and StopSlsRet='" +
                            isSaleRtnUsed + "'");

        System.out.println("row qualifier " + rqqq.getExprStr());
        Row orgfltredRow[] = orgSlPrfVo.getFilteredRows(rqqq);
        System.out.println("org filter row " + orgfltredRow.length);
        if (orgfltredRow.length > 0) {
            Row tempVoRow = this.getTempVo1().getCurrentRow();
            if (tempVoRow != null) {
                String shipId = (String) tempVoRow.getAttribute("TransShipmntId");
                Timestamp shipDt = (Timestamp) tempVoRow.getAttribute("TransShipmntDate");
                Timestamp rmaDt = (Timestamp) this.getSlsRma1().getCurrentRow().getAttribute("DocDt");
                System.out.println("parameter ship date=" + shipDt + "rma dt =" + rmaDt + " ship id=" + shipId);

                days = (BigDecimal) callStoredFunction(INTEGER, "SLS.fn_chk_ship_rma_days(?,?,?,?,?,?)", new Object[] {
                                                       getparamSlocId(), getparamCldId(), getparamHoOrgId(),
                                                       getparamOrgId(), shipDt, rmaDt
                });


            }
            System.out.println("days " + days + " condition==" + days.compareTo(new BigDecimal(0)));

            if (days.compareTo(new BigDecimal(0)) == 0) {
                rtndays = "Y";
            } else {
                rtndays = "N";
                System.out.println("message");
                FacesMessage message =
                    new FacesMessage("<html><body>" + resolvEl("#{bundle['MSG.1774']}") + //You can not add this Shipment because Shipment is<b> "
                                                        days + " </b>" + resolvEl("#{bundle['MSG.1775']}") +
                                     " </body></html>");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }
            System.out.println("rtn days " + rtndays);

        }
        return rtndays;
    }

    public String getUsrNm(Integer usrId) {
        System.out.println("usr id " + usrId);
        ViewObjectImpl usrNmVo = this.getLovUserNameVO1();
        Row usrNm[] = usrNmVo.getFilteredRows("UsrId", usrId);
        System.out.println("usr id  filter erow lenght " + usrNm.length);
        if (usrNm.length > 0) {
            return (String) usrNm[0].getAttribute("UsrName");
        }
        return "";
    }

    /**
     * Container's getter for LovUserNameVO1.
     * @return LovUserNameVO1
     */
    public ViewObjectImpl getLovUserNameVO1() {
        return (ViewObjectImpl) findViewObject("LovUserNameVO1");
    }

    public void addItmwithOutGateEntry() {
        ViewObject shpItmVw = this.getshpmntItmViewVO1();
        ViewObjectImpl slsRmaItm = this.getSlsRmaItem2();
        Row slsRMA = this.getSlsRma1().getCurrentRow();
        shpItmVw.setRangeSize(-1);
        Row allShpIt[] = shpItmVw.getAllRowsInRange();
        _log.info("---------" + slsRMA.getAttribute("WhId"));
        System.out.println("allShpIt length " + allShpIt.length);
        if (allShpIt.length > 0) {
            for (Row viewRow : allShpIt) {
                String itmId = (String) viewRow.getAttribute("ItmId");
                Number returnQty = (Number) viewRow.getAttribute("rejectedQuantTrans");
                if (returnQty != null && returnQty.compareTo(0) >= 0) {
                    ViewObjectImpl shipVo = this.getSlsRma1();

                }
            }

        }


    }

    public StringBuffer checkTaxRvrlApplied() {
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String refOrg = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                        p_cldId, p_sloc_id, p_org_id, "CHK_TAX_REVERSAL"
            });

            if (refOrg == null || refOrg.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(refOrg.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    /**
     * Container's getter for LovSoDispIdVO1.
     * @return LovSoDispIdVO1
     */
    public ViewObjectImpl getLovSoDispIdVO1() {
        return (ViewObjectImpl) findViewObject("LovSoDispIdVO1");
    }

    public void setDocDtInSlsRmaItmLot1() {
        /* ViewObjectImpl impl = this.getSlsRmaItmLot1();

        RowSetIterator itr =  impl.createRowSetIterator(null);

        System.out.println("in AmImpl Method Doc Date is ---->"+this.getSlsRma1().getCurrentRow().getAttribute("DocDt"));
       System.out.println(itr.getRowCount());
        while (itr.hasNext()) {
            Row row = itr.next();
            row.setAttribute("DocDt",(Timestamp)this.getSlsRma1().getCurrentRow().getAttribute("DocDt"));
        }
        itr.closeRowSetIterator(); */
    }

    /**
     * Container's getter for SlsShipItmVO1.
     * @return SlsShipItmVO1
     */
    public ViewObjectImpl getSlsShipItmVO1() {
        return (ViewObjectImpl) findViewObject("SlsShipItmVO1");
    }

    public Boolean doRmaValidationsPass() {
        System.out.println("Entering in Boolean");
        String binChk = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        System.out.println("Binchk is " + binChk);
        Boolean b = true;
        Row rmaRow = this.getSlsRma1().getCurrentRow();
        Integer rmaType = (rmaRow.getAttribute("RmaTypId") == null ? -1 : (Integer) rmaRow.getAttribute("RmaTypId"));
        System.out.println("RMA Type id is :" + (Integer) rmaRow.getAttribute("RmaTypId"));
        if (rmaType.equals(-1)) {
            b = false;
            FacesMessage message = new FacesMessage("<html><body>" + resolvEl("#{bundle['MSG.1776']}") //You Can not Proceed RMA Type Is not Selected
                                                    + "</body></html>");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            System.out.println("Rma Type not Selected.");
        } else if (!rmaType.equals(401)) {
            /* ViewObjectImpl shipVo = this.getSlsRmaShipmnt2();
            RowSetIterator shipItr = shipVo.createRowSetIterator(null);
            while (shipItr.hasNext()) {

                Row shipRow = shipItr.next(); */
            ViewObjectImpl itemVo = this.getSlsRmaItem3();
            /*  itemVo.getFilteredRows("ShipmntId", shipRow.getAttribute("ShipmntId"));
                itemVo.getFilteredRows("ShipmntDt", shipRow.getAttribute("ShipmntDt")); */
            itemVo.executeQuery();
            ViewObjectImpl lotVo = this.getSlsRmaItmLotVoForLotItmValidationVo();
            lotVo.executeQuery();
            RowSetIterator itmItr = itemVo.createRowSetIterator(null);
            System.out.println("itemVo total rows:-" + itmItr.getRowCount());
            while (itmItr.hasNext()) {
                lotVo = this.getSlsRmaItmLotVoForLotItmValidationVo();
                int loti = lotVo.getRangeSize();
                lotVo.setRangeSize(-1);
                Row itmRow = itmItr.next();
                RowQualifier rq = new RowQualifier(lotVo);
                rq.setWhereClause("OrgId ='" + getparamOrgId() + "'and HoOrgId='" + getparamHoOrgId() +
                                  "'and SlocId='" + getparamSlocId() + "'and CldId='" + getparamCldId() +
                                  "'and ItmId='" + itmRow.getAttribute("ItmId") + "'and ShipmntDt='" +
                                  itmRow.getAttribute("ShipmntDt") + "'and ShipmntId='" +
                                  itmRow.getAttribute("ShipmntId") + "'and WhId='" + itmRow.getAttribute("WhId") +
                                  "'and ItmUom='" + itmRow.getAttribute("ItmUom") + "'");
                System.out.println(rq.getExprStr());
                Row[] filterLotVO = lotVo.getFilteredRows(rq);
                lotVo.setRangeSize(loti);
                System.out.println("after filter no of rows-->" + filterLotVO.length);
                if (filterLotVO.length == 0) {
                    b = false;
                    break;
                } else if (binChk.equalsIgnoreCase("Y")) {
                    ViewObjectImpl binVo = this.getSlsRmaItmBin3();
                    int ibin = binVo.getRangeSize();
                    binVo.setRangeSize(-1);
                    RowQualifier rqbin = new RowQualifier(binVo);

                    rqbin.setWhereClause("OrgId ='" + getparamOrgId() + "'and HoOrgId='" + getparamHoOrgId() +
                                         "'and SlocId='" + getparamSlocId() + "'and CldId='" + getparamCldId() +
                                         "'and ItmId='" + filterLotVO[0].getAttribute("ItmId") + "'and ShipmntDt='" +
                                         filterLotVO[0].getAttribute("ShipmntDt") + "'and ShipmntId='" +
                                         filterLotVO[0].getAttribute("ShipmntId") + "'and LotId='" +
                                         filterLotVO[0].getAttribute("LotId") + "'and ItmUom='" +
                                         filterLotVO[0].getAttribute("ItmUom") + "'");
                    System.out.println(rq.getExprStr());
                    Row[] filterBinVO = binVo.getFilteredRows(rqbin);
                    binVo.setRangeSize(ibin);
                    if (filterBinVO.length == 0) {
                        b = false;
                        break;
                    }
                }
            }
            itmItr.closeRowSetIterator();
        }

        return b;
    }

    /**
     * Container's getter for SlsRmaItmLotVoForLotItmValidationVo.
     * @return SlsRmaItmLotVoForLotItmValidationVo
     */
    public ViewObjectImpl getSlsRmaItmLotVoForLotItmValidationVo() {
        return (ViewObjectImpl) findViewObject("SlsRmaItmLotVoForLotItmValidationVo");
    }

    /**
     * Container's getter for RmaToLotVL1.
     * @return RmaToLotVL1
     */
    public ViewLinkImpl getRmaToLotVL1() {
        return (ViewLinkImpl) findViewLink("RmaToLotVL1");
    }

    /**
     * Container's getter for SlsRmaItem3.
     * @return SlsRmaItem3
     */
    public SlsRmaItemVOImpl getSlsRmaItem3() {
        return (SlsRmaItemVOImpl) findViewObject("SlsRmaItem3");
    }

    /**
     * Container's getter for RmaToItemLink1.
     * @return RmaToItemLink1
     */
    public ViewLinkImpl getRmaToItemLink1() {
        return (ViewLinkImpl) findViewLink("RmaToItemLink1");
    }

    /**
     * Container's getter for SlsRmaItmBin3.
     * @return SlsRmaItmBin3
     */
    public SlsRmaItmBinVOImpl getSlsRmaItmBin3() {
        return (SlsRmaItmBinVOImpl) findViewObject("SlsRmaItmBin3");
    }

    /**
     * Container's getter for RmaToBinLink1.
     * @return RmaToBinLink1
     */
    public ViewLinkImpl getRmaToBinLink1() {
        return (ViewLinkImpl) findViewLink("RmaToBinLink1");
    }

    public boolean checkRmaValidation() {
        boolean pass = true;
        System.out.println("Entering in validation....!!!");
        String binChk = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        ViewObjectImpl itemVo = this.getSlsRmaItem3();
        int j = itemVo.getRangeSize();
        itemVo.setRangeSize(-1);
        itemVo.executeQuery();
        HashSet itemSet = new HashSet();
        RowSetIterator itemItr = itemVo.createRowSetIterator(null);
        System.out.println("Before item while Loop");

        //getting and adding all items in a list
        while (itemItr.hasNext()) {
            Row itmRow = itemItr.next();
            System.out.println("Inside  item while Loop");
            StringBuilder i =
                (itmRow.getAttribute("ItmId") == null ? new StringBuilder("") :
                 new StringBuilder(itmRow.getAttribute("ItmId").toString()));
            //System.out.println("Before item add while Loop with Item Id === " + i);
            if ("".equalsIgnoreCase(i.toString())) {
                System.out.println("item while Loop with Item Id === " + i);
            } else {
                System.out.println("item add while Loop with Item Id === " + i);
                itemSet.add(i);
            }
        }
        System.out.println("After item while Loop");
        itemItr.closeRowSetIterator();

        Iterator itmItr = itemSet.iterator();
        ArrayList<ItmRcpt> itmDtls = new ArrayList<ItmRcpt>();
        //
        while (itmItr.hasNext()) {
            StringBuilder e = (StringBuilder) itmItr.next();
            
            Row[] filteredRows = itemVo.getFilteredRows("ItmId", e.toString());
            System.out.println( "Filtering For Item ==<< " + e);
            System.out.println("No. of Rows === > << "+ filteredRows.length);
            Number rcptQty = new Number(0);
            Number approvQtyItm = new Number(0);
           // StringBuilder itmFlag = null;
            for (Row f : filteredRows) {
                System.out.println("Getting filtered rows.... for " + f.getAttribute("ItmId"));

                Object rcptQtyO = f.getAttribute("RcptQty");
                System.out.println(" receipt Qty <<<<< === " +rcptQtyO);
                Object uomConvFctrO = f.getAttribute("UomConvFctr");
                Number uomConvFctr = (uomConvFctrO == null ? new Number(1) : (Number) uomConvFctrO);
                System.out.println(" UOM Converstion factor  <<<<< === " +uomConvFctr);
                Number l = (rcptQtyO == null ? StaticValue.NUMBER_ZERO : (Number) rcptQtyO);
                Number okQty = (f.getAttribute("OkQty") == null ? new Number(0) : (Number) f.getAttribute("OkQty"));
                System.out.println( "Ok Qty <<<==== " + okQty);

                rcptQty = rcptQty.add(ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), l.multiply(uomConvFctr)));
                System.out.println( "received  Qty <<<==== " + rcptQty);
                approvQtyItm =
                    approvQtyItm.add(ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), okQty.multiply(uomConvFctr)));
                System.out.println("Approv Qty" + approvQtyItm);
                //  System.out.println("Rcpt Qty " + rcptQty);
            }
            System.out.println("After filtered rows....");
            itmDtls.add(new ItmRcpt(e, rcptQty, approvQtyItm));
        }
        itemVo.setRangeSize(j);

        ViewObjectImpl lotVO = this.getSlsRmaItmLotVoForLotItmValidationVo();
        j = lotVO.getRangeSize();
        lotVO.setRangeSize(-1);
        lotVO.executeQuery();
        for (ItmRcpt s : itmDtls) {

            Row[] itmLotRows = lotVO.getFilteredRows("ItmId", s.getItmNm().toString());

            StringBuilder itmId = (StringBuilder) s.getItmNm();
            System.out.println("Item Id Is " + itmId);
            Number totLot = new Number(0);
            System.out.println("Item Name is   ----->" + s.getItmNm().toString());
            System.out.println("Inside ItmDtls----->");
            System.out.println("No of filtered Rows" + itmLotRows.length);
            if (itmLotRows.length > 0) {
                for (Row r : itmLotRows) {
                    Number approv =
                        (r.getAttribute("RcptQtyBs") == null ? new Number(0) : (Number) r.getAttribute("RcptQtyBs"));
                    System.out.println("Approv Qty----->" + approv);
                    Number reject =
                        (r.getAttribute("RejQtyBs") == null ? new Number(0) : (Number) r.getAttribute("RejQtyBs"));
                    System.out.println("reject Qty----->" + reject);
                    Number rwk = (r.getAttribute("RwkQtyBs") == null ? new Number(0) : (Number) r.getAttribute("RwkQtyBs"));
                    System.out.println("rwk Qty----->" + rwk);
                    totLot = totLot.add(approv).add(reject).add(rwk);
                    System.out.println("totLot Qty----->" + totLot);
                    System.out.println("s.getItmRcptQty()----->" + s.getItmRcptQty());

                    // itmDtls.add(new ItmRcpt(itmId, totLot, approv));
                }
                Number itmRcptQty = s.getItmRcptQty();
                System.out.println("Value getting compared are --<< " + s.getItmRcptQty());
                System.out.println("Value getting compared are --<< " + totLot);
                if (itmRcptQty.compareTo(totLot) != 0) {
                    pass = false;
                    System.out.println("The Value of pass is " + pass);
                    //sop
                    break;
                }
            } else {
                pass = false;
            }
        }
        lotVO.setRangeSize(j);
/**
        if (pass) {
            if (binChk.equalsIgnoreCase("Y")) {
                ViewObjectImpl binVO = this.getSlsRmaItmBin3();
                j = binVO.getRangeSize();
                binVO.setRangeSize(-1);
                binVO.executeQuery();
                for (ItmRcpt s : itmDtls) {
                    Row[] itmBinRows = binVO.getFilteredRows("ItmId", s.getItmNm().toString());
                    System.out.println("Item id in bin ---->" + s.getItmNm());
                    Number totBin = new Number(0);
                    if (itmBinRows.length > 0) {
                        for (Row r : itmBinRows) {
                            Number approv =
                                (r.getAttribute("RcptQtyBs") == null ? new Number(0) :
                                 (Number) r.getAttribute("RcptQtyBs"));
                            System.out.println("rcpt qty---->" + (Number) r.getAttribute("RcptQtyBs"));
                            System.out.println("s.getAprovQty()------------->" + s.getAprovQty());
                            totBin = totBin.add(approv);

                            System.out.println("The value of pass ----1" + pass);
                        }
                        if (s.getAprovQty().compareTo(totBin) != 0) {

                            pass = false;
                            System.out.println("The Value of pass is " + pass);

                            //sop
                            break;
                        }
                    } else {
                        pass = false;

                    }

                    System.out.println("The value of pass ----2" + pass);
                }

                System.out.println("The value of pass ----3" + pass);
            }

            System.out.println("The value of pass ----4" + pass);
        }
**/

        return pass;
    }

    /**
     * Container's getter for SLSInvItmDtlVO1.
     * @return SLSInvItmDtlVO1
     */
    public ViewObjectImpl getSLSInvItmDtlVO1() {
        return (ViewObjectImpl) findViewObject("SLSInvItmDtlVO1");
    }

    /**
     *
     *Method to check Financial Year is Valid or not
     * @return
     */
    public boolean isFyIdValid() {
        Boolean a = true;
        Integer b = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
        if (b == -1) {
            a = false;
        }

        return a;
    }

    /**
     *
     *  Method to check OK Qty On The Basis of RMA Type.
     *  @return
     */
    public boolean checkForOkQtyOnRMAType(Number okQty) {
        Boolean a = true;
        String rmaType = null;
        SlsRmaVOImpl rmaVO = this.getSlsRma1();
        Row rmaCRow = rmaVO.getCurrentRow();
        Integer rmaTypeVar = (Integer) rmaCRow.getAttribute("RmaTypId");
        System.out.println("TYPE ID OF RMA --" + rmaTypeVar);
        ViewObjectImpl idLovVO1 = this.getRmaIdLovVO1();
        Row[] row = idLovVO1.getFilteredRows("AttId", rmaTypeVar);
        if (row.length > 0) {
            rmaType = row[0].getAttribute("AttNm").toString();
        }
        System.out.println("RMA TYPE IS ::::: " + rmaType);
        if (rmaTypeVar == 405 || rmaTypeVar == 404) {
            if (okQty.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                a = false;
                /*
                ADFModelUtils.showFormattedFacesMessage("You have selected RMA type as " + rmaType + " !",
                                                        "In This Type the OK Quantity can not be ZERO !",
                                                        FacesMessage.SEVERITY_ERROR);
                */
            } else {
                a = true;
            }
        }
        return a;
    }

    /**
     *
     *  Method to Apply reverse_Tax_Function() On The Basis of Crediting the RMA .
     *  @return Boolean.
     *  p_cldid IN VARCHAR2,
		p_slocid IN NUMBER,
		p_ho_orgid IN VARCHAR2,
		p_orgid IN VARCHAR2,
		p_doc_id IN VARCHAR2,
		p_doc_dt IN DATE,
		p_eoid IN NUMBER,
		p_ship_doc_id IN VARCHAR2,
		p_ship_doc_dt IN DATE,
		p_so_id   VARCHAR2,
		p_pick_id VARCHAR2,
		p_itm_id IN VARCHAR2,
		p_usrid IN NUMBER,
		p_usrdt          DATE,
		p_taxable_amt_sp NUMBER,
		p_asbl_amt_sp    NUMBER
     */
    public Boolean reverse_Tax_Function() {
        Boolean success = true;
        /***********************Function for reverse tax*********************************************************/
        ViewObjectImpl itmVw = this.getSlsRmaItem1();
        RowQualifier itmRq = new RowQualifier(itmVw);
        itmRq.setWhereClause("CldId= '" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                             getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and DocId='" +
                             getSlsRma1().getCurrentRow().getAttribute("DocId") + "' and TaxRevsFlg='Y'");
        Row filteredItmRow[] = itmVw.getFilteredRows(itmRq);
        System.out.println(" item rq bhshvsdfcj query " + itmRq.getExprStr());
        System.out.println("filterhbxhcv " + filteredItmRow.length);
        if (filteredItmRow.length > 0) {
            System.out.println("Inside if after  filterhbxhcv");
            for (Row r : filteredItmRow) {
                String shipDocId = (String) r.getAttribute("ShipmntId");
                Timestamp date = (Timestamp) r.getAttribute("ShipmntDt");
                String itmId = (String) r.getAttribute("ItmId");
                Number taxableAmtSp = (Number) r.getAttribute("ItmAmtSp");
                Number asblAmtSp = (Number) r.getAttribute("ItmAsblAmtSp");
                System.out.println(taxableAmtSp + " taxable amount ");
                System.out.println(asblAmtSp + " accessibale amount ");

                System.out.println("shipmenyiyhuhukh---- " + shipDocId);
                Integer _slocId = (Integer) getparamSlocId();
                String _cldId = (String) getparamCldId();
                String _orgId = (String) getparamOrgId();
                String _hoOrgId = (String) getparamHoOrgId();
                String _docId = (String) getSlsRma1().getCurrentRow().getAttribute("DocId");
                Timestamp _docDt = (Timestamp) getSlsRma1().getCurrentRow().getAttribute("DocDt");
                Integer _eoId = (Integer) getSlsRma1().getCurrentRow().getAttribute("EoId");
                String _pickId = r.getAttribute("PickId").toString();
                String _soId = r.getAttribute("SoId").toString();
                Integer _uCreate = (Integer) getSlsRma1().getCurrentRow().getAttribute("UsrIdCreate");
                Timestamp _uDate = (Timestamp) getSlsRma1().getCurrentRow().getAttribute("UsrIdCreateDt");
                System.out.println("Parameters Values... " + _cldId + "  " + _slocId + "   " + _hoOrgId + "    " +
                                   _orgId + "    " + _docId + "    " + _docDt + "    " + _eoId + "      " + _uCreate +
                                   "    " + _uDate + "  " + date + "item id  " + itmId);
                try {
                    Object rtnval =
                        callStoredFunction1(Types.NUMERIC,
                                            "SLS.FN_INS_RMA_TAX_REVERSE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            _cldId, _slocId, _hoOrgId, _orgId, _docId, _docDt, _eoId, shipDocId, date,
                                            _soId, _pickId, itmId, _uCreate, _uDate, taxableAmtSp, asblAmtSp
                    });
                    success = true;
                } catch (Exception e) {
                    ADFModelUtils.showFormattedFacesMessage("There have  been Some Error in calling function FN_INS_RMA_TAX_REVERSE ",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    e.printStackTrace();
                    success = false;
                    break;
                }

            }
        }
        return success;
    }

    /** Written By Vishal Kr.
     * Method for check Gate Entry for filter LOV*/
    public String switcherExTrans() {
        Row currentRow = this.getSlsRma1().getCurrentRow();
        if (currentRow.getAttribute("GeDocId") != null) {
            return "LOV_TransShipmntId";
        } else {
            return "LOV_TransShipmntId1";
        }
    }

    /**
     * Container's getter for RmaIdLovVO1.
     * @return RmaIdLovVO1
     */
    public ViewObjectImpl getRmaIdLovVO1() {
        return (ViewObjectImpl) findViewObject("RmaIdLovVO1");
    }


    /****************************************************************************************************************************************************************************************/

    /**
     * Method to check if the shipment number is not duplicate
     * @param shipmntDocId
     * @return
     */
    public boolean isShipmentDuplicate(String shipmntDocId) {
        ViewObjectImpl impl = this.getSlsRmaShipmnt2();
        RowQualifier rq = new RowQualifier(impl);
        rq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                          getparamOrgId() + "' and ShipmntId ='" + shipmntDocId + "'");
        Row[] filteredRows = impl.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            return true;
        } else {
            return false;
        }
        /* Boolean b = false;
        ViewObjectImpl impl = this.getSlsRmaShipmnt2();
        RowSetIterator ctr = impl.createRowSetIterator(null);
        while(ctr.hasNext()){
            Row row = ctr.next();
            Object shipIdO = row.getAttribute("ShipmntId");
            if(shipIdO != null && shipmntDocId.equals(shipIdO.toString())){
                b = true;
                break;
            }
        }
        ctr.closeRowSetIterator();
        return b; */
    }

    /**
     * Method to add Shipment in RMA.
     * @return
     * 0 : Successfully added
     * -1 : In case of Unknown error
     * 1 : RMA Type have not been selected.
     * 2 : Wharehouse is not defined
     * 3 : Shipment have no been selected.
     * 4 : Shipment Date is null
     * 5 : Duplicate Shipment
     * 6 : EoId not selected
     *
     */

    public Integer addShipmntForItm() {
        Integer i = -1;
        Row rmaRow = getSlsRma1().getCurrentRow();
        Object useGeO = resolvEl("#{pageFlowScope.GLBL_ORG_GE_CHK}");
        Object eoIdO = rmaRow.getAttribute("EoId");
        Object rmaTypeO = rmaRow.getAttribute("RmaTypId");
        Object whIdO = rmaRow.getAttribute("WhId");
        Object shipmntDocIdO = rmaRow.getAttribute("ShipDocTxnIdTrans");
        Object shipMntDtO = rmaRow.getAttribute("ShipmntDtTrans");
        Object currIdO = rmaRow.getAttribute("CurrIdSp");

        String useGe = (useGeO == null ? "N" : useGeO.toString());
        Integer rmaType = (rmaTypeO == null ? -1 : (Integer) rmaTypeO);
        String whId = (whIdO == null ? "" : whIdO.toString());
        String shipmntDocId = (shipmntDocIdO == null ? "" : shipmntDocIdO.toString());
        Integer eoId = (eoIdO == null ? -1 : (Integer) eoIdO);
        Integer currId = (currIdO == null ? -1 : (Integer) currIdO);

        if (rmaType.equals(-1)) {
            i = 1;
        } else if (-1 == eoId) {
            i = 6;
        } else if ("".equals(whId)) {
            i = 2;
        } else if ("".equals(shipmntDocId)) {
            i = 3;
        } else if (shipMntDtO == null) {
            i = 4;
        } else if (isShipmentDuplicate(shipmntDocId)) {
            i = 5;
        } else if (-1 == currId) {
            i = 8;
        } else {
            ViewObjectImpl impl = getSlsRmaShipmnt2();
            Row shpmntRow = impl.createRow();
            impl.insertRow(shpmntRow);
            shpmntRow.setAttribute("ShipmntId", shipmntDocId);
            shpmntRow.setAttribute("ShipmntDt", shipMntDtO);
            shpmntRow.setAttribute("DocDt", rmaRow.getAttribute("DocDt"));
            i = 0;

            rmaRow.setAttribute("ShipDispIdTrans", null);
            rmaRow.setAttribute("ShipDocTxnIdTrans", null);
            rmaRow.setAttribute("ShipmntDtTrans", null);
        }
        return i;
    }

    /**
     * Method to remove Item for shipment from RMA
     */
    public void removeItemShpmntFrmRma(String shipDocId) {
        ViewObjectImpl itmVo = getSlsRmaItem2();
        Row itm[] = itmVo.getFilteredRows("ShipmntId", shipDocId);
        if (itm.length > 0) {
            for (int x = 0; x < itm.length; x++) {
                itm[x].remove();
            }
        }
        itmVo.executeQuery();

        ViewObjectImpl impl = getSlsRmaShipmnt2();

        Row shp[] = impl.getFilteredRows("ShipmntId", shipDocId);
        if (shp.length > 0) {
            shp[0].remove();

        }
        deleteCostCenterItem();
        impl.executeQuery();
    }

    /**
     * Method to filter shipment item on the basis of shipmemt
     * @param shipmntId
     */
    public void filterShipmntViewForItmSelection(String shipmntId) {
        ViewObjectImpl forItmQtySelection = getshpmntItmViewVOForItmQtySelection();
        Row currentRow = getSlsRma1().getCurrentRow();
        forItmQtySelection.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldId"));
        forItmQtySelection.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocId"));
        forItmQtySelection.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("OrgId"));
        forItmQtySelection.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgId"));
        forItmQtySelection.setNamedWhereClauseParam("ShipmntDocIdBind", shipmntId);
        forItmQtySelection.setNamedWhereClauseParam("BindItmId", null);
        forItmQtySelection.setNamedWhereClauseParam("BindEoId", currentRow.getAttribute("EoId"));
        forItmQtySelection.setNamedWhereClauseParam("BindWhId", currentRow.getAttribute("WhId"));
        forItmQtySelection.setNamedWhereClauseParam("BindCurIdSp", currentRow.getAttribute("CurrIdSp"));
        forItmQtySelection.executeQuery();
    }

    /**
     * Method to filter shipment item on the basis of Gate entry Items
     * @param shipmntId
     */
    public void filterShipmntViewForShipmentSelection(String itmId) {
        System.out.println(itmId + " <<< ---- Item id for which shipemt");
        ViewObjectImpl forItmQtySelection = getshpmntItmViewVOForItmQtySelection();
        Row currentRow = getSlsRma1().getCurrentRow();
        forItmQtySelection.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldId"));
        forItmQtySelection.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocId"));
        forItmQtySelection.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("OrgId"));
        forItmQtySelection.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgId"));
        forItmQtySelection.setNamedWhereClauseParam("ShipmntDocIdBind", null);
        forItmQtySelection.setNamedWhereClauseParam("BindItmId", itmId);
        forItmQtySelection.setNamedWhereClauseParam("BindEoId", currentRow.getAttribute("EoId"));
        forItmQtySelection.setNamedWhereClauseParam("BindWhId", currentRow.getAttribute("WhId"));
        forItmQtySelection.setNamedWhereClauseParam("BindCurIdSp", currentRow.getAttribute("CurrIdSp"));
        forItmQtySelection.executeQuery();
    }

    /***Method to insert data in RMA$ITM in case of Gate Entry not used**/

    public void insertItemToRmaFrmShpmnt() {
        ViewObjectImpl itmVo = getSlsRmaItem2();
        itmVo.executeQuery();
        RowSetIterator ctr = itmVo.createRowSetIterator(null);
        while (ctr.hasNext()) {
            ctr.next().remove();
        }
        ctr.closeRowSetIterator();

        ViewObjectImpl forItmQtySelection = getshpmntItmViewVOForItmQtySelection();
        RowSetIterator itmCtr = forItmQtySelection.createRowSetIterator(null);
        Row rmaRow = getSlsRma1().getCurrentRow();
        while (itmCtr.hasNext()) {
            Row row = itmCtr.next();
            Object rejQtyO = row.getAttribute("rejectedQuantTrans");
            Number rejQty = (rejQtyO == null ? StaticValue.NUMBER_ZERO : (Number) rejQtyO);
            if (rejQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                Row itmRow = itmVo.createRow();
                itmVo.insertRow(itmRow);
                itmRow.setAttribute("ReturnTypId", 406);
                //itmRow.setAttribute("ItmAmtSp", row.getAttribute("ItmAmtSp"));
                //itmRow.setAttribute("ItmAmtBs", row.getAttribute("ItmAmtBs"));
                itmRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                itmRow.setAttribute("ItmPrice", row.getAttribute("ItmPrice"));
                itmRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));
                itmRow.setAttribute("Reason", null);
                itmRow.setAttribute("Remarks", null);

                itmRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));
                itmRow.setAttribute("ShipmntQty", row.getAttribute("ShipmntQty"));
                itmRow.setAttribute("SoId", row.getAttribute("SoId"));
                itmRow.setAttribute("PickId", row.getAttribute("PickId"));
                itmRow.setAttribute("SrNo", null);
                itmRow.setAttribute("TaxRevsFlg", "N");
                itmRow.setAttribute("CurrConvFctr", rmaRow.getAttribute("CurrConvFctr"));
                itmRow.setAttribute("CurrIdBs", rmaRow.getAttribute("CurrIdBs"));
                itmRow.setAttribute("CurrIdSp", rmaRow.getAttribute("CurrIdSp"));
                itmRow.setAttribute("WhId", rmaRow.getAttribute("WhId"));
                itmRow.setAttribute("UomConvFctr", row.getAttribute("UomConvFctr"));
                itmRow.setAttribute("ItmUomBs", row.getAttribute("ItmUomBs"));
                Number uomConvFctr =
                    (row.getAttribute("UomConvFctr") == null ? new Number(1) :
                     (Number) row.getAttribute("UomConvFctr"));
                itmRow.setAttribute("ItmQtyBs", row.getAttribute("BSrejectedQuantTrans"));

                itmRow.setAttribute("RcptQty", rejQty);
                itmRow.setAttribute("RejQty", StaticValue.NUMBER_ZERO);
                itmRow.setAttribute("OkQty", StaticValue.NUMBER_ZERO);
                itmRow.setAttribute("RwkQty", StaticValue.NUMBER_ZERO);
                System.out.println(itmRow.getAttribute("ItmAmtSp") + " ==== amount for qty selected");
                itmRow.setAttribute("ItmAsblAmtSp", itmRow.getAttribute("ItmAmtSp"));
                itmRow.setAttribute("CcId", callFunForCcDocNo());
            }
        }
        itmCtr.closeRowSetIterator();
        itmVo.executeQuery();
    }


    /**
     * Container's getter for shpmntItmViewVO2.
     * @return shpmntItmViewVO2
     */
    public ViewObjectImpl getshpmntItmViewVOForItmQtySelection() {
        return (ViewObjectImpl) findViewObject("shpmntItmViewVOForItmQtySelection");
    }

    /**
     * Container's getter for ShipmntIdFrmDocIdVO1.
     * @return ShipmntIdFrmDocIdVO1
     */
    public ViewObjectImpl getShipmntIdFrmDocIdVO1() {
        return (ViewObjectImpl) findViewObject("ShipmntIdFrmDocIdVO1");
    }

    /**
     * Method to check if Recieved Quantity is properly allocated or not
     * @return
     * 0 : When Quantity is properly allocated
     * -1 : In case of Error
     * 1 : When Reciept quantity is not equal to allocated Quantity.
     */
    public Integer checkIfQtyIsProperlyAlloted() {
        Integer i = 0;
        Row currentRow = getSlsRmaItem2().getCurrentRow();
        Object rcptQytO = currentRow.getAttribute("RcptQty");
        Object rejQtyO = currentRow.getAttribute("RejQty");
        Object okQtyO = currentRow.getAttribute("OkQty");
        Object rwkQtyO = currentRow.getAttribute("RwkQty");
        Number rcptQyt = (rcptQytO == null ? StaticValue.NUMBER_ZERO : (Number) rcptQytO);
        Number rejQty = (rejQtyO == null ? StaticValue.NUMBER_ZERO : (Number) rejQtyO);
        Number okQty = (okQtyO == null ? StaticValue.NUMBER_ZERO : (Number) okQtyO);
        Number rwkQty = (rwkQtyO == null ? StaticValue.NUMBER_ZERO : (Number) rwkQtyO);
        if (rcptQyt.compareTo(rejQty.add(okQty).add(rwkQty)) != 0) {
            i = 1;
        }
        return i;
    }

    /** Method to Validate Bin Quantity
     *  @return
     *   0 : Operation Successfull
     *  -1 : Error While Validation
     *   1 : BinCapacity is less than entered Quantity.
     *   2 : Total Quantity including the Current Quantity is Exceeding the Total Bin Capacity.
     *   3 : Quantity is less than zero
     *   4 : Quantity is Greater than Lot Qty
     *   5 : Quantity is Less than Lot Qty
     */
    public Integer validateBinQty() {
        Integer i = 0;
        Row rmaItmRow = getSlsRmaItem2().getCurrentRow();
        Row binRow = this.getSlsRmaItmBin1().getCurrentRow();
        ViewObjectImpl lot = this.getSlsRmaItmLot1();
        Row lotRow = lot.getCurrentRow();
        Object lotQtyO = lotRow.getAttribute("RcptQty");
        Object qtyO = binRow.getAttribute("TempQtyTrans");
        Object binId = binRow.getAttribute("BinId");
        Number qty = (qtyO == null ? StaticValue.NUMBER_ZERO : (Number) qtyO);
        Number lotQty = (lotQtyO == null ? StaticValue.NUMBER_ZERO : (Number) lotQtyO);
        Number binItmCapacity = StaticValue.NUMBER_ZERO;
        if (qty.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
            i = 3;
        } else if (qty.compareTo(lotQty) > 0) {
            i = 4;
        } else if (qty.compareTo(lotQty) < 0) {
            i = 5;
        }
        if (i == 0) {
            ViewObjectImpl binCap = this.getgetBinCapacityVO1();
            binCap.setNamedWhereClauseParam("CldIdBind", rmaItmRow.getAttribute("CldId"));
            binCap.setNamedWhereClauseParam("SlocIdBind", rmaItmRow.getAttribute("SlocId"));
            binCap.setNamedWhereClauseParam("OrgIdBind", rmaItmRow.getAttribute("OrgId"));
            binCap.setNamedWhereClauseParam("BinIdBind", binId);
            binCap.setNamedWhereClauseParam("WhIdBind", rmaItmRow.getAttribute("WhId"));
            binCap.setNamedWhereClauseParam("ItmIdBind", rmaItmRow.getAttribute("ItmId"));
            binCap.executeQuery();
            Row[] binRows = binCap.getAllRowsInRange();

            if (binRows.length > 0) {
                Object itmQtyO = binRows[0].getAttribute("ItmQty");
                if (itmQtyO != null) {
                    binItmCapacity = (itmQtyO == null ? StaticValue.NUMBER_ZERO : (Number) itmQtyO);
                    System.out.println("BinCapacity : " + binItmCapacity);
                }
                if (binItmCapacity.compareTo(qty) < 0) {
                    i = 1;
                }
            }
        }

        if (i == 0) {
            ViewObjectImpl stkBin = this.getviewStkSummBinVO1();
            stkBin.setNamedWhereClauseParam("CldIdBind", binRow.getAttribute("CldId"));
            stkBin.setNamedWhereClauseParam("SlocIdBind", binRow.getAttribute("SlocId"));
            stkBin.setNamedWhereClauseParam("OrgIdBind", binRow.getAttribute("OrgId"));
            stkBin.setNamedWhereClauseParam("WhIdBind", binRow.getAttribute("WhId"));
            stkBin.setNamedWhereClauseParam("ItmIdBind", binRow.getAttribute("ItmId"));
            stkBin.setNamedWhereClauseParam("LotIdBind", binRow.getAttribute("LotId"));
            stkBin.setNamedWhereClauseParam("BinIdBind", binId);
            stkBin.executeQuery();
            Number binPrevQty = StaticValue.NUMBER_ZERO;
            RowSetIterator ctr = stkBin.createRowSetIterator(null);
            while (ctr.hasNext()) {
                Row row = ctr.next();
                Object binQtyO = row.getAttribute("TotStk");
                if (binQtyO != null) {
                    binPrevQty = binPrevQty.add((Number) binQtyO);
                }
            }
            ctr.closeRowSetIterator();
            Number newQty = binPrevQty.add(qty);
            if (newQty.compareTo(binItmCapacity) < 1) {
                i = 2;
            }
        }
        return i;
        //        String retVal = "N";
        //        Number bincapacity = new Number(0);
        //        Number curitmStk = new Number(0);
        //
        //
        //        ViewObject slsRma = this.getSlsRma1();
        //        ViewObjectImpl stkBin = this.getviewStkSummBinVO1();
        //        ViewObjectImpl binCap = this.getgetBinCapacityVO1();
        //        ViewObject slsRmaBin = this.getSlsRmaItmBin1();
        //
        //
        //        Row rmaRow = slsRma.getCurrentRow();
        //        Row rmaBinRow = slsRmaBin.getCurrentRow();
        //        RowQualifier rqCap = new RowQualifier(binCap);
        //        rqCap.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
        //                             getparamOrgId() + "' and WhId='" + rmaRow.getAttribute("WhId") + "' and ItmId='" +
        //                             rmaBinRow.getAttribute("ItmId") + "' and BinId='" + BinId + "'");
        //        Row fltrBincap[] = binCap.getFilteredRows(rqCap);
        //        //System.out.println("Row for this Bin in Bin Cap-" + fltrBincap.length);
        //
        //        if (fltrBincap.length > 0) {
        //            if (fltrBincap[0].getAttribute("ItmQty") != null) {
        //                bincapacity = (Number) fltrBincap[0].getAttribute("ItmQty");
        //            }
        //        } else {
        //            /***-1 capacity represents that user can allocate unlimited quantity to that bin*/
        //            bincapacity = new Number(-1);
        //        }
        //        // System.out.println("Bin capacity is-" + bincapacity);
        //
        //        RowQualifier rqStk = new RowQualifier(stkBin);
        //        rqStk.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
        //                             getparamOrgId() + "' and WhId='" + rmaRow.getAttribute("WhId") + "' and ItmId='" +
        //                             rmaBinRow.getAttribute("ItmId") + "' and BinId='" + BinId + "'");
        //        Row fltrStk[] = stkBin.getFilteredRows(rqStk);
        //        //System.out.println("Row for this Bin in Stock-" + fltrStk.length);
        //
        //        if (fltrStk.length > 0) {
        //            for (Row r : fltrStk) {
        //                if (r.getAttribute("TotStk") != null) {
        //                    curitmStk = curitmStk.add((Number) r.getAttribute("TotStk"));
        //                }
        //            }
        //        }
        //        // System.out.println("Current Stock for this item in StockBin-" + curitmStk);
        //        if (qty != null) {
        //            Number totQtyVal = curitmStk.add(qty);
        //            // System.out.println("Capacity -" + bincapacity + " current tot Qty--" + totQtyVal);
        //            if (bincapacity.compareTo(-1) == 0) {
        //                retVal = "N";
        //            } else if (totQtyVal.compareTo(bincapacity) == 1) {
        //                retVal = "Y";
        //            }
        //        }
        //        return retVal;
    }

    /****Method to set quantity in Bin base quantity**/
    public void setbinQtyBsVal() {
        ViewObject bin = this.getSlsRmaItmBin1();
        ViewObjectImpl lot = this.getSlsRmaItmLot1();
        Row lotRow = lot.getCurrentRow();
        Row binRow = bin.getCurrentRow();
        Number tempQty = (Number) binRow.getAttribute("TempQtyTrans");
        binRow.setAttribute("RcptQty", tempQty);
        binRow.setAttribute("ItmUom", lotRow.getAttribute("ItmUom"));
        String baseUomOfPassedItm =
            EbizParamsMMUtils.getBaseUomOfPassedItm(this, binRow.getAttribute("ItmId").toString());
        Number convFactor =
            EbizParamsMMUtils.getItmUomConvFactor(this, binRow.getAttribute("ItmId").toString(),
                                                  binRow.getAttribute("ItmUom").toString(), baseUomOfPassedItm);
        binRow.setAttribute("RcptQtyBs",
                            ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), tempQty.multiply(convFactor)));

        this.getSlsRmaItmBin1().executeQuery();
    }

    /**
     * Method to add Bin for Item Lot
     * @return
     */
    public Integer addBinForItmLot() {
        Integer i = validateBinQty();
        if (i == 0) {
            setbinQtyBsVal();
        }
        return i;
    }

    /**
     * Method to add Item in SLS$RMALOT table...
     */
    public void addItmInLot() {
        System.out.println(" ************************** begain add Item lot");
        LovShipWiseLotVOImpl shipmntWiseLotVO = getLovShipWiseLotVO1();
        ViewObjectImpl slsRmalotVO = this.getSlsRmaItmLot1();
        slsRmalotVO.setRangeSize(-1);
        slsRmalotVO.executeQuery();
        RowSetIterator shipLotItr = shipmntWiseLotVO.createRowSetIterator(null);
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        System.out.println(shipLotItr.getRowCount() +
                           " +++++++++++++++++++++++ total row count for shipment wile lot Vo");
        while (shipLotItr.hasNext()) {
            Row row = shipLotItr.next();
            Object approvQty0 = row.getAttribute("TransRejQty");
            Object rejctedQtyO = row.getAttribute("TreansRcvRejQuty");
            Object rewrkbleQtyO = row.getAttribute("TransRcvRwkQty");
            Number approvQty = (approvQty0 == null ? StaticValue.NUMBER_ZERO : (Number) approvQty0);
            
            Number rejctedQty = (rejctedQtyO == null ? StaticValue.NUMBER_ZERO : (Number) rejctedQtyO);
            Number rewrkbleQty = (rewrkbleQtyO == null ? StaticValue.NUMBER_ZERO : (Number) rewrkbleQtyO);
            if (approvQty.compareTo(StaticValue.NUMBER_ZERO) > 0 || rejctedQty.compareTo(StaticValue.NUMBER_ZERO) > 0 ||
                rewrkbleQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {

                System.out.println(" ***************** All values greater than 0");
                RowQualifier rowQualifier = new RowQualifier(slsRmalotVO);
                RowQualifier binRowQl = new RowQualifier(getSlsRmaItmBin1());
                StringBuilder clause =
                    new StringBuilder("ItmId = '" + row.getAttribute("ItmId") + "' and LotId='" +
                                      row.getAttribute("LotId1") + "' and ShipmntId ='" + row.getAttribute("DocId") +
                                      "' and SoId ='" + row.getAttribute("SoId") + "' and PickId ='" +
                                      row.getAttribute("PickId"));
                rowQualifier.setWhereClause(clause.toString());
                binRowQl.setWhereClause(clause.toString());
                Row[] rmaLotRows = slsRmalotVO.getFilteredRows(rowQualifier);
                Row[] rmaBinRows = getSlsRmaItmBin1().getFilteredRows(binRowQl);
                if ("Y".equalsIgnoreCase(binChkFlg)) {
                    if (rmaBinRows.length > 0) {
                        for (int i = 0; i < rmaBinRows.length; i++) {
                            rmaBinRows[i].remove();
                            insertShipSrToRmaLotBin(null, row.getAttribute("BinId1"), row.getAttribute("LotId1"),
                                                    row.getAttribute("DocDt"), approvQty, rewrkbleQty, rejctedQty);
                        }
                    } else {
                        insertShipSrToRmaLotBin(null, row.getAttribute("BinId1"), row.getAttribute("LotId1"),
                                                row.getAttribute("DocDt"), approvQty, rewrkbleQty, rejctedQty);

                    }
                }
                if (rmaLotRows.length > 0) {
                    for (int x = 0; x < rmaLotRows.length; x++) {
                        System.out.println(rmaLotRows[x] + " ========================= The rows");
                        rmaLotRows[x].remove();
                        insertShipSrToRmaLot(null, row.getAttribute("LotId1"), row.getAttribute("DocDt"),
                                             row.getAttribute("ItmLotCost"), row.getAttribute("ShipmntQty"), approvQty,
                                             rejctedQty, rewrkbleQty);

                    }
                } else {
                    System.out.println("Inside else part of the create row ################################");
                    insertShipSrToRmaLot(null, row.getAttribute("LotId1"), row.getAttribute("DocDt"),
                                         row.getAttribute("ItmLotCost"), row.getAttribute("ShipmntQty"), approvQty,
                                         rejctedQty, rewrkbleQty);
                }
            }
        }
        shipLotItr.closeRowSetIterator();
    }

    /*****Method to add ITEM SERIAL WISE IN Bin***/

    public void addItemToSerialNo() {
        Row lotRow = this.getSlsRmaItmLot1().getCurrentRow();
        Object useBinO = ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        StringBuilder useBin = (useBinO == null ? new StringBuilder("N") : new StringBuilder(useBinO.toString()));
        if ("N".equals(useBin.toString())) {
            Row srRow = this.getSlsRmaItmSr1().createRow();
            this.getSlsRmaItmSr1().insertRow(srRow);
            srRow.setAttribute("LotId", lotRow.getAttribute("LotId"));
            srRow.setAttribute("BinId", 0);
        } else {
            Row srRow = this.getSlsRmaItmSr1().createRow();
            this.getSlsRmaItmSr1().insertRow(srRow);
            Row binRow = this.getSlsRmaItmBin1().getCurrentRow();
            srRow.setAttribute("LotId", binRow.getAttribute("LotId"));
            srRow.setAttribute("BinId", binRow.getAttribute("BinId"));
        }
    }

    /**
     * Container's getter for LovShipWiseItmSr1.
     * @return LovShipWiseItmSr1
     */
    public ViewObjectImpl getLovShipWiseItmSr() {
        return (ViewObjectImpl) findViewObject("LovShipWiseItmSr");
    }

    /**Method to filter shipment item for lot bin entry
     */

    public void filterLotBinItem() {
        Row r = getSlsRmaItem2().getCurrentRow();

        getLovShipWiseLotVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getLovShipWiseLotVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getLovShipWiseLotVO1().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getLovShipWiseLotVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getLovShipWiseLotVO1().setNamedWhereClauseParam("BindWhId", r.getAttribute("WhId"));
        getLovShipWiseLotVO1().setNamedWhereClauseParam("BindShipDocId", r.getAttribute("ShipmntId"));
        getLovShipWiseLotVO1().setNamedWhereClauseParam("BindPickDocId", r.getAttribute("PickId"));
        getLovShipWiseLotVO1().setNamedWhereClauseParam("BindItmId", r.getAttribute("ItmId"));
        getLovShipWiseLotVO1().setNamedWhereClauseParam("BindSoDocId", r.getAttribute("SoId"));

        getLovShipWiseLotVO1().executeQuery();
    }

    /**Method to filter shipment item for Serial entry
     */
    public void filterSerialItem() {
        Row r = getSlsRmaItem2().getCurrentRow();

        getLovShipWiseItmSr().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getLovShipWiseItmSr().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getLovShipWiseItmSr().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getLovShipWiseItmSr().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getLovShipWiseItmSr().setNamedWhereClauseParam("BindWhId", r.getAttribute("WhId"));
        getLovShipWiseItmSr().setNamedWhereClauseParam("BindShipDocId", r.getAttribute("ShipmntId"));
        getLovShipWiseItmSr().setNamedWhereClauseParam("BindPickDocId", r.getAttribute("PickId"));
        getLovShipWiseItmSr().setNamedWhereClauseParam("BindItmId", r.getAttribute("ItmId"));
        getLovShipWiseItmSr().setNamedWhereClauseParam("BindSoDocId", r.getAttribute("SoId"));
        getLovShipWiseItmSr().executeQuery();
    }

    /**Method to get the total no of selected Serialized item
     */
    public Number getTotalSelectedSrItem() {
        Number result = new Number(0);
        Boolean chk = false;
        RowSetIterator itr = getLovShipWiseItmSr().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            chk = r.getAttribute("SelectItemSrNo") == null ? false : (Boolean) r.getAttribute("SelectItemSrNo");
            if (chk == true) {
                result = result.add(1);
            }
        }
        //  System.out.println(result + " <<<<========  The total selected sr. item");
        return result;
    }

    /**Method to get the total no of Serialized item that is rejected
     */
    public Number getTotalSrItemForRma() {
        Number result = new Number(0);

        Row r = getSlsRmaItem2().getCurrentRow();
        result = r.getAttribute("OkQty") == null ? new Number(0) : (Number) r.getAttribute("OkQty");
        // System.out.println(result + " <<_-- The total ok serial qty");
        return result;
    }
    private static Number NUMBER_ONE = new Number(1);

    /**
     * Method to insert the selected serilaized item
     */
    public void insertSelectedSrItem() {
        LotData data = new LotData();
        String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

        Row currItemRow = getSlsRmaItem2().getCurrentRow();

        Object curItmId = currItemRow.getAttribute("ItmId");
        //Method called which removes all the old entries
        removeLotBinSrEntries(curItmId);
        Object shipmntDtO = null;

        RowSetIterator srItr = getLovShipWiseItmSr().createRowSetIterator(null);
        ArrayList<String> arrlist = new ArrayList<String>();
        while (srItr.hasNext()) {
            LotRow lotRow = new LotRow();
            Row row = srItr.next();
            Object approveO = row.getAttribute("SelectItemSrNo");
            Object rejectedO = row.getAttribute("SelectItemSrNoRejQty");
            Object rwrkableO = row.getAttribute("SelectItemSrNoRewkQty");

            Boolean approv = (approveO == null ? false : (Boolean) approveO);
            Boolean rejecetd = (rejectedO == null ? false : (Boolean) rejectedO);
            Boolean rwrkable = (rwrkableO == null ? false : (Boolean) rwrkableO);

            Object srNo = row.getAttribute("SrNo1");
            Object binId = row.getAttribute("BinId1");
            Object lotId = row.getAttribute("LotId1");
            Object docDt = row.getAttribute("DocDt");
            shipmntDtO = docDt;

            if (approv) {
                insertShipSrToRmaSr(null, srNo, binId, lotId, docDt, NUMBER_ONE, "A");
            } else if (rejecetd) {
                insertShipSrToRmaSr(null, srNo, binId, lotId, docDt, NUMBER_ONE, "R");
            } else if (rwrkable) {
                insertShipSrToRmaSr(null, srNo, binId, lotId, docDt, NUMBER_ONE, "W");
            }
            if (approv || rejecetd || rwrkable) {
                lotRow.setLotId(lotId.toString());
                lotRow.setBinId(binId == null ? "" : binId.toString());
                lotRow.setSrNo(srNo == null ? "" : srNo.toString());
                if (approv) {
                    lotRow.setOkQty(NUMBER_ONE);
                } else if (rejecetd) {
                    lotRow.setRejQty(NUMBER_ONE);
                } else if (rwrkable) {
                    lotRow.setRwkQty(NUMBER_ONE);
                }
                data.addLotData(lotRow);
            }

            /* Boolean chk = false;
            chk = row.getAttribute("SelectItemSrNo") == null ? false : (Boolean) row.getAttribute("SelectItemSrNo");
            if (chk) {
                arrlist.add(row.getAttribute("LotId1").toString());
                insertShipSrToRmaSr(null, row.getAttribute("SrNo1"), row.getAttribute("BinId1"),
                                    row.getAttribute("LotId1"), row.getAttribute("DocDt"), new Number(1));
            }
            data.addLotData(row); */
        }
        srItr.closeRowSetIterator();


        ArrayList<String> distinctLot = data.getDistinctLotId();
        for (String lotId : distinctLot) {
            Number okQty = data.getTotOkQtyForLot(lotId);
            Number rejQty = data.getTotRejQtyForLot(lotId);
            Number rwkQty = data.getTotRwkQtyForLot(lotId);

            RowQualifier rowQualifier = new RowQualifier(getLovShipWiseItmSr());
            rowQualifier.setWhereClause(" ItmId = '" + curItmId + "' and LotId1 = '" + lotId + "'");
            Row tmpRow[] = getLovShipWiseItmSr().getFilteredRows(rowQualifier);
            if (tmpRow.length > 0) {
                Object shpDate = tmpRow[0].getAttribute("DocDt");
                Object lotCost = tmpRow[0].getAttribute("ItmLotCost");
                Object shpQty = tmpRow[0].getAttribute("ShipmntQty");
                insertShipSrToRmaLot(null, lotId, shpDate, lotCost, shpQty, okQty, rejQty, rwkQty);
            }
        }

        if ("Y".equals(binChkFlg)) {
            //Row tmpRow[] = getLovShipWiseItmSr().getFilteredRows(rowQualifier);
            ArrayList<String[]> lotBin = data.getDistinctLotBinId();
            for (String[] row : lotBin) {
                String lotId = row[0];
                String binId = row[1];
                Number okQty = data.getTotOkQtyForLotBin(lotId, binId);
                Number rejQty = data.getTotRejQtyForLotBin(lotId, binId);
                Number rwkQty = data.getTotRwkQtyForLotBin(lotId, binId);
                if (okQty.compareTo(StaticValue.NUMBER_ZERO) > 0 || rejQty.compareTo(StaticValue.NUMBER_ZERO) > 0 ||
                    rwkQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                    insertShipSrToRmaLotBin(null, binId, lotId, shipmntDtO, okQty, rwkQty, rejQty);
                }
            }
        }


        //----------------------------------------------------------------------------------------------------------------------------------------------------
        // Using Set to remove duplicate LotId
        //Set<String> lotset = new HashSet<String>(arrlist);
        /*
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotval = StaticValue.NUMBER_ZERO;
            try {
                lotval = new Number(lotQty);
            } catch (Exception e) {
                _log.info(e);
            }
            System.out.println(" The total item for each lot is --->>>  " + lotval);
            System.out.println(" The lot id is --->>>  " + key);

            RowQualifier rowQualifier = new RowQualifier(getLovShipWiseItmSr());
            rowQualifier.setWhereClause(" ItmId = '" + curItmId + "' and LotId1 = '" + key + "'");

            Row tmpRow[] = getLovShipWiseItmSr().getFilteredRows(rowQualifier);
            System.out.println(" Filtered row lengtht ===>> " + tmpRow.length);

            if (tmpRow.length > 0) {
                Object shpDate = tmpRow[0].getAttribute("DocDt");
                Object lotCost = tmpRow[0].getAttribute("ItmLotCost");
                Object shpQty = tmpRow[0].getAttribute("ShipmntQty");
                Object binId = tmpRow[0].getAttribute("BinId1");
                Object srNo = tmpRow[0].getAttribute("SrNo1");

                insertShipSrToRmaLot(null, key, shpDate, lotCost, shpQty, lotval, StaticValue.NUMBER_ZERO,
                                     StaticValue.NUMBER_ZERO);
                //   shipSrToRmaLotBin(null, binId, key, shpDate, approvQty);

            }
        } */

        //Row[] srRow = getLovShipWiseItmSr().getFilteredRows("ItmId", curItmId);

        //Iterator i = lotset.iterator();
        //Number binQtyT = StaticValue.NUMBER_ZERO;
        // Add Bin in bin Table for using lotSet Value When organisation using Bin pageflow scope check is- binChkFlg == Y
        /* if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                System.out.println("-lot in bin-----" + lot);
                for (Row r2 : srRow) {
                    Boolean chk = false;
                    chk =
                        r2.getAttribute("SelectItemSrNo") == null ? false : (Boolean) r2.getAttribute("SelectItemSrNo");
                    if (chk == true && lot.equalsIgnoreCase(r2.getAttribute("LotId1").toString())) {
                        String tmpBin = r2.getAttribute("BinId1") == null ? null : r2.getAttribute("BinId1").toString();
                        arrListbin.add(tmpBin);
                    }
                }


                Set<String> binSet = new HashSet<String>(arrListbin);
                System.out.println("Bin set is:  ---- " + binSet);
                Integer binQty = 0;
                Number binval = StaticValue.NUMBER_ZERO;

                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    binQty = Collections.frequency(arrListbin, key);
                    binval = StaticValue.NUMBER_ZERO;
                    _log.info("Quantity in Bin-" + binQty);

                    try {
                        binval = new Number(binQty);
                    } catch (SQLException e) {
                        _log.info(e);
                    }

                    System.out.println(" The total item for each lot is --->>>  " + binval);
                    System.out.println(" The lot id is --->>>  " + key);
                    RowQualifier rowQualifier = new RowQualifier(getLovShipWiseItmSr());
                    rowQualifier.setWhereClause(" ItmId = '" + curItmId + "' and LotId1 = '" + lot +
                                                "' and BinId1 = '" + key + "'");

                    Row tmpRow[] = getLovShipWiseItmSr().getFilteredRows(rowQualifier);

                    System.out.println(" Filtered row lengtht ===>> " + tmpRow.length);
                    if (tmpRow.length > 0) {
                        Object shpDate = tmpRow[0].getAttribute("DocDt");


                        insertShipSrToRmaLotBin(null, key, lot, shpDate, binval);
                        //   shipSrToRmaLotBin(null, binId, key, shpDate, approvQty);

                    }
                }
            }
        } */
    }

    //Method to insert into RMA Lot
    protected void insertShipSrToRmaLot(String itmId, Object lotId, Object shpDate, Object lotCost, Object shpQty,
                                        Number approvQty, Number rejctedQty, Number rewrkbleQty) {
        System.out.println(" Inerting value in Lot for Serial no.");
        ViewObjectImpl slsRmalotVO = this.getSlsRmaItmLot1();
        Row newLotRow = slsRmalotVO.createRow();
        slsRmalotVO.insertRow(newLotRow);
        Number totQty = approvQty.add(rejctedQty).add(rewrkbleQty);

        newLotRow.setAttribute("DocDt", StaticValue.getCurrDtWidTimestamp()); //date
        newLotRow.setAttribute("LotId", lotId);
        newLotRow.setAttribute("ShipmntDt", shpDate);
        Number price = StaticValue.NUMBER_ZERO;
        if (shpQty != null && lotCost != null) {
            Number shipLotCost = (Number) lotCost;
            Number shipmntQty = (Number) shpQty;
            price = shipLotCost.divide(shipmntQty);
            price = ADFBeanUtils.roundOff(price);
        }
        System.out.println("Total Lot Price : " + price);
        System.out.println("Total No of Items : " + totQty);
        Number totCost = price.multiply(totQty);
        totCost = ADFBeanUtils.roundOff(totCost);
        newLotRow.setAttribute("ItmLotCost", totCost);
        newLotRow.setAttribute("RcptQty", approvQty);
        String baseUomOfPassedItm =
            EbizParamsMMUtils.getBaseUomOfPassedItm(this, newLotRow.getAttribute("ItmId").toString());
        Number convFactor =
            EbizParamsMMUtils.getItmUomConvFactor(this, newLotRow.getAttribute("ItmId").toString(),
                                                  newLotRow.getAttribute("ItmUom").toString(), baseUomOfPassedItm);
        newLotRow.setAttribute("RcptQtyBs", ADFBeanUtils.roundOff(approvQty.multiply(convFactor)));
        newLotRow.setAttribute("RejQty", rejctedQty);
        newLotRow.setAttribute("RwkQty", rewrkbleQty);
        newLotRow.setAttribute("RejQtyBs", ADFBeanUtils.roundOff(rejctedQty.multiply(convFactor)));
        newLotRow.setAttribute("RwkQtyBs", ADFBeanUtils.roundOff(rewrkbleQty.multiply(convFactor)));

        getSlsRmaItmLot1().executeQuery();
    }

    //method to insert into Lot Bin
    protected void insertShipSrToRmaLotBin(String itmId, Object binId, Object lotId, Object shpDate, Number approvQty,
                                           Number rwrkQty, Number rejQty) {
        String chkBin = getparamBinCheck();
        if (chkBin.equalsIgnoreCase("Y")) {
            ViewObjectImpl slsRmalotBinVO = this.getSlsRmaItmBin1();
            Row newBinRow = slsRmalotBinVO.createRow();
            slsRmalotBinVO.insertRow(newBinRow);

            newBinRow.setAttribute("DocDt", StaticValue.getCurrDtWidTimestamp()); //date
            newBinRow.setAttribute("LotId", lotId);
            newBinRow.setAttribute("BinId", binId);
            newBinRow.setAttribute("ShipmntDt", shpDate);
            newBinRow.setAttribute("RcptQty", approvQty);
            String baseUomOfPassedItm =
                EbizParamsMMUtils.getBaseUomOfPassedItm(this, newBinRow.getAttribute("ItmId").toString());
            Number convFactor =
                EbizParamsMMUtils.getItmUomConvFactor(this, newBinRow.getAttribute("ItmId").toString(),
                                                      newBinRow.getAttribute("ItmUom").toString(), baseUomOfPassedItm);
            newBinRow.setAttribute("RcptQtyBs", ADFBeanUtils.roundOff(approvQty.multiply(convFactor)));
            newBinRow.setAttribute("RwkQty", rwrkQty);
            newBinRow.setAttribute("RwkQtyBs", ADFBeanUtils.roundOff(rwrkQty.multiply(convFactor)));
            newBinRow.setAttribute("RejQty", rejQty);
            newBinRow.setAttribute("RejQtyBs", ADFBeanUtils.roundOff(rejQty.multiply(convFactor)));

            getSlsRmaItmBin1().executeQuery();
        }
    }

    //Method to insert into Sr
    protected void insertShipSrToRmaSr(String itmId, Object srNo, Object binId, Object lotId, Object shpDate,
                                       Number approvQty, String SrStat) {
        System.out.println(" Inserting Serial item for ------------  " + srNo);
        ViewObjectImpl slsRmalotSrVO = this.getSlsRmaItmSr1();
        Row newSrRow = slsRmalotSrVO.createRow();
        slsRmalotSrVO.insertRow(newSrRow);

        newSrRow.setAttribute("DocDt", StaticValue.getCurrDtWidTimestamp()); //date
        newSrRow.setAttribute("LotId", lotId);
        newSrRow.setAttribute("BinId", binId);
        newSrRow.setAttribute("SrNo", srNo);
        newSrRow.setAttribute("ShipmntDt", shpDate);
        newSrRow.setAttribute("SrQty", approvQty);
        String baseUomOfPassedItm =
            EbizParamsMMUtils.getBaseUomOfPassedItm(this, newSrRow.getAttribute("ItmId").toString());
        Number convFactor =
            EbizParamsMMUtils.getItmUomConvFactor(this, newSrRow.getAttribute("ItmId").toString(),
                                                  newSrRow.getAttribute("ItmUom").toString(), baseUomOfPassedItm);
        newSrRow.setAttribute("SrQtyBs", ADFBeanUtils.roundOff(approvQty.multiply(convFactor)));
        newSrRow.setAttribute("SrStat", SrStat);

        getSlsRmaItmSr1().executeQuery();
    }
    //Method to remove all the lot bin sr entries
    protected void removeLotBinSrEntries(Object itmId) {
        Row b[] = getSlsRmaItmBin1().getFilteredRows("ItmId", itmId);
        for (int x = 0; x < b.length; x++) {
            b[x].remove();
        }
        Row l[] = getSlsRmaItmLot1().getFilteredRows("ItmId", itmId);
        for (int x = 0; x < l.length; x++) {
            l[x].remove();
        }
        Row s[] = getSlsRmaItmSr1().getFilteredRows("ItmId", itmId);
        for (int x = 0; x < s.length; x++) {
            s[x].remove();
        }
    }

    /**
     * Method to validate whether Lot Bin Serial qty is Entered or not
     */
    public Boolean validateLotBinSrItmQty() {
        Boolean sucess = false;
        getSlsRmaItem3().executeQuery();
        getSlsRmaItem2().executeQuery();
        Row curRma = getSlsRma1().getCurrentRow();
        String rmaDocId = curRma.getAttribute("DocId").toString();
        Integer rmaType = (Integer) curRma.getAttribute("RmaTypId");
        System.out.println("Rma type is === " + rmaType);
        if (rmaType != 401) {

            /*  String clause =
                " CldId = '" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId = '" + EbizParams.GLBL_APP_SERV_LOC() +
                "' and OrgId = '" + EbizParams.GLBL_HO_ORG_ID() + "' and HoOrgId = '" + EbizParams.GLBL_HO_ORG_ID() +
                "' and DocId = '" + rmaDocId + "'";
            RowQualifier rqRmaItm = new RowQualifier(getSlsRmaItem1());
            rqRmaItm.setWhereClause(clause); */
            getSlsRmaItem3().setRangeSize(-1);
            Row r[] = getSlsRmaItem3().getAllRowsInRange();
            System.out.println("the total item in RMA -->> " + getSlsRmaItem3().getEstimatedRowCount());
            System.out.println("the total item in filtered RMA ITEM -->> " + r.length);
            for (int x = 0; x < r.length; x++) {
                Object itmQtyBsO = r[x].getAttribute("ItmQtyBs");
                Object uomConvFctrO = r[x].getAttribute("UomConvFctr");
                Number uomConvFctr = (uomConvFctrO == null ? new Number(1) : (Number) uomConvFctrO);

                Number itmQtyBs = (itmQtyBsO == null ? StaticValue.NUMBER_ZERO : (Number) itmQtyBsO);
                Object curItem = r[x].getAttribute("ItmId");
                Number okQty =
                    r[x].getAttribute("OkQty") == null ? StaticValue.NUMBER_ZERO : (Number) r[x].getAttribute("OkQty");
                Number rewQty =
                    r[x].getAttribute("RwkQty") == null ? StaticValue.NUMBER_ZERO :
                    (Number) r[x].getAttribute("RwkQty");
                Number retnQty =
                    r[x].getAttribute("RejQty") == null ? StaticValue.NUMBER_ZERO :
                    (Number) r[x].getAttribute("RejQty");
                okQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), uomConvFctr.multiply(okQty));
                rewQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), uomConvFctr.multiply(rewQty));
                retnQty = ADFBeanUtils.roundOff(EbizParams.GLBL_QTY_DIGIT(), uomConvFctr.multiply(retnQty));

                System.out.println(" Item Id === " + curItem + " ANd its ok Qty === " + okQty);
                System.out.println(" Item Id === " + curItem + " ANd its rework Qty === " + rewQty);
                System.out.println(" Item Id === " + curItem + " ANd its return Qty === " + retnQty);

                RowQualifier rqLot = new RowQualifier(getSlsRmaItmLot2());
                // RowQualifier rqBin = new RowQualifier(getSlsRmaItmBin2());
                RowQualifier rqSr = new RowQualifier(getSlsRmaItmSr2());

                String query =
                    "CldId = '" + r[x].getAttribute("CldId") + "' and SlocId = '" + r[x].getAttribute("SlocId") +
                    "' and OrgId = '" + r[x].getAttribute("OrgId") + "' and HoOrgId = '" +
                    r[x].getAttribute("HoOrgId") + "' and DocId = '" + r[x].getAttribute("DocId") +
                    "' and ShipmntId = '" + r[x].getAttribute("ShipmntId") + "' and  ItmId = '" + curItem +
                    "' and WhId = '" + r[x].getAttribute("WhId") + "' and SoId = '" + r[x].getAttribute("SoId") +
                    "' and PickId = '" + r[x].getAttribute("PickId") + "'";

                System.out.println(" Query --->> " + query);

                rqLot.setWhereClause(query);

                Row lotRow[] = getSlsRmaItmLot2().getFilteredRows(rqLot);
                System.out.println(" lot Length --->> " + lotRow.length);

                if (lotRow.length > 0) {
                    Number lotOkQty = new Number(0);
                    Number lotRwkQty = new Number(0);
                    Number lotRjkQty = new Number(0);
                    for (int i = 0; i < lotRow.length; i++) {
                        Number tmpOkQty =
                            lotRow[i].getAttribute("RcptQtyBs") == null ? new Number(0) :
                            (Number) lotRow[i].getAttribute("RcptQtyBs");
                        lotOkQty = lotOkQty.add(tmpOkQty);

                        Number tmpRwkQty =
                            lotRow[i].getAttribute("RwkQtyBs") == null ? new Number(0) :
                            (Number) lotRow[i].getAttribute("RwkQtyBs");
                        lotRwkQty = lotRwkQty.add(tmpRwkQty);

                        Number tmpRjkQty =
                            lotRow[i].getAttribute("RejQtyBs") == null ? new Number(0) :
                            (Number) lotRow[i].getAttribute("RejQtyBs");
                        lotRjkQty = lotRjkQty.add(tmpRjkQty);
                    }
                    System.out.println(okQty + " == ok qty");
                    if (lotOkQty.compareTo(okQty) != 0) {
                        System.out.println(lotOkQty + " <<< --- lot ok qty compare with rma ok qty -->>> " + okQty);
                        sucess = false;
                        break;
                    } else if (lotRwkQty.compareTo(rewQty) != 0) {
                        System.out.println(lotRwkQty + " <<< --- lot rework qty rma ok qty -->>> " + rewQty);
                        sucess = false;
                        break;
                    } else if (lotRjkQty.compareTo(retnQty) != 0) {
                        System.out.println(lotRjkQty + " <<< --- lot reject qty rma ok qty -->>> " + retnQty);
                        sucess = false;
                        break;
                    } else {
                        sucess = true;
                    }
                }

                rqSr.setWhereClause(query);
                Row srRow[] = getSlsRmaItmSr2().getFilteredRows(rqSr);
                System.out.println(" Serial Length --->> " + srRow.length);

                if (srRow.length > 0) {
                    Number srOkQty = new Number(0);
                    for (int i = 0; i < srRow.length; i++) {
                        Number tmpOkQty =
                            srRow[i].getAttribute("SrQty") == null ? new Number(0) :
                            (Number) srRow[i].getAttribute("SrQty");
                        srOkQty = srOkQty.add(tmpOkQty);
                    }
                    if (srOkQty.compareTo(itmQtyBs) != 0) {
                        sucess = false;
                        break;
                    }
                }

            }
            return sucess;
        }
        return true;
    }


    /**
     * Method to insert Shipment in rma shipment and item in items for gate entry
     */
    public void insertShipmentForGateEntry() {

        Row rmaRow = getSlsRma1().getCurrentRow();
        Object docDt = rmaRow.getAttribute("DocDt");

        Row geRow = getSlsRmaItmTemp2().getCurrentRow();
        String currItm = geRow.getAttribute("ItmId").toString();

        ViewObjectImpl itmVo = getSlsRmaItem2();
        itmVo.executeQuery();
        Row[] itmPrevRow = getSlsRmaItem2().getFilteredRows("ItmId", currItm);
        for (int x = 0; x < itmPrevRow.length; x++) {
            itmPrevRow[x].remove();
        }
        /*  RowSetIterator ctr = itmVo.createRowSetIterator(null);
        while (ctr.hasNext()) {
            ctr.next().remove();
        }
        ctr.closeRowSetIterator();
    */

        ViewObjectImpl geShipSel = getshpmntItmViewVOForItmQtySelection();
        RowSetIterator itmCtr = geShipSel.createRowSetIterator(null);

        while (itmCtr.hasNext()) {
            Row row = itmCtr.next();
            Object rejQtyO = row.getAttribute("ReturnQtyForShip");
            Object shipmntDocId = row.getAttribute("DocId");
            Object shipMntDtO = row.getAttribute("DocDt");

            Number rejQty = (rejQtyO == null ? StaticValue.NUMBER_ZERO : (Number) rejQtyO);
            System.out.println(rejQty + " ---><<< total qty intered for itm");
            if (rejQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                System.out.println("Inserting shipment and item ============================");
                removeDuplecateShiFrGe(shipmntDocId, shipMntDtO);
                insertShipFrGe(shipmntDocId, shipMntDtO, docDt);

                Row itmRow = itmVo.createRow();
                itmVo.insertRow(itmRow);
                itmRow.setAttribute("ReturnTypId", 406);
                //itmRow.setAttribute("ItmAmtSp", row.getAttribute("ItmAmtSp"));
                //itmRow.setAttribute("ItmAmtBs", row.getAttribute("ItmAmtBs"));
                itmRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                itmRow.setAttribute("ItmPrice", row.getAttribute("ItmPrice"));
                itmRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));
                itmRow.setAttribute("Reason", null);
                itmRow.setAttribute("Remarks", null);

                itmRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));
                itmRow.setAttribute("ShipmntQty", row.getAttribute("ShipmntQty"));
                itmRow.setAttribute("SoId", row.getAttribute("SoId"));
                itmRow.setAttribute("PickId", row.getAttribute("PickId"));
                itmRow.setAttribute("SrNo", null);
                itmRow.setAttribute("TaxRevsFlg", "N");
                itmRow.setAttribute("CurrConvFctr", rmaRow.getAttribute("CurrConvFctr"));
                itmRow.setAttribute("CurrIdBs", rmaRow.getAttribute("CurrIdBs"));
                itmRow.setAttribute("CurrIdSp", rmaRow.getAttribute("CurrIdSp"));
                itmRow.setAttribute("WhId", rmaRow.getAttribute("WhId"));
                itmRow.setAttribute("UomConvFctr", row.getAttribute("UomConvFctr"));
                itmRow.setAttribute("ItmUomBs", row.getAttribute("ItmUomBs"));
                Number uomConvFctr =
                    (row.getAttribute("UomConvFctr") == null ? new Number(1) :
                     (Number) row.getAttribute("UomConvFctr"));
                itmRow.setAttribute("ItmQtyBs", row.getAttribute("BSrejectedQuantTrans"));
                System.out.println("Base Rejected Quantity : " + row.getAttribute("BSrejectedQuantTrans"));

                itmRow.setAttribute("RcptQty", rejQty);
                itmRow.setAttribute("RejQty", StaticValue.NUMBER_ZERO);
                itmRow.setAttribute("OkQty", StaticValue.NUMBER_ZERO);
                itmRow.setAttribute("RwkQty", StaticValue.NUMBER_ZERO);
                System.out.println(itmRow.getAttribute("ItmAmtSp") + " ==== amount for qty selected");
                itmRow.setAttribute("ItmAsblAmtSp", itmRow.getAttribute("ItmAmtSp"));
            }
        }
        itmCtr.closeRowSetIterator();
        itmVo.executeQuery();
        getSlsRmaShipmnt2().executeQuery();
    }


    //Method to insert Shipment for the Gate entry item
    protected void insertShipFrGe(Object shipmntDocId, Object shipMntDtO, Object docDt) {
        System.out.println("Inserting Shipment -->" + shipmntDocId);
        ViewObjectImpl impl = getSlsRmaShipmnt2();
        Row shpmntRow = impl.createRow();
        impl.insertRow(shpmntRow);
        shpmntRow.setAttribute("ShipmntId", shipmntDocId);
        shpmntRow.setAttribute("ShipmntDt", shipMntDtO);
        shpmntRow.setAttribute("DocDt", docDt);
    }

    //Method to remove previous shipment
    protected void removeDuplecateShiFrGe(Object shipmntDocId, Object shipMntDtO) {

        String clause = " ShipmntId = '" + shipmntDocId + "' and ShipmntDt = '" + shipMntDtO + "'";
        RowQualifier rqSr = new RowQualifier(getSlsRmaShipmnt2());
        rqSr.setWhereClause(clause);

        Row shpRow[] = getSlsRmaShipmnt2().getFilteredRows(rqSr);
        if (shpRow.length > 0) {
            shpRow[0].remove();
        }
    }

    /**
     *Method to validate shipment qty matched the Gate entry Item quantity
     * 1 not matched
     * @return
     */
    public Integer validatedShipmentQtyForGe() {
        Row curItmRow = getSlsRmaItmTemp2().getCurrentRow();
        Number geQty = (Number) curItmRow.getAttribute("GeQty");

        ViewObjectImpl geShipSel = getshpmntItmViewVOForItmQtySelection();
        RowSetIterator itmCtr = geShipSel.createRowSetIterator(null);

        Number tmp = new Number(0);
        while (itmCtr.hasNext()) {
            Row r = itmCtr.next();
            Number shpQty =
                r.getAttribute("ReturnQtyForShip") == null ? new Number(0) :
                (Number) r.getAttribute("ReturnQtyForShip");
            tmp = tmp.add(shpQty);
        }
        //System.out.println(tmp + " <<< --- total selected quantity");
        // System.out.println(geQty + " <<< --- total Gate Item quantity");
        if (tmp.compareTo(geQty) == 0) {
            return 0;
        }

        return 1;
    }

    /**
     * Method to validate either all the item has been added or not for the gate entry
     */
    public Integer isAllGeItmAdded() {

        if ("Y".equalsIgnoreCase(getparamGeChk())) {
            Row curRma = getSlsRma1().getCurrentRow();
            Integer rmaType = curRma.getAttribute("RmaTypId") == null ? -1 : (Integer) curRma.getAttribute("RmaTypId");
            String rmaDocId = curRma.getAttribute("DocId") == null ? null : curRma.getAttribute("DocId").toString();
            if (rmaType != 401) {
                getSlsRmaItem3().executeQuery();
                getSlsRmaItmTemp2().setRangeSize(-1);
                Row allRow[] = getSlsRmaItmTemp2().getAllRowsInRange();

                Set<String> geItm = new HashSet<String>();
                for (int i = 0; i < allRow.length; i++) {
                    geItm.add(allRow[i].getAttribute("ItmId").toString());
                }
                getSlsRmaItem3().setRangeSize(-1);
                Row rmaItmRow[] = getSlsRmaItem3().getAllRowsInRange();
                Set<String> rmaItm = new HashSet<String>();
                for (int i = 0; i < rmaItmRow.length; i++) {
                    rmaItm.add(rmaItmRow[i].getAttribute("ItmId").toString());
                }

                System.out.println(rmaItm + " Values in rmaItem set");
                System.out.println(geItm + " Valus in ge Item set");

                if (rmaItm.size() != geItm.size()) {
                    System.out.println("This is the result ===>>> " + rmaItm.containsAll(geItm));
                    return 1;
                }
            }
        }
        return 0;
    }

    /**
     * Method to validate either all the receipt qty has been accepted for each Rma Item
     */

    public Boolean validateRmaReciptItmQty() {
        Boolean sucess = false;
        Row curRma = getSlsRma1().getCurrentRow();
        String rmaDocId = curRma.getAttribute("DocId").toString();
        String clause =
            " CldId = '" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId = '" + EbizParams.GLBL_APP_SERV_LOC() +
            "' and OrgId = '" + EbizParams.GLBL_HO_ORG_ID() + "' and HoOrgId = '" + EbizParams.GLBL_HO_ORG_ID() +
            "' and DocId = '" + rmaDocId + "'";
        RowQualifier rqSr = new RowQualifier(getSlsRmaItem1());
        rqSr.setWhereClause(clause);

        Row rmaItmRow[] = getSlsRmaItem1().getFilteredRows(rqSr);
        for (int i = 0; i < rmaItmRow.length; i++) {

        }

        return sucess;
    }

    /**
     * Adding Serial No. to Lot Table
     */
    public Integer addSrToLot() {
        Row itmRow = getSlsRmaItem2().getCurrentRow();
        Object itmRejQtyO = itmRow.getAttribute("RejQty");
        Object itmRwkQtyO = itmRow.getAttribute("RwkQty");
        Object itmOkQtyO = itmRow.getAttribute("OkQty");
        Number itmRejQty = (itmRejQtyO == null ? StaticValue.NUMBER_ZERO : (Number) itmRejQtyO);
        Number itmRwkQty = (itmRwkQtyO == null ? StaticValue.NUMBER_ZERO : (Number) itmRwkQtyO);
        Number itmOkQty = (itmOkQtyO == null ? StaticValue.NUMBER_ZERO : (Number) itmOkQtyO);

        ViewObjectImpl impl = getLovShipWiseItmSr();
        RowSetIterator ctr = impl.createRowSetIterator(null);
        Number approved = StaticValue.NUMBER_ZERO;
        Number reworkable = StaticValue.NUMBER_ZERO;
        Number rejected = StaticValue.NUMBER_ZERO;
        while (ctr.hasNext()) {
            Row row = ctr.next();
            Object approveO = row.getAttribute("SelectItemSrNo");
            Object rejectedO = row.getAttribute("SelectItemSrNoRejQty");
            Object reworkableO = row.getAttribute("SelectItemSrNoRewkQty");
            System.out.println("Reworkable Qty : " + reworkableO);
            if (approveO != null) {
                if ((Boolean) approveO) {
                    approved = approved.add(new Number(1));
                }
            }
            if (rejectedO != null) {
                if ((Boolean) rejectedO) {
                    rejected = rejected.add(new Number(1));
                }
            }
            if (reworkableO != null) {
                if ((Boolean) reworkableO) {
                    reworkable = reworkable.add(new Number(1));
                }
            }
        }
        ctr.closeRowSetIterator();

        if (itmOkQty.compareTo(approved) != 0) {
            ADFModelUtils.showFormattedFacesMessage("Approved Item Quantity is not equal to no. of Selected Serial no.",
                                                    "Please Select no. of Approved Serial no. equal to Approved Item Quantity !",
                                                    FacesMessage.SEVERITY_ERROR);
        } else if (itmRwkQty.compareTo(reworkable) != 0) {
            ADFModelUtils.showFormattedFacesMessage("Reworkable Item Quantity is not equal to no. of Selected Serial no.",
                                                    "Please Select no. of Reworkable Serial no. equal to Reworkable Item Quantity !",
                                                    FacesMessage.SEVERITY_ERROR);
        } else if (itmRejQty.compareTo(rejected) != 0) {
            ADFModelUtils.showFormattedFacesMessage("Rejected Item Quantity is not equal to no. of Selected Serial no.",
                                                    "Please Select no. of Rejected Serial no. equal to Rejected Item Quantity !",
                                                    FacesMessage.SEVERITY_ERROR);
        } else {
            insertSelectedSrItem();
        }
        return 1;
    }

    /**
     * Method to reset the values of Selected sr for approved, reworked and rejected.
     */

    public void resetSrSelectedValue(String srType) {
        Row r = getLovShipWiseItmSr().getCurrentRow();
        if (r != null) {
            System.out.println(srType + " The value for which value needs to be set");
            switch (srType) {
            case "A":
                r.setAttribute("SelectItemSrNoRewkQty", false);
                r.setAttribute("SelectItemSrNoRejQty", false);
                break;
            case "W":
                r.setAttribute("SelectItemSrNo", false);
                r.setAttribute("SelectItemSrNoRejQty", false);
                break;
            case "R":
                r.setAttribute("SelectItemSrNo", false);
                r.setAttribute("SelectItemSrNoRewkQty", false);
                break;
            }
        }
    }

    /**
     * Container's getter for SlsRmaTrLinesVO1.
     * @return SlsRmaTrLinesVO1
     */
    public ViewObjectImpl getSlsRmaTrLinesVO1() {
        return (ViewObjectImpl) findViewObject("SlsRmaTrLinesVO1");
    }

    /**
     * Container's getter for SlsRmaTrVO1.
     * @return SlsRmaTrVO1
     */
    public ViewObjectImpl getSlsRmaTrVO1() {
        return (ViewObjectImpl) findViewObject("SlsRmaTrVO1");
    }

    /**
     * Method to execute Trlines with parameters
     */
    public void executeTrAndTrLines() {
        Row currentRow = getSlsRmaItem2().getCurrentRow();
        ViewObjectImpl trVo = getSlsRmaTrVO1();
        trVo.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldId"));
        trVo.setNamedWhereClauseParam("DocIdBind", currentRow.getAttribute("DocId"));
        trVo.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("OrgId"));
        trVo.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgId"));
        trVo.setNamedWhereClauseParam("ItmIdBind", currentRow.getAttribute("ItmId"));
        trVo.setNamedWhereClauseParam("PickIdBind", currentRow.getAttribute("PickId"));
        trVo.setNamedWhereClauseParam("ShipmntIdBind", currentRow.getAttribute("ShipmntId"));
        trVo.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocId"));
        trVo.setNamedWhereClauseParam("SoIdBind", currentRow.getAttribute("SoId"));
        trVo.setNamedWhereClauseParam("WhIdBind", currentRow.getAttribute("WhId"));
        trVo.executeQuery();
        ViewObjectImpl trLinesVo = getSlsRmaTrLinesVO1();
        trLinesVo.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldId"));
        trLinesVo.setNamedWhereClauseParam("DocIdBind", currentRow.getAttribute("DocId"));
        trLinesVo.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("OrgId"));
        trLinesVo.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgId"));
        trLinesVo.setNamedWhereClauseParam("ItmIdBind", currentRow.getAttribute("ItmId"));
        trLinesVo.setNamedWhereClauseParam("PickIdBind", currentRow.getAttribute("PickId"));
        trLinesVo.setNamedWhereClauseParam("ShipmntIdBind", currentRow.getAttribute("ShipmntId"));
        trLinesVo.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocId"));
        trLinesVo.setNamedWhereClauseParam("SoIdBind", currentRow.getAttribute("SoId"));
        trLinesVo.setNamedWhereClauseParam("WhIdBind", currentRow.getAttribute("WhId"));
        trLinesVo.executeQuery();

    }

    /**
     *Method to get the am of cost center application
     * @return
     */
    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }


    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDoc1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 21510);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF for the specified row
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVw1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 21510);

        Row currentRow = this.getSlsRmaItem2().getCurrentRow(); //getSlsShipmnt1
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getSlsRma1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                              System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                              System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                 attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                              */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");
                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF for the specified row
     */
    public void declareGlblValuesForCcWithRow(Row currentRow) {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVw1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 21510);

        // Row currentRow = this.getSlsRma1().getCurrentRow(); //getSlsShipmnt1
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getSlsRma1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*  System.out.println("j value is " + attributeDef[j].getColumnName());
                              System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                              System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                 attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));
                              */
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");
                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter in Detail Part
     */
    public void generateCostCenter(String shipDocId) {
        AppCostCenterServiceAMImpl amCC = getAppAM();
        ViewObjectImpl impl = getSlsRma1();
        ViewCriteria vo = impl.getViewCriteria("SlsShipmntItmVOCriteria");
        impl.applyViewCriteria(vo);
        impl.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());

        impl.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        impl.setNamedWhereClauseParam("BindDocId", shipDocId);
        impl.executeQuery();
        System.out.println(getSlsRmaItem2().getRowCount() + "   =============== Total Rows");
        RowSetIterator itr = getSlsRmaItem2().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row currentRow = itr.next();
            declareGlblValuesForCC();
            amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), shipDocId, "L",
                                       21510, EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       new Number(0), (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

        }
        itr.closeRowSetIterator();
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDateFromTempCcToSlsRmaCc() {
        if (chkCcApplicableOrNot()) {
            Object rmaDocId = this.getSlsRma1().getCurrentRow().getAttribute("DocId");
            System.out.println(rmaDocId + " <<< Shipment Id for cost center");
            if (rmaDocId != null) {
                try {
                    callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21510, "sls",
                                       "SLS$SHIPMNT$COST$CENTER", rmaDocId
                    });
                } catch (Exception e) {

                    e.printStackTrace();
                }
            }
        }
    }


    public void deleteCostCenterItem() {
        if (isCostCenterApplicable()) {
            System.out.println("Inside delete method");

            // SlsSoItmVOImpl impl = this.getSlsSoItm1();
            Row currentRow = getSlsRmaItem2().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    System.out.println("------------------ Not null");
                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       currentRow.getAttribute("DocId").toString(), "L", 21510,
                                       EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       new Number(0), (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                }
            }
            System.out.println("After calling delete method");
        }
    }


    /**
     * Method which will update amount present in cost center table for current selected item
     */
    public void updateCostCenterAmt() {
        if (isCostCenterApplicable()) {
            System.out.println("Inside cost ceneter update amount method");

            Row currentRow = getSlsRmaItem2().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ItmAmtSp") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    declareGlblValuesForCC();
                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", 21510,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("ItmAmtSp"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    /**
     * Method to updated cost center for all the items on save
     */
    public void updateCostCenterOnSave() {
        //   System.out.println(" Inside AM Method to save all the item for cost ceneter ::::::::::::::::::");
        if (isCostCenterApplicable()) {
            //    System.out.println("Inside cost ceneter update amount method");
            SlsRmaItemVOImpl impl = this.getSlsRmaItem2();
            Row allRow[] = impl.getAllRowsInRange();
            for (int i = 0; i < allRow.length; i++) {
                if (allRow[i].getAttribute("CcId") != null && allRow[i].getAttribute("ItmAmtSp") != null) {
                    AppCostCenterServiceAMImpl amCC = getAppAM();
                    //      System.out.println("Inside Am after cresting object");
                    if (amCC != null) {

                        declareGlblValuesForCcWithRow(allRow[i]);
                        Boolean amount =
                            amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                allRow[i].getAttribute("DocId").toString(), "L", 21503,
                                                EbizParams.GLBL_APP_USR(), allRow[i].getAttribute("CcId").toString(),
                                                (Number) allRow[i].getAttribute("ItmAmtSp"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                                (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                        if (!amount) {
                            ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                    "Please Update Cost Center Values.",
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    }
                }
            }
        }
    }

    /**
     * Method to check cost center is applicable for this sales order or not.
     */

    public Boolean isCostCenterApplicable() {
        Boolean b = false;
        try {
            // App.fn_is_cost_center_present(p_cld_id,p_sloc_id,p_ho_org_id,p_org_id,p_doc_id)
            Object callF =
                ADFModelUtils.callFunction(this, new StringBuilder("App.fn_is_cost_center_present(?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21510
            }, Types.INTEGER);

            Integer a = (callF == null ? 0 : (Integer) callF);
            b = (a == 1 ? true : false);
            //System.out.println(" ############################# the value of cost center appp  " + b +"   no. of rows "+ a);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return b;
    }

    /** ---------- To create HexDocId Id for Each Item in cost center -------------**/

    public String callFunForCcDocNo() {

        String hexDocIdFromFun = "0";
        Object result = null;
        try {
            result = ADFModelUtils.callFunction(this, new StringBuilder("APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)"), new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), 21510, 84901,
                                                0
            }, Types.VARCHAR);

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at BdgEoBudgetEoImpl :" + e.getMessage());
        }

        hexDocIdFromFun = result == null ? null : result.toString();
        System.out.println("CC ID for the Item ::::: ===========" + hexDocIdFromFun);
        return hexDocIdFromFun;
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDoc1() {
        return (ViewObjectImpl) findViewObject("AppCcDoc1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVw1() {
        return (ViewObjectImpl) findViewObject("AppCcVw1");
    }

    /**
     * Method to check RMA tax reversal applicable or not
     * FN_CHK_RMA_TAX_RVSL_ALWD(
    P_SLOC      NUMBER,
    P_CLD       VARCHAR2,
    P_HO_ORG_ID VARCHAR2,
    P_ORG       VARCHAR2,
    P_SHIP_DT   DATE,
    P_RMA_DT    DATE )
     */
    public Boolean chkRmaTaxRvslApwd() {
        Boolean result = false;
        Row r = getSlsRmaItem2().getCurrentRow();
        if (r != null) {
            Timestamp shipDate = (Timestamp) r.getAttribute("ShipmntDt");
            Timestamp rmaDate = (Timestamp) r.getAttribute("DocDt");
            try {
                Object o = ADFModelUtils.callFunction(this, new StringBuilder("FN_CHK_RMA_TAX_RVSL_ALWD(?,?,?,?,?,?)"), new Object[] {
                                                      EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                      EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                                      shipDate, rmaDate
                }, Types.VARCHAR);
                if (o != null) {
                    if ("Y".equalsIgnoreCase(o.toString())) {
                        result = true;
                    }
                }
                System.out.println(o + " The return function value of taz recver appl");
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return result;
    }

    /**
     * Method to recalculate item base or item qty on vice versa for normal shipment
     */
    public Number reCalculateQtyBs(String qtyType) {
        Number res = new Number(0);
        Row curRow = getshpmntItmViewVOForItmQtySelection().getCurrentRow();

        Number itmQty =
            curRow.getAttribute("rejectedQuantTrans") == null ? StaticValue.NUMBER_ZERO :
            (Number) curRow.getAttribute("rejectedQuantTrans");
        Number tmQtyBs =
            curRow.getAttribute("BSrejectedQuantTrans") == null ? StaticValue.NUMBER_ZERO :
            (Number) curRow.getAttribute("BSrejectedQuantTrans");
        Number uomConFct =
            curRow.getAttribute("UomConvFctr") == null ? StaticValue.NUMBER_ZERO :
            (Number) curRow.getAttribute("UomConvFctr");
        System.out.println("Convertion Factor :  " + uomConFct + " Qty : " + tmQtyBs + " Final Sp Value from Base " +
                           (tmQtyBs.divide(uomConFct)));

        if ("B".equalsIgnoreCase(qtyType)) {
            res = ADFBeanUtils.roundOff(tmQtyBs.divide(uomConFct));
            curRow.setAttribute("rejectedQuantTrans", res);
            System.out.println(res + " for reqjected qty from Base");
        } else {
            res = ADFBeanUtils.roundOff(itmQty.multiply(uomConFct));
            curRow.setAttribute("BSrejectedQuantTrans", res);
            System.out.println(res + " for Bases qty from rejected qty");
        }
        return res;
    }

    /**
     * Method to recalculate item base or item qty on vice versa for gate Entry
     */
    public Number reCalculateQtyBsForGe(String qtyType) {
        Number res = new Number(0);
        Row curRow = getshpmntItmViewVOForItmQtySelection().getCurrentRow();

        Number itmQty =
            curRow.getAttribute("ReturnQtyForShip") == null ? StaticValue.NUMBER_ZERO :
            (Number) curRow.getAttribute("ReturnQtyForShip");
        Number tmQtyBs =
            curRow.getAttribute("BSrejectedQuantTrans") == null ? StaticValue.NUMBER_ZERO :
            (Number) curRow.getAttribute("BSrejectedQuantTrans");
        Number uomConFct =
            curRow.getAttribute("UomConvFctr") == null ? StaticValue.NUMBER_ZERO :
            (Number) curRow.getAttribute("UomConvFctr");

        if ("B".equalsIgnoreCase(qtyType)) {
            res = ADFBeanUtils.roundOff(tmQtyBs.divide(uomConFct));
            curRow.setAttribute("ReturnQtyForShip", res);
            System.out.println(res + " for reqjected qty from Base");
        } else {
            res = ADFBeanUtils.roundOff(itmQty.multiply(uomConFct));
            curRow.setAttribute("BSrejectedQuantTrans", res);
            System.out.println(res + " for Bases qty from rejected qty");
        }
        return res;
    }

    /**
     * Method to Base qty allowed to enter or not
     */
    public Boolean chkBaseQtyApplicable() {
        Boolean result = false;
        String val = EbizParamsSLSUtils.checkSLSProfileValues(this, "ENBL_ENTRY_ON_BS_QTY_IN_RMA");
        if ("Y".equalsIgnoreCase(val)) {
            result = true;
        }
        return result;
    }
}
