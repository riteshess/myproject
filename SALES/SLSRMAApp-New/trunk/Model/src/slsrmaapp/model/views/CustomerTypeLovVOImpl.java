package slsrmaapp.model.views;

import java.sql.ResultSet;

import java.util.List;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 22 15:26:07 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CustomerTypeLovVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public CustomerTypeLovVOImpl() {
    }

    /**
     * Returns the variable value for BindCustNm.
     * @return variable value for BindCustNm
     */
    public String getBindCustNm() {
        return (String) ensureVariableManager().getVariableValue("BindCustNm");
    }

    /**
     * Sets <code>value</code> for variable BindCustNm.
     * @param value value to bind as BindCustNm
     */
    public void setBindCustNm(String value) {
        ensureVariableManager().setVariableValue("BindCustNm", value);
    }

    /**
     * Returns the bind variable value for CldIdBind.
     * @return bind variable value for CldIdBind
     */
    public String getCldIdBind() {
        return (String) getNamedWhereClauseParam("CldIdBind");
    }

    /**
     * Sets <code>value</code> for bind variable CldIdBind.
     * @param value value to bind as CldIdBind
     */
    public void setCldIdBind(String value) {
        setNamedWhereClauseParam("CldIdBind", value);
    }

    /**
     * Returns the bind variable value for OrgIdBind.
     * @return bind variable value for OrgIdBind
     */
    public String getOrgIdBind() {
        return (String) getNamedWhereClauseParam("OrgIdBind");
    }

    /**
     * Sets <code>value</code> for bind variable OrgIdBind.
     * @param value value to bind as OrgIdBind
     */
    public void setOrgIdBind(String value) {
        setNamedWhereClauseParam("OrgIdBind", value);
    }

    /**
     * Returns the bind variable value for SlocIdBind.
     * @return bind variable value for SlocIdBind
     */
    public String getSlocIdBind() {
        return (String) getNamedWhereClauseParam("SlocIdBind");
    }

    /**
     * Sets <code>value</code> for bind variable SlocIdBind.
     * @param value value to bind as SlocIdBind
     */
    public void setSlocIdBind(String value) {
        setNamedWhereClauseParam("SlocIdBind", value);
    }

    /**
     * Returns the bind variable value for HoOrgIdBind.
     * @return bind variable value for HoOrgIdBind
     */
    public String getHoOrgIdBind() {
        return (String) getNamedWhereClauseParam("HoOrgIdBind");
    }

    /**
     * Sets <code>value</code> for bind variable HoOrgIdBind.
     * @param value value to bind as HoOrgIdBind
     */
    public void setHoOrgIdBind(String value) {
        setNamedWhereClauseParam("HoOrgIdBind", value);
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    @Override
    public void applyViewCriteria(ViewCriteria viewCriteria, boolean b) {
        super.applyViewCriteria(supressStartsWithClauseForLov(viewCriteria), b);
    }

    public ViewCriteria supressStartsWithClauseForLov(ViewCriteria vc) {
        if (vc != null && vc.getName().contains("__lov__filterlist__vcr__")) {
            ViewCriteriaRow currentRow = (ViewCriteriaRow) vc.getCurrentRow();
            if (currentRow != null) {
                List criteriaItems = currentRow.getCriteriaItems();
                for (int i = 0; i < criteriaItems.size(); i++) {
                    ViewCriteriaItem object = (ViewCriteriaItem) criteriaItems.get(i);
                    if (object != null) {
                        System.out.println("Operator is : " + object.getOperator());
                        if ("STARTSWITH".equals(object.getOperator())) {
                            object.setOperator("CONTAINS");
                        }
                    }
                }
            }
        }
        return vc;
    }
}

