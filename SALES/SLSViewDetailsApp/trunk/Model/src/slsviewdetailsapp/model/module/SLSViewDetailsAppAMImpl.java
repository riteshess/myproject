package slsviewdetailsapp.model.module;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;

import slsviewdetailsapp.model.module.common.SLSViewDetailsAppAM;
import slsviewdetailsapp.model.view.LotVOImpl;
import slsviewdetailsapp.model.view.LotVORowImpl;
import slsviewdetailsapp.model.view.TempVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 08 17:05:18 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SLSViewDetailsAppAMImpl extends ApplicationModuleImpl implements SLSViewDetailsAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SLSViewDetailsAppAMImpl() {
    }

    /**
     * Container's getter for Lot1.
     * @return Lot1
     */
    public LotVOImpl getLot1() {
        return (LotVOImpl) findViewObject("Lot1");
    }

    /**
     * Container's getter for Bin1.
     * @return Bin1
     */
    public ViewObjectImpl getBin1() {
        return (ViewObjectImpl)findViewObject("Bin1");
    }

    /**
     * Container's getter for Sr1.
     * @return Sr1
     */
    public ViewObjectImpl getSr1() {
        return (ViewObjectImpl)findViewObject("Sr1");
    }

    /**
     * Container's getter for LotToBinVL1.
     * @return LotToBinVL1
     */
    public ViewLinkImpl getLotToBinVL1() {
        return (ViewLinkImpl)findViewLink("LotToBinVL1");
    }

    /**
     * Container's getter for BinToSrVL1.
     * @return BinToSrVL1
     */
    public ViewLinkImpl getBinToSrVL1() {
        return (ViewLinkImpl)findViewLink("BinToSrVL1");
    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     *  Method to set initial bind variables
     */
    public void setInitilBindVariables() {
        try {
            LotVOImpl impl = (LotVOImpl) this.getLot1();
            impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            impl.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            //impl.setNamedWhereClauseParam("WareHouseId", ADFModelUtils.resolvEl("#{pageFlowScope.WH_ID}"));
            impl.setNamedWhereClauseParam("ItmIdBind", ADFModelUtils.resolvEl("#{pageFlowScope.ITM_ID}"));
            impl.executeQuery();
            /* TempVOImpl oImpl = this.getTemp1();
            Row[] row = oImpl.getAllRowsInRange();
            if (row.length > 0) {
                row[0].setAttribute("whId", ADFModelUtils.resolvEl("#{pageFlowScope.WH_ID}"));
            } */
        } catch (Exception e) {
            e.printStackTrace();
            /* FacesMessage message =
                new FacesMessage("There have been an error in setting Bind Variables!"); */
            FacesMessage message = new FacesMessage(resolvElDCMsg("#{bundle['MSG.1084']}").toString());

            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }

    }

    /**
     * Method  to set WareHouse in lot
     * @param WhId
     */
    public void setWhareHouseInLot(StringBuffer WhId) {
        LotVOImpl impl = (LotVOImpl)this.getLot1();
        System.out.println("WhNm In AmImpl" + WhId);
        impl.setWareHouseId(WhId.toString());
        impl.executeQuery();
    }

    /**
     * Container's getter for Temp1.
     * @return Temp1
     */
    public TempVOImpl getTemp1() {
        return (TempVOImpl)findViewObject("Temp1");
    }

    /**
     * Container's getter for LOVWareHouseNM1.
     * @return LOVWareHouseNM1
     */
    public ViewObjectImpl getLOVWareHouseNM1() {
        return (ViewObjectImpl)findViewObject("LOVWareHouseNM1");
    }

    public void filterVo() {
        Row rw = this.getTemp1().getCurrentRow();
        Object whId = rw.getAttribute("whId");
        if (whId != null) {
            LotVOImpl impl = (LotVOImpl)this.getLot1();
            impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            impl.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            impl.setNamedWhereClauseParam("WareHouseId", whId);
            impl.setNamedWhereClauseParam("ItmIdBind", ADFModelUtils.resolvEl("#{pageFlowScope.ITM_ID}"));
            impl.executeQuery();
        }
    }
    /**
     * Method to get Warehouse Description on the basis of Warehouse id
     * @param whId
     * @return
     */
    public String getWhDesc(Object whId){
        Object o = null;
        ViewObjectImpl houseNM1 = getLOVWareHouseNM1();
        houseNM1.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        houseNM1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        houseNM1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        houseNM1.setNamedWhereClauseParam("WhIdBind", whId);
        Row[] allRowsInRange = houseNM1.getAllRowsInRange();
        if(allRowsInRange.length > 0){
            o = allRowsInRange[0].getAttribute("WhNm");
        }
        return (o == null ? "" : o.toString());
    }
}
