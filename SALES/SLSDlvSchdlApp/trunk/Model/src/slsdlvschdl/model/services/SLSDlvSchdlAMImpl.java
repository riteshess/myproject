package slsdlvschdl.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.EbizParamsAPPUtils;
import adf.utils.ebiz.EbizParamsSLSUtils;
import adf.utils.model.ADFModelUtils;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.faces.validator.ValidatorException;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.JboPrecisionScaleValidator;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsdlvschdl.model.services.common.SLSDlvSchdlAM;
import slsdlvschdl.model.views.SearchSoVwVOImpl;
import slsdlvschdl.model.views.SearchVORowImpl;
import slsdlvschdl.model.views.SlsSoItemVOImpl;
import slsdlvschdl.model.views.SlsSoItmTrfVORowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 11 14:31:24 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SLSDlvSchdlAMImpl extends ApplicationModuleImpl implements SLSDlvSchdlAM {

    private static ADFLogger _log = ADFLogger.createADFLogger(SLSDlvSchdlAMImpl.class);




    /**
     * This is the default constructor (do not remove).
     */
    public SLSDlvSchdlAMImpl() {
    }

    public String resolvEl(String data) {
        return ADFModelUtils.resolvEl(data).toString();
    }

    /**
     * Container's getter for SearchSoVw.
     * @return SearchSoVw
     */
    public SearchSoVwVOImpl getSearchSoVw() {
        return (SearchSoVwVOImpl) findViewObject("SearchSoVw");
    }

    /**
     * Container's getter for Search.
     * @return Search
     */
    public ViewObjectImpl getSearch() {
        return (ViewObjectImpl) findViewObject("Search");
    }

    /** Method For Search Button On Page */
    public void searchDeliveryScheduleView() {
        SearchSoVwVOImpl mainVw = (SearchSoVwVOImpl) this.getSearchSoVw();
        SearchVORowImpl fieldVw = (SearchVORowImpl) this.getSearch().getCurrentRow();
        ViewCriteria criteria = mainVw.getViewCriteria("SearchSoVwVOCriteria");
        mainVw.applyViewCriteria(criteria);
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        mainVw.setNamedWhereClauseParam("SlocIdBind", SlocId);
        mainVw.setNamedWhereClauseParam("CldIdBind", CldId);
        mainVw.setNamedWhereClauseParam("OrgIdBind", OrgId);
        mainVw.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        mainVw.setNamedWhereClauseParam("EoIdBind", fieldVw.getEoId());
        mainVw.setNamedWhereClauseParam("DocIdBind", fieldVw.getDocId());
        mainVw.setNamedWhereClauseParam("OrderStatusBind", fieldVw.getOrdStatus());
        mainVw.setNamedWhereClauseParam("OrderTypeBind", fieldVw.getOrdTyp());
        mainVw.setNamedWhereClauseParam("UserIdCreateBind", fieldVw.getUsrId());
        try {
            mainVw.setDateFromBind(fieldVw.getFromDt());
            oracle.jbo.domain.Timestamp dt = fieldVw.getToDt();
            if (fieldVw.getToDt() != null) {
                dt = fieldVw.getToDt();
                java.sql.Date date;
                try {
                    date = dt.dateValue();
                    //   date.setDate(date.getDate() + 1);
                    date.setTime(date.getTime() + (24 * 60 * 60 * 1000));
                    // System.out.println("Date is :" + date);
                    dt = new oracle.jbo.domain.Timestamp(date);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }


            mainVw.setDateToBind(dt);
        } catch (Exception e) {
        }
        mainVw.setNamedWhereClauseParam("AmountFrom", fieldVw.getAmtFrom());
        mainVw.setNamedWhereClauseParam("AmountTo", fieldVw.getAmtTo());
        try {
            mainVw.setNamedWhereClauseParam("DlvFrmDtBind",
                                            (fieldVw.getDlvFrmDt() == null ? null : fieldVw.getDlvFrmDt().dateValue()));
            mainVw.setNamedWhereClauseParam("DlvToDtBind",
                                            (fieldVw.getDlvToDt() == null ? null : fieldVw.getDlvToDt().dateValue()));
        } catch (SQLException e) {
        }
        mainVw.executeQuery();

    }

    /** Method For Reset Button On Page */
    public void resetDeliveryScheduleView() {

        // SearchSoVwVOImpl mainVw = (SearchSoVwVOImpl)this.getSearchSoVw();
        SearchVORowImpl fieldVw = (SearchVORowImpl) this.getSearch().getCurrentRow();
        SearchSoVwVOImpl impl = getSearchSoVw();
        ViewCriteria criteria = impl.getViewCriteria("SearchSoVwVOCriteria");
        impl.applyViewCriteria(criteria);
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        impl.setNamedWhereClauseParam("CldIdBind", -1);
        impl.setNamedWhereClauseParam("SlocIdBind", SlocId);
        impl.setNamedWhereClauseParam("OrgIdBind", OrgId);
        impl.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        impl.setNamedWhereClauseParam("EoIdBind", null);
        impl.setNamedWhereClauseParam("DocIdBind", null);
        impl.setNamedWhereClauseParam("OrderStatusBind", null);
        impl.setNamedWhereClauseParam("OrderTypeBind", null);
        impl.setNamedWhereClauseParam("UserIdCreateBind", null);
        impl.setNamedWhereClauseParam("DateFromBind", null);
        impl.setNamedWhereClauseParam("DateToBind", null);
        impl.setNamedWhereClauseParam("AmountFrom", null);
        impl.setNamedWhereClauseParam("AmountTo", null);
        impl.executeQuery();
        
        fieldVw.setEoNm(null);
        fieldVw.setDocIdDisp(null);
        fieldVw.setOrdStatus(null);
        fieldVw.setOrdTyp(null);
        fieldVw.setUsrNm(null);
        fieldVw.setFromDt(null);
        fieldVw.setToDt(null);
        getSearch().executeQuery();

    }

    /**
     * Container's getter for SlsDlvSchdlBalance_Vw.
     * @return SlsDlvSchdlBalance_Vw
     */
    public ViewObjectImpl getSlsDlvSchdlBalance_Vw() {
        return (ViewObjectImpl) findViewObject("SlsDlvSchdlBalance_Vw");
    }

    /**
     * Container's getter for SearchToDeliverySchd_VwlVL1.
     * @return SearchToDeliverySchd_VwlVL1
     */
    public ViewLinkImpl getSearchToDeliverySchd_VwlVL1() {
        return (ViewLinkImpl) findViewLink("SearchToDeliverySchd_VwlVL1");
    }

    /**
     * Container's getter for SlsSoDlvSchdl.
     * @return SlsSoDlvSchdl
     */
    public ViewObjectImpl getSlsSoDlvSchdl() {
        return (ViewObjectImpl) findViewObject("SlsSoDlvSchdl");
    }

    /**
     * Container's getter for SearchSoToSlsSoDlvSchdlVL1.
     * @return SearchSoToSlsSoDlvSchdlVL1
     */
    public ViewLinkImpl getSearchSoToSlsSoDlvSchdlVL1() {
        return (ViewLinkImpl) findViewLink("SearchSoToSlsSoDlvSchdlVL1");
    }

    /**
     * Container's getter for SlsRateContDlvSchdl_Vw1.
     * @return SlsRateContDlvSchdl_Vw1
     */
    public ViewObjectImpl getSlsRateContDlvSchdl_Vw1() {
        return (ViewObjectImpl) findViewObject("SlsRateContDlvSchdl_Vw1");
    }

    /**
     * Container's getter for SeacrhTORateContractVL1.
     * @return SeacrhTORateContractVL1
     */
    public ViewLinkImpl getSeacrhTORateContractVL1() {
        return (ViewLinkImpl) findViewLink("SeacrhTORateContractVL1");
    }

    public void serialNumGen(String voName) {
        /**New Code to get Serial No.- 6-03-2013-@Ashish Kumar*/
        ViewObject soItm = this.findViewObject(voName);
        Integer Srno = 0;
        Integer max = 0;
        soItm.setRangeSize(-1);
        Row row[] = soItm.getAllRowsInRange();
        for (Row r : row) {
            try {
                Srno = Integer.parseInt(r.getAttribute("SrNo").toString());
            } catch (NullPointerException e) {
                Srno = 0;
            }
            if (Srno > max) {
                max = Srno;
            }
        }

        max = max + 1;
        _log.warning("Max Value is-->" + max);
        soItm.getCurrentRow().setAttribute("SrNo", max);
    }


    /**Method to generate Schedule Number (as per Sales Order,Item and Delivery Date)
     * @param dlvDt
     * @return
     */
    public Integer generateScheduleNo(Timestamp dlvDt) {
        Integer schdlNo = 1;
        ViewObject dlvSchdl = this.getSlsSoDlvSchdl();
        Row fltrRow[] = dlvSchdl.getFilteredRows("DlvDt", dlvDt);
        _log.info("Row for this date-" + fltrRow.length);
        if (fltrRow.length > 0) {
            if (fltrRow[0].getAttribute("DlvSchdlNo") != null) {
                schdlNo = Integer.parseInt(fltrRow[0].getAttribute("DlvSchdlNo").toString());
            }
        } else {
            Integer Srno = 0;
            Integer max = 0;
            dlvSchdl.setRangeSize(-1);
            Row row[] = dlvSchdl.getAllRowsInRange();
            for (Row r : row) {
                try {
                    Srno = Integer.parseInt(r.getAttribute("DlvSchdlNo").toString());
                    _log.info("Row Scdl No is-" + Srno);
                } catch (NullPointerException e) {
                    Srno = 0;
                }
                if (Srno > max) {
                    max = Srno;
                }
            }
            max = max + 1;
            _log.warning("Max Schdl No is-->" + max);
            schdlNo = max;
        }
        _log.info("Delivery Schedule Number is" + schdlNo);
        return schdlNo;
    }


    /**Method to save deivery details as per order type(ALL/RATE-Contract)*/
    public String saveDeliverySchedule() {
        Boolean tempvar = false;
        ViewObject slsSo = getSearchSoVw();
        Row poCurr = slsSo.getCurrentRow();
        ViewObject dlvVo = null;
        String availVarName = "";
        if (poCurr.getAttribute("OrderType").equals(311)) {
            dlvVo = this.getSlsRateContDlvSchdl_Vw1();
            availVarName = "AvailableAmtTrans";
        } else {
            dlvVo = this.getSlsDlvSchdlBalance_Vw();
            availVarName = "AvailableStock";
        }
        ViewObjectImpl slsdlvVo = this.getSlsSoDlvSchdl(); //to
        String returnVal = null;
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        RowSetIterator rsi = dlvVo.createRowSetIterator(null);
        Timestamp ordDate = (Timestamp) poCurr.getAttribute("DocDt");
        ordDate = StaticValue.getTruncatedDt(ordDate);
        if (poCurr.getAttribute("DeliveryDateTrans") != null) {
            while (rsi.hasNext()) {
                Row cur = rsi.next();
                Object o = cur.getAttribute("SelectItmChekBoxTrans");
                if (o != null) {
                    if ("Y".equalsIgnoreCase(o.toString())) {
                        if (cur.getAttribute("SchdlQuantTrans") != null) {
                            if (poCurr.getAttribute("WareHouseTrans") != null) {
                                Timestamp dt = (Timestamp) poCurr.getAttribute("DeliveryDateTrans");
                                String itmid = null;
                                if (poCurr.getAttribute("OrderType").equals(311)) {
                                    itmid = cur.getAttribute("ItmIdRc").toString();
                                } else {
                                    itmid = cur.getAttribute("ItmId").toString();
                                }
                                String whId = poCurr.getAttribute("WareHouseTrans").toString();
                                RowQualifier rq = new RowQualifier((ViewObjectImpl) slsdlvVo);
                                System.out.println("");
                                rq.setWhereClause("ItmId='" + itmid + "' And WhId='" +
                                                  poCurr.getAttribute("WareHouseTrans").toString() + "' And DlvDt='" +
                                                  poCurr.getAttribute("DeliveryDateTrans") + "'");
                                Row[] filteredRows = slsdlvVo.getFilteredRows(rq);
                                RowSetIterator currentrsi = this.getSlsSoDlvSchdl().createRowSetIterator(null);
                                Row r = null;
                                Timestamp dlvdtvalue = null;
                                if (currentrsi != null) {
                                    while (currentrsi.hasNext()) {
                                        r = currentrsi.next();
                                        dlvdtvalue = (Timestamp) r.getAttribute("DlvDt");
                                        try {
                                            if (r.getAttribute("ItmId").toString().equals(itmid) &&
                                                r.getAttribute("WhId").toString().equals(poCurr.getAttribute("WareHouseTrans")) &&
                                                dlvdtvalue.dateValue().toString().equals(dt.dateValue().toString())) {
                                                tempvar = true;
                                            }
                                        } catch (SQLException e) {
                                        }
                                    }
                                    currentrsi.closeRowSetIterator();
                                }
                                if (filteredRows.length > 0 || tempvar) {
                                    returnVal = "D";
                                    break;
                                } else {
                                    try {
                                        System.out.println("So Date : " + ordDate);
                                        System.out.println("Dlv Date : " + dt);
                                        if (dt.compareTo(ordDate) == -1) {
                                            _log.info("Deliver Date is Less-");
                                            //  FacesMessage msg = new FacesMessage("Delivery Date can not be less than Order Date");
                                            FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.849']}"));
                                            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                                            FacesContext.getCurrentInstance().addMessage(null, msg);
                                        } else {
                                            rq.setWhereClause(null);
                                            Integer schdlno = generateScheduleNo(dt);
                                            Row dlvRow = slsdlvVo.createRow();
                                            slsdlvVo.insertRow(dlvRow);
                                            serialNumGen("SlsSoDlvSchdl");
                                            System.out.println("Available quantity :" + availVarName + ": Value :" +
                                                               cur.getAttribute(availVarName));
                                            dlvRow.setAttribute("AvlQty", cur.getAttribute(availVarName));
                                            dlvRow.setAttribute("DocId", cur.getAttribute("DocId"));
                                            dlvRow.setAttribute("SlocId", cur.getAttribute("SlocId"));
                                            dlvRow.setAttribute("OrgId", cur.getAttribute("OrgId"));
                                            dlvRow.setAttribute("DlvDt", dt.dateValue());
                                            System.out.println("Date value in schdl is:  " + dt.dateValue());
                                            dlvRow.setAttribute("DlvQty", cur.getAttribute("SchdlQuantTrans"));
                                            dlvRow.setAttribute("DlvMode",
                                                                (poCurr.getAttribute("ModeTrans") == null ? 163 :
                                                                 poCurr.getAttribute("ModeTrans")));
                                            dlvRow.setAttribute("WhId", poCurr.getAttribute("WareHouseTrans"));
                                            dlvRow.setAttribute("UsrIdCreate", p_user_id);
                                            dlvRow.setAttribute("DlvSchdlNo", schdlno);
                                            dlvRow.setAttribute("DlvAddsId", poCurr.getAttribute("WhIdAddrIdTrans"));
                                            //dlvRow.setAttribute("ItmUom", itmuom);
                                            dlvRow.setAttribute("ItmUomBs", cur.getAttribute("ItmUomBs"));
                                            Object rem = poCurr.getAttribute("DelRemarksTrans");
                                            StringBuffer r1 = new StringBuffer("");
                                            if (rem != null) {
                                                r1 = new StringBuffer(rem.toString());
                                            }
                                            dlvRow.setAttribute("Remarks", r1.toString());

                                            // To calculate and add pending Quantity
                                            Number pendingQty = new Number(0);
                                            if (cur.getAttribute(availVarName) != null &&
                                                cur.getAttribute("SchdlQuantTrans") != null) {
                                                Number avail = (Number) cur.getAttribute(availVarName);
                                                Number schDlQty = (Number) cur.getAttribute("SchdlQuantTrans");
                                                if (avail.compareTo(schDlQty) == 1) {
                                                    RowQualifier rw = new RowQualifier((ViewObjectImpl) slsdlvVo);
                                                    rw.setWhereClause("ItmId='" + itmid + "' And WhId='" +
                                                                      poCurr.getAttribute("WareHouseTrans") + "'");
                                                    Row[] filteredRowsdup = slsdlvVo.getFilteredRows(rw);
                                                    RowSetIterator currentrsidup =
                                                        this.getSlsSoDlvSchdl().createRowSetIterator(null);
                                                    Row rdup = null;
                                                    Number count = StaticValue.NUMBER_ZERO;
                                                    if (currentrsidup != null) {
                                                        while (currentrsidup.hasNext()) {
                                                            rdup = currentrsidup.next();
                                                            if (rdup.getAttribute("ItmId") != null) {
                                                                if (rdup.getAttribute("ItmId").toString().equals(itmid) &&
                                                                    rdup.getAttribute("WhId").toString().equals(poCurr.getAttribute("WareHouseTrans"))) {
                                                                    count =count.add((Number)rdup.getAttribute("DlvQtyBs"));
                                                                    Number Remaining =
                                                                        count.add((Number)schDlQty);
                                                                    pendingQty = (Number) avail.minus(Remaining);
                                                                    System.out.println("Pending Qty sum in iteratot" +
                                                                                       pendingQty);
                                                                } else {
                                                                    pendingQty = (Number) avail.minus(schDlQty);
                                                                }
                                                            } else {
                                                                pendingQty = (Number) avail.minus(schDlQty);
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                            Number avail = (Number) cur.getAttribute(availVarName);
                                            Number schQty = (Number) cur.getAttribute("SchdlQuantTrans");
                                            if (avail.compareTo(schQty) < 0) {
                                                dlvRow.setAttribute("BalQty", schQty.subtract(avail));
                                            } else {
                                                dlvRow.setAttribute("BalQty", StaticValue.NUMBER_ZERO);
                                            }
                                            Number uomConvFctr = new Number(1);
                                            if (cur.getAttribute("UomConvFctr") != null) {
                                                uomConvFctr = (Number) cur.getAttribute("UomConvFctr");
                                            }
                                            dlvRow.setAttribute("UomConvFctr", uomConvFctr);
                                            Number bsQty = new Number(0);
                                            bsQty =
                                                (Number) uomConvFctr.mul((Number) cur.getAttribute("SchdlQuantTrans"));
                                            dlvRow.setAttribute("DlvQtyBs", bsQty);
                                            _log.info("Order Type -->" + poCurr.getAttribute("OrderType"));
                                            if (poCurr.getAttribute("OrderType").equals(311)) {
                                                dlvRow.setAttribute("ItmId", cur.getAttribute("ItmIdRc"));
                                                dlvRow.setAttribute("ItmUom", cur.getAttribute("ItmUomRc"));
                                            } else {
                                                dlvRow.setAttribute("TotQty", cur.getAttribute("OrdQty"));
                                                dlvRow.setAttribute("ItmId", cur.getAttribute("ItmId"));
                                                dlvRow.setAttribute("ItmUom", cur.getAttribute("ItmUom"));
                                            }
                                            dlvRow.setAttribute("ItmUomBs", cur.getAttribute("ItmUomBs"));
                                        }
                                    } catch (SQLException e) {
                                        _log.info("In exception-" + e);
                                    }
                                }
                            } else {
                                returnVal = "W";
                            }
                        } else {
                            returnVal = "S";
                        }
                    }
                }
            }
            /**Set transient to blank*/
            poCurr.setAttribute("ModeTrans", null);
            poCurr.setAttribute("WareHouseTrans", null);
            poCurr.setAttribute("DeliveryDateTrans", null);
            rsi.closeRowSetIterator();

            slsdlvVo.executeQuery();
            // slsSo.executeQuery();
            this.getDBTransaction().validate();
            this.getDBTransaction().postChanges();
            dlvVo.executeQuery();


        } else {
            // FacesMessage msg = new FacesMessage("Please Specify Delivery Date");
            FacesMessage msg = new FacesMessage(resolvEl("#{bundle['MSG.847']}").toString());
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        return returnVal;
    }

    /**
     * Method for Execute Balance View
     */

    public void executeBalanceVw() {
        this.getDBTransaction().validate();
        this.getDBTransaction().postChanges();
        ViewObjectImpl balance_Vw = getSlsDlvSchdlBalance_Vw();
        ViewObjectImpl contDlvSchdl_Vw1 = getSlsRateContDlvSchdl_Vw1();
        ViewObject slsSo = getSearchSoVw();
        Row poCurr = slsSo.getCurrentRow();
        if (poCurr.getAttribute("OrderType").equals(311))
            contDlvSchdl_Vw1.executeQuery();
        else
            balance_Vw.executeQuery();
    }

    public void selectAllCheckBox(boolean val) {
        ViewObjectImpl balance_Vw = this.getSlsDlvSchdlBalance_Vw();
        RowSetIterator rit = balance_Vw.createRowSetIterator(null);
        while (rit.hasNext()) {
            Row row = rit.next();
            _log.info("Value of checkbox is-->" + val);
            if (val) {
                row.setAttribute("SelectItmChekBoxTrans", "Y");
                row.setAttribute("SchdlQuantTrans", row.getAttribute("BalanceQty"));
            } else {
                row.setAttribute("SelectItmChekBoxTrans", "N");
                row.setAttribute("SchdlQuantTrans", null);
            }
        }
    }

    /***Get User Name for Given UserId**/
    public String getUserName(Integer uid) {
        return EbizParamsAPPUtils.getUsrDescFrmUsrId(this, uid);
    }


    /**Method to get Amendment Number
     * @return
     */
    public Integer getCurrentAmdNo() {
        Integer amdNo = 0;
        ViewObject slsSo = this.getSearchSoVw();
        Row soRow = slsSo.getCurrentRow();
        if (soRow.getAttribute("AmdNo") != null) {
            amdNo = Integer.parseInt(soRow.getAttribute("AmdNo").toString());
        }
        _log.info("Amendment No is-" + amdNo);
        return amdNo;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }


    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getSearchSoVw().getCurrentRow().getAttribute("DocId").toString();
        Object obj = null;
        obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                 SlocId, CldId, OrgId, DocNo, DocId, 0
        });
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }

    /**Set Order Amendment Details
     * @param amdNo
     */
    public void setAmndmntDtl(String amdNo) {
        ViewObject slsSo = this.getSearchSoVw();
        Row soRow = slsSo.getCurrentRow();
        String doc_id = soRow.getAttribute("DocId").toString();
        try {
           BigDecimal retval = null;
           retval = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_AMD_SO(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(),
                                                    soRow.getAttribute("DocId"), EbizParams.GLBL_APP_USR(),
                                                    soRow.getAttribute("UsrIdCreateDt"), amdNo, soRow.getAttribute("AmdDt")
           });
           BigDecimal retval1 = null;
           retval1 =
               (BigDecimal) ADFModelUtils.callFunction(this,
                                                       new StringBuilder("SLS.FN_UPDATE_SO_SCHEDULE_AMD(?,?,?,?,?,?)"), new Object[] {
                                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                       EbizParams.GLBL_APP_USR_ORG(), soRow.getAttribute("DocId"),
                                                       Integer.parseInt(amdNo) + 1, StaticValue.getTruncatedCurrDt()
           }, Types.NUMERIC);
           _log.info("Amend function returns-" + retval1);
           slsSo.setNamedWhereClauseParam("DocIdBind", doc_id);
           slsSo.executeQuery();
       } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        
    }


    public void resetSoView() {
        ViewObject slsSo = this.getSearchSoVw();
        slsSo.setNamedWhereClauseParam("DocIdBind", null);
        slsSo.executeQuery();
    }

    /**
     * Container's getter for LOVUserIdVO1.
     * @return LOVUserIdVO1
     */
    public ViewObjectImpl getLOVUserIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVUserIdVO1");
    }

    /**
     * Container's getter for SlsPickFrSoVO1.
     * @return SlsPickFrSoVO1
     */
    public ViewObjectImpl getSlsPickFrSoVO1() {
        return (ViewObjectImpl) findViewObject("SlsPickFrSoVO1");
    }

    /**
     * Container's getter for WareHouseVO1.
     * @return WareHouseVO1
     */
    public ViewObjectImpl getWareHouseVO1() {
        return (ViewObjectImpl) findViewObject("WareHouseVO1");
    }


    /**
     * Method returns the userId of the user on which the DeliverySchedule is pending
     * @return
     */
    public Integer slsDlvPendingAt() {
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        Integer docType = (Integer) this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        System.out.println(" docType " + docType);
        Object obj = null;
        Integer usrId = 0;
        StringBuffer DocIdTxn = null;

        if (this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString() != null) {
            DocIdTxn = new StringBuffer(this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString());
            System.out.println("DOC_ID TXN : " + DocIdTxn);
            try {
                obj = callStoredFunction(Types.INTEGER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                         slocid, cldid.toString(), orgid.toString(), 21503, DocIdTxn.toString(), docType
                });
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.WF_GET_CUR_USR' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }


            if (obj != null) {
                usrId = (Integer) obj;
            }
        }
        System.out.println("DOC PENDING AT USER ID : " + usrId);
        return usrId;

    }

    /**
     * For Doc_Txn_ID
     */
    public StringBuffer doctxnid() {
        StringBuffer dtxnid = null;
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null)
            dtxnid = new StringBuffer(this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString());
        return dtxnid;
    }

    /**
     * Method returns WFID attached to the document.
     * @return
     */

    public StringBuffer getWfIdAttachedWithTheDoc() {
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        Integer docType = (Integer) this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        System.out.println(" docType " + docType);
        Object obj = "";
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null) {
            try {obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                         slocid, cldid.toString(), orgid.toString(), 21503, docType
                });
                System.out.println("WF_ID WITH THE DOC :" + obj.toString());
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.GET_WF_ID' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
        return new StringBuffer(obj.toString());
    }

    /**
     * Method that returns the level of the current user
     * @param WfId
     * @return
     */
    public Integer getUsrLvl(StringBuffer WfId) {
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer docType = (Integer) this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        Integer lvl = 0;
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null) {
            try {
                lvl = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   slocid, cldid.toString(), orgid.toString(), userId, WfId.toString(),
                                                   new Integer("21503"), docType
                });
                System.out.println("LEVEL :" + lvl);
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.GET_USR_LEVEL' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }

        return lvl;
    }

    /**
     * Method inserts a record in insTxn
     * @param WfId
     * @param level
     * @return
     */
    public Integer insIntoTxn(StringBuffer WfId, Integer level) {
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer docType = (Integer) this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        System.out.println(" docType " + docType);
        Integer result = -3;
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null) {
            try {
                StringBuffer docId =
                    new StringBuffer(this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString());
                System.out.println("In Txn Docid is :" + docId);
                result = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      slocid, cldid.toString(), orgid.toString(), 21503, docType,
                                                      WfId.toString(), docId.toString(), userId, userId, level, level,
                                                      "I", "A", 0, "S"
                });
            } catch (Exception e) {
                FacesMessage message = new FacesMessage("There have been an error in calling function 'APP.INS_TXN' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
        return result;
    }


    /**
     * To get Total Amount For WareHouse
     */

    public Number TotalAmountForWarehouse() {

        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoorgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        /**
         * Code for Fy Id
         */
        Integer fyId = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
        Number amount = new Number(0);
        if (this.getSlsSoDlvSchdl().getCurrentRow() != null &&
            this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId") != null) {
            ViewObjectImpl houseVO1 = getWareHouseVO1();
            houseVO1.setNamedWhereClauseParam("SlocIdBind", slocid);
            houseVO1.setNamedWhereClauseParam("OrgIdBind", orgid);
            houseVO1.setNamedWhereClauseParam("HoOrgIdBind", hoorgid);
            houseVO1.setNamedWhereClauseParam("DocIdBind",
                                              this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId").toString());
            houseVO1.setNamedWhereClauseParam("FyIdBind", fyId);
            houseVO1.setNamedWhereClauseParam("CldIdBind", cldid);
            houseVO1.executeQuery();
            RowSetIterator createRowSetIterator = houseVO1.createRowSetIterator(null);
            if (createRowSetIterator != null) {
                while (createRowSetIterator.hasNext()) {
                    Row next = createRowSetIterator.next();
                    amount = (Number) next.getAttribute("Totamt");
                }
            } else {
                FacesMessage message = new FacesMessage("Cannot perform Action......!!!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }
        }
        return amount;

    }


    /**
     * Container's getter for SlsSoItmTrf1.
     * @return SlsSoItmTrf1
     */
    public ViewObjectImpl getSlsSoItmTrf1() {
        return (ViewObjectImpl) findViewObject("SlsSoItmTrf1");
    }

    /**
     * Container's getter for SlsSoDlySchdlToSlsSoItmTrfVL1.
     * @return SlsSoDlySchdlToSlsSoItmTrfVL1
     */
    public ViewLinkImpl getSlsSoDlySchdlToSlsSoItmTrfVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoDlySchdlToSlsSoItmTrfVL1");
    }

    /**
     * Work Flow Return Value
     */
    public void getWorkFlowValue() {
        Boolean success = true;
        Object returnValue = resolvEl("#{pageFlowScope.RetValue}");
        System.out.println("Return from Workflow." + returnValue);
        String wfRet = null;
        if (returnValue == null) {
            success = false;
        }
        if (success) {
            wfRet = returnValue.toString();
        }

        if (success) {
            Integer fyId = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
            if ("A".equals(wfRet)) {
                try {
                    ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_UPDATE_SO_STATUS(?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_APP_USR_ORG(),
                                               this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId"), 314, fyId
                    }, Types.INTEGER);
                    success = true;
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                    ADFModelUtils.showFormattedFacesMessage("There have been an error while calling function FN_UPDATE_SO_STATUS.",
                                                            e.getMessage(), FacesMessage.SEVERITY_ERROR);
                    success = false;
                }
                if (success) {
                    try {
                        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_INS_SO_TO_TRF(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), fyId,
                                                   this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DlvDt"),
                                                   this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId"),
                                                   EbizParams.GLBL_APP_USR(), new Timestamp(System.currentTimeMillis())
                        }, Types.INTEGER);
                        success = true;
                    } catch (Exception e) {
                        // TODO: Add catch code
                        e.printStackTrace();
                        ADFModelUtils.showFormattedFacesMessage("There have been an error while calling function FN_INS_SO_TO_TRF.",
                                                                e.getMessage(), FacesMessage.SEVERITY_ERROR);
                        success = false;
                    }
                }
            } else if ("F".equals(wfRet)) {
                if (success) {
                    try {
                        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_UPDATE_SO_STATUS(?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                   EbizParams.GLBL_APP_USR_ORG(),
                                                   this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId"), 317,
                                                   fyId
                        }, Types.INTEGER);
                        success = true;
                    } catch (Exception e) {
                        // TODO: Add catch code
                        e.printStackTrace();
                        ADFModelUtils.showFormattedFacesMessage("There have been an error while calling function FN_UPDATE_SO_STATUS.",
                                                                e.getMessage(), FacesMessage.SEVERITY_ERROR);
                        success = false;
                    }
                }
            } else if ("I".equals(wfRet)) {
                if (success) {
                    try {
                        ADFModelUtils.callFunction(this, new StringBuilder("SLS.FN_UPDATE_SO_STATUS(?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                   EbizParams.GLBL_APP_USR_ORG(),
                                                   this.getSlsSoDlvSchdl().getCurrentRow().getAttribute("DocId"), 313,
                                                   fyId
                        }, Types.INTEGER);
                        success = true;
                    } catch (Exception e) {
                        // TODO: Add catch code
                        e.printStackTrace();
                        ADFModelUtils.showFormattedFacesMessage("There have been an error while calling function FN_UPDATE_SO_STATUS.",
                                                                e.getMessage(), FacesMessage.SEVERITY_ERROR);
                        success = false;
                    }
                }
            }
            if (success) {
                try {
                    getDBTransaction().commit();
                    SearchSoVwVOImpl impl = getSearchSoVw();
                    Row currentRow = impl.getCurrentRow();
                    if (currentRow != null) {
                        impl.setNamedWhereClauseParam("DocIdBind", currentRow.getAttribute("DocId"));
                        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                        impl.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
                        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                        impl.executeQuery();
                    }
                } catch (Exception e) {
                    ADFModelUtils.showFormattedFacesMessage("There have been an error while Comitting.", e.getMessage(),
                                                            FacesMessage.SEVERITY_ERROR);
                    e.printStackTrace();
                    getDBTransaction().rollback();
                }
            } else {
                getDBTransaction().rollback();
            }
            this.getSlsSoItem1().executeQuery();
        }
    }

    /**
     * For Fy Id
     */
    public void InsertFyId() {
        this.getSlsSoItmTrf1().getCurrentRow().setAttribute("FyId", EbizParams.getFyIdOnCurrDtAndCurrOrg(this));
    }

    /**
     * Check Atleast one Check Box is checked or not
     */
    public boolean chkCheckBoxValue() {
        System.out.println("In AMIMPL");
        Integer val = (Integer) this.getSearchSoVw().getCurrentRow().getAttribute("OrderType");
        Boolean result = false;

        if (val == 311) {

            RowSetIterator rsi = this.getSlsRateContDlvSchdl_Vw1().createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                if (next.getAttribute("SelectItmChekBoxTrans") != null &&
                    next.getAttribute("SelectItmChekBoxTrans").equals("Y")) {
                    System.out.println("Inside loop");
                    result = true;
                    break;
                }
            }
        } else {
            RowSetIterator rsi = this.getSlsDlvSchdlBalance_Vw().createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                if (next.getAttribute("SelectItmChekBoxTrans") != null &&
                    next.getAttribute("SelectItmChekBoxTrans").equals("Y")) {
                    System.out.println("Inside loop");
                    if (next.getAttribute("SelectItmChekBoxTrans").equals("Y")) {
                        result = true;
                    }
                }
            }
        }
        return result;
    }

    /**
     * For checking all variable were entered
     */
    public Integer chkMandatoryFieldsEntered() {

        if (this.getSlsDlvSchdlBalance_Vw().getCurrentRow().getAttribute("SelectItmChekBoxTrans") != null &&
            this.getSlsDlvSchdlBalance_Vw().getCurrentRow().getAttribute("SelectItmChekBoxTrans").toString().equalsIgnoreCase("Y")) {

            System.out.println("In If Part");
        } else {
            System.out.println("In else part");
        }

        return 1;
    }


    /**
     * Check WareHouse Src Duplicate Record exist or not
     */
    public Boolean chkDuplicateWhIdSrc(String whidFromBean) {
        RowSetIterator rsi = this.getSlsSoItmTrf1().createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next.getAttribute("WhIdDest") != null && next != this.getSlsSoItmTrf1().getCurrentRow()) {
                if (next.getAttribute("WhIdDest").equals(whidFromBean)) {
                    return true;
                }
            }
        }

        return false;
    }

    /**
     * Change Transfer Order Status value
     */
    public void changeTrfStatusValue() {
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        Row currentRow = impl.getCurrentRow();
        currentRow.setAttribute("TrfStat", "Y");


    }

    /**
     * Change Transfer Order Status value to N
     */
    public void removeTrfStatusValue() {
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        Row currentRow = impl.getCurrentRow();
        currentRow.setAttribute("TrfStat", "N");
    }

    /**
     * Check whether atleast one record exist or not in SLSSoItmTrf....
     */
    public Boolean chkRecordExistorNot() {
        RowSetIterator rsi = this.getSlsSoItmTrf1().createRowSetIterator(null);
        while (rsi.hasNext()) {
            return true;
        }
        return false;
    }

    /**
     * Set Available Quantity after Selecting WareHouse Destination Value
     */
    public Number setAvailableQtyOnItmTrf(String whidvalue) {

        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        StringBuffer cldid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgid = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        Number n = new Number(0);
        if (whidvalue != null) {
            try {
                BigDecimal v = null;
                v = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] {
                                                    cldid.toString(), slocid, orgid.toString(),
                                                    impl.getCurrentRow().getAttribute("ItmId"), whidvalue,
                                                    new Timestamp(System.currentTimeMillis())
                });
                n = new Number(v);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        impl.getCurrentRow().setAttribute("AvlQty", n);
        return n;
    }

    /**
     * Check Atleast one Transfer Order value is true or not
     */
    public Boolean chkTrfOrderStatus() {
        RowSetIterator rsi = this.getSlsSoItmTrf1().createRowSetIterator(null);
        ViewObjectImpl impl = this.getSlsSoItmTrf1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            if (row.getAttribute("TrfStat").toString().equals("N")) {
                itr.closeRowSetIterator();
                return false;
            }
        }
        itr.closeRowSetIterator();
        return true;
    }

    /**
     * Set Transfer Order Quantity Value
     */
    public void setTrfQtyValueFromBean(Number val) {
        this.getSlsSoItmTrf1().getCurrentRow().setAttribute("ItmTrfQty", val);
    }


    /**
     * Container's getter for SlsSoItmTrf2.
     * @return SlsSoItmTrf2
     */
    public ViewObjectImpl getSlsSoItmTrf2() {
        return (ViewObjectImpl) findViewObject("SlsSoItmTrf2");
    }

    public void executePageWithParam() {
        SearchSoVwVOImpl impl = getSearchSoVw();
        ViewCriteria criteria = impl.getViewCriteria("SearchSoVwVOCriteria");
        impl.applyViewCriteria(criteria);
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        impl.setNamedWhereClauseParam("CldIdBind", -1);
        impl.setNamedWhereClauseParam("SlocIdBind", SlocId);
        impl.setNamedWhereClauseParam("OrgIdBind", OrgId);
        impl.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        impl.executeQuery();
    }

    /**
     * Container's getter for SlsSo1.
     * @return SlsSo1
     */
    public ViewObjectImpl getSlsSo1() {
        return (ViewObjectImpl) findViewObject("SlsSo1");
    }

    /**
     * Container's getter for SearchSoVwToSlsSoVL1.
     * @return SearchSoVwToSlsSoVL1
     */
    public ViewLinkImpl getSearchSoVwToSlsSoVL1() {
        return (ViewLinkImpl) findViewLink("SearchSoVwToSlsSoVL1");
    }

    /**
     * Container's getter for SlsSoItm1.
     * @return SlsSoItm1
     */
    public ViewObjectImpl getSlsSoItm1() {
        return (ViewObjectImpl) findViewObject("SlsSoItm1");
    }

    /**
     * Container's getter for SlsSoToSlsSoItmVL1.
     * @return SlsSoToSlsSoItmVL1
     */
    public ViewLinkImpl getSlsSoToSlsSoItmVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoToSlsSoItmVL1");
    }

    /**
     * Container's getter for SlsSoItem1.
     * @return SlsSoItem1
     */
    public SlsSoItemVOImpl getSlsSoItem1() {
        return (SlsSoItemVOImpl) findViewObject("SlsSoItem1");
    }

    /**
     * Container's getter for SlsSoToSlsSoItemVL1.
     * @return SlsSoToSlsSoItemVL1
     */
    public ViewLinkImpl getSlsSoToSlsSoItemVL1() {
        return (ViewLinkImpl) findViewLink("SlsSoToSlsSoItemVL1");
    }

    /**Method to get Item Price for Customer
     * @param eoId
     * @return
     */
    public Number getLatestItmPriceSo(String itmDesc) {
        _log.info("Inside AM method Rate");
        ViewObject slsSo = this.getSlsSo1();
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        ViewObjectImpl lovItmId = this.getLOVItmId1();
        lovItmId.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        lovItmId.setNamedWhereClauseParam("CldIdBind", p_cldId);
        lovItmId.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        lovItmId.setNamedWhereClauseParam("HoOrgIdBind", p_hoOrgId);
        lovItmId.executeQuery();
        Number itmPrice = new Number(0);
        Row curRow = slsSo.getCurrentRow();
        String itemId = null;
        RowQualifier rq = new RowQualifier(lovItmId);
        /*  rq.setWhereClause("SlocId=" + p_sloc_id + " and OrgId='" + p_org_id + "' and HoOrgId='" + p_hoOrgId +
                          "' and CldId='" + p_cldId + "' and ItmDesc='" + itmDesc + "'"); */
        rq.setWhereClause("ItmDesc='" + itmDesc + "'");
        _log.info(rq.getExprStr());
        Row rows[] = lovItmId.getFilteredRows(rq);
        _log.info("Total Row after Filtering-->" + rows.length);
        if (rows.length > 0) {
            itemId = rows[0].getAttribute("ItmId").toString();
        }

        Number conv = new Number(1);
        _log.info("Before function call Customer is-->" + curRow.getAttribute("EoId") + "and Item is-->" + itemId);
        if (curRow.getAttribute("EoId") != null && itemId != null) {

            Integer eoId = Integer.parseInt(curRow.getAttribute("EoId").toString());
            Integer currId = Integer.parseInt(curRow.getAttribute("CurrIdSp").toString());
            conv = (Number) curRow.getAttribute("CurrConvFctr");
            Timestamp p_doc_dt = (Timestamp) curRow.getAttribute("DocDt");
            _log.info("Customer is-->" + eoId + "and Item is-->" + itemId);

            if (checkPolicyApplied().toString().equals("Y")) {
                _log.info("Price from Price Policy.");
                BigDecimal price = new BigDecimal(0);
                BigDecimal policyPrice = null;

                policyPrice = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                              p_cldId, p_sloc_id, p_hoOrgId, p_org_id, eoId, itemId,
                                                              "SO"
                });
                if (policyPrice.compareTo(new BigDecimal(0)) == 0) {

                    price =
                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                        "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId, itemId, p_doc_dt,
                                                        p_user_id, new Timestamp(System.currentTimeMillis()), currId,
                                                        conv
                    });
                    try {
                        itmPrice =
                            new Number(new Number(price).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"))));
                    } catch (SQLException e) {
                    }
                } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                    itmPrice = new Number(-2);
                } else {
                    price = policyPrice;
                    try {
                        itmPrice = new Number(new Number(price));
                        itmPrice = itmPrice.divide(conv);
                        itmPrice =
                            (Number) itmPrice.round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")));
                    } catch (SQLException e) {
                    }
                }
            } else {
                _log.info("Price from EO Price.");
                BigDecimal price = null;
                price =
                    (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    p_cldId, p_sloc_id, p_org_id, p_hoOrgId, eoId, itemId, p_doc_dt,
                                                    p_user_id, new Timestamp(System.currentTimeMillis()), currId, conv
                });

                _log.info("Value from Function Rate--" + price);
                try {
                    itmPrice =
                        new Number(new Number(price).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"))));
                } catch (SQLException e) {
                }
            }
        }
        if (itmPrice.compareTo(-1) == 0) {
            itmPrice = new Number(0);
        }
        return itmPrice;
    }

    public StringBuffer checkPolicyApplied() {
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String policyPrice = null;

            policyPrice = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                      p_cldId, p_sloc_id, p_org_id, "USE_PRICE_PLC"
            });


            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return ck;
    }

    /**
     * Container's getter for LOVItmId1.
     * @return LOVItmId1
     */
    public ViewObjectImpl getLOVItmId1() {
        return (ViewObjectImpl) findViewObject("LOVItmId1");
    }

    /**Item Id Validator for Lines*/

    public String itmIdValidator(String itmName) {
        ViewObject v = this.getSlsSoItem1();
        String itmDesc = null;
        int totalCount = v.getRowCount(); //get ALL rows
        int rangeSize = v.getRangeSize(); //all in range
        v.setRangeSize(totalCount);
        Row[] rArray = v.getAllRowsInRange();

        //check for duplicate rows
        Row cRow = v.getCurrentRow();
        int count = 0;
        String currName = "";
        for (Row r : rArray) {
            if (!r.equals(cRow)) {
                try {
                    currName = r.getAttribute("ItmId").toString();
                } catch (NullPointerException npe) {
                    // System.out.println("NPE:" + npe);
                    currName = "";
                }
                if (currName != null) {
                    Row[] xx = this.getLOVItmId1().getFilteredRows("ItmId", currName);
                    if (xx.length > 0) {
                        itmDesc = xx[0].getAttribute("ItmDesc").toString();
                    }
                    if (itmName.equalsIgnoreCase(itmDesc)) {
                        count = count + 1;
                    }
                }
            }
        }
        v.setRangeSize(rangeSize); //set to original range
        _log.info("Total Count -->" + count);
        if (count > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    public void setpolicy() {
        String i = "";
        Object plcId = resolvElO("#{pageFlowScope.PRICE_POLICY_ID}");
        _log.info("Policy id : " + plcId);
        if (plcId != null) {
            i = plcId.toString();
        }
        if (!i.equals("")) {
            ViewObjectImpl impl = this.getSlsSo1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                currentRow.setAttribute("EoPricePlc", i);
                _log.info("Setting policy Id to : " + i);
            }
        }
    }


    /**Method to resolve expression- returns String value*/
    public Object resolvElO(String data) {
        return ADFModelUtils.resolvEl(data);
    }

    /**
     * Check Mandatory fields entered or not
     */
    public Integer chkMandatoryEntered() {
        Integer retVal = 0;
        RowSetIterator itr = this.getSlsSoItem1().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next.getAttribute("ItmId") == null) {
                retVal = 1;
                break;
            }
            if (next.getAttribute("ItmRate") == null || ((Number) next.getAttribute("ItmRate")).doubleValue() <= 0) {
                retVal = 3;
                break;
            }
            if (next.getAttribute("ItmQty") == null || ((Number) next.getAttribute("ItmQty")).doubleValue() <= 0) {
                retVal = 2;
                break;
            }
        }
        itr.closeRowSetIterator();
        return retVal;
    }

    /**
     * To set SR_No of Sls$So$Item on basis of item
     */
    public void setSrNo(Integer srNo) {
        serialNumGen("SlsSoItem1");
    }

    public void ExceuteItmVo() {
        this.getSlsSoItem1().executeQuery();
    }

    public Integer validateTransferOrder() {
        Integer i = 0;
        ViewObjectImpl trfVo = this.getSlsSoItmTrf1();
        if (trfVo.getEstimatedRowCount() > 0) {
            RowSetIterator trfItr = trfVo.createRowSetIterator(null);
            while (trfItr.hasNext()) {
                Row next = trfItr.next();
                Object orgIdDestO = next.getAttribute("OrgIdDest");
                Object orgIdSrcO = next.getAttribute("OrgIdSrc");
                Object whIdDestO = next.getAttribute("WhIdDest");
                Object whIdSrcO = next.getAttribute("WhIdSrc");
                Object itmIdO = next.getAttribute("ItmId");

                StringBuilder orgIdDest =
                    (orgIdDestO == null ? new StringBuilder("") : new StringBuilder(orgIdDestO.toString()));
                StringBuilder orgIdSrc =
                    (orgIdSrcO == null ? new StringBuilder("") : new StringBuilder(orgIdSrcO.toString()));
                StringBuilder whIdDest =
                    (whIdDestO == null ? new StringBuilder("") : new StringBuilder(whIdDestO.toString()));
                StringBuilder whIdSrc =
                    (whIdSrcO == null ? new StringBuilder("") : new StringBuilder(whIdSrcO.toString()));
                StringBuilder itmId = (itmIdO == null ? new StringBuilder("") : new StringBuilder(itmIdO.toString()));

                if ("".equals(orgIdSrc.toString())) {
                    StringBuilder msg = new StringBuilder("");
                    msg.append("Source Organisation for Item : ");
                    msg.append(next.getAttribute("ItmDescTrans"));
                    msg.append(" have not been selected.");
                    msg.append("</br>Please Select Source Organisation for the Item.");
                    msg.append("</br></br>Please make sure that Source Organisation, Source Warehouse, Destination Organisation, Destination Warehouse are selected for all the Items.");
                    msg.append("</br></br>And please ensure that the Item Transfer Quantity is greater than zero.");
                    ADFModelUtils.showFormattedFacesMessage("Source Organisation have not been selected.",
                                                            msg.toString(), FacesMessage.SEVERITY_ERROR);
                    i = -1;
                } else if ("".equals(whIdSrc.toString())) {
                    StringBuilder msg = new StringBuilder("");
                    msg.append("Source Warehouse for Item : ");
                    msg.append(next.getAttribute("ItmDescTrans"));
                    msg.append(" have not been selected.");
                    msg.append("</br>Please Select Source Warehouse for the Item.");
                    msg.append("</br></br>Please make sure that Source Organisation, Source Warehouse, Destination Organisation, Destination Warehouse are selected for all the Items.");
                    msg.append("</br></br>And please ensure that the Item Transfer Quantity is greater than zero.");
                    ADFModelUtils.showFormattedFacesMessage("Destination Organisation have not been selected.",
                                                            msg.toString(), FacesMessage.SEVERITY_ERROR);
                    i = -1;
                } else if ("".equals(orgIdDest.toString())) {
                    StringBuilder msg = new StringBuilder("");
                    msg.append("Destination Organisation for Item : ");
                    msg.append(next.getAttribute("ItmDescTrans"));
                    msg.append(" have not been selected.");
                    msg.append("Please Select Destination Organisation for the Item.");
                    msg.append("</br></br>Please make sure that Source Organisation, Source Warehouse, Destination Organisation, Destination Warehouse are selected for all the Items.");
                    msg.append("</br></br>And please ensure that the Item Transfer Quantity is greater than zero.");
                    ADFModelUtils.showFormattedFacesMessage("Destination Organisation have not been selected.",
                                                            msg.toString(), FacesMessage.SEVERITY_ERROR);
                    i = -1;
                } else if ("".equals(whIdDest.toString())) {
                    StringBuilder msg = new StringBuilder("");
                    msg.append("Destination Warehouse for Item : ");
                    msg.append(next.getAttribute("ItmDescTrans"));
                    msg.append(" have not been selected.");
                    msg.append("Please Select Destination Warehouse for the Item.");
                    msg.append("</br></br>Please make sure that Source Organisation, Source Warehouse, Destination Organisation, Destination Warehouse are selected for all the Items.");
                    msg.append("</br></br>And please ensure that the Item Transfer Quantity is greater than zero.");
                    ADFModelUtils.showFormattedFacesMessage("Destination Warehouse have not been selected.",
                                                            msg.toString(), FacesMessage.SEVERITY_ERROR);
                    i = -1;
                }
                if (i == -1) {
                    break;
                }
            }
        }


        return i;
    }

    public void filterVO() {
        ViewObjectImpl impl = this.getSearch();
        String docIdVar =
            impl.getCurrentRow().getAttribute("DocId") == null ? " " :
            impl.getCurrentRow().getAttribute("DocId").toString();
        ViewObjectImpl dlvSchdl = this.getSlsSoDlvSchdl();
        Row[] filteredRows = dlvSchdl.getFilteredRows("DocId", docIdVar);
        dlvSchdl.executeQuery();
        RowSetIterator crt = dlvSchdl.createRowSetIterator(null);
        while (crt.hasNext()) {
            Row next = crt.next();
            next.setAttribute("IsItemPicked", null);
        }
        crt.closeRowSetIterator();
    }

    /**
     * Container's getter for ChkFrPickedItmsVO1.
     * @return ChkFrPickedItmsVO1
     */
    public ViewObjectImpl getChkFrPickedItmsVO1() {
        return (ViewObjectImpl) findViewObject("ChkFrPickedItmsVO1");
    }

    /**
     * Method to check Item Basis is applicable for this sales order or not.
     */

    public Boolean isItemBasisApplicable() {
        Boolean b = false;
        StringBuffer ck = new StringBuffer("N");
        try {
            String policyPrice = EbizParamsSLSUtils.checkSLSProfileValues(this, "SHOW_ITM_BASIS");
            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (ck == null) {
            return false;
        } else if ("Y".equalsIgnoreCase(ck.toString())) {
            b = true;
        } else {
            b = false;
        }
        return b;
    }

    /**
     * Method to get the customer of current document
     */
    public Integer fatchCustmrId() {
        Integer reId = null;
        Row r = getSearchSoVw().getCurrentRow();
        if (r != null) {
            Object custId = r.getAttribute("EoId");
            System.out.println(custId + " This is the customer ID");
            if (custId != null) {
                reId = (Integer) custId;
            }
        }
        return reId;
    }

    /**
     *  Method to delete delivery schedule
     */
    public void deleteDlvSchdl() {
        Row dlcSchdlRow = getSlsSoDlvSchdl().getCurrentRow();
        Object dlvQty0 = dlcSchdlRow.getAttribute("DlvQty");
        Object pickedQtyO = dlcSchdlRow.getAttribute("ItmPickedQtyTrans");
        Number dlvQty = (dlvQty0 == null ? StaticValue.NUMBER_ZERO : (Number) dlvQty0);
        Number pickedQty = (pickedQtyO == null ? StaticValue.NUMBER_ZERO : (Number) pickedQtyO);
        if (pickedQty.compareTo(StaticValue.NUMBER_ZERO) == 0) {
            dlcSchdlRow.remove();
        } else if (dlvQty.compareTo(pickedQty) > 0) {
            Object convFctrO = dlcSchdlRow.getAttribute("UomConvFctr");
            Number convFctr = (convFctrO == null ? new Number(1) : (Number) convFctrO);
            dlcSchdlRow.setAttribute("DlvQty", pickedQty);
            dlcSchdlRow.setAttribute("DlvQtyBs", ADFBeanUtils.roundOff(convFctr.multiply(pickedQty)));

        }
        executeBalanceVw();
    }
}
