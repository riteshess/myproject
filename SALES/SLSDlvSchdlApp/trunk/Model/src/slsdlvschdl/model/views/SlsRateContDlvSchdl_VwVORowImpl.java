package slsdlvschdl.model.views;

import adf.utils.ebiz.EbizParamsAPPUtils;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.ViewRowImpl;

import slsdlvschdl.model.services.SLSDlvSchdlAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 13 17:00:59 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsRateContDlvSchdl_VwVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        OrgId {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        HoOrgId {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setHoOrgId((String) value);
            }
        }
        ,
        DocId {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        }
        ,
        ItmIdRc {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getItmIdRc();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setItmIdRc((String) value);
            }
        }
        ,
        ItmRateRc {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getItmRateRc();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setItmRateRc((BigDecimal) value);
            }
        }
        ,
        ItmUomRc {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getItmUomRc();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setItmUomRc((String) value);
            }
        }
        ,
        ItmUomBs {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getItmUomBs();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UomConvFctr {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getUomConvFctr();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SelectItmChekBoxTrans {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getSelectItmChekBoxTrans();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setSelectItmChekBoxTrans((String) value);
            }
        }
        ,
        SchdlQuantTrans {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getSchdlQuantTrans();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setSchdlQuantTrans((Number) value);
            }
        }
        ,
        AvailableAmtTrans {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getAvailableAmtTrans();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        WhIdTrans {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getWhIdTrans();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItmDescTrans {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getItmDescTrans();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setItmDescTrans((String) value);
            }
        }
        ,
        LOVItmIdVO1 {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getLOVItmIdVO1();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVUomVO1 {
            public Object get(SlsRateContDlvSchdl_VwVORowImpl obj) {
                return obj.getLOVUomVO1();
            }

            public void put(SlsRateContDlvSchdl_VwVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SlsRateContDlvSchdl_VwVORowImpl object);

        public abstract void put(SlsRateContDlvSchdl_VwVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITMIDRC = AttributesEnum.ItmIdRc.index();
    public static final int ITMRATERC = AttributesEnum.ItmRateRc.index();
    public static final int ITMUOMRC = AttributesEnum.ItmUomRc.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int UOMCONVFCTR = AttributesEnum.UomConvFctr.index();
    public static final int SELECTITMCHEKBOXTRANS = AttributesEnum.SelectItmChekBoxTrans.index();
    public static final int SCHDLQUANTTRANS = AttributesEnum.SchdlQuantTrans.index();
    public static final int AVAILABLEAMTTRANS = AttributesEnum.AvailableAmtTrans.index();
    public static final int WHIDTRANS = AttributesEnum.WhIdTrans.index();
    public static final int ITMDESCTRANS = AttributesEnum.ItmDescTrans.index();
    public static final int LOVITMIDVO1 = AttributesEnum.LOVItmIdVO1.index();
    public static final int LOVUOMVO1 = AttributesEnum.LOVUomVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsRateContDlvSchdl_VwVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmIdRc.
     * @return the ItmIdRc
     */
    public String getItmIdRc() {
        return (String)getAttributeInternal(ITMIDRC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmIdRc.
     * @param value value to set the  ItmIdRc
     */
    public void setItmIdRc(String value) {
        setAttributeInternal(ITMIDRC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmRateRc.
     * @return the ItmRateRc
     */
    public BigDecimal getItmRateRc() {
        return (BigDecimal)getAttributeInternal(ITMRATERC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmRateRc.
     * @param value value to set the  ItmRateRc
     */
    public void setItmRateRc(BigDecimal value) {
        setAttributeInternal(ITMRATERC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUomRc.
     * @return the ItmUomRc
     */
    public String getItmUomRc() {
        return (String)getAttributeInternal(ITMUOMRC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmUomRc.
     * @param value value to set the  ItmUomRc
     */
    public void setItmUomRc(String value) {
        setAttributeInternal(ITMUOMRC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUomBs.
     * @return the ItmUomBs
     */
    public String getItmUomBs() {
        return (String) getAttributeInternal(ITMUOMBS);
    }


    /**
     * Gets the attribute value for the calculated attribute UomConvFctr.
     * @return the UomConvFctr
     */
    public BigDecimal getUomConvFctr() {
        return (BigDecimal) getAttributeInternal(UOMCONVFCTR);
    }


    /**
     * Gets the attribute value for the calculated attribute SelectItmChekBoxTrans.
     * @return the SelectItmChekBoxTrans
     */
    public String getSelectItmChekBoxTrans() {
        return (String)getAttributeInternal(SELECTITMCHEKBOXTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SelectItmChekBoxTrans.
     * @param value value to set the  SelectItmChekBoxTrans
     */
    public void setSelectItmChekBoxTrans(String value) {
        setAttributeInternal(SELECTITMCHEKBOXTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SchdlQuantTrans.
     * @return the SchdlQuantTrans
     */
    public Number getSchdlQuantTrans() {
        return (Number)getAttributeInternal(SCHDLQUANTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SchdlQuantTrans.
     * @param value value to set the  SchdlQuantTrans
     */
    public void setSchdlQuantTrans(Number value) {
        setAttributeInternal(SCHDLQUANTTRANS, value);
    }
    
    
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }


    public String getdrivername()
    {         String   drivernme ="";
           SLSDlvSchdlAMImpl am = (SLSDlvSchdlAMImpl)resolvElDC("SLSDlvSchdlAMDataControl");
             DBTransaction dbTransaction = (DBTransaction) am.getTransaction();
             PreparedStatement prepStatement =
             dbTransaction.createPreparedStatement("select * from dual", 0);
             try
             {
               System.out.println("Driver name--"+prepStatement.getConnection().getMetaData().getDriverName());
               drivernme = prepStatement.getConnection().getMetaData().getDriverName();
             }
             catch (SQLException e)
             {
                 e.printStackTrace();
             }
             return drivernme;

             }


    /**
     * Method for Callable Statements
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {


            String driver=getdrivername();
            if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                st = getDBTransaction().createCallableStatement("{ ? = " + stmt + "};", 0);   
            }
            else
            {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            }
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                  //  System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Gets the attribute value for the calculated attribute AvailableAmtTrans.
     * @return the AvailableAmtTrans
     */
    public Number getAvailableAmtTrans() {
        //        SLS.fn_mm_get_avail_stk (
        //           p_cld_id    VARCHAR2,
        //           p_sloc_id   NUMBER,
        //           p_org_id    VARCHAR2,
        //           p_itm_id    VARCHAR2,
        //           p_wh_id     VARCHAR2,
        //           P_DOC_DT DATE
        Number n = new Number(0);
        if (getWhIdTrans() != null) {
            try {
                BigDecimal v =null;
                String driver=getdrivername();
                if(driver.equalsIgnoreCase("MySQL-AB JDBC Driver")){
                    v= (BigDecimal)callStoredFunction(Types.NUMERIC, "call fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] { getCldId(),
                                                                                                                            getSlocId(),
                                                                                                                            getOrgId(),
                                                                                                                            getItmIdRc(),
                                                                                                                            getWhIdTrans(),
                                                                                                                            new Timestamp(System.currentTimeMillis()) });
                
                }
                else
                {
                 v= (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.fn_mm_get_avail_stk(?,?,?,?,?,?)", new Object[] { getCldId(),
                                                                                                                         getSlocId(),
                                                                                                                         getOrgId(),
                                                                                                                         getItmIdRc(),
                                                                                                                         getWhIdTrans(),
                                                                                                                         new Timestamp(System.currentTimeMillis()) });
                }
                n = new Number(v);
               // System.out.println("v :" + v);

            } catch (Exception e) {

                //e.printStackTrace();
               // System.out.println("error in calling function !!!!!!!!!!!!!!!!!!!");
            }
            //System.out.println("EoId : "+this.getSlsSo().getAttribute("EoId"));
           // System.out.println("WhId : " + (String)getAttributeInternal(WHIDTRANS));


        }

        return n;


        //return (Number) getAttributeInternal(AVAILABLEAMTTRANS);
    }


    /**
     * Gets the attribute value for the calculated attribute WhIdTrans.
     * @return the WhIdTrans
     */
    public String getWhIdTrans() {

        SLSDlvSchdlAMImpl am = (SLSDlvSchdlAMImpl)this.getApplicationModule();
        Row currentRow = am.getSearchSoVw().getCurrentRow();
       // System.out.println("Warehousetrans : " + currentRow.getAttribute("WareHouseTrans"));
        String Whid = null;
        if (currentRow != null) {
            if (currentRow.getAttribute("WareHouseTrans") != null) {
                Whid = (String)currentRow.getAttribute("WareHouseTrans");
              //  System.out.println("Whid is:" + Whid);
            }
            //System.out.println("Whid is:" + Whid);
            return Whid;
        } else
            return (String)getAttributeInternal(WHIDTRANS);
    }


    /**
     * Gets the attribute value for the calculated attribute ItmDescTrans.
     * @return the ItmDescTrans
     */
    public String getItmDescTrans() {
        if((String) getAttributeInternal(ITMDESCTRANS) == null && getItmIdRc() != null){
            String descFrmItmId = EbizParamsAPPUtils.getItemDescFrmItmId((ApplicationModuleImpl)getApplicationModule(), getItmIdRc());
            setItmDescTrans(descFrmItmId);
       }
        return (String) getAttributeInternal(ITMDESCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmDescTrans.
     * @param value value to set the  ItmDescTrans
     */
    public void setItmDescTrans(String value) {
        setAttributeInternal(ITMDESCTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVItmIdVO1.
     */
    public RowSet getLOVItmIdVO1() {
        return (RowSet)getAttributeInternal(LOVITMIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVUomVO1.
     */
    public RowSet getLOVUomVO1() {
        return (RowSet)getAttributeInternal(LOVUOMVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
