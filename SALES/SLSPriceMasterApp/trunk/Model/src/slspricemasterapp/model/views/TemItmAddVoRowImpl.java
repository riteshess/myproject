package slspricemasterapp.model.views;

import adf.utils.bean.StaticValue;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 29 13:02:14 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TemItmAddVoRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getDummy();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlocIdTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getSlocIdTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setSlocIdTrans((Integer) value);
            }
        }
        ,
        CldIdTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getCldIdTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setCldIdTrans((String) value);
            }
        }
        ,
        HoOrgIdTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getHoOrgIdTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setHoOrgIdTrans((String) value);
            }
        }
        ,
        OrgIdTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getOrgIdTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setOrgIdTrans((String) value);
            }
        }
        ,
        ItmIdTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getItmIdTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setItmIdTrans((String) value);
            }
        }
        ,
        ItmNmTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getItmNmTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setItmNmTrans((String) value);
            }
        }
        ,
        ItmUomTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getItmUomTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setItmUomTrans((String) value);
            }
        }
        ,
        EoPartNoTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getEoPartNoTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setEoPartNoTrans((String) value);
            }
        }
        ,
        EffectiveDtTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getEffectiveDtTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setEffectiveDtTrans((Timestamp) value);
            }
        }
        ,
        ExpiryDtTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getExpiryDtTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setExpiryDtTrans((Timestamp) value);
            }
        }
        ,
        BasePriceTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getBasePriceTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setBasePriceTrans((Number) value);
            }
        }
        ,
        MinPriceTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getMinPriceTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setMinPriceTrans((Number) value);
            }
        }
        ,
        MrpRateTypTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getMrpRateTypTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setMrpRateTypTrans((String) value);
            }
        }
        ,
        MrpRateTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getMrpRateTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setMrpRateTrans((Number) value);
            }
        }
        ,
        MrpTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getMrpTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setMrpTrans((Number) value);
            }
        }
        ,
        MRP {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getMRP();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setMRP((Number) value);
            }
        }
        ,
        PopUpEoNmTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getPopUpEoNmTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setPopUpEoNmTrans((String) value);
            }
        }
        ,
        PopUpEoIdTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getPopUpEoIdTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setPopUpEoIdTrans((Integer) value);
            }
        }
        ,
        PopEoCatgIdTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getPopEoCatgIdTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setPopEoCatgIdTrans((Integer) value);
            }
        }
        ,
        PopUpEoTempCatgTrans {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getPopUpEoTempCatgTrans();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setPopUpEoTempCatgTrans((Integer) value);
            }
        }
        ,
        ReplicateToAllOrg {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getReplicateToAllOrg();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setReplicateToAllOrg((String) value);
            }
        }
        ,
        UOMDescVO1 {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getUOMDescVO1();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovAmtPerVO1 {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getLovAmtPerVO1();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovItmIdVo1 {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getLovItmIdVo1();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovEoIdVo1 {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getLovEoIdVo1();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CatagoryTypeVO1 {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getCatagoryTypeVO1();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        AllOrgInHoVo1 {
            public Object get(TemItmAddVoRowImpl obj) {
                return obj.getAllOrgInHoVo1();
            }

            public void put(TemItmAddVoRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TemItmAddVoRowImpl object);

        public abstract void put(TemItmAddVoRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int SLOCIDTRANS = AttributesEnum.SlocIdTrans.index();
    public static final int CLDIDTRANS = AttributesEnum.CldIdTrans.index();
    public static final int HOORGIDTRANS = AttributesEnum.HoOrgIdTrans.index();
    public static final int ORGIDTRANS = AttributesEnum.OrgIdTrans.index();
    public static final int ITMIDTRANS = AttributesEnum.ItmIdTrans.index();
    public static final int ITMNMTRANS = AttributesEnum.ItmNmTrans.index();
    public static final int ITMUOMTRANS = AttributesEnum.ItmUomTrans.index();
    public static final int EOPARTNOTRANS = AttributesEnum.EoPartNoTrans.index();
    public static final int EFFECTIVEDTTRANS = AttributesEnum.EffectiveDtTrans.index();
    public static final int EXPIRYDTTRANS = AttributesEnum.ExpiryDtTrans.index();
    public static final int BASEPRICETRANS = AttributesEnum.BasePriceTrans.index();
    public static final int MINPRICETRANS = AttributesEnum.MinPriceTrans.index();
    public static final int MRPRATETYPTRANS = AttributesEnum.MrpRateTypTrans.index();
    public static final int MRPRATETRANS = AttributesEnum.MrpRateTrans.index();
    public static final int MRPTRANS = AttributesEnum.MrpTrans.index();
    public static final int MRP = AttributesEnum.MRP.index();
    public static final int POPUPEONMTRANS = AttributesEnum.PopUpEoNmTrans.index();
    public static final int POPUPEOIDTRANS = AttributesEnum.PopUpEoIdTrans.index();
    public static final int POPEOCATGIDTRANS = AttributesEnum.PopEoCatgIdTrans.index();
    public static final int POPUPEOTEMPCATGTRANS = AttributesEnum.PopUpEoTempCatgTrans.index();
    public static final int REPLICATETOALLORG = AttributesEnum.ReplicateToAllOrg.index();
    public static final int UOMDESCVO1 = AttributesEnum.UOMDescVO1.index();
    public static final int LOVAMTPERVO1 = AttributesEnum.LovAmtPerVO1.index();
    public static final int LOVITMIDVO1 = AttributesEnum.LovItmIdVo1.index();
    public static final int LOVEOIDVO1 = AttributesEnum.LovEoIdVo1.index();
    public static final int CATAGORYTYPEVO1 = AttributesEnum.CatagoryTypeVO1.index();
    public static final int ALLORGINHOVO1 = AttributesEnum.AllOrgInHoVo1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TemItmAddVoRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String)getAttributeInternal(DUMMY);
    }


    /**
     * Gets the attribute value for the calculated attribute SlocIdTrans.
     * @return the SlocIdTrans
     */
    public Integer getSlocIdTrans() {
        return getSlocId();
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocIdTrans.
     * @param value value to set the  SlocIdTrans
     */
    public void setSlocIdTrans(Integer value) {
        setAttributeInternal(SLOCIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldIdTrans.
     * @return the CldIdTrans
     */
    public String getCldIdTrans() {
        return getCldId().toString();
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldIdTrans.
     * @param value value to set the  CldIdTrans
     */
    public void setCldIdTrans(String value) {
        setAttributeInternal(CLDIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgIdTrans.
     * @return the HoOrgIdTrans
     */
    public String getHoOrgIdTrans() {
        return getHoOrgId().toString();
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgIdTrans.
     * @param value value to set the  HoOrgIdTrans
     */
    public void setHoOrgIdTrans(String value) {
        setAttributeInternal(HOORGIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgIdTrans.
     * @return the OrgIdTrans
     */
    public String getOrgIdTrans() {
        return getOrgId().toString();
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgIdTrans.
     * @param value value to set the  OrgIdTrans
     */
    public void setOrgIdTrans(String value) {
        setAttributeInternal(ORGIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmIdTrans.
     * @return the ItmIdTrans
     */
    public String getItmIdTrans() {
        return (String)getAttributeInternal(ITMIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmIdTrans.
     * @param value value to set the  ItmIdTrans
     */
    public void setItmIdTrans(String value) {
        setAttributeInternal(ITMIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmNmTrans.
     * @return the ItmNmTrans
     */
    public String getItmNmTrans() {
        return (String)getAttributeInternal(ITMNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmNmTrans.
     * @param value value to set the  ItmNmTrans
     */
    public void setItmNmTrans(String value) {
        setAttributeInternal(ITMNMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUomTrans.
     * @return the ItmUomTrans
     */
    public String getItmUomTrans() {
        return (String)getAttributeInternal(ITMUOMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmUomTrans.
     * @param value value to set the  ItmUomTrans
     */
    public void setItmUomTrans(String value) {
        setAttributeInternal(ITMUOMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EoPartNoTrans.
     * @return the EoPartNoTrans
     */
    public String getEoPartNoTrans() {
        return (String)getAttributeInternal(EOPARTNOTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoPartNoTrans.
     * @param value value to set the  EoPartNoTrans
     */
    public void setEoPartNoTrans(String value) {
        setAttributeInternal(EOPARTNOTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EffectiveDtTrans.
     * @return the EffectiveDtTrans
     */
    public Timestamp getEffectiveDtTrans() {
        if(getAttributeInternal(EFFECTIVEDTTRANS) == null){
            setEffectiveDtTrans(StaticValue.getCurrDtWidTimestamp());
            System.out.println("Setting Effective Date in getter.");
        }
        return (Timestamp)getAttributeInternal(EFFECTIVEDTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EffectiveDtTrans.
     * @param value value to set the  EffectiveDtTrans
     */
    public void setEffectiveDtTrans(Timestamp value) {
        setAttributeInternal(EFFECTIVEDTTRANS, value);
        setExpiryDtTrans(null);
    }

    /**
     * Gets the attribute value for the calculated attribute ExpiryDtTrans.
     * @return the ExpiryDtTrans
     */
    public Timestamp getExpiryDtTrans() {
        return (Timestamp)getAttributeInternal(EXPIRYDTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ExpiryDtTrans.
     * @param value value to set the  ExpiryDtTrans
     */
    public void setExpiryDtTrans(Timestamp value) {
        setAttributeInternal(EXPIRYDTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BasePriceTrans.
     * @return the BasePriceTrans
     */
    public Number getBasePriceTrans() {
        if (getAttributeInternal(BASEPRICETRANS) == null) {
            return new Number(0);
        }
        return (Number)getAttributeInternal(BASEPRICETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BasePriceTrans.
     * @param value value to set the  BasePriceTrans
     */
    public void setBasePriceTrans(Number value) {
        setAttributeInternal(BASEPRICETRANS, value);
        setMinPriceTrans(value);
    }

    /**
     * Gets the attribute value for the calculated attribute MinPriceTrans.
     * @return the MinPriceTrans
     */
    public Number getMinPriceTrans() {
        if (getAttributeInternal(MINPRICETRANS) == null) {
            return new Number(0);
        }
        return (Number)getAttributeInternal(MINPRICETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MinPriceTrans.
     * @param value value to set the  MinPriceTrans
     */
    public void setMinPriceTrans(Number value) {
        setAttributeInternal(MINPRICETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MrpRateTypTrans.
     * @return the MrpRateTypTrans
     */
    public String getMrpRateTypTrans() {
        if (getAttributeInternal(MRPRATETYPTRANS) == null) {
            return "A";
        }
        return (String)getAttributeInternal(MRPRATETYPTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MrpRateTypTrans.
     * @param value value to set the  MrpRateTypTrans
     */
    public void setMrpRateTypTrans(String value) {
        setAttributeInternal(MRPRATETYPTRANS, value);
        setMrpRateTrans(new Number(0));
    }

    /**
     * Gets the attribute value for the calculated attribute MrpRateTrans.
     * @return the MrpRateTrans
     */
    public Number getMrpRateTrans() {
        if(getAttributeInternal(MRPRATETRANS) == null){
            return new Number(0);
        }
        return (Number)getAttributeInternal(MRPRATETRANS);
    }

    private Integer amt_digit = Integer.parseInt(resolvElAmt("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

    public Object resolvElAmt(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object digit = 2;
        if (valueExp != null) {
            digit = valueExp.getValue(elContext);
        }
        if (digit == null) {
            digit = 2;
        }
        //  System.out.println("Amount digit is--->" + digit);
        return digit;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MrpRateTrans.
     * @param value value to set the  MrpRateTrans
     */
    public void setMrpRateTrans(Number value) {
        setAttributeInternal(MRPRATETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MrpTrans.
     * @return the MrpTrans
     */
    public Number getMrpTrans() {
        Number rateAmt = new Number(0);
        Number mrp = new Number(0);
        if (getMrpRateTypTrans().equals("P")) {
            rateAmt = getMrpRateTrans().multiply(getBasePriceTrans());
            rateAmt = rateAmt.divide(new Number(100));
        } else {
            rateAmt = getMrpRateTrans();
        }
        mrp = getBasePriceTrans().add(rateAmt);
        mrp = (Number)mrp.round(amt_digit);
        return mrp;
        //return (Number) getAttributeInternal(MRPTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MrpTrans.
     * @param value value to set the  MrpTrans
     */
    public void setMrpTrans(Number value) {
        setAttributeInternal(MRPTRANS, value);
    }


    /**
     * Gets the attribute value for the calculated attribute MRP.
     * @return the MRP
     */
    public Number getMRP() {
        return (Number)getAttributeInternal(MRP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MRP.
     * @param value value to set the  MRP
     */
    public void setMRP(Number value) {
        setAttributeInternal(MRP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PopUpEoNmTrans.
     * @return the PopUpEoNmTrans
     */
    public String getPopUpEoNmTrans() {
        return (String) getAttributeInternal(POPUPEONMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PopUpEoNmTrans.
     * @param value value to set the  PopUpEoNmTrans
     */
    public void setPopUpEoNmTrans(String value) {
        setAttributeInternal(POPUPEONMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PopUpEoIdTrans.
     * @return the PopUpEoIdTrans
     */
    public Integer getPopUpEoIdTrans() {
        return (Integer) getAttributeInternal(POPUPEOIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PopUpEoIdTrans.
     * @param value value to set the  PopUpEoIdTrans
     */
    public void setPopUpEoIdTrans(Integer value) {
        setAttributeInternal(POPUPEOIDTRANS, value);
        System.out.println("setting eoId to "+value);
    }

    /**
     * Gets the attribute value for the calculated attribute PopEoCatgIdTrans.
     * @return the PopEoCatgIdTrans
     */
    public Integer getPopEoCatgIdTrans() {
        return (Integer) getAttributeInternal(POPEOCATGIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PopEoCatgIdTrans.
     * @param value value to set the  PopEoCatgIdTrans
     */
    public void setPopEoCatgIdTrans(Integer value) {
        setAttributeInternal(POPEOCATGIDTRANS, value);
        setPopUpEoNmTrans(null);
        setPopUpEoIdTrans(null);
    }

    /**
     * Gets the attribute value for the calculated attribute PopUpEoTempCatgTrans.
     * @return the PopUpEoTempCatgTrans
     */
    public Integer getPopUpEoTempCatgTrans() {
        return (Integer) getAttributeInternal(POPUPEOTEMPCATGTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PopUpEoTempCatgTrans.
     * @param value value to set the  PopUpEoTempCatgTrans
     */
    public void setPopUpEoTempCatgTrans(Integer value) {
        setAttributeInternal(POPUPEOTEMPCATGTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ReplicateToAllOrg.
     * @return the ReplicateToAllOrg
     */
    public String getReplicateToAllOrg() {
        return (String) getAttributeInternal(REPLICATETOALLORG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ReplicateToAllOrg.
     * @param value value to set the  ReplicateToAllOrg
     */
    public void setReplicateToAllOrg(String value) {
        setAttributeInternal(REPLICATETOALLORG, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> UOMDescVO1.
     */
    public RowSet getUOMDescVO1() {
        return (RowSet)getAttributeInternal(UOMDESCVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovAmtPerVO1.
     */
    public RowSet getLovAmtPerVO1() {
        return (RowSet)getAttributeInternal(LOVAMTPERVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmIdVo1.
     */
    public RowSet getLovItmIdVo1() {
        return (RowSet)getAttributeInternal(LOVITMIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovEoIdVo1.
     */
    public RowSet getLovEoIdVo1() {
        return (RowSet)getAttributeInternal(LOVEOIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CatagoryTypeVO1.
     */
    public RowSet getCatagoryTypeVO1() {
        return (RowSet)getAttributeInternal(CATAGORYTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AllOrgInHoVo1.
     */
    public RowSet getAllOrgInHoVo1() {
        return (RowSet) getAttributeInternal(ALLORGINHOVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * Method for resolving the El
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = "-1";
        if (valueExp.getValue(elContext) == null) {
            FacesMessage message = new FacesMessage("There have been an error in fetching global parameters !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        } else {
            Message = valueExp.getValue(elContext).toString();
        }
        return Message;
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public StringBuilder getCldId() {
        return new StringBuilder(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
    }

    public Integer getUserId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public StringBuilder getOrgId() {
        return new StringBuilder(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
    }

    public StringBuilder getHoOrgId() {
        return new StringBuilder(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
    }
}
