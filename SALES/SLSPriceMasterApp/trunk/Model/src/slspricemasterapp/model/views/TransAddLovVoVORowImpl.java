package slspricemasterapp.model.views;


import adf.utils.ebiz.EbizParams;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.AttributeDefImpl;

import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;

import slspricemasterapp.model.services.SLSPriceMasterAppAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Aug 31 12:24:43 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransAddLovVoVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TransAddCatgId {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getTransAddCatgId();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setTransAddCatgId((Integer) value);
            }
        }
        ,
        TransAddPartyId {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getTransAddPartyId();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setTransAddPartyId((Integer) value);
            }
        }
        ,
        TransAddCatagNm {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getTransAddCatagNm();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setTransAddCatagNm((String) value);
            }
        }
        ,
        TransAPartyNm {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getTransAPartyNm();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setTransAPartyNm((String) value);
            }
        }
        ,
        ItmNametrans {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getItmNametrans();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setItmNametrans((String) value);
            }
        }
        ,
        itmIdTrans {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getitmIdTrans();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setitmIdTrans((String) value);
            }
        }
        ,
        SlocIdTrans {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getSlocIdTrans();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgIdTrans {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getOrgIdTrans();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        HoOrgIdTrans {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getHoOrgIdTrans();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CldIdTrans {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getCldIdTrans();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CatagoryTypeVO1 {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getCatagoryTypeVO1();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        PartyTypeVO1 {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getPartyTypeVO1();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItemTypeVO1 {
            public Object get(TransAddLovVoVORowImpl obj) {
                return obj.getItemTypeVO1();
            }

            public void put(TransAddLovVoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TransAddLovVoVORowImpl object);

        public abstract void put(TransAddLovVoVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int TRANSADDCATGID = AttributesEnum.TransAddCatgId.index();
    public static final int TRANSADDPARTYID = AttributesEnum.TransAddPartyId.index();
    public static final int TRANSADDCATAGNM = AttributesEnum.TransAddCatagNm.index();
    public static final int TRANSAPARTYNM = AttributesEnum.TransAPartyNm.index();
    public static final int ITMNAMETRANS = AttributesEnum.ItmNametrans.index();
    public static final int ITMIDTRANS = AttributesEnum.itmIdTrans.index();
    public static final int SLOCIDTRANS = AttributesEnum.SlocIdTrans.index();
    public static final int ORGIDTRANS = AttributesEnum.OrgIdTrans.index();
    public static final int HOORGIDTRANS = AttributesEnum.HoOrgIdTrans.index();
    public static final int CLDIDTRANS = AttributesEnum.CldIdTrans.index();
    public static final int CATAGORYTYPEVO1 = AttributesEnum.CatagoryTypeVO1.index();
    public static final int PARTYTYPEVO1 = AttributesEnum.PartyTypeVO1.index();
    public static final int ITEMTYPEVO1 = AttributesEnum.ItemTypeVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransAddLovVoVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }


    /**
     * Gets the attribute value for the calculated attribute TransAddCatgId.
     * @return the TransAddCatgId
     */
    public Integer getTransAddCatgId() {
       
        return (Integer) getAttributeInternal(TRANSADDCATGID);            
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAddCatgId.
     * @param value value to set the  TransAddCatgId
     */
    public void setTransAddCatgId(Integer value) {
        setAttributeInternal(TRANSADDCATGID, value);
        
    }


    /**
     * Gets the attribute value for the calculated attribute TransAddPartyId.
     * @return the TransAddPartyId
     */
     SLSPriceMasterAppAMImpl am =(SLSPriceMasterAppAMImpl)resolvElDC("SLSPriceMasterAppAMDataControl");
        ViewObject pricvo =am.getPriceMaster1();
        
    public Integer getTransAddPartyId() {
                    return (Integer) getAttributeInternal(TRANSADDPARTYID);
        
    }
    
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAddPartyId.
     * @param value value to set the  TransAddPartyId
     */
    public void setTransAddPartyId(Integer value) {
        setAttributeInternal(TRANSADDPARTYID, value);
    }


    /**
     * Gets the attribute value for the calculated attribute TransAddCatagNm.
     * @return the TransAddCatagNm
     */
    public String getTransAddCatagNm(){        
   return (String) getAttributeInternal(TRANSADDCATAGNM);
        }

    
    
        
    

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAddCatagNm.
     * @param value value to set the  TransAddCatagNm
     */
    public void setTransAddCatagNm(String value) {
        setAttributeInternal(TRANSADDCATAGNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAPartyNm.
     * @return the TransAPartyNm
     */
    public String getTransAPartyNm() {
       return (String) getAttributeInternal(TRANSAPARTYNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAPartyNm.
     * @param value value to set the  TransAPartyNm
     */
    public void setTransAPartyNm(String value) {
        setAttributeInternal(TRANSAPARTYNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmNametrans.
     * @return the ItmNametrans
     */
    public String getItmNametrans() {
        return (String) getAttributeInternal(ITMNAMETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmNametrans.
     * @param value value to set the  ItmNametrans
     */
    public void setItmNametrans(String value) {
        setAttributeInternal(ITMNAMETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute itmIdTrans.
     * @return the itmIdTrans
     */
    public String getitmIdTrans() {
        return (String) getAttributeInternal(ITMIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute itmIdTrans.
     * @param value value to set the  itmIdTrans
     */
    public void setitmIdTrans(String value) {
        setAttributeInternal(ITMIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocIdTrans.
     * @return the SlocIdTrans
     */
    public Integer getSlocIdTrans() {
        return EbizParams.GLBL_APP_SERV_LOC();
        //return (Integer) getAttributeInternal(SLOCIDTRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgIdTrans.
     * @return the OrgIdTrans
     */
    public String getOrgIdTrans() {
        return EbizParams.GLBL_APP_USR_ORG();
        //return (String) getAttributeInternal(ORGIDTRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgIdTrans.
     * @return the HoOrgIdTrans
     */
    public String getHoOrgIdTrans() {
        return EbizParams.GLBL_HO_ORG_ID();
       // return (String) getAttributeInternal(HOORGIDTRANS);
    }

    /**
     * Gets the attribute value for the calculated attribute CldIdTrans.
     * @return the CldIdTrans
     */
    public String getCldIdTrans() {
        return EbizParams.GLBL_APP_CLD_ID();
        //return (String) getAttributeInternal(CLDIDTRANS);
    }

    /**
     * Gets the view accessor <code>RowSet</code> CatagoryTypeVO1.
     */
    public RowSet getCatagoryTypeVO1() {
        return (RowSet)getAttributeInternal(CATAGORYTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> PartyTypeVO1.
     */
    public RowSet getPartyTypeVO1() {
        return (RowSet)getAttributeInternal(PARTYTYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ItemTypeVO1.
     */
    public RowSet getItemTypeVO1() {
        return (RowSet)getAttributeInternal(ITEMTYPEVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
