package slspricemasterapp.model.views;

import java.sql.ResultSet;

import java.util.List;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaItem;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 22 12:26:55 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PartyTypeVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public PartyTypeVOImpl() {
    }

    /**
     * Returns the variable value for CatagIDBVar.
     * @return variable value for CatagIDBVar
     */
    public Integer getCatagIDBVar() {
        return (Integer) ensureVariableManager().getVariableValue("CatagIDBVar");
    }

    /**
     * Sets <code>value</code> for variable CatagIDBVar.
     * @param value value to bind as CatagIDBVar
     */
    public void setCatagIDBVar(Integer value) {
        ensureVariableManager().setVariableValue("CatagIDBVar", value);
    }


    /**
     * Returns the bind variable value for BindCldId.
     * @return bind variable value for BindCldId
     */
    public String getBindCldId() {
        return (String) getNamedWhereClauseParam("BindCldId");
    }

    /**
     * Sets <code>value</code> for bind variable BindCldId.
     * @param value value to bind as BindCldId
     */
    public void setBindCldId(String value) {
        setNamedWhereClauseParam("BindCldId", value);
    }

    /**
     * Returns the bind variable value for BindSLocId.
     * @return bind variable value for BindSLocId
     */
    public Integer getBindSLocId() {
        return (Integer) getNamedWhereClauseParam("BindSLocId");
    }

    /**
     * Sets <code>value</code> for bind variable BindSLocId.
     * @param value value to bind as BindSLocId
     */
    public void setBindSLocId(Integer value) {
        setNamedWhereClauseParam("BindSLocId", value);
    }

    /**
     * Returns the bind variable value for BindHoOrgId.
     * @return bind variable value for BindHoOrgId
     */
    public String getBindHoOrgId() {
        return (String) getNamedWhereClauseParam("BindHoOrgId");
    }

    /**
     * Sets <code>value</code> for bind variable BindHoOrgId.
     * @param value value to bind as BindHoOrgId
     */
    public void setBindHoOrgId(String value) {
        setNamedWhereClauseParam("BindHoOrgId", value);
    }

    /**
     * Returns the bind variable value for BindOrgId.
     * @return bind variable value for BindOrgId
     */
    public String getBindOrgId() {
        return (String) getNamedWhereClauseParam("BindOrgId");
    }

    /**
     * Sets <code>value</code> for bind variable BindOrgId.
     * @param value value to bind as BindOrgId
     */
    public void setBindOrgId(String value) {
        setNamedWhereClauseParam("BindOrgId", value);
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    @Override
        public void applyViewCriteria(ViewCriteria viewCriteria, boolean b) {
        System.out.println("View Critera with boolean");
            super.applyViewCriteria(supressStartsWithClauseForLov(viewCriteria), b);
        }
        
        public ViewCriteria supressStartsWithClauseForLov(ViewCriteria vc){
            System.out.println("===========================");
            System.out.println( "  outside " + vc.getName());
            if(vc != null && vc.getName().contains("__lov__filterlist__vcr__")){
                System.out.println( "  Inside " + vc.getName());
                ViewCriteriaRow currentRow = (ViewCriteriaRow)vc.getCurrentRow();
                if(currentRow != null){
                    System.out.println(" Current row "+currentRow );
                    List criteriaItems = currentRow.getCriteriaItems();
                    for(int i = 0 ; i < criteriaItems.size() ; i++){
                        ViewCriteriaItem object = (ViewCriteriaItem)criteriaItems.get(i);
                        if(object != null){
                            System.out.println("Operator is : "+object.getOperator());
                            if("STARTSWITH".equals(object.getOperator())){
                                object.setOperator("CONTAINS");
                            }
                        }
                    }
                }
            }
            return vc;
        }
}

