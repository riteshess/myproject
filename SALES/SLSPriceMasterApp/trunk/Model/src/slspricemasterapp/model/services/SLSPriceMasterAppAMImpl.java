package slspricemasterapp.model.services;


import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import appexcelimpexpapp.model.util.UpdatedData;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Map;
import java.util.Random;

import java.util.Set;
import java.util.TimeZone;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.JboPrecisionScaleValidator;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slspricemasterapp.model.services.common.SLSPriceMasterAppAM;
import slspricemasterapp.model.views.DistinctPriceMasterVoImpl;
import slspricemasterapp.model.views.ItemTypeVOImpl;
import slspricemasterapp.model.views.LovItmGrpVOImpl;
import slspricemasterapp.model.views.PartyTypeVOImpl;
import slspricemasterapp.model.views.PriceMasterVOImpl;
import slspricemasterapp.model.views.SLSEoProdPrice_VwVOImpl;
import slspricemasterapp.model.views.SearchLovVOImpl;
import slspricemasterapp.model.views.TemItmAddVoRowImpl;
import slspricemasterapp.model.views.TransAddLovVoVOImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 28 13:50:34 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------


public class SLSPriceMasterAppAMImpl extends ApplicationModuleImpl implements SLSPriceMasterAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SLSPriceMasterAppAMImpl() {
        // System.out.println("<-----------am runs------------->> ");
    }


    public void executeVo() {
        // System.out.println("Executing SLS$PRICE$EO VO" );
        getPriceMaster1().executeQuery();
        getDistinctPriceMasterVo1().executeQuery();
    }

    public void executePticeMaster2Vo() {
        //  System.out.println("EXECUTE PriceMasterVO2 Which Is ViewLink");

        getPriceMaster2().executeQuery();
    }

    public void executeDistinctPnVo() {
        getDistinctPriceMasterVo1().setNamedWhereClauseParam("BindGrpId", null);
        getDistinctPriceMasterVo1().executeQuery();
    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object msg = valueExp.getValue(elContext);
        return msg;
    }


    public Boolean isPrecisionValid(Integer precision, Integer scale, Number total) {
        JboPrecisionScaleValidator vc = new JboPrecisionScaleValidator();
        vc.setPrecision(precision);
        vc.setScale(scale);
        // System.out.println("isPrecision Valid return value--" + vc.validateValue(total));
        return vc.validateValue(total);
    }


    public String setValuesforPM(String mrptype, Number basePrice, Number mrprate) {
        Number mrpprice = new Number(0);
        // Number baseprice = new Number(0);
        Integer catId = null;
        Row _transCatagRow = getTransAddLovVo1().getCurrentRow();
        Row _PmRow = getPriceMaster1().getCurrentRow();
        if (_transCatagRow != null) {
            String catagNm = (String) _transCatagRow.getAttribute("TransAddCatagNm");
            Row[] r1 = getCatagoryType1().getFilteredRows("AttNm", catagNm);
            if (r1.length > 0) {
                catId = (Integer) r1[0].getAttribute("AttId");
            }
            if (_PmRow != null) {
                // baseprice = (Number)_PmRow.getAttribute("BasePrice");
                _PmRow.setAttribute("CatgId", catId);
                _PmRow.setAttribute("MrpTyp", mrptype);
            }
        }
        //System.out.println("MRp PRice " + mrpprice + " mrptype.equals(\"A\")" + mrptype.equals("A") + " baseprice " +
        //    basePrice);
        if (mrptype.equals("A")) {
            mrpprice = basePrice.add(mrprate);
            // System.out.println("MRp PRice in cond " + mrpprice);
        } else {
            Number total = (basePrice.multiply(mrprate)).divide(new Number(100));
            mrpprice = basePrice.add(total);
            //  System.out.println("MRp PRice in cond " + mrpprice);
        }

        Boolean flag = isPrecisionValid(26, 6, mrpprice);
        if (flag.equals(true)) {
            _PmRow.setAttribute("MrpPrice", mrpprice);
            _PmRow.setAttribute("MrpRate", mrprate);
            return "Y";
        } else
            return "N";

    }

    public void searchPriceMaster(Integer catId, String ItemId, String EoNm) {
        ViewObjectImpl distinctpricevo = this.getDistinctPriceMasterVo1();

        distinctpricevo.setNamedWhereClauseParam("SlocIdBind", getparamSlocId());
        distinctpricevo.setNamedWhereClauseParam("CldIdBind", getparamCldId());
        distinctpricevo.setNamedWhereClauseParam("HoOrgBind", getparamHoOrgId());
        distinctpricevo.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
        distinctpricevo.setNamedWhereClauseParam("ItmIdBind", ItemId);
        distinctpricevo.setNamedWhereClauseParam("CatgIdBind", catId);
        distinctpricevo.setNamedWhereClauseParam("EoIdBind", null);
        System.out.println("CagId in Am Impl" + catId);
        System.out.println("Item Id in AMImpl" + ItemId);
        System.out.println("EoNm in AMImpl is --->" + EoNm);
        //pricevo.setNamedWhereClauseParam("BindCustNm", EoNm);
        distinctpricevo.executeQuery();


    }

    public void resetPriceMaster() {
        Row currentRow = this.getSearchLov1().getCurrentRow();

        currentRow.setAttribute("CatagIdTrans", null);
        currentRow.setAttribute("PartyIdTrans", null);
        currentRow.setAttribute("CataDescTrans", null);
        currentRow.setAttribute("PartyDescTrans", null);
        currentRow.setAttribute("TransItemNm", null);
        currentRow.setAttribute("TransItemId", null);
        currentRow.setAttribute("transSearchedItmName", null);
        currentRow.setAttribute("transSearchedItmId", null);
        this.getSearchLov1().executeQuery();

        Row currrow = this.getTransAddLovVo1().getCurrentRow();
        currrow.setAttribute("TransAddCatgId", null);
        currrow.setAttribute("TransAddCatagNm", null);
        this.getTransAddLovVo1().executeQuery();

        ViewObjectImpl pricevo = this.getDistinctPriceMasterVo1();
        ViewCriteria vc = pricevo.getViewCriteria("DistinctPriceMasterVoCriteria2");
        pricevo.applyViewCriteria(vc);
        pricevo.setNamedWhereClauseParam("BindCatagId", -1);
        pricevo.setNamedWhereClauseParam("BindItemId", null);
        pricevo.setNamedWhereClauseParam("BindSlocID", getparamSlocId());
        pricevo.setNamedWhereClauseParam("BindCldId", getparamCldId());
        pricevo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        pricevo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        pricevo.executeQuery();

    }
    Integer catid = null;
    Integer partyId = null;


    /**
     * Container's getter for CatagoryType1.
     * @return CatagoryType1
     */
    public ViewObjectImpl getCatagoryType1() {
        return (ViewObjectImpl) findViewObject("CatagoryType1");
    }

    /**
     * Container's getter for ItemType1.
     * @return ItemType1
     */
    public ItemTypeVOImpl getItemType1() {
        return (ItemTypeVOImpl) findViewObject("ItemType1");
    }

    /**
     * Container's getter for MrpTypeLov1.
     * @return MrpTypeLov1
     */
    public ViewObjectImpl getMrpTypeLov1() {
        return (ViewObjectImpl) findViewObject("MrpTypeLov1");
    }

    /**
     * Container's getter for PartyType1.
     * @return PartyType1
     */
    public PartyTypeVOImpl getPartyType1() {
        return (PartyTypeVOImpl) findViewObject("PartyType1");
    }

    /**
     * Container's getter for PriceMaster1.
     * @return PriceMaster1
     */
    public PriceMasterVOImpl getPriceMaster1() {
        return (PriceMasterVOImpl) findViewObject("PriceMaster1");
    }

    /**
     * Container's getter for SearchLov1.
     * @return SearchLov1
     */
    public ViewObjectImpl getSearchLov1() {
        return (ViewObjectImpl) findViewObject("SearchLov1");
    }


    public void executePriceMaster(String catNm, String ItemNm) {
        ViewObjectImpl Distinctpricevo = this.getDistinctPriceMasterVo1();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Integer catId = null;
        String newitemid = null;
        Row[] r1 = getCatagoryType1().getFilteredRows("AttNm", catNm);
        //System.out.println("row length   ----" + r1.length);
        if (r1.length > 0) {
            catId = (Integer) r1[0].getAttribute("AttId");
        }
        Row itemRow[] = getItemType1().getFilteredRows("ItmDesc", ItemNm);
        if (itemRow.length > 0) {
            newitemid = (String) itemRow[0].getAttribute("ItmId");
        }
        ViewCriteria vc = Distinctpricevo.getViewCriteria("DistinctPriceMasterVoCriteria2");
        Distinctpricevo.applyViewCriteria(vc);
        Distinctpricevo.setNamedWhereClauseParam("BindSlocID", sloc_id);
        Distinctpricevo.setNamedWhereClauseParam("BindCldId", cld_id);
        Distinctpricevo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        Distinctpricevo.setNamedWhereClauseParam("BindOrgId", org_id);
        Distinctpricevo.setNamedWhereClauseParam("BindCatagId", catId);
        Distinctpricevo.setNamedWhereClauseParam("BindItemId", null);
        Distinctpricevo.setNamedWhereClauseParam("BindGrpId", null);

        Distinctpricevo.executeQuery();

    }

    /*   public Row[] getSelectedRows(Integer attId, Integer prtyId, String itemId) {
        ViewObjectImpl pricevo = this.getPriceMaster1();
        ViewCriteria vc = pricevo.getViewCriteria("PriceMasterVOCriteria1");
        pricevo.applyViewCriteria(vc);
        pricevo.setNamedWhereClauseParam("catagBVar", attId);
        pricevo.setNamedWhereClauseParam("partyBVar", prtyId);
        pricevo.setNamedWhereClauseParam("BindEffectivDate", null);
        pricevo.setNamedWhereClauseParam("BindItemId", itemId);
        pricevo.executeQuery();
        System.out.println();
        Row rows[] = pricevo.getFilteredRows("CldId", "0000");
        return rows;
    } */

    public Row[] getSelectedRowsInDistinctPmVo(Integer catagId, String itemId) {
        ViewObjectImpl pricevo = this.getDistinctPriceMasterVo1();
        ViewCriteria vc = pricevo.getViewCriteria("DistinctPriceMasterVoCriteria2");
        pricevo.applyViewCriteria(vc);
        pricevo.setNamedWhereClauseParam("BindCatagId", catagId);
        pricevo.setNamedWhereClauseParam("BindItemId", itemId);
        pricevo.setNamedWhereClauseParam("BindCldId", getparamCldId());
        pricevo.setNamedWhereClauseParam("BindSlocID", getparamSlocId());
        pricevo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        pricevo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        pricevo.executeQuery();
        Row rows[] = pricevo.getFilteredRows("CldId", "0000");
        return rows;
    }

    public void specifyChnageFor(Integer catagId, Integer eoId, String ItemName) {
        String itemid = null;
        Row itemRow[] = getItemType1().getFilteredRows("ItmDesc", ItemName);
        if (itemRow.length > 0) {
            itemid = (String) itemRow[0].getAttribute("ItmId");
        }
        Row r2[] = getSelectedRowsInDistinctPmVo(catagId, itemid);


    }


    public void updateEffectiveDate(Timestamp newdate, Timestamp expDate, Integer CategoryId, Integer EoId,
                                    String ItemId, String grpId) {
        // System.out.println(newdate + "----" + CategoryId + "----" + ItemId + "--------" + EoId + "expDate " + expDate +
        //  " in updaet effective date amilpm");
        // Row pnr[] = getSelectedRows(CategoryId, EoId, ItemId);
        // System.out.println("parameter " + "  " + CategoryId + "  " + partyId + "  " + ItemId);

        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        //oracle.jbo.domain.Timestamp eftDt = (oracle.jbo.domain.Timestamp)_pMRow.getAttribute("EffectiveDt");
        Calendar now = Calendar.getInstance();
        int millis = now.get(Calendar.MILLISECOND);
        Long currDateTime = now.getTimeInMillis();
        // System.out.println("future date time iss  " + newdate.getTime() + " and currDateTime   current date time is " +
        //    currDateTime);
        long sec2 = (currDateTime / 1000) % 60;
        long min2 = (currDateTime / (1000 * 60)) % 60;
        long hr2 = (currDateTime / (1000 * 60 * 60)) % 24;
        //  System.out.println("hr2 ---=" + hr2 + "  minute--= " + min2 + " sec2==" + sec2 + "  millis--= " + millis);
        Random rd = new Random();
        rd.setSeed(100000);
        int R = rd.nextInt(2000000 - 1000000) + 1000000;
        long nwtime = newdate.getTime() + hr2 + min2 + sec2 + millis + R;

        Timestamp ddDate = null;
        Timestamp oldExpdate = null;
        Row dicstVoRow = this.getDistinctPriceMasterVo1().getCurrentRow();
        if (dicstVoRow != null) {
            oldExpdate = (Timestamp) dicstVoRow.getAttribute("ExpiryDt");
        }

        //  System.out.println(" oldExpdate=" + oldExpdate);
        // System.out.println("ddDate " + ddDate);
        if (expDate != null) {
            //   System.out.println("if" + expDate);
            long nwexptime = expDate.getTime() + hr2 + min2 + sec2 + millis + R;
            ddDate = new Timestamp(nwexptime);
        } else {
            //   System.out.println("else");
            if (oldExpdate != null) {
                // System.out.println("oldExpdate");
                long nwexptimea = oldExpdate.getTime() + hr2 + min2 + sec2 + millis + R;
                ddDate = new Timestamp(nwexptimea);
                // System.out.println("dddate " + ddDate);
            }


        }

        //  System.out.println("new date----" + new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
        // System.out.println("Customer eftDt is---" + new Timestamp(nwtime) + "  " + System.currentTimeMillis() +
        //      " new expiry date nis(nwtime)" + ddDate);

        ViewObjectImpl pricevo = this.getPriceMaster1();
        RowQualifier rqq = new RowQualifier(pricevo);
        String clause =
            "CldId = '" + cld_id + "' and SlocId = " + sloc_id + " and OrgId ='" + org_id + "' and HoOrgId ='" +
            ho_org_id + "' and EoPriceType = 'C'";
        if (CategoryId != null) {
            clause = clause + " and CatgId =" + CategoryId;
        }
        if (partyId != null) {
            clause = clause + "  and EoId =" + partyId;
        }
        if (ItemId != null) {
            clause = clause + " and ItmId='" + ItemId + "'";
        }
        if (grpId != null) {
            clause = clause + " and GrpId='" + grpId + "'";
        }
        //clause = clause;
        // System.out.println("Clause is :" + clause);

        rqq.setWhereClause(clause);

        // System.out.println("query for effective date----" + rqq.getExprStr());
        Row pnr[] = pricevo.getFilteredRows(rqq);
        System.out.println("roq lenght oioi  " + pnr.length);

        if (pnr != null && pnr.length > 0) {
            for (Row r : pnr) {
                if (new Timestamp(nwtime) != null && new Timestamp(nwtime).toString().length() > 0) {
                    r.setAttribute("EffectiveDt", new Timestamp(nwtime));
                    if (ddDate != null) {
                        //  System.out.println("when expirey date not null in amimpl");
                        r.setAttribute("ExpiryDt", ddDate);
                    } else {
                        // System.out.println("when expirey date  null in amimpl");
                        r.setAttribute("ExpiryDt", null);
                    }
                }
            }
        }

    }

    public void setValueInTransAddVo() {
        Row transRow = this.getSearchLov1().getCurrentRow();
        if (transRow != null) {
            String catgName = (String) transRow.getAttribute("CataDescTrans");
            String partyName = (String) transRow.getAttribute("PartyDescTrans");
            Integer catagId = (Integer) transRow.getAttribute("CatagIdTrans");
            Integer partyId = (Integer) transRow.getAttribute("PartyIdTrans");
            Row r = getTransAddLovVo1().createRow();
            r.setAttribute("TransAddCatgId", catagId);
            r.setAttribute("TransAddPartyId", partyId);
            r.setAttribute("TransAddCatagNm", catgName);
            r.setAttribute("TransAPartyNm", partyName);
            getTransAddLovVo1().insertRow(r);
        }

    }


    private static int VARCHAR = Types.VARCHAR;


    public String replicateItemInAllEo(Timestamp effectiveDate) {
        Row _pMRow = this.getPriceMaster1().getCurrentRow();
        ViewObjectImpl transAdddLovVo = this.getTransAddLovVo1();
        Row currRow = transAdddLovVo.getCurrentRow();
        Integer catagId = null;
        if (currRow != null) {
            catagId = (Integer) currRow.getAttribute("TransAddCatgId");
        }
        if (_pMRow != null) {
            java.util.Date date = new java.util.Date();
            Calendar now = Calendar.getInstance();
            int millis = now.get(Calendar.MILLISECOND);
            Long currDateTime = now.getTimeInMillis();
            long sec2 = (currDateTime / 1000) % 60;
            long min2 = (currDateTime / (1000 * 60)) % 60;
            long hr2 = (currDateTime / (1000 * 60 * 60)) % 24;
            Random rd = new Random();
            rd.setSeed(100000);
            int R = rd.nextInt(2000000 - 1000000) + 1000000;
            String cld_id = (String) _pMRow.getAttribute("CldId");
            Integer sloc_id = (Integer) _pMRow.getAttribute("SlocId");
            String org_id = (String) _pMRow.getAttribute("OrgId");
            String ho_org_id = (String) _pMRow.getAttribute("HoOrgId");
            Integer userid = (Integer) _pMRow.getAttribute("UsrIdCreate");
            String itemID = (String) _pMRow.getAttribute("ItmId");
            Number Eoid = (Number) _pMRow.getAttribute("EoId");
            String partNo = (String) _pMRow.getAttribute("EoPartNo");
            oracle.jbo.domain.Timestamp eftDt = effectiveDate;
            oracle.jbo.domain.Timestamp expiryDt = (oracle.jbo.domain.Timestamp) _pMRow.getAttribute("ExpiryDt");
            Timestamp ddDate = null;
            if (expiryDt != null) {
                Long expiryDate = expiryDt.getTime();
                long newExpDt = expiryDate + hr2 + min2 + sec2 + millis + R;
                ddDate = new Timestamp(newExpDt);
            }


            long nwtime = eftDt.getTime() + hr2 + min2 + sec2 + millis + R;
            String itmUom = (String) _pMRow.getAttribute("ItmUom");
            Number mrpRate = (Number) _pMRow.getAttribute("MrpRate");
            String mrpTyp = (String) _pMRow.getAttribute("MrpTyp");
            Number mrpPrice = (Number) _pMRow.getAttribute("MrpPrice");
            Number MinPrice = (Number) _pMRow.getAttribute("MinPrice");
            String priceApply = (String) _pMRow.getAttribute("PriceApply");
            Number basePrice = (Number) _pMRow.getAttribute("BasePrice");
            String a = null;
            try {
                System.out.println("Paramter are:  \n" + sloc_id + "  " + cld_id + "  " + ho_org_id + "  " + org_id +
                                   "  " + itemID + "  " + Eoid.toString() + "  " + catagId + "  " + userid.toString() +
                                   "  " + new Timestamp(nwtime) + "  " + ddDate + "  " + itmUom + "  " + mrpRate +
                                   "  " + mrpTyp + "  " + mrpPrice + "  " + MinPrice + "  " + priceApply + "  " +
                                   basePrice);
                String driver = getdrivername();
                if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                    a = (String) callStoredFunctionForAllEo(VARCHAR,
                                                            "SLS.FN_ins_price(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            sloc_id, cld_id, ho_org_id, org_id, itemID, Eoid.toString(),
                                                            catagId, userid.toString(), new Timestamp(nwtime), ddDate,
                                                            itmUom, mrpRate, mrpTyp, mrpPrice, MinPrice, priceApply,
                                                            basePrice, partNo
                    });
                }
                System.out.println("FUNCTION TO REPLICATE ITEM IN ALL EO'S called succefully" + a);
            } catch (Exception e) {
                System.out.println("in catch");
                e.printStackTrace();
            }

            removeAllZeroEo();
            System.out.println("a  " + a);
            return a;

        }
        return "FAIL";
    }

    /****Methods to get Global Parameter*/
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public String getparamOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }

    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }

    public String getparamHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }


    void removeAllZeroEo() {
        ViewObjectImpl vo = this.getPriceMaster1();
        // System.out.println(" ===" + vo.getRowCount());
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId ='" + getparamCldId() + "' and OrgId ='" + getparamOrgId() + "' and SlocId =" +
                          getparamSlocId() + " and EoId = " + 0);
        Row rows[] = vo.getFilteredRows(rq);
        //System.out.println(" ===" + vo.getRowCount());
        if (rows != null && rows.length > 0) {
            for (Row row : rows) {
                // System.out.println("1");
                row.remove();
            }
        }
        // System.out.println(" 11111query " + rq.getExprStr() + "rows.length " + rows.length);
    }

    protected Object callStoredFunctionForAllEo(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }


    /**
     * Container's getter for TransAddLovVo1.
     * @return TransAddLovVo1
     */
    public TransAddLovVoVOImpl getTransAddLovVo1() {
        return (TransAddLovVoVOImpl) findViewObject("TransAddLovVo1");
    }

    /**
     * Container's getter for SLSEoProdPrice_Vw1.
     * @return SLSEoProdPrice_Vw1
     */
    public ViewObjectImpl getSLSEoProdPrice_Vw1() {
        return (ViewObjectImpl) findViewObject("SLSEoProdPrice_Vw1");
    }

    /**
     * Container's getter for PriceMaster2.
     * @return PriceMaster2
     */
    public PriceMasterVOImpl getPriceMaster2() {
        return (PriceMasterVOImpl) findViewObject("PriceMaster2");
    }

    /**
     * Container's getter for SLSEoProdPriceToSLSPriceMasterVL1.
     * @return SLSEoProdPriceToSLSPriceMasterVL1
     */
    public ViewLinkImpl getSLSEoProdPriceToSLSPriceMasterVL1() {
        return (ViewLinkImpl) findViewLink("SLSEoProdPriceToSLSPriceMasterVL1");
    }


    public boolean editEoWiseItem(Number amt, String MrpType, String Flag, String valOrAdd, Integer setValOrNot) {
        Number minPrice = new Number(0);
        Number newMrpPrice = new Number(0);
        Number oladMrpPrice = new Number(0);
        Number total = new Number(0);
        Row _pMRow = this.getPriceMaster2().getCurrentRow();
        System.out.println("MRp TYPE--- " + MrpType + " amount to add or subtract  " + amt + " ADD/SUB " + Flag +
                           "  valOrAdd  " + valOrAdd + "  setValOrNot  " + setValOrNot);
        if (_pMRow != null) {
            oladMrpPrice = (Number) _pMRow.getAttribute("MrpPrice");
            minPrice = (Number) _pMRow.getAttribute("MinPrice");

        }
        Timestamp eftvDate = (Timestamp) _pMRow.getAttribute("EffectiveDt");
        Timestamp expirydate = (Timestamp) _pMRow.getAttribute("ExpiryDt");
        System.out.println("effecctive dtae " + eftvDate + " expiry date " + expirydate);

        Calendar now = Calendar.getInstance();
        int millis = now.get(Calendar.MILLISECOND);
        Long currDateTime = now.getTimeInMillis();
        long sec2 = (currDateTime / 1000) % 60;
        long min2 = (currDateTime / (1000 * 60)) % 60;
        long hr2 = (currDateTime / (1000 * 60 * 60)) % 24;
        Random rd = new Random();
        rd.setSeed(100000);
        int R = rd.nextInt(2000000 - 1000000) + 1000000;
        long eoWiseEfttime = eftvDate.getTime() + hr2 + min2 + sec2 + millis + R;
        long eoWiseExpirytime = eftvDate.getTime() + hr2 + min2 + sec2 + millis + R;
        if (expirydate != null) {
            eoWiseExpirytime = expirydate.getTime() + hr2 + min2 + sec2 + millis + R;
        }
        System.out.println("new effective date is " + new Timestamp(eoWiseEfttime) + " new expiry date is " +
                           new Timestamp(eoWiseExpirytime));
        //  System.out.println("OLD MRP PRICE---" + oladMrpPrice);
        //  System.out.println("MINININUN PRIC   " + minPrice);
        //  System.out.println("Condition   " + MrpType.equalsIgnoreCase("A"));
        //   System.out.println("MRP TYPE IS==" + MrpType);
        if ("A".equalsIgnoreCase(MrpType)) { //amount
            System.out.println("SET amountaadd");
            if (Flag.equalsIgnoreCase("A")) { //add
                System.out.println("ADD SET");
                newMrpPrice = oladMrpPrice.add(amt);
                System.out.println("newMrpPrice " + newMrpPrice);
            } else { //sub
                System.out.println("AMOUNT subtract set");
                newMrpPrice = oladMrpPrice.subtract(amt);
                System.out.println("newMrpPrice " + newMrpPrice);
            }

        } else { //percentage
            System.out.println("percentage set  ");
            if (Flag.equalsIgnoreCase("A")) { //add
                System.out.println("SET 1111");
                total = (Number) ((oladMrpPrice.multiply(amt)).divide(new Number(100))).round(2);
                //   System.out.println("Total  " + total);
                newMrpPrice = (Number) (oladMrpPrice.add(total)).round(2);
                System.out.println("  newMrpPrice " + newMrpPrice);
            } else { //sub
                System.out.println("In case of percent " + MrpType + " and subtract   " + Flag);
                total = (Number) ((oladMrpPrice.multiply(amt)).divide(new Number(100))).round(2);
                //  System.out.println("Total  " + total);
                newMrpPrice = (Number) (oladMrpPrice.subtract(total)).round(2);
                System.out.println("  newMrpPrice " + newMrpPrice);
            }
        }
        System.out.println("New MRp PRice   " + newMrpPrice + "minPrice  " + minPrice);
        if (newMrpPrice.compareTo(minPrice) >= 0) {
            //  System.out.println("Enter in MRP PRICE VAlidator");
            if (valOrAdd.equalsIgnoreCase("A")) {
                // if(setValOrNot==1){
                System.out.println("setter set");
                getPriceMaster2().getCurrentRow().setAttribute("MrpPrice", newMrpPrice);
                getPriceMaster2().getCurrentRow().setAttribute("EoPriceType", "E");
                getPriceMaster2().getCurrentRow().setAttribute("EffectiveDt", new Timestamp(eoWiseEfttime));
                if (expirydate != null) {

                    getPriceMaster2().getCurrentRow().setAttribute("ExpiryDt", new Timestamp(eoWiseExpirytime));
                } else {
                    getPriceMaster2().getCurrentRow().setAttribute("ExpiryDt", null);
                }

                //  getPriceMaster2().executeQuery();
                // }
            }
            return false;
        } else
            return true;
    }

    public void executePageWithGlobalparam() {
        this.getTransAddLovVo1().executeQuery();
        this.getSearchLov1().executeQuery();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        DistinctPriceMasterVoImpl distinctpricevo = (DistinctPriceMasterVoImpl) this.getDistinctPriceMasterVo1();
        distinctpricevo.setNamedWhereClauseParam("SlocIdBind", sloc_id);
        distinctpricevo.setNamedWhereClauseParam("CldIdBind", cld_id);
        distinctpricevo.setNamedWhereClauseParam("HoOrgBind", ho_org_id);
        distinctpricevo.setNamedWhereClauseParam("OrgIdBind", org_id);
        distinctpricevo.setNamedWhereClauseParam("ItmIdBind", null);
        distinctpricevo.setNamedWhereClauseParam("CatgIdBind", -1);
        distinctpricevo.setNamedWhereClauseParam("EoIdBind", null);
        distinctpricevo.executeQuery();
        /* SearchLovVOImpl searchVo =(SearchLovVOImpl)this.getSearchLov1();
      searchVo.getCurrentRow().setAttribute("cldId", cld_id);
        searchVo.getCurrentRow().setAttribute("slocId", sloc_id);
        searchVo.getCurrentRow().setAttribute("HoOrgId", ho_org_id);
        searchVo.executeQuery();
        ViewObjectImpl grp1 = this.getLovItmGrp1();
        grp1.setNamedWhereClauseParam("CldIdBind", cld_id);
        grp1.setNamedWhereClauseParam("SlocIdBind", sloc_id);
        grp1.setNamedWhereClauseParam("HoOrgIdBind", ho_org_id);
        grp1.executeQuery(); */
        /*  ViewCriteria vcForFilter = distinctpricevo.getViewCriteria("DistinctPriceMasterVoCriteria1");
        distinctpricevo.applyViewCriteria(vcForFilter);
        distinctpricevo.setNamedWhereClauseParam("BindSlocID", sloc_id);
        distinctpricevo.setNamedWhereClauseParam("BindCldId", cld_id);
        distinctpricevo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        distinctpricevo.setNamedWhereClauseParam("BindOrgId", org_id);
        distinctpricevo.executeQuery();
         */

        ViewObject partyVo = this.getPartyType1();
        partyVo.setNamedWhereClauseParam("BindCldId", cld_id);
        partyVo.setNamedWhereClauseParam("BindSLocId", sloc_id);
        partyVo.setNamedWhereClauseParam("BindHoOrgId", ho_org_id);
        partyVo.setNamedWhereClauseParam("BindOrgId", org_id);
        // partyVo.executeQuery();
    }

    /**
     * Container's getter for DistinctPriceMasterVo1.
     * @return DistinctPriceMasterVo1
     */
    public DistinctPriceMasterVoImpl getDistinctPriceMasterVo1() {
        return (DistinctPriceMasterVoImpl) findViewObject("DistinctPriceMasterVo1");
    }


    public void deleteCategoryWiseItem() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        ViewObjectImpl vo = getDistinctPriceMasterVo1();
        Row r = vo.getCurrentRow();
        ViewObjectImpl pricevo = this.getPriceMaster1();
        RowQualifier rq = new RowQualifier(pricevo);
        if (r != null) {
            Integer catagoryId = (Integer) r.getAttribute("CatgId");
            String itemNm = (String) r.getAttribute("ItmId");
            rq.setWhereClause("CldId ='" + cld_id + "' and SlocId =" + sloc_id + " and OrgId ='" + org_id +
                              "' and HoOrgId ='" + ho_org_id + "' and ItmId ='" + itemNm + "' and CatgId =" +
                              catagoryId + "");
            //   System.out.println("query   " + rq.getExprStr());
            Row rows[] = pricevo.getFilteredRows(rq);
            //   System.out.println("row length " + rows.length);
            for (Row row : rows) {
                row.remove();
            }
        }
    }

    public void setCatagoryName() {
        Integer _catagoryId = null;
        ViewObject searchVo = this.getsearchCustDual1();
        TransAddLovVoVOImpl vo = (TransAddLovVoVOImpl) this.getTransAddLovVo1();
        ViewObject slsDistVo = this.getDistinctPriceMasterVo1();
        SLSEoProdPrice_VwVOImpl prodView = (SLSEoProdPrice_VwVOImpl) this.getSLSEoProdPrice_Vw1();
        Row curRow = slsDistVo.getCurrentRow();
        if (vo.getCurrentRow() != null) {
            _catagoryId = (Integer) vo.getCurrentRow().getAttribute("TransAddCatgId");
            //  System.out.println("catageory id is ==" + _catagoryId);
        }

        if (_catagoryId != null) {
            //prodView.setBindCatId(_catagoryId);
            Row r = searchVo.createRow();
            r.setAttribute("CatgId", _catagoryId);
            searchVo.insertRow(r);
        }
        ViewObjectImpl vo1 = this.getSLSEoProdPrice_Vw1();

        ViewCriteria vc = vo1.getViewCriteria("SLSEoProdPrice_VwVOCriteria");
        vo1.applyViewCriteria(vc);
        System.out.println("in amimple " + searchVo.getCurrentRow().getAttribute("CatgId") + " ");
        //     searchVo.getCurrentRow().getAttribute("EoId") + "");
        vo1.setNamedWhereClauseParam("BindCatId", searchVo.getCurrentRow().getAttribute("CatgId"));
        vo1.setNamedWhereClauseParam("BindEoNm", null);
        vo1.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        vo1.setNamedWhereClauseParam("BindCldID", getparamCldId());
        vo1.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        vo1.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        vo1.executeQuery();
    }


    public boolean isBasePriceValid(oracle.jbo.domain.Number _obj) {
        oracle.jbo.domain.Number _basePrice =
            (oracle.jbo.domain.Number) getPriceMaster1().getCurrentRow().getAttribute("BasePrice");
        if (_basePrice != null && _basePrice.compareTo(_obj) == 1) {
            return true;
        }
        return false;
    }

    public String getdrivername() {
        String drivernme = "";
        //SlsIntimationSlipAMImpl am = (SlsIntimationSlipAMImpl)resolvElDC("SlsIntimationSlipAMDataControl");
        DBTransaction dbTransaction = (DBTransaction) this.getTransaction();
        PreparedStatement prepStatement = dbTransaction.createPreparedStatement("select * from dual", 0);
        try {
            System.out.println("Driver name--" + prepStatement.getConnection().getMetaData().getDriverName());
            drivernme = prepStatement.getConnection().getMetaData().getDriverName();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return drivernme;

    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            String driver = getdrivername();
            if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                st = getDBTransaction().createCallableStatement("{ ? = " + stmt + "};", 0);
            } else {
                st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            }


            st.registerOutParameter(1, sqlReturnType);

            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);

                    }
                }
                st.executeUpdate();
            } catch (NullPointerException e) {

                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {


                }
            }
        }
    }

    public String fnsToEditItmCatWise(String Type) {
        //  System.out.println("i am in fns");
        String err = "NO";
        Integer catgId = null;
        //String eoId=null;
        String itmId = null;
        String catgType = "C";
        Integer usrIdCrt = null;
        String eoId = "";
        Number mrpPrice = new Number(0);
        Number basePrice = new Number(0);
        Number mrpRate = new Number(0);
        Number MinPrice = new Number(0);

        String itmUom = "";
        String mrpTyp = "";
        String priceApply = "";
        //Row r = vo.getCurrentRow();
        Timestamp eftDt = null;
        Timestamp expDt = null;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        // System.out.println(sloc_id + " " + cld_id + " " + org_id + " " + ho_org_id);
        RowSetIterator itr = null;
        try {
            ViewObjectImpl vo = getDistinctPriceMasterVo1();
            //  System.out.println("total no of rows is =" + vo.getRowCount());
            itr = vo.createRowSetIterator(null);

            while (itr.hasNext()) {
                boolean b = itr.hasNext();
                //   System.out.println("Enter in iterator" + b);
                Row r = itr.next();
                catgId = (Integer) r.getAttribute("CatgId");
                //  System.out.println("catageory id is ==" + catgId);
                itmId = (String) r.getAttribute("ItmId");
                //  System.out.println("Item  id is ==" + itmId);
                eoId = (String) r.getAttribute("eoNmOrCatgTrans");
                //   System.out.println("employeeId of the Retailer is==" + eoId);
                usrIdCrt = (Integer) r.getAttribute("UsrIdCreate");
                eftDt = (Timestamp) r.getAttribute("EffectiveDt");
                expDt = (Timestamp) r.getAttribute("ExpiryDt");

                Calendar now = Calendar.getInstance();
                int millis = now.get(Calendar.MILLISECOND);
                Long currDateTime = now.getTimeInMillis();
                //  System.out.println("future date time iss  " + eftDt.getTime() +
                //  " and currDateTime   current date time is " + currDateTime);
                long sec2 = (currDateTime / 1000) % 60;
                long min2 = (currDateTime / (1000 * 60)) % 60;
                long hr2 = (currDateTime / (1000 * 60 * 60)) % 24;
                //  System.out.println("hr2 ---=" + hr2 + "  minute--= " + min2 + " sec2==" + sec2 + "  millis--= " +
                //   millis);
                Random rd = new Random();
                rd.setSeed(100000);
                int R = rd.nextInt(2000000 - 1000000) + 1000000;

                System.out.println("Random : " + R);
                Timestamp ddDate = null;
                long nwtime = eftDt.getTime() + hr2 + min2 + sec2 + millis + R;
                if (expDt != null) {
                    long nwexptime = expDt.getTime() + hr2 + min2 + sec2 + millis + R;
                    ddDate = new Timestamp(nwexptime);
                }


                System.out.println("Customer eftDt is---" + new Timestamp(nwtime) + "  " + System.currentTimeMillis());

                itmUom = (String) r.getAttribute("ItmUom");
                mrpRate = (Number) r.getAttribute("MrpRate");
                mrpTyp = (String) r.getAttribute("MrpTyp");
                mrpPrice = (Number) r.getAttribute("MrpPrice");
                MinPrice = (Number) r.getAttribute("MinPrice");
                priceApply = (String) r.getAttribute("PriceApply");
                basePrice = (Number) r.getAttribute("BasePrice");

                System.out.println("catagid==   " + catgId + "itemId  " + itmId + " effective date  " +
                                   new Timestamp(nwtime) + "user id    " + usrIdCrt + " catg type   " + catgType +
                                   "item uuom    " + itmUom + "Mrp Rate   " + mrpRate + "mrp type  " + mrpTyp +
                                   "mrp price   " + mrpPrice + "min price   " + MinPrice + "price apply   " +
                                   priceApply + "base price    " + basePrice + " ddDate " + ddDate);
                System.out.println("now i am calling an sol function");
                System.out.println("===================================================================================");
                if ("For All Dealers".equalsIgnoreCase(eoId) || "For All Retailers".equalsIgnoreCase(eoId) ||
                    "For All Consignee".equalsIgnoreCase(eoId)) {
                    System.out.println("eo name " + eoId);
                    String i = null;
                    String driver = getdrivername();
                    if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                        i = (String) callStoredFunction(VARCHAR,
                                                        "call FN_ins_price_hist(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        sloc_id, cld_id, org_id, ho_org_id, 0, catgId, usrIdCrt,
                                                        catgType, new Timestamp(nwtime), ddDate, itmId, itmUom, mrpRate,
                                                        mrpTyp, mrpPrice, MinPrice, priceApply, basePrice
                        });
                    } else {
                        i = (String) callStoredFunction(VARCHAR,
                                                        "SLS.FN_ins_price_hist(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        sloc_id, cld_id, org_id, ho_org_id, 0, catgId, usrIdCrt,
                                                        catgType, new Timestamp(nwtime), ddDate, itmId, itmUom, mrpRate,
                                                        mrpTyp, mrpPrice, MinPrice, priceApply, basePrice
                        });
                    }


                } else {
                    ViewObjectImpl custVo = this.getPartyType1();
                    RowQualifier rrq = new RowQualifier(custVo);
                    rrq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() +
                                       " and OrgId='" + getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() +
                                       "' and EoNm='" + eoId + "'");
                    System.out.println("query " + rrq.getExprStr());
                    Row eoRow[] = custVo.getFilteredRows(rrq);
                    System.out.println("eoRow leenght " + eoRow.length);
                    Integer custId = null;
                    if (eoRow.length > 0) {
                        custId = (Integer) eoRow[0].getAttribute("EoId");
                        System.out.println("customer id is " + custId);
                        System.out.println("eo name in else " + eoId);
                        String i = null;
                        String driver = getdrivername();
                        if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                            i = (String) callStoredFunction(VARCHAR,
                                                            "call FN_ins_price_hist(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            sloc_id, cld_id, org_id, ho_org_id, 0, catgId, usrIdCrt,
                                                            catgType, new Timestamp(nwtime), ddDate, itmId, itmUom,
                                                            mrpRate, mrpTyp, mrpPrice, MinPrice, priceApply, basePrice
                            });
                        } else {
                            i = (String) callStoredFunction(VARCHAR,
                                                            "SLS.FN_ins_price_hist(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            sloc_id, cld_id, org_id, ho_org_id, custId, catgId,
                                                            usrIdCrt, "E", new Timestamp(nwtime), ddDate, itmId, itmUom,
                                                            mrpRate, mrpTyp, mrpPrice, MinPrice, priceApply, basePrice
                            });
                        }

                    }
                    System.out.println("===================================================================================");
                }
            }
        } catch (Exception e) {
            err = "YES";
            System.out.println("return value  " + err);
            e.printStackTrace();
        } finally {
            System.out.println("finally execute");
            itr.closeRowSetIterator();
            System.out.println("----");
        }

        return err;
    }

    Timestamp eftDtglbl = null;
    Timestamp expDtglbl = null;
    String checkTransaction = "AA";

    public String fnsToEditEoWise() {
        //  System.out.println("in fns");
        try {
            String catgType = "E";
            String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            //   System.out.println(sloc_id + " " + cld_id + " " + org_id + " " + ho_org_id);

            Calendar now = Calendar.getInstance();
            int millis = now.get(Calendar.MILLISECOND);
            Long currDateTime = now.getTimeInMillis();
            //  System.out.println("future date time iss  " + eftDtglbl.getTime() +
            //    " and currDateTime   current date time is " + currDateTime);
            long sec2 = (currDateTime / 1000) % 60;
            long min2 = (currDateTime / (1000 * 60)) % 60;
            long hr2 = (currDateTime / (1000 * 60 * 60)) % 24;
            //   System.out.println("hr2 ---=" + hr2 + "  minute--= " + min2 + " sec2==" + sec2 + "  millis--= " + millis);
            Random rd = new Random();
            rd.setSeed(100000);
            int R = rd.nextInt(2000000 - 1000000) + 1000000;

            System.out.println("Random : " + R);

            long nwtime = eftDtglbl.getTime() + hr2 + min2 + sec2 + millis + R;
            System.out.println("expDtglbl in eo wise edit=" + expDtglbl);
            Timestamp ddDate = null;
            if (expDtglbl != null) {
                long nwExptime = expDtglbl.getTime() + hr2 + min2 + sec2 + millis + R;
                ddDate = new Timestamp(nwExptime);
            }

            /*    Calendar now = Calendar.getInstance();
            int hour = now.get(Calendar.HOUR_OF_DAY);
            int minute = now.get(Calendar.MINUTE);
            int second = now.get(Calendar.SECOND);
            int millis = now.get(Calendar.MILLISECOND);
              Random rd = new Random();
            rd.setSeed(100000); */
            //long nwtime = eftDtglbl.getTime() + hour + minute + second + millis + 200000;


            System.out.println("Customer eftDt is---" + new Timestamp(nwtime) + "  " + System.currentTimeMillis());

            System.out.println("eo id is  " + eoEoId + "catagid==   " + eocatgId + "itemId  " + eoitmId +
                               " effective date  " + new Timestamp(nwtime) + "catgid   " + eocatgId + "user id    " +
                               eousrIdCrt + "catg type   " + catgType + "Item id    " + eoitmId + "item uuom    " +
                               eoitmUom + "Mrp Rate   " + eomrpRate + "mrp type  " + eomrpTyp + "mrp price   " +
                               eomrpPrice + "min price   " + eoMinPrice + "price apply   " + eopriceApply +
                               "base price    " + eobasePrice);
            String i = null;
            String driver = getdrivername();
            if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                i = (String) callStoredFunction(VARCHAR, "call FN_ins_price_hist(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                sloc_id, cld_id, org_id, ho_org_id, eoEoId, eocatgId, eousrIdCrt,
                                                catgType, new Timestamp(nwtime), ddDate, eoitmId, eoitmUom, eomrpRate,
                                                eomrpTyp, eomrpPrice, eoMinPrice, eopriceApply, eobasePrice
                });
            } else {
                i = (String) callStoredFunction(VARCHAR, "SLS.FN_ins_price_hist(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                sloc_id, cld_id, org_id, ho_org_id, eoEoId, eocatgId, eousrIdCrt,
                                                catgType, new Timestamp(nwtime), ddDate, eoitmId, eoitmUom, eomrpRate,
                                                eomrpTyp, eomrpPrice, eoMinPrice, eopriceApply, eobasePrice
                });
            }
            System.out.println(i);
            return "OK";
        } catch (Exception e) {
            System.out.println("in exception block" + e);
            return "NOK";
        }

    }


    Integer eocatgId = null;
    String eoitmId = null;

    Integer eousrIdCrt = null;
    Number eomrpPrice = new Number(0);
    Number eobasePrice = new Number(0);
    Number eomrpRate = new Number(0);
    Number eoMinPrice = new Number(0);
    String eoitmUom = "";
    String eomrpTyp = "";
    String eopriceApply = "";
    Integer eoEoId = null;

    public Timestamp getExirypDateofItm() {
        //  System.out.println("getExpDate");
        ViewObject vo = this.getPriceMaster2();
        Row curRow = vo.getCurrentRow();
        //  System.out.println("curRow.getAttribute(\"ExpiryDt\") " + curRow.getAttribute("ExpiryDt"));
        if (curRow != null && curRow.getAttribute("ExpiryDt") != null) {

            return expDtglbl = (Timestamp) curRow.getAttribute("ExpiryDt");
        }
        return null;
    }

    public Timestamp setEffDate() {
        // System.out.println("hiii this is setEFfDate claaed form edit button ok action");
        ViewObject vo = this.getPriceMaster2();
        Row curRow = vo.getCurrentRow();
        ViewObjectImpl voProd = getSLSEoProdPrice_Vw1();
        Row ro = voProd.getCurrentRow();
        if (voProd != null) {
            eoEoId = (Integer) ro.getAttribute("EoId");
        }
        if (curRow != null && curRow.getAttribute("EffectiveDt") != null) {
            eftDtglbl = (Timestamp) curRow.getAttribute("EffectiveDt");
            expDtglbl = (Timestamp) curRow.getAttribute("ExpiryDt");
            eocatgId = (Integer) curRow.getAttribute("CatgId");
            eoitmId = (String) curRow.getAttribute("ItmId");
            eousrIdCrt = (Integer) curRow.getAttribute("UsrIdCreate");
            eoitmUom = (String) curRow.getAttribute("ItmUom");
            eomrpRate = (Number) curRow.getAttribute("MrpRate");
            eomrpTyp = (String) curRow.getAttribute("MrpTyp");
            eomrpPrice = (Number) curRow.getAttribute("MrpPrice");
            eoMinPrice = (Number) curRow.getAttribute("MinPrice");
            eopriceApply = (String) curRow.getAttribute("PriceApply");
            eobasePrice = (Number) curRow.getAttribute("BasePrice");
            //  System.out.println("value of effective date is ==" + eftDtglbl);
            return eftDtglbl;
        }
        return null;
    }


    public boolean isDuplicateItm(String itmName) {
        boolean result = false;
        String PmItemId = "";
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        ItemTypeVOImpl itevw = this.getItemType1();

        RowQualifier itemrowQualifier = new RowQualifier(itevw);
        itemrowQualifier.setWhereClause("SlocId=" + sloc_id + " and OrgId='" + org_id + "' and HoOrgId='" + ho_org_id +
                                        "' and CldId='" + cld_id + "'  and ItmDesc = '" + itmName + "'");
        Row[] exactitmRow = itevw.getFilteredRows(itemrowQualifier);
        // System.out.println("itemrowQualifier " + itemrowQualifier.getExprStr() + "exactitmRow.length " +
        //   exactitmRow.length);
        int len = exactitmRow.length;
        String ItemId = null;
        if (len > 0) {
            ItemId = (String) exactitmRow[0].getAttribute("ItmId");
            //  System.out.println("ItemId = " + ItemId);
        }
        Row transCatdCurrRow = this.getTransAddLovVo1().getCurrentRow();
        Integer catgBane = (Integer) transCatdCurrRow.getAttribute("TransAddCatgId");
        ViewObjectImpl prcMstVo = this.getPriceMaster1();
        RowQualifier prcMstRq = new RowQualifier(prcMstVo);
        prcMstRq.setWhereClause("SlocId=" + sloc_id + " and OrgId='" + org_id + "' and HoOrgId='" + ho_org_id +
                                "' and CldId='" + cld_id + "'");
        //  System.out.println("prcMstRq " + prcMstRq.getExprStr());
        Row prcMstFltRow[] = prcMstVo.getFilteredRows(prcMstRq);
        // System.out.println(" row lenfth " + prcMstFltRow.length);
        Row pmRow = prcMstVo.getCurrentRow();
        int a = prcMstVo.getRangeSize();
        prcMstVo.setRangeSize(prcMstVo.getRowCount());
        //  Row duplicateA[] = this.getPriceMaster1().getAllRowsInRange();
        // System.out.println("duplicateA " + prcMstFltRow.length);
        int count = 0;
        Integer PmCatgId = new Integer(0);
        for (Row r : prcMstFltRow) {
            if (r != (pmRow)) {
                try {
                    PmItemId = r.getAttribute("ItmId").toString();
                    PmCatgId = (Integer) r.getAttribute("CatgId");
                    //  System.out.println("in if PmItemId " + PmItemId + "PmCatgId " + PmCatgId);

                } catch (Exception e) {
                    e.printStackTrace();
                    PmItemId = "";
                }
                if (PmItemId.equalsIgnoreCase(ItemId) && PmCatgId.compareTo(catgBane) == 0) {
                    count++;
                }
            }
        }
        // System.out.println("count " + count);
        if (count > 0) {
            result = true;
        }
        prcMstVo.setRangeSize(a);
        return result;
    }

    public String checkAmountVal(Number amt, Integer catId, Integer partyId, String ItemName, String type,
                                 String Flag) {

        System.out.println("parameter " + amt + "  " + catId + "  " + partyId + "  " + ItemName + "   " + type + "   " +
                           Flag);
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        String returnVal = "OK";
        String itemid = null;
        String eoPriceType = "C";
        RowQualifier rq = new RowQualifier(this.getItemType1());
        rq.setWhereClause("CldId ='" + getparamCldId() + "' and SlocId ='" + getparamSlocId() + "' and OrgId='" +
                          getparamOrgId() + "' and HoOrgId ='" + getparamHoOrgId() + "' and ItmDesc ='" + ItemName +
                          "'");
        // System.out.println("query  " + rq.getExprStr());

        Row itemRow[] = getItemType1().getFilteredRows(rq);
        if (itemRow.length > 0) {
            itemid = (String) itemRow[0].getAttribute("ItmId");
            System.out.println(" ITEM ID IS:   " + itemid + " AND ITEM NAME IS: " + ItemName);
        }

        ViewObjectImpl pricevo = this.getPriceMaster1();
        pricevo.setRangeSize(-1);
        //pricevo.setNamedWhereClauseParam("GrpIdBind", grpId);
        //pricevo.executeQuery();
        RowQualifier rqq = new RowQualifier(pricevo);
        String clause =
            "CldId = '" + cld_id + "' and SlocId = " + sloc_id + " and OrgId ='" + org_id + "' and HoOrgId ='" +
            ho_org_id + "' and EoPriceType='" + eoPriceType + "'";
        if (catId != null) {
            clause = clause + " and CatgId =" + catId;
        }
        if (partyId != null) {
            clause = clause + "  and EoId =" + partyId;
        }
        if (itemid != null) {
            clause = clause + " and ItmId='" + itemid + "'";
        }
        //clause = clause;
        System.out.println("Clause is :" + clause);
        rqq.setWhereClause(clause);
        System.out.println("FINAL QUERY TO SEARCH ITEM FOR CUSTOMER----" + rqq.getExprStr());
        Row pnr[] = pricevo.getFilteredRows(rqq);
        System.out.println("ROW LENGTH " + pnr.length);
        Number newmrpprice = new Number(0);
        Number mrpprice = new Number(0);
        Number minPrice = new Number(0);
        Number total = new Number(0);

        int i = 0;
        // System.out.println("Length of price master ---" + i);
        if (pnr != null && pnr.length > 0) {

            // System.out.println(pnr + "row---" + pnr.length);
            for (Row r : pnr) {
                minPrice = (Number) pnr[i].getAttribute("MinPrice");
                //System.out.println("MIn price  In STARTING-- " + minPrice);
                if (amt != null) {
                    if (type.equals("A")) { //Amount
                        if (Flag.equalsIgnoreCase("A")) { //add
                            // System.out.println("Set A  --" + Flag);
                            mrpprice = (Number) r.getAttribute("MrpPrice");
                            newmrpprice = mrpprice.add(amt);
                            boolean b = isPrecisionValid(26, 6, newmrpprice);
                            if (!b) {
                                System.out.println("invlid precision ..");
                                return "I";
                            }
                            //System.out.println("OLD MRP PRICE OF ITEM " + r.getAttribute("ItmId") + " iS " +
                            //                   r.getAttribute("MrpPrice") + "New MRP PRICE WHEN ADDING AMMOUNT " +
                            //                   newmrpprice);
                        } else { //sub
                            System.out.println("Set Sub   ---" + Flag + " AMOUNT TO SUBTRATCT " + amt);
                            mrpprice = (Number) r.getAttribute("MrpPrice");
                            minPrice = (Number) r.getAttribute("MinPrice");
                            newmrpprice = mrpprice.subtract(amt);
                            boolean b = isPrecisionValid(26, 6, newmrpprice);
                            if (!b) {
                                //  System.out.println("invlid precision ..");
                                return "I";
                            }
                            System.out.println("NEW MRP PRICEE AFTER SUBTRACTING  --- " + newmrpprice + "min price " +
                                               minPrice);
                            System.out.println("condition--" + (newmrpprice.compareTo(minPrice) == -1));

                            if (minPrice != null) {
                                if (newmrpprice.compareTo(minPrice) == -1) {
                                    System.out.println("Enter in MRP PRICE VAlidator");
                                    returnVal = "NO";
                                    return returnVal;
                                }
                            }

                        }
                    } else { // when percentage
                        System.out.println("WHEN AMOUNT TYPE IS  PERCENTAGE");

                        if (Flag.equalsIgnoreCase("A")) { //add
                            mrpprice = (Number) r.getAttribute("MrpPrice");
                            minPrice = (Number) r.getAttribute("MinPrice");
                            total = (Number) ((mrpprice.multiply(amt)).divide(new Number(100))).round(2);
                            newmrpprice = mrpprice.add(total);
                            //r.setAttribute("MrpPrice", newmrpprice);
                            boolean b = isPrecisionValid(26, 6, newmrpprice);
                            if (!b) {
                                System.out.println("invlid precision ..");
                                return "I";
                            }
                            /* System.out.println("TOTAL AFTER ADDING AMOUNT----" + total);
                            System.out.println("OLD MRP PRICE IS----" + mrpprice + " New MRp PRice --- " +
                                               newmrpprice + "min price " + minPrice); */

                        } else { //sub
                            mrpprice = (Number) r.getAttribute("MrpPrice");
                            minPrice = (Number) r.getAttribute("MinPrice");
                            total = (Number) ((mrpprice.multiply(amt)).divide(new Number(100))).round(2);
                            newmrpprice = mrpprice.subtract(total);
                            boolean b = isPrecisionValid(26, 6, newmrpprice);
                            if (!b) {
                                System.out.println("invlid precision ..");
                                return "I";
                            }
                            // System.out.println("mrpprice----" + mrpprice);
                            // System.out.println("total----" + total);
                            // System.out.println("New MRp PRice --- " + newmrpprice + "min price " + minPrice);
                            if (minPrice != null) {
                                if (newmrpprice.compareTo(minPrice) == -1) {
                                    //  System.out.println("Enter in MRP PRICE VAlidator");
                                    returnVal = "NO";
                                    return returnVal;

                                }
                            }
                        }

                    }
                }

            }
        }
        System.out.println("outer");
        return returnVal;
    }

    public Boolean updateAmount(Number amt, Integer catId, Integer partyId, String ItemName, String type, String Flag,
                                String grpId) {
        System.out.println("parameter " + amt + "  " + catId + "  " + partyId + "  " + ItemName + "   " + type + "   " +
                           Flag);
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String itemid = null;

        Row itemRow[] = getItemType1().getFilteredRows("ItmDesc", ItemName);
        if (itemRow.length > 0) {
            itemid = (String) itemRow[0].getAttribute("ItmId");
        }

        String eoPriceType = "C";
        ViewObjectImpl pricevo = this.getPriceMaster1();
        pricevo.setNamedWhereClauseParam("GrpIdBind", grpId);
        pricevo.executeQuery();


        RowQualifier rqq = new RowQualifier(pricevo);
        String clause =
            "CldId = '" + cld_id + "' and SlocId = " + sloc_id + " and OrgId ='" + org_id + "' and HoOrgId ='" +
            ho_org_id + "' and EoPriceType='" + eoPriceType + "'";

        if (catId != null) {
            clause = clause + " and CatgId =" + catId;
        }
        if (partyId != null) {
            clause = clause + "  and EoId =" + partyId;
        }
        if (itemid != null) {
            clause = clause + " and ItmId='" + itemid + "'";
        }
        if (grpId != null) {
            //clause =clause+ ;
            //clause = clause + " "+ ")";





        }
        // clause = clause;
        System.out.println("Clause is :" + clause);

        rqq.setWhereClause(clause);

        //System.out.println("query for amount chnage----" + rqq.getExprStr());
        Row pnr[] = pricevo.getFilteredRows(rqq);
        System.out.println("roq lenght " + pnr.length);

        Number newmrpprice = new Number(0);
        Number mrpprice = new Number(0);
        Number minPrice = new Number(0);
        Number total = new Number(0);
        int i = 0;
        if (pnr != null && pnr.length > 0) {
            System.out.println(pnr + "row---" + pnr.length);
            for (Row r : pnr) {
                minPrice = (Number) pnr[i].getAttribute("MinPrice");
                System.out.println("MIn price -- " + minPrice);

                if (type.equalsIgnoreCase("A")) { //Amount
                    if (amt != null) {
                        if (Flag.equalsIgnoreCase("A")) { //add
                            mrpprice = (Number) r.getAttribute("MrpPrice");
                            newmrpprice = mrpprice.add(amt);
                            System.out.println("sting atttribute" + newmrpprice);
                            r.setAttribute("MrpPrice", newmrpprice);
                        } else { //sub
                            System.out.println("Set Sub" + Flag);
                            mrpprice = (Number) r.getAttribute("MrpPrice");
                            newmrpprice = mrpprice.subtract(amt);
                            System.out.println("mrpprice is:  " + mrpprice);
                            System.out.println("amt is:  " + amt);
                            System.out.println("newmrpprice is:  " + newmrpprice);
                            System.out.println("minPrice is:  " + minPrice);
                            System.out.println("newmrpprice.compareTo(minPrice) is: " +
                                               newmrpprice.compareTo(minPrice));
                            //if (newmrpprice.compareTo(minPrice) == 1) {
                            if (newmrpprice.compareTo(minPrice) >= 0) {
                                System.out.println("Enter in MRP PRICE VAlidator" + newmrpprice);
                                r.setAttribute("MrpPrice", newmrpprice);
                            } else {
                                return true;
                            }
                        }
                    }
                } else { // when percentage
                    if (amt != null) {
                        if (Flag.equalsIgnoreCase("A")) { //add
                            mrpprice = (Number) r.getAttribute("MrpPrice");
                            total = (Number) ((mrpprice.multiply(amt)).divide(new Number(100))).round(2);
                            newmrpprice = mrpprice.add(total);
                            System.out.println("sting atttribute" + newmrpprice);
                            r.setAttribute("MrpPrice", newmrpprice);

                        } else { //sub
                            mrpprice = (Number) r.getAttribute("MrpPrice");
                            total = (Number) ((mrpprice.multiply(amt)).divide(new Number(100))).round(2);
                            newmrpprice = mrpprice.subtract(total);
                            System.out.println("sting atttribute" + newmrpprice);

                            //if (newmrpprice.compareTo(minPrice) == 1) {
                            if (newmrpprice.compareTo(minPrice) >= 0) {
                                System.out.println("Enter in MRP PRICE VAlidator");
                                r.setAttribute("MrpPrice", newmrpprice);
                            } else
                                return true;
                        }
                    }
                }
                i++;
            }
        }
        return false;
    }


    public Timestamp retunAfterDt() {
        ViewObject vo = this.getPriceMaster2();
        Row curRow = vo.getCurrentRow();
        if (curRow != null && curRow.getAttribute("EffectiveDt") != null) {
            Timestamp AfterDt = (Timestamp) curRow.getAttribute("EffectiveDt");
            return AfterDt;
        }
        return null;
    }

    /**
     * Container's getter for searchCustDual1.
     * @return searchCustDual1
     */
    public ViewObjectImpl getsearchCustDual1() {
        return (ViewObjectImpl) findViewObject("searchCustDual1");
    }

    /**
     * Container's getter for UOMDesc1.
     * @return UOMDesc1
     */
    public ViewObjectImpl getUOMDesc1() {
        return (ViewObjectImpl) findViewObject("UOMDesc1");
    }

    /**
     * Container's getter for PriiceHist1.
     * @return PriiceHist1
     */
    public ViewObjectImpl getPriiceHist1() {
        return (ViewObjectImpl) findViewObject("PriiceHist1");
    }

    public String viewOldPrice() {
        String type = "A";
        Row currentRow = this.getDistinctPriceMasterVo1().getCurrentRow();
        Object itmIdO = currentRow.getAttribute("ItmId");
        Object catgIdO = currentRow.getAttribute("CatgId");
        Object eoIdO = currentRow.getAttribute("EoId");
        Object eoPriceTypeO = currentRow.getAttribute("EoPriceType");

        Integer catgId = (catgIdO == null ? 0 : (Integer) catgIdO);
        Integer eoId = (eoIdO == null ? -2 : (Integer) eoIdO);


        // System.out.println("Item id iss " + itmId+" catgId "+catgId);

        if (eoId == -1) {
            type = "A";
            ViewObjectImpl priceHistVo = this.getPriiceHist1();
            priceHistVo.setNamedWhereClauseParam("SlocIdBind", getparamSlocId());
            priceHistVo.setNamedWhereClauseParam("CldIdBind", getparamCldId());
            priceHistVo.setNamedWhereClauseParam("HoOrgIdBind", getparamHoOrgId());
            priceHistVo.setNamedWhereClauseParam("OrgIdBind", getparamOrgId());
            priceHistVo.setNamedWhereClauseParam("EoIdBind", null); //
            priceHistVo.setNamedWhereClauseParam("CatgIdBind", catgId);
            priceHistVo.setNamedWhereClauseParam("ItmIdBind", itmIdO);
            priceHistVo.setNamedWhereClauseParam("EoPriceTypBind", null);
            priceHistVo.executeQuery();
        } else {
            type = "S";
            ViewObjectImpl cust1 = this.getPriceHistForSingleCust1();
            cust1.setNamedWhereClauseParam("cld_id_bind", getparamCldId());
            cust1.setNamedWhereClauseParam("sloc_id_bind", getparamSlocId());
            cust1.setNamedWhereClauseParam("ho_org_id_bind", getparamHoOrgId());
            cust1.setNamedWhereClauseParam("org_id_bind", getparamOrgId());
            cust1.setNamedWhereClauseParam("cat_id_bind", catgId);
            cust1.setNamedWhereClauseParam("itm_id_bind", itmIdO);
            cust1.setNamedWhereClauseParam("eo_id_bind", eoId);
            cust1.executeQuery();
        }
        return type;
        //s for single customer
        // a for all dealer , consignee, retailer
    }


    /**
     * Container's getter for PriiceHist3.
     * @return PriiceHist3
     */
    public ViewObjectImpl getPriiceHist3() {
        return (ViewObjectImpl) findViewObject("PriiceHist3");
    }

    /**
     * Container's getter for OldToNewPriceMasterVL2.
     * @return OldToNewPriceMasterVL2
     */
    public ViewLinkImpl getOldToNewPriceMasterVL2() {
        return (ViewLinkImpl) findViewLink("OldToNewPriceMasterVL2");
    }

    public void searchEoWiseItmAction() {
        ViewObjectImpl vo = this.getSLSEoProdPrice_Vw1();
        ViewObjectImpl searchVo = this.getsearchCustDual1();
        ViewCriteria vc = vo.getViewCriteria("SLSEoProdPrice_VwVOCriteria");
        vo.applyViewCriteria(vc);
        //   System.out.println("in amimple " + searchVo.getCurrentRow().getAttribute("CatgId") + " " +
        //     searchVo.getCurrentRow().getAttribute("EoId") + "");
        vo.setNamedWhereClauseParam("BindCatId", searchVo.getCurrentRow().getAttribute("CatgId"));
        vo.setNamedWhereClauseParam("BindEoNm", searchVo.getCurrentRow().getAttribute("EoNm"));
        vo.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        vo.setNamedWhereClauseParam("BindCldID", getparamCldId());
        vo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        vo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        vo.executeQuery();
    }

    public void rsetEoWiseAction() {
        ViewObjectImpl vo = this.getSLSEoProdPrice_Vw1();

        ViewCriteria vc = vo.getViewCriteria("SLSEoProdPrice_VwVOCriteria");
        vo.applyViewCriteria(vc);
        //  System.out.println("in amimple ");
        vo.setNamedWhereClauseParam("BindCatId", -1);
        vo.setNamedWhereClauseParam("BindEoNm", -1);
        vo.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        vo.setNamedWhereClauseParam("BindCldID", getparamCldId());
        vo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        vo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        vo.executeQuery();
        getsearchCustDual1().executeQuery();
    }


    public void setSearchFieldVal(Integer catgId) {
        // System.out.println("catg id " + catgId);
        ViewObjectImpl pricevo = this.getDistinctPriceMasterVo1();

        ViewCriteria vc = pricevo.getViewCriteria("DistinctPriceMasterVoCriteria2");
        pricevo.applyViewCriteria(vc);

        pricevo.setNamedWhereClauseParam("BindCatagId", catgId);
        pricevo.setNamedWhereClauseParam("BindItemId", null);
        pricevo.setNamedWhereClauseParam("BindSlocID", getparamSlocId());
        pricevo.setNamedWhereClauseParam("BindCldId", getparamCldId());
        pricevo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        pricevo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        pricevo.executeQuery();
    }

    public void setSpecificSearch() {
        //  System.out.println("setting speciffic to aall");
        this.getSearchLov1().getCurrentRow().setAttribute("TransSpecificOrAllRadio", "Al");
        ViewObjectImpl pMaster = this.getPriceMaster2();
        pMaster.setNamedWhereClauseParam("GrpIdBind", null);
        pMaster.executeQuery();
        // this.getSearchLov1().executeQuery();
    }

    public void setValueeToZero() {
        Row currRow = this.getPriceMaster1().getCurrentRow();
        if (currRow != null) {

        }
    }

    public void addEntryInDBFromExcel(String itemID, final Integer Eoid, Date nwtime, Date ddDate, Number mrpRate,
                                      String mrpTyp, Number MinPrice, String priceApply, Number basePrice) {
        Double mrprt = Double.parseDouble(mrpRate.toString());
        Double MinPc = Double.parseDouble(MinPrice.toString());
        System.out.println("mrprt:::" + mrprt);

        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String userid = resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();

        String ItemUOMId = CheckValidItmId(itemID);
        Number mrpPrice = new Number(0);
        Double mrpPc = new Double(0);
        if (mrpTyp.equalsIgnoreCase("a")) {
            mrpPrice = basePrice.add(mrpRate);
        } else if (mrpTyp.equalsIgnoreCase("p")) {
            Number val = (Number) basePrice.mul(mrpRate);
            Number val2 = (Number) val.divide(100);

            mrpPrice = basePrice.add(val2);
        }
        mrpPc = Double.parseDouble(mrpPrice.toString());
        Double basePc = Double.parseDouble(basePrice.toString());
        String catagId = this.getTransAddLovVo1().getCurrentRow().getAttribute("TransAddCatgId").toString();
        String flag = null;
        String driver = getdrivername();
        if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
            flag = (String) callStoredFunctionForAllEo(VARCHAR, "call FN_ins_price(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       sloc_id, cld_id, ho_org_id, org_id, itemID, Eoid.toString(),
                                                       Integer.parseInt(catagId), userid.toString(),
                                                       new Timestamp(nwtime),
                                                       ((ddDate == null) ? null : new Timestamp(ddDate)), ItemUOMId,
                                                       mrprt, mrpTyp, mrpPc, MinPc, priceApply, basePc
            });
        } else {
            flag = (String) callStoredFunctionForAllEo(VARCHAR, "SLS.FN_ins_price(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       sloc_id, cld_id, ho_org_id, org_id, itemID, Eoid.toString(),
                                                       Integer.parseInt(catagId), userid.toString(),
                                                       new Timestamp(nwtime),
                                                       ((ddDate == null) ? null : new Timestamp(ddDate)), ItemUOMId,
                                                       mrpRate, mrpTyp, mrpPrice, MinPrice, priceApply, basePrice
            });
        }
        //  System.out.println("Flag value is:  " + flag);
    }

    public String CheckValidItmId(String itmId) {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String val = null;
        String driver = getdrivername();
        if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
            val = (String) callStoredFunction(Types.VARCHAR, "call SLS_CHECK_ITM_ID(?,?,?,?,?)", new Object[] {
                                              cld_id, sloc_id, ho_org_id, org_id, itmId
            });
        } else {
            val = (String) callStoredFunction(Types.VARCHAR, "SLS.SLS_CHECK_ITM_ID(?,?,?,?,?)", new Object[] {
                                              cld_id, sloc_id, ho_org_id, org_id, itmId
            });
        }
        return val;
    }

    public StringBuffer getPath() {
        //System.out.println(getparamSlocId() + "");
        StringBuffer path = null;
        String driver = getdrivername();
        if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
            path = new StringBuffer((String) callStoredFunction(Types.VARCHAR, " call FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] {
                                                                getparamSlocId() }));
        } else {
            path = new StringBuffer((String) callStoredFunction(Types.VARCHAR, " APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] {
                                                                getparamSlocId() }));
        }
        //System.out.println("path " + path);
        if (path != null) {
            // System.out.println("return path when fucntion called successfully");
            return path;
        } else {
            //System.out.println("return when fucntion not called successfully");
            return new StringBuffer("D:\\DOCS");
        }
    }


    public void deleteOldItmPrice() {
        ViewObjectImpl priceMasterVo = this.getPriceMaster1();
        System.out.println(" ===" + priceMasterVo.getRowCount());
        RowQualifier pMRq = new RowQualifier(priceMasterVo);
        Row pMRow = this.getPriceMaster1().getCurrentRow();
        ViewObjectImpl transAdddLovVo = this.getTransAddLovVo1();
        Row currRow = transAdddLovVo.getCurrentRow();
        Integer catagId = null;
        if (currRow != null) {
            catagId = (Integer) currRow.getAttribute("TransAddCatgId");
        }
        if (pMRow != null) {
            String type = "C";
            String itemID = (String) pMRow.getAttribute("ItmId");
            pMRq.setWhereClause("CldId='" + getparamCldId() + "' and SlocId=" + getparamSlocId() + " and OrgId='" +
                                getparamOrgId() + "' and HoOrgId='" + getparamHoOrgId() + "' and ItmId='" + itemID +
                                "' and CatgId=" + catagId + " and EoPriceType='" + type + "'");
            System.out.println("query for delete  " + pMRq.getExprStr());
            Row fltRow[] = priceMasterVo.getFilteredRows(pMRq);
            System.out.println(" ===" + priceMasterVo.getRowCount());
            System.out.println(" ROW LENGTH :" + fltRow.length);
            if (fltRow.length > 0) {
                System.out.println("set 1");
                for (Row r : fltRow) {
                    r.remove();
                }
            }
        }
    }

    /**
     * Container's getter for PriceMasterVO1.
     * @return PriceMasterVO1
     */
    public PriceMasterVOImpl getPriceMasterVO1() {
        return (PriceMasterVOImpl) findViewObject("PriceMasterVO1");
    }

    public StringBuffer checkIfRateChangeIsValid(String item) {
        StringBuffer s = new StringBuffer("Y");
        ViewObjectImpl impl = this.getSearchLov1();
        Row currentRow = impl.getCurrentRow();
        if (currentRow != null) {
            Object trOrSp = currentRow.getAttribute("TransSpecificOrAllRadio");
            StringBuffer v = (trOrSp == null ? new StringBuffer("") : new StringBuffer(trOrSp.toString()));
            if (v.toString().equals("S")) {
                System.out.println("Val:  " + item);
                if (item == null || "".equals(item.toString())) {
                    s = new StringBuffer("N");
                }
            }
        }
        System.out.println("Returned " + s);
        return s;
    }

    public void filterItmNmLov(String ItmGrp, String catagId, Integer itemId) {
        ViewObjectImpl impl = this.getSearchLov1();
        String grpIdVar = ItmGrp;
        System.out.println("The Itm Grp name in AmImpl is " + ItmGrp);

        ViewObjectImpl pricevo = this.getDistinctPriceMasterVo1();
        pricevo.setNamedWhereClauseParam("GrpIdBind", grpIdVar);
        pricevo.executeQuery();
        ViewCriteria vc = pricevo.getViewCriteria("DistinctPriceMasterVoCriteria2");
        pricevo.applyViewCriteria(vc);
        pricevo.setNamedWhereClauseParam("BindCatagId", catagId);
        pricevo.setNamedWhereClauseParam("BindCldId", getparamCldId());
        pricevo.setNamedWhereClauseParam("BindSlocID", getparamSlocId());
        pricevo.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        pricevo.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        //pricevo.setNamedWhereClauseParam("BindGrpId", grpIdVar);
        pricevo.executeQuery();

        /*         ItemTypeVOImpl itemType1 = this.getItemType1();
        System.out.println("the Itm Grp selected is "+grpIdVar);

        ViewCriteria vcItem = itemType1.getViewCriteria("ItemTypeVOCriteria2");
        itemType1.applyViewCriteria(vcItem);

        itemType1.setNamedWhereClauseParam("BindGrpId", grpIdVar);
        itemType1.setNamedWhereClauseParam("BindHoOrgId", getparamHoOrgId());
        itemType1.setNamedWhereClauseParam("BindCldId", getparamCldId());
        itemType1.setNamedWhereClauseParam("BindOrgId", getparamOrgId());
        itemType1.setNamedWhereClauseParam("BindSlocId", getparamSlocId());
        itemType1.executeQuery();

       */
        // System.out.println("The Value of Itm Desc is "+filteredRows[0].getAttribute("ItmDesc"));
        //impl.executeQuery();

    }

    /**
     * Container's getter for PriceHistForSingleCust1.
     * @return PriceHistForSingleCust1
     */
    public ViewObjectImpl getPriceHistForSingleCust1() {
        return (ViewObjectImpl) findViewObject("PriceHistForSingleCust1");
    }

    /**
     * Container's getter for LovItmGrp1.
     * @return LovItmGrp1
     */
    public LovItmGrpVOImpl getLovItmGrp1() {
        return (LovItmGrpVOImpl) findViewObject("LovItmGrp1");
    }

    /**
     * Container's getter for LovItmGrp2.
     * @return LovItmGrp2
     */
    public LovItmGrpVOImpl getLovItmGrp2() {
        return (LovItmGrpVOImpl) findViewObject("LovItmGrp2");
    }

    /**
     * Container's getter for TempEoWiseEdit1.
     * @return TempEoWiseEdit1
     */
    public ViewObjectImpl getTempEoWiseEdit1() {
        return (ViewObjectImpl) findViewObject("TempEoWiseEdit1");
    }

    public void filterEoPriceForCustomer() {
        ViewObjectImpl temp = this.getTempEoWiseEdit1();
        Row currentRow = temp.getCurrentRow();
        Object itmId = currentRow.getAttribute("ItemIdTrans");
        Object itmGrp = currentRow.getAttribute("ItemGrpIdTrans");
        System.out.println("ItmId : " + itmId + " ItmGrp : " + itmGrp);

        ViewObjectImpl pMaster = this.getPriceMaster2();
        pMaster.setNamedWhereClauseParam("GrpIdBind", (itmGrp == null ? null : itmGrp.toString()));
        pMaster.setNamedWhereClauseParam("BindItemId", (itmId == null ? null : itmId.toString()));
        //pMaster.setNamedWhereClauseParam("BindGrpId", (itmGrp == null ? null : itmGrp.toString()));
        pMaster.executeQuery();
    }

    /**
     * Method to Update Customer wise price
     * @return
     */
    public Boolean saveEoWisePrice() {
        Boolean retVal = true;
        Row[] tempRow = this.getTempEoWiseEdit1().getAllRowsInRange();
        Row r = tempRow[0];

        Object amtPerTransO = r.getAttribute("RateValueTypTrans");
        Object addSubTransO = r.getAttribute("RateAddOrSubTrans");
        Object amtTransO = r.getAttribute("AmountTrans");
        Object effectiveDtTransO = r.getAttribute("EffectiveDtTrans");
        Object itemIdTransO = r.getAttribute("ItemIdTrans");
        Object itemGrpIdTransO = r.getAttribute("ItemGrpIdTrans");
        Object rateChngForTransO = r.getAttribute("RateChngForTrans");
        Object expDtTransO = r.getAttribute("ExpDtTrans");

        ViewObjectImpl custDual = this.getsearchCustDual1();
        Row row = custDual.getCurrentRow();

        Integer catgId = 0;
        Object baseAmtPerTransO = r.getAttribute("BaseValueTypTrans");
        Object baseAddSubTransO = r.getAttribute("BaseRateAddOrSubTrans");
        Object baseAmtTransO = r.getAttribute("BaseAmountTrans");
        Integer eoId = -2;
        Row currentRow = getSLSEoProdPrice_Vw1().getCurrentRow();
        if (currentRow != null) {
            Object eoIdO = currentRow.getAttribute("EoId");
            eoId = (eoIdO == null ? -2 : (Integer) eoIdO);
            Object catgIdO = currentRow.getAttribute("CatgId");
            catgId = (catgIdO == null ? 0 : (Integer) catgIdO);
        }


        Number amt = (amtTransO == null ? new Number(0) : (Number) amtTransO);
        StringBuffer addSub = (addSubTransO == null ? new StringBuffer("") : new StringBuffer(addSubTransO.toString()));
        StringBuffer amtPer = (amtPerTransO == null ? new StringBuffer("") : new StringBuffer(amtPerTransO.toString()));
        StringBuffer rateChngForTrans =
            (rateChngForTransO == null ? new StringBuffer("") : new StringBuffer(rateChngForTransO.toString()));
        StringBuilder itemIdTrans =
            (itemIdTransO == null ? new StringBuilder("") : new StringBuilder(itemIdTransO.toString()));
        StringBuilder itemGrpIdTrans =
            (itemGrpIdTransO == null ? new StringBuilder("") : new StringBuilder(itemGrpIdTransO.toString()));
        StringBuilder baseAmtPerTrans =
            (baseAmtPerTransO == null ? new StringBuilder("") : new StringBuilder(baseAmtPerTransO.toString()));
        StringBuilder baseAddSubTrans =
            (baseAddSubTransO == null ? new StringBuilder("") : new StringBuilder(baseAddSubTransO.toString()));
        Number baseAmtTrans = (baseAmtTransO == null ? new Number(0) : (Number) baseAmtTransO);

        System.out.println(catgId + "AddSub : " + addSub + " AmtPer : " + amtPer + " Amt : " + amt + " EffectiveDt : " +
                           effectiveDtTransO + " ExpDt : " + expDtTransO);

        if (catgId.equals(0)) {
            retVal = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1822']}").toString() // "Please select a Customer Category to change Item Price !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1823']}").toString());
            //"<b>Customer Category is not selected. Please select a Customer Category !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("".equals(rateChngForTrans.toString())) {
            retVal = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1824']}").toString()
                                  // "Please select a Basis to change Item Price !"
                                  + "</p>" + "</b>" + "<ul>" + resolvElDCMsg("#{bundle['MSG.1825']}").toString()
                                  // "<li>For all Items</li>"
                                  +
                                  resolvElDCMsg("#{bundle['MSG.1826']}").toString() +
                                  //"<li>For an Specific Item Group</li>" +
                                  resolvElDCMsg("#{bundle['MSG.1827']}").toString()); // "<li>For an Specific Item</li>" + "</ul>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1828']}").toString()); //"<b>Basis for Price Change is not selected. Please select a Change Basis !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("G".equals(rateChngForTrans.toString()) && "".equals(itemGrpIdTrans.toString())) {
            retVal = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1829']}").toString() + // "Please select an Item Group !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1830']}").toString()); //"<b>Item Group is not selected. Please select an Item Group for which you want to edit price !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("S".equals(rateChngForTrans.toString()) && "".equals(itemIdTrans.toString())) {
            retVal = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1830']}").toString() //"Please select an Item !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1831']}").toString()); //"<b>Item is not selected. Please select an Item for which you want to edit price!");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("".equals(baseAmtPerTrans.toString())) {
            retVal = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1832']}").toString() // "Please select change Amount Type for Base Price !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1833']}").toString()); //"<b>Amount type is not selected. Please select Amount Type !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        } else if ("".equals(baseAddSubTrans.toString())) {
            retVal = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1834']}").toString() // "Please select Add/Sub for Base Amount !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1835']}").toString()); //"<b>Add/Sub is not selected. Please select if you want to Add or Substract Amount from Base Price !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        } else if (baseAmtTrans.compareTo(new Number(0)) < 0) {
            retVal = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1836']}").toString()
                                  // "Amount for change in Base Price is Negative in Value !"
                                  + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1837']}").toString()); //"<b>Amount should be a positive value greater than or equal zero. Please enter a Valid Amount !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("P".equals(baseAmtPerTrans.toString()) && baseAmtTrans.compareTo(new Number(100)) > 0) {
            retVal = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1838']}").toString() // "Percentage value should be less than 100 for changing Base Amount !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1839']}").toString());
            //"<b>Invalid percentage value is selected. Please enter a valid Percentage value!");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (addSub.toString().equals("")) {
            retVal = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1840']}").toString() + //   "MRP Rate Value Change Type is not selected !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1841']}").toString()); //"<b>Price cannot be updated if Change Type is not selected. Please select a Value Change Type  !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        } else if (amtPer.toString().equals("")) {
            retVal = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1842']}").toString()
                                  //    "MRP Rate Add/Sub Type is not selected !" +
                                  + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1843']}").toString()); //"<b>Add/Sub Type need to be selected for updation. Please select a Add/Sub Type !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("P".equals(amtPer.toString()) && amt.compareTo(new Number(100)) > 0) {
            retVal = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1844']}").toString() //"Percentage value should be less than 100 for changing MRP Rate !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1839']}").toString()); //"<b>Invalid percentage value is selected. Please enter a valid Percentage value!");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (amt.compareTo(new Number(0)) < 0) {
            retVal = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1845']}").toString()
                                  // "MRP Rate change amount should be greater than or equal to zero !"
                                  + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1846']}").toString()); //"<b>Amount need to be greater than zero. Please enter a valid Amount  !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (effectiveDtTransO == null) {
            retVal = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1847']}").toString() +
                                  //"Price Effective Date is not selected !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1848']}").toString()); //"<b>Date from which the updated price will be effective, need to be selected. Please select a Price Effective Date !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else {
            /* RowSetIterator itr = this.getPriceMaster2().createRowSetIterator(null);
            while (itr.hasNext()) {
                Row itmRow = itr.next();
                itmRow.setAttribute("EoPriceType","E");
            }
            itr.closeRowSetIterator();
            this.getDBTransaction().postChanges();
            */
            Object flag = null;
            try {
                flag =
                    callStoredFunctionForAllEo(Types.NUMERIC,
                                               "SLS.FN_UPD_EO_PRICE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                               getparamSlocId(), getparamCldId(), getparamHoOrgId(), getparamOrgId(),
                                               itemIdTransO, eoId, itemGrpIdTransO, eocatgId, getparamUsrId(),
                                               effectiveDtTransO, expDtTransO, addSubTransO, amtPerTransO, amt,
                                               baseAddSubTrans.toString(), baseAmtPerTrans.toString(), baseAmtTrans,
                                               r.getAttribute("EoPartNoTrans")
                });

            } catch (Exception e) {
                e.printStackTrace();
                retVal = false;
            }
            System.out.println("Flag : " + flag);
            BigDecimal i = (flag == null ? new BigDecimal(0) : (BigDecimal) flag);

            if (i.compareTo(new BigDecimal(-3)) == 0) {
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><b><p style='color:red'>" +
                                      resolvElDCMsg("#{bundle['MSG.1849']}").toString() +
                                      //   "Effective Date & Time already exist for some of the selected Items !" +
                                      "</p></b>");
                saveMsg.append(resolvElDCMsg("#{bundle['MSG.1850']}").toString() +
                    //"<b>The Effective Date for some of the Items Selected for Updation Confilicts with the effective date already saved in the Application with those Items. " +
                    "," +
                    resolvElDCMsg("#{bundle['MSG.1851']}").toString()); // "There cannot be Two Item Price on same Date & Time. Please select some other Effective Date and Time!");
                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext.getCurrentInstance().addMessage(null, msg);
                retVal = false;
            } else if (i.compareTo(new BigDecimal(-2)) == 0) {
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><b><p style='color:red'>" +
                                      resolvElDCMsg("#{bundle['MSG.1852']}").toString() +
                                      //  "Minimum Price cannot be less that Item Price !"
                                      "</p></b>");
                saveMsg.append(resolvElDCMsg("#{bundle['MSG.1853']}").toString());
                //"<b>Newly Calculated Price for some Item or Items is less that Minimum Price of respective Items. So cannot Update Price !");
                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext.getCurrentInstance().addMessage(null, msg);
                retVal = false;
            } else if (i.compareTo(new BigDecimal(1)) == 0) {
                retVal = true;

                //filterDistinctVO();
            } else {
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><b><p style='color:red'>" +
                                      resolvElDCMsg("#{bundle['MSG.1854']}").toString() +
                                      // "There have been some error in Updating Item Price !" +
                                      "</p></b>");
                saveMsg.append(resolvElDCMsg("#{bundle['MSG.1855']}").toString()); //"<b>Please try again. If problem persists please contact ESS!");
                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext.getCurrentInstance().addMessage(null, msg);
                retVal = false;
            }

        }
        return retVal;
    }

    public void resetValonSaveEoWisePrice() {
        this.getTempEoWiseEdit1().executeQuery();
        ViewObjectImpl pMaster = this.getPriceMaster2();
        pMaster.setNamedWhereClauseParam("GrpIdBind", null);
        pMaster.setNamedWhereClauseParam("BindItemId", null);
        pMaster.setNamedWhereClauseParam("BindGrpId", null);
        pMaster.executeQuery();
    }

    /**
     * Method to update Eo Price of the
     * @return
     */
    public Boolean updatePrice() {
        Boolean b = true;
        TransAddLovVoVOImpl addLovVo = this.getTransAddLovVo1();
        ViewObjectImpl searchLovVo = getSearchLov1();
        Row addLovVoCurrentRow = addLovVo.getCurrentRow();
        Row searchLovVoCurrentRow = searchLovVo.getCurrentRow();

        Object catgIdO = addLovVoCurrentRow.getAttribute("TransAddCatgId");
        Object updTypO = searchLovVoCurrentRow.getAttribute("TransSpecificOrAllRadio");
        Object itmGrpIdO = searchLovVoCurrentRow.getAttribute("TransItmGrpId");
        Object itmIdO = searchLovVoCurrentRow.getAttribute("TransItemId");
        Object amtTypO = searchLovVoCurrentRow.getAttribute("TransAmtTyp");
        Object addOrSubO = searchLovVoCurrentRow.getAttribute("TransAddOrSub");
        Object effectiveDateO = searchLovVoCurrentRow.getAttribute("TransEffectiveDate");
        Object expiryDateO = searchLovVoCurrentRow.getAttribute("TransExpiryDate");
        Object amtO = searchLovVoCurrentRow.getAttribute("TransAmount");
        Object repToAllO = searchLovVoCurrentRow.getAttribute("replicateToAllOrgTrans");


        Object baseAmtTypO = searchLovVoCurrentRow.getAttribute("BaseTransAmtTyp");
        Object baseAOrSubO = searchLovVoCurrentRow.getAttribute("BaseTransAddOrSub");
        Object baseAmtO = searchLovVoCurrentRow.getAttribute("BaseTransAmount");


        Integer catgId = (catgIdO == null ? 0 : (Integer) catgIdO);
        StringBuilder updTyp = (updTypO == null ? new StringBuilder("") : new StringBuilder(updTypO.toString()));
        StringBuilder itmGrpId = (itmGrpIdO == null ? new StringBuilder("") : new StringBuilder(itmGrpIdO.toString()));
        StringBuilder itmId = (itmIdO == null ? new StringBuilder("") : new StringBuilder(itmIdO.toString()));
        StringBuilder amtTyp = (amtTypO == null ? new StringBuilder("") : new StringBuilder(amtTypO.toString()));
        StringBuilder addOrSub = (addOrSubO == null ? new StringBuilder("") : new StringBuilder(addOrSubO.toString()));
        Timestamp effectiveDate = (effectiveDateO == null ? null : (Timestamp) effectiveDateO);
        Timestamp expiryDate = (expiryDateO == null ? null : (Timestamp) expiryDateO);
        Number amt = (amtO == null ? new Number(0) : (Number) amtO);
        StringBuilder baseAmtTyp =
            (baseAmtTypO == null ? new StringBuilder("") : new StringBuilder(baseAmtTypO.toString()));
        StringBuilder baseAOrSub =
            (baseAOrSubO == null ? new StringBuilder("") : new StringBuilder(baseAOrSubO.toString()));
        Number baseAmt = (baseAmtO == null ? new Number(0) : (Number) baseAmtO);
        StringBuilder repToAll = (repToAllO == null ? new StringBuilder("N") : new StringBuilder(repToAllO.toString()));
        System.out.println("Replicate to all : " + repToAll);
        //System.out.println("Comparision : "+effectiveDate.compareTo(expiryDate));
        if (catgId.equals(0)) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1822']}").toString() + //"Please select a Customer Category to change Item Price !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1823']}").toString()); //"<b>Customer Category is not selected. Please select a Customer Category !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("".equals(updTyp.toString())) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1824']}").toString() + // "Please select a Basis to change Item Price !" +
                                  "</p>" + "</b>" + "<ul>" + resolvElDCMsg("#{bundle['MSG.1825']}").toString() + //"<li>For all Items</li>" +
                                  "<li>" + resolvElDCMsg("#{bundle['MSG.1826']}").toString() + //For an Specific Item Group</li>"
                                  resolvElDCMsg("#{bundle['MSG.1827']}").toString()
                                  // "<li>For an Specific Item</li>"
                                  + "</ul>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1828']}").toString()); //"<b>Basis for Price Change is not selected. Please select a Change Basis !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("G".equals(updTyp.toString()) && "".equals(itmGrpId.toString())) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1829']}").toString() + //"Please select an Item Group !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1830']}").toString()); //"<b>Item Group is not selected. Please select an Item Group for which you want to edit price !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("S".equals(updTyp.toString()) && "".equals(itmId.toString())) {
            b = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1856']}").toString() //"Please select an Item !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1831']}").toString()); //"<b>Item is not selected. Please select an Item for which you want to edit price!");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("".equals(baseAmtTyp.toString())) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1832']}").toString()); //"Please select change Amount Type for Base Price !" + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1833']}").toString()); //"<b>Amount type is not selected. Please select Amount Type !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        } else if ("".equals(baseAOrSub.toString())) {
            b = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1834']}").toString() //"Please select Add/Sub for Base Amount !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1835']}").toString()); //"<b>Add/Sub is not selected. Please select if you want to Add or Substract Amount from Base Price !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        } else if (baseAmt.compareTo(new Number(0)) < 0) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1836']}").toString() + // "Amount for change in Base Price is Negative in Value !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1857']}").toString()); //"<b>Amount should be a positive value greater than zero. Please enter a Valid Amount !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("P".equals(baseAmtTyp.toString()) && baseAmt.compareTo(new Number(100)) > 0) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1857']}").toString() + // "Percentage value should be less than 100 for changing Base Amount !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1839']}").toString()); //"<b>Invalid percentage value is selected. Please enter a valid Percentage value!");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }

        //
        else if ("".equals(amtTyp.toString())) {
            b = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1858']}").toString() //"Please select Amount Type for MRP Rate change !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1833']}").toString()); //"<b>Amount type is not selected. Please select Amount Type !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        } else if ("".equals(addOrSub.toString())) {
            b = false;
            StringBuilder saveMsg = new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1859']}").toString() //+ "Please select Add/Sub for MRP Rate !"
                                                      + "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1860']}").toString()); //"<b>Add/Sub is not selected. Please select if you want to Add or Substract Amount from Price !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);

        } else if (amt.compareTo(new Number(0)) < 0) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1861']}").toString() + // "Amount for change in MRP Rate change is Negative in Value !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1857']}").toString()); //"<b>Amount should be a positive value greater than zero. Please enter a Valid Amount !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if ("P".equals(amtTyp.toString()) && amt.compareTo(new Number(100)) > 0) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1862']}").toString() + //"Percentage value should be less than 100 for changing MRP Rate  !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1839']}").toString()); //"<b>Invalid percentage value is selected. Please enter a valid Percentage value!");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (effectiveDate == null) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1863']}").toString() + //"Effective Date cannot be blank !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1864']}").toString()); //"<b>Effective date is not selected. Please enter an Effective Date !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (effectiveDate.compareTo(expiryDate) > 0) {
            b = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  resolvElDCMsg("#{bundle['MSG.1865']}").toString() +
                                  //"Expiry Date cannot be less that Effective Date !" +
                                  "</p></b>");
            saveMsg.append(resolvElDCMsg("#{bundle['MSG.1866']}").toString()); //"<b>Expiry date is not valid. Please enter a valid Expiry Date !");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else {
            /* FUNCTION FN_UPD_eo_PRICE(
            P_SLOC_ID        NUMBER,
            P_CLD_ID         VARCHAR2,
            P_HO_ORG_ID      VARCHAR2,
            P_ORG_ID         VARCHAR2,
            P_ITM_ID         VARCHAR2,
            P_EO             VARCHAR2 DEFAULT 0,
            P_GRP_ID         VARCHAR2,
            P_CATG           NUMBER,
            P_USR            VARCHAR2,
            P_EFFECTIVE_DT   TIMESTAMP,
            P_EXP_DT         TIMESTAMP,
            P_UPD_TYPE        VARCHAR2,
            P_UPD_VAL_TYPE   VARCHAR2,
            P_UPD_AMT        NUMBER
        ) */

            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            Object flag = null;
            BigDecimal i = BigDecimal.ZERO;
            StringBuilder r = new StringBuilder("");
            if ("Y".equals(repToAll.toString())) {
                ViewObjectImpl allOrgInHoVo1 = getAllOrgInHoVo1();
                allOrgInHoVo1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                allOrgInHoVo1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                allOrgInHoVo1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                allOrgInHoVo1.executeQuery();

                RowSetIterator ctr = allOrgInHoVo1.createRowSetIterator(null);
                while (ctr.hasNext()) {
                    Row row = ctr.next();
                    try {
                        flag =
                            callStoredFunctionForAllEo(Types.NUMERIC,
                                                       "SLS.FN_UPD_EO_PRICE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       getparamSlocId(), getparamCldId(), getparamHoOrgId(),
                                                       row.getAttribute("OrgId"), itmId.toString(), null,
                                                       itmGrpId.toString(), catgId, getparamUsrId(), effectiveDate,
                                                       expiryDate, addOrSub.toString(), amtTyp.toString(), amt,
                                                       baseAOrSub.toString(), baseAmtTyp.toString(), baseAmt,
                                                       searchLovVoCurrentRow.getAttribute("EoPartNoTrans")
                        });
                        i = (flag == null ? new BigDecimal(0) : (BigDecimal) flag);
                        if (i.compareTo(BigDecimal.ONE) != 0) {
                            b = false;
                            break;
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        b = false;
                        break;
                    }
                }
                ctr.closeRowSetIterator();
            } else {

                try {
                    flag =
                        callStoredFunctionForAllEo(Types.NUMERIC,
                                                   "SLS.FN_UPD_EO_PRICE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   getparamSlocId(), getparamCldId(), getparamHoOrgId(),
                                                   getparamOrgId(), itmId.toString(), null, itmGrpId.toString(), catgId,
                                                   getparamUsrId(), effectiveDate, expiryDate, addOrSub.toString(),
                                                   amtTyp.toString(), amt, baseAOrSub.toString(), baseAmtTyp.toString(),
                                                   baseAmt, searchLovVoCurrentRow.getAttribute("EoPartNoTrans")
                    });
                    i = (flag == null ? new BigDecimal(0) : (BigDecimal) flag);
                } catch (Exception e) {
                    e.printStackTrace();
                    b = false;
                }
            }
            /////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


            ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
            System.out.println("Flag : " + flag);


            if (i.compareTo(new BigDecimal(-3)) == 0) {
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><b><p style='color:red'>" +
                                      resolvElDCMsg("#{bundle['MSG.1849']}").toString() + // "Effective Date & Time already exist for some of the selected Items !" +
                                      "</p></b>");
                saveMsg.append(resolvElDCMsg("#{bundle['MSG.1850']}").toString() +
                    //"<b>The Effective Date for some of the Items Selected for Updation Confilicts with the effective date already saved in the Application with those Items. " +
                    resolvElDCMsg("#{bundle['MSG.1851']}").toString()); //  "There cannot be Two Item Price on same Date & Time. Please select some other Effective Date and Time!");
                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext.getCurrentInstance().addMessage(null, msg);
                b = false;
            } else if (i.compareTo(new BigDecimal(-2)) == 0) {
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><b><p style='color:red'>" + resolvElDCMsg("#{bundle['MSG.1852']}") + //"Minimum Price cannot be less that Item Price !" +
                                      "</p></b>");
                saveMsg.append(resolvElDCMsg("#{bundle['MSG.1853']}")); //"<b>Newly Calculated Price for some Item or Items is less than Minimum Price of respective Items. So cannot Update Price !");
                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext.getCurrentInstance().addMessage(null, msg);
                b = false;
            } else if (i.compareTo(new BigDecimal(1)) == 0) {
                b = true;
                filterDistinctVO();
            } else {
                StringBuilder saveMsg =
                    new StringBuilder("<html><body><b><p style='color:red'>" +
                                      resolvElDCMsg("#{bundle['MSG.1854']}").toString() +
                                      //"There have been some error in Updating Item Price !" +
                                      "</p></b>");
                saveMsg.append(resolvElDCMsg("#{bundle['MSG.1855']}").toString()); //"<b>Please try again. If problem persists please contact ESS!");
                saveMsg.append("</body></html>");
                FacesMessage msg = new FacesMessage(saveMsg.toString());
                msg.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext.getCurrentInstance().addMessage(null, msg);
                b = false;
            }
        }
        return b;
    }

    /**
     *  Method to filter the Distinct Vo on selection of each attribute
     */
    public void filterDistinctVO() {
        Row transAddLotRow = getTransAddLovVo1().getCurrentRow();
        Object catgIdO = transAddLotRow.getAttribute("TransAddCatgId");

        Row searchRow = this.getSearchLov1().getCurrentRow();
        Object itmIdO = searchRow.getAttribute("TransItemId");
        Object itmGrpIdO = searchRow.getAttribute("TransItmGrpId");
        System.out.println("Executing Distinct vo with : CatgId |" + catgIdO + " ItemId | ItemId " + itmIdO +
                           " ItemGrpId | " + itmGrpIdO);
        DistinctPriceMasterVoImpl distinctPrice = this.getDistinctPriceMasterVo1();
        distinctPrice.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        distinctPrice.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        distinctPrice.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        distinctPrice.setNamedWhereClauseParam("HoOrgBind", EbizParams.GLBL_HO_ORG_ID());
        distinctPrice.setNamedWhereClauseParam("ItmIdBind", itmIdO);
        distinctPrice.setNamedWhereClauseParam("CatgIdBind", catgIdO);
        distinctPrice.setNamedWhereClauseParam("GrpIdBind", itmGrpIdO);
        distinctPrice.setNamedWhereClauseParam("EoIdBind", null);
        distinctPrice.executeQuery();
    }

    /**
     * Method to search on Distinct Vo on Search Button
     */
    public void searchDisctinctVo() {
        Row searchRow = this.getSearchTempVO1().getCurrentRow();
        getTransAddLovVo1().executeQuery();
        Object catgIdO = searchRow.getAttribute("CatgTrans");
        Object itmIdO = searchRow.getAttribute("ItmIdTrans");
        Object partyIdO = searchRow.getAttribute("EoIdTrans");
        System.out.println("Executing with catgId : " + catgIdO + " itmIdO : " + itmIdO + " eoId : " + eoEoId);
        DistinctPriceMasterVoImpl distinctPrice = this.getDistinctPriceMasterVo1();
        distinctPrice.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        distinctPrice.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        distinctPrice.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        distinctPrice.setNamedWhereClauseParam("HoOrgBind", EbizParams.GLBL_HO_ORG_ID());
        distinctPrice.setNamedWhereClauseParam("ItmIdBind", itmIdO);
        distinctPrice.setNamedWhereClauseParam("CatgIdBind", catgIdO);
        distinctPrice.setNamedWhereClauseParam("GrpIdBind", null);
        distinctPrice.setNamedWhereClauseParam("EoIdBind", partyIdO);
        distinctPrice.executeQuery();
    }

    /**
     * Method to reset on Distinct Vo on Search Button
     */
    public void resetDisctinctVo() {
        DistinctPriceMasterVoImpl distinctPrice = this.getDistinctPriceMasterVo1();
        /* distinctPrice.setNamedWhereClauseParam("SlocIdBind", slocIdO);
        distinctPrice.setNamedWhereClauseParam("CldIdBind", cldIdO);
        distinctPrice.setNamedWhereClauseParam("OrgIdBind", orgIdO);
        distinctPrice.setNamedWhereClauseParam("HoOrgBind", hoOrgIdO);
         */distinctPrice.setNamedWhereClauseParam("ItmIdBind", null);
        distinctPrice.setNamedWhereClauseParam("CatgIdBind", null);
        distinctPrice.setNamedWhereClauseParam("GrpIdBind", null);
        distinctPrice.setNamedWhereClauseParam("EoIdBind", -2);
        distinctPrice.executeQuery();
        this.getSearchTempVO1().executeQuery();
    }


    /**
     * Container's getter for TemItmAddVo1.
     * @return TemItmAddVo1
     */
    public ViewObjectImpl getTemItmAddVo1() {
        return (ViewObjectImpl) findViewObject("TemItmAddVo1");
    }

    /**
     * Method to add Item in Customer price Vo
     * @return
     * Returns a Integer on whose basis validation is shown in the Popup in the page.
     * If i throw a FacesMessage if will be shown behind the popup so Message is being thrown so that
     * 0 : Returned true
     * 1 : Item not selected.
     * 2 : Effective Date.
     * 3 : Expiry Date.
     * 4 : Base Price.
     * 5 : Minimum Price.
     * 6 : MRP Rate Type
     * 7 : MRP Rate
     * 8 : Invalid MRP Rate
     * 9 : Addition Amount have invalid Precision
     * 10 : Final MRP should not be less than Minimum Price
     * -1 : When error appears
     * 11 : Category not Selected
     */
    public Integer addItemPrice() {
        Integer i = 0;
        ViewObjectImpl addVo = this.getTemItmAddVo1();
        Row currentRow = addVo.getCurrentRow();
        Object ItmIdTransO = currentRow.getAttribute("ItmIdTrans");
        Object EoPartNoTransO = currentRow.getAttribute("EoPartNoTrans");
        Object EffectiveDtTransO = currentRow.getAttribute("EffectiveDtTrans");
        Object ExpiryDtTransO = currentRow.getAttribute("ExpiryDtTrans");
        Object BasePriceTransO = currentRow.getAttribute("BasePriceTrans");
        Object MinPriceTransO = currentRow.getAttribute("MinPriceTrans");
        Object MrpRateTypTransO = currentRow.getAttribute("MrpRateTypTrans");
        Object MrpRateTransO = currentRow.getAttribute("MrpRateTrans");
        Object MrpTransO = currentRow.getAttribute("MrpTrans");
        Object ItmUomTransO = currentRow.getAttribute("ItmUomTrans");
        Object PopEoCatgIdTransO = currentRow.getAttribute("PopEoCatgIdTrans");
        Object PopUpEoIdTransO = currentRow.getAttribute("PopUpEoIdTrans");
        Object PopUpRepToAllOrg = currentRow.getAttribute("ReplicateToAllOrg");


        StringBuilder ItmIdTrans =
            (ItmIdTransO == null ? new StringBuilder("") : new StringBuilder(ItmIdTransO.toString()));
        Timestamp EffectiveDtTrans = (Timestamp) EffectiveDtTransO;
        Timestamp ExpiryDtTrans = (Timestamp) ExpiryDtTransO;
        Number BasePriceTrans = (BasePriceTransO == null ? new Number(0) : (Number) BasePriceTransO);
        Number MinPriceTrans = (MinPriceTransO == null ? new Number(0) : (Number) MinPriceTransO);
        StringBuilder MrpRateTypTrans =
            (MrpRateTypTransO == null ? new StringBuilder("") : new StringBuilder(MrpRateTypTransO.toString()));
        Number MrpRateTrans = (MrpRateTransO == null ? new Number(0) : (Number) MrpRateTransO);
        Number MrpTrans = (MrpTransO == null ? new Number(0) : (Number) MrpTransO);
        StringBuilder ItmUomTrans =
            (ItmUomTransO == null ? new StringBuilder("") : new StringBuilder(ItmUomTransO.toString()));
        Integer PopEoCatgIdTrans = (PopEoCatgIdTransO == null ? 0 : (Integer) PopEoCatgIdTransO);
        Integer PopUpEoIdTrans = (PopUpEoIdTransO == null ? null : (Integer) PopUpEoIdTransO);
        StringBuilder RepToAllOrg =
            (PopUpRepToAllOrg == null ? new StringBuilder("N") : new StringBuilder(PopUpRepToAllOrg.toString()));

        if (PopEoCatgIdTrans == 0 && PopUpEoIdTrans != null) {

        }

        System.out.println("Effective Date : " + EffectiveDtTrans);
        System.out.println("Expiry Date : " + ExpiryDtTrans);
        System.out.println("Replicate to all : " + PopUpRepToAllOrg + "|" + PopUpRepToAllOrg);

        if (PopEoCatgIdTrans.equals(0)) {
            i = 11;
        } else if ("".equals(ItmIdTrans.toString())) {
            i = 1;
        } else if (EffectiveDtTrans == null) {
            i = 2;
        } else if (BasePriceTrans.compareTo(new Number(0)) <= 0) {
            i = 4;
        } else if (MinPriceTrans.compareTo(BasePriceTrans) == -1) {
            i = 5;
        } else if ("".equals(MrpRateTypTrans)) {
            i = 6;
        } else if (MrpRateTrans.compareTo(new Number(0)) < 0) {
            i = 7;
        } else if ((MrpRateTypTrans.toString().equals("P") && MrpRateTrans.compareTo(new Number(100)) > 0)) {
            i = 8;
        } else if (MrpTrans.compareTo(MinPriceTrans) < 0) {
            i = 10;
        } else {
            Number n = (BasePriceTrans.add(MrpRateTrans));
            n = (Number) n.round(EbizParams.GLBL_AMT_DIGIT());
            if (!isPrecisionValid(26, 6, n)) {
                i = 9;
            } else {
                StringBuilder r = new StringBuilder("");
                if ("Y".equals(RepToAllOrg.toString())) {
                    ViewObjectImpl allOrgInHoVo1 = getAllOrgInHoVo1();
                    allOrgInHoVo1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                    allOrgInHoVo1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                    allOrgInHoVo1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                    allOrgInHoVo1.executeQuery();

                    RowSetIterator ctr = allOrgInHoVo1.createRowSetIterator(null);
                    while (ctr.hasNext()) {
                        Row row = ctr.next();
                        Object flag = null;
                        try {
                            flag =
                                callStoredFunctionForAllEo(VARCHAR,
                                                           "SLS.FN_INS_PRICE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                           EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                           EbizParams.GLBL_HO_ORG_ID(), row.getAttribute("OrgId"),
                                                           ItmIdTrans.toString(), PopUpEoIdTrans, PopEoCatgIdTrans,
                                                           EbizParams.GLBL_APP_USR(), EffectiveDtTrans, ExpiryDtTrans,
                                                           (ItmUomTransO == null ? null : ItmUomTransO.toString()),
                                                           MrpRateTrans, MrpRateTypTrans.toString(), MrpTrans,
                                                           MinPriceTrans, "N", BasePriceTrans, EoPartNoTransO
                            });
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        r = (flag == null ? new StringBuilder("") : new StringBuilder(flag.toString()));
                        if (!"INSERTED".equals(r.toString())) {
                            i = -1;
                            break;
                        }
                    }
                    ctr.closeRowSetIterator();
                } else {
                    Object flag = null;
                    try {
                        flag =
                            callStoredFunctionForAllEo(VARCHAR, "SLS.FN_INS_PRICE(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                       ItmIdTrans.toString(), PopUpEoIdTrans, PopEoCatgIdTrans,
                                                       EbizParams.GLBL_APP_USR(), EffectiveDtTrans, ExpiryDtTrans,
                                                       (ItmUomTransO == null ? null : ItmUomTransO.toString()),
                                                       MrpRateTrans, MrpRateTypTrans.toString(), MrpTrans,
                                                       MinPriceTrans, "N", BasePriceTrans, EoPartNoTransO
                        });
                    } catch (Exception e) {
                        e.printStackTrace();
                    }

                    r = (flag == null ? new StringBuilder("") : new StringBuilder(flag.toString()));
                    if (!"INSERTED".equals(r.toString())) {
                        i = -1;
                    }
                }

                System.out.println("Function returned : " + r);
                if ("INSERTED".equals(r.toString())) {
                    try {
                        getDBTransaction().commit();
                        i = 0;
                        TransAddLovVoVOImpl addLovVo1 = this.getTransAddLovVo1();
                        Row[] allRowsInRange = addLovVo1.getAllRowsInRange();
                        allRowsInRange[0].setAttribute("TransAddCatgId", PopEoCatgIdTrans);
                        filterDistinctVO();
                    } catch (Exception e) {
                        i = -1;
                        e.printStackTrace();
                    }
                } else {
                    i = -1;
                }
            }
            System.out.println("Function Called !");
        }
        return i;
    }

    public Object resolvElAmt(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object digit = 2;
        if (valueExp != null) {
            digit = valueExp.getValue(elContext);
        }
        if (digit == null) {
            digit = 2;
        }
        //  System.out.println("Amount digit is--->" + digit);
        return digit;
    }

    public void resetAddVO() {
        //this.getDBTransaction().rollback();
        System.out.println("Resetting values");
        this.getTemItmAddVo1().executeQuery();
    }

    /**
     * Container's getter for SearchTempVO1.
     * @return SearchTempVO1
     */
    public ViewObjectImpl getSearchTempVO1() {
        return (ViewObjectImpl) findViewObject("SearchTempVO1");
    }

    public void saveRecord() {
        this.getDBTransaction().commit();
        this.getSearchLov1().executeQuery();
        this.getTransAddLovVo1().executeQuery();
    }

    public void cancelChanges() {
        this.getDBTransaction().rollback();
        this.getSearchLov1().executeQuery();
        this.getTransAddLovVo1().executeQuery();
        resetDisctinctVo();
    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    public void updateDataFromExcel() {
        PriceMasterVOImpl priceMasterVO = this.getPriceMaster2();
        Object updatedRows = null;
        if (resolvEl("#{pageFlowScope.InsertionRows}") != null) {
            System.out.println("not null updated rows");
            updatedRows = resolvEl("#{pageFlowScope.InsertionRows}");
        }

        System.out.println("row :" + updatedRows);
        Integer custIdVar = null;
        Integer catgIdVar = null;
        String itemIdVar = null;
        String itemUomVar = null;
        Number minPriceVar = null;
        Number mrpVar = null;
        Number totMrpRateVar = null;
        String expiryDateVar = null;
        String effectiveDateVar = null;
        Number basePriceVar = null;
        String partNoVar = null;
        if (updatedRows != null) {
            System.out.println("rows are not null");
            //   List<UpdatedData> list = (List<UpdatedData>) updatedRows;
            List datalist = (List) updatedRows;
            ListIterator iterator = datalist.listIterator();
            while (iterator.hasNext()) {
                List e = (List) iterator.next();
                try {
                    minPriceVar = e.get(12) == null ? new Number(0) : new Number(e.get(12));
                    mrpVar = e.get(11) == null ? new Number(0) : new Number(e.get(11));
                    totMrpRateVar = e.get(24) == null ? new Number(0) : new Number(e.get(24));
                    basePriceVar = e.get(18) == null ? new Number(0) : new Number(e.get(18));
                } catch (SQLException f) {
                    f.printStackTrace();
                }
                itemIdVar = e.get(7) == null ? " " : e.get(7).toString();
                System.out.println("itemIdVar :: " + itemIdVar);
                Double tmpCatId = (Double) e.get(5);
                catgIdVar = e.get(5) == null ? null : tmpCatId.intValue(); 
                Double tmpCustId = (Double) e.get(4);;
                custIdVar = e.get(4) == null ? null : tmpCustId.intValue();
                itemUomVar = e.get(8) == null ? " " : e.get(8).toString();

                expiryDateVar = e.get(19) == null ? " " : getConvertTimeStampToStr(e.get(19).toString());
                effectiveDateVar = e.get(6) == null ? " " : getConvertTimeStampToStr(e.get(6).toString());
                System.out.println("effectiveDateVar:::: " + effectiveDateVar);

                partNoVar = e.get(21) == null ? " " : e.get(21).toString();
                Timestamp t = new Timestamp(System.currentTimeMillis());
                RowQualifier rowQualifier = new RowQualifier(priceMasterVO);
                // filtering data using method setWhereClause
                rowQualifier.setWhereClause("CatgId=" + catgIdVar + " AND EoId=" + custIdVar + " AND ItmId='" +
                                            itemIdVar + "'");

                // use method getFilteredRows to return Row[] type after filter.
                Row[] filteredRows = priceMasterVO.getFilteredRows(rowQualifier);
                System.out.println("filteredRows :::: " + filteredRows.length);
                if (filteredRows.length > 0) {
                    System.out.println("Inside filered rowsV ::::");
                    if (minPriceVar.compareTo((basePriceVar.add(totMrpRateVar))) <= 0) {
                        System.out.println("Inside first if");
                        /* if (currDateVar.toString().compareTo(effectiveDateVar) <= 0 || effectiveDateVar.compareTo(expiryDateVar)<0) { */
                        System.out.println("Inside Last if:::");
                        filteredRows[0].setAttribute("CatgId", catgIdVar);
                        filteredRows[0].setAttribute("EffectiveDt",
                                                     new oracle.jbo.domain.Timestamp(effectiveDateVar + " " +
                                                                                     t.toString().substring(11, 19)));
                        filteredRows[0].setAttribute("EoId", custIdVar);
                        filteredRows[0].setAttribute("ItmUom", itemUomVar);
                        filteredRows[0].setAttribute("MinPrice", minPriceVar);
                        filteredRows[0].setAttribute("BasePrice", basePriceVar);
                        filteredRows[0].setAttribute("ExpiryDt",
                                                     expiryDateVar == " " ? " " :
                                                     new oracle.jbo.domain.Timestamp(expiryDateVar + " " +
                                                                                     t.toString().substring(11, 19)));
                        filteredRows[0].setAttribute("EoPartNo", partNoVar);
                        filteredRows[0].setAttribute("TotMrpRate", totMrpRateVar);
                        filteredRows[0].setAttribute("MrpPrice", mrpVar);

                        priceMasterVO.executeQuery();


                    }
                }
            }
        }
    }

    private String getConvertTimeStampToStr(String str) {
        SimpleDateFormat format = new SimpleDateFormat("dd-MMM-yy");
        Date dt = null;
        try {
            dt = format.parse(str);
        } catch (ParseException e) {
            System.out.println("Exception Caught=" + e.getStackTrace());
        }
        SimpleDateFormat newFormat = new SimpleDateFormat("yyyy-MM-dd");
        System.out.println(dt + " <<<<<<<<<<<<<== Time to string");
        System.out.println(newFormat.format(dt) + " <<<<<<<<<<<<<== Time wiht new format ");
        return newFormat.format(dt);
    }

    /**
     * Method to set category id on customer selection on ADD
     */
    public void setCatgIdOnEoNm(String EoNm) {
        Row currentRow = this.getTemItmAddVo1().getCurrentRow();
        Object eoId = currentRow.getAttribute("PopUpEoIdTrans");
        Object catgId = currentRow.getAttribute("PopUpEoTempCatgTrans");
        System.out.println("EoId : " + eoId);
        System.out.println("Category : " + catgId);
        currentRow.setAttribute("PopEoCatgIdTrans", catgId);
        RowSet r = (RowSet) currentRow.getAttribute("LovEoIdVo1");
        r.executeQuery();
        currentRow.setAttribute("PopUpEoIdTrans", eoId);
        currentRow.setAttribute("PopUpEoNmTrans", EoNm);


    }

    public void updateDataFromExcelInDistictPriceMasterVO() {
        PriceMasterVOImpl priceMasterVO = this.getPriceMasterForExcelUpdateVO();
        Row currentRow = getTransAddLovVo1().getCurrentRow();
        priceMasterVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        priceMasterVO.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        priceMasterVO.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        priceMasterVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        priceMasterVO.setNamedWhereClauseParam("CatgIdBind", currentRow.getAttribute("TransAddCatgId"));
        priceMasterVO.executeQuery();
        Object updatedRows = null;
        if (resolvEl("#{pageFlowScope.InsertionRows}") != null) {
            System.out.println("not null updated rows");
            updatedRows = resolvEl("#{pageFlowScope.InsertionRows}");
        }

        System.out.println("row :|" + updatedRows);
        if (updatedRows != null) {
            System.out.println("rows are not null");
            //   List<UpdatedData> list = (List<UpdatedData>) updatedRows;
            List datalist = (List) updatedRows;
            ListIterator iterator = datalist.listIterator();
            while (iterator.hasNext()) {
                //    Timestamp t = new Timestamp(System.currentTimeMillis());
                Timestamp t = StaticValue.getCurrDtWidTimestamp();
                System.out.println(t + " ================= Current Time");
                List e = (List) iterator.next();
                System.out.println("Row is : " + e);
                Object eoIdO = e.get(4);
                Object catgIdO = e.get(5);
                Object effetiveDtO = e.get(6);
                Object itmIdO = e.get(7);
                Object mrpPriceO = e.get(11);
                Object minPriceO = e.get(12);
                Object basePriceO = e.get(18);
                Object expDtO = e.get(19);
                Object eoPartNoO = e.get(21);
                Object totMrpRateO = e.get(24);
                System.out.println("total Mrp Rate : " + totMrpRateO);


                Number mrpPrice = null;
                Number minPrice = null;
                Number totMrpRate = null;
                Number basePrice = null;

                try {
                    mrpPrice = (mrpPriceO == null ? StaticValue.NUMBER_ZERO : new Number(mrpPriceO));
                    minPrice = (minPriceO == null ? StaticValue.NUMBER_ZERO : new Number(minPriceO));
                    basePrice = (basePriceO == null ? StaticValue.NUMBER_ZERO : new Number(basePriceO));
                    totMrpRate = (totMrpRateO == null ? StaticValue.NUMBER_ZERO : new Number(totMrpRateO));

                } catch (SQLException f) {
                    f.printStackTrace();
                }
                String effectiveDtStr = (effetiveDtO == null ? null : getConvertTimeStampToStr(effetiveDtO.toString()));
                System.out.println(effectiveDtStr + " <<======= string needs to convert to Timestamp");
                String tmpEffDt = effectiveDtStr + " " + t.toString().substring(11, 19);
                System.out.println(tmpEffDt + " <<======= with stamp time string needs to convert to Timestamp");
                Timestamp effetiveDt = (effectiveDtStr == null ? null : new oracle.jbo.domain.Timestamp(tmpEffDt));
                String expDtStr = (expDtO == null ? null : getConvertTimeStampToStr(expDtO.toString()));
                Timestamp expDt =
                    (expDtStr == null ? null :
                     new oracle.jbo.domain.Timestamp(expDtStr + " " + t.toString().substring(11, 19)));

                if (minPrice.compareTo(basePrice.add(mrpPrice)) <= 0) {

                }
                RowQualifier rowQualifier = new RowQualifier(priceMasterVO);
                // filtering data using method setWhereClause
                StringBuilder clause = new StringBuilder("");
                clause = clause.append(" CatgId=");
                clause = clause.append(((Double) catgIdO).intValue());
                clause = clause.append(" AND EoId=");
                clause = clause.append(eoIdO);
                clause = clause.append(" AND ItmId='");
                clause = clause.append(itmIdO);
                clause = clause.append("'");
                System.out.println("Clause : " + clause);
                rowQualifier.setWhereClause(clause.toString());
                Row[] filteredRows = priceMasterVO.getFilteredRows(rowQualifier);
                if (filteredRows.length > 0) {
                    System.out.println("Inside filered rowsV ::::");
                    System.out.println("Condition : " + (minPrice.compareTo(basePrice.add(mrpPrice)) <= 0) + "|" +
                                       (effetiveDt.compareTo(expDt) <= 0) + "|" + (t.compareTo(effetiveDt) <= 0));
                    if (minPrice.compareTo(basePrice.add(mrpPrice)) <= 0 && effetiveDt.compareTo(expDt) <= 0
                        //&& t.compareTo(effetiveDt) <= 0
                        ) {
                        System.out.println("Update_____basePrice :" + basePrice + " MinPrice : " + minPrice +
                                           " TotMrpRate : " + totMrpRate + " MrpPrice : " + mrpPrice);
                        filteredRows[0].setAttribute("EffectiveDt", effetiveDt);
                        filteredRows[0].setAttribute("MinPrice", minPrice);
                        filteredRows[0].setAttribute("BasePrice", basePrice);
                        filteredRows[0].setAttribute("ExpiryDt", expDt);
                        filteredRows[0].setAttribute("EoPartNo", eoPartNoO);
                        filteredRows[0].setAttribute("TotMrpRate", totMrpRate);
                        filteredRows[0].setAttribute("MrpPrice", mrpPrice);
                    }
                }
            }
            getDBTransaction().commit();
            priceMasterVO.executeQuery();
            filterDistinctVO();
        }
    }

    private java.util.Date getConvertDate(String str) {
        java.util.Date d = null;
        SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy");
        try {
            d = format.parse(str);
            System.out.println("Date parsed=" + d);
        } catch (Exception e) {
            System.out.println("Error during parse");
            e.printStackTrace();
        }

        return d;
    }

    /**
     * Container's getter for AllOrgInHoVo1.
     * @return AllOrgInHoVo1
     */
    public ViewObjectImpl getAllOrgInHoVo1() {
        return (ViewObjectImpl) findViewObject("AllOrgInHoVo1");
    }

    /**
     * Container's getter for PriceMasterVO2.
     * @return PriceMasterVO2
     */
    public PriceMasterVOImpl getPriceMasterForExcelUpdateVO() {
        return (PriceMasterVOImpl) findViewObject("PriceMasterForExcelUpdateVO");
    }
}
