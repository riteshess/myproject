package schemepolicyapp.model.service;

import adf.utils.bean.StaticValue;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;


import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowQualifier;

import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;

import schemepolicyapp.model.service.common.SchemePolicyAppAM;
import schemepolicyapp.model.views.AppSchmPlcQueryVOImpl;
import schemepolicyapp.model.views.AppSchmPlcVOImpl;
import schemepolicyapp.model.views.AppSchmPlcVORowImpl;
import schemepolicyapp.model.views.DualTransVOImpl;
import schemepolicyapp.model.views.LOVCustVOImpl;
import schemepolicyapp.model.views.LOVCustVORowImpl;
import schemepolicyapp.model.views.OrgAppSchmPlcVORowImpl;
import schemepolicyapp.model.views.SearchPolicyVORowImpl;
import schemepolicyapp.model.views.SearchVOImpl;
import schemepolicyapp.model.views.plcySearchDualVOImpl;
import schemepolicyapp.model.views.plcySearchDualVORowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 03 11:05:24 PST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SchemePolicyAppAMImpl extends ApplicationModuleImpl implements SchemePolicyAppAM {
    private Integer plcBasisForRefresh;
    private Integer catgIdForRefresh;
    private String schemeIdForRefresh;
    private Integer execIdForRefresh;

    /**
     * This is the default constructor (do not remove).
     */
    public SchemePolicyAppAMImpl() {
    }

    /**
     * Container's getter for AppSchmPlc1.
     * @return AppSchmPlc1
     */
    public AppSchmPlcVOImpl getAppSchmPlc1() {
        return (AppSchmPlcVOImpl) findViewObject("AppSchmPlc1");
    }

    public void filterSchemeSearchView() {

        ViewObjectImpl impl = this.getSearchPolicyVO1();
        impl.setNamedWhereClauseParam("CldIdBind", this.getParamCldId());
        // impl.setNamedWhereClauseParam("SlocIdBind", this.getParamSlocId());
        impl.setNamedWhereClauseParam("SlocIdBind", -1);
        impl.setNamedWhereClauseParam("HoOrgIdBind", this.getParamHoOrgId());
        impl.executeQuery();
    }


    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    private String getParamCldId() {
        Object val = this.resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        if (val != null)
            return val.toString();
        return null;
    }

    private String getParamHoOrgId() {
        Object val = this.resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        if (val != null)
            return val.toString();
        return null;
    }

    private String getParamOrgId() {
        Object val = this.resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        if (val != null)
            return val.toString();
        return null;
    }

    private Integer getParamSlocId() {
        Object val = this.resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        if (val != null)
            return Integer.parseInt(val.toString());
        return null;
    }

    private Integer getParamUsrId() {
        Object val = this.resolvEl("#{pageFlowScope.GLBL_APP_USR}");
        if (val != null)
            return Integer.parseInt(val.toString());
        return null;
    }

    /**
     * Container's getter for plcySearchDual1.
     * @return plcySearchDual1
     */
    public plcySearchDualVOImpl getplcySearchDual1() {
        return (plcySearchDualVOImpl) findViewObject("plcySearchDual1");
    }

    public void filterSearchViewAccordingPara() {
        /*  ViewObjectImpl impl = this.getSearchSchmePolicy1();
        plcySearchDualVOImpl dual1 = this.getplcySearchDual1();
        Row currentRow = dual1.getCurrentRow();
        impl.setNamedWhereClauseParam("arg0", "arg1"); */
    }

    public void setCustToNull() {
        ViewObjectImpl appSchmPlc1 = this.getAppSchmPlc1();
        Row currentRow = appSchmPlc1.getCurrentRow();
        if (currentRow != null) {
            AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
            row.setEoId(null);
            row.setEoNmTrans(null);
            System.out.println("Done...");
        }
    }

    /**
     * Container's getter for DistinctPolicyVO1.
     * @return DistinctPolicyVO1
     */
    public ViewObjectImpl getDistinctPolicyVO1() {
        return (ViewObjectImpl) findViewObject("DistinctPolicyVO1");

    }

    protected Object callStoredFunction(int sqlReturnType, StringBuilder stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, stmt, bindVars, sqlReturnType);
    }

    public void addEntryForCategory(String mode, String replFlg) {
        System.out.println("Mode is:  " + mode);
        ViewObjectImpl appSchmPlc1 = this.getAppSchmPlc1();
        Row currentRow = appSchmPlc1.getCurrentRow();
        if (currentRow != null) {
            try {
                AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
                plcBasisForRefresh = row.getSchmPlcBasis();
                catgIdForRefresh = row.getCatgId();
                schemeIdForRefresh = row.getSchmId();
                execIdForRefresh = 0;
                String grpId = row.getGrpId();
                String itmId = row.getItmId();
                String itmUom = row.getItmUom();
                oracle.jbo.domain.Number minQty = row.getMinQty();
                oracle.jbo.domain.Number maxQty = row.getMaxQty();
                oracle.jbo.domain.Number minAmt = row.getMinAmt();
                oracle.jbo.domain.Number maxAmt = row.getMaxAmt();
                Date validFrom = (row.getValidFrom() == null ? null : row.getValidFrom().dateValue());
                Date validTo = (row.getValidTo() == null ? null : row.getValidTo().dateValue());
                System.out.println("Para are for function: " + this.getParamSlocId() + "\t" + this.getParamCldId() +
                                   "\t" + this.getParamHoOrgId() + "\t" + row.getItmId() + "\t" + null + "\t" +
                                   row.getCatgId() + "\t" + row.getGrpId() + "\t" + row.getItmUom() + "\t" + 0 + "\t" +
                                   row.getSchmPlcBasis() + "\t" + row.getMinQty() + "\t" + row.getMaxQty() + "\t" +
                                   row.getMinAmt() + "\t" + row.getMaxAmt() + "\t" + row.getSchmId() + "\t" +
                                   (row.getValidFrom() == null ? null : row.getValidFrom().dateValue()) + "\t" +
                                   (row.getValidTo() == null ? null : row.getValidTo().dateValue()) + "\t" +
                                   getParamUsrId() + "\t" + "Y");
                if (mode.equalsIgnoreCase("E")) {
                    System.out.println("yes mode is true..!!");
                    getDBTransaction().rollback();
                    appSchmPlc1.executeQuery();
                }

                /*  String str =
                    callStoredFunction(Types.VARCHAR, "APP.FN_INS_SCHM_PLC (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                       this.getParamSlocId(), this.getParamCldId(), this.getParamHoOrgId(),
                                       row.getItmId(), null, row.getCatgId(), row.getGrpId(), row.getItmUom(), 0,
                                       row.getSchmPlcBasis(), row.getMinQty(), row.getMaxQty(), row.getMinAmt(),
                                       row.getMaxAmt(), row.getSchmId(),
                                       (row.getValidFrom() == null ? null : row.getValidFrom().dateValue()),
                                       (row.getValidTo() == null ? null : row.getValidTo().dateValue()),
                                       getParamUsrId(), "N"
                }).toString(); */
                System.out.println("Now para are: " + this.getParamSlocId() + " " + this.getParamCldId() + " " +
                                   this.getParamHoOrgId() + " " + itmId + " " + null + " " + catgIdForRefresh + " " +
                                   grpId + " " + itmUom + " " + 0 + " " + plcBasisForRefresh + " " + minQty + " " +
                                   maxQty + " " + minAmt + " " + maxAmt + " " + schemeIdForRefresh + " " + validFrom +
                                   " " + validTo + " " + getParamUsrId() + " N");
                /*  String str =
                    callStoredFunction(Types.VARCHAR, "APP.FN_INS_SCHM_PLC (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                       this.getParamSlocId(), this.getParamCldId(), this.getParamHoOrgId(), itmId, null,
                                       catgIdForRefresh, grpId, itmUom, 0, plcBasisForRefresh, minQty, maxQty, minAmt,
                                       maxAmt, schemeIdForRefresh, validFrom, validTo, getParamUsrId(), replFlg
                }).toString(); */

                if (mode.equalsIgnoreCase("A")) {
                    currentRow.remove();
                }
                //   System.out.println("Return value form function is: " + str);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    /**
     * Container's getter for LOVOrgVO1.
     * @return LOVOrgVO1
     */
    public ViewObjectImpl getLOVOrgVO1() {
        return (ViewObjectImpl) findViewObject("LOVOrgVO1");
    }

    /**
     * Container's getter for OrgAppSchmPlcVO1.
     * @return OrgAppSchmPlcVO1
     */
    public ViewObjectImpl getOrgAppSchmPlcVO1() {
        return (ViewObjectImpl) findViewObject("OrgAppSchmPlcVO1");
    }

    public void filterSearchView() {
        ViewObjectImpl impl = this.getSearchPolicyVO1();
        plcySearchDualVOImpl dual1 = this.getplcySearchDual1();
        Row currentRow = dual1.getCurrentRow();
        if (currentRow != null) {

            plcySearchDualVORowImpl row = (plcySearchDualVORowImpl) currentRow;

            impl.setNamedWhereClauseParam("SlocIdBind", getParamSlocId());
            impl.setNamedWhereClauseParam("CatgIdBind", row.getCatgId());
            impl.setNamedWhereClauseParam("SchemeBasisBind", row.getSchemeBasisTrans());
            impl.setNamedWhereClauseParam("EoIdBind", row.getEoId());
            impl.setNamedWhereClauseParam("ExceIdBind", row.getSlsManId());
            impl.setNamedWhereClauseParam("ValidFromBind",
                                          (row.getValidFrom() == null ? null : row.getValidFrom().dateValue()));
            impl.setNamedWhereClauseParam("ValidToBind",
                                          (row.getValidTo() == null ? null : row.getValidTo().dateValue()));
            System.out.println("dates are: " + (row.getValidFrom() == null ? null : row.getValidFrom().dateValue()) +
                               "\n" + (row.getValidTo() == null ? null : row.getValidTo().dateValue()));
            impl.executeQuery();
        }
    }

    public void resetSearchView() {
        ViewObjectImpl impl = this.getSearchPolicyVO1();
        impl.setNamedWhereClauseParam("CatgIdBind", null);
        impl.setNamedWhereClauseParam("SlocIdBind", -1);
        impl.setNamedWhereClauseParam("SchemeBasisBind", null);
        impl.setNamedWhereClauseParam("EoIdBind", null);
        impl.setNamedWhereClauseParam("ExceIdBind", null);
        impl.setNamedWhereClauseParam("ValidFromBind", null);
        impl.setNamedWhereClauseParam("ValidToBind", null);
        impl.executeQuery();
        this.getplcySearchDual1().executeQuery();
    }

    /**
     * Container's getter for SearchPolicyVO1.
     * @return SearchPolicyVO1
     */
    public ViewObjectImpl getSearchPolicyVO1() {
        return (ViewObjectImpl) findViewObject("SearchPolicyVO1");
    }

    public void filterSchemPolicyViewBySearchLink() {
        ViewObjectImpl appSchmPlc1 = this.getAppSchmPlc1();
        ViewObjectImpl distinctPolicyVO1 = this.getDistinctPolicyVO1();
        ViewObjectImpl impl = this.getSearchPolicyVO1();
        Row currentRow = impl.getCurrentRow();
        if (currentRow != null) {
            SearchPolicyVORowImpl row = (SearchPolicyVORowImpl) currentRow;
            appSchmPlc1.setNamedWhereClauseParam("CatgIdBind", row.getCatgId());
            appSchmPlc1.setNamedWhereClauseParam("EoIdBind", row.getEoId());
            appSchmPlc1.setNamedWhereClauseParam("ExecIdBind", row.getExecId());
            appSchmPlc1.setNamedWhereClauseParam("PlcBasisBind", row.getSchmPlcBasisId());
            appSchmPlc1.setNamedWhereClauseParam("SchmIdBind", row.getSchmId());
            appSchmPlc1.executeQuery();


            distinctPolicyVO1.setNamedWhereClauseParam("CldIdBInd", getParamCldId());
            distinctPolicyVO1.setNamedWhereClauseParam("SlocIdBind", getParamSlocId());
            distinctPolicyVO1.setNamedWhereClauseParam("HoOrgIdBind", getParamHoOrgId());

            distinctPolicyVO1.setNamedWhereClauseParam("ExecIdBind", row.getExecId());
            distinctPolicyVO1.setNamedWhereClauseParam("CatgIdBind", row.getCatgId());
            distinctPolicyVO1.setNamedWhereClauseParam("PlcBasisBind", row.getSchmPlcBasisId());
            distinctPolicyVO1.setNamedWhereClauseParam("SchmIdBind", row.getSchmId());

            distinctPolicyVO1.executeQuery();
        }
    }


    /**
     * Container's getter for AppSchmPlcVO1.
     * @return AppSchmPlcVO1
     */
    public AppSchmPlcVOImpl getAppSchmPlcVO1() {
        return (AppSchmPlcVOImpl) findViewObject("AppSchmPlcVO1");
    }

    public Integer checkForDuplicateData(Integer plcBasis, String schmId, Integer catgId, Integer eoId,
                                         Integer execId) {
        ViewObjectImpl appSchmPlc1 = this.getschemePolicyForValidationVO1();
        // appSchmPlc1.setRangeSize(-1);
        System.out.println("row count is: " + appSchmPlc1.getRowCount());
        RowQualifier rq = new RowQualifier(appSchmPlc1);
        rq.setWhereClause("CldId = '" + getParamCldId() + "' and SlocId = " + getParamSlocId() + " and HoOrgId = '" +
                          getParamHoOrgId() + "' and SchmPlcBasis = " + plcBasis + " and SchmId = " +
                          (schmId == null ? null : ("'" + schmId + "'")) + " and CatgId = " + catgId + " and EoId = " +
                          eoId + " and  ExecId= " + execId);
        Row[] filteredRows = appSchmPlc1.getFilteredRows(rq);
        System.out.println("Query string is : " + rq.getExprStr());
        return filteredRows.length;
        //  return 0;
    }

    public boolean chkDuplicateplcyBasis(Integer plcId) {
        Row currentRow = this.getAppSchmPlc1().getCurrentRow();
        if (currentRow != null) {
            AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
            Integer rows =
                checkForDuplicateData(plcId, row.getSchmId(), row.getCatgId(), row.getEoId(), row.getExecId());
            System.out.println("Rows are: " + rows);
            if (rows > 0) {
                return true;
            }
        }
        return false;
    }


    public boolean chkDuplicateSchmId(String schmId, String mode) {
        Row currentRow = this.getAppSchmPlc1().getCurrentRow();
        if (currentRow != null) {
            AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
            String OldId = row.getOldSchemId();
            RowSet idVO1 = row.getLOVSchemeIdVO1();
            //            Row[] filteredRows = idVO1.getFilteredRows("SchmId", this.getParamHoOrgId() + schmId);
            Row[] filteredRows = idVO1.getFilteredRows("SchmNm", schmId);
            System.out.println("old Scheme id is: " + OldId);
            if (filteredRows.length > 0) {
                Integer rows =
                    checkForDuplicateData(row.getSchmPlcBasis(), filteredRows[0].getAttribute("DocId").toString(),
                                          row.getCatgId(), row.getEoId(), row.getExecId());
                System.out.println("Rows are for Schm id: " + rows);
                if (mode.equalsIgnoreCase("E") && OldId.equals(filteredRows[0].getAttribute("DocId").toString()))
                    return false;

                if (rows > 0) {
                    return true;
                }
            }
        }
        return false;
    }

    public void replicateDataInAllOrg(String mode) {

        ViewObjectImpl impl = this.getLOVOrgVO1();
        impl.setNamedWhereClauseParam("BindHoOrgId", getParamHoOrgId());
        impl.executeQuery();
        ViewObjectImpl appSchmPlc1 = this.getAppSchmPlc1();
        Row currentRow = appSchmPlc1.getCurrentRow();
        Integer basis = null;
        Integer catgId = null;
        System.out.println("No current row:  ");
        if (currentRow != null) {
            ViewObjectImpl appSchmPlcVO1 = this.getOrgAppSchmPlcVO1();
            AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
            basis = row.getSchmPlcBasis();
            catgId = row.getCatgId();
            if (mode.equalsIgnoreCase("A")) {
                OrgReplication(basis, impl, appSchmPlcVO1, row, catgId);

            } else if (mode.equalsIgnoreCase("E")) {
                RowQualifier rq = new RowQualifier(appSchmPlcVO1);
                rq.setWhereClause("CldId = '" + getParamCldId() + "' and SlocId = " + getParamSlocId() +
                                  " and HoOrgId = '" + getParamHoOrgId() + "' and SchmPlcBasis = " + basis +
                                  " and SchmId = '" + row.getSchmId() + "' and CatgId = " + catgId);

                System.out.println("Filter clause is: " + rq.getExprStr());
                Row[] filteredRows = appSchmPlcVO1.getFilteredRows(rq);
                System.out.println("Rows to remove are: " + filteredRows.length);
                System.out.println("Total rows are: " + appSchmPlcVO1.getRowCount());
                for (Row r : filteredRows) {
                    r.remove();
                }
                appSchmPlcVO1.executeQuery();
                System.out.println("Remain rows are: " + appSchmPlcVO1.getRowCount());
                System.out.println("Data for replication: " + basis + "\t" + impl + "\t" + appSchmPlcVO1 + "\t" + row +
                                   "\t" + catgId);
                OrgReplication(basis, impl, appSchmPlcVO1, row, catgId);
            }
            appSchmPlcVO1.executeQuery();
        }
    }

    public void OrgReplication(Integer basis, ViewObjectImpl impl, ViewObjectImpl appSchmPlcVO1,
                               AppSchmPlcVORowImpl row, Integer catgId) {
        System.out.println("Basis in impl: " + basis);
        if (basis != null) {

            System.out.println("---------------------1");
            ViewObjectImpl custVO1 = this.getLOVCustVO1();
            if (basis.equals(720)) {
                custVO1.setNamedWhereClauseParam("CldIdBind", getParamCldId());
                custVO1.setNamedWhereClauseParam("HoOrgIdBind", getParamHoOrgId());
                custVO1.setNamedWhereClauseParam("SlocIdBind", getParamSlocId());
                custVO1.executeQuery();
            }
            System.out.println("---------------------2");
            RowSetIterator itr = impl.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                if (next.getAttribute("OrgId") != null) {
                    Object OrgId = next.getAttribute("OrgId");
                    if (OrgId != null) {
                        String id = OrgId.toString();
                        if (!basis.equals(720)) {
                            Row createRow = appSchmPlcVO1.createRow();
                            appSchmPlcVO1.insertRow(createRow);
                            OrgAppSchmPlcVORowImpl orgRow = (OrgAppSchmPlcVORowImpl) createRow;
                            orgRow.setSchmPlcBasis(basis);
                            orgRow.setOrgId(id);
                            orgRow.setSchmId(row.getSchmId());
                            orgRow.setCatgId(row.getCatgId());
                            orgRow.setEoId(row.getEoId());
                            orgRow.setExecId(row.getExecId());
                            orgRow.setMinAmt(row.getMinAmt());
                            orgRow.setMaxAmt(row.getMaxAmt());
                            orgRow.setMinQty(row.getMinQty());
                            orgRow.setMaxQty(row.getMaxQty());
                        } else {
                            RowSetIterator custItr = custVO1.createRowSetIterator(null);
                            while (custItr.hasNext()) {
                                Row next_2 = custItr.next();
                                LOVCustVORowImpl custRow = (LOVCustVORowImpl) next_2;
                                Integer eoId = custRow.getEoId();
                                Integer CustcatgId = custRow.getCatgId();
                                if (eoId != null && CustcatgId != null && catgId.equals(CustcatgId)) {
                                    System.out.println("Came in the eplication entry...");
                                    Row createRow = appSchmPlcVO1.createRow();
                                    appSchmPlcVO1.insertRow(createRow);
                                    OrgAppSchmPlcVORowImpl orgRow = (OrgAppSchmPlcVORowImpl) createRow;
                                    orgRow.setSchmPlcBasis(basis);
                                    orgRow.setOrgId(id);
                                    orgRow.setSchmId(row.getSchmId());
                                    orgRow.setCatgId(row.getCatgId());
                                    orgRow.setEoId(eoId);
                                    orgRow.setExecId(row.getExecId());
                                    orgRow.setMinAmt(row.getMinAmt());
                                    orgRow.setMaxAmt(row.getMaxAmt());
                                    orgRow.setMinQty(row.getMinQty());
                                    orgRow.setMaxQty(row.getMaxQty());
                                }
                            }
                            custItr.closeRowSetIterator();
                        }
                    }
                }
            }
            itr.closeRowSetIterator();
        }
        System.out.println("Now row count is: " + appSchmPlcVO1.getRowCount());
    }

    /**
     * Container's getter for LOVCustVO1.
     * @return LOVCustVO1
     */
    public LOVCustVOImpl getLOVCustVO1() {
        return (LOVCustVOImpl) findViewObject("LOVCustVO1");
    }

    public boolean chkDuplicateExecId(String eoNm) {
        Row currentRow = this.getAppSchmPlc1().getCurrentRow();
        if (currentRow != null) {
            AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
            RowSet lOVSlsManVO1 = row.getLOVSlsManVO1();
            Row[] filteredRows = lOVSlsManVO1.getFilteredRows("EoNm", eoNm);
            if (filteredRows.length > 0) {
                Object eoId = filteredRows[0].getAttribute("EoId");
                System.out.println("Schm id isn exec is: " + row.getSchmId());
                Integer rows =
                    checkForDuplicateData(row.getSchmPlcBasis(), row.getSchmId(), row.getCatgId(), row.getEoId(),
                                          Integer.parseInt(eoId.toString()));
                System.out.println("Rows are for Exec id: " + rows);
                if (rows > 0) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Container's getter for schemePolicyForValidationVO1.
     * @return schemePolicyForValidationVO1
     */
    public ViewObjectImpl getschemePolicyForValidationVO1() {
        return (ViewObjectImpl) findViewObject("schemePolicyForValidationVO1");
    }

    public void filterValidationView() {
        ViewObjectImpl forValidationVO1 = this.getAppSchmPlcVO1();
        ViewCriteria criteria = forValidationVO1.getViewCriteria("AppSchmPlcVOCriteria1");
        forValidationVO1.applyViewCriteria(criteria);
        forValidationVO1.setNamedWhereClauseParam("PlcBasisBind", -1);

        forValidationVO1.executeQuery();
    }

    public boolean chkDuplicateCustId(String eoNm) {
        Row currentRow = this.getAppSchmPlc1().getCurrentRow();
        if (currentRow != null) {
            AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
            ViewObjectImpl eoIdVO1 = this.getLOVEoNmtoEoIdVO1();
            eoIdVO1.setNamedWhereClauseParam("CldIdBind", this.getParamCldId());
            eoIdVO1.setNamedWhereClauseParam("HoOrgIdBind", this.getParamHoOrgId());
            eoIdVO1.setNamedWhereClauseParam("SlocIdBind", this.getParamSlocId());
            eoIdVO1.setNamedWhereClauseParam("EoNmBind", eoNm);
            eoIdVO1.executeQuery();
            Row[] filteredRows = eoIdVO1.getAllRowsInRange();
            //   RowSet lOVSlsManVO1 = row.getLOVCustVO1();
            //   Row[] filteredRows = lOVSlsManVO1.getFilteredRows("EoNm", eoNm);
            if (filteredRows.length > 0) {
                Object eoId = filteredRows[0].getAttribute("EoId");
                System.out.println("Schm id isn cust is: " + eoId);

                ViewObjectImpl appSchmPlc1 = this.getschemePolicyForValidationVO1();
                System.out.println("row count is: " + appSchmPlc1.getRowCount());
                RowQualifier rq = new RowQualifier(appSchmPlc1);
                rq.setWhereClause("CldId = '" + getParamCldId() + "' and SlocId = " + getParamSlocId() +
                                  " and HoOrgId = '" + getParamHoOrgId() + "' and SchmPlcBasis = " +
                                  row.getSchmPlcBasis() + " and SchmId = " +
                                  (row.getSchmId() == null ? null : ("'" + row.getSchmId() + "'")) + " and EoId = " +
                                  Integer.parseInt(eoId.toString()) + " and  ExecId= " + row.getExecId());
                Row[] remain = appSchmPlc1.getFilteredRows(rq);
                System.out.println("Query string is : " + rq.getExprStr());
                Integer rows = remain.length;
                System.out.println("Rows are for cust id: " + rows);
                if (rows > 0) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean chkDuplicateCatgId(Integer catgId) {
        Row currentRow = this.getAppSchmPlc1().getCurrentRow();
        if (currentRow != null) {
            AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
            /*  Integer rows =
                checkForDuplicateData(row.getSchmPlcBasis(), row.getSchmId(), catgId, row.getEoId(), row.getExecId()); */
            ViewObjectImpl appSchmPlc1 = this.getschemePolicyForValidationVO1();
            System.out.println("row count is: " + appSchmPlc1.getRowCount());
            RowQualifier rq = new RowQualifier(appSchmPlc1);
            rq.setWhereClause("CldId = '" + getParamCldId() + "' and SlocId = " + getParamSlocId() +
                              " and HoOrgId = '" + getParamHoOrgId() + "' and SchmPlcBasis = " + row.getSchmPlcBasis() +
                              " and SchmId = " + (row.getSchmId() == null ? null : ("'" + row.getSchmId() + "'")) +
                              " and  ExecId= " + row.getExecId() + " and CatgId = " + catgId);
            Row[] remain = appSchmPlc1.getFilteredRows(rq);
            System.out.println("Query string is : " + rq.getExprStr());
            Integer rows = remain.length;
            System.out.println("Rows are for catg id: " + rows);
            if (rows > 0) {
                return true;
            }
        }
        return false;
    }

    public void setCurrentDataToVO(Integer basis) {
        System.out.println("Setting come...");
        AppSchmPlcVOImpl appSchmPlc1 = this.getAppSchmPlc1();
        Row currentRow = appSchmPlc1.getCurrentRow();
        if (currentRow != null) {
            AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
            // if (!row.getSchmPlcBasis().equals(720)) {
            if (!basis.equals(720)) {
                System.out.println("condition true ..");
                System.out.println("data is:  " + row.getCatgId() + "\t" + row.getEoId() + "\t" + row.getExecId() +
                                   "\t" + row.getSchmPlcBasis() + "\t" + row.getSchmId());
                appSchmPlc1.setNamedWhereClauseParam("CatgIdBind", row.getCatgId());
                appSchmPlc1.setNamedWhereClauseParam("EoIdBind", row.getEoId());
                appSchmPlc1.setNamedWhereClauseParam("ExecIdBind", row.getExecId());
                appSchmPlc1.setNamedWhereClauseParam("PlcBasisBind", row.getSchmPlcBasis());
                appSchmPlc1.setNamedWhereClauseParam("SchmIdBind", row.getSchmId());
                appSchmPlc1.executeQuery();

                ViewObjectImpl distinctPolicyVO1 = this.getDistinctPolicyVO1();

                distinctPolicyVO1.setNamedWhereClauseParam("CldIdBInd", getParamCldId());
                distinctPolicyVO1.setNamedWhereClauseParam("SlocIdBind", getParamSlocId());
                distinctPolicyVO1.setNamedWhereClauseParam("HoOrgIdBind", getParamHoOrgId());
                distinctPolicyVO1.setNamedWhereClauseParam("ExecIdBind", row.getExecId());
                distinctPolicyVO1.setNamedWhereClauseParam("CatgIdBind", row.getCatgId());
                distinctPolicyVO1.setNamedWhereClauseParam("PlcBasisBind", row.getSchmPlcBasis());
                distinctPolicyVO1.setNamedWhereClauseParam("SchmIdBind", row.getSchmId());
                distinctPolicyVO1.executeQuery();
            } else {
                System.out.println("data in ctg wise:  " + row.getCatgId() + "\t" + row.getEoId() + "\t" +
                                   row.getExecId() + "\t" + row.getSchmPlcBasis() + "\t" + row.getSchmId());

                appSchmPlc1.setNamedWhereClauseParam("CatgIdBind", this.catgIdForRefresh);
                appSchmPlc1.setNamedWhereClauseParam("EoIdBind", null);
                appSchmPlc1.setNamedWhereClauseParam("ExecIdBind", 0);
                appSchmPlc1.setNamedWhereClauseParam("PlcBasisBind", this.plcBasisForRefresh);
                appSchmPlc1.setNamedWhereClauseParam("SchmIdBind", this.schemeIdForRefresh);
                appSchmPlc1.executeQuery();


                ViewObjectImpl distinctPolicyVO1 = this.getDistinctPolicyVO1();
                distinctPolicyVO1.setNamedWhereClauseParam("CldIdBInd", getParamCldId());
                distinctPolicyVO1.setNamedWhereClauseParam("SlocIdBind", getParamSlocId());
                distinctPolicyVO1.setNamedWhereClauseParam("HoOrgIdBind", getParamHoOrgId());
                distinctPolicyVO1.setNamedWhereClauseParam("ExecIdBind", this.execIdForRefresh);
                distinctPolicyVO1.setNamedWhereClauseParam("CatgIdBind", this.catgIdForRefresh);
                distinctPolicyVO1.setNamedWhereClauseParam("PlcBasisBind", this.plcBasisForRefresh);
                distinctPolicyVO1.setNamedWhereClauseParam("SchmIdBind", this.schemeIdForRefresh);
                distinctPolicyVO1.executeQuery();
            }
        } else {
            appSchmPlc1.setNamedWhereClauseParam("CatgIdBind", this.catgIdForRefresh);
            appSchmPlc1.setNamedWhereClauseParam("EoIdBind", null);
            appSchmPlc1.setNamedWhereClauseParam("ExecIdBind", 0);
            appSchmPlc1.setNamedWhereClauseParam("PlcBasisBind", this.plcBasisForRefresh);
            appSchmPlc1.setNamedWhereClauseParam("SchmIdBind", this.schemeIdForRefresh);
            appSchmPlc1.executeQuery();


            ViewObjectImpl distinctPolicyVO1 = this.getDistinctPolicyVO1();
            distinctPolicyVO1.setNamedWhereClauseParam("CldIdBInd", getParamCldId());
            distinctPolicyVO1.setNamedWhereClauseParam("SlocIdBind", getParamSlocId());
            distinctPolicyVO1.setNamedWhereClauseParam("HoOrgIdBind", getParamHoOrgId());
            distinctPolicyVO1.setNamedWhereClauseParam("ExecIdBind", this.execIdForRefresh);
            distinctPolicyVO1.setNamedWhereClauseParam("CatgIdBind", this.catgIdForRefresh);
            distinctPolicyVO1.setNamedWhereClauseParam("PlcBasisBind", this.plcBasisForRefresh);
            distinctPolicyVO1.setNamedWhereClauseParam("SchmIdBind", this.schemeIdForRefresh);
            distinctPolicyVO1.executeQuery();
        }
    }

    public void setFilteredDataOnAdd() {
        ViewObjectImpl distinctPolicyVO1 = this.getDistinctPolicyVO1();
        distinctPolicyVO1.setNamedWhereClauseParam("CldIdBInd", getParamCldId());
        distinctPolicyVO1.setNamedWhereClauseParam("SlocIdBind", getParamSlocId());
        distinctPolicyVO1.setNamedWhereClauseParam("HoOrgIdBind", getParamHoOrgId());
        distinctPolicyVO1.setNamedWhereClauseParam("ExecIdBind", -1);
        /*  distinctPolicyVO1.setNamedWhereClauseParam("CatgIdBind", row.getCatgId());
        distinctPolicyVO1.setNamedWhereClauseParam("PlcBasisBind", row.getSchmPlcBasis());
        distinctPolicyVO1.setNamedWhereClauseParam("SchmIdBind", row.getSchmId());
         */distinctPolicyVO1.executeQuery();
    }

    public void executeDistinctPolicyVo() {
        ViewObjectImpl distinctPolicyVO1 = this.getDistinctPolicyVO1();
        distinctPolicyVO1.setNamedWhereClauseParam("CldIdBInd", null);
        distinctPolicyVO1.setNamedWhereClauseParam("SlocIdBind", null);
        distinctPolicyVO1.setNamedWhereClauseParam("HoOrgIdBind", null);
        distinctPolicyVO1.setNamedWhereClauseParam("ExecIdBind", -1);
        distinctPolicyVO1.executeQuery();
    }

    public boolean checkIfCustomerExist() {
        AppSchmPlcVOImpl appSchmPlc1 = this.getAppSchmPlc1();
        Row currentRow = appSchmPlc1.getCurrentRow();
        if (currentRow != null) {
            AppSchmPlcVORowImpl row = (AppSchmPlcVORowImpl) currentRow;
            Integer basis = row.getSchmPlcBasis();
            Integer catgId = row.getCatgId();
            ViewObjectImpl countCustVO1 = this.getLovCountCustVO1();
            countCustVO1.setNamedWhereClauseParam("CldIdBind", this.getParamCldId());
            countCustVO1.setNamedWhereClauseParam("HoOrgIdBind", this.getParamHoOrgId());
            countCustVO1.setNamedWhereClauseParam("SlocIdBind", this.getParamSlocId());
            countCustVO1.setNamedWhereClauseParam("catgIdBind", catgId);
            countCustVO1.executeQuery();
            Row[] allRowsInRange = countCustVO1.getAllRowsInRange();
            Object attribute = allRowsInRange[0].getAttribute("Total");
            int length = Integer.parseInt(attribute.toString());
            //  RowSet custVO1 = row.getLOVCustVO1();
            // Row[] filteredRows = custVO1.getFilteredRows("CatgId", catgId);
            // if(filteredRows.length>0)
            if (length > 0)
                return true;
        }
        return false;
    }

    /**
     * Container's getter for LOVEoNmtoEoIdVO1.
     * @return LOVEoNmtoEoIdVO1
     */
    public ViewObjectImpl getLOVEoNmtoEoIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVEoNmtoEoIdVO1");
    }

    /**
     * Container's getter for LovCountCustVO1.
     * @return LovCountCustVO1
     */
    public ViewObjectImpl getLovCountCustVO1() {
        return (ViewObjectImpl) findViewObject("LovCountCustVO1");
    }

    /**
     * Container's getter for LovCountCustVO1.
     * @return LovCountCustVO1
     */
    public void addCustomerToDistinctVo() {
        AppSchmPlcVOImpl schmPlcVO = this.getAppSchmPlc1();
        if (schmPlcVO != null) {
            if (schmPlcVO.getCurrentRow() != null) {
                Integer plcBasisVar = new Integer(0);
                Integer catgIdVar = new Integer(0);
                String eoNmTransVar = null;
                String execNmTransVar = null;
                String replFlgVar = null;

                plcBasisVar = (Integer) schmPlcVO.getCurrentRow().getAttribute("SchmPlcBasis");
                catgIdVar = (Integer) schmPlcVO.getCurrentRow().getAttribute("CatgId");
                eoNmTransVar =
                    schmPlcVO.getCurrentRow().getAttribute("EoNmTrans") == null ? " " :
                    schmPlcVO.getCurrentRow().getAttribute("EoNmTrans").toString();
                execNmTransVar =
                    schmPlcVO.getCurrentRow().getAttribute("ExecNmTrans") == null ? "" :
                    schmPlcVO.getCurrentRow().getAttribute("ExecNmTrans").toString();
                replFlgVar =
                    schmPlcVO.getCurrentRow().getAttribute("ReplFlg") == null ? "" :
                    schmPlcVO.getCurrentRow().getAttribute("ReplFlg").toString();

                System.out.println("plcBasisVar==" + plcBasisVar + "  catgIdVar===" + catgIdVar + " eoNmTransVar==== " +
                                   eoNmTransVar + "  execNmTransVar=== " + execNmTransVar + " " + " replFlgVar=== " +
                                   replFlgVar);
                ViewObjectImpl distinctPolicyVO1 = this.getDistinctPolicyVO1();
                Row createRow = distinctPolicyVO1.createRow();
                createRow.setAttribute("SchmPlcBasis", plcBasisVar);
                createRow.setAttribute("CatgId", catgIdVar);
                distinctPolicyVO1.insertRow(createRow);
                distinctPolicyVO1.executeQuery();
                this.getDBTransaction().commit();

            }
        }
    }

    /**
     * Container's getter for DualTrans1.
     * @return DualTrans1
     */
    public DualTransVOImpl getDualTrans1() {
        return (DualTransVOImpl) findViewObject("DualTrans1");
    }

    /**
     * Container's getter for LovForSchmDisp1.
     * @return LovForSchmDisp1
     */
    public ViewObjectImpl getLovForSchmDisp1() {
        return (ViewObjectImpl) findViewObject("LovForSchmDisp1");
    }

    /**
     * The Method Contains the Logic for attaching the Policy According to the basis
     * of Scheme to any of the Category Selected by the User.
     *
     */
    public void addPolicy() {
        DualTransVOImpl dualTrans1 = this.getDualTrans1();
        Row dualCRow = dualTrans1.getCurrentRow();
        Integer schemeBasis =
            dualCRow.getAttribute("schemeBasisTrans") == null ? null :
            Integer.parseInt(dualCRow.getAttribute("schemeBasisTrans").toString());
        Integer eoIdTrans =
            dualCRow.getAttribute("EoIdTrans") == null ? null :
            Integer.parseInt(dualCRow.getAttribute("EoIdTrans").toString());
        Integer catgIdTrans = (Integer) dualCRow.getAttribute("categoryTrans");
        Integer execIdTrans = (Integer) dualCRow.getAttribute("ExecIdTrans");
        String SchmId = dualCRow.getAttribute("SchemeIdTrans").toString();

        ViewObjectImpl forValidationVO1 = this.getAppSchmPlcVO1();
        ViewCriteria criteria = forValidationVO1.getViewCriteria("AppSchmPlcVOCriteria");
        forValidationVO1.applyViewCriteria(criteria);
        forValidationVO1.setNamedWhereClauseParam("PlcBasisBind", schemeBasis);
        forValidationVO1.setNamedWhereClauseParam("CatgIdBind", catgIdTrans);
        forValidationVO1.setNamedWhereClauseParam("ExecIdBind", execIdTrans);
        forValidationVO1.setNamedWhereClauseParam("SchmIdBind", SchmId);
        forValidationVO1.setNamedWhereClauseParam("EoIdBind", eoIdTrans);
        forValidationVO1.executeQuery();

        AppSchmPlcVOImpl appSchmPlcVO1 = this.getAppSchmPlcVO1();
        Row createRow = appSchmPlcVO1.createRow();
        createRow.setAttribute("SchmPlcBasis", schemeBasis);
        createRow.setAttribute("SchmId", schemeBasis);
        createRow.setAttribute("CatgId", schemeBasis);
        createRow.setAttribute("EoId", schemeBasis);
        createRow.setAttribute("ExecId", schemeBasis);
        createRow.setAttribute("SchmPlcBasis", schemeBasis);
        createRow.setAttribute("SchmPlcBasis", schemeBasis);
        createRow.setAttribute("SchmPlcBasis", schemeBasis);
        createRow.setAttribute("SchmPlcBasis", schemeBasis);
        createRow.setAttribute("SchmPlcBasis", schemeBasis);
        createRow.setAttribute("SchmPlcBasis", schemeBasis);
        createRow.setAttribute("SchmPlcBasis", schemeBasis);
        createRow.setAttribute("SchmPlcBasis", schemeBasis);
    }

    /**
     * Container's getter for AppSchmPlcQuery1.
     * @return AppSchmPlcQuery1
     */
    public AppSchmPlcQueryVOImpl getAppSchmPlcQuery1() {
        return (AppSchmPlcQueryVOImpl) findViewObject("AppSchmPlcQuery1");
    }

    /**
     * Filteration Method For AppSchmPlcQueryVo.
     *
     */
    public void filterQuerySchmVO() {
        ViewObjectImpl filterVO = this.getAppSchmPlcQuery1();
        filterVO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        filterVO.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        filterVO.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        filterVO.setNamedWhereClauseParam("BindEoId", -1);
        filterVO.setNamedWhereClauseParam("BindExecId", -1);
        filterVO.setNamedWhereClauseParam("BindCatgId", -1);
        filterVO.setNamedWhereClauseParam("BindSchmBasis", -1);
        filterVO.setNamedWhereClauseParam("BindSchmId", -1);
        filterVO.executeQuery();

    }

    /**
     * Search Method For AppSchmPlcQueryVo , Using Dual Trans VO Attributes.
     *
     */
    public void SearchMethod() {
        SearchVOImpl impl = this.getSearch1();
        Row dualCRow = impl.getCurrentRow();
        if (dualCRow != null) {
            Integer eoIdObj = (Integer) dualCRow.getAttribute("EoIdTrans");
            Integer execIdObj = (Integer) dualCRow.getAttribute("ExecIdTrans");
            Date validToObj = (Date) dualCRow.getAttribute("ValidToTrans");
            Date validFromObj = (Date) dualCRow.getAttribute("ValidFromTrans");
            Integer schmBasisObj = (Integer) dualCRow.getAttribute("SchemeBasisTrans");
            Integer catgIdTrans = (Integer) dualCRow.getAttribute("catgIdTrans");
            String schmIdTrans=(String)dualCRow.getAttribute("SchmDocIdTrans");
            ViewObjectImpl appSchmPlcQuery1 = this.getAppSchmPlcQuery1();

            appSchmPlcQuery1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            appSchmPlcQuery1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            appSchmPlcQuery1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            appSchmPlcQuery1.setNamedWhereClauseParam("BindEoId", eoIdObj);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindExecId", execIdObj);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindCatgId", catgIdTrans);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindSchmBasis", schmBasisObj);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindSchmId", schmIdTrans);
            appSchmPlcQuery1.executeQuery();


        }
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public void ResetMethod() {
        SearchVOImpl impl = this.getSearch1();
        Row dualCRow = impl.getCurrentRow();
        if (dualCRow != null) {
            dualCRow.setAttribute("EoIdTrans", null);
            dualCRow.setAttribute("ExecIdTrans", null);
            // Date validToObj=(Date)  dualCRow.getAttribute("ValidToTrans");
            //   Date validFromObj=(Date)dualCRow.getAttribute("ValidFromTrans");
            dualCRow.setAttribute("SchemeBasisTrans", null);
            dualCRow.setAttribute("catgIdTrans", null);
            impl.executeQuery();
            ViewObjectImpl appSchmPlcQuery1 = this.getAppSchmPlcQuery1();

            appSchmPlcQuery1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            appSchmPlcQuery1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            appSchmPlcQuery1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            appSchmPlcQuery1.setNamedWhereClauseParam("BindEoId", -1);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindExecId", -1);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindCatgId", -1);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindSchmBasis", -1);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindSchmId", -1);
            appSchmPlcQuery1.executeQuery();


        }
    }

    /**
     * Filter the AppSchmQuery Based Vo on the Basis of Scheme Id.
     *
     */
    public void addEditFilterForAppSchmPlcVo() {
        DualTransVOImpl dualTrans1 = this.getDualTrans1();
        Row dualCRow = dualTrans1.getCurrentRow();
        if (dualCRow != null) {
            Integer schmBasisObj = (Integer) dualCRow.getAttribute("schemeBasisTrans");

            Integer eoIdObj = (Integer) dualCRow.getAttribute("EoIdTrans");
            System.out.println("EoIdTrans::: "+eoIdObj);
            Integer execIdObj = (Integer) dualCRow.getAttribute("ExecIdTrans");
            System.out.println("execIdObj:::: "+execIdObj);
            Integer catgIdTrans = (Integer) dualCRow.getAttribute("categoryTrans");
            ViewObjectImpl appSchmPlcQuery1 = this.getAppSchmPlcQuery1();

            String schmIdObj =
                dualCRow.getAttribute("DocIdTrans") == null ? "" : dualCRow.getAttribute("DocIdTrans").toString();
            appSchmPlcQuery1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            appSchmPlcQuery1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            appSchmPlcQuery1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            appSchmPlcQuery1.setNamedWhereClauseParam("BindEoId", eoIdObj);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindExecId", execIdObj);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindCatgId", catgIdTrans);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindSchmBasis", schmBasisObj);
            appSchmPlcQuery1.setNamedWhereClauseParam("BindSchmId", schmIdObj);
            appSchmPlcQuery1.executeQuery();


        }
    }

    public Boolean UpdatePolicy() {
        Boolean flag = false;
        DualTransVOImpl dualTrans1 = this.getDualTrans1();
        Row dualCRow = dualTrans1.getCurrentRow();
        if (dualCRow != null) {
            Integer schmBasisObj = (Integer) dualCRow.getAttribute("schemeBasisTrans");
            System.out.println("schmBasisObj:::: "+schmBasisObj);
           // Integer eoIdObj = (Integer) dualCRow.getAttribute("EoIdTrans");
            Integer eoIdObj = (Integer) dualCRow.getAttribute("EoIdTrans")==null?new Integer(0):(Integer) dualCRow.getAttribute("EoIdTrans");
          System.out.println("eoIdObj::::"+eoIdObj);
            Integer execIdObj =  dualCRow.getAttribute("ExecIdTrans")==null?new Integer(0):(Integer)dualCRow.getAttribute("ExecIdTrans");
          System.out.println("execIdObj::::"+execIdObj);
            Integer catgIdTrans = (Integer) dualCRow.getAttribute("categoryTrans")==null?new Integer(0):(Integer) dualCRow.getAttribute("categoryTrans");
           System.out.println("catgIdTrans::::"+catgIdTrans);
            String schmIdObj =
                dualCRow.getAttribute("DocIdTrans") == null ? "" : dualCRow.getAttribute("DocIdTrans").toString();
            System.out.println("schmIdObj:::: "+schmIdObj);
            String replFlagObj=dualCRow.getAttribute("ReplFlagTrans")==null?"N":dualCRow.getAttribute("ReplFlagTrans").toString();
            System.out.println("replFlagObj::::: "+replFlagObj);
            Object str = null;
            this.getTransaction().postChanges();
            try {
                str = ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_INS_SCHM_PLC (?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                 EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                 EbizParams.GLBL_HO_ORG_ID(), eoIdObj, catgIdTrans, schmIdObj,
                                                 schmBasisObj, execIdObj, (Integer) EbizParams.GLBL_APP_USR(),
                                                 EbizParams.getFyIdOnCurrDtAndCurrOrg(this), replFlagObj
                }, Types.VARCHAR);
                System.out.println("The Output is ::: " + str);
                this.getAppSchmPlcQuery1().executeQuery();
                flag = true;
            } catch (Exception e) {
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2824"),  //There must be some Error in APP.FN_INS_SCHM_PLC Function
                                                        ADFModelUtils.resolvRsrc("MSG.2825"),  //You Can not be able to Save the Details.
                                                        FacesMessage.SEVERITY_ERROR);
                flag = false;
                e.printStackTrace();
            }
        }
        return flag;
    }

    /**
     * This Method is used to create the validation over the update Policy method to restrict the user
     * for entering null into the function .
     * @return Boolean.
     */
    public Boolean mandatoryCheck() {
        Boolean flag = false;
        DualTransVOImpl dualTrans1 = this.getDualTrans1();
        Row currentRow = dualTrans1.getCurrentRow();
        Integer schmBasisObj =
            currentRow.getAttribute("schemeBasisTrans") == null ? new Integer(0) :
            (Integer) currentRow.getAttribute("schemeBasisTrans");
        System.out.println("schmBasisObj :::: " + schmBasisObj);
        Integer catgIdObj =
            currentRow.getAttribute("categoryTrans") == null ? new Integer(0) :
            (Integer) currentRow.getAttribute("categoryTrans");
        System.out.println("catgIdObj ::: " + catgIdObj);
        String eoNMObj =
            currentRow.getAttribute("EoNmTrans") == null ? " " : currentRow.getAttribute("EoNmTrans").toString();
        System.out.println("eoNMObj :: " + eoNMObj);
        String execIdObj =
            currentRow.getAttribute("ExecNmTrans") == null ? " " : currentRow.getAttribute("ExecNmTrans").toString();
        System.out.println("execIdObj :: " + execIdObj);
        String schmNm =
            currentRow.getAttribute("SchemeNmTrans") == null ? " " : currentRow.getAttribute("SchemeNmTrans").toString();
        System.out.println("SchemeNmTrans :: " + schmNm);

        if (schmBasisObj.equals(0)) {
            flag = true;
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2826"),   //The Scheme Basis  Field is required!
                                                    ADFModelUtils.resolvRsrc("MSG.2828"),  //Please Select the Field to attach Policy!
                                                    FacesMessage.SEVERITY_ERROR);
        }
        else if(schmNm.equals(" ")){
            flag=true;
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2829"),   //The Scheme Name Field is required!
                                                    ADFModelUtils.resolvRsrc("MSG.2828"),  //Please Select the Field to attach Policy!
                                                    FacesMessage.SEVERITY_ERROR);
        }

        else if (schmBasisObj.equals(718)) {
            if (eoNMObj.equals(" ")) {
                flag = true;
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2830"),   //The Customer Name  Field is required!
                                                        ADFModelUtils.resolvRsrc("MSG.2828"),  //Please Select the Field to attach Policy!
                                                        FacesMessage.SEVERITY_ERROR);
            } 
        } else if (schmBasisObj.equals(722)) {
            if (execIdObj.equals(" ")) {
                flag = true;
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2832"),  //The Executive Name  Field is required!
                                                        ADFModelUtils.resolvRsrc("MSG.2828"),   //Please Select the Field to attach Policy!
                                                        FacesMessage.SEVERITY_ERROR);
            }

        } else if (schmBasisObj.equals(720)) {
            if (catgIdObj.equals(0)) {
                flag = true;
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2833"),  //The Category Name  Field is required!
                                                        ADFModelUtils.resolvRsrc("MSG.2828"),  //Please Select the Field to attach Policy!
                                                        FacesMessage.SEVERITY_ERROR);
            }
        } else {
            flag = false;
        }
        return flag;

    }

    public void executeAppSchmQueryVo() {
        this.getDualTrans1().getCurrentRow().setAttribute("schemeBasisTrans", null);
        this.getDualTrans1().getCurrentRow().setAttribute("categoryTrans", null);
        this.getDualTrans1().getCurrentRow().setAttribute("SchemeNmTrans", null);
        this.getDualTrans1().getCurrentRow().setAttribute("EoNmTrans", null);
        this.getDualTrans1().getCurrentRow().setAttribute("ExecNmTrans", null);
        this.getDualTrans1().getCurrentRow().setAttribute("SchemeIdTrans", null);
        this.getDualTrans1().executeQuery();
        this.getAppSchmPlcQuery1().executeQuery();

    }

    /* public Boolean updatePolicyInEitMode() {
        Boolean flag = false;
        DualTransVOImpl dualTrans1 = this.getDualTrans1();
        Row dualCRow = dualTrans1.getCurrentRow();
        if (dualCRow != null) {
            Integer schmBasisObj = (Integer) dualCRow.getAttribute("schemeBasisTrans");
            Integer eoIdObj = (Integer) dualCRow.getAttribute("EoIdTrans")==null?new Integer(0):(Integer) dualCRow.getAttribute("EoIdTrans");
            Integer execIdObj =  dualCRow.getAttribute("ExecIdTrans")==null?new Integer(0):(Integer)dualCRow.getAttribute("ExecIdTrans");
            Integer catgIdTrans = (Integer) dualCRow.getAttribute("categoryTrans")==null?new Integer(0):(Integer) dualCRow.getAttribute("categoryTrans");
            String schmIdObj =
                dualCRow.getAttribute("DocIdTrans") == null ? " " :
                dualCRow.getAttribute("DocIdTrans").toString();
            System.out.println("Doc Id IS :::: "+schmIdObj);
            Object str = null;
            try {
                str =
                    ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_EDIT_SCHM_PLC (?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                               EbizParams.GLBL_HO_ORG_ID(), eoIdObj, catgIdTrans, schmIdObj,
                                               schmBasisObj, execIdObj, (Integer) EbizParams.GLBL_APP_USR(),
                                               EbizParams.getFyIdOnCurrDtAndCurrOrg(this), "Y"
                }, Types.VARCHAR);
                System.out.println("The Output is ::: " + str);
                this.getAppSchmPlcQuery1().executeQuery();
                flag = true;
            } catch (Exception e) {
                ADFModelUtils.showFormattedFacesMessage("There must be some Error in APP.FN_INS_SCHM_PLC Function ",
                                                        "You Can not be able to Save the Details.",
                                                        FacesMessage.SEVERITY_ERROR);
                flag = false;
                e.printStackTrace();
            }
        }
        return flag;
    } */

    public Boolean deletePolicy() {
        Boolean flag = false;
        int count=0;
        System.out.println("Inside delete!!");
        ViewObjectImpl appSchmPlcQuery1 = this.getAppSchmPlcQuery1();
        System.out.println("After 1 ::: ");
        RowSetIterator crt = appSchmPlcQuery1.createRowSetIterator(null);
        while (crt.hasNext()) {
            Row next = crt.next();
            System.out.println("Next Is ::: " + next);
            if (next.getAttribute("DelChkTrans") != null) {
                count=count+1;
                System.out.println("next.getAttribute(\"DelChkTrans\");   :::: " + next.getAttribute("DelChkTrans"));
                String checkFlg = next.getAttribute("DelChkTrans").toString();
                if (checkFlg.equalsIgnoreCase("Y")) {
                    System.out.println("Inside If Current row:::");
                    System.out.println("Inside current row::::" + next.getAttribute("SchmPlcBasis") +
                                       next.getAttribute("EoId") + next.getAttribute("ExecId") +
                                       next.getAttribute("CatgId") + next.getAttribute("SchmId"));
                    Integer schmBasisObj =
                        next.getAttribute("SchmPlcBasis") == null ? new Integer(0) :
                        (Integer) next.getAttribute("SchmPlcBasis");
                    System.out.println("schmBasisObj :::: " + schmBasisObj);
                    Integer eoIdObj =
                        next.getAttribute("EoId") == null ? new Integer(0) : (Integer) next.getAttribute("EoId");
                    System.out.println("eoIdObj :::: " + eoIdObj);
                    Integer execIdObj =
                        next.getAttribute("ExecId") == null ? new Integer(0) : (Integer) next.getAttribute("ExecId");
                    System.out.println("execIdObj :::: " + execIdObj);
                    Integer catgIdTrans =
                        next.getAttribute("CatgId") == null ? new Integer(0) : (Integer) next.getAttribute("CatgId");
                    System.out.println("catgIdTrans ::: " + catgIdTrans);
                    String schmIdObj =
                        next.getAttribute("SchmId") == null ? " " : next.getAttribute("SchmId").toString();
                    System.out.println("schmIdObj :::: " + schmIdObj);
                    String replFlagObj="Y";
                   System.out.println("replFlagObj:::::: "+replFlagObj);
                    Object str = null;
                    try {
                        str =
                            ADFModelUtils.callFunction(this,
                                                       new StringBuilder("APP.FN_DEL_SCHM_PLC (?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                       EbizParams.GLBL_HO_ORG_ID(), eoIdObj, catgIdTrans, schmIdObj,
                                                       schmBasisObj, execIdObj, (Integer) EbizParams.GLBL_APP_USR(), replFlagObj
                        }, Types.VARCHAR);
                        System.out.println("The Output is ::: " + str);
                      //  this.getAppSchmPlcQuery1().executeQuery();
                        flag = true;
                    } catch (Exception e) {
                        ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2834"),   //There must be some Error in APP.FN_DEL_SCHM_PLC Function
                                                                ADFModelUtils.resolvRsrc("MSG.2825"),                   //You Can not be able to Save the Details.
                                                                FacesMessage.SEVERITY_ERROR);
                        flag = false;
                        e.printStackTrace();
                    }
                }
            }
            
        }
        if(count==0){
           
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2835"),         //There must be a single row to Delete!
                                                        ADFModelUtils.resolvRsrc("MSG.2836"),  //Please Select atleast a single row to delete!
                                                        FacesMessage.SEVERITY_ERROR);
            
        }
        this.getAppSchmPlcQuery1().executeQuery();
        return flag;

        /*      System.out.println("After current Row ::: " + appSchmPlcQuery1.getCurrentRow());
        if (appSchmPlcQuery1.getCurrentRow() != null) {
            Row currentRow = appSchmPlcQuery1.getCurrentRow();
            System.out.println("Inside If Current row:::");
            System.out.println("Inside current row::::" + currentRow.getAttribute("SchmPlcBasis") +
                               currentRow.getAttribute("EoId") + currentRow.getAttribute("ExecId") +
                               currentRow.getAttribute("CatgId") + currentRow.getAttribute("SchmId"));
            Integer schmBasisObj =
                currentRow.getAttribute("SchmPlcBasis") == null ? new Integer(0) :
                (Integer) currentRow.getAttribute("SchmPlcBasis");
            System.out.println("schmBasisObj :::: " + schmBasisObj);
            Integer eoIdObj =
                currentRow.getAttribute("EoId") == null ? new Integer(0) : (Integer) currentRow.getAttribute("EoId");
            System.out.println("eoIdObj :::: " + eoIdObj);
            Integer execIdObj =
                currentRow.getAttribute("ExecId") == null ? new Integer(0) :
                (Integer) currentRow.getAttribute("ExecId");
            System.out.println("execIdObj :::: " + execIdObj);
            Integer catgIdTrans =
                currentRow.getAttribute("CatgId") == null ? new Integer(0) :
                (Integer) currentRow.getAttribute("CatgId");
            System.out.println("catgIdTrans ::: " + catgIdTrans);
            String schmIdObj =
                currentRow.getAttribute("SchmId") == null ? " " : currentRow.getAttribute("SchmId").toString();
            System.out.println("schmIdObj :::: " + schmIdObj);
            Object str = null;
            try {
                str = ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_DEL_SCHM_PLC (?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                 EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                 EbizParams.GLBL_HO_ORG_ID(), eoIdObj, catgIdTrans, schmIdObj,
                                                 schmBasisObj, execIdObj, (Integer) EbizParams.GLBL_APP_USR(), "Y"
                }, Types.VARCHAR);
                System.out.println("The Output is ::: " + str);
                this.getAppSchmPlcQuery1().executeQuery();
                flag = true;
            } catch (Exception e) {
                ADFModelUtils.showFormattedFacesMessage("There must be some Error in APP.FN_DEL_SCHM_PLC Function ",
                                                        "You Can not be able to Save the Details.",
                                                        FacesMessage.SEVERITY_ERROR);
                flag = false;
                e.printStackTrace();
            }
        } else {
            System.out.println("Current Row Not Found ::::");
        } */
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public SearchVOImpl getSearch1() {
        return (SearchVOImpl) findViewObject("Search1");
    }
}

