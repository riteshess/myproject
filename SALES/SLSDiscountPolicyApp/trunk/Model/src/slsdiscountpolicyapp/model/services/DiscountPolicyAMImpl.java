package slsdiscountpolicyapp.model.services;

import adf.utils.model.ADFModelUtils;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Number;

import slsdiscountpolicyapp.model.services.common.DiscountPolicyAM;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 03 11:14:28 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DiscountPolicyAMImpl extends ApplicationModuleImpl implements DiscountPolicyAM {
    private static ADFLogger _log = ADFLogger.createADFLogger(DiscountPolicyAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public DiscountPolicyAMImpl() {
    }

    /**
     * Container's getter for SearchTempVO.
     * @return SearchTempVO
     */
    public ViewObjectImpl getSearchTempVO() {
        return (ViewObjectImpl) findViewObject("SearchTempVO");
    }

    /**
     * Container's getter for AddEditTempVO.
     * @return AddEditTempVO
     */
    public ViewObjectImpl getAddEditTempVO() {
        return (ViewObjectImpl) findViewObject("AddEditTempVO");
    }

    /**
     * Container's getter for DiscountPolicyDetailVO.
     * @return DiscountPolicyDetailVO
     */
    public ViewObjectImpl getDiscountPolicyDetailVO() {
        return (ViewObjectImpl) findViewObject("DiscountPolicyDetailVO");
    }

    /**
     * Method for resolving the El
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = "-1";
        if (valueExp.getValue(elContext) == null) {
            FacesMessage message = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2293"));  //There have been an error in fetching global parameters !
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        } else {
            Message = valueExp.getValue(elContext).toString();
        }
        return Message;
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public StringBuffer getCldId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
    }

    public Integer getUserId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public StringBuffer getOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
    }

    public StringBuffer getHoOrgId() {
        return new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
    }

    public void setInitialVariables() {
        ViewObjectImpl detailVO = this.getDiscountPolicyDetailVO();
        detailVO.setNamedWhereClauseParam("CldIdBind", getCldId().toString());
        detailVO.setNamedWhereClauseParam("OrgIdBind", getOrgId().toString());
        detailVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId().toString());
        detailVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        detailVO.setNamedWhereClauseParam("ItmIdBind", null);
        detailVO.setNamedWhereClauseParam("GrpIdBind", null);
        detailVO.setNamedWhereClauseParam("CatgIdBind", null);
        detailVO.setNamedWhereClauseParam("EoIdBind", -1);
        detailVO.setNamedWhereClauseParam("SalesExecIdBind", null);
        detailVO.setNamedWhereClauseParam("DiscBasisBind", null);
        detailVO.setNamedWhereClauseParam("EffectiveDtBind", null);
        detailVO.executeQuery();
    }

    public Boolean areValidationsValid() {

        ViewObjectImpl addEditVO = this.getAddEditTempVO();
        Row editRow = addEditVO.getCurrentRow();
        Object eoIdO = editRow.getAttribute("EoIdTrans");
        Object itmIdO = editRow.getAttribute("ItmIdTrans");
        Object itmGrpO = editRow.getAttribute("ItmGrpIdTrans");
        Object salesExecO = editRow.getAttribute("SalesExecIdTrans");
        Object eoCatgO = editRow.getAttribute("EoCatgTrans");
        Object startDtO = editRow.getAttribute("StartDtTrans");
        Object expDtO = editRow.getAttribute("ExpDtTrans");
        Object discTypO = editRow.getAttribute("DiscTypTrans");
        Object discValO = editRow.getAttribute("DiscValTrans");
        Object discBasisO = editRow.getAttribute("DiscountBasisTrans");

        Integer eoId = (eoIdO == null ? 0 : (Integer) eoIdO);
        StringBuilder itmId = (itmIdO == null ? new StringBuilder("") : new StringBuilder(itmIdO.toString()));
        StringBuilder itmGrp = (itmGrpO == null ? new StringBuilder("") : new StringBuilder(itmGrpO.toString()));
        Integer salesExec = (salesExecO == null ? 0 : (Integer) salesExecO);
        Integer eoCatg = (eoCatgO == null ? 0 : (Integer) eoCatgO);
        Timestamp startDt = (startDtO == null ? null : (Timestamp) startDtO);
        Timestamp expDt = (expDtO == null ? null : (Timestamp) expDtO);
        StringBuilder discTyp = (discTypO == null ? new StringBuilder("") : new StringBuilder(discTypO.toString()));
        Number discVal = (discValO == null ? new Number(0) : (Number) discValO);
        Integer discBasis = (discBasisO == null ? 0 : (Integer) discBasisO);
        _log.info("EoId : " + eoId);
        _log.info("ItmId : " + itmId);
        _log.info("ItmGrp : " + itmGrp);
        _log.info("SalesExec : " + salesExec);
        _log.info("EoCatg : " + eoCatg);
        _log.info("StartDt : " + startDt);
        _log.info("ExpDt : " + expDt);
        _log.info("DiscTyp : " + discTyp);
        _log.info("DiscVal : " + discVal);
        _log.info("DiscBasis : " + discBasis);


        Boolean i = true;
        if (discBasis.equals(0)) {
            i = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.2294") +     //Discount Basis is not selected !
                                  "</p></b>");
            saveMsg.append("<b>"+ADFModelUtils.resolvRsrc("MSG.2295"));         //Please select the Discount Basis on which you want to define Discount.
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (startDt == null) {
            i = false;
            //ADFModelUtils.showFormattedFacesMessage("Start Date is not selected !", "Please select the Start Date on which you want to define Discount.", FacesMessage.SEVERITY_WARN);
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.2296") + "</p></b>");       //Start Date is not selected !
            saveMsg.append("<b>"+ ADFModelUtils.resolvRsrc("MSG.2297") );                            //Please select the Start Date on which you want to define Discount.
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (discVal.compareTo(new Number(0)) < 0) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  ADFModelUtils.resolvRsrc("MSG.2299")  + "</p></b>");  //Discount Value should be greater or equal to zero !
            saveMsg.append("<b>"+ ADFModelUtils.resolvRsrc("MSG.2298") );          //Please enter a valid Discount Value.
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
            _log.info("_into 718");
            i = false;
        } else if (discBasis.equals(718) && eoId.equals(0)) {
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.2088") + "</p></b>");          // Customer is not selected !
            saveMsg.append("<b>"+ ADFModelUtils.resolvRsrc("MSG.2300"));             //Please select the Customer for which you want to define Discount.
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
            _log.info("_into 718");
            i = false;
        } else if (discBasis.equals(719) && itmId.toString().equals("")) {
            i = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.2301") + "</p></b>");          //Item is not selected !
            saveMsg.append("<b> "+ ADFModelUtils.resolvRsrc("MSG.2302"));  //Please select the Item for which you want to define Discount.
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (discBasis.equals(721) && itmGrp.toString().equals("")) {
            i = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.2303") + "</p></b>");  //Item Group is not selected !
            saveMsg.append("<b>"+ADFModelUtils.resolvRsrc("MSG.2304"));                   //Please select the Item Group for which you want to define Discount.
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (discBasis.equals(722) && salesExec.equals(0)) {
            i = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.2305") +    //Sales Executive is not selected !
                                  "</p></b>");
            saveMsg.append("<b>"+ADFModelUtils.resolvRsrc("MSG.2306"));          //Please select the Sales Executive for which you want to define Discount.
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        } else if (discBasis.equals(720) && eoCatg.equals(0)) {
            i = false;
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.2307") +              //Customer Category is not selected !
                                  "</p></b>");
            saveMsg.append("<b>"+ADFModelUtils.resolvRsrc("MSG.2308") );                //Please select the Customer Category for which you want to define Discount.
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }

        return i;
    }

    public Integer addDiscountRows() {
        Integer j = 0;
        if (areValidationsValid() == true) {
            ViewObjectImpl addEditVO = this.getAddEditTempVO();
            Row editRow = addEditVO.getCurrentRow();
            Object eoIdO = editRow.getAttribute("EoIdTrans");
            Object itmIdO = editRow.getAttribute("ItmIdTrans");
            Object itmGrpO = editRow.getAttribute("ItmGrpIdTrans");
            Object salesExecO = editRow.getAttribute("SalesExecIdTrans");
            Object eoCatgO = editRow.getAttribute("EoCatgTrans");
            Object startDtO = editRow.getAttribute("StartDtTrans");
            Object expDtO = editRow.getAttribute("ExpDtTrans");
            Object discTypO = editRow.getAttribute("DiscTypTrans");
            Object discValO = editRow.getAttribute("DiscValTrans");
            Object discBasisO = editRow.getAttribute("DiscountBasisTrans");
            Object replicateToOthrOrgO = editRow.getAttribute("ReplicateToOthrOrgs");
            Object taxReverseO = editRow.getAttribute("taxReversalTrans");

            Integer eoId = (eoIdO == null ? 0 : (Integer) eoIdO);
            StringBuilder itmId = (itmIdO == null ? new StringBuilder("") : new StringBuilder(itmIdO.toString()));
            StringBuilder itmGrp = (itmGrpO == null ? new StringBuilder("") : new StringBuilder(itmGrpO.toString()));
            Integer salesExec = (salesExecO == null ? 0 : (Integer) salesExecO);
            Integer eoCatg = (eoCatgO == null ? 0 : (Integer) eoCatgO);
            Timestamp startDt = (startDtO == null ? null : (Timestamp) startDtO);
            Timestamp expDt = (expDtO == null ? null : (Timestamp) expDtO);
            StringBuilder discTyp = (discTypO == null ? new StringBuilder("") : new StringBuilder(discTypO.toString()));
            Number discVal = (discValO == null ? new Number(0) : (Number) discValO);
            Integer discBasis = (discBasisO == null ? 0 : (Integer) discBasisO);
            StringBuilder replicateToOthrOrg =
                (replicateToOthrOrgO == null ? new StringBuilder("N") :
                 new StringBuilder(replicateToOthrOrgO.toString()));
            StringBuilder taxReverse =
                (taxReverseO == null ? new StringBuilder("N") : new StringBuilder(taxReverseO.toString()));

            /* FUNCTION     fn_ins_disc_plc (
               p_sloc           NUMBER,
               p_cld            VARCHAR2,
               p_ho_org_id      VARCHAR2,
               p_org            VARCHAR2,
               p_itm            VARCHAR2 ,
               p_eo             VARCHAR2 ,
               p_catg           NUMBER ,
               p_grp            VARCHAR2 ,
               p_sls_exec       number ,
               p_lbl_id         varchar2 ,
               p_disc_basis      number,
               p_disc_type      varchar2,
               p_disc_val       number,
               p_effective_dt   TIMESTAMP,
               p_EXPIRY_DT      TIMESTAMP,
               p_on_hold        varchar2,
               P_REPLICATE
               P_RVRSL_FLG
            ) */
            StringBuilder r = new StringBuilder("");
            try {
                Object returnVal =
                    callStoredFunction(Types.VARCHAR, "SLS.fn_ins_disc_plc(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                       getSlocId(), getCldId().toString(), getHoOrgId().toString(),
                                       getOrgId().toString(), (itmId.toString().equals("") ? null : itmId.toString()),
                                       (eoId == 0 ? null : eoId), (eoCatg == 0 ? null : eoCatg),
                                       (itmGrp.toString().equals("") ? null : itmGrp.toString()),
                                       (salesExec == 0 ? null : salesExec), null, discBasis, discTyp.toString(),
                                       discVal, startDt, expDt, "N", replicateToOthrOrg.toString(),
                                       taxReverse.toString()
                });
                _log.info("ReturnVal : " + returnVal);
                r = (returnVal == null ? new StringBuilder("") : new StringBuilder(returnVal.toString()));
                j = 1;

                this.getDBTransaction().postChanges();
                ViewObjectImpl detailVO = this.getDiscountPolicyDetailVO();
                detailVO.setNamedWhereClauseParam("CldIdBind", getCldId().toString());
                detailVO.setNamedWhereClauseParam("OrgIdBind", getOrgId().toString());
                detailVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId().toString());
                detailVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
                detailVO.setNamedWhereClauseParam("ItmIdBind", itmIdO);
                detailVO.setNamedWhereClauseParam("GrpIdBind", itmGrpO);
                detailVO.setNamedWhereClauseParam("CatgIdBind", eoCatgO);
                detailVO.setNamedWhereClauseParam("EoIdBind", eoIdO);
                detailVO.setNamedWhereClauseParam("DiscBasisBind", discBasisO);
                detailVO.setNamedWhereClauseParam("SalesExecIdBind", salesExecO);
                detailVO.executeQuery();

            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }

        } else {
            j = -2;
        }
        return j;
    }

    /**
     *  Method to set reset Search Edit rows Table
     */
    public void resetSearchEditRows() {
        this.getAddEditTempVO().executeQuery();
        this.getSearchTempVO().executeQuery();
        //reset();
    }

    public void resetSearchEditRowsWithReset() {
        this.getAddEditTempVO().executeQuery();
        this.getSearchTempVO().executeQuery();
        reset();
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }

    public void search() {
        ViewObjectImpl searchVO = this.getSearchTempVO();
        Row searchRow = searchVO.getCurrentRow();
        Object eoIdO = searchRow.getAttribute("EoIdTrans");
        Object itmIdO = searchRow.getAttribute("ItmIdTrans");
        Object itmGrpO = searchRow.getAttribute("ItmGrpIdTrans");
        Object salesExecO = searchRow.getAttribute("SalesExecIdBind");
        Object eoCatgO = searchRow.getAttribute("EoCatgTrans");
        Object discBasisO = searchRow.getAttribute("DiscountBasisTrans");

        ViewObjectImpl detailVO = this.getDiscountPolicyDetailVO();
        detailVO.setNamedWhereClauseParam("CldIdBind", getCldId().toString());
        detailVO.setNamedWhereClauseParam("OrgIdBind", getOrgId().toString());
        detailVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId().toString());
        detailVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        detailVO.setNamedWhereClauseParam("ItmIdBind", itmIdO);
        detailVO.setNamedWhereClauseParam("GrpIdBind", itmGrpO);
        detailVO.setNamedWhereClauseParam("CatgIdBind", eoCatgO);
        detailVO.setNamedWhereClauseParam("EoIdBind", eoIdO);
        detailVO.setNamedWhereClauseParam("DiscBasisBind", discBasisO);
        detailVO.setNamedWhereClauseParam("SalesExecIdBind", salesExecO);
        detailVO.setNamedWhereClauseParam("EffectiveDtBind", null);
        detailVO.executeQuery();

    }

    public void reset() {
        ViewObjectImpl detailVO = this.getDiscountPolicyDetailVO();
        detailVO.setNamedWhereClauseParam("CldIdBind", getCldId().toString());
        detailVO.setNamedWhereClauseParam("OrgIdBind", getOrgId().toString());
        detailVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId().toString());
        detailVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        detailVO.setNamedWhereClauseParam("ItmIdBind", null);
        detailVO.setNamedWhereClauseParam("GrpIdBind", null);
        detailVO.setNamedWhereClauseParam("CatgIdBind", null);
        detailVO.setNamedWhereClauseParam("EoIdBind", -1);
        detailVO.setNamedWhereClauseParam("SalesExecIdBind", null);
        detailVO.setNamedWhereClauseParam("DiscBasisBind", null);
        detailVO.executeQuery();
        this.getSearchTempVO().executeQuery();
    }

    /**
     * Container's getter for SlsDiscPlcForUpdate.
     * @return SlsDiscPlcForUpdate
     */
    public ViewObjectImpl getSlsDiscPlcForUpdate() {
        return (ViewObjectImpl) findViewObject("SlsDiscPlcForUpdate");
    }

    public Boolean editDiscRows() {
        Boolean b = true;
        if (areValidationsValid() == true) {
            ViewObjectImpl addEditVO = this.getAddEditTempVO();
            Row editRow = addEditVO.getCurrentRow();
            Object eoIdO = editRow.getAttribute("EoIdTrans");
            Object itmIdO = editRow.getAttribute("ItmIdTrans");
            Object itmGrpO = editRow.getAttribute("ItmGrpIdTrans");
            Object salesExecO = editRow.getAttribute("SalesExecIdTrans");
            Object eoCatgO = editRow.getAttribute("EoCatgTrans");
            Object startDtO = editRow.getAttribute("StartDtTrans");
            Object expDtO = editRow.getAttribute("ExpDtTrans");
            Object discTypO = editRow.getAttribute("DiscTypTrans");
            Object discValO = editRow.getAttribute("DiscValTrans");
            Object discBasisO = editRow.getAttribute("DiscountBasisTrans");
            Object replicateToOthrOrgO = editRow.getAttribute("ReplicateToOthrOrgs");
            Object taxReverseO = editRow.getAttribute("taxReversalTrans");


            Integer eoId = (eoIdO == null ? 0 : (Integer) eoIdO);
            StringBuilder itmId = (itmIdO == null ? new StringBuilder("") : new StringBuilder(itmIdO.toString()));
            StringBuilder itmGrp = (itmGrpO == null ? new StringBuilder("") : new StringBuilder(itmGrpO.toString()));
            Integer salesExec = (salesExecO == null ? 0 : (Integer) salesExecO);
            Integer eoCatg = (eoCatgO == null ? 0 : (Integer) eoCatgO);
            Timestamp startDt = (startDtO == null ? null : (Timestamp) startDtO);
            Timestamp expDt = (expDtO == null ? null : (Timestamp) expDtO);
            StringBuilder discTyp = (discTypO == null ? new StringBuilder("") : new StringBuilder(discTypO.toString()));
            Number discVal = (discValO == null ? new Number(0) : (Number) discValO);
            Integer discBasis = (discBasisO == null ? 0 : (Integer) discBasisO);
            StringBuilder replicateToOthrOrg =
                (replicateToOthrOrgO == null ? new StringBuilder("N") :
                 new StringBuilder(replicateToOthrOrgO.toString()));
            Timestamp effectiveDt = (Timestamp) editRow.getAttribute("StartDtTrans");
            StringBuilder taxReverse =
                (taxReverseO == null ? new StringBuilder("N") : new StringBuilder(taxReverseO.toString()));


            ViewObjectImpl discPlcForUpdate = this.getSlsDiscPlcForUpdate();
            discPlcForUpdate.setNamedWhereClauseParam("CldIdBind", getCldId().toString());
            discPlcForUpdate.setNamedWhereClauseParam("OrgIdBind", getOrgId().toString());
            discPlcForUpdate.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId().toString());
            discPlcForUpdate.setNamedWhereClauseParam("SlocIdBind", getSlocId());
            discPlcForUpdate.setNamedWhereClauseParam("ItmIdBind", itmIdO);
            discPlcForUpdate.setNamedWhereClauseParam("GrpIdBind", itmGrpO);
            discPlcForUpdate.setNamedWhereClauseParam("CatgIdBind", eoCatgO);
            discPlcForUpdate.setNamedWhereClauseParam("EoIdBind", eoIdO);
            discPlcForUpdate.setNamedWhereClauseParam("SalesExecIdBind", salesExecO);
            discPlcForUpdate.setNamedWhereClauseParam("DiscBasisBind", discBasisO);
            discPlcForUpdate.setNamedWhereClauseParam("RepOrgBind", replicateToOthrOrg.toString());
            if (effectiveDt == null) {
                discPlcForUpdate.setNamedWhereClauseParam("EffectiveDtBind", null);
            } else {
                try {
                    discPlcForUpdate.setNamedWhereClauseParam("EffectiveDtBind", effectiveDt.dateValue());
                } catch (SQLException e) {
                }
            }

            discPlcForUpdate.executeQuery();
            _log.info("ReplicateToOthrOrg : " + replicateToOthrOrg);
            _log.info("Rows for Update : " + discPlcForUpdate.getEstimatedRowCount());
            RowSetIterator ctr = discPlcForUpdate.createRowSetIterator(null);
            while (ctr.hasNext()) {
                Row row = ctr.next();
                row.setAttribute("DiscType", discTyp.toString());
                row.setAttribute("DiscVal", discVal);
                row.setAttribute("EffectiveDt", startDt);
                row.setAttribute("ExpiryDt", expDt);
                row.setAttribute("RevrslFlg", taxReverse);
            }
            ctr.closeRowSetIterator();
            getDBTransaction().postChanges();
            discPlcForUpdate.executeQuery();
            this.getDiscountPolicyDetailVO().executeQuery();
        } else {
            b = false;
        }
        return b;
    }

    public void searchForEdit() {
        ViewObjectImpl searchVO = this.getAddEditTempVO();
        Row searchRow = searchVO.getCurrentRow();
        Object eoIdO = searchRow.getAttribute("EoIdTrans");
        Object itmIdO = searchRow.getAttribute("ItmIdTrans");
        Object itmGrpO = searchRow.getAttribute("ItmGrpIdTrans");
        Object salesExecO = searchRow.getAttribute("SalesExecIdTrans");
        Object eoCatgO = searchRow.getAttribute("EoCatgTrans");
        Object discBasisO = searchRow.getAttribute("DiscountBasisTrans");
        Timestamp effDtO = (Timestamp) searchRow.getAttribute("StartDtTrans");

        ViewObjectImpl detailVO = this.getDiscountPolicyDetailVO();
        detailVO.setNamedWhereClauseParam("CldIdBind", getCldId().toString());
        detailVO.setNamedWhereClauseParam("OrgIdBind", getOrgId().toString());
        detailVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId().toString());
        detailVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        detailVO.setNamedWhereClauseParam("ItmIdBind", itmIdO);
        detailVO.setNamedWhereClauseParam("GrpIdBind", itmGrpO);
        detailVO.setNamedWhereClauseParam("CatgIdBind", eoCatgO);
        detailVO.setNamedWhereClauseParam("EoIdBind", eoIdO);
        detailVO.setNamedWhereClauseParam("DiscBasisBind", discBasisO);
        detailVO.setNamedWhereClauseParam("SalesExecIdBind", salesExecO);
        if (effDtO != null) {
            try {
                detailVO.setNamedWhereClauseParam("EffectiveDtBind", effDtO.dateValue());
            } catch (SQLException e) {
            }
        } else {
            detailVO.setNamedWhereClauseParam("EffectiveDtBind", null);
        }


        detailVO.executeQuery();
    }

    public Boolean commitTransaction() {
        Boolean b = true;
        if (this.getDBTransaction().isDirty()) {
            this.getDBTransaction().commit();
        }
        return b;
    }


}
