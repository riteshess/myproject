package slsparameterapp.model.services;

import adf.utils.ebiz.EbizParams;

import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsparameterapp.model.services.common.AppModuleAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 26 14:12:57 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleAMImpl extends ApplicationModuleImpl implements AppModuleAM {
    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleAMImpl() {
    }

    /**
     * Container's getter for AppParamSet.
     * @return AppParamSet
     */
    public ViewObjectImpl getAppParamSet() {
        return (ViewObjectImpl) findViewObject("AppParamSet");
    }

    /**
     * Container's getter for AppParam.
     * @return AppParam
     */
    public ViewObjectImpl getAppParam() {
        return (ViewObjectImpl) findViewObject("AppParam");
    }

    /**
     * Container's getter for DualSearchParam.
     * @return DualSearchParam
     */
    public ViewObjectImpl getDualSearchParam() {
        return (ViewObjectImpl) findViewObject("DualSearchParam");
    }

    /**
     * Container's getter for AppParamFk1VL1.
     * @return AppParamFk1VL1
     */
    public ViewLinkImpl getAppParamFk1VL1() {
        return (ViewLinkImpl) findViewLink("AppParamFk1VL1");
    }

    /**
     * Method to set the global parameter on page load
     */
    public void setGlobalParamter() {
        setGlobalParameterDualSearch();
    }

    /**
     * Method to set global paramter for search
     */
    public void setGlobalParameterDualSearch() {
        getDualSearchParam().setNamedWhereClauseParam("BindCldId", getCldId());
        getDualSearchParam().setNamedWhereClauseParam("BindSlocId", getSlocId());
        getDualSearchParam().setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());

    }

    private Integer getSlocId() {
        return EbizParams.GLBL_APP_SERV_LOC();
    }

    private String getCldId() {
        return EbizParams.GLBL_APP_CLD_ID();
    }

    private String getHoOrgId() {
        return EbizParams.GLBL_HO_ORG_ID();
    }

    /**
     * Method to seach the parameter Set
     */
    public void searchParameterSet() {
        Row curRow = getDualSearchParam().getCurrentRow();
        getAppParamSet().setNamedWhereClauseParam("BindCldId", curRow.getAttribute("CldId"));
        getAppParamSet().setNamedWhereClauseParam("BindSlocId", curRow.getAttribute("SlocId"));
        getAppParamSet().setNamedWhereClauseParam("BindHoOrgId", curRow.getAttribute("HoOrgId"));
        getAppParamSet().setNamedWhereClauseParam("BindParamSetId", curRow.getAttribute("ParamSetIdTrans"));
        getAppParamSet().setNamedWhereClauseParam("BindSetType", curRow.getAttribute("ParamSetTypeIdTrans"));
        getAppParamSet().executeQuery();
    }

    /**
     * Method to reset the parameter search result
     */
    public void resetParamaterset() {

        getDualSearchParam().executeQuery();
        getAppParamSet().setNamedWhereClauseParam("BindCldId", null);
        getAppParamSet().setNamedWhereClauseParam("BindSlocId", null);
        getAppParamSet().setNamedWhereClauseParam("BindHoOrgId", null);
        getAppParamSet().setNamedWhereClauseParam("BindParamSetId", null);
        getAppParamSet().setNamedWhereClauseParam("BindSetType", null);
        getAppParamSet().executeQuery();
    }

    /**
     *Method to validate all the required entries in the paramter set
     * @return
     */
    public Integer validateSetEntry() {
        Integer rsl = 0;
        Row curRow = getAppParamSet().getCurrentRow();
        if (curRow != null) {
            Object setName = curRow.getAttribute("ParamSetDesc");
            Object setType = curRow.getAttribute("ParamSetType");
            String setActi = curRow.getAttribute("ParamSetActv").toString();
            Object activResn = curRow.getAttribute("InactvReason");

            if (setName == null) {
                rsl = 1;
            } else if (setType == null) {
                rsl = 2;
            } else if (setActi.equalsIgnoreCase("N")) {
                if (activResn == null) {
                    rsl = 3;
                }
            }
        }
        return rsl;
    }

    /**
     *Method to validate all the required field in the parameter
     * @return
     */
    public Integer validateParamEntry() {
        Integer rsl = 0;
        Row curRow = getAppParam().getCurrentRow();
        if (curRow != null) {
            Object setName = curRow.getAttribute("ParamDesc");
            //Object setType = curRow.getAttribute("ParamSetType");
            String setActi = curRow.getAttribute("ParamActv").toString();
            Object activResn = curRow.getAttribute("InactvReason");

            if (setName == null) {
                rsl = 1;
            } else if (setActi.equalsIgnoreCase("N")) {
                if (activResn == null) {
                    rsl = 3;
                }
            }
        }
        return rsl;
    }

    /**
     * Method to validate duplicate name for paramter set
     */
    public Integer validateParamSetName(String curName) {
        Integer res = 0;
        ViewObjectImpl prmSet = getAppParamSet();
        prmSet.setRangeSize(-1);
        Row[] parmSet = prmSet.getAllRowsInRange();

        Row curRow = getAppParamSet().getCurrentRow();
        String curRowName =
            curRow.getAttribute("ParamSetDesc") == null ? "" : curRow.getAttribute("ParamSetDesc").toString();
        System.out.println(curName + " <<<===  Provided name need to compare with");
        for (Row r : parmSet) {
            Object tmpNam = r.getAttribute("ParamSetDesc");
            System.out.println(tmpNam + " This name need to compare with");
            if (tmpNam != null) {
                if (curName.equalsIgnoreCase(tmpNam.toString())) {
                    res++;
                }
            }
        }
        if (curName.equalsIgnoreCase(curRowName)) {
            res--;
        }
        System.out.println(res + " THe value of comparator");
        return res;
    }


    /**
     * Method to validate duplicate name for paramter
     */
    public Integer validateParamName(String curName) {
        Integer res = 0;

        ViewObjectImpl prmSet = getAppParam();
        prmSet.setRangeSize(-1);
        Row[] parmSet = prmSet.getAllRowsInRange();

        Row curRow = getAppParam().getCurrentRow();
        String curRowName = curRow.getAttribute("ParamDesc") == null ? "" : curRow.getAttribute("ParamDesc").toString();

        for (Row r : parmSet) {
            Object tmpNam = r.getAttribute("ParamDesc");
            System.out.println(tmpNam + " This name need to compare with");
            if (tmpNam != null) {
                if (curName.equalsIgnoreCase(tmpNam.toString())) {
                    res++;
                }
            }
        }
        if (curName.equalsIgnoreCase(curRowName)) {
            res--;
        }
        System.out.println(res + " THe value of comparator");
        return res;
    }
}

