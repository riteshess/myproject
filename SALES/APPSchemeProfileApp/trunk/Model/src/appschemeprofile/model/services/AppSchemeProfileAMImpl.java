package appschemeprofile.model.services;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import appschemeprofile.model.services.common.AppSchemeProfileAM;

import appschemeprofile.model.views.AppSchmVORowImpl;

import java.math.BigDecimal;

import oracle.jbo.domain.Number;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 31 16:34:29 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppSchemeProfileAMImpl extends ApplicationModuleImpl implements AppSchemeProfileAM {
    /**
     * This is the default constructor (do not remove).
     */
    public AppSchemeProfileAMImpl() {
    }

    public String getCldIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public Integer getSlocIdValue() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public String getHoOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getSchmDocId() {
        String retrnVal = "";
        Object schDocId = ADFModelUtils.resolvEl("#{pageFlowScope.SCHM_DOC_ID}");
        if (schDocId != null) {
            retrnVal = schDocId.toString();
        }
        return retrnVal;
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        String val = null;
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        if (Message != null) {
            val = Message.toString();
        }
        return val;
    }

    /**
     * Container's getter for AppSchmVO1.
     * @return AppSchmVO1
     */
    public ViewObjectImpl getAppSchmVO1() {
        return (ViewObjectImpl) findViewObject("AppSchmVO1");
    }

    /**
     * Container's getter for AppSchmDtlVO1.
     * @return AppSchmDtlVO1
     */
    public ViewObjectImpl getAppSchmDtlVO1() {
        return (ViewObjectImpl) findViewObject("AppSchmDtlVO1");
    }

    /**
     * Container's getter for LOVItemNameVO1.
     * @return LOVItemNameVO1
     */
    public ViewObjectImpl getLOVItemNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemNameVO1");
    }

    /**
     * Container's getter for AppSchmToAppSchmDtlVL1.
     * @return AppSchmToAppSchmDtlVL1
     */
    public ViewLinkImpl getAppSchmToAppSchmDtlVL1() {
        return (ViewLinkImpl) findViewLink("AppSchmToAppSchmDtlVL1");
    }

    /**
     * Container's getter for LOVItemGroup1.
     * @return LOVItemGroup1
     */
    public ViewObjectImpl getLOVItemGroupVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemGroupVO1");
    }

    /**
     * Set Item Group and Item Name Lov to Null
     */
    public void ChangeItemNameToNull() {
        Row currentRow = this.getAppSchmVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("ItmId", null);
            currentRow.setAttribute("GrpId", null);
            currentRow.setAttribute("ItemNameTrans", null);
            currentRow.setAttribute("ItemGroupNameTrans", null);
            currentRow.setAttribute("ItemDispNameTrans", null);
            currentRow.setAttribute("ItmUom", null);
        }
        //this.getAppSchmVO1().executeQuery();
    }

    /**
     * Code will be called when user Select Item First and then try to change Group then accordingly it will set the data to null
     */
    public void ChangeGroupNameToNull() {
        Row currentRow = this.getAppSchmVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("ItmId", null);
            currentRow.setAttribute("ItemNameTrans", null);
            currentRow.setAttribute("ItemDispNameTrans", null);
            currentRow.setAttribute("ItmUom", null);
        }
    }

    /**
     * Code which will set the values of SCHM ITM to null
     */
    public void ChangeSchemeItemNameToNull() {
        Row currentRow = this.getAppSchmDtlVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("FreeItmId", null);
            currentRow.setAttribute("NameItemTrans", null);
            currentRow.setAttribute("DispItemNameTrans", null);
            currentRow.setAttribute("FreeItmUom", null);
        }
    }

    /**
     * Container's getter for SearchData1.
     * @return SearchData1
     */
    public ViewObjectImpl getSearchDataVO1() {
        return (ViewObjectImpl) findViewObject("SearchDataVO1");
    }

    /**
     * Container's getter for TemporaryData1.
     * @return TemporaryData1
     */
    public ViewObjectImpl getTemporaryDataVO1() {
        return (ViewObjectImpl) findViewObject("TemporaryDataVO1");
    }

    /**
     * Method to Set BindVariable Globally
     */
    public void SetGlobalVariables() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.executeQuery();

        ViewObjectImpl searchDataVO1 = this.getSearchDataVO1();
        searchDataVO1.setNamedWhereClauseParam("BindSlocId", -1);
        searchDataVO1.executeQuery();

    }

    /**
     * Set Bind Variables for Lov
     */
    public void SetBindVariablesOfLovInAM() {
        ViewObjectImpl groupVO1 = this.getLOVItemGroupVO1();
        groupVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        groupVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        groupVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        groupVO1.executeQuery();

        ViewObjectImpl groupVO2 = this.getLOVItemGroupVO2();
        groupVO2.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        groupVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        groupVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        groupVO2.executeQuery();

        ViewObjectImpl itmVO1 = this.getLOVItemNameVO1();
        itmVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        itmVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        itmVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        itmVO1.executeQuery();

        ViewObjectImpl itmVO2 = this.getLOVItemNameVO2();
        itmVO2.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        itmVO2.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        itmVO2.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        itmVO2.executeQuery();
    }

    /**
     * Method for Search Button
     */
    public void SearchData() {
        Row tempRow = this.getTemporaryDataVO1().getCurrentRow();
        ViewObjectImpl dataVo = this.getSearchDataVO1();
        /* System.out.println("Cld " + this.getCldIdValue() + " sloc " + this.getSlocIdValue() + " Ho " +
                           this.getHoOrgIdValue()); */
        dataVo.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVo.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVo.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());

        if (tempRow != null) {
            if (tempRow.getAttribute("SchemeIdTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindSchemeId", tempRow.getAttribute("SchemeIdTrans"));
            }
            if (tempRow.getAttribute("SchemeNmeTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindSchemeName", tempRow.getAttribute("SchemeNmeTrans"));
            }
            if (tempRow.getAttribute("SchemeTypeTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindSchemeType", tempRow.getAttribute("SchemeTypeTrans"));
            }
            if (tempRow.getAttribute("GroupDispIdTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindGroupId", tempRow.getAttribute("GroupDispIdTrans"));
            }
            if (tempRow.getAttribute("ItemDispIdTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindItemId", tempRow.getAttribute("ItemDispIdTrans"));
            }
            if (tempRow.getAttribute("FromDateTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindFromDate", tempRow.getAttribute("FromDateTrans"));
            }
            if (tempRow.getAttribute("ToDateTrans") != null) {
                dataVo.setNamedWhereClauseParam("BindToDate", tempRow.getAttribute("ToDateTrans"));
            }
        }
        dataVo.executeQuery();
    }

    /**
     * Code For Reset Button
     */
    public void ResetData() {
        // System.out.println("Inside Reset");
        ViewObjectImpl impl = this.getTemporaryDataVO1();
        impl.executeQuery();

        ViewObjectImpl dataVO = this.getSearchDataVO1();

        dataVO.setNamedWhereClauseParam("BindCldId", "-1");
        dataVO.setNamedWhereClauseParam("BindSlocId", -1);
        dataVO.setNamedWhereClauseParam("BindHoOrgId", "-1");
        dataVO.setNamedWhereClauseParam("BindSchemeId", null);
        dataVO.setNamedWhereClauseParam("BindSchemeName", null);
        dataVO.setNamedWhereClauseParam("BindSchemeType", null);
        dataVO.setNamedWhereClauseParam("BindGroupId", null);
        dataVO.setNamedWhereClauseParam("BindItemId", null);
        dataVO.setNamedWhereClauseParam("BindFromDate", null);
        dataVO.setNamedWhereClauseParam("BindToDate", null);

        dataVO.executeQuery();
        //System.out.println("Outside Reset");
    }

    /**
     * Filter Data According to Search Page
     */

    public void FilterDataBasedOnSearch() {
        if (resolvEl("#{pageFlowScope.P_SCHEME_ID}") != null) {
            filterOnDocId(resolvEl("#{pageFlowScope.P_SCHEME_ID}"));
        }
    }

    public void filterOnDocId(String docId) {
        ViewObjectImpl appSchmVO1 = this.getAppSchmVO1();
        // ViewCriteria criteria = appSchmVO1.getViewCriteria("AppSchmVOCriteria");
        //  appSchmVO1.applyViewCriteria(criteria);
        appSchmVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        appSchmVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        appSchmVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        appSchmVO1.setNamedWhereClauseParam("BindDocId", docId);
        appSchmVO1.executeQuery();
    }

    /**
     * Scheme Name Duplicate Check Validator
     */
    public Boolean ChkSchemeNameDuplicate(String name) {
        Boolean val = false;

        ViewObjectImpl appSchmVO1 = this.getAppSchmVO1();
        Row[] filteredRows = appSchmVO1.getFilteredRows("SchmNm", name.toUpperCase());
        if (filteredRows.length > 0 && filteredRows[0] != appSchmVO1.getCurrentRow()) {
            val = true;
        }

        return val;
    }

    /**
     * Check Item Group duplicate
     */
    public Boolean ChkItemGroupNameDuplicate(String name) {
        Boolean val = false;
        System.out.println("Inside AMIMPL of ChkItemGroupNameDuplicate " + name);
        String id = null;
        ViewObjectImpl groupVO1 = this.getLOVItemGroupVO2();
        Row[] r = groupVO1.getFilteredRows("GrpNm", name);
        System.out.println("R.length is -- >" + r.length);
        if (r.length > 0) {
            id = (String) r[0].getAttribute("GrpId");
        }
        ViewObjectImpl AppSchmDtlVO1 = this.getAppSchmDtlVO1();
        Row[] r1 = AppSchmDtlVO1.getFilteredRows("FreeGrpId", id);
        System.out.println("r1 is --- <>" + r1.length);
        if (r1.length > 0 && r1[0] != AppSchmDtlVO1.getCurrentRow()) {
            val = true;
        }
        System.out.println("Value is " + val);
        return val;
    }

    /**
     * Check Item Name duplicate
     */
    public Boolean ChkItemNameDuplicate(String name) {
        Boolean val = false;
        System.out.println("Inside AMIMpl of Item Name Duplicate");
        String id = null;
        ViewObjectImpl itemVO1 = this.getLOVItemNameVO2();
        Row[] r = itemVO1.getFilteredRows("ItmDesc", name);
        if (r.length > 0) {
            id = (String) r[0].getAttribute("ItmId");
        }
        ViewObjectImpl AppSchmDtlVO1 = this.getAppSchmDtlVO1();
        Row[] r1 = AppSchmDtlVO1.getFilteredRows("FreeItmId", id);
        System.out.println("Length is " + r1.length);
        if (r1.length > 0 && r1[0] != AppSchmDtlVO1.getCurrentRow()) {
            val = true;
        }
        System.out.println("Value is " + val);
        return val;
    }

    /**
     *Code will check group Exist or not when user selects item name in Lov
     * Done this because when user try to select Item Name automatically Item group will be shown in popup
     * So to check that validation i am using following code
     */
    public Boolean ChkItemGroupExistOrNot(String name) {
        Boolean val = false;
        System.out.println("Chk Item Group exist or Not in AMIMPL " + name);
        String id = null;
        ViewObjectImpl itemVO1 = this.getLOVItemNameVO2();
        Row[] r = itemVO1.getFilteredRows("ItmDesc", name);
        System.out.println("r length is " + r.length + " --------");
        if (r.length > 0) {
            id = (String) r[0].getAttribute("GrpId");
        }
        System.out.println("Id is " + id);
        ViewObjectImpl AppSchmDtlVO1 = this.getAppSchmDtlVO1();
        Row[] r1 = AppSchmDtlVO1.getFilteredRows("FreeGrpId", id);
        System.out.println("r1 length is " + r1.length);
        for (int i = 0; i > r1.length; i++) {
            if (r1[i] != AppSchmDtlVO1.getCurrentRow() &&
                r1[i].getAttribute("GrpItmFlg").toString().equalsIgnoreCase("G")) {
                val = true;
            }
        }
        System.out.println("value is " + val);
        return val;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    System.out.println("baind val is " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e.getMessage());

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Get Latest Item Price
     */
    public Number GetLatestItemPrice(String itemDesc) {
        System.out.println("Inside Latest Price " + itemDesc + " cld " + this.getCldIdValue() + " ho " +
                           this.getHoOrgIdValue() + " sloc " + this.getSlocIdValue());
        String id = null;
        ViewObjectImpl itemVO1 = this.getLOVItemNameVO2();
        itemVO1.setRangeSize(-1);
        // System.out.println("without filter Rows is "+itemVO1.getEstimatedRowCount());
        itemVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        itemVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        itemVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        itemVO1.executeQuery();
        // System.out.println("Filtered Rows is "+itemVO1.getEstimatedRowCount());
        // System.out.println("----------------- "+itemVO1.getRowSet());
        RowQualifier rowQualifier = new RowQualifier(itemVO1);
        rowQualifier.setWhereClause(" CldId ='" + this.getCldIdValue() + "' and SlocId = " + this.getSlocIdValue() +
                                    " and HoOrgId = '" + this.getHoOrgIdValue() + "' and ItmDesc = '" + itemDesc + "'");
        Row[] r = itemVO1.getFilteredRows(rowQualifier);
        System.out.println("Length of rows is " + r.length);
        if (r.length > 0) {
            id = (String) r[0].getAttribute("ItmId");
            // System.out.println("Id is " + id);
        }
        //  System.out.println("Id is " + id);

        Number itmPrice = new Number(0);

        BigDecimal price =
            (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                            this.getHoOrgIdValue(), 0, id, new Timestamp(System.currentTimeMillis()),
                                            this.getUsrId(), new Timestamp(System.currentTimeMillis()), 73, 1
        });

        try {
            itmPrice =
                new Number(new Number(price).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"))));
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (itmPrice.compareTo(-1) == 0) {
            itmPrice = new Number(0);
        }

        Row currentRow = this.getAppSchmDtlVO1().getCurrentRow();
        if (currentRow != null && itmPrice.compareTo(new Number(0)) >= 0) {
            currentRow.setAttribute("FreeItmPrice", itmPrice);
        }
        // System.out.println("Item price is for item id is " + itmPrice + " id " + itemDesc+id);
        return itmPrice;
    }


    /**
     * Container's getter for LOVItemName1.
     * @return LOVItemName1
     */
    public ViewObjectImpl getLOVItemNameVO2() {
        return (ViewObjectImpl) findViewObject("LOVItemNameVO2");
    }

    /**
     * Container's getter for AppSchmItmDtl1.
     * @return AppSchmItmDtl1
     */
    public ViewObjectImpl getAppSchmItmDtlVO1() {
        return (ViewObjectImpl) findViewObject("AppSchmItmDtlVO1");
    }

    /**
     * Filter Detail Item Data PopUp on Row Basis
     */
    public void FilterDetailItemData() {
        Row r = this.getAppSchmDtlVO1().getCurrentRow();

        ViewObjectImpl appSchmItmDtlVO1 = this.getAppSchmItmDtlVO1();
        appSchmItmDtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        appSchmItmDtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        appSchmItmDtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        if (r != null) {
            appSchmItmDtlVO1.setNamedWhereClauseParam("BindGrpId", r.getAttribute("FreeGrpId"));
            appSchmItmDtlVO1.setNamedWhereClauseParam("BindItmId", r.getAttribute("FreeItmId"));
        }
        appSchmItmDtlVO1.executeQuery();
    }

    /**
     * Following method is used Insert Data from App Schm Dtl To App Schm Itm
     */
    public void InsertDataIntoItemFromDetail() {
        deletePreviousData();
        ViewObjectImpl appSchmDtlVO1 = this.getAppSchmDtlVO1();
        appSchmDtlVO1.setRangeSize(-1);
        Row[] allRowsInRange = appSchmDtlVO1.getAllRowsInRange();
        System.out.println("Length of rows is " + allRowsInRange.length);
        try {
            for (int i = 0; i < allRowsInRange.length; i++) {
                Object val = callStoredFunction(Types.NUMERIC, "FN_INS_SCHM_ITM(?,?,?,?,?,?,?,?)", new Object[] {
                                                this.getSlocIdValue(), this.getCldIdValue(), this.getHoOrgIdValue(),
                                                allRowsInRange[i].getAttribute("DocId"),
                                                allRowsInRange[i].getAttribute("FreeItmId"),
                                                allRowsInRange[i].getAttribute("FreeGrpId"),
                                                allRowsInRange[i].getAttribute("ItmSelType"), "Y"
                });

            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("Error in AMIMPL for calling this FN_INS_SCHM_ITM function " + e.getMessage());
        }
    }

    /**
     * Container's getter for ViewSchmDetail1.
     * @return ViewSchmDetail1
     */
    public ViewObjectImpl getViewSchmDetailVO1() {
        return (ViewObjectImpl) findViewObject("ViewSchmDetailVO1");
    }

    /**
     * Container's getter for ViewSchemeItemDetail1.
     * @return ViewSchemeItemDetail1
     */
    public ViewObjectImpl getViewSchemeItemDetailVO1() {
        return (ViewObjectImpl) findViewObject("ViewSchemeItemDetailVO1");
    }

    /**
     * Container's getter for ViewSchemeDetailToViewItemDetailVL1.
     * @return ViewSchemeDetailToViewItemDetailVL1
     */
    public ViewLinkImpl getViewSchemeDetailToViewItemDetailVL1() {
        return (ViewLinkImpl) findViewLink("ViewSchemeDetailToViewItemDetailVL1");
    }

    /**
     * Code for Viewing Scheme Detail based on Item
     */
    public void ViewSchemeDetailData() {
        setSchemeNameListBind();
        String grpId = resolvEl("#{pageFlowScope.P_GROUP_ID}");
        String itmId = resolvEl("#{pageFlowScope.P_ITEM_ID}");
        String uomId = resolvEl("#{pageFlowScope.P_ITEM_UOM}");
        Object totAmt = resolvEl("#{pageFlowScope.P_TOT_AMT}");
        Object totQty = resolvEl("#{pageFlowScope.P_TOT_QTY}");
        Object date = resolvEl("#{pageFlowScope.P_USR_DT}");
        Object eoId = resolvEl("#{pageFlowScope.P_EO_ID}");
        Object catgId = resolvEl("#{pageFlowScope.P_CATG_ID}");
        Object execId = resolvEl("#{pageFlowScope.P_EXEC_ID}");

        ViewObjectImpl detailVO1 = this.getViewSchmDetailVO1();
        detailVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        detailVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        detailVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        if (grpId != null) {
            detailVO1.setNamedWhereClauseParam("BindGrpId", grpId);
        }
        if (itmId != null) {
            detailVO1.setNamedWhereClauseParam("BindItemId", itmId);
        }
        if (uomId != null) {
            detailVO1.setNamedWhereClauseParam("BindItemUom", uomId);
        }
        detailVO1.setNamedWhereClauseParam("BindAmt", totAmt);
        detailVO1.setNamedWhereClauseParam("BindQty", totQty);
        detailVO1.setNamedWhereClauseParam("BindDt", date);
        detailVO1.setNamedWhereClauseParam("BindEoId", eoId);
        detailVO1.setNamedWhereClauseParam("BindCatId", catgId);
        detailVO1.setNamedWhereClauseParam("BindExecId", execId);
        detailVO1.executeQuery();
    }

    /**
     * Container's getter for LOVItemGroup1.
     * @return LOVItemGroup1
     */
    public ViewObjectImpl getLOVItemGroupVO2() {
        return (ViewObjectImpl) findViewObject("LOVItemGroupVO2");
    }

    /**
     * Container's getter for AppSchmItmVO1.
     * @return AppSchmItmVO1
     */
    public ViewObjectImpl getAppSchmItmVO1() {
        return (ViewObjectImpl) findViewObject("AppSchmItmVO1");
    }

    /**
     * Container's getter for SchmToItmVL1.
     * @return SchmToItmVL1
     */
    public ViewLinkImpl getSchmToItmVL1() {
        return (ViewLinkImpl) findViewLink("SchmToItmVL1");
    }

    public void deletePreviousData() {
        ViewObjectImpl appSchmVO1 = this.getAppSchmVO1();
        ViewObjectImpl appSchmDtlVO1 = this.getAppSchmDtlVO1();
        Row currentRow = appSchmVO1.getCurrentRow();
        if (currentRow != null) {
            System.out.println("yes current row found..");
            /*  RowSetIterator crtDtl = appSchmDtlVO1.createRowSetIterator(null);
            while(crtDtl.hasNext()){
                Row next = crtDtl.next();
                next.remove();
            }
            appSchmDtlVO1.executeQuery(); */
            AppSchmVORowImpl row = (AppSchmVORowImpl) currentRow;
            String docId = row.getAttribute("DocId").toString();
            ViewObjectImpl appSchmItmVO1 = this.getAppSchmItmVO1();
            appSchmItmVO1.setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
            appSchmItmVO1.setNamedWhereClauseParam("docIdBind", docId);
            appSchmItmVO1.setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            appSchmItmVO1.setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            appSchmItmVO1.executeQuery();
            RowSetIterator itr = appSchmItmVO1.createRowSetIterator(null);
            int count = 0;
            while (itr.hasNext()) {
                itr.next().remove();
                count++;
            }
            System.out.println("Count is: " + count);
            getDBTransaction().commit();
            appSchmItmVO1.executeQuery();
        }
    }

    public boolean chkDetailRow() {
        ViewObjectImpl appSchmDtlVO1 = this.getAppSchmDtlVO1();
        int count = appSchmDtlVO1.getRowCount();
        if (count > 0)
            return true;

        return false;
    }

    public Number chkMinAmtValidator() {
        Number itmPriceVar = new Number(0);
        Number itmQty = new Number(0);
        Number itmPrice = new Number(0);
        if (this.getAppSchmVO1().getCurrentRow() != null) {
            if (this.getAppSchmVO1().getCurrentRow().getAttribute("SchmTyp").toString().equals("A") &&
                this.getAppSchmVO1().getCurrentRow().getAttribute("ItemGroupNameTrans") != null &&
                this.getAppSchmVO1().getCurrentRow().getAttribute("ItemNameTrans") == null) {
                System.out.println("Inside Amount");
                ViewObjectImpl appSchmDtlVO1 = this.getAppSchmDtlVO1();
                RowSetIterator crt = appSchmDtlVO1.createRowSetIterator(null);
                while (crt.hasNext()) {
                    Row next = crt.next();
                    if (next.getAttribute("FreeItmPrice") != null) {
                        itmPriceVar = itmPriceVar.add((Number) next.getAttribute("FreeItmPrice"));
                        System.out.println("In Amount Scheme type price is " + itmPriceVar);
                    } else {

                    }
                }


            }
        }
        return itmPriceVar;
    }
    /*  else   if(this.getAppSchmVO1().getCurrentRow().getAttribute("SchmTyp").toString().equals("Q") && this.getAppSchmVO1().getCurrentRow().getAttribute("ItemGroupNameTrans") != null &&
           this.getAppSchmVO1().getCurrentRow().getAttribute("ItemNameTrans")!=null ){
               System.out.println("Inside Qty");
             String itemIdTrans= this.getAppSchmVO1().getCurrentRow().getAttribute("ItmId").toString();
             System.out.println("Item  Id is "+itemIdTrans);
               ViewObjectImpl appSchmDtlVO1 = this.getAppSchmDtlVO1();
                Row[] filteredRows = appSchmDtlVO1.getFilteredRows("FreeItmId", itemIdTrans);
                if(filteredRows.length>0){

                   itmPrice= (Number)filteredRows[0].getAttribute("FreeItmPrice");
                   System.out.println("In Qty scheme price is  "+itmPrice);
                   itmQty=(Number)filteredRows[0].getAttribute("FreeItmQty");
                    System.out.println("In Qty scheme Qty is  "+itmQty);
                    itmPriceVar=itmPrice.multiply(itmQty);
                }

                System.out.println("After Multiply the price is "+itmPriceVar);
                this.getAppSchmVO1().getCurrentRow().setAttribute("MinAmt", itmPriceVar);
                //this.getAppSchmVO1().executeQuery();
                return itmPriceVar;
           }
        }
        System.out.println("End returning value "+itmPriceVar);
        return itmPriceVar;
    } */

    public void executeAppSchmVo() {
        ViewObjectImpl appSchmVO1 = this.getAppSchmVO1();
        appSchmVO1.executeQuery();
    }

    public Number findLatestItemPrice() {
        Number itmPrice = new Number(0);
        if (this.getAppSchmVO1().getCurrentRow() != null) {
            if (this.getAppSchmVO1().getCurrentRow().getAttribute("ItemNameTrans") != null) {
                String id = null;

                ViewObjectImpl itemVO1 = this.getLOVItemNameVO2();
                itemVO1.setRangeSize(-1);
                // System.out.println("without filter Rows is "+itemVO1.getEstimatedRowCount());

                itemVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                itemVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                itemVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                itemVO1.executeQuery();
                // System.out.println("Filtered Rows is "+itemVO1.getEstimatedRowCount());
                // System.out.println("----------------- "+itemVO1.getRowSet());
                RowQualifier rowQualifier = new RowQualifier(itemVO1);
                rowQualifier.setWhereClause(" CldId ='" + this.getCldIdValue() + "' and SlocId = " +
                                            this.getSlocIdValue() + " and HoOrgId = '" + this.getHoOrgIdValue() +
                                            "' and ItmDesc = '" +
                                            this.getAppSchmVO1().getCurrentRow().getAttribute("ItemNameTrans").toString() +
                                            "'");
                Row[] r = itemVO1.getFilteredRows(rowQualifier);
                System.out.println("Length of rows is " + r.length);
                if (r.length > 0) {
                    id = (String) r[0].getAttribute("ItmId");
                    // System.out.println("Id is " + id);
                }
                //  System.out.println("Id is " + id);


                BigDecimal price =
                    (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    this.getCldIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                                    this.getHoOrgIdValue(), 0, id,
                                                    new Timestamp(System.currentTimeMillis()), this.getUsrId(),
                                                    new Timestamp(System.currentTimeMillis()), 73, 1
                });

                try {
                    itmPrice =
                        new Number(new Number(price).round(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"))));
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                if (itmPrice.compareTo(-1) == 0) {
                    itmPrice = new Number(0);
                }

            }
        }
        return itmPrice;
    }

    public void ChangeItemQtyAndAmtToNull() {
        Row currentRow = this.getAppSchmVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("MaxAmt", null);
            currentRow.setAttribute("MaxQty", null);
            currentRow.setAttribute("MinAmt", null);
            currentRow.setAttribute("MinQty", null);

        }
    }

    public Boolean getFinalisedValue() {
        Boolean Flag = false;
        String finalFlg = null;
        ViewObjectImpl appSchmVO1 = this.getAppSchmVO1();
        Row currentRow = appSchmVO1.getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("Finalize") != null) {
                if (currentRow.getAttribute("Finalize").equals("Y")) {
                    Flag = true;
                }
            } else {
                Flag = false;
            }
        }
        return Flag;
    }

    public String getCurrentDocId() {
        String docIdVar = null;
        ViewObjectImpl appSchmVO1 = this.getAppSchmVO1();
        docIdVar =
            appSchmVO1.getCurrentRow().getAttribute("DocId") == null ? " " :
            appSchmVO1.getCurrentRow().getAttribute("DocId").toString();
        return docIdVar;
    }

    public void finalizeSchemePrf() {
        ViewObjectImpl appSchmVO1 = this.getAppSchmVO1();
        Row currentRow = appSchmVO1.getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("Finalize", "Y");
            appSchmVO1.executeQuery();
        }

    }

    /**
     * Container's getter for ViewSchemeList1.
     * @return ViewSchemeList1
     */
    public ViewObjectImpl getViewSchemeList1() {
        return (ViewObjectImpl) findViewObject("ViewSchemeList1");
    }
    //Method to filter scheme name on page load
    public void setSchemeNameListBind() {
        getViewSchemeList1().setNamedWhereClauseParam("BindCldId", getCldIdValue());
        getViewSchemeList1().setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        getViewSchemeList1().setNamedWhereClauseParam("BindHoOrgId", getHoOrgIdValue());
        getViewSchemeList1().setNamedWhereClauseParam("BindSchmDocId", getSchmDocId());
        getViewSchemeList1().executeQuery();
    }
}

