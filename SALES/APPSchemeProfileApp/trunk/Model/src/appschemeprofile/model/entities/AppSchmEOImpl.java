package appschemeprofile.model.entities;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.exception.ADFUtilsException;

import adf.utils.model.ADFModelUtils;

import appschemeprofile.model.services.AppSchemeProfileAMImpl;

import java.math.BigInteger;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 31 12:54:05 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppSchmEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        SchmId,
        SchmNm,
        SchmDesc,
        SchmTyp,
        GrpItmFlg,
        GrpId,
        ItmId,
        ItmUom,
        MinQty,
        MaxQty,
        MinAmt,
        MaxAmt,
        ValidFrom,
        ValidTo,
        SchmCalcTyp,
        ActvFlg,
        InactvResn,
        InactvDt,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        DocId,
        UnlmtQty,
        UnlmtAmt,
        FyId,
        Finalize,
        AppSchmDtl;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int SCHMID = AttributesEnum.SchmId.index();
    public static final int SCHMNM = AttributesEnum.SchmNm.index();
    public static final int SCHMDESC = AttributesEnum.SchmDesc.index();
    public static final int SCHMTYP = AttributesEnum.SchmTyp.index();
    public static final int GRPITMFLG = AttributesEnum.GrpItmFlg.index();
    public static final int GRPID = AttributesEnum.GrpId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int MINQTY = AttributesEnum.MinQty.index();
    public static final int MAXQTY = AttributesEnum.MaxQty.index();
    public static final int MINAMT = AttributesEnum.MinAmt.index();
    public static final int MAXAMT = AttributesEnum.MaxAmt.index();
    public static final int VALIDFROM = AttributesEnum.ValidFrom.index();
    public static final int VALIDTO = AttributesEnum.ValidTo.index();
    public static final int SCHMCALCTYP = AttributesEnum.SchmCalcTyp.index();
    public static final int ACTVFLG = AttributesEnum.ActvFlg.index();
    public static final int INACTVRESN = AttributesEnum.InactvResn.index();
    public static final int INACTVDT = AttributesEnum.InactvDt.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int UNLMTQTY = AttributesEnum.UnlmtQty.index();
    public static final int UNLMTAMT = AttributesEnum.UnlmtAmt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int FINALIZE = AttributesEnum.Finalize.index();
    public static final int APPSCHMDTL = AttributesEnum.AppSchmDtl.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppSchmEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("appschemeprofile.model.entities.AppSchmEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for SchmId, using the alias name SchmId.
     * @return the value of SchmId
     */
    public String getSchmId() {
        return (String)getAttributeInternal(SCHMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SchmId.
     * @param value value to set the SchmId
     */
    public void setSchmId(String value) {
        setAttributeInternal(SCHMID, value);
    }

    /**
     * Gets the attribute value for SchmNm, using the alias name SchmNm.
     * @return the value of SchmNm
     */
    public String getSchmNm() {
        return (String)getAttributeInternal(SCHMNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for SchmNm.
     * @param value value to set the SchmNm
     */
    public void setSchmNm(String value) {
        if (value != null) {
            value = value.toUpperCase();
        }
        setAttributeInternal(SCHMNM, value);
    }

    /**
     * Gets the attribute value for SchmDesc, using the alias name SchmDesc.
     * @return the value of SchmDesc
     */
    public String getSchmDesc() {
        return (String)getAttributeInternal(SCHMDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for SchmDesc.
     * @param value value to set the SchmDesc
     */
    public void setSchmDesc(String value) {
        setAttributeInternal(SCHMDESC, value);
    }

    /**
     * Gets the attribute value for SchmTyp, using the alias name SchmTyp.
     * @return the value of SchmTyp
     */
    public String getSchmTyp() {
        return (String)getAttributeInternal(SCHMTYP);
    }

    /**
     * Sets <code>value</code> as the attribute value for SchmTyp.
     * @param value value to set the SchmTyp
     */
    public void setSchmTyp(String value) {
        setAttributeInternal(SCHMTYP, value);
    }

    /**
     * Gets the attribute value for GrpItmFlg, using the alias name GrpItmFlg.
     * @return the value of GrpItmFlg
     */
    public String getGrpItmFlg() {
        return (String)getAttributeInternal(GRPITMFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for GrpItmFlg.
     * @param value value to set the GrpItmFlg
     */
    public void setGrpItmFlg(String value) {
        setAttributeInternal(GRPITMFLG, value);
    }

    /**
     * Gets the attribute value for GrpId, using the alias name GrpId.
     * @return the value of GrpId
     */
    public String getGrpId() {
        return (String)getAttributeInternal(GRPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for GrpId.
     * @param value value to set the GrpId
     */
    public void setGrpId(String value) {
        setAttributeInternal(GRPID, value);
    }

    /**
     * Gets the attribute value for ItmId, using the alias name ItmId.
     * @return the value of ItmId
     */
    public String getItmId() {
        return (String)getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmId.
     * @param value value to set the ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ItmUom, using the alias name ItmUom.
     * @return the value of ItmUom
     */
    public String getItmUom() {
        return (String)getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmUom.
     * @param value value to set the ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for MinQty, using the alias name MinQty.
     * @return the value of MinQty
     */
    public Number getMinQty() {
        return (Number)getAttributeInternal(MINQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for MinQty.
     * @param value value to set the MinQty
     */
    public void setMinQty(Number value) {
        setAttributeInternal(MINQTY, value);
    }

    /**
     * Gets the attribute value for MaxQty, using the alias name MaxQty.
     * @return the value of MaxQty
     */
    public Number getMaxQty() {
        return (Number)getAttributeInternal(MAXQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for MaxQty.
     * @param value value to set the MaxQty
     */
    public void setMaxQty(Number value) {
        setAttributeInternal(MAXQTY, value);
    }

    /**
     * Gets the attribute value for MinAmt, using the alias name MinAmt.
     * @return the value of MinAmt
     */
    public Number getMinAmt() {
        return (Number)getAttributeInternal(MINAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for MinAmt.
     * @param value value to set the MinAmt
     */
    public void setMinAmt(Number value) {
        setAttributeInternal(MINAMT, value);
    }

    /**
     * Gets the attribute value for MaxAmt, using the alias name MaxAmt.
     * @return the value of MaxAmt
     */
    public Number getMaxAmt() {
        return (Number)getAttributeInternal(MAXAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for MaxAmt.
     * @param value value to set the MaxAmt
     */
    public void setMaxAmt(Number value) {
        setAttributeInternal(MAXAMT, value);
    }

    /**
     * Gets the attribute value for ValidFrom, using the alias name ValidFrom.
     * @return the value of ValidFrom
     */
    public Timestamp getValidFrom() {
        return (Timestamp)getAttributeInternal(VALIDFROM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValidFrom.
     * @param value value to set the ValidFrom
     */
    public void setValidFrom(Timestamp value) {
        setAttributeInternal(VALIDFROM, value);
    }

    /**
     * Gets the attribute value for ValidTo, using the alias name ValidTo.
     * @return the value of ValidTo
     */
    public Timestamp getValidTo() {
        return (Timestamp)getAttributeInternal(VALIDTO);
    }

    /**
     * Sets <code>value</code> as the attribute value for ValidTo.
     * @param value value to set the ValidTo
     */
    public void setValidTo(Timestamp value) {
        setAttributeInternal(VALIDTO, value);
    }

    /**
     * Gets the attribute value for SchmCalcTyp, using the alias name SchmCalcTyp.
     * @return the value of SchmCalcTyp
     */
    public String getSchmCalcTyp() {
        return (String)getAttributeInternal(SCHMCALCTYP);
    }

    /**
     * Sets <code>value</code> as the attribute value for SchmCalcTyp.
     * @param value value to set the SchmCalcTyp
     */
    public void setSchmCalcTyp(String value) {
        setAttributeInternal(SCHMCALCTYP, value);
    }

    /**
     * Gets the attribute value for ActvFlg, using the alias name ActvFlg.
     * @return the value of ActvFlg
     */
    public String getActvFlg() {
        return (String)getAttributeInternal(ACTVFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for ActvFlg.
     * @param value value to set the ActvFlg
     */
    public void setActvFlg(String value) {
        setAttributeInternal(ACTVFLG, value);
    }

    /**
     * Gets the attribute value for InactvResn, using the alias name InactvResn.
     * @return the value of InactvResn
     */
    public String getInactvResn() {
        return (String)getAttributeInternal(INACTVRESN);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactvResn.
     * @param value value to set the InactvResn
     */
    public void setInactvResn(String value) {
        setAttributeInternal(INACTVRESN, value);
    }

    /**
     * Gets the attribute value for InactvDt, using the alias name InactvDt.
     * @return the value of InactvDt
     */
    public Timestamp getInactvDt() {
        return (Timestamp)getAttributeInternal(INACTVDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactvDt.
     * @param value value to set the InactvDt
     */
    public void setInactvDt(Timestamp value) {
        setAttributeInternal(INACTVDT, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for UnlmtQty, using the alias name UnlmtQty.
     * @return the value of UnlmtQty
     */
    public String getUnlmtQty() {
        return (String)getAttributeInternal(UNLMTQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for UnlmtQty.
     * @param value value to set the UnlmtQty
     */
    public void setUnlmtQty(String value) {
        setAttributeInternal(UNLMTQTY, value);
    }

    /**
     * Gets the attribute value for UnlmtAmt, using the alias name UnlmtAmt.
     * @return the value of UnlmtAmt
     */
    public String getUnlmtAmt() {
        return (String)getAttributeInternal(UNLMTAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UnlmtAmt.
     * @param value value to set the UnlmtAmt
     */
    public void setUnlmtAmt(String value) {
        setAttributeInternal(UNLMTAMT, value);
    }

    /**
     * Gets the attribute value for FyId, using the alias name FyId.
     * @return the value of FyId
     */
    public Integer getFyId() {
        return (Integer)getAttributeInternal(FYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for FyId.
     * @param value value to set the FyId
     */
    public void setFyId(Integer value) {
        setAttributeInternal(FYID, value);
    }

    /**
     * Gets the attribute value for Finalize1, using the alias name Finalize1.
     * @return the value of Finalize1
     */
    public String getFinalize() {
        return (String) getAttributeInternal(FINALIZE);
    }

    /**
     * Sets <code>value</code> as the attribute value for Finalize1.
     * @param value value to set the Finalize1
     */
    public void setFinalize(String value) {
        setAttributeInternal(FINALIZE, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAppSchmDtl() {
        return (RowIterator)getAttributeInternal(APPSCHMDTL);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param hoOrgId key constituent
     * @param schmId key constituent
     * @param docId key constituent
     * @param fyId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String hoOrgId, String schmId, String docId,
                                       Integer fyId) {
        return new Key(new Object[] { cldId, slocId, hoOrgId, schmId, docId, fyId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        this.setCldId(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        this.setSlocId(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        this.setHoOrgId(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());

        this.setUsrIdCreate(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
        this.setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));

     //   this.setValidFrom(new Timestamp(System.currentTimeMillis()));
      //  this.setValidTo(new Timestamp(System.currentTimeMillis()));

        this.setSchmTyp("Q");
        
        this.setGrpItmFlg("I");
        
        this.setSchmCalcTyp("A");
        
        this.setActvFlg("Y");
        
        this.setUnlmtAmt("N");
        
        this.setUnlmtQty("N");
       // this.setFinalize("N");
        
        this.setDocId(GetHexDocNoFromFun());
        
        this.setFyId(GetFyIdFromFun());

        super.create(attributeList);
    }

    /**
     * Add locking logic here.
     */
    /*  public void lock() {
        try {
            super.lock();
        } catch (RowInconsistentException e) {
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES);
            super.lock();
        }
    } */

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if (operation == DML_UPDATE) {
            if (this.getItmId() == null) {
                this.setItmId("0");
            }
            
            this.setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
            this.setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        } else if (operation == DML_INSERT) {
            
            this.setSchmId(GetSchemeIdFromFun());
            
            if (this.getItmId() == null) {
                this.setItmId("0");
            }
        }
        super.doDML(operation, e);
    }

    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /** ---------- To create HexDocId Id -------------**/

    public String GetHexDocNoFromFun() {

        String hexDocIdFromFun = "0";
        try {
            hexDocIdFromFun = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID(?,?,?,?,?,?)", new Object[] {
                                                      this.getCldId(), this.getSlocId(), this.getHoOrgId(),
                                                      this.getUsrIdCreate(), 2052, 0
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at EoImpl :" + e.getMessage());
        }
        System.out.println("===========" + hexDocIdFromFun);
        return hexDocIdFromFun;
    }

    /** ---------- To create DispSchemeId Id -------------**/

    public String GetSchemeIdFromFun() {
        String dispIdFromFum = "0";

        try {
            dispIdFromFum = this.callStoredFunction(Types.VARCHAR, "FN_GEN_DISP_ID_SCHM(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                this.getSlocId(), this.getCldId(), this.getHoOrgId(), 2052,
                                                                this.getDocId(), 0, "APP$SCHM", this.getFyId(), 0
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION at EOImpl:" + e.getMessage());
        }
        System.out.println("===========" + dispIdFromFum);

        return dispIdFromFum;
    }
    
    public Object resolvElDC(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp =
              elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
          return valueExp.getValue(elContext);
      }

      public AppSchemeProfileAMImpl getAm() {
          AppSchemeProfileAMImpl am = (AppSchemeProfileAMImpl)resolvElDC("AppSchemeProfileAMDataControl");
          return am;
      }
    /** ---------- To create FYID Id -------------**/

        public Integer GetFyIdFromFun() {
        
        
            Integer fyIdFromFun = 0;

            try {
               Object o = ADFModelUtils.callFunction(getAm(), new StringBuilder("APP.GET_ORG_FY_ID (?,?,?)"), new Object[] {
                                                      EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                                      StaticValue.getTruncatedCurrDt()
                }, Types.INTEGER);
                /*  fyIdFromFun = (Integer) this.callStoredFunction(Types.INTEGER, "APP.GET_FY_ID(?,?,?,?)", new Object[] {
                                                                this.getCldId(), this.getHoOrgId(), new Timestamp(System.currentTimeMillis()), "FY"
                }); */
                if(o!=null){
                    fyIdFromFun=(Integer)o;
                }
                else{
                    System.out.println("There is some error in Function FyId is Null");
                }

            } catch (Exception e) {
                System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at AppSchmEoImpl :" + e.getMessage());
            }
            System.out.println("===========" + fyIdFromFun);

            return fyIdFromFun;
        }
}

