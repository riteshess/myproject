package applcparam.model.service;

import adf.utils.bean.StaticValue;
import adf.utils.model.ADFModelUtils;

import applcparam.model.service.common.APPLCParamAM;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;

import javax.faces.validator.ValidatorException;

import oracle.adf.share.ADFContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ViewLinkDefImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 07 11:58:25 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class APPLCParamAMImpl extends ApplicationModuleImpl implements APPLCParamAM {
    /**
     * This is the default constructor (do not remove).
     */
    public APPLCParamAMImpl() {
    }

    /****Methods to get Global Parameter*/
    public Integer getparamSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public Integer getparamUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }


    public String getparamCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public String getparamHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }


    /**
     * Container's getter for APPLCParamVO1.
     * @return APPLCParamVO1
     */
    public ViewObjectImpl getAPPLCParamVO1() {
        return (ViewObjectImpl) findViewObject("APPLCParamVO1");
    }

    /**
     * Container's getter for TransSearchDualVO1.
     * @return TransSearchDualVO1
     */
    public ViewObjectImpl getTransSearchDualVO1() {
        return (ViewObjectImpl) findViewObject("TransSearchDualVO1");
    }

    /**
     * Container's getter for LOVParamTypeVO1.
     * @return LOVParamTypeVO1
     */
    public ViewObjectImpl getLOVParamTypeVO1() {
        return (ViewObjectImpl) findViewObject("LOVParamTypeVO1");
    }

    /**
     * Container's getter for LOVParamBasisVO1.
     * @return LOVParamBasisVO1
     */
    public ViewObjectImpl getLOVParamBasisVO1() {
        return (ViewObjectImpl) findViewObject("LOVParamBasisVO1");
    }

    /** Search Function to apply search on LCParam
    VO for param name and param Type value.*/

    public void searchLCParam() {
        ViewObjectImpl aPPLCParamVO1 = this.getAPPLCParamVO1();
        ViewObjectImpl dualVO1 = this.getTransSearchDualVO1();
        String paramNameVal = null;
        Integer paramTypeVal = null;
        Integer paramBasis = null;
        if (dualVO1.getCurrentRow() != null) {
            if (dualVO1.getCurrentRow().getAttribute("TransParamName") != null) {
                paramNameVal = dualVO1.getCurrentRow().getAttribute("TransParamName").toString();

            }
            if (dualVO1.getCurrentRow().getAttribute("TransParamType") != null) {
                paramTypeVal = (Integer) dualVO1.getCurrentRow().getAttribute("TransParamType");
            }
            if (dualVO1.getCurrentRow().getAttribute("TransParamBasis") != null) {
                paramBasis = (Integer) dualVO1.getCurrentRow().getAttribute("TransParamBasis");
            }

        }
        ViewCriteria vc = aPPLCParamVO1.getViewCriteria("APPLCParamVOCriteria");

        aPPLCParamVO1.applyViewCriteria(vc);
        aPPLCParamVO1.setNamedWhereClauseParam("CldIdBindVar", getparamCldId());
        aPPLCParamVO1.setNamedWhereClauseParam("HoOrgIdBindVar", getparamHoOrgId());
        aPPLCParamVO1.setNamedWhereClauseParam("ParamNameBindVar", paramNameVal);
        aPPLCParamVO1.setNamedWhereClauseParam("ParamTypeBindVar", paramTypeVal);
        aPPLCParamVO1.setNamedWhereClauseParam("SlocIdBindVar", getparamSlocId());
        aPPLCParamVO1.setNamedWhereClauseParam("ParamBasisBindVar", paramBasis);
        aPPLCParamVO1.executeQuery();

    }

    public void resetLCParam() {

        ViewObjectImpl aPPLCParamVO1 = this.getAPPLCParamVO1();


        ViewCriteria vc = aPPLCParamVO1.getViewCriteria("APPLCParamVOCriteria");

        aPPLCParamVO1.applyViewCriteria(vc);
        aPPLCParamVO1.setNamedWhereClauseParam("CldIdBindVar", null);
        aPPLCParamVO1.setNamedWhereClauseParam("HoOrgIdBindVar", null);
        aPPLCParamVO1.setNamedWhereClauseParam("ParamNameBindVar", null);
        aPPLCParamVO1.setNamedWhereClauseParam("ParamTypeBindVar", -1);
        aPPLCParamVO1.setNamedWhereClauseParam("SlocIdBindVar", null);
        aPPLCParamVO1.setNamedWhereClauseParam("ParamBasisBindVar", -1);
        aPPLCParamVO1.executeQuery();
    }

    public String resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();
        return Message.toString();
    }

    public void entryFilter() {
        ViewObjectImpl aPPLCParamVO1 = this.getAPPLCParamVO1();


        ViewCriteria vc = aPPLCParamVO1.getViewCriteria("APPLCParamVOCriteria");

        aPPLCParamVO1.applyViewCriteria(vc);
        aPPLCParamVO1.setNamedWhereClauseParam("CldIdBindVar", getparamCldId());
        aPPLCParamVO1.setNamedWhereClauseParam("HoOrgIdBindVar", getparamHoOrgId());
        aPPLCParamVO1.setNamedWhereClauseParam("ParamNameBindVar", null);
        aPPLCParamVO1.setNamedWhereClauseParam("ParamTypeBindVar", null);
        aPPLCParamVO1.setNamedWhereClauseParam("SlocIdBindVar", getparamSlocId());
        aPPLCParamVO1.setNamedWhereClauseParam("ParamBasisBindVar", null);
        aPPLCParamVO1.executeQuery();

    }

    /**
     * Method to save LC Parameter
     * @return
     * 1 : Param Name is not def
     * 2 : Param Basis is not def
     * 3 : Param Type is not def
     * 4 : Date invalid.
     * 5 : Character Invalid.
     * 6 : Number Invalid.
     * 7 : Boolean Invalid.
     * 8 : Inactive Date not defined.
     * 9 : Inactive Reason not defined.
     * 10 : Saved Sucessfully.
     */
    public Integer saveLCParam() {
        int i = 0;


        Row cRow = getAPPLCParamVO1().getCurrentRow();
        if (cRow != null) {
            Object pramNmO = cRow.getAttribute("PramNm");
            Object paramTypeO = cRow.getAttribute("ParamType");
            Object paramBasisO = cRow.getAttribute("ParamBasis");
            Object paramActvO = cRow.getAttribute("ParamActv");
            Object inactvDtO = cRow.getAttribute("InactvDt");
            Object inactvReasonO = cRow.getAttribute("InactvReason");
            Object orgIdO = cRow.getAttribute("TransOrgId");

            StringBuilder pramNm = (pramNmO == null ? new StringBuilder("") : new StringBuilder(pramNmO.toString()));
            StringBuilder inactvReason =
                (inactvReasonO == null ? new StringBuilder("") : new StringBuilder(inactvReasonO.toString()));
            Integer paramBasis = (paramBasisO == null ? -1 : (Integer) paramBasisO);
            Integer paramType = (paramTypeO == null ? -1 : (Integer) paramTypeO);
            StringBuilder paramActv =
                (paramActvO == null ? new StringBuilder("") : new StringBuilder(paramActvO.toString()));

            Object paramValBlO = cRow.getAttribute("ParamValBl");
            Object paramValChO = cRow.getAttribute("ParamValCh");
            Object paramValDtO = cRow.getAttribute("ParamValDt");
            Object paramValNoO = cRow.getAttribute("ParamValNo");
            StringBuilder paramValBl =
                (paramValBlO == null ? new StringBuilder("") : new StringBuilder(paramValBlO.toString()));
            StringBuilder paramValCh =
                (paramValChO == null ? new StringBuilder("") : new StringBuilder(paramValChO.toString()));
            Number paramValNo = (paramValNoO == null ? StaticValue.NUMBER_ZERO : (Number) paramValNoO);
            StringBuilder orgId = (orgIdO == null ? new StringBuilder("") : new StringBuilder(orgIdO.toString()));
            if ("".equals(pramNm.toString())) {
                i = 1;
                return i;
            } else if (paramBasis.equals(-1)) {
                i = 2;
                return i;
            } else if (paramType.equals(-1)) {
                i = 3;
                return i;
            } else if (paramType.equals(756) && paramValDtO == null) {
                i = 4;
                return i;
            } else if (paramType.equals(757) && "".equals(paramValCh.toString())) {
                i = 5;
                return i;
            } else if (paramType.equals(758) && paramValNo.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                i = 6;
                return i;
            } else if (paramType.equals(759) && "".equals(paramValBl.toString())) {
                i = 7;
                return i;
            } else if ("N".equalsIgnoreCase(paramActv.toString()) && inactvDtO == null) {
                i = 8;
                return i;
            } else if ("N".equalsIgnoreCase(paramActv.toString()) && "".equals(inactvReason.toString())) {
                i = 9;
                return i;
            } else {
                getDBTransaction().commit();
                /* ADFModelUtils.showFormattedFacesMessage("Record saved sucessfully !",
                                                        "", FacesMessage.SEVERITY_INFO); */
                i = 10;
            }
        }
        System.out.println("Value of i" + i);
        return i;
    }

    /**
     * Container's getter for LOVUserNameVO1.
     * @return LOVUserNameVO1
     */
    public ViewObjectImpl getLOVUserNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVUserNameVO1");
    }

    public void setNewParamId() {
        Integer i = -1;
        ViewObjectImpl appParamVO = getAPPLCParamVO1();
        Row currentRow = appParamVO.getCurrentRow();
        RowSetIterator ctr = appParamVO.createRowSetIterator(null);
        while (ctr.hasNext()) {
            System.out.println("Iteration -- ");
            Row next = ctr.next();
            if (next != currentRow) {
                System.out.println("Inside ");
                Object paramIdO = next.getAttribute("ParamId");
                Integer paramId = (paramIdO == null ? -1 : (Integer) paramIdO);
                if (paramId >= i) {
                    i = paramId;
                }
            }
        }
        ctr.closeRowSetIterator();
        System.out.println("ParamId is ==" + i);
        currentRow.setAttribute("ParamId", i + 1);

    }

    /**
     * Container's getter for LOVOrgVO1.
     * @return LOVOrgVO1
     */
    public ViewObjectImpl getLOVOrgVO1() {
        return (ViewObjectImpl) findViewObject("LOVOrgVO1");
    }

    /**
     * Container's getter for OrgLcParamVO1.
     * @return OrgLcParamVO1
     */
    public ViewObjectImpl getOrgLcParamVO1() {
        return (ViewObjectImpl) findViewObject("OrgLcParamVO1");
    }

    /**
     * Method to attach org to Org$LC$Param
     */
    public void addOrgToLCParam() {
        Row row = getAPPLCParamVO1().getCurrentRow();
        Object orgIdO = row.getAttribute("TransOrgId");
        Object paramIdO = row.getAttribute("ParamId");
        // Object pActiveO = row.getAttribute("ParamActv");
        if (row != null) {
            StringBuilder orgId = (orgIdO == null ? new StringBuilder("") : new StringBuilder(orgIdO.toString()));
            Integer paramId = (paramIdO == null ? new Integer(-1) : (Integer) paramIdO);
            //   StringBuilder pActive=(pActiveO ==null ? new StringBuilder("") : new StringBuilder(pActiveO.toString()));
            if ("".equals(orgId.toString())) {
                ADFModelUtils.showFormattedFacesMessage("Please Select Organisation !", "",
                                                        FacesMessage.SEVERITY_ERROR);
            } else {
                ViewObjectImpl aPPLCParamVO1 = this.getOrgLcParamVO2();
                Row createRow = aPPLCParamVO1.createRow();
                aPPLCParamVO1.insertRow(createRow);
System.out.println("Inside else---->");
                createRow.setAttribute("OrgId", orgId.toString());
                createRow.setAttribute("ParamId", paramId);


            }
        }
        row.setAttribute("TransOrgId",null);
        
    }

    /**
     * Container's getter for OrgLcParamVO2.
     * @return OrgLcParamVO2
     */
    public ViewObjectImpl getOrgLcParamVO2() {
        return (ViewObjectImpl) findViewObject("OrgLcParamVO2");
    }

    /**
     * Container's getter for LCParamTOOrgLCParam1.
     * @return LCParamTOOrgLCParam1
     */
    public ViewLinkImpl getLCParamTOOrgLCParam1() {
        return (ViewLinkImpl) findViewLink("LCParamTOOrgLCParam1");
    }

    /**
     * Method to find Duplicate Entries of Org in Org$LC$Param
     */
    public Integer duplicateOrgAttach(String OrgId) {
        ViewObjectImpl orgLcVo = this.getOrgLcParamVO2();
        Row[] filteredRows = orgLcVo.getFilteredRows("OrgId", OrgId);
        System.out.println("No of filtered rows for Org " + filteredRows.length);
        Integer i=0;
        if (filteredRows.length >= 1) {
        i=1;
           // throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,"Duplicate Entry For Organisation !!!!",null));
        }
        return i;
    }

    /**
     *
     * Method to find the Duplicate Entries for Param Name
     */
    public Integer duplicateParamName(String ParamNm) {
        ViewObjectImpl aPPLCParamVO1 = this.getAPPLCParamVO1();
        Row[] filteredRows = aPPLCParamVO1.getFilteredRows("PramNm", ParamNm);
        System.out.println("No of filtered rows for Param Name " + filteredRows.length);
        Integer i=0;
        if (filteredRows.length > 1) {
           i=1;
           // throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,"Duplicate Entry For Parameter Name !!!",null));
        }
        return i;
    }
    
}

