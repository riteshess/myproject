package salesreportconfigurationapp.model.services;


import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Date;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import salesreportconfigurationapp.model.services.common.SaleReportAM;
import salesreportconfigurationapp.model.views.LOVDCLabelValueVOImpl;
import salesreportconfigurationapp.model.views.TempVariablesVOImpl;
import salesreportconfigurationapp.model.views.TempVariablesVORowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 05 18:08:15 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SaleReportAMImpl extends ApplicationModuleImpl implements SaleReportAM {

    /**
     * This is the default constructor (do not remove).
     */
    public SaleReportAMImpl() {
    }

    /**
     * Container's getter for TempVariables.
     * @return TempVariables
     */
    public TempVariablesVOImpl getTempVariables() {
        return (TempVariablesVOImpl)findViewObject("TempVariables");
    }
    public void addpartialattributeNamAm() 
    {
        this.getTempVariables().getCurrentRow().setAttribute("AttLblNmTrans", null);
        this.getTempVariables().getCurrentRow().setAttribute("AttValNmTrans", null);
    }
    /**
     * Method for resolving the El
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Method will return the Sales DocId on the basis of SalesDisplayId
     * @param dispId
     * @return
     */
    public StringBuffer SalesInvoiceDocIdFromDispId(StringBuffer dispId) {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));

        TempVariablesVORowImpl currentRow = (TempVariablesVORowImpl)this.getTempVariables().getCurrentRow();
        RowSet lovDispId = currentRow.getLOVSIDispIdVO1();
        Row[] filteredRows = lovDispId.getFilteredRows("DispDocId", dispId.toString());
        Object docId = filteredRows[0].getAttribute("DocId");
        System.out.println("DispId :" + dispId + " DocId :" + docId);
        if (docId != null) {
            return new StringBuffer(docId.toString());
        } else {
            System.out.println("DocId not found for the given Display Id");
        }
        return null;
    }
   
    public void setLabel(){
        TempVariablesVORowImpl rm=(TempVariablesVORowImpl)this.getTempVariables().getCurrentRow();
        LOVDCLabelValueVOImpl im=(LOVDCLabelValueVOImpl) this.getLOVDCLabelValueVO1();
        im.setCldIdBind(rm.getCldIdTrans());
        im.setSlocIdBind(rm.getSlocIdTrans());
        im.setLblIdBind(rm.getDCLabelTrans());
        
        System.out.println("value parameters "+rm.getCldIdTrans()+rm.getSlocIdTrans()+rm.getDCLabelTrans());
        System.out.println("label val "+im.getLblIdBind());
        im.executeQuery();
    }

    /**
     * Container's getter for LOVOppStatus1.
     * @return LOVOppStatus1
     */
    public ViewObjectImpl getLOVOppStatus1() {
        return (ViewObjectImpl)findViewObject("LOVOppStatus1");
    }

    /**
     * Container's getter for LOVQuotStatus1.
     * @return LOVQuotStatus1
     */
    public ViewObjectImpl getLOVQuotStatus1() {
        return (ViewObjectImpl)findViewObject("LOVQuotStatus1");
    }

    public void resetAction() {
        ViewObjectImpl vo = this.getTempVariables();
        vo.getCurrentRow().setAttribute("EntityIdTrans", null);
        vo.getCurrentRow().setAttribute("CatgIdTrans", null);
        vo.getCurrentRow().setAttribute("ItemName", null);
        vo.getCurrentRow().setAttribute("ItemGroup", null);
        vo.getCurrentRow().setAttribute("CurrencyIdTrans", null);
        vo.getCurrentRow().setAttribute("SalesMan", null);
        vo.getCurrentRow().setAttribute("DateFromTrans", null);
        vo.getCurrentRow().setAttribute("DateToTrans", null);
//        vo.getCurrentRow().setAttribute("TransTemplateDesc", null);
        vo.executeQuery();

    }
    
    public void dateSet(){
        String cldid=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgid=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Date frmdt=new Date();
        Timestamp sq=null;
        try {
                frmdt = (Date) callStoredFunction(Types.DATE, "app.fn_get_fy_start_date(?,?,?,?)", new Object[] {
                                                  cldid, orgid, new Timestamp(System.currentTimeMillis()), "FY"
                });
                sq = new Timestamp(frmdt.getTime());
            } catch (Exception e) {
                e.printStackTrace();
            }
        ViewObjectImpl vo = this.getTempVariables();
        System.out.println("sq is " +sq);
        vo.getCurrentRow().setAttribute("DateFromTrans", sq);
        vo.getCurrentRow().setAttribute("DateToTrans", new Timestamp(System.currentTimeMillis()));
       // vo.executeQuery();
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt,
                                 Object[] bindVars) {
    CallableStatement st = null;
    try {
    // 1. Create a JDBC CallabledStatement
    st =
    getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;",
                                                0);
    // 2. Register the first bind variable for the return value
    st.registerOutParameter(1, sqlReturnType);
    if (bindVars != null) {
    // 3. Loop over values for the bind variables passed in, if any
    for (int z = 0; z < bindVars.length; z++) {
    // 4. Set the value of user-supplied bind vars in the stmt
    st.setObject(z + 2, bindVars[z]);
    }
    }
    // 5. Set the value of user-supplied bind vars in the stmt
    st.executeUpdate();
    // 6. Return the value of the first bind variable
    return st.getObject(1);
    } catch (SQLException e) {
    throw new JboException(e);
    } finally {
    if (st != null) {
    try {
    // 7. Close the statement
    st.close();
    } catch (SQLException e) {
    }
    }
    }
    }



    /**
     * Container's getter for LOVOppVO1.
     * @return LOVOppVO1
     */
    public ViewObjectImpl getLOVOppVO1() {
        return (ViewObjectImpl)findViewObject("LOVOppVO1");
    }

    public String getTabLovFlag(String tabValue) {
        String ret = null;
        if (tabValue.equalsIgnoreCase("opp")) {
            if (this.getTempVariables().getCurrentRow().getAttribute("OpportunityNo") != null) {
                ret = "Y";
            } else {
                ret = "N";
            }
        }
       else if (tabValue.equalsIgnoreCase("Quo")) {
            if (this.getTempVariables().getCurrentRow().getAttribute("QuotationNo") != null) {
                ret = "Y";
            } else {
                ret = "N";
            }
        }
        else if (tabValue.equalsIgnoreCase("SO")) {
             if (this.getTempVariables().getCurrentRow().getAttribute("OrderNoTrans") != null) {
                 ret = "Y";
             } else {
                 ret = "N";
             }
         }
        else if (tabValue.equalsIgnoreCase("PL")) {
             if (this.getTempVariables().getCurrentRow().getAttribute("PickIdTrans") != null) {
                 ret = "Y";
             } else {
                 ret = "N";
             }
         }
        else if (tabValue.equalsIgnoreCase("Ship")) {
             if (this.getTempVariables().getCurrentRow().getAttribute("ShipNoTrans") != null) {
                 ret = "Y";
             } else {
                 ret = "N";
             }
         }
        else if (tabValue.equalsIgnoreCase("Inv")) {
             if (this.getTempVariables().getCurrentRow().getAttribute("InvoiceIdTrans") != null) {
                 ret = "Y";
             } else {
                 ret = "N";
             }
         }
        else if (tabValue.equalsIgnoreCase("Rma")) {
             if (this.getTempVariables().getCurrentRow().getAttribute("RmaIdTrans") != null) {
                 ret = "Y";
             } else {
                 ret = "N";
             }
         }
        else if (tabValue.equalsIgnoreCase("DC")) {
             if (this.getTempVariables().getCurrentRow().getAttribute("DCDocIdTrans") != null) {
                 ret = "Y";
             } else {
                 ret = "N";
             }
         }
        else {
            ret="Y";
        }
        return ret;
    }

    public Timestamp getDocDateValue(String tabValue) {
        Timestamp DocDt = null;
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));

        if (tabValue.equalsIgnoreCase("opp")) {
            System.out.println("In AmImpl" + tabValue.toString());
            if (this.getTempVariables().getCurrentRow().getAttribute("OpportunityNo") != null) {
                this.getLOVOppVO1().setNamedWhereClauseParam("cld_id", cldId);
                this.getLOVOppVO1().setNamedWhereClauseParam("sloc_id", slocId);
                this.getLOVOppVO1().setNamedWhereClauseParam("org_id", orgId);
                this.getLOVOppVO1().setNamedWhereClauseParam("ho_org_id", hoOrgId);
                this.getLOVOppVO1().executeQuery();
                Row[] r =
                    this.getLOVOppVO1().getFilteredRows("DocId", this.getTempVariables().getCurrentRow().getAttribute("OpportunityNo").toString());
                System.out.println("Row Count" + this.getLOVOppVO1().getRowCount());
                if (r.length > 0) {
                    if (r[0].getAttribute("DocDt") != null) {
                        System.out.println("In DocDt AmImpl If");
                        DocDt =(Timestamp)r[0].getAttribute("DocDt");
                        System.out.println("DocDt is (In AmImpl)" + DocDt);
                    }
                }
            }
        }
        else if (tabValue.equalsIgnoreCase("Quo")) {
            System.out.println("In AmImpl" + tabValue.toString());
            if (this.getTempVariables().getCurrentRow().getAttribute("QuotationNo") != null) {
                this.getLOVQuotNoVO1().setNamedWhereClauseParam("cld_id", cldId);
                this.getLOVQuotNoVO1().setNamedWhereClauseParam("sloc_id", slocId);
                this.getLOVQuotNoVO1().setNamedWhereClauseParam("org_id", orgId);
                this.getLOVQuotNoVO1().setNamedWhereClauseParam("ho_org_id", hoOrgId);
                this.getLOVQuotNoVO1().executeQuery();
                Row[] r =
                    this.getLOVQuotNoVO1().getFilteredRows("DocId", this.getTempVariables().getCurrentRow().getAttribute("QuotationNo").toString());
                System.out.println("Row Count" + this.getLOVQuotNoVO1().getRowCount());
                if (r.length > 0) {
                    if (r[0].getAttribute("DocDt") != null) {
                        System.out.println("In DocDt AmImpl If");
                        DocDt =(Timestamp)r[0].getAttribute("DocDt");
                        System.out.println("DocDt is (In AmImpl)" + DocDt);
                    }
                }
            }
        }
        else if (tabValue.equalsIgnoreCase("SO")) {
            System.out.println("In AmImpl" + tabValue.toString());
            if (this.getTempVariables().getCurrentRow().getAttribute("OrderNoTrans") != null) {
                this.getLOVSalesOrderVO1().setNamedWhereClauseParam("cld_id", cldId);
                this.getLOVSalesOrderVO1().setNamedWhereClauseParam("sloc_id", slocId);
                this.getLOVSalesOrderVO1().setNamedWhereClauseParam("org_id", orgId);
                this.getLOVSalesOrderVO1().setNamedWhereClauseParam("ho_org_id", hoOrgId);
                this.getLOVSalesOrderVO1().executeQuery();
                Row[] r =
                    this.getLOVSalesOrderVO1().getFilteredRows("DocId", this.getTempVariables().getCurrentRow().getAttribute("OrderNoTrans").toString());
                System.out.println("Row Count" + this.getLOVSalesOrderVO1().getRowCount());
                if (r.length > 0) {
                    if (r[0].getAttribute("DocDt") != null) {
                        System.out.println("In DocDt AmImpl If");
                        DocDt =(Timestamp)r[0].getAttribute("DocDt");
                        System.out.println("DocDt is (In AmImpl)" + DocDt);
                    }
                }
            }
        }
        else if (tabValue.equalsIgnoreCase("PL")) {
            System.out.println("In AmImpl" + tabValue.toString());
            if (this.getTempVariables().getCurrentRow().getAttribute("PickIdTrans") != null) {
                this.getLOVPickIdVO1().setNamedWhereClauseParam("cld_id", cldId);
                this.getLOVPickIdVO1().setNamedWhereClauseParam("sloc_id", slocId);
                this.getLOVPickIdVO1().setNamedWhereClauseParam("org_id", orgId);
                this.getLOVPickIdVO1().setNamedWhereClauseParam("ho_org_id", hoOrgId);
                this.getLOVPickIdVO1().executeQuery();
                Row[] r =
                    this.getLOVPickIdVO1().getFilteredRows("DocId", this.getTempVariables().getCurrentRow().getAttribute("PickIdTrans").toString());
                System.out.println("Row Count" + this.getLOVPickIdVO1().getRowCount());
                if (r.length > 0) {
                    if (r[0].getAttribute("DocDt") != null) {
                        System.out.println("In DocDt AmImpl If");
                        DocDt =(Timestamp)r[0].getAttribute("DocDt");
                        System.out.println("DocDt is (In AmImpl)" + DocDt);
                    }
                }
            }
        }
        else if (tabValue.equalsIgnoreCase("Ship")) {
            System.out.println("In AmImpl" + tabValue.toString());
            if (this.getTempVariables().getCurrentRow().getAttribute("ShipNoTrans") != null) {
                this.getLOVShipIdVO1().setNamedWhereClauseParam("cld_id", cldId);
                this.getLOVShipIdVO1().setNamedWhereClauseParam("sloc_id", slocId);
                this.getLOVShipIdVO1().setNamedWhereClauseParam("org_id", orgId);
                this.getLOVShipIdVO1().setNamedWhereClauseParam("ho_org_id", hoOrgId);
                this.getLOVShipIdVO1().executeQuery();
                Row[] r =
                    this.getLOVShipIdVO1().getFilteredRows("DocId", this.getTempVariables().getCurrentRow().getAttribute("ShipNoTrans").toString());
                System.out.println("Row Count" + this.getLOVShipIdVO1().getRowCount());
                if (r.length > 0) {
                    if (r[0].getAttribute("DocDt") != null) {
                        System.out.println("In DocDt AmImpl If");
                        DocDt =(Timestamp)r[0].getAttribute("DocDt");
                        System.out.println("DocDt is (In AmImpl)" + DocDt);
                    }
                }
            }
        }
        else if (tabValue.equalsIgnoreCase("Inv")) {
            System.out.println("In AmImpl" + tabValue.toString());
            if (this.getTempVariables().getCurrentRow().getAttribute("InvoiceIdTrans") != null) {
                this.getLOVInvoiceNoVO1().setNamedWhereClauseParam("cld_id", cldId);
                this.getLOVInvoiceNoVO1().setNamedWhereClauseParam("sloc_id", slocId);
                this.getLOVInvoiceNoVO1().setNamedWhereClauseParam("org_id", orgId);
                this.getLOVInvoiceNoVO1().setNamedWhereClauseParam("ho_org_id", hoOrgId);
                this.getLOVInvoiceNoVO1().executeQuery();
                Row[] r =
                    this.getLOVInvoiceNoVO1().getFilteredRows("DocId", this.getTempVariables().getCurrentRow().getAttribute("InvoiceIdTrans").toString());
                System.out.println("Row Count" + this.getLOVInvoiceNoVO1().getRowCount());
                if (r.length > 0) {
                    if (r[0].getAttribute("DocDt") != null) {
                        System.out.println("In DocDt AmImpl If");
                        DocDt =(Timestamp)r[0].getAttribute("DocDt");
                        System.out.println("DocDt is (In AmImpl)" + DocDt);
                    }
                }
            }
        }
        else if (tabValue.equalsIgnoreCase("Rma")) {
            System.out.println("In AmImpl" + tabValue.toString());
            if (this.getTempVariables().getCurrentRow().getAttribute("RmaIdTrans") != null) {
                this.getLOVRmaNoVO1().setNamedWhereClauseParam("cld_id", cldId);
                this.getLOVRmaNoVO1().setNamedWhereClauseParam("sloc_id", slocId);
                this.getLOVRmaNoVO1().setNamedWhereClauseParam("org_id", orgId);
                this.getLOVRmaNoVO1().setNamedWhereClauseParam("ho_org_id", hoOrgId);
                this.getLOVRmaNoVO1().executeQuery();
                Row[] r =
                    this.getLOVRmaNoVO1().getFilteredRows("DocId", this.getTempVariables().getCurrentRow().getAttribute("RmaIdTrans").toString());
                System.out.println("Row Count" + this.getLOVRmaNoVO1().getRowCount());
                if (r.length > 0) {
                    if (r[0].getAttribute("DocDt") != null) {
                        System.out.println("In DocDt AmImpl If");
                        DocDt =(Timestamp)r[0].getAttribute("DocDt");
                        System.out.println("DocDt is (In AmImpl)" + DocDt);
                    }
                }
            }
        }
         else if (tabValue.equalsIgnoreCase("DC")) {
            System.out.println("In AmImpl" + tabValue.toString());
            if (this.getTempVariables().getCurrentRow().getAttribute("DCDocIdTrans") != null) {
                this.getLOVDCDocId1().setNamedWhereClauseParam("SLOCIDBIND", slocId);
                this.getLOVDCDocId1().setNamedWhereClauseParam("CLDIDBIND", cldId);
                this.getLOVDCDocId1().setNamedWhereClauseParam("ORGIDBIND", orgId);
                this.getLOVDCDocId1().setNamedWhereClauseParam("HOORGIDBIND", hoOrgId);
                this.getLOVDCDocId1().executeQuery();
                Row[] r1 =
                    this.getLOVDCDocId1().getFilteredRows("DocId", this.getTempVariables().getCurrentRow().getAttribute("DCDocIdTrans").toString());
                System.out.println("Row Count" + this.getLOVDCDocId1().getRowCount());
                if (r1.length > 0) {
                    if (r1[0].getAttribute("DocDt") != null) {
                        System.out.println("In DocDt AmImpl If");
                        DocDt =(Timestamp)r1[0].getAttribute("DocDt");
                        System.out.println("DocDt is (In AmImpl)" + DocDt);
                    }
                }
            } 
        
        
    }
        return DocDt;
    }

    /**
     * Container's getter for LOVQuotNoVO1.
     * @return LOVQuotNoVO1
     */
    public ViewObjectImpl getLOVQuotNoVO1() {
        return (ViewObjectImpl)findViewObject("LOVQuotNoVO1");
    }

    /**
     * Container's getter for LOVSalesOrderVO1.
     * @return LOVSalesOrderVO1
     */
    public ViewObjectImpl getLOVSalesOrderVO1() {
        return (ViewObjectImpl)findViewObject("LOVSalesOrderVO1");
    }

    /**
     * Container's getter for LOVPickIdVO1.
     * @return LOVPickIdVO1
     */
    public ViewObjectImpl getLOVPickIdVO1() {
        return (ViewObjectImpl)findViewObject("LOVPickIdVO1");
    }

    /**
     * Container's getter for LOVShipIdVO1.
     * @return LOVShipIdVO1
     */
    public ViewObjectImpl getLOVShipIdVO1() {
        return (ViewObjectImpl)findViewObject("LOVShipIdVO1");
    }

    /**
     * Container's getter for LOVInvoiceNoVO1.
     * @return LOVInvoiceNoVO1
     */
    public ViewObjectImpl getLOVInvoiceNoVO1() {
        return (ViewObjectImpl)findViewObject("LOVInvoiceNoVO1");
    }

    /**
     * Container's getter for LOVRmaNoVO1.
     * @return LOVRmaNoVO1
     */
    public ViewObjectImpl getLOVRmaNoVO1() {
        return (ViewObjectImpl)findViewObject("LOVRmaNoVO1");
    }


    /**
     * Container's getter for LOVDCStage1.
     * @return LOVDCStage1
     */
    public ViewObjectImpl getLOVDCStage1() {
        return (ViewObjectImpl)findViewObject("LOVDCStage1");
    }

    /**
     * Container's getter for LOVDCDocId1.
     * @return LOVDCDocId1
     */
    public ViewObjectImpl getLOVDCDocId1() {
        return (ViewObjectImpl)findViewObject("LOVDCDocId1");
    }

    /**
     * Container's getter for LOVInvoiceTypeVO1.
     * @return LOVInvoiceTypeVO1
     */
    public ViewObjectImpl getLOVInvoiceTypeVO1() {
        return (ViewObjectImpl)findViewObject("LOVInvoiceTypeVO1");
    }

    /**
     * Container's getter for LOVInvoiceSubTypeVO1.
     * @return LOVInvoiceSubTypeVO1
     */
    public ViewObjectImpl getLOVInvoiceSubTypeVO1() {
        return (ViewObjectImpl)findViewObject("LOVInvoiceSubTypeVO1");
    }

    /**
     * Container's getter for LOVDCLabelVO1.
     * @return LOVDCLabelVO1
     */
    public ViewObjectImpl getLOVDCLabelVO1() {
        return (ViewObjectImpl)findViewObject("LOVDCLabelVO1");
    }

    /**
     * Container's getter for LOVRepUpVO1.
     * @return LOVRepUpVO1
     */
    public ViewObjectImpl getLOVRepUpVO1() {
        return (ViewObjectImpl) findViewObject("LOVRepUpVO1");
    }

    /**
     * Container's getter for LOVDCLabelValueVO1.
     * @return LOVDCLabelValueVO1
     */
    public LOVDCLabelValueVOImpl getLOVDCLabelValueVO1() {
        return (LOVDCLabelValueVOImpl) findViewObject("LOVDCLabelValueVO1");
    }

    /**
     * Container's getter for LOVIntmNoVO1.
     * @return LOVIntmNoVO1
     */
    public ViewObjectImpl getLOVIntmNoVO1() {
        return (ViewObjectImpl) findViewObject("LOVIntmNoVO1");
    }
}
