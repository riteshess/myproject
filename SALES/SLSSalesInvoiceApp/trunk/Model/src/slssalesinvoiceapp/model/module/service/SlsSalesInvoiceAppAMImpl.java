package slssalesinvoiceapp.model.module.service;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.EbizParamsAPPUtils;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import com.tangosol.dev.assembler.Return;

import java.math.BigDecimal;
import java.math.RoundingMode;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mailservice.MailFactory;
import mailservice.MailService;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import slssalesinvoiceapp.model.module.helper.SLSInvoiceHelper;
import slssalesinvoiceapp.model.module.helper.SendMailHelper;
import slssalesinvoiceapp.model.module.service.common.SlsSalesInvoiceAppAM;
import slssalesinvoiceapp.model.module.view.InvoiceSearchVOImpl;
import slssalesinvoiceapp.model.module.view.InvoiceSearchVORowImpl;
import slssalesinvoiceapp.model.module.view.LOVCustCoaVOImpl;
import slssalesinvoiceapp.model.module.view.LOVCustomerVOImpl;
import slssalesinvoiceapp.model.module.view.LOVShipmentVOImpl;
import slssalesinvoiceapp.model.module.view.LOVShipmentVORowImpl;
import slssalesinvoiceapp.model.module.view.LovArVOImpl;
import slssalesinvoiceapp.model.module.view.LovArVORowImpl;
import slssalesinvoiceapp.model.module.view.SlsInvAdjVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvAdjVORowImpl;
import slssalesinvoiceapp.model.module.view.SlsInvDtlVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvDtlVORowImpl;
import slssalesinvoiceapp.model.module.view.SlsInvOcVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvPmntSchdlVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvShipItmVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvTrLineVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvTrVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvVOImpl;
import slssalesinvoiceapp.model.module.view.SlsInvVORowImpl;
import slssalesinvoiceapp.model.module.view.TempSearchPanelVOImpl;
import slssalesinvoiceapp.model.module.view.TempSearchPanelVORowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Aug 31 15:34:07 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsSalesInvoiceAppAMImpl extends ApplicationModuleImpl implements SlsSalesInvoiceAppAM {
    /**
     * This is the default constructor (do not remove).
     */

    private static ADFLogger _log = ADFLogger.createADFLogger(SlsSalesInvoiceAppAMImpl.class);

    public SlsSalesInvoiceAppAMImpl() {
    }

    /*
     * @param data
     * @return
     */
    public Object resolvElDCMsg(String data) {
        return ADFModelUtils.resolvEl(data);
    }

    /**
     * Container's getter for SlsInv.
     * @return SlsInv
     */
    public SlsInvVOImpl getSlsInv() {
        return (SlsInvVOImpl) findViewObject("SlsInv");
    }


    /**
     * Container's getter for LOVCurrency.
     * @return LOVCurrency
     */
    public ViewObjectImpl getLOVCurrency() {
        return (ViewObjectImpl) findViewObject("LOVCurrency");
    }

    /**
     * Container's getter for LOVCustomer.
     * @return LOVCustomer
     */
    public LOVCustomerVOImpl getLOVCustomer() {
        return (LOVCustomerVOImpl) findViewObject("LOVCustomer");
    }


    /**
     * Container's getter for LOVShipment.
     * @return LOVShipment
     */
    public LOVShipmentVOImpl getLOVShipment() {
        return (LOVShipmentVOImpl) findViewObject("LOVShipment");
    }


    /**
     * Container's getter for SlsInvDtl.
     * @return SlsInvDtl
     */
    public SlsInvDtlVOImpl getSlsInvDtl() {
        return (SlsInvDtlVOImpl) findViewObject("SlsInvDtl");
    }

    /**
     * Container's getter for SlsInv2SlsInvDtlVL2.
     * @return SlsInv2SlsInvDtlVL2
     */
    public ViewLinkImpl getSlsInv2SlsInvDtlVL2() {
        return (ViewLinkImpl) findViewLink("SlsInv2SlsInvDtlVL2");
    }


    /**
     * Container's getter for SlsInvTr.
     * @return SlsInvTr
     */
    public SlsInvTrVOImpl getSlsInvTr() {
        return (SlsInvTrVOImpl) findViewObject("SlsInvTr");
    }

    /**
     * Container's getter for SlsInv2SlsInvTrVL1.
     * @return SlsInv2SlsInvTrVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvTrVL1() {
        return (ViewLinkImpl) findViewLink("SlsInv2SlsInvTrVL1");
    }


    /**
     * Container's getter for SlsInvTrLine.
     * @return SlsInvTrLine
     */
    public SlsInvTrLineVOImpl getSlsInvTrLine() {
        return (SlsInvTrLineVOImpl) findViewObject("SlsInvTrLine");
    }

    /**
     * Container's getter for SlsInvTr2SlsInvTrLineVL1.
     * @return SlsInvTr2SlsInvTrLineVL1
     */
    public ViewLinkImpl getSlsInvTr2SlsInvTrLineVL1() {
        return (ViewLinkImpl) findViewLink("SlsInvTr2SlsInvTrLineVL1");
    }

    /**
     * Container's getter for SlsInvOc.
     * @return SlsInvOc
     */
    public SlsInvOcVOImpl getSlsInvOc() {
        return (SlsInvOcVOImpl) findViewObject("SlsInvOc");
    }

    /**
     * Container's getter for SlsInv2SlsInvOcVL1.
     * @return SlsInv2SlsInvOcVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvOcVL1() {
        return (ViewLinkImpl) findViewLink("SlsInv2SlsInvOcVL1");
    }

    /**
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }

    /**
     * ------Method is for setting Base amount of Detail table after changing rate.--------------.
     * @param Rate
     * @return Setting base amount of Detail.
     * Created By Gourav Raj
     */
    public void setBaseAmount(BigDecimal Rate) {
        if (Rate != null) {
            ViewObjectImpl shpmentDtl = getSlsInvDtl();
            RowSetIterator rsi = shpmentDtl.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row rw = rsi.next();
                if (rw.getAttribute("ShipAmtSp") != null) {
                    BigDecimal shpAmtSp = (BigDecimal) rw.getAttribute("ShipAmtSp");
                    BigDecimal shpAmtBs = shpAmtSp.multiply(Rate);
                    rw.setAttribute("ShipAmtBs", shpAmtBs);
                }
            }
            rsi.closeRowSetIterator();
        }
    }

    /**
     * ------Method is for For Invoice wise tax present or not.--------------.
     * @return Return Integer.
     * Created By Gourav Raj
     */
    public Integer invoiceWiseTaxValue() {
        ViewObjectImpl vo = getSlsInvTr();
        Integer ret = vo.getRowCount();
        return ret;
    }


    /**
     * ------Method for getting Max Shipment Sr No while creating new row.--------------.
     * @return Maximun Serial Number
     * Created By Gourav Raj
     */
    public Integer getMaxShipSrNo() {
        Integer max = 0;
        ViewObject vo = getSlsInvDtl();
        RowSetIterator rsi = vo.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row rw = rsi.next();
            if (max <= (Integer) rw.getAttribute("SrNo")) {
                max = (Integer) rw.getAttribute("SrNo");
            }
        }
        rsi.closeRowSetIterator();
        return max + 1;
    }

    /**
     * ------Method is for creating tax rule line after selectin any rule
     * .It can be called in rule id changed listner.--------------.
     * @param p_tax_rule_id
     * @param p_user_id
     * @param p_taxable_amount
     * @param P_conv_fctr
     * @return Maximun Serial Number
     * Created By Gourav Raj
     * Modified by Mousham Barman
     * This method will insert Tax Rule for INVOICE Wise
     */
    public void insertIntoSlsInvTrLineForInvoicewise(Long p_tax_rule_id, Integer p_user_id, BigDecimal p_taxable_amount,
                                                     BigDecimal P_conv_fctr) {

        BigDecimal currRate = new BigDecimal(1);
        StringBuffer siDocId = new StringBuffer("");
        Row siRow = this.getSlsInv().getCurrentRow();
        Object expmtdO = siRow.getAttribute("TaxExmptFlgTrans");
        String exmptd = (expmtdO == null ? "N" : expmtdO.toString());
        if (siRow != null) {
            currRate = (BigDecimal) siRow.getAttribute("CurrRate");
            siDocId = new StringBuffer(siRow.getAttribute("DocId").toString());
        }
        SlsInvTrVOImpl trVo = this.getSlsInvTr();
        SlsInvShipItmVOImpl forTax = this.getSlsInvShipItmVOForTax();
        forTax.executeQuery();
        RowSetIterator itmItr = forTax.createRowSetIterator(null);
        _log.info("Item count : " + itmItr.getRowCount());
        while (itmItr.hasNext()) {
            Row tr = null;
            StringBuffer itmId = new StringBuffer("");
            StringBuffer shipmntId = new StringBuffer("");
            StringBuffer soId = new StringBuffer("");
            Row itmRow = itmItr.next();
            itmRow.setAttribute("TaxRuleFlg", "Y");
            BigDecimal taxableAmt = new BigDecimal(0);
            BigDecimal itmAmtGs = BigDecimal.ZERO;
            if (itmRow.getAttribute("ItmId") != null) {
                itmId = new StringBuffer(itmRow.getAttribute("ItmId").toString());
                shipmntId = new StringBuffer(itmRow.getAttribute("ShipId").toString());
                taxableAmt = (BigDecimal) itmRow.getAttribute("AsblAmtSp");
                itmAmtGs = (BigDecimal) itmRow.getAttribute("ItmAmtGsSp");
                //taxableAmt = (BigDecimal) itmRow.getAttribute("ItmAmtGsSp");
                soId = new StringBuffer(itmRow.getAttribute("SoId").toString());
            }
            RowQualifier rq = new RowQualifier(trVo);
            rq.setWhereClause("ItmId ='" + itmId + "' and ShipId='" + shipmntId + "' and SoId='" + soId + "'");
            _log.info("Qualifier for row : " + rq.getExprStr());

            Row[] filteredRows = trVo.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                _log.info("Tr Row already Exists");
                tr = filteredRows[0];
            } else {
                _log.info("New Tr Row created");
                tr = trVo.createRow();
                tr.setAttribute("ItmId", itmId.toString());
                tr.setAttribute("ShipId", shipmntId.toString());
                tr.setAttribute("SrNoDest", 0);
                tr.setAttribute("SrNo", 1);
                tr.setAttribute("TaxRuleId", p_tax_rule_id);
                tr.setAttribute("SoId", soId);
                trVo.insertRow(tr);
            }
            tr.setAttribute("TaxableAmt", itmAmtGs);
            tr.setAttribute("ExmptFlg", exmptd);
            itmRow.setAttribute("TaxRuleDescTrans", null);
            _log.info("Tr row key is : " + tr.getKey());
            BigDecimal val = new BigDecimal(0);
            try {
                val = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_INS_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                      EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                      siDocId.toString(), itmId.toString(), p_tax_rule_id,
                                                      EbizParams.GLBL_APP_USR(), itmAmtGs, taxableAmt, currRate,
                                                      soId.toString(), shipmntId.toString(), exmptd
                });
                _log.info("value of TaxAmtSp = " + val);
                _log.info("value of P_conv_fctr = " + currRate);
                tr.setAttribute("TaxAmtSp", val);
                tr.setAttribute("TaxRuleId", p_tax_rule_id);
                if (currRate != null && val != null) {
                    tr.setAttribute("TaxAmtBs", val.multiply(currRate));
                } else {
                    tr.setAttribute("TaxAmtBs", val);
                }

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_INV_TR_LINES' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
        getSlsInvTrLine().executeQuery();
        trVo.executeQuery();
    }


    /** Method to insert Tax for the invoice ITEM wise.
     * @param p_tax_rule_id
     * @param p_user_id
     * @param p_taxable_amount
     * @param P_conv_fctr
     * Modified by Mousham Barman
     */
    public void insertIntoSlsInvTrLineForItemwise(Long p_tax_rule_id, Integer p_user_id, BigDecimal p_taxable_amount,
                                                  BigDecimal P_conv_fctr) {

        Row currTrRow = getSlsInvTrItm().getCurrentRow();
        if (currTrRow != null) {
            BigDecimal val = new BigDecimal(0);
            Row currentItmRow = getSlsInvShipItm().getCurrentRow();
            Object itmAmtGsO = currentItmRow.getAttribute("ItmAmtGsSp");
            Object itmAsblAmtO = currentItmRow.getAttribute("AsblAmtSp");
            BigDecimal itmAmtGs = (itmAmtGsO == null ? BigDecimal.ZERO : (BigDecimal) itmAmtGsO);
            BigDecimal itmAsblAmt = (itmAsblAmtO == null ? BigDecimal.ZERO : (BigDecimal) itmAsblAmtO);
            currTrRow.setAttribute("TaxableAmt", itmAmtGs);

            try {
                val = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_INS_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      currentItmRow.getAttribute("SlocId"),
                                                      currentItmRow.getAttribute("CldId"),
                                                      currentItmRow.getAttribute("HoOrgId"),
                                                      currentItmRow.getAttribute("OrgId"),
                                                      currentItmRow.getAttribute("DocId"),
                                                      currentItmRow.getAttribute("ItmId"), p_tax_rule_id, p_user_id,
                                                      itmAmtGs, itmAsblAmt, P_conv_fctr,
                                                      currentItmRow.getAttribute("SoId"),
                                                      currentItmRow.getAttribute("ShipId"),
                                                      currTrRow.getAttribute("ExmptFlg")
                });

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_INV_TR_LINES' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
            currTrRow.setAttribute("TaxAmtSp", val.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP));
            if (P_conv_fctr != null && val != null) {
                currTrRow.setAttribute("TaxAmtBs", val.multiply(P_conv_fctr));
            } else {
                currTrRow.setAttribute("TaxAmtBs", val);
            }
            // Logic to refetch TaxRuleDesc
            if (getSlsInvShipItm().getCurrentRow() != null) {
                getSlsInvShipItm().getCurrentRow().setAttribute("TaxRuleDescTrans", null);
            }

            getSlsInvTrLineItm().executeQuery();
        }
    }

    /**
     * @param TaxableAmount
     * @return
     */
    public String checkForReapplyTax(BigDecimal TaxableAmount) {
        String retVal = "N";
        if (TaxableAmount != null) {
            BigDecimal curTaxableAmt = new BigDecimal(0);
            ViewObject taxRule = this.getSlsInvTr();
            int count = taxRule.getRowCount();
            if (count > 0) {
                Row[] rArray = taxRule.getAllRowsInRange();
                for (Row r : rArray) {
                    if (r.getAttribute("TaxableAmt") != null) {
                        curTaxableAmt = curTaxableAmt.add((BigDecimal) r.getAttribute("TaxableAmt"));
                    }
                }
            }
            if (TaxableAmount.compareTo(curTaxableAmt) != 0) {
                retVal = "Y";
            }
        }
        return retVal;
    }


    public void setCurr_OC() {
        ViewObjectImpl OC = getSlsInvOc();
        Row currRwOc = OC.getCurrentRow();
        ViewObjectImpl Inv = getSlsInv();
        Row currRwInv = Inv.getCurrentRow();
        if (currRwInv != null) {
            if (currRwOc != null) {
                Integer CurrId = null;
                BigDecimal CurrRate = null;
                if (currRwInv.getAttribute("CurrIdSp") != null) {
                    CurrId = (Integer) currRwInv.getAttribute("CurrIdSp");
                }
                if (currRwInv.getAttribute("CurrRate") != null) {
                    CurrRate = (BigDecimal) currRwInv.getAttribute("CurrRate");
                }
                currRwOc.setAttribute("CurrId", CurrId);
                currRwOc.setAttribute("CurrRate", CurrRate);
            }
        }
    }


    /**
     * @param CurrRow_Tnc
     */
    public void insertIntoTnc(Row CurrRow_Tnc) {
        if (CurrRow_Tnc != null) {
            ViewObject tnc = this.getSlsInvTnc();
            Row filtRows[] = tnc.getFilteredRows("TncId", CurrRow_Tnc.getAttribute("TncId"));
            _log.info("Total Row in VO for same tncc-->" + filtRows.length);
            if (filtRows.length > 0) {
                //FacesMessage mesg = new FacesMessage("Duplicate Terms & Conditions, Please select other one");
                FacesMessage mesg = new FacesMessage(resolvElDCMsg("#{bundle['MSG.972']}").toString());
                mesg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, mesg);
            } else {
                Row tncRow = tnc.createRow();
                tnc.insertRow(tncRow);
                if (CurrRow_Tnc.getAttribute("TncId") != null) {
                    tncRow.setAttribute("TncId", CurrRow_Tnc.getAttribute("TncId"));
                }
                if (CurrRow_Tnc.getAttribute("TncDesc") != null) {
                    tncRow.setAttribute("TransTncDesc", CurrRow_Tnc.getAttribute("TncDesc"));
                }
                tnc.executeQuery();
            }
        }
    }


    /**
     * @param ShipmentName
     * @return
     */
    public String shipmentNameValidation(String ShipmentName) {
        if (ShipmentName != null) {
            ViewObject v = this.getSlsInvDtl();
            String shpDesc = null;
            int totalCount = v.getRowCount(); //get ALL rows
            int rangeSize = v.getRangeSize(); //all in range
            v.setRangeSize(totalCount);
            Row[] rArray = v.getAllRowsInRange();
            Row cRow = v.getCurrentRow();
            int count = 0;
            String shpid = "";
            for (Row r : rArray) {
                if (true) {
                    try {
                        shpid = r.getAttribute("ShipId").toString();
                    } catch (NullPointerException npe) {
                        //System.out.println("NPE:" + npe);
                        shpid = "";
                    }
                    if (shpid != null) {
                        Row[] xx = this.getLOVShipment().getFilteredRows("DocId", shpid);
                        if (xx.length > 0) {
                            shpDesc = xx[0].getAttribute("DispId").toString();
                        }
                        if (ShipmentName.equalsIgnoreCase(shpDesc)) {
                            count = count + 1;
                        }
                    }
                }
            }
            v.setRangeSize(rangeSize); //set to original range
            _log.info("Total Count -->" + count);
            if (count > 0) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return null;
        }

    }


    /**
     * @param p_user_id
     * @param totAmt
     */
    public void donePaySchdlAction(Integer p_user_id, BigDecimal totAmt) {
        ViewObject pmtVo = this.getSlsInvPmntSchdl();
        ViewObject slsSo = this.getSlsInv();
        String flg = "N";
        BigDecimal num = new BigDecimal(0);
        BigDecimal remain = new BigDecimal(0);
        Row currSo = slsSo.getCurrentRow();
        if (currSo.getAttribute("TransPayDt") != null) {
            Timestamp dt = (Timestamp) currSo.getAttribute("TransPayDt");
            Timestamp soDt = (Timestamp) currSo.getAttribute("DocDt");
            java.sql.Date ordDate = null;
            java.sql.Date payDt = null;
            java.util.Date ordUtilDt = null;
            java.util.Date payUtilDt = null;
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                ordDate = soDt.dateValue();
                payDt = dt.dateValue();
                ordUtilDt = sdf.parse(ordDate.toString());
                payUtilDt = sdf.parse(dt.toString());
            } catch (SQLException e) {
                _log.info("Eception in Date Conveersion->" + e);
            } catch (ParseException e) {
                _log.info("Eception in Date Conveersion->" + e);
            }
            if (currSo.getAttribute("TransAdvFlg") != null) {
                flg = currSo.getAttribute("TransAdvFlg").toString();
            }
            if ("Y".equalsIgnoreCase(flg) && soDt.compareTo(dt) == -1) {
                //String msg2 = "Payment Date must be less than or equal to Invoice Date for Advance";
                String msg2 = resolvElDCMsg("#{bundle['MSG.975']}").toString();
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);
                //if Order Date is more than Payment Date & Advance Flag is unchecked.
            } else if ("N".equalsIgnoreCase(flg) && (ordUtilDt.after(payUtilDt))) {
                // String msg2 = "Payment Date cannot be less than Invoice Date";
                String msg2 = resolvElDCMsg("#{bundle['MSG.978']}").toString();
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);
            } else if (currSo.getAttribute("TransPayAmt") != null) {
                BigDecimal amt = (BigDecimal) currSo.getAttribute("TransPayAmt");
                BigDecimal zero = new BigDecimal(0);
                RowSetIterator rsi = pmtVo.createRowSetIterator(null);
                while (rsi.hasNext()) {
                    Row rw = rsi.next();
                    if (rw.getAttribute("PayAmt") != null) {
                        BigDecimal PayAmt = (BigDecimal) rw.getAttribute("PayAmt");
                        num = num.add(PayAmt);
                    }
                }
                rsi.closeRowSetIterator();
                if (amt.compareTo(zero) == 1 && amt.compareTo(totAmt) != 1) {
                    remain = totAmt.subtract(num);
                    Integer payMode = 160;
                    if (currSo.getAttribute("TransPayMode") != null) {
                        payMode = Integer.parseInt(currSo.getAttribute("TransPayMode").toString());
                    }
                    if (remain.subtract(amt).compareTo(zero) == -1) {
                        //  String msg2 = "Total Payment Amount must be less than total amount.";
                        String msg2 = resolvElDCMsg("#{bundle['MSG.981']}").toString();
                        FacesMessage message2 = new FacesMessage(msg2);
                        message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message2);
                    } else if (dt != null && (amt != null || amt.compareTo(zero) == 1)) {
                        Row pmtCurr = pmtVo.createRow();
                        pmtCurr.setAttribute("PayDt", dt);
                        pmtCurr.setAttribute("PayAmt", amt);
                        pmtCurr.setAttribute("TotAmt", totAmt);
                        pmtCurr.setAttribute("UsrIdCreate", p_user_id);
                        pmtCurr.setAttribute("AdvFlg", flg);
                        pmtCurr.setAttribute("PayMode", payMode);
                        remain = remain.subtract(amt);
                        System.out.println("PK : " + pmtCurr.getKey());

                    }
                    if (remain.compareTo(zero) == 0) {
                        currSo.setAttribute("TransPayAmt", new Number(0));
                    } else if (remain.compareTo(zero) == 1) {
                        currSo.setAttribute("TransPayAmt", remain);
                    }
                    currSo.setAttribute("TransPayDt", null);
                    currSo.setAttribute("TransAdvFlg", "N");
                } else if (amt.compareTo(totAmt) == 1) {
                    /*  String msg2 =
                        "Payment amount " + amt + " must be less than equals to Total Invoice amount " + totAmt;
                    */
                    String msg2 =
                      resolvElDCMsg("#{bundle['MSG.986']}").toString() + amt +
                      resolvElDCMsg("#{bundle['MSG.988']}").toString() + totAmt;
                    FacesMessage message2 = new FacesMessage(msg2);
                    message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message2);
                } else {
                    // String msg2 = "Amount " + amt + " must be greater than Zero.";
                    String msg2 =
                        resolvElDCMsg("#{bundle['MSG.990']}").toString() + amt +
                        resolvElDCMsg("#{bundle['MSG.992']}").toString();
                    FacesMessage message2 = new FacesMessage(msg2);
                    message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message2);
                }
            } else {
                // String msg2 = "Please specify Payment amount.";
                String msg2 = resolvElDCMsg("#{bundle['MSG.422']}").toString();
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);
            }
        } else {
            // String msg2 = "Please specify Payment Date.";
            String msg2 = resolvElDCMsg("#{bundle['MSG.423']}").toString();
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message2);
        }
    }

    /**
     * @param paydt
     * @return
     */
    public String paymentDateValidation(Timestamp paydt) {
        /**  ViewObject slsPmt = this.getSlsInvPmntSchdl();
        if (paydt != null) {
            Row rows[] = slsPmt.getFilteredRows("PayDt", paydt);
            if (rows.length > 0) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return null;
        } */


        Integer countVal = 0;
        Row x = getSlsInv().getCurrentRow();
        if (x != null) {
            Timestamp selDate = (Timestamp) x.getAttribute("TransPayDt");
            Integer mode = (Integer) x.getAttribute("TransPayMode");

            RowSetIterator rSetIter = getSlsInvPmntSchdl().createRowSetIterator(null);
            System.out.println(selDate + "   " + mode);
            if (selDate != null) {
                while (rSetIter.hasNext()) {
                    Row r = rSetIter.next();
                    if (selDate.equals(r.getAttribute("PayDt")) && mode.equals(r.getAttribute("PayMode"))) {
                        //  System.out.println("1 param Found : " + paramName.equals(r.getAttribute("TransSO")));
                        countVal = countVal + 1;
                        System.out.println(" count increased " + countVal);
                    }
                }
                rSetIter.closeRowSetIterator();
                /* Row currentRow = getSlsInvPmntSchdl().getCurrentRow();
                if (currentRow != null) {
                    if (selDate.equals(currentRow.getAttribute("PayDt")) &&
                        mode.equals(currentRow.getAttribute("PayMode"))) {
                        // System.out.println("2 param Id Found : " + paramName.equals(currentRow.getAttribute("TransSO")));
                        countVal = countVal - 1;
                    }
                } */
            }

        }
        return countVal > 0 ? "Y" : "F";

    }


    public void removeTaxItemWise() {
        Row currRw = getSlsInvShipItm().getCurrentRow();
        if (currRw != null) {
            ViewObjectImpl tr = getSlsInvTrItm();
            ViewObjectImpl trline = getSlsInvTrLineItm();
            RowSetIterator rsiTrline = trline.createRowSetIterator(null);
            while (rsiTrline.hasNext()) {
                Row rw = rsiTrline.next();
                rw.remove();
            }
            rsiTrline.closeRowSetIterator();
            RowSetIterator rsiTr = tr.createRowSetIterator(null);
            while (rsiTr.hasNext()) {
                Row rw = rsiTr.next();
                rw.remove();
            }
            rsiTr.closeRowSetIterator();
            currRw.setAttribute("TaxRuleFlg", "N");
            getSlsInvShipItm().executeQuery();
            tr.executeQuery();
            trline.executeQuery();
            this.getSlsInv().getCurrentRow().setAttribute("TransTaxAmountSp", new BigDecimal(0));
        }
    }

    public void removeTaxInvoiceWise() {
        ViewObjectImpl tr = getSlsInvTr();
        ViewObjectImpl trline = getSlsInvTr();
        RowSetIterator rsiTr = tr.createRowSetIterator(null);
        while (rsiTr.hasNext()) {
            Row rw = rsiTr.next();
            rw.remove();
        }
        rsiTr.closeRowSetIterator();
        RowSetIterator rsiTrline = trline.createRowSetIterator(null);
        while (rsiTrline.hasNext()) {
            Row rw = rsiTrline.next();
            rw.remove();
        }
        rsiTrline.closeRowSetIterator();
        tr.executeQuery();
        trline.executeQuery();
    }

    /**
     * For the purpose of searching on InvoiceSearch1.
     */
    public void search() {
        Row currentRow = this.getTempSearchPanel1().getCurrentRow();
        InvoiceSearchVOImpl impl = this.getInvoiceSearch1();
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("DocIdBind", currentRow.getAttribute("DocId"));
        impl.setNamedWhereClauseParam("InvIdBind", currentRow.getAttribute("InvIdTxtTrans"));
        impl.setNamedWhereClauseParam("EoIdBind", currentRow.getAttribute("EoNm"));
        impl.setNamedWhereClauseParam("InvStatusBind", currentRow.getAttribute("InvoiceStatus"));
        Object frmDtO = currentRow.getAttribute("FromDocDt");
        if (frmDtO != null) {
            try {
                impl.setNamedWhereClauseParam("FromDtBind", ((Timestamp) frmDtO).dateValue());
            } catch (SQLException e) {
            }
        }
        Object toDtO = currentRow.getAttribute("ToDocDt");
        if (toDtO != null) {
            try {
                impl.setNamedWhereClauseParam("ToDtBind", ((Timestamp) toDtO).dateValue());
            } catch (SQLException e) {
            }
        }
        impl.setNamedWhereClauseParam("InvTypeBind", currentRow.getAttribute("SIStatus"));
        impl.setNamedWhereClauseParam("InvSubTypeBind", currentRow.getAttribute("InvSubTyp"));
        impl.setNamedWhereClauseParam("CurrIdBind", currentRow.getAttribute("CurrId"));
        impl.setNamedWhereClauseParam("FromNoOfShipmentBind", currentRow.getAttribute("FromNumberOfItms"));
        impl.setNamedWhereClauseParam("ToNoOfShipmentBind", currentRow.getAttribute("ToNumberOfItms"));
        impl.setNamedWhereClauseParam("FromSiAmountBind", currentRow.getAttribute("FromSIAmount"));
        impl.setNamedWhereClauseParam("ToSiAmountBind", currentRow.getAttribute("ToSIAmount"));
        impl.setNamedWhereClauseParam("InvModeBind", currentRow.getAttribute("InvoiceMode"));


        impl.executeQuery();
    }

    /**
     * For the purpose of reset on InvoiceSearch1.
     */
    public void reset() {
        ViewObjectImpl impl = this.getInvoiceSearch1();
        impl.setNamedWhereClauseParam("DocIdBind", null);
        impl.setNamedWhereClauseParam("InvIdBind", null);
        impl.setNamedWhereClauseParam("EoIdBind", -1);
        impl.setNamedWhereClauseParam("InvStatusBind", null);
        impl.setNamedWhereClauseParam("FromDtBind", null);
        impl.setNamedWhereClauseParam("ToDtBind", null);
        impl.setNamedWhereClauseParam("InvTypeBind", null);
        impl.setNamedWhereClauseParam("InvSubTypeBind", null);
        impl.setNamedWhereClauseParam("CurrIdBind", null);
        impl.setNamedWhereClauseParam("FromNoOfShipmentBind", null);
        impl.setNamedWhereClauseParam("ToNoOfShipmentBind", null);
        impl.setNamedWhereClauseParam("FromSiAmountBind", null);
        impl.setNamedWhereClauseParam("ToSiAmountBind", null);
        impl.setNamedWhereClauseParam("InvModeBind", null);

        this.getInvoiceSearch1().executeQuery();
        this.getTempSearchPanel1().executeQuery();
    }

    /**
     * Container's getter for SlsInvTnc.
     * @return SlsInvTnc
     */
    public ViewObjectImpl getSlsInvTnc() {
        return (ViewObjectImpl) findViewObject("SlsInvTnc");
    }

    /**
     * Container's getter for SlsInv2SlsInvTncVL1.
     * @return SlsInv2SlsInvTncVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvTncVL1() {
        return (ViewLinkImpl) findViewLink("SlsInv2SlsInvTncVL1");
    }

    /**
     * Container's getter for TnCView.
     * @return TnCView
     */
    public ViewObjectImpl getTnCView() {
        return (ViewObjectImpl) findViewObject("TnCView");
    }

    /**
     * Container's getter for SlsInvPmntSchdl.
     * @return SlsInvPmntSchdl
     */
    public SlsInvPmntSchdlVOImpl getSlsInvPmntSchdl() {
        return (SlsInvPmntSchdlVOImpl) findViewObject("SlsInvPmntSchdl");
    }

    /**
     * Container's getter for SlsInv2SlsInvPmntSchdlVL1.
     * @return SlsInv2SlsInvPmntSchdlVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvPmntSchdlVL1() {
        return (ViewLinkImpl) findViewLink("SlsInv2SlsInvPmntSchdlVL1");
    }

    /**
     * @param DiscVal
     */
    public void DiscountValidation(BigDecimal DiscVal) {
        if (DiscVal != null) {
            ViewObjectImpl inv = getSlsInv();
            Row rw = inv.getCurrentRow();
            if (rw != null) {
                if (rw.getAttribute("DiscType") != null) {
                    String DiscType = (String) rw.getAttribute("DiscType");
                    BigDecimal zero = new BigDecimal(0);
                    if ("P".equals(DiscType)) {
                        BigDecimal Amount = (BigDecimal) rw.getAttribute("TransAmtAfterTaxSp");
                        Amount = Amount.multiply(DiscVal);
                        if (DiscVal.compareTo(zero) == -1) {
                            // String msg2 = "Discount percentage must be greater than zero.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.995']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        } else if (DiscVal.compareTo(new BigDecimal(100)) == 1) {
                            // String msg2 = "Discount percentage must be less than 100.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.996']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        } else if (Amount.compareTo((BigDecimal) rw.getAttribute("TransAmtAfterTaxSp")) == 1) {
                            // String msg2 = "Discount Amount should be less than the After tax Amount.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.998']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        }
                    } else if ("A".equalsIgnoreCase(DiscType)) {
                        if (DiscVal.compareTo(zero) == -1) {
                            //  String msg2 = "Discount amount must be greater than zero.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.1000']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        } else if (DiscVal.compareTo((BigDecimal) rw.getAttribute("TransAmtAfterTaxSp")) == 1) {
                            // String msg2 = "Discount Amount should be less than the After tax Amount.";
                            String msg2 = resolvElDCMsg("#{bundle['MSG.998']}").toString();
                            FacesMessage message2 = new FacesMessage(msg2);
                            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message2);
                        }
                    }
                }
            }
        }
    }


    /**
     * @param P_USR
     * @param P_ship_ID
     * @return
     */
    public String setInvShpItm(Integer P_USR, String P_ship_ID) {
        String val = "N";
        Row currInv = getSlsInv().getCurrentRow();
        String retval = "";
        if (currInv != null) {
            try {
                retval = (String) callStoredFunction(Types.VARCHAR, "FN_INS_SHIPITM_INV(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     currInv.getAttribute("SlocId"), currInv.getAttribute("CldId"),
                                                     currInv.getAttribute("OrgId"), currInv.getAttribute("HoOrgId"),
                                                     currInv.getAttribute("EoId"), P_ship_ID, P_USR,
                                                     currInv.getAttribute("DocId"), currInv.getAttribute("DocDt"),
                                                     currInv.getAttribute("CurrRate"),
                                                     currInv.getAttribute("InclSrvcItm")
                });

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_SHIPITM_INV' !" +
                                     e.getMessage());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
            Row row = getSlsInvDtl().getCurrentRow();
            if (row != null) {
                row.setAttribute("ShipId", P_ship_ID);
                if (P_ship_ID != null) {
                    Row[] xx = getLOVShipment().getFilteredRows("DocId", P_ship_ID);
                    if (xx.length > 0) {
                        LOVShipmentVORowImpl r = (LOVShipmentVORowImpl) xx[0];
                        row.setAttribute("ShipDt", r.getDocDt());
                        row.setAttribute("ShipAmtSp", r.getShipVal());
                        System.out.println("In Shipment id " + currInv.getAttribute("CurrConvTrans"));
                        if (currInv.getAttribute("CurrConvTrans").equals((Object) ("I"))) {
                            BigDecimal c = (BigDecimal) currInv.getAttribute("CurrRate");
                            row.setAttribute("ShipAmtBs", r.getShipVal().multiply(c));
                        } else {
                            BigDecimal c = r.getCurrConvFctr();
                            if (c == null) {
                                c = new BigDecimal(1);
                            }
                            row.setAttribute("ShipAmtBs", r.getShipVal().multiply(c));
                            System.out.println("ShipAmtBs from Invoice :" + row.getAttribute("ShipAmtBs"));
                        }
                    }
                }
            }

            if (retval.equalsIgnoreCase("1")) {
                val = "Y";
                getSlsInvShipItm().executeQuery();
                getSlsInvTrItm().executeQuery();
                getSlsInvTrLineItm().executeQuery();
            } else {
                val = "N";
            }
        }
        return val;
    }

    /**
     * @param ShipmentDispId
     * @return
     */
    public String getShipmentId(String ShipmentDispId) {
        String shpDesc = null;
        SlsInvVORowImpl currentRow = (SlsInvVORowImpl) this.getSlsInv().getCurrentRow();
        if (ShipmentDispId != null) {
            Row[] xx = currentRow.getLOVShipmentVO1().getFilteredRows("DispId", ShipmentDispId);
            if (xx.length > 0) {
                shpDesc = xx[0].getAttribute("DocId").toString();
            }
        }
        return shpDesc;
    }

    /**
     * @param UserId
     */
    public void checkTrforItem(Integer UserId, String itmId) {
        System.out.println("inside checkTrforItem methjos .----->>>> " + itmId);
        Row r = getSlsInv().getCurrentRow();

        Integer custId = r.getAttribute("EoId") == null ? null : (Integer) r.getAttribute("EoId");
        String billAdd = r.getAttribute("BillAdd") == null ? null : r.getAttribute("BillAdd").toString();
        BigDecimal currFact = r.getAttribute("CurrRate") == null ? null : (BigDecimal) r.getAttribute("CurrRate");
        Long taxRule = null;


        ViewObjectImpl shpItm = getSlsInvShipItm();
        Row currShpItm = shpItm.getCurrentRow();
        currShpItm.setAttribute("TaxRuleFlg", "Y");
        if (currShpItm != null) {
            String TaxRuleFlg = "N";
            if (currShpItm.getAttribute("TaxRuleFlg") != null) {
                TaxRuleFlg = currShpItm.getAttribute("TaxRuleFlg").toString();
                System.out.println("tax Rule Flag : " + TaxRuleFlg);
            } else {
                TaxRuleFlg = "N";
            }
            if (TaxRuleFlg.equalsIgnoreCase("Y")) {
                ViewObjectImpl trItm = getSlsInvTrItm();
                int cnt = trItm.getRowCount();
                if (cnt == 0) {
                    Row newTrRw = trItm.createRow();
                    newTrRw.setAttribute("TaxableAmt", currShpItm.getAttribute("ItmAmtGsSp"));
                    newTrRw.setAttribute("SrNoDest", "0");
                    newTrRw.setAttribute("SrNo", 1);
                    newTrRw.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
                    newTrRw.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                    trItm.insertRow(newTrRw);

                    taxRule =
                        getTaxRuleIdFromFun(custId, itmId, billAdd, (BigDecimal) currShpItm.getAttribute("ItmAmtGsSp"),
                                            currFact);
                    System.out.println(" tax rule from the method is +++++>>>>>  " + taxRule);
                    newTrRw.setAttribute("TaxRuleId", taxRule);
                    //CALL FUNCTION
                    System.out.println("Tr Row Created.." + newTrRw.getKey());
                } else {

                    Row[] allRowsInRange = trItm.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        allRowsInRange[0].setAttribute("TaxableAmt", currShpItm.getAttribute("ItmAmtGsSp"));
                    }
                    System.out.println("Tr Row Already Exists.." + allRowsInRange[0].getKey());
                }
            }
        }
    }

    /** Method to get the default Tax rule id for the customer for specific item
     * FN_GET_TAX_RULE_ID ( P_CLD_ID VARCHAR2,
     P_CLD_ID    VARCHAR2,
        P_SLOC_ID   NUMBER,
        P_ADDS_ID   VARCHAR2,
        P_ORG_ID    VARCHAR2,
        P_HO_ORG_ID VARCHAR2,
        P_ITM_GRP   VARCHAR2,
        P_EO_ID     NUMBER,
        p_DOC_id VARCHAR2
     * Created by Mousham
     */
    public Long getTaxRuleIdFromFun(Integer custmrId, String itmId, String addId, BigDecimal texableAmount,
                                    BigDecimal currFctr) {
        System.out.println(" Getting tax rule <<<< -----");
        System.out.println(custmrId + " cusotmer " + itmId + " Item " + addId + " address and taxable amount " +
                           texableAmount);
        Long rulId = null;
        Row r = getSlsInv().getCurrentRow();

        Object res = null;
        /*Getting item group id for an item
        getLOVItmGrp().setNamedWhereClauseParam("ItmIdBind", itmId);
        getLOVItmGrp().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        getLOVItmGrp().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        getLOVItmGrp().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        getLOVItmGrp().executeQuery();
        Row r = getLOVItmGrp().getRowAtRangeIndex(0);
        String itmGrpId = r.getAttribute("GrpId").toString();
        System.out.println(" Getting froup id  ====<<<  " + itmGrpId);
        */
        try {
            res = ADFModelUtils.callFunction(this, new StringBuilder("app.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                             EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), addId,
                                             EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), itmId,
                                             custmrId, 21504, r.getAttribute("TaxFormTypId")
            }, Types.INTEGER);
        } catch (Exception e) {
            //sdfv
        }
        System.out.println(" Rule id for Tax ===<<><> " + res);
        // Converting Integer value to Long value
        Integer tmp = res == null ? null : (Integer) res;
        if (tmp != -1) {
            rulId = tmp.longValue();
        }
        if (rulId != null) {
            insertIntoSlsInvTrLineForItemwise(rulId, EbizParams.GLBL_APP_USR(), texableAmount, currFctr);
        }
        return rulId;
    }

    /** Method to get the default Tax rule id for the customer INVOICE wise
     * FN_GET_TAX_RULE_ID ( P_CLD_ID VARCHAR2,
     P_CLD_ID    VARCHAR2,
        P_SLOC_ID   NUMBER,
        P_ADDS_ID   VARCHAR2,
        P_ORG_ID    VARCHAR2,
        P_HO_ORG_ID VARCHAR2,
        P_ITM_GRP   VARCHAR2,
        P_EO_ID     NUMBER,
        p_DOC_id VARCHAR2
     * Created by Mousham
     */

    public Long getTaxRuleIdForHeader(Integer custmrId, String addId, BigDecimal currFctr) {
        Long rulId = null;
        Object res = null;
        Row r = getSlsInv().getCurrentRow();
        try {
            res = ADFModelUtils.callFunction(this, new StringBuilder("app.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                             EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), addId,
                                             EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), 0, custmrId,
                                             21504, r.getAttribute("TaxFormTypId")
            }, Types.INTEGER);
        } catch (Exception e) {
            //sdfv
        }

        System.out.println(" Rule id for Tax ===<<><> " + res);
        // Converting Integer to Long Value
        Integer tmp = res == null ? null : (Integer) res;
        if (tmp != -1) {
            rulId = tmp.longValue();
        }

        if (rulId != null) {
            insertIntoSlsInvTrLineForInvoicewise(rulId, EbizParams.GLBL_APP_USR(), null, currFctr);
        }
        return rulId;
    }

    /**
     * Container's getter for SlsInvShipItm.
     * @return SlsInvShipItm
     */
    public SlsInvShipItmVOImpl getSlsInvShipItm() {
        return (SlsInvShipItmVOImpl) findViewObject("SlsInvShipItm");
    }

    /**
     * Container's getter for SlsInvDtl2SlsInvShipItmVL1.
     * @return SlsInvDtl2SlsInvShipItmVL1
     */
    public ViewLinkImpl getSlsInvDtl2SlsInvShipItmVL1() {
        return (ViewLinkImpl) findViewLink("SlsInvDtl2SlsInvShipItmVL1");
    }


    public void executeVoForItemwiseTax() {
        getSlsInvShipItm().executeQuery();
        getSlsInvTrItm().executeQuery();
        getSlsInvTrLineItm().executeQuery();
        RowSetIterator ctr = this.getSlsInvDtl().createRowSetIterator(null);
        while (ctr.hasNext()) {
            SlsInvDtlVORowImpl c = (SlsInvDtlVORowImpl) ctr.next();
            c.setRecalculate();
            c.getShipAmtSp();
        }
    }

    public void deleteShpDtl() {
        Row currRw = this.getSlsInvDtl().getCurrentRow();
        if (currRw != null) {
            String CldId = null;
            Integer SlocId = null;
            String OrgId = null;
            String HoOrgId = null;
            String DocId = null;
            String ShipId = null;
            if (currRw.getAttribute("CldId") != null) {
                CldId = currRw.getAttribute("CldId").toString();
            }
            if (currRw.getAttribute("SlocId") != null) {
                SlocId = (Integer) currRw.getAttribute("SlocId");
            }
            if (currRw.getAttribute("OrgId") != null) {
                OrgId = currRw.getAttribute("OrgId").toString();
            }
            if (currRw.getAttribute("HoOrgId") != null) {
                HoOrgId = currRw.getAttribute("HoOrgId").toString();
            }
            if (currRw.getAttribute("DocId") != null) {
                DocId = currRw.getAttribute("DocId").toString();
            }
            if (currRw.getAttribute("ShipId") != null) {
                ShipId = currRw.getAttribute("ShipId").toString();
            }
            try {
                String val = null;
                val = (String) callStoredFunction(Types.VARCHAR, "FN_DEL_INV_SHP_ITM(?,?,?,?,?,?)", new Object[] {
                                                  CldId, SlocId, HoOrgId, OrgId, ShipId, DocId
                });
                currRw.remove();
                System.out.println("Return value is " + val);

                this.getSlsInvShipItm().executeQuery();
                this.getSlsInvTrLine1().executeQuery();
                this.getSlsInvTr().executeQuery();
                this.getSlsInvDtl().executeQuery();
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_DEL_INV_SHP_ITM' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
            this.getSlsInvShipItm().executeQuery();
            this.getSlsInvTrItm().executeQuery();
            this.getSlsInvTrLineItm().executeQuery();
            getSlsInvDtl().executeQuery();
            this.getDBTransaction().postChanges();
            this.getSlsInvDtl1().executeQuery();

            //setTaxAmount();
        }

        System.out.println("Outside");
    }

    /*-----------------------------DElete cost center Item Wise-----------------------------*/
    public void deleteCostCenterForItem() {
        RowSetIterator crs = this.getSlsInvShipItm().createRowSetIterator(null);
        while (crs.hasNext()) {
            Row crst = crs.next();
            System.out.println("DocId------>>>> " + crst.getAttribute("DocId").toString() + "CcId------->>>> " +
                               crst.getAttribute("CcId").toString());
            deleteCostCenterItem(crst.getAttribute("DocId").toString(), crst.getAttribute("CcId").toString());
        }
        crs.closeRowSetIterator();
    }

    public void setTotalInvAmt() {
        Row rw = getSlsInv().getCurrentRow();
        if (rw != null) {
            BigDecimal totSp = new BigDecimal(0);
            BigDecimal totBs = new BigDecimal(0);
            if (rw.getAttribute("TransAmtAfterOcSp") != null) {
                totSp = (BigDecimal) rw.getAttribute("TransAmtAfterOcSp");
            }
            if (rw.getAttribute("TransAmtAfterOcBs") != null) {
                totBs = (BigDecimal) rw.getAttribute("TransAmtAfterOcBs");
            }

            rw.setAttribute("TotAmtSp", totSp);
            //rw.setAttribute("TotAmtBs", totBs);
        }

    }

    /**
     * @param ShpId
     */
    public void setTaxRuleFlg(String ShpId) {
        Row currRwInv = getSlsInv().getCurrentRow();
        int count = 0;
        if (currRwInv != null) {
            Row currRw = getSlsInvDtl().getCurrentRow();
            if (currRw != null) {
                String CldId = null;
                Integer SlocId = null;
                String OrgId = null;
                String HoOrgId = null;
                String DocId = null;


                if (currRw.getAttribute("CldId") != null) {
                    CldId = currRw.getAttribute("CldId").toString();
                }
                if (currRw.getAttribute("SlocId") != null) {
                    SlocId = (Integer) currRw.getAttribute("SlocId");
                }
                if (currRw.getAttribute("OrgId") != null) {
                    OrgId = currRw.getAttribute("OrgId").toString();
                }
                if (currRw.getAttribute("HoOrgId") != null) {
                    HoOrgId = currRw.getAttribute("HoOrgId").toString();
                }
                if (currRw.getAttribute("DocId") != null) {
                    DocId = currRw.getAttribute("DocId").toString();
                }

                try {
                    count = (Integer) callStoredFunction(Types.INTEGER, "FN_INS_INV_TAX_COUNT(?,?,?,?,?,?)", new Object[] {
                                                         CldId, SlocId, OrgId, HoOrgId, DocId, ShpId
                    });
                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'FN_INS_INV_TAX_COUNT' !");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                }


                BigDecimal taxAmt = getTaxAmt(CldId, SlocId, OrgId, HoOrgId, DocId);
                if (count > 0) {
                    currRwInv.setAttribute("TaxRuleFlg", "D");
                    currRwInv.setAttribute("TaxAfterDiscFlg", "Y");
                    currRwInv.setAttribute("TransTaxAmountSp", taxAmt);
                }
            }

        }
        this.getSlsInvTr().executeQuery();
    }


    /**
     * @param CldId
     * @param SlocId
     * @param OrgId
     * @param HoOrgId
     * @param DocId
     * @return
     */
    public BigDecimal getTaxAmt(String CldId, Integer SlocId, String OrgId, String HoOrgId, String DocId) {
        BigDecimal taxAmt = new BigDecimal(0);
        try {
            taxAmt = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_INS_INV_TAX_AMT(?,?,?,?,?)", new Object[] {
                                                     CldId, SlocId, OrgId, HoOrgId, DocId
            });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_INS_INV_TAX_AMT' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        return taxAmt;
    }


    public void setTaxAmount() {
        Row currRw = getSlsInv().getCurrentRow();
        if (currRw != null) {
            String CldId = null;
            Integer SlocId = null;
            String OrgId = null;
            String HoOrgId = null;
            String DocId = null;
            if (currRw.getAttribute("CldId") != null) {
                CldId = currRw.getAttribute("CldId").toString();
            }
            if (currRw.getAttribute("SlocId") != null) {
                SlocId = (Integer) currRw.getAttribute("SlocId");
            }
            if (currRw.getAttribute("OrgId") != null) {
                OrgId = currRw.getAttribute("OrgId").toString();
            }
            if (currRw.getAttribute("HoOrgId") != null) {
                HoOrgId = currRw.getAttribute("HoOrgId").toString();
            }
            if (currRw.getAttribute("DocId") != null) {
                DocId = currRw.getAttribute("DocId").toString();
            }
            BigDecimal taxAmt = new BigDecimal(0);
            try {
                taxAmt = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_INS_INV_TAX_AMT(?,?,?,?,?)", new Object[] {
                                                         CldId, SlocId, OrgId, HoOrgId, DocId
                });
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_INV_TAX_AMT' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
            currRw.setAttribute("TransTaxAmountSp", taxAmt);
        }
    }

    /**
     * @param DocId
     */
    public void InvoiceCalcu(StringBuffer DocId) {

        StringBuffer docId = null;
        Row currentRow = this.getSlsInv().getCurrentRow();
        if (DocId != null) {
            docId = DocId;
        } else {
            docId = new StringBuffer(currentRow.getAttribute("DocId").toString());
        }
        Integer currIdSp = 0;
        Integer currIdBs = 0;
        BigDecimal convFact = new BigDecimal(1.00);
        if (currentRow != null) {
            currIdSp = (Integer) currentRow.getAttribute("CurrIdSp");
            currIdBs = (Integer) currentRow.getAttribute("CurrIdBs");
            convFact = (BigDecimal) currentRow.getAttribute("CurrRate");
        }
        try {
            getSlsInvPmntSchdl().executeQuery();
            this.getDBTransaction().postChanges();
            //insertTrLinesInCaseOfMismatch1();
            //this.getDBTransaction().postChanges();

            callStoredFunction(Types.INTEGER, "FN_INS_INV_CALC(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), docId.toString(),
                               EbizParams.GLBL_APP_USR(), 1, currIdSp, currIdBs, convFact
            });
            this.getDBTransaction().postChanges();
            getSlsInvCalc().executeQuery();
            getSlsInvDtl().executeQuery();
            iterateSlsInvCalc();
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'SLS.FN_INS_INV_CALC' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for SlsInvCalc.
     * @return SlsInvCalc
     */
    public ViewObjectImpl getSlsInvCalc() {
        return (ViewObjectImpl) findViewObject("SlsInvCalc");
    }

    /**
     * Container's getter for SlsInv2SlsInvCalcVL1.
     * @return SlsInv2SlsInvCalcVL1
     */
    public ViewLinkImpl getSlsInv2SlsInvCalcVL1() {
        return (ViewLinkImpl) findViewLink("SlsInv2SlsInvCalcVL1");
    }

    /**
     * Container's getter for InvoiceSearch1.
     * @return InvoiceSearch1
     */
    public InvoiceSearchVOImpl getInvoiceSearch1() {
        return (InvoiceSearchVOImpl) findViewObject("InvoiceSearch1");
    }

    /**
     * Container's getter for TempSearchPanel1.
     * @return TempSearchPanel1
     */
    public TempSearchPanelVOImpl getTempSearchPanel1() {
        return (TempSearchPanelVOImpl) findViewObject("TempSearchPanel1");
    }

    /**
     * Method for resolving the El.
     * @param data
     * @return
     */
    public String resolvEl(Object data) {
        return ADFModelUtils.resolvEl(data.toString()).toString();
    }

    /**
     *  For setting initial Bind variables.
     */
    public void setBindVariablesInSearchView() {
        InvoiceSearchVOImpl impl = this.getInvoiceSearch1();
        impl.setCldIdBind(EbizParams.GLBL_APP_CLD_ID());
        impl.setOrgIdBind(EbizParams.GLBL_APP_USR_ORG());
        impl.setHoOrgIdBind(EbizParams.GLBL_HO_ORG_ID());
        impl.setSlocIdBind(EbizParams.GLBL_APP_SERV_LOC());
        impl.setEoIdBind(-1);
        impl.executeQuery();
    }

    /**
     * Set the Selected DocId in the view page in view mode.
     */
    public void setSelectDocIdOnViewPage() {
        StringBuffer Docid = null;
        SlsInvVOImpl impl = (SlsInvVOImpl) this.getSlsInv();
        InvoiceSearchVORowImpl r = ((InvoiceSearchVORowImpl) this.getInvoiceSearch1().getCurrentRow());
        if (r != null) {
            Docid = new StringBuffer(r.getDocId());
        } else {
            try {
                Docid = new StringBuffer(resolvEl("#{pageFlowScope.DOC_ID}"));
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling taskflow 'SlsSalesInvoiceAppAddTF'!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }

        }
        impl.setCldIdBind(EbizParams.GLBL_APP_CLD_ID());
        impl.setSlocIdBind(EbizParams.GLBL_APP_SERV_LOC());
        impl.setOrgIdBind(EbizParams.GLBL_APP_USR_ORG());
        impl.setHoOrgIdBind(EbizParams.GLBL_HO_ORG_ID());

        if (Docid != null) {
            impl.setDocIdBind(Docid.toString());
            impl.executeQuery();
        }

    }

    /**
     * Method to refresh the cutomer LOV on selection of invoice type.
     * @param InvType
     */
    public void refreshCustomerLOV(Integer InvType) {

    }

    /**
     * Method to handle exception taskflow.
     */
    public void exceptionHandler() {
        // FacesMessage message = new FacesMessage("There have been an error! </br> Contact Ess!!");
        FacesMessage message =
            new FacesMessage(resolvElDCMsg("#{bundle['MSG.895']}").toString() + " </br> " +
                             resolvElDCMsg("#{bundle['MSG.897']}").toString());
        message.setSeverity(FacesMessage.SEVERITY_ERROR);
        FacesContext.getCurrentInstance().addMessage(null, message);
    }

    /**
     * Container's getter for SlsInvAdj1.
     * @return SlsInvAdj1
     */
    public ViewObjectImpl getSlsInvAdj1() {
        return (ViewObjectImpl) findViewObject("SlsInvAdj1");
    }

    /**
     * Container's getter for SlsInvAdjVL1.
     * @return SlsInvAdjVL1
     */
    public ViewLinkImpl getSlsInvAdjVL1() {
        return (ViewLinkImpl) findViewLink("SlsInvAdjVL1");
    }

    /**
     * Method to insertAdjustment at create time.
     */
    public void insertAdjustment() {
        if (this.getSlsInv().getCurrentRow() != null) {

            Integer coaId = (Integer) this.getSlsInv().getCurrentRow().getAttribute("CoaId");

            // Delete rows on repeted adjustemnt populate
            Row currentRow = this.getSlsInv().getCurrentRow();
            Integer currId = 73;
            BigDecimal cc = new BigDecimal(1);
            if (currentRow != null) {
                currId = (Integer) currentRow.getAttribute("CurrIdSp");
                cc = (BigDecimal) currentRow.getAttribute("CurrRate");
            }

            RowSetIterator cr = this.getSlsInvAdj1().createRowSetIterator(null);
            while (cr.hasNext()) {
                Row next = cr.next();
                if (next.getAttribute("InvAmtAdj").equals(new BigDecimal(0))) {
                    next.remove();
                }
            }
            cr.closeRowSetIterator();
            this.getSlsInvAdj1().executeQuery();

            RowSetIterator cr1 = this.getSlsInvAdj1().createRowSetIterator(null);
            //System.out.println("cr1 : "+cr1.getRowCount());
            ViewObjectImpl aR1 = this.getLovAr1();
            aR1.setNamedWhereClauseParam("CoaIdBind", coaId);
            aR1.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            aR1.executeQuery();
            Row[] allRowsInRange = aR1.getAllRowsInRange();
            RowSet rowSet = aR1.getRowSet();
            RowSetIterator itr = aR1.createRowSetIterator(null);

            Integer i = 1;
            Integer count = 0;
            while (itr.hasNext()) {
                LovArVORowImpl next = (LovArVORowImpl) itr.next();
                cr1 = this.getSlsInvAdj1().createRowSetIterator(null);
                if (cr1.getRowCount() != 0) {
                    count = 0;
                    while (cr1.hasNext()) {
                        Row next_2 = cr1.next();
                        if ((next_2.getAttribute("CoaId").equals(next.getArapCoaId())) &&
                            next_2.getAttribute("GlVouId").equals(next.getArapVouId())) {
                            count = 1;
                        }
                    }
                }
                if (count == 0) {
                    SlsInvAdjVORowImpl row = (SlsInvAdjVORowImpl) this.getSlsInvAdj1().createRow();
                    row.setCoaId(coaId);
                    row.setGlAmtSp(next.getArapAmtSp());
                    row.setGlVouDt(next.getArapVouDt());
                    row.setGlVouId(next.getArapVouId());
                    row.setGlAmtBs((next.getApCc()).multiply(next.getArapAmtSp()));
                    row.setArGlSlNo(next.getArapGlSlNo());
                    row.setArSlNo(next.getArapslNo());
                    row.setTranType(next.getArapAmtTyp());
                    row.setVouIdDisp(next.getDocTxnIdDisp());
                    row.setInvAmtOt(next.getArapNetAmtOt());
                    row.setCurrIdSpOld(next.getArapCurrIdSp());
                    row.setCurrIdSp(currId);
                    row.setCurrConvFctrOld(next.getApCc());
                    row.setCurrConvFctr(cc);
                    row.setSrNo(i);
                    i = i + 1;
                    this.getSlsInvAdj1().insertRow(row);
                }
            }
            cr1.closeRowSetIterator();
            itr.closeRowSetIterator();
            this.getSlsInvAdj1().executeQuery();
        }
    }

    /**
     * Method to set CoaId in SlsInvVo.
     * @param EoNm
     */
    public void setCoaIdFromEo(StringBuffer EoNm) {

    }

    /**
     * Container's getter for LOVCustCoa1.
     * @return LOVCustCoa1
     */
    public ViewObjectImpl getLOVCustCoa1() {
        return (ViewObjectImpl) findViewObject("LOVCustCoa1");
    }

    /**
     * Container's getter for LOVAR1.
     * @return LOVAR1
     */
    public ViewObjectImpl getLOVAR1() {
        return (ViewObjectImpl) findViewObject("LOVAR1");
    }

    /**
     * Set the Selected DocId after commit in view mode.
     * @param DocId
     */
    public void setSelectDocIdOnCommit(StringBuffer DocId) {
        StringBuffer Docid = DocId;
        SlsInvVOImpl impl = this.getSlsInv();

        impl.setCldIdBind(EbizParams.GLBL_APP_CLD_ID());
        impl.setSlocIdBind(EbizParams.GLBL_APP_SERV_LOC());
        impl.setOrgIdBind(EbizParams.GLBL_APP_USR_ORG());
        impl.setHoOrgIdBind(EbizParams.GLBL_HO_ORG_ID());

        if (Docid != null) {
            impl.setDocIdBind(Docid.toString());
            impl.executeQuery();
            this.getInvoiceSearch1().executeQuery();
        } else {
        }

    }

    /**
     * Method to get the current DocId before commit.
     * @return
     */
    public StringBuffer getCurrentDocId() {
        if (this.getSlsInv().getCurrentRow() != null) {
            return new StringBuffer(this.getSlsInv().getCurrentRow().getAttribute("DocId").toString());
        } else {
            return new StringBuffer("No Doc id");
        }
    }


    /**
     * Method returns the userId of the user on which the SalesInvoice is pending.
     * @return
     */
    public Integer slsInvoicePendingAt() {
        Object obj = null;
        StringBuffer DocIdTxn = new StringBuffer(this.getSlsInv().getCurrentRow().getAttribute("DocId").toString());
        Integer docType = (Integer) this.getSlsInv().getCurrentRow().getAttribute("InvType");
        try {
            obj = WorkFlowUtils.docPendingAt(this, 21504, docType, DocIdTxn);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_DOC_WF_CUR_USR' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        Integer usrId = 0;
        if (obj != null) {
            usrId = (Integer) obj;
        }
        System.out.println("Returned : " + usrId);
        return usrId;

    }

    /**
     * Method returns WFID attached to the document.
     * @return
     */

    public StringBuffer getWfIdAttachedWithTheDoc() {
        Integer docType = (Integer) this.getSlsInv().getCurrentRow().getAttribute("InvType");
        System.out.println("Oreder type pendingCheck" + docType);
        Object obj = "";
        try {
            obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                     EbizParams.GLBL_APP_USR_ORG(), 21504, docType
            });
            System.out.println("WF_ID WITH THE DOC =====:" + obj);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.GET_WF_ID' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        System.out.println("before return --" + obj);
        return (obj == null ? new StringBuffer("") : new StringBuffer(obj.toString()));
    }

    /**
     * Method that returns the level of the current user.
     * @param WfId
     * @return
     */
    public Integer getUsrLvl(StringBuffer WfId) {
        Integer docType = (Integer) this.getSlsInv().getCurrentRow().getAttribute("InvType");
        Integer lvl = 0;
        try {
            lvl = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                               EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(),
                                               WfId.toString(), new Integer("21504"), docType
            }); //System.out.println("LEVEL :"+lvl);
        } catch (Exception e) {
            /* FacesMessage message =
                new FacesMessage("Workflow for this user is not defined. Please define the workflow for this user."); */
            FacesMessage message = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2168"));
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        return lvl;
    }

    /**
     * Method inserts a record in insTxn.
     * @param WfId
     * @param level
     * @return
     */
    public Integer insIntoTxn(StringBuffer WfId, Integer level) {
        Integer docType = (Integer) this.getSlsInv().getCurrentRow().getAttribute("InvType");
        System.out.println("invoice type getUsrLvl" + docType);
        Integer result = -3;
        try {
            StringBuffer docId = new StringBuffer(this.getSlsInv().getCurrentRow().getAttribute("DocId").toString());
            result = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                  EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                  EbizParams.GLBL_APP_USR_ORG(), 21504, docType, WfId.toString(),
                                                  docId.toString(), EbizParams.GLBL_APP_USR(),
                                                  EbizParams.GLBL_APP_USR(), level, level, "I", "A", 0, "S"
            });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.INS_TXN' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        return result;
    }

    /**
     *  Method that is called after return from WorkFlow.s
     */
    public void functionCallOnApprovalFromWorkFlow() {
        Boolean success = true;
        StringBuffer returnParam = new StringBuffer(resolvEl("#{pageFlowScope.RETURN_FROM_WF}"));
        System.out.println("RETURN PARAM :" + returnParam);
        Row siRow = this.getSlsInv().getCurrentRow();
        Integer result;
        if (returnParam != null && returnParam.toString().equalsIgnoreCase("F")) {
            this.getSlsInv().getCurrentRow().setAttribute("InvMode", 317);
            success = true;
        } else if (returnParam != null && returnParam.toString().equalsIgnoreCase("A")) {
            siRow.setAttribute("DispDocId", null);
            getDBTransaction().postChanges();
            String s =
                SLSInvoiceHelper.getDispDocId(this, null, siRow.getAttribute("InvType"),
                                              siRow.getAttribute("InvSubType"), "A");
            siRow.setAttribute("DispDocId", s);
            getDBTransaction().postChanges();

            try {
                if (siRow != null) {
                    StringBuffer docId = new StringBuffer(siRow.getAttribute("DocId").toString());
                    BigDecimal amt = (BigDecimal) siRow.getAttribute("TotAmtSp");
                    Integer eoId = (Integer) siRow.getAttribute("EoId");
                    Integer coaId = (Integer) siRow.getAttribute("CoaId");
                    BigDecimal cc = (BigDecimal) siRow.getAttribute("CurrRate");
                    Timestamp docDt = (Timestamp) siRow.getAttribute("DocDt");
                    System.out.println("Functioncalled!");
                    try {
                        result =
                            (Integer) callStoredFunction(Types.INTEGER, "SLS.FN_SLS_GL_INS(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         docId.toString(), docDt, amt, EbizParams.GLBL_APP_USR(),
                                                         EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_SERV_LOC(),
                                                         EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_CLD_ID(),
                                                         eoId, coaId, siRow.getAttribute("CurrIdSp"), cc,
                                                         siRow.getAttribute("DispDocId")
                        });
                        success = true;
                    } catch (Exception e) {
                        success = false;
                        FacesMessage message =
                            new FacesMessage("There have been an error while calling function SLS.FN_SLS_GL_INS!! " +
                                             e.getMessage());
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                        e.printStackTrace();
                    }
                    if (success) {
                        //setMailConfig();
                        siRow.setAttribute("InvStat", 218);
                        siRow.setAttribute("InvMode", 314);
                    }
                    if (success) {
                        success = methodToUpdateBalQtyForSrvcItm("S");
                    }
                    Integer fyId = EbizParamsAPPUtils.getFyId(this, EbizParams.GLBL_APP_USR_ORG(), docDt);
                    if (success) {
                        // function to update stock
                        if (((Integer) siRow.getAttribute("InvType")).equals(349)) {
                            StringBuffer intmId = new StringBuffer("");
                            if (siRow.getAttribute("IntimSlipId") != null) {
                                intmId = new StringBuffer(siRow.getAttribute("IntimSlipId").toString());
                            }
                            try {
                                Integer i =
                                    (Integer) callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_INTM_STAT(?,?,?,?,?,?)", new Object[] {
                                                                 EbizParams.GLBL_APP_CLD_ID(),
                                                                 EbizParams.GLBL_APP_SERV_LOC(),
                                                                 EbizParams.GLBL_APP_USR_ORG(), intmId.toString(), fyId,
                                                                 (Integer) siRow.getAttribute("InvType")
                                });
                                success = true;
                                System.out.println("Return from FN_UPDATE_INTM_STAT :" + i);
                            } catch (Exception e) {
                                success = false;
                                FacesMessage message =
                                    new FacesMessage("There have been an error while calling function !! SLS.FN_UPDATE_INTM_STAT in Consignment Invoice. " +
                                                     e.getMessage());
                                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                                FacesContext.getCurrentInstance().addMessage(null, message);
                                e.printStackTrace();
                            }
                        }
                    }
                    if (success) {
                        if ("Y".equals(checkforProfileValues(new StringBuffer("USE_LC")).toString())) {
                            Row row = this.getSlsInv().getCurrentRow();
                            if (row.getAttribute("LcId") != null) {
                                try {
                                    Object o =
                                        ADFModelUtils.callFunction(this,
                                                                   new StringBuilder("app.fn_ins_lc_txn(?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                                   EbizParams.GLBL_APP_CLD_ID(),
                                                                   EbizParams.GLBL_APP_SERV_LOC(),
                                                                   EbizParams.GLBL_HO_ORG_ID(),
                                                                   EbizParams.GLBL_APP_USR_ORG(),
                                                                   row.getAttribute("LcId"), row.getAttribute("DocId"),
                                                                   21504, row.getAttribute("DocDt"),
                                                                   row.getAttribute("TotAmtBs"),
                                                                   EbizParams.GLBL_APP_USR(), row.getAttribute("FyId"),
                                                                   row.getAttribute("DispDocId")
                                    }, Types.NUMERIC);
                                    success = true;
                                } catch (Exception e) {
                                    success = false;
                                    FacesMessage message =
                                        new FacesMessage("There have been an error while calling function !! APP.fn_ins_lc_txn in Consignment Invoice. " +
                                                         e.getMessage());
                                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                                    FacesContext.getCurrentInstance().addMessage(null, message);
                                    e.printStackTrace();
                                    // TODO: Add catch code
                                    e.printStackTrace();
                                }
                            }
                        }
                    }
                    if (success) {
                        this.getDBTransaction().postChanges();
                        //this.getDBTransaction().commit();
                        String VoucherId = "0";
                        try {

                            VoucherId = (String) callStoredFunction(Types.VARCHAR, "SLS.FN_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] {
                                                                    docId.toString(), EbizParams.GLBL_APP_USR(),
                                                                    EbizParams.GLBL_APP_USR_ORG(),
                                                                    EbizParams.GLBL_APP_SERV_LOC(),
                                                                    EbizParams.GLBL_HO_ORG_ID(),
                                                                    EbizParams.GLBL_APP_CLD_ID(), "I"
                            });

                            System.out.println("Voucher Id : " + VoucherId);
                        } catch (Exception e) {
                            FacesMessage message =
                                new FacesMessage("There have been an error in calling function 'SLS.FN_GET_VOU_NO' ! " +
                                                 e.getMessage());
                            message.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message);
                            e.printStackTrace();
                            throw new Exception(e.getMessage());
                        }
                        if (!VoucherId.toString().equals("0")) {
                            Row row = this.getSlsInv().getCurrentRow();
                            row.setAttribute("VouDispIdTrans", VoucherId);
                            row.setAttribute("VouDispDtTrans", StaticValue.getTruncatedCurrDt());
                            FacesMessage message =
                                new FacesMessage("<html><body>Voucher Id  <b> " + VoucherId +
                                                 " </b>have been Generated.</body></html>");
                            message.setSeverity(FacesMessage.SEVERITY_INFO);
                            FacesContext.getCurrentInstance().addMessage(null, message);
                        }
                    }
                    if (success) {
                        Integer entries = passWtyEntries();
                        if (entries == 1) {
                            success = true;
                        } else {
                            success = false;
                        }
                    }
                } else {
                    FacesMessage message =
                        new FacesMessage("There have been an error while returning from WorkFlow Application!!");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    success = false;
                }

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function after Approval ! " + e.getMessage());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
        if (success) {
            /* getDBTransaction().postChanges();
            String s =
                SLSInvoiceHelper.getDispDocId(this, siRow.getAttribute("DocId"), siRow.getAttribute("InvType"),
                                              siRow.getAttribute("InvSubType"), "A");
            siRow.setAttribute("DispDocId", s); */
            getDBTransaction().commit();
        } else {
            getDBTransaction().rollback();
            SlsInvVOImpl impl = getSlsInv();

            impl.setCldIdBind(EbizParams.GLBL_APP_CLD_ID());
            impl.setSlocIdBind(EbizParams.GLBL_APP_SERV_LOC());
            impl.setOrgIdBind(EbizParams.GLBL_APP_USR_ORG());
            impl.setHoOrgIdBind(EbizParams.GLBL_HO_ORG_ID());
            impl.setDocIdBind(impl.getCurrentRow().getAttribute("DocId").toString());
            impl.executeQuery();
        }
        this.getInvoiceSearch1().executeQuery();
    }

    /**
     * Method to update Bal Qty of Service Item
     * @param calledAt : S - when called on Save | C - When called on Cancel
     * @return
     */
    public Boolean methodToUpdateBalQtyForSrvcItm(String calledAt) {
        Boolean b = true;
        try {
            Row currentRow = getSlsInv().getCurrentRow();
            Object o = ADFModelUtils.callFunction(this, new StringBuilder("fn_sls_inv_so_status(?,?,?,?,?,?,?)"), new Object[] {
                                                  currentRow.getAttribute("CldId"), currentRow.getAttribute("SlocId"),
                                                  currentRow.getAttribute("HoOrgId"), currentRow.getAttribute("OrgId"),
                                                  currentRow.getAttribute("FyId"), currentRow.getAttribute("DocId"),
                                                  calledAt
            }, Types.VARCHAR);

        } catch (Exception e) {
            b = false;
            ADFModelUtils.showFormattedFacesMessage("There have been an error in calling function 'SLS.fn_sls_inv_so_status' ! ",
                                                    e.getMessage(), FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
        }
        return b;
    }


    /**
     * Method to decide whether to enable or disable adj tab.
     * @return
     */
    public boolean DisableAdjTab() {
        SlsInvPmntSchdlVOImpl impl = this.getSlsInvPmntSchdl();
        if (impl != null) {
            //System.out.println("Row count :"+impl.getEstimatedRowCount());
            if (impl.getEstimatedRowCount() != 0) {
                //System.out.println("In iterator");
                RowSetIterator row = impl.createRowSetIterator(null);
                try {
                    while (row.hasNext()) {
                        Row next = row.next();
                        Timestamp d = (Timestamp) next.getAttribute("PayDt");
                        Timestamp cd = new Timestamp(System.currentTimeMillis());
                        if ((d.dateValue().toString()).equals(cd.dateValue().toString())) {
                            row.closeRowSetIterator();
                            return false;
                        }
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
                row.closeRowSetIterator();
            }
        }
        return true;
    }


    /**
     * Method to validate the total amount adjusted and allowed.
     * @param val
     * @return
     */
    public Integer adjAmtVal(BigDecimal val) {
        Integer c = 0;
        SlsInvPmntSchdlVOImpl impl = this.getSlsInvPmntSchdl();
        BigDecimal amt = new BigDecimal(0);
        BigDecimal amtAdj = val;

        if (impl != null) {
            if (impl.getEstimatedRowCount() != 0) {
                RowSetIterator row = impl.createRowSetIterator(null);
                try {
                    while (row.hasNext()) {
                        Row next = row.next();
                        Timestamp d = (Timestamp) next.getAttribute("PayDt");
                        Timestamp cd = new Timestamp(System.currentTimeMillis());

                        if ((d.dateValue().toString()).equals(cd.dateValue().toString())) {
                            amt = amt.add((BigDecimal) next.getAttribute("PayAmt"));
                        }
                    }
                } catch (Exception e) {
                    row.closeRowSetIterator();
                    e.printStackTrace();
                }
                row.closeRowSetIterator();
                RowSetIterator r = this.getSlsInvAdj1().createRowSetIterator(null);
                while (r.hasNext()) {
                    Row next = r.next();
                    if (this.getSlsInvAdj1().getCurrentRow() != next) {
                        amtAdj = amtAdj.add((BigDecimal) next.getAttribute("InvAmtAdj"));
                    }
                }
            }

            Row currentRow = this.getSlsInvAdj1().getCurrentRow();
            if (currentRow != null) {
                BigDecimal value = val;
                BigDecimal cc = new BigDecimal(1);
                Row currentRow1 = this.getSlsInv().getCurrentRow();
                if (currentRow != null) {
                    cc = (BigDecimal) currentRow1.getAttribute("CurrRate");
                }
                value = value.multiply(cc);
                value = value.divide((BigDecimal) currentRow.getAttribute("CurrConvFctrOld"), RoundingMode.HALF_UP);
                BigDecimal b = (BigDecimal) currentRow.getAttribute("UpdatedOutstandingAmountTrans");
                System.out.println("value : " + value + " B : " + b);
                if (value.compareTo(b) == 1) {
                    c = 1;
                }
            }
            if (amt.compareTo(amtAdj) == -1) {
                c = 2;
            }
        }
        return c;
    }


    /**
     * Method to set tax to zero.
     */
    public void setTaxToZero() {
        //this.getSlsInv().getCurrentRow().setAttribute("TransTaxAmountSp", new BigDecimal(0.00));
    }

    /**
     * Method ot check if tax appied correctly.
     * @return
     */
    public boolean isTaxAppliedCorrectly() {
        Object newtaxableAmt = null;
        Object previousTaxableAmt = null;
        Row row = this.getSlsInv().getCurrentRow();
        if (row != null) {
            String taxRuleFlag = (String) row.getAttribute("TaxRuleFlg");
            System.out.println("Tax rule flag :" + taxRuleFlag);

            if (taxRuleFlag.equals("D") || taxRuleFlag.equals("H")) {
                BigDecimal grossAmtItm = new BigDecimal(0);
                BigDecimal taxAmtItm = new BigDecimal(0);

                SlsInvTrVOImpl tr = getSlsInvTr();
                RowSetIterator trItr = tr.createRowSetIterator(null);
                _log.info("No. Of Tr Entries : " + tr.getEstimatedRowCount());
                while (trItr.hasNext()) {
                    Row trRow = trItr.next();
                    Object taxAmt = trRow.getAttribute("TaxableAmt");
                    BigDecimal taxAmt1 = (taxAmt == null ? new BigDecimal(0) : (BigDecimal) taxAmt);
                    taxAmtItm = taxAmtItm.add(taxAmt1);
                    _log.info("Added taxable amount : " + taxAmt1 + " so final taxable amount : " + taxAmtItm);
                }
                taxAmtItm = taxAmtItm.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
                trItr.closeRowSetIterator();

                SlsInvShipItmVOImpl itmVo = this.getSlsInvShipItmVOForTax();
                itmVo.executeQuery();

                RowSetIterator itmItr = itmVo.createRowSetIterator(null);
                if (taxRuleFlag.equals("D")) {
                    while (itmItr.hasNext()) {
                        Row iRow = itmItr.next();
                        StringBuffer trFlg =
                            (iRow.getAttribute("TaxRuleFlg") == null ? new StringBuffer("N") :
                             new StringBuffer(iRow.getAttribute("TaxRuleFlg").toString()));
                        _log.info("Tax rule flag : " + trFlg);
                        if ("Y".equals(trFlg.toString())) {
                            Object grossAmt = iRow.getAttribute("ItmAmtGsSp");
                            _log.info("Gross Amount : " + grossAmt);
                            BigDecimal itmAmt = (grossAmt == null ? new BigDecimal(0) : (BigDecimal) grossAmt);
                            grossAmtItm = grossAmtItm.add(itmAmt);
                            _log.info("Added taxable amount : " + itmAmt + " so final taxable amount : " + grossAmtItm);
                        }
                    }
                    grossAmtItm = grossAmtItm.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
                    _log.info("Detail : Total Itm AmtGs : " + grossAmtItm + " Total Taxable amt : " + taxAmtItm +
                              " Comparision : " + grossAmtItm.compareTo(taxAmtItm));
                    previousTaxableAmt = grossAmtItm;
                    newtaxableAmt = taxAmtItm;

                } else if (taxRuleFlag.equals("H")) {
                    while (itmItr.hasNext()) {
                        Row iRow = itmItr.next();
                        Object grossAmt = iRow.getAttribute("ItmAmtGsSp");
                        BigDecimal itmAmt = (grossAmt == null ? new BigDecimal(0) : (BigDecimal) grossAmt);
                        grossAmtItm = grossAmtItm.add(itmAmt);
                        grossAmtItm = grossAmtItm.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);

                    }
                    _log.info("Header : Total Itm AmtGs : " + grossAmtItm + " Total Taxable amt : " + taxAmtItm +
                              " Comparision : " + grossAmtItm.compareTo(taxAmtItm));
                    previousTaxableAmt = grossAmtItm;
                    newtaxableAmt = taxAmtItm;
                    itmItr.closeRowSetIterator();
                }
                StringBuilder msg = new StringBuilder("<ul>");
                taxAmtItm = taxAmtItm.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
                grossAmtItm = grossAmtItm.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
                if (grossAmtItm.compareTo(taxAmtItm) != 0) {
                    msg.append("<li>Previous Taxable Amount on which tax have been calculated : ");
                    msg.append(newtaxableAmt);
                    msg.append(" </li>");
                    msg.append("<li>New Taxable Amount that exists currently : ");
                    msg.append(previousTaxableAmt);
                    msg.append(" </li>");
                    msg.append("</ul>");
                    msg.append("There is a difference between the above two amounts. Please Re-apply tax to recalcuate tax on new Taxable Amount ! ");
                    ADFModelUtils.showFormattedFacesMessage("There have been mismatch in Current Taxable Amount and Taxable Amount (Old Taxable Amount) on which was calculated !",
                                                            msg.toString(), FacesMessage.SEVERITY_ERROR);
                    return false;
                } else {
                    return true;
                }
            }
        }

        return true;
    }

    /**
     * To check if Sales Invoice is being created in open financial year or not.
     * @param dt
     * @return
     */
    public boolean isFYOpenForCurrentDate(Timestamp dt) {
        Integer fyId = -1;
        try {
            fyId = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        if (fyId == -1) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * Method to removed unadjusted rows from slsInvAdj.
     */
    public void advanceAdjCheck() {
        RowSetIterator row = this.getSlsInvAdj1().createRowSetIterator(null);
        while (row.hasNext()) {
            Row next = row.next();
            if (next.getAttribute("InvAmtAdj").equals(new BigDecimal(0))) {
                next.remove();
            }
        }
        row.closeRowSetIterator();
    }

    /**
     * Method to check if payment schedule for total amount is made of not.
     * @return
     */
    public boolean isPaymntSchduleValid() {
        System.out.println("Inside");
        Row r = this.getSlsInv().getCurrentRow();
        System.out.println("R val " + r);
        BigDecimal totalAmount = new BigDecimal(0);
        BigDecimal pmntAmount = new BigDecimal(0);
        if (r.getAttribute("TransAmtAfterOcSp") != null && r.getAttribute("TransTotPaymentAmt") != null) {
            totalAmount = (BigDecimal) r.getAttribute("TransAmtAfterOcSp");
            totalAmount = totalAmount.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
            pmntAmount = (BigDecimal) r.getAttribute("TransTotPaymentAmt");
            pmntAmount = pmntAmount.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
        }
        System.out.println("totalAmount :" + totalAmount + " pmntAmount :" + pmntAmount);
        if (totalAmount.compareTo(pmntAmount) != 0) {
            StringBuilder msg = new StringBuilder("<ul>");
            msg.append("<li>Payment schedule made for Amount : ");
            msg.append(pmntAmount);
            msg.append(" </li>");
            msg.append("<li>Total Invoice Amount : ");
            msg.append(totalAmount);
            msg.append(" </li>");
            msg.append("</ul>");
            msg.append("Payment Schedule of Total Invoice Amount should be made. Please make payment schedule for ");
            msg.append(ADFModelUtils.resolvEl("#{bundle['LBL.2674']}"));
            msg.append(" !");
            ADFModelUtils.showFormattedFacesMessage("There have been Amount mismatch in Payment Schedule !",
                                                    msg.toString(), FacesMessage.SEVERITY_ERROR);
            return false;
        } else {
            return true;
        }
    }

    /**
     * Method to be called inorder to cancel SalesInvoice Permanently.
     */
    public void CancelSalesInvoice() {
        Boolean sucess = false;
        SlsInvVORowImpl currentRow = (SlsInvVORowImpl) this.getSlsInv().getCurrentRow();
        BigDecimal val = new BigDecimal(0);
        try {
            val = (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_SLS_TO_FIN_CREDIT_NOTE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                  currentRow.getDocId(), currentRow.getDocDt(),
                                                  currentRow.getTotAmtSp(), EbizParams.GLBL_APP_USR(),
                                                  EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_SERV_LOC(),
                                                  EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_CLD_ID(),
                                                  currentRow.getEoId(), currentRow.getCoaId(), "I"
            });
            sucess = true;
        } catch (Exception e) {
            sucess = false;
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_SLS_TO_FIN_CREDIT_NOTE' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
            e.printStackTrace();
        }
        if (sucess) {
            try {
                Object res = ADFModelUtils.callFunction(this, new StringBuilder("SVC.SVC_UPDT_SC_STAT_WTY(?,?,?,?)"), new Object[] {
                                                        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                        EbizParams.GLBL_APP_USR_ORG(), currentRow.getDocId()
                }, Types.INTEGER);
                sucess = true;
            } catch (Exception e) {
                sucess = false;
                FacesMessage message =
                    new FacesMessage("There have been an error while calling function !! SVC.SVC_UPDT_SC_STAT_WTY");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
        if (sucess) {
            try {
                currentRow.setInvStat(220);
                currentRow.setInvMode(313);
                Integer fyId = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
                SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
                RowSetIterator itr = dtl.createRowSetIterator(null);
                while (itr.hasNext()) {
                    Row next = itr.next();
                    if (next != null) {
                        Object Id = next.getAttribute("ShipId");
                        if (Id != null && (Integer) currentRow.getAttribute("InvType") != 480) {
                            String shipId = Id.toString();
                            try {
                                Integer i =
                                    (Integer) callStoredFunction(Types.INTEGER,
                                                                 "SLS.FN_UPDATE_SHIPMNT_STAT(?,?,?,?,?,?,?)", new Object[] {
                                                                 EbizParams.GLBL_APP_CLD_ID(),
                                                                 EbizParams.GLBL_APP_SERV_LOC(),
                                                                 EbizParams.GLBL_APP_USR_ORG(), shipId, fyId,
                                                                 currentRow.getAttribute("InvType"), "C"
                                });
                                sucess = true;
                            } catch (Exception e) {
                                sucess = false;
                                FacesMessage message =
                                    new FacesMessage("There have been an error while calling function !! SLS.FN_UPDATE_SHIPMNT_STAT");
                                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                                FacesContext.getCurrentInstance().addMessage(null, message);
                                e.printStackTrace();
                            }
                        }
                    }
                    if (!sucess) {
                        break;
                    }
                }
                itr.closeRowSetIterator();
            } catch (Exception e) {
                sucess = false;
                e.printStackTrace();
            }
        }
        if (sucess) {
            sucess = methodToUpdateBalQtyForSrvcItm("C");
        }
        if (sucess) {
            try {
                this.getDBTransaction().commit();
                setRejectedIdVoucher(currentRow.getDocId());
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in making entries on Invoice Cancellation !",
                                     e.getMessage());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        } else {
            this.getDBTransaction().rollback();
            FacesMessage message =
                new FacesMessage("There have been an error in making entries on Invoice Cancellation !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }
    }

    //Method to get the rejected voucher Id and set it to display in the page
    protected void setRejectedIdVoucher(Object docId) {
        String VoucherId = "0";
        try {

            VoucherId = (String) callStoredFunction(Types.VARCHAR, "SLS.FN_GET_VOU_NO(?,?,?,?,?,?,?)", new Object[] {
                                                    docId, EbizParams.GLBL_APP_USR(), EbizParams.GLBL_APP_USR_ORG(),
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                                                    EbizParams.GLBL_APP_CLD_ID(), "IC"
            });

            System.out.println("Voucher Id : " + VoucherId);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'SLS.FN_GET_VOU_NO' ! " +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
            // throw new Exception(e.getMessage());
        }
        if (!VoucherId.toString().equals("0")) {
            Row row = this.getSlsInv().getCurrentRow();
            row.setAttribute("VouRejectDispIdTrans", VoucherId);
            row.setAttribute("VouRejectDtTrans", StaticValue.getTruncatedCurrDt());
            FacesMessage message =
                new FacesMessage("<html><body>Rejected Voucher Id  <b> " + VoucherId +
                                 " </b>have been Generated.</body></html>");
            message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }
    }

    /**
     * @return
     */
    public boolean isUserEligibleToCancelSalesInvoice() {
        try {
            Row currentRow = this.getSlsInv().getCurrentRow();
            Object invModeO = currentRow.getAttribute("InvMode");
            Integer invMode = (invModeO == null ? -1 : (Integer) invModeO);
            Integer docType = (Integer) this.getSlsInv().getCurrentRow().getAttribute("InvType");

            if ((invMode.equals(314)) && (docType.equals(348) || docType.equals(883) || docType.equals(923))) {
                System.out.println("invoice type getUsrLvl" + docType);
                StringBuffer attachedWithTheDoc = getWfIdAttachedWithTheDoc();
                attachedWithTheDoc = (attachedWithTheDoc == null ? new StringBuffer("") : attachedWithTheDoc);
                Integer level = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                             EbizParams.GLBL_APP_CLD_ID(),
                                                             EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(),
                                                             attachedWithTheDoc.toString(), 21504, docType
                });

                Integer wfTopLevel = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_GET_DOC_TOP_LVL(?,?,?,?,?)", new Object[] {
                                                                  EbizParams.GLBL_APP_SERV_LOC(),
                                                                  EbizParams.GLBL_APP_CLD_ID(),
                                                                  EbizParams.GLBL_APP_USR_ORG(), 21504, docType
                });
                System.out.println("Comparisioon : " + level.equals(wfTopLevel) + " | " + (level == wfTopLevel));
                if (level.equals(wfTopLevel) || "W000".equalsIgnoreCase(attachedWithTheDoc.toString())) {
                    return true;
                }
            }
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("Workflow for this user is not defined. Please define the workflow for this user. !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        return false;
    }

    /**
     * Method to call function to insert data in item on the basis of intimation.
     */
    public void insertItmOnBasisOfIntimation() {
        try {
            Row row = this.getSlsInv().getCurrentRow();
            Integer eoId = (Integer) row.getAttribute("EoId");
            String intimationId = (String) row.getAttribute("IntimSlipId");
            String DocId = (String) row.getAttribute("DocId");
            BigDecimal currRate = (BigDecimal) row.getAttribute("CurrRate");
            Timestamp docDt = (Timestamp) row.getAttribute("DocDt");
            fetchAndSetDlftValuesToInvoice(intimationId);
            Integer i = (Integer) callStoredFunction(Types.INTEGER, "FN_INS_INTM_INV(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                     EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), eoId,
                                                     intimationId, EbizParams.GLBL_APP_USR(), DocId, docDt, currRate,
                                                     row.getAttribute("InclSrvcItm")
            });
            //this.getSlsInv().executeQuery();
            //setSelectDocIdOnCommit(new StringBuffer(DocId));
            //this.getSlsInv().executeQuery();
            //setSelectDocIdOnCommit(new StringBuffer(DocId));
            this.getDBTransaction().postChanges();
            this.getSlsInv().executeQuery();
            setSelectDocIdOnCommit(new StringBuffer(DocId));
            iterateSlsInvShpItm();
        } catch (Exception e) {
            FacesMessage message = new FacesMessage("There have been an error in calling function 'FN_INS_INTM_INV' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
    }

    /**
     * Container's getter for SlsInvDtl1.
     * @return SlsInvDtl1
     */
    public SlsInvDtlVOImpl getSlsInvDtl1() {
        return (SlsInvDtlVOImpl) findViewObject("SlsInvDtl1");
    }

    /**
     * Method to check if Other charges COA Already exists.
     * @param CoaId
     * @return
     */

    public boolean doOtherChargeCoaAlreadyExist(Integer CoaId) {
        Row currentRow = this.getSlsInvOc().getCurrentRow();
        RowSetIterator itr = this.getSlsInvOc().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            if (row != currentRow) {
                if (CoaId == (Integer) row.getAttribute("CoaId")) {
                    itr.closeRowSetIterator();
                    return true;
                }
            }
        }
        itr.closeRowSetIterator();
        return false;
    }

    /**
     * Discount validator.
     * @param val
     * @return
     */

    public Integer isDiscountValueValid(BigDecimal val) {
        Row currentRow = this.getSlsInv().getCurrentRow();
        BigDecimal amt = (BigDecimal) currentRow.getAttribute("TransAmtAfterTaxSp");
        Object disc = currentRow.getAttribute("DiscVal");
        Object DiscType = this.getSlsInv().getCurrentRow().getAttribute("DiscType");
        if (DiscType != null) {
            String typ = (String) DiscType;
            if (typ.equalsIgnoreCase("A")) {
                // To add the previously discounted amount
                BigDecimal discVal = new BigDecimal(0);
                if (disc != null) {
                    discVal = (BigDecimal) disc;
                }
                amt = amt.add(discVal);
                if (val.compareTo(amt) > 0) {
                    return 1;
                }
            } else if (typ.equalsIgnoreCase("P")) {
                if (val.compareTo(new BigDecimal(99.99)) > 0) {
                    return 2;
                }
            }
        }
        return 0;
    }

    /**
     * Method to validate the oc amount.
     * @param val
     * @return
     * @param amt
     */
    public boolean isOtherChargesAmountValid(BigDecimal val) {
        Row currentRow = this.getSlsInv().getCurrentRow();
        BigDecimal invAmt = new BigDecimal(0);
        BigDecimal amt = new BigDecimal(0);
        BigDecimal amount = new BigDecimal(0);
        if (currentRow != null) {
            invAmt = (BigDecimal) currentRow.getAttribute("TransAmtAfterTaxSp");
        }
        ViewObjectImpl oc = this.getSlsInvOc();
        Row r = oc.getCurrentRow();

        RowSetIterator itr = oc.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();

            if (next != r) {
                String typ = (String) next.getAttribute("TranType");
                //System.out.println("Type :"+typ);
                if (typ.equalsIgnoreCase("Dr")) {
                    amount = (BigDecimal) next.getAttribute("AmtSp");
                    amt = amt.subtract(amount);
                    //System.out.println("Subtracted amount : "+amt);
                } else {
                    amount = (BigDecimal) next.getAttribute("AmtSp");
                    amt = amt.add(amount);
                }
            }


        }
        itr.closeRowSetIterator();
        Object att = r.getAttribute("TranType");
        if (att != null) {
            if (att.equals("Dr")) {
                amt = amt.subtract(val);

            } else {
                amt = amt.add(val);
            }
        }
        if (amt.signum() == -1) {
            amt = amt.abs();
            if (amt.compareTo(invAmt) > 0) {
                return false;
            }
        }
        return true;
    }

    /**
     * Method to check if fromNoOfShipment.
     * @param val
     * @return
     */
    public boolean isFromNoOfShipmentValid(Number val) {
        Row currentRow = this.getTempSearchPanel1().getCurrentRow();
        if (currentRow != null) {
            Number n = new Number(0);
            Object num = currentRow.getAttribute("ToNumberOfItms");
            if (num != null) {
                n = (Number) num;
                if (val.compareTo(n) > 0) {
                    return false;
                }
            }

        }
        return true;
    }

    /**
     * Method to check if fromNoOfShipment.
     * @param val
     * @return
     */
    public boolean isToNoOfShipmentValid(Number val) {
        Row currentRow = this.getTempSearchPanel1().getCurrentRow();
        if (currentRow != null) {
            Number n = new Number(0);
            Object num = currentRow.getAttribute("FromNumberOfItms");
            if (num != null) {
                n = (Number) num;
                if (val.compareTo(n) < 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to check  FromSIAmount.
     * @param val
     * @return
     */
    public boolean isFromSIAmountValid(Number val) {
        Row currentRow = this.getTempSearchPanel1().getCurrentRow();
        if (currentRow != null) {
            Number n = new Number(0);
            Object num = currentRow.getAttribute("ToSIAmount");
            if (num != null) {
                n = (Number) num;
                if (val.compareTo(n) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to check  FromSIAmount.
     * @param val
     * @return
     */
    public boolean isToSIAmountValid(Number val) {
        Row currentRow = this.getTempSearchPanel1().getCurrentRow();
        if (currentRow != null) {
            Number n = new Number(0);
            Object num = currentRow.getAttribute("FromSIAmount");
            if (num != null) {
                n = (Number) num;
                if (val.compareTo(n) < 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to check if details is zero.
     * @return
     */

    public boolean isSlsInvdtlsCountValid() {
        Boolean b = true;
        RowSetIterator createRowSetIterator = this.getSlsInvDtl().createRowSetIterator(null);
        if (createRowSetIterator.getRowCount() == 0) {
            b = false;
        }
        createRowSetIterator.closeRowSetIterator();
        if(!b){
            ADFModelUtils.showFormattedFacesMessage("Sales Invoice cannot be made without any Shipment or Intimation !",
                                                    "Please add atleast one Shipment or Intimation in the Sales Invoice.", 
                                                    FacesMessage.SEVERITY_ERROR); 
        }
        return b;
    }


    /**
     * Container's getter for LovAr1.
     * @return LovAr1
     */
    public ViewObjectImpl getLovAr1() {
        return (ViewObjectImpl) findViewObject("LovAr1");
    }

    /**
     * Container's getter for LOVInvoiceTypeVO1.
     * @return LOVInvoiceTypeVO1
     */
    public ViewObjectImpl getLOVInvoiceTypeVO1() {
        return (ViewObjectImpl) findViewObject("LOVInvoiceTypeVO1");
    }

    /**
     * To automtically generate payment schedule.
     */
    public void AutoGeneratePaymentSchedule() {
        SlsInvVOImpl impl = this.getSlsInv();
        Row currentRow = impl.getCurrentRow();
        SlsInvPmntSchdlVOImpl invPmntSchdl = this.getSlsInvPmntSchdl();
        BigDecimal amt = new BigDecimal(0);
        Timestamp dt = new Timestamp(System.currentTimeMillis());
        System.out.println(invPmntSchdl.getRowCount() + " total rows");
        if (invPmntSchdl.getRowCount() == 0) {
            if (currentRow != null) {
                amt = (BigDecimal) currentRow.getAttribute("TransAmtAfterOcSp");
                dt = (Timestamp) currentRow.getAttribute("DocDt");
            }
            System.out.println("Amount is : " + amt + "__Dt : " + dt);
            Row createRow = invPmntSchdl.createRow();
            invPmntSchdl.insertRow(createRow);
            createRow.setAttribute("PayDt", dt);
            createRow.setAttribute("AdvFlg", "N");
            createRow.setAttribute("PayAmt", amt);
            createRow.setAttribute("TotAmt", amt);
            createRow.setAttribute("PayMode", 160);
            //161
            invPmntSchdl.executeQuery();
            System.out.println("Row created ====================");
        }

    }

    /**
     * Container's getter for SlsInvShipItmVOForTax.
     * @return SlsInvShipItmVOForTax
     */
    public SlsInvShipItmVOImpl getSlsInvShipItmVOForTax() {
        return (SlsInvShipItmVOImpl) findViewObject("SlsInvShipItmVOForTax");
    }

    /**
     * Container's getter for SlsInvToItmVL1.
     * @return SlsInvToItmVL1
     */
    public ViewLinkImpl getSlsInvToItmVL1() {
        return (ViewLinkImpl) findViewLink("SlsInvToItmVL1");
    }

    /**
     * @return
     */
    public Integer getCurrDigit() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}").toString());
    }

    /**
     * Container's getter for SlsInvTrItm.
     * @return SlsInvTrItm
     */
    public SlsInvTrVOImpl getSlsInvTrItm() {
        return (SlsInvTrVOImpl) findViewObject("SlsInvTrItm");
    }

    /**
     * Container's getter for SlsInvShipItm2SlsInvTrVL1.
     * @return SlsInvShipItm2SlsInvTrVL1
     */
    public ViewLinkImpl getSlsInvShipItm2SlsInvTrVL1() {
        return (ViewLinkImpl) findViewLink("SlsInvShipItm2SlsInvTrVL1");
    }

    /**
     * Container's getter for SlsInvTrLineItm.
     * @return SlsInvTrLineItm
     */
    public SlsInvTrLineVOImpl getSlsInvTrLineItm() {
        return (SlsInvTrLineVOImpl) findViewObject("SlsInvTrLineItm");
    }

    /**
     * Container's getter for SlsInvTr2SlsInvTrLineVL2.
     * @return SlsInvTr2SlsInvTrLineVL2
     */
    public ViewLinkImpl getSlsInvTr2SlsInvTrLineVL2() {
        return (ViewLinkImpl) findViewLink("SlsInvTr2SlsInvTrLineVL2");
    }

    /**
     * Container's getter for SlsInvTrLine1.
     * @return SlsInvTrLine1
     */
    public SlsInvTrLineVOImpl getSlsInvTrLine1() {
        return (SlsInvTrLineVOImpl) findViewObject("SlsInvTrLine1");
    }

    /**
     * Container's getter for SlsInv2InvTrLinesVL1.
     * @return SlsInv2InvTrLinesVL1
     */
    public ViewLinkImpl getSlsInv2InvTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("SlsInv2InvTrLinesVL1");
    }

    public void populateSupplimentryInvoice() {
        if (true) {
            if (true) {

                HashSet shipDocIdSet = new HashSet();
                ViewObjectImpl distinctItmVO = this.getDistinctItmVO1();
                RowSetIterator itr = distinctItmVO.createRowSetIterator(null);
                int i = 1;
                while (itr.hasNext()) {
                    Row next = itr.next();
                    Object shipId = next.getAttribute("ShipmntDocId");
                    boolean add = shipDocIdSet.add(shipId.toString());
                    if (add == true) {
                        if (shipId != null || !("".equals(shipId))) {
                            BigDecimal b =
                                (next.getAttribute("PriceDifferenceTrans") == null ? new BigDecimal(0) :
                                 (BigDecimal) next.getAttribute("PriceDifferenceTrans"));
                            _log.info("Price Difference on Shipment add : " + b);
                            if (next.getAttribute("NewPriceTrans") != null && b.compareTo(new BigDecimal(0)) > 0) {
                                SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
                                Row row = dtl.createRow();
                                dtl.insertRow(row);
                                row.setAttribute("ShipId", shipId.toString());
                                row.setAttribute("ShipDt", next.getAttribute("ShipDt"));
                                row.setAttribute("SrNo", i);
                                i = i + 1;
                            } else {
                                shipDocIdSet.remove(shipId.toString());
                            }
                        }
                    }
                    _log.info("Added : " + add);
                }
                itr.closeRowSetIterator();
                _log.info("Unique ship id's : ");
                Iterator iterator = shipDocIdSet.iterator();
                while (iterator.hasNext()) {
                    _log.info("|" + iterator.next().toString() + "|");
                }
                SlsInvShipItmVOImpl itmdtl = this.getSlsInvShipItmVOForTax();
                itr = distinctItmVO.createRowSetIterator(null);
                while (itr.hasNext()) {
                    Row row = itr.next();
                    ViewObjectImpl forSuppVO = this.getShipItmForSuppVO();
                    forSuppVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                    forSuppVO.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
                    forSuppVO.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                    forSuppVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                    forSuppVO.setNamedWhereClauseParam("DocIdBind", row.getAttribute("InvoiceDocId"));
                    forSuppVO.setNamedWhereClauseParam("ShipIdBind", row.getAttribute("ShipmntDocId"));
                    forSuppVO.setNamedWhereClauseParam("SoIdBind", row.getAttribute("SoId"));
                    forSuppVO.setNamedWhereClauseParam("ItmIdBind", row.getAttribute("ItmId"));
                    forSuppVO.executeQuery();
                    _log.info("No. of Rows for : Invoice_id : " + row.getAttribute("InvoiceDocId") + " " +
                              "Ship_Id : " + row.getAttribute("ShipmntDocId") + " So_Id : " + row.getAttribute("SoId") +
                              " Itm_id : " + row.getAttribute("ItmId") + " is : " + forSuppVO.getEstimatedRowCount());
                    //forSuppVO.setRangeSize(-1);
                    Row[] allRowsInRange = forSuppVO.getAllRowsInRange();
                    if (allRowsInRange.length > 0) {
                        BigDecimal b =
                            (row.getAttribute("PriceDifferenceTrans") == null ? new BigDecimal(0) :
                             (BigDecimal) row.getAttribute("PriceDifferenceTrans"));
                        _log.info("Price Difference on item add : " + b);
                        if (row.getAttribute("NewPriceTrans") != null && b.compareTo(new BigDecimal(0)) > 0) {
                            Row oRow = allRowsInRange[0];
                            Row itmRow = itmdtl.createRow();
                            itmdtl.insertRow(itmRow);
                            itmRow.setAttribute("ShipId", oRow.getAttribute("ShipId"));
                            itmRow.setAttribute("SoId", oRow.getAttribute("SoId"));
                            itmRow.setAttribute("ItmId", oRow.getAttribute("ItmId"));
                            itmRow.setAttribute("TaxRuleFlg", oRow.getAttribute("TaxRuleFlg"));
                            itmRow.setAttribute("TlrncQtyVal", oRow.getAttribute("TlrncQtyVal"));
                            itmRow.setAttribute("TlrncQtyType", oRow.getAttribute("TlrncQtyType"));
                            itmRow.setAttribute("Remarks", oRow.getAttribute("Remarks"));
                            itmRow.setAttribute("ItmAmtSp", new BigDecimal(0));
                            itmRow.setAttribute("ItmAmtBs", new BigDecimal(0));
                            itmRow.setAttribute("ItmDiscVal", new BigDecimal(0));
                            itmRow.setAttribute("ItmDiscTyp", oRow.getAttribute("ItmDiscTyp"));
                            itmRow.setAttribute("ItmShipQty", oRow.getAttribute("ItmShipQty"));
                            itmRow.setAttribute("OldItmShipQty", oRow.getAttribute("ItmShipQty"));
                            itmRow.setAttribute("ItmUom", oRow.getAttribute("ItmUom"));
                            itmRow.setAttribute("OldItmRate", oRow.getAttribute("ItmRate"));
                            itmRow.setAttribute("SuppliItmRate", row.getAttribute("NewPriceTrans"));

                            BigDecimal price =
                                (itmRow.getAttribute("ItmRate") == null ? new BigDecimal(0) :
                                 (BigDecimal) itmRow.getAttribute("ItmRate"));
                            BigDecimal qty =
                                (itmRow.getAttribute("ItmShipQty") == null ? new BigDecimal(0) :
                                 (BigDecimal) itmRow.getAttribute("ItmShipQty"));
                            BigDecimal taxAbleAmt = price.multiply(qty);
                            taxAbleAmt = taxAbleAmt.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
                            itmRow.setAttribute("AsblAmtSp", taxAbleAmt);


                            Object trf = oRow.getAttribute("TaxRuleFlg");
                            _log.info("Tax Rule applied : " + trf);
                            if ("Y".equals(trf)) {
                                Row soRow = this.getSlsInv().getCurrentRow();
                                Object attribute = soRow.getAttribute("CurrRate");
                                BigDecimal currRate = (attribute != null ? (BigDecimal) attribute : new BigDecimal(1));
                                soRow.setAttribute("TaxRuleFlg", "D");

                                try {
                                    Integer taxRuleId =
                                        (Integer) callStoredFunction(Types.INTEGER,
                                                                     "FN_GET_INV_ITM_TR(?,?,?,?,?,?,?,?)", new Object[] {
                                                                     EbizParams.GLBL_APP_CLD_ID(),
                                                                     EbizParams.GLBL_APP_SERV_LOC(),
                                                                     EbizParams.GLBL_HO_ORG_ID(),
                                                                     EbizParams.GLBL_APP_USR_ORG(),
                                                                     row.getAttribute("InvoiceDocId").toString(),
                                                                     row.getAttribute("ItmId").toString(),
                                                                     row.getAttribute("ShipmntDocId").toString(),
                                                                     row.getAttribute("SoId").toString()
                                    });
                                    _log.info("Tax Rule Id : " + taxRuleId);


                                    if (taxRuleId != null && (Integer) taxRuleId != -1) {


                                        BigDecimal val = new BigDecimal(0);
                                        _log.info("Currency Rate : " + currRate);

                                        SlsInvTrVOImpl impl = this.getSlsInvTr();
                                        Row tr = impl.createRow();
                                        impl.insertRow(tr);
                                        tr.setAttribute("SrNo", 1);
                                        tr.setAttribute("SrNoDest", 1);
                                        tr.setAttribute("TaxRuleId", taxRuleId);
                                        tr.setAttribute("TaxableAmt", taxAbleAmt);
                                        tr.setAttribute("ShipId", row.getAttribute("ShipmntDocId").toString());
                                        tr.setAttribute("SoId", row.getAttribute("SoId").toString());
                                        tr.setAttribute("ItmId", row.getAttribute("ItmId").toString());
                                        _log.info("Values for TrLInesFucntion ||  SlocId : " +
                                                  EbizParams.GLBL_APP_SERV_LOC() + " CldId : " +
                                                  EbizParams.GLBL_APP_CLD_ID() + " HoOrgId : " +
                                                  EbizParams.GLBL_HO_ORG_ID() + " OrgId : " +
                                                  EbizParams.GLBL_APP_USR_ORG() + " InvoiceId : " +
                                                  itmRow.getAttribute("DocId").toString() + " ItmId : " +
                                                  row.getAttribute("ItmId").toString() + " TaxRuleId : " +
                                                  (Integer) taxRuleId + " UserId : " + EbizParams.GLBL_APP_USR() +
                                                  " ItmAmtSp : " + (BigDecimal) itmRow.getAttribute("ItmAmtSp") +
                                                  " CurrencyRate : " + currRate + " SoId : " +
                                                  row.getAttribute("SoId").toString() + " Shipment Id :" +
                                                  row.getAttribute("ShipmntDocId").toString());
                                        try {
                                            val =
                                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                                "FN_INS_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                                EbizParams.GLBL_APP_SERV_LOC(),
                                                                                EbizParams.GLBL_APP_CLD_ID(),
                                                                                EbizParams.GLBL_HO_ORG_ID(),
                                                                                EbizParams.GLBL_APP_USR_ORG(),
                                                                                itmRow.getAttribute("DocId").toString(),
                                                                                row.getAttribute("ItmId").toString(),
                                                                                taxRuleId, EbizParams.GLBL_APP_USR(),
                                                                                itmRow.getAttribute("ItmAmtSp"),
                                                                                itmRow.getAttribute("ItmAmtSp"),
                                                                                currRate,
                                                                                row.getAttribute("SoId").toString(),
                                                                                row.getAttribute("ShipmntDocId").toString()
                                            });
                                        } catch (Exception e) {
                                            FacesMessage message =
                                                new FacesMessage("There have been an error in calling function 'FN_INS_INV_TR_LINES' !");
                                            message.setSeverity(FacesMessage.SEVERITY_ERROR);
                                            FacesContext.getCurrentInstance().addMessage(null, message);
                                            e.printStackTrace();
                                        }
                                        _log.info("Tax Amount : " + val);
                                        val = val.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
                                        val = (val == null ? new BigDecimal(0) : val);
                                        tr.setAttribute("TaxAmtSp", val);
                                        if (currRate != null && val != null) {
                                            tr.setAttribute("TaxAmtBs", val.multiply(currRate));
                                        } else {
                                            val = val.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
                                            tr.setAttribute("TaxAmtBs", val);
                                        }
                                    }
                                } catch (Exception e) {
                                    FacesMessage message =
                                        new FacesMessage("There have been an error in calling function 'SLS.FN_INS_INV_CALC' !");
                                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                                    FacesContext.getCurrentInstance().addMessage(null, message);
                                    e.printStackTrace();
                                }
                            }
                        }
                    }
                }

                this.getSlsInvTrLine1().executeQuery();
            }
        }
    }

    /**
     * Container's getter for InvDtlForSuppVO.
     * @return InvDtlForSuppVO
     */
    public ViewObjectImpl getInvDtlForSuppVO() {
        return (ViewObjectImpl) findViewObject("InvDtlForSuppVO");
    }

    /**
     * Container's getter for ItmTrForSuppVO.
     * @return ItmTrForSuppVO
     */
    public ViewObjectImpl getItmTrForSuppVO() {
        return (ViewObjectImpl) findViewObject("ItmTrForSuppVO");
    }

    /**
     * Container's getter for ItmTrLinesForSuppVO.
     * @return ItmTrLinesForSuppVO
     */
    public ViewObjectImpl getItmTrLinesForSuppVO() {
        return (ViewObjectImpl) findViewObject("ItmTrLinesForSuppVO");
    }

    /**
     * Container's getter for ShipItmForSuppVO.
     * @return ShipItmForSuppVO
     */
    public ViewObjectImpl getShipItmForSuppVO() {
        return (ViewObjectImpl) findViewObject("ShipItmForSuppVO");
    }

    /**
     * Container's getter for ItmTrLinesNewForSupp.
     * @return ItmTrLinesNewForSupp
     */
    public ViewObjectImpl getItmTrLinesNewForSupp() {
        return (ViewObjectImpl) findViewObject("ItmTrLinesNewForSupp");
    }

    /**
     * Check Mandatory field entered in Other charges or not.
     * @return
     */
    public Integer chkInvOcEnteredOrNot() {
        Integer retVal = 0;
        ViewObjectImpl impl = this.getSlsInvOc();
        long count = impl.getEstimatedRowCount();
        if (count > 0) {
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                if (currentRow.getAttribute("CoaId") == null || currentRow.getAttribute("DocId") == null) {
                    retVal = 1;
                }
            }
        }

        return retVal;
    }

    /**
     * Container's getter for InvCurrConvType1.
     * @return InvCurrConvType1
     */
    public ViewObjectImpl getInvCurrConvType1() {
        return (ViewObjectImpl) findViewObject("InvCurrConvType1");
    }

    /**
     * To get Currency Conversion Type From InvCurrConvType and assign it to shipment accordingly.
     * @return
     */
    public Integer getCurConvType() {
        Integer retVal = 0;
        ViewObjectImpl convType1 = this.getInvCurrConvType1();
        convType1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        convType1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        convType1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        convType1.executeQuery();


        Row[] allRowsInRange = convType1.getAllRowsInRange();
        if (allRowsInRange != null) {
            for (Row r : allRowsInRange) {
                Object currType = allRowsInRange[0].getAttribute("InvCurrConvType");
                if (currType != null) {
                    retVal = (Integer) currType;
                    System.out.println("Return Value is " + retVal);
                    if (retVal == 538) {
                        this.getSlsInv().getCurrentRow().setAttribute("CurrConvTrans", "S");
                    } else if (retVal == 539) {
                        this.getSlsInv().getCurrentRow().setAttribute("CurrConvTrans", "I");
                    }
                }
            }
        }

        return retVal;
    }

    /**
     * Function checks whether any process calculation is present or not. If present then after delete it will do post changes again
     */
    public void chkProcessCalculation() {
        this.getDBTransaction().postChanges();
    }


    /**
     * This Method is to set Default Tax rule id for Invoice wise if no rule has been applied or set the applied tax rule
     *Method Modified by Mousham
     */
    public void setTaxRuleInTransient() {


        //SlsInvVOImpl impl = this.getSlsInv();
        Row r = getSlsInv().getCurrentRow();
        Integer custId = r.getAttribute("EoId") == null ? null : (Integer) r.getAttribute("EoId");
        String billAdd = r.getAttribute("BillAdd") == null ? null : r.getAttribute("BillAdd").toString();
        BigDecimal currFact = r.getAttribute("CurrRate") == null ? null : (BigDecimal) r.getAttribute("CurrRate");
        Long taxRule = null;

        SlsInvTrVOImpl invTr = this.getSlsInvTr();
        invTr.executeQuery();
        // Get and set default tax rule id for Invoice
        if (invTr.getRowCount() < 1) {
            taxRule = getTaxRuleIdForHeader(custId, billAdd, currFact);
            r.setAttribute("TaxRuleTrans", taxRule);
        }
        //set applied tax rule in the trans for lov at front end.
        else if (invTr.getRowCount() > 0) {
            RowSetIterator createRowSetIterator = invTr.createRowSetIterator(null);
            if (createRowSetIterator.hasNext()) {
                Row next = createRowSetIterator.next();
                Object attribute = next.getAttribute("TaxRuleId");
                if (attribute != null) {
                    //Row currentRow = impl.getCurrentRow();
                    r.setAttribute("TaxRuleTrans", (Long) attribute);
                    r.setAttribute("TaxExmptFlgTrans", next.getAttribute("ExmptFlg"));

                }
                _log.info("Setting whole tax rule id : " + attribute);
            }
            createRowSetIterator.closeRowSetIterator();
        }
    }

    public void setRemainingPayment() {
        BigDecimal totAmt = new BigDecimal(0);
        BigDecimal amtSchdlMade = new BigDecimal(0);
        BigDecimal pyMnt = new BigDecimal(0);
        SlsInvVOImpl impl = this.getSlsInv();
        Row currentRow = impl.getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("TransAmtAfterOcSp") != null) {
                totAmt = (BigDecimal) currentRow.getAttribute("TransAmtAfterOcSp");
            }

            SlsInvPmntSchdlVOImpl invPmntSchdl = this.getSlsInvPmntSchdl();
            RowSetIterator createRowSetIterator = invPmntSchdl.createRowSetIterator(null);
            System.out.println("RowCOunt >: " + createRowSetIterator.getRowCount());
            while (createRowSetIterator.hasNext()) {
                Row next = createRowSetIterator.next();
                if (next.getAttribute("PayAmt") != null) {
                    pyMnt = pyMnt.add((BigDecimal) next.getAttribute("PayAmt"));
                }
            }
            createRowSetIterator.closeRowSetIterator();
            amtSchdlMade = amtSchdlMade.add((pyMnt));
            BigDecimal remainingAmnt = new BigDecimal(0);

            if (totAmt.compareTo(amtSchdlMade) >= 0) {
                remainingAmnt = totAmt.subtract(amtSchdlMade);
            }
            System.out.println("TotAmt : " + totAmt + " PaidAmt : " + amtSchdlMade + " AmtSet : " + remainingAmnt);
            currentRow.setAttribute("TransPayAmt", remainingAmnt);
        }
    }

    /**
     * @return
     */
    public boolean isCoaIdNull() {
        Boolean b = false;
        Row currentRow = this.getSlsInv().getCurrentRow();
        Object coaId = currentRow.getAttribute("CoaId");
        if (coaId != null) {
            b = false;
        } else {
            b = true;
        }
        return b;
    }

    /**
     * Container's getter for TempSuppliVO1.
     * @return TempSuppliVO1
     */
    public ViewObjectImpl getTempSuppliVO1() {
        return (ViewObjectImpl) findViewObject("TempSuppliVO1");
    }

    /**
     * Container's getter for searchForSupplimentryInvoiceVO1.
     * @return searchForSupplimentryInvoiceVO1
     */
    public ViewObjectImpl getsearchForSupplimentryInvoiceVO1() {
        return (ViewObjectImpl) findViewObject("searchForSupplimentryInvoiceVO1");
    }

    /**
     * Filter supplimentry invoice search VO.
     */
    public void searchVoForSuppInvoice() {

        Row currentRow = this.getTempSuppliVO1().getCurrentRow();
        Row soRow = this.getSlsInv().getCurrentRow();
        if (currentRow != null) {
            if (soRow.getAttribute("EoId") == null) {
                FacesMessage message = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2089"));
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            } else if (soRow.getAttribute("CurrIdSp") == null) {
                FacesMessage message = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2091"));
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            } else if (currentRow.getAttribute("FromDateTrans") == null) {
                //FacesMessage message = new FacesMessage("Please select From Date!");
                FacesMessage message = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2169"));
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            } else if (currentRow.getAttribute("ToDateTrans") == null) {
                //FacesMessage message = new FacesMessage("Please select To Date!");
                FacesMessage message = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.2170"));
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            } else {
                try {
                    Timestamp to = (Timestamp) currentRow.getAttribute("ToDateTrans");
                    Timestamp from = (Timestamp) currentRow.getAttribute("FromDateTrans");
                    getsearchForSupplimentryInvoiceVO1().setNamedWhereClauseParam("SlocIdBind",
                                                                                  EbizParams.GLBL_APP_SERV_LOC());
                    getsearchForSupplimentryInvoiceVO1().setNamedWhereClauseParam("OrgIdBind",
                                                                                  EbizParams.GLBL_APP_USR_ORG());
                    getsearchForSupplimentryInvoiceVO1().setNamedWhereClauseParam("HoOrgIdBind",
                                                                                  EbizParams.GLBL_HO_ORG_ID());
                    getsearchForSupplimentryInvoiceVO1().setNamedWhereClauseParam("CldIdBind",
                                                                                  EbizParams.GLBL_APP_CLD_ID());
                    getsearchForSupplimentryInvoiceVO1().setNamedWhereClauseParam("CurrIdBind",
                                                                                  soRow.getAttribute("CurrIdSp"));
                    getsearchForSupplimentryInvoiceVO1().setNamedWhereClauseParam("ToDtBind", to.dateValue());
                    getsearchForSupplimentryInvoiceVO1().setNamedWhereClauseParam("FromDtBind", from.dateValue());
                    getsearchForSupplimentryInvoiceVO1().setNamedWhereClauseParam("EoIdBind",
                                                                                  soRow.getAttribute("EoId"));
                    String v =
                        (currentRow.getAttribute("ItemIdTrans") == null ? null :
                         (currentRow.getAttribute("ItemIdTrans").toString().equals("") ? null :
                          currentRow.getAttribute("ItemIdTrans").toString()));
                    getsearchForSupplimentryInvoiceVO1().setNamedWhereClauseParam("ItmIdBind", v);
                    getsearchForSupplimentryInvoiceVO1().executeQuery();

                    _log.info("Record Count : " + getsearchForSupplimentryInvoiceVO1().getEstimatedRowCount());
                } catch (SQLException e) {
                }
            }

        }

    }

    public void selectAllInvoices() {
        ViewObjectImpl forSupplimentryInvVO = this.getsearchForSupplimentryInvoiceVO1();
        RowSetIterator itr = forSupplimentryInvVO.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            next.setAttribute("selectedTrans", true);
        }
        itr.closeRowSetIterator();
    }

    public void deselectAllInvoices() {
        ViewObjectImpl forSupplimentryInvVO = this.getsearchForSupplimentryInvoiceVO1();
        RowSetIterator itr = forSupplimentryInvVO.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            next.setAttribute("selectedTrans", false);
        }
        itr.closeRowSetIterator();
    }


    /**
     * @return
     */
    public boolean saveAndPoplulateDistinctItm() {
        ViewObjectImpl forSupplimentryInvoiceVO = this.getsearchForSupplimentryInvoiceVO1();
        Boolean isAnySelected = false;
        RowSetIterator countItr = forSupplimentryInvoiceVO.createRowSetIterator(null);
        while (countItr.hasNext()) {
            Row row = countItr.next();
            Object obj = row.getAttribute("selectedTrans");
            StringBuffer selected = new StringBuffer(obj == null ? "" : obj.toString());
            if (selected.toString().equalsIgnoreCase("true")) {
                isAnySelected = true;
                break;
            }
        }
        countItr.closeRowSetIterator();
        RowSetIterator createRowSetIterator = forSupplimentryInvoiceVO.createRowSetIterator(null);

        StringBuffer inClause = new StringBuffer("");
        if (isAnySelected) {
            inClause = new StringBuffer(" AND C.DOC_ID IN(");
        }
        int i = 1;
        while (createRowSetIterator.hasNext()) {
            Row row = createRowSetIterator.next();
            Object obj = row.getAttribute("selectedTrans");
            StringBuffer selected = new StringBuffer(obj == null ? "" : obj.toString());
            if (selected.toString().equalsIgnoreCase("true")) {
                if (i == 1) {
                    inClause.append("'" + row.getAttribute("DocId").toString() + "'");
                    i = 0;
                } else {
                    inClause.append(",'" + row.getAttribute("DocId").toString() + "'");
                }
            }
        }
        if (isAnySelected) {
            inClause.append(")");
        } else {
            inClause = new StringBuffer(" AND C.DOC_ID IN('-1')");
        }

        ViewObjectImpl itmVO = this.getDistinctItmVO1();
        String Originalquery = itmVO.getQuery();
        _log.info("Original Query : " + Originalquery);

        int i_2 = Originalquery.indexOf(") QRSLT");
        _log.info("Index is : " + i_2); //Originalquery.substring(0, i_2);
        //Originalquery.substring(i_2);

        String query = Originalquery + " " + inClause.toString();
        itmVO.setQuery(query);


        Row searchRow = this.getTempSuppliVO1().getCurrentRow();
        Object itmObj = searchRow.getAttribute("ItemIdTrans");
        _log.info("Modified Query : " + query);
        itmVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        itmVO.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        itmVO.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        itmVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        itmVO.setNamedWhereClauseParam("ItmIdBind",
                                       (itmObj == null ? null :
                                        (itmObj.toString().equals("") ? null : itmObj.toString())));
        System.out.println("itmvo query-------->" + itmVO.getQuery());
        itmVO.executeQuery();
        itmVO.setQuery(Originalquery);

        System.out.println("In clause is : " + inClause);
        return false;
    }

    /**
     * Container's getter for DistinctItmVO1.
     * @return DistinctItmVO1
     */
    public ViewObjectImpl getDistinctItmVO1() {
        return (ViewObjectImpl) findViewObject("DistinctItmVO1");
    }

    /**
     * @param oper
     * @param typ
     * @param value
     * @return
     */
    public boolean applyNewPriceForSuppInv(StringBuffer oper, StringBuffer typ, BigDecimal value) {
        _log.info("Operation : " + oper);
        _log.info("Type : " + typ);
        _log.info("Value : " + value);
        Row curRow = getSlsInv().getCurrentRow();
        String oprTyp = curRow.getAttribute("SuppliOperType").toString();
        System.out.println(oprTyp + " ------------- Operation Type");
        if (typ.toString().equals("A")) {
            ViewObjectImpl itmVo = this.getDistinctItmVO1();
            RowSetIterator rowItr = itmVo.createRowSetIterator(null);
            while (rowItr.hasNext()) {
                Row row = rowItr.next();
                BigDecimal oldPrice =
                    (row.getAttribute("ItmRate") == null ? new BigDecimal(0) :
                     (BigDecimal) row.getAttribute("ItmRate"));

                if ("A".equalsIgnoreCase(oprTyp)) {
                    row.setAttribute("NewPriceTrans", oldPrice.add(value));
                } else if ("S".equalsIgnoreCase(oprTyp)) {
                    BigDecimal p = oldPrice.subtract(value);
                    row.setAttribute("NewPriceTrans", (p.compareTo(new BigDecimal(0)) < 0) ? new BigDecimal(0) : p);
                } else {
                    row.setAttribute("NewPriceTrans", value);
                }
            }
            rowItr.closeRowSetIterator();
        } else if (typ.toString().equals("P")) {
            ViewObjectImpl itmVo = this.getDistinctItmVO1();
            RowSetIterator rowItr = itmVo.createRowSetIterator(null);
            while (rowItr.hasNext()) {
                Row row = rowItr.next();
                BigDecimal oldPrice =
                    (row.getAttribute("ItmRate") == null ? new BigDecimal(0) :
                     (BigDecimal) row.getAttribute("ItmRate"));
                if ("A".equalsIgnoreCase(oprTyp)) {
                    BigDecimal add = oldPrice.add(oldPrice.multiply(new BigDecimal(0.01)).multiply(value));
                    row.setAttribute("NewPriceTrans", add);
                } else if ("S".equalsIgnoreCase(oprTyp)) {
                    BigDecimal add = oldPrice.subtract(oldPrice.multiply(new BigDecimal(0.01)).multiply(value));
                    row.setAttribute("NewPriceTrans", add.compareTo(new BigDecimal(0)) > 0 ? add : new BigDecimal(0));
                } else {
                    row.setAttribute("NewPriceTrans", oldPrice.multiply(new BigDecimal(0.01)).multiply(value));
                }
            }
            rowItr.closeRowSetIterator();
        }
        return false;
    }

    public void resetSuppliTabs() {
        ViewObjectImpl s = this.getsearchForSupplimentryInvoiceVO1();
        s.setNamedWhereClauseParam("CldIdBind", -1);
        s.executeQuery();

        ViewObjectImpl dItm = this.getDistinctItmVO1();
        dItm.setNamedWhereClauseParam("CldIdBind", -1);
        dItm.executeQuery();

        this.getTempSuppliVO1().executeQuery();
    }


    /**
     * @return
     */
    public Boolean isWorkFlowAndUserValid() {
        Boolean b = true;
        StringBuffer attachedWithTheDoc = getWfIdAttachedWithTheDoc();
        if (attachedWithTheDoc == null) {
            /* FacesMessage message =
                new FacesMessage("WorkFlow is not Defined for this Document! Please define a WorkFlow !"); */
            FacesMessage message = new FacesMessage(ADFModelUtils.resolvRsrc("MSG.1734"));
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            b = false;
        } else {
        }
        return b;
    }

    /**
     * Method to update shipment on save to avoid a single shipment no on more than one invoices.
     **/
    public void updateShipmentOnSave() {
        callBackUpdtFun();
        Row currentRow = this.getSlsInv().getCurrentRow();
        SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
        RowSetIterator itr = dtl.createRowSetIterator(null);
        Integer fyId =
            EbizParamsAPPUtils.getFyId(this, EbizParams.GLBL_APP_USR_ORG(),
                                       (Timestamp) currentRow.getAttribute("DocDt"));


        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != null) {
                Object Id = next.getAttribute("ShipId");
                if (Id != null && (Integer) currentRow.getAttribute("InvType") != 480) {

                    String shipId = Id.toString();
                    System.out.println("Consignment invoice ...... ShipId : " + shipId);
                    //SLS.FN_UPDATE_SHIPMNT_STAT (P_CLDID  VARCHAR2, P_SLOCID NUMBER,P_ORGID VARCHAR2,P_SHIPID VARCHAR2,P_FYID VARCHAR2)
                    try {
                        Integer i =
                            (Integer) callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_SHIPMNT_STAT(?,?,?,?,?,?,?)", new Object[] {
                                                         EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                         EbizParams.GLBL_APP_USR_ORG(), shipId, fyId,
                                                         currentRow.getAttribute("InvType"), "A"
                        });

                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error while calling function !! SLS.FN_UPDATE_SHIPMNT_STAT");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                } else {
                    System.out.println("ShipId is null in row " + next.getKey());
                }
            } else {
                System.out.println("There is a blank row in item details");
            }
        }
        itr.closeRowSetIterator();
    }

    public void filterTNC() {
        ViewObjectImpl cView = this.getTnCView();
        cView.setNamedWhereClauseParam("Cld_Id_Bind", EbizParams.GLBL_APP_CLD_ID());
        cView.setNamedWhereClauseParam("Org_Id_Bind", EbizParams.GLBL_APP_USR_ORG());
        cView.setNamedWhereClauseParam("Sloc_Id_Bind", EbizParams.GLBL_APP_SERV_LOC());
        cView.executeQuery();
    }

    /**
     * @return
     */
    public Boolean areAllShipmntAmtValid() {
        Boolean b = true;
        SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
        RowSetIterator ctr = dtl.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();
            Object shpAmtSpO = next.getAttribute("ShipAmtSp");
            _log.info("Checking Shipment No : " + next.getAttribute("ShipId"));
            BigDecimal c = (shpAmtSpO == null ? new BigDecimal(0) : (BigDecimal) shpAmtSpO);
            if (c.compareTo(new BigDecimal(0)) <= 0) {
                b = false;
                break;
            }
        }
        ctr.closeRowSetIterator();
        if (b == false) {
            /* FacesMessage message =
                new FacesMessage("There have been some problem with the Selected Shipments. Please try again.Contact ESS !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message); */



            /* StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "There have been some problem with the Selected Shipments !" + "</p></b>");
            saveMsg.append("<ul>");
            saveMsg.append("<li>Shipment Amount in one or more Shipment is zero.</li>");
            saveMsg.append("<li>Some problem have occured at the time of adding Shipment.</li>");
            saveMsg.append("</ul>");
            saveMsg.append("<b>Please try again.");
            saveMsg.append("<br />If the problem persists Contact ESS !<b/>");
            saveMsg.append("</body></html>"); */

            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.2172") +
                                  "</p></b>");
            saveMsg.append("<ul>");
            saveMsg.append("<li>" + ADFModelUtils.resolvRsrc("MSG.2174") + "</li>");
            saveMsg.append("<li>" + ADFModelUtils.resolvRsrc("MSG.2175") + "</li>");
            saveMsg.append("</ul>");
            saveMsg.append("<b>" + ADFModelUtils.resolvRsrc("MSG.2176"));
            saveMsg.append("<br />" + ADFModelUtils.resolvRsrc("MSG.2177") + "<b/>");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
        }
        _log.info("Add Shipments are valid : " + b);
        return b;
    }

    /**
     * @return
     */
    public Boolean isFinancialYearValid() {
        Boolean b = true;
        Integer fYidOrg = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
        if (fYidOrg.equals(-1)) {
            /* StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" +
                                  "Financial Year is not Open for this Organisation on Current Date!" + "</p></b>");
            saveMsg.append("<b>Please Open Financial Year for Current Date before creating any document !");
            saveMsg.append("</body></html>"); */
            StringBuilder saveMsg =
                new StringBuilder("<html><body><b><p style='color:red'>" + ADFModelUtils.resolvRsrc("MSG.2178") +
                                  "</p></b>");
            saveMsg.append("<b>" + ADFModelUtils.resolvRsrc("MSG.2179") + "</b>");
            saveMsg.append("</body></html>");
            FacesMessage msg = new FacesMessage(saveMsg.toString());
            msg.setSeverity(FacesMessage.SEVERITY_WARN);
            FacesContext.getCurrentInstance().addMessage(null, msg);
            b = false;
        }
        return b;
    }

    /**
     * @param CldId
     * @param OrgId
     * @return
     */
    public Integer getFYId(String CldId, String OrgId) {
        return EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
    }

    /**
     * @return
     */
    public Boolean isShipmentItemCountValid() {
        Boolean b = false;
        return b;
    }

    /**
     * @return
     */
    public Boolean isLcValid() {
        setTotalInvAmt();
        Boolean b = true;
        Row currentRow = this.getSlsInv().getCurrentRow();
        Object lcIdO = currentRow.getAttribute("LcId");
        StringBuilder lcId = (lcIdO == null ? new StringBuilder("") : new StringBuilder(lcIdO.toString()));
        if (!"".equals(lcId.toString())) {
            Object totAmtBsO = currentRow.getAttribute("TotAmtBs");
            System.out.println("TotAmtBs : " + totAmtBsO);
            Number lcAmt = StaticValue.NUMBER_ZERO;
            Number totAmtBs = StaticValue.NUMBER_ZERO;
            try {
                totAmtBs = (totAmtBsO == null ? StaticValue.NUMBER_ZERO : new Number(totAmtBsO));
            } catch (SQLException e) {
            }

            RowSet cVO1 = ((SlsInvVORowImpl) currentRow).getLovLCVO1();
            cVO1.setNamedWhereClauseParam("DocIdBind", lcId.toString());
            cVO1.executeQuery();
            Row[] allRowsInRange = cVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                Object j = allRowsInRange[0].getAttribute("LcAmtBs");
                if (j != null) {
                    lcAmt = (Number) j;
                }
            }
            lcAmt = ADFBeanUtils.roundOff(lcAmt);
            totAmtBs = ADFBeanUtils.roundOff(totAmtBs);

            System.out.println("LcAmt : " + lcAmt + " InvBaseAmt : " + totAmtBs);
            if (lcAmt.compareTo(totAmtBs) < 0) {
                b = false;
                /* StringBuilder msg = new StringBuilder("<ul>");
                msg.append("<li>Letter of Credit Amount (In Base) : ");
                msg.append(lcAmt);
                msg.append("</li>");
                msg.append("<li>Sales Invoice Total Amount (In Base) : ");
                msg.append(totAmtBs);
                msg.append("</li></ul>");
                msg.append("Please select a valid Letter of Credit for the Current Sales Invoice whose amount is Less than Total Invoice Amount!");
                ADFModelUtils.showFormattedFacesMessage("Sales Invoice Amount is Greater than the Amount of selected Letter of Credit.",
                                                        msg.toString(), FacesMessage.SEVERITY_ERROR); */
                StringBuilder msg = new StringBuilder("<ul>");
                msg.append("<li>" + ADFModelUtils.resolvRsrc("MSG.2180"));
                msg.append(lcAmt);
                msg.append("</li>");
                msg.append("<li>" + ADFModelUtils.resolvRsrc("MSG.2181"));
                msg.append(totAmtBs);
                msg.append("</li></ul>");
                msg.append(ADFModelUtils.resolvRsrc("MSG.2182"));
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2183"), msg.toString(),
                                                        FacesMessage.SEVERITY_ERROR);
            }
            cVO1.setNamedWhereClauseParam("DocIdBind", null);
            cVO1.executeQuery();
        }
        System.out.println("Return : " + b);
        return b;
    }

    /**
     * @param colName
     * @return
     */
    public StringBuffer checkforProfileValues(StringBuffer colName) {
        colName = (colName == null ? new StringBuffer("") : colName);
        StringBuffer ck = new StringBuffer("");
        try {
            String policyPrice = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                             EbizParams.GLBL_APP_CLD_ID(),
                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                             EbizParams.GLBL_APP_USR_ORG(), colName.toString()
            });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    /**
     * Method to identity duplicate shipment.
     * @param shipDocId
     * @return
     */
    public Boolean isShipmentValid(StringBuilder shipDocId) {
        Boolean b = true;
        SlsInvDtlVOImpl dtl = this.getSlsInvDtl();
        RowSetIterator ctr = dtl.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();
            StringBuilder s = new StringBuilder(next.getAttribute("ShipId").toString());
            if (shipDocId.toString().equals(s.toString())) {
                b = false;
                break;
            }
        }
        ctr.closeRowSetIterator();
        return b;
    }

    /**
     * Method to check curr conver source selected or not
     */
    public Boolean chkCurConvSource() {
        Boolean res = false;
        Row r = getSlsInv().getCurrentRow();
        if (r.getAttribute("CurrConvTrans") == null) {
            res = true;
        } else {
            res = false;
        }
        System.out.println(r.getAttribute("CurrConvTrans") + " ===== Source for currency converstion ");
        return res;
    }


    /**
     * Method to add shipment to an Invoice
     * 1 : Invoice Type is not required.
     * 2 : Customer not Selected.
     * 3 : Currenty is not selected.
     * 4 : Shipment Doc Id is not selected.
     * 5 : Duplicate Shipment Id
     * 6 : Curr Conv type not selected
     * 7 : Error in calling function FN_INS_SHIPITM_INV
     * -1 : Error
     * @return
     */

    public Integer addShipmentToInv() {
        Integer i = 0;
        SlsInvVOImpl impl = this.getSlsInv();
        Row hRow = impl.getCurrentRow();
        Object eoIdO = hRow.getAttribute("EoId");


        Object shipmentDocIdTransO = hRow.getAttribute("ShipmentDocIdTrans");
        Integer eoId = (eoIdO == null ? -1 : (Integer) eoIdO);
        StringBuilder shipmentDocIdTrans =
            (shipmentDocIdTransO == null ? new StringBuilder("") : new StringBuilder(shipmentDocIdTransO.toString()));
        if (validateShipmentBeforeAdd() == 0) {
            if (hRow.getAttribute("CurrConvTrans") == null) {
                i = 6;
            } else {
                fetchAndSetDlftValuesToInvoice(shipmentDocIdTrans.toString());
                ViewObjectImpl dtlFrmShipIdVO1 = this.getShipDtlFrmShipIdVO1();
                int i_2 = dtlFrmShipIdVO1.getRangeSize();
                dtlFrmShipIdVO1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                dtlFrmShipIdVO1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                dtlFrmShipIdVO1.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
                dtlFrmShipIdVO1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                dtlFrmShipIdVO1.setNamedWhereClauseParam("DocIdBind", shipmentDocIdTrans.toString());
                dtlFrmShipIdVO1.executeQuery();
                dtlFrmShipIdVO1.setRangeSize(-1);
                Row[] shipRows = dtlFrmShipIdVO1.getAllRowsInRange();
                dtlFrmShipIdVO1.setRangeSize(i_2);
                if (shipRows.length > 0) {
                    Row shipRow = shipRows[0];
                    Object shipValO = shipRow.getAttribute("ShipVal");
                    Object shipCurrO = shipRow.getAttribute("CurrConvFctr");

                    BigDecimal shipVal = (shipValO == null ? new BigDecimal(0) : (BigDecimal) shipValO);
                    shipVal = shipVal.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);
                    BigDecimal shipCurr = (shipCurrO == null ? new BigDecimal(1) : (BigDecimal) shipCurrO);
                    shipCurr = shipCurr.setScale(EbizParams.GLBL_AMT_DIGIT(), RoundingMode.HALF_UP);

                    SlsInvDtlVOImpl invDtl = this.getSlsInvDtl();
                    Row dtlRow = invDtl.createRow();
                    dtlRow.setAttribute("SrNo", getMaxShipSrNo());
                    dtlRow.setAttribute("DocDt", hRow.getAttribute("DocDt"));
                    dtlRow.setAttribute("ShipId", shipmentDocIdTrans.toString());
                    dtlRow.setAttribute("ShipDt", shipRow.getAttribute("DocDt"));
                    dtlRow.setAttribute("ShipAmtSp", shipRow.getAttribute("ShipVal"));

                    Object invCCO = hRow.getAttribute("CurrRate");
                    BigDecimal invCc = (invCCO == null ? new BigDecimal(1) : (BigDecimal) invCCO);

                    Object cc = hRow.getAttribute("CurrConvTrans");
                    StringBuilder c = (cc == null ? new StringBuilder("I") : new StringBuilder(cc.toString()));
                    if ("I".equals(c.toString())) {
                        dtlRow.setAttribute("ShipAmtBs",
                                            (shipVal.multiply(invCc)).setScale(EbizParams.GLBL_AMT_DIGIT(),
                                                                               RoundingMode.HALF_UP));
                    } else {
                        if (invDtl.getRowCount() > 0) {
                            dtlRow.setAttribute("ShipAmtBs",
                                                (shipVal.multiply(invCc)).setScale(EbizParams.GLBL_AMT_DIGIT(),
                                                                                   RoundingMode.HALF_UP));
                        } else {
                            hRow.setAttribute("CurrRate", shipCurr);
                            dtlRow.setAttribute("ShipAmtBs",
                                                (shipVal.multiply(shipCurr)).setScale(EbizParams.GLBL_AMT_DIGIT(),
                                                                                      RoundingMode.HALF_UP));
                        }
                    }
                    invCCO = hRow.getAttribute("CurrRate");
                    invCc = (invCc == null ? new BigDecimal(1) : invCc);
                    Object retval = null;
                    try {
                        retval =
                            ADFModelUtils.callFunction(this,
                                                       new StringBuilder("FN_INS_SHIPITM_INV(?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                       EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), eoId,
                                                       shipmentDocIdTransO, EbizParams.GLBL_APP_USR(),
                                                       hRow.getAttribute("DocId"), hRow.getAttribute("DocDt"), invCc,
                                                       hRow.getAttribute("InclSrvcItm")
                        }, Types.VARCHAR);
                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'FN_INS_SHIPITM_INV' !" +
                                             e.getMessage());
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                        i = 7;
                    }

                    Integer j = (retval == null ? -1 : Integer.parseInt(retval.toString()));

                    if (j == 1) {
                        invDtl.insertRow(dtlRow);
                        getSlsInvShipItm().executeQuery();
                        getSlsInvTr().executeQuery();
                        getSlsInvTrLine1().executeQuery();
                    } else {
                        dtlRow.remove();
                        /* ADFModelUtils.showFormattedFacesMessage("There have been some problem while adding Shipment !",
                                                                "There have been some problem while adding shipment to Invoice. Please try again ! If the problem persists please contact ESS ! ",
                                                                FacesMessage.SEVERITY_ERROR); */
                        ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2184"),
                                                                ADFModelUtils.resolvRsrc("MSG.2185"),
                                                                FacesMessage.SEVERITY_ERROR);
                        i = 7;
                    }
                }

            }
        }
        return i;
    }

    /**
     * Method to fetch and set Sales Invoice Header Details from Sales Order.
     * @param shipDocTxnId
     * @param mode | S- Shipment | I - Invoice
     */
    public void fetchAndSetDlftValuesToInvoice(Object docTxnId) {
        if (getSlsInvDtl().getAllRowsInRange().length == 0) {
            ViewObjectImpl dtlsVO1 = getFetchSoDtlsVO1();
            dtlsVO1.setNamedWhereClauseParam("ShipTxnIdBind", docTxnId);
            dtlsVO1.setNamedWhereClauseParam("IntmTxnIdBind", docTxnId);
            dtlsVO1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            dtlsVO1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            dtlsVO1.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            dtlsVO1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            dtlsVO1.executeQuery();
            Row[] allRowsInRange = dtlsVO1.getAllRowsInRange();
            if (allRowsInRange.length == 1) {
                Row row = allRowsInRange[0];
                Row currentRow = getSlsInv().getCurrentRow();
                currentRow.setAttribute("ExtDocDt", row.getAttribute("ExtDocDt"));
                currentRow.setAttribute("ExtDocNo", row.getAttribute("ExtDocNo"));
                //currentRow.setAttribute("DiscType", row.getAttribute("DiscType"));
                Object taxRuleFlgO = row.getAttribute("TaxRuleFlg");
                String taxRuleFlg = (taxRuleFlgO == null ? "N" : taxRuleFlgO.toString());
                //currentRow.setAttribute("TaxRuleFlg", (taxRuleFlg == "H" ? "O" : "N"));
                currentRow.setAttribute("TaxAfterDiscFlg", row.getAttribute("TaxAfterDiscFlg"));
                currentRow.setAttribute("DiscType", row.getAttribute("DiscType"));
                currentRow.setAttribute("DiscVal", row.getAttribute("DiscVal"));
                
                currentRow.setAttribute("TaxFormTypId", row.getAttribute("TaxFormTypId"));
                currentRow.setAttribute("ShipToNm", row.getAttribute("ShipToNm"));
                currentRow.setAttribute("ShipToAdds", row.getAttribute("ShipToAdds"));

            } else {
                /* ADFModelUtils.showFormattedFacesMessage("Sales Order Details not fetched on Invoice.",
                                                        "The Selected Shipment Contains Pick with more than One Sales Order. So we cannot fetch Sales Order Details like External Document Number,Exteral Document Date,Tax Type and Discount to the Current Invoice !",
                                                        FacesMessage.SEVERITY_INFO); */
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2186"),
                                                        ADFModelUtils.resolvRsrc("MSG.2187"),
                                                        FacesMessage.SEVERITY_INFO);
            }
        }
    }

    /**
     * Method to validate Shipment
     * 1 : Invoice Type is not required.
     * 2 : Customer not Selected.
     * 3 : Currenty is not selected.
     * 4 : Shipment Doc Id is not selected.
     * 5 : Duplicate Shipment Id
     * 9 : CoaId is not defined
     * 0 : if Shipment is Valid true
     *
     * @return
     */

    public Integer validateShipmentBeforeAdd() {
        Integer i = validateHeaderBeforeAdd();
        SlsInvVOImpl impl = this.getSlsInv();
        Row hRow = impl.getCurrentRow();
        Object shipmentDocIdTransO = hRow.getAttribute("ShipmentDocIdTrans");
        StringBuilder shipmentDocIdTrans =
            (shipmentDocIdTransO == null ? new StringBuilder("") : new StringBuilder(shipmentDocIdTransO.toString()));
        if ("".equals(shipmentDocIdTrans.toString())) {
            i = 4;
        } else if (!isShipmentValid(shipmentDocIdTrans)) {
            i = 5;
        } /* else if(hRow.getAttribute("CurrConvTrans") == null){
            i = 6;
        } */
        else {
            i = 0;
        }
        return i;
    }

    /**
     * Method to validate Header
     * 1 : Invoice Type is not required.
     * 2 : Customer not Selected.
     * 3 : Currenty is not selected.
     * 8 : Billing address is not defined
     * 9 : CoaId is not defined
     * 0 : if Shipment is Valid true
     * @return
     */

    public Integer validateHeaderBeforeAdd() {
        Integer i = 0;
        SlsInvVOImpl impl = this.getSlsInv();
        Row hRow = impl.getCurrentRow();
        Object invTypeO = hRow.getAttribute("InvType");
        Object eoIdO = hRow.getAttribute("EoId");
        Object currIdSpO = hRow.getAttribute("CurrIdSp");
        Object coaIdO = hRow.getAttribute("CoaId");
        Integer coaId = (coaIdO == null ? -1 : (Integer) coaIdO);
        StringBuilder billingAdd =
            (hRow.getAttribute("BillAdd") == null ? new StringBuilder("") :
             new StringBuilder(hRow.getAttribute("BillAdd").toString()));
        Integer eoId = (eoIdO == null ? -1 : (Integer) eoIdO);
        Integer invType = (invTypeO == null ? -1 : (Integer) invTypeO);
        Integer currIdSp = (currIdSpO == null ? -1 : (Integer) currIdSpO);
        if (invType.equals(-1)) {
            i = 1;
        } else if (eoId.equals(-1)) {
            i = 2;
        } else if (currIdSp.equals(-1)) {
            i = 3;
        } else if ("".equalsIgnoreCase(billingAdd.toString())) {
            i = 8;
        } else if (coaId.equals(-1)) {
            i = 9;
        } else {
            i = 0;
        }
        return i;
    }

    /*-----------------------Iterator for slsinvshipItem-------------------------*/
    public void iterateSlsInvShpItm() {
        /* RowSetIterator cr = this.getSlsInvShipItm().createRowSetIterator(null);
        while (cr.hasNext()) {
            Row nt = cr.next();
            System.out.println("CcId ----  " + nt.getAttribute("CcId") + "DocId ---- " + nt.getAttribute("DocId"));
            try {
                updateCostCenterAmt(nt.getAttribute("DocId").toString(),
                                    new Number((BigDecimal) nt.getAttribute("ItmAmtSp")),
                                    nt.getAttribute("CcId").toString());
            } catch (SQLException e) {
            }
        }
        cr.closeRowSetIterator(); */
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt(String DocId, Number Amt, String ccId) {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            if (DocId != null && Amt != null && ccId != null) {
                Amt = (Number) Amt.round(2);
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    declareGlblValuesForCC();
                    //                    System.out.println(EbizParams.GLBL_APP_CLD_ID() + " , " + EbizParams.GLBL_APP_SERV_LOC() + " , " +
                    //                                       EbizParams.GLBL_HO_ORG_ID() + " , " + EbizParams.GLBL_APP_USR_ORG() + " , " +
                    //                                       DocId + " , " + EbizParams.GLBL_APP_USR() + " , " + ccId + " , " + Amt + " , " +
                    //                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}") + " , " +
                    //                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}") + " , " +
                    //                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}") + " , " +
                    //                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}") + " , " +
                    //                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), DocId, "L",
                                            21504, EbizParams.GLBL_APP_USR(), ccId, Amt,
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
        }
    }

    /**
     * Method which will call cost center bean
     */
    public void deleteCostCenterItem(String DocId, String ccId) {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            if (DocId != null && ccId != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    System.out.println("------------------ Not null");

                    /*  System.out.println(EbizParams.GLBL_APP_CLD_ID() + " , " + EbizParams.GLBL_APP_SERV_LOC() + " , " +
                                       EbizParams.GLBL_HO_ORG_ID() + " , " + EbizParams.GLBL_APP_USR_ORG() + " , " +
                                       DocId + " , " + EbizParams.GLBL_APP_USR() + " , " + ccId + "  , " +
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}") + " , " +
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}") + " , " +
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}") + " , " +
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}") + " , " +
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}")); */


                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), DocId, "L", 21504,
                                       EbizParams.GLBL_APP_USR(), ccId, new Number(0),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

                }
            }
            System.out.println("After calling Update method");
        }

    }


    /**
     * Container's getter for ShipDtlFrmShipIdVO1.
     * @return ShipDtlFrmShipIdVO1
     */
    public ViewObjectImpl getShipDtlFrmShipIdVO1() {
        return (ViewObjectImpl) findViewObject("ShipDtlFrmShipIdVO1");
    }

    public void refreshTax() {
        getSlsInvTr().executeQuery();
        getSlsInvTrLine().executeQuery();
        System.out.println("Tr RowCount on Execute. " + getSlsInvTr().getEstimatedRowCount());
    }

    /**
     * @return
     */
    public Integer passWtyEntries() {
        Integer i = 1;
        Row r = getSlsInv().getCurrentRow();
        Integer invType = (Integer) r.getAttribute("InvType");
        System.out.println(invType + "<<-- This is invoice type ");
        if (invType == 348 || invType == 795 || invType == 883 || invType == 923) {
            System.out.println("warranty entries ");
            if ("Y".equals(checkforProfileValues(new StringBuffer("USE_WTY")).toString())) {
                Row currentRow = this.getSlsInv().getCurrentRow();
                Object docIdO = currentRow.getAttribute("DocId");
                Object o = null;
                try {
                    o = ADFModelUtils.callFunction(this, new StringBuilder("SVC.SVC_INS_SC_WTY(?,?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21504,
                                                   docIdO, EbizParams.GLBL_APP_USR()
                    }, Types.NUMERIC);
                } catch (Exception e) {
                    ADFModelUtils.showFacesMessage("There have been some problem while generating Warranty !",
                                                   e.getMessage(), FacesMessage.SEVERITY_ERROR, null);
                    e.printStackTrace();
                    i = -1;
                }
                if (o != null) {
                    BigDecimal j = (BigDecimal) o;
                    if (j.compareTo(new BigDecimal(1)) != 0) {
                        i = -1;
                    }
                }

                if (i == -1) {
                    ADFModelUtils.showFacesMessage("There have been some problem while generating Warranty !",
                                                   "The function for Generating Warranty returned " + o,
                                                   FacesMessage.SEVERITY_ERROR, null);
                }
            }
        }
        return i;
    }

    /**
     * @return
     */
    public Boolean checkItemValueChanged() {
        BigDecimal price = null;
        Boolean flag = false;
        ViewObjectImpl distinctItmVO1 = this.getDistinctItmVO1();
        RowSetIterator ctr = distinctItmVO1.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();

            if ((next.getAttribute("PriceDifferenceTrans") == null)) {
                price = new BigDecimal(0.00);
                flag = true;
                System.out.println("Price when Null" + price);


            } else {
                price = (BigDecimal) (next.getAttribute("PriceDifferenceTrans"));
                System.out.println("Price when not null" + price);
                flag = false;

            }

        }

        return flag;
    }

    /**
     * Method to fetch Billing addsId on the basis of EoId.
     * @param eoId
     * @return
     */
    public String getDefaultBillingAddsOfCurrEo(Integer eoId) {
        Object shipAddsO =
            ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_DFLT_BILL_ADDS_OF_EO_ID(?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                       EbizParams.GLBL_HO_ORG_ID(), eoId
        }, Types.VARCHAR);
        _log.info("Setting Billing to : " + shipAddsO);
        return (shipAddsO == null ? null : shipAddsO.toString());
    }

    /**
     * Method to add Sales Order to Service Invoice.
     * @return
     * -1 : There have been some error
     * 0 : Insertion Sucessfull.
     * 10 : Sales Order Id is null.
     * 11 : Duplicate Sales Order have been selected.
     *
     */
    public Integer addSoToInvFrSrvcInv() {
        Integer i = 0;
        if (i.equals(0)) {
            Boolean attributeUnique = false;
            Row invRow = this.getSlsInv().getCurrentRow();
            Object soDocIdO = invRow.getAttribute("SoDocIdTrans");
            soDocIdO = (soDocIdO == null ? "" : soDocIdO);
            if (!"".equals(soDocIdO)) {
                try {
                    attributeUnique =
                        ADFModelUtils.isValueForAttributeUnique(this.getSlsInvDtl(), soDocIdO,
                                                                new StringBuilder("ShipId"), false);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if ("".equals(soDocIdO.toString())) {
                i = 10;
            } else if (!attributeUnique) {
                i = 11;
            } else {
                SlsInvDtlVOImpl invDtl = this.getSlsInvDtl();
                Row dtlRow = invDtl.createRow();
                dtlRow.setAttribute("SrNo", getMaxShipSrNo());
                dtlRow.setAttribute("DocDt", invRow.getAttribute("DocDt"));
                dtlRow.setAttribute("ShipId", soDocIdO);
                dtlRow.setAttribute("ShipDt", invRow.getAttribute("SoDtTrans"));
                dtlRow.setAttribute("ShipAmtSp", BigDecimal.ZERO);
                dtlRow.setAttribute("ShipAmtBs", BigDecimal.ZERO);

                Object invCCO = invRow.getAttribute("CurrRate");
                BigDecimal invCc = (invCCO == null ? BigDecimal.ONE : (BigDecimal) invCCO);
                Object retval = null;
                try {
                    retval =
                        ADFModelUtils.callFunction(this, new StringBuilder("FN_INS_SO_TO_INV(?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                   EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                                   invRow.getAttribute("EoId"), soDocIdO, EbizParams.GLBL_APP_USR(),
                                                   invRow.getAttribute("DocId"), invRow.getAttribute("DocDt"), invCc
                    }, Types.VARCHAR);
                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'FN_INS_SO_TO_INV' !" +
                                         e.getMessage());
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                    i = 7;
                }

                Integer j = (retval == null ? -1 : Integer.parseInt(retval.toString()));

                if (j == 1) {
                    invDtl.insertRow(dtlRow);
                    executeVoForItemwiseTax();
                    //getSlsInvShipItm().executeQuery();
                    getSlsInvTr().executeQuery();
                    getSlsInvTrLine1().executeQuery();
                    getSlsInvShipItmVOForTax().executeQuery();
                    dtlRow.getAttribute("ShipAmtSp");
                    dtlRow.getAttribute("ShipAmtBs");
                    invRow.setAttribute("SoDocIdTrans", null);
                    invRow.setAttribute("SoIdTrans", null);
                    getSlsInv().getCurrentRow().getAttribute("TransTotAmtSp");

                    i = 0;
                } else {
                    dtlRow.remove();
                    ADFModelUtils.showFormattedFacesMessage("There have been some problem while adding Sales Order !",
                                                            "There have been some problem while adding Sales Order to Invoice. Please try again ! If the problem persists please contact ESS ! ",
                                                            FacesMessage.SEVERITY_ERROR);
                    i = -1;
                }

            }
        }
        return i;
    }


    /**
     * Container's getter for LovSoNmFrmIdVO1.
     * @return LovSoNmFrmIdVO1
     */
    public ViewObjectImpl getLovSoNmFrmIdVO1() {
        return (ViewObjectImpl) findViewObject("LovSoNmFrmIdVO1");
    }

    /**
     * @return
     */
    public StringBuilder getExportLink() {
        StringBuilder link = new StringBuilder("");
        Row currentRow = this.getSlsInv().getCurrentRow();
        if (currentRow != null) {
            Object docIdO = currentRow.getAttribute("DocId");
            Object slocIdO = currentRow.getAttribute("SlocId");
            Object cldIdO = currentRow.getAttribute("CldId");
            Object orgIdO = currentRow.getAttribute("OrgId");
            Object hoOrgIdO = currentRow.getAttribute("HoOrgId");
            if (docIdO != null) {
                link.append("/exportservletforinvoice?path=");
                link.append(" DOC_ID ='" + docIdO + "' AND ORG_ID ='" + orgIdO + "' AND SLOC_ID = " + slocIdO +
                            " AND CLD_ID = '" + cldIdO + "' AND  HO_ORG_ID = '" + hoOrgIdO + "'" + " GROUP BY\n" +
                            "    DOC_ID,ITM_ID,ITM_UOM");
            } else {
                link = null;
            }
        }
        System.out.println("In am Impl : " + link);
        return link;
    }

    /**Customer Name Validation for Required.
     * @return
     */
    public Boolean retValForCustNm() {
        Integer EoId = Integer.parseInt(this.getSlsInv().getCurrentRow().getAttribute("EoId").toString());
        if (EoId == null) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Method to check if payment against current invoice is recieved or not
     * check if RMA is already made or not.
     * @return
     */
    public Boolean isPymntRecvedAgnstInv() {
        Boolean b = false;
        Row currentRow = getSlsInv().getCurrentRow();
        if (currentRow != null) {
            StringBuilder f = new StringBuilder("");
            try {
                Object o = ADFModelUtils.callFunction(this, new StringBuilder("IS_PYMNT_RCVD_AGNST_INV(?,?,?,?,?)"), new Object[] {
                                                      EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                      EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                                      currentRow.getAttribute("DocId")
                }, Types.VARCHAR);
                if (o != null) {
                    f = new StringBuilder(o.toString());
                }
            } catch (Exception e) {
                b = true; //commented for resetting b value to true so that pop up should not get displayed on functional error
                f = new StringBuilder("Y");
                e.printStackTrace();
            }
            if ("Y".equals(f.toString())) {
                b = true;
                /* ADFModelUtils.showFormattedFacesMessage("Payment have been Recieved against this Sales Invoice.",
                                                        "Payment have been Recieved against this Sales Invoice from the Customer. So you cannnot cancel this Sales Invoice.",
                                                        FacesMessage.SEVERITY_INFO); */
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2190"),
                                                        ADFModelUtils.resolvRsrc("MSG.2191"),
                                                        FacesMessage.SEVERITY_INFO);
            } else {
                b = false;

            }

            if (!b) {
                try {
                    Object o = ADFModelUtils.callFunction(this, new StringBuilder("FN_CHK_INV_RMA_CNT(?,?,?,?,?)"), new Object[] {
                                                          EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                          EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                          currentRow.getAttribute("DocId")
                    }, Types.VARCHAR);
                    if (o != null) {
                        f = new StringBuilder(o.toString());
                    }
                } catch (Exception e) {
                    b = true; //commented for resetting b value to true so that pop up should not get displayed on functional error
                    f = new StringBuilder("N");
                    e.printStackTrace();
                }
                if ("Y".equals(f.toString())) {
                    b = true;
                    /* ADFModelUtils.showFormattedFacesMessage("RMA have been created against this Sales Invoice.",
                                                            "RMA have been created against this Sales Invoice. So you cannnot cancel this Sales Invoice.",
                                                            FacesMessage.SEVERITY_INFO); */
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2192"),
                                                            ADFModelUtils.resolvRsrc("MSG.2193"),
                                                            FacesMessage.SEVERITY_INFO);
                } else {
                    b = false;

                }
            }
            if (!b) {
                // To Check if service work order is made for this Invoice or not
                try {
                    Object o = ADFModelUtils.callFunction(this, new StringBuilder("SVC.SVC_CHK_WO_WTY(?,?,?,?)"), new Object[] {
                                                          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                          EbizParams.GLBL_APP_SERV_LOC(),
                                                          currentRow.getAttribute("DocId")
                    }, Types.VARCHAR);
                    if (o != null) {
                        f = new StringBuilder(o.toString());
                    }
                } catch (Exception e) {
                    b = true; //commented for resetting b value to true so that pop up should not get displayed on functional error
                    f = new StringBuilder("N");
                    e.printStackTrace();
                }
                if ("Y".equals(f.toString())) {
                    b = true;
                    /* ADFModelUtils.showFormattedFacesMessage("Service Work Order have been created against this Sales Invoice.",
                                                            "Service Work Order have been created against this Sales Invoice. So you cannnot cancel this Sales Invoice.",
                                                            FacesMessage.SEVERITY_INFO); */
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2194"),
                                                            ADFModelUtils.resolvRsrc("MSG.2195"),
                                                            FacesMessage.SEVERITY_INFO);
                } else {
                    b = false;

                }
            }
        }
        return b;
    }

    /**
     * Method to post changes after applying text
     */
    public void callPostChange() {
        getDBTransaction().postChanges();
    }

    /**
     * Method to reset shipment LOV on customer change
     */
    public void resetLOVonCustomerVCE() {


        getSlsInv().getCurrentRow().setAttribute("ShipmentIdTrans", null);
        getSlsInv().getCurrentRow().setAttribute("SuppDocIdTrans", null);
        // getSlsInv().executeQuery();
        System.out.println("Inside to reset value");
    }


    /*------------------------------------------------*/
    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }

    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDocVO1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 21504);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            SlsInvVOImpl impl = this.getSlsInv();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                declareGlblValuesForCC();
                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "H", 21503,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                           new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

            }
        }
    }

    /**Method to resolve expression- returns String value*/
    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 21504);

        Row currentRow = this.getSlsInvCalc().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getSlsInvShipItm().getAttributeDefs();
                        for (int j = 0; j < attributeDef.length; j++) {
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        if (columnName != null) {
                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Container's getter for AppCcDocVO1.
     * @return AppCcDocVO1
     */
    public ViewObjectImpl getAppCcDocVO1() {
        return (ViewObjectImpl) findViewObject("AppCcDocVO1");
    }

    /**
     * Container's getter for AppCcVwVO1.
     * @return AppCcVwVO1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDateFromTempCcToSlsInvCc() {
        if (chkCcApplicableOrNot()) {
            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21504, "SLS",
                               "SLS$INV$COST$CENTER", this.getSlsInv().getCurrentRow().getAttribute("DocId")
            });
        }
    }

    /*--------------------Function for Enable/Disable Cost Center Button-------------------------*/
    public Integer chkCostCenterEnable_Disable() {
        return (Integer) callStoredFunction(Types.INTEGER, "App.fn_is_cost_center_present(?,?,?,?,?)", new Object[] {
                                            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21504
    });
    }

    //Method to get Customer Id for the current Shipment
    protected Object getCustomerId() {
        return getSlsInv().getCurrentRow().getAttribute("EoId");
    }


    /**
     * Container's getter for LovVouDtls1.
     * @return LovVouDtls1
     */
    public ViewObjectImpl getLovVouDtls1() {
        return (ViewObjectImpl) findViewObject("LovVouDtls1");
    }

    /**
     * Container's getter for FetchSoDtlsVO1.
     * @return FetchSoDtlsVO1
     */
    public ViewObjectImpl getFetchSoDtlsVO1() {
        return (ViewObjectImpl) findViewObject("FetchSoDtlsVO1");
    }

    /**
     *  Method to send mail
     */
    public void sendMail() {
        SendMailHelper.sendMail(this);
    }

    /**
     * Container's getter for TempOtherChargesVO1.
     * @return TempOtherChargesVO1
     */
    public ViewObjectImpl getTempOtherChargesVO1() {
        return (ViewObjectImpl) findViewObject("TempOtherChargesVO1");
    }

    /**
     * Method to add Other charges.
     * @return
     * 0 : Other charges added
     * 1 : Coa Id is null
     * 2 : Other charges Desc is null
     * 3 : Amount type is null
     * 4 : Amount is null
     * 5 : Amount is greater than So Amount
     * 6 : Duplicate Other Charges
     */
    public Integer addOtherCharges() {
        Integer i = 0;

        Row currentRow = getAutoOcVO1().getCurrentRow();
        Object coaIdO = currentRow.getAttribute("CoaId");
        Object ocChrgsDescO = currentRow.getAttribute("OcCat");
        Object otherChargesAmtO = currentRow.getAttribute("OcAmtTrans");
        Object ocIdO = currentRow.getAttribute("OcId");
        Object amtTypTransO = "Cr";

        System.out.println("other charges current ID === " + ocIdO);

        Integer coaId = (coaIdO == null ? -1 : (Integer) coaIdO);
        Integer ocChrgsDesc = (ocChrgsDescO == null ? -1 : (Integer) ocChrgsDescO);
        Number otherChargesAmt = (otherChargesAmtO == null ? StaticValue.NUMBER_ZERO : (Number) otherChargesAmtO);
        StringBuilder amtTypTrans =
            (amtTypTransO == null ? new StringBuilder("") : new StringBuilder(amtTypTransO.toString()));

        if (coaId.equals(-1)) {
            i = 1;
        } else if (ocChrgsDesc.equals(-1)) {
            i = 2;
        } else if (amtTypTrans.toString().equals("")) {
            i = 3;
        } else if (otherChargesAmt.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
            i = 4;
        } else if (isOtherChargeDup(ocIdO.toString())) {
            i = 6;
        } else {
            Row row = this.getSlsInv().getCurrentRow();
            BigDecimal invAmt = (BigDecimal) row.getAttribute("TransAmtAfterTaxSp");
            Number invAmount = StaticValue.NUMBER_ZERO;
            try {
                invAmount = new Number(invAmt);
            } catch (SQLException e) {
            }
            Number ocAmt = StaticValue.NUMBER_ZERO;

            RowSetIterator ocItr = getSlsInvOc().createRowSetIterator(null);
            while (ocItr.hasNext()) {
                Row next = ocItr.next();
                Number o =
                    (next.getAttribute("AmtSp") == null ? StaticValue.NUMBER_ZERO :
                     (Number) next.getAttribute("AmtSp"));
                StringBuilder Trantyp =
                    (next.getAttribute("TranType") == null ? new StringBuilder("") :
                     new StringBuilder(next.getAttribute("TranType").toString()));
                if ("Dr".equals(Trantyp.toString())) {
                    ocAmt = ocAmt.add(o);
                } else if ("Cr".equals(Trantyp.toString())) {
                    ocAmt = ocAmt.subtract(o);
                }
            }
            ocItr.closeRowSetIterator();
            if ("Dr".equals(amtTypTrans.toString())) {
                otherChargesAmt = ocAmt.add(otherChargesAmt);
            } else {
                otherChargesAmt = ocAmt.subtract(otherChargesAmt);
            }

            if (otherChargesAmt.compareTo(invAmount) > 0) {
                i = 5;
            } else {

                Row sRow = this.getSlsInv().getCurrentRow();
                BigDecimal convFctr =
                    (sRow.getAttribute("CurrRate") == null ? BigDecimal.ONE :
                     (BigDecimal) sRow.getAttribute("CurrRate"));

                Number confact = StaticValue.NUMBER_ZERO;
                try {
                    confact = new Number(convFctr);
                } catch (SQLException e) {
                }

                Row r = this.getSlsInvOc().createRow();
                this.getSlsInvOc().insertRow(r);
                r.setAttribute("CoaId", coaId);
                r.setAttribute("OcDesc", ocChrgsDesc);
                r.setAttribute("CurrId", sRow.getAttribute("CurrIdSp"));
                r.setAttribute("CurrRate", confact);
                r.setAttribute("AmtSp", otherChargesAmtO);
                r.setAttribute("OcId", currentRow.getAttribute("OcId"));
                r.setAttribute("TranType", amtTypTrans.toString());
                getSlsInvOc().executeQuery();
                //Method to recalculate Total Amount
                Object at = row.getAttribute("TransAmtAfterOcSp");
                System.out.println("Total Cost : " + at);

            }

        }
        return i;
    }

    /**
     * Method to check if ocId is duplicate or not
     * @param ocId1
     * @return
     */
    public Boolean isOtherChargeDup(String ocId1) {
        System.out.println("Checking duplicate for -->> " + ocId1);
        Boolean b = false;
        RowSetIterator ctr = getSlsInvOc().createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row r = ctr.next();
            String ocId = (ocId1 == null ? "" : ocId1.toString());
            if (ocId.equalsIgnoreCase(r.getAttribute("OcId").toString())) {
                b = true;
                break;
            }
        }
        ctr.closeRowSetIterator();
        return b;
    }


    /**
     *  Method to delete Other Charges
     */
    public void deleteOtherCharges() {
        getSlsInvOc().getCurrentRow().remove();
        getSlsInvOc().executeQuery();
        getSlsInv().getCurrentRow().getAttribute("TransAmtAfterOcSp");
    }

    /**
     * Container's getter for LOVItmGrp1.
     * @return LOVItmGrp1
     */
    public ViewObjectImpl getLOVItmGrp() {
        return (ViewObjectImpl) findViewObject("LOVItmGrp");
    }

    /**
     * Method to get TaxFrom Type from Sales Invoice Header
     * @return
     */
    public Integer getTaxFormType() {
        Object o = null;
        Row currentRow = getSlsInv().getCurrentRow();
        if (currentRow != null) {
            o = currentRow.getAttribute("TaxFormTypId");
        }
        return (o == null ? null : (Integer) o);
    }

    /**
     * Container's getter for AutoOcVO1.
     * @return AutoOcVO1
     */
    public ViewObjectImpl getAutoOcVO1() {
        return (ViewObjectImpl) findViewObject("AutoOcVO1");
    }

    /**
     *  Method to filter AutoOtherCharges Vo
     */
    public void filterAutoOtherChargesVo() {
        Row currentRow = getSlsInv().getCurrentRow();
        getAutoOcVO1().setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldId"));
        getAutoOcVO1().setNamedWhereClauseParam("DocTypeIdBind", currentRow.getAttribute("InvType"));
        getAutoOcVO1().setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgId"));
        getAutoOcVO1().setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocId"));
        getAutoOcVO1().setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldId"));
        getAutoOcVO1().executeQuery();
    }

    /**
     * method to texable amount
     */
    public void resetTaxableAmount() {
        Row trRow = getSlsInvTr().getCurrentRow();
        if (trRow != null) {
            trRow.setAttribute("TaxableAmt", 0);
        }

    }

    /**
     * Method to filter shipment datat for intimation.
     */
    public void filterShipForIntm() {
        Row r = getSlsInv().getCurrentRow();
        getLOVShipSearchForIntm().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        getLOVShipSearchForIntm().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        getLOVShipSearchForIntm().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        getLOVShipSearchForIntm().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        getLOVShipSearchForIntm().setNamedWhereClauseParam("BindEoId", r.getAttribute("EoId"));
        getLOVShipSearchForIntm().setNamedWhereClauseParam("BindShipmntId", r.getAttribute("ShipForIntmaTrans"));
        getLOVShipSearchForIntm().executeQuery();
    }

    /**
     * method to set the selected intimation on the lov for intimation insertion
     */
    public void putIntimation(String intmDocId, String intmDispId) {
        getSlsInv().getCurrentRow().setAttribute("IntimSlipId", intmDocId);
        getSlsInv().getCurrentRow().setAttribute("IntimationNoTrans", intmDispId);
    }

    /**
     * Container's getter for LOVShipSearchForIntm1.
     * @return LOVShipSearchForIntm1
     */
    public ViewObjectImpl getLOVShipSearchForIntm() {
        return (ViewObjectImpl) findViewObject("LOVShipSearchForIntm");
    }


    /**
     * Method to check flex field is applicable or not
     */
    public Boolean isAdvanIntmSearchApplicable() {
        Boolean ck = false;
        try {
            Object policyPrice = ADFModelUtils.callFunction(this, new StringBuilder("SLS.fn_sls_chk_org_prf(?,?,?,?)"), new Object[] {
                                                            EbizParams.GLBL_APP_CLD_ID(),
                                                            EbizParams.GLBL_APP_SERV_LOC(),
                                                            EbizParams.GLBL_APP_USR_ORG(), "SHOW_ADVC_INTM_SRCH"
            }, Types.VARCHAR);

            if (policyPrice == null || "N".equalsIgnoreCase(policyPrice.toString())) {
                ck = false;
            } else if ("Y".equalsIgnoreCase(policyPrice.toString())) {
                ck = true;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return ck;
    }

    /**
     * Method to backupdate Sales Order balance qty
     * @return
     */
    public Integer callBackUpdtFun() {
        Integer i = 0;
        Row currentRow = getSlsInv().getCurrentRow();
        try {
            ADFModelUtils.callFunction(this, new StringBuilder("fn_sls_inv_to_so_back_upd_stat(?,?,?,?,?)"), new Object[] {
                                       currentRow.getAttribute("CldId"), currentRow.getAttribute("SlocId"),
                                       currentRow.getAttribute("HoOrgId"), currentRow.getAttribute("OrgId"),
                                       currentRow.getAttribute("DocId")
            }, Types.NUMERIC);
        } catch (Exception e) {
            e.printStackTrace();
        }
        return i;
    }

    //Method to check cost center data entered or not.

    /**
     *fn_chk_cc_mand_fr_sls(p_slocId    NUMBER,
                                          p_cldId     varchar2,
                                          p_ho_orgIid varchar2,
                                          p_orgId     varchar2,
                                          p_docId     VARCHAR2,
                                          p_txnid     varchar2,
                                          p_doc_id number)
     * @return
     */
    public Boolean chkprofitCenterValidData() {
        Boolean res = true;
        if (chkCcApplicableOrNot()) {
            Row currentRow = getSlsInv().getCurrentRow();
            Object calFun = null;
            try {
                calFun = ADFModelUtils.callFunction(this, new StringBuilder("fn_chk_cc_mand_fr_sls(?,?,?,?,?,?)"), new Object[] {
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                    EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                    currentRow.getAttribute("DocId"), 21504
                }, Types.VARCHAR);
                System.out.println("Function result == " + calFun);
                /* if (calFun != null) {
                    if ("Y".equalsIgnoreCase(calFun.toString())) {
                        res = true;
                    }
                } */
            } catch (Exception e) {
                e.printStackTrace();
            }
            String s = (calFun == null ? "N" : calFun.toString());
            if(s.equals("N")){
                res = false;
                ADFModelUtils.showFormattedFacesMessage("Mandatory Levels in Profit Center are not Defined. ",
                                                        "Please insert data for Mandatory Levels in Profit Center!",
                                                        FacesMessage.SEVERITY_ERROR);
            }else if(s.equals("A")){
                res = false;
                ADFModelUtils.showFormattedFacesMessage("Profit Center entry for Total Invoice Amount have not been made. ",
                                                        "Please insert data for Total Invoice Amount in Profit Center!",
                                                        FacesMessage.SEVERITY_ERROR);
            }
            
        }
        System.out.println(" Result for profit center " + res);
        return res;
    }

    /**
     * Method to validate valid Item rate for supplimentary Invoice
     */
    public Boolean validateNewItemRate(BigDecimal newRate) {
        System.out.println(newRate + " To compare newRate ************************");
        Boolean result = true;
        Integer counter = 0;

        Row curRow = getSlsInv().getCurrentRow();
        String oprType =
            curRow.getAttribute("SuppliOperType") == null ? null : curRow.getAttribute("SuppliOperType").toString();
        System.out.println(oprType + " ------------- Operation type");

        Row curItmRow = getDistinctItmVO1().getCurrentRow();
        getDistinctItmVO1().setRangeSize(-1);
        Row[] allRows = getDistinctItmVO1().getAllRowsInRange();
        for (Row r : allRows) {
            BigDecimal curItmRate =
                r.getAttribute("ItmRate") == null ? new BigDecimal(0) : (BigDecimal) r.getAttribute("ItmRate");
            System.out.println(curItmRate + " To compare Rate ************************");
            if (oprType.equalsIgnoreCase("A")) {
                //New rate must be more the current Item Rate
                if (newRate.compareTo(curItmRate) <= 0) {
                    counter++;
                    System.out.println(" inside A");
                }

            } else if (oprType.equalsIgnoreCase("S")) {
                if (newRate.compareTo(curItmRate) > 0) {
                    counter++;
                    System.out.println(" inside S");
                }
            }
        }
        System.out.println(counter + " value of counter");
        if (counter > 0) {
            result = false;
        }
        return result;
    }

    /**
     * ------Method is for creating tax rule line after selectin any rule
     * .It can be called in rule id changed listner.--------------.
     * @param p_tax_rule_id
     * @param p_user_id
     * @param p_taxable_amount
     * @param P_conv_fctr
     * @return Maximun Serial Number
     * Created By Gourav Raj
     * Modified by Mousham Barman
     * This method will insert Tax Rule for INVOICE Wise
     */
    public Boolean insertTrLinesInCaseOfMismatch1() {
        Boolean b = false;
        BigDecimal currRate = new BigDecimal(1);
        StringBuffer siDocId = new StringBuffer("");
        Row siRow = this.getSlsInv().getCurrentRow();
        Object expmtdO = siRow.getAttribute("TaxExmptFlgTrans");
        String exmptd = (expmtdO == null ? "N" : expmtdO.toString());
        if (siRow != null) {
            currRate = (BigDecimal) siRow.getAttribute("CurrRate");
            siDocId = new StringBuffer(siRow.getAttribute("DocId").toString());
        }
        SlsInvTrVOImpl trVo = this.getSlsInvTr();
        trVo.setRangeSize(-1);
        SlsInvTrLineVOImpl trLinesVo = this.getSlsInvTrLine1();
        trLinesVo.setRangeSize(-1);
        SlsInvShipItmVOImpl forTax = this.getSlsInvShipItmVOForTax();
        forTax.setRangeSize(-1);
        forTax.executeQuery();
        RowSetIterator itmItr = forTax.createRowSetIterator(null);
        _log.info("Item count : " + itmItr.getRowCount());
        while (itmItr.hasNext()) {
            Row tr = null;
            StringBuffer itmId = new StringBuffer("");
            StringBuffer shipmntId = new StringBuffer("");
            StringBuffer soId = new StringBuffer("");
            Row itmRow = itmItr.next();
            itmRow.setAttribute("TaxRuleFlg", "Y");
            BigDecimal taxableAmt = new BigDecimal(0);
            BigDecimal itmAmtGs = BigDecimal.ZERO;
            if (itmRow.getAttribute("ItmId") != null) {
                itmId = new StringBuffer(itmRow.getAttribute("ItmId").toString());
                shipmntId = new StringBuffer(itmRow.getAttribute("ShipId").toString());
                taxableAmt = (BigDecimal) itmRow.getAttribute("AsblAmtSp");
                itmAmtGs = (BigDecimal) itmRow.getAttribute("ItmAmtGsSp");
                soId = new StringBuffer(itmRow.getAttribute("SoId").toString());
            }
            RowQualifier rq = new RowQualifier(trVo);
            rq.setWhereClause("ItmId ='" + itmId + "' and ShipId='" + shipmntId + "' and SoId='" + soId + "'");
            _log.info("Qualifier for row : " + rq.getExprStr());
            Row[] filteredRows = trVo.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                _log.info("Tr Row already Exists");
                tr = filteredRows[0];
                RowQualifier rqTrLines = new RowQualifier(trLinesVo);
                rqTrLines.setWhereClause("ItmId ='" + itmId + "' and ShipId='" + shipmntId + "' and SoId='" + soId +
                                         "'");
                Row[] filteredRowsTrLines = trLinesVo.getFilteredRows(rqTrLines);
                _log.info("Tr lines count : " + filteredRowsTrLines.length);
                if (filteredRowsTrLines.length == 0) {
                    b = true;
                    _log.info("Function running in case of Mismatch...");
                    try {
                        callStoredFunction(Types.NUMERIC, "FN_INS_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                           EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           siDocId.toString(), itmId.toString(), tr.getAttribute("TaxRuleId"),
                                           EbizParams.GLBL_APP_USR(), itmAmtGs, taxableAmt, currRate, soId.toString(),
                                           shipmntId.toString(), exmptd
                        });
                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'FN_INS_INV_TR_LINES' !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                }
            }
            _log.info("Tr row key is : " + tr.getKey());
            BigDecimal val = new BigDecimal(0);

        }
        getSlsInvTrLine().executeQuery();
        trVo.executeQuery();
        return b;
    }

    /**
     * Method to insert TRLines in case if TR_lines entry is not availlable for a Tr
     * @param docId
     */
    public Boolean insertTrLinesForMismatch(String docId) {
        Boolean b = insertTrLinesInCaseOfMismatch1();
        if (b) {
            InvoiceCalcu(new StringBuffer(docId));
        }
        return b;
    }

    /**
     * Method to iterate over Calc and insert Cost center for that
     */
    public void iterateSlsInvCalc() {
        RowSetIterator cr = this.getSlsInvCalc().createRowSetIterator(null);
        while (cr.hasNext()) {
            Row nt = cr.next();
            System.out.println("CcId ----  " + nt.getAttribute("CcId") + "DocId ---- " + nt.getAttribute("DocId"));
            try {
                Object coaIdO = nt.getAttribute("CoaId");
                Integer coaId = coaIdO == null ? 0 : (Integer)coaIdO;
                if(!coaId.equals(0) && nt.getAttribute("CcId") != null){
                    updateCostCenterAmt(nt.getAttribute("DocId").toString(),
                                        new Number((BigDecimal) nt.getAttribute("AmtSp")),
                                        nt.getAttribute("CcId").toString());
                }
            } catch (SQLException e) {
                ADFModelUtils.showFormattedFacesMessage("There have been an error while passing Cost center entries!",
                                                        e.getMessage(), FacesMessage.SEVERITY_ERROR);
            }
        }
        cr.closeRowSetIterator();
    }
    
    /**
     * Method to check if  invoice Value valid or not
     * @return
     */
    public Boolean isInvoiceValueValid(){
        Boolean success = true;
        Row invRow = getSlsInv().getCurrentRow();
        Object totAmtSpO = invRow.getAttribute("TransAmtAfterOcSp");
        BigDecimal totAmtSp =(totAmtSpO == null ? BigDecimal.ZERO : (BigDecimal)totAmtSpO);
        System.out.println("Invoive Amount : "+totAmtSp);
        if(totAmtSp.compareTo(BigDecimal.ZERO) < 0){
            success = false;
            ADFModelUtils.showFormattedFacesMessage("Sales Invoice Total Amount is Invalid !",
                                                    "Sales Invoice Total Amount cannot be Negative. </br></br>Please make sure that Total Invoice Amount is not less than zero.", 
                                                    FacesMessage.SEVERITY_ERROR);
        }
        return success;
    }
}
