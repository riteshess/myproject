package slssalesinvoiceapp.model.module.view;

import adf.utils.bean.StaticValue;
import adf.utils.custom.EbizAction;

import adf.utils.ebiz.EbizParams;

import java.math.BigDecimal;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 23 12:34:44 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TempOtherChargesVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        A {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getA();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlocIdTrans {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getSlocIdTrans();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgIdTrans {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getOrgIdTrans();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        HoOrgIdTrans {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getHoOrgIdTrans();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CldIdTrans {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getCldIdTrans();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CoaNmTrans {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getCoaNmTrans();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setCoaNmTrans((String) value);
            }
        }
        ,
        CoaIdTrans {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getCoaIdTrans();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setCoaIdTrans((Integer) value);
            }
        }
        ,
        OthrChrgsDescTrans {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getOthrChrgsDescTrans();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setOthrChrgsDescTrans((Integer) value);
            }
        }
        ,
        OtherChargesAmtTrans {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getOtherChargesAmtTrans();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setOtherChargesAmtTrans((BigDecimal) value);
            }
        }
        ,
        AmtTypTrans {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getAmtTypTrans();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setAmtTypTrans((String) value);
            }
        }
        ,
        LOVCoaForOCVO1 {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getLOVCoaForOCVO1();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVOtherChargesVO1 {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getLOVOtherChargesVO1();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVAmountTypeVO1 {
            public Object get(TempOtherChargesVORowImpl obj) {
                return obj.getLOVAmountTypeVO1();
            }

            public void put(TempOtherChargesVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(TempOtherChargesVORowImpl object);

        public abstract void put(TempOtherChargesVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int A = AttributesEnum.A.index();
    public static final int SLOCIDTRANS = AttributesEnum.SlocIdTrans.index();
    public static final int ORGIDTRANS = AttributesEnum.OrgIdTrans.index();
    public static final int HOORGIDTRANS = AttributesEnum.HoOrgIdTrans.index();
    public static final int CLDIDTRANS = AttributesEnum.CldIdTrans.index();
    public static final int COANMTRANS = AttributesEnum.CoaNmTrans.index();
    public static final int COAIDTRANS = AttributesEnum.CoaIdTrans.index();
    public static final int OTHRCHRGSDESCTRANS = AttributesEnum.OthrChrgsDescTrans.index();
    public static final int OTHERCHARGESAMTTRANS = AttributesEnum.OtherChargesAmtTrans.index();
    public static final int AMTTYPTRANS = AttributesEnum.AmtTypTrans.index();
    public static final int LOVCOAFOROCVO1 = AttributesEnum.LOVCoaForOCVO1.index();
    public static final int LOVOTHERCHARGESVO1 = AttributesEnum.LOVOtherChargesVO1.index();
    public static final int LOVAMOUNTTYPEVO1 = AttributesEnum.LOVAmountTypeVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TempOtherChargesVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute A.
     * @return the A
     */
    public String getA() {
        return (String) getAttributeInternal(A);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocIdTrans.
     * @return the SlocIdTrans
     */
    public Integer getSlocIdTrans() {
        return EbizParams.GLBL_APP_SERV_LOC();
    }

    /**
     * Gets the attribute value for the calculated attribute OrgIdTrans.
     * @return the OrgIdTrans
     */
    public String getOrgIdTrans() {
        return EbizParams.GLBL_APP_USR_ORG();
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgIdTrans.
     * @return the HoOrgIdTrans
     */
    public String getHoOrgIdTrans() {
        return EbizParams.GLBL_HO_ORG_ID();
    }

    /**
     * Gets the attribute value for the calculated attribute CldIdTrans.
     * @return the CldIdTrans
     */
    public String getCldIdTrans() {
        return EbizParams.GLBL_APP_CLD_ID();
    }

    /**
     * Gets the attribute value for the calculated attribute CoaNmTrans.
     * @return the CoaNmTrans
     */
    public String getCoaNmTrans() {
        return (String) getAttributeInternal(COANMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CoaNmTrans.
     * @param value value to set the  CoaNmTrans
     */
    public void setCoaNmTrans(String value) {
        setAttributeInternal(COANMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CoaIdTrans.
     * @return the CoaIdTrans
     */
    public Integer getCoaIdTrans() {
        return (Integer) getAttributeInternal(COAIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CoaIdTrans.
     * @param value value to set the  CoaIdTrans
     */
    public void setCoaIdTrans(Integer value) {
        setAttributeInternal(COAIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OthrChrgsDescTrans.
     * @return the OthrChrgsDescTrans
     */
    public Integer getOthrChrgsDescTrans() {
        return (Integer) getAttributeInternal(OTHRCHRGSDESCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OthrChrgsDescTrans.
     * @param value value to set the  OthrChrgsDescTrans
     */
    public void setOthrChrgsDescTrans(Integer value) {
        setAttributeInternal(OTHRCHRGSDESCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OtherChargesAmtTrans.
     * @return the OtherChargesAmtTrans
     */
    public BigDecimal getOtherChargesAmtTrans() {
        if(getAttributeInternal(OTHERCHARGESAMTTRANS) == null){
            setOtherChargesAmtTrans(BigDecimal.ZERO);
        }
        return (BigDecimal) getAttributeInternal(OTHERCHARGESAMTTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OtherChargesAmtTrans.
     * @param value value to set the  OtherChargesAmtTrans
     */
    public void setOtherChargesAmtTrans(BigDecimal value) {
        setAttributeInternal(OTHERCHARGESAMTTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute AmtTypTrans.
     * @return the AmtTypTrans
     */
    public String getAmtTypTrans() {
        return (String) getAttributeInternal(AMTTYPTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute AmtTypTrans.
     * @param value value to set the  AmtTypTrans
     */
    public void setAmtTypTrans(String value) {
        setAttributeInternal(AMTTYPTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVCoaForOCVO1.
     */
    public RowSet getLOVCoaForOCVO1() {
        return (RowSet) getAttributeInternal(LOVCOAFOROCVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVOtherChargesVO1.
     */
    public RowSet getLOVOtherChargesVO1() {
        return (RowSet) getAttributeInternal(LOVOTHERCHARGESVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVAmountTypeVO1.
     */
    public RowSet getLOVAmountTypeVO1() {
        return (RowSet) getAttributeInternal(LOVAMOUNTTYPEVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

