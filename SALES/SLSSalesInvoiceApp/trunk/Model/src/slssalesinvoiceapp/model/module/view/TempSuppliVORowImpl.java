package slssalesinvoiceapp.model.module.view;

import adf.utils.ebiz.EbizParams;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import slssalesinvoiceapp.model.module.service.SlsSalesInvoiceAppAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 09 10:45:14 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TempSuppliVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        FromDateTrans {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getFromDateTrans();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setFromDateTrans((Timestamp) value);
            }
        }
        ,
        ToDateTrans {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getToDateTrans();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setToDateTrans((Timestamp) value);
            }
        }
        ,
        ItemIdTrans {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getItemIdTrans();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setItemIdTrans((String) value);
            }
        }
        ,
        ItemNmTrans {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getItemNmTrans();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setItemNmTrans((String) value);
            }
        }
        ,
        CurrIdTrans {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getCurrIdTrans();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CldIdTrans {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getCldIdTrans();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlocIdTrans {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getSlocIdTrans();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgIdTrans {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getOrgIdTrans();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        HoOrgIdTrans {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getHoOrgIdTrans();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVItemVO1 {
            public Object get(TempSuppliVORowImpl obj) {
                return obj.getLOVItemVO1();
            }

            public void put(TempSuppliVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static int firstIndex = 0;

        public abstract Object get(TempSuppliVORowImpl object);

        public abstract void put(TempSuppliVORowImpl object, Object value);

        public int index() {
            return TempSuppliVORowImpl.AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return TempSuppliVORowImpl.AttributesEnum.firstIndex() + TempSuppliVORowImpl.AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = TempSuppliVORowImpl.AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int FROMDATETRANS = AttributesEnum.FromDateTrans.index();
    public static final int TODATETRANS = AttributesEnum.ToDateTrans.index();
    public static final int ITEMIDTRANS = AttributesEnum.ItemIdTrans.index();
    public static final int ITEMNMTRANS = AttributesEnum.ItemNmTrans.index();
    public static final int CURRIDTRANS = AttributesEnum.CurrIdTrans.index();
    public static final int CLDIDTRANS = AttributesEnum.CldIdTrans.index();
    public static final int SLOCIDTRANS = AttributesEnum.SlocIdTrans.index();
    public static final int ORGIDTRANS = AttributesEnum.OrgIdTrans.index();
    public static final int HOORGIDTRANS = AttributesEnum.HoOrgIdTrans.index();
    public static final int LOVITEMVO1 = AttributesEnum.LOVItemVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TempSuppliVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }


    /**
     * Gets the attribute value for the calculated attribute FromDateTrans.
     * @return the FromDateTrans
     */
    public Timestamp getFromDateTrans() {
        return (Timestamp) getAttributeInternal(FROMDATETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FromDateTrans.
     * @param value value to set the  FromDateTrans
     */
    public void setFromDateTrans(Timestamp value) {
        setAttributeInternal(FROMDATETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ToDateTrans.
     * @return the ToDateTrans
     */
    public Timestamp getToDateTrans() {
        return (Timestamp) getAttributeInternal(TODATETRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ToDateTrans.
     * @param value value to set the  ToDateTrans
     */
    public void setToDateTrans(Timestamp value) {
        setAttributeInternal(TODATETRANS, value);
    }


    /**
     * Gets the attribute value for the calculated attribute ItemIdTrans.
     * @return the ItemIdTrans
     */
    public String getItemIdTrans() {
        return (String) getAttributeInternal(ITEMIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemIdTrans.
     * @param value value to set the  ItemIdTrans
     */
    public void setItemIdTrans(String value) {
        setAttributeInternal(ITEMIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemNmTrans.
     * @return the ItemNmTrans
     */
    public String getItemNmTrans() {
        return (String) getAttributeInternal(ITEMNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemNmTrans.
     * @param value value to set the  ItemNmTrans
     */
    public void setItemNmTrans(String value) {
        setAttributeInternal(ITEMNMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrIdTrans.
     * @return the CurrIdTrans
     */
    public Integer getCurrIdTrans() {
        return (Integer) getAttributeInternal(CURRIDTRANS);
    }


    /**Method to call database function*/
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            SlsSalesInvoiceAppAMImpl am = (SlsSalesInvoiceAppAMImpl)this.getApplicationModule();
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }


    /**
     * Gets the attribute value for the calculated attribute CldIdTrans.
     * @return the CldIdTrans
     */
    public String getCldIdTrans() {
        return EbizParams.GLBL_APP_CLD_ID(); 
        /* StringBuffer cldId = new StringBuffer("");
        if(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}") != null){
            cldId =new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        }
        return cldId.toString(); */
       // return (String) getAttributeInternal(CLDIDTRANS);
    }


    /**
     * Gets the attribute value for the calculated attribute SlocIdTrans.
     * @return the SlocIdTrans
     */
    public Integer getSlocIdTrans() {
        return EbizParams.GLBL_APP_SERV_LOC();
        /* Integer slocId = 0;
        if(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}") != null){
            slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        }
        return slocId; */
        //return (Integer) getAttributeInternal(SLOCIDTRANS);
    }


    /**
     * Gets the attribute value for the calculated attribute OrgIdTrans.
     * @return the OrgIdTrans
     */
    public String getOrgIdTrans() {
        return EbizParams.GLBL_APP_USR_ORG();
        /* 
        StringBuffer orgId = new StringBuffer("");
        if(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}") != null){
            orgId =new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        }
        return orgId.toString(); */
        //return (String) getAttributeInternal(ORGIDTRANS);
    }


    /**
     * Gets the attribute value for the calculated attribute HoOrgIdTrans.
     * @return the HoOrgIdTrans
     */
    public String getHoOrgIdTrans() {
        /* if(getAttributeInternal(HOORGIDTRANS) == null ){
            setHoO
        } */
        return EbizParams.GLBL_HO_ORG_ID();

        //return (String) getAttributeInternal(HOORGIDTRANS);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LOVItemVO1.
     */
    public RowSet getLOVItemVO1() {
        return (RowSet)getAttributeInternal(LOVITEMVO1);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
