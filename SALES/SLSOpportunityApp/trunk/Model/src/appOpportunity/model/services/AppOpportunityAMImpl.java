package appOpportunity.model.services;


import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.ebiz.EbizParamsAPPUtils;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import appOpportunity.model.services.common.AppOpportunityAM;
import appOpportunity.model.views.DocIdVOImpl;
import appOpportunity.model.views.LOVCustVOImpl;
import appOpportunity.model.views.SearchColumnVOImpl;
import appOpportunity.model.views.SearchOppVOImpl;
import appOpportunity.model.views.SlsOppItmVOImpl;
import appOpportunity.model.views.SlsOppItmVORowImpl;
import appOpportunity.model.views.SlsOppVOImpl;
import appOpportunity.model.views.SlsOppVORowImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.rules.JboPrecisionScaleValidator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 28 14:45:27 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppOpportunityAMImpl extends ApplicationModuleImpl implements AppOpportunityAM {
    /**
     * This is the default constructor (do not remove).
     */
    private Integer fyIdAM = 0;

    private static ADFLogger adfLog = ADFLogger.createADFLogger(AppOpportunityAMImpl.class);

    public AppOpportunityAMImpl() {
    }


    /**
     * Container's getter for SearchOpp.
     * @return SearchOpp
     */
    public SearchOppVOImpl getSearchOpp() {
        return (SearchOppVOImpl) findViewObject("SearchOpp");
    }


    /**
     *
     * Body for function calling i.e template
     * to get the Input Parameters
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            //st.registerOutParameter(2, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }


    /**
     *
     * @param p_SlocId
     * @param p_CldId
     * @param p_OrgId
     * @param p_Name
     * @param p_Type
     * @param p_UsrId
     * @return
     */
    public String getNewEoId(Integer p_SlocId, String p_CldId, String p_OrgId, String p_Name, String p_Type,
                             Integer p_UsrId) {
        System.out.println("inside am function of getNewEOID--->");
        adfLog.info("p_SlocId : " + p_SlocId);
        adfLog.info(" p_CldId: " + p_CldId);
        adfLog.info("p_OrgId : " + p_OrgId);
        adfLog.info("p_Name : " + p_Name);
        adfLog.info("p_Type : " + p_Type);
        adfLog.info(" p_UsrId: " + p_UsrId);

        ViewObjectImpl custDualVO1 = this.getCustDualVO1();
        Row[] allRowsInRange = custDualVO1.getAllRowsInRange();
        Row tempRow = null;
        Integer eoType = 0;
        String eoNm = "";
        if (allRowsInRange.length > 0) {
            tempRow = allRowsInRange[0];
            eoType = (Integer) tempRow.getAttribute("EoType");
            eoNm = (String) tempRow.getAttribute("EoNm");
        }
        try {

            String exec = callStoredFunction(Types.VARCHAR, "app.FN_SET_EO_ID(?,?,?,?,?,?)", new Object[] {
                                             p_SlocId, p_CldId, p_OrgId, eoNm, eoType, p_UsrId
            }).toString();

            System.out.println("the returned value from the function is :" + exec);
            adfLog.info("exec : " + exec);
            if (exec.equalsIgnoreCase("INSERTED")) {
                Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                String cldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
                String orgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
                String hoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
                ViewObjectImpl cust = getLOVCust();
                cust.setNamedWhereClauseParam("CldIdBindVar", cldId);
                cust.setNamedWhereClauseParam("SlocIdBindVar", sloc_id);
                cust.setNamedWhereClauseParam("OrgIdBindVar", orgId);
                cust.setNamedWhereClauseParam("HoOrgIdBindVar", hoOrgId);
                cust.executeQuery();

                Row[] rw = getLOVCust().getFilteredRows("EoNm", eoNm);
                System.out.println("After filter---->");
                if (rw.length > 0) {
                    if (rw[0].getAttribute("EoId") != null) {
                        System.out.println("Inside if of getAttribute--->");
                        Integer EoId = (Integer) rw[0].getAttribute("EoId");
                        System.out.println("After setting the EOID");
                        adfLog.info("EoId : " + EoId);
                        if (EoId != null) {
                            this.getSlsOpp().getCurrentRow().setAttribute("EoId", EoId);
                            System.out.println("after inserting the eoid into the VO");
                        }
                        Row currRw = getSlsOpp().getCurrentRow();
                        if (currRw != null) {
                            adfLog.info("------" + EoId + "-----------" + p_Type);
                            adfLog.info("EoId", EoId);
                            adfLog.info("EoCat", p_Type);
                            adfLog.info("p_name : " + p_Name);

                            //getSlsOpp().executeQuery();

                            /*  this.getDBTransaction().validate();
                        this.getDBTransaction().postChanges(); */

                            SlsOppVORowImpl cR = (SlsOppVORowImpl) this.getSlsOpp().getCurrentRow();
                            cR.getLOVCustVO1().executeQuery();
                            System.out.println("After the VO Execution");
                            /* this.getLOVCust().getCurrentRow().setAttribute("EoId", EoId);
                        this.getLOVCust().getCurrentRow().setAttribute("EoNm", p_Name); */

                            System.out.println("Pname is :" + p_Name);


                            return eoNm;


                        }
                    }

                }
            } else {

                System.out.println("In Else returned No");
                return "N";
            }
        } catch (Exception e) {

            //e.printStackTrace();
            p_Name = "true";
            return p_Name;


        }

        return null;
    }


    public String getNewItmId(Integer p_SlocId, String p_CldId, String p_OrgId, String p_ItmDesc, String p_ItmPrefix,
                              String p_GrpId, String p_Uom, Integer p_UsrId) {
        adfLog.info("p_SlocId : " + p_SlocId);
        adfLog.info(" p_CldId: " + p_CldId);
        adfLog.info("p_OrgId : " + p_OrgId);
        adfLog.info(" p_ItmDesc: " + p_ItmDesc);
        adfLog.info(" p_ItmPrefix: " + p_ItmPrefix);
        adfLog.info(" p_GrpId: " + p_GrpId);
        adfLog.info(" p_Uom: " + p_Uom);
        adfLog.info(" p_UsrId: " + p_UsrId);

        String exec2 = callStoredFunction(Types.VARCHAR, "app.FN_INS_ITM(?,?,?,?,?,?,?,?,)", new Object[] {
                                          p_SlocId, p_CldId, p_OrgId, p_ItmDesc, p_ItmPrefix, p_GrpId, p_Uom, p_UsrId
        }).toString();
        String newItm = null;
        adfLog.info("function returning : " + exec2);
        SlsOppItmVORowImpl row = (SlsOppItmVORowImpl) this.getSlsOpp().getCurrentRow();
        row.getLOVItemVO1().executeQuery();
        ViewObjectImpl itmVo = this.getLOVItem();
        RowSet rs = itmVo.getRowSet();
        rs.executeQuery();
        Row[] rw = itmVo.getFilteredRows("ItmDesc", p_ItmDesc);
        for (Row r : rw) {
            //adfLog.info("iterator");
            newItm = (r.getAttribute("ItmDesc")).toString();
            //  adfLog.info("newItm :" + newItm);





        }
        Row currRow = itmVo.getCurrentRow();
        currRow.setAttribute("ItmIdTrans", newItm);
        return newItm;
    }

    /**
     * Method used to call function to get the fy id
     * @return FY Id
     * */
    public Integer getFYidOrg(String P_CldId, String P_OrgId) {
        ViewObjectImpl slsOpp = this.getSlsOpp();
        Integer fyId = 0;
        adfLog.info("DocDate : " + slsOpp.getCurrentRow().getAttribute("DocDt"));
        adfLog.info("P_CldId : " + P_CldId);
        adfLog.info("P_OrgId : " + P_OrgId);
        if (slsOpp.getCurrentRow().getAttribute("DocDt") != null) {
            fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                 P_CldId, P_OrgId, slsOpp.getCurrentRow().getAttribute("DocDt")
            }));


            if (fyId > 0 && slsOpp.getCurrentRow().getAttribute("DocDt") != null) {
                slsOpp.getCurrentRow().setAttribute("FyId", fyId);
            }
        }
        adfLog.info("Fyid is : " + fyId);
        if (fyId != null) {
            this.setFyIdAM(fyId);
            adfLog.info("fy Id AM : " + this.getFyIdAM());
        }
        return fyId;
    }


    /**
     *Method to get the display Id for Opportunity
     * @return
     */
    public String getDispDocId() {
        // System.out.println("getDispDocId");

        Integer P_DocId = 21501;
        String P_DocHexId = null;
        String P_DocTypeId = null;
        String P_TableName = "SLS$OPP";
        Integer P_FyId = null;
        String exec2 = null;
        ViewObjectImpl newSlsOppVo = this.getSlsOpp();
        Row slsOppRowCurrent = newSlsOppVo.getCurrentRow();
        if (slsOppRowCurrent != null) {
            P_FyId = (Integer) (slsOppRowCurrent.getAttribute("FyId"));
            P_DocHexId = slsOppRowCurrent.getAttribute("DocId").toString();
            if (slsOppRowCurrent.getAttribute("DispDocId") == null) {
                try {

                    Object res =
                        ADFModelUtils.callFunction(this, new StringBuilder("SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                   EbizParams.GLBL_APP_USR_ORG(), P_DocId, P_DocHexId, null,
                                                   P_TableName, P_FyId
                    }, Types.VARCHAR);
                    if (res != null) {
                        exec2 = res.toString();
                    }
                } catch (Exception e) {

                    e.printStackTrace();
                }

                // exec2 = callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] {
                //                            EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(), P_DocId, P_DocHexId, null, P_TableName, P_FyId
                //  }).toString();

                System.out.println(" ================== exec2 disp doc id: " + exec2);
                slsOppRowCurrent.setAttribute("DispDocId", exec2);
            }
        }
        return exec2;
    }


    /**
     *
     * @param data
     * @return
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }


    /**
     * Container's getter for LOVCurr.
     * @return LOVCurr
     */
    public ViewObjectImpl getLOVCurr() {
        return (ViewObjectImpl) findViewObject("LOVCurr");
    }

    /**
     * Container's getter for LOVCust.
     * @return LOVCust
     */
    public LOVCustVOImpl getLOVCust() {
        return (LOVCustVOImpl) findViewObject("LOVCust");
    }


    public void refreshLOV() {
        SlsOppVORowImpl row = (SlsOppVORowImpl) this.getSlsOpp().getCurrentRow();
        row.getLOVCustVO1().executeQuery();
    }

    /**
     * Container's getter for LOVItem.
     * @return LOVItem
     */
    public ViewObjectImpl getLOVItem() {
        return (ViewObjectImpl) findViewObject("LOVItem");
    }

    public void searchOpportunity() {

        ViewObject searchOppVo = getSearchOpp();
        ViewObject searchColVo = getSearchColumn();
        Row searchColRow = searchColVo.getCurrentRow();
        System.out.println("searchColVo.getCurrentRow().getAttribute(\"CurrIdTrans\")::::" +
                           searchColVo.getCurrentRow().getAttribute("CurrIdTrans"));
        searchOppVo.setNamedWhereClauseParam("DocIdBindVar", searchColVo.getCurrentRow().getAttribute("DocIdTrans"));
        searchOppVo.setNamedWhereClauseParam("FromDateBindVar",
                                             searchColVo.getCurrentRow().getAttribute("FromDateTrans"));
        searchOppVo.setNamedWhereClauseParam("ToDateBindVar", searchColVo.getCurrentRow().getAttribute("ToDateTrans"));
        searchOppVo.setNamedWhereClauseParam("CurrIdBindVar", searchColVo.getCurrentRow().getAttribute("CurrIdTrans"));
        searchOppVo.setNamedWhereClauseParam("CatIdBindVar", searchColVo.getCurrentRow().getAttribute("EoCatTrans"));
        System.out.println("Status is --->" + searchColVo.getCurrentRow().getAttribute("StatusTrans"));
        searchOppVo.setNamedWhereClauseParam("StatusBindVar", searchColVo.getCurrentRow().getAttribute("StatusTrans"));
        searchOppVo.setNamedWhereClauseParam("EoNmBindVar", searchColVo.getCurrentRow().getAttribute("EoNmTrans"));
        searchOppVo.setNamedWhereClauseParam("NoOfItemsBindVar",
                                             searchColVo.getCurrentRow().getAttribute("NoOfItemsTrans"));
        searchOppVo.setNamedWhereClauseParam("TotOppAmtBindVar",
                                             searchColVo.getCurrentRow().getAttribute("TotOppAmtTrans"));
        searchOppVo.setNamedWhereClauseParam("CldIdBindVar", searchColVo.getCurrentRow().getAttribute("CldIdTrans"));
        searchOppVo.setNamedWhereClauseParam("SlocIdBindVar", searchColVo.getCurrentRow().getAttribute("SlocIdTrans"));
        searchOppVo.setNamedWhereClauseParam("OrgIdBindVar", searchColVo.getCurrentRow().getAttribute("OrgIdTrans"));
        searchOppVo.setNamedWhereClauseParam("HoOrgIdBindVar",
                                             searchColVo.getCurrentRow().getAttribute("HoOrgIdTrans"));
        searchOppVo.setNamedWhereClauseParam("BindOppMode",
                                             searchColVo.getCurrentRow().getAttribute("OppModeTrans"));
        

        searchOppVo.executeQuery();
    }


    public void resetOpportunity() {
        ViewObject searchOppVo = this.getSearchOpp();

        searchOppVo.setWhereClause(null);
        searchOppVo.executeQuery();
    }

    /**
     * Container's getter for SearchColumn.
     * @return SearchColumn
     */
    public SearchColumnVOImpl getSearchColumn() {
        return (SearchColumnVOImpl) findViewObject("SearchColumn");
    }


    /**
     *
     * @param currIdSpDescVCE
     * @return
     */
    public Number getCurrency(String currIdSpDescVCE) {

        ViewObjectImpl slsOppImpl = this.getSlsOpp();
        ViewObjectImpl currImpl = this.getLOVCurr();
        ViewObjectImpl itmImpl = this.getSlsOppItm();
        Row itmRow = itmImpl.getCurrentRow();
        Row rw = slsOppImpl.getCurrentRow();
        Integer currIdBsOpp = (Integer) rw.getAttribute("CurrIdBs");
        String currIdSpDescOpp = currIdSpDescVCE;
        Number currRateOpp = new Number(0);
        //(Number)rw.getAttribute("CurrRate")
        Integer currIdSpOpp = null;
        if (currIdSpDescOpp != null) {
            Row[] xx = currImpl.getFilteredRows("CurrDescTxn", currIdSpDescOpp);
            // Row [] xx=am.getLovInputItmId1().getFilteredRowsInRange("ItmId", inputitm);
            if (xx.length > 0) {
                currIdSpOpp = Integer.parseInt(xx[0].getAttribute("CcCurrIdTxn").toString());

            }
            RowQualifier rowQualifier = new RowQualifier(currImpl);
            rowQualifier.setWhereClause("CcCurrId=" + currIdBsOpp + " AND CcCurrIdTxn=" + currIdSpOpp);
            Row[] filteredRows = currImpl.getFilteredRows(rowQualifier);

            if (filteredRows.length == 1) {

                currRateOpp = (Number) filteredRows[0].getAttribute("CcBuy");
            } else {
                currRateOpp = (Number) rw.getAttribute("CurrRate");
            }
        }
        return currRateOpp;
    }


    /**
     * Container's getter for LOVAssignedTo.
     * @return LOVAssignedTo
     */
    public ViewObjectImpl getLOVAssignedTo() {
        return (ViewObjectImpl) findViewObject("LOVAssignedTo");
    }


    /**
     * calculating Total amount from child and then setting it into parent
     */
    public Integer getTotalAmt() {
        ViewObject itmVo = this.getSlsOppItm();
        ViewObject oppVo = this.getSlsOpp();
        Row oppVoRow = oppVo.getCurrentRow();
        Number totItmAmtSp = null;
        Number totItmAmtBs = null;
        if (oppVoRow != null) {
            Row itmVoRow = itmVo.getCurrentRow();
            if (itmVoRow != null) {
                totItmAmtSp = (Number) itmVoRow.getAttribute("TotAmtSpItm");
                totItmAmtBs = (Number) itmVoRow.getAttribute("TotAmtBsItm");
                // System.out.println(totItmAmtSp);
                // System.out.println(totItmAmtBs);
                if (isPrecisionValid(26, 6, totItmAmtBs)) {
                    oppVoRow.setAttribute("TotAmtBs", totItmAmtBs);
                } else {
                    return 1;

                }
                if (isPrecisionValid(26, 6, totItmAmtSp)) {
                    oppVoRow.setAttribute("TotAmtSp", totItmAmtSp);
                } else {
                    return 2;
                }
            }
        }
        return 3;
    }

    public Boolean isPrecisionValid(Integer precision, Integer scale, Number total) {
        JboPrecisionScaleValidator vc = new JboPrecisionScaleValidator();

        vc.setPrecision(precision);


        vc.setScale(scale);

        return vc.validateValue(total);
    }


    /**
     *
     * @param strEoId,docDtOpp
     * @return Y or N String
     * if duplicate then Y
     * else N
     */
    public String getDuplicate(String strEoId, Timestamp docDtOpp) {
        // System.out.println("duplicate");
        String str = null;
        ViewObjectImpl slsOppVo = this.getSlsOpp();
        Row slsOppVoRow = slsOppVo.getCurrentRow();
        Integer eoIdCust = 0;
        try {
            if (slsOppVoRow != null) {
                Timestamp dateDoc = docDtOpp;
                if ((strEoId != null) && (dateDoc != null)) {
                    Row[] rr2 = this.getLOVCust().getFilteredRows("EoNm", strEoId);
                    if (rr2.length > 0) {
                        for (Row x : rr2) {
                            eoIdCust = Integer.parseInt(rr2[0].getAttribute("EoId").toString());
                            // System.out.println(rr2.length);
                            RowQualifier rq = new RowQualifier("DocDt='" + dateDoc + "' and EoId='" + eoIdCust + "'");
                            Row[] rr = slsOppVo.getFilteredRows(rq);
                            if (!rr.equals(slsOppVoRow)) {
                                if (rr.length > 0) {

                                    str = "Y";
                                } else {
                                    str = "N";
                                }
                            }
                        }
                    }
                }
            }
        } catch (NullPointerException npe) {
            // TODO: Add catch code
            str = "N";
            npe.printStackTrace();
        }
        // System.out.println("" + str);
        return str;
    }

    public void getFilteredOpportunity() {
        ViewObjectImpl vo = this.getSlsOpp();
        ViewCriteria vc = vo.getViewCriteria("SlsOppVOCriteria");

        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        //Integer FyId = Integer.parseInt(resolvEl("#{pageFlowScope.FY_ID}").toString());
        ViewObject gPVo = this.getSearchOpp();
        Row nrow = gPVo.getCurrentRow();
        String DocId = nrow.getAttribute("DocId").toString();
        adfLog.info("SlocId : " + SlocId);
        adfLog.info("CldId : " + CldId);
        adfLog.info("OrgId : " + OrgId);
        adfLog.info("DocId : " + DocId);
        //adfLog.info("FyId : " +FyId);
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdBindVar", CldId);
        vo.setNamedWhereClauseParam("SlocIdBindVar", SlocId);
        vo.setNamedWhereClauseParam("OrgIdBindVar", OrgId);
        vo.setNamedWhereClauseParam("DocIdBindVar", DocId);
        //vo.setNamedWhereClauseParam("FyIdBindVar", FyId);
        vo.executeQuery();
    }

    //pc2:t4 p1 it19 soc5
    /*     public String getDuplicate(String strEoId) {
        String str=null;
        if (strEoId != null) {
                ViewObject v = this.getSlsOpp();

                int totalCount = v.getRowCount(); //get ALL rows
                int rangeSize = v.getRangeSize(); //all in range
                v.setRangeSize(totalCount);
                Row[] rArray = v.getAllRowsInRange();

                //check for duplicate rows
                Row cRow = v.getCurrentRow();
                int count = 0;
                String eoIdT = "";

                for (Row r : rArray) {

                    if (!r.equals(cRow)) {
                        try {
                            eoIdT = r.getAttribute("EoId").toString();
                        } catch (NullPointerException npe) {
                            // System.out.println("NPE:" + npe);
                            eoIdT = "";
                        }
                        if (eoIdT != null) {
                            Row[] xx = v.getFilteredRows("EoId", eoIdT);
                            if (xx.length > 0) {
                              str="Y";
                              count=count+1;
                            }

                        }

                    }

                }
                v.setRangeSize(rangeSize); //set to original range
                System.out.println("Total Count -->" + count);
                if (count > 0) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return str;
            }

        } */
    /*
        System.out.println();
        String str =null;
        ViewObject slsOppVo = this.getSlsOpp();
        Row slsOppVoRow = slsOppVo.getCurrentRow();
        try {
            if (slsOppVoRow != null) {
                String strEoCat = slsOppVoRow.getAttribute("EoCat").toString();
                if ((strEoId != null) || (strEoCat != null)) {
                    Row[] rr = slsOppVo.getFilteredRows("EoIdTrans", strEoId);
                    for (Row x : rr) {
                        System.out.println(rr.length);

                        if (x != slsOppVoRow) {
                            Row[] rr2 = slsOppVo.getFilteredRows("EoCat", strEoCat);
                            for (Row y : rr2) {

                                if (y != slsOppVoRow) {

                                    str = "N";return str;
                                }
                                str = "Y";return str;
                            }

                        }
                    }

                }
            } else
                str = "N";return str;
        } catch (NullPointerException npe) {
            // TODO: Add catch code
           str="N";return str;
        } */
    //   return str;
    //}

    //if(rr.length>1)


    /**
     * Container's getter for LOVEoCat.
     * @return LOVEoCat
     */
    public ViewObjectImpl getLOVEoCat() {
        return (ViewObjectImpl) findViewObject("LOVEoCat");
    }

    public void setFyIdAM(Integer fyIdAM) {
        this.fyIdAM = fyIdAM;
    }

    public Integer getFyIdAM() {
        return fyIdAM;
    }

    /**
     * Container's getter for SlsOpp1.
     * @return SlsOpp1
     */
    public SlsOppVOImpl getSlsOpp1() {
        return (SlsOppVOImpl) findViewObject("SlsOpp1");
    }

    public String chkItm() {

        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        Object ItemId = this.getSlsOppItm().getCurrentRow().getAttribute("ItmId").toString();
        System.out.println("Item Id is --->" + ItemId);
        String exec2 = null;
        try {
            exec2 = callStoredFunction(Types.VARCHAR, "MM.MM_IS_ITM_SERIALIZED(?,?,?,?)", new Object[] {
                                       CldId, SlocId, OrgId, ItemId
            }).toString();
            System.out.println("Item is serialized" + exec2);
        } catch (Exception e) {

            e.printStackTrace();
        }

        if (exec2.equalsIgnoreCase("N")) {

            return exec2;
        } else {

            return exec2;
        }
    }

    public void getSearchOpportunity(Timestamp fromDt, Timestamp toDt, Integer currId, String eoNm, Number noOfItems,
                                     Number totOppAmt, Integer category, String docId) {

        /* ViewCriteria vc = vo.getViewCriteria("SearchOppVOCriteria");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
         */ //Integer FyId = Integer.parseInt(resolvEl("#{pageFlowScope.FY_ID}").toString());
        ViewObjectImpl vo = this.getSearchOpp();
        Row currentRow = this.getSearchColumn().getCurrentRow();
        if (currentRow != null) {
            System.out.println("currentRow.getAttribute(\"CurrIdTrans\")" + currentRow.getAttribute("CurrIdTrans"));
            vo.setNamedWhereClauseParam("CldIdBindVar", currentRow.getAttribute("CldIdTrans"));
            vo.setNamedWhereClauseParam("SlocIdBindVar", currentRow.getAttribute("SlocIdTrans"));
            vo.setNamedWhereClauseParam("OrgIdBindVar", currentRow.getAttribute("OrgIdTrans"));
            vo.setNamedWhereClauseParam("DocIdBindVar", currentRow.getAttribute("DocIdTranxTrans"));
            vo.setNamedWhereClauseParam("HoOrgIdBindVar", currentRow.getAttribute("HoOrgIdTrans"));
            vo.setNamedWhereClauseParam("EoNmBindVar", currentRow.getAttribute("EoNmTrans"));
            vo.setNamedWhereClauseParam("FromDateBindVar", currentRow.getAttribute("FromDateTrans"));
            vo.setNamedWhereClauseParam("ToDateBindVar", currentRow.getAttribute("ToDateTrans"));
            vo.setNamedWhereClauseParam("CurrIdBindVar", currentRow.getAttribute("CurrIdTrans"));
            vo.setNamedWhereClauseParam("NoOfItemsBindVar", currentRow.getAttribute("NoOfItemsTrans"));
            vo.setNamedWhereClauseParam("TotOppAmtBindVar", currentRow.getAttribute("TotOppAmtTrans"));
            vo.setNamedWhereClauseParam("CatIdBindVar", currentRow.getAttribute("EoCatTrans"));
            vo.setNamedWhereClauseParam("StatusBindVar", currentRow.getAttribute("StatusTrans"));
            vo.setNamedWhereClauseParam("BindOppMode", currentRow.getAttribute("OppModeTrans"));
            vo.executeQuery();
        }
        /* adfLog.info("SlocId : " + SlocId);
        adfLog.info("CldId : " + CldId);
        adfLog.info("OrgId : " + OrgId);
        adfLog.info("DocId : " + docId);
        adfLog.info("HoOrgId : " + HoOrgId);
        //adfLog.info("FyId : " +FyId);
        adfLog.info("fromDt : " + fromDt);
        adfLog.info("toDt : " + toDt);
        adfLog.info("currId : " + currId);
        adfLog.info("eoNm : " + eoNm);
        adfLog.info("noOfItems : " + noOfItems);
        adfLog.info("totOppAmt : " + totOppAmt);
        adfLog.info("category : " + category);
        vo.applyViewCriteria(vc); */

    }


    public void getResetOpportunity() {
        ViewObjectImpl vo = this.getSearchOpp();
        ViewCriteria vc = vo.getViewCriteria("SearchOppVOCriteria");
        ViewObject gPVo = this.getSearchColumn();


        vo.applyViewCriteria(vc);

        setBindValuesofSearch();
        /* vo.setNamedWhereClauseParam("CldIdBindVar", null);
        vo.setNamedWhereClauseParam("SlocIdBindVar", null);
        vo.setNamedWhereClauseParam("OrgIdBindVar", null); */
        vo.setNamedWhereClauseParam("DocIdBindVar", null);
        //vo.setNamedWhereClauseParam("HoOrgIdBindVar", null);
        vo.setNamedWhereClauseParam("EoNmBindVar", null);
        vo.setNamedWhereClauseParam("FromDateBindVar", null);
        vo.setNamedWhereClauseParam("ToDateBindVar", null);
        vo.setNamedWhereClauseParam("CurrIdBindVar", null);
        vo.setNamedWhereClauseParam("NoOfItemsBindVar", null);
        vo.setNamedWhereClauseParam("TotOppAmtBindVar", null);
        vo.setNamedWhereClauseParam("CatIdBindVar", null);
        vo.setNamedWhereClauseParam("StatusBindVar", null);
        vo.setNamedWhereClauseParam("BindOppMode", null);
        vo.executeQuery();
        gPVo.executeQuery();
    }

    public String itemExist(String item) {
        ViewObject itmVo = this.getSlsOppItm();
        String itmDesc = null;
        String itmFrmLov = null;
        int totalCount = itmVo.getRowCount(); //get ALL rows
        int rangeSize = itmVo.getRangeSize(); //all in range
        itmVo.setRangeSize(totalCount);
        Row[] rArray = itmVo.getAllRowsInRange();

        //check for duplicate rows
        Row cRow = itmVo.getCurrentRow();
        int count = 0;
        String currName = "";
        ViewObject itemLOV = this.getLOVItem();
        Row[] rr = itemLOV.getFilteredRows("ItmDesc", item);
        if (rr.length == 0) {
            return "Z"; // For Non Existing Item
        }
        if (rr.length > 0) {
            itmFrmLov = rr[0].getAttribute("ItmId").toString();
            adfLog.info("itmFrmLov : " + itmFrmLov);
        }
        for (Row r : rArray) {
            if (!r.equals(cRow)) {
                try {
                    currName = r.getAttribute("ItmId").toString();
                } catch (NullPointerException npe) {
                    // System.out.println("NPE:" + npe);
                    currName = "";
                }
                if (currName != null) {
                    adfLog.info(" currName : " + currName + "item is--" + item + "itmFrmLov : " + itmFrmLov);
                    if (itmFrmLov.equalsIgnoreCase(currName)) {
                        //count = count + 1;
                        ++count;
                        break;
                    }
                }
            }
        }
        itmVo.setRangeSize(rangeSize); //set to original range
        adfLog.info("Total Count -->" + count);
        if (count > 0) {
            adfLog.info("Duplicate Record Found");
            return "Y";
        } else {
            return "N";
        }
    }

    public void getResOpportunity(String docTxnIdRes) {
        ViewObjectImpl vo = this.getSlsOpp();
        adfLog.info(" AM method docTxnIdRes :" + docTxnIdRes);
        if (docTxnIdRes.equals("R")) {
            vo.setWhereClause(null);
            vo.executeQuery();
            //  System.out.println("IF");
        } else {
            vo.setWhereClause("DOC_ID ='" + docTxnIdRes + "'");
            // System.out.println("ELSE");
        }
        /* ViewCriteria vc = vo.getViewCriteria("SlsOppVOCriteria");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        //Integer FyId = Integer.parseInt(resolvEl("#{pageFlowScope.FY_ID}").toString());
        ViewObject gPVo = this.getSearchOpp();
        Row nrow = gPVo.getCurrentRow();
        String DocId = docTxnIdRes;
        adfLog.info("SlocId : " +SlocId);
        adfLog.info("CldId : " +CldId);
        adfLog.info("OrgId : " +OrgId);
        adfLog.info("DocId : " +DocId);
        //adfLog.info("FyId : " +FyId);
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdBindVar", CldId);
        vo.setNamedWhereClauseParam("SlocIdBindVar", SlocId);
        vo.setNamedWhereClauseParam("OrgIdBindVar", OrgId);
        vo.setNamedWhereClauseParam("DocIdBindVar", DocId);
        //vo.setNamedWhereClauseParam("FyIdBindVar", FyId); */
        vo.executeQuery();
        //vo.reset();
        this.getSearchOpp().executeQuery();
        /* this.getLOVCurr().executeQuery();
        this.getSlsOpp().getRowSet().executeQuery();
        this.getLOVCurr().getRowSet().executeQuery();
        this.getSlsOpp().executeQuery();
        //this.getDBTransaction().commit();
        this.getLOVCurr().getDBTransaction().setClearCacheOnRollback(true);

        this.getDBTransaction().rollback(); */
    }

    /**
     * Container's getter for SlsOpp.
     * @return SlsOpp
     */
    public SlsOppVOImpl getSlsOpp() {
        return (SlsOppVOImpl) findViewObject("SlsOpp");
    }

    /**
     * Container's getter for SlsOppItm.
     * @return SlsOppItm
     */
    public SlsOppItmVOImpl getSlsOppItm() {
        return (SlsOppItmVOImpl) findViewObject("SlsOppItm");
    }

    /**
     * Container's getter for OppToOppItmVL1.
     * @return OppToOppItmVL1
     */
    public ViewLinkImpl getOppToOppItmVL1() {
        return (ViewLinkImpl) findViewLink("OppToOppItmVL1");
    }

    /**
     * code for post delete operation
     */
    public void SlsOppItmExecute() {

        String cldid = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String orgid = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");

        getFYidOrg(cldid, orgid);

        /*  this.getDBTransaction().validate();
        this.getDBTransaction().postChanges(); */

        getSlsOppItm().executeQuery();
    }


    /**
     * code for Item Price of todays
     */
    public Number getMaxItemPrice(String itmid) {
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());

        String value = itmid;

        ViewObjectImpl impl = this.getLOVItem();
        RowQualifier rq = new RowQualifier(impl);
        if (itmid != null) {
            rq.setWhereClause("CldId = '" + CldId + "' AND SlocId=" + SlocId + " AND OrgId='" + OrgId +
                              "' AND HoOrgId='" + HoOrgId + "' AND ItmDesc='" + itmid + "'");
            Row[] fr = impl.getFilteredRows(rq);
            // System.out.println("Fr value is :"+fr.length);
            //System.out.println("Fr value is ---------> "+fr[0]);
            if (fr != null && fr.length > 0) {
                value = (String) fr[0].getAttribute("ItmId");

                // System.out.println("Value is :"+value);
            }
        }
        System.out.println("Curr Rate is " + this.getSlsOpp().getCurrentRow().getAttribute("CurrRate"));
        System.out.println("------>" + this.getSlsOpp().getCurrentRow().getAttribute("CurrIdSp"));
        Number currRate = new Number(1);
        if (this.getSlsOpp().getCurrentRow().getAttribute("CurrRate") != null) {

            currRate = (Number) this.getSlsOpp().getCurrentRow().getAttribute("CurrRate");

        }
        System.out.println(this.getSlsOpp().getCurrentRow().getAttribute("CurrIdSp") + "----->" + currRate);


        BigDecimal price =
            (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            CldId, SlocId, OrgId, HoOrgId,
                                            this.getSlsOpp().getCurrentRow().getAttribute("EoId"), value,
                                            this.getSlsOpp().getCurrentRow().getAttribute("DocDt"),
                                            Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()),
                                            new Timestamp(System.currentTimeMillis()),
                                            this.getSlsOpp().getCurrentRow().getAttribute("CurrIdSp"), currRate
        });

        /* System.out.println("__________");
        System.out.println("" + CldId + " , " + SlocId + " , " + OrgId + " , " + HoOrgId + "," +
                           this.getSlsOpp().getCurrentRow().getAttribute("EoId") + " , " + value + " , " +
                           this.getSlsOpp().getCurrentRow().getAttribute("DocDt") + " , " +
                           Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()) + " , " +
                           new Timestamp(System.currentTimeMillis())); */
        System.out.println("Value is " + price);
        Number val = null;
        try {
            val = new Number(price);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (val != null) {

            System.out.println("Price is :" + val);
            return val;
        } else {

            return null;
        }
    }

    public void setBindValuesofSearch() {
        SearchOppVOImpl impl = getSearchOpp();
        ViewCriteria criteria = impl.getViewCriteria("SearchOppVOCriteria");
        impl.applyViewCriteria(criteria);
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        impl.setNamedWhereClauseParam("CldIdBindVar", -1);
        impl.setNamedWhereClauseParam("SlocIdBindVar", SlocId);
        impl.setNamedWhereClauseParam("OrgIdBindVar", OrgId);
        impl.setNamedWhereClauseParam("HoOrgIdBindVar", HoOrgId);

        impl.executeQuery();
    }

    /**
     * Set Customer Name Value to empty on value change of category
     */
    public void setCustomerNameOnVCE() {
        this.getSlsOpp().getCurrentRow().setAttribute("EoIdTrans", null);
        this.getSlsOpp().getCurrentRow().setAttribute("EoId", null);


    }

    /**
     * Check Customer Name Is empty or null or not
     */
    public Boolean chkCustomerNameExistOrNot() {
        Boolean retVal = true;

        Object EoIdTrans = this.getSlsOpp().getCurrentRow().getAttribute("EoIdTrans");
        Object EoId = this.getSlsOpp().getCurrentRow().getAttribute("EoId");

        if (EoId == null || EoIdTrans == null) {
            retVal = false;
        }

        //System.out.println("Ret value in Amimplm is:"+retVal);
        return retVal;
    }

    /**
     * Check Iten Name Is Empty or Null or Not
     */
    public Boolean chkItenNameExistOrNot() {
        Boolean chkRetVal = true;

        Object ItemId = this.getSlsOppItm().getCurrentRow().getAttribute("ItmId");
        Object ItemIdTrans = this.getSlsOppItm().getCurrentRow().getAttribute("ItmIdTrans");
        Object ItemUom = this.getSlsOppItm().getCurrentRow().getAttribute("ItmUom");

        if (ItemId == null || ItemIdTrans == null || ItemUom == null) {
            chkRetVal = false;
        }
        return chkRetVal;
    }

    public void setLostStatus() {
        this.getSlsOpp().getCurrentRow().setAttribute("Status", 446);

    }

    public void setStatus() {
        this.getSlsOpp().getCurrentRow().setAttribute("Status", 444);

    }

    /**
     * Container's getter for DocId1.
     * @return DocId1
     */
    public DocIdVOImpl getDocId1() {
        return (DocIdVOImpl) findViewObject("DocId1");
    }

    public Integer getEOCatId() {
        Integer eocatid = null;
        if (this.getSlsOpp().getCurrentRow().getAttribute("EoCat") != null) {
            eocatid = Integer.parseInt(this.getSlsOpp().getCurrentRow().getAttribute("EoCat").toString());
        }
        return eocatid;
    }

    public void setEOCatId(Integer eocatid) {
        ViewObjectImpl custDualVO1 = this.getCustDualVO1();
        Row[] allRowsInRange = custDualVO1.getAllRowsInRange();
        Row tempRow = null;
        if (allRowsInRange.length > 0) {
            tempRow = allRowsInRange[0];
            tempRow.setAttribute("EoType", eocatid);
            tempRow.setAttribute("EoNm", "");
        }

    }

    /**
     * Container's getter for CustDualVO1.
     * @return CustDualVO1
     */
    public ViewObjectImpl getCustDualVO1() {
        return (ViewObjectImpl) findViewObject("CustDualVO1");
    }

    /**
     * Container's getter for SlsOppDc1.
     * @return SlsOppDc1
     */
    public ViewObjectImpl getSlsOppDc1() {
        return (ViewObjectImpl) findViewObject("SlsOppDc1");
    }

    /**
     * Container's getter for SlsOppToSlsOppDcVL1.
     * @return SlsOppToSlsOppDcVL1
     */
    public ViewLinkImpl getSlsOppToSlsOppDcVL1() {
        return (ViewLinkImpl) findViewLink("SlsOppToSlsOppDcVL1");
    }

    /**
     * Container's getter for AddDcDual1.
     * @return AddDcDual1
     */
    public ViewObjectImpl getAddDcDual1() {
        return (ViewObjectImpl) findViewObject("AddDcDual1");
    }

    public void getDcId() {
        ViewObjectImpl dual = this.getAddDcDual1();
        ViewObjectImpl dc1 = this.getSlsOppDc1();
        String DCId = dual.getCurrentRow().getAttribute("DcId").toString();
        System.out.println("dc id================" + DCId);
        dc1.getCurrentRow().setAttribute("DcId", DCId);
        // getDBTransaction().postChanges();
    }

    public Boolean isDcIdValid() {
        Boolean b = true;
        Row cRow = this.getAddDcDual1().getCurrentRow();
        Object dcDocIdO = cRow.getAttribute("DcDocIdTrans");
        StringBuffer dcDocId = (dcDocIdO == null ? new StringBuffer("") : new StringBuffer(dcDocIdO.toString()));

        RowSetIterator cTr = this.getSlsOppDc1().createRowSetIterator(null);
        while (cTr.hasNext()) {
            Row row = cTr.next();
            Object dcIdO = row.getAttribute("DcId");
            StringBuffer dcId = (dcIdO == null ? new StringBuffer("") : new StringBuffer(dcIdO.toString()));
            if (dcId.toString().equals(dcDocId.toString())) {
                b = false;
                break;
            }
        }
        cTr.closeRowSetIterator();


        return b;
    }

    public void addDailyCall() {
        Row cRow = this.getAddDcDual1().getCurrentRow();
        Object dcDocIdO = cRow.getAttribute("DcDocIdTrans");
        StringBuffer dcDocId = (dcDocIdO == null ? new StringBuffer("") : new StringBuffer(dcDocIdO.toString()));
        if (dcDocId.toString().equals("")) {
            FacesMessage message = new FacesMessage("Daily Call No. is not selected. Please select a Daily Call No.");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        } else if (isDcIdValid() == false) {
            FacesMessage message =
                new FacesMessage("Selected Daily Call No. is already added in current Opportunity. Please select any other Daily Call No.");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        } else {
            Row createRow = this.getSlsOppDc1().createRow();
            this.getSlsOppDc1().insertRow(createRow);
            createRow.setAttribute("DcId", dcDocId.toString());
        }
    }

    public String ValidateItmId(String itmId) {

        StringBuffer b = new StringBuffer("N");
        ViewObjectImpl impl = this.getSlsOppItm();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != impl.getCurrentRow() && next.getAttribute("ItmId") != null &&
                next.getAttribute("ItmId").toString().equalsIgnoreCase(itmId)) {
                b = new StringBuffer("Y");
                break;
            }
        }
        itr.closeRowSetIterator();
        return b.toString();
    }

    public Number getItmpricefromitmId(String itmid) {
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        String OrgId = (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        String HoOrgId = (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        // String value=itmId;
        Number currRate = new Number(1);
        if (this.getSlsOpp().getCurrentRow().getAttribute("CurrRate") != null) {

            currRate = (Number) this.getSlsOpp().getCurrentRow().getAttribute("CurrRate");

        }
        System.out.println("item is:  " + itmid + "\n" + this.getSlsOpp().getCurrentRow().getAttribute("DocDt") + "\n" +
                           this.getSlsOpp().getCurrentRow().getAttribute("CurrIdSp") + "\n" + currRate);

        BigDecimal price =
            (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            CldId, SlocId, OrgId, HoOrgId,
                                            this.getSlsOpp().getCurrentRow().getAttribute("EoId"), itmid,
                                            this.getSlsOpp().getCurrentRow().getAttribute("DocDt"),
                                            Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()),
                                            new Timestamp(System.currentTimeMillis()),
                                            this.getSlsOpp().getCurrentRow().getAttribute("CurrIdSp"), currRate
        });
        adfLog.info("price value --- " + price + " amount value  -- " + currRate);

        Number value = null;
        try {
            value = new Number(price);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        if (value != null && this.getSlsOppItm().getCurrentRow() != null) {
            Row currentRow = this.getSlsOppItm().getCurrentRow();
            if (((Object) value).equals(-1)) {
                System.out.println("inside amimpl new if-----");
                currentRow.setAttribute("ItmPrice", new Number(0));
                currentRow.setAttribute("ItmQty", new Number(0));
            } else {
                System.out.println("inside amimpl new else-----");
                currentRow.setAttribute("ItmPrice", value);
                currentRow.setAttribute("ItmQty", new Number(0));
            }
        }
        return value;
    }

    /**
     * Container's getter for LovItmDescFrmItmIdVo1.
     * @return LovItmDescFrmItmIdVo1
     */
    public ViewObjectImpl getLovItmDescFrmItmIdVo1() {
        return (ViewObjectImpl) findViewObject("LovItmDescFrmItmIdVo1");
    }

    public Boolean isItmIdValid(StringBuffer itmId) {
        Boolean b = true;
        SlsOppItmVOImpl impl = this.getSlsOppItm();
        Row currentRow = impl.getCurrentRow();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (!next.equals(currentRow)) {
                Object iO = next.getAttribute("ItmId");
                StringBuffer c = (iO == null ? new StringBuffer("") : new StringBuffer(iO.toString()));
                if (itmId.toString().equals(c.toString())) {
                    b = false;
                    break;
                }
            }
        }
        itr.closeRowSetIterator();
        return b;
    }

    public StringBuffer checkforProfileValues(StringBuffer colName) {
        colName = (colName == null ? new StringBuffer("") : colName);
        StringBuffer ck = new StringBuffer("");
        try {
            Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            String policyPrice = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                             p_cldId, p_sloc_id, p_org_id, colName.toString()
            });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    public Boolean areItemValuesValid() {
        Boolean b = true;
        SlsOppItmVOImpl impl = this.getSlsOppItm();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            Object itmIdO = row.getAttribute("ItmId");
            Object itmQtyO = row.getAttribute("ItmQty");
            Object itmPriceO = row.getAttribute("ItmPrice");

            StringBuilder itmId = (itmIdO == null ? new StringBuilder("") : new StringBuilder(itmIdO.toString()));
            Number itmQty = (itmQtyO == null ? new Number(0) : (Number) itmQtyO);
            Number itmPrice = (itmPriceO == null ? new Number(0) : (Number) itmPriceO);

            if (itmId.toString().equalsIgnoreCase("")) {
                b = false;
                FacesMessage message =
                    new FacesMessage("Item is not selected in one of the Item lines. Please select Item in corresponding Item line !");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            } else if (itmQty.compareTo(new Number(0)) <= 0) {
                b = false;
                FacesMessage message =
                    new FacesMessage("Item Quantity for one of the Item in Item lines is less than or equal to zero. Please select a valid Item Quantity !");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            } else if (itmPrice.compareTo(new Number(0)) <= 0) {
                b = false;
                FacesMessage message =
                    new FacesMessage("Item Price for one of the Item in Item lines is less than or equal to zero. Please select a valid Item Price !");
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            }
        }
        itr.closeRowSetIterator();
        return b;
    }

    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        System.out.println("Itm Str ---->" + itmStr);
        ArrayList<String> h = new ArrayList<String>();
        ViewObjectImpl autoSuggestVO = this.getItmVoForAutoSuggest1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        autoSuggestVO.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        autoSuggestVO.setNamedWhereClauseParam("ItmNmBind", itmStr);
        //  autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.setRangeSize(12);
        autoSuggestVO.executeQuery();
        System.out.println("Row Count" + autoSuggestVO.getRowCount());
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }

        return h;
    }

    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    public void insertRows() {
        Object data = resolvElO("#{pageFlowScope.InsertionRows}");
        SlsOppItmVOImpl impl = this.getSlsOppItm();

        if (data != null) {
            List datalist = (List) data;
            ListIterator iterator = datalist.listIterator();
            while (iterator.hasNext()) {
                List e = (List) iterator.next();
                boolean check = this.chkDuplicateItmId(e.get(6));
                if (check == false) {
                    Row createRow = impl.createRow();
                    impl.insertRow(createRow);
                    System.out.println("Came here---- " + e);
                    createRow.setAttribute("ItmId", e.get(6));
                    createRow.setAttribute("ItmPrice", e.get(7));
                    createRow.setAttribute("ItmUom", e.get(8));
                    createRow.setAttribute("ItmQty", e.get(9));
                    createRow.setAttribute("ItmExpPrice", e.get(10));
                    createRow.setAttribute("Remarks", e.get(11));
                    //  createRow.setAttribute("TotAmtBsItm", e.get(16));
                    //     createRow.setAttribute("TotAmtSpItm", e.get(17));
                    String amt = resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString();
                    SlsOppVOImpl oImpl = this.getSlsOpp();
                    if (oImpl != null) {
                        Row currentRow = oImpl.getCurrentRow();
                        if (currentRow != null) {
                            SlsOppVORowImpl opp = (SlsOppVORowImpl) currentRow;
                            Number currRate = opp.getCurrRate();
                            if (currRate != null) {
                                SlsOppItmVORowImpl itmRow = (SlsOppItmVORowImpl) createRow;
                                Number SpAmt = itmRow.getItmQty().multiply(itmRow.getItmPrice());
                                SpAmt = (Number) SpAmt.round(Integer.parseInt(amt));

                                Number BsAmt = SpAmt.multiply(opp.getCurrRate());
                                BsAmt = (Number) BsAmt.round(Integer.parseInt(amt));
                                itmRow.setItmAmtBs(BsAmt);
                                itmRow.setItmAmtSp(SpAmt);
                                //  itmRow.setTotAmtSpItm(SpAmt);
                                System.out.println("Amt is:  " + SpAmt + "\n" + BsAmt);
                                System.out.println("Done");
                            }
                        }
                    }
                    System.out.println("New values are:  \n");
                    System.out.println(createRow.getAttribute("ItmId"));
                    System.out.println(createRow.getAttribute("ItmPrice"));
                    System.out.println(createRow.getAttribute("ItmUom"));
                    System.out.println(createRow.getAttribute("ItmQty"));
                    System.out.println(createRow.getAttribute("ItmExpPrice"));
                    System.out.println(createRow.getAttribute("Remarks"));
                    System.out.println(createRow.getAttribute("TotAmtBsItm"));
                    System.out.println(createRow.getAttribute("TotAmtSpItm"));
                }
            }

        }
        impl.executeQuery();
    }

    public boolean chkDuplicateItmId(Object itmId) {
        if (itmId == null)
            return true;
        SlsOppItmVOImpl impl = this.getSlsOppItm();
        Row[] filteredRows = impl.getFilteredRows("ItmId", itmId.toString());
        if (filteredRows.length > 0)
            return true;
        return false;
    }

    public boolean checkRowExist() {
        int count = this.getSlsOppItm().getRowCount();
        if (count > 0) {
            return true;
        }
        return false;
    }

    /**
     * Container's getter for ItmVoForAutoSuggest1.
     * @return ItmVoForAutoSuggest1
     */
    public ViewObjectImpl getItmVoForAutoSuggest1() {
        return (ViewObjectImpl) findViewObject("ItmVoForAutoSuggest1");
    }

    public String getFyIdFromDocIdAndDate() {
        String Flag = "N";
        Integer res = EbizParamsAPPUtils.getFyIdOnCurrDtAndCurrOrg(this);
        if (res == -1) {
            ADFModelUtils.showFormattedFacesMessage("Financial Year is not Open for this Organisation on Current Date! ",
                                                    "Please Open Financial Year for Current Date before creating any document !",
                                                    FacesMessage.SEVERITY_ERROR);
            Flag = "N";
        } else {
            Flag = "Y";
        }
        return Flag;
    }

    /**
     * Container's getter for LovItmNameForItmIdForAutoSuggest1.
     * @return LovItmNameForItmIdForAutoSuggest1
     */
    public ViewObjectImpl getLovItmNameForItmIdForAutoSuggest1() {
        return (ViewObjectImpl) findViewObject("LovItmNameForItmIdForAutoSuggest1");
    }


    /********* Check Pending user at the Time of Edit **********/

    public Integer chkPendingUsr() {
        String docTxnId = (String) this.getSlsOpp().getCurrentRow().getAttribute("DocId");
        return WorkFlowUtils.docPendingAt(this.getRootApplicationModule(), 21501, 0, docTxnId);
    }

    public String getUsrNm(Integer usrId) {
        Object o = EbizParams.getUsrDescFrmUsrId(this, usrId);
        return (o == null ? " " : o.toString());
    }

    /***** ADD Workflow ***********/

    public Integer insertIntoWF() {
        this.getDBTransaction().commit();
        Integer i = -1;
        Row currentRow = getSlsOpp().getCurrentRow();
        Object docTxnId = currentRow.getAttribute("DocId");
        Object userIdCreate = currentRow.getAttribute("UsrIdCreate");

        try {
            i = WorkFlowUtils.insertWfTxnEntriesForCurrDoc(this, 21501, 0, docTxnId, (Integer) userIdCreate,
                                                           (Integer) userIdCreate, " ", StaticValue.NUMBER_ZERO);
        } catch (Exception e) {

            ADFModelUtils.showFormattedFacesMessage("Error while getting Workflow details.", " ",
                                                    FacesMessage.SEVERITY_ERROR);
        }
        return i;

    }


    public String getWfId() {
        Object flowId = null;
        flowId = WorkFlowUtils.getWorkFlowId(this, 21501, 0);
        return (flowId == null ? null : flowId.toString());
    }


    public Integer getCurUser(String docId) {
        System.out.println("docID is:::::::::" + docId);
        Integer val = WorkFlowUtils.docPendingAt(this, 21501, 0, docId);
        System.out.println("value is :::::::::::::" + val);
        return val;
    }

    public void updateWfStat(String mode, String docId) {
        System.out.println(" in updateWFStatus function in am");
        System.out.println("moode is " + mode);
        String wf_mode = (resolvEl("#{pageFlowScope.WF_RET_VAL}").toString());

        Row rw = this.getSlsOpp().getCurrentRow();
        switch (wf_mode) {
        case "A":
            rw.setAttribute("OppMode", 314);
            /* ADFModelUtils.showFormattedFacesMessage("Opportunity Saved Successfully.", "Opportunity Approved successfully.",
                                                    FacesMessage.SEVERITY_INFO); */
            break;
        case "F":
            rw.setAttribute("OppMode", 317);
            /* ADFModelUtils.showFormattedFacesMessage("Opportunity Saved Successfully.", "Opportunity Forwarded Successfully",
                                                    FacesMessage.SEVERITY_INFO); */
            break;
        case "R":
            rw.setAttribute("OppMode", 313);
            /* ADFModelUtils.showFormattedFacesMessage("Opportunity Saved Successfully.", "Opportunity Rejected Successfully.",
                                                    FacesMessage.SEVERITY_INFO); */
            break;
        case "V":
            /* ADFModelUtils.showFormattedFacesMessage("Opportunity Saved Successfully.", "Opportunity Reverted Successfully.",
                                                    FacesMessage.SEVERITY_INFO); */
            break;
        default:
            rw.setAttribute("OppMode", 313);
            break;
        }
        try {
           this.getDBTransaction().commit();
           ADFModelUtils.showFormattedFacesMessage("Opportunity Saved Successfully.", "Opportunity have been Saved Successfully.",
                                                   FacesMessage.SEVERITY_INFO); 
       } catch (Exception e) {
           ADFModelUtils.showFormattedFacesMessage("There have been an error while saving Opportunity. Please try again.", 
                                                   "If the problem persists please contact ESS! <br />"+e.getMessage(),
                                                   FacesMessage.SEVERITY_INFO);
            e.printStackTrace();
       }
    }
    /**
     * Method to mark oppportunity as Losy
     * In case of error.
     * @return
     * 1 : error
     * 0 : success
     */
    public Integer markOppAsLost(){
        Integer i = 0;
        Row currentRow = getSlsOpp().getCurrentRow();
        currentRow.setAttribute("Status", 446);
        try {
           getDBTransaction().commit();
       } catch (Exception e) {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2161"), ADFModelUtils.resolvRsrc("MSG.2176"), FacesMessage.SEVERITY_ERROR);
            e.printStackTrace();
            i = 1;
        }
        return i;
    }


}
