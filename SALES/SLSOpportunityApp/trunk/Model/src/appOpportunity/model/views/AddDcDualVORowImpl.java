package appOpportunity.model.views;

import appOpportunity.model.services.AppOpportunityAMImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.ApplicationModule;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 19 11:56:28 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AddDcDualVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(AddDcDualVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(AddDcDualVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        TransCldId {
            public Object get(AddDcDualVORowImpl obj) {
                return obj.getTransCldId();
            }

            public void put(AddDcDualVORowImpl obj, Object value) {
                obj.setTransCldId((String)value);
            }
        }
        ,
        TransSlocId {
            public Object get(AddDcDualVORowImpl obj) {
                return obj.getTransSlocId();
            }

            public void put(AddDcDualVORowImpl obj, Object value) {
                obj.setTransSlocId((Integer)value);
            }
        }
        ,
        TransOrgId {
            public Object get(AddDcDualVORowImpl obj) {
                return obj.getTransOrgId();
            }

            public void put(AddDcDualVORowImpl obj, Object value) {
                obj.setTransOrgId((String)value);
            }
        }
        ,
        TransHoOrgId {
            public Object get(AddDcDualVORowImpl obj) {
                return obj.getTransHoOrgId();
            }

            public void put(AddDcDualVORowImpl obj, Object value) {
                obj.setTransHoOrgId((String)value);
            }
        }
        ,
        TransEoId {
            public Object get(AddDcDualVORowImpl obj) {
                return obj.getTransEoId();
            }

            public void put(AddDcDualVORowImpl obj, Object value) {
                obj.setTransEoId((Integer)value);
            }
        }
        ,
        DcId {
            public Object get(AddDcDualVORowImpl obj) {
                return obj.getDcId();
            }

            public void put(AddDcDualVORowImpl obj, Object value) {
                obj.setDcId((String)value);
            }
        }
        ,
        DcDocIdTrans {
            public Object get(AddDcDualVORowImpl obj) {
                return obj.getDcDocIdTrans();
            }

            public void put(AddDcDualVORowImpl obj, Object value) {
                obj.setDcDocIdTrans((String)value);
            }
        }
        ,
        LovSearchVwVO1 {
            public Object get(AddDcDualVORowImpl obj) {
                return obj.getLovSearchVwVO1();
            }

            public void put(AddDcDualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AddDcDualVORowImpl object);

        public abstract void put(AddDcDualVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int TRANSCLDID = AttributesEnum.TransCldId.index();
    public static final int TRANSSLOCID = AttributesEnum.TransSlocId.index();
    public static final int TRANSORGID = AttributesEnum.TransOrgId.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int TRANSEOID = AttributesEnum.TransEoId.index();
    public static final int DCID = AttributesEnum.DcId.index();
    public static final int DCDOCIDTRANS = AttributesEnum.DcDocIdTrans.index();
    public static final int LOVSEARCHVWVO1 = AttributesEnum.LovSearchVwVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AddDcDualVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String)getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCldId.
     * @return the TransCldId
     */
    public String getTransCldId() {
        Object cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        if (cldId != null) {
            return cldId.toString();
        }
        return (String)getAttributeInternal(TRANSCLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCldId.
     * @param value value to set the  TransCldId
     */
    public void setTransCldId(String value) {
        setAttributeInternal(TRANSCLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSlocId.
     * @return the TransSlocId
     */
    public Integer getTransSlocId() {
        Object slocId = resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        if (slocId != null) {
            return Integer.parseInt(slocId.toString());
        }
        return (Integer)getAttributeInternal(TRANSSLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSlocId.
     * @param value value to set the  TransSlocId
     */
    public void setTransSlocId(Integer value) {
        setAttributeInternal(TRANSSLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOrgId.
     * @return the TransOrgId
     */
    public String getTransOrgId() {
        Object orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        if (orgId != null) {
            return orgId.toString();
        } else {
            return (String)getAttributeInternal(TRANSORGID);
        }

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOrgId.
     * @param value value to set the  TransOrgId
     */
    public void setTransOrgId(String value) {
        setAttributeInternal(TRANSORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        Object hoorgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        if(hoorgId!=null) {
            return hoorgId.toString();
        }
        return (String)getAttributeInternal(TRANSHOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEoId.
     * @return the TransEoId
     */
    public Integer getTransEoId() {
        if(this.getApplicationModule() != null) {
        AppOpportunityAMImpl am = (AppOpportunityAMImpl)this.getApplicationModule();
            SlsOppVOImpl impl = am.getSlsOpp();
            if(impl != null && impl.getCurrentRow() != null && impl.getCurrentRow().getAttribute("EoId") != null) {
                System.out.println("Eo id in getter :"+Integer.parseInt(impl.getCurrentRow().getAttribute("EoId").toString()));
                return Integer.parseInt(impl.getCurrentRow().getAttribute("EoId").toString());
            }
        }
        return (Integer)getAttributeInternal(TRANSEOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEoId.
     * @param value value to set the  TransEoId
     */
    public void setTransEoId(Integer value) {
        setAttributeInternal(TRANSEOID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DcId.
     * @return the DcId
     */
    public String getDcId() {
        return (String) getAttributeInternal(DCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DcId.
     * @param value value to set the  DcId
     */
    public void setDcId(String value) {
        setAttributeInternal(DCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute DcDocIdTrans.
     * @return the DcDocIdTrans
     */
    public String getDcDocIdTrans() {
        return (String) getAttributeInternal(DCDOCIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DcDocIdTrans.
     * @param value value to set the  DcDocIdTrans
     */
    public void setDcDocIdTrans(String value) {
        setAttributeInternal(DCDOCIDTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSearchVwVO1.
     */
    public RowSet getLovSearchVwVO1() {
        return (RowSet)getAttributeInternal(LOVSEARCHVWVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        // String msg = valueExp.getValue(elContext).toString();
        //  return msg;
        return valueExp.getValue(elContext);
    }

}
