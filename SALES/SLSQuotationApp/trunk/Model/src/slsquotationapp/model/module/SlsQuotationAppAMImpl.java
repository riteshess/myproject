package slsquotationapp.model.module;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.EbizParamsSLSUtils;
import adf.utils.model.ADFModelUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

import javax.servlet.ServletException;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.design.JasperDesign;
import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.rules.JboPrecisionScaleValidator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsquotationapp.model.module.common.SlsQuotationAppAM;
import slsquotationapp.model.views.LOVCustomerVOImpl;
import slsquotationapp.model.views.SLSQUOTFLEXVOImpl;
import slsquotationapp.model.views.SlsQuotItmVOImpl;
import slsquotationapp.model.views.SlsQuotItmVORowImpl;
import slsquotationapp.model.views.SlsQuotTncVOImpl;
import slsquotationapp.model.views.SlsQuotTncVORowImpl;
import slsquotationapp.model.views.SlsQuotTrVOImpl;
import slsquotationapp.model.views.SlsQuotTrVORowImpl;
import slsquotationapp.model.views.SlsQuotVOImpl;
import slsquotationapp.model.views.SlsQuotVORowImpl;
import slsquotationapp.model.views.TnCVOImpl;
import slsquotationapp.model.views.searchQuotationVOImpl;
import slsquotationapp.model.views.searchQuotationVORowImpl;
import slsquotationapp.model.views.searchVOImpl;
import slsquotationapp.model.views.searchVORowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 28 15:12:48 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsQuotationAppAMImpl extends ApplicationModuleImpl implements SlsQuotationAppAM {
    private Boolean sntmail = true; //To check mail has been sent or not
    private static ADFLogger _log = ADFLogger.createADFLogger(SlsQuotationAppAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public SlsQuotationAppAMImpl() {
    }

    /**
     * Container's getter for SlsQuot1.
     * @return SlsQuot1
     */
    public SlsQuotVOImpl getSlsQuot1() {
        return (SlsQuotVOImpl) findViewObject("SlsQuot1");
    }

    /**
     * Method to setParameter of the currentRow in VO SlsQuot1
     * @param name
     * @param value
     */
    public void getslsQuotSetCurrentRowAtt(String name, String value) {
        ViewObjectImpl slsQuoteVo = this.getSlsQuot1();
        slsQuoteVo.getCurrentRow().setAttribute(name, (Object) value);
        getSlsQuotItm2().executeQuery();

    }

    /**
     * Container's getter for EoAddTemp1.
     * @return EoAddTemp1
     */
    public ViewObjectImpl getEoAddTemp1() {
        return (ViewObjectImpl) findViewObject("EoAddTemp1");
    }

    /**
     * Container's getter for SlsQuotItm2.
     * @return SlsQuotItm2
     */
    public SlsQuotItmVOImpl getSlsQuotItm2() {
        return (SlsQuotItmVOImpl) findViewObject("SlsQuotItm2");
    }

    /**
     * Container's getter for QuoteToItemVL1.
     * @return QuoteToItemVL1
     */
    public ViewLinkImpl getQuoteToItemVL1() {
        return (ViewLinkImpl) findViewLink("QuoteToItemVL1");
    }

    /**
     * Method to call a function with one output Parameter
     * @param functionStmt
     * @param sqlReturnType
     * @param paramsInOrder
     * @return
     */
    public StringBuffer functionCall(String functionStmt, int sqlReturnType, String[] paramsInOrder) {
        if (!functionStmt.equals(null)) {
            Object[] params = new Object[paramsInOrder.length];
            int i = 0;
            //System.out.println("Length:" + paramsInOrder.length);
            for (String a : paramsInOrder) {
                params[i] = (Object) a;
                //System.out.println(a + ":");
                i = i + 1;
            }
            return new StringBuffer(callStoredFunction(sqlReturnType, functionStmt, params).toString());
        }
        return null;
    }

    /**
     * Method to call function FN_SET_EO_ID
     * @param EoNm
     * @param EoType
     * @return
     */
    public StringBuffer callFunction_FN_SET_EO_ID(String EoNm, Integer EoType) {


        if (!(EoNm.equals(null) || EoType == null)) {
            try {
                String s = callStoredFunction(Types.VARCHAR, "APP.FN_SET_EO_ID(?,?,?,?,?,?)", new Object[] {
                                              EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                              EbizParams.GLBL_APP_USR_ORG(), EoNm.toString(), EoType,
                                              EbizParams.GLBL_APP_USR()
                }).toString();
                return new StringBuffer(s);

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_SET_EO_ID' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }

        }

        return null;
    }

    /**
     *  Method to call executeQuery of LOVCustomerVO
     */
    public void executeLOVCustomerVO() {
        SlsQuotVORowImpl row = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
        row.getLOVCustomerVO1().executeQuery();
    }

    /**
     * Method to call a Database function
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);

    }

    /**
     * Method to check duplicate item on a quotation
     * @param itemNm
     * @return
     */
    public Integer getItemLineRowCount(String itemNm) {
        String itmId = null;
        ViewObjectImpl impl = this.getLovItemDescFromitemId1();
        impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impl.setNamedWhereClauseParam("ItmDescBind", itemNm.toString());
        impl.executeQuery();
        Row[] row_2 = impl.getAllRowsInRange();
        if (row_2.length > 0) {
            itmId = row_2[0].getAttribute("ItmId").toString();
        }
        Integer ret = 0;
        SlsQuotItmVOImpl row = (SlsQuotItmVOImpl) this.getSlsQuotItm2();
        Row currentRow = row.getCurrentRow();
        RowSetIterator itr = row.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            if (r != currentRow) {
                Object itmIdiO = r.getAttribute("ItmId");
                StringBuilder itmIdi =
                    (itmIdiO == null ? new StringBuilder("") : new StringBuilder(itmIdiO.toString()));
                if (itmIdi.toString().equals(itmId)) {
                    ret = 1;
                    break;
                }
            }
        }
        itr.closeRowSetIterator();
        return ret;
    }

    /**
     * Method to check if the current quotation is deletable or not
     * @return
     */
    public boolean checkQuotationDeletable() {
        if (this.getSlsQuotItm2().getFilteredRows("DocId",
                                                  this.getSlsQuot1().getCurrentRow().getAttribute("DocId").toString()).length >
            0) {
            return true;
        } else {
            return false;
        }
    }

    /**
     * Method for resolving the El
     */
    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    /**
     * Container's getter for LOVItem1.
     * @return LOVItem1
     */
    public ViewObjectImpl getLOVItem1() {
        return (ViewObjectImpl) findViewObject("LOVItem1");
    }

    /**
     * Method to add itm
     * @param itmDesc
     * @param itmPrefix
     * @param itmGrpId
     * @param itmUom
     * @return
     */
    public StringBuffer callFunction_FN_INS_ITM(String itmDesc, String itmPrefix, String itmGrpId, String itmUom) {

        if (!(itmDesc.equals(null) || itmPrefix.equals(null) || itmGrpId.equals(null) || itmUom.equals(null))) {

            try {
                String s = callStoredFunction(Types.VARCHAR, "APP.FN_INS_ITM(?,?,?,?,?,?,?,?)", new Object[] {
                                              EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                              EbizParams.GLBL_APP_USR_ORG(), itmDesc.toString(), itmPrefix, itmGrpId,
                                              itmUom, EbizParams.GLBL_APP_USR()
                }).toString();
                return new StringBuffer(s);

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage(resolvElDCMsg("#{bundle['MSG.1320']}").toString()); //There have been an error in calling function 'FN_INS_ITM' !
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }

        }

        return null;
    }

    /**
     * Method to call function FN_INS_QUOTE_TR_LINE to all lines to txRuleLines
     * @param taxRuleId
     * @return
     */
    public void callFunction_FN_INS_QUOTE_TR_LINE(Integer taxRuleId) {
        //Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        //FN_INS_QUOT_TR_LINES( P_SLOC_ID NUMBER,P_CLDID IN VARCHAR2,P_HO_ORGID IN VARCHAR2,P_ORG_ID VARCHAR2,
        //                       P_DOC_ID VARCHAR2,P_ITM_ID VARCHAR2,P_TAX_RULE_ID NUMBER,P_USER_ID NUMBER,
        //                       P_TAXABLE_AMOUNT NUMBER,P_TAX_RULE_FLG VARCHAR2,P_CONV_FCTR NUMBER)

        Row currentRow = this.getSlsQuotItm2().getCurrentRow();
        if (taxRuleId != null) {
            try {
                BigDecimal s =
                    (BigDecimal) callStoredFunction(Types.NUMERIC, "SLS.FN_INS_QUOT_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                    EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                    currentRow.getAttribute("DocId").toString(),
                                                    currentRow.getAttribute("ItmId").toString(), taxRuleId,
                                                    EbizParams.GLBL_APP_USR(), currentRow.getAttribute("ItmAmtGsSp"),
                                                    currentRow.getAttribute("ItmAmtGsSp"),
                                                    currentRow.getAttribute("TaxRuleFlg").toString(),
                                                    currentRow.getAttribute("ConversionFactTrans")
                });
                Number taxAmt = new Number(s);
                Row trRow = this.getSlsQuotTr1().getCurrentRow();
                trRow.setAttribute("TaxableAmt", currentRow.getAttribute("ItmAmtGsSp"));
                trRow.setAttribute("TaxAmtSp", ADFBeanUtils.roundOff(taxAmt));

                //((SlsQuotTrVORowImpl) this.getSlsQuotTr1().getCurrentRow()).setTaxableAmt((Number) currentRow.getAttribute("ItmAmtGsSp"));
                //((SlsQuotTrVORowImpl) this.getSlsQuotTr1().getCurrentRow()).setTaxAmtSp((Number) new Number(s).round(EbizParams.GLBL_AMT_DIGIT()));

                SlsQuotVORowImpl rowQ = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
                Number convFctr = (rowQ.getCurrConvFctr() == null ? new Number(1) : rowQ.getCurrConvFctr());
                Number n = taxAmt.multiply(convFctr);
                trRow.setAttribute("TaxAmtBs", n);

                //((SlsQuotTrVORowImpl) this.getSlsQuotTr1().getCurrentRow()).setAttribute("TaxAmtBs",
                //                                                                         (new Number(s).multiply((Number) ((SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow()).getAttribute("CurrConvFctr")).round(AMT_DIGIT)));

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage(resolvElDCMsg("#{bundle['MSG.1321']}").toString()); //There have been an error in calling function 'FN_INS_QUOTE_TR_LINE' !
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }
    }

    /**
     * Method to call function FN_INS_QUOTE_TR_LINE to all lines to txRuleLines
     * @param taxRuleId
     * @return
     */
    public void callFunction_ForQuotationWiseTax_FN_INS_QUOTE_TR_LINE(Integer taxRuleId) {
        RowSetIterator rsi = this.getSlsQuotItm2().createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            next.setAttribute("TaxRuleFlg", "Y");
            Row tr = null;
            Number taxableAmt = new Number(0);
            if (next.getAttribute("ItmId") != null) {
                SlsQuotTrVOImpl impl = this.getSlsQuotTr3();
                RowQualifier rQ = new RowQualifier(impl);
                rQ.setWhereClause("ItmId='" + next.getAttribute("ItmId").toString() + "'");
                Row[] filteredRows = impl.getFilteredRows(rQ);
                if (filteredRows.length > 0) {
                    tr = filteredRows[0];
                } else {
                    Row createRow = impl.createRow();
                    createRow.setAttribute("ItmId", next.getAttribute("ItmId"));

                    impl.insertRow(createRow);
                    tr = createRow;
                }

                tr.setAttribute("TaxRuleId", taxRuleId);
                tr.setAttribute("SrNo", 0);
                if (next.getAttribute("ItmAmtGsSp") != null) {
                    taxableAmt = (Number) next.getAttribute("ItmAmtGsSp");
                }
                if (taxRuleId != null) {
                    try {
                        SlsQuotVORowImpl currentRow = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();

                        BigDecimal s =
                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                            "SLS.FN_INS_QUOT_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            EbizParams.GLBL_APP_SERV_LOC(),
                                                            EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                                            EbizParams.GLBL_APP_USR_ORG(), currentRow.getDocId(),
                                                            next.getAttribute("ItmId").toString(), taxRuleId,
                                                            EbizParams.GLBL_APP_USR(), taxableAmt, taxableAmt, "Y",
                                                            currentRow.getCurrConvFctr()
                        });
                        if (taxableAmt != null) {
                            tr.setAttribute("TaxableAmt", taxableAmt);
                        }
                        if (s != null) {
                            tr.setAttribute("TaxAmtSp", (Number) new Number(s).round(EbizParams.GLBL_AMT_DIGIT()));
                            tr.setAttribute("TaxAmtBs",
                                            ((new Number(s).multiply(currentRow.getCurrConvFctr()))).round(EbizParams.GLBL_AMT_DIGIT()));
                        }
                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage(resolvElDCMsg("#{bundle['MSG.1322']}").toString()); //There have been an error in calling function 'FN_INS_QUOTE_TR_LINE' in case of QuoataionWiseTax !
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                }
            }
        }
        rsi.closeRowSetIterator();
    }

    /**
     * Method to get max serial no of a new item
     * @return
     */
    public void calculateandSetSrNoInSlsItm() {
        Integer maxNo = 0;
        RowSetIterator createRowSetIterator = this.getSlsQuotItm2().createRowSetIterator(null);

        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            if (next != this.getSlsQuotItm2().getCurrentRow()) {
                if (maxNo < (Integer) next.getAttribute("SrNo")) {
                    maxNo = (Integer) next.getAttribute("SrNo");
                }
            }
        }
        if (maxNo == 0) {
            ((SlsQuotItmVORowImpl) (this.getSlsQuotItm2().getCurrentRow())).setAttribute("SrNo", 1);
        } else {
            ((SlsQuotItmVORowImpl) (this.getSlsQuotItm2().getCurrentRow())).setAttribute("SrNo", maxNo + 1);
        }
        createRowSetIterator.closeRowSetIterator();
    }

    /**
     * Method to get max serial no of a new tax rule
     * @return
     */
    public void calculateandSetSrNoInSlsItmTr() {
        Integer maxNo = 0;
        RowSetIterator createRowSetIterator = this.getSlsQuotTr1().createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            //System.out.println("Max"+maxNo);
            if (next != this.getSlsQuotTr1().getCurrentRow()) {
                if (maxNo < (Integer) next.getAttribute("SrNo")) {
                    maxNo = (Integer) next.getAttribute("SrNo");
                }
            }
        }
        if (maxNo == 0) {
            ((SlsQuotTrVORowImpl) (this.getSlsQuotTr1().getCurrentRow())).setAttribute("SrNo", 1);
        } else {
            ((SlsQuotTrVORowImpl) (this.getSlsQuotTr1().getCurrentRow())).setAttribute("SrNo", maxNo + 1);
        }
        createRowSetIterator.closeRowSetIterator();
    }

    /**
     * Method to get max serial no of a new tax rule
     * @return
     */
    public void calculateandSetSrNoTrForQuotationWiseTr() {
        ((SlsQuotTrVORowImpl) this.getSlsQuotTr3().getCurrentRow()).setSrNo(0);
    }

    /**
     * Method to get TaxRule rowcount to decide to create newRow or not
     * @return
     */
    public Integer checkIfTaxRuleExistOrNot() {
        // System.out.println("ROWCOUNT: in v method" + this.getSlsQuotTr1().getRowCount());
        return this.getSlsQuotTr1().getRowCount();
    }

    /**
     * Method to get QuotatoinwiseTaxRule rowcount to decide to create newRow or not
     * @return
     */
    public Integer checkIfQuotationWiseTaxRuleExistOrNot() {
        //System.out.println("ROWCOUNT:" + this.getSlsQuotTr3().getRowCount());
        return this.getSlsQuotTr3().getRowCount();
    }

    /**
     * Container's getter for SlsQuotTr1.
     * @return SlsQuotTr1
     */
    public SlsQuotTrVOImpl getSlsQuotTr1() {
        return (SlsQuotTrVOImpl) findViewObject("SlsQuotTr1");
    }

    /**
     * Container's getter for ItemTOTrVL1.
     * @return ItemTOTrVL1
     */
    public ViewLinkImpl getItemTOTrVL1() {
        return (ViewLinkImpl) findViewLink("ItemTOTrVL1");
    }

    /**
     * Container's getter for SlsQuotTrLines1.
     * @return SlsQuotTrLines1
     */
    public ViewObjectImpl getSlsQuotTrLines1() {
        return (ViewObjectImpl) findViewObject("SlsQuotTrLines1");
    }

    /**
     * Container's getter for TrTOTrLinesVL1.
     * @return TrTOTrLinesVL1
     */
    public ViewLinkImpl getTrTOTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("TrTOTrLinesVL1");
    }

    /**
     *  execute all viewObject
     */
    public void executeAllViews() {
        this.getSlsQuotItm2().executeQuery();
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotTrLines1().executeQuery();
    }

    /**
     *  execute taxRule and taxRuleLine
     */
    public void executeTrAndTrLines() {
        this.getDBTransaction().postChanges();
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotTrLines1().executeQuery();
    }

    /**
     *  execute taxRule and taxRuleLine for QuotationWise tax
     */
    public void executeTrAndTrLinesForQuotationWiseTax() {
        this.getDBTransaction().postChanges();
        this.getSlsQuotTr3().executeQuery();
        this.getSlsQuotTrLines2().executeQuery();
    }

    /**
     * Method to remove tax rule and taxlines from item
     */
    public void removeItmTaxRuleandTaxRuleLines() {
        //  System.out.println("TRL1 "+this.getSlsQuotTrLines1().getRowCount());
        RowSetIterator createRowSetIteratorTrLines = this.getSlsQuotTrLines1().createRowSetIterator(null);
        while (createRowSetIteratorTrLines.hasNext()) {
            Row next = createRowSetIteratorTrLines.next();
            next.setAttribute("SrNo", -20);
            next.remove();
        }
        createRowSetIteratorTrLines.closeRowSetIterator();
        this.getSlsQuotTrLines1().executeQuery();
        //System.out.println("TRL2 "+this.getSlsQuotTrLines1().getRowCount());
        //System.out.println("TR1 "+this.getSlsQuotTr1().getRowCount());
        RowSetIterator createRowSetIteratorTr = this.getSlsQuotTr1().createRowSetIterator(null);
        while (createRowSetIteratorTr.hasNext()) {
            Row next = createRowSetIteratorTr.next();
            next.setAttribute("TaxRuleId", -2);
            next.remove();
        }
        createRowSetIteratorTr.closeRowSetIterator();
        this.getSlsQuotTr1().executeQuery();
        //System.out.rintln("TR2 "+this.getSlsQuotTr1().getRowCount());
        this.getSlsQuotItm2().getCurrentRow().setAttribute("TaxRuleFlg", "N");
        this.getDBTransaction().postChanges();
    }

    /**
     * Method to remove tax rule and taxlines from Quotation
     */
    public void removeQuotTaxRuleandTaxRuleLines() {
        //System.out.println("TRL1 "+this.getSlsQuotTrLines1().getRowCount());
        RowSetIterator createRowSetIteratorTrLines = this.getSlsQuotTrLines2().createRowSetIterator(null);
        while (createRowSetIteratorTrLines.hasNext()) {
            Row next = createRowSetIteratorTrLines.next();
            next.remove();
        }
        createRowSetIteratorTrLines.closeRowSetIterator();
        this.getSlsQuotTrLines1().executeQuery();
        //System.out.println("TRL2 "+this.getSlsQuotTrLines1().getRowCount());
        //System.out.println("TR1 "+this.getSlsQuotTr1().getRowCount());
        RowSetIterator createRowSetIteratorTr = this.getSlsQuotTr3().createRowSetIterator(null);
        while (createRowSetIteratorTr.hasNext()) {
            Row next = createRowSetIteratorTr.next();
            next.remove();
        }
        createRowSetIteratorTr.closeRowSetIterator();
        this.getSlsQuotTr3().executeQuery();
        //System.out.println("TR2 "+this.getSlsQuotTr1().getRowCount());

    }

    /**
     * check if item wise tax is applied correctly or not.
     * @return
     */
    public boolean isItmWiseAppliedCorrectly() {
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotItm2().executeQuery();
        SlsQuotVORowImpl row = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
        Number taxableamt = StaticValue.NUMBER_ZERO;
        Number totval = StaticValue.NUMBER_ZERO;
        this.getSlsQuotTr3().executeQuery();
        this.getSlsQuotTr3().setRangeSize(-1);
        Row[] filteredRows = this.getSlsQuotTr3().getAllRowsInRange();
        System.out.println("FIltered rows : " + filteredRows.length);
        if (row.getTaxRuleFlg().equals("I") && filteredRows.length != 0) {
            System.out.println("-------*************************------");
            for (Row r : filteredRows) {
                taxableamt = ((Number) r.getAttribute("TaxableAmt")).add(taxableamt);
            }
            SlsQuotItmVOImpl impl = getSlsQuotItm2();
            RowSetIterator ctr = impl.createRowSetIterator(null);
            while (ctr.hasNext()) {
                Row rw = ctr.next();
                Object taxRulFlgO = rw.getAttribute("TaxRuleFlg");
                String taxRulFlg = (taxRulFlgO == null ? "N" : taxRulFlgO.toString());
                if ("Y".equals(taxRulFlg)) {
                    Object itmAmtGsSpO = rw.getAttribute("ItmAmtGsSp");
                    if (itmAmtGsSpO != null) {
                        totval = totval.add((Number) itmAmtGsSpO);
                    }
                }
            }
            ctr.closeRowSetIterator();

            if (((Number) totval).compareTo(taxableamt) != 0) {
                StringBuilder msg = new StringBuilder("<ul>");
                msg.append("<li>Previous Taxable Amount on which tax have been calculated : ");
                msg.append(taxableamt);
                msg.append(" </li>");
                msg.append("<li>New Taxable Amount that exists currently : ");
                msg.append(totval);
                msg.append(" </li>");
                msg.append("</ul>");
                msg.append("There is a difference between the above two amounts. Please Re-apply tax to recalcuate tax on new Taxable Amount ! ");
                ADFModelUtils.showFormattedFacesMessage("There have been mismatch in Current Taxable Amount and Taxable Amount (Old Taxable Amount) on which tax was calculated !",
                                                        msg.toString(), FacesMessage.SEVERITY_ERROR);
                System.out.println("-------**********@@@@@@@***************------");
                return false;
            }
        } else if (filteredRows.length == 0 && row.getTaxRuleFlg().equalsIgnoreCase("I")) {
            //  System.out.println("filteredRows.length" + filteredRows.length + " row.getTaxRuleFlg()" +
            //                      row.getTaxRuleFlg());
            System.out.println("-------*************234567876543************------");
            ADFModelUtils.showFormattedFacesMessage("Tax Type Selected is as Item wise!",
                                                    "Tax on any of the Item have not been applied.</br></br> Please Apply Item wise Tax on atleast one Item.",
                                                    FacesMessage.SEVERITY_ERROR);
            System.out.println("-------**********&&&&&&&&&***************------");
            return false;
        }
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotItm2().executeQuery();

        return true;
    }

    /**
     * check if item wise tax is applied correctly or not.
     * @return
     */
    public boolean isOrderWiseAppliedCorrectly() {
        // Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());

        EbizParams.GLBL_AMT_DIGIT();
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotItm2().executeQuery();
        SlsQuotVORowImpl row = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
        Number taxableamt = StaticValue.NUMBER_ZERO;
        Number taxamt = StaticValue.NUMBER_ZERO;
        Number totval = StaticValue.NUMBER_ZERO;

        Row[] filteredRows = this.getSlsQuotTr3().getAllRowsInRange();
        // System.out.println("row count :" + filteredRows.length);
        if (row.getTaxRuleFlg().equals("O") && filteredRows.length != 0) {
            for (Row r : filteredRows) {
                taxableamt = ((Number) r.getAttribute("TaxableAmt")).add(taxableamt);
                //      System.out.println("Taxable Amt " + taxableamt);
            }
            totval = row.getTotalGrossAmtTrans();
            //   System.out.println("Total Value is " + taxableamt);
            //   System.out.println("Quot Value is " + row.getTotalGrossAmtTrans());
            //   System.out.println("row.getQuotAmtSp()).compareTo(totval" +
            //                      ((Number) row.getTotalGrossAmtTrans()).compareTo(totval) + " row.getQuotAmtSp()=" +
            //                      row.getQuotAmtSp());
            if (((Number) row.getTotalGrossAmtTrans()).compareTo(taxableamt) != 0) {
                StringBuilder msg = new StringBuilder("<ul>");
                msg.append("<li>Previous Taxable Amount on which tax have been calculated : ");
                msg.append(taxableamt);
                msg.append(" </li>");
                msg.append("<li>New Taxable Amount that exists currently : ");
                msg.append(totval);
                msg.append(" </li>");
                msg.append("</ul>");
                msg.append("There is a difference between the above two amounts. Please Re-apply tax to recalcuate tax on new Taxable Amount ! ");
                ADFModelUtils.showFormattedFacesMessage("There have been mismatch in Current Taxable Amount and Taxable Amount (Old Taxable Amount) on which tax was calculated !",
                                                        msg.toString(), FacesMessage.SEVERITY_ERROR);
                return false;
            }
        } else if (filteredRows.length == 0 &&
                   row.getTaxRuleFlg().equalsIgnoreCase("O")) {
            //  System.out.println("filteredRows.length" + filteredRows.length + " row.getTaxRuleFlg()" +
            //                      row.getTaxRuleFlg());
            ADFModelUtils.showFormattedFacesMessage("Tax Type Selected is as Quotation wise!",
                                                    "Quotation wise Tax is have not been applied.</br></br> Please Apply Quotation wise Tax.",
                                                    FacesMessage.SEVERITY_ERROR);
            return false;
        }


        // System.out.println("returned true");
        return true;


    }

    /**
     *  Method to set initialBindVariables in searchPage
     */
    public void setInitialBindVariables() {
        ViewObjectImpl checkFromPrfVo = this.getCheckFromPrfVo();
        checkFromPrfVo.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        checkFromPrfVo.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        checkFromPrfVo.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        checkFromPrfVo.executeQuery();

        searchQuotationVOImpl impl = (searchQuotationVOImpl) this.getsearchQuotation1();
        impl.setcldIdBind(EbizParams.GLBL_APP_CLD_ID());
        impl.setslocIdBind(EbizParams.GLBL_APP_SERV_LOC());
        impl.setorgIdBind(EbizParams.GLBL_APP_USR_ORG());
        impl.setquotNmBind("-1");
        impl.executeQuery();
        Integer curr = 0;
        try {
            curr = (Integer) callStoredFunction(Types.INTEGER, "APP.PKG_APP.GET_ORG_DEF_CURR_BS1(?)", new Object[] {
                                                EbizParams.GLBL_APP_USR_ORG() });
            //    System.out.println("Curr id bs " + curr);
        } catch (Exception e) {
            e.printStackTrace();
            FacesMessage message =
                new FacesMessage(resolvElDCMsg("#{bundle['MSG.1323']}").toString()); //There have been an error in calling function 'GET_TXN_ID' !
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }
        searchVOImpl searchVO = this.getsearch1();
        Row[] allRowsInRange = searchVO.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            allRowsInRange[0].setAttribute("CurrIdBs", curr);
        }
    }


    /**
     *  Method to set executeParams in quotation page
     */
    public void executeWithBindVariablesSlsQuoteVo() {
        //refereshAllVoOnCommit();
        StringBuffer Docid = null;
        searchQuotationVORowImpl r = ((searchQuotationVORowImpl) this.getsearchQuotation1().getCurrentRow());
        if (r != null) {
            Docid = new StringBuffer(r.getDocId());
        } else {
            try {
                Docid = new StringBuffer(resolvEl("#{pageFlowScope.DOC_ID}").toString());
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling taskflow 'sls-quotation-TF'!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }

        }
        this.getDBTransaction().rollback();
        SlsQuotVOImpl impl = (SlsQuotVOImpl) this.getSlsQuot1();
        impl.setCldIdBind(EbizParams.GLBL_APP_CLD_ID());
        impl.setSlocIdBind(EbizParams.GLBL_APP_SERV_LOC());
        impl.setOrgIdBind(EbizParams.GLBL_APP_USR_ORG());
        impl.setHoOrgIdBind(EbizParams.GLBL_HO_ORG_ID());

        if (Docid != null) {
            impl.setDocIdBind(Docid.toString());
            impl.executeQuery();
            //System.out.println("DOCID : " + Docid);
        }

    }

    /**
     *  Method to set currentRow after save in quotation page
     */
    public void setCurrentRowInSlsQuoteVo(StringBuffer DocId) {
        //refereshAllVoOnCommit();
        SlsQuotVOImpl impl = (SlsQuotVOImpl) this.getSlsQuot1();
        //System.out.println("DOCID : " + DocId);
        impl.setCldIdBind(EbizParams.GLBL_APP_CLD_ID());
        impl.setSlocIdBind(EbizParams.GLBL_APP_SERV_LOC());
        impl.setOrgIdBind(EbizParams.GLBL_APP_USR_ORG());
        impl.setHoOrgIdBind(EbizParams.GLBL_HO_ORG_ID());
        impl.setDocIdBind(DocId.toString());
        impl.executeQuery();
    }

    public StringBuffer getSlsQuotCurrRowDocId() {
        SlsQuotVORowImpl currentRow = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
        return new StringBuffer(currentRow.getDocId());
    }

    /**
     * Method to call function to insert scheme in SlsQuotItmSch table
     * @param schId
     */
    public void callFunction_FN_INS_QUOT_SCH_ITM(StringBuffer schId) {
        //   System.out.println("Scheme Id in AMImpl"+schId);
        this.getSlsQuotItm2().executeQuery();
        this.getSlsQuotItm2().executeQuery();
        String discTypeSub = "A";
        Object discValSub = 0;
        Number currRate = new Number(1);
        Row r = this.getSlsQuot1().getCurrentRow();
        if (r != null) {
            Object cur = r.getAttribute("CurrConvFctr");
            if (cur != null) {
                currRate = (Number) cur;
            }
        }

        //FN_INS_QUOT_SCHM_ITM (P_CLDID  VARCHAR2,P_SLOCID NUMBER,P_ORGID VARCHAR2,P_HO_ORGID VARCHAR2,
        //                     P_DOCID VARCHAR2,P_ITMID VARCHAR2,P_ITMUOM VARCHAR2,P_QTY NUMBER,P_SCH_ID VARCHAR2,
        //                     P_USR_ID NUMBER,P_USR_DT DATE)
        //  this.getSlsQuotItmSch1().executeQuery();
        try {
            SlsQuotItmVORowImpl currentRow = (SlsQuotItmVORowImpl) this.getSlsQuotItm2().getCurrentRow();
            Object result = callStoredFunction(Types.VARCHAR, "SLS.FN_INS_QUOT_SCHM_ITM(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                               currentRow.getDocId(), currentRow.getItmId(), currentRow.getItmUom(),
                                               currentRow.getQuotQty(), currRate, schId.toString(),
                                               EbizParams.GLBL_APP_USR(), r.getAttribute("DocDt")
            });
            System.out.println("Function called " + result);
            // this.getSlsQuotItmSch1().executeQuery();


            if (result != null && result.toString().length() > 1) {
                String r1 = result.toString();
                discTypeSub = r1.substring(0, 1);
                System.out.println("Discount type is <<--- " + discTypeSub);
                discValSub = r1.substring(1);
                System.out.println("Discount Value is <<-- " + discValSub);

                SlsQuotItmVORowImpl itmRow = (SlsQuotItmVORowImpl) this.getSlsQuotItm2().getCurrentRow();

                itmRow.setItmDiscTyp(discTypeSub);
                Number discValue = new Number(0);
                try {
                    discValue = new Number(discValSub);
                    //(Number) (discValSub);
                    itmRow.setItmDiscVal(discValue);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            // currentRow.setAttribute("ItmDiscTyp", discTypeSub);
            //   System.out.println("Discount value before setting"+discTypeSub);
            //  currentRow.setAttribute("ItmDiscVal", discValSub);
            //   System.out.println("Current row disc val"+discValSub);
            currentRow.setAttribute("SchmFlg", "Y");
            //   currentRow.setAttribute("SrNo",(Integer) (currentRow.getAttribute("SrNo"))+1);
            //  System.out.println("Current row disc val --->"+currentRow.getAttribute("ItmDiscVal"));
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'FN_INS_QUOT_SCH_ITM' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }


        Row currentRow = this.getSlsQuotItm2().getCurrentRow();
        StringBuffer itmId = new StringBuffer("");
        if (currentRow.getAttribute("ItmId") != null) {
            itmId = new StringBuffer(currentRow.getAttribute("ItmId").toString());
        }


        /*
        RowSet lovScheme = itmRow.getLOVSchemeVO1();
        System.out.println("RowCOunt Before: " + lovScheme.getEstimatedRowCount());
        lovScheme.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        lovScheme.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        lovScheme.setNamedWhereClauseParam("ItmIdBind", itmId.toString());
        lovScheme.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        lovScheme.executeQuery();
        System.out.println("RowCOunt After: " + lovScheme.getEstimatedRowCount());

        System.out.println("Schme Id is : " + schId);


        int i = lovScheme.getRangeSize();
        lovScheme.setRangeSize(-1);
        Row[] allRowsInRange = lovScheme.getFilteredRows("SchmId", schId.toString());

        //  System.out.println("RowCOunt Returned: " + allRowsInRange.length);
        if (currentRow != allRowsInRange[0]) {
            if (allRowsInRange.length >= 1) {
                Object discTyp = allRowsInRange[0].getAttribute("DiscType");
                Object discVal = allRowsInRange[0].getAttribute("DiscVal");
                String s = (discTyp == null ? "A" : discTyp.toString());
                Number v = (discVal == null ? new Number(0) : (Number) discVal);
                itmRow.setItmDiscTyp(s);
                itmRow.setItmDiscVal(v);
                   System.out.println("Setting Discount val : " + v + " with type : " + s);
            } else {
                itmRow.setItmDiscTyp(discTypeSub);
                Number discValue = (Number) (discValSub);
                itmRow.setItmDiscVal(discValue);
                System.out.println("Setting Discount val :---->> " + discTypeSub + " with type :---->> " + discValue);
            }
              System.out.println("Into the scheme");
            lovScheme.setRangeSize(i);
        }
        */

        this.getSlsQuotItmSch1().executeQuery();
        this.getSlsQuotItm2().executeQuery();
    }

    /**
     *  Method to remove schemes from the SlsQuotItmSch
     */
    public void removeSchemeFromItem() {
        /* RowSetIterator createRowSetIteratorTrLines = this.getSlsQuotItmSch1().createRowSetIterator(null);
        //System.out.println("Rowcount itmScheme "+createRowSetIteratorTrLines.getRowCount());
        while (createRowSetIteratorTrLines.hasNext()) {

            Row next = createRowSetIteratorTrLines.next();
            next.remove();
        }
        createRowSetIteratorTrLines.closeRowSetIterator(); */
        this.getSlsQuotItm2().executeQuery();
        this.getSlsQuotItm2().executeQuery();

        ViewObject slsItm = this.getSlsQuotItm2();
        Row itmRow = slsItm.getCurrentRow();
        ViewObject schm = this.getSlsQuotItmSch1();
        String docId = (String) itmRow.getAttribute("DocId");
        String itmId = (String) itmRow.getAttribute("ItmId");
        String schmId = (String) itmRow.getAttribute("SchmId");
        //  System.out.println("Scheme Id in del function is  "+schmId);

        Object result = callStoredFunction(Types.NUMERIC, "SLS.FN_SCHM_QUOT_DEL(?,?,?,?,?,?,?,?)", new Object[] {
                                           EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                           EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), docId, schmId,
                                           itmId, EbizParams.GLBL_APP_USR()
        });
        //   System.out.println("Result is " + result);

        itmRow.setAttribute("SchmFlg", "N");
        schm.executeQuery();

        this.getSlsQuotItmSch1().executeQuery();
    }

    /**
     *  Method to search on  searchQuotation on the basis of following params
     *
     */
    public void searchQuotationViewCriteria() {
        searchQuotationVOImpl impl = (searchQuotationVOImpl) this.getsearchQuotation1();
        searchVORowImpl currentRow = (searchVORowImpl) this.getsearch1().getCurrentRow();
        impl.setslocIdBind(EbizParams.GLBL_APP_SERV_LOC());
        impl.setcldIdBind(EbizParams.GLBL_APP_CLD_ID());
        impl.setorgIdBind(EbizParams.GLBL_APP_USR_ORG());
        impl.seteoNmBind(currentRow.getEoName());
        impl.setquoteCurrIdBind(currentRow.getCurrIdTrans());
        impl.setquotFromDateBind(currentRow.getStartDateTrans());
        Timestamp dt = currentRow.getEndDateTrans();
        if (currentRow.getEndDateTrans() != null) {
            //dt = (Timestamp)currentRow.getEndDateTrans();
            Date date;
            try {
                date = dt.dateValue();
                date.setDate(date.getDate() + 1);
                //  System.out.println("Date is :" + date);
                dt = new Timestamp(date);
            } catch (SQLException e) {
            }
        }
        impl.setquotToDateBind(dt);
        impl.setquoteStatusBind(currentRow.getStatusTrans());
        impl.setquotPaymentModeBind(null);
        //impl.setquoteEoTypeBind(currentRow.getEoTypeTrans());
        impl.setquoteQuantityTopBind(currentRow.getTotQuantityTopTrans());
        impl.setquoteQuantityBottom(currentRow.getTotQuantityBottomTrans());
        impl.setquoteNoOfItmsTopBind(currentRow.getNoOfItmTopTrans());
        impl.setquoteNoOfItmsBottonBind(currentRow.getNoOfItmBottomTrans());
        impl.setquoteTotValueTopBind(currentRow.getTotValueTopTrans());
        impl.setquoteTotValueBottomBind(currentRow.getTotValueBottomTrans());
        impl.setquotNmBind(currentRow.getQuotNmTrans());

        impl.executeQuery();
    }

    /**
     * Method to reset searchQuotationView criteria
     */
    public void resetQuotationViewCriteria() {
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());

        searchQuotationVOImpl impl = (searchQuotationVOImpl) this.getsearchQuotation1();
        impl.setslocIdBind(-1);
        impl.setcldIdBind(cldId.toString());
        impl.setorgIdBind(orgId.toString());
        impl.seteoNmBind(null);
        impl.setquoteCurrIdBind(null);
        impl.setquotToDateBind(null);
        impl.setquotFromDateBind(null);
        impl.setquoteStatusBind(null);
        impl.setquoteEoTypeBind(null);
        impl.setquotToDateBind(null);
        impl.setquoteQuantityTopBind(null);
        impl.setquoteQuantityBottom(null);
        impl.setquoteNoOfItmsTopBind(null);
        impl.setquoteNoOfItmsBottonBind(null);
        impl.setquoteTotValueTopBind(null);
        impl.setquoteTotValueBottomBind(null);
        impl.setquotNmBind(null);

        this.getsearch1().getCurrentRow().setAttribute("EoName", null);
        this.getsearch1().getCurrentRow().setAttribute("StartDateTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("EndDateTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("NoOfItmTopTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("NoOfItmBottomTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("TotQuantityTopTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("TotQuantityBottomTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("TotValueTopTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("TotValueBottomTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("StatusTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("CurrIdTrans", null);
        this.getsearch1().getCurrentRow().setAttribute("QuotNmTrans", null);
        this.getsearch1().executeQuery();
        impl.executeQuery();
    }

    /**
     * Method to call function FN_INS_QUOT_CALC to insert data in slsCalc and
     *        to call function GEN_DISP_DOC_ID to insert DOC_DISP_ID in slsQuot
     * @param DocId
     */
    public void callFunction_FN_INS_QUOT_CALC(StringBuffer DocId) {
        //  System.out.println("\n..................came in impl..................\n");
        Integer fyId = 0;
        Integer currIdSp = 0;
        Integer currIdBs = 0;
        Number cRate = new Number(0);
        Row crow = this.getSlsQuot1().getCurrentRow();
        if (crow != null) {
            fyId = (Integer) crow.getAttribute("FyId");
            currIdSp = (Integer) crow.getAttribute("CurrIdSp");
            currIdBs = (Integer) crow.getAttribute("CurrIdBs");
            cRate = (Number) crow.getAttribute("CurrConvFctr");
            //System.out.println(currIdBs+" "+currIdSp+" "+cRate);
            //FN_INS_QUOT_CALC(P_SLOC NUMBER,P_HO_ORGID VARCHAR2,P_ORG VARCHAR2,P_DOC VARCHAR2,
            //P_USR NUMBER,P_AMDNO NUMBER,P_CURR_ID_SP NUMBER,P_CURR_ID_BS NUMBER,P_CONV_RATE NUMBER)
            //                                              p_sloc number,
            //                                             P_CLD VARCHAR2,
            //                                             p_HO_org varchar2,
            //                                             p_org varchar2,
            //                                             p_doc varchar2,
            //                                             P_USR NUMBER,
            //                                             p_AMDNO NUMBER default 0

            try {
                callStoredFunction(Types.NUMERIC, "SLS.FN_INS_QUOT_CALC(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), DocId.toString(),
                                   EbizParams.GLBL_APP_USR(), 0, currIdSp, currIdBs, cRate
                });
                //System.out.println("CALC");
                //GEN_DISP_DOC_ID(1,'0000','01',21502,'000B.01.01.53FE.0000.2CB319D89C6392A',NULL,'SLS$QUOT');
                // StringBuffer QUOTE_DOC_NM =
                //     new StringBuffer((callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)",
                //                                          new Object[] { slocId, cldId.toString(), orgId.toString(),
                //                                                         21502, DocId.toString(), null, "SLS$QUOT",
                //                                                         fyId })).toString());
                // System.out.println("generated Id is:  "+QUOTE_DOC_NM+" ----------------");
                // ((SlsQuotVORowImpl)this.getSlsQuot1().getCurrentRow()).setQuotId(QUOTE_DOC_NM.toString());
                this.getSLSQuotCalc1().executeQuery();
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'FN_INS_QUOT_CALC' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }
        }


    }
    /*
     * Method for generation QuotationId. 20 march 2014
    */

    public void generateQuotId(StringBuffer DocId) {
        /*  Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        Integer AMT_DIGIT = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
         */


        EbizParams.GLBL_APP_SERV_LOC();
        EbizParams.GLBL_APP_USR();
        EbizParams.GLBL_APP_CLD_ID();
        EbizParams.GLBL_APP_USR_ORG();
        EbizParams.GLBL_HO_ORG_ID();
        EbizParams.GLBL_AMT_DIGIT();


        Integer fyId = 0;
        Row crow = this.getSlsQuot1().getCurrentRow();

        /* if (((SlsQuotVORowImpl) crow).getQuotId() == null && crow != null) {
            fyId = (Integer) crow.getAttribute("FyId");
            // System.out.println("Came in If condition .. ... . ");
            try {
                //   System.out.println("Values which are going in the function are: " +   EbizParams.GLBL_APP_SERV_LOC() + " " + EbizParams.GLBL_APP_CLD_ID() + "  " +
                //                      EbizParams.GLBL_APP_USR_ORG() + "  " + fyId);
                String QUOTE_DOC_NM =
                    new String((callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                   EbizParams.GLBL_APP_USR_ORG(), 21502, null, null, "SLS$QUOT", fyId
                    })).toString());
                //    System.out.println("QUOTE_DOC_NM in inpl"+QUOTE_DOC_NM);
                ((SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow()).setAttribute("QuotId",
                                                                                     QUOTE_DOC_NM); //.setQuotId(QUOTE_DOC_NM.toString());
                String Quot = ((SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow()).getQuotId();
                //      System.out.println("Quot Id is "+Quot);
                // this.getDBTransaction().postChanges();

                //   System.out.println("The genearted Id is:   " + QUOTE_DOC_NM + "----------------");
                //   System.out.println("");
            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function '' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            } */
        //  .. This will not work fine are Post Changes in added on tax delete
    }

    /**
     * Method to check if the item exists for a quotation.
     * Modified by Mousham
     */
    public boolean isItemExistsForQuot() {
        ViewObjectImpl impl = this.getSlsQuot1();
        impl.getCurrentRow().getAttribute("TotalGrossAmtTrans");
        RowSetIterator itr = getSlsQuotItm2().createRowSetIterator(null);
        Set<String> itmlist = new HashSet<String>();
        while (itr.hasNext()) {
            Row r = itr.next();
            String itm = r.getAttribute("ItmId") == null ? null : r.getAttribute("ItmId").toString();
            if (itm != null) {
                itmlist.add(itm);
            }
        }
        Row[] totalItmRow = getSlsQuotItm2().getAllRowsInRange();
        System.out.println("itemrowcount :" + itmlist.size() + " totoal row -->>" + totalItmRow);
        Row r = getSlsQuotItm2().getCurrentRow();
        Integer itmCuunt = 1;
        if (r != null) {
            itmCuunt =
                getSlsQuotItm2().getCurrentRow().getAttribute("ItmId") == null ? 1 :
                getSlsQuotItm2().getCurrentRow().getAttribute("ItmId") == "" ? 1 : 0;
        }
        if (itmCuunt == 1) {
            return false;
        } else if (itmlist.size() == totalItmRow.length) {
            return true;
        } else {
            return false;
        }

    }

    /**
     * Method to check if  any itemId is blank in the itemsLine
     * @return
     */
    public boolean isItemNmBlank() {

        RowSetIterator cr = this.getSlsQuotItm2().createRowSetIterator(null);
        while (cr.hasNext()) {
            SlsQuotItmVORowImpl next = (SlsQuotItmVORowImpl) cr.next();
            if (next.getItmId() == null) {
                cr.closeRowSetIterator();
                return true;
            } else {
                cr.closeRowSetIterator();
                return false;
            }
        }
        return false;


    }

    /**
     * Method to get attributes of current row of SlsItem
     * @param attribute
     * @return
     */
    public Number getItemCurrentRowAttribute(StringBuffer attribute) {
        return (Number) this.getSlsQuotItm2().getCurrentRow().getAttribute(attribute.toString());
    }

    /**
     * Method to validate Quotation discount value.
     * @param discVal
     * @return
     */
    public boolean isQuotDiscValueValid(Number discVal) {
        Number n = new Number(0);
        SlsQuotVORowImpl row = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
        RowSetIterator createRowSetIterator = null;
        try {
            createRowSetIterator = this.getSlsQuotItm2().createRowSetIterator(null);
            while (createRowSetIterator.hasNext()) {
                Row next = createRowSetIterator.next();
                n = n.add((Number) next.getAttribute("ItmAmtSp"));
            }
            if (row.getTaxRuleFlg().equalsIgnoreCase("O")) {
                if (row.getTaxAfterDiscFlg().equalsIgnoreCase("N")) {
                    n = n.add(row.getTotalTaxAmount());
                }
            }
            createRowSetIterator.closeRowSetIterator();
        } catch (Exception e) {

            //System.out.println("new number returns to zero");
        } finally {
            createRowSetIterator.closeRowSetIterator();
        }
        if (n.compareTo(new Number(0)) == 0) {
            return true;
        } else if (n.compareTo(new Number(discVal)) == -1) {
            return false;
        } else {
            return true;
        }

    }

    /**
     * Method to Create and Insert a row in a SlsQuotTnc1 with TncId
     * @param TnCId
     */
    public void createInsertRowAndSetVarsInSlsTnC1(Integer TnCId) {
        SlsQuotTncVORowImpl row = (SlsQuotTncVORowImpl) this.getSlsQuotTnc1().createRow();
        // System.out.println("Tnc Id ");
        row.setTncId(TnCId);
        this.getSlsQuotTnc1().insertRow(row);
    }

    public boolean isSelectedTnCAlreadyAdded(Integer TnCId) {
        RowSetIterator createRowSetIterator = this.getSlsQuotTnc1().createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            Integer i = (Integer) next.getAttribute("TncId");
            if (i == TnCId) {
                createRowSetIterator.closeRowSetIterator();
                return true;
            }
        }
        createRowSetIterator.closeRowSetIterator();
        return false;
    }

    /**
     * Check total item value precision
     * @param total
     * @return
     */
    public boolean isItemTotalPrecisionOk(Number m) {
        SlsQuotItmVORowImpl row = (SlsQuotItmVORowImpl) this.getSlsQuotItm2().getCurrentRow();
        Number n = ((Number) m.mul(row.getItmPrice())).multiply(row.getConversionFactTrans());
        n = n.add(row.getTaxAmountTrans());
        boolean b = isPrecisionValid(26, 6, n);
        return b;
    }

    /**
     * Method to check precision
     * @param precision
     * @param scale
     * @param total
     * @return
     */
    public Boolean isPrecisionValid(Integer precision, Integer scale, Number total) {
        JboPrecisionScaleValidator vc = new JboPrecisionScaleValidator();
        vc.setPrecision(precision);
        vc.setScale(scale);
        return vc.validateValue(total);
    }

    public Integer call_function_FN_GET_EO_LATEST_PRICE(StringBuffer itmNm) {


        /* FUNCTION FN_GET_EO_LATEST_PRICE(P_CLDID  VARCHAR2,P_SLOCID NUMBER,P_ORGID VARCHAR2,P_HO_ORGID VARCHAR2,
                                                   P_EO_ID VARCHAR2,P_ITMID VARCHAR2,P_USR_ID NUMBER,P_USR_DT DATE) */

        // To avoid function call in case of prospect
        Row currentRow = this.getSlsQuot1().getCurrentRow();
        if (true) { //currentRow != null && (Integer)currentRow.getAttribute("EoCatg") == 68){
            ViewObjectImpl impl = this.getLovItemDescFromitemId1();
            impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            impl.setNamedWhereClauseParam("ItmIdBind", null);
            impl.setNamedWhereClauseParam("ItmDescBind", itmNm.toString());
            impl.executeQuery();
            Row[] row_2 = impl.getAllRowsInRange();
            if (row_2.length > 0) {
                itmNm = new StringBuffer(row_2[0].getAttribute("ItmId").toString());
                //   System.out.println("Item Id in the called Function is " + itmNm);
                this.getSlsQuotItm2().getCurrentRow().setAttribute("ItmId", itmNm);
            }
            if (null != (Object) itmNm) {
                //  System.out.println("FunctionCalled");
                SlsQuotVORowImpl row = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
                SlsQuotItmVORowImpl irow = (SlsQuotItmVORowImpl) this.getSlsQuotItm2().getCurrentRow();
                Number conv = new Number(1);
                //    System.out.println(row.getCurrIdSp() + "--->" + row.getCurrConvFctr());
                if (row.getCurrConvFctr() != null) {
                    conv = row.getCurrConvFctr();
                }
                // Method to fetch and set Default Eo Part No. of the Item
                getAndSetDfltEoPartNo(itmNm.toString());

                ////////////////////////////////////////////////////////////////////////////////////////////////////////
                if (checkPolicyApplied().toString().equals("Y")) {
                    _log.info("Price from Price Policy.");
                    Number price = new Number(0);
                    BigDecimal policyPrice =
                        (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                        EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                        row.getEoId(), itmNm.toString(), "SO"
                    });

                    policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                    _log.info("Policy Price is : " + policyPrice);
                    // policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                    if (policyPrice.compareTo(new BigDecimal(0)) == 0 ||
                        policyPrice.compareTo(new BigDecimal(-2)) == 0) {

                        try {
                            BigDecimal s =
                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                EbizParams.GLBL_APP_CLD_ID(),
                                                                EbizParams.GLBL_APP_SERV_LOC(),
                                                                EbizParams.GLBL_APP_USR_ORG(),
                                                                EbizParams.GLBL_HO_ORG_ID(), row.getEoId(),
                                                                itmNm.toString(), row.getUsrIdCreateDt(),
                                                                EbizParams.GLBL_APP_USR(),
                                                                new Timestamp(System.currentTimeMillis()),
                                                                row.getCurrIdSp(), conv
                            });
                            //       System.out.println("S : " + s);
                            Number amt = new Number(s);
                            Number convFctr = row.getCurrConvFctr();

                            if (amt.compareTo(new Number(0)) == 1) {
                                irow.setItmPrice(amt);
                                return 1;
                            } else if (amt.compareTo(new Number(-1)) == 0) {
                                irow.setItmPrice(new Number(0));
                                return 0;
                            } else {
                                /* convFctr = (Number)amt.div(convFctr);
                                        System.out.println("Price :" + convFctr);
                                        irow.setItmPrice(convFctr); */
                                return 0;
                            }

                        } catch (Exception e) {
                            FacesMessage message =
                                new FacesMessage("There have been an error in calling function 'FN_GET_EO_LATEST_PRICE' !");
                            message.setSeverity(FacesMessage.SEVERITY_ERROR);
                            FacesContext.getCurrentInstance().addMessage(null, message);
                            e.printStackTrace();
                        }


                    } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                        this.getSlsQuotItm2().getCurrentRow().setAttribute("ItmId", null);
                        return -1;
                    } else {
                        try {
                            price = new Number(policyPrice);
                            price = price.divide(conv);
                            price = (Number) price.round(EbizParams.GLBL_AMT_DIGIT());
                            irow.setItmPrice(price);
                            return 0;
                        } catch (SQLException e) {
                        }
                    }

                } else {
                    _log.info("Price from EO Price.");
                    try {


                        BigDecimal s =
                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                            "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            EbizParams.GLBL_APP_CLD_ID(),
                                                            EbizParams.GLBL_APP_SERV_LOC(),
                                                            EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                                            row.getEoId(), itmNm.toString(), row.getUsrIdCreateDt(),
                                                            EbizParams.GLBL_APP_USR(),
                                                            new Timestamp(System.currentTimeMillis()),
                                                            row.getCurrIdSp(), conv
                        });
                        //   System.out.println("S : " + s);
                        Number amt = new Number(s);
                        Number convFctr = row.getCurrConvFctr();

                        if (amt.compareTo(new Number(0)) == 1) {
                            irow.setItmPrice(amt);
                            return 1;
                        } else if (amt.compareTo(new Number(-1)) == 0) {
                            irow.setItmPrice(new Number(0));
                            return 0;
                        } else {
                            /* convFctr = (Number)amt.div(convFctr);
                                    System.out.println("Price :" + convFctr);
                                    irow.setItmPrice(convFctr); */
                            return 0;
                        }

                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'FN_GET_EO_LATEST_PRICE' !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                }
            }
        }
        return 0;
    }

    public void getAndSetDfltEoPartNo(String itmId) {
        String checkSLSProfileValues = EbizParamsSLSUtils.checkSLSProfileValues(this, "USE_PART_NO_IN_TRAN");
        if ("Y".equals(checkSLSProfileValues)) {
            Row quotRow = getSlsQuot1().getCurrentRow();
            Row itmRow = getSlsQuotItm2().getCurrentRow();
            String eoPartNoFrmItm = EbizParamsSLSUtils.getEoPartNoFrmItm(this, quotRow.getAttribute("EoId"), itmId);
            itmRow.setAttribute("EoPartNo", eoPartNoFrmItm);
        }
    }

    /**
     * Method to populate the items from the enquiry
     * @param EnqNo
     */
    public void call_function_FN_ENQ_TO_QUOT(StringBuffer EnqNo) {

        SlsQuotVORowImpl currentRow = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("EoCatg") != null &&
            currentRow.getAttribute("EoId") != null) {
            StringBuffer enqDocId = null;
            Row[] row_2 = this.getLOVEnquiry1().getFilteredRows("DispDocId", EnqNo.toString());
            if (row_2.length > 0) {
                enqDocId = new StringBuffer(row_2[0].getAttribute("DocId").toString());
            }
            if (null != (Object) enqDocId) {
                //System.out.println("FunctionCalled");
                SlsQuotVORowImpl row = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
                SlsQuotItmVORowImpl irow = (SlsQuotItmVORowImpl) this.getSlsQuotItm2().getCurrentRow();
                /*  FN_ENQ_TO_QUOT (p_slocid in number,P_CLDID IN VARCHAR2,p_orgid  in varchar2,
                                   p_ho_orgid  in varchar2,p_ENQ_id in varchar2 ,p_doc_id in varchar2,p_doc_dt in date
                                                p_usr_id in number) */
                try {
                    String s = callStoredFunction(Types.VARCHAR, "SLS.FN_ENQ_TO_QUOT(?,?,?,?,?,?,?,?)", new Object[] {
                                                  EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                  EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                                  enqDocId.toString(), row.getDocId(), row.getDocDt(),
                                                  EbizParams.GLBL_APP_USR()
                    }).toString();
                    //System.out.println("Rowcount : "+this.getSlsQuotItm2().getRowCount()+" return :"+s);
                    //getDBTransaction().postChanges();
                    //this.getSlsQuotItm2().clearCache();
                    //this.getSlsQuotItm2().executeQuery();
                    //System.out.println("Rowcount : "+this.getSlsQuotItm2().getRowCount());
                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'FN_ENQ_TO_QUOT' !");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Methos to set items on the basis of enquiry
     * @param EnqNo
     */
    public void setItemsOnTheBasisOfEnquiry(StringBuffer EnqNo) {
        Row currentRow = getSlsQuot1().getCurrentRow();
        Object enqDocId = currentRow.getAttribute("EnqId");
        Object entity = currentRow.getAttribute("EoId");
        //  System.out.println("enqDocId is:   " + enqDocId);
        if (enqDocId != null) {

            getLOVEnquiry1().setNamedWhereClauseParam("BindOpprDocId", enqDocId);
            getLOVEnquiry1().setNamedWhereClauseParam("BindEoId", entity);
            getLOVEnquiry1().executeQuery();
            Row oprRow[] = getLOVEnquiry1().getAllRowsInRange();
            if (oprRow.length > 0) {
                currentRow.setAttribute("CurrIdSp", oprRow[0].getAttribute("CurrIdSp"));
                currentRow.setAttribute("CurrConvFctr", oprRow[0].getAttribute("CurrRate"));
                //currentRow.setAttribute("EoCatg", oprRow[0].getAttribute("EoCat"));
                //currentRow.setAttribute("EoId", oprRow[0].getAttribute("EoId"));
                currentRow.setAttribute("AssignedTo", oprRow[0].getAttribute("AssignedTo"));


            }


            ViewObjectImpl inqVo = getInquirySlsOppItm1();
            inqVo.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            inqVo.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            inqVo.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            inqVo.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            inqVo.setNamedWhereClauseParam("DocIdBind", enqDocId);
            inqVo.executeQuery();
            inqVo.setRangeSize(-1);
            Row[] allRowsInRange = inqVo.getAllRowsInRange();

            SlsQuotItmVOImpl itm = this.getSlsQuotItm2();
            RowSetIterator createRowSetIterator = itm.createRowSetIterator(null);
            while (createRowSetIterator.hasNext()) {
                createRowSetIterator.next().remove();
            }

            int SrNo = 1;
            for (Row f : allRowsInRange) {
                //  System.out.println("Added!");
                Row rw = itm.createRow();
                rw.setAttribute("ItmId", f.getAttribute("ItmId"));
                rw.setAttribute("ItmPrice", f.getAttribute("ItmPrice"));
                rw.setAttribute("QuotQty", f.getAttribute("ItmQty"));
                rw.setAttribute("ItmUom", f.getAttribute("ItmUom"));
                rw.setAttribute("SrNo", SrNo);
                rw.setAttribute("ItmAmtSp", f.getAttribute("ItmAmtSp"));
                itm.insertRow(rw);
                SrNo = SrNo + 1;
            }
            itm.executeQuery();
        } else {
            ADFModelUtils.showFormattedFacesMessage("Opportunity No. Not Selected",
                                                    "Please Select Opportunity No. To Create Quotation Based on Opportunity No.",
                                                    FacesMessage.SEVERITY_ERROR);
        }
        //  System.out.println("Total : " + this.getSlsQuot1().getCurrentRow().getAttribute("QuoteTotalItemValue"));

    }

    /**
     * Method to handle exception taskflow
     */
    public void exceptionHandler() {
        FacesMessage message =
            new FacesMessage(resolvElDCMsg("#{bundle['MSG.1785']} ").toString()); //new FacesMessage("There have been an error! Contact Ess!!");
        message.setSeverity(FacesMessage.SEVERITY_ERROR);
        FacesContext.getCurrentInstance().addMessage(null, message);
    }

    /**
     * Container's getter for search1.
     * @return search1
     */
    public searchVOImpl getsearch1() {
        return (searchVOImpl) findViewObject("search1");
    }

    /**
     * Container's getter for SlsQuotTr2.
     * @return SlsQuotTr2
     */
    public SlsQuotTrVOImpl getSlsQuotTr2() {
        return (SlsQuotTrVOImpl) findViewObject("SlsQuotTr2");
    }

    /**
     * Container's getter for searchQuotation1.
     * @return searchQuotation1
     */
    public ViewObjectImpl getsearchQuotation1() {
        return (ViewObjectImpl) findViewObject("searchQuotation1");
    }

    /**
     * Container's getter for SlsQuotItmSch1.
     * @return SlsQuotItmSch1
     */
    public ViewObjectImpl getSlsQuotItmSch1() {
        return (ViewObjectImpl) findViewObject("SlsQuotItmSch1");
    }

    /**
     * Container's getter for ItemToSchemeVL1.
     * @return ItemToSchemeVL1
     */
    public ViewLinkImpl getItemToSchemeVL1() {
        return (ViewLinkImpl) findViewLink("ItemToSchemeVL1");
    }

    /**
     * Container's getter for SlsQuotTr3.
     * @return SlsQuotTr3
     */
    public SlsQuotTrVOImpl getSlsQuotTr3() {
        return (SlsQuotTrVOImpl) findViewObject("SlsQuotTr3");
    }

    /**
     * Container's getter for QuotTOTrVL1.
     * @return QuotTOTrVL1
     */
    public ViewLinkImpl getQuotTOTrVL1() {
        return (ViewLinkImpl) findViewLink("QuotTOTrVL1");
    }

    /**
     * Container's getter for SlsQuotTrLines2.
     * @return SlsQuotTrLines2
     */
    public ViewObjectImpl getSlsQuotTrLines2() {
        return (ViewObjectImpl) findViewObject("SlsQuotTrLines2");
    }

    /**
     * Container's getter for TrTOTrLinesVL2.
     * @return TrTOTrLinesVL2
     */
    public ViewLinkImpl getTrTOTrLinesVL2() {
        return (ViewLinkImpl) findViewLink("TrTOTrLinesVL2");
    }


    /**
     * Container's getter for SlsQuotTnc1.
     * @return SlsQuotTnc1
     */
    public ViewObjectImpl getSlsQuotTnc1() {
        return (ViewObjectImpl) findViewObject("SlsQuotTnc1");
    }

    /**
     * Container's getter for QuotTOTnCVL1.
     * @return QuotTOTnCVL1
     */
    public ViewLinkImpl getQuotTOTnCVL1() {
        return (ViewLinkImpl) findViewLink("QuotTOTnCVL1");
    }

    /**
     * Container's getter for TnC1.
     * @return TnC1
     */
    public TnCVOImpl getTnC1() {
        return (TnCVOImpl) findViewObject("TnC1");
    }

    /**
     * Container's getter for LOVEnquiry1.
     * @return LOVEnquiry1
     */
    public ViewObjectImpl getLOVEnquiry1() {
        return (ViewObjectImpl) findViewObject("LOVEnquiry1");
    }

    /**
     * Container's getter for InquirySlsOppItm1.
     * @return InquirySlsOppItm1
     */
    public ViewObjectImpl getInquirySlsOppItm1() {
        return (ViewObjectImpl) findViewObject("InquirySlsOppItm1");
    }

    /**
     * Container's getter for SLSQuotCalc1.
     * @return SLSQuotCalc1
     */
    public ViewObjectImpl getSLSQuotCalc1() {
        return (ViewObjectImpl) findViewObject("SLSQuotCalc1");
    }

    /**
     * Container's getter for QuoteTOCalcVL1.
     * @return QuoteTOCalcVL1
     */
    public ViewLinkImpl getQuoteTOCalcVL1() {
        return (ViewLinkImpl) findViewLink("QuoteTOCalcVL1");
    }

    /**
     * Container's getter for CheckFromPrfVo.
     * @return CheckFromPrfVo
     */
    public ViewObjectImpl getCheckFromPrfVo() {
        return (ViewObjectImpl) findViewObject("CheckFromPrfVo");
    }

    /**
     * Method to check if opportunity is to be used in the form or not
     * @return
     */
    public StringBuffer isOpportunityUseAllowed() {
        ViewObjectImpl cprf = this.getCheckFromPrfVo();
        RowSetIterator rc = cprf.createRowSetIterator(null);
        while (rc.hasNext()) {
            Row next = rc.next();
            if (next != null) {
                Object ck = next.getAttribute("UseOppEntry");
                if (ck != null) {
                    return new StringBuffer(ck.toString());
                } else {
                    return new StringBuffer("N");
                }
            }
        }
        return new StringBuffer("Y");
    }

    /**
     * Method to check if opportunity is to be used in the form or not
     * @return
     */
    public StringBuffer isToleranceUseAllowed() {
        ViewObjectImpl cprf = this.getCheckFromPrfVo();
        RowSetIterator rc = cprf.createRowSetIterator(null);
        while (rc.hasNext()) {
            Row next = rc.next();
            if (next != null) {
                Object ck = next.getAttribute("ChkDlvQtyTlrnc");
                if (ck != null) {
                    return new StringBuffer(ck.toString());
                } else {
                    return new StringBuffer("N");
                }
            }
        }
        return new StringBuffer("Y");
    }

    /**
     * Method to validate the fromquantity
     * @param val
     * @return
     */
    public boolean isSearchFromQuantityValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("TotQuantityTopTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the toquantity
     * @param val
     * @return
     */
    public boolean isSearchToQuantityValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("TotQuantityBottomTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) < 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the fromTotalAmount
     * @param val
     * @return
     */
    public boolean isSearchFromTotalAmountValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("TotValueTopTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the ToTotalAmount
     * @param val
     * @return
     */
    public boolean isSearchToTotalAmountValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("TotValueBottomTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) < 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the fromTotalNoOfItem
     * @param val
     * @return
     */
    public boolean isSearchFromNoOfItemValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("NoOfItmTopTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) > 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate the fromTotalNoOfItem
     * @param val
     * @return
     */
    public boolean isSearchToNoOfItemValid(Number val) {
        Row currentRow = this.getsearch1().getCurrentRow();
        if (currentRow != null) {

            Object a = currentRow.getAttribute("NoOfItmBottomTrans");
            //System.out.println("A :"+a);
            Number v = new Number(0);
            if (a != null) {
                try {
                    v = new Number(a.toString());
                } catch (SQLException e) {
                }
                //System.out.println("v :"+v);
                if (val.compareTo(v) < 0) {
                    return false;
                }
            }
        }
        return true;
    }

    /**
     * Method to validate tolerance quantity
     * @param val
     * @return
     */
    public Integer isToleranceQuantityValid(Number val) {
        //System.out.println("valuse :"+val);
        Row currentRow = this.getSlsQuotItm2().getCurrentRow();
        if (currentRow != null) {
            Object typ = currentRow.getAttribute("TlrncQtyType");
            //System.out.println("typ:"+typ);
            if (typ != null) {
                //System.out.println("typ:"+typ + " "+("A").equalsIgnoreCase(typ.toString()));
                if (("A").equalsIgnoreCase(typ.toString())) {
                    Number qty = new Number(0);
                    qty = (Number) currentRow.getAttribute("QuotQty");
                    if (val.compareTo(qty) > 0) {
                        return 1;
                    }
                } else {
                    //System.out.println("In else");
                    if (val.compareTo(new Number(100)) > 0) {
                        return 2;
                    }
                }
            }
        }

        return 3;
    }

    /**
     * Count no of rows in item
     * @return
     */
    public Integer isAlertApplicable() {
        //System.out.println("Row count :"+this.getSlsQuotItm2().getRowCount());
        return this.getSlsQuotItm2().getRowCount();
    }

    /**
     * Method to return quotation Amount
     * @return
     */
    public Number getQuotationAmount() {
        Number n = new Number(0);
        Row currentRow = this.getSlsQuot1().getCurrentRow();
        if (currentRow != null) {
            n = (Number) currentRow.getAttribute("QuoteTotalValue");
        }
        //System.out.println("Amount : "+n);
        return n;
    }

    /**
     * Method returns the userId of the user on which the SalesQuot is pending
     * @return
     */
    public Integer slsQuotPendingAt() {
        Object obj = null;
        StringBuffer DocIdTxn = new StringBuffer(this.getSlsQuot1().getCurrentRow().getAttribute("DocId").toString());
        //System.out.println("DOC_ID TXN : "+DocIdTxn);
        try {
            obj = callStoredFunction(Types.INTEGER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR(),
                                     EbizParams.GLBL_APP_USR_ORG(), 21502, DocIdTxn.toString(), 0
            });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.GET_DOC_WF_CUR_USR' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        Integer usrId = 0;
        if (obj != null) {
            usrId = (Integer) obj;
        }

        //System.out.println("DOC PENDING AT USER ID : "+usrId);
        return usrId;

    }

    /**
     * Method returns WFID attached to the document.
     * @return
     */

    public StringBuffer getWfIdAttachedWithTheDoc() {
        Object obj = "";
        try {
            obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                     EbizParams.GLBL_APP_USR_ORG(), 21502, 0
            });
            //System.out.println("WF_ID WITH THE DOC :"+obj.toString());

        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.GET_WF_ID' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        if (obj == null)
            return null;
        return new StringBuffer(obj.toString());
    }

    /**
     * Method that returns the level of the current user
     * @param WfId
     * @return
     */
    public Integer getUsrLvl(StringBuffer WfId) {
        //System.out.println("WFID  :"+WfId);
        Integer lvl = 0;
        try {
            lvl = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                               EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(),
                                               WfId.toString(), new Integer("21502"), 0
            });
            //System.out.println("LEVEL :"+lvl);
        } catch (Exception e) {
            lvl = -1;
            /* FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.GET_USR_LEVEL' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace(); */
        }

        return lvl;
    }

    /**
     * Method inserts a record in insTxn
     * @param WfId
     * @param level
     * @return
     */
    public Integer insIntoTxn(StringBuffer WfId, Integer level) {
        Integer result = -3;
        try {
            StringBuffer docId = new StringBuffer(this.getSlsQuot1().getCurrentRow().getAttribute("DocId").toString());
            result = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                  EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                  EbizParams.GLBL_HO_ORG_ID(), 21502, 0, WfId.toString(),
                                                  docId.toString(), EbizParams.GLBL_APP_USR(),
                                                  EbizParams.GLBL_APP_USR(), level, level, "I", "A", 0, "S"
            });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.PKG_APP_WF.INS_TXN' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        return result;
    }

    public void functionCallOnApprovalFromWorkFlow() {

        StringBuffer returnParam = new StringBuffer(resolvEl("#{pageFlowScope.RETURN_FROM_WF}").toString());
        //System.out.println("Return value : " + returnParam);
        //System.out.println("RETURN PARAM :" + returnParam);
        Integer result;
        if (returnParam != null && returnParam.toString().equalsIgnoreCase("F")) {
            this.getSlsQuot1().getCurrentRow().setAttribute("QuotMode", 317);
            this.getDBTransaction().commit();
        } else if (returnParam != null && returnParam.toString().equalsIgnoreCase("A")) {
            Row currentRow = this.getSlsQuot1().getCurrentRow();
            ///  System.out.println("_______1");
            if (currentRow.getAttribute("EnqId") != null) {
                //     System.out.println("_______2" + currentRow.getAttribute("EnqId"));
                if (!currentRow.getAttribute("EnqId").toString().equals("")) {
                    //     System.out.println("_______3");
                    try {
                        //SLS.FN_UPDATE_OPP_STAT (P_CLDID  VARCHAR2,P_SLOCID NUMBER,P_ORGID VARCHAR2,P_OPP_ID VARCHAR2)
                        Integer retu = (Integer) callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_OPP_STAT(?,?,?,?,?)", new Object[] {
                                                                    EbizParams.GLBL_APP_CLD_ID(),
                                                                    EbizParams.GLBL_APP_SERV_LOC(),
                                                                    EbizParams.GLBL_APP_USR_ORG(),
                                                                    currentRow.getAttribute("EnqId").toString(), "S"
                        });
                        //      System.out.println("return  :" + retu + " value for function:  " +
                        //                       currentRow.getAttribute("EnqId").toString());
                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling method 'SLS.FN_UPDATE_OPP_STAT' !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }
                }
            }
            this.getSlsQuot1().getCurrentRow().setAttribute("QuotStat", 319);
            this.getSlsQuot1().getCurrentRow().setAttribute("QuotMode", 314);
            this.getDBTransaction().commit();
        }

    }

    //on save setting the opurtunity status function
    public void setOputunityStatus() {
        Row currentRow = this.getSlsQuot1().getCurrentRow();
        if (currentRow.getAttribute("EnqId") != null) {
            if (!currentRow.getAttribute("EnqId").toString().equals("")) {
                try {
                    //SLS.FN_UPDATE_OPP_STAT (P_CLDID  VARCHAR2,P_SLOCID NUMBER,P_ORGID VARCHAR2,P_OPP_ID VARCHAR2)
                    Integer retu = (Integer) callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_OPP_STAT(?,?,?,?,?)", new Object[] {
                                                                EbizParams.GLBL_APP_CLD_ID(),
                                                                EbizParams.GLBL_APP_SERV_LOC(),
                                                                EbizParams.GLBL_APP_USR_ORG(),
                                                                currentRow.getAttribute("EnqId").toString(), "S"
                    });
                    //   System.out.println("return  :" + retu + " value for function:  " +
                    //                      currentRow.getAttribute("EnqId").toString());
                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling method 'SLS.FN_UPDATE_OPP_STAT' !");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     *  Cancel Quotation
     */
    public void cancelQuotation() {
        Row currentRow = this.getSlsQuot1().getCurrentRow();
        currentRow.setAttribute("QuotStat", 322);
        //this.getSlsQuot1().getCurrentRow().setAttribute("QuotMode", 314);
        Object attribute = currentRow.getAttribute("QuotBasis");
        if (attribute != null && attribute.toString().equalsIgnoreCase("E")) {
            Integer retu = (Integer) callStoredFunction(Types.INTEGER, "SLS.FN_UPDATE_OPP_STAT(?,?,?,?,?)", new Object[] {
                                                        currentRow.getAttribute("CldId").toString(),
                                                        Integer.parseInt(currentRow.getAttribute("SlocId").toString()),
                                                        currentRow.getAttribute("OrgId").toString(),
                                                        currentRow.getAttribute("EnqId").toString(), "C"
            });
            //  System.out.println("return  :" + retu + " value for function:  " +
            //                      currentRow.getAttribute("EnqId").toString());
        }
        this.getDBTransaction().commit();
    }

    /**
     * Is user eligible of canceling quotation
     * @return
     */
    public boolean isUserEligibleToCancelSQuotation() {

        try {
            /*
            slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
            orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
            hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}")); */


            StringBuffer attachedWithTheDoc = getWfIdAttachedWithTheDoc();
            //FUNCTION GET_USR_LEVEL (P_SLOCID NUMBER, P_CLDID VARCHAR2, P_ORGID VARCHAR2, P_USR_ID NUMBER , P_WF_ID VARCHAR ,P_DOC_ID NUMBER)
            //FUNCTION GET_DOC_WF_TOP_LVL(P_SLOCID NUMBER, P_CLDID VARCHAR2, P_ORGID VARCHAR2, P_DOCID NUMBER)
            Integer level = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                         EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                         EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR(),
                                                         attachedWithTheDoc.toString(), 21502, 0
            });
            Integer wfTopLevel = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_GET_DOC_TOP_LVL(?,?,?,?,?)", new Object[] {
                                                              EbizParams.GLBL_APP_SERV_LOC(),
                                                              EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                                              21502, 0
            });

            //  System.out.println("USER LEVEL :" + level + " TOP_LEVEL :" + wfTopLevel);
            if (level == wfTopLevel) {
                //System.out.println("Return true at AM");
                return true;
            }
        } catch (Exception e) {
            /*  FacesMessage message =
                new FacesMessage("There have been an error in calling method 'isUserEligibleToCancelQuotation' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message); */
            e.printStackTrace();
            return false;
        }
        return false;
    }

    public void amendFUNCTION() {
        Row currentRow = this.getSlsQuot1().getCurrentRow();
        if (currentRow != null) {
            // P_CLDID IN VARCHAR2,p_HOorgid  in varchar2,p_slocid in number,p_orgid  in varchar2,p_doc_id in varchar2,p_usr_id in number,p_usr_dt date,
            //        P_AMD_NO VARCHAR2,P_AMD_DT DATE
            String doc = (String) currentRow.getAttribute("DocId");
            //   System.out.println("DocIDc :" + doc);
            Timestamp dt = (Timestamp) currentRow.getAttribute("UsrIdCreateDt");
            String amndNum = (String) currentRow.getAttribute("AmdNo");
            Integer ret = (Integer) callStoredFunction(Types.INTEGER, "SLS.FN_AMD_QUOT(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(), doc,
                                                       EbizParams.GLBL_APP_USR(), dt, amndNum,
                                                       new Timestamp(System.currentTimeMillis())
            });
            Integer i = Integer.parseInt(amndNum);
            //System.out.println("Return from amd : "+ret);
            currentRow.setAttribute("QuotStat", 320);
            currentRow.setAttribute("QuotMode", 315);
            currentRow.setAttribute("AmdNo", i + 1);
            currentRow.setAttribute("AmdDt", StaticValue.getCurrDtWidTimestamp());
            //this.setQuotStat(320);
            //this.setQuotMode(313);

        }

    }

    public void refereshAllVoOnCommit() {
        this.getSlsQuot1().executeQuery();
        this.getSlsQuotItm2().executeQuery();
        this.getSlsQuotItmSch1().executeQuery();
        this.getSlsQuotTr1().executeQuery();
        this.getSlsQuotTrLines1().executeQuery();
        this.getSlsQuotTnc1().executeQuery();
        this.getSlsQuotTr3().executeQuery();
        this.getSlsQuotTrLines2().executeQuery();
        this.getSLSQuotCalc1().executeQuery();
        // System.out.println("WExecuted");
    }

    /**
     *Generate Report
     *
     * @param filePath
     */

    public void generateReport(String quotDocId, String filePath) {
        //  System.out.println(quotDocId + "   --  " + filePath);
        //  System.out.println("Inside Am");

        try {

            Row currPO = this.getSlsQuot1().getCurrentRow();
            String docIdTxn = currPO.getAttribute("DocId").toString();
            //  System.out.println("docIdTxn :" + docIdTxn);
            Object fyId = currPO.getAttribute("FyId");

            String DocId = quotDocId;
            PreparedStatement st = null;
            st = this.getDBTransaction().createPreparedStatement("select 1 from dual", 0);
            Connection conn = null;
            conn = st.getConnection();
            ResultSet res = null;

            InputStream input = new FileInputStream(new File("D:/Report/Sales_Quot_Status.jrxml"));

            JasperDesign design = JRXmlLoader.load(input);
            JasperReport report = JasperCompileManager.compileReport(design);

            Map<String, Object> parameters = new HashMap<String, Object>();
            parameters.put("OrgId", EbizParams.GLBL_APP_USR_ORG());
            parameters.put("CldId", EbizParams.GLBL_APP_CLD_ID());
            parameters.put("SlocId", EbizParams.GLBL_APP_SERV_LOC());
            parameters.put("HoOrgId", EbizParams.GLBL_HO_ORG_ID());
            parameters.put("QuotDocId", docIdTxn);
            // parameters.put("fyId",(Integer)fyId);
            JasperPrint jasperPrint = null;
            jasperPrint = JasperFillManager.fillReport(report, parameters, conn);

            File pdfFile = new File(filePath + DocId + "_" + fyId + ".pdf");
            JRExporter exporter = null;
            if (true) {
                exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE, pdfFile);
            }
            try {
                exporter.exportReport();
            } catch (JRException e) {
                throw new ServletException(e);
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            finally {
                if (conn != null && st != null && res != null) {

                    conn.close();
                    st.close();
                    res.close();
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

    }

    public Boolean sendAction(String reciptantMailId, String subject, String msg, String dispDocId) {

        ViewObjectImpl vo = this.getSlsQuot1();

        String sender = null;
        Set<String> reciptants = new HashSet<String>();

        Row currPO = this.getSlsQuot1().getCurrentRow();
        String docIdTxn = currPO.getAttribute("DocId").toString();


        ViewObjectImpl usrvo = this.getUser1_1();
        RowQualifier rq = new RowQualifier(usrvo);
        rq.setWhereClause("SlocId = " + EbizParams.GLBL_APP_SERV_LOC() + " AND UsrId = " + EbizParams.GLBL_APP_USR() +
                          " AND UsrMailIdDef = 'Y' AND UsrMailIdActv = 'Y'");
        Row rows[] = usrvo.getFilteredRows(rq);


        if (rows != null && rows.length == 1) {
            sender = (String) rows[0].getAttribute("UsrMailId");
        }


        reciptants.add(reciptantMailId);
        //}


        String rfqId = dispDocId;
        String filePath = "D:\\send\\";

        generateReport(rfqId, filePath);

        if (sender != null && reciptants.size() > 0) {
            sendMail(sender, reciptants, rfqId, subject, msg);
        }


        return sntmail;

    }

    public void sendMail(String sender, Set<String> recipents, String rfqNo, String sub, String mesg) {

        Row currPO = this.getSlsQuot1().getCurrentRow();
        Object fyId = currPO.getAttribute("FyId");

        System.out.println(sender + " Sender aname ");
        final String MAIL_SERVER = "smtp.gmail.com";
        final String USERNAME = sender;
        final String PASSWORD = "ess12345";
        try {
            String subject = sub;
            String message = mesg;
            Properties properties = System.getProperties();
            properties.put("mail.smtps.host", MAIL_SERVER);
            properties.put("mail.smtps.auth", "true");

            Session session = Session.getInstance(properties);
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(USERNAME));

            for (String reciptent : recipents) {
                msg.addRecipients(Message.RecipientType.TO, reciptent);
            }

            msg.setSubject(subject);
            msg.setText(message);

            Transport tr = session.getTransport("smtps");
            tr.connect(MAIL_SERVER, USERNAME, PASSWORD);

            Multipart multipart = new MimeMultipart();
            BodyPart part1 = new MimeBodyPart();
            part1.setText(message);

            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart = new MimeBodyPart();
            String path = "D:\\send\\";
            String filename = rfqNo + "_" + fyId + ".pdf";
            DataSource source = new FileDataSource(path + filename);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(filename);
            multipart.addBodyPart(messageBodyPart);
            multipart.addBodyPart(part1);


            msg.setContent(multipart);
            tr.sendMessage(msg, msg.getAllRecipients());
            tr.close();

            sntmail = true;


        } catch (AddressException ex) {
            //System.out.println(ex.getMessage());
        } catch (MessagingException ex) {
            //   System.out.println(ex.getMessage());
            sntmail = false;
        }

    }

    private HashMap<String, String> getConfig(String stmt) throws Exception {
        try {

            HashMap<String, String> map = new HashMap<String, String>();
            CallableStatement stForSet = this.getDBTransaction().createCallableStatement("begin  " + stmt + ";end;", 0);
            stForSet.setObject(1, null);

            stForSet.registerOutParameter(2, Types.VARCHAR);
            stForSet.registerOutParameter(3, Types.VARCHAR);
            stForSet.registerOutParameter(4, Types.VARCHAR);
            stForSet.registerOutParameter(5, Types.VARCHAR);
            stForSet.registerOutParameter(6, Types.VARCHAR);
            stForSet.execute();
            map.put("Domain", stForSet.getString(2));
            map.put("Port", stForSet.getString(3));
            map.put("Security", stForSet.getString(4));
            map.put("From", stForSet.getString(5));
            map.put("Password", stForSet.getString(6));
            return map;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e.getMessage());
        }
    }


    public File generateQuotReport(String quotDocId) {
        File pdfFile = null;
        try {
            Integer usr_id = (Integer) (resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            Integer slocId = (Integer) (resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            Row currPO = this.getSlsQuot1().getCurrentRow();
            String docIdTxn = currPO.getAttribute("DocId").toString();
            Object fyId = currPO.getAttribute("FyId");

            String quotId = quotDocId;
            PreparedStatement st = null;
            //st = this.getDBTransaction().createPreparedStatement("select 1 from dual", 0);
            Connection conn = null;

            PreparedStatement ps =
                this.getDBTransaction().createPreparedStatement("select distinct srvr_Loc_As_Rpt_Path from APP.App$Servr$Loc",
                                                                0);

            ResultSet rs = ps.executeQuery();
            String path = null;
            String path1 = null;

            while (rs.next()) {

                path = rs.getString(1);
                path1 = path;
                path = path + "SLS/";
                System.out.println("New Path is :" + path);
            }


            Map<String, Object> parameters = new HashMap<String, Object>();
            parameters.put("OrgId", orgId);
            parameters.put("CldId", cld_id);
            parameters.put("SlocId", slocId);
            parameters.put("HoOrgId", hoOrg_id);
            parameters.put("QuotDocId", quotId);
            //  parameters.put("fyId",(Integer)fyId);
            parameters.put("Path", path1);
            //                                  JasperPrint jasperPrint=null;
            //                                  jasperPrint = JasperFillManager.fillReport(report, parameters, conn);

            JasperReport report = (JasperReport) JRLoader.loadObject(path + "Quotation.jasper");
            JasperPrint jasperPrint = JasperFillManager.fillReport(report, parameters, conn);


            pdfFile = new File(path + quotId + "_" + fyId + ".pdf");
            JRExporter exporter = null;
            if (true) {
                exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE, pdfFile);
            }
            try {
                exporter.exportReport();
            } catch (JRException e) {
                throw new ServletException(e);
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            finally {
                if (conn != null && st != null && rs != null) {

                    conn.close();
                    st.close();
                    rs.close();
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return pdfFile;
    }


    /**
     * Container's getter for User1.
     * @return User1
     */
    public ViewObjectImpl getUser1() {
        return (ViewObjectImpl) findViewObject("User1");
    }

    /**
     * Container's getter for EoMail1.
     * @return EoMail1
     */
    public ViewObjectImpl getEoMail1() {
        return (ViewObjectImpl) findViewObject("EoMail1");
    }

    /**
     * Container's getter for User1_1.
     * @return User1_1
     */
    public ViewObjectImpl getUser1_1() {
        return (ViewObjectImpl) findViewObject("User1_1");
    }

    /**
     *
     * Check Entity Name is selected or not
     */
    public Boolean chkEntutyName() {
        if (this.getSlsQuot1().getCurrentRow().getAttribute("EoShowTrans") != null) {
            return true;
        }

        return false;
    }

    /**
     * Ckeck currency is selected or not
     */
    public Boolean chkCurrencyNameexist() {
        if (this.getSlsQuot1().getCurrentRow().getAttribute("CurrIdSp") != null) {
            return true;
        }

        return false;
    }

    /**
     * Set Entity Name to null when Value change event occured
     */
    public void setEntityNameToNull() {
        this.getSlsQuot1().getCurrentRow().setAttribute("EoShowTrans", null);
        this.getSlsQuot1().getCurrentRow().setAttribute("EoId", null);
        /*  RowSet customer1 = this.getLOVCustomer1();
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        customer1.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        customer1.executeQuery(); */
    }

    /**
     * Container's getter for LOVTaxRuleLinesCOA1.
     * @return LOVTaxRuleLinesCOA1
     */
    public ViewObjectImpl getLOVTaxRuleLinesCOA1() {
        return (ViewObjectImpl) findViewObject("LOVTaxRuleLinesCOA1");
    }

    public StringBuffer checkPolicyApplied() {
        StringBuffer ck = new StringBuffer("");
        try {
            String policyPrice = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                             EbizParams.GLBL_APP_CLD_ID(),
                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                             EbizParams.GLBL_APP_USR_ORG(), "USE_PRICE_PLC"
            });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        // System.out.println("Policy Applied : " + ck);
        return ck;
    }


    public StringBuffer checkforProfileValues(StringBuffer colName) {
        colName = (colName == null ? new StringBuffer("") : colName);
        StringBuffer ck = new StringBuffer("");
        try {

            String policyPrice = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                             EbizParams.GLBL_APP_CLD_ID(),
                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                             EbizParams.GLBL_APP_USR_ORG(), colName.toString()
            });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    public void setpolicy() {
        String i = "";
        Object plcId = resolvEl("#{pageFlowScope.PRICE_POLICY}");
        _log.info("Policy id : " + plcId);
        if (plcId != null) {
            i = plcId.toString();
        }
        if (!i.equals("")) {
            ViewObjectImpl impl = this.getSlsQuot1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null) {
                currentRow.setAttribute("EoPricePlc", i);
                _log.info("Setting policy Id to : " + i);
            }
        }
    }

    /**
     * Container's getter for SmanForEoVO1.
     * @return SmanForEoVO1
     */
    public ViewObjectImpl getSmanForEoVO1() {
        return (ViewObjectImpl) findViewObject("SmanForEoVO1");
    }

    /**
     * Set Sman of concerned EO
     * @param eoNm
     */
    public void insertSmanOnEoNm(StringBuffer eoNm) {

        ViewObjectImpl quot = this.getSlsQuot1();
        Row currentRow = quot.getCurrentRow();
        //_log.info("Inside insertSmanOnEoNm method : 1");
        if (currentRow != null && eoNm != null) {
            _log.info("OrgId :" + EbizParams.GLBL_APP_USR_ORG() + " SlocId : " + EbizParams.GLBL_APP_SERV_LOC() +
                      " CldId : " + EbizParams.GLBL_APP_CLD_ID() + " HoOrgId : " + EbizParams.GLBL_HO_ORG_ID() +
                      " EoNm : " + eoNm);
            ViewObjectImpl sman = this.getSmanForEoVO1();
            sman.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            sman.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            sman.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            sman.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            sman.setNamedWhereClauseParam("EoNmBind", eoNm.toString());
            sman.executeQuery();

            Row[] allRowsInRange = sman.getAllRowsInRange();
            //_log.info("Rows in range are :"+allRowsInRange.length);
            //_log.info("Inside insertSmanOnEoNm method : 2");
            if (allRowsInRange.length > 0) {
                //_log.info("Inside insertSmanOnEoNm method : 3");
                Object attribute = allRowsInRange[0].getAttribute("EoSmanId");
                //_log.info("Sales man id is : "+attribute);
                if (attribute != null) {
                    //_log.info("Inside insertSmanOnEoNm method : 4");
                    currentRow.setAttribute("AssignedTo", (Integer) attribute);
                }
            }
        }
    }

    /**
     *  Method to fetch and set discount from Discount Policy.
     */
    public void getAndSetDiscountForItmFromPolicy() {
        if (checkforProfileValues(new StringBuffer("USE_DISC_PLC")).toString().equals("Y")) {
            try {
                Row itmRow = this.getSlsQuotItm2().getCurrentRow();
                Object itmIdO = itmRow.getAttribute("ItmId");
                ViewObjectImpl qty = this.getLovItemDescFromitemId1();
                qty.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                qty.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                qty.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                qty.setNamedWhereClauseParam("ItmIdBind", (itmIdO == null ? "" : itmIdO.toString()));
                qty.setNamedWhereClauseParam("ItmDescBind", null);
                qty.executeQuery();
                Row[] allRowsInRange = qty.getAllRowsInRange();
                Object grupIdO = null;
                if (allRowsInRange.length > 0) {
                    grupIdO = allRowsInRange[0].getAttribute("GrpId");
                }

                Row quotRow = this.getSlsQuot1().getCurrentRow();
                Integer eoId = (quotRow.getAttribute("EoId") == null ? null : (Integer) quotRow.getAttribute("EoId"));
                Number currRate =
                    (quotRow.getAttribute("CurrConvFctr") == null ? new Number(1) :
                     (Number) quotRow.getAttribute("CurrConvFctr"));
                if (itmRow != null && itmIdO != null) {
                    StringBuffer ck = new StringBuffer("");
                    // Object grupIdO= grup.getAttribute("GrpId");
                    Object salesExec = quotRow.getAttribute("AssignedTo");
                    Object itmQty = itmRow.getAttribute("QuotQty");
                    Object itmRate = itmRow.getAttribute("ItmPrice");
                    BigDecimal amt =
                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                        "fn_sls_get_disc_plc_val(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                        EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                        itmIdO.toString(), (Integer) eoId,
                                                        (Integer) quotRow.getAttribute("EoCatg"), grupIdO.toString(),
                                                        (Integer) salesExec, null, itmQty, itmRate, currRate
                    });
                    //    System.out.println("Returned  : " + amt);
                    Number val = new Number(0);
                    if (amt == null) {
                        val = new Number(0);
                    } else {
                        val = new Number(amt);
                    }

                    itmRow.setAttribute("ItmDiscTyp", "A");
                    itmRow.setAttribute("ItmDiscVal", amt);
                }

            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
    }

    public Boolean insertPolicyEntry(StringBuffer policyId) {
        Boolean b = true;
        Object obj = null;
        ViewObjectImpl impl = this.getSlsQuot1();
        Row soRow = impl.getCurrentRow();
        Object eoid = soRow.getAttribute("EoId");
        Integer eoId = (eoid == null ? -1 : (Integer) soRow.getAttribute("EoId"));
        //  System.out.println("Came here : 1");
        if (eoId != -1 && policyId != null) {
            try {
                /* P_CLDID VARCHAR2,
                                                                P_SLOCID NUMBER,
                                                                P_HO_ORGID VARCHAR2,
                                                                P_EOID NUMBER,
                                                                P_PLCID VARCHAR2,
                                                                P_USRID NUMBER */

                obj = callStoredFunction(Types.NUMERIC, "APP.FN_INS_EO_PRICE_PLC(?,?,?,?,?,?)", new Object[] {
                                         EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                         EbizParams.GLBL_HO_ORG_ID(), eoId, policyId.toString(),
                                         EbizParams.GLBL_APP_USR()
                });
                //    System.out.println("Retudn : " + obj);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            BigDecimal r = (obj == null ? new BigDecimal(-1) : (BigDecimal) obj);
            if (r.compareTo(new BigDecimal(-1)) == 0) {
                b = false;
                soRow.setAttribute("EoPricePlc", null);
            }
        }
        return b;
    }

    /**
     * Container's getter for LOVCustomer1.
     * @return LOVCustomer1
     */
    public LOVCustomerVOImpl getLOVCustomer1() {
        return (LOVCustomerVOImpl) findViewObject("LOVCustomer1");
    }

    public String ValidateItmId(String itmId) {

        StringBuffer b = new StringBuffer("N");
        ViewObjectImpl impl = this.getSlsQuotItm2();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != impl.getCurrentRow() && next.getAttribute("ItmId").toString().equalsIgnoreCase(itmId)) {
                b = new StringBuffer("Y");
                break;
            }
        }
        itr.closeRowSetIterator();
        return b.toString();
    }

    public Integer setLatestPrice(String ItmId) {

        if (ItmId != null) {
            //  System.out.println("FunctionCalled");
            SlsQuotVORowImpl row = (SlsQuotVORowImpl) this.getSlsQuot1().getCurrentRow();
            SlsQuotItmVORowImpl irow = (SlsQuotItmVORowImpl) this.getSlsQuotItm2().getCurrentRow();
            Number conv = new Number(1);
            //   System.out.println(row.getCurrIdSp() + "--->" + row.getCurrConvFctr());
            if (row.getCurrConvFctr() != null) {
                conv = row.getCurrConvFctr();
            }
            // Method to fetch and set Default Eo Part No. of the Item
            getAndSetDfltEoPartNo(ItmId);
            ////////////////////////////////////////////////////////////////////////////////
            if (checkPolicyApplied().toString().equals("Y")) {
                _log.info("Price from Price Policy.");
                Number price = new Number(0);
                BigDecimal policyPrice =
                    (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                    EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                    EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                    row.getEoId(), ItmId, "SO"
                });

                policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                _log.info("Policy Price is : " + policyPrice);
                // policyPrice = (policyPrice == null ? new BigDecimal(-1) : policyPrice);
                if (policyPrice.compareTo(new BigDecimal(0)) == 0 || policyPrice.compareTo(new BigDecimal(-2)) == 0) {

                    try {
                        BigDecimal s =
                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                            "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            EbizParams.GLBL_APP_CLD_ID(),
                                                            EbizParams.GLBL_APP_SERV_LOC(),
                                                            EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                                            row.getEoId(), ItmId, row.getUsrIdCreateDt(),
                                                            EbizParams.GLBL_APP_USR(),
                                                            new Timestamp(System.currentTimeMillis()),
                                                            row.getCurrIdSp(), conv
                        });
                        //   System.out.println("S : " + s);
                        //   System.out.println("-------1");
                        Number amt = new Number(s);
                        //   System.out.println("-----------2");
                        Number convFctr = row.getCurrConvFctr();
                        //   System.out.println("Amt is: " + amt);
                        if (amt.compareTo(new Number(0)) == 1) {
                            irow.setItmPrice(amt);
                            return 1;
                        } else if (amt.compareTo(new Number(-1)) == 0) {
                            irow.setItmPrice(new Number(0));
                            return 0;
                        } else {
                            /* convFctr = (Number)amt.div(convFctr);
                                       System.out.println("Price :" + convFctr);
                                       irow.setItmPrice(convFctr); */
                            return 0;
                        }

                    } catch (Exception e) {
                        FacesMessage message =
                            new FacesMessage("There have been an error in calling function 'FN_GET_EO_LATEST_PRICE' !");
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message);
                        e.printStackTrace();
                    }


                } else if (policyPrice.compareTo(new BigDecimal(-1)) == 0) {
                    return -1;
                } else {
                    try {
                        price = new Number(policyPrice);
                        price = price.divide(conv);
                        price = (Number) price.round(EbizParams.GLBL_AMT_DIGIT());
                        irow.setItmPrice(price);
                        return 0;
                    } catch (SQLException e) {
                    }
                }

            } else {
                _log.info("Price from EO Price.");
                try {


                    BigDecimal s =
                        (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                        "SLS.FN_GET_EO_LATEST_PRICE(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                        EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(),
                                                        row.getEoId(), ItmId, row.getUsrIdCreateDt(),
                                                        EbizParams.GLBL_APP_USR(),
                                                        new Timestamp(System.currentTimeMillis()), row.getCurrIdSp(),
                                                        conv
                    });
                    //  System.out.println("S : " + s);
                    Number amt = new Number(s);
                    Number convFctr = row.getCurrConvFctr();

                    if (amt.compareTo(new Number(0)) == 1) {
                        irow.setItmPrice(amt);
                        return 1;
                    } else if (amt.compareTo(new Number(-1)) == 0) {
                        irow.setItmPrice(new Number(0));
                        return 0;
                    } else {
                        /* convFctr = (Number)amt.div(convFctr);
                                   System.out.println("Price :" + convFctr);
                                   irow.setItmPrice(convFctr); */
                        return 0;
                    }

                } catch (Exception e) {
                    FacesMessage message =
                        new FacesMessage("There have been an error in calling function 'FN_GET_EO_LATEST_PRICE' !");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    e.printStackTrace();
                }
            }
        }
        return 0;
    }

    public Integer chkforDuplicateItemid(String ItemId) {
        // System.out.println("inside check for dup item id---");
        Integer ret = 0;
        SlsQuotItmVOImpl row = (SlsQuotItmVOImpl) this.getSlsQuotItm2();
        Row currentRow = row.getCurrentRow();
        RowSetIterator itr = row.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            if (r != currentRow) {
                Object itmIdiO = r.getAttribute("ItmId");
                StringBuilder itmIdi =
                    (itmIdiO == null ? new StringBuilder("") : new StringBuilder(itmIdiO.toString()));
                if (itmIdi.toString().equals(ItemId)) {
                    ret = 1;
                    break;
                }
            }
        }
        itr.closeRowSetIterator();
        //  System.out.println("value of i=" + ret);
        return ret;
    }

    public Boolean chkTabValidations() {
        Boolean b = true;
        ViewObjectImpl impl2 = this.getSlsQuot1();
        RowSetIterator itr2 = impl2.createRowSetIterator(null);
        while (itr2.hasNext()) {
            Row rw = itr2.next();
            Object EocatgO = rw.getAttribute("EoCatg");
            Object EoIdO = rw.getAttribute("EoId");
            Object CurrIdO = rw.getAttribute("CurrIdSp");
            Object ConcfactorO = rw.getAttribute("CurrConvFctr");
            Integer EoCatg = (EocatgO == null ? 0 : Integer.parseInt(EocatgO.toString()));
            Integer Eoid = EoIdO == null ? 0 : Integer.parseInt(EoIdO.toString());
            Integer Currid = CurrIdO == null ? 0 : Integer.parseInt(CurrIdO.toString());
            Number Covfactr = ConcfactorO == null ? new Number(0) : (Number) ConcfactorO;
            if (EoCatg.equals("")) {
                b = false;
                FacesMessage message =
                    new FacesMessage(resolvElDCMsg("#{bundle['MSG.1324']} ").toString()); //Please select customer category first !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            } else if (Eoid.equals("")) {
                b = false;
                FacesMessage message =
                    new FacesMessage(resolvElDCMsg("#{bundle['MSG.1325']} ").toString()); //Please select customer first !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            }

            else if (Currid.equals("")) {
                b = false;
                FacesMessage message =
                    new FacesMessage(resolvElDCMsg(" #{bundle['MSG.1326']} ").toString()); //Customer Currency can not be empty !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            }

            else if (Covfactr.compareTo(new Number(0)) <= 0) {
                b = false;
                FacesMessage message =
                    new FacesMessage(resolvElDCMsg("#{bundle['MSG.1327']} ").toString()); //Currency conversion factor can not be empty !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            }

        }
        ViewObjectImpl impl = this.getSlsQuotItm2();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            Object ItemIdD = row.getAttribute("ItmId");
            Object ItemPriceD = row.getAttribute("ItmPrice");
            Object ItemQuantyD = row.getAttribute("QuotQty");
            StringBuilder itemId = (ItemIdD == null ? new StringBuilder("") : new StringBuilder(ItemIdD.toString()));
            Number ItemPrice = (ItemPriceD == null ? new Number(0) : (Number) ItemPriceD);
            Number ItemQty = (ItemQuantyD == null ? new Number(0) : (Number) ItemQuantyD);
            if (itemId.toString().equals("")) {
                b = false;
                FacesMessage message =
                    new FacesMessage(resolvElDCMsg("#{bundle['MSG.1328']}").toString()); //Item is not selected in one of the Item lines. Please select Item in corresponding Item line !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            } else if (ItemPrice.compareTo(new Number(0)) <= 0) {
                b = false;
                FacesMessage message =
                    new FacesMessage(resolvElDCMsg("#{bundle['MSG.1329']}").toString()); //Item price for one of the Item in Item lines is less than or equal to zero. Please select a valid Item price !
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            } else if (ItemQty.compareTo(new Number(0)) <= 0) {
                b = false;
                FacesMessage message = new FacesMessage(resolvElDCMsg("#{bundle['MSG.1330']}").toString());
                message.setSeverity(FacesMessage.SEVERITY_WARN);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                break;
            }
        }
        itr.closeRowSetIterator();
        return b;
    }

    /**
     * Container's getter for SlsQuotItm1.
     * @return SlsQuotItm1
     */
    public SlsQuotItmVOImpl getSlsQuotItm1() {
        return (SlsQuotItmVOImpl) findViewObject("SlsQuotItm1");
    }

    /**
     * Container's getter for LovItemDescFromitemId1.
     * @return LovItemDescFromitemId1
     */
    public ViewObjectImpl getLovItemDescFromitemId1() {
        return (ViewObjectImpl) findViewObject("LovItemDescFromitemId1");
    }

    public Boolean isItmIdValid(StringBuffer itmId) {
        Boolean b = true;
        ViewObjectImpl impl = this.getSlsQuotItm2();
        Row currentRow = impl.getCurrentRow();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (!next.equals(currentRow)) {
                Object iO = next.getAttribute("ItmId");
                StringBuffer c = (iO == null ? new StringBuffer("") : new StringBuffer(iO.toString()));
                if (itmId.toString().equals(c.toString())) {
                    b = false;
                    break;
                }
            }
        }
        itr.closeRowSetIterator();
        return b;
    }

    public ArrayList<String> getSuggestedItemDesc(String itmStr) {

        ArrayList<String> h = new ArrayList<String>();
        ViewObjectImpl autoSuggestVO = this.getItmVoForAutoSuggest1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        autoSuggestVO.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        autoSuggestVO.setNamedWhereClauseParam("ItmNmBind", itmStr);
        // autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.setRangeSize(12);
        autoSuggestVO.executeQuery();

        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }

    /**
     * Container's getter for ItmVoForAutoSuggest1.
     * @return ItmVoForAutoSuggest1
     */
    public ViewObjectImpl getItmVoForAutoSuggest1() {
        return (ViewObjectImpl) findViewObject("ItmVoForAutoSuggest1");
    }

    /**Method to Convert Quantity to base quantity.
     * @param itmQty
     */
    public void setQtyBs(Number itmQty) {
        ViewObject slsItm = this.getSlsQuotItm2();
        Row itmRow = slsItm.getCurrentRow();

        BigDecimal convFctr = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                                              EbizParams.GLBL_APP_SERV_LOC(),
                                                              EbizParams.GLBL_APP_CLD_ID(),
                                                              EbizParams.GLBL_APP_USR_ORG(),
                                                              itmRow.getAttribute("ItmId"),
                                                              itmRow.getAttribute("ItmUomBs"),
                                                              itmRow.getAttribute("ItmUom")
        });
        _log.info("Uom Factor-" + convFctr);
        Number uomConv = new Number(1);
        if (convFctr != null) {
            try {
                uomConv = new Number(convFctr);
            } catch (SQLException e) {
                _log.info(e);
            }
        }
        Number qtyBs = uomConv.multiply(itmQty);
        _log.info("Uom Factor is-" + uomConv + "qty bs-" + qtyBs);
        itmRow.setAttribute("UomConvFctr", uomConv);
        itmRow.setAttribute("ItmQtyBs", qtyBs);
        //itmRow.setAttribute("BalQty", qtyBs);
    }

    /**
     * Container's getter for LOVItemId1.
     * @return LOVItemId1
     */
    public ViewObjectImpl getLOVItemIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemIdVO1");
    }

    public void CheckItmId() {
        // System.out.println("inside itm id remove...");
        if (this.getSlsQuotItm2().getCurrentRow().getAttribute("ItmId") == null) {
            //     System.out.println("Inside the sales deletion of itm quotation..");
            this.getSlsQuotItm2().getCurrentRow().setAttribute("ItmId", -1);

        }
        this.getSlsQuotItm2().getCurrentRow().remove();

    }

    /**
     * Container's getter for LOVSchemeName1.
     * @return LOVSchemeName1
     */
    public ViewObjectImpl getLOVSchemeName1() {
        return (ViewObjectImpl) findViewObject("LOVSchemeName1");
    }

    /**
     * Method to fetch Price Policy Id on the basis of EoId.
     * @param eoId
     * @return
     */
    public String getPricePolicyForCurrEo(Integer eoId) {
        String plcId = null;
        if (checkPolicyApplied().toString().equals("Y")) {
            Object plcIdO = ADFModelUtils.callFunction(this, new StringBuilder("FN_GET_PLC_ID_FRM_EO_ID(?,?,?,?)"), new Object[] {
                                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                       EbizParams.GLBL_HO_ORG_ID(), eoId
            }, Types.VARCHAR);
            plcId = (plcIdO == null ? null : plcIdO.toString());
        }
        // System.out.println("Setting Price Plc to :"+plcId);
        _log.info("Setting Price Plc to : " + plcId);
        return plcId;
    }

    /**
     * Method to fetch Price policy attached to customer .
     *
     * @return
     */
    public String getEoPricePlcMethod() {

        String Flag = "N";
        SlsQuotVOImpl impl = this.getSlsQuot1();

        Row cRow = impl.getCurrentRow();
        if (cRow != null) {
            if (cRow.getAttribute("EoPricePlc") != null) {
                Flag = "N";
            } else {
                Flag = "Y";
            }
        }
        return Flag;
    }

    /**
     * Method to fetch Customer Name on the Basis of Customer Id.
     * @param custNm
     * @return
     */
    public ArrayList<String> getCustomerSuggestions(String custNm) {
        ArrayList<String> h = new ArrayList<String>();
        ViewObjectImpl autoSuggestVO = this.getLOVForCustomerNameAutoSuggest1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        autoSuggestVO.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        autoSuggestVO.setNamedWhereClauseParam("EoNmBind", custNm);
        //  autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("EoNm").toString());
        }
        return h;
    }

    public String getFyIdFromDocIdAndDate() {
        String Flag = "N";
        Integer res = EbizParams.getFyIdOnCurrDtAndCurrOrg(this);
        if (res == -1) {
            ADFModelUtils.showFormattedFacesMessage("Financial Year is not Open for this Organisation on Current Date! ",
                                                    "Please Open Financial Year for Current Date before creating any document !",
                                                    FacesMessage.SEVERITY_ERROR);
            Flag = "N";
        } else {
            Flag = "Y";
        }
        return Flag;
    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Container's getter for LOVForCustomerNameAutoSuggest1.
     * @return LOVForCustomerNameAutoSuggest1
     */
    public ViewObjectImpl getLOVForCustomerNameAutoSuggest1() {
        return (ViewObjectImpl) findViewObject("LOVForCustomerNameAutoSuggest1");
    }

    /**
     * Container's getter for LovPlcNmVo1.
     * @return LovPlcNmVo1
     */
    public ViewObjectImpl getLovPlcNmVo1() {
        return (ViewObjectImpl) findViewObject("LovPlcNmVo1");
    }

    /**
     * Container's getter for LovPlcNmVo2.
     * @return LovPlcNmVo2
     */
    public ViewObjectImpl getLovPlcNmVo2() {
        return (ViewObjectImpl) findViewObject("LovPlcNmVo2");
    }

    /**
     * Container's getter for SLSQUOTFLEXVO1.
     * @return SLSQUOTFLEXVO1
     */
    public SLSQUOTFLEXVOImpl getSLSQUOTFLEXVO1() {
        return (SLSQUOTFLEXVOImpl) findViewObject("SLSQUOTFLEXVO1");
    }

    /**
     * Container's getter for SLSQuotToQuotFlxVL1.
     * @return SLSQuotToQuotFlxVL1
     */
    public ViewLinkImpl getSLSQuotToQuotFlxVL1() {
        return (ViewLinkImpl) findViewLink("SLSQuotToQuotFlxVL1");
    }

    /**
     * Container's getter for LovQueryForFlexFieldsVO1.
     * @return LovQueryForFlexFieldsVO1
     */
    public ViewObjectImpl getLovQueryForFlexFieldsVO1() {
        return (ViewObjectImpl) findViewObject("LovQueryForFlexFieldsVO1");
    }

    public Boolean insertOtherDetails() {
        Boolean flag = false;
        SLSQUOTFLEXVOImpl eXVO1 = this.getSLSQUOTFLEXVO1();

        ViewObjectImpl fieldsVO1 = this.getLovQueryForFlexFieldsVO1();
        fieldsVO1.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
        fieldsVO1.executeQuery();
        RowSetIterator crt = fieldsVO1.createRowSetIterator(null);
        while (crt.hasNext()) {
            Row next = crt.next();

            Row row = eXVO1.createRow();


            row.setAttribute("FieldId", next.getAttribute("FldId"));
            row.setAttribute("Reqd", next.getAttribute("Reqd"));
            row.setAttribute("DataType", next.getAttribute("DataType"));
            row.setAttribute("DataLen", next.getAttribute("DataLen"));
            eXVO1.insertRow(row);
            flag = true;
        }

        eXVO1.executeQuery();

        return flag;
    }

    /**
     * Container's getter for LovQueryForFlexLovVO1.
     * @return LovQueryForFlexLovVO1
     */
    public ViewObjectImpl getLovQueryForFlexLovVO1() {
        return (ViewObjectImpl) findViewObject("LovQueryForFlexLovVO1");
    }

    //Validation method for price policy
    public Boolean validationOnAddItem() {
        Boolean result = true;
        Row r = getSlsQuot1().getCurrentRow();
        Object prcPoly = r.getAttribute("EoPricePlc");
        if (prcPoly == null) {
            result = false;
        }
        System.out.println(result + " ===== The result Value");
        return result;

    }
    
    /**
     * Method to check all mendatroy field for flexy is not null
     */
    public Boolean isflexFieldNull() {
        Boolean result = false;
        Row allR[] = getSLSQUOTFLEXVO1().getAllRowsInRange();
        for (int x = 0; x < allR.length; x++) {
            if (allR[x].getAttribute("Reqd") != null) {
                if ("Y".equalsIgnoreCase(allR[x].getAttribute("Reqd").toString())) {
                    if (allR[x].getAttribute("FieldVal") == null) {
                        System.out.println("Trrue value is setting, Field is empty");
                        
                        return true;
                    }
                }
            }
        }
        return result;
    }

}
