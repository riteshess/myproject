package slsintimationslipapp.model.views;

import oracle.jbo.domain.Date;
import oracle.jbo.domain.NullValue;
import oracle.jbo.domain.RowID;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 30 17:09:32 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LOVConsigneeVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(LOVConsigneeVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(LOVConsigneeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlocId {
            public Object get(LOVConsigneeVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(LOVConsigneeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        HoOrgId {
            public Object get(LOVConsigneeVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(LOVConsigneeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EoType {
            public Object get(LOVConsigneeVORowImpl obj) {
                return obj.getEoType();
            }

            public void put(LOVConsigneeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EoId {
            public Object get(LOVConsigneeVORowImpl obj) {
                return obj.getEoId();
            }

            public void put(LOVConsigneeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EoNm {
            public Object get(LOVConsigneeVORowImpl obj) {
                return obj.getEoNm();
            }

            public void put(LOVConsigneeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CatgId {
            public Object get(LOVConsigneeVORowImpl obj) {
                return obj.getCatgId();
            }

            public void put(LOVConsigneeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgId {
            public Object get(LOVConsigneeVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(LOVConsigneeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DocDateTrans {
            public Object get(LOVConsigneeVORowImpl obj) {
                return obj.getDocDateTrans();
            }

            public void put(LOVConsigneeVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(LOVConsigneeVORowImpl object);

        public abstract void put(LOVConsigneeVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int EOTYPE = AttributesEnum.EoType.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int EONM = AttributesEnum.EoNm.index();
    public static final int CATGID = AttributesEnum.CatgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCDATETRANS = AttributesEnum.DocDateTrans.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LOVConsigneeVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }


    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }


    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }


    /**
     * Gets the attribute value for the calculated attribute EoType.
     * @return the EoType
     */
    public Integer getEoType() {
        return (Integer) getAttributeInternal(EOTYPE);
    }


    /**
     * Gets the attribute value for the calculated attribute EoId.
     * @return the EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }


    /**
     * Gets the attribute value for the calculated attribute EoNm.
     * @return the EoNm
     */
    public String getEoNm() {
        return (String) getAttributeInternal(EONM);
    }


    /**
     * Gets the attribute value for the calculated attribute CatgId.
     * @return the CatgId
     */
    public Integer getCatgId() {
        return (Integer) getAttributeInternal(CATGID);
    }


    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }


    /**
     * Gets the attribute value for the calculated attribute DocDateTrans.
     * @return the DocDateTrans
     */
    public Date getDocDateTrans() {
        
     Date currdt=(Date)Date.getCurrentDate();
     System.out.println("current date---"+currdt);
        return  currdt;
        // return (Timestamp) getAttributeInternal(DOCDATETRANS);
    }


    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
