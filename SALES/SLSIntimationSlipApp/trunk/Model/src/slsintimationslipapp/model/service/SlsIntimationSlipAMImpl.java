package slsintimationslipapp.model.service;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.annotation.PostConstruct;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;

import slsintimationslipapp.model.service.common.SlsIntimationSlipAM;
import slsintimationslipapp.model.views.LOVConsigneeVOImpl;
import slsintimationslipapp.model.views.SlsIntmSlipItmMstrVOImpl;
import slsintimationslipapp.model.views.SlsIntmSlipItmVOImpl;
import slsintimationslipapp.model.views.SlsIntmSlipVOImpl;

/**
 * abcd Not used following code
 */
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 30 11:11:08 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------

public class SlsIntimationSlipAMImpl extends ApplicationModuleImpl implements SlsIntimationSlipAM {
    private String itemIdAmVar;
    private boolean isAllItmZero = false;


    private static ADFLogger logAdf = ADFLogger.createADFLogger(SlsIntimationSlipAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public SlsIntimationSlipAMImpl() {
    }


    /**
     * Container's getter for SlsIntmSlip.
     * @return SlsIntmSlip
     */
    public SlsIntmSlipVOImpl getSlsIntmSlip() {
        return (SlsIntmSlipVOImpl) findViewObject("SlsIntmSlip");
    }

    /**
     * Container's getter for SlsIntmSlipItmMstr.
     * @return SlsIntmSlipItmMstr
     */
    public SlsIntmSlipItmMstrVOImpl getSlsIntmSlipItmMstr() {
        return (SlsIntmSlipItmMstrVOImpl) findViewObject("SlsIntmSlipItmMstr");
    }

    /**
     * Container's getter for SlsIntmSlipItm.
     * @return SlsIntmSlipItm
     */
    public SlsIntmSlipItmVOImpl getSlsIntmSlipItm() {
        return (SlsIntmSlipItmVOImpl) findViewObject("SlsIntmSlipItm");
    }

    /**
     * Container's getter for IntmSlipToItmMstrVL1.
     * @return IntmSlipToItmMstrVL1
     */
    public ViewLinkImpl getIntmSlipToItmMstrVL1() {
        return (ViewLinkImpl) findViewLink("IntmSlipToItmMstrVL1");
    }

    /**
     * Container's getter for ItmMstrToItmVL1.
     * @return ItmMstrToItmVL1
     */
    public ViewLinkImpl getItmMstrToItmVL1() {
        return (ViewLinkImpl) findViewLink("ItmMstrToItmVL1");
    }


    /**
     *
     * Body for function calling i.e template
     * to get the Input Parameters
     */
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }


    /*     public String generateAndSetDocId() {
        ViewObjectImpl intmnSlipVo = this.getSlsIntmSlip();
        Row intmnSlipVoRow = intmnSlipVo.getCurrentRow();
        if (intmnSlipVoRow != null) {
                Object dispDocIdFunc = callStoredFunction(Types.VARCHAR, "SLS.GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_USR_ORG(), 21509, intmnSlipVoRow.getAttribute("DocId"), null, "SLS$INTM$SLIP",
                                                    EbizParams.getFyIdOnCurrDtAndCurrOrg(this)
                });
                if(dispDocIdFunc != null){
                    intmnSlipVoRow.setAttribute("DispDocId", dispDocIdFunc);
                }
        }
        return dispDocIdFunc;
    } */


    /**
     * Method to auto Populate rows for shipment.
     * @return
     */
    public Integer autoPopulateShipmntItm() {
        ViewObjectImpl intmnSlipVo = this.getSlsIntmSlip();
        Row intmnSlipVoRow = intmnSlipVo.getCurrentRow();
        if (intmnSlipVoRow != null) {
            callStoredFunction(Types.NUMERIC, "SLS.FN_INS_SHIP_TO_INTM(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                               intmnSlipVoRow.getAttribute("DocId"), intmnSlipVoRow.getAttribute("DocDt"),
                               intmnSlipVoRow.getAttribute("EoId"), EbizParams.GLBL_APP_USR(),
                               intmnSlipVoRow.getAttribute("UsrIdCreateDt"), EbizParams.getFyIdOnCurrDtAndCurrOrg(this)
            });
            getDBTransaction().postChanges();
        }
        return 0;
    }

    /**
     * Container's getter for LOVConsignee.
     * @return LOVConsignee
     */
    public LOVConsigneeVOImpl getLOVConsignee() {
        return (LOVConsigneeVOImpl) findViewObject("LOVConsignee");
    }

    public void getDeleteRowsSldQty() {
        SlsIntmSlipItmVOImpl impl = getSlsIntmSlipItmVO1();
        impl.executeQuery();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            Object soldQtyO = row.getAttribute("SoldQty");
            Number soldQty = (soldQtyO == null ? StaticValue.NUMBER_ZERO : (Number) soldQtyO);
            if (soldQty.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                row.remove();
            }
        }

        /* ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        ViewObject searchIntmVo = this.getSearchIntimation();
        Row searchedRow = searchIntmVo.getCurrentRow();
        String itmIdAm = null;
        String shipDocIdAm = null;
        if (searchedRow != null && searchedRow.getAttribute("ItmId") != null) {
            itmIdAm = searchedRow.getAttribute("ItmId").toString();
        }
        if (searchedRow != null && searchedRow.getAttribute("ShipmntDocId") != null) {
            shipDocIdAm = searchedRow.getAttribute("ShipmntDocId").toString();
        }

        Integer count = 0;
        Number zero = new Number(0);
        RowSetIterator rsi = itmVo.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row z = rsi.next();
            if (z.getAttribute("SoldQty") != null) {
                if ((itmIdAm != null) && (shipDocIdAm != null)) {
                    if ((z.getAttribute("ShipmntDocId").toString().equalsIgnoreCase(shipDocIdAm)) &&
                        (z.getAttribute("ItmId").toString().equalsIgnoreCase(itmIdAm))) {
                        System.out.println("Inside If loop.");
                        if (((z.getAttribute("SoldQty").equals(zero)))) {
                            System.out.println("Remove");
                            count = count + 1;
                            z.remove();
                        }
                    }
                }
                if ((itmIdAm != null) && (shipDocIdAm == null)) {
                    if (z.getAttribute("ItmId").toString().equalsIgnoreCase(itmIdAm)) {
                        System.out.println((z.getAttribute("SoldQty").toString().equals(zero.toString())));
                        if ((z.getAttribute("SoldQty").toString().equals(zero.toString())) &&
                            (z.getAttribute("ItmId").toString().equalsIgnoreCase(itmIdAm))) {
                            System.out.println("Remove");
                            count = count + 1;
                            z.remove();
                        }
                    } else {
                        z.remove();
                    }
                }
                if ((shipDocIdAm != null) && (itmIdAm == null)) {
                    if (z.getAttribute("ShipmntDocId").toString().equalsIgnoreCase(shipDocIdAm)) {
                        System.out.println((z.getAttribute("SoldQty").toString().equals(zero.toString())));
                        if (z.getAttribute("SoldQty").toString().equals(zero.toString())) {
                            System.out.println("Remove");
                            count = count + 1;
                            z.remove();
                        }
                    } else {
                        z.remove();
                    }
                }
                if ((shipDocIdAm == null) && (itmIdAm == null)) {
                    if (z.getAttribute("SoldQty").toString().equals(zero.toString())) {
                        System.out.println("Remove");
                        count = count + 1;
                        z.remove();
                    }

                }
            } else {
                logAdf.info("sold quantity is zeroo for all rows");
                setIsAllItmZero(true);
            }
        }
        ViewObject nvl = (ViewObject) this.getSlsIntmSlipItmMstr();
        Integer rc = nvl.getRowCount();
        if (rc <= 0) {
            logAdf.info("sold quantity is zeroo for all rows");
            setIsAllItmZero(true);
        } */
    }

    public void getRowsIntmSlip(String docIdN) {
        ViewObjectImpl intmSlipVo = this.getSlsIntmSlip();
        ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        if (itmVo.getFilteredRows("DocId", docIdN).length == 0) {
            Row intmSlipVoCurrRow = intmSlipVo.getCurrentRow();
            intmSlipVoCurrRow.remove();
        }
    }


    /**
     * Container's getter for SlsIntmSlipItm1.
     * @return SlsIntmSlipItm1
     */
    public SlsIntmSlipItmVOImpl getSlsIntmSlipItm1() {
        return (SlsIntmSlipItmVOImpl) findViewObject("SlsIntmSlipItm1");
    }


    public Row getItmCurrentRow() {
        ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        Row itmVoRow = itmVo.getCurrentRow();

        return itmVoRow;
    }


    public String geShipIdFromCurrRowItem() {
        ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        Row itmVoRow = itmVo.getCurrentRow();
        String shipId = itmVoRow.getAttribute("ShipmntDocId").toString();
        return shipId;
    }


    /**
     *
     * @return
     */
    public ViewObject getIntmSlipVoImplAM() {
        return this.getSlsIntmSlip();
    }

    /**
     *
     * @return
     */
    public ViewObject getIntmSlipItmVoImplAM() {
        return this.getSlsIntmSlipItmMstr();
    }


    public void getResetFields() {
        ViewObjectImpl intmVo = this.getSlsIntmSlip();
        intmVo.setNamedWhereClauseParam("dispDocIdBindvar", null);
        intmVo.setNamedWhereClauseParam("docDtBindVar", null);
        intmVo.setNamedWhereClauseParam("eoIdBindVar", null);
        intmVo.executeQuery();

        ViewObjectImpl intmItmMstrVo = this.getSlsIntmSlipItmMstr();
        intmItmMstrVo.setNamedWhereClauseParam("shipDocIdBindVar", null);
        intmItmMstrVo.executeQuery();
    }


    public void setItemIdAmVar(String itemIdAmVar) {
        this.itemIdAmVar = itemIdAmVar;
    }

    public String getItemIdAmVar() {
        return itemIdAmVar;
    }

    public void getItemIdBindingBean(String itmIdbean) {
        System.out.println(itmIdbean);
        setItemIdAmVar(itmIdbean);
    }

    public String getTxnId() {
        String DocId = getSlsIntmSlip().getCurrentRow().getAttribute("DocId").toString();
        return DocId;
    }

    public void rollbackWhileAdd() {
        String docId;
        String eoIdNTrans = null;
        Integer entityId = null;
        ViewObject intmSlipVo = getSlsIntmSlip();
        Row intmSlipVoCurrRow = intmSlipVo.getCurrentRow();
        if (intmSlipVoCurrRow != null) {
            if (intmSlipVoCurrRow.getAttribute("DocId") != null) {
                docId = intmSlipVoCurrRow.getAttribute("DocId").toString();
                Row[] intmSlipfilteredRows = intmSlipVo.getFilteredRows("DocId", docId);
                if (intmSlipfilteredRows.length > 0) {
                    logAdf.info("length" + intmSlipfilteredRows.length);
                    for (Row rr : intmSlipfilteredRows) {
                        try {
                            if (rr.getAttribute("EoId") != null) {
                                entityId = Integer.parseInt(rr.getAttribute("EoId").toString());
                                logAdf.info(entityId + "----entityId");
                            }
                        } catch (NullPointerException npe) {
                            npe.printStackTrace();
                        }
                        if (entityId != null) {

                            Row[] consigneeVoRow = this.getLOVConsignee().getFilteredRows("EoId", entityId);
                            if (consigneeVoRow.length > 0) {
                                eoIdNTrans = consigneeVoRow[0].getAttribute("EoNm").toString();
                                intmSlipVoCurrRow.setAttribute("EoIdTrans", eoIdNTrans);
                                intmSlipVoCurrRow.setAttribute("DocDt", rr.getAttribute("DocDt"));
                            }
                        }
                    }
                }
            }
        }
    }
    private String DocIdTxnIntm = null;

    protected Object callProcedureOut(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        // System.out.println("__________________________________________begin");
        try {
            String driver = getdrivername();
            if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                st = this.getDBTransaction().createCallableStatement("  " + stmt + ";", 0);
                System.out.println("st are::::" + st);
            } else {
                st = this.getDBTransaction().createCallableStatement("begin  " + stmt + ";end;", 0);
            }

            ///st.registerOutParameter(1, sqlReturnType);
            System.out.println("bind var length   :::: " + bindVars.length);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                    //System.out.println(bindVars[z]);
                }
            }
            System.out.println(bindVars.length + 1 + " :::" + sqlReturnType);
            st.registerOutParameter(bindVars.length + 1, sqlReturnType);
            System.out.println("before execute:::" + st);
            st.executeUpdate();
            System.out.println("Hello::::::");
            //System.out.println("__________________________________________end");
            return st.getObject(bindVars.length + 1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        Integer insToTxn = null;
        try {
            String DocId = getDocIdTxnIntm();
            String driver = getdrivername();
            if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                insToTxn =
                    Integer.parseInt(callProcedureOut(Types.NUMERIC, "call WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo,
                                                      levelFrm, levelTo, action, remark, amount.intValue(), "S"
                }).toString());
            } else {
                insToTxn =
                    Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm,
                                                        usr_idTo, levelFrm, levelTo, action, remark, amount, "S"
                }).toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return insToTxn;

    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Integer usrLvl = null;
        try {
            logAdf.info("SlocId : " + SlocId + " CldId : " + CldId + " OrgId : " + OrgId + "UsrId : " + UsrId +
                        " WfNo: " + WfNo + " DocNo : " + DocNo);
            /*   usrLvl =
                    Integer.parseInt(callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_USR_LEVEL(?,?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                            CldId,
                                                                                                                            OrgId,
                                                                                                                            UsrId,
                                                                                                                            WfNo,
                                                                                                                            DocNo }).toString()); */
            String driver = getdrivername();
            if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                usrLvl = Integer.parseInt(callStoredFunction(Types.NUMERIC, "call WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                             SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
                }).toString());


            } else {
                usrLvl = Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                             SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
                }).toString());


            }
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return usrLvl;

    }


    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        try {
            logAdf.info("SlocId : " + SlocId + " CldId : " + CldId + " OrgId : " + OrgId + "DocNo : " + DocNo);
            /*   Object obj =
                callStoredFunction(Types.VARCHAR, "APP.PKG_APP_WF.GET_WF_ID(?,?,?,?)", new Object[] { SlocId, CldId,
                                                                                                      OrgId, DocNo }); */
            Object obj = null;
            String driver = getdrivername();
            if (driver.equalsIgnoreCase("MySQL-AB JDBC Driver")) {
                obj = callStoredFunction(Types.VARCHAR, "call WF_GET_ID(?,?,?,?,?)", new Object[] {
                                         SlocId, CldId, OrgId, DocNo, 0
                });
            } else {
                obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                         SlocId, CldId, OrgId, DocNo, 0
                });
            }
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }


    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        Integer UsrId = null;
        try {
            String DocId = getDocIdTxnIntm();
            Object obj = null;
            obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                     SlocId, CldId, OrgId, DocNo, DocId, 0
            });
            if (obj != null) {
                UsrId = Integer.parseInt(obj.toString());
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return UsrId;
    }

    public void getBalQtyOnSldQtyChng(Number SldQty, Number ShipQty) {
        logAdf.info("inside getBalQtyOnSldQtyChng");
        ViewObjectImpl itmVo = this.getSlsIntmSlipItm1();
        logAdf.info("itmVo : " + itmVo);
        if (itmVo != null) {

            Row itmVoRow = itmVo.getCurrentRow();
            logAdf.info("itmVoRow : " + itmVoRow);
            if (itmVoRow != null) {
                itmVo.executeQuery();
            }
        }
    }

    public void getRowAftrInsert(String docId) {
        ViewObject slsIntmSlipVo = this.getSlsIntmSlip();
        if (docId == "R") {
        } else {
        }
        slsIntmSlipVo.executeQuery();
    }


    public void setDocIdTxnIntm(String DocIdTxnIntm) {
        this.DocIdTxnIntm = DocIdTxnIntm;
    }

    public String getDocIdTxnIntm() {
        if (getSlsIntmSlip().getCurrentRow().getAttribute("DocId").toString() != null) {
            return getSlsIntmSlip().getCurrentRow().getAttribute("DocId").toString();
        } else {
            return DocIdTxnIntm;
        }
    }

    /**
     *
     * @param data
     * @return
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public void setStatusUpdBalQuant() {
        Boolean success = true;
        String wfFlag = resolvEl("#{pageFlowScope.WF_RET_VAL}").toString();
        ViewObject slsIntm = this.getSlsIntmSlip();
        Row curRow = slsIntm.getCurrentRow();

        if (curRow != null && curRow.getAttribute("DocId") != null) {
            if (wfFlag.equalsIgnoreCase("A")) {
                curRow.setAttribute("IntmMode", 314);
                curRow.setAttribute("IntmStat", 442);
                getDBTransaction().postChanges();
                updateTempBalQty();
                if (success) {
                    Integer entries = passWtyEntries();
                    if (entries == 1) {
                        success = true;
                    } else {
                        success = false;
                    }
                }
            } else if (wfFlag.equalsIgnoreCase("F")) {
                curRow.setAttribute("IntmMode", 317);
                curRow.setAttribute("IntmStat", 441);
                success = true;
            } else if (wfFlag.equalsIgnoreCase("I")) {
                updateTempBalQty();
                success = true;
            }

        }
        if (success) {
            try {
                this.getDBTransaction().commit();
            } catch (Exception e) {
                e.printStackTrace();
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2256"), e.getMessage(),
                                                        FacesMessage.SEVERITY_ERROR);
                this.getDBTransaction().rollback();
            }
        } else {
            this.getDBTransaction().rollback();
        }

    }

    public void setIsAllItmZero(boolean isAllItmZero) {
        this.isAllItmZero = isAllItmZero;
    }

    public boolean isIsAllItmZero() {
        return isAllItmZero;
    }

    /**Method to Convert Quantity to base quantity
     * @param itmQty
     */
    public void setQtyBs(Number itmQty, Row row) {
        ViewObject slsIntmSlipItm = this.getSlsIntmSlipItm1();
        BigDecimal convBFctr = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                                               EbizParams.GLBL_APP_SERV_LOC(),
                                                               EbizParams.GLBL_APP_CLD_ID(),
                                                               EbizParams.GLBL_APP_USR_ORG(), row.getAttribute("ItmId"),
                                                               row.getAttribute("ItmUomBs"), row.getAttribute("ItmUom")
        });
        Number convFctr;
        try {
            if (convBFctr != null) {
                convFctr = new Number(convBFctr);
            } else {
                convFctr = new Number(1);
            }

            logAdf.info("Uom Factor-" + convFctr);
            Number uomConv = new Number(1);
            if (convFctr != null) {
                try {
                    uomConv = new Number(convFctr);
                    logAdf.info("uomConv : " + uomConv);
                } catch (Exception e) {
                    logAdf.info(e);
                }
            }
            Number qtyBs = uomConv.multiply(itmQty);
            if (qtyBs != null && uomConv != null) {
                row.setAttribute("UomConvFctr", uomConv);
                row.setAttribute("ItmQtyBs", qtyBs);
                slsIntmSlipItm.executeQuery();
            }

        } catch (SQLException e) {
            e.printStackTrace();
        }

    }

    public void resIntimationSlip(String docTxnIdRes) {
        ViewObjectImpl vo = this.getSlsIntmSlip();
        ViewCriteria vc = vo.getViewCriteria("SlsIntmSlipVOCriteria1");
        String DocId = docTxnIdRes;
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("cldIdBindVar", EbizParams.GLBL_APP_CLD_ID());
        vo.setNamedWhereClauseParam("slocIdBindVar", EbizParams.GLBL_APP_SERV_LOC());
        vo.setNamedWhereClauseParam("orgIdBindVar", EbizParams.GLBL_APP_USR_ORG());
        vo.setNamedWhereClauseParam("docIdBindVar", DocId);
        vo.executeQuery();
    }

    public void deleteIntimationOnCancel() {
        ViewObject slsIntm = this.getSlsIntmSlip();
        ViewObject slsintmItm = this.getSlsIntmSlipItm1();
        ViewObjectImpl impl = this.getSLSIntmSlipItmStkVO1();
        Row intmRow = slsIntm.getCurrentRow();

        if (intmRow != null && intmRow.getAttribute("DocId") != null) {
            String docID = intmRow.getAttribute("DocId").toString();
            Row[] filteredRows = slsintmItm.getFilteredRows("DocId", docID);
            Row[] row = impl.getFilteredRows("DocId", docID);
            if (filteredRows.length > 0) {
                for (Row r : filteredRows) {
                    r.remove();
                }
            }
            if (row.length > 0) {
                for (Row rw : row) {
                    rw.remove();
                }
            }
            slsintmItm.executeQuery();
            impl.executeQuery();
            intmRow.remove();
            slsIntm.executeQuery();
            this.getDBTransaction().commit();
        }

    }


    public boolean chkSoldQtyEntererorNot() {
        Boolean value = false;
        Number zero = new Number(0);
        RowSetIterator rsi = this.getSlsIntmSlipItmVO1().createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();

            if (next.getAttribute("SoldQty") != null) {
                if (!next.getAttribute("SoldQty").toString().equals(zero.toString())) {
                    value = true;
                }
            }
        }
        rsi.closeRowSetIterator();
        return value;
    }

    public Boolean checkSerialValidation() {
        Boolean flag = false;
        SlsIntmSlipItmVOImpl impl = this.getSlsIntmSlipItm();
        String serialFlg =
            impl.getCurrentRow().getAttribute("ItemSerializedFlg") == null ? " " :
            impl.getCurrentRow().getAttribute("ItemSerializedFlg").toString();
        if (serialFlg.equalsIgnoreCase("Y")) {
            String docId =
                impl.getCurrentRow().getAttribute("DocId") == null ? " " :
                impl.getCurrentRow().getAttribute("DocId").toString();
            ViewObjectImpl intmSlipItmStkVO1 = this.getSLSIntmSlipItmStkVO1();
            Row[] filteredRows = intmSlipItmStkVO1.getFilteredRows("DocId", docId);
            if (filteredRows.length > 0) {
                flag = true;
            } else {
                flag = false;
            }
        } else {
            flag = true;
        }
        return flag;
    }

    public void refreshVo() {
        SlsIntmSlipVOImpl impl = this.getSlsIntmSlip();
        impl.setWhereClause(null);
    }


    public Integer checkForEditDoc() {
        String p_UsrId = resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();
        Row currentRow = this.getSlsIntmSlip().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("IntmStat") != null) {
            Object doc = currentRow.getAttribute("DocId");
            Object obj = null;
            obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                     EbizParams.GLBL_APP_USR_ORG(), 21509, doc.toString(), 0
            });

            Integer UsrId = null;
            if (obj != null) {
                UsrId = Integer.parseInt(obj.toString());
            }
            if (UsrId != null && UsrId.equals(Integer.parseInt(p_UsrId))) {
                return UsrId;
            }
        } else {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        }
        return null;
    }

    public void updateIntmBalQty() {
        if (this.getSlsIntmSlip().getCurrentRow() != null) {
            //Row currentRow = this.getSlsIntmSlip().getCurrentRow();
            Row[] allRowsInRange = this.getSlsIntmSlipItmMstr().getAllRowsInRange();
            for (int i = 0; i < allRowsInRange.length; i++) {
                Object attribute = allRowsInRange[i].getAttribute("DocId");
                Row[] filteredRows = this.getSlsIntmSlipItm1().getFilteredRows("DocId", attribute.toString());
                for (int j = 0; j < filteredRows.length; j++) {
                    Object itmId = filteredRows[j].getAttribute("ItmId");
                    Object shipDocId = filteredRows[j].getAttribute("ShipmntDocId");
                    if (shipDocId != null && attribute != null && itmId != null) {
                        Number n =
                            call_FN_INTM_SHIP_QTY_DISP(shipDocId.toString(), attribute.toString(), itmId.toString(),
                                                       "E", filteredRows[j].getAttribute("SoId"));
                        if (n.compareTo(0) < 0) {
                            n = new Number(0);
                        }
                        filteredRows[j].setAttribute("BalQty", n);
                        System.out.println("Balqty is: " + n);
                    }
                }
            }
        }
    }

    public Number call_FN_INTM_SHIP_QTY_DISP(String shipDoc, String DocId, String ItmId, String mode, Object soId) {
        Row currentRow = this.getSlsIntmSlip().getCurrentRow();
        BigDecimal val = null;
        val = (BigDecimal) callStoredFunction(Types.NUMERIC, "FN_INTM_SHIP_QTY_DISP(?,?,?,?,?,?,?,?,?)", new Object[] {
                                              EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                              EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), shipDoc,
                                              ItmId, mode, DocId, soId
        });
        Number n = new Number(0);
        if (val != null) {
            try {
                n = new Number(val);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        return n;
    }


    public String getdrivername() {
        String drivernme = "";
        DBTransaction dbTransaction = (DBTransaction) this.getTransaction();
        PreparedStatement prepStatement = dbTransaction.createPreparedStatement("select * from dual", 0);
        try {
            System.out.println("Driver name--" + prepStatement.getConnection().getMetaData().getDriverName());
            drivernme = prepStatement.getConnection().getMetaData().getDriverName();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return drivernme;
    }


    /**
     * Method to check if user is allowed to edit
     * @return
     */
    public Integer isUserAllowedToEdit() {
        Integer i = -1;
        Row currentRow = getSlsIntmSlip().getCurrentRow();
        Integer a = WorkFlowUtils.docPendingAt(this, 21509, 0, currentRow.getAttribute("DocId"));
        if (!(a.equals(EbizParams.GLBL_APP_USR()) || a.equals(-1))) {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2246") +
                                                    EbizParams.getUsrDescFrmUsrId(this, a) + "]",
                                                    ADFModelUtils.resolvRsrc("MSG.2247"), //You cannot not edit this Intimation as the current Intimation have been send to another user for Approval. Only the user on whome this document is pending at can edit this Intimation
                                                    FacesMessage.SEVERITY_INFO);

        } else {
            i = 1;
        }

        return i;
    }

    /**
     * Method to pass entries of WorkFlow
     * @return
     */
    public Integer passWorkFlowEntries() {
        Integer i = -1;
        Row currentRow = getSlsIntmSlip().getCurrentRow();
        try {
            i = WorkFlowUtils.insertWfTxnEntriesForCurrDoc(this, 21509, 0, currentRow.getAttribute("DocId"),
                                                           EbizParams.GLBL_APP_USR(), EbizParams.GLBL_APP_USR(), "arg6",
                                                           StaticValue.NUMBER_ZERO);
            getDBTransaction().commit();
        } catch (Exception e) {
            i = -1;
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2248"),
                //There have been some problem while passing entries of Workflow !
                e.getMessage(), FacesMessage.SEVERITY_FATAL);
            e.printStackTrace();
        }
        return i;
    }

    /**
     * Container's getter for SlsIntmSlipItmVO1.
     * @return SlsIntmSlipItmVO1
     */
    public SlsIntmSlipItmVOImpl getSlsIntmSlipItmVO1() {
        return (SlsIntmSlipItmVOImpl) findViewObject("SlsIntmSlipItmVO1");
    }

    /**
     * Container's getter for IntmSlipToIntmSlipItmVL1.
     * @return IntmSlipToIntmSlipItmVL1
     */
    public ViewLinkImpl getIntmSlipToIntmSlipItmVL1() {
        return (ViewLinkImpl) findViewLink("IntmSlipToIntmSlipItmVL1");
    }


    /**
     * Container's getter for SearchIntmVO1.
     * @return SearchIntmVO1
     */
    public ViewObjectImpl getSearchIntmVO1() {
        return (ViewObjectImpl) findViewObject("SearchIntmVO1");
    }

    /**
     * Container's getter for SearchResultsIntmVO1.
     * @return SearchResultsIntmVO1
     */
    public ViewObjectImpl getSearchResultsIntmVO1() {
        return (ViewObjectImpl) findViewObject("SearchResultsIntmVO1");
    }
    /*******************************************************************************************************************************************************************/

    /**
     * Method to check if Balance quantity is valid in edit mode
     * @return
     */
    public int checkForLessBalQty() {
        if (this.getSlsIntmSlip().getCurrentRow() != null) {
            SlsIntmSlipItmVOImpl impl = getSlsIntmSlipItmVO1();
            impl.executeQuery();
            RowSetIterator ctr = impl.createRowSetIterator(null);
            while (ctr.hasNext()) {
                Row row = ctr.next();
                Object soddqtyO = row.getAttribute("SoldQty");
                Object baldqtyO = row.getAttribute("BalQty");

                Number soldqty = (soddqtyO == null ? StaticValue.NUMBER_ZERO : (Number) soddqtyO);
                Number baldqty = (baldqtyO == null ? StaticValue.NUMBER_ZERO : (Number) baldqtyO);

                if (soldqty.compareTo(StaticValue.NUMBER_ZERO) <= 0) {
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2250"),
                        //Sold Quantity can not be less than or equal to zero !!
                        ADFModelUtils.resolvRsrc("MSG.2250"), // Sold Quantity can not be less than or equal to zero !!
                        FacesMessage.SEVERITY_ERROR);
                    return 1;
                } /* else if (baldqty == null) {
                    ADFModelUtils.showFormattedFacesMessage("Balance quantity can not be empty !!",
                                                            "Balance quantity can not be empty !!",
                                                            FacesMessage.SEVERITY_ERROR);
                    return 2;
                }  */ else if (soldqty.compareTo(baldqty) > 0) {
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2252"),
                        //Sold quantity can not be greater than balance quantity !!
                        ADFModelUtils.resolvRsrc("MSG.2252"),
                        //Sold quantity can not be greater than balance quantity !!
                        FacesMessage.SEVERITY_ERROR);
                    return 3;
                }
            }
        }
        return 0;
    }

    /**
     *  Method to update temprory balance quantity on Save
     */
    public void updateTempBalQty() {
        System.out.println("Inside ::::::: updateTempBalQty");
        Row curRow = this.getSlsIntmSlip().getCurrentRow();
        callStoredFunction(Types.VARCHAR, "SLS.FN_INTM_SHIP_UPDATE(?,?,?,?,?,?)", new Object[] {
                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                           EbizParams.GLBL_APP_USR_ORG(), curRow.getAttribute("FyId"), curRow.getAttribute("DocId"),
        });
    }

    /**
     * Method to check if there is any item in which Sold Qty is greater than zero or not.
     * @return
     */
    public Boolean isSoldQtyEnteredOrNot() {
        Integer i = 0;
        SlsIntmSlipItmVOImpl impl = getSlsIntmSlipItmVO1();
        impl.executeQuery();
        RowSetIterator ctr = impl.createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row row = ctr.next();

            Object SoldQtyO = row.getAttribute("SoldQty");
            Number SoldQty = (SoldQtyO == null ? StaticValue.NUMBER_ZERO : (Number) SoldQtyO);
            System.out.println(row.getAttribute("ItmId") + " Qty : " + SoldQty);
            if (SoldQty.compareTo(StaticValue.NUMBER_ZERO) > 0) {
                i = i + 1;
                break;
            }
        }
        ctr.closeRowSetIterator();
        System.out.println("Sold Quantity Valid : " + i);
        if (i > 0) {
            return true;
        } else {
            return false;
        }

    }

    /**
     * Method to check if the checks are valid before save
     */
    public Boolean areChecksValid(String mode) {
        Boolean b = false;
        Integer i = 0;
        if ("A".equals(mode)) {
            if (!isSoldQtyEnteredOrNot()) {
                i = 1;
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2253"),
                    //Sold Quantity is not entered for any Item.
                    ADFModelUtils.resolvRsrc("MSG.2254"),
                    //Sold Quantity is not entered for any of the populated Items. Please enter Sold Quantity for atleast one Item to make Intimation Slip.
                    FacesMessage.SEVERITY_ERROR);
            } else {
                b = true;
            }
        } else if ("E".equals(mode)) {
            if (checkForLessBalQty() != 0) {
                b = false;
            } else {
                b = true;
            }
        }
        return b;
    }

    /**
     * Method to save Intimation
     * 0 : Saved Sucessfully
     * -1 : Error during Save
     * 1 : Sold Qty is not entered for any item
     * @param mode
     * @return
     */
    public Integer saveIntimation(String mode) {
        Integer i = 0;
        System.out.println("Passed Mode : " + mode);
        if (areChecksValid(mode)) {
            getDBTransaction().postChanges();
            updateTempBalQty();
            if ("A".equals(mode)) {
                getDeleteRowsSldQty();
            }

            try {
                getDBTransaction().commit();
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2255"),
                    //Intimation Slip Saved Successfully.
                    ADFModelUtils.resolvRsrc("MSG.2255"), // Intimation Slip Saved Successfully.
                    FacesMessage.SEVERITY_INFO);
                getSlsIntmSlipItmMstr().executeQuery();
                i = 0;
            } catch (Exception e) {
                i = -1;
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2256"),
                    //There have been an error while Saving Intimation.
                    (e.getCause() == null ? null : e.getCause().toString()), FacesMessage.SEVERITY_ERROR);
                e.printStackTrace();
            }
        } else {
            i = -1;
        }
        System.out.println("Returned :" + i);
        return i;
    }

    /**
     * Method Call on save and forward
     * @return
     */
    public String saveAndForward(String mode) {
        String success = null;
        Integer i = saveIntimation(mode);
        if (i == 0) {
            i = passWorkFlowEntries();

            if (i == -1) {

            } else {

                success = "goToWF";
            }
        } else {
            i = -1;
        }
        return success;
    }

    public void setInitialFilter() {
        /* ViewObjectImpl intmVO1 = getSearchResultsIntmVO1();
        intmVO1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        intmVO1.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocIdTrans"));
        intmVO1.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("OrgIdTrans"));
        intmVO1.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgIdTrans"));
        intmVO1.setNamedWhereClauseParam("EoIdBind", currentRow.getAttribute("EoIdTrans"));
        intmVO1.setNamedWhereClauseParam("DocIdBind", currentRow.getAttribute("IntmDocTxnIdTrans"));
        Object frmDtO = currentRow.getAttribute("FromDtTrans");
        impl.executeQuery(); */
    }

    /**
     * Method to search Intimation
     */
    public void search() {
        ViewObjectImpl impl = getSearchIntmVO1();
        Row currentRow = impl.getCurrentRow();

        ViewObjectImpl intmVO1 = getSearchResultsIntmVO1();
        intmVO1.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldIdTrans"));
        intmVO1.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocIdTrans"));
        intmVO1.setNamedWhereClauseParam("OrgIdBind", currentRow.getAttribute("OrgIdTrans"));
        intmVO1.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgIdTrans"));
        intmVO1.setNamedWhereClauseParam("EoIdBind", currentRow.getAttribute("EoIdTrans"));
        intmVO1.setNamedWhereClauseParam("DispIdBind", currentRow.getAttribute("IntmDispIdTrans"));
        Object frmDtO = currentRow.getAttribute("FromDtTrans");
        try {
            intmVO1.setNamedWhereClauseParam("FrmDtBind", (frmDtO == null ? null : ((Timestamp) frmDtO).dateValue()));
        } catch (SQLException e) {
        }
        Object toDtO = currentRow.getAttribute("ToDtTrans");

        try {
            intmVO1.setNamedWhereClauseParam("ToDtBind", (toDtO == null ? null : ((Timestamp) toDtO).dateValue()));
        } catch (SQLException e) {
        }
        intmVO1.executeQuery();

    }

    /**
     * Method to reset Intimation results
     */
    public void reset() {
        ViewObjectImpl impl = getSearchIntmVO1();
        Row currentRow = impl.getCurrentRow();
        ViewObjectImpl intmVO1 = getSearchResultsIntmVO1();
        intmVO1.setNamedWhereClauseParam("CldIdBind", currentRow.getAttribute("CldIdTrans"));
        intmVO1.setNamedWhereClauseParam("SlocIdBind", currentRow.getAttribute("SlocIdTrans"));
        intmVO1.setNamedWhereClauseParam("OrgIdBind", -1);
        intmVO1.setNamedWhereClauseParam("HoOrgIdBind", currentRow.getAttribute("HoOrgIdTrans"));
        intmVO1.setNamedWhereClauseParam("EoIdBind", null);
        intmVO1.setNamedWhereClauseParam("DispIdBind", null);
        intmVO1.setNamedWhereClauseParam("FrmDtBind", null);
        intmVO1.setNamedWhereClauseParam("ToDtBind", null);
        intmVO1.executeQuery();
        getSearchIntmVO1().executeQuery();
    }

    /**
     * Method to filter Vo on the basis of selected DocID
     */
    public void filterIntmVoWithDocId() {
        Object modeO = ADFModelUtils.resolvEl("#{pageFlowScope.MODE}");
        StringBuilder mode = (modeO == null ? new StringBuilder("V") : new StringBuilder(modeO.toString()));
        Object docTxnId = ADFModelUtils.resolvEl("#{pageFlowScope.DOC_ID}");
        if ("V".equals(mode.toString())) {
            ViewObjectImpl impl = getSlsIntmSlip();
            impl.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            impl.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            impl.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            impl.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            impl.setNamedWhereClauseParam("DocIdBind", docTxnId);
            impl.executeQuery();
        }
    }

    public Boolean checkForSoldQty() {
        Boolean flag = false;
        int count = 0;
        SlsIntmSlipItmVOImpl impl = this.getSlsIntmSlipItm();
        ViewObjectImpl shipSrVO = this.getSLSShipmentSRVO1();

        Row currentRow = impl.getCurrentRow();
        if (currentRow != null) {
            Number soldQtyVar = (Number) currentRow.getAttribute("SoldQty");
            System.out.println("SoldQty :::: " + soldQtyVar);
            System.out.println("shipSrVO :: " + shipSrVO.getRowCount());
            RowSetIterator crtShipSr = shipSrVO.createRowSetIterator(null);
            System.out.println("crtzhipSr :::: " + crtShipSr.getRowCount());


            while (crtShipSr.hasNext()) {
                Row next = crtShipSr.next();
                System.out.println(" next.getAttribute(\"TransCheckSR\") ::: " + next.getAttribute("TransCheckSR"));
                if (next.getAttribute("TransCheckSR") != null) {
                    if (next.getAttribute("TransCheckSR").equals("Y") ||
                        next.getAttribute("TransCheckSR").equals(true)) {
                        count = count + 1;
                        System.out.println("count :::: " + count);
                    }
                }
            }
            if (soldQtyVar.compareTo(count) == 0) {
                System.out.println("In false");
                flag = false;
            } else {
                System.out.println("In true");
                flag = true;
            }

        }
        return flag;
    }

    public Boolean setValuesFromShipSrTOIntmSr() {
        Boolean flag = false;
        ViewObjectImpl impl = this.getSLSShipmentSRVO1();
        SlsIntmSlipItmVOImpl intmSlipItm = this.getSlsIntmSlipItm();
        String intmDocIdVar =
            intmSlipItm.getCurrentRow().getAttribute("DocId") == null ? " " :
            intmSlipItm.getCurrentRow().getAttribute("DocId").toString();
        String intmItmVar =
            intmSlipItm.getCurrentRow().getAttribute("ItmId") == null ? " " :
            intmSlipItm.getCurrentRow().getAttribute("ItmId").toString();
        String intmShipDocIdVar =
            intmSlipItm.getCurrentRow().getAttribute("ShipmntDocId") == null ? " " :
            intmSlipItm.getCurrentRow().getAttribute("ShipmntDocId").toString();
        ViewObjectImpl intmSlipItmStk1 = this.getSLSIntmSlipItmStk1();
        ViewObjectImpl intmSlipItmStkVO1 = this.getSLSIntmSlipItmStkVO1();

        RowSetIterator crtStk = intmSlipItmStkVO1.createRowSetIterator(null);
        System.out.println(" crtStk row deletion :::: " + crtStk.getRowCount());
        while (crtStk.hasNext()) {
            System.out.println("Inside deletion while :::");
            Row next_2 = crtStk.next();
            next_2.remove();
            intmSlipItmStkVO1.executeQuery();
        }
        RowSetIterator crtShipStk = impl.createRowSetIterator(null);
        while (crtShipStk.hasNext()) {
            System.out.println("IN IF :::: ");
            Row next = crtShipStk.next();
            //  String docIdVar= next.getAttribute("DocId")==null?" ":next.getAttribute("DocId").toString();
            String itmIdVar = next.getAttribute("ItmId") == null ? " " : next.getAttribute("ItmId").toString();
            String itmUomVar = next.getAttribute("ItmUom") == null ? " " : next.getAttribute("ItmUom").toString();
            String lotIdVar = next.getAttribute("LotId") == null ? " " : next.getAttribute("LotId").toString();
            String binIdVar = next.getAttribute("BinId") == null ? " " : next.getAttribute("BinId").toString();
            String srNoVar = next.getAttribute("SrNo") == null ? " " : next.getAttribute("SrNo").toString();
            String docIdVar = next.getAttribute("DocId") == null ? " " : next.getAttribute("DocId").toString();
            String pickIdVar = next.getAttribute("PickId") == null ? " " : next.getAttribute("PickId").toString();
            String soIdVar = next.getAttribute("SoId") == null ? " " : next.getAttribute("SoId").toString();
            Integer totQty = new Integer(1);


            System.out.println("Inside if after deletion ::::: next.getAttribute(\"TransCheckSR\") ::::: " +
                               next.getAttribute("TransCheckSR") == null ? " " : next.getAttribute("TransCheckSR"));
            if (next.getAttribute("TransCheckSR") != null) {
                if (next.getAttribute("TransCheckSR").equals("Y") || next.getAttribute("TransCheckSR").equals(true)) {
                    System.out.println("Inside intmSlipItmStkVO1 create row:::: ");
                    Row createRow = intmSlipItmStkVO1.createRow();
                    //createRow.setAttribute("DocId", intmDocIdVar);
                    //createRow.setAttribute("ItmId", itmIdVar);
                    createRow.setAttribute("ItmUom", itmUomVar);
                    createRow.setAttribute("LotId", lotIdVar);
                    createRow.setAttribute("BinId", binIdVar);
                    createRow.setAttribute("SrNo", srNoVar);
                    createRow.setAttribute("TotQty", totQty);
                    createRow.setAttribute("ShipDocId", docIdVar);
                    intmSlipItmStkVO1.insertRow(createRow);
                    intmSlipItmStkVO1.executeQuery();
                    flag = true;
                }
            }
        }


        return flag;
    }

    /**
     * Method to get workflow Id of Current Document
     * @return
     */
    public String getWorkFlowId() {
        Object flowId = WorkFlowUtils.getWorkFlowId(this, 21509, 0);
        return (flowId == null ? null : flowId.toString());
    }

    /**
     * Container's getter for LOVItemVO1.
     * @return LOVItemVO1
     */
    public ViewObjectImpl getLOVItemVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemVO1");
    }

    /**
     * Container's getter for SLSShipmentSRVO1.
     * @return SLSShipmentSRVO1
     */
    public ViewObjectImpl getSLSShipmentSRVO1() {
        return (ViewObjectImpl) findViewObject("SLSShipmentSRVO1");
    }

    /**
     * Container's getter for SLSShipmentToSLSIntmItmSlipVL1.
     * @return SLSShipmentToSLSIntmItmSlipVL1
     */
    public ViewLinkImpl getSLSShipmentToSLSIntmItmSlipVL1() {
        return (ViewLinkImpl) findViewLink("SLSShipmentToSLSIntmItmSlipVL1");
    }

    /**
     * Container's getter for SLSIntmSlipItmStk1.
     * @return SLSIntmSlipItmStk1
     */
    public ViewObjectImpl getSLSIntmSlipItmStk1() {
        return (ViewObjectImpl) findViewObject("SLSIntmSlipItmStk1");
    }

    /**
     * Container's getter for SLSIntmSlipItmStkVO1.
     * @return SLSIntmSlipItmStkVO1
     */
    public ViewObjectImpl getSLSIntmSlipItmStkVO1() {
        return (ViewObjectImpl) findViewObject("SLSIntmSlipItmStkVO1");
    }

    /**
     * Container's getter for IntmItmToIntmStkVL1.
     * @return IntmItmToIntmStkVL1
     */
    public ViewLinkImpl getIntmItmToIntmStkVL1() {
        return (ViewLinkImpl) findViewLink("IntmItmToIntmStkVL1");
    }

    /**
     * @return
     */
    public Integer passWtyEntries() {
        Integer i = 1;

        System.out.println("warranty entries ");
        if ("Y".equals(checkforProfileValues(new StringBuffer("USE_WTY")).toString())) {
            Row currentRow = this.getSlsIntmSlip().getCurrentRow();
            Object docIdO = currentRow.getAttribute("DocId");
            Object o = null;
            try {
                o = ADFModelUtils.callFunction(this, new StringBuilder("SVC.SVC_INS_SC_WTY(?,?,?,?,?,?,?)"), new Object[] {
                                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 21509,
                                               docIdO, EbizParams.GLBL_APP_USR()
                }, Types.NUMERIC);
            } catch (Exception e) {
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2257"),
                    //There have been some problem while generating Warranty !
                    e.getMessage(), FacesMessage.SEVERITY_ERROR);
                e.printStackTrace();
                i = -1;
            }
            if (o != null) {
                BigDecimal j = (BigDecimal) o;
                if (j.compareTo(new BigDecimal(1)) != 0) {
                    i = -1;
                }
            }

            if (i == -1) {
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2257"),
                    // There have been some problem while generating Warranty !
                    ADFModelUtils.resolvRsrc("MSG.2258") + o, //The function for Generating Warranty returned
                    FacesMessage.SEVERITY_ERROR);
            }
        }

        return i;
    }

    public StringBuffer checkforProfileValues(StringBuffer colName) {
        colName = (colName == null ? new StringBuffer("") : colName);
        StringBuffer ck = new StringBuffer("");
        try {
            String policyPrice = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_sls_chk_org_prf(?,?,?,?)", new Object[] {
                                                             EbizParams.GLBL_APP_CLD_ID(),
                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                             EbizParams.GLBL_APP_USR_ORG(), colName.toString()
            });

            if (policyPrice == null || policyPrice.equals("")) {
                ck = new StringBuffer("N");
            } else {
                ck = new StringBuffer(policyPrice.toString());
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        //  _log.info("Policy Applied : "+ck);
        return ck;
    }

    public void filterShipmentSRVOOnShipId() {
        SlsIntmSlipItmVOImpl impl = this.getSlsIntmSlipItm();
        Row cRow = impl.getCurrentRow();
        String docId = cRow.getAttribute("ShipmntDocId") == null ? " " : cRow.getAttribute("ShipmntDocId").toString();
        ViewObjectImpl lSShipmentSRVO1 = this.getSLSShipmentSRVO1();
        lSShipmentSRVO1.setNamedWhereClauseParam("BindDocId", docId);
        lSShipmentSRVO1.executeQuery();
    }

    /**
     * Container's getter for SlsIntmFlx1.
     * @return SlsIntmFlx1
     */
    public ViewObjectImpl getSlsIntmFlx() {
        return (ViewObjectImpl) findViewObject("SlsIntmFlx");
    }

    /**
     * Container's getter for SlsIntmToSlsIntmFlxVL1.
     * @return SlsIntmToSlsIntmFlxVL1
     */
    public ViewLinkImpl getSlsIntmToSlsIntmFlxVL() {
        return (ViewLinkImpl) findViewLink("SlsIntmToSlsIntmFlxVL");
    }

    /**
     * Container's getter for LOVFlexFldData1.
     * @return LOVFlexFldData1
     */
    public ViewObjectImpl getLOVFlexFldData() {
        return (ViewObjectImpl) findViewObject("LOVFlexFldData");
    }


    /**
     * Method to create insert rows in flexi field
     */

    public void createFlexiField() {
        if(isFlexApplicable()){
            ViewObjectImpl flex = this.getLOVFlexFldData();
            flex.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            flex.setNamedWhereClauseParam("BindDocId", 21509);
            flex.executeQuery();

            RowSetIterator itr = flex.createRowSetIterator(null);
            System.out.println(itr.getRowCount());
            if (itr.getRowCount() > 0) {
                while (itr.hasNext()) {
                    Row appRow = itr.next();
                    ViewObjectImpl fldsVO = getSlsIntmFlx();

                    // System.out.println(appRow.getAttribute("DocId") + "|" + appRow.getAttribute("FldId"));
                    Row cRow = fldsVO.createRow();
                    //cRow.setAttribute("DocId", appRow.getAttribute("DocId"));
                    cRow.setAttribute("FieldId", appRow.getAttribute("FldId"));
                    cRow.setAttribute("FieldVal", null);
                    cRow.setAttribute("DataType", appRow.getAttribute("DataType"));
                    cRow.setAttribute("DataLen", appRow.getAttribute("DataLen"));
                    cRow.setAttribute("Reqd", appRow.getAttribute("Reqd"));
                    fldsVO.insertRow(cRow);
                }
            } 
        }
    }

    /**
     * Method to check all mendatroy field for flexy is not null
     */
    public Boolean isflexFieldNull() {
        Boolean result = false;
        Row allR[] = getSlsIntmFlx().getAllRowsInRange();
        for (int x = 0; x < allR.length; x++) {
            if (allR[x].getAttribute("Reqd") != null) {
                if ("Y".equalsIgnoreCase(allR[x].getAttribute("Reqd").toString())) {
                    if (allR[x].getAttribute("FieldVal") == null) {
                        System.out.println("Trrue value is setting, Field is empty");
                        
                        return true;
                    }
                }
            }
        }
        return result;
    }
    
    /**
     * Method to check flex field is applicable or not
     */
    public Boolean isFlexApplicable(){
        Boolean ck = false;
        try {
            Object policyPrice = ADFModelUtils.callFunction(this, new StringBuilder("SLS.fn_sls_chk_org_prf(?,?,?,?)"), new Object[] {
                                                             EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_USR_ORG(), "USE_FLX_FLD_IN_INTM"
            },Types.VARCHAR);

            if (policyPrice == null || "N".equalsIgnoreCase(policyPrice.toString())) {
                ck = false;
            } else if("Y".equalsIgnoreCase(policyPrice.toString())){
                ck = true;
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
        return ck;
    }

}
