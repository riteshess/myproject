package slsreportapp.model.entities;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.Date;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;


import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import oracle.sql.TIMESTAMP;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Apr 09 10:26:08 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsRptMdlEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        MdlCldId {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getMdlCldId();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setMdlCldId((String)value);
            }
        },
        MdlSlocId {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getMdlSlocId();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setMdlSlocId((Integer)value);
            }
        },
        MdlOrgId {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getMdlOrgId();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setMdlOrgId((String)value);
            }
        },
        MdlAppliStruct {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getMdlAppliStruct();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setMdlAppliStruct((String)value);
            }
        },
        MdlId {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getMdlId();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setMdlId((Integer)value);
            }
        },
        MdlAlias {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getMdlAlias();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setMdlAlias((String)value);
            }
        },
        MdlDesc {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getMdlDesc();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setMdlDesc((String)value);
            }
        },
        MdlTyp {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getMdlTyp();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setMdlTyp((String)value);
            }
        },
        UsrIdCreate {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        },
        UsrIdCreateDt {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Timestamp)value);
            }
        },
        UsrModId {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getUsrModId();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setUsrModId((Integer)value);
            }
        },
        UsrModDate {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getUsrModDate();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setUsrModDate((Timestamp)value);
            }
        },
        SlsRptMdlColPara {
            public Object get(SlsRptMdlEOImpl obj) {
                return obj.getSlsRptMdlColPara();
            }

            public void put(SlsRptMdlEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(SlsRptMdlEOImpl object);

        public abstract void put(SlsRptMdlEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int MDLCLDID = AttributesEnum.MdlCldId.index();
    public static final int MDLSLOCID = AttributesEnum.MdlSlocId.index();
    public static final int MDLORGID = AttributesEnum.MdlOrgId.index();
    public static final int MDLAPPLISTRUCT = AttributesEnum.MdlAppliStruct.index();
    public static final int MDLID = AttributesEnum.MdlId.index();
    public static final int MDLALIAS = AttributesEnum.MdlAlias.index();
    public static final int MDLDESC = AttributesEnum.MdlDesc.index();
    public static final int MDLTYP = AttributesEnum.MdlTyp.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRMODID = AttributesEnum.UsrModId.index();
    public static final int USRMODDATE = AttributesEnum.UsrModDate.index();
    public static final int SLSRPTMDLCOLPARA = AttributesEnum.SlsRptMdlColPara.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsRptMdlEOImpl() {
    }

    /**
     * Gets the attribute value for MdlCldId, using the alias name MdlCldId.
     * @return the value of MdlCldId
     */
    public String getMdlCldId() {
        return (String)getAttributeInternal(MDLCLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MdlCldId.
     * @param value value to set the MdlCldId
     */
    public void setMdlCldId(String value) {
        setAttributeInternal(MDLCLDID, value);
    }

    /**
     * Gets the attribute value for MdlSlocId, using the alias name MdlSlocId.
     * @return the value of MdlSlocId
     */
    public Integer getMdlSlocId() {
        return (Integer)getAttributeInternal(MDLSLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MdlSlocId.
     * @param value value to set the MdlSlocId
     */
    public void setMdlSlocId(Integer value) {
        setAttributeInternal(MDLSLOCID, value);
    }

    /**
     * Gets the attribute value for MdlOrgId, using the alias name MdlOrgId.
     * @return the value of MdlOrgId
     */
    public String getMdlOrgId() {
        return (String)getAttributeInternal(MDLORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MdlOrgId.
     * @param value value to set the MdlOrgId
     */
    public void setMdlOrgId(String value) {
        setAttributeInternal(MDLORGID, value);
    }

    /**
     * Gets the attribute value for MdlAppliStruct, using the alias name MdlAppliStruct.
     * @return the value of MdlAppliStruct
     */
    public String getMdlAppliStruct() {
        return (String)getAttributeInternal(MDLAPPLISTRUCT);
    }

    /**
     * Sets <code>value</code> as the attribute value for MdlAppliStruct.
     * @param value value to set the MdlAppliStruct
     */
    public void setMdlAppliStruct(String value) {
        setAttributeInternal(MDLAPPLISTRUCT, value);
    }

    /**
     * Gets the attribute value for MdlId, using the alias name MdlId.
     * @return the value of MdlId
     */
    public Integer getMdlId() {
        return (Integer)getAttributeInternal(MDLID);
    }

    /**
     * Sets <code>value</code> as the attribute value for MdlId.
     * @param value value to set the MdlId
     */
    public void setMdlId(Integer value) {
        setAttributeInternal(MDLID, value);
    }

    /**
     * Gets the attribute value for MdlAlias, using the alias name MdlAlias.
     * @return the value of MdlAlias
     */
    public String getMdlAlias() {
        return (String)getAttributeInternal(MDLALIAS);
    }

    /**
     * Sets <code>value</code> as the attribute value for MdlAlias.
     * @param value value to set the MdlAlias
     */
    public void setMdlAlias(String value) {
        setAttributeInternal(MDLALIAS, value);
    }

    /**
     * Gets the attribute value for MdlDesc, using the alias name MdlDesc.
     * @return the value of MdlDesc
     */
    public String getMdlDesc() {
        return (String)getAttributeInternal(MDLDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for MdlDesc.
     * @param value value to set the MdlDesc
     */
    public void setMdlDesc(String value) {
        setAttributeInternal(MDLDESC, value);
    }

    /**
     * Gets the attribute value for MdlTyp, using the alias name MdlTyp.
     * @return the value of MdlTyp
     */
    public String getMdlTyp() {
        return (String)getAttributeInternal(MDLTYP);
    }

    /**
     * Sets <code>value</code> as the attribute value for MdlTyp.
     * @param value value to set the MdlTyp
     */
    public void setMdlTyp(String value) {
        setAttributeInternal(MDLTYP, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrModId, using the alias name UsrModId.
     * @return the value of UsrModId
     */
    public Integer getUsrModId() {
        return (Integer)getAttributeInternal(USRMODID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrModId.
     * @param value value to set the UsrModId
     */
    public void setUsrModId(Integer value) {
        setAttributeInternal(USRMODID, value);
    }

    /**
     * Gets the attribute value for UsrModDate, using the alias name UsrModDate.
     * @return the value of UsrModDate
     */
    public Timestamp getUsrModDate() {
        return (Timestamp)getAttributeInternal(USRMODDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrModDate.
     * @param value value to set the UsrModDate
     */
    public void setUsrModDate(Timestamp value) {
        setAttributeInternal(USRMODDATE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getSlsRptMdlColPara() {
        return (RowIterator)getAttributeInternal(SLSRPTMDLCOLPARA);
    }

    /**
     * @param mdlCldId key constituent
     * @param mdlSlocId key constituent
     * @param mdlOrgId key constituent
     * @param mdlId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String mdlCldId, Integer mdlSlocId, String mdlOrgId, Integer mdlId) {
        return new Key(new Object[] { mdlCldId, mdlSlocId, mdlOrgId, mdlId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("slsreportapp.model.entities.SlsRptMdlEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        Object cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Object slocId = resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Object orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        
        setMdlCldId((cldId != null) ? cldId.toString() : null);
        setMdlSlocId((slocId != null) ? Integer.parseInt(slocId.toString()) : null);
        setMdlOrgId((orgId != null) ? orgId.toString() : null);
        setMdlAppliStruct("0");
        setMdlTyp("1");
        setMdlId(getId(cldId, slocId, orgId));
        
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //  super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        Object usrId = resolvEl("#{pageFlowScope.GLBL_APP_USR}");
        Object cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Object slocId = resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Object orgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");

        Timestamp date = new Timestamp(new Date().getTime());
        if (usrId != null) {
            if (operation == DML_INSERT) {
                setUsrIdCreate(Integer.parseInt(usrId.toString()));
                setUsrModId(Integer.parseInt(usrId.toString()));
                setUsrIdCreateDt(date);
                setUsrModDate(date);
               // setMdlId(getId(cldId, slocId, orgId));

            } else if (operation == DML_UPDATE) {
                setUsrModId(Integer.parseInt(usrId.toString()));
                setUsrModDate(date);
            }
        }
        super.doDML(operation, e);
    }

    public Integer getId(Object cldId, Object slocId, Object orgId) {
        BigDecimal id =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.GET_REP_MDL_ID(?,?,?)", new Object[] { cldId, slocId, orgId });
        Integer mdlId = id.intValue();
        return mdlId;
    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            try {
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }

    }
}
