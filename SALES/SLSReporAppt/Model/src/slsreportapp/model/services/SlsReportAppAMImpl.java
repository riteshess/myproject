package slsreportapp.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import slsreportapp.model.services.common.SlsReportAppAM;
import slsreportapp.model.views.ColDataTypeVOImpl;
import slsreportapp.model.views.SlsRptMdlColParaVOImpl;
import slsreportapp.model.views.SlsRptMdlColParaVORowImpl;
import slsreportapp.model.views.SlsRptMdlVORowImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Mar 06 13:01:18 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsReportAppAMImpl extends ApplicationModuleImpl implements SlsReportAppAM {                              
    /**
     * This is the default constructor (do not remove).
     */
    public SlsReportAppAMImpl() {
    }
    String fileType="";
    String test;
    String Module="";
    String viewName[]=new String[20];
    String viewDesc[]=new String[20];
    String viewAlias[]=new String[20];
    

    public void setModule(String Module) {
        this.Module = Module;
    }

    public String getModule() {
        return Module;
    }
    private Boolean callProc=true;

    /**
     * Container's getter for SlsRptMdl1.
     * @return SlsRptMdl1
     */
    public ViewObjectImpl getSlsRptMdl1() {
        return (ViewObjectImpl)findViewObject("SlsRptMdl1");
    }

    /**
     * Container's getter for SlsRptMdlColPara2.
     * @return SlsRptMdlColPara2
     */
    public SlsRptMdlColParaVOImpl getSlsRptMdlColPara2() {
        return (SlsRptMdlColParaVOImpl) findViewObject("SlsRptMdlColPara2");
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public ViewObjectImpl getSearch1() {
        return (ViewObjectImpl)findViewObject("Search1");
    }


    /**
     * Container's getter for SlsRptMdlTOSlsRptMdlColParaVL1.
     * @return SlsRptMdlTOSlsRptMdlColParaVL1
     */
    public ViewLinkImpl getSlsRptMdlTOSlsRptMdlColParaVL1() {
        return (ViewLinkImpl)findViewLink("SlsRptMdlTOSlsRptMdlColParaVL1");
    }

    public void search(Integer modId) {
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String Module=calcModule();
        ViewObjectImpl impl = this.getSlsRptMdl1();
        impl.setNamedWhereClauseParam("cld_id", cldId);
        impl.setNamedWhereClauseParam("org_id", orgId);
        impl.setNamedWhereClauseParam("sloc_id", slocId);
        impl.setNamedWhereClauseParam("SCHEMA", Module);
        //impl.setNamedWhereClauseParam("BindMdlId", modId);
        impl.executeQuery();
    }
    public String calcModule(){
        Integer glblDocId = Integer.parseInt(resolvEl("#{pageFlowScope.PFORM_ID}").toString());
        // vo.setNamedWhereClauseParam("BindGlblDocId", glblDocId);
        String Module="";
        System.out.println("GLOBAL DOC ID___________" + glblDocId);
        if(glblDocId==18524){
            Module="MM";
            System.out.println("MM___________________");
        } else if(glblDocId==18526){
            Module="MM";
        }else if(glblDocId==21511){
            Module="SLS";
        } else if(glblDocId==11516){
            Module="FIN";        
        } else if(glblDocId==11517){
            Module="FIN";
        } else if(glblDocId==11518){
            Module="FIN";   
        } else if(glblDocId==29503){
            Module="HCM";
        } else if(glblDocId==24501){
            Module="MNF";
        } else if(glblDocId==23010){
            Module="SVC";
        }
        
        return Module;
    }
    public void setBindValue(){
    
        ViewObjectImpl vo = this.getSlsRptMdl1();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
       
        vo.setNamedWhereClauseParam("cld_id", cldId);
        vo.setNamedWhereClauseParam("org_id", orgId);
        vo.setNamedWhereClauseParam("sloc_id", slocId);
        vo.setNamedWhereClauseParam("SCHEMA", calcModule());
        System.out.println("bind var after setting_____");
    
        System.out.println(vo.getNamedWhereClauseParam("cld_id"));
        System.out.println(vo.getNamedWhereClauseParam("sloc_id"));
        System.out.println(vo.getNamedWhereClauseParam("org_id"));
        System.out.println(vo.getNamedWhereClauseParam("SCHEMA"));
    }
    public void setAppName() {
        ViewObjectImpl vo = this.getAppNameVO1();
        ViewObjectImpl vo2 = this.getSearch1();
        ViewObjectImpl vo3 = this.getLOVViewNmVO1();
        ViewObjectImpl vo4 = this.getSlsRptMdl1();
       
       
      //  ViewObjectImpl vo4 = this.getAppRptTab1();
        
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String clddId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
       String Module=calcModule();
        vo4.setNamedWhereClauseParam("SCHEMA", Module);
        vo4.setNamedWhereClauseParam("cld_id", clddId);
             vo4.setNamedWhereClauseParam("sloc_id", slocid);
             vo4.setNamedWhereClauseParam("org_id", orgId);
        
        System.out.println("Current Module " + Module);
        vo3.setNamedWhereClauseParam("schema", Module);
        RowSetIterator iter =vo3.createRowSetIterator(null);
        int i=0;
        while (iter.hasNext()) {
        Row r = iter.next();
            System.out.println(i);
        //System.out.println(r.getAttribute("ViewName").toString());
        viewName[i]=r.getAttribute("ViewName").toString();
            System.out.println("view "+viewName[i]); 
        switch(viewName[i]){
            case "INVOICE$REP_VW": viewDesc[i]="Sales Invoice Report"; 
                                   viewAlias[i]= "SLS" + "_SlsInv"; break;
            case "SO$REP_VW": viewDesc[i]="Sales Order Report";
                                viewAlias[i]="SLS" + "_SlsSO"; break;
            case "SLS$PICK$PACK$SHIP$REP_VW": viewDesc[i]="Sales PickPackShip Report";
                                                viewAlias[i]="SLS" + "_PickPackShip"; break;
            case "MM$INVC$REP_VW": viewDesc[i]="PURCHASE INVOICE REPORT";
                                    viewAlias[i]="MM" + "_PurInv"; break;
            case "MM$RCPT$REP_VW": viewDesc[i]="RECEIPT REPORT";
                                    viewAlias[i]="MM" + "_Rcpt"; break;
            case "MM$PO$REP_VW":   viewDesc[i]="PURCHASE ORDER REPORT";
                                    viewAlias[i]="MM" + "_PO"; break;
            case "ARAP_OS_REP_VW":viewDesc[i]="ACCOUNT RECEIVABLE ACCOUNT PAYABLE REPORT";
                                    viewAlias[i]="FIN" + "_ARAP"; break;
            case "FIN_GL_REP_VW":viewDesc[i]="GENERAL LEDGER REPORT";
                                    viewAlias[i]="FIN" + "_GL"; break;
            case "SVC_CONTRACT_REP_VW":viewDesc[i]="SERVICE CONTRACT REPORT";
                                    viewAlias[i]="SVC" + "_SC"; break;
            case "SVC_INVC_REP_VW": viewDesc[i]="SERVICE INVOICE REPORT";
                                    viewAlias[i]="SVC" + "_SI"; break;
            case "SVC_SCM_REP_VW": viewDesc[i]="SERVICE CALL MANAGEMENT REPORT";
                                    viewAlias[i]="SVC" + "_SCM"; break;
            case "HCM$SAL$DETAILS$REP_VW": viewDesc[i]="HCM SALARY DETAILS REPORT";
                                    viewAlias[i]="HCM" + "_SAL"; break;
            case "HCM$SAL$REG$REP_VW": viewDesc[i]="HCM SALARY REGISTER REPORT";
                                    viewAlias[i]="HCM" + "SALREG"; break;
            default: viewDesc[i]="Untitled Report"; viewAlias[i]=Module + "_Rep";  
        
        }
        System.out.println("procedure parameters are");
        System.out.println(clddId);
        System.out.println(slocid);
        System.out.println(orgId);
        System.out.println(Module);
        System.out.println(viewName[i]);
        System.out.println(viewDesc[i]);
        System.out.println(viewAlias[i]);
        Boolean res=false;
       try {
           
        callStoredProcedure("SLS.ADD_REP_MODULE(?,?,?,?,?,?,?,?)", new Object[] {
                                               clddId, slocid, orgId, viewName[i], viewDesc[i], viewAlias[i],Module});
        
           res=true;
       } catch (SQLException e) {
           e.printStackTrace();
       } 
            if(res==true){
                getDBTransaction().commit();
            }
        
     
        System.out.println(test);
       
       
        i++;
    }
             ViewObjectImpl impl = this.getSlsRptMdl1();
             impl.setNamedWhereClauseParam("cld_id", clddId);
             impl.setNamedWhereClauseParam("org_id", orgId);
             impl.setNamedWhereClauseParam("sloc_id", slocid);
             impl.setNamedWhereClauseParam("SCHEMA", Module);
             //impl.setNamedWhereClauseParam("BindMdlId", modId);
             impl.executeQuery();
         iter.closeRowSetIterator();
    
         }
    /** Calling Procedure. **/
    public void callStoredProcedure(String stmt, Object[] bindVars) throws SQLException {
        System.out.println("function called------------");
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin " + stmt + "; end;", 0);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 1, bindVars[z]);
                    System.out.println();
                }
            }
     
            st.registerOutParameter(8, Types.VARCHAR);
            st.executeUpdate();
     
            try {
                test = (String)st.getObject(8);
     
            } catch (SQLException sqle) {
                // TODO: Add catch code
                sqle.printStackTrace();
            }
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
     
            throw new JboException(e.getMessage().substring(11, end));
     
        } finally {
     
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
     
                }
            }
        }
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

            CallableStatement st = null;
            try {
                // 1. Create a JDBC CallabledStatement
                st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                // 2. Register the first bind variable for the return value
                st.registerOutParameter(1, sqlReturnType);

                if (bindVars != null) {
                    // 3. Loop over values for the bind variables passed in, if any
                    for (int z = 0; z < bindVars.length; z++) {
                        // 4. Set the value of user-supplied bind vars in the stmt
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                // 5. Set the value of user-supplied bind vars in the stmt
                st.executeUpdate();
                // 6. Return the value of the first bind variable
             // adflog.info("Function return " + st.getObject(1));
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e.getMessage());
            } finally {
                if (st != null) {
                    try {
                        // 7. Close the statement
                        st.close();
                    } catch (SQLException e) {
                        throw new JboException(e.getMessage());
                    }
                }
            }
        }
    public void reset() {

        ViewObjectImpl impl = this.getSlsRptMdl1();
        if (impl != null) {
            impl.setNamedWhereClauseParam("BindCldId", null);
           //impl.setNamedWhereClauseParam("BindOrgId", null);
            impl.setNamedWhereClauseParam("BindSlocId", null);
            impl.setNamedWhereClauseParam("BindMdlId", null);
            impl.executeQuery();
            this.getSearch1().executeQuery();
        }
    }

    public void populate(Integer modId) {
        /* System.out.println("Mod id in amimpla " + modId);
        String orgId = "01";
        String clddId = "0000";
        Integer slocid = new Integer(1);
        System.out.println("Mod id in amimpla " + modId + " sloc id " + slocid + " rg id " + orgId + " cldis " +
                           clddId);
        ViewObjectImpl vo = this.getSlsRptMdlColPara2();
        ViewCriteria vc = vo.getViewCriteria("SlsRptMdlColParaVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("BindCldId", clddId);
        vo.setNamedWhereClauseParam("BindSlocId", slocid);
        vo.setNamedWhereClauseParam("BindOrgId", orgId);
        vo.setNamedWhereClauseParam("BindMdlId", modId);
        vo.executeQuery(); */

        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();

        ViewObjectImpl colPara2 = this.getSlsRptMdlColPara1();
        RowQualifier rq = new RowQualifier(colPara2);
        rq.setWhereClause("MdlCldId = '" + cldId + "' and MdlSlocId = " + slocId + " and MdlOrgId = '" + orgId);
        System.out.println("Query is:  " + rq.getExprStr());
        Row[] filteredRows = colPara2.getFilteredRows(rq);
        System.out.println("Number of filtered Rows: " + filteredRows.length);

        ViewObjectImpl impl = this.getSlsRptMdlColPara2();
        if (impl.getRowCount() > 0) {
            RowSetIterator itr = impl.createRowSetIterator(null);
            while (itr.hasNext()) {
                itr.next().remove();
            }
        }
        for (Row r : filteredRows) {

            Row row = impl.createRow();
            colPara2.insertRow(row);

            row.setAttribute("MdlTabId", r.getAttribute("MdlTabId"));
            row.setAttribute("MdlColNm", r.getAttribute("MdlColNm"));
            row.setAttribute("MdlColVsbl", r.getAttribute("MdlColVsbl"));
            row.setAttribute("MdlColSno", r.getAttribute("MdlColSno"));
            row.setAttribute("MdlColHeight", r.getAttribute("MdlColHeight"));
            row.setAttribute("MdlColWidth", r.getAttribute("MdlColWidth"));
            row.setAttribute("MdlColDesc", r.getAttribute("MdlColDesc"));
            row.setAttribute("MdlColSumm", r.getAttribute("MdlColSumm"));
            row.setAttribute("MdlGrpBy", r.getAttribute("MdlGrpBy"));
            row.setAttribute("MdlGrpSno", r.getAttribute("MdlGrpSno"));
            row.setAttribute("MdlColSumFlg", r.getAttribute("MdlColSumFlg"));
            //row.setAttribute("MdlId", getId(cldId,slocId,orgId));

        }
        ViewObjectImpl appRptMdlTab1 = this.getAppRptMdlTab1();
        if (appRptMdlTab1 != null) {
            Row createRow = appRptMdlTab1.createRow();
            appRptMdlTab1.insertRow(createRow);
        }
        ViewObjectImpl appRptTab1 = this.getAppRptTab1();
        RowQualifier rq1 = new RowQualifier(appRptTab1);
        Integer mdlId=getId(cldId,slocId,orgId);
        rq1.setWhereClause("TabCldId = '" + cldId + "' and TabSlocId = " + slocId + " and TabId = " + mdlId + " ");
        Row[] row = appRptTab1.getFilteredRows(rq1);

        if (appRptTab1 != null) {
            Row createRow = appRptTab1.createRow();
            appRptTab1.insertRow(createRow);
            createRow.setAttribute("TabNm", row[0].getAttribute("TabNm"));
            createRow.setAttribute("TabOwner", row[0].getAttribute("TabOwner"));
        }
    }

    public Integer getId(String cldId, Integer slocId, String orgId) {
        System.out.println("getrepmdlid");
        BigDecimal id =
            (BigDecimal)callStoredFunction(Types.NUMERIC, "SLS.GET_REP_MDL_ID(?,?,?)", new Object[] { cldId, slocId,
                                                                                                  orgId });
        Integer mdlId = id.intValue();
        return mdlId;
    }

    public void executePage() {
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();

        ViewObjectImpl impl = this.getSlsRptMdl1();
        impl.setNamedWhereClauseParam("BindCldId", cldId);
        impl.setNamedWhereClauseParam("BindOrgId", orgId);
        impl.setNamedWhereClauseParam("BindSlocId", slocId);
        impl.setNamedWhereClauseParam("BindMdlId", null);
        impl.executeQuery();
        
        ViewObjectImpl appRptMdlTab1 = this.getAppRptMdlTab1();
        appRptMdlTab1.setNamedWhereClauseParam("Cld_Id_Bind", cldId);
        appRptMdlTab1.setNamedWhereClauseParam("Sloc_Id_Bind", slocId);
        appRptMdlTab1.setNamedWhereClauseParam("Org_Id_Bind", orgId);
        appRptMdlTab1.executeQuery();

        ViewObjectImpl appRptTab1 = this.getAppRptTab1();
        appRptTab1.setNamedWhereClauseParam("Cld_Id_Bind", cldId);
        appRptTab1.setNamedWhereClauseParam("Sloc_Id_Bind", slocId);
        appRptTab1.executeQuery();
        
        System.out.println("Here is in impl..");
    }

    

    public String geenerateQuery() {
        System.out.println(".....................Came in Impl..................");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String clddId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        ViewObjectImpl vo = this.getSlsRptMdl1();
        System.out.println("vo  " + vo.getCurrentRow().getAttribute("MdlId"));
        System.out.println("parameters passed in function");
        System.out.println("cldid"+clddId);
        System.out.println("slocId"+slocid);
        System.out.println("orgId"+orgId);
        System.out.println("mdlid"+vo.getCurrentRow().getAttribute("MdlId"));
        String query =
            (String)callStoredFunction(Types.VARCHAR, "SLS.FN_GET_REP_QUERY(?,?,?,?)", new Object[] { clddId, slocid,
                                                                                                  orgId,
                                                                                                  vo.getCurrentRow().getAttribute("MdlId") });
        
        System.out.println("Query executed");
        System.out.println("query " + query);

        return query;
    }
    
    public Boolean createTemp(){
        Boolean retVal=false;
        System.out.println(".....................Came in Impl(CreateTemp)..................");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String clddId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl vo = this.getSearch1();
        System.out.println("selected scheme " + vo.getCurrentRow().getAttribute("SchmNmTrans"));
        System.out.println("selected view " + vo.getCurrentRow().getAttribute("ViewNmSchmTrans"));
        System.out.println("input desc " + vo.getCurrentRow().getAttribute("ViewDescTrans"));
        System.out.println("input alias " + vo.getCurrentRow().getAttribute("ViewAliasTrans"));

        return retVal;
    }

    public List getGroupWiseName() {
        ViewObjectImpl vo = this.getSlsRptMdlColPara2();
        List<String> grpname = new ArrayList<String>();
        Map<Integer, String> m = new HashMap<Integer, String>();

        RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            // String grpWise = (String)r.getAttribute("TransGrpBy");
            if (r.getAttribute("MdlColVsbl") != null && r.getAttribute("MdlGrpBy") != null &&
                r.getAttribute("MdlGrpSno") != null) {
                String grpWise = (String)r.getAttribute("MdlGrpBy");
                System.out.println("grpWise " + grpWise);
                if ((r.getAttribute("MdlColVsbl").toString()).equalsIgnoreCase("Y") && grpWise != null) {
                    if (grpWise.equals("Y")) {
                        System.out.println(" attribute nme " + r.getAttribute("MdlColNm"));
                        //    grpname.add((String)r.getAttribute("MdlColNm"));
                        //return (String)r.getAttribute("MdlColNm");
                        m.put(Integer.valueOf(r.getAttribute("MdlGrpSno").toString()),
                              (String)r.getAttribute("MdlColNm"));
                    }
                }
            }
        }
        Set<Map.Entry<Integer, String>> entrySet = m.entrySet();
        Iterator<Map.Entry<Integer, String>> iterator = entrySet.iterator();
        while (iterator.hasNext()) {
            Map.Entry<Integer, String> entry = iterator.next();
            grpname.add(entry.getValue());
        }
        return grpname;
    }
    public void getVar(String var){
        fileType=var;
    }
    public ArrayList getClmNm() {
        int i = 0;
        ArrayList<String> arr = new ArrayList<String>();
        ViewObjectImpl vo = this.getSlsRptMdlColPara2();
        RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            String clmVsbl = (String)r.getAttribute("MdlColVsbl");

            System.out.println("MdlColVsbl " + clmVsbl);
            if (clmVsbl != null) {
                if (clmVsbl.equals("Y")) {
                    
                    String clmNm = (String)r.getAttribute("MdlColNm");
                    String clmdecs = (String)r.getAttribute("MdlColDesc");
                    String list = clmNm + "-" + clmdecs;
                    System.out.println(" attribute nme " + r.getAttribute("MdlColNm"));

                    arr.add(i, list);
                    i++;
                }
            }
        }
        System.out.println("ass " + arr);
        return arr;
    }

    public ArrayList getClmDesc() {
        int i = 0;
        ArrayList<String> arr = new ArrayList<String>();
        ViewObjectImpl vo = this.getSlsRptMdlColPara2();
        RowSetIterator itr = vo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row r = itr.next();
            String clmVsbl = (String)r.getAttribute("MdlColVsbl");
            System.out.println("MdlColVsbl " + clmVsbl);
            if (clmVsbl != null) {
                
                if (clmVsbl.equals("Y")) {
                    
                    System.out.println("I " + i);
                    System.out.println(" attribute nme " + r.getAttribute("MdlColDesc"));
                    arr.add(i, (String)r.getAttribute("MdlColDesc"));
                    i++;
                }
            }

        }
        System.out.println("ass " + arr);
        return arr;
    }

    public List getSumColumnName() {
        ViewObjectImpl impl = this.getSlsRptMdlColPara2();
        RowSetIterator itr = impl.createRowSetIterator(null);
        List<String> sumGrpName = new ArrayList<String>();
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next.getAttribute("MdlColVsbl") != null && next.getAttribute("MdlColSumm") != null) {

                String attribute = next.getAttribute("MdlColSumm").toString();
                if ((next.getAttribute("MdlColVsbl").toString().equalsIgnoreCase("Y")) &&
                    attribute.equalsIgnoreCase("Y")) {
                    sumGrpName.add(next.getAttribute("MdlColNm").toString());
                }
            }
        }

        return sumGrpName;
    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    public List getColumnWidth() {
        Map<Integer, Integer> Width = new HashMap<Integer, Integer>();
                ArrayList<Integer> WidthList = new ArrayList<Integer>();
                ViewObjectImpl impl = this.getSlsRptMdlColPara2();
                RowSetIterator itr = impl.createRowSetIterator(null);
                while (itr.hasNext()) {
                    Row next = itr.next();
                    if (next != null) {
                        if ((next.getAttribute("MdlColVsbl") != null) &&
                            (next.getAttribute("MdlColVsbl").toString().equalsIgnoreCase("Y")) &&
                            next.getAttribute("MdlColWidth") != null && (next.getAttribute("MdlColSno") != null)) {
                            //Width.add(Integer.parseInt(next.getAttribute("MdlColWidth").toString()));
                            Width.put(Integer.valueOf(next.getAttribute("MdlColSno").toString()),
                                      Integer.valueOf(next.getAttribute("MdlColWidth").toString()));
                        }
                        //Integer a = Integer.valueOf("");
                    }
                }
                Set<Map.Entry<Integer, Integer>> entrySet = Width.entrySet();
                Iterator<Map.Entry<Integer, Integer>> itrator = entrySet.iterator();
                while (itrator.hasNext()) {
                    Map.Entry<Integer, Integer> entry = itrator.next();
                    WidthList.add(entry.getValue());
                }
                return WidthList;
    }
    public List setColumnWidth(){
        Map<Integer, Integer> Width = new HashMap<Integer, Integer>();
        ArrayList<Integer> WidthList = new ArrayList<Integer>();
        
        ViewObjectImpl col_type = this.getColDataTypeVO1();
        RowSetIterator itr = col_type.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != null) {
                
                    int width=100;
                    if(next.getAttribute("DataType").equals("NUMBER")){
                        width=30;
                    } else if(next.getAttribute("DataType").equals("VARCHAR2")){
                        width=100;
                    } else if(next.getAttribute("DataType").equals("DATE")){
                        width=25;
                    } else{
                        width=80;
                    }
                    next.setAttribute("MdlColWidth", width);
                    //Width.add(Integer.parseInt(next.getAttribute("MdlColWidth").toString()));
                    Width.put(Integer.valueOf(next.getAttribute("MdlColSno").toString()),
                              Integer.valueOf(next.getAttribute("MdlColWidth").toString()));
                    //RowSetIterator iter = view.createRowSetIterator(null);
                    //while()
                
                //Integer a = Integer.valueOf("");
            }
        }
        Set<Map.Entry<Integer, Integer>> entrySet = Width.entrySet();
        Iterator<Map.Entry<Integer, Integer>> itrator = entrySet.iterator();
        while (itrator.hasNext()) {
            Map.Entry<Integer, Integer> entry = itrator.next();
            WidthList.add(entry.getValue());
        }
        return WidthList;
    }

    public void isValidData() {
        ViewObjectImpl impl = this.getSlsRptMdl1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next.getAttribute("MdlColVsbl") != null &&
                next.getAttribute("MdlColVsbl").toString().equalsIgnoreCase("Y")) {
                //if(next.getAttribute("MdlColVsbl").toString())
            }
        }
    }

    /**
     * Container's getter for SlsRptMdlColPara1.
     * @return SlsRptMdlColPara1
     */
    public SlsRptMdlColParaVOImpl getSlsRptMdlColPara1() {
        return (SlsRptMdlColParaVOImpl) findViewObject("SlsRptMdlColPara1");
    }

    public boolean checkReportName(String name) {
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();

        ViewObjectImpl impl = this.getSlsRptMdl1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while(itr.hasNext()) {
            Row next = itr.next();
            if(next != impl.getCurrentRow()) {
                if(next.getAttribute("MdlDesc").toString().equalsIgnoreCase(name)) {
                    return false;
                }
            }
        }
        itr.closeRowSetIterator();
        
        /* RowQualifier rq = new RowQualifier(impl);
        rq.setWhereClause("MdlCldId = '" + cldId + "' and MdlSlocId = " + slocId + " and MdlOrgId = '" + orgId +
                          "' and MdlDesc = '" + name + "' ");
        Row[] filteredRows = impl.getFilteredRows(rq);
        if (filteredRows.length > 1) {
            return false;
        } */
        return true;
    }

    public boolean checkaliasName(String name) {
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();

        ViewObjectImpl impl = this.getSlsRptMdl1();
        RowSetIterator itr = impl.createRowSetIterator(null);
        while(itr.hasNext()) {
            Row next = itr.next();
            if(next != impl.getCurrentRow()) {
                if(next.getAttribute("MdlAlias").toString().equalsIgnoreCase(name)) {
                    return false;
                }
            }
        }
        itr.closeRowSetIterator();
        /* RowQualifier rq = new RowQualifier(impl);
        rq.setWhereClause("MdlCldId = '" + cldId + "' and MdlSlocId = " + slocId + " and MdlOrgId = '" + orgId +
                          "' and MdlAlias = '" + name + "' ");
        Row[] filteredRows = impl.getFilteredRows(rq);
        if (filteredRows.length > 1) {
            return false;
        } */
        return true;
    }
    
    public Integer validateForm() {
        /*
         *  1 - for empty order no.
         *  2.-for empty Column Width
         *  3. for empty group serial no.
         *  4. for Cloumn Description
         *  5. column sum can not be selected for group column
         *  6. please select the visible check box corresponding to the group
         *  7. Please select the visible check box corresponding to the Sum Check Box!!
         *  8. you can not select sum of the first column expect group!!
         *  9. please select visible check box for atleast one column
         * */
        
        Map<Integer, String> allcolumn = new HashMap<Integer, String>();
        ArrayList<String> sumClm = new ArrayList<String>();

        ViewObjectImpl colPara2 = this.getSlsRptMdlColPara2();
        RowSetIterator itr = colPara2.createRowSetIterator(null);
        int count=0;
        while (itr.hasNext()) {
            Row next = itr.next();
            int i=1;
            if (next != null) {
                //  SlsRptMdlColParaVORowImpl row = (SlsRptMdlColParaVORowImpl)next;
                //  String colVsbl = row.getMdlColVsbl();
                if (next.getAttribute("MdlColVsbl") != null &&
                    next.getAttribute("MdlColVsbl").toString().equals("Y")) {

                    if (next.getAttribute("MdlColSno") == null) {
                        return 1;
                    }
                    if (next.getAttribute("MdlColWidth") == null) {
                        return 2;
                    }
                    if (next.getAttribute("MdlGrpBy") != null &&
                        next.getAttribute("MdlGrpBy").toString().equals("Y") &&
                        next.getAttribute("MdlGrpSno") == null) {
                        next.setAttribute("MdlGrpSno", i);
                        i++;
                        return 3;
                    }
                    if (next.getAttribute("MdlColDesc") == null) {
                        return 4;
                    }
                    if (next.getAttribute("MdlGrpBy") != null &&
                        next.getAttribute("MdlGrpBy").toString().equals("Y") &&
                        next.getAttribute("MdlColSumm") != null &&
                        next.getAttribute("MdlColSumm").toString().equalsIgnoreCase("Y")) {
                        return 5;
                    }
                    if (next.getAttribute("MdlGrpBy") == null ||
                        next.getAttribute("MdlGrpBy").toString().equalsIgnoreCase("N")) {
                        allcolumn.put(Integer.parseInt(next.getAttribute("MdlColSno").toString()),
                                      next.getAttribute("MdlColNm").toString());
                    }
                    if (next.getAttribute("MdlColSumm") != null &&
                        next.getAttribute("MdlColSumm").toString().equalsIgnoreCase("Y")) {
                        sumClm.add(next.getAttribute("MdlColNm").toString());
                    }
                    ++count;
                } else {
                    if (next.getAttribute("MdlGrpBy") != null &&
                        next.getAttribute("MdlGrpBy").toString().equalsIgnoreCase("Y")) {
                        return 6;
                    }

                    if (next.getAttribute("MdlColSumm") != null &&
                        next.getAttribute("MdlColSumm").toString().equalsIgnoreCase("Y")) {
                        return 7;
                    }
                }

            }
        }
        if (allcolumn.size() > 0 && sumClm.size() > 0) {
            Set<Map.Entry<Integer, String>> entrySet = allcolumn.entrySet();
            Iterator<Map.Entry<Integer, String>> iterator = entrySet.iterator();
            boolean b = sumClm.contains(iterator.next().getValue());
            System.out.println("Value for first check: " + b);
            System.out.println(allcolumn);
            System.out.println(sumClm);
            if (b == true) {
                return 8;
            }
        }
        if(count ==0)
            return 9;
        return 0;
    }

    public Integer validateDuplicateValue() {
        ViewObjectImpl colPara2 = this.getSlsRptMdlColPara2();
        RowSetIterator itr = colPara2.createRowSetIterator(null);
        Map<Integer, Integer> clmSerno = new HashMap<Integer, Integer>();
        Map<Integer, Integer> grpSerno = new HashMap<Integer, Integer>();
        int count = 0, count1 = 0;

        while (itr.hasNext()) {
            Row next = itr.next();

            if (next != null) {

                if (next.getAttribute("MdlColVsbl") != null &&
                    next.getAttribute("MdlColVsbl").toString().equals("Y")) {

                    count++;
                    int clm = Integer.parseInt(next.getAttribute("MdlColSno").toString());

                    if (next.getAttribute("MdlGrpBy") != null &&
                        next.getAttribute("MdlGrpBy").toString().equals("Y")) {

                        int grp = Integer.parseInt(next.getAttribute("MdlGrpSno").toString());
                        grpSerno.put(grp, grp);
                        count1++;
                    }
                    clmSerno.put(clm, clm);

                }
            }
        }
        if (count != clmSerno.size())
            return 1;

        if (count1 != grpSerno.size())
            return 2;

        return 0;
    }

    public List getColumSumWihoutGrp() {
        List<String> list = new ArrayList<String>();
        ViewObjectImpl colPara2 = this.getSlsRptMdlColPara2();
        if (colPara2 != null) {
            RowSetIterator itr = colPara2.createRowSetIterator(null);
            while (itr.hasNext()) {
                Row next = itr.next();
                if (next.getAttribute("MdlColVsbl") != null &&
                    next.getAttribute("MdlColVsbl").toString().equalsIgnoreCase("Y") &&
                    next.getAttribute("MdlColSumm") != null &&
                    next.getAttribute("MdlColSumm").toString().equalsIgnoreCase("Y")) {
                    list.add(next.getAttribute("MdlColNm").toString());
                }
            }
        }
        return list;
    }

    /**
     * Container's getter for AppRptTab1.
     * @return AppRptTab1
     */
    public ViewObjectImpl getAppRptTab1() {
        return (ViewObjectImpl)findViewObject("AppRptTab1");
    }

    /**
     * Container's getter for AppRptMdlTab1.
     * @return AppRptMdlTab1
     */
    public ViewObjectImpl getAppRptMdlTab1() {
        return (ViewObjectImpl)findViewObject("AppRptMdlTab1");
    }
    
   
    public boolean deleteTable() {
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String Module=calcModule();
        Boolean del=false;
        try {
           
            ViewObjectImpl vo=this.getSlsRptMdl1();
            ViewObjectImpl vo1=this.getAppRptMdlTab1();
            ViewObjectImpl vo2=this.getAppRptTab1();
            ViewObjectImpl vo4=this.getSlsRptMdlColPara1();
            System.out.println("Schema in delete " + vo.getNamedWhereClauseParam("SCHEMA"));
            RowSetIterator iter=vo.createRowSetIterator(null);
            while(iter.hasNext()){
                Row r=iter.next();
                if(r.getAttribute("MdlCldId").equals(cldId) && r.getAttribute("MdlSlocId").equals(slocId) && r.getAttribute("MdlOrgId").equals(orgId)){
                    if(vo.getNamedWhereClauseParam("SCHEMA").equals(Module)){
                        r.remove();
                        del=true;
                    }
                }
            }
            RowSetIterator iter1=vo1.createRowSetIterator(null);
                while(iter1.hasNext()){
                    Row r=iter1.next();
                    if(r.getAttribute("MdlCldId").equals(cldId) && r.getAttribute("MdlSlocId").equals(slocId) && r.getAttribute("MdlOrgId").equals(orgId)){
                        if(vo.getNamedWhereClauseParam("SCHEMA").equals(Module)){
                            r.remove();
                            del=true;
                        }
                    }
                }
            RowSetIterator iter2=vo2.createRowSetIterator(null);
            while(iter2.hasNext()){
                Row r=iter2.next();
                if(r.getAttribute("TabCldId").equals(cldId) && r.getAttribute("TabSlocId").equals(slocId)){
                    if(vo.getNamedWhereClauseParam("SCHEMA").equals(Module)){
                        r.remove();
                        del=true;
                    }
                }
            }
            RowSetIterator iter4=vo4.createRowSetIterator(null);
                while(iter4.hasNext()){
                    Row r=iter4.next();
                    if(r.getAttribute("MdlCldId").equals(cldId) && r.getAttribute("MdlSlocId").equals(slocId) && r.getAttribute("MdlOrgId").equals(orgId)){
                        if(vo.getNamedWhereClauseParam("SCHEMA").equals(Module)){
                            r.remove();
                            del=true;
                        }
                    }
                }
            getDBTransaction().commit();

            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    /**
     * Container's getter for AppNameVO1.
     * @return AppNameVO1
     */
    public ViewObjectImpl getAppNameVO1() {
        return (ViewObjectImpl) findViewObject("AppNameVO1");
    }

    /**
     * Container's getter for LOVSchmNmVO1.
     * @return LOVSchmNmVO1
     */
    public ViewObjectImpl getLOVSchmNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVSchmNmVO1");
    }

    /**
     * Container's getter for LOVViewNmVO1.
     * @return LOVViewNmVO1
     */
    public ViewObjectImpl getLOVViewNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVViewNmVO1");
    }

    /**
     * Container's getter for AppRptTabVO1.
     * @return AppRptTabVO1
     */
    public ViewObjectImpl getAppRptTabVO1() {
        return (ViewObjectImpl) findViewObject("AppRptTabVO1");
    }

    /**
     * Container's getter for ColDataTypeVO1.
     * @return ColDataTypeVO1
     */
    public ColDataTypeVOImpl getColDataTypeVO1() {
        return (ColDataTypeVOImpl) findViewObject("ColDataTypeVO1");
    }

    /**
     * Container's getter for SLsRptMdlTabVO1.
     * @return SLsRptMdlTabVO1
     */
    public ViewObjectImpl getSLsRptMdlTabVO1() {
        return (ViewObjectImpl) findViewObject("SLsRptMdlTabVO1");
    }
}
