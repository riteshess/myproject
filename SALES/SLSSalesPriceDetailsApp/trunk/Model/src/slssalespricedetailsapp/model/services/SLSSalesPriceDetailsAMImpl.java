package slssalespricedetailsapp.model.services;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import slssalespricedetailsapp.model.services.common.SLSSalesPriceDetailsAM;
import slssalespricedetailsapp.model.views.EoPriceVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 07 10:59:19 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SLSSalesPriceDetailsAMImpl extends ApplicationModuleImpl implements SLSSalesPriceDetailsAM {
    
    Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
    StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
    StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
    
    /**
     * Method for resolving the El
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    /**
     * This is the default constructor (do not remove).
     */
    public SLSSalesPriceDetailsAMImpl() {
    }

    /**
     * Container's getter for EoPriceVO.
     * @return EoPriceVO
     */
    public ViewObjectImpl getEoPriceVO() {
        return (ViewObjectImpl)findViewObject("EoPriceVO");
    }
    
    /**
     * Setting Initial Bind Variables to EoPriceViewObject
     */
    public void setInitialBindVariables(){
        String el = "";
        try {
           el = resolvEl("#{pageFlowScope.EO_ID}");
            System.out.println("EL :"+el);
        } catch (Exception e) {
            
        }
        
        Integer eoId = -1;
        if(!el.equalsIgnoreCase("")){
            eoId = Integer.parseInt(resolvEl("#{pageFlowScope.EO_ID}"));
        }
        EoPriceVOImpl eoPriceView = (EoPriceVOImpl)this.getEoPriceVO();
        eoPriceView.setCldIdBind(cldId.toString());
        eoPriceView.setOrgIdBind(orgId.toString());
        eoPriceView.setHoOrgIdBind(hoOrgId.toString());
        eoPriceView.setSlocIdBind(slocId);
        eoPriceView.setEoIdBind(eoId);
        eoPriceView.executeQuery();
    }

    /**
     * Container's getter for EoPriceHistory.
     * @return EoPriceHistory
     */
    public ViewObjectImpl getEoPriceHistory() {
        return (ViewObjectImpl)findViewObject("EoPriceHistory");
    }

    /**
     * Container's getter for EoPriceTOEoPriceHistVL1.
     * @return EoPriceTOEoPriceHistVL1
     */
    public ViewLinkImpl getEoPriceTOEoPriceHistVL1() {
        return (ViewLinkImpl)findViewLink("EoPriceTOEoPriceHistVL1");
    }

    /**
     * Container's getter for EoPriceVO2.
     * @return EoPriceVO2
     */
    public EoPriceVOImpl getEoPriceVO2() {
        return (EoPriceVOImpl)findViewObject("EoPriceVO2");
    }

    /**
     * Container's getter for EoPriceHistVOTOEPrice1.
     * @return EoPriceHistVOTOEPrice1
     */
    public ViewLinkImpl getEoPriceHistVOTOEPrice1() {
        return (ViewLinkImpl)findViewLink("EoPriceHistVOTOEPrice1");
    }
    
    /**
     * Method to perform search Operation on customerwise item price
     */
    public void searchCustomers(){
        if (this.getTemp().getCurrentRow() != null) {
            Object attribute = this.getTemp().getCurrentRow().getAttribute("EoNmSearchTrans");
            if (attribute != null) {
                String EoNm = this.getTemp().getCurrentRow().getAttribute("EoNmSearchTrans").toString();
                ViewObjectImpl eoPriceVO = this.getItemEo1();
                eoPriceVO.setNamedWhereClauseParam("EoNmBind", EoNm);
                eoPriceVO.executeQuery();
                System.out.println("Query executed for Eo :" + EoNm);
            }
        }
        
    }

    /**
     * Method to perform reset Operation on customerwise item price
     */
    public void resetCustomers(){
            this.getTemp().getCurrentRow().setAttribute("EoNmSearchTrans", null);
            ViewObjectImpl eoPriceVO = this.getItemEo1();
            
            eoPriceVO.setNamedWhereClauseParam("EoNmBind", null);
            eoPriceVO.executeQuery();
            
    }

    /**
     * Container's getter for Temp.
     * @return Temp
     */
    public ViewObjectImpl getTemp() {
        return (ViewObjectImpl)findViewObject("Temp");
    }


    /**
     * Container's getter for ItemEo1.
     * @return ItemEo1
     */
    public ViewObjectImpl getItemEo1() {
        return (ViewObjectImpl)findViewObject("ItemEo1");
    }

    /**
     * Container's getter for EoPriceToItemEoVL1.
     * @return EoPriceToItemEoVL1
     */
    public ViewLinkImpl getEoPriceToItemEoVL1() {
        return (ViewLinkImpl)findViewLink("EoPriceToItemEoVL1");
    }
    
    /**
     * Method to filter EoPriceView
     * @param eoNm
     */
    public void setEoNmInPriceView(StringBuffer eoNm){
        if(!eoNm.equals("")){
            EoPriceVOImpl eoPriceView = (EoPriceVOImpl)this.getEoPriceVO();
            eoPriceView.setEoNmBind(eoNm.toString());
            eoPriceView.setEoIdBind(null);
            eoPriceView.executeQuery();
        }
    }
}
