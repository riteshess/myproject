package pmssiterecordapp.model.services;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.faces.application.FacesMessage;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;

import pmssiterecordapp.model.services.common.PMSSiteRecordAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 25 15:45:45 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PMSSiteRecordAMImpl extends ApplicationModuleImpl implements PMSSiteRecordAM {

    private Integer glblDocId = 38501;
    private Integer glblDocTypeId = 0;
    private Number zero = new Number(0);
    private static ADFLogger _log = ADFLogger.createADFLogger(PMSSiteRecordAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public PMSSiteRecordAMImpl() {
    }

    /**
     * Container's getter for PmsSiteRcd1.
     * @return PmsSiteRcd1
     */
    public ViewObjectImpl getPmsSiteRcd() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcd");
    }

    public String genTxnId() {
        return (String) EbizParams.generateDocTxnId(this.getRootApplicationModule(), glblDocId);
    }

    /**
     * Container's getter for SearchSiteRcdVw1.
     * @return SearchSiteRcdVw1
     */
    public ViewObjectImpl getSearchSiteRcdVw() {
        return (ViewObjectImpl) findViewObject("SearchSiteRcdVw");
    }

    public void filterTxnOnAddPage(String txnId) {
        this.getPmsSiteRcd().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getPmsSiteRcd().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getPmsSiteRcd().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getPmsSiteRcd().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getPmsSiteRcd().setNamedWhereClauseParam("docIdBind", txnId);
        this.getPmsSiteRcd().executeQuery();
    }

    public String genSiteRcdId() {
        String rcdId = null;
        if (this.getPmsSiteRcd().getCurrentRow().getAttribute("RcdId") != null)
            rcdId = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("RcdId");
        else {

            rcdId =
                (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                    new StringBuilder("PMS.FN_GEN_DISP_ID(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                    EbizParams.GLBL_APP_USR_ORG(), glblDocId,
                                                    this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"),
                                                    glblDocTypeId, "PMS$SITE$RCD",
                                                    this.getPmsSiteRcd().getCurrentRow().getAttribute("FyId"), 0
            }, Types.VARCHAR);

        }
        this.getPmsSiteRcd().getCurrentRow().setAttribute("RcdId", rcdId);
        return rcdId;
    }

    /**
     * Container's getter for PmsSiteRcdDtl1.
     * @return PmsSiteRcdDtl1
     */
    public ViewObjectImpl getPmsSiteRcdExpDtl() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdExpDtl");
    }

    /**
     * Container's getter for PmsSiteRcdToRcdExpDtlVL1.
     * @return PmsSiteRcdToRcdExpDtlVL1
     */
    public ViewLinkImpl getPmsSiteRcdToRcdExpDtlVL1() {
        return (ViewLinkImpl) findViewLink("PmsSiteRcdToRcdExpDtlVL1");
    }

    public String populateFinReqExpenseDtl() {
        String irDocId = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("TransIrDocIdExp");

        Row[] DupliRow = this.getPmsSiteRcdIr().getFilteredRows("IrDocId", irDocId);
        _log.info("No. of Filtered rows =" + DupliRow.length);
        if (DupliRow.length > 0)
            return "-1";
        //if not duplicate
        this.getFinIrExpDtl().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getFinIrExpDtl().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getFinIrExpDtl().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getFinIrExpDtl().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getFinIrExpDtl().setNamedWhereClauseParam("irDocIdBind", irDocId);
        this.getFinIrExpDtl().executeQuery();
        Row[] frIr = this.getFinIrExpDtl().getFilteredRows("DocId", irDocId);
        String typFlg = "E";
        if (this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTypeFlg") != null)
            typFlg = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTypeFlg");
        //check if any manual expense is entered then update FROM '0' requistion id to current requisition id
        //else create new requistion row
        Row fr[] =
            this.getPmsSiteRcdIr().getFilteredRows("DocId", this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"));
        if (fr.length > 0) {
            fr[0].setAttribute("IrDocId", irDocId);
            Row expRow[] =
                this.getPmsSiteRcdExpDtl().getFilteredRows("DocId",
                                                           this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"));
            for (Row erow : expRow) {
                erow.setAttribute("IrDocId", irDocId);
            }
        } else {
            if (frIr.length > 0) {
                Row rcdIrRow = this.getPmsSiteRcdIr().createRow();
                rcdIrRow.setAttribute("PrjId", this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
                rcdIrRow.setAttribute("IrDocId", irDocId);
                rcdIrRow.setAttribute("TypeFlg", typFlg);
                this.getPmsSiteRcdIr().insertRow(rcdIrRow);
            }
        }

        for (Row irRow : frIr) {
            /*     RowSetIterator rsi = this.getPmsSiteRcdExpDtl().getRowSetIterator();
            Row lastRow = rsi.last();
            int lastRowIndex = rsi.getRangeIndexOf(lastRow); */
            Row newExpRow = this.getPmsSiteRcdExpDtl().createRow();
            newExpRow.setAttribute("PrjId", this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
            newExpRow.setAttribute("IrDocId", irDocId);
            newExpRow.setAttribute("TypeFlg", typFlg);
            newExpRow.setAttribute("SelBasis", "R");
            newExpRow.setAttribute("SrNo", (this.getMaxSrNo()));
            newExpRow.setAttribute("CoaId", irRow.getAttribute("CoaId"));
            newExpRow.setAttribute("AmtSp", irRow.getAttribute("AmtSp"));
            newExpRow.setAttribute("AmtBs", irRow.getAttribute("AmtBs"));
            newExpRow.setAttribute("Remarks", irRow.getAttribute("Remarks"));
            newExpRow.setAttribute("AmtTyp", "Dr");
            this.getPmsSiteRcdExpDtl().insertRow(newExpRow);


            /*
            newExpRow.setNewRowState(Row.STATUS_INITIALIZED);
             rsi.insertRowAtRangeIndex(lastRowIndex + 1, newExpRow);
            rsi.setCurrentRow(newExpRow);
            rsi.closeRowSetIterator(); */
        }

        //Set IrDocId to those Expenses which has been added as manually.

        this.getPmsSiteRcd().getCurrentRow().setAttribute("TransIrNoExp", null);
        this.getPmsSiteRcd().getCurrentRow().setAttribute("TransIrDocIdExp", null);
        return "1";
    }

    public void setDefaultExpValues() {
        String typFlg = "E";
        if (this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTypeFlg") != null)
            typFlg = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTypeFlg");

        /*
        // In case of Manual insertion Requisition Id will be added as '0'
        //and alll expenses will be added against '0' requisition id
        //Check if Requisition is already added for '0' doc id or not
        RowQualifier rq = new RowQualifier(this.getPmsSiteRcdIr());
        rq.setWhereClause("IrDocId= '0'");
        Row[] defIrExp = this.getPmsSiteRcdIr().getFilteredRows(rq);
        if (defIrExp.length > 0) {
        } else {
            //If this is first Manual Insertion then insert a row in Requisition with id '0'
            Row rcdIrRow = this.getPmsSiteRcdIr().createRow();
            rcdIrRow.setAttribute("PrjId", this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
            rcdIrRow.setAttribute("IrDocId", "0");
            rcdIrRow.setAttribute("TypeFlg", typFlg);
            this.getPmsSiteRcdIr().insertRow(rcdIrRow);
        }

        //Now add expense detail
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("PrjId",
                                                                this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("TypeFlg", typFlg);
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("SelBasis", "M");
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("IrDocId", "0");
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("SrNo", (this.getMaxSrNo()));
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("AmtSp", zero);
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("AmtBs", zero);
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("AmtTyp", "Dr");
        */

        //Check if Requisition is already added for current document or not
        //If not added then, In case of Manual insertion Requisition Id will be added as '0'
        //and all expenses will be added against '0' requisition id
        RowQualifier rq = new RowQualifier(this.getPmsSiteRcdIr());
        rq.setWhereClause("DocId= '" + this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId") + "'");
        Row[] defIrExp = this.getPmsSiteRcdIr().getFilteredRows(rq);
        String irId = "0";
        if (defIrExp.length > 0) {
            irId = (String) defIrExp[0].getAttribute("IrDocId");
        } else {
            //If this is first Manual Insertion then insert a row in Requisition with id '0'
            Row rcdIrRow = this.getPmsSiteRcdIr().createRow();
            rcdIrRow.setAttribute("PrjId", this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
            rcdIrRow.setAttribute("IrDocId", irId);
            rcdIrRow.setAttribute("TypeFlg", typFlg);
            this.getPmsSiteRcdIr().insertRow(rcdIrRow);
        }

        //Now add expense detail
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("PrjId",
                                                                this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("TypeFlg", typFlg);
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("SelBasis", "M");
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("IrDocId", irId);
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("SrNo", (this.getMaxSrNo()));
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("AmtSp", zero);
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("AmtBs", zero);
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("AmtTyp", "Dr");

    }


    /**
     * Container's getter for FinIrExpDtl1.
     * @return FinIrExpDtl1
     */
    public ViewObjectImpl getFinIrExpDtl() {
        return (ViewObjectImpl) findViewObject("FinIrExpDtl");
    }

    private int getMaxSrNo() {
        Integer max = 1;
        //  this.getPmsSiteRcdDtl().setRangeSize(-1);
        Row expRows[] =
            this.getPmsSiteRcdExpDtl().getFilteredRows("DocId",
                                                       this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"));
        for (Row row : expRows) {
            if (row.getAttribute("SrNo") != null && ((Integer) row.getAttribute("SrNo")).compareTo(max) >= 0)
                max = (Integer) row.getAttribute("SrNo") + 1;
        }
        _log.info("New Sr no=" + max);
        return max;
    }

    private int maxSrBillNo() {
        Integer max = 1;

        Row expRows[] = this.getPmsSiteRcdBillDtl().getAllRowsInRange();
        for (Row row : expRows) {
            if (row.getAttribute("SrNo") != null && ((Integer) row.getAttribute("SrNo")).compareTo(max) >= 0)
                max = (Integer) row.getAttribute("SrNo") + 1;
        }
        // this.getPmsSiteRcdDtl().setRangeSize(-1);
        _log.info("New Sr no=" + max);
        return max;
    }

    /**
     * Container's getter for PmsSiteRcdDtl1.
     * @return PmsSiteRcdDtl1
     */
    public ViewObjectImpl getPmsSiteRcdDtl() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdDtl");
    }

    /**
     * Container's getter for PmsSiteRcdToRcdExpDtlVL2.
     * @return PmsSiteRcdToRcdExpDtlVL2
     */
    public ViewLinkImpl getPmsSiteRcdToRcdExpDtlVL2() {
        return (ViewLinkImpl) findViewLink("PmsSiteRcdToRcdExpDtlVL2");
    }

    /**
     * Container's getter for PmsSiteRcdIr1.
     * @return PmsSiteRcdIr1
     */
    public ViewObjectImpl getPmsSiteRcdIr() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdIr");
    }

    /**
     * Container's getter for FkPmsSiteRcdIrVL1.
     * @return FkPmsSiteRcdIrVL1
     */
    public ViewLinkImpl getFkPmsSiteRcdIrVL1() {
        return (ViewLinkImpl) findViewLink("FkPmsSiteRcdIrVL1");
    }


    /**
     * Container's getter for LovIrIdDisp1.
     * @return LovIrIdDisp1
     */
    public ViewObjectImpl getLovIrIdDisp() {
        return (ViewObjectImpl) findViewObject("LovIrIdDisp");
    }


    public void filterBillDtl(Integer SrDestNo) {
        // this.getPmsSiteRcdBillDtl().setNamedWhereClauseParam("srDestNoBind", SrDestNo);
        this.getPmsSiteRcdBillDtl().executeQuery();
        _log.info("No. of filterd Rows by srno" + SrDestNo + " =" + this.getPmsSiteRcdBillDtl().getEstimatedRowCount());
    }

    public void setDefaultBillValues(Integer srDestNo) {
        this.getPmsSiteRcdDtl().executeQuery();
        Row[] frRow = this.getPmsSiteRcdDtl().getFilteredRows("SrNo", srDestNo);
        Row billrow = this.getPmsSiteRcdBillDtl().getCurrentRow();
        if (frRow.length > 0) {
            billrow.setAttribute("PrjId", frRow[0].getAttribute("PrjId"));
            billrow.setAttribute("SrDestNo", srDestNo);
            billrow.setAttribute("SrNo", maxSrBillNo());
            billrow.setAttribute("TypeFlg", frRow[0].getAttribute("TypeFlg"));
            if (frRow[0].getAttribute("TypeFlg") != null && frRow[0].getAttribute("TypeFlg").toString().equals("E")) {
                Integer coaId =
                    EbizParams.getCoaIdFrmEoId(this.getRootApplicationModule(),
                                               (Integer) this.getPmsSiteRcd().getCurrentRow().getAttribute("EoId"));
                billrow.setAttribute("RefCoaId", coaId);
            }
        }
    }


    /****WORKFLOW FUNCTIONS*****/

    public String getWfNo() {
        return (String) WorkFlowUtils.getWorkFlowId(this.getRootApplicationModule(), glblDocId, glblDocTypeId);
    }

    public Integer currUsrLvl(String wfNo) {
        return WorkFlowUtils.getWorkFlowCurrUsrLvl(this.getRootApplicationModule(), wfNo, glblDocId, glblDocTypeId);
    }

    public String insWfTxn(String wfId, Integer lvlFrm, Integer lvlTo, String action, String remark, Number amount) {
        Integer usrId = EbizParams.GLBL_APP_USR();
        String docTxnId = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId");
        return (String) WorkFlowUtils.insertEntriesIntoWfTxn(this.getRootApplicationModule(), glblDocId, glblDocTypeId,
                                                             docTxnId, wfId, usrId, usrId, lvlFrm, lvlTo, action,
                                                             remark, amount);
    }

    public Integer chkPendingUsr() {
        String docTxnId = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId");
        return WorkFlowUtils.docPendingAt(this.getRootApplicationModule(), glblDocId, glblDocTypeId, docTxnId);
    }

    public void wfReturnAction() {
        String action = "Saved Successfully.";
        String vou = "";
        Row currRow = this.getPmsSiteRcd().getCurrentRow();
        if (ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_VAL}") != null &&
            ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_VAL}").equals("A")) {
            //code to enter in GL
            currRow = this.getPmsSiteRcd().getCurrentRow();
            String retval = null;
            if (currRow != null) {
                Object ret = null;
                ret =
                    ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                               new StringBuilder("PMS.fn_pms_site_exp_gl_ins_final(?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                               currRow.getAttribute("DocId"), currRow.getAttribute("RcdDt"),
                                               EbizParams.GLBL_APP_USR(), EbizParams.GLBL_APP_USR_ORG(),
                                               EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),
                                               EbizParams.GLBL_APP_CLD_ID(), currRow.getAttribute("RefCoaId"),
                                               currRow.getAttribute("EoId"), currRow.getAttribute("PrjId"),
                                               currRow.getAttribute("CurrIdSp"), currRow.getAttribute("CurrConvRate"),
                }, Types.VARCHAR);

                retval = (String) ret;

                if (retval != null && retval.length() > 0 && (!retval.equals("null"))) {

                    switch (retval) {
                    case "-1":
                        action = "Some Issues. Please contact ESS!!!";
                        break;
                    case "-2":
                        action = "Some Issues. Please contact ESS!!!";
                        break;
                    default:
                        currRow.setAttribute("RcdStat", 3);
                        action = "been Posted Successfully.";
                        vou = "Voucher Generated : " + retval;
                        break;
                    }
                }
            } else if (ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_VAL}") != null &&
                       ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_VAL}").equals("F")) {
                action = "been Forwarded Successfully.";
                if (currRow != null) {
                    currRow.setAttribute("RcdStat", 2);
                }
                //forward
            } else if (ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_VAL}") != null &&
                       ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_VAL}").equals("R")) {
                action = "been Rejected.";
                //rejected
            }
            ADFModelUtils.showFormattedFacesMessage("Document has " + action + " ", vou, FacesMessage.SEVERITY_INFO);
            // document has been
        }

    }

    public String getUsrNm(Integer usrId) {
        this.getLovUsrId().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovUsrId().setNamedWhereClauseParam("usrIdBind", usrId);
        this.getLovUsrId().executeQuery();
        Row[] fr = this.getLovUsrId().getFilteredRows("UsrId", usrId);
        if (fr.length > 0)
            return (String) fr[0].getAttribute("UsrName");
        else
            return "Anonymous";
    }

    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl) findViewObject("LovUsrId");
    }

    /**
     * Container's getter for PmsSiteRcdTr1.
     * @return PmsSiteRcdTr1
     */
    public ViewObjectImpl getPmsSiteRcdTr() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdTr");
    }

    /**
     * Container's getter for PmsSiteRcdToTrVL1.
     * @return PmsSiteRcdToTrVL1
     */
    public ViewLinkImpl getPmsSiteRcdToTrVL1() {
        return (ViewLinkImpl) findViewLink("PmsSiteRcdToTrVL1");
    }

    /**
     * Container's getter for PmsSiteRcdTrLine1.
     * @return PmsSiteRcdTrLine1
     */
    public ViewObjectImpl getPmsSiteRcdTrLine() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdTrLine");
    }

    /**
     * Container's getter for PmsSiteRcdTrToTrLinesVL1.
     * @return PmsSiteRcdTrToTrLinesVL1
     */
    public ViewLinkImpl getPmsSiteRcdTrToTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("PmsSiteRcdTrToTrLinesVL1");
    }

    public String createNewTaxRule() {
        // this.getPmsSiteRcdTr().setRangeSize(-1);
        Row taxRuleRow = null;
        String txnId = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId");
        Row[] taxRuleFRows = this.getPmsSiteRcdTr().getFilteredRows("DocId", txnId);
        _log.info("Tax Rule  Rows Size = " + taxRuleFRows.length);
        if (taxRuleFRows.length > 0) //TaxRule already Exist
        {
            if (taxRuleFRows.length > 0)
                taxRuleRow = taxRuleFRows[0]; //Get Tax Rule Row

            //if tax already added and amount is different then remove tax lines and tax and add new tax
            if (taxRuleRow.getAttribute("TaxableAmt") != null &&
                ((Number) taxRuleRow.getAttribute("TaxableAmt")).compareTo((Number) this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTaxableAmt")) !=
                0) {
                //remove tax



                this.resetTrAndTrLine();

                /*    //          this.getPmsSiteRcdTrLine().setRangeSize(-1);
                Row lineRow[] = this.getPmsSiteRcdTrLine().getFilteredRows("DocId", txnId);
                _log.info("Tax Rule Line Rows Size = " + lineRow.length);
                for (Row lr : lineRow) {
                    lr.remove();
                }
                taxRuleRow.remove(); */

                //create New Tax
                taxRuleRow = this.getPmsSiteRcdTr().createRow();
                taxRuleRow.setAttribute("DocId", this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"));
                taxRuleRow.setAttribute("TaxableAmt",
                                        this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTaxableAmt"));
                taxRuleRow.setAttribute("CurrIdSp", this.getPmsSiteRcd().getCurrentRow().getAttribute("CurrIdSp"));
                taxRuleRow.setAttribute("DocDt", this.getPmsSiteRcd().getCurrentRow().getAttribute("RcdDt"));
                taxRuleRow.setAttribute("PrjId", this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
                this.getPmsSiteRcdTr().insertRow(taxRuleRow);
            }
            //if tax already added and amount is also same then do nothing
            return null;
        } else {
            taxRuleRow = this.getPmsSiteRcdTr().createRow();
            taxRuleRow.setAttribute("DocId", this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"));
            taxRuleRow.setAttribute("TaxableAmt", this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTaxableAmt"));
            taxRuleRow.setAttribute("CurrIdSp", this.getPmsSiteRcd().getCurrentRow().getAttribute("CurrIdSp"));
            taxRuleRow.setAttribute("DocDt", this.getPmsSiteRcd().getCurrentRow().getAttribute("RcdDt"));
            taxRuleRow.setAttribute("PrjId", this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
            this.getPmsSiteRcdTr().insertRow(taxRuleRow);
            return null;
        }
    }

    private Number calcTaxableAmt() {
        this.getPmsSiteRcdExpDtl().setRangeSize(-1);
        RowQualifier rq = new RowQualifier(this.getPmsSiteRcdExpDtl());
        rq.setWhereClause("DocId='" + this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId") +
                          "' and  TaxFlg= 'Y' ");
        Row taxableRows[] = this.getPmsSiteRcdExpDtl().getFilteredRows(rq);
        Number taxableAmt = new Number(0);
        for (Row row : taxableRows) {

            Number amt = (row.getAttribute("TaxAmtSp") != null ? (Number) row.getAttribute("TaxAmtSp") : zero);
            taxableAmt = taxableAmt.add(amt);
        }
        return taxableAmt;
    }

    public void populateTaxRuleLines(Integer taxRuleId) {

        Row trRow = this.getPmsSiteRcdTr().getCurrentRow();
        Object ret =
            ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                       new StringBuilder("PMS.fn_ins_site_rcd_tax_line(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       trRow.getAttribute("PrjId"), trRow.getAttribute("TaxRuleApplInstId"),
                                       trRow.getAttribute("DocId"), trRow.getAttribute("DocDt"),
                                       trRow.getAttribute("SlNo"), taxRuleId, trRow.getAttribute("ExmptFlg"),
                                       trRow.getAttribute("TaxableAmt"), trRow.getAttribute("CurrIdSp"),
                                       EbizParams.GLBL_APP_USR(), StaticValue.getCurrDtWidTimestamp(), "I"
        }, Types.VARCHAR);
        _log.info("Return Value =" + ret);
        // this.getPmsSiteRcdTr1().executeQuery();
        this.getPmsSiteRcdTrLine1().executeQuery();
        this.getPmsSiteRcdTrLine().executeQuery();

        Row lineRw[] = this.getPmsSiteRcdTrLine1().getFilteredRows("DocId", trRow.getAttribute("DocId"));
        System.out.println("No. of TrLines Entered =" + lineRw.length);
        Number sumAmt = zero;
        for (Row linerow : lineRw) {
            Number taxAmt = zero;
            if (linerow.getAttribute("TaxRuleTaxableAmtSp") != null && linerow.getAttribute("TaxRuleSlno") != null &&
                ((Integer) linerow.getAttribute("TaxRuleSlno")).compareTo(new Integer(1)) > 0)
                taxAmt = (Number) linerow.getAttribute("TaxRuleTaxableAmtSp");

            _log.info("Tax Amount =" + taxAmt);
            sumAmt = sumAmt.add(taxAmt);
        }
        trRow.setAttribute("TaxAmtSp", sumAmt);
    }

    /**
     * Container's getter for PmsSiteRcdTrLine1.
     * @return PmsSiteRcdTrLine1
     */
    public ViewObjectImpl getPmsSiteRcdTrLine1() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdTrLine1");
    }


    public String createNewTDSRule() {
        Row tdsRuleRow = null;
        String txnId = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId");
        Row[] tdsRuleFRows = this.getPmsSiteRcdTdsRule().getFilteredRows("DocId", txnId);
        _log.info("Tax Rule  Rows Size = " + tdsRuleFRows.length);
        if (tdsRuleFRows.length > 0) //TaxRule already Exist
        {
            tdsRuleRow = tdsRuleFRows[0]; //Get Tax Rule Row

            //if tax already added and amount is different then remove tax lines and tax and add new tax
            if (tdsRuleRow.getAttribute("TaxableAmt") != null &&
                ((Number) tdsRuleRow.getAttribute("TaxableAmt")).compareTo((Number) this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTdsableAmt")) !=
                0) {

                //remove tax
                this.resetTDSRuleAndTDSLine();
                /*   Row lineRow[] = this.getPmsSiteRcdTdsLine().getFilteredRows("DocId", txnId);
                _log.info("Tax Rule Line Rows Size = " + lineRow.length);
                for (Row lr : lineRow) {
                    lr.remove();
                }
                tdsRuleRow.remove(); */

                //create New Tax
                tdsRuleRow = this.getPmsSiteRcdTdsRule().createRow();
                tdsRuleRow.setAttribute("DocId", this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"));
                tdsRuleRow.setAttribute("TaxableAmt",
                                        this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTdsableAmt"));
                tdsRuleRow.setAttribute("CurrIdSp", this.getPmsSiteRcd().getCurrentRow().getAttribute("CurrIdSp"));
                tdsRuleRow.setAttribute("DocDt", this.getPmsSiteRcd().getCurrentRow().getAttribute("RcdDt"));
                tdsRuleRow.setAttribute("PrjId", this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
                this.getPmsSiteRcdTdsRule().insertRow(tdsRuleRow);
            }
            //if tax already added and amount is also same then do nothing
            return null;
        } else {
            tdsRuleRow = this.getPmsSiteRcdTdsRule().createRow();
            tdsRuleRow.setAttribute("DocId", this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"));
            tdsRuleRow.setAttribute("TaxableAmt", this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTdsableAmt"));
            tdsRuleRow.setAttribute("CurrIdSp", this.getPmsSiteRcd().getCurrentRow().getAttribute("CurrIdSp"));
            tdsRuleRow.setAttribute("DocDt", this.getPmsSiteRcd().getCurrentRow().getAttribute("RcdDt"));
            tdsRuleRow.setAttribute("PrjId", this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
            this.getPmsSiteRcdTdsRule().insertRow(tdsRuleRow);
            return null;
        }
    }

    public void populateTdsRuleLines(Integer tdsRuleId) {

        Row tdsrRow = this.getPmsSiteRcdTdsRule().getCurrentRow();
        Object ret =
            ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                       new StringBuilder("PMS.fn_ins_site_rcd_tds_line(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       tdsrRow.getAttribute("PrjId"), tdsrRow.getAttribute("TdsRuleApplInstId"),
                                       tdsrRow.getAttribute("DocId"), tdsrRow.getAttribute("DocDt"),
                                       tdsrRow.getAttribute("SlNo"), tdsRuleId, tdsrRow.getAttribute("ExmptFlg"),
                                       tdsrRow.getAttribute("TaxableAmt"), tdsrRow.getAttribute("CurrIdSp"),
                                       EbizParams.GLBL_APP_USR(), StaticValue.getCurrDtWidTimestamp(), "I"
        }, Types.VARCHAR);
        _log.info("Return Value =" + ret);
        this.getPmsSiteRcdTdsLine1().executeQuery();
        this.getPmsSiteRcdTdsLine().executeQuery();

        Row lineRw[] = this.getPmsSiteRcdTdsLine1().getFilteredRows("DocId", tdsrRow.getAttribute("DocId"));
        Number sumAmt = zero;
        for (Row linerow : lineRw) {
            Number tdsAmt = zero;
            if (linerow.getAttribute("TdsRuleTdsAmtSp") != null && linerow.getAttribute("TdsRuleSlno") != null &&
                ((Integer) linerow.getAttribute("TdsRuleSlno")).compareTo(new Integer(1)) > 0)
                tdsAmt = (Number) linerow.getAttribute("TdsRuleTdsAmtSp");
            sumAmt = sumAmt.add(tdsAmt);
        }
        tdsrRow.setAttribute("TdsAmtSp", sumAmt);
    }

    /**
     * Container's getter for PmsSiteRcdTdsRule1.
     * @return PmsSiteRcdTdsRule1
     */
    public ViewObjectImpl getPmsSiteRcdTdsRule() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdTdsRule");
    }

    /**
     * Container's getter for PmsSiteRcdToTdsRuleVL1.
     * @return PmsSiteRcdToTdsRuleVL1
     */
    public ViewLinkImpl getPmsSiteRcdToTdsRuleVL1() {
        return (ViewLinkImpl) findViewLink("PmsSiteRcdToTdsRuleVL1");
    }

    /**
     * Container's getter for PmsSiteRcdTdsLine1.
     * @return PmsSiteRcdTdsLine1
     */
    public ViewObjectImpl getPmsSiteRcdTdsLine() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdTdsLine");
    }

    /**
     * Container's getter for PmsSiteRcdTdsRuleToTdsLineVL1.
     * @return PmsSiteRcdTdsRuleToTdsLineVL1
     */
    public ViewLinkImpl getPmsSiteRcdTdsRuleToTdsLineVL1() {
        return (ViewLinkImpl) findViewLink("PmsSiteRcdTdsRuleToTdsLineVL1");
    }

    /**
     * Container's getter for PmsSiteRcdTdsLine1.
     * @return PmsSiteRcdTdsLine1
     */
    public ViewObjectImpl getPmsSiteRcdTdsLine1() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdTdsLine1");
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDoc1() {
        return (ViewObjectImpl) findViewObject("AppCcDoc1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVw1() {
        return (ViewObjectImpl) findViewObject("AppCcVw1");
    }

    /** Method used in Cost Center**/
    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }

    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {
        releaseAppAM(getAppAM());
        super.finalize();
    }

    /** ---------- To create HexDocId CCId -------------**/

    public String generateCcId() {
        String hexDocIdFromFun = "0";
        hexDocIdFromFun =
            (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                new StringBuilder("APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)"), new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), glblDocId,
                                                84901, 0
        }, Types.VARCHAR);
        return hexDocIdFromFun;
    }

    /** Method which will call cost center bean */
    public void deleteCostCenterItem() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside delete method");
            Row currentRow = this.getPmsSiteRcdExpDtl().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    System.out.println("------------------ Not null");
                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       currentRow.getAttribute("CcId").toString(), "L", glblDocId,
                                       EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       new Number(0), (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));

                }
            }
            System.out.println("After calling delete method");
        }
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            Row currentRow = this.getPmsSiteRcdExpDtl().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("AmtSp") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    declareGlblValuesForCC();

                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", glblDocId,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("AmtSp"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) ADFModelUtils.resolvEl("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        String msg = (String) ADFModelUtils.resolvEl("#{bundle['MSG.1979']}");
                        ADFModelUtils.showFormattedFacesMessage(msg, null,
                                                                FacesMessage.SEVERITY_ERROR); // Please Update Cost Center",

                    }
                }
            }
            System.out.println("After calling Update method");
        }
    }

    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDoc1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", glblDocId);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }


    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVw1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", glblDocId);

        Row currentRow = this.getPmsSiteRcdExpDtl().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getPmsSiteRcdExpDtl().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));
                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to Pms Site Record CostCenter Table
     */
    public void sendDataFromTempCcToPmsSiteRcdCc() {
        if (chkCcApplicableOrNot()) {
            ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                       new StringBuilder("APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), glblDocId, "PMS",
                                       "PMS$SITE$RCD$COST$CENTER",
                                       this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId")
            }, Types.VARCHAR);
        }
    }

    /**
     * Method to check cost center is applicable for this Document or not.
     */

    public Boolean isCostCenterApplicable() {
        Boolean b = false;
        try {
            // App.fn_is_cost_center_present(p_cld_id,p_sloc_id,p_ho_org_id,p_org_id,p_doc_id)
            Object callF =
                ADFModelUtils.callFunction(this, new StringBuilder("App.fn_is_cost_center_present(?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), glblDocId
            }, Types.INTEGER);

            Integer a = (callF == null ? 0 : (Integer) callF);
            b = (a == 1 ? true : false);
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return b;
    }

    /**
     * Container's getter for SearchDual1.
     * @return SearchDual1
     */
    public ViewObjectImpl getSearchDual() {
        return (ViewObjectImpl) findViewObject("SearchDual");
    }

    public void setBindVarOnLoad() {
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("orgIdBind", null);
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
    }

    public void searchSiteRecord(String callFrom) {
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());

        if (callFrom.equals("S")) {
        } else if (callFrom.equals("R")) {
            this.getSearchDual().executeQuery();
            this.getSearchSiteRcdVw().setNamedWhereClauseParam("orgIdBind", null);
        }

        Row curr = this.getSearchDual().getCurrentRow();
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("rcdIdBind", curr.getAttribute("TransRcdId"));
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("coaIdBind", curr.getAttribute("TransCoaId"));
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("eoIdBind", curr.getAttribute("TransEoId"));
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("strtDtBind", curr.getAttribute("TransStrtDt"));
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("endDtBind", curr.getAttribute("TransEndDt"));
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("rcdStatBind", curr.getAttribute("TransStatus"));

        /*
        this.getSearchSiteRcdVw().setNamedWhereClauseParam("currIdBind", curr.getAttribute("TransCurrId"));
      */
        this.getSearchSiteRcdVw().executeQuery();
    }

    public void replicateBilledAmtToExpAmt() {
        Row fr[] =
            this.getPmsSiteRcdBillDtl().getFilteredRows("DocId",
                                                        this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"));
        Number sumAmt = zero;
        for (Row row : fr) {
            Number amtSp = zero;
            if (row.getAttribute("AmtSp") != null)
                amtSp = (Number) row.getAttribute("AmtSp");
            sumAmt = sumAmt.add(amtSp);
        }
        _log.info("Sum of Billed amt=" + sumAmt);
        this.getPmsSiteRcdExpDtl().getCurrentRow().setAttribute("AmtSp", sumAmt);
    }

    public String checkTaxTdsAmtSameOrNot() {
        Row currRow = this.getPmsSiteRcd().getCurrentRow();

        Number transTaxableAmt = zero;
        if (currRow.getAttribute("TransTaxableAmt") != null)
            transTaxableAmt = (Number) currRow.getAttribute("TransTaxableAmt");
        Number taxableAmt = zero;
        Row fr[] = this.getPmsSiteRcdTr().getFilteredRows("DocId", currRow.getAttribute("DocId"));
        if (fr.length > 0)
            taxableAmt = (Number) fr[0].getAttribute("TaxableAmt");
        if (taxableAmt.compareTo(transTaxableAmt) == 0) {
        } else
            return "tax";

        Number transTdsAmt = zero;
        if (currRow.getAttribute("TransTdsableAmt") != null)
            transTdsAmt = (Number) currRow.getAttribute("TransTdsableAmt");
        Number tdsableAmt = zero;
        Row frTds[] = this.getPmsSiteRcdTdsRule().getFilteredRows("DocId", currRow.getAttribute("DocId"));
        if (frTds.length > 0)
            tdsableAmt = (Number) frTds[0].getAttribute("TaxableAmt");
        if (tdsableAmt.compareTo(transTdsAmt) == 0) {
        } else
            return "tds";

        return "Y";
    }

    public String resetTrAndTrLine() {
        String docId = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId");
        Row lineRows[] = this.getPmsSiteRcdTrLine1().getFilteredRows("DocId", docId);
        _log.info("No. of Rows in Line=" + lineRows.length);
        for (Row row : lineRows) {
            row.remove();
        }
        this.getPmsSiteRcdTrLine().executeQuery();
        Row trRow[] = this.getPmsSiteRcdTr().getFilteredRows("DocId", docId);
        _log.info("No. of Rows in TR=" + trRow.length);
        if (trRow.length > 0)
            trRow[0].remove();
        this.getDBTransaction().postChanges();
        if (trRow.length == 0)
            return "N";
        return "Y";
    }


    public String resetTDSRuleAndTDSLine() {
        String docId = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId");
        Row lineRows[] = this.getPmsSiteRcdTdsLine1().getFilteredRows("DocId", docId);
        _log.info("No. of Rows in line=" + lineRows.length);
        for (Row row : lineRows) {
            row.remove();
        }
        this.getPmsSiteRcdTdsLine().executeQuery();
        Row trRow[] = this.getPmsSiteRcdTdsRule().getFilteredRows("DocId", docId);
        _log.info("No. of Rows in TR=" + trRow.length);
        if (trRow.length > 0)
            trRow[0].remove();
        this.getDBTransaction().postChanges();
        if (trRow.length == 0)
            return "N";
        return "Y";
    }

    /**
     * Container's getter for PmsSiteRcdBillDtl1.
     * @return PmsSiteRcdBillDtl1
     */
    public ViewObjectImpl getPmsSiteRcdBillDtl() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdBillDtl");
    }

    /**
     * Container's getter for PmsSiteRcdDtlToBillDtlVL1.
     * @return PmsSiteRcdDtlToBillDtlVL1
     */
    public ViewLinkImpl getPmsSiteRcdDtlToBillDtlVL1() {
        return (ViewLinkImpl) findViewLink("PmsSiteRcdDtlToBillDtlVL1");
    }

    /**
     * Container's getter for PmsSiteRcdBillDtl1.
     * @return PmsSiteRcdBillDtl1
     */
    public ViewObjectImpl getPmsSiteRcdBillDtl1() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdBillDtl1");
    }

    /**
     * Container's getter for PmsSiteRcdToRcdBillVL1.
     * @return PmsSiteRcdToRcdBillVL1
     */
    public ViewLinkImpl getPmsSiteRcdToRcdBillVL1() {
        return (ViewLinkImpl) findViewLink("PmsSiteRcdToRcdBillVL1");
    }

    public String chkAllBillAddedForExpenses() {
        Row frExp[] = this.getPmsSiteRcdExpDtl().getFilteredRows("BillDtlFlg", "Y");
        for (Row exp : frExp) {
            Row billRow[] = this.getPmsSiteRcdBillDtl1().getFilteredRows("SrDestNo", exp.getAttribute("SrNo"));
            if (billRow.length == 0)
                return "N";
        }
        return "Y";
    }

    public void deleteExpenseDtl() {
        Row dtlCurr = this.getPmsSiteRcdExpDtl().getCurrentRow();

        String irDocid = (String) dtlCurr.getAttribute("IrDocId");
        String docId = (String) dtlCurr.getAttribute("DocId");
        Integer srDestNo = (Integer) dtlCurr.getAttribute("SrNo");
        _log.info("IrDocId=" + irDocid);

        //Remove Bill Detail
        Row billRow[] = this.getPmsSiteRcdBillDtl().getFilteredRows("SrDestNo", srDestNo);
        _log.info("No. of Rows for Bill=" + billRow.length);
        for (Row bill : billRow) {
            bill.remove();
        }

        this.getPmsSiteRcdExpDtl().getCurrentRow().remove();

        if (irDocid != null && docId != null) {
            Row frDtl[] = this.getPmsSiteRcdExpDtl().getFilteredRows("IrDocId", irDocid);
            _log.info("No. of Rows in Expense=" + frDtl.length);
            if (frDtl.length > 0) {
            } else {
                RowQualifier rqIr = new RowQualifier(this.getPmsSiteRcdIr());
                rqIr.setWhereClause("DocId='" + docId + "' and IrDocId='" + irDocid + "'");
                Row irRows[] = this.getPmsSiteRcdIr().getFilteredRows(rqIr);
                _log.info("No. of Rows to Be removed for IR=" + irRows.length);
                if (irRows.length > 0)
                    irRows[0].remove();
            }
        }


    }

    /**
     * Container's getter for LovEoNm1.
     * @return LovEoNm1
     */
    public ViewObjectImpl getLovEoNm() {
        return (ViewObjectImpl) findViewObject("LovEoNm");
    }

    public Integer eoIdFromUsrId(Integer usrId) {
        this.getLovEoNm().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getLovEoNm().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getLovEoNm().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getLovEoNm().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovEoNm().setNamedWhereClauseParam("usrIdBind", usrId);
        this.getLovEoNm().executeQuery();
        this.getLovEoNm().setRangeSize(-1);
        Row[] eoRow = this.getLovEoNm().getAllRowsInRange();
        if (eoRow.length > 0)
            return (Integer) eoRow[0].getAttribute("EoId");
        return null;
    }

    /**
     * Container's getter for PmsSiteRcdTr1.
     * @return PmsSiteRcdTr1
     */
    public ViewObjectImpl getPmsSiteRcdTr1() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdTr1");
    }

    /**
     * Container's getter for PmsSiteRcdTdsRule1.
     * @return PmsSiteRcdTdsRule1
     */
    public ViewObjectImpl getPmsSiteRcdTdsRule1() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdTdsRule1");
    }

    public void updateTDSCheckInSameAccounts(String chkVal) {
        RowQualifier rqExp = new RowQualifier(this.getPmsSiteRcdExpDtl());
        Integer coaId = 0;
        if (this.getPmsSiteRcdExpDtl().getCurrentRow() != null &&
            this.getPmsSiteRcdExpDtl().getCurrentRow().getAttribute("CoaId") != null)
            coaId = (Integer) this.getPmsSiteRcdExpDtl().getCurrentRow().getAttribute("CoaId");
        rqExp.setWhereClause("DocId='" + this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId") + "' and CoaId=" +
                             coaId);
        Row fr[] = this.getPmsSiteRcdExpDtl().getFilteredRows(rqExp);
        for (Row row : fr) {
            _log.info("Setting values in" + row.getAttribute("SrNo"));
            row.setAttribute("TdsFlg", chkVal);
        }

    }

    public String chkDuplicateInvoiceNo(String chkVal) {
        if (this.getPmsSiteRcdBillDtl().getCurrentRow() != null &&
            this.getPmsSiteRcdBillDtl().getCurrentRow().getAttribute("RefCoaId") != null) {
            Row currBill = this.getPmsSiteRcdBillDtl().getCurrentRow();
            RowQualifier rq = new RowQualifier(this.getPmsSiteRcdBillDtl2());
            rq.setWhereClause("RefCoaId=" + this.getPmsSiteRcdBillDtl().getCurrentRow().getAttribute("RefCoaId") +
                              " and InvNo='" + chkVal + "'");
            Row[] fr = this.getPmsSiteRcdBillDtl2().getFilteredRows(rq);
            for (Row dupli : fr) {
                if (dupli.getAttribute("DocId").toString().equals(currBill.getAttribute("DocId").toString()) &&
                    dupli.getAttribute("SrDestNo").toString().equals(currBill.getAttribute("SrDestNo").toString()) &&
                    dupli.getAttribute("SrNo").toString().equals(currBill.getAttribute("SrNo").toString())) {
                } else
                    return "N";
            }
        }
        return "Y";
    }

    /**
     * Container's getter for PmsSiteRcdBillDtl2.
     * @return PmsSiteRcdBillDtl2
     */
    public ViewObjectImpl getPmsSiteRcdBillDtl2() {
        return (ViewObjectImpl) findViewObject("PmsSiteRcdBillDtl2");
    }

    public void updateTAXCheckInSameAccounts(String chkVal) {
        RowQualifier rqExp = new RowQualifier(this.getPmsSiteRcdExpDtl());
        Integer coaId = 0;
        if (this.getPmsSiteRcdExpDtl().getCurrentRow() != null &&
            this.getPmsSiteRcdExpDtl().getCurrentRow().getAttribute("CoaId") != null)
            coaId = (Integer) this.getPmsSiteRcdExpDtl().getCurrentRow().getAttribute("CoaId");
        rqExp.setWhereClause("DocId='" + this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId") + "' and CoaId=" +
                             coaId);
        Row fr[] = this.getPmsSiteRcdExpDtl().getFilteredRows(rqExp);
        for (Row row : fr) {
            _log.info("Setting values in" + row.getAttribute("SrNo"));
            row.setAttribute("TaxFlg", chkVal);
        }

    }

    public String chkInvoiceDateValidate(java.sql.Date invcDate) {
        java.sql.Date rcdDt = null;
        try {
            rcdDt = ((Timestamp) this.getPmsSiteRcd().getCurrentRow().getAttribute("RcdDt")).dateValue();
        } catch (SQLException e) {
            return "N";
        }
        if (invcDate.compareTo(rcdDt) > 0) {
            if (rcdDt.toString().equals(invcDate.toString())) {
                //ok
            } else {
                return "N";
            }
        }
        return "Y";
    }

    public void updateBillRequiredInSameAccounts(String chkVal) {
        RowQualifier rqExp = new RowQualifier(this.getPmsSiteRcdExpDtl());
        Integer coaId = 0;
        if (this.getPmsSiteRcdExpDtl().getCurrentRow() != null &&
            this.getPmsSiteRcdExpDtl().getCurrentRow().getAttribute("CoaId") != null)
            coaId = (Integer) this.getPmsSiteRcdExpDtl().getCurrentRow().getAttribute("CoaId");
        rqExp.setWhereClause("DocId='" + this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId") + "' and CoaId=" +
                             coaId);
        Row fr[] = this.getPmsSiteRcdExpDtl().getFilteredRows(rqExp);
        for (Row row : fr) {
            _log.info("Setting values in" + row.getAttribute("SrNo"));
            row.setAttribute("BillDtlFlg", chkVal);
            if (chkVal.equals("N")) {
                row.setAttribute("TdsFlg", "N");
                //remove all bills for this row
                Integer srDestNo = (Integer) row.getAttribute("SrNo");
                Row billRow[] = this.getPmsSiteRcdBillDtl().getFilteredRows("SrDestNo", srDestNo);
                _log.info("No. of Rows for Bill=" + billRow.length);
                for (Row bill : billRow) {
                    bill.remove();
                }
            }
        }

        //Remove Bill Detail for current row
        Row dtlCurr = this.getPmsSiteRcdExpDtl().getCurrentRow();
        Integer srDestNo = (Integer) dtlCurr.getAttribute("SrNo");
        Row billRow[] = this.getPmsSiteRcdBillDtl().getFilteredRows("SrDestNo", srDestNo);
        _log.info("No. of Rows for Bill=" + billRow.length);
        for (Row bill : billRow) {
            bill.remove();
        }
    }


    public String checkExpenseAmtEnteredOrNot() {
        String docId = (String) this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId");
        Row fr[] = this.getPmsSiteRcdExpDtl().getFilteredRows("DocId", docId);
        for (Row r : fr) {
            Number expAmt = zero;
            if (r.getAttribute("AmtSp") != null)
                expAmt = (Number) r.getAttribute("AmtSp");
            if (expAmt.compareTo(zero) > 0) {
            } else
                return "N";
        }
        return "Y";
    }


    public String checkCostCentreAddedOrNot() {

        return (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                   new StringBuilder("PMS.FN_CHK_CC_MAND_FR_DSR(?,?,?,?,?,?)"), new Object[] {
                                                   EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                   EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 38501,
                                                   this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId")
    }, Types.VARCHAR);

    }

    public String checkCOABalanceIsAvailable() {
        Number closingBal = new Number(0);
        Number totAmt = new Number(0);
        this.showCoaBalance();
        if (this.getPmsSiteRcd().getCurrentRow().getAttribute("TransClBalProjNum") != null)
            closingBal = (Number) this.getPmsSiteRcd().getCurrentRow().getAttribute("TransClBalProjNum");
        if (this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTotAmtSp") != null)
            totAmt = (Number) this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTotAmtSp");
        System.out.println("Total Amount =" + totAmt);
        System.out.println("Blance Holding =" + closingBal);
        if (totAmt.compareTo(closingBal) > 0)
            return "N";
        else
            return "Y";
    }

    public String showCoaBalance() {
        System.out.println("in showCoaInfo");
        Row currentRow = this.getPmsSiteRcd().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("RefCoaId") != null) {
            Object cldId = currentRow.getAttribute("CldId");
            Object slocId = currentRow.getAttribute("SlocId");
            Object hoOrgId = currentRow.getAttribute("HoOrgId");
            Object orgId = currentRow.getAttribute("OrgId");
            ;
            Object rcdId = null; //currentRow.getAttribute("TvouId");
            Object rcdDt = currentRow.getAttribute("RcdDt");
            Object coaId = currentRow.getAttribute("RefCoaId");

            System.out.println("cldId = " + cldId + " slocId = " + slocId + " hoOrgId = " + hoOrgId + " orgId = " +
                               orgId + " coaId =  " + coaId + "rcdId =  " + rcdId + " rcdDt = " + rcdDt);
            callStoredProcedureForOpBal("fin.proc_get_coa_bal_params(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        cldId, slocId, hoOrgId, orgId, coaId, rcdId, rcdDt, null, null
            });

        }
        return null;
    }

    protected Object callStoredProcedureForOpBal(String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallableStatement
            st = getDBTransaction().createCallableStatement("begin " + stmt + "; end ;", 0);
            // 2. Register the first bind variable for the return value
            st.setObject(1, bindVars[0]);
            st.setObject(2, bindVars[1]);
            st.setObject(3, bindVars[2]);
            st.setObject(4, bindVars[3]);
            st.setObject(5, bindVars[4]);
            st.setObject(6, bindVars[5]);
            st.setObject(7, bindVars[6]);
            st.setObject(8, bindVars[7]);
            st.setObject(9, bindVars[8]);

            st.registerOutParameter(10, Types.VARCHAR);
            st.registerOutParameter(11, Types.VARCHAR);
            st.registerOutParameter(12, Types.VARCHAR);
            st.registerOutParameter(13, Types.VARCHAR);
            st.registerOutParameter(14, Types.VARCHAR);
            st.registerOutParameter(15, Types.VARCHAR);
            st.registerOutParameter(16, Types.VARCHAR);
            st.registerOutParameter(17, Types.VARCHAR);
            // 5. Set the value of user-supplied bind vars in the stmt

            st.executeUpdate();
            ViewObjectImpl op = this.getPmsSiteRcd();
            //op.executeQuery();
            Row currentRow = op.getCurrentRow();
            if (currentRow != null) {
                try {
                    if (st.getObject(10) != null) {
                        currentRow.setAttribute("TransOpBalOut", divideValue(st.getObject(10)));
                        System.out.println("TransOpBalOut = " + divideValue(st.getObject(10)));
                    }
                    if (st.getObject(11) != null) {
                        currentRow.setAttribute("TransDrAmt", totalCrInString(st.getObject(11)));
                        System.out.println("TransDrAmt = " + totalCrInString(st.getObject(11)));

                    }
                    if (st.getObject(12) != null) {
                        currentRow.setAttribute("TransCrAmt", totalCrInString(st.getObject(12)));
                        System.out.println("TransCrAmt = " + totalCrInString(st.getObject(12)));

                    }
                    if (st.getObject(13) != null) {
                        currentRow.setAttribute("TransClBalPostOut", divideValue(st.getObject(13)));
                        System.out.println("TransClBalPostOut = " + divideValue(st.getObject(13)));

                    }
                    if (st.getObject(14) != null) {
                        currentRow.setAttribute("TransProjAmtOut", divideValue(st.getObject(14)));
                        System.out.println("TransProjAmtOut = " + divideValue(st.getObject(14)));

                    }
                    if (st.getObject(15) != null) {
                        currentRow.setAttribute("TransUnpostAmtOut", divideValue(st.getObject(15)));
                        System.out.println("TransUnpostAmtOut = " + divideValue(st.getObject(15)));

                    }
                    if (st.getObject(16) != null) {
                        currentRow.setAttribute("TransClBalOut", divideValue(st.getObject(16)));
                        System.out.println("TransClBalOut = " + divideValue(st.getObject(16)));

                    }
                    if (st.getObject(17) != null) {
                        currentRow.setAttribute("TransClBalProj", divideValue(st.getObject(17)));
                        System.out.println("TransClBalProj = " + divideValue(st.getObject(17)));
                        Number coaAmt = new Number(0);
                        if (st.getObject(17) != null) {
                            String balValue = st.getObject(17).toString();
                            Integer len = (balValue.toString().length());
                            String amtVal = balValue.substring(0, len - 3);
                            System.out.println("amtVal=" + amtVal);
                            if (amtVal != null)
                                coaAmt = new Number(amtVal);
                        }
                        currentRow.setAttribute("TransClBalProjNum", coaAmt);
                        System.out.println("TransClBalProjNum = " + coaAmt);
                    }
                } catch (SQLException sqle) {
                    sqle.printStackTrace();
                }
            }

            return "Y";
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }

    public Object divideValue(Object value) {
        String coaAmt = "0";
        if (value != null) {
            String balValue = value.toString();
            Integer len = (balValue.toString().length());
            String amtVal = balValue.substring(0, len - 3);
            String crDrVal = balValue.substring(len - 3, len);
            String numAmt = totalCrInString(amtVal);
            coaAmt = numAmt.concat(crDrVal);
            return coaAmt;
        }
        return coaAmt;
    }

    public String totalCrInString(Object amount) {
        if (amount != null) {
            Integer amt_digit = Integer.parseInt(ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
            String amt = amount.toString();
            if (!amt.contains(".")) {
                amt = amt.concat(".");
                for (int i = 0; i < amt_digit; i++) {
                    amt = amt.concat("0");
                }
            } else {
                int i = amt.indexOf(".");
                int count = 0;
                for (int j = i + 1; j < amt.toString().length(); j++) {
                    count++;
                }
                for (int j = 0; j < (amt_digit - count); j++) {
                    amt = amt.concat("0");
                }
            }
            int l = amt.indexOf(".");
            StringBuffer sb = new StringBuffer(amt);

            if (l > 3) {
                int rem = l % 3;
                if (rem == 0)
                    rem = 3;
                sb = sb.insert(rem, ",");
                int n = sb.indexOf(",");
                l++;
                for (int m = n + 3; m < l - 1; m = m + 3) {
                    sb = sb.insert(m + 1, ",");
                    m = m + 1;
                    l++;
                }
            }
            return sb.toString();
        }
        return null;
    }
}

