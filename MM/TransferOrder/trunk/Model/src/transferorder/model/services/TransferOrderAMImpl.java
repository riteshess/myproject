package transferorder.model.services;

import adf.utils.ebiz.EbizParams;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.model.BindingContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.binding.BindingContainer;

import oracle.jbo.JboException;
import oracle.jbo.JboSQLException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import transferorder.model.services.common.TransferOrderAM;
import transferorder.model.views.LovDispUomDescVOImpl;
import transferorder.model.views.MmItmVwVOImpl;
import transferorder.model.views.MmTrfOrdItmVOImpl;
import transferorder.model.views.MmTrfOrdItmVORowImpl;
import transferorder.model.views.MmTrfOrdVOImpl;
import transferorder.model.views.MmTrfOrdVORowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 10 14:47:27 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransferOrderAMImpl extends ApplicationModuleImpl implements TransferOrderAM {
    /**
     * This is the default constructor (do not remove).
     */

    public TransferOrderAMImpl() {
    }

    /**
     * Container's getter for Doc_Type_Src1.
     * @return Doc_Type_Src1
     */

    ADFLogger adf_log = (ADFLogger) ADFLogger.createADFLogger(TransferOrderAMImpl.class);

    public ViewObjectImpl getDoc_Type_Src1() {
        return (ViewObjectImpl) findViewObject("Doc_Type_Src1");
    }

    /**
     * Container's getter for MmTrfOrdItm1.
     * @return MmTrfOrdItm1
     */
    public ViewObjectImpl getMmTrfOrdItm1() {
        return (ViewObjectImpl) findViewObject("MmTrfOrdItm1");
    }

    /**
     * Container's getter for MmTrfOrd1.
     * @return MmTrfOrd1
     */
    public MmTrfOrdVOImpl getMmTrfOrd1() {
        return (MmTrfOrdVOImpl) findViewObject("MmTrfOrd1");
    }

    /**
     * Container's getter for Trf_Src_Type1.
     * @return Trf_Src_Type1
     */
    public ViewObjectImpl getTrf_Src_Type1() {
        return (ViewObjectImpl) findViewObject("Trf_Src_Type1");
    }

    /**
     * Container's getter for Trf_Type1.
     * @return Trf_Type1
     */
    public ViewObjectImpl getTrf_Type1() {
        return (ViewObjectImpl) findViewObject("Trf_Type1");
    }

    /**
     * Container's getter for LOV_WH_ID1.
     * @return LOV_WH_ID1
     */
    public ViewObjectImpl getLOV_WH_ID1() {
        return (ViewObjectImpl) findViewObject("LOV_WH_ID1");
    }

    /**
     * Container's getter for LOV_WH_ORG_ID1.
     * @return LOV_WH_ORG_ID1
     */
    public ViewObjectImpl getLOV_WH_ORG_ID1() {
        return (ViewObjectImpl) findViewObject("LOV_WH_ORG_ID1");
    }

    /**
     * Container's getter for LOV_RQMT_Area_ID1.
     * @return LOV_RQMT_Area_ID1
     */
    public ViewObjectImpl getLOV_RQMT_Area_ID1() {
        return (ViewObjectImpl) findViewObject("LOV_RQMT_Area_ID1");
    }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl) findViewObject("Org1");
    }

    /**
     * Container's getter for LOVWhId_WhNm1.
     * @return LOVWhId_WhNm1
     */
    public ViewObjectImpl getLOVWhId_WhNm1() {
        return (ViewObjectImpl) findViewObject("LOVWhId_WhNm1");
    }

    /**
     * Container's getter for WhIdSrc1.
     * @return WhIdSrc1
     */
    public ViewObjectImpl getWhIdSrc1() {
        return (ViewObjectImpl) findViewObject("WhIdSrc1");
    }

    /**
     * Container's getter for LOV_RQMT_AreaId1.
     * @return LOV_RQMT_AreaId1
     */
    public ViewObjectImpl getLOV_RQMT_AreaId1() {
        return (ViewObjectImpl) findViewObject("LOV_RQMT_AreaId1");
    }

    public void setOrgValue() {
        String orgId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("OrgId");
        getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdDest", orgId);
        getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdSrc", orgId);
        String wh = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhId");
        getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", wh);
        getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", null);
    }

    public void setOneSidOrgValue() {
        String orgId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("OrgId");
        getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdSrc", orgId);
        String wh = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhId");
        getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", wh);
        getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdDest", null);
        getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", null);

    }

    public void resetTrfType() {
        getMmTrfOrd1().getCurrentRow().setAttribute("TrfType", null);
        getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", null);
        getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", null);
        getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdDest", null);
        getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdSrc", null);
    }

    public void setDestOrgandWh() {
        // String orgId = (String)getMmTrfOrd1().getCurrentRow().getAttribute("OrgId");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //String orgDest=getMmTrfOrd1().getCurrentRow().getAttribute("")
        if (getMmTrfOrd1().getCurrentRow() != null) {
            getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdDest", orgId);
        }

        String wh = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhId");
        //getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdDest", orgId);
        if (getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc") != null &&
            getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc").toString().equals(wh)) {
            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", wh);
        } else if (getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc") == null) {
        } else
            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", null);
    }

    public String whSetWithTrfType() {
        Row curr = this.getMmTrfOrd1().getCurrentRow();

        if (curr != null) {
            String orgId = curr.getAttribute("OrgId").toString();
            String orgSrc = null;
            String orgdest = null;
            if (curr.getAttribute("OrgIdDest") != null) {
                orgdest = curr.getAttribute("OrgIdDest").toString();
            }
            if (curr.getAttribute("OrgIdSrc") != null) {
                orgSrc = curr.getAttribute("OrgIdSrc").toString();
                ;
            }
            String Whid = curr.getAttribute("WhId").toString();
            Integer trftype = Integer.parseInt(curr.getAttribute("TrfType").toString());
            //System.out.println("jgtukjhoh"+trftype);

            if (trftype == 373) {
                curr.setAttribute("WhIdDest", Whid);
            } else if (trftype == 374) {
                //if(!orgSrc.equalsIgnoreCase(orgdest)){
                if (orgSrc.equalsIgnoreCase(orgId)) {
                    curr.setAttribute("OrgIdSrc", orgId);
                    curr.setAttribute("WhIdSrc", Whid);
                    System.out.println("in src set value" + curr.getAttribute("WhIdSrc"));
                }
                //}
                //System.out.println("now trf type is "+trftype);
                if (orgdest != null && orgSrc != null) {
                    if (orgdest.equalsIgnoreCase(orgSrc)) {
                        curr.setAttribute("OrgIdDest", null);
                        curr.setAttribute("WhIdDest", null);
                    } else {
                        //       System.out.println("org dest and org src is not equals "+orgdest+"  curr org "+orgId);
                        if (orgdest.equalsIgnoreCase(orgId)) {
                            //             System.out.println("going to set whdest id"+Whid);
                            curr.setAttribute("OrgIdDest", orgId);
                            curr.setAttribute("WhIdDest", Whid);
                        }
                    }
                }
            }
        }
        return null;
    }

    public String setDestWhTrfType() {
        Row curr = this.getMmTrfOrd1().getCurrentRow();
        String orgId = curr.getAttribute("OrgId").toString();
        String orgSrc = null;
        String orgdest = null;
        if (curr.getAttribute("OrgIdDest") != null) {
            orgdest = curr.getAttribute("OrgIdDest").toString();
        }
        if (curr.getAttribute("OrgIdSrc") != null) {
            orgSrc = curr.getAttribute("OrgIdSrc").toString();
            ;
        }
        if (curr != null) {
            String Whid = curr.getAttribute("WhId").toString();
            Integer trftype = Integer.parseInt(curr.getAttribute("TrfType").toString());
            if (trftype == 373) {
                curr.setAttribute("WhIdSrc", Whid);
            } else if (trftype == 374) {
                if (orgdest != null && orgSrc != null) {
                    if (orgSrc.equalsIgnoreCase(orgdest)) {
                        curr.setAttribute("OrgIdDest", null);
                        curr.setAttribute("WhIdDest", null);
                    } else {

                        if (orgdest.equalsIgnoreCase(orgId)) {
                            System.out.println("now going to set current value");
                            curr.setAttribute("OrgIdDest", orgId);
                            curr.setAttribute("WhIdDest", Whid);
                        }

                        //       System.out.println("org dest and org src is not equals "+orgdest+"  curr org "+orgId);
                        if (orgSrc.equalsIgnoreCase(orgId)) {
                            //             System.out.println("going to set whdest id"+Whid);
                            curr.setAttribute("OrgIdSrc", orgId);
                            curr.setAttribute("WhIdSrc", Whid);
                        }
                    }
                }

            }
        }
        return null;
    }

    public void setSrcOrgandWh() {
        String orgId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("OrgId");
        String wh = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhId");
        String orgsrc = null;
        if (getMmTrfOrd1().getCurrentRow().getAttribute("OrgIdSrc") != null) {
            orgsrc = getMmTrfOrd1().getCurrentRow().getAttribute("OrgIdSrc").toString();
        }
        if (orgsrc != null && (!orgsrc.equalsIgnoreCase(orgId))) {
            getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdSrc", orgId);

        } else {
            getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdSrc", orgId);
            //getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", wh);
        }
        // getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdSrc", orgId);
        if (getMmTrfOrd1().getCurrentRow().getAttribute("WhIdDest") != null &&
            getMmTrfOrd1().getCurrentRow().getAttribute("WhIdDest").toString().equals(wh)) {
            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", wh);
        } else if (getMmTrfOrd1().getCurrentRow().getAttribute("WhIdDest") == null) {
        } else
            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", null);
    }

    public void chkDestWhandSet() {
        // String orgSrc=
        String wh = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhId");
        if (getMmTrfOrd1().getCurrentRow().getAttribute("WhIdDest") != null) {
            String whd = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhIdDest");
            if (whd.equals(wh))
                getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", null);
        }
    }

    public void chkSrcWhandSet() {
        String wh = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhId");
        if (getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc") != null) {
            String whs = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc");
            if (whs.equals(wh))
                getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", null);
        }
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }


    public void setFyId() {

        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String glbl_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");

        String fyId = (String) (callStoredFunction(Types.VARCHAR, "app.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                   glbl_cld_id, glbl_org_id,
                                                   getMmTrfOrd1().getCurrentRow().getAttribute("TrfDt")
        }));
        System.out.println("fyid=" + fyId);
        getMmTrfOrd1().getCurrentRow().setAttribute("FyId", fyId);
    }

    public void setTrfNo() {

        String tableName = "MM$TRF$ORD";
        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String glbl_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String fylId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("OrgId");
        String whId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhId");
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer trType = (Integer) getMmTrfOrd1().getCurrentRow().getAttribute("TrfType");
        if (getMmTrfOrd1().getCurrentRow().getAttribute("FyId") != null &&
            (!(getMmTrfOrd1().getCurrentRow().getAttribute("TrfNo") != null))) {
            String trfNo = (String) callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                                       glbl_sloc_id, glbl_cld_id, glbl_org_id, tableName, null,
                                                       Integer.parseInt(getMmTrfOrd1().getCurrentRow().getAttribute("FyId").toString()),
                                                       new Integer(18519), trType
            });

            getMmTrfOrd1().getCurrentRow().setAttribute("TrfNo", trfNo);
        }
    }

    public String getDocTxnId() {
        ViewObjectImpl impl = this.getMmTrfOrd1();
        String docTxnId = (String) impl.getCurrentRow().getAttribute("DocId");
        return docTxnId;
    }

    public void setInvReq() {

        String invReq = (String) getMmTrfOrd1().getCurrentRow().getAttribute("InvReqd");
        if (invReq != null) {
        } else
            getMmTrfOrd1().getCurrentRow().setAttribute("InvReqd", "N");
    }

    public void setOrdQtyBs(Object ordQty) {
        Number ordQ = (Number) ordQty;
        ViewObjectImpl impl = this.getMmTrfOrdItm2();
        Row currRow = impl.getCurrentRow();
        currRow.setAttribute("OrdQty", ordQty);
        oracle.jbo.domain.Number UomConvFctr = new Number(1);
        if (currRow.getAttribute("UomConvFctr") != null)
            UomConvFctr = (oracle.jbo.domain.Number) currRow.getAttribute("UomConvFctr");
        currRow.setAttribute("OrdQtyBs", UomConvFctr.multiply(ordQ));

        // Number ord = ordQ;
        //  Number trf = (Number)currRow.getAttribute("TrfQty");
        currRow.setAttribute("AuthQty", ordQ);
        currRow.setAttribute("AuthQtyBs", UomConvFctr.multiply(ordQ));
        currRow.setAttribute("StkResvQty", new Number(0));
        currRow.setAttribute("StkResvQtyBs", new Number(0));
        // Number pend=ord.subtract(trf);
        currRow.setAttribute("PendQty", UomConvFctr.multiply(ordQ));
        currRow.setAttribute("PendQtyBs", ordQ);
    }


    public void delChildRec(String docId) {
        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String glbl_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));


        RowQualifier rq1 = new RowQualifier(getMmTrfOrdItm2());
        rq1.setWhereClause("CldId = '" + glbl_cld_id + "' AND SlocId = " + glbl_sloc_id + " AND OrgId = '" +
                           glbl_org_id + "' AND DocId = '" + docId + "'");
        Row norows[] = getMmTrfOrdItm2().getFilteredRows(rq1);

        for (Row r : norows) {
            String ItmId = (String) r.getAttribute("ItmId");

            getMmTrfOrdItm2().setCurrentRow(r);
            getMmTrfOrdItm2().removeCurrentRow();
        }
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);

                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public void getSrcDocDtl(String MRSno, String docId) {
        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String glbl_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        RowQualifier rq = new RowQualifier(getMRS_ITM1());
        rq.setWhereClause("MrsTxnId ='" + MRSno + "' AND CldId = '" + glbl_cld_id + "' AND SlocId = '" + glbl_sloc_id +
                          "' AND OrgId = '" + glbl_org_id + "' ");
        Row[] rows = getMRS_ITM1().getFilteredRows(rq);

        RowQualifier rq1 = new RowQualifier(getMmTrfOrdItm2());
        rq1.setWhereClause("CldId = '" + glbl_cld_id + "' AND SlocId = " + glbl_sloc_id + " AND OrgId = '" +
                           glbl_org_id + "' AND DocId = '" + docId + "'");
        Row norows[] = getMmTrfOrdItm2().getFilteredRows(rq1);
        if (norows != null && norows.length > 0) {

            for (Row row : norows) {

                row.remove();
            }
        }

        for (Row rw : rows) {
            Row rw1 = getMmTrfOrdItm1().createRow();
            rw1.setAttribute("CldId", glbl_cld_id);
            rw1.setAttribute("SlocId", glbl_sloc_id);
            rw1.setAttribute("OrgId", glbl_org_id);
            rw1.setAttribute("DocId", docId);
            rw1.setAttribute("ItmId", rw.getAttribute("ItmId"));
            rw1.setAttribute("ItmUom", rw.getAttribute("ItmUom"));
            rw1.setAttribute("OrdQty", 0);
            rw1.setAttribute("AuthQty", 0);
            rw1.setAttribute("StkResvQty", 0);
            rw1.setAttribute("TrfQty", 0);
            rw1.setAttribute("PendQty", rw.getAttribute("PendQty"));
            rw1.setAttribute("CnclItm", rw.getAttribute("CnclItm"));

            adf_log.info("now the itm id is" + rw1.getAttribute("ItmId"));
            String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            ViewObjectImpl tunevo = this.getAppItmTune();
            tunevo.setNamedWhereClauseParam("bindItmId", rw1.getAttribute("ItmId"));
            tunevo.setNamedWhereClauseParam("bindCldId", glbl_cld_id);
            tunevo.setNamedWhereClauseParam("bindSlocId", glbl_sloc_id);
            tunevo.setNamedWhereClauseParam("bindHoOrgId", ho_org_id);
            tunevo.executeQuery();

            RowQualifier rq3 = new RowQualifier(tunevo);
            rq3.setWhereClause("CldId = '" + glbl_cld_id + "' AND SlocId = " + glbl_sloc_id + " AND HoOrgId = '" +
                               ho_org_id + "' AND ItmId = '" + rw1.getAttribute("ItmId") + "'");
            Row r1[] = tunevo.getFilteredRows(rq3);
            String UomBasic = (String) r1[0].getAttribute("UomBasic");
            rw1.setAttribute("ItmUomBs", UomBasic);

            RowQualifier rq4 = new RowQualifier(getMmTrfOrdItm2());
            rq4.setWhereClause("CldId = '" + glbl_cld_id + "' AND SlocId = " + glbl_sloc_id + " AND OrgId = '" +
                               glbl_org_id + "' AND DocId = '" + docId + "'");
            Row r2[] = getMmTrfOrdItm2().getFilteredRows(rq4);
            String ItmId = (String) r2[0].getAttribute("ItmId");
            String ItmUom = (String) r2[0].getAttribute("ItmUom");
            String ItmUomBs = (String) r2[0].getAttribute("ItmUomBs");
            BigDecimal uomConvFctr =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                                glbl_sloc_id, glbl_cld_id, glbl_org_id, ItmId, ItmUom, ItmUomBs
            });

            oracle.jbo.domain.Number num = null;

            try {
                num = new oracle.jbo.domain.Number(uomConvFctr);
            } catch (SQLException ex) {

            }


            rw1.setAttribute("UomConvFctr", num);

            rw1.setAttribute("OrdQtyBs", 0);
            rw1.setAttribute("AuthQtyBs", null);
            rw1.setAttribute("StkResvQtyBs", null);
            rw1.setAttribute("TrfQtyBs", null);
            rw1.setAttribute("PendQtyBs", null);
            getMmTrfOrdItm1().insertRow(rw1);
        }

        getMmTrfOrdItm1().executeQuery();

    }

    /**
     * Container's getter for MRS_ITM1.
     * @return MRS_ITM1
     */
    public ViewObjectImpl getMRS_ITM1() {
        return (ViewObjectImpl) findViewObject("MRS_ITM1");
    }

    /**
     * Container's getter for MmTrfOrdItm2.
     * @return MmTrfOrdItm2
     */
    public ViewObjectImpl getMmTrfOrdItm2() {
        return (ViewObjectImpl) findViewObject("MmTrfOrdItm2");
    }

    /**
     * Container's getter for MmTrfOrd_TrfOrdItmVL1.
     * @return MmTrfOrd_TrfOrdItmVL1
     */
    public ViewLinkImpl getMmTrfOrd_TrfOrdItmVL1() {
        return (ViewLinkImpl) findViewLink("MmTrfOrd_TrfOrdItmVL1");
    }

    /**
     * Container's getter for MmItmVw1.
     * @return MmItmVw1
     */
    public ViewObjectImpl getMmItmVw1() {
        return (ViewObjectImpl) findViewObject("MmItmVw1");
    }

    /**
     * Container's getter for TransSearchTrfOrd1.
     * @return TransSearchTrfOrd1
     */
    public ViewObjectImpl getTransSearchTrfOrd1() {
        return (ViewObjectImpl) findViewObject("TransSearchTrfOrd1");
    }

    public void searchResultTrfOrd() {

        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String glbl_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl trnsvo = getTransSearchTrfOrd1();
        String trfNo = (String) trnsvo.getCurrentRow().getAttribute("TrfNoTrans");
        String ItmId = (String) trnsvo.getCurrentRow().getAttribute("ItemIdTrans");
        Integer trfStat = null;
        if (trnsvo.getCurrentRow().getAttribute("TrfStat") != null) {
            trfStat = Integer.parseInt(trnsvo.getCurrentRow().getAttribute("TrfStat").toString());
        }
        //Integer trfSrcType = (Integer)trnsvo.getCurrentRow().getAttribute("TrfSrcTypeTrans");
        Timestamp frmDt = (Timestamp) trnsvo.getCurrentRow().getAttribute("FromDateTrans");
        Timestamp toDt = (Timestamp) trnsvo.getCurrentRow().getAttribute("ToDateTrans");

        String WhIdTrans = (String) trnsvo.getCurrentRow().getAttribute("WhId1Trans");

        System.out.println(trfStat);

        ViewObjectImpl vo = getSearchTrf1();
        vo.setNamedWhereClauseParam("bindOrgId", glbl_org_id);
        vo.setNamedWhereClauseParam("bindSlocId", glbl_sloc_id);
        vo.setNamedWhereClauseParam("bindCldId", glbl_cld_id);
        vo.setNamedWhereClauseParam("TrfNo_Bind", trfNo);
        vo.setNamedWhereClauseParam("WhIdBind", WhIdTrans);
        vo.setNamedWhereClauseParam("trfStatBind", trfStat);
        vo.setNamedWhereClauseParam("bindfrmDt", frmDt);
        vo.setNamedWhereClauseParam("bindtoDt", toDt);
        vo.setNamedWhereClauseParam("ItmIdBind", ItmId);


        vo.executeQuery();
    }

    public void resetAction() {
        ViewObjectImpl vo = getSearchTrf1();
        vo.setNamedWhereClauseParam("TrfNo_Bind", null);
        vo.setNamedWhereClauseParam("WhIdBind", null);
        vo.setNamedWhereClauseParam("trfStatBind", null);
        vo.setNamedWhereClauseParam("bindfrmDt", null);
        vo.setNamedWhereClauseParam("bindtoDt", null);
        vo.setNamedWhereClauseParam("ItmIdBind", null);
        vo.executeQuery();
    }

    public void trfOrdCriteria() {
        ViewObjectImpl srchVo = this.getSearchTrf1();
        String docid = null;
        if (srchVo.getCurrentRow().getAttribute("DocId") != null) {
            docid = srchVo.getCurrentRow().getAttribute("DocId").toString();
            ViewObjectImpl vo = this.getMmTrfOrd1();
            ViewCriteria vc = vo.getViewCriteria("MmTrfOrdVOCriteria1");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("docIdBind", docid);
            vo.executeQuery();
        }

    }

    public String trfOrdCriteria1(String orgId, String cldId, Integer slocId, String DocId) {
        ViewObjectImpl vo = this.getMmTrfOrd1();
        ViewCriteria vc = vo.getViewCriteria("MmTrfOrdVOCriteria1");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("docIdBind", DocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.executeQuery();

        return "";
    }

    public void getItemForMmTrfOrd(String cldId, String orgId, Integer slocId) {

        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String glbl_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        /*
        ViewObjectImpl itmvw = this.getMmItmVw1();
        itmvw.setWhereClause("CLD_ID='"+glbl_cld_id+"' AND SLOC_ID="+glbl_sloc_id+" AND ORG_ID="+glbl_org_id);
         itmvw.executeQuery();
       MmItmVwVOImpl itmvw = (MmItmVwVOImpl)getMmItmVw1();
         ViewCriteria vcitm = itmvw.getViewCriteria("MmItmVwVOCriteria");
        ViewObject vo= this.getMmItmVw1();
        vo.applyViewCriteria(vcitm);
        vo.setNamedWhereClauseParam("orgBind",glbl_org_id);
        vo.setNamedWhereClauseParam("CldBind",glbl_cld_id);
        vo.setNamedWhereClauseParam("slocBind",glbl_sloc_id);
        vo.executeQuery();
        itmvw.setCldBind(glbl_cld_id);
        itmvw.setorgBind(glbl_org_id);
        itmvw.setslocBind(glbl_sloc_id);
        itmvw.executeQuery(); */

        ViewObjectImpl MmTrfOrdVO = this.getMmTrfOrd1();
        ViewCriteria vc = MmTrfOrdVO.getViewCriteria("MmTrfOrdVOCriteria1");
        MmTrfOrdVO.applyViewCriteria(vc);
        MmTrfOrdVO.setNamedWhereClauseParam("bindOrgId", glbl_org_id);
        MmTrfOrdVO.setNamedWhereClauseParam("bindCldId", glbl_cld_id);
        MmTrfOrdVO.setNamedWhereClauseParam("bindSlocId", glbl_sloc_id);
        MmTrfOrdVO.executeQuery();

        ViewObjectImpl orgResv = this.getorgResv();
        orgResv.setNamedWhereClauseParam("Bindcldid", glbl_cld_id);
        orgResv.setNamedWhereClauseParam("Bindslocid", glbl_sloc_id);
        orgResv.setNamedWhereClauseParam("Bindorgid", glbl_org_id);
        orgResv.executeQuery();
    }

    public void deleteitem() {
        getMmTrfOrdItm2().getCurrentRow().remove();
    }

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Row curr = this.getMmTrfOrd1().getCurrentRow();
            Integer type = 0;
            if (curr.getAttribute("TrfType") != null) {
                type = Integer.parseInt(curr.getAttribute("TrfType").toString());
            }
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, type
            });
            System.out.println("-------wfId---------" + obj);
            return obj.toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("-exception----");
            return "0";
        }

    }

    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        //  String DocId = getMmTrfOrd1().getCurrentRow().getAttribute("DocId").toString();
        Row curr = this.getMmTrfOrd1().getCurrentRow();
        Integer type = 0;
        if (curr.getAttribute("TrfType") != null) {
            type = Integer.parseInt(curr.getAttribute("TrfType").toString());
        }
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, type
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return UsrId;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        //String  DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        String DocId = getMmTrfOrd1().getCurrentRow().getAttribute("DocId").toString();
        Row curr = this.getMmTrfOrd1().getCurrentRow();
        Integer type = 0;
        if (curr.getAttribute("TrfType") != null) {
            type = Integer.parseInt(curr.getAttribute("TrfType").toString());
        }
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo, type, WfNo, DocId, usr_idFrm, usr_idTo,
                                                   levelFrm, levelTo, action, remark, amount
    }).toString());
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        String DocId = getMmTrfOrd1().getCurrentRow().getAttribute("DocId").toString();

        Row curr = this.getMmTrfOrd1().getCurrentRow();
        Integer type = 0;
        if (curr.getAttribute("TrfType") != null) {
            type = Integer.parseInt(curr.getAttribute("TrfType").toString());
        }
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo, DocId, type
    }).toString());
    }

    public void updateStatus() {
        String status = resolvEl("#{pageFlowScope.WF_return_value}");

        String txnId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("DocId");
        Integer trfType = (Integer) getMmTrfOrd1().getCurrentRow().getAttribute("TrfType");
        Integer usrcreate = Integer.parseInt(getMmTrfOrd1().getCurrentRow().getAttribute("UsrIdCreate").toString());
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

        if (status.equals("A")) {
            getMmTrfOrd1().getCurrentRow().setAttribute("AuthStat", "Y");
            getMmTrfOrd1().getCurrentRow().setAttribute("TrfStat", 375);
            //String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            //String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            //Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String whid = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc");
            //String txnId=(String)getMmTrfOrd1().getCurrentRow().getAttribute("DocId");
            Integer fyid = (Integer) getMmTrfOrd1().getCurrentRow().getAttribute("FyId");
            //Integer trfType=(Integer)getMmTrfOrd1().getCurrentRow().getAttribute("TrfType");
            Integer type = 0;
            if (trfType == 373)
                type = 330; //int
            else
                type = 366; //ext
            Object obj = callStoredFunction(NUMBER, "MM_UPDT_STK_RESV(?,?,?,?,?,?,?)", new Object[] {
                                            cldId, slocId, orgId, whid, fyid, type, txnId
            });
            System.out.println("Stock Reserved=" + obj);

        } else if (status.equals("F")) {
            getMmTrfOrd1().getCurrentRow().setAttribute("TrfStat", 428);

        } else if (status.equals("R")) {
            System.out.println("in the reject block");
            getMmTrfOrd1().getCurrentRow().setAttribute("TrfStat", 427);
        } else if (status.equals("V")) {
            System.out.println("in the revert block");
            Integer pendinguser = pendingTrfOrdCheck(slocId, cldId, orgId, 18519);
            System.out.println("pendinguser       " + pendinguser + " usrcreate  " + usrcreate + "         " + txnId);
            if (pendinguser != null) {
                System.out.println("pendinguser.compareTo(usrcreate)             " + pendinguser.compareTo(usrcreate));

                if (pendinguser.compareTo(usrcreate) == 0) {
                    System.out.println("pendinguser    inside if after compare   " + pendinguser + " usrcreate  " +
                                       usrcreate);

                    getMmTrfOrd1().getCurrentRow().setAttribute("TrfStat", 427);
                } else {
                    getMmTrfOrd1().getCurrentRow().setAttribute("TrfStat", 428);
                }
            }
        } else {
            getMmTrfOrd1().getCurrentRow().setAttribute("AuthStat", "N");
        }

        this.getDBTransaction().commit();
    }

    public int pendingTrfOrdCheck(Integer SlocId, String CldId, String OrgId, Integer TrOrdDocNo) {
        Row currTO = this.getMmTrfOrd1().getCurrentRow();
        String docIdTxn = currTO.getAttribute("DocId").toString();
        Integer toType = (Integer) currTO.getAttribute("TrfType");
        //   System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, TrOrdDocNo, docIdTxn, toType
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        /*   Integer.parseInt(callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                   CldId,
                                                                                                                   OrgId,
                                                                                                                   PoDocNo,
                                                                                                                   docIdTxn }).toString()); */
        // System.out.println("User id pending in impl--"+usrId);
        return usrId;

    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public void setItmUomBs() {
        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String orgId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("OrgId");

        String id = (String) getMmTrfOrd1().getCurrentRow().getAttribute("TransItmId");
        adf_log.info("now the itm id is" + id);
        ViewObjectImpl tunevo = this.getAppItmTune();
        tunevo.setNamedWhereClauseParam("bindItmId", id);
        tunevo.setNamedWhereClauseParam("bindCldId", glbl_cld_id);
        tunevo.setNamedWhereClauseParam("bindSlocId", glbl_sloc_id);
        tunevo.setNamedWhereClauseParam("bindHoOrgId", ho_org_id);
        tunevo.executeQuery();

        RowQualifier rq3 = new RowQualifier(tunevo);
        rq3.setWhereClause("CldId = '" + glbl_cld_id + "' AND SlocId = " + glbl_sloc_id + " AND HoOrgId = '" +
                           ho_org_id + "' AND ItmId = '" + id + "'");
        Row r1[] = tunevo.getFilteredRows(rq3);
        String UomBasic = (String) r1[0].getAttribute("UomBasic");

        getMmTrfOrdItm2().getCurrentRow().setAttribute("ItmId", id);
        getMmTrfOrdItm2().getCurrentRow().setAttribute("ItmUomBs", UomBasic);
        getMmTrfOrdItm2().getCurrentRow().setAttribute("ItmUom", UomBasic);

        String itmUom = (String) getMmTrfOrdItm2().getCurrentRow().getAttribute("ItmUom");
        String ItmUomBs = (String) getMmTrfOrdItm2().getCurrentRow().getAttribute("ItmUomBs");

        BigDecimal uomConvFctr = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                                                 glbl_sloc_id, glbl_cld_id, orgId, id, itmUom, ItmUomBs
        });
        oracle.jbo.domain.Number num = null;

        try {
            num = new oracle.jbo.domain.Number(uomConvFctr);
        } catch (SQLException ex) {
        }


        getMmTrfOrdItm2().getCurrentRow().setAttribute("UomConvFctr", num);


    }
    //not used code
    public void setItmUom(String itmUom) {

        String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String orgId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("OrgId");
        String itmId = (String) getMmTrfOrdItm2().getCurrentRow().getAttribute("ItmId");
        //String ItmUom = (String)getMmTrfOrdItm2().getCurrentRow().getAttribute("ItmUom");
        String ItmUomBs = (String) getMmTrfOrdItm2().getCurrentRow().getAttribute("ItmUomBs");

        BigDecimal uomConvFctr = (BigDecimal) callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR(?,?,?,?,?,?)", new Object[] {
                                                                 glbl_sloc_id, glbl_cld_id, orgId, itmId, itmUom,
                                                                 ItmUomBs
        });
        oracle.jbo.domain.Number num = null;

        try {
            num = new oracle.jbo.domain.Number(uomConvFctr);
        } catch (SQLException ex) {
        }


        getMmTrfOrdItm2().getCurrentRow().setAttribute("UomConvFctr", num);

    }

    public void setItmUomBsDefVal(String docId) {
        getMmTrfOrd1().getCurrentRow().setAttribute("DocTypeSrc", 0);
        docId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("DocId");

        Number UomConvFctr = new Number(1);
        RowSetIterator itr = getMmTrfOrdItm2().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row currRow = itr.next();
            if (currRow.getAttribute("UomConvFctr") != null)
                UomConvFctr = (Number) currRow.getAttribute("UomConvFctr");
            Number auth = new Number(0);
            Number resv = new Number(0);
            Number ord = (Number) currRow.getAttribute("OrdQty");
            Number trf = (Number) currRow.getAttribute("TrfQty");
            Number pend = (Number) currRow.getAttribute("PendQty");
            currRow.setAttribute("PendQtyBs", UomConvFctr.multiply(pend));
            if (currRow.getAttribute("AuthQty") != null)
                auth = (Number) currRow.getAttribute("AuthQty");
            else
                currRow.setAttribute("AuthQty", new Number(0));
            currRow.setAttribute("AuthQtyBs", UomConvFctr.multiply(auth));
            if (currRow.getAttribute("StkResvQty") != null)
                resv = (Number) currRow.getAttribute("StkResvQty");
            else
                currRow.setAttribute("StkResvQty", new Number(0));
            currRow.setAttribute("StkResvQtyBs", UomConvFctr.multiply(resv));
        }

    }


    /**
     * Container's getter for MmMrsItm1.
     * @return MmMrsItm1
     */
    public ViewObjectImpl getMmMrsItm1() {
        return (ViewObjectImpl) findViewObject("MmMrsItm1");
    }

    public void setCriteriaForItems() {
        String txn = getMmTrfOrd1().getCurrentRow().getAttribute("DocIdSrc").toString();


        ViewObjectImpl impl = this.getMmMrsItm1();
        StringBuffer sb = methodForInCase();


        if (getMmTrfOrdItm2().getEstimatedRowCount() > 0) {
            impl.setNamedWhereClauseParam("txnBind", txn);
            impl.setNamedWhereClauseParam("txnItmBind", sb);
        }

        else {
            impl.setNamedWhereClauseParam("txnBind", txn);
            impl.setNamedWhereClauseParam("txnItmBind", "-1");
        }

        impl.executeQuery();

    }

    public StringBuffer methodForInCase() {
        StringBuffer inClause = new StringBuffer();
        RowSetIterator rs = getMmTrfOrdItm2().createRowSetIterator(null);
        String txn = getMmTrfOrd1().getCurrentRow().getAttribute("DocIdSrc").toString();
        while (rs.hasNext()) {
            Row r = rs.next();
            String itm = r.getAttribute("ItmId").toString();
            inClause.append("'" + txn + itm + "'");
            if (rs.hasNext() == true)
                inClause.append(",");
        }
        return inClause;
    }

    /**
     * Container's getter for LovUsr1.
     * @return LovUsr1
     */
    public ViewObjectImpl getLovUsr1() {
        return (ViewObjectImpl) findViewObject("LovUsr1");
    }

    public void setTransItmId(String itmname) {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl descVo = this.getItemDescTune();
        descVo.setNamedWhereClauseParam("bindCldId", cld_id);
        descVo.setNamedWhereClauseParam("bindSlocId", sloc_id);
        descVo.setNamedWhereClauseParam("bindHoOrgId", ho_org_id);
        descVo.setNamedWhereClauseParam("bindItmdesc", itmname);
        descVo.executeQuery();

        Row r[] = descVo.getFilteredRows("ItmDesc", itmname);
        adf_log.info("item length   " + r.length);
        String id = null;
        if (r.length > 0)
            id = (String) r[0].getAttribute("ItmId");
        getMmTrfOrd1().getCurrentRow().setAttribute("TransItmId", id);

    }

    public Boolean CheckDuplicate() {
        String id = getMmTrfOrd1().getCurrentRow().getAttribute("TransItmId").toString();
        System.out.println("Id in trdord while check dupli=" + id);
        RowSetIterator rsi = getMmTrfOrdItm2().createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row r = rsi.next();
            if (r.getAttribute("ItmId").toString().equals(id))
                return true;
        }
        rsi.closeRowSetIterator();
        return false;
    }

    public void resetItemAndQty() {
        getMmTrfOrd1().getCurrentRow().setAttribute("TransItmDesc", null);
        // getMmTrfOrd1().getCurrentRow().setAttribute("TransItmId", null);
        getMmTrfOrd1().getCurrentRow().setAttribute("TransReqQty", null);
        getMmTrfOrdItm2().executeQuery();
        //getMmTrfOrd1().executeQuery();
    }

    public Integer trfStatus() {
        Integer trfordst = Integer.parseInt(getMmTrfOrd1().getCurrentRow().getAttribute("TrfStat").toString());
        return trfordst;
    }

    public void setItemCancel(String st, Integer oldst) {
        if (st == "true") {
            // System.out.println("St= Y");
            String docId = getMmTrfOrd1().getCurrentRow().getAttribute("DocId").toString();
            String orgId = getMmTrfOrd1().getCurrentRow().getAttribute("OrgId").toString();
            String cldId = getMmTrfOrd1().getCurrentRow().getAttribute("CldId").toString();
            Integer slocId = Integer.parseInt(getMmTrfOrd1().getCurrentRow().getAttribute("SlocId").toString());
            RowQualifier rq = new RowQualifier(getMmTrfOrdItm2());
            rq.setWhereClause("OrgId ='" + orgId + "' AND CldId ='" + cldId + "' AND SlocId =" + slocId +
                              " AND DocId ='" + docId + "' AND PendQty > 0 ");
            Row[] r = getMmTrfOrdItm2().getFilteredRows(rq);
            //  System.out.println("Rows="+r.length);
            if (r.length > 0) {
                int i = 0;
                while (i < r.length) {
                    r[i].setAttribute("CnclItm", "Y");
                    i++;
                }
            }
            getMmTrfOrdItm2().executeQuery();
        } else {
            String docId = getMmTrfOrd1().getCurrentRow().getAttribute("DocId").toString();
            String orgId = getMmTrfOrd1().getCurrentRow().getAttribute("OrgId").toString();
            String cldId = getMmTrfOrd1().getCurrentRow().getAttribute("CldId").toString();
            Integer slocId = Integer.parseInt(getMmTrfOrd1().getCurrentRow().getAttribute("SlocId").toString());
            //  getMmMrs2().getCurrentRow().setAttribute("MrsStat",oldst);
            RowQualifier rq = new RowQualifier(getMmTrfOrdItm2());
            rq.setWhereClause("OrgId ='" + orgId + "' AND CldId ='" + cldId + "' AND SlocId =" + slocId +
                              " AND DocId ='" + docId + "' AND PendQty > 0");
            Row[] r = getMmTrfOrdItm2().getFilteredRows(rq);
            //  System.out.println("Rows="+r.length);
            if (r.length > 0) {
                int i = 0;
                while (i < r.length) {
                    r[i].setAttribute("CnclItm", "N");
                    i++;
                }
            }
            getMmTrfOrdItm2().executeQuery();
        }

    }

    public Boolean checkAllItemCancel() {
        String docid = getMmTrfOrd1().getCurrentRow().getAttribute("DocId").toString();
        ViewObjectImpl itmvo = getMmTrfOrdItm2();
        Row rows[] = getMmTrfOrdItm2().getFilteredRows("DocId", docid);
        System.out.println("no of rows by filtered row=" + rows.length);
        Integer len = -1;
        if (rows.length > 0)
            len = rows.length - 1;
        //  System.out.println("No of rows by itr in item="+rsi.getAllRowsInRange().length);
        while (len >= 0) {
            Row r = rows[len];
            System.out.println("Item Row =" + r.getAttribute("ItmId"));
            if (r.equals(itmvo.getCurrentRow())) {
                System.out.println("current row");
            } else {
                System.out.println("Cancel?=" + r.getAttribute("CnclItm"));
                if (r.getAttribute("CnclItm") != null) {
                    if (r.getAttribute("CnclItm").toString().equals("N")) {
                        getMmTrfOrd1().getCurrentRow().setAttribute("TransCnclTrf", "N");
                        return false;
                    }
                }
            }
            len--;
        }
        getMmTrfOrd1().getCurrentRow().setAttribute("TransCnclTrf", "Y");
        return true;
    }

    public Boolean checkCancel() {
        String flg = "N";
        if (getMmTrfOrd1().getCurrentRow().getAttribute("TransCnclTrf") != null)
            flg = (String) getMmTrfOrd1().getCurrentRow().getAttribute("TransCnclTrf");
        if (flg.equals("Y"))
            return true;
        else
            return false;
    }

    public Integer checkAuthQty(String Auth) {
        Number AuthQty = new Number(0);
        try {
            AuthQty = new Number(Auth);
        } catch (SQLException e) {
            System.out.println("String to Number cast Exception");
        }
        System.out.println("Authorised quantity=" + Auth);
        if (getMmTrfOrdItm2().getCurrentRow().getAttribute("OrdQty") != null) {
            Number OrdQty = new Number(0);
            try {
                OrdQty = new Number(getMmTrfOrdItm2().getCurrentRow().getAttribute("OrdQty").toString());
            } catch (SQLException e) {
                System.out.println("String to Number cast Exception");
            }

            System.out.println("Order qty in auth=" + OrdQty);
            if (AuthQty.compareTo(OrdQty) > 0) {
                return 1;
            } else {
                return 0;
            }
        } else
            return 2;
    }

    public Integer checkResQty(String Res) {

        System.out.println("Auth qty in res validator=" + getMmTrfOrdItm2().getCurrentRow().getAttribute("AuthQty"));
        Number ResQty = new Number(0);
        try {
            ResQty = new Number(Res);
        } catch (SQLException e) {
            System.out.println("String to Number cast Exception");
        }
        System.out.println("Reserved Quantity=" + Res);
        if (getMmTrfOrdItm2().getCurrentRow().getAttribute("AuthQty") != null) {
            Number AuthQty = new Number(0);
            try {
                AuthQty = new Number(getMmTrfOrdItm2().getCurrentRow().getAttribute("AuthQty").toString());
            } catch (SQLException e) {
                System.out.println("String to Number cast Exception");
            }
            Number avlstk = new Number(0);
            ;
            try {
                //   avlstk = new Number(getMmTrfOrdItm2().getCurrentRow().getAttribute("TransAvlStk").toString());//TransAvlStkFm
                avlstk = new Number(getMmTrfOrdItm2().getCurrentRow().getAttribute("TransAvlStkFm").toString());
            } catch (SQLException e) {
                System.out.println("String to Number cast Exception");
            }
            System.out.println("auth qty in res chk=" + AuthQty);
            if (ResQty.compareTo(AuthQty) > 0 || ResQty.compareTo(avlstk) > 0) {
                return 1;
            } else {
                return 0;
            }
        } else
            return 2;

    }

    public void setTrfStat(Integer stat) {
        getMmTrfOrd1().getCurrentRow().setAttribute("TrfStat", stat);

    }

    /**
     * Container's getter for SearchTrf1.
     * @return SearchTrf1
     */
    public ViewObjectImpl getSearchTrf1() {
        return (ViewObjectImpl) findViewObject("SearchTrf1");
    }

    public void updtStkAftrCncl() {
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String txnId = (String) getMmTrfOrd1().getCurrentRow().getAttribute("DocId");
        Integer fyid = (Integer) getMmTrfOrd1().getCurrentRow().getAttribute("FyId");
        Integer trfType = (Integer) getMmTrfOrd1().getCurrentRow().getAttribute("TrfType");
        Integer type = 0;
        if (trfType == 373)
            type = 330; //int
        else
            type = 366; //ext
        Object obj1 = callStoredFunction(NUMBER, "MM_UPDT_STK_RESV_CNCL(?,?,?,?,?,?)", new Object[] {
                                         cldId, slocId, orgId, txnId, fyid, type
        });
        System.out.println("Cancelled =" + obj1);
    }

    public void ChangeinOrdQty(Number qty) {
        this.getMmTrfOrdItm2().getCurrentRow().setAttribute("AuthQty", qty);
        this.getMmTrfOrdItm2().getCurrentRow().setAttribute("PendQty", qty);
        Number orderbs = new Number(0);
        Number uomConv = new Number(0);
        if (this.getMmTrfOrdItm2().getCurrentRow().getAttribute("UomConvFctr") != null) {
            uomConv = (Number) this.getMmTrfOrdItm2().getCurrentRow().getAttribute("UomConvFctr");
        }
        if (qty != null && qty != new Number(0)) {
            orderbs = qty.multiply(uomConv);
            //    System.out.println("multiply result is "+orderbs+" current quantity is "+qty);
            this.getMmTrfOrdItm2().getCurrentRow().setAttribute("OrdQtyBs", orderbs);
        }
        //OrdQtyBs
        // this.getMmTrfOrdItm2().executeQuery();
        this.getMmTrfOrdItm2().getCurrentRow().setAttribute("StkResvQty", new Number(0));

    }

    public void ChangeinAuthQty() {
        this.getMmTrfOrdItm2().getCurrentRow().setAttribute("StkResvQty", new Number(0));
    }

    public void setSrcWhandDestOrgwh() {
        String wh = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhId");
        if (getMmTrfOrd1().getCurrentRow().getAttribute("OrgIdDest") != null &&
            (getMmTrfOrd1().getCurrentRow().getAttribute("OrgIdDest").toString().equals(getMmTrfOrd1().getCurrentRow().getAttribute("OrgId").toString()))) {
            getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdDest", null);
            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", null);
            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", wh);
        } else {
            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", wh);
            if (getMmTrfOrd1().getCurrentRow().getAttribute("WhIdDest") != null &&
                getMmTrfOrd1().getCurrentRow().getAttribute("WhIdDest").toString().equals(wh))
                getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", null);
        }
    }

    public void setDestWhandSrcOrgwh() {
        String org = (String) getMmTrfOrd1().getCurrentRow().getAttribute("OrgId");
        String wh = (String) getMmTrfOrd1().getCurrentRow().getAttribute("WhId");
        // adf_log.info("org id src is comparision is  " +
        //     getMmTrfOrd1().getCurrentRow().getAttribute("OrgIdSrc").toString().equals(org));
        if (getMmTrfOrd1().getCurrentRow().getAttribute("OrgIdSrc") != null &&
            getMmTrfOrd1().getCurrentRow().getAttribute("OrgIdSrc").toString().equals(org)) {
            adf_log.info("org id src is " + getMmTrfOrd1().getCurrentRow().getAttribute("OrgIdSrc"));
            getMmTrfOrd1().getCurrentRow().setAttribute("OrgIdSrc", null);
            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", null);
            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", wh);
        } else {
            //    adf_log.info("current warehouse  is "+getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc")+"   "+getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc").toString().equals(wh)+" "+wh);

            getMmTrfOrd1().getCurrentRow().setAttribute("WhIdDest", wh);

            if (getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc") != null &&
                getMmTrfOrd1().getCurrentRow().getAttribute("WhIdSrc").toString().equals(wh))
                getMmTrfOrd1().getCurrentRow().setAttribute("WhIdSrc", null);
        }
    }

    public void ExecuteItmVo() {
        this.getMmTrfOrdItm2().executeQuery();
    }

    public String chkUserAuth() {
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        Integer usrmod = Integer.parseInt(this.getMmTrfOrd1().getCurrentRow().getAttribute("UsrIdMod").toString());
        if (UsrId.equals(usrmod))
            return "Y";
        else
            return "N";
    }

    public String stockFilter() {
        ViewObjectImpl trfItm = this.getMmTrfOrdItm2();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        if (trfItm.getCurrentRow().getAttribute("ItmId") != null) {
            String itmId = trfItm.getCurrentRow().getAttribute("ItmId").toString();
            System.out.println("current ItmId is not null" + itmId);

            ViewObjectImpl stkVo = this.getStockDetail();
            stkVo.setNamedWhereClauseParam("Bindhoorgid", hoOrgId);
            stkVo.setNamedWhereClauseParam("Binditmid", itmId);
            stkVo.executeQuery();

        }
        return null;
    }

    /**
     * Container's getter for StockDetail.
     * @return StockDetail
     */
    public ViewObjectImpl getStockDetail() {
        return (ViewObjectImpl) findViewObject("StockDetail");
    }

    /**
     * Container's getter for orgResv.
     * @return orgResv
     */
    public ViewObjectImpl getorgResv() {
        return (ViewObjectImpl) findViewObject("orgResv");
    }

    /**
     * Container's getter for AppItmTune.
     * @return AppItmTune
     */
    public ViewObjectImpl getAppItmTune() {
        return (ViewObjectImpl) findViewObject("AppItmTune");
    }

    /**
     * Container's getter for ItemDescTune.
     * @return ItemDescTune
     */
    public ViewObjectImpl getItemDescTune() {
        return (ViewObjectImpl) findViewObject("ItemDescTune");
    }

    /**
     * Method to get suggested Item in AutoSuggest.
     * @param itmStr
     * @return
     */
    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        ArrayList<String> h = new ArrayList<String>();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl autoSuggestVO = this.getLOVAutoSuggestItemsVO1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", cld_id);
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", slocId);
        autoSuggestVO.setNamedWhereClauseParam("OrgIdbind", orgId);
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", hoOrg_id);
        autoSuggestVO.setNamedWhereClauseParam("ItmNmbind", itmStr);
        //  autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }

    /**
     * Container's getter for LOVAutoSuggestItemsVO1.
     * @return LOVAutoSuggestItemsVO1
     */
    public ViewObjectImpl getLOVAutoSuggestItemsVO1() {
        return (ViewObjectImpl) findViewObject("LOVAutoSuggestItemsVO1");
    }

    public void setDfltProjectId() {
        String glblPrjId = resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
        getMmTrfOrd1().getCurrentRow().setAttribute("PrjId", glblPrjId);
        getMmTrfOrd1().getCurrentRow().setAttribute("PrjIdDest", glblPrjId);
    }

    public String raiseTransferOrder() {
        //MM_INS_TRF_TO_PR
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Row currentRow = this.getMmTrfOrd1().getCurrentRow();
        if (currentRow != null) {
            System.out.println("----> para: " + cld_id + "\t" + slocId + "\t" + orgId + "\t" +
                               currentRow.getAttribute("DocId") + "\t" + currentRow.getAttribute("WhId") + "\t" +
                               currentRow.getAttribute("UsrIdCreate"));
            Object obj = callStoredFunction(Types.VARCHAR, "MM_INS_TRF_TO_PR(?,?,?,?,?,?)", new Object[] {
                                            cld_id, slocId, orgId, currentRow.getAttribute("DocId"),
                                            currentRow.getAttribute("WhId"), currentRow.getAttribute("UsrIdCreate")
            });
            System.out.println("return from fuction: " + obj);
            if (obj != null && (!obj.equals("N"))) {
                this.getDBTransaction().commit();
                trfOrdCriteria1(orgId, cld_id, slocId, currentRow.getAttribute("DocId").toString());
                //  Row row = this.getMmTrfOrd1().getCurrentRow();
                // this.getMmTrfOrd1().executeQuery();
                /*  if (row != null) {
                    MmTrfOrdVORowImpl r = (MmTrfOrdVORowImpl) row;
                    r.getTrfStatVO1().executeQuery();
                } */
                return obj.toString();
            }
            return obj.toString();
        }
        return "N";
    }

    //getting last user of wf
    public String getTopWFUsr() {
        Row currentRow = this.getMmTrfOrd1().getCurrentRow();
        Integer trType = (Integer) currentRow.getAttribute("TrfType");
        String docId = (String) currentRow.getAttribute("DocId");
        String retrn = "N";
        if (docId != null) {
            try {
                retrn = (String) (callStoredFunction(Types.VARCHAR, "app.WF_GET_USR_TOP_LVL (?,?,?,?,?,?)", new Object[] {
                                                     EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                     EbizParams.GLBL_APP_USR_ORG(), new Integer(18519), trType,
                                                     EbizParams.GLBL_APP_USR()
                }));
            } catch (JboSQLException e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        adf_log.info("-----return value from getting top usr-----" + docId + "  " + "---" + trType + "  " + retrn +
                     " UsrId " + EbizParams.GLBL_APP_USR() + " ");
        return retrn;
    }

    //check remark field is required or not.
    public String checkRemarksField() {
        MmTrfOrdVORowImpl currHead = (MmTrfOrdVORowImpl) this.getMmTrfOrd1().getCurrentRow();
        //        MmTrfOrdItmVORowImpl currItm = (MmTrfOrdItmVORowImpl) this.getMmTrfOrdItm2().getCurrentRow();
        RowQualifier rqhd = new RowQualifier(getMmTrfOrd1());
        rqhd.setWhereClause("OrgId ='" + currHead.getOrgId() + "' AND CldId ='" + currHead.getCldId() +
                            "' AND SlocId =" + currHead.getSlocId() + " AND DocId ='" + currHead.getDocId() +
                            "' AND TransCnclTrf = 'Y' and Remarks is null");
        Row[] rhd = getMmTrfOrd1().getFilteredRows(rqhd);

        adf_log.info("------checkRemarksField --------- header " + rhd.length + " " + rqhd.getExprStr() +
                     "  header rmark filds " + currHead.getRemarks());

        if (rhd.length > 0) {
            FacesMessage message = new FacesMessage("Remarks field required.");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
            return "H"; //header remark field required.
        }


        RowQualifier rqI = new RowQualifier(getMmTrfOrdItm2());
        rqI.setWhereClause("OrgId ='" + currHead.getOrgId() + "' AND CldId ='" + currHead.getCldId() +
                           "' AND SlocId =" + currHead.getSlocId() + " AND DocId ='" + currHead.getDocId() +
                           "' AND CnclItm = 'Y' and ItmRemarks is null");
        Row[] r = getMmTrfOrdItm2().getFilteredRows(rqI);
        adf_log.info("------checkRemarksField --------- itm " + r.length + " " + rqI.getExprStr());
        ArrayList ar = new ArrayList();
        if (r.length > 0) {
            for (Row rr : r) {
                ar.add(rr.getAttribute("TransItemDesc"));
            }
            StringBuilder str = new StringBuilder("<html><body>");
            str.append("<b>");
            str.append("Remarks field required for the following item");
            str.append("</b>");
            str.append("<ul>");
            for (Object obj : ar) {
                str.append("<b> <li>  " + obj + "  </li></b>");
            }
            str.append("</ul>");
            if (ar.size() > 0) {
                str.append("</body></html>");
                FacesMessage message = new FacesMessage(str.toString());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }
            return "I";
        }
        return "N";

    }

    public String viewWFData() {
        if (this.getMmTrfOrd1().getCurrentRow() != null) {
            // WF_GET_DOC_FLOW(P_SLOC_ID NUMBER , P_ORG_ID VARCHAR2 , P_CLD_ID VARCHAR2 , P_DOC_ID NUMBER , P_TXN_DOC_ID VARCHAR2)
            try {
                adf_log.info("Doc Id " + this.getMmTrfOrd1().getCurrentRow().getAttribute("DocId"));
                Object ob = callStoredFunction(Types.VARCHAR, "APP.WF_GET_DOC_FLOW(?,?,?,?,?)", new Object[] {
                                               this.getMmTrfOrd1().getCurrentRow().getAttribute("SlocId"),
                                               this.getMmTrfOrd1().getCurrentRow().getAttribute("OrgId"),
                                               this.getMmTrfOrd1().getCurrentRow().getAttribute("CldId"), 18519,
                                               this.getMmTrfOrd1().getCurrentRow().getAttribute("DocId")
                });
                adf_log.info("ob    " + ob);
                if (ob != null) {
                    return ob.toString();
                } else {
                    return "Document Not In WF";
                }
            } catch (Exception e) {
                e.printStackTrace();
                return "Document Not In WF";
            }


        } else {
            return "Document Not In WF";
        }
    }

    /**
     * Container's getter for LOVItmUom1.
     * @return LOVItmUom1
     */
    public ViewObjectImpl getLOVItmUom1() {
        return (ViewObjectImpl) findViewObject("LOVItmUom1");
    }

    /**
     * Container's getter for LovDispUomDesc1.
     * @return LovDispUomDesc1
     */
    public LovDispUomDescVOImpl getLovDispUomDesc1() {
        return (LovDispUomDescVOImpl) findViewObject("LovDispUomDesc1");
    }
}
