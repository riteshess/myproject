package mmDiscountApp.model.views;


import java.sql.ResultSet;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmDiscountApp.model.views.common.MmSchmVO;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 15 15:57:53 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmSchmVOImpl extends ViewObjectImpl implements MmSchmVO {
    /**
     * This is the default constructor (do not remove).
     */
    public MmSchmVOImpl() {
    }
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    String Orgid = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    public void deleteFromScheme(Integer SlocId,String OrgId,String SchemeId,String CldId){
        
       this.setWhereClause("SLOC_ID="+SlocId+" AND ORG_ID='"+OrgId+"' AND CLD_ID= '"+CldId+"' AND SCHM_ID='"+SchemeId+"'");
      this.setNamedWhereClauseParam("SlocIdBindVar", SlocId);
      this.setNamedWhereClauseParam("CldIdBindVar", CldId);
      this.setNamedWhereClauseParam("OrgIdBindVar", Orgid);
      this.setNamedWhereClauseParam("SchemeIdBindVar", SchemeId);  
        this.executeQuery();
        System.out.println("total no of rows in mmschm vo is=="+this.getEstimatedRowCount());
        RowSetIterator createRowSetIterator = this.createRowSetIterator(null);
      
        while (createRowSetIterator.hasNext()) {
           System.out.println("MMScheme");
            Row row = createRowSetIterator.next();
            row.remove();
           
        }
       
        this.setWhereClause(null);
        this.executeQuery();
    }


    /**
     * Returns the variable value for SlocIdBindVar.
     * @return variable value for SlocIdBindVar
     */
    public Integer getSlocIdBindVar() {
        return (Integer)ensureVariableManager().getVariableValue("SlocIdBindVar");
    }

    /**
     * Sets <code>value</code> for variable SlocIdBindVar.
     * @param value value to bind as SlocIdBindVar
     */
    public void setSlocIdBindVar(Integer value) {
        ensureVariableManager().setVariableValue("SlocIdBindVar", value);
        this.executeQuery();
    }

    /**
     * Returns the variable value for OrgIdBindVar.
     * @return variable value for OrgIdBindVar
     */
    public String getOrgIdBindVar() {
        return (String)ensureVariableManager().getVariableValue("OrgIdBindVar");
    }

    /**
     * Sets <code>value</code> for variable OrgIdBindVar.
     * @param value value to bind as OrgIdBindVar
     */
    public void setOrgIdBindVar(String value) {
        ensureVariableManager().setVariableValue("OrgIdBindVar", value);
        this.executeQuery();
    }

    /**
     * Returns the variable value for SchemeIdBindVar.
     * @return variable value for SchemeIdBindVar
     */
    public String getSchemeIdBindVar() {
        return (String)ensureVariableManager().getVariableValue("SchemeIdBindVar");
    }

    /**
     * Sets <code>value</code> for variable SchemeIdBindVar.
     * @param value value to bind as SchemeIdBindVar
     */
    public void setSchemeIdBindVar(String value) {
        ensureVariableManager().setVariableValue("SchemeIdBindVar", value);
        this.executeQuery();
    }
    
    
    public void setBindVar(String OrgId,String SchemeId,Integer SlocId,String CldId){
        this.setSlocIdBindVar(SlocId);
        this.setOrgIdBindVar(OrgId);
        this.setSchemeIdBindVar(SchemeId);
        this.setCldIdBindVar(CldId);
        this.executeQuery();
        
        
    }

    /**
     * Returns the variable value for CldIdBindVar.
     * @return variable value for CldIdBindVar
     */
    public String getCldIdBindVar() {
        return (String)ensureVariableManager().getVariableValue("CldIdBindVar");
    }

    /**
     * Sets <code>value</code> for variable CldIdBindVar.
     * @param value value to bind as CldIdBindVar
     */
    public void setCldIdBindVar(String value) {
        ensureVariableManager().setVariableValue("CldIdBindVar", value);
    }
   
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
}
