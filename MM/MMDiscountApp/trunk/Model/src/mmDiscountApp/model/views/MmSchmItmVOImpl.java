package mmDiscountApp.model.views;

import java.sql.ResultSet;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 15 16:31:05 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmSchmItmVOImpl extends ViewObjectImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public MmSchmItmVOImpl() {
    }
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    String Orgid = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

    public void deleteFromScheme_Itm (Integer SlocId,String OrgId,String SchemeId,String CldId){
        
        this.setWhereClause("SLOC_ID="+SlocId+" AND ORG_ID='"+OrgId+"' AND SCHM_ID='"+SchemeId+"' AND CLD_ID=' "+CldId+"'");
       /*  this.setNamedWhereClauseParam("CldIdBindVar", CldId);
       this.setNamedWhereClauseParam("SlocIdBindVar", SlocId);
       this.setNamedWhereClauseParam("orgBindVar", Orgid); */
        this.executeQuery(); 
       System.out.println("getEstimatedRowCount ia==="+this.getEstimatedRowCount());
        
        RowSetIterator createRowSetIterator = this.createRowSetIterator(null);
       
        while (createRowSetIterator.hasNext()) {
           System.out.println("MMSchemeItem");
            Row row = createRowSetIterator.next();
            row.remove();
            
        }

        this.setWhereClause(null);
        this.executeQuery();
    }
   


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
}
