package mmDiscountApp.model.service;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmDiscountApp.model.service.common.MMDiscountAppAM;
import mmDiscountApp.model.views.MMSchemeNewVOImpl;
import mmDiscountApp.model.views.MMSchemeSearchViewVOImpl;

import mmDiscountApp.model.views.MmSchmFreeItmVOImpl;
import mmDiscountApp.model.views.MmSchmItmVOImpl;
import mmDiscountApp.model.views.MmSchmVOImpl;

import mmDiscountApp.model.views.SchemeTypeLOVImpl;
import mmDiscountApp.model.views.SelectAllVOImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 15 11:50:06 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMDiscountAppAMImpl extends ApplicationModuleImpl implements MMDiscountAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MMDiscountAppAMImpl() {
    }
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    String Orgid = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

    /**
     * Container's getter for MMSchemeSearchView.
     * @return MMSchemeSearchView
     */
    public MMSchemeSearchViewVOImpl getMMSchemeSearchView() {
        return (MMSchemeSearchViewVOImpl)findViewObject("MMSchemeSearchView");
    }

    /**
     * Container's getter for MmSchm.
     * @return MmSchm
     */
    public MmSchmVOImpl getMmSchm() {
        return (MmSchmVOImpl)findViewObject("MmSchm");
    }

    /**
     * Container's getter for SelectAll1.
     * @return SelectAll1
     */
    public ViewObjectImpl getSelectAll1() {
        return (ViewObjectImpl)findViewObject("SelectAll1");
    }

    /**
     * Container's getter for MmSchmFreeItm.
     * @return MmSchmFreeItm
     */
    public MmSchmFreeItmVOImpl getMmSchmFreeItm() {
        return (MmSchmFreeItmVOImpl)findViewObject("MmSchmFreeItm");
    }

    /**
     * Container's getter for MmSchmItm.
     * @return MmSchmItm
     */
    public MmSchmItmVOImpl getMmSchmItm() {
        return (MmSchmItmVOImpl)findViewObject("MmSchmItm");
    }

    /**
     * Container's getter for MmSchmFreeItm1.
     * @return MmSchmFreeItm1
     */
    public MmSchmFreeItmVOImpl getMmSchmFreeItm1() {
        return (MmSchmFreeItmVOImpl)findViewObject("MmSchmFreeItm1");
    }

    /**
     * Container's getter for MMSchemeToMMSchemeFreeItemVL1.
     * @return MMSchemeToMMSchemeFreeItemVL1
     */
    public ViewLinkImpl getMMSchemeToMMSchemeFreeItemVL1() {
        return (ViewLinkImpl)findViewLink("MMSchemeToMMSchemeFreeItemVL1");
    }

    /**
     * Container's getter for MmSchmItm1.
     * @return MmSchmItm1
     */
    public MmSchmItmVOImpl getMmSchmItm1() {
        return (MmSchmItmVOImpl)findViewObject("MmSchmItm1");
    }

    /**
     * Container's getter for MMSchemeToMMSchemeItemVL1.
     * @return MMSchemeToMMSchemeItemVL1
     */
    public ViewLinkImpl getMMSchemeToMMSchemeItemVL1() {
        return (ViewLinkImpl)findViewLink("MMSchemeToMMSchemeItemVL1");
    }

    /**
     * Container's getter for SchemeTypeLOV.
     * @return SchemeTypeLOV
     */
    public ViewObjectImpl getSchemeTypeLOV() {
        return (ViewObjectImpl)findViewObject("SchemeTypeLOV");
    }

    /**
     * Container's getter for MMSchemeNew.
     * @return MMSchemeNew
     */
    public ViewObjectImpl getMMSchemeNew() {
        return (ViewObjectImpl)findViewObject("MMSchemeNew");
    }

    public void setbindval() {        
          ViewObjectImpl schmvo = this.getMmSchm();
        schmvo.setNamedWhereClauseParam("SlocIdBindVar", SlocId);
        schmvo.setNamedWhereClauseParam("CldIdBindVar", CldId);
        schmvo.setNamedWhereClauseParam("OrgIdBindVar", Orgid);
        schmvo.executeQuery();
        
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    public void chkdeletecondition() {
        ViewObjectImpl SchmItm1vo = getMmSchmItm1();
        ViewObjectImpl SchmFreeItm1 = getMmSchmFreeItm1();

        RowSetIterator itr = SchmFreeItm1.createRowSetIterator(null);
        RowSetIterator itr1 = SchmItm1vo.createRowSetIterator(null);
        while (itr1.hasNext()) {
            Row rw = itr1.next();
            rw.remove();
        }
        while (itr.hasNext()) {
            Row rw = itr.next();
            rw.remove();
        }
    }
}
