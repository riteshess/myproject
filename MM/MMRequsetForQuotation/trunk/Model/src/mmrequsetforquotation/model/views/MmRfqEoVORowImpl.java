package mmrequsetforquotation.model.views;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmrequsetforquotation.model.entities.MmRfqEoEOImpl;

import mmrequsetforquotation.model.services.mmRfqAMImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 03 17:41:52 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmRfqEoVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMRFQEOEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CurrConvFctr {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getCurrConvFctr();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setCurrConvFctr((Number) value);
            }
        }
        ,
        CurrIdSp {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getCurrIdSp();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setCurrIdSp((Integer) value);
            }
        }
        ,
        DocId {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        }
        ,
        EntityId {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getEntityId();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setEntityId((Integer) value);
            }
        }
        ,
        EoId {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getEoId();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setEoId((Integer) value);
            }
        }
        ,
        OrgId {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setUsrIdCreate((Integer) value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setUsrIdMod((Integer) value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        RfqAmtBase {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getRfqAmtBase();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setRfqAmtBase((Number) value);
            }
        }
        ,
        RfqAmtSp {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getRfqAmtSp();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setRfqAmtSp((Number) value);
            }
        }
        ,
        CldId {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        EoType {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getEoType();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setEoType((Integer) value);
            }
        }
        ,
        Lastorder {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getLastorder();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        Score {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getScore();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setScore((String) value);
            }
        }
        ,
        TransEoNm {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getTransEoNm();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setTransEoNm((String) value);
            }
        }
        ,
        TransEoType {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getTransEoType();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setTransEoType((Integer) value);
            }
        }
        ,
        TransAddSuspectEo {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getTransAddSuspectEo();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setTransAddSuspectEo((String) value);
            }
        }
        ,
        TransHoOrgId {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getTransHoOrgId();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setTransHoOrgId((String) value);
            }
        }
        ,
        supplierLOV1 {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getsupplierLOV1();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovSupplierTypeVO {
            public Object get(MmRfqEoVORowImpl obj) {
                return obj.getLovSupplierTypeVO();
            }

            public void put(MmRfqEoVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static int firstIndex = 0;

        public abstract Object get(MmRfqEoVORowImpl object);

        public abstract void put(MmRfqEoVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ENTITYID = AttributesEnum.EntityId.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int RFQAMTBASE = AttributesEnum.RfqAmtBase.index();
    public static final int RFQAMTSP = AttributesEnum.RfqAmtSp.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int EOTYPE = AttributesEnum.EoType.index();
    public static final int LASTORDER = AttributesEnum.Lastorder.index();
    public static final int SCORE = AttributesEnum.Score.index();
    public static final int TRANSEONM = AttributesEnum.TransEoNm.index();
    public static final int TRANSEOTYPE = AttributesEnum.TransEoType.index();
    public static final int TRANSADDSUSPECTEO = AttributesEnum.TransAddSuspectEo.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int SUPPLIERLOV1 = AttributesEnum.supplierLOV1.index();
    public static final int LOVSUPPLIERTYPEVO = AttributesEnum.LovSupplierTypeVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmRfqEoVORowImpl() {
    }

    /**
     * Gets MmRfqEoEO entity object.
     * @return the MmRfqEoEO
     */
    public MmRfqEoEOImpl getMmRfqEoEO() {
        return (MmRfqEoEOImpl)getEntity(ENTITY_MMRFQEOEO);
    }

    /**
     * Gets the attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @return the CURR_CONV_FCTR
     */
    public Number getCurrConvFctr() {
        return (Number)getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @param value value to set the CURR_CONV_FCTR
     */
    public void setCurrConvFctr(Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }

    /**
     * Gets the attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @return the CURR_ID_SP
     */
    public Integer getCurrIdSp() {
        return (Integer)getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @param value value to set the CURR_ID_SP
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String)getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for ENTITY_ID using the alias name EntityId.
     * @return the ENTITY_ID
     */
    public Integer getEntityId() {
        return (Integer)getAttributeInternal(ENTITYID);
    }

    /**
     * Sets <code>value</code> as attribute value for ENTITY_ID using the alias name EntityId.
     * @param value value to set the ENTITY_ID
     */
    public void setEntityId(Integer value) {
        setAttributeInternal(ENTITYID, value);
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);

    }

    /**
     * Gets the attribute value for EO_ID using the alias name EoId.
     * @return the EO_ID
     */
    public Integer getEoId() {         
                return (Integer)getAttributeInternal(EOID);
       
    }

    /**
     * Sets <code>value</code> as attribute value for EO_ID using the alias name EoId.
     * @param value value to set the EO_ID
     */
    public void setEoId(Integer value) {
        System.out.println("Setting EO id is "+value);
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }


    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }


    /**
     * Gets the attribute value for RFQ_AMT_BASE using the alias name RfqAmtBase.
     * @return the RFQ_AMT_BASE
     */
    public Number getRfqAmtBase() {
        return (Number)getAttributeInternal(RFQAMTBASE);
    }

    /**
     * Sets <code>value</code> as attribute value for RFQ_AMT_BASE using the alias name RfqAmtBase.
     * @param value value to set the RFQ_AMT_BASE
     */
    public void setRfqAmtBase(Number value) {
        setAttributeInternal(RFQAMTBASE, value);
    }

    /**
     * Gets the attribute value for RFQ_AMT_SP using the alias name RfqAmtSp.
     * @return the RFQ_AMT_SP
     */
    public Number getRfqAmtSp() {
        return (Number)getAttributeInternal(RFQAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for RFQ_AMT_SP using the alias name RfqAmtSp.
     * @param value value to set the RFQ_AMT_SP
     */
    public void setRfqAmtSp(Number value) {
        setAttributeInternal(RFQAMTSP, value);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for EO_TYPE using the alias name EoType.
     * @return the EO_TYPE
     */
    public Integer getEoType() {

        return (Integer)getAttributeInternal(EOTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for EO_TYPE using the alias name EoType.
     * @param value value to set the EO_TYPE
     */
    public void setEoType(Integer value) {
        setAttributeInternal(EOTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Lastorder.
     * @return the Lastorder
     */
    public String getLastorder() {
        return (String)getAttributeInternal(LASTORDER);
    }


    /**
     * Gets the attribute value for the calculated attribute Score.
     * @return the Score
     */
    public String getScore() {
        
        if(!(this.getEoId() == null||this.getEoId().toString().length()==0) ){
           Object o= this.callStoredFunction(Types.NUMERIC, "PKG_MM_EVAL.GET_SCORE_EO(?,?,?,?)", new Object[]{this.getSlocId(),this.getCldId(),this.getOrgId(),this.getEoId()});
               if(o==null){
                   return "NA";
               }else{
                   return o.toString()+"/100";
               }
        }else{
            return "0/100";
        }
        
    }


    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Score.
     * @param value value to set the  Score
     */
    public void setScore(String value) {
        setAttributeInternal(SCORE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEoNm.
     * @return the TransEoNm
     */
    public String getTransEoNm() {
        return (String)getAttributeInternal(TRANSEONM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEoNm.
     * @param value value to set the  TransEoNm
     */
    public void setTransEoNm(String value) {
        setAttributeInternal(TRANSEONM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEoType.
     * @return the TransEoType
     */
    public Integer getTransEoType() {
        return (Integer)getAttributeInternal(TRANSEOTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEoType.
     * @param value value to set the  TransEoType
     */
    public void setTransEoType(Integer value) {
        setAttributeInternal(TRANSEOTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAddSuspectEo.
     * @return the TransAddSuspectEo
     */
    public String getTransAddSuspectEo() {
        return (String)getAttributeInternal(TRANSADDSUSPECTEO);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAddSuspectEo.
     * @param value value to set the  TransAddSuspectEo
     */
    public void setTransAddSuspectEo(String value) {
        setAttributeInternal(TRANSADDSUSPECTEO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        //  return (String) getAttributeInternal(TRANSHOORGID);
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> supplierLOV1.
     */
    public RowSet getsupplierLOV1() {
        return (RowSet)getAttributeInternal(SUPPLIERLOV1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSupplierTypeVO.
     */
    public RowSet getLovSupplierTypeVO() {
        return (RowSet)getAttributeInternal(LOVSUPPLIERTYPEVO);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
           mmRfqAMImpl am = (mmRfqAMImpl)resolvElDC("mmRfqAMDataControl");
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);

                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    
}
