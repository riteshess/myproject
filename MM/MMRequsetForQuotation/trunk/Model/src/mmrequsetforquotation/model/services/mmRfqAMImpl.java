package mmrequsetforquotation.model.services;


import adf.utils.model.ADFModelUtils;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

import java.util.Map;
import java.util.Properties;

import java.util.Set;

import javax.activation.DataHandler;
import javax.activation.DataSource;

import javax.activation.FileDataSource;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import javax.mail.BodyPart;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;

import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;

import javax.mail.internet.MimeMultipart;

import javax.servlet.ServletException;

import mailservice.MailFactory;

import mailservice.MailService;

import mmrequsetforquotation.model.services.common.mmRfqAM;
import mmrequsetforquotation.model.views.LovPRDocNoVOImpl;
import mmrequsetforquotation.model.views.MmRfqEoVORowImpl;
import mmrequsetforquotation.model.views.MmRfqFlxVOImpl;
import mmrequsetforquotation.model.views.MmRfqFlxVORowImpl;
import mmrequsetforquotation.model.views.MmRfqItmVOImpl;

import mmrequsetforquotation.model.views.MmRfqTncVOImpl;

//import mmrequsetforquotation.view.bean.RfqBean;

import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JRExporter;
import net.sf.jasperreports.engine.JRExporterParameter;
import net.sf.jasperreports.engine.JRResultSetDataSource;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.engine.JasperRunManager;
import net.sf.jasperreports.engine.design.JasperDesign;

import net.sf.jasperreports.engine.export.JRPdfExporter;
import net.sf.jasperreports.engine.util.JRLoader;
import net.sf.jasperreports.engine.xml.JRXmlLoader;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 20 12:01:38 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class mmRfqAMImpl extends ApplicationModuleImpl implements mmRfqAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger adfLog = ADFLogger.createADFLogger(mmRfqAMImpl.class);

    public mmRfqAMImpl() {
    }

    /**
     * Container's getter for MmRfq1.
     * @return MmRfq1
     */
    public ViewObjectImpl getMmRfq1() {
        return (ViewObjectImpl) findViewObject("MmRfq1");
    }

    /**
     * Container's getter for MmRfqEo1.
     * @return MmRfqEo1
     */
    public ViewObjectImpl getMmRfqEo1() {
        return (ViewObjectImpl) findViewObject("MmRfqEo1");
    }

    /**
     * Container's getter for MmRfqItm1.
     * @return MmRfqItm1
     */
    public MmRfqItmVOImpl getMmRfqItm1() {
        return (MmRfqItmVOImpl) findViewObject("MmRfqItm1");
    }

    /**
     * Container's getter for FkMmRfqEoDocidVL1.
     * @return FkMmRfqEoDocidVL1
     */
    public ViewLinkImpl getFkMmRfqEoDocidVL1() {
        return (ViewLinkImpl) findViewLink("FkMmRfqEoDocidVL1");
    }

    /**
     * Container's getter for FkMmRfqItmDocidVL1.
     * @return FkMmRfqItmDocidVL1
     */
    public ViewLinkImpl getFkMmRfqItmDocidVL1() {
        return (ViewLinkImpl) findViewLink("FkMmRfqItmDocidVL1");
    }


    /**
     * Container's getter for MmRfqTnc1.
     * @return MmRfqTnc1
     */
    public ViewObjectImpl getMmRfqTnc1() {
        return (ViewObjectImpl) findViewObject("MmRfqTnc1");
    }

    /**
     * Container's getter for RfqTORfqTncVL1.
     * @return RfqTORfqTncVL1
     */
    public ViewLinkImpl getRfqTORfqTncVL1() {
        return (ViewLinkImpl) findViewLink("RfqTORfqTncVL1");
    }

    /**
     * Container's getter for ItemLOV1.
     * @return ItemLOV1
     */
    public ViewObjectImpl getItemLOV1() {
        return (ViewObjectImpl) findViewObject("ItemLOV1");
    }

    /**
     * Container's getter for LovAddsId1.
     * @return LovAddsId1
     */
    public ViewObjectImpl getLovAddsId1() {
        return (ViewObjectImpl) findViewObject("LovAddsId1");
    }

    /**
     * Container's getter for uomLOV1.
     * @return uomLOV1
     */
    public ViewObjectImpl getuomLOV1() {
        return (ViewObjectImpl) findViewObject("uomLOV1");
    }


    /**
     * Container's getter for MMPendOrdVw1.
     * @return MMPendOrdVw1
     */
    public ViewObjectImpl getMMPendOrdVw1() {
        return (ViewObjectImpl) findViewObject("MMPendOrdVw1");
    }

    /**
     * Container's getter for RfqItmTOPendVwVL1.
     * @return RfqItmTOPendVwVL1
     */
    public ViewLinkImpl getRfqItmTOPendVwVL1() {
        return (ViewLinkImpl) findViewLink("RfqItmTOPendVwVL1");
    }

    /**
     * Container's getter for supplierLOV.
     * @return supplierLOV
     */
    public ViewObjectImpl getsupplierLOV() {
        return (ViewObjectImpl) findViewObject("supplierLOV");
    }

    public void setBindVar(String OrgId, String HoOrgId, String Cldid, Integer SlocId) {
        /*  getMmRfq1().setWhereClause("SLOC_ID="+SlocId+" and ORG_ID= '"+OrgId+"' and CLD_ID= '"+Cldid+"'");
        getMmRfq1().executeQuery();*/
        String CldId = "0";
        Integer SlocId1 = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String OrgId1 = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl vo = this.getMmRfq1();
        ViewCriteria vc = vo.getViewCriteria("MmRfqVOCriteria1");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("OrgIdBind", OrgId1);
        vo.setNamedWhereClauseParam("CldIdBind", CldId);
        vo.setNamedWhereClauseParam("SlocIdBind", SlocId1);
        vo.executeQuery();


        System.out.println("SlocId1  " + SlocId1 + " Cldid " + Cldid + "   HoOrgId" + HoOrgId);

        ViewObjectImpl vo1 = this.getsupplierLOV();
        vo1.setNamedWhereClauseParam("SlocIdBind", SlocId1);
        vo1.setNamedWhereClauseParam("CldIdBind", Cldid);
        vo1.setNamedWhereClauseParam("HoOrgIdBind", HoOrgId);
        vo1.executeQuery();

        System.out.println("count      " + vo1.getRowCount());


        ViewObjectImpl vo2 = this.getTncLOV();
        vo2.setNamedWhereClauseParam("bindSlocId", SlocId1);
        vo2.setNamedWhereClauseParam("bindCldId", Cldid);
        vo2.setNamedWhereClauseParam("bindOrgId", OrgId);
        vo2.executeQuery();


    }

    public String rfqCriteriaView(String CldId, Integer SlocId, String OrgId, String DocId) {
        ViewObjectImpl vo = this.getMmRfq1();
        ViewCriteria vc = vo.getViewCriteria("MmRfqVOCriteria2");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdBind", CldId);
        vo.setNamedWhereClauseParam("SlocIdBind", SlocId);
        vo.setNamedWhereClauseParam("OrgIdBind", OrgId);
        vo.setNamedWhereClauseParam("docIdBind", DocId);
        vo.executeQuery();
        return "";
    }

    public String rfqresetvalue() {
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl vo = this.getMmRfq1();
        ViewCriteria vc = vo.getViewCriteria("MmRfqVOCriteria2");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdBind", null);
        vo.setNamedWhereClauseParam("SlocIdBind", null);
        vo.setNamedWhereClauseParam("OrgIdBind", OrgId);
        vo.setNamedWhereClauseParam("docIdBind", null);
        vo.executeQuery();

        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer SlocId1 = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String OrgId1 = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewCriteria vc1 = vo.getViewCriteria("MmRfqVOCriteria1");
        vo.applyViewCriteria(vc1);
        vo.setNamedWhereClauseParam("OrgIdBind", OrgId1);
        vo.setNamedWhereClauseParam("CldIdBind", CldId);
        vo.setNamedWhereClauseParam("SlocIdBind", SlocId1);
        vo.executeQuery();
        return "";
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    public Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            mmRfqAMImpl am = (mmRfqAMImpl) resolvElDC("mmRfqAMDataControl");
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);

                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }


    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;

    public Integer pendingRfqCheck(Integer SlocId, String CldId, String OrgId, Integer RfqDocNo) {
        Row currPO = this.getMmRfq1().getCurrentRow();
        String docIdTxn = currPO.getAttribute("DocId").toString();
        Integer rfqType = (Integer) currPO.getAttribute("RfqSrcType");
        //   System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, RfqDocNo, docIdTxn, rfqType
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        /*   Integer.parseInt(callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                   CldId,
                                                                                                                   OrgId,
                                                                                                                   PoDocNo,
                                                                                                                   docIdTxn }).toString()); */
        // System.out.println("User id pending in impl--"+usrId);
        return usrId;

    }

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {
        Integer rfqType = (Integer) this.getMmRfq1().getCurrentRow().getAttribute("RfqSrcType");
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            sloc_id, cld_id, org_id, doc_no, rfqType
            });
            //  System.out.println("WFNO in AMimpl:"+obj.toString());
            return obj.toString();
        } catch (Exception e) {
            //System.out.println("GETWFNO--"+e);
            return "0";
        }

    }

    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum,
                             String RfqDocId) {
        Integer rfqType = (Integer) this.getMmRfq1().getCurrentRow().getAttribute("RfqSrcType");
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, RfqDocId, rfqType
    }).toString());


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer RFQ_DOC_NO, String WfNum,
                              String rfqDocId, Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm,
                              String action, String remark, Number amount) {
        Integer rfqType = (Integer) this.getMmRfq1().getCurrentRow().getAttribute("RfqSrcType");
        //System.out.println("sloc_id "+sloc_id+"cld_id   "+cld_id+"pOrgId   "+pOrgId+"PO_DOC_NO   "+RFQ_DOC_NO+"WfNum "+WfNum+"poDocId "+rfqDocId+"usr_idFrm  "+usr_idFrm+"usr_idTo   "+usr_idTo+"levelFrm "+levelFrm+"levelTo  "+levelTo+"action  "+action+"remark  "+remark+"amount"+amount);
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, RFQ_DOC_NO, rfqType, WfNum, rfqDocId,
                                                   usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark, amount
    }).toString());

    }

    public void updateRfqStatus() {
        ViewObjectImpl rfqVo = getMmRfq1();
        Row currRfq = this.getMmRfq1().getCurrentRow();
        String docId = currRfq.getAttribute("DocId").toString();
        Integer usrcreate = Integer.parseInt(currRfq.getAttribute("UsrIdCreate").toString());

        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String retVal = resolvEl("#{pageFlowScope.WF_RET_VALUE}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer usr = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        // Integer userId = Integer.parseInt(drftpoRw.getAttribute("UsrIdCreate").toString());
        //  System.out.println("evalId   "+docId+"slocId   "+slocId+"cld_id   "+cld_id+"orgId   "+orgId);
        RowQualifier rq = new RowQualifier(rfqVo);
        rq.setWhereClause("DocId ='" + docId + "' and SlocId = " + slocId + " and CldId = '" + cld_id +
                          "' and OrgId = '" + orgId + "'");
        // System.out.println("query   : "+rq.getExprStr());
        Row[] rows = rfqVo.getFilteredRows(rq);
        // System.out.println("row lenth      "+rows.length);
        //  System.out.println("retvale    "+retVal);
        if (rows.length > 0) {
            System.out.println("status of rfq revert or reject" + retVal);
            for (Row r : rows) {
                if ("V".equals(retVal)) {
                    Integer pendinguser = pendingRfqCheck(slocId, cld_id, orgId, 18502);
                    System.out.println("pendinguser       " + pendinguser + " usrcreate  " + usrcreate + "         " +
                                       docId);
                    if (pendinguser != null) {
                        System.out.println("pendinguser.compareTo(usrcreate)             " +
                                           pendinguser.compareTo(usrcreate));

                        if (pendinguser.compareTo(usrcreate) == 0) {
                            System.out.println("pendinguser    inside if after compare   " + pendinguser +
                                               " usrcreate  " + usrcreate);

                            r.setAttribute("RfqStatus", 151);
                        }
                    }

                }
                if ("R".equals(retVal)) {
                    r.setAttribute("RfqStatus", 151);
                }
                if ("A".equals(retVal)) {
                    r.setAttribute("RfqStatus", 240);
                } else if ("F".equals(retVal)) {
                    r.setAttribute("RfqStatus", 203);
                }

            }
        }
        rq.setWhereClause(null);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }


    private HashMap<String, String> getConfig(String stmt) throws Exception {
        try {

            HashMap<String, String> map = new HashMap<>();
            CallableStatement stForSet = this.getDBTransaction().createCallableStatement("begin  " + stmt + ";end;", 0);
            stForSet.setObject(1, null);

            stForSet.registerOutParameter(2, Types.VARCHAR);
            stForSet.registerOutParameter(3, Types.VARCHAR);
            stForSet.registerOutParameter(4, Types.VARCHAR);
            stForSet.registerOutParameter(5, Types.VARCHAR);
            stForSet.registerOutParameter(6, Types.VARCHAR);
            stForSet.execute();
            map.put("Domain", stForSet.getString(2));
            map.put("Port", stForSet.getString(3));
            map.put("Security", stForSet.getString(4));
            map.put("From", stForSet.getString(5));
            map.put("Password", stForSet.getString(6));
            return map;
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e.getMessage());
        }
    }


    public void sendAction() {
        ViewObjectImpl vo = this.getMmRfq1();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");

        String sender = null;
        ArrayList<String> reciptants = new ArrayList<String>();
        Row currPO = this.getMmRfq1().getCurrentRow();
        String docIdTxn = currPO.getAttribute("DocId").toString();


        ViewObjectImpl usrvo = this.getUser1();
        RowQualifier rq = new RowQualifier(usrvo);
        rq.setWhereClause("SlocId = " + slocId + " AND UsrId = " + usr_id +
                          " AND UsrMailIdDef = 'Y' AND UsrMailIdActv = 'Y'");
        Row rows[] = usrvo.getFilteredRows(rq);


        if (rows != null && rows.length == 1) {
            sender = (String) rows[0].getAttribute("UsrMailId");
        }


        ViewObjectImpl rfqEoVo = this.getMmRfqEo1();
        RowQualifier rq2 = new RowQualifier(rfqEoVo);
        rq2.setWhereClause("SlocId = " + slocId + " AND OrgId = '" + orgId + "' AND CldId = '" + cld_id +
                           "' AND DocId = '" + docIdTxn + "'");
        Row eo_Id_rows[] = rfqEoVo.getFilteredRows(rq2);


        if (eo_Id_rows != null && eo_Id_rows.length > 0) {
            for (Row row : eo_Id_rows) {
                ViewObjectImpl eoMailVo = this.getEoMail1();
                Integer eoId = (Integer) row.getAttribute("EoId");

                RowQualifier rq1 = new RowQualifier(eoMailVo);
                rq1.setWhereClause("EoSlocId = " + slocId + " AND EoOrgId = '" + orgId + "' AND EoHoOrgId = '" +
                                   hoOrg_id + "' AND EoCldId = '" + cld_id + "' AND EoActv = 'Y' AND EoId = " + eoId +
                                   "");
                Row eo_mail_rows[] = eoMailVo.getFilteredRows(rq1);


                for (Row email : eo_mail_rows) {
                    reciptants.add((String) email.getAttribute("EoEmailId"));
                }
            }

        }
        String rfqId = currPO.getAttribute("RfqId").toString();

        try {
            File file = generateReport(rfqId);


            HashMap<String, String> config = this.getConfig("app.PR_ALRT_GET_MAIL_CFG (?,?,?,?,?,?)");
            MailFactory fc = new MailFactory();

            fc.setAsSender();

            MailService ms = fc.getMailService(config.get("Domain"), config.get("Port"), config.get("Security"));

            ms.setSender(config.get("From"));
            ms.setReciever(Arrays.copyOf(reciptants.toArray(), reciptants.toArray().length, String[].class));
            ms.setSubject("RFQ");

            ms.addLine("RFQ has been approved");
            ms.addFile(file);

            ms.send(config.get("From"), config.get("Password"));
            file.delete();
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }


    }


    public void sendMail(String sender, Set<String> recipents, String rfqNo) {

        Row currPO = this.getMmRfq1().getCurrentRow();
        Object fyId = currPO.getAttribute("FyId");

        final String MAIL_SERVER = "smtp.gmail.com";
        final String USERNAME = sender;
        final String PASSWORD = "ess12345";
        try {
            //String subject =ADFModelUtils.resolvRsrc("{bundle['LBL.828']}");
            String subject = ADFModelUtils.resolvRsrc("LBL.828");
            //            String subject = "Request For Quotation";
            //            String message =ADFModelUtils.resolvRsrc("{bundle['LBL.4901']}");
            String message = ADFModelUtils.resolvRsrc("LBL.4901");
            //            String message = "This is test mail from ess india, kindly do not reply.";
            Properties properties = System.getProperties();
            properties.put("mail.smtps.host", MAIL_SERVER);
            properties.put("mail.smtps.auth", "true");

            Session session = Session.getInstance(properties);
            MimeMessage msg = new MimeMessage(session);
            msg.setFrom(new InternetAddress(USERNAME));

            for (String reciptent : recipents) {
                msg.addRecipients(Message.RecipientType.TO, reciptent);
            }

            msg.setSubject(subject);
            msg.setText(message);

            Transport tr = session.getTransport("smtps");
            tr.connect(MAIL_SERVER, USERNAME, PASSWORD);

            Multipart multipart = new MimeMultipart();
            BodyPart part1 = new MimeBodyPart();
            part1.setText(message);

            BodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart = new MimeBodyPart();
            String path = "D:\\send\\";
            String filename = rfqNo + "_" + fyId + ".pdf";
            DataSource source = new FileDataSource(path + filename);
            messageBodyPart.setDataHandler(new DataHandler(source));
            messageBodyPart.setFileName(filename);
            multipart.addBodyPart(messageBodyPart);
            multipart.addBodyPart(part1);


            msg.setContent(multipart);
            tr.sendMessage(msg, msg.getAllRecipients());
            tr.close();


        } catch (AddressException ex) {
            System.out.println(ex.getMessage());
        } catch (MessagingException ex) {
            System.out.println(ex.getMessage());
        }

    }

    /**
     * Container's getter for User1.
     * @return User1
     */
    public ViewObjectImpl getUser1() {
        return (ViewObjectImpl) findViewObject("User1");
    }

    /**
     * Container's getter for EoMail1.
     * @return EoMail1
     */
    public ViewObjectImpl getEoMail1() {
        return (ViewObjectImpl) findViewObject("EoMail1");
    }


    public boolean isRFQApproved() {

        Row currPO = this.getMmRfq1().getCurrentRow();
        Integer status = (Integer) currPO.getAttribute("RfqStatus");
        if (status == 240) {
            return true;
        }
        return false;
    }


    public void callReport() {
        Row currPO = this.getMmRfq1().getCurrentRow();
        String rfqId = currPO.getAttribute("RfqId").toString();
        //generateReport(rfqId);
    }

    public void callRfqReport() {
        Row currRfq = this.getMmRfq1().getCurrentRow();
        String rfqId = currRfq.getAttribute("RfqId").toString();
        String filePath = "D:\\send\\";
        //   System.out.println("rfqId---"+rfqId+"    path------"+filePath);
        generateReport(rfqId);
    }

    public File generateReport(String rfqNo) {
        File pdfFile = null;
        try {
            Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            Row currPO = this.getMmRfq1().getCurrentRow();
            String docIdTxn = currPO.getAttribute("DocId").toString();
            Object fyId = currPO.getAttribute("FyId");

            String rstfqNo = rfqNo;
            PreparedStatement st = null;
            //st = this.getDBTransaction().createPreparedStatement("select 1 from dual", 0);
            Connection conn = null;

            PreparedStatement ps =
                this.getDBTransaction().createPreparedStatement("select distinct srvr_Loc_As_Rpt_Path from APP.App$Servr$Loc",
                                                                0);

            ResultSet rs = ps.executeQuery();
            String path = null;
            String path1 = null;

            while (rs.next()) {

                path = rs.getString(1);
                path1 = path;
                path = path + "MM/";
                System.out.println("New Path is :" + path);
            }


            Map<String, Object> parameters = new HashMap<String, Object>();
            parameters.put("rfqNo", rstfqNo);
            parameters.put("orgId", orgId);
            parameters.put("cldId", cld_id);
            parameters.put("slocId", slocId);
            parameters.put("fyId", (Integer) fyId);
            parameters.put("Path", path1);
            //                                  JasperPrint jasperPrint=null;
            //                                  jasperPrint = JasperFillManager.fillReport(report, parameters, conn);

            JasperReport report = (JasperReport) JRLoader.loadObject(path + "RFQEmail.jasper");
            JasperPrint jasperPrint = JasperFillManager.fillReport(report, parameters, conn);


            pdfFile = new File(path + rstfqNo + "_" + fyId + ".pdf");
            JRExporter exporter = null;
            if (true) {
                exporter = new JRPdfExporter();
                exporter.setParameter(JRExporterParameter.JASPER_PRINT, jasperPrint);
                exporter.setParameter(JRExporterParameter.OUTPUT_FILE, pdfFile);
            }
            try {
                exporter.exportReport();
            } catch (JRException e) {
                throw new ServletException(e);
            } catch (Exception ex) {
                ex.printStackTrace();
            }

            finally {
                if (conn != null && st != null && rs != null) {

                    conn.close();
                    st.close();
                    rs.close();
                }
            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }

        return pdfFile;
    }


    public Integer getFYid(String CldId, String OrgId, Date geDate) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        // System.out.println("-FY RETURNED-"+fyId);
        //    System.out.println("Set FyId in case mode is add");
        ViewObjectImpl ge = this.getMmRfq1();
        if (fyId > 0) {
            ge.getCurrentRow().setAttribute("FyId", fyId);
        }

        return fyId;
    }


    public String updatePrStatus(String CldId, String OrgId, Integer SlocId, String SrcDocId, Integer UserId) {
        String docId = null;
        Row rfqCurr = this.getMmRfq1().getCurrentRow();
        if (rfqCurr.getAttribute("DocId") != null) {
            docId = rfqCurr.getAttribute("DocId").toString();
        }
        Integer retval = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_PR_STAT (?,?,?,?,?,?,?)", new Object[] {
                                                       CldId, SlocId, OrgId, SrcDocId, docId, UserId, "A"
        }));
        String flag = "N";
        if (retval == 1) {
            flag = "Y";
        }
        System.out.println("am impl pr update value " + flag);
        return flag;
    }

    public String updatePrStatusondelete() {
        String docId = null;
        String SrcDocId = null;
        Integer UserId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Row rfqCurr = this.getMmRfq1().getCurrentRow();
        if (rfqCurr.getAttribute("DocId") != null) {
            docId = rfqCurr.getAttribute("DocId").toString();
        }
        if (rfqCurr.getAttribute("DocIdSrc") != null) {
            SrcDocId = rfqCurr.getAttribute("DocIdSrc").toString();
        }
        Integer retval = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_PR_STAT (?,?,?,?,?,?,?)", new Object[] {
                                                       CldId, SlocId, OrgId, SrcDocId, docId, UserId, "D"
        }));
        String flag = "N";
        if (retval == 1) {
            flag = "Y";
        }
        System.out.println("am impl pr update value " + flag);
        return flag;
    }

    public void updateRFQStatus() {
        System.out.println("update rfq status called");
        Row currPO = this.getMmRfq1().getCurrentRow();
        currPO.setAttribute("RfqStatus", 152);
        this.getDBTransaction().commit();
    }

    public String openReportUpdate(String docId1, Integer usrId) {
        String flag = "Y";
        if (docId1 != null) {
            Row[] filterRows = getMmRfq1().getFilteredRows("DocId", docId1);
            //System.out.println("filter rows for update status before if"+filterRows.length);
            if (filterRows.length > 0) {
                if (usrId != null) {
                    filterRows[0].setAttribute("UsrIdMod", usrId);
                    flag = "N";
                }
                if ((Integer) filterRows[0].getAttribute("RfqStatus") != 152) {
                    System.out.println("filter rows for update status");
                    filterRows[0].setAttribute("RfqStatus", 152);
                    this.getDBTransaction().commit();
                    //System.out.println("updated id is"+filterRows[0].getAttribute("RfqStatus"));
                }
            }
        }
        return flag;
    }


    public String supplierLovFilter() {

        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String orgid = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String HoOrgid = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        ViewObjectImpl vo = this.getMmRfqEo1();
        ViewCriteria vc = vo.getViewCriteria("supplierLOVCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdBind", cldId);
        vo.setNamedWhereClauseParam("SlocIdBind", slocid);
        vo.setNamedWhereClauseParam("HoOrgIdBind", orgid);
        vo.executeQuery();
        return null;
    }

    public void addItemForPR(String value) {

        ViewObjectImpl rfqVO = this.getMmRfq1();
        Row currR = rfqVO.getCurrentRow();
        ViewObjectImpl rfqItmVo = this.getMmRfqItm1();
        if (currR.getAttribute("DocId") != null) {
            String docId = currR.getAttribute("DocId").toString();
            RowQualifier rqItmNew = new RowQualifier(this.getMmRfqItm1());
            rqItmNew.setWhereClause("OrgId ='" + currR.getAttribute("OrgId").toString() + "' and SlocId =" +
                                    Integer.parseInt(currR.getAttribute("SlocId").toString()) + " and CldId ='" +
                                    currR.getAttribute("CldId").toString() + "' and DocId ='" + docId + "'");
            Row[] rfqItmNew = this.getMmRfqItm1().getFilteredRows(rqItmNew);
            System.out.println(rfqItmNew.length + " rfq Itm Filter Query   " + rqItmNew.getExprStr());
            if (rfqItmNew.length > 0) {
                for (Row rr2 : rfqItmNew) {
                    rr2.remove();
                }
            }
        }
        // String prNO= currR.getAttribute("TransSrcDocNo").toString();
        RowQualifier rq = new RowQualifier(this.getLovPRDocNo());
        rq.setWhereClause("OrgId ='" + currR.getAttribute("OrgId").toString() + "' and SlocId =" +
                          Integer.parseInt(currR.getAttribute("SlocId").toString()) + " and CldId ='" +
                          currR.getAttribute("CldId").toString() + "' and PrNo ='" + value + "'");

        Row[] prRow = this.getLovPRDocNo().getFilteredRows(rq);
        System.out.println(value + "        " + prRow.length + "  Pr filter Query ---  " + rq.getExprStr());
        if (prRow.length > 0) {
            String docIdPr = null;
            if (prRow[0].getAttribute("PrTxnId") != null) {
                docIdPr = prRow[0].getAttribute("PrTxnId").toString();
            }
            adfLog.info(docIdPr + " doc _id pr ");
            for (Row rr : prRow) {
                String prTxnId = rr.getAttribute("PrTxnId").toString();
                RowQualifier rqItm = new RowQualifier(this.getLovPRItem());
                rqItm.setWhereClause("OrgId ='" + currR.getAttribute("OrgId").toString() + "' and SlocId =" +
                                     Integer.parseInt(currR.getAttribute("SlocId").toString()) + " and CldId ='" +
                                     currR.getAttribute("CldId").toString() + "' and PrTxnId ='" + prTxnId + "'");
                Row[] prItm = this.getLovPRItem().getFilteredRows(rqItm);
                System.out.println(prItm.length + " Pr Itm Filter Query   " + rqItm.getExprStr());
                if (prItm.length > 0) {
                    for (Row rr1 : prItm) {
                        Row rfqItm = this.getMmRfqItm1().createRow();
                        rfqItm.setAttribute("ItmId", rr1.getAttribute("ItmId"));
                        rfqItm.setAttribute("ItmUom", rr1.getAttribute("ItmUom"));
                        rfqItm.setAttribute("RfqQty", rr1.getAttribute("PendQty"));
                        Number retVal = new Number(0);
                        if (rr1.getAttribute("ItmId") != null) {
                            BigDecimal ret =
                                (BigDecimal) callStoredFunction(NUMBER, "PKG_MM_RFQ.GET_BEST_PRICE(?,?,?,?)", new Object[] {
                                                                Integer.parseInt(currR.getAttribute("SlocId").toString()),
                                                                currR.getAttribute("CldId").toString(),
                                                                currR.getAttribute("OrgId").toString(),
                                                                rr1.getAttribute("ItmId").toString()
                            });

                            try {
                                retVal = new Number(ret);

                            } catch (SQLException e) {
                            }
                        }
                        System.out.println("Itm best price ---    " + retVal);
                        if (retVal.compareTo(new Number(0)) == 1) {
                            rfqItm.setAttribute("DesiredPrice", retVal);
                        } else {
                            rfqItm.setAttribute("DesiredPrice", new Number(0));
                        }
                        this.getMmRfqItm1().insertRow(rfqItm);
                        this.getMmRfqItm1().executeQuery();
                    }
                }
            }

            if (docIdPr != null) {
                this.addFlexyField(currR.getAttribute("CldId").toString(),
                                   Integer.parseInt(currR.getAttribute("SlocId").toString()),
                                   currR.getAttribute("OrgId").toString(), currR.getAttribute("DocId").toString(),
                                   docIdPr);
            }
        }
    }


    public Integer addFlexyField(String cldId, Integer slocId, String orgId, String docIdRfq, String docIdPr) {
        adfLog.info(" call addFlexyField");

        adfLog.info(cldId + " cld " + slocId + " sloc  " + orgId + "  org " + docIdRfq + " doc Id rfq " + docIdPr +
                    " doc id pr");
        try {
            this.getDBTransaction().postChanges();
            Object ret = callStoredFunction(Types.INTEGER, "MM.MM_INS_RFQ_FLX_FRM_PR(?,?,?,?,?)", new Object[] {
                                            cldId, slocId, orgId, docIdRfq, docIdPr
            });
            adfLog.info("ret  " + ret);
            // this.getMmRfqFlx1().executeQuery();
            if (ret != null) {
                if (((Integer) ret).compareTo(new Integer(1)) == 0) {
                    this.getMmRfqFlx1().executeQuery();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

        adfLog.info(" end addFlexyField");

        return 1;
    }

    /**
     *
     * @param p_SlocId
     * @param p_CldId
     * @param p_OrgId
     * @param p_Name
     * @param p_Type
     * @param p_UsrId
     * @return
     */

    public String getNewEoId(Integer p_SlocId, String p_CldId, String p_OrgId, String p_Name, Integer p_Type,
                             Integer p_UsrId) {

        try {

            /*     String exec =
                                           callStoredFunction(Types.VARCHAR, "app.FN_SET_EO_ID(?,?,?,?,?,?)", new Object[] { p_SlocId, p_CldId,
                                                                                                                              p_OrgId, p_Name,
                                                                                                                              p_Type,
                                                                                                                              p_UsrId }).toString(); */

            String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String exec = callStoredFunction(Types.VARCHAR, "app.FN_SET_PRS_SUP_ID(?,?,?,?,?,?,?)", new Object[] {
                                             p_SlocId, p_CldId, hoOrg_id, p_OrgId, p_Name, p_Type, p_UsrId
            }).toString();

            adfLog.info("exec : " + exec);
            if (exec.equalsIgnoreCase("INSERTED")) {


                getsupplierLOV().executeQuery();

                Row[] rw = getsupplierLOV().getFilteredRows("EoNm", p_Name);
                if (rw.length > 0) {
                    if (rw[0].getAttribute("EoId") != null) {
                        Integer EoId = (Integer) rw[0].getAttribute("EoId");
                        //System.out.println("EoId : " + EoId);
                        adfLog.info("new eo id is " + EoId);
                        if (EoId != null) {
                            this.getMmRfqEo1().getCurrentRow().setAttribute("EoId", EoId);
                        }
                        Row currRw = getMmRfqEo1().getCurrentRow();
                        if (currRw != null) {
                            System.out.println("------" + EoId + "-----------" + p_Type);
                            //System.out.println("EoId"+EoId);
                            //System.out.println("EoType"+p_Type);
                            adfLog.info("p_name : " + p_Name);
                            adfLog.info("new eo id is " + EoId);
                            adfLog.info("new eo type is " + p_Type);
                            //getSlsOpp().executeQuery();

                            /*  this.getDBTransaction().validate();
                                                    this.getDBTransaction().postChanges(); */
                            MmRfqEoVORowImpl cr = (MmRfqEoVORowImpl) this.getMmRfqEo1().getCurrentRow();
                            // SlsOppVORowImpl cR = (SlsOppVORowImpl)this.getSlsOpp().getCurrentRow();
                            cr.getsupplierLOV1().executeQuery();

                            /* this.getLOVCust().getCurrentRow().setAttribute("EoId", EoId);
                                                    this.getLOVCust().getCurrentRow().setAttribute("EoNm", p_Name); */

                            // System.out.println("Pname is :"+p_Name);


                            return p_Name;


                        }
                    }

                }
            } else {
                return "N";
            }
        } catch (Exception e) {

            e.printStackTrace();
            p_Name = "true";
            return p_Name;


        }

        return null;
    }


    public String SearchCriteria(String orgId, Integer delvrydays, Date rfqdate, String rfqno, Integer rfqsts,
                                 Integer sourceType) {

        System.out.println(orgId + " days " + delvrydays + " date " + rfqdate + " no " + rfqno + " status " + rfqsts +
                           " source is " + sourceType);

        orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl rfqVO = this.getMmRfq1();
        ViewCriteria vc = rfqVO.getViewCriteria("MmRfqVOCriteria");
        rfqVO.applyViewCriteria(vc);
        rfqVO.setNamedWhereClauseParam("OrgIdBind", orgId);
        rfqVO.setNamedWhereClauseParam("DocDtbind", rfqdate);
        rfqVO.setNamedWhereClauseParam("RfqIdBind", rfqno);
        rfqVO.setNamedWhereClauseParam("DlvrDysBind", delvrydays);
        rfqVO.setNamedWhereClauseParam("RfqStatusbind", rfqsts);
        rfqVO.setNamedWhereClauseParam("BindRfqSrc", sourceType);
        rfqVO.executeQuery();

        /*   String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl vo =  this.getMmRfq1();
        ViewCriteria vc1 = vo.getViewCriteria("MmRfqVOCriteria1");
        vo.applyViewCriteria(vc1);
        vo.setNamedWhereClauseParam("OrgIdBind", OrgId);
        vo.setNamedWhereClauseParam("CldIdBind", CldId);
        vo.setNamedWhereClauseParam("SlocIdBind",SlocId);
        vo.executeQuery();   */
        // System.out.println("query created is: "+rfqVO.getQuery());

        //String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

        return "";
    }

    public void ResetAction() {
        System.out.println();
        ViewObject mmsrchVo = this.getRfqSearch();
        mmsrchVo.getCurrentRow().setAttribute("OrgIdTrans", null);
        mmsrchVo.getCurrentRow().setAttribute("DelvryDayTrans", null);
        mmsrchVo.getCurrentRow().setAttribute("RfqDtTrans", null);
        mmsrchVo.getCurrentRow().setAttribute("RfqNoTrans", null);
        mmsrchVo.getCurrentRow().setAttribute("RfqStsTrans", null);
        mmsrchVo.getCurrentRow().setAttribute("RfqSrcTyp", null);
        mmsrchVo.executeQuery();
        String CldId = "0";
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl vo = this.getMmRfq1();
        ViewCriteria vc = vo.getViewCriteria("MmRfqVOCriteria1");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("OrgIdBind", OrgId);
        vo.setNamedWhereClauseParam("CldIdBind", CldId);
        vo.setNamedWhereClauseParam("SlocIdBind", SlocId);
        vo.executeQuery();
        //
    }

    /**
     * Container's getter for LovPRDocNo.
     * @return LovPRDocNo
     */
    public ViewObjectImpl getLovPRDocNo() {
        return (ViewObjectImpl) findViewObject("LovPRDocNo");
    }

    /**
     * Container's getter for LovPRItem.
     * @return LovPRItem
     */
    public ViewObjectImpl getLovPRItem() {
        return (ViewObjectImpl) findViewObject("LovPRItem");
    }

    /**
     * Container's getter for RfqSearch.
     * @return RfqSearch
     */
    public ViewObjectImpl getRfqSearch() {
        return (ViewObjectImpl) findViewObject("RfqSearch");
    }

    /**
     * Container's getter for userLOV.
     * @return userLOV
     */
    public ViewObjectImpl getuserLOV() {
        return (ViewObjectImpl) findViewObject("userLOV");
    }

    /**
     * Container's getter for TncLOV.
     * @return TncLOV
     */
    public ViewObjectImpl getTncLOV() {
        return (ViewObjectImpl) findViewObject("TncLOV");
    }

    /**
     * Container's getter for MMItmTune.
     * @return MMItmTune
     */
    public ViewObjectImpl getMMItmTune() {
        return (ViewObjectImpl) findViewObject("MMItmTune");
    }

    /**
     * Container's getter for ItmDescTune.
     * @return ItmDescTune
     */
    public ViewObjectImpl getItmDescTune() {
        return (ViewObjectImpl) findViewObject("ItmDescTune");
    }

    /**
     * Container's getter for LovPrdViewDocNo1.
     * @return LovPrdViewDocNo1
     */
    public ViewObjectImpl getLovPrdViewDocNo() {
        return (ViewObjectImpl) findViewObject("LovPrdViewDocNo");
    }


    /**
     * Method to get suggested Item in AutoSuggest.
     * @param itmStr
     * @return
     */
    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        ArrayList<String> h = new ArrayList<String>();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl autoSuggestVO = this.getLOVAutoSuggestItemsVO1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", cld_id);
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", slocId);
        autoSuggestVO.setNamedWhereClauseParam("OrgIdbind", orgId);
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", hoOrg_id);
        autoSuggestVO.setNamedWhereClauseParam("ItmNmbind", itmStr);
        //  autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }


    /**
     * Container's getter for LOVAutoSuggestItemsVO1.
     * @return LOVAutoSuggestItemsVO1
     */
    public ViewObjectImpl getLOVAutoSuggestItemsVO1() {
        return (ViewObjectImpl) findViewObject("LOVAutoSuggestItemsVO1");
    }

    public String getCurrNot(Integer curId, String type) {
        if (curId != null) {
            ViewObjectImpl appCurr1 = this.getAppCurr1();
            appCurr1.setNamedWhereClauseParam("BindCurrId", curId);
            appCurr1.executeQuery();
            Row[] row = appCurr1.getFilteredRows("GlblCurrId", curId);
            if (row.length > 0) {
                if (type.equals("N")) {
                    String attribute = (String) row[0].getAttribute("GlblCurrNotation");
                    return attribute;
                } else {
                    String attribute = (String) row[0].getAttribute("GlblCurrNotationAlias");
                    return attribute;
                }

            }
        }
        return null;
    }

    /**
     * Container's getter for AppCurr1.
     * @return AppCurr1
     */
    public ViewObjectImpl getAppCurr1() {
        return (ViewObjectImpl) findViewObject("AppCurr1");
    }

    public void changeStatToCancel() {
        String a = resolvEl("#{pageFlowScope.WF_RET_VALUE}").toString();
        if (a.equalsIgnoreCase("A")) {
            this.getMmRfq1().getCurrentRow().setAttribute("RfqStatus", 882);
            this.getDBTransaction().commit();
        }
    }

    /**
     * Container's getter for MmRfqFlx1.
     * @return MmRfqFlx1
     */
    public MmRfqFlxVOImpl getMmRfqFlx1() {
        return (MmRfqFlxVOImpl) findViewObject("MmRfqFlx1");
    }

    /**
     * Container's getter for RFQToFlxVL1.
     * @return RFQToFlxVL1
     */
    public ViewLinkImpl getRFQToFlxVL1() {
        return (ViewLinkImpl) findViewLink("RFQToFlxVL1");
    }

    public String getFlexiFieldFilter() {
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        ViewObjectImpl itmFlex = this.getMmRfqFlx1();
        // ViewObjectImpl flex = this.getLovFlexiFlds1();
        ViewObjectImpl flex = this.getLovFlexiFieldView();
        flex.setNamedWhereClauseParam("bindCldId", CldId);
        flex.setNamedWhereClauseParam("bindDocId", 18502);
        flex.setNamedWhereClauseParam("bindDocType", 461);
        flex.executeQuery();
        Integer docid = 18502;
        Integer docType = 461;
        Integer count = flex.getRowCount();
        System.out.println("no of field ::" + count);
        System.out.println("current row is " + itmFlex.getCurrentRow());
        //  RowSetIterator rr = flex.createRowSetIterator(null);
        // Row[] rr = flex.getFilteredRows("DocId", new Integer(18502));
        RowQualifier rq = new RowQualifier(flex);
        rq.setWhereClause("DocId=" + docid + " and DocTypeId =" + docType + " ");
        Row[] rr = flex.getFilteredRows(rq);
        System.out.println(rq.getExprStr() + "no roeww of field ::" + rr.length);

        if (rr.length > 0) {
            for (Row r : rr) {
                System.out.println("total no. of rows found " + r.getAttribute("FldId"));
                Row r1 = itmFlex.createRow();
                //System.out.println("inserted row is "+r1);
                //   System.out.println("----->  " + r1.getAttribute("FldId").getClass().getName() + " -- " +
                //                     r.getAttribute("FldId").getClass().getName());
                r1.setAttribute("FldId", r.getAttribute("FldId"));
                System.out.println("inserted row is " + r1);
                //      System.out.println("Label vaues are " + ((MmRfqFlxVORowImpl) r1).getLovFlexiFldsVO1().getRowCount());
                itmFlex.insertRow(r1);
            }
        }
        itmFlex.executeQuery();
        System.out.println("count111::" + itmFlex.getRowCount());
        return null;
    }

    /**
     * Container's getter for LovFlexiField1.
     * @return LovFlexiField1
     */
    public ViewObjectImpl getLovFlexiFlds1() {
        return (ViewObjectImpl) findViewObject("LovFlexiFlds1");
    }

    /**
     * Container's getter for LovFlexiFieldView1.
     * @return LovFlexiFieldView1
     */
    public ViewObjectImpl getLovFlexiFieldView() {
        return (ViewObjectImpl) findViewObject("LovFlexiFieldView");
    }
}
