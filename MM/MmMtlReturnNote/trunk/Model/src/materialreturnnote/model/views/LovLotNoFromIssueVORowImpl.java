package materialreturnnote.model.views;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.sql.Types;

import oracle.jbo.JboException;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 09 15:05:58 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LovLotNoFromIssueVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SlocId {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        OrgId {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        WhId {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getWhId();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        DocId {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        DocIdSrc {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getDocIdSrc();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        DocDtSrc {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getDocDtSrc();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        LotId {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getLotId();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ItmId {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ItmUom {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getItmUom();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        IssuQty {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getIssuQty();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        IssuQtyBs {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getIssuQtyBs();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        RcptDocId {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getRcptDocId();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        RcptDocDt {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getRcptDocDt();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        RcptSrcId {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getRcptSrcId();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        RcptSrcNm {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getRcptSrcNm();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        TransLotPrice {
            public Object get(LovLotNoFromIssueVORowImpl obj) {
                return obj.getTransLotPrice();
            }

            public void put(LovLotNoFromIssueVORowImpl obj, Object value) {
                obj.setTransLotPrice((Number) value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(LovLotNoFromIssueVORowImpl object);

        public abstract void put(LovLotNoFromIssueVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int DOCDTSRC = AttributesEnum.DocDtSrc.index();
    public static final int LOTID = AttributesEnum.LotId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int ISSUQTY = AttributesEnum.IssuQty.index();
    public static final int ISSUQTYBS = AttributesEnum.IssuQtyBs.index();
    public static final int RCPTDOCID = AttributesEnum.RcptDocId.index();
    public static final int RCPTDOCDT = AttributesEnum.RcptDocDt.index();
    public static final int RCPTSRCID = AttributesEnum.RcptSrcId.index();
    public static final int RCPTSRCNM = AttributesEnum.RcptSrcNm.index();
    public static final int TRANSLOTPRICE = AttributesEnum.TransLotPrice.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LovLotNoFromIssueVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute WhId.
     * @return the WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocIdSrc.
     * @return the DocIdSrc
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Gets the attribute value for the calculated attribute DocDtSrc.
     * @return the DocDtSrc
     */
    public Timestamp getDocDtSrc() {
        return (Timestamp) getAttributeInternal(DOCDTSRC);
    }

    /**
     * Gets the attribute value for the calculated attribute LotId.
     * @return the LotId
     */
    public String getLotId() {
        return (String) getAttributeInternal(LOTID);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUom.
     * @return the ItmUom
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Gets the attribute value for the calculated attribute IssuQty.
     * @return the IssuQty
     */
    public BigDecimal getIssuQty() {
        return (BigDecimal) getAttributeInternal(ISSUQTY);
    }

    /**
     * Gets the attribute value for the calculated attribute IssuQtyBs.
     * @return the IssuQtyBs
     */
    public BigDecimal getIssuQtyBs() {
        return (BigDecimal) getAttributeInternal(ISSUQTYBS);
    }

    /**
     * Gets the attribute value for the calculated attribute RcptDocId.
     * @return the RcptDocId
     */
    public String getRcptDocId() {
        return (String) getAttributeInternal(RCPTDOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute RcptDocDt.
     * @return the RcptDocDt
     */
    public Timestamp getRcptDocDt() {
        return (Timestamp) getAttributeInternal(RCPTDOCDT);
    }

    /**
     * Gets the attribute value for the calculated attribute RcptSrcId.
     * @return the RcptSrcId
     */
    public String getRcptSrcId() {
        return (String) getAttributeInternal(RCPTSRCID);
    }

    /**
     * Gets the attribute value for the calculated attribute RcptSrcNm.
     * @return the RcptSrcNm
     */
    public String getRcptSrcNm() {
        return (String) getAttributeInternal(RCPTSRCNM);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLotPrice.
     * @return the TransLotPrice
     */
    public Number getTransLotPrice() {
        Object retnLnd = null;
        Number lotPrice = new Number(0);
        if (getWhId() != null && getItmId() != null && getLotId() != null) {
            try {
                //     adfLog.info("---------bfr return value of check stock qty--- ");
                retnLnd = callStoredFunction(Types.NUMERIC, "MM.MM_GET_LOT_LND_PRICE(?,?,?,?,?,?)", new Object[] {
                                             getCldId(), getSlocId(), getOrgId(), getWhId(), getItmId(), getLotId()
                });
                System.out.println("---MM_GET_LOT_LND_PRICE parameter are " + getWhId() + " ItmId " + getItmId() +
                                   " LotId " + getLotId());
                System.out.println("---------return value Land Price--- " + retnLnd);
                lotPrice = new Number(retnLnd);
                System.out.println("----lnd price after converted number--- " + lotPrice);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        return ((Number) getAttributeInternal(TRANSLOTPRICE) == null ? lotPrice :
                (Number) getAttributeInternal(TRANSLOTPRICE));
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransLotPrice.
     * @param value value to set the  TransLotPrice
     */
    public void setTransLotPrice(Number value) {
        setAttributeInternal(TRANSLOTPRICE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //  adflog.info("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }
}

