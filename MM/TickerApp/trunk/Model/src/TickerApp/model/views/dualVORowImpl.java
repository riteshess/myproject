package TickerApp.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;



import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Apr 09 17:42:23 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class dualVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(dualVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TickerId {
            public Object get(dualVORowImpl obj) {
                return obj.getTickerId();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setTickerId((String) value);
            }
        }
        ,
        CldId {
            public Object get(dualVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        OrgId {
            public Object get(dualVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(dualVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        switchCondition {
            public Object get(dualVORowImpl obj) {
                return obj.getswitchCondition();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setswitchCondition((String) value);
            }
        }
        ,
        UserId {
            public Object get(dualVORowImpl obj) {
                return obj.getUserId();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setUserId((Integer) value);
            }
        }
        ,
        TransTckrSrch {
            public Object get(dualVORowImpl obj) {
                return obj.getTransTckrSrch();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setTransTckrSrch((String) value);
            }
        }
        ,
        TransTickerName {
            public Object get(dualVORowImpl obj) {
                return obj.getTransTickerName();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmGlBlTkrVO1 {
            public Object get(dualVORowImpl obj) {
                return obj.getMmGlBlTkrVO1();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmTkrVO1 {
            public Object get(dualVORowImpl obj) {
                return obj.getMmTkrVO1();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVUserNmVO1 {
            public Object get(dualVORowImpl obj) {
                return obj.getLOVUserNmVO1();
            }

            public void put(dualVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(dualVORowImpl object);

        public abstract void put(dualVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int TICKERID = AttributesEnum.TickerId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int SWITCHCONDITION = AttributesEnum.switchCondition.index();
    public static final int USERID = AttributesEnum.UserId.index();
    public static final int TRANSTCKRSRCH = AttributesEnum.TransTckrSrch.index();
    public static final int TRANSTICKERNAME = AttributesEnum.TransTickerName.index();
    public static final int MMGLBLTKRVO1 = AttributesEnum.MmGlBlTkrVO1.index();
    public static final int MMTKRVO1 = AttributesEnum.MmTkrVO1.index();
    public static final int LOVUSERNMVO1 = AttributesEnum.LOVUserNmVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public dualVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }


    /**
     * Gets the attribute value for the calculated attribute TickerId.
     * @return the TickerId
     */
    public String getTickerId() {
        return (String) getAttributeInternal(TICKERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TickerId.
     * @param value value to set the  TickerId
     */
    public void setTickerId(String value) {
        setAttributeInternal(TICKERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        return CldId;
        
      //  return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        String Orgid=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        return Orgid;
       // return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        Integer Slocid=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        return Slocid;
    // return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }
    
    public Object resolvEl(String data){
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp = elFactory.createValueExpression(elContext, data,
    Object.class);
    Object Message=valueExp.getValue(elContext);
    return Message;
    }

    /**
     * Gets the attribute value for the calculated attribute switchCondition.
     * @return the switchCondition
     */
    public String getswitchCondition() {
    /*     String mode="V";
       if(resolvEl("#{pageFlowScope.GLBL_LOVSWITCH_PARAM}")!=null){
            mode= resolvEl("#{pageFlowScope.GLBL_LOVSWITCH_PARAM}").toString();
         }
       if(mode.equals("A"))
       {
           return "LOV_TickerId";
           }
       else 
       {
           return "LOV_TickerId1";
           } */
        return (String) getAttributeInternal(SWITCHCONDITION); 
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute switchCondition.
     * @param value value to set the  switchCondition
     */
    public void setswitchCondition(String value) {
        setAttributeInternal(SWITCHCONDITION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UserId.
     * @return the UserId
     */
    public Integer getUserId() {
        return (Integer) getAttributeInternal(USERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UserId.
     * @param value value to set the  UserId
     */
    public void setUserId(Integer value) {
        setAttributeInternal(USERID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTckrSrch.
     * @return the TransTckrSrch
     */
    public String getTransTckrSrch() {
        return (String) getAttributeInternal(TRANSTCKRSRCH);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTckrSrch.
     * @param value value to set the  TransTckrSrch
     */
    public void setTransTckrSrch(String value) {
        setAttributeInternal(TRANSTCKRSRCH, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTickerName.
     * @return the TransTickerName
     */
    public String getTransTickerName() {
        return (String) getAttributeInternal(TRANSTICKERNAME);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmGlBlTkrVO1.
     */
    public RowSet getMmGlBlTkrVO1() {
        return (RowSet)getAttributeInternal(MMGLBLTKRVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmTkrVO1.
     */
    public RowSet getMmTkrVO1() {
        return (RowSet)getAttributeInternal(MMTKRVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVUserNmVO1.
     */
    public RowSet getLOVUserNmVO1() {
        return (RowSet)getAttributeInternal(LOVUSERNMVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
