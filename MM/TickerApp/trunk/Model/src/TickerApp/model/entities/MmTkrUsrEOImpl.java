package TickerApp.model.entities;

import java.util.concurrent.locks.Lock;

import java.util.concurrent.locks.ReentrantLock;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Apr 12 10:31:09 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmTkrUsrEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getCldId();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        UsrId {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getUsrId();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setUsrId((Integer)value);
            }
        }
        ,
        TkrId {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getTkrId();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setTkrId((String)value);
            }
        }
        ,
        TkrPos {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getTkrPos();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setTkrPos((Integer)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Timestamp)value);
            }
        }
        ,
        UsrIdMod {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setUsrIdModDt((Timestamp)value);
            }
        }
        ,
        MmTkr {
            public Object get(MmTkrUsrEOImpl obj) {
                return obj.getMmTkr();
            }

            public void put(MmTkrUsrEOImpl obj, Object value) {
                obj.setMmTkr((MmTkrEOImpl)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmTkrUsrEOImpl object);

        public abstract void put(MmTkrUsrEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int USRID = AttributesEnum.UsrId.index();
    public static final int TKRID = AttributesEnum.TkrId.index();
    public static final int TKRPOS = AttributesEnum.TkrPos.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int MMTKR = AttributesEnum.MmTkr.index();

    /**
     * This is the default constructor (do not remove).
     */
    
     final Lock lock = new ReentrantLock();

    public MmTkrUsrEOImpl() {
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for UsrId, using the alias name UsrId.
     * @return the value of UsrId
     */
    public Integer getUsrId() {
        return (Integer)getAttributeInternal(USRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrId.
     * @param value value to set the UsrId
     */
    public void setUsrId(Integer value) {
        setAttributeInternal(USRID, value);
    }

    /**
     * Gets the attribute value for TkrId, using the alias name TkrId.
     * @return the value of TkrId
     */
    public String getTkrId() {
        return (String)getAttributeInternal(TKRID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TkrId.
     * @param value value to set the TkrId
     */
    public void setTkrId(String value) {
        setAttributeInternal(TKRID, value);
    }

    /**
     * Gets the attribute value for TkrPos, using the alias name TkrPos.
     * @return the value of TkrPos
     */
    public Integer getTkrPos() {
        return (Integer)getAttributeInternal(TKRPOS);
    }

    /**
     * Sets <code>value</code> as the attribute value for TkrPos.
     * @param value value to set the TkrPos
     */
    public void setTkrPos(Integer value) {
        setAttributeInternal(TKRPOS, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity MmTkrEOImpl.
     */
    public MmTkrEOImpl getMmTkr() {
        return (MmTkrEOImpl)getAttributeInternal(MMTKR);
    }

    /**
     * Sets <code>value</code> as the associated entity MmTkrEOImpl.
     */
    public void setMmTkr(MmTkrEOImpl value) {
        setAttributeInternal(MMTKR, value);
    }

    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param usrId key constituent
     * @param tkrId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, Integer usrId, String tkrId) {
        return new Key(new Object[]{cldId, slocId, orgId, usrId, tkrId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("TickerApp.model.entities.MmTkrUsrEO");
    }
    
    public Object resolvEl(String data){
                   FacesContext fc = FacesContext.getCurrentInstance();
                   Application app = fc.getApplication();
                   ExpressionFactory elFactory = app.getExpressionFactory();
                   ELContext elContext = fc.getELContext();
                   ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
                   Object Message=valueExp.getValue(elContext);
                   return Message;
                 }
    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        if(resolvEl("#{pageFlowScope.GLBL_APP_USR}")!=null && resolvEl("#{pageFlowScope.GLBL_APP_USR}")!=""){
        setUsrIdCreate((Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()))); 
        }
        super.create(attributeList);
        this.setTkrPos(0);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        lock.lock();
        try {super.lock();}
        catch(Exception e){}
        finally{
        lock.unlock();
        }

    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if(operation==DML_UPDATE){
            if(resolvEl("#{pageFlowScope.GLBL_APP_USR}")!=null && resolvEl("#{pageFlowScope.GLBL_APP_USR}")!=""){
            setUsrIdMod((Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString())));
        }
        
        }
        super.doDML(operation, e);
    }
}
