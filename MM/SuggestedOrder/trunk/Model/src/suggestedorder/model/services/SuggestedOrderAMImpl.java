package suggestedorder.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import suggestedorder.model.services.common.SuggestedOrderAM;
import suggestedorder.model.views.MmSoItmVOImpl;
import suggestedorder.model.views.MmSoItmVORowImpl;
import suggestedorder.model.views.MmSoVOImpl;
import suggestedorder.model.views.ViewGrpEoTempVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 30 18:19:23 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SuggestedOrderAMImpl extends ApplicationModuleImpl implements SuggestedOrderAM {
    /**
     * This is the default constructor (do not remove).
     */
    public SuggestedOrderAMImpl() {
    }
    private BigDecimal avl_stk;
    private BigDecimal req_stk;
    private BigDecimal ord_stk;

    /**
     * Container's getter for MmSo.
     * @return MmSo
     */
    public MmSoVOImpl getMmSo() {
        return (MmSoVOImpl) findViewObject("MmSo");
    }

    /**
     * Container's getter for ItemQuery.
     * @return ItemQuery
     */
    public ViewObjectImpl getItemQuery() {
        return (ViewObjectImpl) findViewObject("ItemQuery");
    }

    /**
     * Container's getter for MmSoItm.
     * @return MmSoItm
     */
    public MmSoItmVOImpl getMmSoItm() {
        return (MmSoItmVOImpl) findViewObject("MmSoItm");
    }

    /**
     * Container's getter for MmSoToSoItemVL.
     * @return MmSoToSoItemVL
     */
    public ViewLinkImpl getMmSoToSoItemVL() {
        return (ViewLinkImpl) findViewLink("MmSoToSoItemVL");
    }

    /**
     * Container's getter for ViewPOQuery1.
     * @return ViewPOQuery1
     */
    public ViewObjectImpl getViewPOQuery1() {
        return (ViewObjectImpl) findViewObject("ViewPOQuery1");
    }

    /**
     * Container's getter for ViewPoItemQuery.
     * @return ViewPoItemQuery
     */
    public ViewObjectImpl getViewPoItemQuery() {
        return (ViewObjectImpl) findViewObject("ViewPoItemQuery");
    }

    /**
     * Container's getter for MmSoItmPoVO.
     * @return MmSoItmPoVO
     */
    public ViewObjectImpl getMmSoItmPoVO() {
        return (ViewObjectImpl) findViewObject("MmSoItmPoVO");
    }

    /**
     * Container's getter for ViewItemWiseQty.
     * @return ViewItemWiseQty
     */
    public ViewObjectImpl getViewItemWiseQty() {
        return (ViewObjectImpl) findViewObject("ViewItemWiseQty");
    }

    /**
     * Container's getter for ViewLinkVL1.
     * @return ViewLinkVL1
     */
    public ViewLinkImpl getSOToPoItemQtyVL() {
        return (ViewLinkImpl) findViewLink("SOToPoItemQtyVL");
    }

    /**
     * Container's getter for SOToPoItemQtyVL1.
     * @return SOToPoItemQtyVL1
     */
    public ViewLinkImpl getSOToPoItemQtyVL1() {
        return (ViewLinkImpl) findViewLink("SOToPoItemQtyVL1");
    }

    /**
     * Container's getter for MmSoForQueryVO.
     * @return MmSoForQueryVO
     */
    public MmSoVOImpl getMmSoForQueryVO() {
        return (MmSoVOImpl) findViewObject("MmSoForQueryVO");
    }


    /**
     * Container's getter for MmSoItmForQueryVO.
     * @return MmSoItmForQueryVO
     */
    public MmSoItmVOImpl getMmSoItmForQueryVO() {
        return (MmSoItmVOImpl) findViewObject("MmSoItmForQueryVO");
    }

    /**
     * Container's getter for ViewSoItemSupplierVO.
     * @return ViewSoItemSupplierVO
     */
    public ViewObjectImpl getViewSoItemSupplierVO() {
        return (ViewObjectImpl) findViewObject("ViewSoItemSupplierVO");
    }

    /**
     * Container's getter for SoItemToSoItemSupplierVL1.
     * @return SoItemToSoItemSupplierVL1
     */
    public ViewLinkImpl getSoItemToSoItemSupplierVL1() {
        return (ViewLinkImpl) findViewLink("SoItemToSoItemSupplierVL1");
    }

    /**
     * Container's getter for ViewSoSearchVO.
     * @return ViewSoSearchVO
     */
    public ViewObjectImpl getViewSoSearchVO() {
        return (ViewObjectImpl) findViewObject("ViewSoSearchVO");
    }

    /**
     * Container's getter for MmSoItmVO1.
     * @return MmSoItmVO1
     */
    public MmSoItmVOImpl getMmSoItmVO1() {
        return (MmSoItmVOImpl) findViewObject("MmSoItmVO1");
    }

    /**
     * Container's getter for SoSearchToSoItemVL1.
     * @return SoSearchToSoItemVL1
     */
    public ViewLinkImpl getSoSearchToSoItemVL1() {
        return (ViewLinkImpl) findViewLink("SoSearchToSoItemVL1");
    }

    /**
     * Container's getter for ViewSuggOrdLOV1.
     * @return ViewSuggOrdLOV1
     */
    public ViewObjectImpl getViewSuggOrdLOV1() {
        return (ViewObjectImpl) findViewObject("ViewSuggOrdLOV1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);
        } catch (SQLException e) {
            // if (e.getMessage().length() < 11) {
            System.out.println(e);
            return null;
            // throw new JboException(e.getMessage());
            /*  } else {
             *
                int end = e.getMessage().indexOf("\n");
                throw new JboException(e.getMessage().substring(11, end));
            } */
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }


    public Integer getFyId(String cld, String org, Timestamp ts) {
        Integer fyId = (Integer) callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                    cld, org, ts });
        return fyId;
    }

    private static int VARCHAR = Types.VARCHAR;
    private static int INTEGER = Types.INTEGER;
    private static int NUMBER = Types.NUMERIC;


    public String getGroupId(Integer sloc, String cld, String org) {

        Integer fyId = getFyId(cld, org, new Timestamp(System.currentTimeMillis()));

        //  System.out.println("group func"+sloc+"--"+org+"--"+cld+"-"+fyId);

        String soId = (String) callStoredFunction(VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                                  sloc, cld, org, "MM$SO$EO$ITM$GRP", null, fyId
        });
        // System.out.println("group" + soId);
        return soId;
    }


    public void generateRFQ(Integer p_SLOCID, String p_CLDID, String p_ORGID, String p_SOGRPID, String p_DOCID,
                            Integer p_USRID) {

        Timestamp dt = new Timestamp(System.currentTimeMillis());
        Integer fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     p_CLDID, p_ORGID, dt
        }));
        Integer ret = (Integer) (callStoredFunction(INTEGER, "MM.GEN_RFQ_FRM_SO (?,?,?,?,?,?)", new Object[] {
                                                    p_SLOCID, p_CLDID, p_ORGID, p_SOGRPID, p_USRID, fyid
        }));
        //System.out.println(ret + " ....generateRFQ" + p_SLOCID + "" + p_ORGID + "" + p_SOGRPID + "" + p_USRID + ""+p_CLDID);
    }


    public void generatePO(Integer p_SLOCID, String p_CLDID, String p_ORGID, String p_SOGRPID, Integer p_POTYPE,
                           Integer p_USRID) {

        Timestamp dt = new Timestamp(System.currentTimeMillis());
        Integer fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     p_CLDID, p_ORGID, dt
        }));
        System.out.println("SlocId" + p_SLOCID);
        System.out.println("CLODID" + p_CLDID);
        System.out.println("OrgID" + p_ORGID);
        System.out.println("GRPID " + p_SOGRPID);
        System.out.println("UsrID " + p_USRID);
        System.out.println("PoType" + p_POTYPE);
        //package name : MM.PKG_MM_SO.GEN_DRFT_PO_FRM_SO
        Integer ret =

            (Integer) (callStoredFunction(INTEGER, "MM.GEN_DRFT_PO_FRM_SO (?,?,?,?,?,?,?)", new Object[] {
                                          p_SLOCID, p_CLDID, p_ORGID, p_SOGRPID, p_POTYPE, p_USRID, fyid
        }));
        System.out.println(ret);
        System.out.println(ret + " ....generatePO" + p_SLOCID + " " + p_ORGID + " " + p_SOGRPID + " " + p_POTYPE + " " +
                           p_USRID + " " + p_CLDID);
    }

    public Integer insSuppItmGrp(Integer p_SLOCID, String p_CLDID, String p_ORGID, String p_SOGRPID, Integer p_EOID,
                                 Integer p_USRID) {
        Integer ret = Integer.parseInt(callStoredFunction(INTEGER, "MM.PKG_MM_SO.INS_SUPP_ITM_GRP (?,?,?,?,?,?)", new Object[] {
                                                          p_SLOCID, p_CLDID, p_ORGID, p_SOGRPID, p_EOID, p_USRID
        }).toString());


        // System.out.println(ret + " ....insSuppItmGrp" + p_SLOCID + "" + p_ORGID + "" + p_SOGRPID + "" + p_EOID + "" + p_USRID + "" + p_CLDID);

        return ret;
    }

    /**
     * Container's getter for MmSoGrpVO.
     * @return MmSoGrpVO
     */
    public ViewObjectImpl getMmSoGrpVO() {
        return (ViewObjectImpl) findViewObject("MmSoGrpVO");
    }

    /**
     * Container's getter for ViewGrpEoTempVO.
     * @return ViewGrpEoTempVO
     */
    public ViewGrpEoTempVOImpl getViewGrpEoTempVO() {
        return (ViewGrpEoTempVOImpl) findViewObject("ViewGrpEoTempVO");
    }

    /**
     * Container's getter for ViewGrpEoItmTempVO.
     * @return ViewGrpEoItmTempVO
     */
    public ViewObjectImpl getViewGrpEoItmTempVO() {
        return (ViewObjectImpl) findViewObject("ViewGrpEoItmTempVO");
    }

    /**
     * Container's getter for GrpEoTempVLtoGrpEoItm1.
     * @return GrpEoTempVLtoGrpEoItm1
     */
    public ViewLinkImpl getGrpEoTempVLtoGrpEoItm1() {
        return (ViewLinkImpl) findViewLink("GrpEoTempVLtoGrpEoItm1");
    }

    /**
     * Container's getter for ViewPoTypeLOV1.
     * @return ViewPoTypeLOV1
     */
    public ViewObjectImpl getViewPoTypeLOV1() {
        return (ViewObjectImpl) findViewObject("ViewPoTypeLOV1");
    }

    /**
     * Container's getter for ViewDraftPoVO.
     * @return ViewDraftPoVO
     */
    public ViewObjectImpl getViewDraftPoVO() {
        return (ViewObjectImpl) findViewObject("ViewDraftPoVO");
    }

    public void getStock(Integer slocid, String cldid, String itmId, String orgid, Date date) {
        Date date1 = new Date();
        date1 = (Date) date.getCurrentDate();
        System.out.println(date1 + "sloc : " + slocid + " cldid:  " + cldid + " itmId: " + itmId + " orgid:   " +
                           orgid + " date :  " + date);
        Integer fyId = (Integer) callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                    cldid, orgid, new Timestamp(System.currentTimeMillis())
        });
        System.out.println("fyId  +" + fyId);

        callStoredFunctionHistory("MM.PKG_MM_STK.GET_STK(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                  slocid, cldid, itmId, fyId, orgid, date1, null
        });
    }


    protected Object callStoredFunctionHistory(String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            /** 1. Create a JDBC CallabledStatement */

            st = getDBTransaction().createCallableStatement("begin " + stmt + ";end;", 0);
            /** 2. Register the first bind variable for the return value. and last 2 variable for output variable of function. */
            st.setObject(1, bindVars[0]);
            st.setObject(2, bindVars[1]);
            st.setObject(3, bindVars[2]);
            st.setObject(4, bindVars[3]);
            st.registerOutParameter(5, NUMBER);
            st.registerOutParameter(6, NUMBER);
            st.registerOutParameter(7, NUMBER);
            st.setObject(8, bindVars[4]);
            st.setObject(9, bindVars[5]);
            st.setObject(10, bindVars[6]);
            /** 5. Set the value of user-supplied bind vars in the stmt */
            st.executeUpdate();
            try {
                setAvl_stk((BigDecimal) st.getObject(5));
                //System.out.println("avl "+st.getObject(4));
                setReq_stk((BigDecimal) (st.getObject(6)));
                // System.out.println("req "+st.getObject(5));
                setOrd_stk((BigDecimal) st.getObject(7));
                System.out.println("insida proce : " + st.getObject(5) + " st.getObject(4) : " + st.getObject(6) +
                                   "  st.getObject(5) : " + st.getObject(7));
                // System.out.println("ord "+st.getObject(6));
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }

            return null;
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");

            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    /** 7. Close the statement */
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }


    public void setAvl_stk(BigDecimal avl_stk) {
        this.avl_stk = avl_stk;
    }

    public BigDecimal getAvl_stk() {
        return avl_stk;
    }

    public void setReq_stk(BigDecimal req_stk) {
        this.req_stk = req_stk;
    }

    public BigDecimal getReq_stk() {
        return req_stk;
    }

    public void setOrd_stk(BigDecimal ord_stk) {
        this.ord_stk = ord_stk;
    }

    public BigDecimal getOrd_stk() {
        return ord_stk;
    }

    /**
     * Container's getter for ViewPendPurOrdVO.
     * @return ViewPendPurOrdVO
     */
    public ViewObjectImpl getViewPendPurOrdVO() {
        return (ViewObjectImpl) findViewObject("ViewPendPurOrdVO");
    }

    /**
     * Container's getter for ItemViewToStockVL1.
     * @return ItemViewToStockVL1
     */
    public ViewLinkImpl getItemViewToStockVL1() {
        return (ViewLinkImpl) findViewLink("ItemViewToStockVL1");
    }

    /**
     * Container's getter for ViewItemLov.
     * @return ViewItemLov
     */
    public ViewObjectImpl getViewItemLov() {
        return (ViewObjectImpl) findViewObject("ViewItemLov");
    }

    /**
     * Container's getter for PurReqQueyVO1.
     * @return PurReqQueyVO1
     */
    public ViewObjectImpl getPurReqQueyVO1() {
        return (ViewObjectImpl) findViewObject("PurReqQueyVO1");
    }


    public Integer getFYid(String CldId, String OrgId) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, new Timestamp(System.currentTimeMillis())
        }));
        return fyId;
    }


    public void setPrItmToSoItm() {
        ViewObjectImpl impl = this.getMmSo();
        Object DocId = impl.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl prView = this.getPurReqQueyVO1();
        ViewObjectImpl prItems = this.getPurReqItmQueryVO1();
        ViewObjectImpl mmSoItem = this.getMmSoItm();
        ViewObjectImpl mmSoItemPo = this.getMmSoItmPoVO();

        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}");

        RowSetIterator createRowSetIterator = prView.createRowSetIterator(null);
        while (createRowSetIterator.hasNext()) {
            Row next = createRowSetIterator.next();
            if (next.getAttribute("selectPr").equals("Y")) {
                RowQualifier rw = new RowQualifier(prItems);
                rw.setWhereClause("CldId = '" + cldId + "' AND SlocId = " + slocId + " AND OrgId='" + orgId +
                                  "' AND PrTxnId = '" + next.getAttribute("PrTxnId") + "'");
                Row rows[] = prItems.getFilteredRows(rw);
                for (Row row : rows) {
                    Row next_2 = row;
                    Row createRow = mmSoItemPo.createRow();
                    createRow.setAttribute("SlocId", next_2.getAttribute("SlocId"));
                    createRow.setAttribute("OrgId", next_2.getAttribute("OrgId"));
                    createRow.setAttribute("CldId", next_2.getAttribute("CldId"));
                    createRow.setAttribute("DocId", DocId);
                    createRow.setAttribute("PoDocId", next_2.getAttribute("PrTxnId"));
                    createRow.setAttribute("ItmId", next_2.getAttribute("ItmId"));
                    createRow.setAttribute("ItmUom", next_2.getAttribute("ItmUom"));
                    createRow.setAttribute("OrdQty", next_2.getAttribute("PrQty"));
                    mmSoItemPo.insertRow(createRow);
                } //End of FOR

            } //End of IF

        }
        createRowSetIterator.closeRowSetIterator(); //End of While

        mmSoItemPo.executeQuery();
        this.getDBTransaction().postChanges();

        ViewObjectImpl ItemQuery = this.getViewItemWiseQty(); //Execute this View For Item Grouping
        ItemQuery.executeQuery();


        RowSetIterator iterator = ItemQuery.createRowSetIterator(null); //Insert value in SoItmVo from Group ItemVo
        while (iterator.hasNext()) {
            Row itms = iterator.next();
            if (itms.getAttribute("ItmId") != null) {
                MmSoItmVORowImpl createRow = (MmSoItmVORowImpl) mmSoItem.createRow();
                createRow.setAttribute("ItmId", itms.getAttribute("ItmId"));
                createRow.setAttribute("CurrentStk", itms.getAttribute("CrntStk"));
                createRow.setAttribute("ReqQty", itms.getAttribute("OrdQty"));
                createRow.setAttribute("ItmUom", itms.getAttribute("ItmUom"));
                mmSoItem.insertRow(createRow);
            }
        }
        iterator.closeRowSetIterator();


        Row[] soitmPoRows = mmSoItemPo.getFilteredRows("DocId", DocId.toString());
        if (soitmPoRows.length > 0) {
            for (Row r : soitmPoRows) {
                r.remove();
            }
        }
        mmSoItemPo.executeQuery();
        mmSoItem.executeQuery();
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }


    /**
     * Container's getter for PurReqItmQueryVO1.
     * @return PurReqItmQueryVO1
     */
    public ViewObjectImpl getPurReqItmQueryVO1() {
        return (ViewObjectImpl) findViewObject("PurReqItmQueryVO1");
    }


    public String genSoNumber() {
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}").toString();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}").toString();
        Row row = this.getMmSo().getCurrentRow();
        if (row.getAttribute("SoId") == null) {
            Integer fyId = (Integer) callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                        cldId, orgId, new Timestamp(System.currentTimeMillis())
            });
            String soId = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                                      slocid, cldId, orgId, "MM$SO", null, fyId
            });
            row.setAttribute("SoId", soId);
            return soId;
        } else
            return (String) row.getAttribute("SoId");
    }


    public Date getLastFyDate(String cldId, String orgId, Integer slocId) {
        java.sql.Date dt = (java.sql.Date) callStoredFunction(Types.DATE, "MM.MM_GET_LAST_OPN_FY_DATE(?,?,?)", new Object[] {
                                                              cldId, slocId, orgId
        });
        return new Date(dt);
    }

    /**
     * Container's getter for ViewRFQVO1.
     * @return ViewRFQVO1
     */
    public ViewObjectImpl getViewRFQVO1() {
        return (ViewObjectImpl) findViewObject("ViewRFQVO1");
    }


    public void clearAll() {
        ViewObjectImpl voSoItm = this.getMmSoItmVO2();
        RowSetIterator rst = voSoItm.createRowSetIterator(null);
        while (rst.hasNext()) {
            Row row = rst.next();
            row.setAttribute("TranCheck", false);
        }
        rst.closeRowSetIterator();
        voSoItm.executeQuery();
    }

    /**
     * Container's getter for MmSoItmVO2.
     * @return MmSoItmVO2
     */
    public MmSoItmVOImpl getMmSoItmVO2() {
        return (MmSoItmVOImpl) findViewObject("MmSoItmVO2");
    }

    /**
     * Container's getter for SoQueryVO1.
     * @return SoQueryVO1
     */
    public ViewObjectImpl getSoQueryVO1() {
        return (ViewObjectImpl) findViewObject("SoQueryVO1");
    }


    public Integer getPricePolcy(Integer eoId, String itmId) {
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Integer reply = (Integer) callStoredFunction(Types.INTEGER, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?)", new Object[] {
                                                     cldId, slocid, hoOrgId, orgId, eoId, itmId, "PO"
        });
        System.out.println("REPLY : " + reply);

        if (reply != null) {
            return reply;
        }
        return -1;
    }


    /**
     * Container's getter for SupplierPolicyVW.
     * @return SupplierPolicyVW
     */
    public ViewObjectImpl getSupplierPolicyVW() {
        return (ViewObjectImpl) findViewObject("SupplierPolicyVW");
    }

    /**
     * Container's getter for SoItemToSoSuppliersUserPolVL1.
     * @return SoItemToSoSuppliersUserPolVL1
     */
    public ViewLinkImpl getSoItemToSoSuppliersUserPolVL1() {
        return (ViewLinkImpl) findViewLink("SoItemToSoSuppliersUserPolVL1");
    }

    /**
     * Container's getter for LOVAutoSuggestItemsVO1.
     * @return LOVAutoSuggestItemsVO1
     */
    public ViewObjectImpl getLOVAutoSuggestItemsVO1() {
        return (ViewObjectImpl) findViewObject("LOVAutoSuggestItemsVO1");
    }

    /**
     * Method to get suggested Item in AutoSuggest.
     * @param itmStr
     * @return
     */
    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        ArrayList<String> h = new ArrayList<String>();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        //String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl autoSuggestVO = this.getLOVAutoSuggestItemsVO1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", cld_id);
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", slocId);
        autoSuggestVO.setNamedWhereClauseParam("OrgIdbind", orgId);
        // autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", hoOrg_id);
        autoSuggestVO.setNamedWhereClauseParam("ItmNmbind", itmStr);
        //  autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }

    public void filterMmSoGrp() {
        ViewObjectImpl grpVO = this.getMmSoGrpVO();
        ViewCriteria vc = grpVO.getViewCriteria("MmSoGrpVOCriteria");
        grpVO.applyViewCriteria(vc);
        grpVO.setNamedWhereClauseParam("BindSlocId", Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}")));
        grpVO.setNamedWhereClauseParam("BindCldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        grpVO.setNamedWhereClauseParam("BindOrgId", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        grpVO.executeQuery();

    }
}
