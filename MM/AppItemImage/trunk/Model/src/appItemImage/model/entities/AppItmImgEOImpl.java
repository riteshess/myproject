package appItemImage.model.entities;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;



import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.BFileDomain;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 05 13:42:15 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppItmImgEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        ItmId {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getItmId();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setItmId((String)value);
            }
        }
        ,
        ImgId {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getImgId();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setImgId((String)value);
            }
        }
        ,
        ImgFileNm {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getImgFileNm();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setImgFileNm((String)value);
            }
        }
        ,
        ImgFileType {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getImgFileType();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setImgFileType((String)value);
            }
        }
        ,
        ImgDflt {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getImgDflt();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setImgDflt((String)value);
            }
        }
        ,
        ImgDesc {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getImgDesc();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setImgDesc((String)value);
            }
        }
        ,
        ImgPath {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getImgPath();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setImgPath((String)value);
            }
        }
        ,
        ImgBlob {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getImgBlob();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setImgBlob((BlobDomain)value);
            }
        }
        ,
        ImgBfile {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getImgBfile();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setImgBfile((BFileDomain)value);
            }
        }
        ,
        Actv {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getActv();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setActv((String)value);
            }
        }
        ,
        InactvResn {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getInactvResn();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setInactvResn((String)value);
            }
        }
        ,
        InactvDt {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getInactvDt();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setInactvDt((Date)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setUsrIdModDt((Date)value);
            }
        }
        ,
        ItmImgEntId {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getItmImgEntId();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setItmImgEntId((Integer)value);
            }
        }
        ,
        CldId {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getCldId();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        HoOrgId {
            public Object get(AppItmImgEOImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(AppItmImgEOImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppItmImgEOImpl object);

        public abstract void put(AppItmImgEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int IMGID = AttributesEnum.ImgId.index();
    public static final int IMGFILENM = AttributesEnum.ImgFileNm.index();
    public static final int IMGFILETYPE = AttributesEnum.ImgFileType.index();
    public static final int IMGDFLT = AttributesEnum.ImgDflt.index();
    public static final int IMGDESC = AttributesEnum.ImgDesc.index();
    public static final int IMGPATH = AttributesEnum.ImgPath.index();
    public static final int IMGBLOB = AttributesEnum.ImgBlob.index();
    public static final int IMGBFILE = AttributesEnum.ImgBfile.index();
    public static final int ACTV = AttributesEnum.Actv.index();
    public static final int INACTVRESN = AttributesEnum.InactvResn.index();
    public static final int INACTVDT = AttributesEnum.InactvDt.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int ITMIMGENTID = AttributesEnum.ItmImgEntId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppItmImgEOImpl() {
    }


    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("appItemImage.model.entities.AppItmImgEO");
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ItmId, using the alias name ItmId.
     * @return the value of ItmId
     */
    public String getItmId() {
        return (String)getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmId.
     * @param value value to set the ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ImgId, using the alias name ImgId.
     * @return the value of ImgId
     */
    public String getImgId() {
        return (String)getAttributeInternal(IMGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImgId.
     * @param value value to set the ImgId
     */
    public void setImgId(String value) {
        setAttributeInternal(IMGID, value);
    }

    /**
     * Gets the attribute value for ImgFileNm, using the alias name ImgFileNm.
     * @return the value of ImgFileNm
     */
    public String getImgFileNm() {
        return (String)getAttributeInternal(IMGFILENM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImgFileNm.
     * @param value value to set the ImgFileNm
     */
    public void setImgFileNm(String value) {
        setAttributeInternal(IMGFILENM, value);
    }

    /**
     * Gets the attribute value for ImgFileType, using the alias name ImgFileType.
     * @return the value of ImgFileType
     */
    public String getImgFileType() {
        return (String)getAttributeInternal(IMGFILETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImgFileType.
     * @param value value to set the ImgFileType
     */
    public void setImgFileType(String value) {
        setAttributeInternal(IMGFILETYPE, value);
    }

    /**
     * Gets the attribute value for ImgDflt, using the alias name ImgDflt.
     * @return the value of ImgDflt
     */
    public String getImgDflt() {
        return (String)getAttributeInternal(IMGDFLT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImgDflt.
     * @param value value to set the ImgDflt
     */
    public void setImgDflt(String value) {
        setAttributeInternal(IMGDFLT, value);
    }

    /**
     * Gets the attribute value for ImgDesc, using the alias name ImgDesc.
     * @return the value of ImgDesc
     */
    public String getImgDesc() {
        return (String)getAttributeInternal(IMGDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImgDesc.
     * @param value value to set the ImgDesc
     */
    public void setImgDesc(String value) {
        setAttributeInternal(IMGDESC, value);
    }

    /**
     * Gets the attribute value for ImgPath, using the alias name ImgPath.
     * @return the value of ImgPath
     */
    public String getImgPath() {
        return (String)getAttributeInternal(IMGPATH);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImgPath.
     * @param value value to set the ImgPath
     */
    public void setImgPath(String value) {
        setAttributeInternal(IMGPATH, value);
    }

    /**
     * Gets the attribute value for ImgBlob, using the alias name ImgBlob.
     * @return the value of ImgBlob
     */
    public BlobDomain getImgBlob() {
        return (BlobDomain)getAttributeInternal(IMGBLOB);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImgBlob.
     * @param value value to set the ImgBlob
     */
    public void setImgBlob(BlobDomain value) {
        setAttributeInternal(IMGBLOB, value);
    }

    /**
     * Gets the attribute value for ImgBfile, using the alias name ImgBfile.
     * @return the value of ImgBfile
     */
    public BFileDomain getImgBfile() {
        return (BFileDomain)getAttributeInternal(IMGBFILE);
    }

    /**
     * Sets <code>value</code> as the attribute value for ImgBfile.
     * @param value value to set the ImgBfile
     */
    public void setImgBfile(BFileDomain value) {
        setAttributeInternal(IMGBFILE, value);
    }

    /**
     * Gets the attribute value for Actv, using the alias name Actv.
     * @return the value of Actv
     */
    public String getActv() {
        return (String)getAttributeInternal(ACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for Actv.
     * @param value value to set the Actv
     */
    public void setActv(String value) {
        setAttributeInternal(ACTV, value);
    }

    /**
     * Gets the attribute value for InactvResn, using the alias name InactvResn.
     * @return the value of InactvResn
     */
    public String getInactvResn() {
        return (String)getAttributeInternal(INACTVRESN);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactvResn.
     * @param value value to set the InactvResn
     */
    public void setInactvResn(String value) {
        setAttributeInternal(INACTVRESN, value);
    }

    /**
     * Gets the attribute value for InactvDt, using the alias name InactvDt.
     * @return the value of InactvDt
     */
    public Date getInactvDt() {
        return (Date)getAttributeInternal(INACTVDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for InactvDt.
     * @param value value to set the InactvDt
     */
    public void setInactvDt(Date value) {
        setAttributeInternal(INACTVDT, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Date getUsrIdCreateDt() {
        return (Date)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Date getUsrIdModDt() {
        return (Date)getAttributeInternal(USRIDMODDT);
    }
    
    public void setUsrIdModDt(Date value) {
        setAttributeInternal(USRIDMODDT, value);
    }
    /**
     * Gets the attribute value for ItmImgEntId, using the alias name ItmImgEntId.
     * @return the value of ItmImgEntId
     */
    public Integer getItmImgEntId() {
        return (Integer)getAttributeInternal(ITMIMGENTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmImgEntId.
     * @param value value to set the ItmImgEntId
     */
    public void setItmImgEntId(Integer value) {
        setAttributeInternal(ITMIMGENTID, value);
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String)getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }


    /**
     * @param slocId key constituent
     * @param itmId key constituent
     * @param imgId key constituent
     * @param cldId key constituent
     * @param hoOrgId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer slocId, String itmId, String imgId, String cldId, String hoOrgId) {
        return new Key(new Object[]{slocId, itmId, imgId, cldId, hoOrgId});
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
     private static int STRING = Types.VARCHAR;

     protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
         CallableStatement st = null;
         try {

             // 1. Create a JDBC CallabledStatement
             st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
             // 2. Register the first bind variable for the return value
             st.registerOutParameter(1, sqlReturnType);
             if (bindVars != null) {
                 // 3. Loop over values for the bind variables passed in, if any
                 for (int z = 0; z < bindVars.length; z++) {
                     // 4. Set the value of user-supplied bind vars in the stmt
                     st.setObject(z + 2, bindVars[z]);
                 }
             }
             // 5. Set the value of user-supplied bind vars in the stmt
             st.executeUpdate();
             // 6. Return the value of the first bind variable
             return st.getObject(1);
         } catch (SQLException e) {
             throw new JboException(e);
         } finally {
             if (st != null) {
                 try {
                     // 7. Close the statement
                     st.close();
                 } catch (SQLException e) {
                 }
             }
         }
     }

    
    
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        
       // String imgId =
          // (String)callStoredFunction(STRING, "APP.FN_APP_GEN_ID(?,?,?,?,?)", new Object[] {slocid,cldId,hoOrgId,null, "APP$ITM$IMG" });
        
        Integer UserId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        setUsrIdCreate(UserId);
        setHoOrgId(hoOrgId);
        setCldId(cldId);
        setSlocId(slocid);
       // setImgId(imgId);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
       // super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        
        if (operation == DML_UPDATE) {
            Integer UserId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
            setUsrIdMod(UserId);
           Date dt=(Date)Date.getCurrentDate(); 
           setUsrIdModDt(dt);
        }
       
        
        super.doDML(operation, e);
        
    }
    
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
}
