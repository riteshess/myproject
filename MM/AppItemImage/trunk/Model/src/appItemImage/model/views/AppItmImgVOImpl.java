package appItemImage.model.views;

import appItemImage.model.views.common.AppItmImgVO;

import java.io.File;

import javax.el.ELContext;

import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 04 15:25:48 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppItmImgVOImpl extends ViewObjectImpl implements AppItmImgVO {
    /**
     * This is the default constructor (do not remove).
     */
    public AppItmImgVOImpl() {
    }

    /**
     * Returns the variable value for SlocIdBindVar.
     * @return variable value for SlocIdBindVar
     */
    public Integer getSlocIdBindVar() {
        return (Integer)ensureVariableManager().getVariableValue("SlocIdBindVar");
    }

    /**
     * Sets <code>value</code> for variable SlocIdBindVar.
     * @param value value to bind as SlocIdBindVar
     */
    public void setSlocIdBindVar(Integer value) {
        ensureVariableManager().setVariableValue("SlocIdBindVar", value);
        this.executeQuery();
    }

    /**
     * Returns the variable value for ItemIdBindVar.
     * @return variable value for ItemIdBindVar
     */
    public String getItemIdBindVar() {
        return (String)ensureVariableManager().getVariableValue("ItemIdBindVar");
    }

    /**
     * Sets <code>value</code> for variable ItemIdBindVar.
     * @param value value to bind as ItemIdBindVar
     */
    public void setItemIdBindVar(String value) {
        ensureVariableManager().setVariableValue("ItemIdBindVar", value);
        this.executeQuery();
    }

    public void setBindVarVal(Integer SlocId, String ItemId,String cldId,String hoOrgId) {
        setSlocIdBindVar(SlocId);
        setItemIdBindVar(ItemId);
        setcldIdBind(cldId);
        sethoOrgIdBind(hoOrgId);
    }

    public void deleteImageDtl(String ImgId, Integer SlocId,String cldId,String hoOrg) {
        
         System.out.println("Sloc "+SlocId);
        System.out.println("cldId "+cldId);
        System.out.println("hoOrg "+hoOrg);
        System.out.println("ImgId "+ImgId);
        
        this.setWhereClause("HO_ORG_ID = '"+hoOrg+"' AND CLD_ID= '"+cldId+"'  AND SLOC_ID=" + SlocId + " AND IMG_ID='" + ImgId + "'");
        this.executeQuery();
        Row rw[] = this.getAllRowsInRange();
        for (Row r : rw) {
            r.remove();
        }

        this.setWhereClause(null);
        this.executeQuery();
    }


    /**
     * Returns the variable value for cldIdBind.
     * @return variable value for cldIdBind
     */
    public String getcldIdBind() {
        return (String)ensureVariableManager().getVariableValue("cldIdBind");
    }

    /**
     * Sets <code>value</code> for variable cldIdBind.
     * @param value value to bind as cldIdBind
     */
    public void setcldIdBind(String value) {
        ensureVariableManager().setVariableValue("cldIdBind", value);
    }

    /**
     * Returns the variable value for hoOrgIdBind.
     * @return variable value for hoOrgIdBind
     */
    public String gethoOrgIdBind() {
        return (String)ensureVariableManager().getVariableValue("hoOrgIdBind");
    }

    /**
     * Sets <code>value</code> for variable hoOrgIdBind.
     * @param value value to bind as hoOrgIdBind
     */
    public void sethoOrgIdBind(String value) {
        ensureVariableManager().setVariableValue("hoOrgIdBind", value);
    }
    
    public static Object evaluateEL(String el) {
    FacesContext facesContext = FacesContext.getCurrentInstance();
    ELContext elContext = facesContext.getELContext();
    ExpressionFactory expressionFactory =   facesContext.getApplication().getExpressionFactory();
    ValueExpression exp = expressionFactory.createValueExpression(elContext, el, Object.class);
    return exp.getValue(elContext);
    }
}
