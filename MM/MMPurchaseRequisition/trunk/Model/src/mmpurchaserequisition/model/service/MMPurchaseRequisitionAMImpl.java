package mmpurchaserequisition.model.service;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;


import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;


import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;

import mmpurchaserequisition.model.service.common.MMPurchaseRequisitionAM;
import mmpurchaserequisition.model.view.AppFlexFldVOImpl;
import mmpurchaserequisition.model.view.LovItmGrpVOImpl;
import mmpurchaserequisition.model.view.MmPrFlxVOImpl;
import mmpurchaserequisition.model.view.MmPrFlxVORowImpl;
import mmpurchaserequisition.model.view.MmPrItmVOImpl;
import mmpurchaserequisition.model.view.MmPrVOImpl;
import mmpurchaserequisition.model.view.ReqVOImpl;
import mmpurchaserequisition.model.view.SrchPRVOImpl;
import mmpurchaserequisition.model.view.WhVOImpl;
import mmpurchaserequisition.model.view.srchTrnsVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.JboSQLException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 14 17:03:34 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMPurchaseRequisitionAMImpl extends ApplicationModuleImpl implements MMPurchaseRequisitionAM {
    /**
     * This is the default constructor (do not remove).
     *
     *
     */
    private Integer fyid = 0;
    private static int NUMBER = Types.NUMERIC;
    private static int INTEGER = Types.INTEGER;
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    public static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MMPurchaseRequisitionAMImpl.class);
    public static int VARCHAR = Types.VARCHAR;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    public MMPurchaseRequisitionAMImpl() {
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;

    }

    /**
     * Container's getter for AttType1.
     * @return AttType1
     */
    public ViewObjectImpl getAttType1() {
        return (ViewObjectImpl) findViewObject("AttType1");
    }


    /**
     * Container's getter for MrsStatus1.
     * @return MrsStatus1
     */
    public ViewObjectImpl getMrsStatus1() {
        return (ViewObjectImpl) findViewObject("MrsStatus1");
    }

    /**
     * Container's getter for PRStatus1.
     * @return PRStatus1
     */
    public ViewObjectImpl getPRStatus1() {
        return (ViewObjectImpl) findViewObject("PRStatus1");
    }

    /**
     * Container's getter for Req1.
     * @return Req1
     */
    public ViewObjectImpl getReq1() {
        return (ViewObjectImpl) findViewObject("Req1");
    }

    /**
     * Container's getter for Wh1.
     * @return Wh1
     */
    public WhVOImpl getWh1() {
        return (WhVOImpl) findViewObject("Wh1");
    }

    /**
     * Container's getter for MmPr2.
     * @return MmPr2
     */
    public MmPrVOImpl getMmPr2() {
        return (MmPrVOImpl) findViewObject("MmPr2");
    }

    /**
     * Container's getter for MmPrItm2.
     * @return MmPrItm2
     */
    public MmPrItmVOImpl getMmPrItm2() {
        return (MmPrItmVOImpl) findViewObject("MmPrItm2");
    }

    /**
     * Container's getter for PrPrItmVL.
     * @return PrPrItmVL
     */
    public ViewLinkImpl getPrPrItmVL() {
        return (ViewLinkImpl) findViewLink("PrPrItmVL");
    }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl) findViewObject("Org1");
    }


    public void Commit_MM_PR_VO() {
        ADFLogger logger = ADFLogger.createADFLogger(MMPurchaseRequisitionAMImpl.class);
        ViewObjectImpl mmprVo = (ViewObjectImpl) getMmPr2();
        ViewObjectImpl mmprItmVo = (ViewObjectImpl) getMmPrItm2();
        ViewObjectImpl mmMrsVo = (ViewObjectImpl) getMrs1();
        try {

            this.getDBTransaction().commit();

        }

        catch (JboException ex) {
            String message = ex.getMessage();
            logger.info(message);

            this.getDBTransaction().rollback();
        }
    }

    public String evaluateEL(String el) {

        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, el, Object.class);
        String rtun = exp.getValue(elContext).toString();
        //  System.out.println("evaluateel returns " + rtun);
        return rtun;

    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }


    /**
     * Container's getter for test1.
     * @return test1
     */
    public ViewObjectImpl gettest1() {
        return (ViewObjectImpl) findViewObject("test1");
    }

    /**
     * Container's getter for MmMrsItm1.
     * @return MmMrsItm1
     */
    public ViewObjectImpl getMmMrsItm1() {
        return (ViewObjectImpl) findViewObject("MmMrsItm1");
    }


    public void setPrItems(String txnId) {
        ViewObjectImpl mrsItmVo = (ViewObjectImpl) getMmMrsItm1();
        ViewObjectImpl prItmVo = (ViewObjectImpl) getMmPrItm2();
        ViewObjectImpl prVo = getMmPr2();
        Row prRow = prVo.getCurrentRow();
        Row norows[] = prItmVo.getAllRowsInRange();
        if (norows != null && norows.length > 0) {
            for (Row row : norows) {
                // prItmVo.setCurrentRow(row);
                // prItmVo.removeCurrentRow();
                row.remove();
            }
        }

        Row rows[] = mrsItmVo.getFilteredRows("MrsTxnId", txnId);
        for (Row row : rows) {
            Row newRow = prItmVo.createRow();
            newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
            newRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));
            newRow.setAttribute("PrQty", row.getAttribute("PendQty"));
            newRow.setAttribute("PoQty", "");
            newRow.setAttribute("PendQty", row.getAttribute("PendQty"));

            newRow.setAttribute("CldId", prRow.getAttribute("CldId"));
            newRow.setAttribute("SlocId", prRow.getAttribute("SlocId"));
            newRow.setAttribute("OrgId", prRow.getAttribute("OrgId"));
            newRow.setAttribute("WhId", prRow.getAttribute("WhId"));
            newRow.setAttribute("PrTxnId", prRow.getAttribute("PrTxnId"));
            prItmVo.insertRow(newRow);
        }
        ViewObjectImpl mmMrsVo = (ViewObjectImpl) getMrs1();
        Row mrsrows[] = mmMrsVo.getFilteredRows("MrsTxnId", txnId);
        if (mrsrows != null && mrsrows.length == 1) {
            mrsrows[0].setAttribute("MrsStat", 295);
            prVo.getCurrentRow().setAttribute("ReqdDt", mrsrows[0].getAttribute("ReqdDt"));
        }


        mrsItmVo.executeQuery();
        prItmVo.executeQuery();

    }

    /**
     * Container's getter for ItmLOV1.
     * @return ItmLOV1
     */
    public ViewObjectImpl getItmLOV1() {
        return (ViewObjectImpl) findViewObject("ItmLOV1");
    }

    /**
     * Container's getter for Uom1.
     * @return Uom1
     */
    public ViewObjectImpl getUom1() {
        return (ViewObjectImpl) findViewObject("Uom1");
    }

    public boolean checkPendingQty(BigDecimal qty) {
        ViewObjectImpl prItmVo = getMmPrItm2();
        Row row = prItmVo.getCurrentRow();
        BigDecimal pendingqty = (BigDecimal) row.getAttribute("PrQty");

        if (pendingqty.compareTo(qty) == -1)
            return false;
        else
            return true;
    }

    public void updatePendingQty(BigDecimal quantity) {
        ViewObjectImpl prItmVo = getMmPrItm2();
        Row row = prItmVo.getCurrentRow();
        BigDecimal prqty = (BigDecimal) row.getAttribute("PrQty");
        row.setAttribute("PoQty", quantity);
        BigDecimal poQty = (BigDecimal) row.getAttribute("PoQty");

        if (prqty != null && poQty != null) {
            BigDecimal pendQty = prqty.subtract(poQty);
            row.setAttribute("PendQty", pendQty);
        } else {
            row.setAttribute("PendQty", 0);
        }
    }

    /**
     * Container's getter for Mrs1.
     * @return Mrs1
     */
    public ViewObjectImpl getMrs1() {
        return (ViewObjectImpl) findViewObject("Mrs1");
    }

    /**
     * Container's getter for srchTrns1.
     * @return srchTrns1
     */
    public srchTrnsVOImpl getsrchTrns1() {
        return (srchTrnsVOImpl) findViewObject("srchTrns1");
    }

    /**
     * Container's getter for PurReqMrs1.
     * @return PurReqMrs1
     */
    public ViewObjectImpl getPurReqMrs1() {
        return (ViewObjectImpl) findViewObject("PurReqMrs1");
    }

    public void search() {

        ADFLogger logger = ADFLogger.createADFLogger(MMPurchaseRequisitionAMImpl.class);

        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        try {
            ViewObjectImpl vo = (ViewObjectImpl) getSrchPR1();
            ViewCriteria vc = getSrchPR1().getViewCriteria("SrchPRVOCriteria");
            ViewObjectImpl trnsvo = (ViewObjectImpl) getsrchTrns1();
            Row trsrow = trnsvo.getCurrentRow();
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindPrNo", trsrow.getAttribute("PrNo"));
            vo.setNamedWhereClauseParam("bindPrType", trsrow.getAttribute("PrType"));
            vo.setNamedWhereClauseParam("bindSrcDocId", trsrow.getAttribute("PrSrc"));
            vo.setNamedWhereClauseParam("fromDate", trsrow.getAttribute("fromDate"));
            vo.setNamedWhereClauseParam("toDate", trsrow.getAttribute("toDate"));
            vo.setNamedWhereClauseParam("bindCldId", cldId);
            vo.setNamedWhereClauseParam("bindSlocId", slocId);
            vo.setNamedWhereClauseParam("bindOrgId", orgId);

            vo.setNamedWhereClauseParam("bindReqArea", trsrow.getAttribute("ReqId"));
            vo.setNamedWhereClauseParam("bindPrStat", trsrow.getAttribute("PRStat"));
            vo.setNamedWhereClauseParam("bindPrCatg", trsrow.getAttribute("TransPrCatg"));

            /*
            System.out.println(trsrow.getAttribute("PrNo"));
            System.out.println(trsrow.getAttribute("PrType"));
            System.out.println(trsrow.getAttribute("PrSrc"));

            System.out.println(trsrow.getAttribute("fromDate"));
            System.out.println(trsrow.getAttribute("toDate"));
            System.out.println(trsrow.getAttribute("ReqId"));
            System.out.println(trsrow.getAttribute("PRStat"));
     */
            vo.executeQuery();
        } catch (JboException ex) {
            logger.warning("On Search");
        }
    }


    public void resetAction() {

        ADFLogger logger = ADFLogger.createADFLogger(MMPurchaseRequisitionAMImpl.class);


        try {
            String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
            System.out.println("orgid is" + orgId);
            String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
            System.out.println("cldid is" + cldId);
            Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            ViewObjectImpl vo = (ViewObjectImpl) getSrchPR1();
            ViewCriteria vc = getSrchPR1().getViewCriteria("SrchPRVOCriteria");
            ViewObjectImpl trnsvo = (ViewObjectImpl) getsrchTrns1();
            Row trsrow = trnsvo.getCurrentRow();
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindPrNo", null);
            vo.setNamedWhereClauseParam("bindPrType", null);
            vo.setNamedWhereClauseParam("bindSrcDocId", null);
            vo.setNamedWhereClauseParam("fromDate", null);
            vo.setNamedWhereClauseParam("toDate", null);
            vo.setNamedWhereClauseParam("bindCldId", cldId);
            vo.setNamedWhereClauseParam("bindSlocId", slocId);
            vo.setNamedWhereClauseParam("bindOrgId", orgId);

            vo.setNamedWhereClauseParam("bindReqArea", null);
            vo.setNamedWhereClauseParam("bindPrStat", null);
            vo.setNamedWhereClauseParam("bindPrCatg", null);
            vo.executeQuery();
        } catch (NullPointerException NPE) {
            logger.warning("NULL");
        } catch (JboException ex) {
            logger.warning("On Reset");
        }
    }

    /**
     * Container's getter for SrchPR1.
     * @return SrchPR1
     */
    public SrchPRVOImpl getSrchPR1() {
        return (SrchPRVOImpl) findViewObject("SrchPR1");
    }


    /*  public void setCreateSrcStatus() {

        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        ViewObjectImpl vo = (ViewObjectImpl)getMrsStatus1();
        ViewCriteria vc= getMrsStatus1().getViewCriteria("MrsStatusVOCriteria");
      vo.applyViewCriteria(vc);
      vo.setNamedWhereClauseParam("bindCldId2", cldId);
      vo.setNamedWhereClauseParam("bindSlocId2",slocId);
      vo.setNamedWhereClauseParam("bindOrgId2", orgId);
        vo.setNamedWhereClauseParam("bindMrsStatus", 294);
      vo.executeQuery();
    }
 */

    public String getCurrentPrTnxId() {
        ViewObjectImpl vo = (ViewObjectImpl) getSrchPR1();
        Row row = vo.getCurrentRow();
        String PrTxID = (String) row.getAttribute("PrTxnId");
        return PrTxID;
    }

    public String getCurrentPrTnxIdTF() {
        String txnId = null;
        String txnMode = (String) evaluateEL("#{pageFlowScope.Txn_Mode}");
        if (txnMode.equals("C")) {
            txnId = null;
        }

        if (txnMode.equals("E")) {
            txnId = (String) evaluateEL("#{pageFlowScope.GLBL_PR_TXN_ID}");
            ViewObject vo = this.findViewObject("MmPr2");
            VariableValueManager vm = vo.ensureVariableManager();
            vm.setVariableValue("bindTxnId", txnId);
            vo.executeQuery();
        }

        return txnId;

    }


    public Integer getFYid() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        System.out.println("orgid is-------------->" + orgId);
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        System.out.println("cld id is --------------->" + cldId);
        Timestamp date = (Timestamp) this.getMmPr2().getCurrentRow().getAttribute("PrDt");
        System.out.println("timestamp date is" + date);
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     cldId, orgId, date
        }));
        ViewObjectImpl ge = this.getMmPr2();
        if (fyId != null) {
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        }

        return fyId;
    }


    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    protected Object callFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();

                }
            }
        }
    }


    public Integer on_load_page() {
        int count = 0;
        String cld_id = evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_USR}").toString());
        callFunction(VARCHAR, "APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)", new Object[] {
                     cld_id, sloc_id, org_id, 1, usr_id
        });
        String calledFrom = evaluateEL("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);

        return count;
    }

    public Integer getPRStatus() {
        ViewObject MmPrVo = this.findViewObject("MmPr2");
        Integer statValue = (Integer) MmPrVo.getCurrentRow().getAttribute("PrStat");
        return statValue;
    }

    public void checkUncheckAll(String tnxId, Boolean b, Integer prStatus) {

        ViewObjectImpl vo = (ViewObjectImpl) this.findViewObject("MmPrItm2");
        ViewObjectImpl MmPrVo = (ViewObjectImpl) this.findViewObject("MmPr2");

        String tnxscId = null;
        tnxscId = (String) MmPrVo.getCurrentRow().getAttribute("PrTxnId");
        System.out.println("txnid is " + tnxscId);
        String cld_id = evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //        String whId = resolvEl("#{pageFlowScope.WF_ID_PARAM}").toString();
        String whId = (String) MmPrVo.getCurrentRow().getAttribute("WhId");
        System.out.println("whid is:::::::::::::::::" + whId);
        MmPrVo.getCurrentRow().setAttribute("PrStat", prStatus);

        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId = '" + cld_id + "' AND OrgId = '" + org_id + "' AND SlocId = " + sloc_id +
                          " AND WhId = '" + whId + "' AND PrTxnId = '" + tnxscId + "'");
        Row rows[] = vo.getFilteredRows(rq);

        if (b) {
            for (Row row : rows) {
                BigDecimal pQty = (BigDecimal) row.getAttribute("PendQty");
                if (pQty.compareTo(BigDecimal.ZERO) == 0) {
                    row.setAttribute("CnclItm", 'N');
                } else {
                    row.setAttribute("CnclItm", 'Y');
                }
            }
        } else {
            for (Row row : rows) {
                row.setAttribute("CnclItm", 'N');
            }
        }
        MmPrVo.getCurrentRow().setAttribute("PrStatDt", new Timestamp(System.currentTimeMillis()));
        vo.executeQuery();

    }


    public boolean isAllCheckBoxMark() {
        ViewObjectImpl vo = (ViewObjectImpl) this.findViewObject("MmPrItm2");
        ViewObjectImpl MmPrVo = (ViewObjectImpl) this.findViewObject("MmPr2");

        String tnxscId = null;
        tnxscId = (String) MmPrVo.getCurrentRow().getAttribute("PrTxnId");
        String cld_id = evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String whId = (String) MmPrVo.getCurrentRow().getAttribute("WhId");


        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId = '" + cld_id + "' AND OrgId = '" + org_id + "' AND SlocId = " + sloc_id +
                          " AND WhId = '" + whId + "' AND PrTxnId = '" + tnxscId + "'");
        Row rows[] = vo.getFilteredRows(rq);


        Row currRow = vo.getCurrentRow();
        if (rows != null && rows.length > 0) {
            for (Row row : rows) {
                if (currRow != row) {
                    if (row.getAttribute("CnclItm").toString().equals("N"))
                        return false;
                }
            }
        }
        return true;
    }

    public void setStatus(Integer prStatus) {
        ViewObjectImpl MmPrVo = (ViewObjectImpl) this.findViewObject("MmPr2");
        MmPrVo.getCurrentRow().setAttribute("PrStat", prStatus);
    }


    public void executePR() {
        String cld_id = evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl vo = this.getSrchPR1();
        ViewCriteria vc = vo.getViewCriteria("SrchPRVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindOrgId", org_id);
        vo.setNamedWhereClauseParam("bindCldId", cld_id);
        vo.setNamedWhereClauseParam("bindSlocId", sloc_id);
        vo.executeQuery();

    }


    public String getModifiedUser() {
        ViewObjectImpl MrsVo = this.getMrs1();
        ViewObjectImpl PrsVo = this.getMmPr2();
        Row currRow = PrsVo.getCurrentRow();

        Object docId = currRow.getAttribute("DocIdSrc");
        if (docId != null) {
            Row row[] = MrsVo.getFilteredRows("MrsTxnId", docId);
            if (row.length > 0) {
                return String.valueOf(row[0].getAttribute("UsrIdMod"));
            }
        }
        return null;
    }


    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        adfLog.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            adfLog.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmPr2();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            adfLog.info("In case mode is validation");
        }
        return fyId;
    }

    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        Integer fyid = 0;
        adfLog.info(" Txn");
        System.out.println("TTXNN");
        Row currentRow = this.getMmPr2().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18514), new Integer(0)
        }));
        adfLog.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("PrTxnId", docId);
        currentRow.setAttribute("DocIdSrc", "0");
        currentRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("PrTxnDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdModDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("PrStat", new Integer(802));
        currentRow.setAttribute("PrCatg", new Integer(0));

        fyid = getFYid(CldId, OrgId, ts, "C");
        currentRow.setAttribute("FyId", fyid);
        if (resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}") != null) {
            String deft = resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
            currentRow.setAttribute("PrjId", deft);
        } else {
            currentRow.setAttribute("PrjId", "PROJ0000");
        }
        adfLog.info("fyid::" + fyid);
    }
    //Method to add the Items

    public String addMmPrItem() {

        Row r = this.getMmPr2().getCurrentRow();
        String itemid = (String) r.getAttribute("TransItmId");
        Integer prqty = (Integer) r.getAttribute("TransPrQty");
        String itmuom = (String) r.getAttribute("TransItmUom");
        ViewObjectImpl item = this.getMmPrItm2();
        Row rr = item.createRow();
        rr.setAttribute("PendQty", prqty);
        rr.setAttribute("PrQty", prqty);
        rr.setAttribute("PoQty", new Number(0));
        rr.setAttribute("CnclItm", "N");
        rr.setAttribute("ItmId", itemid);
        rr.setAttribute("ItmUom", itmuom);
        rr.setAttribute("UomConvFctr", new Integer(1));
        rr.setAttribute("PendQtyBs", prqty);
        rr.setAttribute("PoQtyBs", new Integer(0));
        rr.setAttribute("PrQtyBs", prqty);
        rr.setAttribute("ItmUomBs", itmuom);
        item.insertRow(rr);
        r.setAttribute("TransItmId", "");
        r.setAttribute("TransPrQty", "");
        return null;
    }


    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        adfLog.info("in the wfno");
        Integer type = (Integer) this.getMmPr2().getCurrentRow().getAttribute("PrCatg");
        try {
            /*    Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            }); */

            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, type
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }
    }

    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Integer type = (Integer) this.getMmPr2().getCurrentRow().getAttribute("PrCatg");
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, type
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getMmPr2().getCurrentRow().getAttribute("PrTxnId").toString();
        Integer type = (Integer) this.getMmPr2().getCurrentRow().getAttribute("PrCatg");

        // Integer DocNo1 = 23001;
        adfLog.info("DocNo-------" + DocNo + "  DocId----" + DocId + "  WfNo----" + WfNo + "DocNo1-----" + DocNo);
        Object obj = callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, type, WfNo, DocId, usr_idFrm, usr_idTo, levelFrm,
                                        levelTo, action, remark, amount
        });
        adfLog.info("function return a value inthe txn is " + obj);
        Integer temp = Integer.parseInt(obj.toString());
        return temp;

    }

    public String setauthStat(String wfreturn) {
        adfLog.info(" in the setauthStat");
        adfLog.info("wfreturn::" + wfreturn);

        Row curr = getMmPr2().getCurrentRow();
        //   String wfstat=resolvEl("#{pageFlowScope.wfReturn}");
        if ("A".equalsIgnoreCase(wfreturn)) {
            if (curr != null) {
                curr.setAttribute("AuthStat", "Y");
                curr.setAttribute("PrStat", 291);
                curr.setAttribute("DocIdSrc", "0");
                curr.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                //                curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
                //curr.setAttribute("AuthStatDt", new Timestamp(System.currentTimeMillis()));
                //adfLog.info("auth stat is "+curr.getAttribute("AuthStat")+" docStat is "+curr.getAttribute("DocStat"));
                try {
                    this.sendDataFromTempCcToPRCc();
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }
            }
        } else if ("F".equals(wfreturn)) {
            curr.setAttribute("PrStat", 803);
            curr.setAttribute("DocIdSrc", "0");
            curr.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
            //curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
        }
        return null;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getMmPr2().getCurrentRow().getAttribute("PrTxnId").toString();
        Integer prCtg = (Integer) this.getMmPr2().getCurrentRow().getAttribute("PrCatg");
        //System.out.println("DOCIDTXN--"+docIdTxn);
        // Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId });
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, prCtg
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }

    public String genPrNo() {
        Row cmRow = this.getMmPr2().getCurrentRow();
        String docNo = null;
        Integer docType = 0;
        adfLog.info("doctype is :" + docType);
        if (cmRow.getAttribute("SwapId") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            adfLog.info("Financial  year id:::" + fyid);
            String Whid = (String) cmRow.getAttribute("WhId");
            docNo = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                                SlocId, CldId, OrgId, "MM$PR", Whid, fyid
            });
            adfLog.info("new id    " + docNo);
            cmRow.setAttribute("PrNo", docNo);
        } else {
            docNo = cmRow.getAttribute("PrNo").toString();
        }
        return docNo;
    }

    public String ItemNameDuplicate() {

        if (this.getMmPrItm2().getCurrentRow() != null &&
            this.getMmPrItm2().getCurrentRow().getAttribute("ItmId") != null) {
            Row currItm = this.getMmPrItm2().getCurrentRow();
            String itemid = (String) currItm.getAttribute("ItmId");
            Number prQty = (Number) currItm.getAttribute("PrQty");

            if (prQty != null) {
                String docid = (String) currItm.getAttribute("PrTxnId"); //WhId
                String WhId = (String) currItm.getAttribute("WhId");
                adfLog.info("itemid" + itemid + "docid" + docid + "WhId" + WhId);
                RowQualifier rq = new RowQualifier(this.getMmPrItm2());
                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                  "' and PrTxnId='" + docid + "'and ItmId='" + itemid + "' and WhId='" + WhId + "'");
                Row[] fr = this.getMmPrItm2().getFilteredRows(rq);
                adfLog.info(rq.getExprStr() + "length" + fr.length);
                if (fr.length > 1) {
                    return "N";
                } else
                    return "Y";
            } else {
                showFacesMessage("Quantity is required .", "E", false, "F", null);
                return "N";
            }
        } else {
            showFacesMessage("Item name is required.", "E", false, "F", null);
            return "N";
        }
    }

    /**
     *      Method to show validation message(I,E,W)
     *      mesg:Message to display
     *      sev:Severity(I,E,W)
     *      chk:true=if resource bundle is used
     *      typFlg: 'F' for FM , 'V' for VE
     *      clientId : client id for UI component
     * */
    public void showFacesMessage(String mesg, String sev, Boolean chk, String typFlg, String clientId) {
        FacesMessage message = new FacesMessage(mesg);
        if (chk == true) {
            String msg = resolvEl("#{bundle['" + mesg + "']}");
            message = new FacesMessage(msg);
        }
        if (sev.equalsIgnoreCase("E")) {
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
        } else if (sev.equalsIgnoreCase("W")) {
            message.setSeverity(FacesMessage.SEVERITY_WARN);
        } else if (sev.equalsIgnoreCase("I")) {
            message.setSeverity(FacesMessage.SEVERITY_INFO);
        } else {
            message.setSeverity(FacesMessage.SEVERITY_INFO);
        }
        if (typFlg.equals("F")) {
            FacesContext.getCurrentInstance().addMessage(clientId, message);
        } else if (typFlg.equals("V")) {
            throw new ValidatorException(message);
        }
    }

    /**
     * Container's getter for LovItmNm1.
     * @return LovItmNm1
     */
    public ViewObjectImpl getLovItmNm1() {
        return (ViewObjectImpl) findViewObject("LovItmNm1");
    }


    /**
     * Container's getter for MmPrFlx3.
     * @return MmPrFlx3
     */
    public MmPrFlxVOImpl getMmPrFlx3() {
        return (MmPrFlxVOImpl) findViewObject("MmPrFlx3");
    }

    /**
     * Container's getter for MmPrFlx1.
     * @return MmPrFlx1
     */
    public MmPrFlxVOImpl getMmPrFlx() {
        return (MmPrFlxVOImpl) findViewObject("MmPrFlx");
    }

    /**
     * Container's getter for PrToPrFlxVL1.
     * @return PrToPrFlxVL1
     */
    public ViewLinkImpl getPrToPrFlxVL1() {
        return (ViewLinkImpl) findViewLink("PrToPrFlxVL1");
    }

    public String getFlexiFieldFilter() {

        Object typ = this.getMmPr2().getCurrentRow().getAttribute("PrCatg");
        System.out.println("in getFlexiFieldFilter method");
        ViewObjectImpl mmflex = this.getMmPrFlx();
        mmflex.executeQuery(); //updated on 27 aug
        ViewObjectImpl flex = this.getAppFlxFldInsrt();
        flex.setNamedWhereClauseParam("bindCldId", CldId);
        flex.setNamedWhereClauseParam("bindDocId", (Integer) 18514);
        flex.setNamedWhereClauseParam("bindTypeId", (typ != null ? Integer.parseInt(typ.toString()) : null));
        flex.executeQuery();

        //Integer count = flex.getRowCount();
        //System.out.println("total fields are" + count);
        //adfLog.info("no of field ::" + count);
        //adfLog.info("current row is " + this.getMmPrFlx().getCurrentRow());
        //System.out.println("current row is " + this.getMmPrFlx().getCurrentRow());
        //  RowSetIterator rr = flex.createRowSetIterator(null);
        Row[] rr = flex.getFilteredRows("DocId", new Integer(18514));

        System.out.println("lenth of row is" + rr.length);

        if (rr.length > 0) {
            for (Row r : rr) {
                adfLog.info("total no. of rows found " + r.getAttribute("FldId"));
                System.out.println("total no. of rows found " + r.getAttribute("FldId"));
                Row r1 = mmflex.createRow();
                r1.setAttribute("FldId", r.getAttribute("FldId"));
                mmflex.insertRow(r1);
            }
        }
        mmflex.executeQuery();
        //adfLog.info("count111::" + mmflex.getRowCount());
        return null;
    }

    /**
     * Container's getter for AppFlexFld.
     * @return AppFlexFld
     */

    public AppFlexFldVOImpl getAppFlexFld() {
        return (AppFlexFldVOImpl) findViewObject("AppFlexFld");
    }


    /**
     * Container's getter for AppFlexFld.
     * @return AppFlexFld
     */

    /**
     * Container's getter for MmPrFlx1.
     * @return MmPrFlx1
     */
    public MmPrFlxVOImpl getMmPrFlx1() {
        return (MmPrFlxVOImpl) findViewObject("MmPrFlx1");
    }

    /**
     * Container's getter for MmPrFlx2.
     * @return MmPrFlx2
     */
    public MmPrFlxVOImpl getMmPrFlx2() {
        return (MmPrFlxVOImpl) findViewObject("MmPrFlx2");
    }

    public String latestPriceUpdate() {
        /* Row curr=this.getMmPrItm2().getCurrentRow();
        Number price=new Number(0);
         if(curr.getAttribute("ItmId")!=null){
         BigDecimal pric = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_ITM_LATEST_PRICE (?,?,?,?,?,?)", new Object[] {
                                                    curr.getAttribute("CldId"), curr.getAttribute("OrgId"), curr.getAttribute("SlocId"),curr.getAttribute("TransHoOrgId"),curr.getAttribute("ItmId"),"P"
         }));
         adfLog.info("current price amount is "+price);
         //System.out.println("current latest price is "+pric);
         try{
             price=new Number(pric);
         }catch (Exception e){
             e.printStackTrace();
         }
         curr.setAttribute("ItmAmtBs", price);
            curr.setAttribute("ItmAmtBsCrnt", price);
        }  */
        return null;
    }

    /**
     * Container's getter for LovCoaItm1.
     * @return LovCoaItm1
     */
    public ViewObjectImpl getLovCoaItm() {
        return (ViewObjectImpl) findViewObject("LovCoaItm");
    }

    public void cancelPrAuth() {
        String wfret = resolvEl("#{pageFlowScope.wfReturn}");
        if (wfret.equalsIgnoreCase("A")) {
            MmPrVOImpl impl = this.getMmPr2(); //PrStatDt
            Integer prStat = (Integer) impl.getCurrentRow().getAttribute("PrStat");
            if (prStat.compareTo(291) == 0) {
                impl.getCurrentRow().setAttribute("PrStat", 342);
                this.getDBTransaction().commit();
                impl.getCurrentRow().setAttribute("PrStatDt", new Timestamp(System.currentTimeMillis()));
                //showFacesMessage("PRS Cancel Successfully ", "I", false, "F", null);
                FacesMessage message = new FacesMessage("PRS Cancel Successfully ");
                message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }
        }
    }

    public String valiadateBdgAmt() {
        Row curr = this.getMmPr2().getCurrentRow();
        ArrayList ar = new ArrayList();
        adfLog.info("current docid is " + curr.getAttribute("PrTxnId"));
        if (curr.getAttribute("PrTxnId") != null) {
            String docid = curr.getAttribute("PrTxnId").toString();

            Row[] rr = this.getMmPrItm2().getFilteredRows("PrTxnId", docid);
            adfLog.info("pr 2 length " + rr.length);

            if (rr.length > 0) {
                for (Row r : rr) {
                    Number baseAmt = (Number) r.getAttribute("ItmAmtBs");
                    Number bdjAmt = (Number) r.getAttribute("BdgAmtBal");
                    adfLog.info("total bdg amount comparison is " + bdjAmt.compareTo(baseAmt) + " " + bdjAmt);
                    if (bdjAmt.compareTo(baseAmt) == -1) {
                        ar.add(r.getAttribute("TransItmName"));
                    }

                }
            }
            StringBuilder str = new StringBuilder("<html><body>");
            //<b>some of Item exceeded the budget amount </b>
            str.append("<b>");
            str.append(resolvElO("#{bundle['MSG.2458']}").toString());
            str.append("</b>");
            str.append("<ul>");
            //str.append("<html><body>");
            for (Object obj : ar) {
                str.append("<b> <li>  " + obj + "  </li></b>");
            }
            str.append("</ul>");
            if (ar.size() > 0) {

                str.append("</body></html>");
                FacesMessage message = new FacesMessage(str.toString());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                // showFacesMessage("some of Item exceeded the budget amount "+ar+" "+str, "E", false, "F", null);
                return "N";
            } else {
                return "Y";
            }

        }
        return "N";

    }

    /**
     * Container's getter for AppFlxFldInsrt1.
     * @return AppFlxFldInsrt1
     */
    public ViewObjectImpl getAppFlxFldInsrt() {
        return (ViewObjectImpl) findViewObject("AppFlxFldInsrt");
    }

    public String isValidDocument() {
        String cld_id = evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     cld_id, org_id, new Timestamp(System.currentTimeMillis())
        }));
        System.out.println("and fyId: " + fyId);
        Object ob = callStoredFunction(Types.VARCHAR, "MM_CHK_FY_DATA_FOR_PR(?,?,?,?,?)", new Object[] {
                                       cld_id, sloc_id, org_id, 18514, fyId
        });
        System.out.println("called : " + ob);
        if (ob != null)
            return ob.toString();

        return "Y";
    }


    /**
     * Container's getter for MmPrAttchVO1.
     * @return MmPrAttchVO1
     */
    public ViewObjectImpl getMmPrAttchVO1() {
        return (ViewObjectImpl) findViewObject("MmPrAttchVO1");
    }

    /**
     * Container's getter for FkMmPrAttchVL1.
     * @return FkMmPrAttchVL1
     */
    public ViewLinkImpl getFkMmPrAttchVL1() {
        return (ViewLinkImpl) findViewLink("FkMmPrAttchVL1");
    }

    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String path = getUpFilePath(slocId);
        System.out.println("path " + path);

        String fileId = getUpFileId(cld_id, slocId, hoOrg_id, orgId);
        // _log.info("fileId " + fileId+"prev file length "+fileNm.length());
        if (fileNm != null && fileNm.length() > 49) {
            fileNm = fileNm.substring(0, Math.min(fileNm.length(), 49));

        }

        //String upToNCharacters = s.substring(0, Math.min(s.length(), n));
        //this.getMmPrAttchVO1()
        Row r = this.getMmPrAttchVO1().createRow();

        r.setAttribute("FlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("FlNm", fileId);
        r.setAttribute("FlPath", path + fileId + extn);

        getMmPrAttchVO1().insertRow(r);

        this.getDBTransaction().postChanges(); // Used this for increasing fileId else throws too many object error

        return path + fileId;
    }

    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MM$PR$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_APP_GEN_FILE_ATTCH_ID at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    // showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            // System.out.println("ERROR IN CALLING FUNCTION FN_GET_APP_DOC_ATTACH_PATH at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //  showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }
    /*  checking upload file is require or not before save and forwar*/
    public String chkAttchRqd() {
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

        Row currentRow = this.getMmPr2().getCurrentRow();

        Integer prType = (Integer) currentRow.getAttribute("PrCatg");
        String docId = (String) currentRow.getAttribute("PrTxnId");
        String retrn = null;
        if (prType != null && docId != null) {
            try {
                retrn = (String) (callStoredFunction(Types.VARCHAR, "app.FN_IS_ATTCH_REQD (?,?,?,?,?,?)", new Object[] {
                                                     paramCldId, paramSlocId, paramOrgId, new Integer(18514), prType,
                                                     docId
                }));
            } catch (JboSQLException e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        adfLog.info("-----return value-----" + docId + "  " + prType + "  " + retrn);
        return retrn;
    }

    //for cost center
    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDoc1() {
        return (ViewObjectImpl) findViewObject("AppCcDoc1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVw1() {
        return (ViewObjectImpl) findViewObject("AppCcVw1");
    }

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDoc1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 18514);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVw1();
        appCcVwVO1.setRangeSize(-1);
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        appCcVwVO1.setNamedWhereClauseParam("BindCldId", cld_id);
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", slocId);
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrg_id);
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", orgId);
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 18514);

        Row currentRow = this.getMmPrItm2().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                //System.out.println("----------all range in cost center-------"+allRowsInRange);
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getMmPrItm2().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            /*     System.out.println("j value is " + attributeDef[j].getColumnName());
                                System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                                System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                                   attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));

                       */if (attributeDef[j].getColumnName() != null &&
                             attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
           * @param cldId
           * @param slocId
           * @param hoOrgId
           * @param orgId
           * @param tempId
           * @param tempSrc
           * @param docId
           * @param usrId
           * @param tempCcId
           * @param amount
           * @param pCcLevel1
           * @param pCcLevel2
           * @param pCcLevel3
           * @param pCcLevel4
           * @param pCcLevel5
           */


            Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

            ViewObjectImpl impl = this.getMmPr2();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();


                amCC.generateCostCenterApp(CldId, SlocId, HoOrgId, OrgId, currentRow.getAttribute("PrTxnId").toString(),
                                           "H", 18514, usrId, currentRow.getAttribute("PrTxnId").toString(),
                                           new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                // System.out.println("-----------ccc--"+ (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"));
            }
        }
    }


    /**
     * Method which will call cost center bean
     */
    public void deleteCostCenterItem() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside delete method");
            ViewObjectImpl impl = this.getMmPrItm2();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    System.out.println("------------------ Not null");
                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_CLD_ID(),
                                       currentRow.getAttribute("PrTxnId").toString(), "L", 18514, usrId,
                                       currentRow.getAttribute("CcId").toString(), new Number(0),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                }
            }
            System.out.println("After calling delete method");
        }
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {

        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getMmPrItm2();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ItmAmtBs") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    this.declareGlblValuesForCC();

                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("PrTxnId").toString(), "L", 18514,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            (Number) currentRow.getAttribute("ItmAmtBs"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            // System.out.println("After calling Update method");
        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to MM$PR$COST$CENTER Table
     */
    public void sendDataFromTempCcToPRCc() {
        if (chkCcApplicableOrNot()) {
            /* callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 18514,
                               this.getMmPr2().getCurrentRow().getAttribute("PrTxnId")
            }); */

            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 18514, "MM",
                               "MM$PR$COST$CENTER", this.getMmPr2().getCurrentRow().getAttribute("PrTxnId")
            });
        }
    }


    public ArrayList validateFlexi() {
        ViewObject vo = this.getMmPrFlx();
        Integer prCatg = 0;
        if (this.getMmPr2().getCurrentRow().getAttribute("PrCatg") != null) {
            prCatg = (Integer) this.getMmPr2().getCurrentRow().getAttribute("PrCatg");
        }

        ViewObjectImpl vof = this.getAppFlxFldInsrt();
        vof.setNamedWhereClauseParam("bindDocId", 18514);
        vof.setNamedWhereClauseParam("bindCldId", CldId);
        vof.setNamedWhereClauseParam("bindTypeId", prCatg);
        vof.executeQuery();

        RowSetIterator iter = vo.createRowSetIterator(null);

        //    System.out.println("Row count is " + iter.getRowCount()+"---all range-- "+iter.getRangeSize()+" flxi vo "+vof.getRowCount());
        Integer countFldReq = 0;
        ArrayList<String> sb = new ArrayList<String>();
        while (iter.hasNext()) {
            MmPrFlxVORowImpl row = (MmPrFlxVORowImpl) iter.next();
            if (row.getTransFldReq() != null) {
                if (row.getTransFldReq().equalsIgnoreCase("Y") &&
                    (row.getFldVal() == null || row.getFldVal().toString().trim().length() == 0)) {
                    adfLog.info("-----------------1--------------");
                    countFldReq = countFldReq + 1;
                    RowQualifier rq = new RowQualifier(vof);
                    rq.setWhereClause("FldId = '" + row.getFldId() + "'");

                    //                Row[] r = row.getAppFlexFldVO1().getFilteredRows("FldId", row.getFldId());
                    Row[] r = vof.getFilteredRows(rq);
                    adfLog.info("------------->>>>>>>>>>>>>>>>>>>>" + r.length + " " + row.getFldId());
                    if (r.length > 0) {
                        for (Row rr : r) {
                            adfLog.info("Row name  is " + r.length + "  " + rr.getAttribute("FldNm").toString());

                            sb.add(rr.getAttribute("FldNm").toString());
                        }
                        //  return sb;
                    }
                }

            }

        }
        adfLog.info("-------return countFldReq-- " + countFldReq + " actual " + sb.size());
        return sb;
        //return null;
    }

    /**
     * Container's getter for AttchReqChk1.
     * @return AttchReqChk1
     */
    public ViewObjectImpl getAttchReqChk() {
        return (ViewObjectImpl) findViewObject("AttchReqChk");
    }

    /**
     * Container's getter for CCFinalChk1.
     * @return CCFinalChk1
     */
    public ViewObjectImpl getCCFinalChk() {
        return (ViewObjectImpl) findViewObject("CCFinalChk");
    }

    //check profit centre is finalize or not
    public String ccFinalizedCheck() {
        ViewObjectImpl ccvo = this.getCCFinalChk();
        ccvo.setNamedWhereClauseParam("BindCldId", CldId);
        ccvo.setNamedWhereClauseParam("BindSlocId", SlocId);
        ccvo.setNamedWhereClauseParam("BindOrgId", OrgId);
        ccvo.setNamedWhereClauseParam("BindHoOrgId", HoOrgId);
        ccvo.executeQuery();
        Row[] r = ccvo.getFilteredRows("CcPrfDocId", new Integer(18514));
        if (r.length > 0) {
            adfLog.info("cc finalized --- " + r[0].getAttribute("CcFinalize"));
            return "Y";
        } else
            return "N";
    }


    /** getting top level user id of worklow.
     * */
    public String getTopWFUsr() {
        Row currentRow = this.getMmPr2().getCurrentRow();
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        Integer prType = (Integer) currentRow.getAttribute("PrCatg");
        String docId = (String) currentRow.getAttribute("PrTxnId");
        String retrn = "N";
        if (docId != null) {
            try {
                retrn = (String) (callStoredFunction(Types.VARCHAR, "app.WF_GET_USR_TOP_LVL (?,?,?,?,?,?)", new Object[] {
                                                     SlocId, CldId, OrgId, new Integer(18514), prType, UsrId
                }));
            } catch (JboSQLException e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        adfLog.info("-----return value from getting top usr-----" + docId + "  " + "---" + prType + "  " + retrn +
                    " UsrId " + usrId + " " + UsrId);
        return retrn;
    }

    /**
     * Container's getter for LovItmGrp1.
     * @return LovItmGrp1
     */
    public LovItmGrpVOImpl getLovItmGrp1() {
        return (LovItmGrpVOImpl) findViewObject("LovItmGrp1");
    }
    
    
    public String viewWFData(){
        if(this.getMmPr2().getCurrentRow()!=null){
           // WF_GET_DOC_FLOW(P_SLOC_ID NUMBER , P_ORG_ID VARCHAR2 , P_CLD_ID VARCHAR2 , P_DOC_ID NUMBER , P_TXN_DOC_ID VARCHAR2)
            try{
                adfLog.info("Doc Id "+ this.getMmPr2().getCurrentRow().getAttribute("PrTxnId"));
                Object ob = callStoredFunction(Types.VARCHAR, "APP.WF_GET_DOC_FLOW(?,?,?,?,?)", new Object[] {
                                                this.getMmPr2().getCurrentRow().getAttribute("SlocId"),this.getMmPr2().getCurrentRow().getAttribute("OrgId"),
                                               this.getMmPr2().getCurrentRow().getAttribute("CldId"), 18514, this.getMmPr2().getCurrentRow().getAttribute("PrTxnId")
                });
                adfLog.info("ob    "+ob);
                if(ob!=null){
                    return ob.toString();
                }else{
             return "Document Not In WF";                
                }
            }catch(Exception e){
                e.printStackTrace();
                return "Document Not In WF";
            }
            
           
            
        }else{
            return "Document Not In WF";
        }
    }
}
