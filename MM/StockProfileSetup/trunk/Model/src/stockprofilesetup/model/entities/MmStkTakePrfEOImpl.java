package stockprofilesetup.model.entities;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 04 12:02:22 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmStkTakePrfEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getCldId();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        PrfId {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getPrfId();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setPrfId((String)value);
            }
        }
        ,
        PrfNm {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getPrfNm();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setPrfNm((String)value);
            }
        }
        ,
        PrfDesc {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getPrfDesc();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setPrfDesc((String)value);
            }
        }
        ,
        PrfDflt {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getPrfDflt();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setPrfDflt((String)value);
            }
        }
        ,
        StkTakeCycle {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getStkTakeCycle();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setStkTakeCycle((Integer)value);
            }
        }
        ,
        StkTakeCycleMnths {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getStkTakeCycleMnths();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setStkTakeCycleMnths((Float)value);
            }
        }
        ,
        MtlSelCrt {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getMtlSelCrt();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setMtlSelCrt((Integer)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Timestamp)value);
            }
        }
        ,
        UsrIdMod {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(MmStkTakePrfEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(MmStkTakePrfEOImpl obj, Object value) {
                obj.setUsrIdModDt((Timestamp)value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmStkTakePrfEOImpl object);

        public abstract void put(MmStkTakePrfEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int PRFID = AttributesEnum.PrfId.index();
    public static final int PRFNM = AttributesEnum.PrfNm.index();
    public static final int PRFDESC = AttributesEnum.PrfDesc.index();
    public static final int PRFDFLT = AttributesEnum.PrfDflt.index();
    public static final int STKTAKECYCLE = AttributesEnum.StkTakeCycle.index();
    public static final int STKTAKECYCLEMNTHS = AttributesEnum.StkTakeCycleMnths.index();
    public static final int MTLSELCRT = AttributesEnum.MtlSelCrt.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmStkTakePrfEOImpl() {
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for PrfId, using the alias name PrfId.
     * @return the value of PrfId
     */
    public String getPrfId() {
        return (String)getAttributeInternal(PRFID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrfId.
     * @param value value to set the PrfId
     */
    public void setPrfId(String value) {
        setAttributeInternal(PRFID, value);
    }

    /**
     * Gets the attribute value for PrfNm, using the alias name PrfNm.
     * @return the value of PrfNm
     */
    public String getPrfNm() {
        return (String)getAttributeInternal(PRFNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrfNm.
     * @param value value to set the PrfNm
     */
    public void setPrfNm(String value) {
        setAttributeInternal(PRFNM, value);
    }

    /**
     * Gets the attribute value for PrfDesc, using the alias name PrfDesc.
     * @return the value of PrfDesc
     */
    public String getPrfDesc() {
        return (String)getAttributeInternal(PRFDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrfDesc.
     * @param value value to set the PrfDesc
     */
    public void setPrfDesc(String value) {
        setAttributeInternal(PRFDESC, value);
    }

    /**
     * Gets the attribute value for PrfDflt, using the alias name PrfDflt.
     * @return the value of PrfDflt
     */
    public String getPrfDflt() {
        return (String)getAttributeInternal(PRFDFLT);
    }

    /**
     * Sets <code>value</code> as the attribute value for PrfDflt.
     * @param value value to set the PrfDflt
     */
    public void setPrfDflt(String value) {
        setAttributeInternal(PRFDFLT, value);
    }

    /**
     * Gets the attribute value for StkTakeCycle, using the alias name StkTakeCycle.
     * @return the value of StkTakeCycle
     */
    public Integer getStkTakeCycle() {
        return (Integer)getAttributeInternal(STKTAKECYCLE);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkTakeCycle.
     * @param value value to set the StkTakeCycle
     */
    public void setStkTakeCycle(Integer value) {
        setAttributeInternal(STKTAKECYCLE, value);
    }

    /**
     * Gets the attribute value for StkTakeCycleMnths, using the alias name StkTakeCycleMnths.
     * @return the value of StkTakeCycleMnths
     */
    public Float getStkTakeCycleMnths() {
        return (Float)getAttributeInternal(STKTAKECYCLEMNTHS);
    }

    /**
     * Sets <code>value</code> as the attribute value for StkTakeCycleMnths.
     * @param value value to set the StkTakeCycleMnths
     */
    public void setStkTakeCycleMnths(Float value) {
        setAttributeInternal(STKTAKECYCLEMNTHS, value);
    }

    /**
     * Gets the attribute value for MtlSelCrt, using the alias name MtlSelCrt.
     * @return the value of MtlSelCrt
     */
    public Integer getMtlSelCrt() {
        return (Integer)getAttributeInternal(MTLSELCRT);
    }

    /**
     * Sets <code>value</code> as the attribute value for MtlSelCrt.
     * @param value value to set the MtlSelCrt
     */
    public void setMtlSelCrt(Integer value) {
        setAttributeInternal(MTLSELCRT, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param prfId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String prfId) {
        return new Key(new Object[]{cldId, slocId, orgId, prfId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("stockprofilesetup.model.entities.MmStkTakePrfEO");
    }
    
    public String resolvEl(String data){
       FacesContext fc = FacesContext.getCurrentInstance();
       Application app = fc.getApplication();
       ExpressionFactory elFactory = app.getExpressionFactory();
       ELContext elContext = fc.getELContext();
       ValueExpression valueExp = elFactory.createValueExpression(elContext, data,
       Object.class);
       String Message=valueExp.getValue(elContext).toString();
       return Message;
       }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        
               String cldid=resolvEl1("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
               String orgid=resolvEl1("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
               Integer slocid=Integer.parseInt(resolvEl1("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
               Integer userid = Integer.parseInt(resolvEl1("#{pageFlowScope.GLBL_APP_USR}").toString());
               setCldId(cldid);
               setSlocId(slocid);
               setOrgId(orgid);
               setUsrIdCreate(userid);
             
               setUsrIdCreate(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
               setUsrIdCreateDt(new Timestamp(System.currentTimeMillis()));
        
        super.create(attributeList);
    }
    public String resolvEl1(String data) {
               FacesContext fc = FacesContext.getCurrentInstance();
               Application app = fc.getApplication();
               ExpressionFactory elFactory = app.getExpressionFactory();
               ELContext elContext = fc.getELContext();
               ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
               String Message = valueExp.getValue(elContext).toString();
               return Message;
           }
       protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
               CallableStatement st = null;
               try {
                   
                   st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                   st.registerOutParameter(1, sqlReturnType);
                   if (bindVars != null) {
                       for (int z = 0; z < bindVars.length; z++) {
                           st.setObject(z + 2, bindVars[z]);
                           
                       }
                   }
                   st.executeUpdate();
                   return st.getObject(1);
               } catch (SQLException e) {
                   throw new JboException(e);
               } finally {
                   if (st != null) {
                       try {
                           st.close();
                       } catch (SQLException e) {
                           e.printStackTrace();
                       }
                   }
               }
           }


    /**
     * Add locking logic here.
     */
    public void lock() {
       // super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
       // System.out.println(operation);
        String cldid=resolvEl1("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgid=resolvEl1("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer slocid=Integer.parseInt(resolvEl1("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        if(operation == DML_INSERT)
        {
            String prf_id = (String)callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?)", new Object[] {slocid,cldid,orgid,"MM$STK$TAKE$PRF"});
        setPrfId(prf_id);
        }
        
        if(operation == DML_UPDATE){
            setUsrIdMod(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
            setUsrIdModDt(new Timestamp(System.currentTimeMillis()));
        }
            super.doDML(operation, e);

       
    }
}
