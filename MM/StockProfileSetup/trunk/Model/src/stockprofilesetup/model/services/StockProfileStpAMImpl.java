package stockprofilesetup.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;

import stockprofilesetup.model.services.common.StockProfileStpAM;
import stockprofilesetup.model.view.MmStkTakePrfVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 04 12:58:37 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class StockProfileStpAMImpl extends ApplicationModuleImpl implements StockProfileStpAM {
    /**
     * This is the default constructor (do not remove).
     */
    public StockProfileStpAMImpl() {
    }

    /**
     * Container's getter for MmStkTakePrf1.
     * @return MmStkTakePrf1
     */
    public MmStkTakePrfVOImpl getMmStkTakePrf1() {
        return (MmStkTakePrfVOImpl) findViewObject("MmStkTakePrf1");
    }

    public String prfdflt() {
        String flag = "N";
        ViewObjectImpl vo = this.getMmStkTakePrf1();
        ViewObjectImpl vonew = this.getMmStkTakePrf3();
        Row currR = vo.getCurrentRow();
        String cldId = currR.getAttribute("CldId").toString();
        int slocId = Integer.parseInt(currR.getAttribute("SlocId").toString());
        String orgId = currR.getAttribute("OrgId").toString();
        RowQualifier rowQualifier = new RowQualifier(vonew);
        String def = "Y";
        rowQualifier.setWhereClause("CldId='" + cldId + "' AND SlocId= " + slocId + " AND OrgId='" + orgId +
                                    "' and PrfDflt = '" + def + "' ");
        Row[] filteredRows = vonew.getFilteredRows(rowQualifier);
        if (filteredRows.length == 0) {
            flag = "N";
        } else if (filteredRows.length == 1) {
            flag = "Y";
        } else if (filteredRows.length > 1) {
            for (Row r : filteredRows) {
                if (r != currR) {
                    r.setAttribute("PrfDflt", "N");
                } else {
                    r.setAttribute("PrfDflt", "Y");
                }
            }
            currR.setAttribute("PrfDflt", "Y");
            flag = "Y";
        }
        return flag;
    }

    public String resolvEl1(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    public void searchCriteria(String prfName) {
        ViewObjectImpl prfVo = this.getMmStkTakePrf1();
        ViewCriteria vc = prfVo.getViewCriteria("MmStkTakePrfVOCriteria1");
        prfVo.applyViewCriteria(vc);
        prfVo.setNamedWhereClauseParam("nameBindVar", prfName);
        prfVo.executeQuery();
        ;


    }

    public void resetAction() {
        ViewObject prfVo = this.getMmStkTakePrf1();
        prfVo.setNamedWhereClauseParam("nameBindVar", null);
        prfVo.executeQuery();

        ViewObject prf2Vo = this.getMmStkTakePrf2();
        prf2Vo.setNamedWhereClauseParam("nameBindVar", null);
        // prf2Vo.getCurrentRow().setAttribute(arg0, arg1);
        prf2Vo.executeQuery();


    }

    public void stkPrfCriteria() {
        //MmStkTakePrfVOCriteria2
        String cldid = resolvEl1("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgid = resolvEl1("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer slocid = Integer.parseInt(resolvEl1("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        ViewObjectImpl vo = this.getMmStkTakePrf1();
        ViewCriteria vc = vo.getViewCriteria("MmStkTakePrfVOCriteria2");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("cldIdBind", cldid);
        vo.setNamedWhereClauseParam("orgIdBind", orgid);
        vo.setNamedWhereClauseParam("slocIdBind", slocid);
        vo.executeQuery();
    }

    public String isStkDeletable() {
        Row currRow = this.getMmStkTakePrf1().getCurrentRow();
        String isStkOutput = null;
        if (currRow != null) {
            String cldId = currRow.getAttribute("CldId").toString();
            String orgId = currRow.getAttribute("OrgId").toString();
            Integer slocId = Integer.parseInt(currRow.getAttribute("SlocId").toString());
            String prfId = currRow.getAttribute("PrfId").toString();
            isStkOutput = (String) (callStoredFunction(Types.VARCHAR, "MM_IS_STK_TAKE_PRF_DELETABLE(?,?,?,?)", new Object[] {
                                                       cldId, slocId, orgId, prfId
            }));
        }
        return isStkOutput;
    }

    /**
     * Container's getter for MmStkTakePrf2.
     * @return MmStkTakePrf2
     */
    public MmStkTakePrfVOImpl getMmStkTakePrf2() {
        return (MmStkTakePrfVOImpl) findViewObject("MmStkTakePrf2");
    }

    /**
     * Container's getter for MmStkTakePrf3.
     * @return MmStkTakePrf3
     */
    public MmStkTakePrfVOImpl getMmStkTakePrf3() {
        return (MmStkTakePrfVOImpl) findViewObject("MmStkTakePrf3");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);

                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for StockTakeRemarks1.
     * @return StockTakeRemarks1
     */
    public ViewObjectImpl getStockTakeRemarks1() {
        return (ViewObjectImpl) findViewObject("StockTakeRemarks1");
    }

    public String setVariableInRemarks() {
        String orgid = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        System.out.println("orgid in variable" + orgid);
        String cldid = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        System.out.println("cldid in variable" + cldid);
        Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        System.out.println("slocid in variable" + slocid);
        Row currentRow = this.getStockTakeRemarks1().getCurrentRow();
        currentRow.setAttribute("CldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        currentRow.setAttribute("OrgId", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        currentRow.setAttribute("SlocId", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String var = (String) (callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?)", new Object[] {
                                                  slocid, cldid, orgid, "MM.STK$TAKE$REMARK"
        }));
        return var;
    }
}
