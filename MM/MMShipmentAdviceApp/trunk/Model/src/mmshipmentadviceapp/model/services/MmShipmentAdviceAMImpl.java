package mmshipmentadviceapp.model.services;


import adf.utils.ebiz.EbizParams;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmshipmentadviceapp.model.services.common.MmShipmentAdviceAM;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 30 11:44:56 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmShipmentAdviceAMImpl extends ApplicationModuleImpl implements MmShipmentAdviceAM {
    /**
     * This is the default constructor (do not remove).
     */

    public static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MmShipmentAdviceAMImpl.class);
    private Integer fyid = null;

    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    private static int NUMBER = Types.NUMERIC;
    private static int INTEGER = Types.INTEGER;

    public MmShipmentAdviceAMImpl() {
    }

    /**
     * Container's getter for MmShpAdvc1.
     * @return MmShpAdvc1
     */
    public ViewObjectImpl getMmShpAdvc1() {
        return (ViewObjectImpl) findViewObject("MmShpAdvc1");
    }


    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        adfLog.info(" Txn");
        Row currentRow = this.getMmShpAdvc1().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18538), new Integer(0)
        }));
        adfLog.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdModDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("DocStat", new Integer(811));

        fyid = getFYid(CldId, OrgId, ts, "A");


    }

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        adfLog.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            adfLog.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmShpAdvc1();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            adfLog.info("In case mode is validation");
        }
        return fyId;
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Container's getter for MmShpAdvcItm1.
     * @return MmShpAdvcItm1
     */
    public ViewObjectImpl getMmShpAdvcItm1() {
        return (ViewObjectImpl) findViewObject("MmShpAdvcItm1");
    }

    /**
     * Container's getter for MmShdAdvcToMmShdAdvcItmVL1.
     * @return MmShdAdvcToMmShdAdvcItmVL1
     */
    public ViewLinkImpl getMmShdAdvcToMmShdAdvcItmVL1() {
        return (ViewLinkImpl) findViewLink("MmShdAdvcToMmShdAdvcItmVL1");
    }

    public String getFlexiFieldFilter() {
        ViewObjectImpl shpflex = this.getMmShpAdvcFlx2();
        ViewObjectImpl flex = this.getAppFlxFld1();
        flex.setNamedWhereClauseParam("bindCldId", CldId);
        flex.setNamedWhereClauseParam("bindDocId", 18538);
        flex.executeQuery();

        Integer count = flex.getRowCount();
        adfLog.info("no of field ::" + count);
        adfLog.info("current row is " + this.getMmShpAdvc1().getCurrentRow());
        //  RowSetIterator rr = flex.createRowSetIterator(null);
        Row[] rr = flex.getFilteredRows("DocId", new Number(18538));

        if (rr.length > 0) {
            for (Row r : rr) {
                adfLog.info("total no. of rows found " + r.getAttribute("FldId"));
                Row r1 = shpflex.createRow();
                r1.setAttribute("FldId", r.getAttribute("FldId"));
                shpflex.insertRow(r);
            }
        }
        shpflex.executeQuery();

        /* while (rr.hasNext()) {
            Row r1 = rr.next();
            String fldid = (String) r1.getAttribute("FldId");
            Row r = shpflex.createRow();
            /*    r.setAttribute("CldId", EbizParams.GLBL_APP_CLD_ID());
            r.setAttribute("SlocId", EbizParams.GLBL_APP_SERV_LOC());
            r.setAttribute("OrgId", EbizParams.GLBL_APP_SERV_LOC());
            r.setAttribute("DocId", this.getMmShpAdvc1().getCurrentRow().getAttribute("DocId"));

            r.setAttribute("FldId", fldid);
            shpflex.insertRow(r);

        }
        rr.closeRowSetIterator();
         */
        // this.getDBTransaction().postChanges();


        adfLog.info("count111::" + shpflex.getRowCount());
        return null;
    }

    /**
     * Container's getter for AppFlxFld1.
     * @return AppFlxFld1
     */
    public ViewObjectImpl getAppFlxFld1() {
        return (ViewObjectImpl) findViewObject("AppFlxFld1");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;

    }


    /**
     * Container's getter for MmShpAdvcFlx2.
     * @return MmShpAdvcFlx2
     */
    public ViewObjectImpl getMmShpAdvcFlx2() {
        return (ViewObjectImpl) findViewObject("MmShpAdvcFlx2");
    }

    /**
     * Container's getter for MmShpAdvcToMmShpAdvcFlxVL1.
     * @return MmShpAdvcToMmShpAdvcFlxVL1
     */
    public ViewLinkImpl getMmShpAdvcToMmShpAdvcFlxVL1() {
        return (ViewLinkImpl) findViewLink("MmShpAdvcToMmShpAdvcFlxVL1");
    }

    public String populatePoitem() {
        String podocid = null;
        adfLog.info("in the populate po Method");
        String cldId = this.getMmShpAdvc1().getCurrentRow().getAttribute("CldId").toString();
        Integer slocId = Integer.parseInt(this.getMmShpAdvc1().getCurrentRow().getAttribute("SlocId").toString());
        String orgId = this.getMmShpAdvc1().getCurrentRow().getAttribute("OrgId").toString();
        String docid = this.getMmShpAdvc1().getCurrentRow().getAttribute("DocId").toString(); //DocIdPo
        String docidpo = this.getMmShpAdvc1().getCurrentRow().getAttribute("DocIdPo").toString();
        Integer schno = Integer.parseInt(this.getMmShpAdvc1().getCurrentRow().getAttribute("DlvSchdlNo").toString());
        Integer usrid = Integer.parseInt(this.getMmShpAdvc1().getCurrentRow().getAttribute("UsrIdCreate").toString());
        adfLog.info("cldId:" + EbizParams.GLBL_APP_CLD_ID() + " sloc:" + EbizParams.GLBL_APP_SERV_LOC() + " orgId:" +
                    EbizParams.GLBL_APP_USR_ORG() + "docid:" + docid + "usrid:" + EbizParams.GLBL_APP_USR() +
                    "docidpo" + docidpo + "schno:" + schno);

        //        this.getLovPo1().setNamedWhereClauseParam("BindSlocId", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //        this.getLovPo1().setNamedWhereClauseParam("BindCldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        //        this.getLovPo1().setNamedWhereClauseParam("BindOrgId",resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        //        this.getLovPo1().executeQuery();
        //        Row r[] = this.getLovPo1().getFilteredRows("AuthPoNo", Po_No);
        //        if (r.length > 0) {
        //            podocid = r[0].getAttribute("DocId").toString();
        //        }
        //        adfLog.info("length" + r.length);
        this.getDBTransaction().postChanges();
        //        adfLog.info("CldId:" + cldId + " " + "SlocId :" + slocId + " " + "OrgId :" + orgId + " " + "DocId: " + docid +
        //                    " User Id:" + usrid + " " + "PoDocId:" + podocid);
        String result = (String) (callStoredFunction(Types.VARCHAR, "MM.MM_INS_SHP_ADVC_FRM_PO(?,?,?,?,?,?,?)", new Object[] {
                                                     EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                     EbizParams.GLBL_APP_USR_ORG(), docid, docidpo, schno,
                                                     EbizParams.GLBL_APP_USR()
        }));

        adfLog.info("result   :::  " + result);
        this.getMmShpAdvcItm1().executeQuery();
        // this.getMmIpoIdfItm1().executeQuery();
        return result;

    }

    public String genShipNo() {
        Row cmRow = this.getMmShpAdvc1().getCurrentRow();
        String docNo = null;
        Integer docType = 0;
        adfLog.info("doctype is :" + docType);
        if (cmRow.getAttribute("ShpAdvNo") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            adfLog.info("Financial  year id:::" + fyid);
            //String Whid = (String) cmRow.getAttribute("WhId");
            docNo = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                                SlocId, CldId, OrgId, "MM$SHP$ADVC", null, fyid
            });
            adfLog.info("new id    " + docNo);
            cmRow.setAttribute("ShpAdvNo", docNo);
        } else {
            docNo = cmRow.getAttribute("ShpAdvNo").toString();
        }
        return docNo;
    }

    public void searchShipment() {
        adfLog.info("in the searchship");
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        // Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        adfLog.info("CldId:" + cldId + " " + "SlocId:" + slocId + " OrgId:" + orgId);
        ViewObjectImpl srchvo = this.getSearchShip1();
        Row curr = getTransSearch1().getCurrentRow();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);
        adfLog.info("doc state " + curr.getAttribute("TransDocStat") + " " + curr.getAttribute("TransToDt") + " " +
                    curr.getAttribute("TransFromDt"));
        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", curr.getAttribute("TransDocStat"));
            srchvo.setNamedWhereClauseParam("bindTodt", curr.getAttribute("TransToDt"));
            srchvo.setNamedWhereClauseParam("binddocno", curr.getAttribute("TransDocNo"));
            srchvo.setNamedWhereClauseParam("binfFrmdt", curr.getAttribute("TransFromDt"));
            srchvo.setNamedWhereClauseParam("bindPoId", curr.getAttribute("TransPoNo"));
            srchvo.setNamedWhereClauseParam("bindfileno", curr.getAttribute("TransFileNo"));
            srchvo.executeQuery();
        }

        srchvo.executeQuery();
    }

    public void resetShipment() {
        ViewObjectImpl srchvo = this.getSearchShip1();
        Row curr = getTransSearch1().getCurrentRow();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);

        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", null);
            srchvo.setNamedWhereClauseParam("bindTodt", null);
            srchvo.setNamedWhereClauseParam("binfFrmdt", null);
            srchvo.setNamedWhereClauseParam("bindPoId", null);
        }
        srchvo.executeQuery();
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public ViewObjectImpl getTransSearch1() {
        return (ViewObjectImpl) findViewObject("TransSearch1");
    }

    /**
     * Container's getter for SearchShip1.
     * @return SearchShip1
     */
    public ViewObjectImpl getSearchShip1() {
        return (ViewObjectImpl) findViewObject("SearchShip1");
    }

    public void getShipView(String CldId, Integer SlocId, String OrgId, String docId) {
        adfLog.info("inside view getShipView  " + CldId + "  " + SlocId + "    " + OrgId + "  " + docId);
        ViewObjectImpl vo = this.getMmShpAdvc1();
        ViewCriteria vc = vo.getViewCriteria("MmShpAdvcVOCriteria"); //SvcCmWoVOCriteria
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("BindCldId", CldId);
        vo.setNamedWhereClauseParam("BindSlocId", SlocId);
        vo.setNamedWhereClauseParam("BindOrgId", OrgId);
        vo.setNamedWhereClauseParam("BindDocId", docId);
        vo.executeQuery();

    }

    /**
     * Container's getter for LovPoId1.
     * @return LovPoId1
     */
    public ViewObjectImpl getLovPoId1() {
        return (ViewObjectImpl) findViewObject("LovPoId1");
    }

    /**
     * Container's getter for LovEoIdShp1.
     * @return LovEoIdShp1
     */
    public ViewObjectImpl getLovEoIdShp1() {
        return (ViewObjectImpl) findViewObject("LovEoIdShp1");
    }


    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        try {
            adfLog.info("in the getWfNo");
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }


    public String setauthStat(String wfreturn) {
        Row curr = getMmShpAdvc1().getCurrentRow();
        //   String wfstat=resolvEl("#{pageFlowScope.wfReturn}");
        if ("A".equalsIgnoreCase(wfreturn)) {
            if (curr != null) {
                curr.setAttribute("AuthStat", "Y");
                curr.setAttribute("DocStat", 813);
                //curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
                //curr.setAttribute("AuthStatDt", new Timestamp(System.currentTimeMillis()));
                //adfLog.info("auth stat is "+curr.getAttribute("AuthStat")+" docStat is "+curr.getAttribute("DocStat"));
            }
        } else if ("F".equals(wfreturn)) {
            curr.setAttribute("DocStat", 812);
            //curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
        }
        return null;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getMmShpAdvc1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        // Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId });
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, 0
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }

    public String getUsrNm(Integer usrId) {
        ViewObjectImpl usrvo = this.getLovUsrIdVO1();
        String usrname = null;
        if (usrId != null) {
            Row[] rr = usrvo.getFilteredRows("UsrId", usrId);
            if (rr.length > 0) {
                usrname = rr[0].getAttribute("UsrName").toString();
                return rr[0].getAttribute("UsrName").toString();
            }
        }

        return usrname;
        //        return null;
    }

    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getMmShpAdvc1().getCurrentRow().getAttribute("DocId").toString();

        // Integer DocNo1 = 23001;
        adfLog.info("DocNo-------" + DocNo + "  DocId----" + DocId + "  WfNo----" + WfNo + "DocNo1-----" + DocNo);
        Object obj = callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo, levelFrm,
                                        levelTo, action, remark, amount
        });
        adfLog.info("function return a value inthe txn is " + obj);
        Integer temp = Integer.parseInt(obj.toString());
        return temp;

    }

    /**
     * Container's getter for OrgMmPrf1.
     * @return OrgMmPrf1
     */
    public ViewObjectImpl getOrgMmPrf1() {
        return (ViewObjectImpl) findViewObject("OrgMmPrf1");
    }

    public String checkDelvrySchfrmPrf() {
        String schdl = "N";
        ViewObjectImpl prf = this.getOrgMmPrf1();
        prf.setNamedWhereClauseParam("bindCldId", EbizParams.GLBL_APP_CLD_ID());
        prf.setNamedWhereClauseParam("bindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        prf.setNamedWhereClauseParam("bindOrgId", EbizParams.GLBL_APP_USR_ORG());
        prf.executeQuery();
        Row rr[] = prf.getAllRowsInRange();
        if (rr[0].getAttribute("ChkDlvQtyTlrnc") != null) {
            schdl = (String) rr[0].getAttribute("ChkDlvQtyTlrnc");
        }
        adfLog.info("Value dlslqty::" + schdl);
        return schdl;
    }

    public String checkToleranceQuantity(Number val) {
        adfLog.info("in the checkToleranceQuantity");
        String type = "A";
        Number TlrncQtyVal = new Number(0);

        ViewObjectImpl drft = this.getMmDrftPoDlvSchdl1();
        ViewObjectImpl advcItm1 = this.getMmShpAdvcItm1();
        Row rr3 = advcItm1.getCurrentRow();
        String itmid = (String) rr3.getAttribute("ItmId");
        String itmUom = (String) rr3.getAttribute("ItmUom");
        Number ordqty = (Number) rr3.getAttribute("OrdQty");
        adfLog.info("itmid::" + itmid + "itmuom:: " + itmUom + "ordqty::" + ordqty + " val::" + val);
        if (itmid != null && itmUom != null && ordqty != null && val != null) {
            adfLog.info("itmid::" + itmid + "itmuom:: " + itmUom + "ordqty::" + ordqty + " val::" + val);
            ViewObjectImpl advc = this.getMmShpAdvc1();
            Row rr = this.getMmShpAdvc1().getCurrentRow();
            String docid = (String) rr.getAttribute("DocId");
            String docidpo = (String) rr.getAttribute("DocIdPo");
            Integer dlvschdl = (Integer) rr.getAttribute("DlvSchdlNo");
            adfLog.info("docid::" + docid + "docidpo" + docidpo + "dlvschdl::" + dlvschdl);
            RowQualifier rq = new RowQualifier(drft);
            rq.setWhereClause("SlocId =" + SlocId + " and OrgId ='" + OrgId + "' and CldId ='" + CldId +
                              "' and DocId ='" + docidpo + "' and ItmId ='" + itmid + "' and DlvSchdlNo = " + dlvschdl +
                              " and ItmUom ='" + itmUom + "'");

            Row[] rr1 = drft.getFilteredRows(rq);
            adfLog.info("expr" + rq.getExprStr() + "length::" + rr1.length);
            if (rr1.length > 0) {
                if (rr1[0].getAttribute("TlrncQtyType") != null) {
                    type = (String) rr1[0].getAttribute("TlrncQtyType");
                }
                adfLog.info("type::" + type);

                if (type.equals("A")) {
                    if (rr1[0].getAttribute("TlrncQtyVal") != null) {
                        TlrncQtyVal = (Number) rr1[0].getAttribute("TlrncQtyVal");
                    }
                    adfLog.info("VAlue::" + TlrncQtyVal);
                    Number min = ordqty.subtract(TlrncQtyVal);
                    Number max = ordqty.add(TlrncQtyVal);
                    adfLog.info("in the A" + min + "" + max);
                    if ((val.compareTo(min) == 1) && (val.compareTo(max) == -1))
                        return "Y";
                    if ((val.compareTo(min) == 0) || (val.compareTo(max) == 0))
                        return "Y";


                } else {
                    if (rr1[0].getAttribute("TlrncQtyVal") != null) {
                        TlrncQtyVal = (Number) rr1[0].getAttribute("TlrncQtyVal");
                    }
                    adfLog.info("in P:" + TlrncQtyVal);
                    Number percent = (Number) TlrncQtyVal.mul(TlrncQtyVal.divide(new Number(100)));
                    Number min = ordqty.subtract(percent);
                    Number max = ordqty.add(percent);
                    adfLog.info("in the P" + min + "" + max);
                    if ((val.compareTo(min) == 1) && (val.compareTo(max) == -1))
                        return "Y";
                    if ((val.compareTo(min) == 0) || (val.compareTo(max) == 0))
                        return "Y";


                }
            }
        }
        return "N";
    }

    /**
     * Container's getter for MmDrftPoDlvSchdl1.
     * @return MmDrftPoDlvSchdl1
     */
    public ViewObjectImpl getMmDrftPoDlvSchdl1() {
        return (ViewObjectImpl) findViewObject("MmDrftPoDlvSchdl1");
    }

    /**
     * Container's getter for LovEoIdShp2.
     * @return LovEoIdShp2
     */
    public ViewObjectImpl getLovEoIdShp2() {
        return (ViewObjectImpl) findViewObject("LovEoIdShp2");
    }

    /**
     * Container's getter for LovPONoVO1.
     * @return LovPONoVO1
     */
    public ViewObjectImpl getLovPONoVO1() {
        return (ViewObjectImpl) findViewObject("LovPONoVO1");
    }

    //Method to check Departure Date is not greater than the Arrival Date.
    public String dateValidate() {
        Timestamp etd = (Timestamp) this.getMmShpAdvc1().getCurrentRow().getAttribute("Etd");
        Timestamp eta = (Timestamp) this.getMmShpAdvc1().getCurrentRow().getAttribute("Eta");
        if (etd != null && eta != null) {
            java.sql.Date etddate = new java.sql.Date(etd.getTime());
            java.sql.Date etadate = new java.sql.Date(eta.getTime());
            //            if (etddate.compareTo(etadate) == -1) {
            if (etddate.compareTo(etadate) <= 0) {
                return "N";
            }
        }
        return "Y";
    }

    //Method to valdiate the shipped quantity  when the Profile Flag is "N"
    public String checkTolQty(Number val) {
        adfLog.info("in the checkTolQty");
        ViewObjectImpl advcItm1 = this.getMmShpAdvcItm1();
        Row rr3 = advcItm1.getCurrentRow();
        Number ordqty = (Number) rr3.getAttribute("OrdQty");
        adfLog.info("-----checkTolQty qty-- " + ordqty + " val " + val);
        if (ordqty.compareTo(val) == -1) {
            return "N";
        }
        return "Y";
    }

    /**
     * Container's getter for AppFlxFldVO1.
     * @return AppFlxFldVO1
     */
    public ViewObjectImpl getAppFlxFldVO1() {
        return (ViewObjectImpl) findViewObject("AppFlxFldVO1");
    }

    /**
     * Container's getter for LovUsrIdVO1.
     * @return LovUsrIdVO1
     */
    public ViewObjectImpl getLovUsrIdVO1() {
        return (ViewObjectImpl) findViewObject("LovUsrIdVO1");
    }

    public Integer checkQtyValidator() {
        ViewObjectImpl vo = this.getMmShpAdvc1();
        ViewObjectImpl voItm = this.getMmShpAdvcItm1();
        Row rr = vo.getCurrentRow();
        int count = 0;
        if (rr != null) {
            // String chkT = this.checkDelvrySchfrmPrf();
            String chkT = "N";
            String docId = rr.getAttribute("DocId").toString();
            RowQualifier rq = new RowQualifier(voItm);
            rq.setWhereClause("DocId ='" + docId + "'");
            Row[] rqRow = voItm.getFilteredRows(rq);
            adfLog.info(rq.getExprStr() + "  roww " + rqRow.length);
            if (rqRow.length > 0) {
                for (Row r : rqRow) {
                    if (r.getAttribute("ShpQty") != null) {
                        Number shipQty = (Number) r.getAttribute("ShpQty");
                        Number ordQty = (Number) r.getAttribute("OrdQty");
                        if ("Y".equalsIgnoreCase(chkT)) {
                            String chkTqty = this.checkToleranceQuantity(shipQty);
                            if ("N".equalsIgnoreCase(chkTqty)) {
                                count = count + 1;
                                break;
                            }
                        } else if ("N".equalsIgnoreCase(chkT)) {

                            /* String chkTqtyNew = this.checkTolQty(shipQty);
                            adfLog.info("-----return from checkTolQty " + chkTqtyNew);
                              if ("N".equalsIgnoreCase(chkTqtyNew)) {
                                count = count + 1;
                                break;
                            } */
                            if (ordQty.compareTo(shipQty) != 0) {
                                count = count + 1;
                                break;
                            }
                        }
                    } else {
                        count = count + 1;
                        break;
                    }
                }
            }
        }
        return count;
    }

    /**
     * Container's getter for LovSuppNmDisp1.
     * @return LovSuppNmDisp1
     */
    public ViewObjectImpl getLovSuppNmDisp1() {
        return (ViewObjectImpl) findViewObject("LovSuppNmDisp1");
    }
}

