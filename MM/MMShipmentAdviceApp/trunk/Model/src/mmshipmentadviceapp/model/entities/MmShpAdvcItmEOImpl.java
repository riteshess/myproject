package mmshipmentadviceapp.model.entities;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 03 19:34:52 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmShpAdvcItmEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        DocId,
        ItmId,
        ItmUom,
        OrdQty,
        ShpQty,
        ItmPriceSp,
        ItmCostSp,
        ItmPriceBs,
        ItmCostBs,
        MmShpAdvc;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int ORDQTY = AttributesEnum.OrdQty.index();
    public static final int SHPQTY = AttributesEnum.ShpQty.index();
    public static final int ITMPRICESP = AttributesEnum.ItmPriceSp.index();
    public static final int ITMCOSTSP = AttributesEnum.ItmCostSp.index();
    public static final int ITMPRICEBS = AttributesEnum.ItmPriceBs.index();
    public static final int ITMCOSTBS = AttributesEnum.ItmCostBs.index();
    public static final int MMSHPADVC = AttributesEnum.MmShpAdvc.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmShpAdvcItmEOImpl() {
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for ItmId, using the alias name ItmId.
     * @return the value of ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmId.
     * @param value value to set the ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ItmUom, using the alias name ItmUom.
     * @return the value of ItmUom
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmUom.
     * @param value value to set the ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for OrdQty, using the alias name OrdQty.
     * @return the value of OrdQty
     */
    public Number getOrdQty() {
        return (Number) getAttributeInternal(ORDQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrdQty.
     * @param value value to set the OrdQty
     */
    public void setOrdQty(Number value) {
        setAttributeInternal(ORDQTY, value);
    }

    /**
     * Gets the attribute value for ShpQty, using the alias name ShpQty.
     * @return the value of ShpQty
     */
    public Number getShpQty() {
        return (Number) getAttributeInternal(SHPQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ShpQty.
     * @param value value to set the ShpQty
     */
    public void setShpQty(Number value) {
        setAttributeInternal(SHPQTY, value);
    }

    /**
     * Gets the attribute value for ItmPriceSp, using the alias name ItmPriceSp.
     * @return the value of ItmPriceSp
     */
    public Number getItmPriceSp() {
        return (Number) getAttributeInternal(ITMPRICESP);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmPriceSp.
     * @param value value to set the ItmPriceSp
     */
    public void setItmPriceSp(Number value) {
        setAttributeInternal(ITMPRICESP, value);
    }

    /**
     * Gets the attribute value for ItmCostSp, using the alias name ItmCostSp.
     * @return the value of ItmCostSp
     */
    public Number getItmCostSp() {
        return (Number) getAttributeInternal(ITMCOSTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmCostSp.
     * @param value value to set the ItmCostSp
     */
    public void setItmCostSp(Number value) {
        setAttributeInternal(ITMCOSTSP, value);
    }

    /**
     * Gets the attribute value for ItmPriceBs, using the alias name ItmPriceBs.
     * @return the value of ItmPriceBs
     */
    public Number getItmPriceBs() {
        return (Number) getAttributeInternal(ITMPRICEBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmPriceBs.
     * @param value value to set the ItmPriceBs
     */
    public void setItmPriceBs(Number value) {
        setAttributeInternal(ITMPRICEBS, value);
    }

    /**
     * Gets the attribute value for ItmCostBs, using the alias name ItmCostBs.
     * @return the value of ItmCostBs
     */
    public Number getItmCostBs() {
        return (Number) getAttributeInternal(ITMCOSTBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmCostBs.
     * @param value value to set the ItmCostBs
     */
    public void setItmCostBs(Number value) {
        setAttributeInternal(ITMCOSTBS, value);
    }

    /**
     * @return the associated entity MmShpAdvcEOImpl.
     */
    public MmShpAdvcEOImpl getMmShpAdvc() {
        return (MmShpAdvcEOImpl) getAttributeInternal(MMSHPADVC);
    }

    /**
     * Sets <code>value</code> as the associated entity MmShpAdvcEOImpl.
     */
    public void setMmShpAdvc(MmShpAdvcEOImpl value) {
        setAttributeInternal(MMSHPADVC, value);
    }

    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param docId key constituent
     * @param itmId key constituent
     * @param itmUom key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String docId, String itmId,
                                       String itmUom) {
        return new Key(new Object[] { cldId, slocId, orgId, docId, itmId, itmUom });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mmshipmentadviceapp.model.entities.MmShpAdvcItmEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        // super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

