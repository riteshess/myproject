package mmkitproduction.model.view;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmkitproduction.model.entities.MmKitProdItmStkEOImpl;

import mmkitproduction.model.services.MMKitProductionAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 04 14:51:15 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmKitProdItmStkORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMKITPRODITMSTKEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        BinId {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getBinId();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setBinId((String)value);
            }
        }
        ,
        CldId {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        DocId {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setDocId((String)value);
            }
        }
        ,
        IpItmId {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getIpItmId();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setIpItmId((String)value);
            }
        }
        ,
        IpItmUom {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getIpItmUom();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setIpItmUom((String)value);
            }
        }
        ,
        LotId {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getLotId();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setLotId((String)value);
            }
        }
        ,
        OkQty {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getOkQty();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setOkQty((Number)value);
            }
        }
        ,
        OpItmId {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getOpItmId();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setOpItmId((String)value);
            }
        }
        ,
        OpSrNo {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getOpSrNo();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setOpSrNo((String)value);
            }
        }
        ,
        OrgId {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        SrNo {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getSrNo();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setSrNo((String)value);
            }
        }
        ,
        StkActn {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getStkActn();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setStkActn((String)value);
            }
        }
        ,
        TotQty {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getTotQty();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setTotQty((Number)value);
            }
        }
        ,
        WhId {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getWhId();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setWhId((String)value);
            }
        }
        ,
        RwkQty {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getRwkQty();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setRwkQty((Number)value);
            }
        }
        ,
        ScrpQty {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getScrpQty();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setScrpQty((Number)value);
            }
        }
        ,
        SrNoTrans {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getSrNoTrans();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setSrNoTrans((String)value);
            }
        }
        ,
        strSqwitcher {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getstrSqwitcher();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setstrSqwitcher((String)value);
            }
        }
        ,
        lotTransSwitcher {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getlotTransSwitcher();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setlotTransSwitcher((String)value);
            }
        }
        ,
        LotIdTrans {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getLotIdTrans();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setLotIdTrans((String)value);
            }
        }
        ,
        LotIdTransSwitcher {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getLotIdTransSwitcher();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setLotIdTransSwitcher((String)value);
            }
        }
        ,
        InptItmQtyTrans {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getInptItmQtyTrans();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setInptItmQtyTrans((Number)value);
            }
        }
        ,
        BinSwitcher {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getBinSwitcher();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setBinSwitcher((String)value);
            }
        }
        ,
        MMStkSummInptLotVO1 {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getMMStkSummInptLotVO1();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MMStkSummBinVO1 {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getMMStkSummBinVO1();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MMStkSummSrVO1 {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getMMStkSummSrVO1();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        InputItmDetailVO1 {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getInputItmDetailVO1();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmKitProdItmStkO1 {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getMmKitProdItmStkO1();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovMmKirProdLotVO1 {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getLovMmKirProdLotVO1();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovMmKirProdLotVO {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getLovMmKirProdLotVO();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovMmKitProdVwForNonSrVO {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getLovMmKitProdVwForNonSrVO();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVSummBinDsmntVO {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getLOVSummBinDsmntVO();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVItmStkDsmntBinVO {
            public Object get(MmKitProdItmStkORowImpl obj) {
                return obj.getLOVItmStkDsmntBinVO();
            }

            public void put(MmKitProdItmStkORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmKitProdItmStkORowImpl object);

        public abstract void put(MmKitProdItmStkORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int BINID = AttributesEnum.BinId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int IPITMID = AttributesEnum.IpItmId.index();
    public static final int IPITMUOM = AttributesEnum.IpItmUom.index();
    public static final int LOTID = AttributesEnum.LotId.index();
    public static final int OKQTY = AttributesEnum.OkQty.index();
    public static final int OPITMID = AttributesEnum.OpItmId.index();
    public static final int OPSRNO = AttributesEnum.OpSrNo.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int SRNO = AttributesEnum.SrNo.index();
    public static final int STKACTN = AttributesEnum.StkActn.index();
    public static final int TOTQTY = AttributesEnum.TotQty.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int RWKQTY = AttributesEnum.RwkQty.index();
    public static final int SCRPQTY = AttributesEnum.ScrpQty.index();
    public static final int SRNOTRANS = AttributesEnum.SrNoTrans.index();
    public static final int STRSQWITCHER = AttributesEnum.strSqwitcher.index();
    public static final int LOTTRANSSWITCHER = AttributesEnum.lotTransSwitcher.index();
    public static final int LOTIDTRANS = AttributesEnum.LotIdTrans.index();
    public static final int LOTIDTRANSSWITCHER = AttributesEnum.LotIdTransSwitcher.index();
    public static final int INPTITMQTYTRANS = AttributesEnum.InptItmQtyTrans.index();
    public static final int BINSWITCHER = AttributesEnum.BinSwitcher.index();
    public static final int MMSTKSUMMINPTLOTVO1 = AttributesEnum.MMStkSummInptLotVO1.index();
    public static final int MMSTKSUMMBINVO1 = AttributesEnum.MMStkSummBinVO1.index();
    public static final int MMSTKSUMMSRVO1 = AttributesEnum.MMStkSummSrVO1.index();
    public static final int INPUTITMDETAILVO1 = AttributesEnum.InputItmDetailVO1.index();
    public static final int MMKITPRODITMSTKO1 = AttributesEnum.MmKitProdItmStkO1.index();
    public static final int LOVMMKIRPRODLOTVO1 = AttributesEnum.LovMmKirProdLotVO1.index();
    public static final int LOVMMKIRPRODLOTVO = AttributesEnum.LovMmKirProdLotVO.index();
    public static final int LOVMMKITPRODVWFORNONSRVO = AttributesEnum.LovMmKitProdVwForNonSrVO.index();
    public static final int LOVSUMMBINDSMNTVO = AttributesEnum.LOVSummBinDsmntVO.index();
    public static final int LOVITMSTKDSMNTBINVO = AttributesEnum.LOVItmStkDsmntBinVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmKitProdItmStkORowImpl() {
    }

    /**
     * Gets MmKitProdItmStkEO entity object.
     * @return the MmKitProdItmStkEO
     */
    public MmKitProdItmStkEOImpl getMmKitProdItmStkEO() {
        return (MmKitProdItmStkEOImpl)getEntity(ENTITY_MMKITPRODITMSTKEO);
    }

    /**
     * Gets the attribute value for BIN_ID using the alias name BinId.
     * @return the BIN_ID
     */
    public String getBinId() {
       // if(getAttributeInternal(BINID)!=null){
        return (String) getAttributeInternal(BINID);
       /*  }else{
            return "0";
        } */
    }

    /**
     * Sets <code>value</code> as attribute value for BIN_ID using the alias name BinId.
     * @param value value to set the BIN_ID
     */
    public void setBinId(String value) {
        setAttributeInternal(BINID, value);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for IP_ITM_ID using the alias name IpItmId.
     * @return the IP_ITM_ID
     */
    public String getIpItmId() {
        return (String) getAttributeInternal(IPITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for IP_ITM_ID using the alias name IpItmId.
     * @param value value to set the IP_ITM_ID
     */
    public void setIpItmId(String value) {
        setAttributeInternal(IPITMID, value);
    }

    /**
     * Gets the attribute value for IP_ITM_UOM using the alias name IpItmUom.
     * @return the IP_ITM_UOM
     */
    public String getIpItmUom() {
        return (String) getAttributeInternal(IPITMUOM);
    }

    /**
     * Sets <code>value</code> as attribute value for IP_ITM_UOM using the alias name IpItmUom.
     * @param value value to set the IP_ITM_UOM
     */
    public void setIpItmUom(String value) {
        setAttributeInternal(IPITMUOM, value);
    }

    /**
     * Gets the attribute value for LOT_ID using the alias name LotId.
     * @return the LOT_ID
     */
    public String getLotId() {
        return (String) getAttributeInternal(LOTID);
    }

    /**
     * Sets <code>value</code> as attribute value for LOT_ID using the alias name LotId.
     * @param value value to set the LOT_ID
     */
    public void setLotId(String value) {
        setAttributeInternal(LOTID, value);
    }

    /**
     * Gets the attribute value for OK_QTY using the alias name OkQty.
     * @return the OK_QTY
     */
    public Number getOkQty() {
      
       
       /*  else if(new Number(1).compareTo((Number)getAttributeInternal(OKQTY))==0){
            String srflg="";
            MMKitProductionAMImpl am =(MMKitProductionAMImpl)resolvElDC("MMKitProductionAMDataControl");
            Row itmCurr=am.getMmKitProdItm3().getCurrentRow();
            ViewObjectImpl itmprf=am.getAppitmPrf1();//SerializedFlg
            if(itmCurr!=null){
               String itmId=itmCurr.getAttribute("IpItmId").toString();
               Row[] filteredRows=itmprf.getFilteredRows("ItmId", itmId);
               if(filteredRows.length>0){
                  srflg=filteredRows[0].getAttribute("SerializedFlg").toString();
               }
            }
            if("Y".equalsIgnoreCase(srflg)){
                setRwkQty(new Number(0));
                setScrpQty(new Number(0));
            }
          return (Number) getAttributeInternal(OKQTY);
        } */
            return (Number) getAttributeInternal(OKQTY);
       
    }

    /**
     * Sets <code>value</code> as attribute value for OK_QTY using the alias name OkQty.
     * @param value value to set the OK_QTY
     */
    public void setOkQty(Number value) {
        if(value==null){
            value=new Number(0);
        }
       
        String srflg="";
        MMKitProductionAMImpl am =(MMKitProductionAMImpl)resolvElDC("MMKitProductionAMDataControl");
        Row itmCurr=am.getMmKitProdItm3().getCurrentRow();
        ViewObjectImpl itmprf=am.getAppitmPrf1();//SerializedFlg
        if(itmCurr!=null){
           String itmId=itmCurr.getAttribute("IpItmId").toString();
           Row[] filteredRows=itmprf.getFilteredRows("ItmId", itmId);
           if(filteredRows.length>0){
              srflg=filteredRows[0].getAttribute("SerializedFlg").toString();
           }
        }
        if("Y".equalsIgnoreCase(srflg)){
            if(value.compareTo(new Number(1))==0){
                setRwkQty(new Number(0));
                setScrpQty(new Number(0));
                setTotQty(new Number(1));
            }
        }
        else if("N".equalsIgnoreCase(srflg)){
            if(getRwkQty()!=null && getScrpQty()!=null){
                Number tot= value.add(getRwkQty()).add(getScrpQty());
                System.out.println("ok setter --  "+tot);
                setTotQty(tot);
            }
        }
        setAttributeInternal(OKQTY, value);
    }

    /**
     * Gets the attribute value for OP_ITM_ID using the alias name OpItmId.
     * @return the OP_ITM_ID
     */
    public String getOpItmId() {
        return (String) getAttributeInternal(OPITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for OP_ITM_ID using the alias name OpItmId.
     * @param value value to set the OP_ITM_ID
     */
    public void setOpItmId(String value) {
        setAttributeInternal(OPITMID, value);
    }

    /**
     * Gets the attribute value for OP_SR_NO using the alias name OpSrNo.
     * @return the OP_SR_NO
     */
    public String getOpSrNo() {
        return (String) getAttributeInternal(OPSRNO);
    }

    /**
     * Sets <code>value</code> as attribute value for OP_SR_NO using the alias name OpSrNo.
     * @param value value to set the OP_SR_NO
     */
    public void setOpSrNo(String value) {
        setAttributeInternal(OPSRNO, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for SR_NO using the alias name SrNo.
     * @return the SR_NO
     */
    public String getSrNo() {
        if(getAttributeInternal(SRNO) != null){
            return (String) getAttributeInternal(SRNO);  
        }else{
           // System.out.println("else part is executed");
            return "0"; 
        }
        //else
          //  return "0";
    }

    /**
     * Sets <code>value</code> as attribute value for SR_NO using the alias name SrNo.
     * @param value value to set the SR_NO
     */
    public void setSrNo(String value) {
       // if(value==null)
     //       value="0";
      setAttributeInternal(SRNO, value);
        
    }

    /**
     * Gets the attribute value for STK_ACTN using the alias name StkActn.
     * @return the STK_ACTN
     */
    public String getStkActn() {
        return (String) getAttributeInternal(STKACTN);
    }

    /**
     * Sets <code>value</code> as attribute value for STK_ACTN using the alias name StkActn.
     * @param value value to set the STK_ACTN
     */
    public void setStkActn(String value) {
        setAttributeInternal(STKACTN, value);
    }

    /**
     * Gets the attribute value for TOT_QTY using the alias name TotQty.
     * @return the TOT_QTY
     */
    public Number getTotQty() {
        if(getAttributeInternal(TOTQTY)==null){
            return new Number(0);
        }
        else{
        return (Number) getAttributeInternal(TOTQTY);
        }
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_QTY using the alias name TotQty.
     * @param value value to set the TOT_QTY
     */
    public void setTotQty(Number value) {
        setAttributeInternal(TOTQTY, value);
    }

    /**
     * Gets the attribute value for WH_ID using the alias name WhId.
     * @return the WH_ID
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as attribute value for WH_ID using the alias name WhId.
     * @param value value to set the WH_ID
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }


    /**
     * Gets the attribute value for RWK_QTY using the alias name RwkQty.
     * @return the RWK_QTY
     */
    public Number getRwkQty() {
      /*   if(getAttributeInternal(RWKQTY)==null) {
            return new Number(0);
        } */
       /*  else if((new Number(1).compareTo((Number)getAttributeInternal(RWKQTY))==0)){
            String srflg="";
            MMKitProductionAMImpl am =(MMKitProductionAMImpl)resolvElDC("MMKitProductionAMDataControl");
            Row itmCurr=am.getMmKitProdItm3().getCurrentRow();
            ViewObjectImpl itmprf=am.getAppitmPrf1();//SerializedFlg
            if(itmCurr!=null){
               String itmId=itmCurr.getAttribute("IpItmId").toString();
               Row[] filteredRows=itmprf.getFilteredRows("ItmId", itmId);
               if(filteredRows.length>0){
                  srflg=filteredRows[0].getAttribute("SerializedFlg").toString();
               }
            }
            if("Y".equalsIgnoreCase(srflg)){
                setOkQty(new Number(0));
                setScrpQty(new Number(0));
            }
          return (Number) getAttributeInternal(RWKQTY);
        } */
        // else{
        return (Number) getAttributeInternal(RWKQTY);
       // }
    }

    /**
     * Sets <code>value</code> as attribute value for RWK_QTY using the alias name RwkQty.
     * @param value value to set the RWK_QTY
     */
    public void setRwkQty(Number value) {
        if(value==null){
            value=new Number(0);
        }
        String srflg="";
        MMKitProductionAMImpl am =(MMKitProductionAMImpl)resolvElDC("MMKitProductionAMDataControl");
        Row itmCurr=am.getMmKitProdItm3().getCurrentRow();
        ViewObjectImpl itmprf=am.getAppitmPrf1();//SerializedFlg
        if(itmCurr!=null){
           String itmId=itmCurr.getAttribute("IpItmId").toString();
           Row[] filteredRows=itmprf.getFilteredRows("ItmId", itmId);
           if(filteredRows.length>0){
              srflg=filteredRows[0].getAttribute("SerializedFlg").toString();
           }
        }
        if("Y".equalsIgnoreCase(srflg)){
            if(value.compareTo(new Number(1))==0){
                setOkQty(new Number(0));
                setScrpQty(new Number(0));
                setTotQty(new Number(1));
            }
        }
        else if("N".equalsIgnoreCase(srflg)){
            if(getScrpQty()!=null && getOkQty()!=null){
                Number tot= value.add(getScrpQty()).add(getOkQty());
                System.out.println("scrp setter --  "+tot);
                setTotQty(tot);
            }
        }
        setAttributeInternal(RWKQTY, value);
    }

    /**
     * Gets the attribute value for SCRP_QTY using the alias name ScrpQty.
     * @return the SCRP_QTY
     */
    public Number getScrpQty() {
        /* if(getAttributeInternal(SCRPQTY)==null){
            return new Number(0);
        } */
        /* else if((new Number(1).compareTo((Number)getAttributeInternal(SCRPQTY))==0)){
            String srflg="";
            MMKitProductionAMImpl am =(MMKitProductionAMImpl)resolvElDC("MMKitProductionAMDataControl");
            Row itmCurr=am.getMmKitProdItm3().getCurrentRow();
            ViewObjectImpl itmprf=am.getAppitmPrf1();//SerializedFlg
            if(itmCurr!=null){
               String itmId=itmCurr.getAttribute("IpItmId").toString();
               Row[] filteredRows=itmprf.getFilteredRows("ItmId", itmId);
               if(filteredRows.length>0){
                  srflg=filteredRows[0].getAttribute("SerializedFlg").toString();
               }
            }
            if("Y".equalsIgnoreCase(srflg)){
                setOkQty(new Number(0));
                setRwkQty(new Number(0));
            }
          return (Number)  getAttributeInternal(SCRPQTY);
        } *///else{
            return (Number)  getAttributeInternal(SCRPQTY);
       // }
    }

    /**
     * Sets <code>value</code> as attribute value for SCRP_QTY using the alias name ScrpQty.
     * @param value value to set the SCRP_QTY
     */
    public void setScrpQty(Number value) {
        if(value==null){
            value=new Number(0);
        }
       
        
        String srflg="";
        MMKitProductionAMImpl am =(MMKitProductionAMImpl)resolvElDC("MMKitProductionAMDataControl");
        Row itmCurr=am.getMmKitProdItm3().getCurrentRow();
        ViewObjectImpl itmprf=am.getAppitmPrf1();//SerializedFlg
        if(itmCurr!=null){
           String itmId=itmCurr.getAttribute("IpItmId").toString();
           Row[] filteredRows=itmprf.getFilteredRows("ItmId", itmId);
           if(filteredRows.length>0){
              srflg=filteredRows[0].getAttribute("SerializedFlg").toString();
           }
        }
        if("Y".equalsIgnoreCase(srflg)){
            if(value.compareTo(new Number(1))==0){
                setOkQty(new Number(0));
                setRwkQty(new Number(0));
                setTotQty(new Number(1));
            }
        }
        else if("N".equalsIgnoreCase(srflg)){
            if(getRwkQty()!=null && getOkQty()!=null){
                Number tot= value.add(getRwkQty()).add(getOkQty());
                System.out.println("scrp setter --  "+tot);
                setTotQty(tot);
            }
        }
        
        setAttributeInternal(SCRPQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SrNoTrans.
     * @return the SrNoTrans
     */
    public String getSrNoTrans() {
        return (String) getAttributeInternal(SRNOTRANS);
      /*   if(getAttributeInternal(SRNOTRANS)!=null){
           
        }
        else{
        return getSrNo();
        } */
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SrNoTrans.
     * @param value value to set the  SrNoTrans
     */
    public void setSrNoTrans(String value) {
        setAttributeInternal(SRNOTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute strSqwitcher.
     * @return the strSqwitcher
     */
    public String getstrSqwitcher() {
        return (String) getAttributeInternal(STRSQWITCHER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute strSqwitcher.
     * @param value value to set the  strSqwitcher
     */
    public void setstrSqwitcher(String value) {
        setAttributeInternal(STRSQWITCHER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute lotTransSwitcher.
     * @return the lotTransSwitcher
     */
    public String getlotTransSwitcher() {
        return (String) getAttributeInternal(LOTTRANSSWITCHER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute lotTransSwitcher.
     * @param value value to set the  lotTransSwitcher
     */
    public void setlotTransSwitcher(String value) {
        setAttributeInternal(LOTTRANSSWITCHER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LotIdTrans.
     * @return the LotIdTrans
     */
    public String getLotIdTrans() {
      // if(getAttributeInternal(LOTIDTRANS)!=null){
            return (String) getAttributeInternal(LOTIDTRANS);
        //}
        //else{
           /*  String lotId="";
            if(getLotId()!=null){
                lotId=getLotId();
            }
            return lotId;  */
        //}
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LotIdTrans.
     * @param value value to set the  LotIdTrans
     */
    public void setLotIdTrans(String value) {
        setAttributeInternal(LOTIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LotIdTransSwitcher.
     * @return the LotIdTransSwitcher
     */
    public String getLotIdTransSwitcher() {
        return (String) getAttributeInternal(LOTIDTRANSSWITCHER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LotIdTransSwitcher.
     * @param value value to set the  LotIdTransSwitcher
     */
    public void setLotIdTransSwitcher(String value) {
        setAttributeInternal(LOTIDTRANSSWITCHER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute InptItmQtyTrans.
     * @return the InptItmQtyTrans
     */
     public Object resolvElDC(String data) {
     FacesContext fc = FacesContext.getCurrentInstance();
     Application app = fc.getApplication();
     ExpressionFactory elFactory = app.getExpressionFactory();
     ELContext elContext = fc.getELContext();
     ValueExpression valueExp =
     elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
     return valueExp.getValue(elContext);
     }
    public Number getInptItmQtyTrans() {
        
        if(getAttributeInternal(INPTITMQTYTRANS)!=null){
            return (Number) getAttributeInternal(INPTITMQTYTRANS);
        }else{
            MMKitProductionAMImpl am =(MMKitProductionAMImpl)resolvElDC("MMKitProductionAMDataControl");
            ViewObjectImpl prodvo=am.getMmKitProd1();
            ViewObjectImpl prodItmvo=am.getMmKitProdItm3();
            Number i=new Number(0);
            if(prodvo.getCurrentRow().getAttribute("OpItmQty")!=null && prodItmvo.getCurrentRow().getAttribute("TotQty")!=null && prodvo.getCurrentRow().getAttribute("OptSrTrans")!=null){
            Number optQty=(Number)prodvo.getCurrentRow().getAttribute("OpItmQty");
            Number inptQty=(Number)prodItmvo.getCurrentRow().getAttribute("TotQty");
            String optSr=prodvo.getCurrentRow().getAttribute("OptSrTrans").toString();
                if(optSr.equalsIgnoreCase("Y"))
                {
                     i=inptQty.divide(optQty);
                }else if(optSr.equalsIgnoreCase("N")){
                         i=inptQty;
                }
            }
            return i;
         }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute InptItmQtyTrans.
     * @param value value to set the  InptItmQtyTrans
     */
    public void setInptItmQtyTrans(Number value) {
        setAttributeInternal(INPTITMQTYTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BinSwitcher.
     * @return the BinSwitcher
     */
    public String getBinSwitcher() {
        return (String) getAttributeInternal(BINSWITCHER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BinSwitcher.
     * @param value value to set the  BinSwitcher
     */
    public void setBinSwitcher(String value) {
        setAttributeInternal(BINSWITCHER, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MMStkSummInptLotVO1.
     */
    public RowSet getMMStkSummInptLotVO1() {
        return (RowSet)getAttributeInternal(MMSTKSUMMINPTLOTVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MMStkSummBinVO1.
     */
    public RowSet getMMStkSummBinVO1() {
        return (RowSet)getAttributeInternal(MMSTKSUMMBINVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MMStkSummSrVO1.
     */
    public RowSet getMMStkSummSrVO1() {
        return (RowSet)getAttributeInternal(MMSTKSUMMSRVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> InputItmDetailVO1.
     */
    public RowSet getInputItmDetailVO1() {
        return (RowSet)getAttributeInternal(INPUTITMDETAILVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmKitProdItmStkO1.
     */
    public RowSet getMmKitProdItmStkO1() {
        return (RowSet)getAttributeInternal(MMKITPRODITMSTKO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovMmKirProdLotVO1.
     */
    public RowSet getLovMmKirProdLotVO1() {
        return (RowSet)getAttributeInternal(LOVMMKIRPRODLOTVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovMmKirProdLotVO.
     */
    public RowSet getLovMmKirProdLotVO() {
        return (RowSet)getAttributeInternal(LOVMMKIRPRODLOTVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovMmKitProdVwForNonSrVO.
     */
    public RowSet getLovMmKitProdVwForNonSrVO() {
        return (RowSet)getAttributeInternal(LOVMMKITPRODVWFORNONSRVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVSummBinDsmntVO.
     */
    public RowSet getLOVSummBinDsmntVO() {
        return (RowSet)getAttributeInternal(LOVSUMMBINDSMNTVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LOVItmStkDsmntBinVO.
     */
    public RowSet getLOVItmStkDsmntBinVO() {
        return (RowSet)getAttributeInternal(LOVITMSTKDSMNTBINVO);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
