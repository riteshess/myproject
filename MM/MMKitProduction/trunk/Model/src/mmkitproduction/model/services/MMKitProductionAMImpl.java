package mmkitproduction.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmkitproduction.model.services.common.MMKitProductionAM;


import mmkitproduction.model.view.MMStkSummBinVOImpl;
import mmkitproduction.model.view.MMStkSummSrVOImpl;
import mmkitproduction.model.view.MmKitProdItmStkOImpl;
import mmkitproduction.model.view.MmKitProdStkVOImpl;

import oracle.adf.model.BindingContext;

import oracle.binding.BindingContainer;

import oracle.jbo.domain.Number;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.uicli.binding.JUCtrlListBinding;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 20 16:19:47 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMKitProductionAMImpl extends ApplicationModuleImpl implements MMKitProductionAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MMKitProductionAMImpl() {
    }

    /**
     * Container's getter for MmKitProdItmStkO1.
     * @return MmKitProdItmStkO1
     */
    public MmKitProdItmStkOImpl getMmKitProdItmStkO1() {
        return (MmKitProdItmStkOImpl)findViewObject("MmKitProdItmStkO1");
    }

    /**
     * Container's getter for MmKitProdItm1.
     * @return MmKitProdItm1
     */
    public ViewObjectImpl getMmKitProdItm1() {
        return (ViewObjectImpl)findViewObject("MmKitProdItm1");
    }

    /**
     * Container's getter for MmKitProdStk1.
     * @return MmKitProdStk1
     */
    public MmKitProdStkVOImpl getMmKitProdStk1() {
        return (MmKitProdStkVOImpl)findViewObject("MmKitProdStk1");
    }

    /**
     * Container's getter for MmKitProd1.
     * @return MmKitProd1
     */
    public ViewObjectImpl getMmKitProd1() {
        return (ViewObjectImpl)findViewObject("MmKitProd1");
    }
    public void UOMValue(String itmname)
    {
     /*  Row[] filteredRows = this.getMMAppKit1().getFilteredRows("OutputItmId",itmname);
        if(filteredRows!=null && filteredRows.length > 0 )
        {
            for(Row r1 :filteredRows)
            {
               getMmKitProd1().getCurrentRow().setAttribute("OpItmUom", r1.getAttribute("UomId"));
            }
        }  
       */     
    }
    public void DocIdCreate(String CldId,String OrgId,Integer SlocId,Integer UserId)
    {
        Row currentRow=this.getMmKitProd1().getCurrentRow();
        String DocId =(String)(callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {CldId,SlocId, OrgId,UserId, new Integer(18520),new Integer(0)}));
        currentRow.setAttribute("DocId", DocId);
        currentRow.setAttribute("CldId", CldId);
        currentRow.setAttribute("OrgId", OrgId);
        currentRow.setAttribute("SlocId", SlocId);
        currentRow.setAttribute("UsrIdCreate", UserId);
        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        Integer fyId =(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {CldId,OrgId,currentRow.getAttribute("UsrIdCreateDt")}));
        currentRow.setAttribute("FyId", fyId);
        Integer fyId1=Integer.parseInt(fyId.toString());
    }
    
    public void SearchCriteria(String KitProdNo,String ItmId,String WhId,String KitActionType){
                ViewObjectImpl prodVO = this.getMmKitProd1();//MmKitProdVOCriteria
                ViewCriteria vc = prodVO.getViewCriteria("MmKitProdVOCriteria");
                prodVO.applyViewCriteria(vc);
                prodVO.setNamedWhereClauseParam("KitprodNo",KitProdNo );
                prodVO.setNamedWhereClauseParam("OptItmBind",ItmId);
                prodVO.setNamedWhereClauseParam("Whidbind", WhId);
                prodVO.setNamedWhereClauseParam("kitActionBind",KitActionType);
                prodVO.executeQuery();
        
    }
    public void ResetAction(){
        ViewObject mmsrchVo=this.getMmKitProdSearch1();
        mmsrchVo.getCurrentRow().setAttribute("itmDescTrans", null);
        mmsrchVo.getCurrentRow().setAttribute("WhId",null);
        mmsrchVo.getCurrentRow().setAttribute("WhTrans",null);
        mmsrchVo.getCurrentRow().setAttribute("KitProdNo",null);
        mmsrchVo.getCurrentRow().setAttribute("StkAction",null);
        mmsrchVo.getCurrentRow().setAttribute("OpItmId",null);
        mmsrchVo.executeQuery();
        
        String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl vo = this.getMmKitProd1();
        ViewCriteria vc = vo.getViewCriteria("MmKitProdVOCriteria2");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("cldIdBind", CldId);
        vo.setNamedWhereClauseParam("slocIdBind",SlocId);
        vo.setNamedWhereClauseParam("orgIdBind", OrgId);
        vo.executeQuery();
    }
    public void inputItemGen(String optId,Number instqty)
    {
      RowSetIterator itr =this.getMmKitProdItm3().createRowSetIterator(null);
      while(itr.hasNext()){
          Row r=itr.next();
              r.remove();
      }
      itr.closeRowSetIterator();
        String opt_id=this.getMmKitProd1().getCurrentRow().getAttribute("OpItmId").toString();
        Row [] filteredRows=this.getInputItmDetail1().getFilteredRows("OutputItmId", opt_id);
        if(filteredRows!=null && filteredRows.length > 0 )
        {
            for(Row r1 :filteredRows)
            {
                Number Ttlqty1=(Number)r1.getAttribute("InputItmQty");
                Number Ttlqty=Ttlqty1.multiply(instqty);
                Row createRow=this.getMmKitProdItm3().createRow();  
                createRow.setAttribute("IpItmId",r1.getAttribute("InputItmId"));
                createRow.setAttribute("IpItmUom",r1.getAttribute("InputItmUom"));
                createRow.setAttribute("OpItmId",opt_id);
                createRow.setAttribute("TotQty",Ttlqty);
            }
        } 
        else{
            FacesMessage message = new FacesMessage("This Output Item Does Not Have Any Input Item");
            message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        }
        
     
        
    }
    
    public String LotsetttedByFunction(){
        Row kitprod=getMmKitProd1().getCurrentRow();
        String OrgId=kitprod.getAttribute("OrgId").toString();
        String CldId=kitprod.getAttribute("CldId").toString();
        Integer SlocId=(Integer)kitprod.getAttribute("SlocId");
        String WhId=kitprod.getAttribute("WhId").toString();
        String ItmId=kitprod.getAttribute("OpItmId").toString();
        Row[] prf= this.getViewOrgMMPrf().getFilteredRows("OrgId", OrgId);
        Row prodStk=getMmKitProdStk2().getCurrentRow();
                if(prf.length>0){
                    String chk=prf[0].getAttribute("AutoLotGen").toString();
                 //  System.out.println("lot gen chk : "+chk);
                    if("Y".equals(chk)){
                           
                        Object obj= callStoredFunction(Types.VARCHAR, "MM.mm_gen_lot(?,?,?,?,?)", new Object[] {CldId,SlocId,OrgId,WhId,ItmId});
                      //  System.out.println("oject "+obj);
                        if(obj!=null){
                            prodStk.setAttribute("LotId", obj.toString());
                            
                        }
                     
                    }
                }
        return "";
    }
    
    public void setTheLotid(String LotTrans)
    {
        ViewObjectImpl kitProd = getMmKitProdStk2();
        ViewObjectImpl kit = this.getMmKitProd1();
        Row kitRow = kit.getCurrentRow();
        Row currentRow=kitProd.getCurrentRow();
       // System.out.println(kitRow+"     current row in lot "+currentRow);
        if(currentRow!=null)
        {
            currentRow.setAttribute("LotId",LotTrans);
            //System.out.println("lot id setted is "+currentRow.getAttribute("LotId"));
        }
        
        else{
        //    System.out.println("current row of prodstk is blank");
            }
        
     
    }
    
    
    public String pop1LotValid(String lotName){
       //Row r=getMmKitProdStk2().getCurrentRow();
        String flag="Y";
        Row[] filteredRows = getMmKitProdStk2().getFilteredRows("LOTTrans", lotName) ;
        if(filteredRows.length>1){
                 flag="N";
             }
        return flag;
    }
    public String islotduplicatechkSr(String LotName){
       String flag="";
       Row prodRow=getMmKitProd1().getCurrentRow();
       String orgId=prodRow.getAttribute("OrgId").toString();
       String DocId=prodRow.getAttribute("DocId").toString();
        RowQualifier rowQualifier1 = new RowQualifier(getMmKitProdStk2());
        rowQualifier1.setWhereClause("OrgId='"+orgId+"' AND DocId='"+DocId+"'");
        Row[] filteredRows1 = getMmKitProdStk2().getFilteredRows(rowQualifier1); 
        if(filteredRows1.length>0){
        for(Row r1: filteredRows1){
           String Srno=r1.getAttribute("SrNo").toString();
           RowQualifier rowQualifier = new RowQualifier(getMmKitProdItmStkO6());
           rowQualifier.setWhereClause("OrgId='"+orgId+"' AND OpSrNo='"+Srno+"'  AND DocId='"+DocId+"' AND LotId='"+ LotName +"'");
           Row[] filteredRows = getMmKitProdItmStkO6().getFilteredRows(rowQualifier); 
           if(filteredRows.length>0){
               flag="N";
            } 
         }
        }
        return flag;
    }
    
    public String pop2LotvalidSrN(String Lotname){
        String flag="Y";
        RowSetIterator prodStkIterator =getMmKitProdItmStkO3().createRowSetIterator(null);
                  Row currentRow=getMmKitProdItmStkO3().getCurrentRow();
                   while(prodStkIterator.hasNext()){
                      Row r1 = prodStkIterator.next();
                        if(r1!=currentRow){
                              String LotId=r1.getAttribute("LotId").toString();
                                  if(LotId.equals(Lotname)) {
                                      flag="N";
                                  }
                           }
                       }
                prodStkIterator.closeRowSetIterator();
               // System.out.println("function serialize"+flag);
               // getMmKitProdItmStkO3().closeRowSetIterator();
               return flag;
    }
    
    //validating the pop1 no blank record will be inserted
    public String pop1CheckNull(){
        String flag="Y";
        if(getMmKitProdStk2().getCurrentRow()!=null){
       // Object lotid=this.getMmKitProdStk2().getCurrentRow().getAttribute("LotId");
        if(getMmKitProdStk2().getCurrentRow().getAttribute("LotId")!=null && getMmKitProdStk2().getCurrentRow().getAttribute("LotId")!=""){
            flag="Y";
        }
        else{
            flag="N";
        }
        }
        return flag;
        
    }
    
    public String ItemQuantitychecked(String CldId,Integer SlocId,String OrgId,String Wh_id,String itm_id,String qty,String a_op) 
    {
        //String flag="";
        ViewObjectImpl stkvo=this.getMmKitProd1();
        String cldId=stkvo.getCurrentRow().getAttribute("CldId").toString();
        String orgId=stkvo.getCurrentRow().getAttribute("OrgId").toString();
        String whId=stkvo.getCurrentRow().getAttribute("WhId").toString();
        int slocId=(Integer)stkvo.getCurrentRow().getAttribute("SlocId");
        Integer fyId=Integer.parseInt(stkvo.getCurrentRow().getAttribute("FyId").toString());
        String Output1="";
       // System.out.println("Quantity for stock "+qty);
        //System.out.println(Wh_id);
        if(this.getMmKitProd1().getCurrentRow().getAttribute("OpItmId")!=null){
        String itmId=this.getMmKitProd1().getCurrentRow().getAttribute("OpItmId").toString();
       // System.out.println("output item is "+itmId);
        if(itmId!=null){
        Output1 =(callStoredFunction(Types.VARCHAR, "mm_chk_avl_qty_kit (?,?,?,?,?,?,?,?)", new Object[] {cldId,slocId, orgId,whId,fyId,itmId,qty,a_op})).toString();
      // System.out.println("Stock avialability "+Output1);
          }
        }
        return Output1;
    }
    public Number ItemQuantitychecked1(String CldId,Integer SlocId,String OrgId,String Wh_id,String itm_id,String qty,String a_op) 
    {
        //String flag="";
        ViewObjectImpl stkvo=this.getMmKitProd1();
        String cldId=stkvo.getCurrentRow().getAttribute("CldId").toString();
        String orgId=stkvo.getCurrentRow().getAttribute("OrgId").toString();
        String whId=stkvo.getCurrentRow().getAttribute("WhId").toString();
        int slocId=(Integer)stkvo.getCurrentRow().getAttribute("SlocId");
        Integer fyId=Integer.parseInt(stkvo.getCurrentRow().getAttribute("FyId").toString());
        Number Output1=new Number(0);
       // System.out.println("Quantity for stock "+qty);
        //System.out.println(Wh_id);
        if(this.getMmKitProd1().getCurrentRow().getAttribute("OpItmId")!=null){
        String itmId=this.getMmKitProd1().getCurrentRow().getAttribute("OpItmId").toString();
          
        if(itmId!=null){
            System.out.println("quantity is "+qty);
              System.out.println("output item is "+itmId);
       BigDecimal Output =(BigDecimal)(callStoredFunction(Types.NUMERIC, "mm_chk_avl_qty_kit (?,?,?,?,?,?,?,?)", new Object[] {cldId,slocId, orgId,whId,fyId,itmId,qty,a_op}));
       if(Output!=null){
                    try {
                        Output1=new Number(Output);
                    } catch (SQLException e) {
                    }
                }
      
       System.out.println("stock check quantity");
       System.out.println("Stock avialability "+Output1);
          }
        }
        return Output1;
    }
    
    
    public void InputLotLOVFilteration(String CldId,Integer SlocId,String OrgId,String WhId,String itm_id) 
    {
        
       String inputId=getMmKitProdItm3().getCurrentRow().getAttribute("IpItmId").toString();
       String inputItmUom=getMmKitProdItm3().getCurrentRow().getAttribute("IpItmUom").toString();
        Number totalStk=(Number)getMmKitProdItm3().getCurrentRow().getAttribute("TotQty");
        //TotQty
       getMmKitProdItmStkO3().getCurrentRow().setAttribute("IpItmId",inputId);
       getMmKitProdItmStkO3().getCurrentRow().setAttribute("IpItmUom",inputItmUom);
    }
    
    public String stkDeassemble(){
        
        ViewObjectImpl stkvo=this.getMmKitProdStk1();
        String CldId=stkvo.getCurrentRow().getAttribute("CldId").toString();
        String OrgId=stkvo.getCurrentRow().getAttribute("OrgId").toString();
        String WhId=stkvo.getCurrentRow().getAttribute("WhId").toString();
        int SlocId=(Integer)stkvo.getCurrentRow().getAttribute("SlocId");
        String optsr=stkvo.getCurrentRow().getAttribute("SrNo").toString();
        String opitmId=stkvo.getCurrentRow().getAttribute("OpItmId").toString();
        String docId=stkvo.getCurrentRow().getAttribute("DocId").toString();
        return "";
    }
    
    public String checkinputitem(Number inptQty,Number optQty)
    {
        String flag="Y";
        return flag;
       }
    
   
    
    
    //pop2 Add button total quantity for particular item is not greaterthen input item Quantity
    public String pop2addQuantitycheck(Number optQty){
        String flag="Y";
        ViewObjectImpl voItm=getMmKitProdItm3();
        String inputitm=voItm.getCurrentRow().getAttribute("IpItmId").toString();
        Number itmStk = ((Number)voItm.getCurrentRow().getAttribute("TotQty")).divide(optQty);
        voItm.getCurrentRow().setAttribute("StkTrans",itmStk);
        Number transstk=(Number)voItm.getCurrentRow().getAttribute("StkTrans");
        
        String optsrno=getMmKitProdStk2().getCurrentRow().getAttribute("SrNo").toString();
        String optDocid=getMmKitProdStk2().getCurrentRow().getAttribute("DocId").toString();
         
        ViewObjectImpl itmStk1 = getMmKitProdItmStkO1();
        RowQualifier rowQualifier = new RowQualifier(itmStk1);
        rowQualifier.setWhereClause("OpSrNo= '"+optsrno+"' AND DocId='"+ optDocid +"' AND IpItmId='"+ inputitm +"'");
        
        Row[] filteredRows = itmStk1.getFilteredRows(rowQualifier);
           Number sum=new Number(0);
           Number TtlQty=new Number(0);
           if(filteredRows.length>0)
           {
               for(Row itmRows : filteredRows)
               {
                     TtlQty=(Number)itmRows.getAttribute("TotQty");
                     sum=sum.add(TtlQty);
               }
           if(sum.compareTo(transstk)==-1){
               flag="Y";
           }
           else if(sum.compareTo(transstk)==1){
                   flag="N";
               }
           else if(sum.compareTo(transstk)==0){
               flag="P";
           }
           
           }
           
         return flag;
    }
    
    public ArrayList inputItemcheckAllOK(Number inptQty,Number optQty) {
        
        String flag="Y";
        ArrayList ar=new ArrayList();
        ViewObjectImpl voItm=getMmKitProdItm3();
        String inputitm=voItm.getCurrentRow().getAttribute("IpItmId").toString();
        Number itmStk = ((Number)voItm.getCurrentRow().getAttribute("TotQty")).divide(optQty);
        voItm.getCurrentRow().setAttribute("StkTrans",itmStk);
        Number transstk=(Number)voItm.getCurrentRow().getAttribute("StkTrans");
        ViewObjectImpl voprodStk=getMmKitProd1();
        String DocId=voprodStk.getCurrentRow().getAttribute("DocId").toString();
       Row[] filterRows=getMmKitProdStk2().getFilteredRows("DocId",DocId);
       for(Row r:filterRows)
       {
        String optsrno=r.getAttribute("SrNo").toString();
        String optDocid=r.getAttribute("DocId").toString();
        ViewObjectImpl itmStk1 = getMmKitProdItmStkO1();
        RowQualifier rowQualifier = new RowQualifier(itmStk1);
        rowQualifier.setWhereClause("OpSrNo= '"+optsrno+"' AND DocId='"+ optDocid +"' AND IpItmId='"+ inputitm +"'");
        Row[] filteredRows = itmStk1.getFilteredRows(rowQualifier);
           Number sum=new Number(0);
           Number TtlQty=new Number(0);
           if(filteredRows.length>0)
           {
               for(Row itmRows : filteredRows)
               {
                   if(itmRows.getAttribute("TotQty")==null){
                       itmRows.setAttribute("TotQty", new Number(0));
                   }
                   if(itmRows.getAttribute("TotQty")!=null){
                     TtlQty=(Number)itmRows.getAttribute("TotQty");
                   }
                     sum=sum.add(TtlQty);
               }
           if(sum.compareTo(transstk)==0){
               //this.getDBTransaction().postChanges();
            
           }
           else if(sum.compareTo(transstk)==-1 || sum.compareTo(transstk)==1){
                   ar.add(optsrno);
               }
           }
           else if(filteredRows.length==0){
               FacesMessage message = new FacesMessage("No Record Available for some Output Item");
               message.setSeverity(FacesMessage.SEVERITY_ERROR);
               FacesContext fc = FacesContext.getCurrentInstance();
               fc.addMessage(null, message);  
           }
       }
       return ar;
    }
    //executes when output and input item both will be serialized
    
    public String SerialTotQtyCheck(Number okQty,Number ScrpQty,Number RwkQty){
    String flag="";
        Number sum=new Number(0);
        if(getMmKitProdItmStkO3().getCurrentRow().getAttribute("OkQty")==null){
            getMmKitProdItmStkO3().getCurrentRow().setAttribute("OkQty", new Number(0));
        }
        if(getMmKitProdItmStkO3().getCurrentRow().getAttribute("ScrpQty")==null){
            getMmKitProdItmStkO3().getCurrentRow().setAttribute("ScrpQty", new Number(0));
        }
        if(getMmKitProdItmStkO3().getCurrentRow().getAttribute("RwkQty")==null){
            getMmKitProdItmStkO3().getCurrentRow().setAttribute("RwkQty", new Number(0));
        }
        if(getMmKitProdItmStkO3().getCurrentRow().getAttribute("TotQty")==null){
            getMmKitProdItmStkO3().getCurrentRow().setAttribute("TotQty", new Number(1));
        }
     if(okQty!=null && ScrpQty!=null && RwkQty!=null)
     {
        Number TotQty=(Number)getMmKitProdItmStkO3().getCurrentRow().getAttribute("TotQty");
        sum=sum.add(okQty).add(ScrpQty).add(RwkQty);
        if(sum.compareTo(TotQty)==0) {
            flag="Y";
        }
        else{
            flag="N";
        }
     
    }
        return flag;
    }
    
    public void inputitemoutAandinptD(){
        Number optQty=(Number)getMmKitProd1().getCurrentRow().getAttribute("OpItmQty");
        String DocId1=getMmKitProd1().getCurrentRow().getAttribute("DocId").toString();
        Number TotQty=((Number)getMmKitProdItm3().getCurrentRow().getAttribute("TotQty")).divide(optQty);
        Row[] filteredrows=getMmKitProdStk2().getFilteredRows("DocId",DocId1);
        ArrayList ar=new ArrayList();
       for(Row r:filteredrows){
           Number tempSum=new Number(0);
        String srno=r.getAttribute("SrNo").toString();
        ViewObjectImpl voItm=getMmKitProdItm3();
        String inputitm=voItm.getCurrentRow().getAttribute("IpItmId").toString();
        String CldId=voItm.getCurrentRow().getAttribute("CldId").toString();
        int SlocId=(Integer)voItm.getCurrentRow().getAttribute("SlocId");
        String WhId=voItm.getCurrentRow().getAttribute("WhId").toString();
        String OrgId=voItm.getCurrentRow().getAttribute("OrgId").toString();
        String DocId=voItm.getCurrentRow().getAttribute("DocId").toString();
        
        RowQualifier rowQualifier = new RowQualifier(getMmKitProdItmStkO1());
        rowQualifier.setWhereClause("CldId= '"+CldId+"' AND DocId='"+ DocId +"' AND OrgId='"+ OrgId +"' AND SlocId="+ SlocId +" AND WhId='"+ WhId +"' AND IpItmId='"+ inputitm +"' AND OpSrNo='"+ srno +"'");
        Row[] filteredRows = getMmKitProdItmStkO1().getFilteredRows(rowQualifier);
           Number sum=new Number(0);
           for(Row r1:filteredRows) {
               sum=new Number(0);
               if(r1.getAttribute("OkQty")==null){
                   r1.setAttribute("OkQty", new Number(0));
               }
               if(r1.getAttribute("ScrpQty")==null){
                   r1.setAttribute("ScrpQty", new Number(0));
               }
               if(r1.getAttribute("RwkQty")==null){
                   r1.setAttribute("RwkQty", new Number(0));
               }
               if(r1.getAttribute("RwkQty")!=null && r1.getAttribute("ScrpQty")!=null && r1.getAttribute("OkQty")!=null){
                   Number RwkQty=(Number)r1.getAttribute("RwkQty");
                   Number ScrpQty=(Number)r1.getAttribute("ScrpQty");
                   Number OkQty=(Number)r1.getAttribute("OkQty");
                   sum=sum.add(RwkQty).add(ScrpQty).add(OkQty);
                   tempSum=tempSum.add(sum);
                  r1.setAttribute("TotQty", sum);
               }
               else{
               }
           }
           if(tempSum.compareTo(TotQty)==0){
           }
           else{
               ar.add(srno);
           }
       } 
       if(ar.isEmpty()){
       }else{
               FacesMessage message = new FacesMessage("Quantity is not equals given Quantity"+ar);
               message.setSeverity(FacesMessage.SEVERITY_ERROR);
               FacesContext fc = FacesContext.getCurrentInstance();
               fc.addMessage(null, message);  
           }
        
    }
    public void inputItemCheckQuantity(){
        ViewObjectImpl voItm=getMmKitProdItm3();
    if(voItm.getCurrentRow().getAttribute("TotQty")!=null){
        Number TotQty=(Number)voItm.getCurrentRow().getAttribute("TotQty");
        String inputitm=voItm.getCurrentRow().getAttribute("IpItmId").toString();
        String CldId=voItm.getCurrentRow().getAttribute("CldId").toString();
        int SlocId=(Integer)voItm.getCurrentRow().getAttribute("SlocId");
        String WhId=voItm.getCurrentRow().getAttribute("WhId").toString();
        String OrgId=voItm.getCurrentRow().getAttribute("OrgId").toString();
        String DocId=voItm.getCurrentRow().getAttribute("DocId").toString();
        
        RowQualifier rowQualifier = new RowQualifier(getMmKitProdItmStkO3());
        rowQualifier.setWhereClause("CldId= '"+CldId+"' AND DocId='"+ DocId +"' AND OrgId='"+ OrgId +"' AND SlocId="+ SlocId +" AND WhId='"+ WhId +"' AND IpItmId='"+ inputitm +"'");
        Row[] filteredRows = getMmKitProdItmStkO3().getFilteredRows(rowQualifier);
        Number sum=new Number(0);
        for(Row r:filteredRows){
            if(r.getAttribute("TotQty")!=null){
            Number itmStk=(Number)r.getAttribute("TotQty");
            sum=sum.add(itmStk);
            }
            else{
                FacesMessage message = new FacesMessage("TotQty is Required");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);  
            }
        }
        if(sum.compareTo(TotQty)==0){
           //this.getDBTransaction().postChanges();
        }
        else{
            FacesMessage message = new FacesMessage("Quantity Not Equals Input Item Quantity");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);  
        }
      }
    }

    public void inputItemCheckQuantityForD(){
        ViewObjectImpl voItm=getMmKitProdItm3();
        if(voItm.getCurrentRow().getAttribute("TotQty")!=null){
        Number TotQty=(Number)voItm.getCurrentRow().getAttribute("TotQty");
        
        String inputitm=voItm.getCurrentRow().getAttribute("IpItmId").toString();
        String CldId=voItm.getCurrentRow().getAttribute("CldId").toString();
        int SlocId=(Integer)voItm.getCurrentRow().getAttribute("SlocId");
        String WhId=voItm.getCurrentRow().getAttribute("WhId").toString();
        String OrgId=voItm.getCurrentRow().getAttribute("OrgId").toString();
        String DocId=voItm.getCurrentRow().getAttribute("DocId").toString();
        
        RowQualifier rowQualifier = new RowQualifier(getMmKitProdItmStkO3());
        rowQualifier.setWhereClause("CldId= '"+CldId+"' AND DocId='"+ DocId +"' AND OrgId='"+ OrgId +"' AND SlocId="+ SlocId +" AND WhId='"+ WhId +"' AND IpItmId='"+ inputitm +"'");
        Row[] filteredRows = getMmKitProdItmStkO3().getFilteredRows(rowQualifier);
            Number sum=new Number(0);
            Number sumTemp=new Number(0);
            for(Row r:filteredRows){
            sum=new Number(0);
            if(r.getAttribute("OkQty")!=null && r.getAttribute("RwkQty")!=null && r.getAttribute("ScrpQty")!=null ){
            Number okQty=(Number)r.getAttribute("OkQty");
            Number scrpQty=(Number)r.getAttribute("ScrpQty");
            Number rwkQty=(Number)r.getAttribute("RwkQty");
                              
            sum=sum.add(okQty).add(scrpQty).add(rwkQty);
                sumTemp=sumTemp.add(sum);
                System.out.println("sum before setting value"+sum);
            r.setAttribute("TotQty", sum);
            }
            else{
                FacesMessage message = new FacesMessage("TotQty is Required");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);  
            }
        }
        if(sumTemp.compareTo(TotQty)==0){
          //  this.getDBTransaction().postChanges();
        }
        else{
            FacesMessage message = new FacesMessage("Quantity Not Equals Input Item Quantity");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);  
        }
        }
        
       
    }
    public ArrayList inputItemCheckSerialized(Number optQty){
        
       
        ArrayList ar=new ArrayList();
        
        ViewObjectImpl voItm=getMmKitProdItm3();
        Number itmStk = ((Number)voItm.getCurrentRow().getAttribute("TotQty")).divide(optQty);
        voItm.getCurrentRow().setAttribute("StkTrans",itmStk);
        Number transstk=(Number)voItm.getCurrentRow().getAttribute("StkTrans");
        ViewObjectImpl voprodStk=getMmKitProd1();
        String DocId=voprodStk.getCurrentRow().getAttribute("DocId").toString();
        Row[] filterRows=getMmKitProdStk2().getFilteredRows("DocId",DocId);
        for(Row r:filterRows)
        {
        String optsrno=r.getAttribute("SrNo").toString();
        String optDocid=r.getAttribute("DocId").toString();
        ViewObjectImpl itmStk1 = getMmKitProdItmStkO1();
        RowQualifier rowQualifier = new RowQualifier(itmStk1);
        rowQualifier.setWhereClause("OpSrNo= '"+optsrno+"' AND DocId='"+ optDocid +"'");
        
        Row[] filteredRows = itmStk1.getFilteredRows(rowQualifier);
           Number sum=new Number(0);
           Number TtlQty=new Number(0);
         
        for(Row itmRows : filteredRows)
           {
               TtlQty=(Number)itmRows.getAttribute("TotQty");
               sum=sum.add(TtlQty);
          
           }
           if(sum.compareTo(transstk)==-1 || sum.compareTo(transstk)==0){
           }
           else{
                   ar.add(optsrno);
               }
        }
        return ar;
    }
    
    public void setpop2totalQuantity()
    {
      getMmKitProdItmStkO3().getCurrentRow().setAttribute("TotQty", 1);
      Number s=(Number)getMmKitProdItmStkO3().getCurrentRow().getAttribute("TotQty");
    }
    
    public String rowCount(String optCnt) 
        {
          String b="Y";
          ViewObjectImpl viewstck=getMmKitProdStk2();
          
          ViewObjectImpl prodvo=getMmKitProd1();
          String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
          String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
          int SlocId=(Integer)prodvo.getCurrentRow().getAttribute("SlocId");
          String WhId=prodvo.getCurrentRow().getAttribute("WhId").toString();
          String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
          Number totQty=(Number)prodvo.getCurrentRow().getAttribute("OpItmQty");
          ViewObjectImpl prodStk = getMmKitProdStk2();
          RowQualifier rowQualifier = new RowQualifier(prodStk);
          rowQualifier.setWhereClause("CldId= '"+ CldId +"' AND OrgId='"+ OrgId +"' AND SlocId="+SlocId +" AND WhId='"+WhId +"' AND DocId='"+DocId +"'");
          Row[] filteredRows = prodStk.getFilteredRows(rowQualifier);
          Number sum=new Number(0);
          if(filteredRows.length>0){
          for(Row r:filteredRows) {
            Number qty= (Number)r.getAttribute("TotQty");
              sum=sum.add(qty);
        }
          if(sum.compareTo(totQty)==-1)
          {
              b="Y";
          }
          else if(sum.compareTo(totQty)==0) {
              b="P";
          }
          else if(sum.compareTo(totQty)==1){
              b="N";
          }
          }
         return b;                                    
        }
    public void mandatorySerialize(){
        ViewObjectImpl prodvo=this.getMmKitProd1();
        String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
        String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
        String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
        int SlocId=(Integer)prodvo.getCurrentRow().getAttribute("SlocId");
        String OpItmId=prodvo.getCurrentRow().getAttribute("OpItmId").toString();
        
        RowQualifier rowQualifier = new RowQualifier(this.getMMAppKit1());
        rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND OutputItmId='"+OpItmId+"'");
        Row[] filteredRows = this.getMMAppKit1().getFilteredRows(rowQualifier); 
        if(filteredRows.length>1){
        String srno=null;
        for(Row r:filteredRows) {
            String srflg=r.getAttribute("SerializedFlg").toString();
            if(srflg.equalsIgnoreCase("Y")){
                if(this.getMmKitProdStk2().getCurrentRow().getAttribute("SrNo")!=null){
                       
                    }
                else{
                    FacesMessage message = new FacesMessage("enter the serial no.");
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext fc = FacesContext.getCurrentInstance();
                    fc.addMessage(null, message);
                }
            }
        }
        }
    }

    public void optitemCheckQuantityOK(){
              String b="Y";
              mandatorySerialize();
              ViewObjectImpl viewstck=getMmKitProdStk2();
              
              ViewObjectImpl prodvo=getMmKitProd1();
              String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
              String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
              int SlocId=(Integer)prodvo.getCurrentRow().getAttribute("SlocId");
              String WhId=prodvo.getCurrentRow().getAttribute("WhId").toString();
              String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
              Number totQty=(Number)prodvo.getCurrentRow().getAttribute("OpItmQty");
              ViewObjectImpl prodStk = getMmKitProdStk2();
              RowQualifier rowQualifier = new RowQualifier(prodStk);
              rowQualifier.setWhereClause("CldId= '"+ CldId +"' AND OrgId='"+ OrgId +"' AND SlocId="+SlocId +" AND WhId='"+WhId +"' AND DocId='"+DocId +"'");
              Row[] filteredRows = prodStk.getFilteredRows(rowQualifier);
              Number sum=new Number(0);
              if(filteredRows.length>0){
                  for(Row r:filteredRows) {
                      
                        Number qty= (Number)r.getAttribute("TotQty");
                        sum=sum.add(qty);
                      
            }
              if(sum.compareTo(totQty)==0)
              {
                  b="Y";
                 
              }
              else if(sum.compareTo(totQty)==1 || sum.compareTo(totQty)==-1){
                  FacesMessage message = new FacesMessage("Output Item not equals given Quantity");
                  message.setSeverity(FacesMessage.SEVERITY_ERROR);
                  FacesContext fc = FacesContext.getCurrentInstance();
                  fc.addMessage(null, message);
                  b="N";
                  }
              }
              else{
                  FacesMessage message = new FacesMessage("No Output Item Generated");
                  message.setSeverity(FacesMessage.SEVERITY_INFO);
                  FacesContext fc = FacesContext.getCurrentInstance();
                  fc.addMessage(null, message);
              }
    }
    
    public String prodStkchkZerorecord(){
        String flag="Y";
        ViewObjectImpl prodvo=getMmKitProd1();
        String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
        String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
        int SlocId=(Integer)prodvo.getCurrentRow().getAttribute("SlocId");
        String WhId=prodvo.getCurrentRow().getAttribute("WhId").toString();
        String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
        ViewObjectImpl prodStk = getMmKitProdStk2();
        RowQualifier rowQualifier = new RowQualifier(prodStk);
        rowQualifier.setWhereClause("CldId= '"+ CldId +"' AND OrgId='"+ OrgId +"' AND SlocId="+SlocId +" AND WhId='"+WhId +"' AND DocId='"+DocId +"'");
        Row[] filteredRows = prodStk.getFilteredRows(rowQualifier);
        Number sum=new Number(0);
        if(filteredRows.length>0){
            for(Row r:filteredRows) {
             Number qty= (Number)r.getAttribute("TotQty");
                if(qty.compareTo(sum)==0){
                    
                    System.out.println("zero record found");
                    flag="N";
                    break;
                }
            }
        }
        return flag;
    }
    
public void optotQtySet() {
    ViewObjectImpl prodstk=this.getMmKitProdStk2();
    Number QTY=new Number(1);
    Row r=prodstk.getCurrentRow();
    if(r!=null)
        r.setAttribute("TotQty",QTY);
}
    public String optSerialized(){
        String temp="Y";
        //System.out.println("opt serialized item executes");
        if(getMmKitProdItm3().getCurrentRow()!=null){
            String inputId=getMmKitProdItm3().getCurrentRow().getAttribute("IpItmId").toString();
        ViewObjectImpl vo1 = this.getLovMmKirProdLot1();
        ViewCriteria vc1 = vo1.getViewCriteria("LovMmKirProdLotVOCriteria1");
        vo1.applyViewCriteria(vc1);
        vo1.setNamedWhereClauseParam("IptItmBind",inputId);
        vo1.executeQuery();
        }
        
        
        ViewObjectImpl prodvo=getMmKitProd1();
        String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
        String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
        String SlocId=prodvo.getCurrentRow().getAttribute("SlocId").toString();
        String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
        System.out.println("opt serialized item executes before getting opt itm id");
        String optId=prodvo.getCurrentRow().getAttribute("OpItmId").toString();
       // System.out.println("opt itm id is "+optId);
        ViewObjectImpl prodstk=getAppitmPrf1();
        RowQualifier rowQualifier = new RowQualifier(prodstk);
        rowQualifier.setWhereClause("CldId= '"+CldId+"' AND OrgId= '"+OrgId+"' AND SlocId= "+SlocId+" AND ItmId= '"+optId+"' AND SerializedFlg='N'");
        Row[] filteredRows = prodstk.getFilteredRows(rowQualifier); 
        if(filteredRows.length>0){
            temp="N";
        }
        else{
            temp="Y";
        }
        return temp;
    }
    
    
public String POPsave(String WhId) 
{
    String flag="";
    Row prodVo=this.getMmKitProd1().getCurrentRow();
    String CldId=prodVo.getAttribute("CldId").toString();
    Integer SlocId=Integer.parseInt(prodVo.getAttribute("SlocId").toString());
    String OrgId=prodVo.getAttribute("OrgId").toString();
    String fyId=prodVo.getAttribute("FyId").toString();
    String DocId=prodVo.getAttribute("DocId").toString();
    RowQualifier rowQualifier = new RowQualifier(getMmKitProdItm1());
    rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND DocId='"+DocId+"'");
    Row[] filteredRows1 = getMmKitProdItm1().getFilteredRows(rowQualifier); 
     
    if(filteredRows1.length>0){
        ArrayList ar=new ArrayList();
        Row[] filteredrows=this.getMmKitProdItm3().getFilteredRows("StkTrnsFlg","N");
        if(filteredrows.length>0)
        {
           for(Row r1:filteredrows)
           {
               String itmId="";
               if(r1.getAttribute("IpItmId")!=null){
                 itmId=r1.getAttribute("IpItmId").toString();
                 
                   RowQualifier rowQualifier2 = new RowQualifier(getAppitmPrf1());
                   rowQualifier2.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND ItmId='"+itmId+"'");
                   Row[] filteredRows2 = getAppitmPrf1().getFilteredRows(rowQualifier2);
                   if(filteredRows2.length>0){
                       for(Row r5 : filteredRows2){
                           ar.add(r5. getAttribute("ItmDesc"));
                       }
                 
                   }
               }
          }
        }
    
    if(ar.isEmpty()) {
        String kitprodno=null;
        //String chkNo=null;
        if(prodVo.getAttribute("KitProdNo")!=null && !(prodVo.getAttribute("KitProdNo").toString()).equalsIgnoreCase("0")){
          
        }else{
            kitprodno =(String)(callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {SlocId,CldId,OrgId,"MM$KIT$PROD",WhId,fyId}));  
        }
        prodVo.setAttribute("KitProdNo", kitprodno);
        flag="Y";
        
    }
    else{
        flag="N";
        FacesMessage message = new FacesMessage("Some Input Item Empty"+ar);
        message.setSeverity(FacesMessage.SEVERITY_ERROR);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, message);
    }
    }else{
        flag="N";
        FacesMessage message = new FacesMessage("No input item exists");
        message.setSeverity(FacesMessage.SEVERITY_ERROR);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, message);
    }
  
    return flag;
}
public String checkProdStk(){
    String flag="Y";
    ViewObjectImpl prodVo=this.getMmKitProd1();
    String CldId=prodVo.getCurrentRow().getAttribute("CldId").toString();
    Integer SlocId=Integer.parseInt(prodVo.getCurrentRow().getAttribute("SlocId").toString());
    String OrgId=prodVo.getCurrentRow().getAttribute("OrgId").toString();
    String DocId=prodVo.getCurrentRow().getAttribute("DocId").toString();
    String WhId=prodVo.getCurrentRow().getAttribute("WhId").toString();
    RowQualifier rowQualifier = new RowQualifier(getMmKitProdStk1());
    rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND DocId='"+DocId+"'");
    Row[] filteredRows = getMmKitProdStk1().getFilteredRows(rowQualifier);
    
    if(filteredRows.length>0){
        flag="Y";
    }
    else{
        flag="N";
    }
  
    return flag;
}

    public BindingContainer getBindings() {
    return BindingContext.getCurrent().getCurrentBindingsEntry();
    }
    
public void getshuttleattributes()
{
    BindingContainer bc = this.getBindings();
    if(bc.isEmpty()){
    }
    else
    {
    JUCtrlListBinding listBindings = (JUCtrlListBinding)bc.get("MMStkSummSr2");
    if(listBindings.isEmpty() || listBindings.getSelectedValues().length==0){
    }
    else{
    Object str[] = listBindings.getSelectedValues();
       
    if(str.length>0){
    for (int i = 0; i < str.length; i++) {
       }
     }
    }}
    
}
public void Rowremove() 
{
    RowSetIterator rwitr=this.getMmKitProdStk2().createRowSetIterator(null);
    while(rwitr.hasNext()){
        Row r=rwitr.next();
        r.remove();
    }
     rwitr.closeRowSetIterator();
     getMmKitProdStk2().executeQuery();
   
 }
    
    public void pop2rowremove() 
    {
        String itemId=getMmKitProdItm3().getCurrentRow().getAttribute("IpItmId").toString();
        String docId=getMmKitProdItm3().getCurrentRow().getAttribute("DocId").toString();
        
        ViewObjectImpl itmStk=getMmKitProdItmStkO5();
        RowQualifier rowQualifier = new RowQualifier(itmStk);
        rowQualifier.setWhereClause("IpItmId='"+itemId+"' AND DocId='"+docId+"'");
        Row[] filteredRows = itmStk.getFilteredRows(rowQualifier); 
               //System.out.println("filteredRows.length : "+filteredRows.length);
        if(filteredRows.length>0){
            for(Row r:filteredRows){
                r.remove();
            }
        }
        itmStk.executeQuery();
        getMmKitProdItmStkO3().executeQuery();
         
       
         /* RowSetIterator rwitr=this.getMmKitProdItmStkO3().createRowSetIterator(null);
           while(rwitr.hasNext()){
               Row r=rwitr.next();
               r.remove();
           }
         rwitr.closeRowSetIterator();
         getMmKitProdItmStkO3().executeQuery(); */
     }
    
    public void pop2CurrentRemove() 
    {
        
      Row r=getMmKitProdItmStkO3().getCurrentRow();
      r.remove();
    }
    
    
    public boolean serialization(String inptid)
    {
       boolean flag=true;
        ViewObjectImpl prodvo=getMmKitProd1();
        String CldId=getMmKitProd1().getCurrentRow().getAttribute("CldId").toString();
        String WhId=getMmKitProd1().getCurrentRow().getAttribute("WhId").toString();
        String OrgId=getMmKitProd1().getCurrentRow().getAttribute("OrgId").toString();
        int SlocId=(Integer)getMmKitProd1().getCurrentRow().getAttribute("SlocId");
        String inputId=getMmKitProdItm3().getCurrentRow().getAttribute("IpItmId").toString();
        
        ViewObjectImpl StkSummsr=this.getMMStkSummSr1();
        ViewCriteria vc1 = StkSummsr.getViewCriteria("MMStkSummSrVOCriteria2");
        StkSummsr.applyViewCriteria(vc1);
        StkSummsr.setNamedWhereClauseParam("cldBind", CldId);
        StkSummsr.setNamedWhereClauseParam("slocBind",SlocId);
        StkSummsr.setNamedWhereClauseParam("orgBind", OrgId);
        StkSummsr.setNamedWhereClauseParam("whBind", WhId);
        StkSummsr.setNamedWhereClauseParam("itmBind", inputId);
        StkSummsr.executeQuery();
        
      String DocId=getMmKitProdItm3().getCurrentRow().getAttribute("DocId").toString();
       MmKitProdItmStkOImpl vo = (MmKitProdItmStkOImpl)this.getMmKitProdItmStkO3();
       ViewCriteria vc = vo.getViewCriteria("MmKitProdItmStkOCriteria");
       vo.applyViewCriteria(vc);
       vo.setNamedWhereClauseParam("inputidBind",inputId);
       vo.executeQuery();
       ViewObjectImpl inptitem = this.getInputItmDetail1();
       RowQualifier rowQualifier = new RowQualifier(inptitem);
       rowQualifier.setWhereClause("InputItmId= '"+ inputId +"' AND SerializedFlg= 'N'");
       Row[] filteredRows = inptitem.getFilteredRows(rowQualifier);
      if(filteredRows.length>=1)
        {
            flag=false;
        }
       else
       {
              flag=true;
       }
     return flag;
    }
    public void stkSummFilter(String CldId,String OrgId,Integer SlocId,String WhId)
    {
        String ItmId=getMmKitProd1().getCurrentRow().getAttribute("OpItmId").toString();
        ViewObjectImpl vo = this.getMMStkSummSr2();
        ViewCriteria vc = vo.getViewCriteria("MMStkSummSrVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("cldBind",CldId);
        vo.setNamedWhereClauseParam("slocBind",SlocId);
        vo.setNamedWhereClauseParam("orgBind",OrgId);
        vo.setNamedWhereClauseParam("whBind",WhId);
        vo.setNamedWhereClauseParam("itmBind",ItmId);
        vo.executeQuery();
  }
    
    public void kitStockUpdate(){
        this.getDBTransaction().postChanges();
        ViewObjectImpl prodvo=getMmKitProd1();
        String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
        int SlocId=(Integer)prodvo.getCurrentRow().getAttribute("SlocId");
        String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
        String FyId=prodvo.getCurrentRow().getAttribute("FyId").toString();
        String WhId=prodvo.getCurrentRow().getAttribute("WhId").toString();
        String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
        String ActnType=prodvo.getCurrentRow().getAttribute("KitActnType").toString();
        int userId=Integer.parseInt(prodvo.getCurrentRow().getAttribute("UsrIdCreate").toString());
        String StkUpdate =(String)(callStoredFunction(Types.VARCHAR, "mm_updt_stk_kit (?,?,?,?,?,?,?,?)", new Object[] {CldId,SlocId,OrgId,WhId,DocId,ActnType,userId,FyId}));  
    }
  
    
    
    public String getStkFlag()
    {
        String sr="Y";
        ViewObjectImpl prodvo=getMmKitProd1();
        String CldId=getMmKitProd1().getCurrentRow().getAttribute("CldId").toString();
        String WhId=getMmKitProd1().getCurrentRow().getAttribute("WhId").toString();
        String OrgId=getMmKitProd1().getCurrentRow().getAttribute("OrgId").toString();
        int SlocId=(Integer)getMmKitProd1().getCurrentRow().getAttribute("SlocId");
        String ItmId=getMmKitProd1().getCurrentRow().getAttribute("OpItmId").toString();
        
        /* ViewObjectImpl StkSummsr=this.getMMStkSummSr3();
        ViewCriteria vc = StkSummsr.getViewCriteria("MMStkSummSrVOCriteria");
        StkSummsr.applyViewCriteria(vc);
        StkSummsr.setNamedWhereClauseParam("cldBind", CldId);
        StkSummsr.setNamedWhereClauseParam("slocBind",SlocId);
        StkSummsr.setNamedWhereClauseParam("orgBind", OrgId);
        StkSummsr.setNamedWhereClauseParam("whBind", WhId);
        StkSummsr.setNamedWhereClauseParam("itmBind", ItmId);
        StkSummsr.setNamedWhereClauseParam("totStkBind",new Number(0));
        StkSummsr.executeQuery(); */
        
        ViewObjectImpl StkSummsr=this.getLOVSummSrDismental();
        ViewCriteria vc = StkSummsr.getViewCriteria("LOVSummSrDismentalVOCriteria1");
        StkSummsr.applyViewCriteria(vc);
        StkSummsr.setNamedWhereClauseParam("cldBind", CldId);
        StkSummsr.setNamedWhereClauseParam("slocBind",SlocId);
        StkSummsr.setNamedWhereClauseParam("orgBind", OrgId);
        StkSummsr.setNamedWhereClauseParam("whBind", WhId);
        StkSummsr.setNamedWhereClauseParam("ItmIdBind", ItmId);
        StkSummsr.setNamedWhereClauseParam("TotStkBind",new Number(1));
        StkSummsr.executeQuery();
        
        
        ViewObjectImpl vobin = this.getLOVSummBinDsmnt();
        ViewCriteria vcbin = vobin.getViewCriteria("LOVSummBinDsmntVOCriteria1");
        vobin.applyViewCriteria(vcbin);
        vobin.setNamedWhereClauseParam("orgIdBind", OrgId);
        vobin.setNamedWhereClauseParam("cldIdbind", CldId);
        vobin.setNamedWhereClauseParam("slocIdBind",SlocId);
       vobin.setNamedWhereClauseParam("WhBind", WhId);
        vobin.setNamedWhereClauseParam("IpItmBind", ItmId);
        vobin.setNamedWhereClauseParam("TotStkBind", new Number(1));
        vobin.executeQuery();
        
        ViewObjectImpl volot = this.getLovSummLotDsmnt1();
        ViewCriteria volc = volot.getViewCriteria("LovSummLotDsmntVOCriteria");
        volot.applyViewCriteria(volc);
        volot.setNamedWhereClauseParam("cldBind", CldId);
        volot.setNamedWhereClauseParam("slocBind",SlocId);
        volot.setNamedWhereClauseParam("orgBind", OrgId);
        volot.setNamedWhereClauseParam("whbind", WhId);
        volot.setNamedWhereClauseParam("itmIdBind", ItmId);
        volot.setNamedWhereClauseParam("totStkBind", new Number(1));
        volot.executeQuery();
        
        
        
        ViewObjectImpl optstkvo=this.getMmStkSumOpt1();
        RowQualifier rowQualifier = new RowQualifier(optstkvo);
        rowQualifier.setWhereClause("CldId= '"+CldId+"' AND OrgId='"+ OrgId +"' AND ItmId='"+ ItmId +"' AND SlocId= "+ SlocId +"");
        Row[] filteredRows = optstkvo.getFilteredRows(rowQualifier);
        String srFlag="";
        if(filteredRows.length>0) {
            for(Row r:filteredRows) {
               srFlag= r.getAttribute("SerializedFlg").toString();
            }
        }
        if(srFlag.equalsIgnoreCase("Y")) {
            sr="Y";
        }
        else if(srFlag.equalsIgnoreCase("N")) {
            sr="N";
        }
        
        return sr;
    }
    
    public String chkdeassembleQtyBin1(){
       String flag ="N";
    ViewObjectImpl prodVo=this.getMmKitProd1();
    String CldId=prodVo.getCurrentRow().getAttribute("CldId").toString();
    int SlocId=(Integer)prodVo.getCurrentRow().getAttribute("SlocId");
    String OrgId=prodVo.getCurrentRow().getAttribute("OrgId").toString();
    String WhId=prodVo.getCurrentRow().getAttribute("WhId").toString();
    String ItemId=prodVo.getCurrentRow().getAttribute("OpItmId").toString();
    Number totStk=(Number)prodVo.getCurrentRow().getAttribute("OpItmQty");
    
    RowQualifier rowQualifier = new RowQualifier(getMMStkSummBin3());
    rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND ItmId='"+ItemId+"'");
    Row[] filteredRows = getMMStkSummBin3().getFilteredRows(rowQualifier); 
    if(filteredRows.length>0)
    {    
      Number sum=new Number(0);
      for(Row r1:filteredRows) {
         Number stk= (Number)r1.getAttribute("totStkTrans");
         if(stk==null) {
            stk=new Number(0);
         }
         sum=sum.add(stk);
     }
     if(sum.compareTo(totStk)==0){
            flag="Y";
     }
     else{
       flag="N";
     }
   }
   return flag;
    }
    
    public String chkdeassembleQtyBin2(){
       String flag ="N";
    ViewObjectImpl prodVo=this.getMmKitProd1();
    String CldId=prodVo.getCurrentRow().getAttribute("CldId").toString();
    int SlocId=(Integer)prodVo.getCurrentRow().getAttribute("SlocId");
    String OrgId=prodVo.getCurrentRow().getAttribute("OrgId").toString();
    String WhId=prodVo.getCurrentRow().getAttribute("WhId").toString();
    String ItemId=prodVo.getCurrentRow().getAttribute("OpItmId").toString();
    Number totStk=(Number)prodVo.getCurrentRow().getAttribute("OpItmQty");
    
    RowQualifier rowQualifier = new RowQualifier(getLOVSummBinDsmnt());
    rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND ItmId='"+ItemId+"'");
    Row[] filteredRows = getLOVSummBinDsmnt().getFilteredRows(rowQualifier);
    if(filteredRows.length>0)
    {
        Number sum=new Number(0);
        for(Row r1:filteredRows) {
           Number stk= (Number)r1.getAttribute("totStkTrans");
            if(stk==null) {
                stk=new Number(0);
            }
            sum=sum.add(stk);
        }
        if(sum.compareTo(totStk)==0){
            flag="Y";
        }
            else{
               
                flag="N";
            }
    }
    return flag;
    }
    
       public String chkdeassembleQtySr1(){
           String flag ="N";
        ViewObjectImpl prodVo=this.getMmKitProd1();
        String CldId=prodVo.getCurrentRow().getAttribute("CldId").toString();
        int SlocId=(Integer)prodVo.getCurrentRow().getAttribute("SlocId");
        String OrgId=prodVo.getCurrentRow().getAttribute("OrgId").toString();
        String WhId=prodVo.getCurrentRow().getAttribute("WhId").toString();
        String DocId=prodVo.getCurrentRow().getAttribute("DocId").toString();
        String ItemId=prodVo.getCurrentRow().getAttribute("OpItmId").toString();
        Number totStk=(Number)prodVo.getCurrentRow().getAttribute("OpItmQty");
        if(getMmKitProdStk2().getEstimatedRowCount()>0){
            RowQualifier rowQualifier = new RowQualifier(getMmKitProdStk2());
            rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND DocId='"+DocId+"'");
            Row[] filteredRows = getMmKitProdStk2().getFilteredRows(rowQualifier);
            Number i=new Number(1);
            Number sum=new Number(0);
            for(Row r:filteredRows){
              sum=sum.plus(i);
              System.out.println("count is if part sum"+sum);
            }

            Number sum1=new Number(0);
            Number i1=new Number(1);
            RowQualifier rowQualifier1 = new RowQualifier(getLOVSummSrDismental());
            rowQualifier1.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND ItmId='"+ItemId+"'");
            Row[] filteredRows1 = getLOVSummSrDismental().getFilteredRows(rowQualifier1);
            System.out.println("total  row found is : "+filteredRows1.length);
            for(Row r1:filteredRows1) {
              // Number count=new Number(0);
              if(r1.getAttribute("ChkTrans")!=null){
                   String chktrans=r1.getAttribute("ChkTrans").toString();
                 System.out.println("chk trans validation------"+chktrans);
                  if(chktrans.equalsIgnoreCase("true")) { 
                     
                         //count=count.add(i);
                           sum1=sum1.plus(i1);
                          System.out.println("count is sum1 "+sum1);  
                       }
               }
              // sum=sum.add(count);
              
            }
            Number temp=sum.plus(sum1);
            System.out.println(totStk+"-------sum of data in if part temp------------ "+temp);
            if(temp.compareTo(totStk)==0){
                flag="Y";
               
            }
                else{
                    flag="N";
                }
           
        }else{
        RowQualifier rowQualifier = new RowQualifier(getLOVSummSrDismental());
        rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND ItmId='"+ItemId+"'");
        Row[] filteredRows = getLOVSummSrDismental().getFilteredRows(rowQualifier);
            System.out.println("total row found in eklse part : "+filteredRows.length);
        if(filteredRows.length>0)
        {
            Number i=new Number(1);
            Number sum=new Number(0);
             for(Row r1:filteredRows) {
               // Number count=new Number(0);
                
                if(r1.getAttribute("ChkTrans")!=null){
                    String chktrans=r1.getAttribute("ChkTrans").toString();
               System.out.println("chk trans validation------"+chktrans);
                   if(chktrans.equalsIgnoreCase("true")) { 
                      
                            //count=count.add(i);
                            sum=sum.plus(i);
                            System.out.println("count is "+sum);  
                        }
                }
               // sum=sum.add(count);
               
            }
           System.out.println(totStk+"------- else sum of data------------ "+sum);
            if(sum.compareTo(totStk)==0){
                flag="Y";
               
            }
                else{
                    flag="N";
                }
            }
        }
        return flag;
    }
       
       
       
    public String chkdeassembleQtySr(){
       String flag ="N";
    ViewObjectImpl prodVo=this.getMmKitProd1();
    String CldId=prodVo.getCurrentRow().getAttribute("CldId").toString();
    int SlocId=(Integer)prodVo.getCurrentRow().getAttribute("SlocId");
    String OrgId=prodVo.getCurrentRow().getAttribute("OrgId").toString();
    String WhId=prodVo.getCurrentRow().getAttribute("WhId").toString();
        String DocId=prodVo.getCurrentRow().getAttribute("DocId").toString();
    String ItemId=prodVo.getCurrentRow().getAttribute("OpItmId").toString();
    Number totStk=(Number)prodVo.getCurrentRow().getAttribute("OpItmQty");
    if(getMmKitProdStk2().getEstimatedRowCount()>0){
        RowQualifier rowQualifier = new RowQualifier(getMmKitProdStk2());
        rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND DocId='"+DocId+"'");
        Row[] filteredRows = getMmKitProdStk2().getFilteredRows(rowQualifier);
        Number i=new Number(1);
        Number sum=new Number(0);
        for(Row r:filteredRows){
          sum=sum.plus(i);
          //  System.out.println("count is if part sum"+sum);
        }

        Number sum1=new Number(0);
        Number i1=new Number(1);
        RowQualifier rowQualifier1 = new RowQualifier(getMMStkSummSr3());
        rowQualifier1.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND ItmId='"+ItemId+"'");
        Row[] filteredRows1 = getMMStkSummSr3().getFilteredRows(rowQualifier1);
        for(Row r1:filteredRows1) {
          // Number count=new Number(0);
          if(r1.getAttribute("chkTrans")!=null){
               String chktrans=r1.getAttribute("chkTrans").toString();
            //   System.out.println("chk trans validation------"+chktrans);
              if(chktrans.equalsIgnoreCase("true")) { 
                 
                       //count=count.add(i);
                       sum1=sum1.plus(i1);
                      // System.out.println("count is sum1 "+sum1);  
                   }
           }
          // sum=sum.add(count);
          
        }
        Number temp=sum.plus(sum1);
      //  System.out.println(totStk+"-------sum of data in if part temp------------ "+temp);
        if(temp.compareTo(totStk)==0){
            flag="Y";
           
        }
            else{
                flag="N";
            }
        
    }else{
    RowQualifier rowQualifier = new RowQualifier(getMMStkSummSr3());
    rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND ItmId='"+ItemId+"'");
    Row[] filteredRows = getMMStkSummSr3().getFilteredRows(rowQualifier);
    if(filteredRows.length>0)
    {
        Number i=new Number(1);
        Number sum=new Number(0);
         for(Row r1:filteredRows) {
           // Number count=new Number(0);
            
            if(r1.getAttribute("chkTrans")!=null){
                String chktrans=r1.getAttribute("chkTrans").toString();
           //     System.out.println("chk trans validation------"+chktrans);
               if(chktrans.equalsIgnoreCase("true")) { 
                  
                        //count=count.add(i);
                        sum=sum.plus(i);
                      //  System.out.println("count is "+sum);  
                    }
            }
           // sum=sum.add(count);
           
        }
       // System.out.println(totStk+"-------sum of data------------ "+sum);
        if(sum.compareTo(totStk)==0){
            flag="Y";
           
        }
            else{
                flag="N";
            }
        }
    }
    return flag;
    }
    public String chkdeassembleQtyLot(){
        String flag ="N";
        ViewObjectImpl prodVo=this.getMmKitProd1();
        String CldId=prodVo.getCurrentRow().getAttribute("CldId").toString();
        int SlocId=(Integer)prodVo.getCurrentRow().getAttribute("SlocId");
        String OrgId=prodVo.getCurrentRow().getAttribute("OrgId").toString();
        String WhId=prodVo.getCurrentRow().getAttribute("WhId").toString();
        String ItemId=prodVo.getCurrentRow().getAttribute("OpItmId").toString();
        Number totStk=(Number)prodVo.getCurrentRow().getAttribute("OpItmQty");
        
        RowQualifier rowQualifier = new RowQualifier(getLovSummLotDsmnt1());
        rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND ItmId='"+ItemId+"'");
        Row[] filteredRows = getLovSummLotDsmnt1().getFilteredRows(rowQualifier);
        if(filteredRows.length>0)
        {
         Number sum=new Number(0);
         for(Row r1:filteredRows) {
            Number stk= (Number)r1.getAttribute("totStkTrans");
             if(stk==null) {
                 stk=new Number(0);
             }
             sum=sum.add(stk);
         }
         if(sum.compareTo(totStk)==0){
             flag="Y";
         }
             else{
                
                
                 flag="N";
             }
        }
        return flag;
        
    }    
    
    
    
    public void serializeSetStock() {

        /* RowSetIterator itr =this.getMmKitProdStk2().createRowSetIterator(null);
                 while(itr.hasNext()){
                     Row r=itr.next();
                         r.remove();
                 }
                itr.closeRowSetIterator(); */
        ViewObjectImpl prodvo = this.getMmKitProd1();
        String DocId = prodvo.getCurrentRow().getAttribute("DocId").toString();
        String CldId = prodvo.getCurrentRow().getAttribute("CldId").toString();
        String WhId = prodvo.getCurrentRow().getAttribute("WhId").toString();
        String OrgId = prodvo.getCurrentRow().getAttribute("OrgId").toString();
        int SlocId = (Integer)prodvo.getCurrentRow().getAttribute("SlocId");
        String OpItmId = prodvo.getCurrentRow().getAttribute("OpItmId").toString();
        String ItmUom = prodvo.getCurrentRow().getAttribute("OpItmUom").toString();
        String StkActn = prodvo.getCurrentRow().getAttribute("KitActnType").toString();
        RowQualifier rowQualifier = new RowQualifier(getLOVSummSrDismental());
        rowQualifier.setWhereClause("CldId='" + CldId + "' AND SlocId= " + SlocId + " AND OrgId='" + OrgId +
                                    "' AND WhId='" + WhId + "' AND ItmId='" + OpItmId + "'");
        Row[] filteredRows = getLOVSummSrDismental().getFilteredRows(rowQualifier);
        RowQualifier rowQualifier1 = new RowQualifier(this.getMmKitProdStk2());
        rowQualifier1.setWhereClause("DocId='" + DocId + "'");
        Row[] filteredRow = this.getMmKitProdStk2().getFilteredRows(rowQualifier1);
        //  System.out.println("filteredRow-----------  "+filteredRow.length);
        if (filteredRow.length > 0) {
            for (Row rr3 : filteredRow) {
                if (rr3.getAttribute("SrNo") != null) {
                    String srno = rr3.getAttribute("SrNo").toString();
                    int count = 0;
                    if (filteredRows.length > 0) {
                        for (Row r1 : filteredRows) {
                            if (r1.getAttribute("ChkTrans") != null &&
                                (r1.getAttribute("ChkTrans").toString()).equalsIgnoreCase("true") &&
                                r1.getAttribute("SrNo").toString().equalsIgnoreCase(srno)) {
                                count = count + 1;
                            }
                        }
                    }
                    //   System.out.println(" -----count--?> "+count);
                    if (count == 0) {
                        //System.out.println("ROW REMOVE IN DB TABLE");
                        // rr3.remove();
                    }

                }
            }
        }
       if (filteredRows.length > 0) {
          Number sum = new Number(0);
            Number sum1 = new Number(0);
            for (Row r1 : filteredRows) {
                if (r1.getAttribute("ChkTrans") != null &&
                    (r1.getAttribute("ChkTrans").toString()).equalsIgnoreCase("true")) {
                    int countSr = 0;
                    String BinId = "";
                    Number stkTrans = new Number(1);
                    String BinChk = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
                    if (BinChk.equalsIgnoreCase("Y")) {
                        BinId = r1.getAttribute("BinId").toString();
                    } else if (BinChk.equalsIgnoreCase("N")) {
                        BinId = "0";
                    }
                    String LotId = r1.getAttribute("LotId").toString();
                    String SrNo = r1.getAttribute("SrNo").toString();
                    RowQualifier rowQualifier2 = new RowQualifier(this.getMmKitProdStk2());
                    rowQualifier2.setWhereClause("DocId='" + DocId + "'");
                    Row[] filteredR = this.getMmKitProdStk2().getFilteredRows(rowQualifier2);
                    // RowQualifier
                    //  System.out.println(filteredR+"---------------chktrans "+r1.getAttribute("chkTrans").toString());
                    if (filteredR.length > 0) {
                        for (Row rr4 : filteredR) {
                            if (rr4.getAttribute("SrNo") != null &&
                                rr4.getAttribute("SrNo").toString().equalsIgnoreCase(r1.getAttribute("SrNo").toString())) {
                                countSr = countSr + 1;
                            }
                        }
                    }
                    //  System.out.println("count SR---------- > "+countSr);
                    if (countSr > 0) {
                        //   System.out.println("Sr No Already exist !!!");
                    } else if (countSr == 0) {
                        //System.out.println(" Create new Sr No t !!!");
                        if (stkTrans != null && stkTrans.compareTo(sum1) == 1) {
                            Row r = getMmKitProdStk2().createRow();
                            r.setAttribute("DocId", DocId);
                            r.setAttribute("CldId", CldId);
                            r.setAttribute("OrgId", OrgId);
                            r.setAttribute("SlocId", SlocId);
                            r.setAttribute("WhId", WhId);
                            r.setAttribute("BinId", BinId);
                            r.setAttribute("ItmUom", ItmUom);
                            r.setAttribute("LotId", LotId);
                            r.setAttribute("OpItmId", OpItmId);
                            r.setAttribute("SrNo", SrNo);
                            r.setAttribute("StkActn", StkActn);
                            r.setAttribute("TotQty", stkTrans);
                            //  this.getDBTransaction().postChanges();

                        }
                    }
                }
            }
        }
        //  System.out.println("before DB Transaction------------");
        // System.out.println("after DB Transaction------------");
    }
    public void binSetStock(Number totQty)
    {
        ViewObjectImpl prodvo=this.getMmKitProd1();
        String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
        String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
        String WhId=prodvo.getCurrentRow().getAttribute("WhId").toString();
        String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
        int SlocId=(Integer)prodvo.getCurrentRow().getAttribute("SlocId");
        String OpItmId=prodvo.getCurrentRow().getAttribute("OpItmId").toString();
        String ItmUom=prodvo.getCurrentRow().getAttribute("OpItmUom").toString();
        String StkActn=prodvo.getCurrentRow().getAttribute("KitActnType").toString();
      
        RowQualifier rowQualifier = new RowQualifier(getLOVSummBinDsmnt());
        rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND ItmId='"+OpItmId+"'");
        Row[] filteredRows = getLOVSummBinDsmnt().getFilteredRows(rowQualifier); 
        if(filteredRows.length>0){    
        Number sum=new Number(0);
        for(Row r1:filteredRows) {
           Number stkTrans= (Number)r1.getAttribute("totStkTrans");
           String BinId=r1.getAttribute("BinId").toString();
           String LotId=r1.getAttribute("LotId").toString();
            if(stkTrans!=new Number(0) && stkTrans!=null){
                    Row r=getMmKitProdStk2().createRow();
                    r.setAttribute("DocId", DocId);
                    r.setAttribute("CldId", CldId);
                    r.setAttribute("OrgId", OrgId);
                    r.setAttribute("SlocId", SlocId);
                    r.setAttribute("WhId", WhId);
                    r.setAttribute("BinId", BinId);
                    r.setAttribute("ItmUom", ItmUom);
                    r.setAttribute("LotId", LotId);
                    r.setAttribute("OpItmId", OpItmId);
                    r.setAttribute("StkActn", StkActn);
                    r.setAttribute("TotQty", stkTrans);
                }
          }
        }
         
    }
    public void pop2setbinck(String binTrans){
        if(getMmKitProdItmStkO3().getCurrentRow()!=null){
        ViewObjectImpl itmstk=this.getMmKitProdItmStkO3();
        itmstk.getCurrentRow().setAttribute("BinId",binTrans); 
       // System.out.println(" itm stk bin id is "+itmstk.getCurrentRow().getAttribute("BinId"));
        }
    }
    public void pop2setserialno(String srTrans){
        if(getMmKitProdItmStkO3().getCurrentRow()!=null){
        ViewObjectImpl itmstk=this.getMmKitProdItmStkO3();
        itmstk.getCurrentRow().setAttribute("SrNo", srTrans);
       // System.out.println(" itm stk Srno is "+itmstk.getCurrentRow().getAttribute("SrNo"));
        }
    }
    
    public void pop1binsetval(){
        String flg="0";
        if(getMmKitProdStk2().getCurrentRow()!=null){
        ViewObjectImpl itmstk=this.getMmKitProdStk2();
        itmstk.getCurrentRow().setAttribute("BinId", flg);     
      //  System.out.println(" itm stk bin id is "+itmstk.getCurrentRow().getAttribute("BinId"));
        }
   }
    public void pop1srsetvalue(){
        String flg="0";
        if(getMmKitProdStk2().getCurrentRow()!=null){
            ViewObjectImpl itmstk=this.getMmKitProdStk2();
            itmstk.getCurrentRow().setAttribute("SrNo", flg);
        }
    }
    
    
  
    
    public String totqtySet(){
        if(getMmKitProdItmStkO3().getCurrentRow()!=null){
        Row itmstk=getMmKitProdItmStkO3().getCurrentRow();
            Number okQty=new Number(0);
            Number rwkQty=new Number(0);
            Number scrpQty=new Number(0);
        if(itmstk.getAttribute("OkQty")!=null)
            okQty=(Number)itmstk.getAttribute("OkQty");
        if(itmstk.getAttribute("RwkQty")!=null)
            rwkQty=(Number)itmstk.getAttribute("RwkQty");
         if(itmstk.getAttribute("ScrpQty")!=null)   
            scrpQty=(Number)itmstk.getAttribute("ScrpQty");
        Number sum=new Number(0);
        sum=okQty.add(rwkQty).add(scrpQty);
        
        itmstk.setAttribute("TotQty",sum);
        }
        
        return null;
    }
    
    public String pop2srValidator(String srno){
        String flag = "Y";
        ViewObjectImpl prodvo = this.getMmKitProd1();
        String StkActn = prodvo.getCurrentRow().getAttribute("KitActnType").toString();
        String docId = prodvo.getCurrentRow().getAttribute("DocId").toString();
        RowSetIterator prodStkIterator = this.getMmKitProdItmStkO3().createRowSetIterator(null);
        Row currentRow = this.getMmKitProdItmStkO3().getCurrentRow();
        while (prodStkIterator.hasNext()) {
            Row r = prodStkIterator.next();
            if (r != getMmKitProdItmStkO3().getCurrentRow()) {
                if (r.getAttribute("SrNo") != null) {
                    String stkactn = r.getAttribute("StkActn").toString();
                    String srno1 = r.getAttribute("SrNo").toString();
                    String Stkdocid = r.getAttribute("DocId").toString();
                    if (srno1.equals(srno) && stkactn.equalsIgnoreCase(StkActn) && docId.equalsIgnoreCase(Stkdocid)) {
                        flag = "N";
                        break;
                    }
                }
            }
        }
        prodStkIterator.closeRowSetIterator();
        if (flag.equals("Y")) {
            ViewObjectImpl vo = this.getMmKitProdItmStkO3();
            RowSetIterator rsi = this.getMmKitProdItmStkO().createRowSetIterator(null);
            Row curr = vo.getCurrentRow();
            while (rsi.hasNext()) {
                Row row = rsi.next();
                if (row != curr) {
                    String stkactn = row.getAttribute("StkActn").toString();
                    String srno1 = row.getAttribute("SrNo").toString();
                    String Stkdocid = row.getAttribute("DocId").toString();
                    if (srno1.equals(srno) && stkactn.equalsIgnoreCase(StkActn) && docId.equalsIgnoreCase(Stkdocid)) {
                        flag = "N";
                        break;
                    }
                }
            }
            rsi.closeRowSetIterator();
        }
        return flag;
    }
    public String pop2LotBinValidator2(String binName){
        String flag="";
        String StkActn=getMmKitProd1().getCurrentRow().getAttribute("KitActnType").toString();
        ViewObjectImpl itmProdStk=this.getMmKitProdItmStkO3();
        if(itmProdStk.getCurrentRow().getAttribute("LotId")!=null){
        String lotid=itmProdStk.getCurrentRow().getAttribute("LotId").toString();
        RowQualifier rowQualifier1 = new RowQualifier(itmProdStk);
        rowQualifier1.setWhereClause("BinId='"+ binName +"' AND StkActn='"+ StkActn + "' AND LotId='"+ lotid +"'");
        Row[] filteredRows1 = itmProdStk.getFilteredRows(rowQualifier1);
        int count=0;
        for(Row r:filteredRows1) {
            if(r!=itmProdStk.getCurrentRow()) {
                count++;
            }
        }
        if(count>0) {
            flag="N";
        }
        else{
            flag="Y";
        }
        }
        return flag;
    }
    
    public String checkBinQtyStk(String binName,Number Qty,String LotId){
        String flag="";
        ViewObjectImpl prodItmvo=getMmKitProdItm3();
        String CldId=prodItmvo.getCurrentRow().getAttribute("CldId").toString();
        String OrgId=prodItmvo.getCurrentRow().getAttribute("OrgId").toString();
        String WhId=prodItmvo.getCurrentRow().getAttribute("WhId").toString();
        int SlocId=(Integer)prodItmvo.getCurrentRow().getAttribute("SlocId");
        String iptId=prodItmvo.getCurrentRow().getAttribute("IpItmId").toString();
        if(getMmKitProdItmStkO3().getCurrentRow().getAttribute("BinId")!=null && getMmKitProdItmStkO3().getCurrentRow().getAttribute("LotId")!=null){
        String binId=getMmKitProdItmStkO3().getCurrentRow().getAttribute("BinId").toString();
        String lotId=getMmKitProdItmStkO3().getCurrentRow().getAttribute("LotId").toString();
            
        RowQualifier rowQualifier = new RowQualifier(getMMStkSummBin1());
        rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND LotId='"+ lotId+"' AND ItmId='"+iptId+"' AND BinId='"+binId+"'");
        Row[] filteredRows = getMMStkSummBin1().getFilteredRows(rowQualifier); 
        Number TotStk=new Number(0);
        for(Row r:filteredRows){
            TotStk=(Number)r.getAttribute("TotStk");
        }
        if(Qty.compareTo(TotStk)==0 || Qty.compareTo(TotStk)==-1) {
            flag="Y";
        }
        else if(Qty.compareTo(TotStk)==1) {
            flag="N";
        }
        }
        return flag;
        
    }
    
    public String pop2lotStk(String LotId,Number Qty){
         String flag="";
         ViewObjectImpl prodItmvo=getMmKitProdItm3();
         String CldId=prodItmvo.getCurrentRow().getAttribute("CldId").toString();
         String OrgId=prodItmvo.getCurrentRow().getAttribute("OrgId").toString();
         String WhId=prodItmvo.getCurrentRow().getAttribute("WhId").toString();
         int SlocId=(Integer)prodItmvo.getCurrentRow().getAttribute("SlocId");
         String iptId=prodItmvo.getCurrentRow().getAttribute("IpItmId").toString();
         RowQualifier rowQualifier = new RowQualifier(getMMStkSummInptLot3());
         rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND LotId='"+ LotId+"' AND ItmId='"+iptId+"'");
         Row[] filteredRows = getMMStkSummInptLot3().getFilteredRows(rowQualifier); 
         Number TotStk=new Number(0);
         for(Row r:filteredRows){
             TotStk=(Number)r.getAttribute("TotStk");
         }
         if(Qty.compareTo(TotStk)==0 || Qty.compareTo(TotStk)==-1) {
             flag="Y";
         }
         else if(Qty.compareTo(TotStk)==1) {
             flag="N";
         }

         return flag;
         }
    
    public String pop2LotBinValidator(String binName){
        
        String flag="";
        String StkActn=getMmKitProd1().getCurrentRow().getAttribute("KitActnType").toString();
        ViewObjectImpl itmProdStk=getMmKitProdItmStkO3();
        if(getMmKitProdItmStkO3().getCurrentRow().getAttribute("LotId")!=null){
        String lotid=itmProdStk.getCurrentRow().getAttribute("LotId").toString();
        String opsrno=itmProdStk.getCurrentRow().getAttribute("OpSrNo").toString();
       // System.out.println("lot id is : "+lotid+"opsrno : "+opsrno);
        RowQualifier rowQualifier1 = new RowQualifier(itmProdStk);
        rowQualifier1.setWhereClause("BinId='"+ binName +"' AND StkActn='"+ StkActn + "' AND LotId='"+ lotid +"' AND OpSrNo='"+ opsrno +"'");
        Row[] filteredRows1 = itmProdStk.getFilteredRows(rowQualifier1);
        int count=0;
        for(Row r:filteredRows1) {
            if(r!=itmProdStk.getCurrentRow()) {
                count++;
            }
        }
        if(count>0) {
            flag="N";
        }
        else{
            flag="Y";
         }
        }
        return flag;
    }
    public String lotBinValidator(String binName){
           String flag="Y";
           ViewObjectImpl prodvo=this.getMmKitProd1();
           String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
           String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
           String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
           int SlocId=(Integer)prodvo.getCurrentRow().getAttribute("SlocId");
           String OpItmId=prodvo.getCurrentRow().getAttribute("OpItmId").toString();
           String StkActn=prodvo.getCurrentRow().getAttribute("KitActnType").toString();
        
           RowQualifier rowQualifier = new RowQualifier(this.getMMAppKit1()); 
           rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND OutputItmId='"+OpItmId+"'");
           Row[] filteredRows = this.getMMAppKit1().getFilteredRows(rowQualifier); 
           String srflg="";
           for(Row r:filteredRows) {
              srflg=r.getAttribute("SerializedFlg").toString();
           }
           if(srflg.equalsIgnoreCase("N")){
               ViewObjectImpl prodStk=this.getMmKitProdStk2();
               if(prodStk.getCurrentRow().getAttribute("LotId")!=null){
              String lotid=prodStk.getCurrentRow().getAttribute("LotId").toString();
              RowSetIterator prodStkIterator = this.getMmKitProdStk2().createRowSetIterator(null);
                        Row currentRow=this.getMmKitProdStk2().getCurrentRow();
                        while(prodStkIterator.hasNext()){
                                 Row r1 = prodStkIterator.next();
                                // System.out.println("r1.getKey(): "+r1.getKey());  
                                if(r1!=currentRow){
                                   String LotId=r1.getAttribute("LotId").toString();
                                    String BinId=r1.getAttribute("BinId").toString();
                                        if(lotid.equals(LotId) && BinId.equalsIgnoreCase(binName)) {
                                            flag="N";
                                        }
                                 }
                             }
                      prodStkIterator.closeRowSetIterator();
                    //  System.out.println("function serialize"+flag);
                   //   this.getMmKitProdStk2().closeRowSetIterator();
               }
           }
        return flag;
    }
    
    public String islotbinduplicate(String lotName){
        String flag="Y";
        ViewObjectImpl prodvo=this.getMmKitProd1();
        String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
        String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
        String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
        int SlocId=(Integer)prodvo.getCurrentRow().getAttribute("SlocId");
        String OpItmId=prodvo.getCurrentRow().getAttribute("OpItmId").toString();
        String StkActn=prodvo.getCurrentRow().getAttribute("KitActnType").toString();
        
        RowQualifier rowQualifier = new RowQualifier(this.getMMAppKit1()); 
        rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND OutputItmId='"+OpItmId+"'");
        Row[] filteredRows = this.getMMAppKit1().getFilteredRows(rowQualifier); 
        String srflg="";
        for(Row r:filteredRows) {
           srflg=r.getAttribute("SerializedFlg").toString();
        }
        if(srflg.equalsIgnoreCase("N")){
            ViewObjectImpl prodStk=this.getMmKitProdStk2();
            if(prodStk.getCurrentRow().getAttribute("BinId")!=null){
           String binName=prodStk.getCurrentRow().getAttribute("BinId").toString();
           RowSetIterator prodStkIterator = this.getMmKitProdStk2().createRowSetIterator(null);
           Row currentRow=this.getMmKitProdStk2().getCurrentRow();
              while(prodStkIterator.hasNext()){
                   Row r1 = prodStkIterator.next();
                             // System.out.println("r1.getKey(): "+r1.getKey());  
                     if(r1!=currentRow){
                       String LotId=r1.getAttribute("LotId").toString();
                       String BinId=r1.getAttribute("BinId").toString();
                       if(lotName.equals(LotId) && BinId.equalsIgnoreCase(binName)) {
                                         flag="N";
                                     }
                              }
                          }
                   prodStkIterator.closeRowSetIterator();
                //   System.out.println("function serialize in lot case"+flag);
                //   this.getMmKitProdStk2().closeRowSetIterator();
            }
        }
        return flag;
    }
    
    public String pop2lotchkexcept(String Lotname){
        String flag="Y";
          
              ViewObjectImpl prodStk=this.getMmKitProdItmStkO3();
                  if(prodStk.getCurrentRow().getAttribute("BinId")!=null){
                 String binName=prodStk.getCurrentRow().getAttribute("BinId").toString();
                 RowSetIterator prodStkIterator = prodStk.createRowSetIterator(null);
                 Row currentRow=prodStk.getCurrentRow();
                    while(prodStkIterator.hasNext()){
                         Row r1 = prodStkIterator.next();
                                   // System.out.println("r1.getKey(): "+r1.getKey());  
                           if(r1!=currentRow){
                             String LotId=r1.getAttribute("LotId").toString();
                             String BinId=r1.getAttribute("BinId").toString();
                             if(Lotname.equals(LotId) && BinId.equalsIgnoreCase(binName)) {
                                               flag="N";
                                               break;
                                           }
                                    }
                                }
                         prodStkIterator.closeRowSetIterator();
                       //  System.out.println("function serialize in lot case"+flag);
                      //   this.getMmKitProdStk2().closeRowSetIterator();
                  }
              return flag;
    }
   
     public String checkEmptyRecord(){
        ViewObjectImpl prodItmvo=this.getMmKitProdItm3();
        Row r=prodItmvo.getCurrentRow();
        String flag="";
        if(r.getAttribute("IpItmId")!=null && r.getAttribute("DocId")!=null){
           ViewObjectImpl itmstkVo=this.getMmKitProdItmStkO2();
           RowQualifier rowQualifier = new RowQualifier(itmstkVo);
           rowQualifier.setWhereClause("IpItmId= '"+r.getAttribute("IpItmId")+"' AND DocId= '"+r.getAttribute("DocId"));
           Row[] filteredrows= itmstkVo.getFilteredRows(rowQualifier);
           if(filteredrows.length>0){
              flag= "Y";
           }
           else{
              flag= "N";
           }
        }
        return flag;
  } 
    
    public String checkserialization(String srno)
    {
        String flag="Y";
        mandatorySerialize();
        ViewObjectImpl prodvo=this.getMmKitProd1();
        String StkActn=prodvo.getCurrentRow().getAttribute("KitActnType").toString();
        RowQualifier rowQualifier1 = new RowQualifier(getMmKitProdStk2());
        rowQualifier1.setWhereClause("SrNo='"+ srno +"' AND StkActn='"+ StkActn + "'");
        Row[] filteredRows1 = getMmKitProdStk2().getFilteredRows(rowQualifier1);
        int count=0;
        for(Row r:filteredRows1) {
            if(r!=getMmKitProdStk2().getCurrentRow()) {
                count++;
            }
        }
      RowQualifier rowQualifier = new RowQualifier(getMmKitProdStk1());
      rowQualifier.setWhereClause("SrNo='"+ srno +"' AND StkActn='"+ StkActn + "'");
      Row[] filteredRows = getMmKitProdStk1().getFilteredRows(rowQualifier);
      
     
      if(count>0 || filteredRows.length>1) {
            flag="N";
        }
       else 
        {
          flag="Y";
        }
      
        return flag;
    }
    
    public void lotSetStock(Number totQty)
    {
        ViewObjectImpl prodvo=this.getMmKitProd1();
        String DocId=prodvo.getCurrentRow().getAttribute("DocId").toString();
        String CldId=prodvo.getCurrentRow().getAttribute("CldId").toString();
        String WhId=prodvo.getCurrentRow().getAttribute("WhId").toString();
        String OrgId=prodvo.getCurrentRow().getAttribute("OrgId").toString();
        int SlocId=(Integer)prodvo.getCurrentRow().getAttribute("SlocId");
        String OpItmId=prodvo.getCurrentRow().getAttribute("OpItmId").toString();
        String ItmUom=prodvo.getCurrentRow().getAttribute("OpItmUom").toString();
        String StkActn=prodvo.getCurrentRow().getAttribute("KitActnType").toString();
        
        
        RowQualifier rowQualifier = new RowQualifier(getLovSummLotDsmnt1());
        rowQualifier.setWhereClause("CldId='"+CldId+"' AND SlocId= "+SlocId+" AND OrgId='"+OrgId+"' AND WhId='"+WhId+"' AND ItmId='"+OpItmId+"'");
        Row[] filteredRows = getLovSummLotDsmnt1().getFilteredRows(rowQualifier); 
       
        if(filteredRows.length>0){    
        Number sum=new Number(0);
        for(Row r1:filteredRows) {
           Number stkTrans= (Number)r1.getAttribute("totStkTrans");
           String LotId=r1.getAttribute("LotId").toString();
          
            if(stkTrans!=new Number(0) && stkTrans!=null){
                    Row r=getMmKitProdStk2().createRow();
                    r.setAttribute("DocId", DocId);
                    r.setAttribute("CldId", CldId);
                    r.setAttribute("OrgId", OrgId);
                    r.setAttribute("SlocId", SlocId);
                    r.setAttribute("WhId", WhId);
                    r.setAttribute("BinId", "0");
                    r.setAttribute("ItmUom", ItmUom);
                    r.setAttribute("LotId", LotId);
                    r.setAttribute("OpItmId", OpItmId);
                    r.setAttribute("StkActn", StkActn);
                    r.setAttribute("TotQty", stkTrans);
                }
          }
        }
          
    }
    public void lovLotProdVwFilter(){
       // System.out.println("AMIMPL BHarat test 1 ----- ");
        String inputId=getMmKitProdItm3().getCurrentRow().getAttribute("IpItmId").toString();
        String cldId=getMmKitProdStk2().getCurrentRow().getAttribute("CldId").toString();
        Integer slocId=Integer.parseInt(getMmKitProdStk2().getCurrentRow().getAttribute("SlocId").toString());
        String orgId=getMmKitProdStk2().getCurrentRow().getAttribute("OrgId").toString();
        String opsrno=getMmKitProdStk2().getCurrentRow().getAttribute("SrNo").toString();
        String opItmId=getMmKitProdStk2().getCurrentRow().getAttribute("OpItmId").toString();
        ViewObjectImpl vo = this.getLovMmKirProdLot1();
         ViewCriteria vc = vo.getViewCriteria("LovMmKirProdLotVOCriteria");
         vo.applyViewCriteria(vc);
         vo.setNamedWhereClauseParam("cldbind",cldId);
         vo.setNamedWhereClauseParam("Slocbind",slocId);
         vo.setNamedWhereClauseParam("Orgbind",orgId);
         vo.setNamedWhereClauseParam("OptItmBind",opItmId);
         vo.setNamedWhereClauseParam("IptItmBind",inputId);
         vo.setNamedWhereClauseParam("OpSrBind",opsrno);
         vo.executeQuery();
         
          ViewObjectImpl vo1 = this.getLovMmKirProdLot1();
         ViewCriteria vc1 = vo1.getViewCriteria("LovMmKirProdLotVOCriteria1");
         vo1.applyViewCriteria(vc1);
         vo1.setNamedWhereClauseParam("IptItmBind",inputId);
         vo1.executeQuery();
         
        // System.out.println("vo .get query is : "+vo.getQuery());
         
       //  System.out.println(inputId+" vo 1 query "+vo1.getQuery());
       // 
       // System.out.println("AMIMPL BHarat test 2 ----- ");
         
    }
    public void criteriasummsr(){
      //  MMStkSummSrVOCriteria3
        
      //ViewObjectImpl prodvo=this.getMmKitProd1();
     // String DocId=this.getMmKitProd1().getCurrentRow().getAttribute("DocId").toString();
       ViewObjectImpl issItm = this.getMmKitProdStk2();
    //  System.out.println("issItm.getEstimatedRowCount():  "+issItm.getEstimatedRowCount());
      if(issItm.getEstimatedRowCount()>0){
         // getMmKitProdStk2().executeQuery();
      Row curRow = issItm.getCurrentRow();
      this.getMMStkSummSr3().setWhereClause("SR_NO NOT IN (SELECT SR_NO from MM$KIT$PROD$STK where doc_id = '"+curRow.getAttribute("DocId").toString()+"')");
      this.getMMStkSummSr3().executeQuery();
      //System.out.println("query is "+getMMStkSummSr3().getQuery());
      } 
      
      
        if(issItm.getEstimatedRowCount()>0){
           // getMmKitProdStk2().executeQuery();
            getDBTransaction().postChanges();
        Row curRow = issItm.getCurrentRow();
        getLOVSummSrDismental().setWhereClause("SR_NO NOT IN (SELECT SR_NO from MM$KIT$PROD$STK where doc_id = '"+curRow.getAttribute("DocId").toString()+"')");
        getLOVSummSrDismental().executeQuery();
//System.out.println("query is "+getMMStkSummSr3().getQuery());
        } /* else if(issItm.getEstimatedRowCount()==0){
            
            ViewObjectImpl proditm = this.getMmKitProd1();
            if(proditm.getCurrentRow()!=null){
                getDBTransaction().postChanges();
            Row curRow1 = proditm.getCurrentRow();
            getLOVSummSrDismental().setWhereClause("SR_NO NOT IN (SELECT SR_NO from MM$KIT$PROD$STK where doc_id = '"+curRow1.getAttribute("DocId").toString()+"')");
            getLOVSummSrDismental().executeQuery();
            } 
        }*/
       /* ViewObjectImpl prodvo=this.getMmKitProd1();
        String DocId=this.getMmKitProd1().getCurrentRow().getAttribute("DocId").toString();
        
        ViewObjectImpl prodstkvo=getMmKitProdStk2();
        Row [] filterRows=prodstkvo.getFilteredRows("DocId", DocId);
        
        if(filterRows.length>0)
        {
            for(Row r:filterRows){
             String srno=r.getAttribute("SrNo").toString();
                System.out.println("summsr"+srno);
                ViewObjectImpl vo=this.getMMStkSummSr3();
                ViewCriteria vc = vo.getViewCriteria("MMStkSummSrVOCriteria3");
                vo.applyViewCriteria(vc);
                vo.setNamedWhereClauseParam("SrBind",srno);
                vo.executeQuery();
                System.out.println(vo.getQuery());
            }
        }  */
    }
  
    public String pop1DeleteHandle(){
        //if(this.getMmKitProdStk2().getCurrentRow()!=null){
                     Row r=getMmKitProdStk2().getCurrentRow();
                     if(r!=null){
                         r.remove();
                     }
        //}
         return "";
     }
    
    public String prodStkDeleteHandle(){
        String flag="Y";
        if(getMmKitProdStk2().getEstimatedRowCount()>1){
        Row r=getMmKitProdStk2().getCurrentRow();
        if(r!=null){
            r.remove();
          }
        flag="Y";
        }else if(getMmKitProdStk2().getEstimatedRowCount()==1){
            Row r=getMmKitProdStk2().getCurrentRow();
            if(r!=null){
                r.remove();
                
            }
            Row r1=getMmKitProd1().getCurrentRow();
            if(r1!=null){
                r1.remove();
            }
            flag="N";
        }
        return flag;
        
    }
    
    public String prodCheckWithStk(){
        String flag="";
        ViewObjectImpl prodvo=this.getMmKitProd1();
        String docId=prodvo.getCurrentRow().getAttribute("DocId").toString();
        Number Qty=(Number)prodvo.getCurrentRow().getAttribute("OpItmQty");
        Row [] filterRows=this.getMmKitProdStk2().getFilteredRows("DocId", docId);
        Number sum=new Number(0);
        Number sum1=new Number(0);
        if(filterRows.length>0){
        for(Row r:filterRows){
            Number stkQty=(Number)r.getAttribute("TotQty");
            sum=sum.plus(stkQty);
             sum1=sum1.add(stkQty);
         }
        }
       // System.out.println("sum.plus: "+sum +"sum1.add: "+sum1+"comparison sum and qty"+sum.compareTo(Qty));
        if(sum.compareTo(Qty)==0){
            flag="Y";
        }
        else{
            flag="N";
        }
        return flag;
    }
   /*  public String prodStkDel(){
        Row r=this.getMmKitProdStk2().getCurrentRow();
         r.remove();
         return "";
    } */
   public String resolvEl(String data)
   {
       FacesContext fc = FacesContext.getCurrentInstance();
       Application app = fc.getApplication();
       ExpressionFactory elFactory = app.getExpressionFactory();
       ELContext elContext = fc.getELContext();
       ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
       String Message = valueExp.getValue(elContext).toString();
       return Message;
   }
    
    public void prodStkCriteria(){
        String CldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl vo = this.getMmKitProd1();
        ViewCriteria vc = vo.getViewCriteria("MmKitProdVOCriteria2");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("cldIdBind", CldId);
        vo.setNamedWhereClauseParam("slocIdBind",SlocId);
        vo.setNamedWhereClauseParam("orgIdBind", OrgId);
        vo.executeQuery();
    }
    public String pstChangeForUpdate(){
        getDBTransaction().postChanges();
        return "";
    }
    
    public String binQuantityChkSumm(Number quantity){
        String flag="Y";
        if(quantity!=null){
            Row r=getLOVSummBinDsmnt().getCurrentRow();
            if(r!=null){
                Number avlStk=(Number)r.getAttribute("TotStk");
              //  System.out.println("avl stock is :"+avlStk+" quantity is : "+quantity+"now comparison is"+ quantity.compareTo(avlStk));
                if(quantity.compareTo(avlStk)==1){
                    flag="N";
                }
            }
        }
        return flag;
    }
    
    
    
    public String lotQuantityChk(Number quantity){
        String flag="Y";
        if(quantity!=null){
            if(getLovSummLotDsmnt1().getCurrentRow()!=null){
                Row r=getLovSummLotDsmnt1().getCurrentRow();
                Number avlStk=(Number)r.getAttribute("TotStk");
               // System.out.println(quantity.compareTo(avlStk));
                if(quantity.compareTo(avlStk)==1){
                    flag="N";
                }
            }
        }
        return flag;
    }
    
    public String setoptItm(String optItmId){
     //   System.out.println("opt item setted value is"+optItmId);
    this.getDBTransaction().postChanges();
       //getMmKitProd1().getCurrentRow().setAttribute("OpItmId", optItmId);
        return "";
    }
    
    public String chkZeroRecordItmStk(){
        String flag="Y";
        Row currRow=getMmKitProd1().getCurrentRow();
        if(currRow !=null){
            String docId=currRow.getAttribute("DocId").toString();
            Row[] filteredRows=getMmKitProdItmStkO6().getFilteredRows("DocId", docId);
            //System.out.println("total rows found is "+filteredRows.length);
            if(filteredRows.length>0){
                for(Row r: filteredRows){
                    Number totqty= (Number)r.getAttribute("TotQty");
                    if(totqty.compareTo(new Number(0))==0){
                        flag="N";
                        break;
                    }
                }
            }
        }
     //   System.out.println("flag setted value is "+flag);
        if(flag.equalsIgnoreCase("N")){
            FacesMessage message =new FacesMessage("Some 0 Quantity record Found");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        }
        return "";
    }
    
    
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                
                st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                       
                    }
                }
                st.executeUpdate();
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) {
                    }
                }
            }
        }

    /**
     * Container's getter for MMAppKit1.
     * @return MMAppKit1
     */
    public ViewObjectImpl getMMAppKit1() {
        return (ViewObjectImpl)findViewObject("MMAppKit1");
    }

    /**
     * Container's getter for InputItmDetail1.
     * @return InputItmDetail1
     */
    public ViewObjectImpl getInputItmDetail1() {
        return (ViewObjectImpl)findViewObject("InputItmDetail1");
    }

    /**
     * Container's getter for MMStockSummLot1.
     * @return MMStockSummLot1
     */
    public ViewObjectImpl getMMStockSummLot1() {
        return (ViewObjectImpl)findViewObject("MMStockSummLot1");
    }

    /**
     * Container's getter for MmKitProdStk2.
     * @return MmKitProdStk2
     */
    public MmKitProdStkVOImpl getMmKitProdStk2() {
        return (MmKitProdStkVOImpl)findViewObject("MmKitProdStk2");
    }

    /**
     * Container's getter for ProdToStkVL1.
     * @return ProdToStkVL1
     */
    public ViewLinkImpl getProdToStkVL1() {
        return (ViewLinkImpl)findViewLink("ProdToStkVL1");
    }


    /**
     * Container's getter for MmKitProdItm3.
     * @return MmKitProdItm3
     */
    public ViewObjectImpl getMmKitProdItm3() {
        return (ViewObjectImpl)findViewObject("MmKitProdItm3");
    }

    /**
     * Container's getter for ProdToItmVL2.
     * @return ProdToItmVL2
     */
    public ViewLinkImpl getProdToItmVL2() {
        return (ViewLinkImpl)findViewLink("ProdToItmVL2");
    }


    /**
     * Container's getter for MMStkSummInptLot1.
     * @return MMStkSummInptLot1
     */
    public ViewObjectImpl getMMStkSummInptLot1() {
        return (ViewObjectImpl)findViewObject("MMStkSummInptLot1");
    }

    public void processUD(){
        this.getDBTransaction().postChanges();
    }
    /**
     * Container's getter for MmprodStk2_1.
     * @return MmprodStk2_1
     */
    public ViewObjectImpl getMmprodStk2_1() {
        return (ViewObjectImpl)findViewObject("MmprodStk2_1");
    }

    /**
     * Container's getter for MmKitProdItmStkO3.
     * @return MmKitProdItmStkO3
     */
    public MmKitProdItmStkOImpl getMmKitProdItmStkO3() {
        return (MmKitProdItmStkOImpl)findViewObject("MmKitProdItmStkO3");
    }

    /**
     * Container's getter for StkToItmStkVL2.
     * @return StkToItmStkVL2
     */
    public ViewLinkImpl getStkToItmStkVL2() {
        return (ViewLinkImpl)findViewLink("StkToItmStkVL2");
    }


    /**
     * Container's getter for MMStkSummSr1.
     * @return MMStkSummSr1
     */
    public MMStkSummSrVOImpl getMMStkSummSr1() {
        return (MMStkSummSrVOImpl)findViewObject("MMStkSummSr1");
    }

    /**
     * Container's getter for MMStkSummBin1.
     * @return MMStkSummBin1
     */
    public MMStkSummBinVOImpl getMMStkSummBin1() {
        return (MMStkSummBinVOImpl)findViewObject("MMStkSummBin1");
    }

    /**
     * Container's getter for MmKitProdItmStkO4.
     * @return MmKitProdItmStkO4
     */
    public MmKitProdItmStkOImpl getMmKitProdItmStkO4() {
        return (MmKitProdItmStkOImpl)findViewObject("MmKitProdItmStkO4");
    }

    /**
     * Container's getter for StkToItmStkVL3.
     * @return StkToItmStkVL3
     */
    public ViewLinkImpl getStkToItmStkVL3() {
        return (ViewLinkImpl)findViewLink("StkToItmStkVL3");
    }


    /**
     * Container's getter for MMStkSummSr2.
     * @return MMStkSummSr2
     */
    public MMStkSummSrVOImpl getMMStkSummSr2() {
        return (MMStkSummSrVOImpl)findViewObject("MMStkSummSr2");
    }

    /**
     * Container's getter for MmKitProdItmStkO2.
     * @return MmKitProdItmStkO2
     */
    public MmKitProdItmStkOImpl getMmKitProdItmStkO2() {
        return (MmKitProdItmStkOImpl)findViewObject("MmKitProdItmStkO2");
    }

    /**
     * Container's getter for StkToItmStkVL1.
     * @return StkToItmStkVL1
     */
    public ViewLinkImpl getStkToItmStkVL1() {
        return (ViewLinkImpl)findViewLink("StkToItmStkVL1");
    }

    /**
     * Container's getter for MMStkSummBin3.
     * @return MMStkSummBin3
     */
    public MMStkSummBinVOImpl getMMStkSummBin3() {
        return (MMStkSummBinVOImpl)findViewObject("MMStkSummBin3");
    }

    /**
     * Container's getter for MMStkSummSr3.
     * @return MMStkSummSr3
     */
    public MMStkSummSrVOImpl getMMStkSummSr3() {
        return (MMStkSummSrVOImpl)findViewObject("MMStkSummSr3");
    }

    /**
     * Container's getter for MMStockSummLot2.
     * @return MMStockSummLot2
     */
    public ViewObjectImpl getMMStockSummLot2() {
        return (ViewObjectImpl)findViewObject("MMStockSummLot2");
    }

    /**
     * Container's getter for MMStkSummInptLot2.
     * @return MMStkSummInptLot2
     */
    public ViewObjectImpl getMMStkSummInptLot2() {
        return (ViewObjectImpl)findViewObject("MMStkSummInptLot2");
    }

    /**
     * Container's getter for MmStkSumOpt1.
     * @return MmStkSumOpt1
     */
    public ViewObjectImpl getMmStkSumOpt1() {
        return (ViewObjectImpl)findViewObject("MmStkSumOpt1");
    }

    /**
     * Container's getter for MmKitProdSearch1.
     * @return MmKitProdSearch1
     */
    public ViewObjectImpl getMmKitProdSearch1() {
        return (ViewObjectImpl)findViewObject("MmKitProdSearch1");
    }

    /**
     * Container's getter for MmKitWh1.
     * @return MmKitWh1
     */
    public ViewObjectImpl getMmKitWh1() {
        return (ViewObjectImpl)findViewObject("MmKitWh1");
    }

    /**
     * Container's getter for MMStkSummInptLot3.
     * @return MMStkSummInptLot3
     */
    public ViewObjectImpl getMMStkSummInptLot3() {
        return (ViewObjectImpl)findViewObject("MMStkSummInptLot3");
    }

    /**
     * Container's getter for AppitmPrf1.
     * @return AppitmPrf1
     */
    public ViewObjectImpl getAppitmPrf1() {
        return (ViewObjectImpl)findViewObject("AppitmPrf1");
    }

    /**
     * Container's getter for LovMmKirProdLot1.
     * @return LovMmKirProdLot1
     */
    public ViewObjectImpl getLovMmKirProdLot1() {
        return (ViewObjectImpl)findViewObject("LovMmKirProdLot1");
    }


    /**
     * Container's getter for MmKitProdItmStkO.
     * @return MmKitProdItmStkO
     */
    public MmKitProdItmStkOImpl getMmKitProdItmStkO() {
        return (MmKitProdItmStkOImpl)findViewObject("MmKitProdItmStkO");
    }

    /**
     * Container's getter for MmKitProdItmStkO5.
     * @return MmKitProdItmStkO5
     */
    public MmKitProdItmStkOImpl getMmKitProdItmStkO5() {
        return (MmKitProdItmStkOImpl)findViewObject("MmKitProdItmStkO5");
    }

    /**
     * Container's getter for LOVSummSrDismental.
     * @return LOVSummSrDismental
     */
    public ViewObjectImpl getLOVSummSrDismental() {
        return (ViewObjectImpl)findViewObject("LOVSummSrDismental");
    }

    /**
     * Container's getter for LOVSummBinDsmnt.
     * @return LOVSummBinDsmnt
     */
    public ViewObjectImpl getLOVSummBinDsmnt() {
        return (ViewObjectImpl)findViewObject("LOVSummBinDsmnt");
    }

    /**
     * Container's getter for LovSummLotDsmnt1.
     * @return LovSummLotDsmnt1
     */
    public ViewObjectImpl getLovSummLotDsmnt1() {
        return (ViewObjectImpl)findViewObject("LovSummLotDsmnt1");
    }

    /**
     * Container's getter for ViewOrgMMPrf.
     * @return ViewOrgMMPrf
     */
    public ViewObjectImpl getViewOrgMMPrf() {
        return (ViewObjectImpl)findViewObject("ViewOrgMMPrf");
    }

    /**
     * Container's getter for MmKitProdItmStkO6.
     * @return MmKitProdItmStkO6
     */
    public MmKitProdItmStkOImpl getMmKitProdItmStkO6() {
        return (MmKitProdItmStkOImpl)findViewObject("MmKitProdItmStkO6");
    }

    /**
     * Container's getter for orgDesc.
     * @return orgDesc
     */
    public ViewObjectImpl getorgDesc() {
        return (ViewObjectImpl)findViewObject("orgDesc");
    }

    /**
     * Container's getter for UsrName.
     * @return UsrName
     */
    public ViewObjectImpl getUsrName() {
        return (ViewObjectImpl)findViewObject("UsrName");
    }

    /**
     * Container's getter for LOVAutoSuggestItemVO1.
     * @return LOVAutoSuggestItemVO1
     */
    public ViewObjectImpl getLOVAutoSuggestItemVO1() {
        return (ViewObjectImpl) findViewObject("LOVAutoSuggestItemVO1");
    }
    
    /**
    * Method to get suggested Item in AutoSuggest.
    * @param itmStr
    * @return
    */
    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        ArrayList<String> h = new ArrayList<String>();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        //String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl autoSuggestVO = this.getLOVAutoSuggestItemVO1();
       // autoSuggestVO.setNamedWhereClauseParam("BindCldId",cld_id);
        //autoSuggestVO.setNamedWhereClauseParam("BindSlocId", slocId);
        //autoSuggestVO.setNamedWhereClauseParam("BindOrgId", orgId);
       // autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", hoOrg_id);
        autoSuggestVO.setNamedWhereClauseParam("ItmNmbind", itmStr);
      //  autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }
     

}
