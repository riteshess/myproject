package mmbiapp.model.services;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmbiapp.model.services.common.MMBiAM;

import mmbiapp.model.views.TempListShowVORowImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Apr 05 14:54:06 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMBiAMImpl extends ApplicationModuleImpl implements MMBiAM {
    /**
     * This is the default constructor (do not remove).
     */
     private static ADFLogger adfLog=(ADFLogger)ADFLogger.createADFLogger(MMBiAMImpl.class);
    public MMBiAMImpl() {
    }

    /**
     * Container's getter for TempListShowVO.
     * @return TempListShowVO
     */
    public ViewObjectImpl getTempListShowVO() {
        return (ViewObjectImpl)findViewObject("TempListShowVO");
    }

    /**
     * Container's getter for TopNProductGrpVO.
     * @return TopNProductGrpVO
     */
    public ViewObjectImpl getTopNProductGrpVO() {
        return (ViewObjectImpl)findViewObject("TopNProductGrpVO");
    }

    /**
     * Container's getter for TopNProductVO.
     * @return TopNProductVO
     */
    public ViewObjectImpl getTopNProductVO() {
        return (ViewObjectImpl)findViewObject("TopNProductVO");
    }

    /**
     * Container's getter for TopNSuppliersVO.
     * @return TopNSuppliersVO
     */
    public ViewObjectImpl getTopNSuppliersVO() {
        return (ViewObjectImpl)findViewObject("TopNSuppliersVO");
    }
    
    /**
     * Method to Get SlocId
     * @return
     */
    public Integer getSlocId(){
       // _log.info("Sloc Id : "+Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}")));
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }
    
    /**
     * Method to Get OrgId
     * @return
     */
    public String getOrgId(){
        //_log.info("Sloc Id : "+resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }
    
    /**
     * Method to Get HoOrgId
     * @return
     */
    public String getHoOrgId(){
        // _log.info("HoOrg Id : "+resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }
    
    /**
     * Method to Get CldId
     * @return
     */
    public String getCldId(){
        //_log.info("Cld Id : "+resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }
    
    /**
     * Method to Get UsrId
     * @return
     */
    public String getUsrId(){
        //_log.info("Usr Id : "+resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        return resolvEl("#{pageFlowScope.GLBL_APP_USR}");
    }
    
    /**Method to resolve expression- returns String value*/
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    
    /**
     * Method to execute all view in Oraganisation TaskFlow
     */
    public void executeAllVos(){
       executeTopNSupplierVO(5,new StringBuffer(""));
       executeTopNProductsVO(5,new StringBuffer(""));
       executeTopNProductGrpVO(5,new StringBuffer(""));
       executeTopNProductBelowReoderLvlVO(5,new StringBuffer(""));
       executeTopNProductBelowSaftyLvlVO(5,new StringBuffer(""));
        executingTopOrganisationsVO(5);
        filterMisLov(118);
    }
    
    /**
     * To execute VO TopNCustomers
     * @param val
     */
    public void executeTopNSupplierVO(Integer val,StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT EO_ID_SRC , EO_NM Supplier , AMT  Amount" + 
        " FROM (SELECT A.EO_ID_SRC,A.EO_NM,SUM(A.TOT_AMT_BS) AMT" + 
        "            FROM MM.MM$MIS$SUPPITMGRP$VW A" + 
        "          WHERE A.CLD_ID = :CldIdBind" + 
        "            AND A.SLOC_ID =:SlocIdBind" + 
        "            AND  A.HO_ORG_ID = :HoOrgIdBind" +clause.toString()+ 
        "       GROUP BY A.EO_ID_SRC,A.EO_NM" + 
        "       ORDER BY AMT DESC)" + 
        "WHERE ROWNUM<= :CountBind";
        adfLog.info("No. of Supplier : "+val +"Query is :"+query);
       
        ViewObjectImpl suppliersVO = this.getTopNSuppliersVO();
        suppliersVO.setQuery(query.toString());
        suppliersVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        suppliersVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        suppliersVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        suppliersVO.setNamedWhereClauseParam("CountBind", val);
        suppliersVO.executeQuery();
    }
    
    /**
     * To execute VO TopNCustomers
     * @param val
     */
    public void executeTopNProductsVO(Integer val,StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT ITM_ID , ITM_DESC , AMOUNT" + 
        " FROM (SELECT   A.ITM_ID, A.ITM_DESC, SUM(A.ITM_PRICE_BS)   AMOUNT" + 
        "            FROM MM.MM$MIS$SUPPITMGRP$VW A" + 
        "          WHERE A.CLD_ID = :CldIdBind" + 
        "            AND A.SLOC_ID =:SlocIdBind" + 
        "            AND  A.HO_ORG_ID = :HoOrgIdBind" +clause.toString()+ 
        "        GROUP BY ITM_DESC , ITM_ID" + 
        "       ORDER BY AMOUNT DESC)" + 
        "WHERE ROWNUM<= :CountBind";
       adfLog.info("No. of Products : "+val +"Query is :"+query);
        ViewObjectImpl productsVO = this.getTopNProductVO();
        
        productsVO.setQuery(query);
        //this.createViewObjectFromQueryStmt("TopNProductsVO", query);
        productsVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        productsVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        productsVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        productsVO.setNamedWhereClauseParam("CountBind", val);
        productsVO.executeQuery();
    }
    
    /**
     * Method to Execute TopNProductsGroupVO
     * @param val
     * @param clause
     */
    public void executeTopNProductGrpVO(Integer val, StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT GRP_ID , GRP_NM , AMOUNT" + 
        " FROM (SELECT   GRP_ID, GRP_NM GRP_NM, SUM(ITM_PRICE_BS)   AMOUNT" + 
        "            FROM MM.MM$MIS$SUPPITMGRP$VW A" + 
        "          WHERE A.CLD_ID = :CldIdBind" + 
        "            AND A.SLOC_ID =:SlocIdBind" + 
        "            AND  A.HO_ORG_ID = :HoOrgIdBind" +clause.toString()+ 
        "       GROUP BY GRP_NM , GRP_ID" + 
        "       ORDER BY AMOUNT DESC)" + 
        "WHERE ROWNUM<= :CountBind";
        adfLog.info("No. of Products Group : "+val +"Query is :"+query);
        ViewObjectImpl prodGrpVO = this.getTopNProductGrpVO();
          prodGrpVO.setQuery(query.toString());
        prodGrpVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        prodGrpVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        prodGrpVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        prodGrpVO.setNamedWhereClauseParam("CountBind", val);
        prodGrpVO.executeQuery();
    }
    
    
    /**
     * To execute VO TopNProductBelowSaftyLvlVO
     * @param val
     */
    public void executeTopNProductBelowSaftyLvlVO(Integer val,StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT ITM_ID , ITM_NM ,QUANTITY ,  SAFE_QTY" + 
        " FROM (SELECT A.ITM_ID ITM_ID,A.ITM_NM, SUM(A.QUANTITY) QUANTITY,A.SAFE_QTY SAFE_QTY" + 
        "           FROM MM.MM$MIS$REORDER_VW A" + 
        "          WHERE A.CLD_ID = :CldIdBind" + 
        "            AND A.SLOC_ID =:SlocIdBind" + 
        "            AND  A.HO_ORG_ID = :HoOrgIdBind" +clause.toString()+ 
        "       GROUP BY A.ITM_ID,ITM_NM,A.SAFE_QTY" + 
        "        ORDER BY ITM_ID)" + 
        "WHERE QUANTITY < SAFE_QTY AND ROWNUM<= :CountBind";
      adfLog.info("No. of Product Below Safty Level : "+val +"Query is :"+query); 
       
        ViewObjectImpl itmSaftyVO = this.getTopNProductBelowSaftyLvlVO();
        itmSaftyVO.setQuery(query.toString());
        itmSaftyVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        itmSaftyVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        itmSaftyVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        itmSaftyVO.setNamedWhereClauseParam("CountBind", val);
        itmSaftyVO.executeQuery();
    }
    
    
    /**
     * To execute VO TopNProductBelowReoderLvlVO
     * @param val
     */
    public void executeTopNProductBelowReoderLvlVO(Integer val,StringBuffer clause){
         if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT ITM_ID , ITM_NM ,QUANTITY ,  REORDER_LVL" + 
        " FROM (SELECT A.ITM_ID ITM_ID , A.ITM_NM,SUM(A.QUANTITY) QUANTITY,A.REORDER_LVL REORDER_LVL" + 
        "            FROM MM.MM$MIS$REORDER_VW A" + 
        "          WHERE A.CLD_ID = :CldIdBind" + 
        "            AND A.SLOC_ID =:SlocIdBind" + 
        "            AND  A.HO_ORG_ID = :HoOrgIdBind" +clause.toString()+ 
        "        GROUP BY A.ITM_ID, A.ITM_NM,A.REORDER_LVL" + 
        "       ORDER BY ITM_ID)" + 
        "WHERE QUANTITY < REORDER_LVL AND ROWNUM<= :CountBind";
        adfLog.info("No. of Supplier : "+val +"Query is :"+query); 
       
        ViewObjectImpl irmReorderVO = this.getTopNProductBelowReorderLvlVO();
        irmReorderVO.setQuery(query.toString());
        irmReorderVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        irmReorderVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        irmReorderVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        irmReorderVO.setNamedWhereClauseParam("CountBind", val);
        irmReorderVO.executeQuery();
    }
    
    
    /**
     * Method to get value of an attribute from FromShowListTempVO
     * @param arg
     * @return
     */
    public String getOrgIdOnOrgNm(StringBuffer arg){
       adfLog.info("Attribute passed is : "+arg);
        if(arg != null){
            TempListShowVORowImpl currentRow= (TempListShowVORowImpl)this.getTempListShowVO().getCurrentRow();
            if(currentRow != null){
                RowSet idVO = currentRow.getLovOrgIdVO();
                Row[] filteredRows = idVO.getFilteredRows("OrgDesc", arg.toString());
                if(filteredRows.length > 0){
                    if(filteredRows[0].getAttribute("OrgId") != null){
                        arg = new StringBuffer(filteredRows[0].getAttribute("OrgId").toString());    
                    }
                }
            }    
        }
      adfLog.info("Returned is : "+arg);
        return arg.toString();
    }
    /**
     * Method to filter all the view objects on the basis of selected params
     * @param id : to identify set of view Objects
     * @param clause : WhereClause that need to be used
     */
    public void filterAllViewObjects(Integer id, StringBuffer clause){
      adfLog.info("Filter view Objects with Id : "+id);
        if(id == 1){
            adfLog.info("Filtered id : "+id);
            executeTopNProductsVO(5,clause);
            executeTopNSupplierVO(5,clause);
            executeTopNProductGrpVO(5,clause);
            executeTopNProductBelowReoderLvlVO(5, clause);
            executeTopNProductBelowSaftyLvlVO(5, clause);
        }else if(id == 2){
         adfLog.info("Filtered id : "+id);
           // executeProductAgeingVO(null, null, null);
        }else if(id == 3){
            executeTopNProductsVO(5,clause);
            executeTopNProductGrpVO(5,clause);
           adfLog.info("Filtered id : "+id);
        }
    }
    
    /**
     *  Method to set initial variables in OneCustomerTF
     */
    public void executeInitParamsForOneSupplier(Integer id,StringBuffer clause){
        System.out.println("Where clause in One Supplier is  : "+clause);
       // exexuteProductGroupwiseProfitVO(5, clause);
       // executeBusinessExecutiveVO(5,clause);
        //executeTopNProductGrpVO(5, clause);
       // executeTopNSalesOrderVO(5, clause);
        
    }
    
    /**
     *  Method to set initial variables in OneCustomerTF
     */
    public void executeParamsForOneSupplier(Integer id,StringBuffer clause ,Integer eoId){
       adfLog.info("Where clause in One Supplier is  : "+clause+"supplie id "+eoId);
        StringBuffer clauseNew = new StringBuffer("");
        if(eoId!=null){
            clauseNew.append(" AND EO_ID_SRC ="+eoId);
        }
        adfLog.info("clauseNew     "+clauseNew);
        executeTopNProductsForOneSupplierVO(5, clauseNew);
        executeTopNProductGrpForOneSupplierVO(5, clauseNew);
        executeTopNProductGrpForOneSupplierVO(eoId);
        executeOneSupplierRejectedItmVO(clauseNew);
        executeTopNPOForOneSupplierVO(eoId, 5, new StringBuffer(""));
        
    }
    /**
     *
     * @param id 
     * @param clause 
     * @param eoId 
     * @param ItemId
     */ 
    
    public void executeParamsForOneProduct(Integer id,StringBuffer clause ,Integer eoId ,StringBuffer ItemId){
        adfLog.info("Where clause in One Product  is  : "+clause+"supplie id "+eoId+" ItemId "+ItemId);
        StringBuffer clauseNew = new StringBuffer("");
        StringBuffer clauseNewForSupp = new StringBuffer("");
        if(ItemId!=null && eoId==null){
            clauseNew.append(" AND ITM_ID =");
            clauseNew.append("'"+ItemId.toString()+"'");
            clauseNewForSupp.append(" AND ITM_ID =");
            clauseNewForSupp.append("'"+ItemId.toString()+"'");
        }else if(eoId!=null && ItemId ==null){
            clauseNew.append(" AND EO_ID_SRC ="+eoId);
        }else if(ItemId !=null && eoId!=null){
            clauseNew.append(" AND ITM_ID =");
            clauseNew.append("'"+ItemId.toString()+"'");
            clauseNew.append(" AND EO_ID_SRC ="+eoId);
        }
       adfLog.info("clauseNew     "+clauseNew);
        if(ItemId!=null && eoId==null){
            adfLog.info("Itm Id Not Null");
            executeOneProductStockStatisticsVO(ItemId);
        }
            
        if(eoId!=null && ItemId ==null){
           adfLog.info("Itm Id Null Supplier Id Not Null");
        }
        
        if(ItemId !=null && eoId!=null){
           adfLog.info("Itm Id ANd EO ID Both Not null");
            executeOneProductStockStatisticsVO(ItemId);    // CHANGE LETTER WHEN SUPPLIER AND ITEM WISE DATA VIEW
        }
        executeOneSupplierRejectedItmVO(clauseNew);
        executeTopNSupplierVO(5, clauseNewForSupp);
    }
    /**
     * To execute VO executeTopNProductsForOneSupplier
     * @param val
     */
    public void executeTopNProductsForOneSupplierVO(Integer val,StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT ITM_ID , ITM_DESC , AMOUNT ,EO_ID_SRC,EO_NM" + 
        " FROM (SELECT   A.ITM_ID, A.ITM_DESC, SUM(A.ITM_PRICE_BS)   AMOUNT ,EO_ID_SRC,EO_NM" + 
        "            FROM MM.MM$MIS$SUPPITMGRP$VW A" + 
        "          WHERE A.CLD_ID = :CldIdBind" + 
        "            AND A.SLOC_ID =:SlocIdBind" + 
        "            AND  A.HO_ORG_ID = :HoOrgIdBind" +clause.toString()+ 
        "        GROUP BY ITM_DESC , ITM_ID ,EO_ID_SRC,EO_NM" + 
        "       ORDER BY AMOUNT DESC)" + 
        "WHERE ROWNUM<= :CountBind";
       adfLog.info("No. of Products for single suppliers: "+val +"Query is :"+query);
        ViewObjectImpl productsVO = this.getTopNProductforOneSupplierVO();
        
        productsVO.setQuery(query);
        //this.createViewObjectFromQueryStmt("TopNProductsVO", query);
        productsVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        productsVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        productsVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        productsVO.setNamedWhereClauseParam("CountBind", val);
        productsVO.executeQuery();
    }
    
    /**
     * Method to Execute executeTopNProductGrpForOneSupplierVO
     * @param val
     * @param clause
     */
    public void executeTopNProductGrpForOneSupplierVO(Integer val, StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT GRP_ID , GRP_NM , AMOUNT,EO_ID_SRC,EO_NM" + 
        " FROM (SELECT   GRP_ID, GRP_NM GRP_NM, SUM(ITM_PRICE_BS)   AMOUNT ,EO_ID_SRC,EO_NM" + 
        "            FROM MM.MM$MIS$SUPPITMGRP$VW A" + 
        "          WHERE A.CLD_ID = :CldIdBind" + 
        "            AND A.SLOC_ID =:SlocIdBind" + 
        "            AND  A.HO_ORG_ID = :HoOrgIdBind" +clause.toString()+ 
        "       GROUP BY GRP_NM , GRP_ID ,EO_ID_SRC,EO_NM" + 
        "       ORDER BY AMOUNT DESC)" + 
        "WHERE ROWNUM<= :CountBind";
        adfLog.info("No. of Products Group for Single Supplier: "+val +"Query is :"+query);
        ViewObjectImpl prodGrpVO = this.getTopNProductGrpForOneSupplierVO();
          prodGrpVO.setQuery(query.toString());
        prodGrpVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        prodGrpVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        prodGrpVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        prodGrpVO.setNamedWhereClauseParam("CountBind", val);
        prodGrpVO.executeQuery();
    }
    
    public void executeTopNProductGrpForOneSupplierVO(Integer eoId){
        ViewObjectImpl supplierAmtVo = this.getOneSupplierAmountStaticsVO();
        supplierAmtVo.setNamedWhereClauseParam("CldIdBind", getCldId());
        supplierAmtVo.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        supplierAmtVo.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        supplierAmtVo.setNamedWhereClauseParam("EoIdBind", eoId);
        supplierAmtVo.executeQuery();
        
        
    }
    
    
    public void executeOneSupplierRejectedItmVO(StringBuffer clause){
        
        if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT ITM_ID, ITM_DESC,REJECTED_QUANTITY, EO_ID_SRC,eo_NM ,RECEIPT_QUANTITY" + 
        " FROM (SELECT A.ITM_ID, A.ITM_DESC,SUM(A.REJ_QTY) REJECTED_QUANTITY, EO_ID_SRC,eo_NM ,SUM(A.RCPT_QTY) RECEIPT_QUANTITY " + 
        "            FROM MM.MM$MIS$EO$REJ$ITM_VW A" + 
        "          WHERE A.CLD_ID = :CldIdBind" + 
        "            AND A.SLOC_ID =:SlocIdBind" + 
        "            AND  A.HO_ORG_ID = :HoOrgIdBind" +clause.toString()+ 
        "       GROUP BY ITM_DESC , ITM_ID ,EO_ID_SRC,eo_NM" + 
        "       ORDER BY REJECTED_QUANTITY , RECEIPT_QUANTITY DESC)"; 
      
        
        adfLog.info("No. of Supplier : "+clause +"Query is :"+query);
        
        ViewObjectImpl supplierRejItmVo = this.getOneSupplierItmRejectVO();
        supplierRejItmVo.setQuery(query.toString());
        supplierRejItmVo.setNamedWhereClauseParam("CldIdBind", getCldId());
        supplierRejItmVo.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        supplierRejItmVo.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
       // supplierRejItmVo.setNamedWhereClauseParam("EoIdBind", eoId);
        supplierRejItmVo.executeQuery();
        
        
    }
    
    
    public void executeTopNPOForOneSupplierVO(Integer eoId, Integer val ,StringBuffer clause){
        ViewObjectImpl toNPOVo = this.getTopNPOForOneSupplierVO();
        adfLog.info("executeTopNPOForOneSupplierVO   val   "+val+"eoId    "+eoId);
        toNPOVo.setNamedWhereClauseParam("CldIdBind", getCldId());
        toNPOVo.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        toNPOVo.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        toNPOVo.setNamedWhereClauseParam("CountBind", val);
        toNPOVo.setNamedWhereClauseParam("EoIdBind", eoId);
        toNPOVo.executeQuery();
        
        
    }
    
    /**
     * To execute VO TopNCustomers
     * @param val
     */
    public void executeTopNSupplierRatingVO(Integer val,StringBuffer clause){
        if(clause == null){
            clause = new StringBuffer("");
        }
        String query = "SELECT   MM$EO$PERF$SCORE_VW.SCORE SCORE, MM$EO$PERF$SCORE_VW.EO_NM SUPPLIER " + 
        " FROM  MM.MM$EO$PERF$SCORE_VW " + 
        "          WHERE CLD_ID = :CldIdBind" + 
        "            AND SLOC_ID =:SlocIdBind" + 
        "            AND HO_ORG  = :HoOrgIdBind" +clause.toString()+ 
        "  AND ROWNUM<= :CountBind";
        adfLog.info("No. of Supplier : "+val +"Query is :"+query);
       
        ViewObjectImpl suppliersRatingVO = this.getTopNSupplersRatingVO();
        suppliersRatingVO.setQuery(query.toString());
        suppliersRatingVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        suppliersRatingVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        suppliersRatingVO.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
        suppliersRatingVO.setNamedWhereClauseParam("CountBind", val);
        suppliersRatingVO.executeQuery();
    }
    
    /**
     * Method for Execute All VO Before Entering Supplier Detail Views 
     */
    
    public void executeAllVOBeforeEnteringSupplierDetailsPage(){
        executeTopNSupplierVO(5,new StringBuffer(""));
        executeTopNSupplierRatingVO(5,new StringBuffer(""));
    }
    
    
    /**
     * Method for Execute All VO Before Entering Supplier Detail Views 
     */
    
    public void executeAllVOBeforeEnteringProductDetailsPage(){
        executeTopNProductsVO(5,new StringBuffer(""));
        executeTopNProductGrpVO(5,new StringBuffer(""));
    }
    
    public void executeOneProductStockStatisticsVO(StringBuffer ItemId){
    ViewObjectImpl productStock = this.getOneProductStockStaticsVO();
  //  productStock.setQuery(query.toString());
    productStock.setNamedWhereClauseParam("CldIdBind", getCldId());
    productStock.setNamedWhereClauseParam("SlocIdBind", getSlocId());
    productStock.setNamedWhereClauseParam("HoOrgIdBind", getHoOrgId());
    productStock.setNamedWhereClauseParam("FyIdBind", 6);
    productStock.setNamedWhereClauseParam("ItmIdBind", ItemId.toString());
    
    productStock.executeQuery();
    }
    
    /**
     * Rowset Iterator to populate the arraylist of Organisation
     * @return
     */
    public RowSetIterator getTopNOrgRows(){
        ViewObjectImpl exe = this.getTopOrganisationVO();
        return exe.createRowSetIterator(null);
    }

    /**
     * Execute TopNOrgsVO
     * @param val
     */
    public void executingTopOrganisationsVO(Integer val){
        ViewObjectImpl orgVO = this.getTopOrganisationVO();
        orgVO.setNamedWhereClauseParam("CldIdBind", getCldId());
        orgVO.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        orgVO.executeQuery();
    }
    
    
    /**
     * Method to filter MIS Lov
     * @param typId
     */
    public void filterMisLov(Integer typId){
        ViewObjectImpl impl = this.getTempVO();
        Row[] allRowsInRange = impl.getAllRowsInRange();
        allRowsInRange[0].setAttribute("LovTypTrans", typId);
    }
    /**
     * Container's getter for TopNProductBelowReorderLvlVO.
     * @return TopNProductBelowReorderLvlVO
     */
    public ViewObjectImpl getTopNProductBelowReorderLvlVO() {
        return (ViewObjectImpl)findViewObject("TopNProductBelowReorderLvlVO");
    }

    /**
     * Container's getter for TopNProductBelowSaftyLvlVO.
     * @return TopNProductBelowSaftyLvlVO
     */
    public ViewObjectImpl getTopNProductBelowSaftyLvlVO() {
        return (ViewObjectImpl)findViewObject("TopNProductBelowSaftyLvlVO");
    }

    /**
     * Container's getter for TopNProductforOneSupplierVO.
     * @return TopNProductforOneSupplierVO
     */
    public ViewObjectImpl getTopNProductforOneSupplierVO() {
        return (ViewObjectImpl)findViewObject("TopNProductforOneSupplierVO");
    }

    /**
     * Container's getter for TopNProductGrpForOneSupplierVO.
     * @return TopNProductGrpForOneSupplierVO
     */
    public ViewObjectImpl getTopNProductGrpForOneSupplierVO() {
        return (ViewObjectImpl)findViewObject("TopNProductGrpForOneSupplierVO");
    }

    /**
     * Container's getter for OneSupplierAmountStaticsVO.
     * @return OneSupplierAmountStaticsVO
     */
    public ViewObjectImpl getOneSupplierAmountStaticsVO() {
        return (ViewObjectImpl)findViewObject("OneSupplierAmountStaticsVO");
    }

    /**
     * Container's getter for OneSupplierItmRejectVO.
     * @return OneSupplierItmRejectVO
     */
    public ViewObjectImpl getOneSupplierItmRejectVO() {
        return (ViewObjectImpl)findViewObject("OneSupplierItmRejectVO");
    }

    /**
     * Container's getter for TopNPOForOneSupplierVO.
     * @return TopNPOForOneSupplierVO
     */
    public ViewObjectImpl getTopNPOForOneSupplierVO() {
        return (ViewObjectImpl)findViewObject("TopNPOForOneSupplierVO");
    }

    /**
     * Container's getter for TopNSupplersRatingVO.
     * @return TopNSupplersRatingVO
     */
    public ViewObjectImpl getTopNSupplersRatingVO() {
        return (ViewObjectImpl)findViewObject("TopNSupplersRatingVO");
    }

    /**
     * Container's getter for OneProductStockStaticsVO.
     * @return OneProductStockStaticsVO
     */
    public ViewObjectImpl getOneProductStockStaticsVO() {
        return (ViewObjectImpl)findViewObject("OneProductStockStaticsVO");
    }

    /**
     * Container's getter for TopOrganisationVO.
     * @return TopOrganisationVO
     */
    public ViewObjectImpl getTopOrganisationVO() {
        return (ViewObjectImpl)findViewObject("TopOrganisationVO");
    }

    /**
     * Container's getter for LovMISVO.
     * @return LovMISVO
     */
    public ViewObjectImpl getLovMISVO() {
        return (ViewObjectImpl)findViewObject("LovMISVO");
    }

    /**
     * Container's getter for TempVO.
     * @return TempVO
     */
    public ViewObjectImpl getTempVO() {
        return (ViewObjectImpl)findViewObject("TempVO");
    }
}
