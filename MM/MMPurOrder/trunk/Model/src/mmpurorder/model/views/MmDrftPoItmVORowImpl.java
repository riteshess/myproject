package mmpurorder.model.views;


import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmpurorder.model.entities.MmDrftPoItmEOImpl;
import mmpurorder.model.service.PurOrderAMImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 30 11:53:45 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmDrftPoItmVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMDRFTPOITMEO = 0;
    private static int NUMBER = Types.NUMERIC;
  
   public Integer getGlblRoundAmtDigit(){
   if(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT1}")!=null){
       return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT1}"));
   }else{
       return 6;
   }
   }
       public Integer getGlblRoundQtyDigit(){
       if(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT1}")!=null){
           return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT1}"));
       }else{
           return 6;
       }
       
   }
       
    public Integer getGlblRoundCurrRateDigit(){
    if(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT1}")!=null){
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT1}"));
    }else{
        return 6;
    }
    
    }
    //#{pageFlowScope.GLBL_AMT_DIGIT1}
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        CldId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        OrgId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        DocId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        }
        ,
        ItmId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setItmId((String) value);
            }
        }
        ,
        OrdQty {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getOrdQty();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setOrdQty((Number) value);
            }
        }
        ,
        TlrncQtyType {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTlrncQtyType();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTlrncQtyType((String) value);
            }
        }
        ,
        TlrncQtyVal {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTlrncQtyVal();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTlrncQtyVal((Number) value);
            }
        }
        ,
        ItmPrice {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getItmPrice();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setItmPrice((Number) value);
            }
        }
        ,
        DiscType {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getDiscType();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setDiscType((String) value);
            }
        }
        ,
        DiscVal {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getDiscVal();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setDiscVal((Number) value);
            }
        }
        ,
        RejAlwd {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getRejAlwd();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setRejAlwd((String) value);
            }
        }
        ,
        ItmUom {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getItmUom();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setItmUom((String) value);
            }
        }
        ,
        ItmAmtBs {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getItmAmtBs();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setItmAmtBs((Number) value);
            }
        }
        ,
        ItmAmtSp {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getItmAmtSp();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setItmAmtSp((Number) value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setUsrIdCreate((Integer) value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        UsrIdMod {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setUsrIdMod((Integer) value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EntityId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getEntityId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setEntityId((Integer) value);
            }
        }
        ,
        AmdNo {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getAmdNo();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAmdNo((Integer) value);
            }
        }
        ,
        AmdDt {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getAmdDt();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAmdDt((Date) value);
            }
        }
        ,
        UomConvFctr {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getUomConvFctr();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setUomConvFctr((Number) value);
            }
        }
        ,
        ItmUomBs {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getItmUomBs();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setItmUomBs((String) value);
            }
        }
        ,
        DiscAmtBs {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getDiscAmtBs();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setDiscAmtBs((Number) value);
            }
        }
        ,
        DiscAmtSp {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getDiscAmtSp();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setDiscAmtSp((Number) value);
            }
        }
        ,
        TotDiscAmtBs {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTotDiscAmtBs();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTotDiscAmtBs((Number) value);
            }
        }
        ,
        TotDiscAmtSp {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTotDiscAmtSp();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTotDiscAmtSp((Number) value);
            }
        }
        ,
        BalQty {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getBalQty();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setBalQty((Number) value);
            }
        }
        ,
        CcId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getCcId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setCcId((String) value);
            }
        }
        ,
        ItmRemarks {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getItmRemarks();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setItmRemarks((String) value);
            }
        }
        ,
        CloseFlg {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getCloseFlg();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setCloseFlg((String) value);
            }
        }
        ,
        MarkedForDelete {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getMarkedForDelete();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setMarkedForDelete((Boolean) value);
            }
        }
        ,
        TransCurrConvFctr {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransCurrConvFctr();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransCurrConvFctr((Number) value);
            }
        }
        ,
        TransItmAmtBs {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItmAmtBs();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItmAmtBs((Number) value);
            }
        }
        ,
        TransItmAmtSp {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItmAmtSp();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItmAmtSp((Number) value);
            }
        }
        ,
        TransEoIdFromPo {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransEoIdFromPo();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransEoIdFromPo((Integer) value);
            }
        }
        ,
        lovSwitcherForItmId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getlovSwitcherForItmId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TransItemId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItemId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItemId((String) value);
            }
        }
        ,
        TransItemName {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItemName();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItemName((String) value);
            }
        }
        ,
        TransDiscAmt {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransDiscAmt();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransDiscAmt((Number) value);
            }
        }
        ,
        TransItemTaxAmt {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItemTaxAmt();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItemTaxAmt((Number) value);
            }
        }
        ,
        TransItmAmtBsTax {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItmAmtBsTax();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItmAmtBsTax((Number) value);
            }
        }
        ,
        TransItmAmtSpTax {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItmAmtSpTax();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItmAmtSpTax((Number) value);
            }
        }
        ,
        TransItemAmtWoutDc {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItemAmtWoutDc();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItemAmtWoutDc((Number) value);
            }
        }
        ,
        TransHoOrgId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransHoOrgId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransHoOrgId((String) value);
            }
        }
        ,
        TransTaxExmptFlg {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransTaxExmptFlg();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransTaxExmptFlg((String) value);
            }
        }
        ,
        TransTaxChangedFlg {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransTaxChangedFlg();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransTaxChangedFlg((String) value);
            }
        }
        ,
        TransUomClass {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransUomClass();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransUomClass((Integer) value);
            }
        }
        ,
        TransTaxRuleFlg {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransTaxRuleFlg();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransTaxRuleFlg((String) value);
            }
        }
        ,
        TransPoDiscAmtSp {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransPoDiscAmtSp();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransPoDiscAmtSp((Number) value);
            }
        }
        ,
        TransChkPolicy {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransChkPolicy();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransChkPolicy((Long) value);
            }
        }
        ,
        TransItmOcAmt {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItmOcAmt();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItmOcAmt((Number) value);
            }
        }
        ,
        TransItmUom {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItmUom();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItmUom((String) value);
            }
        }
        ,
        TransItmForAutoSugg {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItmForAutoSugg();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItmForAutoSugg((String) value);
            }
        }
        ,
        TransItmGrpDesc {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItmGrpDesc();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItmGrpDesc((String) value);
            }
        }
        ,
        TransItmAttDesc {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransItmAttDesc();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setTransItmAttDesc((String) value);
            }
        }
        ,
        TransPoType {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getTransPoType();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmPendOrdVw {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getMmPendOrdVw();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmDrftPo {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getMmDrftPo();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmDrftPoTr {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getMmDrftPoTr();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovItmId {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getLovItmId();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovDiscType {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getLovDiscType();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovItmIdEo {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getLovItmIdEo();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovUomVwVO1 {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getLovUomVwVO1();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmPendOrdVwVO1 {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getMmPendOrdVwVO1();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovCoaIdForCashPoVO {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getLovCoaIdForCashPoVO();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovItmIdForCpoVO {
            public Object get(MmDrftPoItmVORowImpl obj) {
                return obj.getLovItmIdForCpoVO();
            }

            public void put(MmDrftPoItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static int firstIndex = 0;

        public abstract Object get(MmDrftPoItmVORowImpl object);

        public abstract void put(MmDrftPoItmVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ORDQTY = AttributesEnum.OrdQty.index();
    public static final int TLRNCQTYTYPE = AttributesEnum.TlrncQtyType.index();
    public static final int TLRNCQTYVAL = AttributesEnum.TlrncQtyVal.index();
    public static final int ITMPRICE = AttributesEnum.ItmPrice.index();
    public static final int DISCTYPE = AttributesEnum.DiscType.index();
    public static final int DISCVAL = AttributesEnum.DiscVal.index();
    public static final int REJALWD = AttributesEnum.RejAlwd.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int ITMAMTBS = AttributesEnum.ItmAmtBs.index();
    public static final int ITMAMTSP = AttributesEnum.ItmAmtSp.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int ENTITYID = AttributesEnum.EntityId.index();
    public static final int AMDNO = AttributesEnum.AmdNo.index();
    public static final int AMDDT = AttributesEnum.AmdDt.index();
    public static final int UOMCONVFCTR = AttributesEnum.UomConvFctr.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int TOTDISCAMTBS = AttributesEnum.TotDiscAmtBs.index();
    public static final int TOTDISCAMTSP = AttributesEnum.TotDiscAmtSp.index();
    public static final int BALQTY = AttributesEnum.BalQty.index();
    public static final int CCID = AttributesEnum.CcId.index();
    public static final int ITMREMARKS = AttributesEnum.ItmRemarks.index();
    public static final int CLOSEFLG = AttributesEnum.CloseFlg.index();
    public static final int MARKEDFORDELETE = AttributesEnum.MarkedForDelete.index();
    public static final int TRANSCURRCONVFCTR = AttributesEnum.TransCurrConvFctr.index();
    public static final int TRANSITMAMTBS = AttributesEnum.TransItmAmtBs.index();
    public static final int TRANSITMAMTSP = AttributesEnum.TransItmAmtSp.index();
    public static final int TRANSEOIDFROMPO = AttributesEnum.TransEoIdFromPo.index();
    public static final int LOVSWITCHERFORITMID = AttributesEnum.lovSwitcherForItmId.index();
    public static final int TRANSITEMID = AttributesEnum.TransItemId.index();
    public static final int TRANSITEMNAME = AttributesEnum.TransItemName.index();
    public static final int TRANSDISCAMT = AttributesEnum.TransDiscAmt.index();
    public static final int TRANSITEMTAXAMT = AttributesEnum.TransItemTaxAmt.index();
    public static final int TRANSITMAMTBSTAX = AttributesEnum.TransItmAmtBsTax.index();
    public static final int TRANSITMAMTSPTAX = AttributesEnum.TransItmAmtSpTax.index();
    public static final int TRANSITEMAMTWOUTDC = AttributesEnum.TransItemAmtWoutDc.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int TRANSTAXEXMPTFLG = AttributesEnum.TransTaxExmptFlg.index();
    public static final int TRANSTAXCHANGEDFLG = AttributesEnum.TransTaxChangedFlg.index();
    public static final int TRANSUOMCLASS = AttributesEnum.TransUomClass.index();
    public static final int TRANSTAXRULEFLG = AttributesEnum.TransTaxRuleFlg.index();
    public static final int TRANSPODISCAMTSP = AttributesEnum.TransPoDiscAmtSp.index();
    public static final int TRANSCHKPOLICY = AttributesEnum.TransChkPolicy.index();
    public static final int TRANSITMOCAMT = AttributesEnum.TransItmOcAmt.index();
    public static final int TRANSITMUOM = AttributesEnum.TransItmUom.index();
    public static final int TRANSITMFORAUTOSUGG = AttributesEnum.TransItmForAutoSugg.index();
    public static final int TRANSITMGRPDESC = AttributesEnum.TransItmGrpDesc.index();
    public static final int TRANSITMATTDESC = AttributesEnum.TransItmAttDesc.index();
    public static final int TRANSPOTYPE = AttributesEnum.TransPoType.index();
    public static final int MMPENDORDVW = AttributesEnum.MmPendOrdVw.index();
    public static final int MMDRFTPO = AttributesEnum.MmDrftPo.index();
    public static final int MMDRFTPOTR = AttributesEnum.MmDrftPoTr.index();
    public static final int LOVITMID = AttributesEnum.LovItmId.index();
    public static final int LOVDISCTYPE = AttributesEnum.LovDiscType.index();
    public static final int LOVITMIDEO = AttributesEnum.LovItmIdEo.index();
    public static final int LOVUOMVWVO1 = AttributesEnum.LovUomVwVO1.index();
    public static final int MMPENDORDVWVO1 = AttributesEnum.MmPendOrdVwVO1.index();
    public static final int LOVCOAIDFORCASHPOVO = AttributesEnum.LovCoaIdForCashPoVO.index();
    public static final int LOVITMIDFORCPOVO = AttributesEnum.LovItmIdForCpoVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmDrftPoItmVORowImpl() {
    }

    /**
     * Gets MmDrftPoItmEO entity object.
     * @return the MmDrftPoItmEO
     */
    public MmDrftPoItmEOImpl getMmDrftPoItmEO() {
        return (MmDrftPoItmEOImpl) getEntity(ENTITY_MMDRFTPOITMEO);
    }

    /**
     * Gets the attribute value for DISC_TYPE using the alias name DiscType.
     * @return the DISC_TYPE
     */
    public String getDiscType() {
        return (String) getAttributeInternal(DISCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_TYPE using the alias name DiscType.
     * @param value value to set the DISC_TYPE
     */
    public void setDiscType(String value) {
        if (value == null) {
            System.out.println(" disc value is value is null  ");
            value = "A";
        }
        setAttributeInternal(DISCTYPE, value);
    }

    /**
     * Gets the attribute value for DISC_VAL using the alias name DiscVal.
     * @return the DISC_VAL
     */
    public Number getDiscVal() {
        return (Number) getAttributeInternal(DISCVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_VAL using the alias name DiscVal.
     * @param value value to set the DISC_VAL
     */
    public void setDiscVal(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(DISCVAL, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {

        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for ENTITY_ID using the alias name EntityId.
     * @return the ENTITY_ID
     */
    public Integer getEntityId() {
        return (Integer) getAttributeInternal(ENTITYID);
    }

    /**
     * Sets <code>value</code> as attribute value for ENTITY_ID using the alias name EntityId.
     * @param value value to set the ENTITY_ID
     */
    public void setEntityId(Integer value) {

        setAttributeInternal(ENTITYID, value);
    }

    /**
     * Gets the attribute value for ITM_AMT_BS using the alias name ItmAmtBs.
     * @return the ITM_AMT_BS
     */
    public Number getItmAmtBs() {
        return (Number) getAttributeInternal(ITMAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_BS using the alias name ItmAmtBs.
     * @param value value to set the ITM_AMT_BS
     */
    public void setItmAmtBs(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(ITMAMTBS, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for ITM_AMT_SP using the alias name ItmAmtSp.
     * @return the ITM_AMT_SP
     */
    public Number getItmAmtSp() {
        return (Number) getAttributeInternal(ITMAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_SP using the alias name ItmAmtSp.
     * @param value value to set the ITM_AMT_SP
     */
    public void setItmAmtSp(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(ITMAMTSP, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for ITM_ID using the alias name ItmId.
     * @return the ITM_ID
     */
    public String getItmId() {

        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID using the alias name ItmId.
     * @param value value to set the ITM_ID
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ITM_PRICE using the alias name ItmPrice.
     * @return the ITM_PRICE
     */
    public Number getItmPrice() {
        return (Number) getAttributeInternal(ITMPRICE);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_PRICE using the alias name ItmPrice.
     * @param value value to set the ITM_PRICE
     */
    public void setItmPrice(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(ITMPRICE, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for ITM_UOM using the alias name ItmUom.
     * @return the ITM_UOM
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM using the alias name ItmUom.
     * @param value value to set the ITM_UOM
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for ORD_QTY using the alias name OrdQty.
     * @return the ORD_QTY
     */
    public Number getOrdQty() {
        return (Number) getAttributeInternal(ORDQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for ORD_QTY using the alias name OrdQty.
     * @param value value to set the ORD_QTY
     */
    public void setOrdQty(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(ORDQTY, value.round(getGlblRoundQtyDigit()));
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {

        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for REJ_ALWD using the alias name RejAlwd.
     * @return the REJ_ALWD
     */
    public String getRejAlwd() {
        return (String) getAttributeInternal(REJALWD);
    }

    /**
     * Sets <code>value</code> as attribute value for REJ_ALWD using the alias name RejAlwd.
     * @param value value to set the REJ_ALWD
     */
    public void setRejAlwd(String value) {
        setAttributeInternal(REJALWD, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {

        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for TLRNC_QTY_TYPE using the alias name TlrncQtyType.
     * @return the TLRNC_QTY_TYPE
     */
    public String getTlrncQtyType() {
        return (String) getAttributeInternal(TLRNCQTYTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_QTY_TYPE using the alias name TlrncQtyType.
     * @param value value to set the TLRNC_QTY_TYPE
     */
    public void setTlrncQtyType(String value) {
        setAttributeInternal(TLRNCQTYTYPE, value);
    }

    /**
     * Gets the attribute value for TLRNC_QTY_VAL using the alias name TlrncQtyVal.
     * @return the TLRNC_QTY_VAL
     */
    public Number getTlrncQtyVal() {
        return (Number) getAttributeInternal(TLRNCQTYVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_QTY_VAL using the alias name TlrncQtyVal.
     * @param value value to set the TLRNC_QTY_VAL
     */
    public void setTlrncQtyVal(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TLRNCQTYVAL, value.round(getGlblRoundQtyDigit()));
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Date getUsrIdCreateDt() {
        return (Date) getAttributeInternal(USRIDCREATEDT);
    }


    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Date getUsrIdModDt() {
        return (Date) getAttributeInternal(USRIDMODDT);
    }


    /**
     * Gets the attribute value for MARKED_FOR_DELETE using the alias name MarkedForDelete.
     * @return the MARKED_FOR_DELETE
     */
    public Boolean getMarkedForDelete() {
        return (Boolean) getAttributeInternal(MARKEDFORDELETE);
    }

    /**
     * Sets <code>value</code> as attribute value for MARKED_FOR_DELETE using the alias name MarkedForDelete.
     * @param value value to set the MARKED_FOR_DELETE
     */
    public void setMarkedForDelete(Boolean value) {
        setAttributeInternal(MARKEDFORDELETE, value);
    }

    /**
     * Gets the attribute value for TRANS_CURR_CONV_FCTR using the alias name TransCurrConvFctr.
     * @return the TRANS_CURR_CONV_FCTR
     */
    public Number getTransCurrConvFctr() {
        if (getAttributeInternal(TRANSCURRCONVFCTR) != null)
            return (Number) getAttributeInternal(TRANSCURRCONVFCTR);
        else {
            if (getAm().getMmDrftPo().getCurrentRow().getAttribute("CurrConvFctr") != null)
                return (Number)(((Number) getAm().getMmDrftPo().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit()));
            else
                return (new Number(1));
        }

    }

    /**
     * Sets <code>value</code> as attribute value for TRANS_CURR_CONV_FCTR using the alias name TransCurrConvFctr.
     * @param value value to set the TRANS_CURR_CONV_FCTR
     */
    public void setTransCurrConvFctr(Number value) {

        setAttributeInternal(TRANSCURRCONVFCTR, value.round(getGlblRoundCurrRateDigit()));
    }

    /**
     * Gets the attribute value for TRANS_ITM_AMT_BS using the alias name TransItmAmtBs.
     * @return the TRANS_ITM_AMT_BS
     */
    public Number getTransItmAmtBs() {
        return (Number) getAttributeInternal(TRANSITMAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TRANS_ITM_AMT_BS using the alias name TransItmAmtBs.
     * @param value value to set the TRANS_ITM_AMT_BS
     */
    public void setTransItmAmtBs(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSITMAMTBS, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for TRANS_ITM_AMT_SP using the alias name TransItmAmtSp.
     * @return the TRANS_ITM_AMT_SP
     */
    public Number getTransItmAmtSp() {
        /*   PurOrderAMImpl am = (PurOrderAMImpl)resolvElDC("PurOrderAMDataControl");
        ViewObjectImpl vo=am.getMmDrftPoItm();
       Row r= vo.getCurrentRow();    */
        Number zero = new Number(0);

        Number amt = zero;
        Number hund = new Number(100);
        Number pr = zero;
        Number ord = zero;
        Number dis = zero;
        //  Number oc=zero;

        if (getItmPrice() != null)
            pr = new Number((getItmPrice()));


        if (getOrdQty() != null)
            ord = new Number((getOrdQty()));


        if (getTotDiscAmtSp() != null)
            dis = new Number(getTotDiscAmtSp());


        // System.out.println("Oc Amt="+oc);
        amt = (Number) amt.add((pr.multiply(ord)).subtract(dis)).round(getGlblRoundAmtDigit());
        return amt;
        // return (Number) getAttributeInternal(TRANSITMAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TRANS_ITM_AMT_SP using the alias name TransItmAmtSp.
     * @param value value to set the TRANS_ITM_AMT_SP
     */
    public void setTransItmAmtSp(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSITMAMTSP, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for the calculated attribute lovSwitcherForItmId.
     * @return the lovSwitcherForItmId
     */
    public String getlovSwitcherForItmId() {
        return (String) getAttributeInternal(LOVSWITCHERFORITMID);
    }


    /**
     * Gets the attribute value for TRANS_EO_ID_FROM_PO using the alias name TransEoIdFromPo.
     * @return the TRANS_EO_ID_FROM_PO
     */
    public Integer getTransEoIdFromPo() {
        if (getAm().getMmDrftPo().getCurrentRow().getAttribute("EoId") != null)
            return (Integer) getAm().getMmDrftPo().getCurrentRow().getAttribute("EoId");
        else
            return (Integer) getAttributeInternal(TRANSEOIDFROMPO);
    }

    /**
     * Sets <code>value</code> as attribute value for TRANS_EO_ID_FROM_PO using the alias name TransEoIdFromPo.
     * @param value value to set the TRANS_EO_ID_FROM_PO
     */
    public void setTransEoIdFromPo(Integer value) {
        setAttributeInternal(TRANSEOIDFROMPO, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItemId.
     * @return the TransItemId
     */
    public String getTransItemId() {
        //  return (String) getAttributeInternal(TRANSITEMID);
        return getItmId();
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItemId.
     * @param value value to set the  TransItemId
     */
    public void setTransItemId(String value) {
        setAttributeInternal(TRANSITEMID, value);
    }


    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItemName.
     * @return the TransItemName
     */
    public String getTransItemName() {
        PurOrderAMImpl am = (PurOrderAMImpl) this.getApplicationModule();

        String inputeo = null;
        String eoDesc = null;
        inputeo = getItmId();
        if (inputeo != null) {
            ViewObjectImpl itmNewVo = am.getLovItmIdNew();
            itmNewVo.setNamedWhereClauseParam("CldIdBind", getCldId());
            itmNewVo.setNamedWhereClauseParam("SlocIdBind", getSlocId());
            itmNewVo.setNamedWhereClauseParam("HoOrgIdBind", getTransHoOrgId());
            itmNewVo.setNamedWhereClauseParam("OrgIdBind", getOrgId());
            itmNewVo.setNamedWhereClauseParam("ItmIdBind", inputeo);
            itmNewVo.executeQuery();
            Row[] xx = itmNewVo.getFilteredRows("ItmId", inputeo);
            if (xx.length > 0) {
                eoDesc = xx[0].getAttribute("ItmDesc").toString();
            }
            return eoDesc;
        } else {
            return (String) getAttributeInternal(TRANSITEMNAME);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItemName.
     * @param value value to set the  TransItemName
     */
    public void setTransItemName(String value) {
        setAttributeInternal(TRANSITEMNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransDiscAmt.
     * @return the TransDiscAmt
     */
    public Number getTransDiscAmt() {
        /*  Number disc=(Number) getAttributeInternal(TRANSDISCAMT);
        if(disc.compareTo(new Number(0))!=0 && getTransCurrConvFctr()!=null){
        setDiscAmtBs(disc.multiply(getTransCurrConvFctr()));
        setDiscAmtSp(disc);
        }
        else
        {
            setDiscAmtBs(new Number(0));
            setDiscAmtSp(new Number(0));
        } */
        return (Number) getAttributeInternal(TRANSDISCAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransDiscAmt.
     * @param value value to set the  TransDiscAmt
     */
    public void setTransDiscAmt(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSDISCAMT, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for the calculated attribute TransItemTaxAmt.
     * @return the TransItemTaxAmt
     */

    public Number getTransItemTaxAmt() {
        // if (getAttributeInternal(TRANSITEMTAXAMT) == null) {
        PurOrderAMImpl am = (PurOrderAMImpl) this.getApplicationModule();
        ViewObjectImpl trVo = am.getMmDrftPoTr();
        trVo.setRangeSize(-1);
        trVo.getAllRowsInRange();
        RowQualifier rowQualifier = new RowQualifier(trVo);
        rowQualifier.setWhereClause("DocId ='" + getDocId() + "' and  ItmId= '" + getItmId() + "' and ItmUom='" +
                                    getItmUom() + "'");
        Row[] filteredRows = trVo.getFilteredRows(rowQualifier);

        Number num = new Number(0);
        //  System.out.println(rowQualifier.getExprStr() + " filteredRows.length ::: " + filteredRows.length);
        //  System.out.println("getAttributeInternal(TRANSITEMTAXAMT)  " + getAttributeInternal(TRANSITEMTAXAMT));
        if (filteredRows.length > 0) {
            num = (Number) filteredRows[0].getAttribute("TaxAmt");
            // System.out.println(filteredRows[0].getAttribute("TaxAmt") + "   tax amount    " + num);
            if (num == null) {
                num = new Number(0);
            }
            return num;
        } else if (filteredRows.length == 0) {
            /*   if(getAttributeInternal(TRANSITEMTAXAMT)!=null){
                     return (Number) getAttributeInternal(TRANSITEMTAXAMT);
                 }else{ */
            return num;
            //  }
            // }
            //return (Number) getAttributeInternal(TRANSITEMTAXAMT);
        } else
            return (Number) getAttributeInternal(TRANSITEMTAXAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItemTaxAmt.
     * @param value value to set the  TransItemTaxAmt
     */
    public void setTransItemTaxAmt(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSITEMTAXAMT, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmAmtBsTax.
     * @return the TransItmAmtBsTax
     */
    public Number getTransItmAmtBsTax() {

        Number amtSpTax = getTransItmAmtSpTax();
        Number currency = (Number)getTransCurrConvFctr().round(getGlblRoundCurrRateDigit());
    
        if (currency == null) {
            currency = new Number(0);
        }

        Number bsAmt = (Number) amtSpTax.multiply(currency).round(getGlblRoundAmtDigit());
          System.out.println(amtSpTax + " amtSpTax " + currency + " currency " + bsAmt+"  curr diaa " +getGlblRoundCurrRateDigit());
        if (bsAmt == null) {
            setItmAmtBs(bsAmt);
            return new Number(0);
        } else if (bsAmt != null) {
            setItmAmtBs(bsAmt);
            return bsAmt;
        } else {
            return (Number) getAttributeInternal(TRANSITMAMTBSTAX);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmAmtBsTax.
     * @param value value to set the  TransItmAmtBsTax
     */
    public void setTransItmAmtBsTax(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSITMAMTBSTAX, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmAmtSpTax.
     * @return the TransItmAmtSpTax
     */
    public Number getTransItmAmtSpTax() {
        Number zero = new Number(0);
        Number a = zero;
        Number b = zero;
        if (getTransItemTaxAmt() != null) {
            a = getTransItemTaxAmt();
        }

        Number pr = zero;
        Number dis = zero;
        Number ord = zero;
        Number oc = zero;
        if (getTransItmOcAmt() != null)
            oc = new Number(getTransItmOcAmt());
        if (getItmPrice() != null)
            pr = getItmPrice();

        if (getTotDiscAmtSp() != null)
            dis = getTotDiscAmtSp();
        if (getOrdQty() != null)
            ord = getOrdQty();
        Number hund = new Number(100);

        b = (Number) (pr.multiply(ord)).subtract(dis).round(getGlblRoundAmtDigit());

        Number c = (Number) a.add(b).add(oc).round(getGlblRoundAmtDigit());

        if (c == null) {
            c = zero;
            setItmAmtSp(c);
            return c;
        } else {
            setItmAmtSp(c);
            return c;
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmAmtSpTax.
     * @param value value to set the  TransItmAmtSpTax
     */
    public void setTransItmAmtSpTax(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        if (value != null) {
            try {
                System.out.println("Setter Code Run......");
                PurOrderAMImpl am = (PurOrderAMImpl) this.getApplicationModule();
                am.updateCostCenterAmt();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
        setAttributeInternal(TRANSITMAMTSPTAX, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for the calculated attribute TransItemAmtWoutDc.
     * @return the TransItemAmtWoutDc
     */
    public Number getTransItemAmtWoutDc() {
        PurOrderAMImpl am = (PurOrderAMImpl) resolvElDC("PurOrderAMDataControl");
        ViewObjectImpl vo = am.getMmDrftPoItm();
        Row r = vo.getCurrentRow();

        Number zero = new Number(0);
        Number amt = zero;
        Number pr = zero;
        Number ord = zero;
        if (r != null) {
            if (getItmPrice() != null)
                pr = new Number((getItmPrice()));
            if (getOrdQty() != null)
                ord = new Number((getOrdQty()));
            amt = (Number) amt.add(pr.multiply(ord)).round(getGlblRoundAmtDigit());

        }
        return amt;

        // return (Number) getAttributeInternal(TRANSITEMAMTWOUTDC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItemAmtWoutDc.
     * @param value value to set the  TransItemAmtWoutDc
     */
    public void setTransItemAmtWoutDc(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSITEMAMTWOUTDC, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for the calculated attribute TransUomClass.
     * @return the TransUomClass
     */
    public Integer getTransUomClass() {
        PurOrderAMImpl am = (PurOrderAMImpl) resolvElDC("PurOrderAMDataControl");

        String inputuom = null;
        Integer uomClass = null;
        try {
            inputuom = getItmUom();
            //x.getAttribute("TvouCoaId");
        } catch (NullPointerException npe) {

        }
        if (inputuom != null) {
            Row[] xx = am.getLovItmUom().getFilteredRows("UomId", inputuom);
            if (xx.length > 0) {
                uomClass = (Integer) xx[0].getAttribute("UomClass");
            }
            return uomClass;
        } else {
            return (Integer) getAttributeInternal(TRANSUOMCLASS);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUomClass.
     * @param value value to set the  TransUomClass
     */
    public void setTransUomClass(Integer value) {
        setAttributeInternal(TRANSUOMCLASS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxRuleFlg.
     * @return the TransTaxRuleFlg
     */
    public String getTransTaxRuleFlg() {
        ViewObjectImpl potr = getAm().getMmDrftPoTr();
        RowQualifier rq = new RowQualifier(potr);
        rq.setWhereClause("DocId='" + getDocId() + "' and ItmId='" + getItmId() + "' and ItmUom='" + getItmUom() + "'");
        Row[] r = potr.getFilteredRows(rq);
        String txrlflg = null;
        if (r.length > 0) {
            if (r[0].getAttribute("TaxRuleFlg") != null)
                txrlflg = r[0].getAttribute("TaxRuleFlg").toString();
        }
        return txrlflg;
        // return (String) getAttributeInternal(TRANSTAXRULEFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxRuleFlg.
     * @param value value to set the  TransTaxRuleFlg
     */
    public void setTransTaxRuleFlg(String value) {
        setAttributeInternal(TRANSTAXRULEFLG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPoDiscAmtSp.
     * @return the TransPoDiscAmtSp
     */
    public Number getTransPoDiscAmtSp() {
        return (Number) getAttributeInternal(TRANSPODISCAMTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPoDiscAmtSp.
     * @param value value to set the  TransPoDiscAmtSp
     */
    public void setTransPoDiscAmtSp(Number value) {
        setAttributeInternal(TRANSPODISCAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransChkPolicy.
     * @return the TransChkPolicy
     */
    public Long getTransChkPolicy() {
        Integer pslocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        String pOrgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String p_hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}").toString();
        Integer eo = null;
        Integer currSpId = null;
        if (getAm().getMmDrftPo().getCurrentRow().getAttribute("EoId") != null)
            eo = (Integer) getAm().getMmDrftPo().getCurrentRow().getAttribute("EoId");
        // System.out.println("supp="+eo);
        if (getAm().getMmDrftPo().getCurrentRow().getAttribute("CurrIdSp") != null)
            eo = (Integer) getAm().getMmDrftPo().getCurrentRow().getAttribute("CurrIdSp");

        Object retval = callStoredFunction(NUMBER, "APP.APP_GET_POLICY_PRICE(?,?,?,?,?,?,?,?)", new Object[] {
                                           p_cldId, pslocId, p_hoOrgId, pOrgId, eo, getItmId(), "PO", currSpId
        });
        // return (Number) getAttributeInternal(TRANSCHKPOLICY);
        // System.out.println("ret value="+retval);
        if (retval != null) {
            if (retval.toString().equals("0"))
                return new Long(0);
            else
                return new Long(1);
        } else
            return new Long(0);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            st = getAm().getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransChkPolicy.
     * @param value value to set the  TransChkPolicy
     */
    public void setTransChkPolicy(Long value) {
        setAttributeInternal(TRANSCHKPOLICY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmOcAmt.
     * @return the TransItmOcAmt
     */
    public Number getTransItmOcAmt() {
        PurOrderAMImpl am = (PurOrderAMImpl) this.getApplicationModule();
        if (am.getMmDrftPo().getCurrentRow().getAttribute("TransSumOcAmt") != null) {
            Number totalOc = (Number) am.getMmDrftPo().getCurrentRow().getAttribute("TransSumOcAmt");
            if (totalOc.compareTo(new Number(0)) > 0) {
                Number poCostWoutOc = new Number(0);
                if (am.getMmDrftPo().getCurrentRow().getAttribute("TransPoAmtSmWoutOc") != null)
                    poCostWoutOc = (Number) am.getMmDrftPo().getCurrentRow().getAttribute("TransPoAmtSmWoutOc");
                Number itmPrice = new Number(0);
                Number disc = new Number(0);
                Number tax = new Number(0);
                Number itmOcAmt = new Number(0);
                Number qty = new Number(0);
                if (getItmPrice() != null)
                    itmPrice = getItmPrice();
                if (getTotDiscAmtSp() != null)
                    disc = getTotDiscAmtSp();
                if (getTransItemTaxAmt() != null)
                    tax = getTransItemTaxAmt();
                if (getOrdQty() != null)
                    qty = getOrdQty();
                Number itmAmt = (Number) (qty.multiply(itmPrice)).subtract(disc).add(tax).round(getGlblRoundAmtDigit());
                Number itmPerc = new Number(0);

                /**
                      * if Po total cast zero then divide total OC amount to count of item rows.
                      * Else  divide precentage of total item wise .
                      * this division use to add OC amount item wise after apply tax or discount.
                      */
                if (poCostWoutOc.compareTo(new Number(0)) == 0) {
                    ViewObjectImpl voItmNew = am.getMmDrftPoItm1();
                    RowQualifier rq1 = new RowQualifier(voItmNew);
                    rq1.setWhereClause("CldId = '" + getCldId() + "' and SlocId =" + getSlocId() + " and OrgId ='" +
                                       getOrgId() + "' and DocId ='" + getDocId() + "' ");
                    Row[] rr = voItmNew.getFilteredRows(rq1);
                    if (rr.length > 0) {
                        itmPerc = (Number) (new Number(100).divide(rr.length).round(getGlblRoundAmtDigit()));
                    }

                } else {
                    itmPerc = new Number((itmAmt.multiply(new Number(100)).divide(poCostWoutOc)).round(getGlblRoundAmtDigit()));

                }
                if (itmPerc.compareTo(new Number(0)) == 0) {
                } else {
                    itmOcAmt = new Number((totalOc.multiply(itmPerc).divide(new Number(100)).round(getGlblRoundAmtDigit())));

                }
                return itmOcAmt;
            }

        }

        return new Number(0);

        // return (Number) getAttributeInternal(TRANSITMOCAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmOcAmt.
     * @param value value to set the  TransItmOcAmt
     */
    public void setTransItmOcAmt(Number value) {
        setAttributeInternal(TRANSITMOCAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmUom.
     * @return the TransItmUom
     */
    public String getTransItmUom() {
        PurOrderAMImpl am = (PurOrderAMImpl) this.getApplicationModule();

        String inputUom = null;
        String uomName = null;
        inputUom = getItmUom();
        if (inputUom != null) {
            Row[] xx = am.getLovItmUom().getFilteredRows("UomId", inputUom);
            if (xx.length > 0) {
                uomName = xx[0].getAttribute("UomDesc").toString();
            }
            return uomName;
        } else {
            return (String) getAttributeInternal(TRANSITMUOM);
        }

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmUom.
     * @param value value to set the  TransItmUom
     */
    public void setTransItmUom(String value) {
        setAttributeInternal(TRANSITMUOM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmForAutoSugg.
     * @return the TransItmForAutoSugg
     */
    public String getTransItmForAutoSugg() {
        return (String) getAttributeInternal(TRANSITMFORAUTOSUGG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmForAutoSugg.
     * @param value value to set the  TransItmForAutoSugg
     */
    public void setTransItmForAutoSugg(String value) {
        setAttributeInternal(TRANSITMFORAUTOSUGG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmGrpDesc.
     * @return the TransItmGrpDesc
     */
    public String getTransItmGrpDesc() {
        PurOrderAMImpl am = (PurOrderAMImpl) this.getApplicationModule();

        if (getItmId() != null) {
            ViewObjectImpl itmNewVo = am.getLovItmIdNew();
            itmNewVo.setNamedWhereClauseParam("CldIdBind", getCldId());
            itmNewVo.setNamedWhereClauseParam("SlocIdBind", getSlocId());
            itmNewVo.setNamedWhereClauseParam("HoOrgIdBind", getTransHoOrgId());
            itmNewVo.setNamedWhereClauseParam("OrgIdBind", getOrgId());
            itmNewVo.setNamedWhereClauseParam("ItmIdBind", getItmId());
            itmNewVo.executeQuery();
            Row[] xx = am.getLovItmIdNew().getFilteredRows("ItmId", getItmId());
            Object attdetail = null;
            // System.out.println("grp id length is " + xx.length);
            if (xx.length > 0) {
                attdetail = callStoredFunction(Types.VARCHAR, "APP.GET_ITM_GRP_PATH(?,?,?,?)", new Object[] {
                                               getSlocId(), getCldId(), getTransHoOrgId(), xx[0].getAttribute("GrpId")
                });
                // System.out.println("function return " + attdetail + " grp and itm id is " +
                //        xx[0].getAttribute("GrpId") + " " + getItmId());

            }
            if (attdetail != null) {
                return attdetail.toString();
            } else {
                return (String) getAttributeInternal(TRANSITMGRPDESC);
            }
        } else {
            return (String) getAttributeInternal(TRANSITMGRPDESC);
        }
        //return (String) getAttributeInternal(TRANSITMGRPDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmGrpDesc.
     * @param value value to set the  TransItmGrpDesc
     */
    public void setTransItmGrpDesc(String value) {
        setAttributeInternal(TRANSITMGRPDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmAttDesc.
     * @return the TransItmAttDesc
     */
    public String getTransItmAttDesc() {
        // System.out.println("get item id is " + getItmId() + getCldId() + " " + getSlocId() + " " + getTransHoOrgId());
        if (getItmId() != null) {

            Object attdetail = callStoredFunction(Types.VARCHAR, "APP.FN_GET_ITM_ATT(?,?,?,?,?,?)", new Object[] {
                                                  getCldId(), getSlocId(), getTransHoOrgId(), getItmId(), "R", ","
            });
            //   System.out.println("function return " + attdetail + " " + getItmId());
            if (attdetail != null) {
                return attdetail.toString();
            } else {
                return "None";
            }
        } else {
            return "None";
        }

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmAttDesc.
     * @param value value to set the  TransItmAttDesc
     */
    public void setTransItmAttDesc(String value) {
        setAttributeInternal(TRANSITMATTDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPoType.
     * @return the TransPoType
     */
    public Integer getTransPoType() {
        return (Integer) getAttributeInternal(TRANSPOTYPE);
    }

    /**
     * Gets the attribute value for CC_ID using the alias name CcId.
     * @return the CC_ID
     */
    public String getCcId() {
        return (String) getAttributeInternal(CCID);
    }

    /**
     * Sets <code>value</code> as attribute value for CC_ID using the alias name CcId.
     * @param value value to set the CC_ID
     */
    public void setCcId(String value) {
        setAttributeInternal(CCID, value);
    }

    /**
     * Gets the attribute value for ITM_REMARKS using the alias name ItmRemarks.
     * @return the ITM_REMARKS
     */
    public String getItmRemarks() {
        return (String) getAttributeInternal(ITMREMARKS);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_REMARKS using the alias name ItmRemarks.
     * @param value value to set the ITM_REMARKS
     */
    public void setItmRemarks(String value) {
        setAttributeInternal(ITMREMARKS, value);
    }

    /**
     * Gets the attribute value for CLOSE_FLG using the alias name CloseFlg.
     * @return the CLOSE_FLG
     */
    public String getCloseFlg() {
        return (String) getAttributeInternal(CLOSEFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for CLOSE_FLG using the alias name CloseFlg.
     * @param value value to set the CLOSE_FLG
     */
    public void setCloseFlg(String value) {
        setAttributeInternal(CLOSEFLG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxChangedFlg.
     * @return the TransTaxChangedFlg
     */
    public String getTransTaxChangedFlg() {
        //#{bindings.TaxAfterDiscFlg.inputValue=='Y' ? bindings.TransItmAmtSp.inputValue : bindings.TransItemAmtWoutDc.inputValue }
        Number zero = new Number(0);
        Number taxable = zero;
        Number amtforTax = zero;
        PurOrderAMImpl am = (PurOrderAMImpl) resolvElDC("PurOrderAMDataControl");
        Row currPo = am.getMmDrftPo().getCurrentRow();
        String trf = null;

        if (currPo.getAttribute("TaxRuleFlg") != null)
            trf = currPo.getAttribute("TaxRuleFlg").toString();
        ViewObjectImpl trPo = am.getMmDrftPoTr();
        Row[] rw = null;
        RowQualifier rq = new RowQualifier(trPo);
        rq.setWhereClause("ItmId='" + getItmId() + "' and ItmUom='" + getItmUom() + "'");
        //      System.out.println("Where Clause is=> ItmId='"+getItmId()+"' and ItmUom='"+getItmUom()+"'");
        /*  if(trf.equals("P"))
             rw=  trPo.getFilteredRows("ItmId","ALL");
         else
        */
        rw = trPo.getFilteredRows(rq);
        //   System.out.println("No. of rows in tr="+rw.length);

        String applyTax = "P";
        if (currPo.getAttribute("TaxRuleFlg") != null)
            applyTax = currPo.getAttribute("TaxRuleFlg").toString();


        String flg = "N";
        if (currPo.getAttribute("TaxAfterDiscFlg") == null)
            flg = "N";
        else
            flg = currPo.getAttribute("TaxAfterDiscFlg").toString();


        if (flg.equalsIgnoreCase("Y"))
            amtforTax = getTransItmAmtSp();
        else if (flg.equalsIgnoreCase("N"))
            amtforTax = getTransItemAmtWoutDc();
        //  System.out.println("Amtfortax from itm for currentrow="+amtforTax);

        if (rw.length > 0) {
            taxable = (Number) rw[0].getAttribute("TaxableAmt");
            //  System.out.println("Taxable amt from tr for currentrow="+taxable);


            if ("I".equalsIgnoreCase(applyTax) || "P".equalsIgnoreCase(applyTax)) {
                if (amtforTax.compareTo(taxable) != 0) {
                    return "Y";
                } else {
                    return "N";
                }
            } else
                return "N";
        } else
            return "N";
        // return (String) getAttributeInternal(TRANSTAXCHANGEDFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxChangedFlg.
     * @param value value to set the  TransTaxChangedFlg
     */
    public void setTransTaxChangedFlg(String value) {
        setAttributeInternal(TRANSTAXCHANGEDFLG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        String p_horg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        return p_horg_id;
        //return (String) getAttributeInternal(TRANSHOORGID);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    public PurOrderAMImpl getAm() {
        return (PurOrderAMImpl) resolvElDC("PurOrderAMDataControl");
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxExmptFlg.
     * @return the TransTaxExmptFlg
     */
    public String getTransTaxExmptFlg() {
        String itmId = getItmId();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        // ViewObjectImpl impl = getAm().getLovItmId();
        ViewObjectImpl itmNewVo = getAm().getLovItmIdNew();
        itmNewVo.setNamedWhereClauseParam("CldIdBind", getCldId());
        itmNewVo.setNamedWhereClauseParam("SlocIdBind", getSlocId());
        itmNewVo.setNamedWhereClauseParam("HoOrgIdBind", getTransHoOrgId());
        itmNewVo.setNamedWhereClauseParam("OrgIdBind", getOrgId());
        itmNewVo.setNamedWhereClauseParam("ItmIdBind", itmId);
        itmNewVo.executeQuery();
        RowQualifier rq = new RowQualifier(itmNewVo);
        rq.setWhereClause("ItmId='" + itmId + "' and CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" +
                          orgId + "' and HoOrgId='" + hoOrgId + "'");

        Row[] r = itmNewVo.getFilteredRows(rq);
        System.out.println(rq.getExprStr() + "  log-----:::: " + r.length);
        String flg = "N";
        if (r.length > 0)
            flg = (String) r[0].getAttribute("TaxExmptFlg");
        return flg;
        //return (String) getAttributeInternal(TRANSTAXEXMPTFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxExmptFlg.
     * @param value value to set the  TransTaxExmptFlg
     */
    public void setTransTaxExmptFlg(String value) {
        setAttributeInternal(TRANSTAXEXMPTFLG, value);
    }


    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        return (Number) getAttributeInternal(DISCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
        Number currConvFctr = new Number(1);
        Number discSp = new Number(0);
        Number discBs = new Number(0);
        PurOrderAMImpl am = (PurOrderAMImpl) this.getApplicationModule();

        if (am.getMmDrftPo().getCurrentRow().getAttribute("CurrConvFctr") != null)
            currConvFctr = (Number) am.getMmDrftPo().getCurrentRow().getAttribute("CurrConvFctr");
        if (getAttributeInternal(DISCAMTSP) != null)
            discSp = (Number) getAttributeInternal(DISCAMTSP);
        discBs = (Number) discSp.multiply(currConvFctr).round(getGlblRoundAmtDigit());
        setDiscAmtBs(discBs);
        if (getAttributeInternal(DISCAMTSP) != null)
            return (Number) getAttributeInternal(DISCAMTSP);
        else
            return new Number(0);

    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
        setAttributeInternal(DISCAMTSP, value);
    }


    /**
     * Gets the attribute value for ITM_UOM_BS using the alias name ItmUomBs.
     * @return the ITM_UOM_BS
     */
    public String getItmUomBs() {
        return (String) getAttributeInternal(ITMUOMBS);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM_BS using the alias name ItmUomBs.
     * @param value value to set the ITM_UOM_BS
     */
    public void setItmUomBs(String value) {
        setAttributeInternal(ITMUOMBS, value);
    }

    /**
     * Gets the attribute value for UOM_CONV_FCTR using the alias name UomConvFctr.
     * @return the UOM_CONV_FCTR
     */
    public Number getUomConvFctr() {
        return (Number) getAttributeInternal(UOMCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for UOM_CONV_FCTR using the alias name UomConvFctr.
     * @param value value to set the UOM_CONV_FCTR
     */
    public void setUomConvFctr(Number value) {
        setAttributeInternal(UOMCONVFCTR, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmPendOrdVw.
     */
    public RowIterator getMmPendOrdVw() {
        return (RowIterator) getAttributeInternal(MMPENDORDVW);
    }


    /**
     * Gets the associated <code>Row</code> using master-detail link MmDrftPo.
     */
    public Row getMmDrftPo() {
        return (Row) getAttributeInternal(MMDRFTPO);
    }

    /**
     * Sets the master-detail link MmDrftPo between this object and <code>value</code>.
     */
    public void setMmDrftPo(Row value) {
        setAttributeInternal(MMDRFTPO, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmDrftPoTr.
     */
    public RowIterator getMmDrftPoTr() {
        return (RowIterator) getAttributeInternal(MMDRFTPOTR);
    }

    /**
     * Gets the attribute value for AMD_DT using the alias name AmdDt.
     * @return the AMD_DT
     */
    public Date getAmdDt() {
        return (Date) getAttributeInternal(AMDDT);
    }

    /**
     * Sets <code>value</code> as attribute value for AMD_DT using the alias name AmdDt.
     * @param value value to set the AMD_DT
     */
    public void setAmdDt(Date value) {
        setAttributeInternal(AMDDT, value);
    }


    /**
     * Gets the attribute value for BAL_QTY using the alias name BalQty.
     * @return the BAL_QTY
     */
    public Number getBalQty() {
        return (Number) getAttributeInternal(BALQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for BAL_QTY using the alias name BalQty.
     * @param value value to set the BAL_QTY
     */
    public void setBalQty(Number value) {
        setAttributeInternal(BALQTY, value);
    }

    /**
     * Gets the attribute value for TOT_DISC_AMT_BS using the alias name TotDiscAmtBs.
     * @return the TOT_DISC_AMT_BS
     */
    public Number getTotDiscAmtBs() {
        return (Number) getAttributeInternal(TOTDISCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_DISC_AMT_BS using the alias name TotDiscAmtBs.
     * @param value value to set the TOT_DISC_AMT_BS
     */
    public void setTotDiscAmtBs(Number value) {
        if (value == null)
            value = new Number(0);
        setAttributeInternal(TOTDISCAMTBS, value);
    }

    /**
     * Gets the attribute value for TOT_DISC_AMT_SP using the alias name TotDiscAmtSp.
     * @return the TOT_DISC_AMT_SP
     */
    public Number getTotDiscAmtSp() {

        Number currConvFctr = new Number(1);
        Number discSp = new Number(0);
        Number discBs = new Number(0);
        PurOrderAMImpl am = (PurOrderAMImpl) this.getApplicationModule();

        if (am.getMmDrftPo().getCurrentRow().getAttribute("CurrConvFctr") != null)
            currConvFctr = (Number) am.getMmDrftPo().getCurrentRow().getAttribute("CurrConvFctr");
        if (getAttributeInternal(TOTDISCAMTSP) != null)
            discSp = (Number) getAttributeInternal(TOTDISCAMTSP);
        discBs = (Number) discSp.multiply(currConvFctr).round(getGlblRoundAmtDigit());

        setTotDiscAmtBs(discBs);


        if (getAttributeInternal(TOTDISCAMTSP) == null)
            return new Number(0);
        else
            return (Number) getAttributeInternal(TOTDISCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_DISC_AMT_SP using the alias name TotDiscAmtSp.
     * @param value value to set the TOT_DISC_AMT_SP
     */
    public void setTotDiscAmtSp(Number value) {
        if (value == null)
            value = new Number(0);
        setAttributeInternal(TOTDISCAMTSP, value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {

        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for AMD_NO using the alias name AmdNo.
     * @return the AMD_NO
     */
    public Integer getAmdNo() {
        return (Integer) getAttributeInternal(AMDNO);
    }

    /**
     * Sets <code>value</code> as attribute value for AMD_NO using the alias name AmdNo.
     * @param value value to set the AMD_NO
     */
    public void setAmdNo(Integer value) {
        setAttributeInternal(AMDNO, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmId.
     */
    public RowSet getLovItmId() {
        return (RowSet) getAttributeInternal(LOVITMID);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LovDiscType.
     */
    public RowSet getLovDiscType() {
        return (RowSet) getAttributeInternal(LOVDISCTYPE);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmIdEo.
     */
    public RowSet getLovItmIdEo() {
        return (RowSet) getAttributeInternal(LOVITMIDEO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUomVwVO1.
     */
    public RowSet getLovUomVwVO1() {
        return (RowSet) getAttributeInternal(LOVUOMVWVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmPendOrdVwVO1.
     */
    public RowSet getMmPendOrdVwVO1() {
        return (RowSet) getAttributeInternal(MMPENDORDVWVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCoaIdForCashPoVO.
     */
    public RowSet getLovCoaIdForCashPoVO() {
        return (RowSet) getAttributeInternal(LOVCOAIDFORCASHPOVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmIdForCpoVO.
     */
    public RowSet getLovItmIdForCpoVO() {
        return (RowSet) getAttributeInternal(LOVITMIDFORCPOVO);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
