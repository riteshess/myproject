package mmappuom.model.entities;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmappuom.model.module.AppUOMAMImpl;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue May 28 14:17:00 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppUomClsEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(AppUomClsEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(AppUomClsEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        CldId {
            public Object get(AppUomClsEOImpl obj) {
                return obj.getCldId();
            }

            public void put(AppUomClsEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        UomClassId {
            public Object get(AppUomClsEOImpl obj) {
                return obj.getUomClassId();
            }

            public void put(AppUomClsEOImpl obj, Object value) {
                obj.setUomClassId((Integer)value);
            }
        }
        ,
        UomClassNm {
            public Object get(AppUomClsEOImpl obj) {
                return obj.getUomClassNm();
            }

            public void put(AppUomClsEOImpl obj, Object value) {
                obj.setUomClassNm((String)value);
            }
        }
        ,
        UsrIdCreate {
            public Object get(AppUomClsEOImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(AppUomClsEOImpl obj, Object value) {
                obj.setUsrIdCreate((Integer)value);
            }
        }
        ,
        UsrIdCreateDt {
            public Object get(AppUomClsEOImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(AppUomClsEOImpl obj, Object value) {
                obj.setUsrIdCreateDt((Date)value);
            }
        }
        ,
        UsrIdMod {
            public Object get(AppUomClsEOImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(AppUomClsEOImpl obj, Object value) {
                obj.setUsrIdMod((Integer)value);
            }
        }
        ,
        UsrIdModDt {
            public Object get(AppUomClsEOImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(AppUomClsEOImpl obj, Object value) {
                obj.setUsrIdModDt((Date)value);
            }
        }
        ,
        AppUomConvStd {
            public Object get(AppUomClsEOImpl obj) {
                return obj.getAppUomConvStd();
            }

            public void put(AppUomClsEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(AppUomClsEOImpl object);

        public abstract void put(AppUomClsEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int UOMCLASSID = AttributesEnum.UomClassId.index();
    public static final int UOMCLASSNM = AttributesEnum.UomClassNm.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int APPUOMCONVSTD = AttributesEnum.AppUomConvStd.index();

    /**
     * This is the default constructor (do not remove).
     */
    public AppUomClsEOImpl() {
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for UomClassId, using the alias name UomClassId.
     * @return the value of UomClassId
     */
    public Integer getUomClassId() {
        return (Integer)getAttributeInternal(UOMCLASSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for UomClassId.
     * @param value value to set the UomClassId
     */
    public void setUomClassId(Integer value) {
        setAttributeInternal(UOMCLASSID, value);
    }

    /**
     * Gets the attribute value for UomClassNm, using the alias name UomClassNm.
     * @return the value of UomClassNm
     */
    public String getUomClassNm() {
        return (String)getAttributeInternal(UOMCLASSNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for UomClassNm.
     * @param value value to set the UomClassNm
     */
    public void setUomClassNm(String value) {
        setAttributeInternal(UOMCLASSNM, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer)getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Date getUsrIdCreateDt() {
        return (Date)getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Date value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer)getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Date getUsrIdModDt() {
        return (Date)getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Date value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getAppUomConvStd() {
        return (RowIterator)getAttributeInternal(APPUOMCONVSTD);
    }

    /**
     * @param slocId key constituent
     * @param cldId key constituent
     * @param uomClassId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer slocId, String cldId, Integer uomClassId) {
        return new Key(new Object[]{slocId, cldId, uomClassId});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mmappuom.model.entities.AppUomClsEO");
    }
    public String resolveEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
    
    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        Integer slocid = Integer.parseInt(resolveEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userid = Integer.parseInt(resolveEl("#{pageFlowScope.GLBL_APP_USR}"));
        String cldid =(String)resolveEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        setCldId(cldid);
        setUsrIdCreate(userid);
        setSlocId(slocid);
        Date dt=(Date)Date.getCurrentDate();
        String table = "APP$UOM$CLS";
        String uomclassId = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_ID(?,?,?,?,?)", new Object[] {slocid,cldid,null,null,table}).toString();
        Integer classid = Integer.parseInt(uomclassId);
        System.out.println("uomclassId-----"+uomclassId+"classid-----"+classid);
        setUomClassId(classid);
        setUsrIdCreateDt(dt);
        super.create(attributeList);
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
           CallableStatement st = null;
           AppUOMAMImpl am = (AppUOMAMImpl)resolvElDC("AppUOMAMDataControl");
           try {
               st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
               st.registerOutParameter(1, sqlReturnType);
               if (bindVars != null) {
                   for (int z = 0; z < bindVars.length; z++) {
                       st.setObject(z + 2, bindVars[z]);
                   }
               }
               st.executeUpdate();
               System.out.println(st.getObject(1));
               return st.getObject(1);

           } catch (SQLException e) {
               throw new JboException(e);
           } finally {
               if (st != null) {
                   try {
                       st.close();
                   } catch (SQLException e) {
                       System.out.println(e.getMessage());
                   }
               }
           }
       }


    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
      //  super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        if(operation == DML_UPDATE){
            Integer userid = Integer.parseInt(resolveEl("#{pageFlowScope.GLBL_APP_USR}"));
            setUsrIdMod(userid);
            Date dt=(Date)Date.getCurrentDate();
             setUsrIdModDt(dt);
        }
        super.doDML(operation, e);
    }
}
