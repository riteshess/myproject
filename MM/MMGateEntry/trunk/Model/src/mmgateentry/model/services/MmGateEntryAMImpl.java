package mmgateentry.model.services;

import adf.utils.ebiz.EbizParams;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.HashSet;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmgateentry.model.services.common.MmGateEntryAM;
import mmgateentry.model.views.GeSearchVOImpl;
import mmgateentry.model.views.MmMtlGeItmVOImpl;

import mmgateentry.model.views.MmMtlGeSrcVOImpl;
import mmgateentry.model.views.MmMtlGeVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 16 16:02:02 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmGateEntryAMImpl extends ApplicationModuleImpl implements MmGateEntryAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MmGateEntryAMImpl() {
    }
    private static Integer SOURCE_DOC_TYPE_PO = 266;
    private static Integer SOURCE_DOC_TYPE_IMPORT_PO = 819;
    // private static Integer SOURCE_DOC_TYPE_SO=268;
    private static Integer SOURCE_DOC_TYPE_TRFO = 270;
    private static Integer SOURCE_DOC_TYPE_WPO = 370;
    private static Integer SOURCE_DOC_TYPE_WSO = 269;
    private static Integer SOURCE_DOC_TYPE_CPO = 459;
    private static Integer SOURCE_DOC_TYPE_JITR = 938;
    private static Integer SOURCE_DOC_TYPE_PROCS_ORD = 268;

    /**
     *Global round digit for Amount
     * @return
     */

    public Integer getGlblRoundAmtDigit() {
        if (resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}") != null) {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"));
        } else {
            return 6;
        }
    }

    /**
     *Global round digit for Quantity
     * @return
     */

    public Integer getGlblRoundQtyDigit() {
        if (resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}") != null) {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}"));
        } else {
            return 6;
        }

    }

    /**
     *Global round digit for currency rate
     * @return
     */

    public Integer getGlblRoundCurrRateDigit() {
        if (resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}") != null) {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}"));
        } else {
            return 6;
        }

    }
    private static ADFLogger _log = ADFLogger.createADFLogger(MmGateEntryAMImpl.class);

    /**
     * Container's getter for MmMtlGe.
     * @return MmMtlGe
     */
    public MmMtlGeVOImpl getMmMtlGe() {
        return (MmMtlGeVOImpl) findViewObject("MmMtlGe");
    }

    /**
     * Container's getter for MmMtlGeSrc.
     * @return MmMtlGeSrc
     */
    public ViewObjectImpl getMmMtlGeSrc() {
        return (ViewObjectImpl) findViewObject("MmMtlGeSrc");
    }

    /**
     * Container's getter for MmMtlGeItm.
     * @return MmMtlGeItm
     */
    public MmMtlGeItmVOImpl getMmMtlGeItm() {
        return (MmMtlGeItmVOImpl) findViewObject("MmMtlGeItm");
    }

    /**
     * Container's getter for MmMtlGeToMmMtlGeSrcVL1.
     * @return MmMtlGeToMmMtlGeSrcVL1
     */
    public ViewLinkImpl getMmMtlGeToMmMtlGeSrcVL1() {
        return (ViewLinkImpl) findViewLink("MmMtlGeToMmMtlGeSrcVL1");
    }

    /**
     * Container's getter for MmMtlGeSrcToMmMtlGeItmVL1.
     * @return MmMtlGeSrcToMmMtlGeItmVL1
     */
    public ViewLinkImpl getMmMtlGeSrcToMmMtlGeItmVL1() {
        return (ViewLinkImpl) findViewLink("MmMtlGeSrcToMmMtlGeItmVL1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public Object resolvElDC(String data) {
        ValueExpression valueExp =
            FacesContext.getCurrentInstance().getApplication().getExpressionFactory().createValueExpression(FacesContext.getCurrentInstance().getELContext(),
                                                                                                            "#{data." +
                                                                                                            data +
                                                                                                            ".dataProvider}",
                                                                                                            Object.class);
        return valueExp.getValue(FacesContext.getCurrentInstance().getELContext());
    }

    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId, String whIdDef,
                                      String chkWf) {
        // String tableName = "MM$GE";
        String prjAlw = "N";
        String prjId = "PROJ000";
        if (resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}") != null) {
            prjId = resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}").toString();
        }

        if (resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ALW}") != null) {
            prjAlw = resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ALW}").toString();
        }
        //   String paramWhChk = resolvEl("#{pageFlowScope.GLBL_ORG_WH_CHK}");

        Row currentRow = this.getMmMtlGe().getCurrentRow();
        // String txnId = (String)callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?)", new Object[]{SlocId,CldId,OrgId,tableName});

        String txnId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18511), 0
        })); //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        _log.info("--TxnId new created----" + txnId);
        currentRow.setAttribute("DocId", txnId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocDt", ts);
        Integer fy = getFYid(CldId, OrgId, ts, "A");
        currentRow.setAttribute("FyId", fy);

        if ("N".equals(chkWf)) {
            currentRow.setAttribute("WhId", "WH00001"); //
            currentRow.setAttribute("PrjId", "PROJ0000");
        } else if ("Y".equals(chkWf)) {
            currentRow.setAttribute("WhId", whIdDef);
            if ("Y".equalsIgnoreCase(prjAlw)) {
                currentRow.setAttribute("PrjId", prjId);
            } else {
                currentRow.setAttribute("PrjId", "PROJ0000");
            }
        }

    }

    public String getGeNo(Integer SlocId, String CldId, String OrgId, String WhId, Integer fyId) {
        Integer currnec = null;
        if (this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp") != null)
            currnec = (Integer) this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp");
        String geNo = null;
        if (this.getMmMtlGe().getCurrentRow().getAttribute("GeNo") != null) {
            geNo = (String) this.getMmMtlGe().getCurrentRow().getAttribute("GeNo");
        } else {
            geNo = (String) (callStoredFunction(Types.VARCHAR, "mm.FN_MM_GEN_ID (?,?,?,?,?,?,?,?)", new Object[] {
                                                SlocId, CldId, OrgId, "MM$MTL$GE", WhId, fyId,18511,this.getMmMtlGe().getCurrentRow().getAttribute("RcptSrcType")
            })); //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
            _log.info("--GE No generated--" + geNo);
            this.getMmMtlGe().getCurrentRow().setAttribute("GeNo", geNo);
        }
        this.getMmMtlGe().getCurrentRow().setAttribute("CurrIdSp", currnec);
        _log.info("At last currency=" + this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp"));
        return geNo;
    }

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = 0;
        _log.info(Mode + "-FY RETURNED-" + fyId);
        _log.info("currenc=" + this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp"));
        Integer currenc = null;
        if (this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp") != null)
            currenc = (Integer) this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp");
        if (Mode.equalsIgnoreCase("A")) {
            fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                 CldId, OrgId, geDate
            }));
            // _log.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmMtlGe();
            if (fyId > 0) {
                _log.info("-FY SET-");
                ge.getCurrentRow().setAttribute("FyId", fyId);
                ge.getCurrentRow().setAttribute("CurrIdSp", currenc);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            fyId = (Integer) this.getMmMtlGe().getCurrentRow().getAttribute("FyId");
            _log.info("In case mode is validation");
        }
        _log.info("currenc=" + this.getMmMtlGe().getCurrentRow().getAttribute("CurrIdSp"));

        return fyId;
    }

    public void getItemsForPopUp(Integer docType, Integer SlocId, String CldId, String OrgId, String HoOrgId,
                                 String sourceDocNo) {
        _log.info(SOURCE_DOC_TYPE_PO + "Params--" + docType + "--" + SlocId + "--" + CldId + "--" + sourceDocNo);
        if (docType.equals(SOURCE_DOC_TYPE_PO) || docType.equals(SOURCE_DOC_TYPE_IMPORT_PO)) {
            _log.info("In PO criteria");

            ViewObjectImpl vo = this.getMMDrftPoItm();
            ViewCriteria vc = vo.getViewCriteria("MMDrftPoItmVOCriteria");

            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("docIdBind",
                                        this.getMmMtlGe().getCurrentRow().getAttribute("TransSourceDocNo").toString());
            vo.setNamedWhereClauseParam("slocIdBind", SlocId);
            vo.setNamedWhereClauseParam("cldIdBind", CldId);
            vo.setNamedWhereClauseParam("orgIdBind", OrgId);
            vo.executeQuery();

        } /* else if(docType==SOURCE_DOC_TYPE_SO){
            _log.info("---In Sales Order criteria--");
        }else{
            _log.info("---In Others criteria--");
        } */
    }

    public void resetItemsForPopUp(Integer docType) {
        if (docType == SOURCE_DOC_TYPE_PO) {
            ViewObjectImpl vo = this.getMMDrftPoItm();
            ViewCriteria vc = vo.getViewCriteria("MMDrftPoItmVOCriteria");
            vo.resetCriteria(vc);
            vo.executeQuery();
        }
    }

    public String isPoScheduled(String PoDocId) {
        //Row[] poRw = this.getLovPoNo().getFilteredRows("DocId", PoDocId);
        Row[] poRw = this.getLovPoNoNew().getFilteredRows("DocId", PoDocId);
        if (poRw.length > 0) {
            Integer type = Integer.parseInt(poRw[0].getAttribute("PoType").toString());
            _log.info("PO TYPE--" + type);
            if (type == 172) {
                return "Y";
            } else {
                return "N";
            }
        }
        return "N";
    }

    /**--------------  code for po must not be populate when pending quantity must be greater than zero ----------  */
    public Integer poItmQtyGrtrZero() {
        ViewObjectImpl geVo = this.getMmMtlGe();
        ViewObjectImpl prfVo = this.getViewMMPrf();
        Row currGe = geVo.getCurrentRow();
        Integer no_of_row = 0;
        Integer count = new Integer(0);

        String CldId = currGe.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currGe.getAttribute("SlocId");
        String OrgId = currGe.getAttribute("OrgId").toString();
        _log.info("CurrIdSp=" + currGe.getAttribute("CurrIdSp"));
        Integer currency = null;
        if (currGe.getAttribute("CurrIdSp") != null)
            currency = (Integer) currGe.getAttribute("CurrIdSp");
        Integer shdlNo = 1;
        String consmablechk = "N";
        RowQualifier rqPrf = new RowQualifier(prfVo);
        rqPrf.setWhereClause("CldId = '" + CldId + "' and SlocId =" + SlocId + " and OrgId ='" + OrgId + "' ");
        Row[] rrPrf = prfVo.getFilteredRows(rqPrf);
        _log.info(rqPrf.getExprStr() + "  lenth  " + rrPrf.length);
        if (rrPrf.length > 0) {
            if (rrPrf[0].getAttribute("AlwDirectConsm") != null) {
                consmablechk = rrPrf[0].getAttribute("AlwDirectConsm").toString();
            }
        }
        if (currGe.getAttribute("TransSchdlNo") != null)
            shdlNo = (Integer) currGe.getAttribute("TransSchdlNo");
        else
            shdlNo = 1;
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("DocId='" + currGe.getAttribute("TransSourceDocId").toString() + "' and DlvSchdlNo=" +
                          shdlNo + " and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");
        _log.info("trans source doc Id expression " + rq.getExprStr());
        Row[] scdlRw = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        _log.info("No of Rows--" + scdlRw.length);
        no_of_row = scdlRw.length;
        if (scdlRw.length > 0) {
            for (Row curr : scdlRw) {
                String cnsmableFlg = "N";
                this.getViewObj().setNamedWhereClauseParam("slocIdBind",
                                                           resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                this.getViewObj().setNamedWhereClauseParam("cldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                this.getViewObj().setNamedWhereClauseParam("hoOrgIdBind", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                this.getViewObj().setNamedWhereClauseParam("orgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                this.getViewObj().setNamedWhereClauseParam("itmIdBind", curr.getAttribute("ItmId"));
                this.getViewObj().setNamedWhereClauseParam("itmNameBind", null);
                this.getViewObj().executeQuery();
                Row[] itms = this.getViewObj().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                if (itms.length > 0) {
                    if (itms[0].getAttribute("ConsumableFlg") != null) {
                        cnsmableFlg = itms[0].getAttribute("ConsumableFlg").toString();
                    }
                    _log.info(cnsmableFlg + "   cnsmableFlg  " + consmablechk);

                    if (itms[0].getAttribute("SrvcItmFlg") != null) {
                        _log.info(itms[0].getAttribute("SrvcItmFlg") + "    ");
                        _log.info(curr.getAttribute("ItmId") + "       ");

                        /** skip service item  and consumable item
                         *  comparison global consumable flag in case of consumable items
                         *  before this check is required all items available or not in case of service/Consumable
                         */
                        Number bal = new Number(0);
                        Number tmp = new Number(0);
                        Number pending = new Number(0);
                        if ("N".equalsIgnoreCase(itms[0].getAttribute("SrvcItmFlg").toString())) {
                            if ("N".equalsIgnoreCase(cnsmableFlg) || ("Y".equalsIgnoreCase(cnsmableFlg) && "N".equalsIgnoreCase(consmablechk))) { //"Y".equalsIgnoreCase(consmablechk) &&
                                if (curr.getAttribute("BalQty") != null)
                                    bal = (Number)((Number) curr.getAttribute("BalQty")).round(getGlblRoundQtyDigit());
                                if (curr.getAttribute("TmpRcptQty") != null)
                                    tmp = (Number)((Number) curr.getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());

                                pending = (Number)(bal.subtract(tmp)).round(getGlblRoundQtyDigit());
                                if (pending.compareTo(new Number(0)) == 1) {
                                    count = count + 1;
                                }

                            }
                        }
                    }
                }
            }
        }

        return count;
    }

    /**--------------- code for po must not be populate when it does have any item row for insertion ---------------- */

    public Integer checkItemAvlblOrNotPo() {
        ViewObjectImpl geVo = this.getMmMtlGe();
        ViewObjectImpl prfVo = this.getViewMMPrf();
        Row currGe = geVo.getCurrentRow();
        Integer no_of_row = 0;
        Integer count = new Integer(0);

        String CldId = currGe.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currGe.getAttribute("SlocId");
        String OrgId = currGe.getAttribute("OrgId").toString();
        _log.info("CurrIdSp=" + currGe.getAttribute("CurrIdSp"));
        Integer currency = null;
        if (currGe.getAttribute("CurrIdSp") != null)
            currency = (Integer) currGe.getAttribute("CurrIdSp");
        Integer shdlNo = 1;
        String consmablechk = "N";
        RowQualifier rqPrf = new RowQualifier(prfVo);
        rqPrf.setWhereClause("CldId = '" + CldId + "' and SlocId =" + SlocId + " and OrgId ='" + OrgId + "' ");
        Row[] rrPrf = prfVo.getFilteredRows(rqPrf);
        _log.info(rqPrf.getExprStr() + "  lenth  " + rrPrf.length);
        if (rrPrf.length > 0) {
            if (rrPrf[0].getAttribute("AlwDirectConsm") != null) {
                consmablechk = rrPrf[0].getAttribute("AlwDirectConsm").toString();
            }
        }
        if (currGe.getAttribute("TransSchdlNo") != null)
            shdlNo = (Integer) currGe.getAttribute("TransSchdlNo");
        else
            shdlNo = 1;
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("DocId='" + currGe.getAttribute("TransSourceDocId").toString() + "' and DlvSchdlNo=" +
                          shdlNo + " and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");
        _log.info("trans source doc Id expression " + rq.getExprStr());
        Row[] scdlRw = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        _log.info("No of Rows--" + scdlRw.length);
        no_of_row = scdlRw.length;
        if (scdlRw.length > 0) {
            for (Row curr : scdlRw) {
                String cnsmableFlg = "N";
                this.getViewObj().setNamedWhereClauseParam("slocIdBind",
                                                           resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                this.getViewObj().setNamedWhereClauseParam("cldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                this.getViewObj().setNamedWhereClauseParam("hoOrgIdBind", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                this.getViewObj().setNamedWhereClauseParam("orgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                this.getViewObj().setNamedWhereClauseParam("itmIdBind", curr.getAttribute("ItmId"));
                this.getViewObj().setNamedWhereClauseParam("itmNameBind", null);
                this.getViewObj().executeQuery();
                Row[] itms = this.getViewObj().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                if (itms.length > 0) {
                    if (itms[0].getAttribute("ConsumableFlg") != null) {
                        cnsmableFlg = itms[0].getAttribute("ConsumableFlg").toString();
                    }
                    _log.info(cnsmableFlg + "   cnsmableFlg  " + consmablechk);

                    if (itms[0].getAttribute("SrvcItmFlg") != null) {
                        _log.info(itms[0].getAttribute("SrvcItmFlg") + "    ");
                        _log.info(curr.getAttribute("ItmId") + "       ");

                        /** skip service item  and consumable item
                         *  comparison global consumable flag in case of consumable items
                         *  before this check is required all items available or not in case of service/Consumable
                         */

                        if ("N".equalsIgnoreCase(itms[0].getAttribute("SrvcItmFlg").toString())) {
                            if ("N".equalsIgnoreCase(cnsmableFlg) || ("Y".equalsIgnoreCase(cnsmableFlg) && "N".equalsIgnoreCase(consmablechk))) { //"Y".equalsIgnoreCase(consmablechk) &&
                                count = count + 1;
                            }
                        }
                    }
                }
            }
        }

        return count;
    }

    /** ---------------------------  Populate purchase order ------------- */
    public Integer populateGeItmfromPo() {
        ViewObjectImpl geVo = this.getMmMtlGe();
        ViewObjectImpl gesrc = this.getMmMtlGeSrc();
        ViewObjectImpl itmVo = this.getMmMtlGeItm();
        ViewObjectImpl prfVo = this.getViewMMPrf();
        Row currGe = geVo.getCurrentRow();
        Integer no_of_row = 0;
        //Row currItm=itmVo.getCurrentRow();
        //Row currGeSrc=gesrc.getCurrentRow();
        String CldId = currGe.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currGe.getAttribute("SlocId");
        String OrgId = currGe.getAttribute("OrgId").toString();
        Integer srcDocType = (Integer) currGe.getAttribute("TransSourceDocType");
        _log.info("CurrIdSp=" + currGe.getAttribute("CurrIdSp"));
        Integer currency = null;
        if (currGe.getAttribute("CurrIdSp") != null)
            currency = (Integer) currGe.getAttribute("CurrIdSp");
        Integer shdlNo = 1;
        String consmablechk = "N";
        RowQualifier rqPrf = new RowQualifier(prfVo);
        rqPrf.setWhereClause("CldId = '" + CldId + "' and SlocId =" + SlocId + " and OrgId ='" + OrgId + "' ");
        Row[] rrPrf = prfVo.getFilteredRows(rqPrf);
        _log.info(rqPrf.getExprStr() + "  lenth  " + rrPrf.length);
        if (rrPrf.length > 0) {
            if (rrPrf[0].getAttribute("AlwDirectConsm") != null) {
                consmablechk = rrPrf[0].getAttribute("AlwDirectConsm").toString();
            }
        }
        String crSrc = "N";

        if (currGe.getAttribute("TransSchdlNo") != null)
            shdlNo = (Integer) currGe.getAttribute("TransSchdlNo");
        else
            shdlNo = 1;
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        /*   if(this.isPoScheduled(currGe.getAttribute("TransSourceDocId").toString()).equals("Y")){         */
        _log.info("trans source oc_id " + currGe.getAttribute("TransSourceDocId") + "  dlvschldno " + shdlNo + SlocId +
                  " " + OrgId + " " + CldId);
        rq.setWhereClause("DocId='" + currGe.getAttribute("TransSourceDocId").toString() + "' and DlvSchdlNo=" +
                          shdlNo + " and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");

        /* }else{

                rq.setWhereClause("DocId='"+currGe.getAttribute("TransSourceDocId").toString()+"' and SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"'");

        }
        */
        Row[] scdlRw = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        _log.info("No of Rows--" + scdlRw.length);
        no_of_row = scdlRw.length;
        if (scdlRw.length > 0) {

            Row srcRow = gesrc.createRow();

            //srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_PO); srcDocType
            srcRow.setAttribute("DocTypeSrc", srcDocType);
            _log.info("TransSourceDocNo in AM: " + currGe.getAttribute("TransSourceDocNo").toString());
            //  Row[] r = this.getLovPoNo().getFilteredRows("DocId", currGe.getAttribute("TransSourceDocId").toString());
            Row[] r = this.getLovPoNoNew().getFilteredRows("DocId", currGe.getAttribute("TransSourceDocId").toString());

            srcRow.setAttribute("TxnIdSrcDisp", r[0].getAttribute("AuthPoNo").toString());
            srcRow.setAttribute("DocIdSrc", currGe.getAttribute("TransSourceDocId").toString());
            srcRow.setAttribute("DocDtSrc", currGe.getAttribute("TransSourceDocDt"));
            srcRow.setAttribute("DlvSchdlNo", shdlNo);
            gesrc.insertRow(srcRow);


            for (Row curr : scdlRw) {
                String cnsmableFlg = "N";
                this.getViewObj().setNamedWhereClauseParam("slocIdBind",
                                                           resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                this.getViewObj().setNamedWhereClauseParam("cldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                this.getViewObj().setNamedWhereClauseParam("hoOrgIdBind", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                this.getViewObj().setNamedWhereClauseParam("orgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                this.getViewObj().setNamedWhereClauseParam("itmIdBind", curr.getAttribute("ItmId"));
                this.getViewObj().setNamedWhereClauseParam("itmNameBind", null);
                this.getViewObj().executeQuery();
                Row[] itms = this.getViewObj().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                if (itms.length > 0) {
                    if (itms[0].getAttribute("ConsumableFlg") != null) {
                        cnsmableFlg = itms[0].getAttribute("ConsumableFlg").toString();
                    }
                    _log.info(cnsmableFlg + "   cnsmableFlg  " + consmablechk);

                    if (itms[0].getAttribute("SrvcItmFlg") != null) {
                        _log.info(itms[0].getAttribute("SrvcItmFlg") + "    ");
                        _log.info(curr.getAttribute("ItmId") + "       ");

                        /** skip service item  and consumable item
                         *  comparison global consumable flag in case of consumable items
                         *  before this check is required all items available or not in case of service/Consumable
                         * */

                        if ("N".equalsIgnoreCase(itms[0].getAttribute("SrvcItmFlg").toString())) {
                            if ("N".equalsIgnoreCase(cnsmableFlg) || ("Y".equalsIgnoreCase(cnsmableFlg) && "N".equalsIgnoreCase(consmablechk))) { //"Y".equalsIgnoreCase(consmablechk) &&

                                Row itmRw = itmVo.createRow();
                                itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
                                itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
                                // Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                                itmRw.setAttribute("ItmUomBs", itms[0].getAttribute("UomBasic").toString());
                                //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
                                Number fct =
                                    getUomConvFctr(currGe.getAttribute("CldId").toString(),
                                                   Integer.parseInt(currGe.getAttribute("SlocId").toString()),
                                                   currGe.getAttribute("OrgId").toString(),
                                                   curr.getAttribute("ItmId").toString(),
                                                   curr.getAttribute("ItmUom").toString(),
                                                   itms[0].getAttribute("UomBasic").toString());

                                itmRw.setAttribute("UomConvFctr", (Number)fct.round(getGlblRoundQtyDigit()));
                                Number bal = new Number(0);
                                Number tmp = new Number(0);
                                if (curr.getAttribute("BalQty") != null)
                                    bal = (Number)((Number) curr.getAttribute("BalQty")).round(getGlblRoundQtyDigit());
                                if (curr.getAttribute("TmpRcptQty") != null)
                                    tmp = (Number)((Number) curr.getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());
                                itmRw.setAttribute("DlvQty", bal.subtract(tmp));
                                itmRw.setAttribute("DlvQtyBs", (Number)(bal.subtract(tmp).multiply(fct)).round(getGlblRoundQtyDigit()));
                                itmRw.setAttribute("PendQty", bal.subtract(tmp)); //Schdl(BalQty)-Schdl(TmpRcptQty)
                                itmRw.setAttribute("PendQtyBs", (Number)(bal.subtract(tmp).multiply(fct)).round(getGlblRoundQtyDigit()));
                                itmRw.setAttribute("RcptQty", bal.subtract(tmp));
                                itmRw.setAttribute("RcptQtyBs", (Number)(bal.subtract(tmp).multiply(fct)).round(getGlblRoundQtyDigit()));
                                itmRw.setAttribute("TotRcptQty", bal.subtract(tmp));
                                itmRw.setAttribute("TotRcptQtyBs", (Number)(bal.subtract(tmp).multiply(fct)).round(getGlblRoundQtyDigit()));
                                itmRw.setAttribute("ReturnQty", new Number(0));
                                itmRw.setAttribute("ReturnQtyBs", new Number(0));
                                itmRw.setAttribute("DocIdSrc", currGe.getAttribute("TransSourceDocId").toString());
                                itmRw.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                                itmVo.insertRow(itmRw);
                                updateTxnQty(new Number(0), (Number)(bal.subtract(tmp)).round(getGlblRoundQtyDigit()));

                            }
                        }
                    }
                }

            }
            currGe.setAttribute("TransSourceDocDt", null);
            currGe.setAttribute("TransSourceDocNo", null);
            currGe.setAttribute("TransSchdlNo", null);
            currGe.setAttribute("CurrIdSp", currency);

        }
        gesrc.executeQuery();
        itmVo.executeQuery();

        return no_of_row;
    }
    
    
    public Integer populateGeSrcItmToJITR(){
        ViewObjectImpl geVo = this.getMmMtlGe();
        Row currGe = geVo.getCurrentRow();
        String CldId = currGe.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currGe.getAttribute("SlocId");
        String OrgId = currGe.getAttribute("OrgId").toString();
        
        Object insJitRcpt = callStoredFunction(Types.INTEGER, "MM.MM_INS_GE_FROM_JIT_RCPT(?,?,?,?,?,?,?,?)", new Object[] {
                                              CldId, SlocId, OrgId,
                                              currGe.getAttribute("WhId"), currGe.getAttribute("DocId"), currGe.getAttribute("TransSourceDocId")
                                              ,currGe.getAttribute("TransSourceDocNo"),
                                              currGe.getAttribute("TransSourceDocDt")
        });
        
        _log.info(" returnn  "+insJitRcpt);
        
        if(insJitRcpt!=null){
            if(((Integer)insJitRcpt).compareTo(new Integer(1))==0){
                this.getMmMtlGeSrc().executeQuery();
                this.getMmMtlGeItm().executeQuery();
                this.getMmMtlGeItm1().executeQuery();
                currGe.setAttribute("TransSourceDocDt", null);
                currGe.setAttribute("TransSourceDocNo", null);
                currGe.setAttribute("TransSchdlNo", null);
                currGe.setAttribute("TransSourceDocId", null);
                return 1;
            }else{
                return 0;
            }
        }else{
         return 0;
        }
    }



    /**
     *  Check if items received are configured for this Warehouse or not.
     *  @return "Y" - Valid
     *          "N" - Invalid
     * */
    public String isPoWarehouseCompatible() {

        ViewObjectImpl geVo = this.getMmMtlGe();
        Row currGe = geVo.getCurrentRow();

        //Row currItm=itmVo.getCurrentRow();
        //Row currGeSrc=gesrc.getCurrentRow();
        String CldId = currGe.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currGe.getAttribute("SlocId");
        String OrgId = currGe.getAttribute("OrgId").toString();
        String whId = currGe.getAttribute("WhId").toString();
        Integer shdlNo = 1;
        if (currGe.getAttribute("TransSchdlNo") != null) {
            shdlNo = Integer.parseInt(currGe.getAttribute("TransSchdlNo").toString());

        } else {
            shdlNo = 1;
        }
        //Integer.parseInt(currGe.getAttribute("TransSchdlNo").toString());

        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("DocId='" + currGe.getAttribute("TransSourceDocId").toString() + "' and DlvSchdlNo=" +
                          shdlNo + " and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");
        Row[] scdlRw = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);

        if (scdlRw.length > 0) {
            String dlvWh = scdlRw[0].getAttribute("WhId").toString();
            if (dlvWh.equalsIgnoreCase(whId)) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return "N";
        }
    }


    public String chkItmTrfQty() {
        ViewObjectImpl geVo = this.getMmMtlGe();
        Row currGe = geVo.getCurrentRow();
        String CldId = currGe.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currGe.getAttribute("SlocId");
        //String DocId=currGe.getAttribute("DocId").toString();
        RowQualifier rq = new RowQualifier(this.getViewMMTrfOrdItm());
        rq.setWhereClause("DocId='" + currGe.getAttribute("TransSourceDocId").toString() + "' and SlocId=" + SlocId +
                          " and CldId='" + CldId + "' and TrfQty>0");
        Row[] trfItmRw = this.getViewMMTrfOrdItm().getFilteredRows(rq);
        if (trfItmRw.length > 0)
            return "Y";
        else
            return "N";
    }

    public void LinkItemtoOrganisation(String CldId, Integer SlocId, String OrgId, String HoOrgId, Integer UsrId) {
        Row r = this.getMmMtlGe().getCurrentRow();
        if (r.getAttribute("TransSourceDocId") != null) {
            _log.info("Param=>" + CldId + " " + SlocId + " " + HoOrgId + " " + OrgId + " " +
                      r.getAttribute("TransSourceDocId") + " ");
            Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_ITM_ORG_TRF(?,?,?,?,?,?)", new Object[] {
                                                        CldId, SlocId, HoOrgId, OrgId,
                                                        r.getAttribute("TransSourceDocId"), UsrId
            }));
            this.getLovItmId().executeQuery();
        }
    }
    
    
    
    public Integer chkCurrencyConversion() {


        ViewObjectImpl rcptVo = this.getMmMtlGe();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String DocId = rcptVo.getCurrentRow().getAttribute("DocId").toString();
        String CldId = rcptVo.getCurrentRow().getAttribute("CldId").toString();
        Integer SlocId = (Integer) rcptVo.getCurrentRow().getAttribute("SlocId");
        String OrgId = rcptVo.getCurrentRow().getAttribute("OrgId").toString();
        Integer geSrc = (Integer) rcptVo.getCurrentRow().getAttribute("RcptSrcType");
        String orgIdSrc = OrgId;
        if (geSrc.compareTo(new Integer(262)) == 0) {
          return 1;
        }
        
        if (geSrc.compareTo(new Integer(263)) == 0) {
            if (rcptVo.getCurrentRow().getAttribute("OrgIdSrc") != null) {
                orgIdSrc = rcptVo.getCurrentRow().getAttribute("OrgIdSrc").toString();
            }
            Integer currIdBaseSrc = this.orgBaseCurrency(orgIdSrc);
            try {
                BigDecimal retC = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_CURR_CONV_FCTR(?,?,?,?,?)", new Object[] {
                                                                   CldId, SlocId, hoOrgId, OrgId, currIdBaseSrc
                }));

                _log.info(currIdBaseSrc + "  arg0  " + retC);
                Number retVal = new Number(1);
                if (retC != null) {
                    try {
                        retVal = new Number(retC);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                System.out.println(" return valu "+retVal);
                if (retVal.compareTo(new Number(0)) == 1) {
                    return 1;
                } else {
                    return 0;
                }

            } catch (Exception e) {
                e.printStackTrace();
                return 0;
            }
        }

        return 0;

    }

    
    
    


    public void populateGeItmfromTrfOrd() {
        ViewObjectImpl geVo = this.getMmMtlGe();
        ViewObjectImpl gesrc = this.getMmMtlGeSrc();
        ViewObjectImpl itmVo = this.getMmMtlGeItm();

        Row currGe = geVo.getCurrentRow();
        String CldId = currGe.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currGe.getAttribute("SlocId");
        String OrgId = currGe.getAttribute("OrgId").toString();
        String DocId = currGe.getAttribute("DocId").toString();
        Integer geSrc = (Integer) currGe.getAttribute("RcptSrcType");
        String orgIdSrc = OrgId;
        if (geSrc.compareTo(new Integer(262)) == 0) {
            Integer currIdBase = this.orgBaseCurrency(OrgId);
            currGe.setAttribute("CurrIdSp", currIdBase);
        }
        if (geSrc.compareTo(new Integer(263)) == 0) {
            if (currGe.getAttribute("OrgIdSrc") != null) {
                orgIdSrc = currGe.getAttribute("OrgIdSrc").toString();
            }
            Integer currIdBase = this.orgBaseCurrency(orgIdSrc);
            currGe.setAttribute("CurrIdSp", currIdBase);
        }
        Row srcRow = gesrc.createRow();
        srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_TRFO);

        Row[] r =
            this.getLovTransferOrder().getFilteredRows("DocId", currGe.getAttribute("TransSourceDocId").toString());
        srcRow.setAttribute("TxnIdSrcDisp", r[0].getAttribute("TrfNo").toString());

        srcRow.setAttribute("DocIdSrc", currGe.getAttribute("TransSourceDocId").toString());
        srcRow.setAttribute("DocIdIssu", currGe.getAttribute("TransSourceDocIssueNo")); // change partial rcpt
        srcRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
        //srcRow.setAttribute("DocDtSrc", currGe.getAttribute("TransSourceDocDt"));
        srcRow.setAttribute("DlvSchdlNo", new Integer(0));
        gesrc.insertRow(srcRow);
        gesrc.executeQuery();


        //        FUNCTION MM_INS_GE_ITM_FRM_ISSU
        //                                                        (
        //                                                        P_CLD_ID VARCHAR2,
        //                                                        P_SLOC_ID NUMBER,
        //                                                        P_ORG_ID VARCHAR2,
        //                                                        P_WH_ID VARCHAR2,
        //                                                        P_DOC_ID VARCHAR2,
        //                                                        P_DOC_ID_SRC VARCHAR2,
        //                                                        P_DOC_DT_SRC TIMESTAMP,
        //                                                        P_DOC_ID_ISSU VARCHAR2
        //                                                        )


        try {
            _log.info(currGe.getAttribute("WhId") + "  WH Id " + currGe.getAttribute("TransSourceDocId") +
                      " Doc_id Trf " + currGe.getAttribute("TransSourceDocIssueNo") + " doc id issuu " + DocId +
                      " doc id " + currGe.getAttribute("RcptSrcType") + " trf  Src " + currGe.getAttribute("OrgIdSrc") +
                      " OrgId Src");

            Object insItmFrmIss = (callStoredFunction(Types.INTEGER, "MM.MM_INS_GE_ITM_FRM_ISSU (?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      CldId, SlocId, OrgId, currGe.getAttribute("WhId"), DocId,
                                                      currGe.getAttribute("TransSourceDocId"),
                                                      new Timestamp(System.currentTimeMillis()),
                                                      currGe.getAttribute("TransSourceDocIssueNo"),
                                                      currGe.getAttribute("RcptSrcType"),
                                                      currGe.getAttribute("OrgIdSrc")
            }));

            _log.info("  insItmFrmIss  " + insItmFrmIss);

            if (insItmFrmIss != null) {
                if ((((Integer) insItmFrmIss)).compareTo(new Integer(1)) == 0) {
                    getMmMtlGeItm().executeQuery();
                    getMmMtlGeItm1().executeQuery();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();

        }


        //        RowQualifier rq = new RowQualifier(this.getViewMMTrfOrdItm());
        //        rq.setWhereClause("DocId='" + currGe.getAttribute("TransSourceDocId").toString() + "' and SlocId=" + SlocId +
        //                          " and CldId='" + CldId + "'");
        //        Row[] trfItmRw = this.getViewMMTrfOrdItm().getFilteredRows(rq);
        //
        //        _log.info("No of Rows--" + trfItmRw.length);
        //
        //        if (trfItmRw.length > 0) {
        //            for (Row curr : trfItmRw) {
        //                Row itmRw = itmVo.createRow();
        //                itmRw.setAttribute("DocId", DocId);
        //                itmRw.setAttribute("DocIdSrc", currGe.getAttribute("TransSourceDocId").toString());
        //                _log.info("DocIdSrc For Item=" + currGe.getAttribute("TransSourceDocId"));
        //                itmRw.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
        //                itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
        //                _log.info("ItmUom=" + curr.getAttribute("ItmUom"));
        //                itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
        //                Row[] itms = this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
        //                itmRw.setAttribute("ItmUomBs", itms[0].getAttribute("UomBasic").toString());
        //                Number fct =
        //                    getUomConvFctr(currGe.getAttribute("CldId").toString(),
        //                                   Integer.parseInt(currGe.getAttribute("SlocId").toString()),
        //                                   currGe.getAttribute("OrgId").toString(), curr.getAttribute("ItmId").toString(),
        //                                   curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString());
        //                itmRw.setAttribute("UomConvFctr", fct);
        //                itmRw.setAttribute("PendQty", (Number) curr.getAttribute("TrfQty"));
        //                itmRw.setAttribute("PendQtyBs", (Number) curr.getAttribute("TrfQtyBs"));
        //                itmRw.setAttribute("RcptQty", (Number) curr.getAttribute("TrfQty"));
        //                itmRw.setAttribute("RcptQtyBs", (Number) curr.getAttribute("TrfQtyBs"));
        //                itmRw.setAttribute("TotRcptQty", (Number) curr.getAttribute("TrfQty"));
        //                itmRw.setAttribute("TotRcptQtyBs", (Number) curr.getAttribute("TrfQtyBs"));
        //                itmRw.setAttribute("ReturnQty", new Number(0));
        //                itmRw.setAttribute("ReturnQtyBs", new Number(0));
        //                itmRw.setAttribute("DlvQty", curr.getAttribute("TrfQty"));
        //                itmRw.setAttribute("DlvQtyBs", curr.getAttribute("TrfQtyBs"));
        //
        //                Number totTrfQty = new Number(0);
        //                if (curr.getAttribute("TotTrfQty") != null)
        //                    totTrfQty = (Number) curr.getAttribute("TotTrfQty");
        //                Number totTrfQtyBs = new Number(0);
        //                if (curr.getAttribute("TotTrfQtyBs") != null)
        //                    totTrfQtyBs = (Number) curr.getAttribute("TotTrfQtyBs");
        //
        //                Number TrfQty = new Number(0);
        //                if (curr.getAttribute("TrfQty") != null)
        //                    TrfQty = (Number) curr.getAttribute("TrfQty");
        //                Number TrfQtyBs = new Number(0);
        //                if (curr.getAttribute("TrfQtyBs") != null)
        //                    TrfQtyBs = (Number) curr.getAttribute("TrfQtyBs");
        //
        //                curr.setAttribute("TrfQty", new Number(0));
        //                curr.setAttribute("TrfQtyBs", new Number(0));
        //                curr.setAttribute("TotTrfQty", totTrfQty.add(TrfQty));
        //                curr.setAttribute("TotTrfQtyBs", totTrfQty.add(TrfQtyBs));
        //                itmVo.insertRow(itmRw);
        //            }
        //        }
        currGe.setAttribute("TransSourceDocId", null);
        currGe.setAttribute("TransSourceDocDt", null);
        currGe.setAttribute("TransSourceDocIssueNo", null);

    }

    /**
     *  Method used to check if the PO selected is currency compatible to the previously assigned PO
     *  for the current GE.
     *  @return - Y : Valid
     *            N : Invalid (cannot be selected)
     * */
    public String checkCurrCompatibility(String OrgId, String CldId, Integer SlocId, String PoDocId) {
        Integer count = this.getMmMtlGeSrc().getRowCount();
        Row currRc = this.getMmMtlGe().getCurrentRow();

        String rcptSrcDoc = currRc.getAttribute("TransSourceDocId").toString();
        _log.info("Count in curr compat-" + count);
        if (count.compareTo(new Integer(1)) >= 0) {
            Row rw = this.getMmMtlGeSrc().first();

            String docId = rw.getAttribute("DocIdSrc").toString(); // docId in table
            //Row[] filRw = this.getLovPoNo().getFilteredRows("DocId", docId); //old selected

            //Row[] poFilRw = this.getLovPoNo().getFilteredRows("DocId", rcptSrcDoc); //new selected

            Row[] filRw = this.getLovPoNoNew().getFilteredRows("DocId", docId); //old selected

            Row[] poFilRw = this.getLovPoNoNew().getFilteredRows("DocId", rcptSrcDoc); //new selected
            _log.info(docId + "Rows--" + filRw.length + "--" + poFilRw.length + "--" + PoDocId);
            if (filRw.length > 0) {
                Integer curr = Integer.parseInt(filRw[0].getAttribute("CurrIdSp").toString());

                Integer currPo = Integer.parseInt(poFilRw[0].getAttribute("CurrIdSp").toString());
                _log.info("Currency--" + curr + "--Currency Bs-" + currPo);
                if (curr.equals(currPo)) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "Y";
            }
        } else {
            return "Y";
        }
        /*     RowQualifier rq=new RowQualifier(this.getLovPoNo());


        rq.setWhereClause("SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"' and ");
        Row[] filRw=this.getLovPoNo().getFilteredRows(rq); */

    }


    public Number getUomConvFctr(String CldId, Integer SlocId, String OrgId, String ItmId, String UomSrc,
                                 String UomDst) {

        Number zero = new Number(0);
        Number fctr = zero;
        try {
            BigDecimal uomConv =
                (BigDecimal) (callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR (?,?,?,?,?,?)", new Object[] {
                                                 SlocId, CldId, OrgId, ItmId, UomSrc, UomDst
            })); //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)


            try {
                fctr = new Number(uomConv);
            } catch (SQLException e) {
            }
        } catch (Exception e) {
            _log.info("Conversion factor not defined" + UomSrc + "--" + UomDst);
        }
        return (Number) fctr.round(getGlblRoundQtyDigit());
    }

    /**
     * Container's getter for MMDrftPoItm.
     * @return MMDrftPoItm
     */
    public ViewObjectImpl getMMDrftPoItm() {
        return (ViewObjectImpl) findViewObject("MMDrftPoItm");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl) findViewObject("LovItmId");
    }

    /**
     * Container's getter for LovPoNo.
     * @return LovPoNo
     */
    public ViewObjectImpl getLovPoNo() {
        return (ViewObjectImpl) findViewObject("LovPoNo");
    }

    /**
     * Container's getter for GeSearch.
     * @return GeSearch
     */
    public GeSearchVOImpl getGeSearch() {
        return (GeSearchVOImpl) findViewObject("GeSearch");
    }

    /**
     * Container's getter for LovSupplier.
     * @return LovSupplier
     */
    public ViewObjectImpl getLovSupplier() {
        return (ViewObjectImpl) findViewObject("LovSupplier");
    }

    /**
     * Container's getter for LovRcptSrcTyp.
     * @return LovRcptSrcTyp
     */
    public ViewObjectImpl getLovRcptSrcTyp() {
        return (ViewObjectImpl) findViewObject("LovRcptSrcTyp");
    }

    /**
     * Container's getter for LovTransporter.
     * @return LovTransporter
     */
    public ViewObjectImpl getLovTransporter() {
        return (ViewObjectImpl) findViewObject("LovTransporter");
    }

    public void getGeRecordForEdit(String CldId, Integer SlocId, String OrgId, String TxnId) {
        String TxnIdSrc = this.getGeSearch().getCurrentRow().getAttribute("DocId").toString();
        String whId = this.getGeSearch().getCurrentRow().getAttribute("WhId").toString();
        System.out.println(TxnId + "--TXN----" + whId + "-wh-" + CldId + "-cld-" + SlocId + "-sloc-" + OrgId + "-org-");
        ViewObjectImpl vo = this.getMmMtlGe();
        ViewCriteria vc = vo.getViewCriteria("MmMtlGeVOCriteriaForView");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("cldIdVar", CldId);
        vo.setNamedWhereClauseParam("SlocIdVar", SlocId);
        vo.setNamedWhereClauseParam("OrgIdVar", OrgId);
        vo.setNamedWhereClauseParam("txnIdVar", TxnIdSrc);
        vo.setNamedWhereClauseParam("whIdVar", whId);
        vo.executeQuery();

    }

    public String checkForDuplicateDocNo(String CldId, Integer SlocId, String OrgId, String SrcDocNo) {
        Row geRw = this.getMmMtlGe().getCurrentRow();
        RowQualifier rq = new RowQualifier(this.getMmMtlGeSrc());
        Integer docSrcType = (Integer) geRw.getAttribute("TransSourceDocType");
        Integer scdlno = (Integer) geRw.getAttribute("TransSchdlNo");
        if(scdlno == null && docSrcType == 938){
            scdlno = 1;
        }else if (scdlno == null && docSrcType == 266) {
            scdlno = 1;
        } else if (scdlno == null && docSrcType != 266) {
            if (docSrcType == 459) {
                scdlno = 1;
            } else {
                scdlno = 0;
            }
        }
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and DocId='" +
                          geRw.getAttribute("DocId").toString() + "' and DocIdSrc='" +
                          geRw.getAttribute("TransSourceDocId").toString() + "' and  DlvSchdlNo=" + scdlno);
        /*         rq.setWhereClause("CldId='" + CldId + "' and SlocId="+SlocId+" and OrgId='" + OrgId  +
                          "' and DocIdSrc='"+geRw.getAttribute("TransSourceDocId").toString()+"' and  DlvSchdlNo="+scdlno); */
        Row[] geSrcRw = this.getMmMtlGeSrc().getFilteredRows(rq);
        _log.info(rq.getExprStr()+"  no. of Same Rows=" + geSrcRw.length);
        if (geSrcRw.length > 0) {
            return "Y";
        } else {
            return "N";
        }
    }


    public String checkForIPODocumentValide(String CldId, Integer SlocId, String OrgId, String SrcDocNo) {

        _log.info("checkForIPODocumentValide  ::::: ");
        Row geRw = this.getMmMtlGe().getCurrentRow();
        // RowQualifier rq = new RowQualifier(this.getMmMtlGeSrc());
        Integer docSrcType = (Integer) geRw.getAttribute("TransSourceDocType");
        Integer scdlno = (Integer) geRw.getAttribute("TransSchdlNo");
        if (scdlno == null && docSrcType == 819) {
            scdlno = 1;
        }


        String isIPOValide = (String) (callStoredFunction(Types.VARCHAR, "MM.MM_IS_IPO_STG_VALID (?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, OrgId, SrcDocNo, scdlno, 18511
        }));

        //
        //        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and DocId='" +
        //                          geRw.getAttribute("DocId").toString() + "' and DocIdSrc='" +
        //                          geRw.getAttribute("TransSourceDocId").toString() + "' and  DlvSchdlNo=" + scdlno);
        //        /*         rq.setWhereClause("CldId='" + CldId + "' and SlocId="+SlocId+" and OrgId='" + OrgId  +
        //                          "' and DocIdSrc='"+geRw.getAttribute("TransSourceDocId").toString()+"' and  DlvSchdlNo="+scdlno); */
        //        Row[] geSrcRw = this.getMmMtlGeSrc().getFilteredRows(rq);
        //        _log.info("no. of Same Rows=" + geSrcRw.length);
        //        if (geSrcRw.length > 0) {
        //            return "Y";
        //        } else {
        //            return "N";
        //        }
        _log.info("isIPOValide  " + isIPOValide);
        return isIPOValide;
    }


    /**
     * Container's getter for LovWarehouse.
     * @return LovWarehouse
     */
    public ViewObjectImpl getLovWarehouse() {
        return (ViewObjectImpl) findViewObject("LovWarehouse");
    }

    /**
     * Container's getter for ViewDummyForSearch.
     * @return ViewDummyForSearch
     */
    public ViewObjectImpl getViewDummyForSearch() {
        return (ViewObjectImpl) findViewObject("ViewDummyForSearch");
    }

    public void setNullforAll() {
        this.getMmMtlGe().getCurrentRow().setAttribute("TransItmName", null);
        this.getMmMtlGe().getCurrentRow().setAttribute("TransUomName", null);
        this.getMmMtlGe().getCurrentRow().setAttribute("TransItmQty", null);
    }

    public void generateTempDocId(Integer UsrId, String CldId, Integer SlocId, String OrgId, String WhId,
                                  Integer DocTypeSrc) {

        // String txnId =(String)(callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?)", new Object[] {UsrId,OrgId,SlocId,new Integer(18511),CldId}));    //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        //   System.out.println("--TxnId new created--"+txnId);
        String gedocid = this.getMmMtlGe().getCurrentRow().getAttribute("DocId").toString();
        Integer fyId = Integer.parseInt(this.getMmMtlGe().getCurrentRow().getAttribute("FyId").toString());
        String tableName = null;
        if (DocTypeSrc.equals(SOURCE_DOC_TYPE_WPO))
            tableName = "MM$MTL$RCPT$SRC";
        else if (DocTypeSrc.equals(SOURCE_DOC_TYPE_WSO))
            tableName = "MM$MTL$RCPT$SRC_SO";
        else if (DocTypeSrc.equals(SOURCE_DOC_TYPE_PROCS_ORD))
            tableName = "MM$MTL$GE$SRC_JW";
        String tnpNoDisp = (String) (callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {
                                                        SlocId, CldId, OrgId, tableName, WhId, fyId
        })); //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        _log.info("Temp Doc Id--" + tnpNoDisp);
        Row cR = this.getMmMtlGeSrc().createRow();
        cR.setAttribute("DocIdSrc", tnpNoDisp);
        cR.setAttribute("WhId", WhId);
        cR.setAttribute("CldId", CldId);
        cR.setAttribute("OrgId", OrgId);
        cR.setAttribute("DocId", gedocid);
        cR.setAttribute("DocTypeSrc", DocTypeSrc);
        cR.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
        cR.setAttribute("DlvSchdlNo", 0);
        cR.setAttribute("TxnIdSrcDisp", tnpNoDisp);
        this.getMmMtlGeSrc().insertRow(cR);

        // String tnpNoDisp =(String)(callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {SlocId,CldId,OrgId,"MM$MTL$RCPT$SRC",WhId,fyId}));    //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)

        this.getMmMtlGeSrc().executeQuery();

    }

    public void addItemToGe(String ItmName, String ItmUom, Number ItmQty) {
        Row cR = this.getMmMtlGeItm().createRow();
        Row rwSrc = this.getMmMtlGeSrc().getCurrentRow();
        Row geR = this.getMmMtlGe().getCurrentRow();
        Row[] rw = this.getLovItmId().getFilteredRows("ItmDesc", ItmName);
        if (rw.length > 0) {
            cR.setAttribute("ItmId", rw[0].getAttribute("ItmId").toString());
            cR.setAttribute("ItmUom", ItmUom);
            cR.setAttribute("DlvQty", new Number(0));
            cR.setAttribute("PendQty", new Number(0));
            cR.setAttribute("RcptQty", ItmQty.round(getGlblRoundQtyDigit()));
            cR.setAttribute("TotRcptQty", ItmQty.round(getGlblRoundQtyDigit()));
            cR.setAttribute("ReturnQty", new Number(0));
            cR.setAttribute("DocDtSrc", rwSrc.getAttribute("DocDtSrc"));
            cR.setAttribute("ItmUomBs", rw[0].getAttribute("UomBasic").toString());
            Number fct =
                getUomConvFctr(rwSrc.getAttribute("CldId").toString(),
                               Integer.parseInt(rwSrc.getAttribute("SlocId").toString()),
                               rwSrc.getAttribute("OrgId").toString(), rw[0].getAttribute("ItmId").toString(), ItmUom,
                               rw[0].getAttribute("UomBasic").toString());
            Number rcptQtyBs =
                (Number) (((Number) (ItmQty.round(getGlblRoundQtyDigit()))).multiply(fct)).round(getGlblRoundQtyDigit());
            cR.setAttribute("UomConvFctr", (Number)fct.round(getGlblRoundQtyDigit()));
            // cR.setAttribute("RcptQtyBs", ItmQty.multiply(fct));
            cR.setAttribute("RcptQtyBs", rcptQtyBs);
            cR.setAttribute("DlvQtyBs", new Number(0));
            cR.setAttribute("PendQtyBs", new Number(0));
            //cR.setAttribute("TotRcptQtyBs", ItmQty.multiply(fct));
            cR.setAttribute("TotRcptQtyBs", rcptQtyBs);
            cR.setAttribute("ReturnQtyBs", new Number(0));
        }
        this.getMmMtlGeItm().insertRow(cR);
        this.getMmMtlGeItm().executeQuery();

    }

    /**
     * Container's getter for LovTransferOrder.
     * @return LovTransferOrder
     */
    public ViewObjectImpl getLovTransferOrder() {
        return (ViewObjectImpl) findViewObject("LovTransferOrder");
    }


    /**
     * Container's getter for ViewMMTrfOrdItm.
     * @return ViewMMTrfOrdItm
     */
    public ViewObjectImpl getViewMMTrfOrdItm() {
        return (ViewObjectImpl) findViewObject("ViewMMTrfOrdItm");
    }

    public void deleteDocument() {
        Row srcRw = this.getMmMtlGeSrc().getCurrentRow();
        String docNo = srcRw.getAttribute("DocIdSrc").toString();
        int count = this.getMmMtlGeItm().getRowCount();
        _log.info("Delete docNo==" + docNo + "==No of child rows--" + count);
        //remove all children
        RowSetIterator rsi = this.getMmMtlGeItm().createRowSetIterator(null);

        while (rsi.hasNext()) {
            Row currItm = rsi.next();
            //before remove->
            //1.if document is Trf then Add RcptQty of GE to Trf Qty of TrfOrd
            //2.if document is PO then substract RcptQty of GE from TmpRcptQty of POdlvScdl
            if (((Integer) srcRw.getAttribute("DocTypeSrc")).equals(SOURCE_DOC_TYPE_PO)) {
                Row curr = currItm;
                //first substract old qty from tmp qty AND Add new qty to tmp qty
                RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
                rq.setWhereClause("CldId='" + curr.getAttribute("CldId") + "' and SlocId=" +
                                  curr.getAttribute("SlocId") + " and OrgId='" + curr.getAttribute("OrgId") +
                                  "' and DocId='" + curr.getAttribute("DocIdSrc") + "' and ItmId='" +
                                  curr.getAttribute("ItmId") + "' and WhId='" + curr.getAttribute("WhId") +
                                  "' and ItmUom='" + curr.getAttribute("ItmUom") + "' and DlvSchdlNo=" +
                                  curr.getAttribute("DlvSchdlNo"));
                _log.info("Query=" + rq.getExprStr());
                Row dsRow[] = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
                _log.info("No. of filtered Rows=" + dsRow.length);
                if (dsRow.length > 0) {
                    Number tmpQty = new Number(0);
                    if (dsRow[0].getAttribute("TmpRcptQty") != null)
                        tmpQty = (Number)((Number) dsRow[0].getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());
                    Number rcptQty = new Number(0);
                    if (curr.getAttribute("RcptQty") != null)
                        rcptQty = (Number)((Number) curr.getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
                    // dsRow[0].setAttribute("TmpRcptQty", tmpQty.subtract(oldQty));
                    dsRow[0].setAttribute("TmpRcptQty", (Number)(tmpQty.subtract(rcptQty)).round(getGlblRoundQtyDigit()));
                }
            } else if (((Integer) srcRw.getAttribute("DocTypeSrc")).equals(SOURCE_DOC_TYPE_TRFO)) {
                Row curr = currItm;
                RowQualifier rq = new RowQualifier(this.getViewMMTrfOrdItm());
                rq.setWhereClause("DocId='" + curr.getAttribute("DocIdSrc") + "' and SlocId=" +
                                  curr.getAttribute("SlocId") + " and CldId='" + curr.getAttribute("CldId") +
                                  "' and ItmId='" + curr.getAttribute("ItmId") + "' and ItmUom='" +
                                  curr.getAttribute("ItmUom") + "'");
                Row[] trfItmRw = this.getViewMMTrfOrdItm().getFilteredRows(rq);
                Number totTrfQty = new Number(0);
                if (trfItmRw[0].getAttribute("TotTrfQty") != null)
                    totTrfQty = (Number) trfItmRw[0].getAttribute("TotTrfQty");
                Number totTrfQtyBs = new Number(0);
                if (trfItmRw[0].getAttribute("TotTrfQtyBs") != null)
                    totTrfQtyBs = (Number) trfItmRw[0].getAttribute("TotTrfQtyBs");
                Number TrfQty = new Number(0);
                if (trfItmRw[0].getAttribute("TrfQty") != null)
                    TrfQty = (Number) trfItmRw[0].getAttribute("TrfQty");
                Number TrfQtyBs = new Number(0);
                if (trfItmRw[0].getAttribute("TrfQtyBs") != null)
                    TrfQtyBs = (Number) trfItmRw[0].getAttribute("TrfQtyBs");
                Number rcptQty = new Number(0);
                if (curr.getAttribute("RcptQty") != null)
                    rcptQty = (Number) curr.getAttribute("RcptQty");
                Number rcptQtyBs = new Number(0);
                if (curr.getAttribute("RcptQtyBs") != null)
                    rcptQtyBs = (Number) curr.getAttribute("RcptQtyBs");
                trfItmRw[0].setAttribute("TrfQty", rcptQty.add(TrfQty));
                trfItmRw[0].setAttribute("TrfQtyBs", rcptQtyBs.add(TrfQtyBs));
                trfItmRw[0].setAttribute("TotTrfQty", totTrfQty.subtract(rcptQty));
                trfItmRw[0].setAttribute("TotTrfQtyBs", totTrfQtyBs.subtract(rcptQtyBs));
            }
            currItm.remove();
        }
        rsi.closeRowSetIterator();
        //remove parent
        srcRw.remove();

        this.getMmMtlGeItm().executeQuery();
        this.getMmMtlGeSrc().executeQuery();
        _log.info("Delete docNo==" + docNo + "==No of child rows--" + count);
    }

    public HashSet checkForRcvdQtyPresent(String CldId, Integer slocId, String OrgId, String whId) {
        Row curGe = this.getMmMtlGe().getCurrentRow();
        Integer docType = (Integer) curGe.getAttribute("TransSourceDocType");
        if (whId == null) {
            whId = "0";
        }

        String docId = curGe.getAttribute("DocId").toString();
        RowQualifier rq = new RowQualifier(this.getMmMtlGeItm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId + "' and WhId='" +
                          whId + "' and DocId='" + docId + "'");
        Row[] filRw = this.getMmMtlGeItm1().getFilteredRows(rq);
        Number zero = new Number(0);
        HashSet<String> h = new HashSet<String>();
        for (Row rw : filRw) {
            Number rcptQty = (Number) rw.getAttribute("RcptQty");
            Number retQty = (Number) rw.getAttribute("ReturnQty");
            if (rcptQty.compareTo(zero) == 0 && retQty.compareTo(zero) == 0) {

                if (docType.compareTo(new Integer(266)) == 0 || docType.compareTo(new Integer(819)) == 0 ||
                    docType.compareTo(new Integer(459)) == 0) {
                    // Row[] r = this.getLovPoNo().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    Row[] r = this.getLovPoNoNew().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    if (r.length > 0) {
                        h.add(r[0].getAttribute("AuthPoNo").toString());
                    }
                } else if (docType.compareTo(new Integer(270)) == 0) {
                    Row[] r =
                        this.getLovTransferOrder().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    if (r.length > 0) {
                        h.add(r[0].getAttribute("TrfNo").toString());
                    }
                } else if (docType.compareTo(new Integer(370)) == 0) {
                    h.add(rw.getAttribute("DocIdSrc").toString());
                }


                //h.add(rw.getAttribute("DocIdSrc").toString());
            }
        }
        _log.info("HashSet--" + h);
        return h;
    }


    public void deleteItemsNonRecvd(String CldId, Integer slocId, String OrgId, String whId) {
        Row curRcpt = this.getMmMtlGe().getCurrentRow();
        String docId = curRcpt.getAttribute("DocId").toString();
        RowQualifier rq = new RowQualifier(this.getMmMtlGeItm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId + "' and WhId='" +
                          whId + "' and DocId='" + docId + "'");
        Row[] filRw = this.getMmMtlGeItm1().getFilteredRows(rq);
        Number zero = new Number(0);
        for (Row rw : filRw) {
            Number rcptQty = (Number) rw.getAttribute("RcptQty");
            if (rcptQty.compareTo(zero) == 0) {
                rw.remove();
                _log.info("Row Deleted");
            }
        }

        this.getMmMtlGeItm1().executeQuery();
        this.getMmMtlGeItm().executeQuery();
        Row[] srcRw = this.getMmMtlGeSrc().getAllRowsInRange();
        for (Row srw : srcRw) {
            RowQualifier rrq = new RowQualifier(this.getMmMtlGeItm1());
            rrq.setWhereClause("CldId='" + CldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId + "' and WhId='" +
                               whId + "' and DocId='" + docId + "' and DocIdSrc='" +
                               srw.getAttribute("DocIdSrc").toString() + "'");
            Row[] itmRw = this.getMmMtlGeItm1().getFilteredRows(rrq);
            if (itmRw.length == 0) {
                srw.remove();
            }
        }
        this.getMmMtlGeSrc().executeQuery();
    }

    /**
     * Container's getter for MmMtlGeItm1.
     * @return MmMtlGeItm1
     */
    public MmMtlGeItmVOImpl getMmMtlGeItm1() {
        return (MmMtlGeItmVOImpl) findViewObject("MmMtlGeItm1");
    }

    public String checkItmDuplicate(String itmNm, String uomId) {
        Row srcRw = this.getMmMtlGeSrc().getCurrentRow();
        Integer type =
            Integer.parseInt(this.getMmMtlGe().getCurrentRow().getAttribute("TransSourceDocType").toString());
        String chk = "N";
        _log.info("Rcpt TYpe:" + type);

        if (type.equals(SOURCE_DOC_TYPE_WPO) || type.equals(SOURCE_DOC_TYPE_WSO)) { // WIthout PO
            if (srcRw != null) {
                String docIdsrc = srcRw.getAttribute("DocIdSrc").toString();
                RowQualifier rq = new RowQualifier(this.getMmMtlGeItm());

                Row[] itms = this.getLovItmId().getFilteredRows("ItmDesc", itmNm);

                _log.info("NO.OF ITEMS : " + itms.length);
                rq.setWhereClause("DocIdSrc='" + docIdsrc + "' and DlvSchdlNo=0 and ItmId='" +
                                  itms[0].getAttribute("ItmId") + "' and  ItmUom='" + uomId + "'");
                Row[] filRw = this.getMmMtlGeItm().getFilteredRows(rq);
                if (filRw.length > 0) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "N";
            }
        } else {
            _log.info("Others itm Dup check");
            return "N";
        }
    }

    /**
     * Check if any document has been added to this GE
     * @return 'Y'-Valid
     *         'N'-Invalid(Empty)
     * */
    public String isDocumentPresent() {
        Integer count = this.getMmMtlGeSrc().getRowCount();
        if (count.compareTo(0) == 1) {
            return "Y";
        } else {
            return "N";
        }
    }

    /**
     * Container's getter for ViewMMPrf.
     * @return ViewMMPrf
     */
    public ViewObjectImpl getViewMMPrf() {
        return (ViewObjectImpl) findViewObject("ViewMMPrf");
    }


    public void setStatusforGe(String stat) {
        Row cur = this.getMmMtlGe().getCurrentRow();
        Integer eoId =null;
        _log.info("eo id "+cur.getAttribute("EoIdSrc"));
        if(cur.getAttribute("EoIdSrc")!=null){
            eoId =Integer.parseInt(cur.getAttribute("EoIdSrc").toString());
        }
        _log.info("eo id test ");
        if (stat.equals("Y")) {
            if (cur != null) {
                cur.setAttribute("GeStatus", 298);
                // this.getMmMtlGe().executeQuery();
            }
        } else if (stat.equals("N")) {
            if (cur != null) {
                cur.setAttribute("GeStatus", 297);
                //   this.getMmMtlGe().executeQuery();
            }
        } else if (stat.equals("R")) {
            if (cur != null) {
                cur.setAttribute("GeStatus", 299);
            }
        }
        
        if(cur!=null){
            if(((Integer)cur.getAttribute("RcptSrcType")).compareTo(new Integer(257))==0){
                if(cur.getAttribute("EoIdSrc")==null){
                    cur.setAttribute("EoIdSrc", eoId);
                }
            }
        }
        _log.info(eoId+"eo id2 "+cur.getAttribute("EoIdSrc"));
        _log.info("eo id test ");
    }

    public void returnGe(String Flg) {
        if ("Y".equals(Flg)) {


            Row currGe = this.getMmMtlGe().getCurrentRow();
            String docId = currGe.getAttribute("DocId").toString();
            Row[] filRw = this.getMmMtlGeItm1().getFilteredRows("DocId", docId);
            for (Row rw : filRw) {


                //--------------------------------
                //first substract old qty from tmp qty AND Add new qty to tmp qty
                if (((Integer) currGe.getAttribute("TransSourceDocType")).equals(SOURCE_DOC_TYPE_PO)) {
                    Row curr = rw;
                    RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
                    rq.setWhereClause("CldId='" + curr.getAttribute("CldId") + "' and SlocId=" +
                                      curr.getAttribute("SlocId") + " and OrgId='" + curr.getAttribute("OrgId") +
                                      "' and DocId='" + curr.getAttribute("DocIdSrc") + "' and ItmId='" +
                                      curr.getAttribute("ItmId") + "' and WhId='" + curr.getAttribute("WhId") +
                                      "' and ItmUom='" + curr.getAttribute("ItmUom") + "' and DlvSchdlNo=" +
                                      curr.getAttribute("DlvSchdlNo"));
                    Row dsRow[] = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
                    if (dsRow.length > 0) {
                        Number tmpQty = new Number(0);
                        if (dsRow[0].getAttribute("TmpRcptQty") != null)
                            tmpQty = (Number)((Number) dsRow[0].getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());
                        Number rcptQty = new Number(0);
                        if (curr.getAttribute("RcptQty") != null)
                            rcptQty = (Number)((Number) curr.getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
                        dsRow[0].setAttribute("TmpRcptQty", (Number)(tmpQty.subtract(rcptQty)).round(getGlblRoundQtyDigit()));
                    }
                }

                //-------------------------------

                Number dlvqty = (Number)((Number) rw.getAttribute("DlvQty")).round(getGlblRoundQtyDigit());
                _log.info("DElivry qty=" + dlvqty);
                Number uomfctr = (Number)((Number) rw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
                if (dlvqty == null) {
                    dlvqty = new Number(0);
                }
                if (uomfctr == null) {
                    uomfctr = new Number(1);
                }
                rw.setAttribute("TotRcptQty", new Number(0));
                rw.setAttribute("TotRcptQtyBs", new Number(0));
                rw.setAttribute("RcptQtyBs", new Number(0));
                rw.setAttribute("RcptQty", new Number(0));
                rw.setAttribute("ReturnQtyBs", (Number)(dlvqty.multiply(uomfctr)).round(getGlblRoundQtyDigit()));
                rw.setAttribute("ReturnQty", dlvqty);

            }
            this.getMmMtlGeItm1().executeQuery();
            this.getMmMtlGeItm().executeQuery();
        } else if ("N".equals(Flg)) {

            Row currGe = this.getMmMtlGe().getCurrentRow();
            String docId = currGe.getAttribute("DocId").toString();
            Row[] filRw = this.getMmMtlGeItm1().getFilteredRows("DocId", docId);
            for (Row rw : filRw) {
                Number dlvqty = (Number)((Number) rw.getAttribute("DlvQty")).round(getGlblRoundQtyDigit());
                Number uomfctr = (Number)((Number) rw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());

                if (dlvqty == null) {
                    dlvqty = new Number(0);
                }
                if (uomfctr == null) {
                    uomfctr = new Number(1);
                }
                rw.setAttribute("TotRcptQty", dlvqty);
                rw.setAttribute("TotRcptQtyBs",(Number)(dlvqty.multiply(uomfctr)).round(getGlblRoundQtyDigit()));
                rw.setAttribute("RcptQty", dlvqty);
                rw.setAttribute("RcptQtyBs", (Number)(dlvqty.multiply(uomfctr)).round(getGlblRoundQtyDigit()));
                rw.setAttribute("ReturnQty", new Number(0));
                rw.setAttribute("ReturnQtyBs", new Number(0));


                //-------------------------------
                if (((Integer) currGe.getAttribute("TransSourceDocType")).equals(SOURCE_DOC_TYPE_PO)) {

                    //first substract old qty from tmp qty AND Add new qty to tmp qty
                    RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
                    rq.setWhereClause("CldId='" + rw.getAttribute("CldId") + "' and SlocId=" +
                                      rw.getAttribute("SlocId") + " and OrgId='" + rw.getAttribute("OrgId") +
                                      "' and DocId='" + rw.getAttribute("DocIdSrc") + "' and ItmId='" +
                                      rw.getAttribute("ItmId") + "' and WhId='" + rw.getAttribute("WhId") +
                                      "' and ItmUom='" + rw.getAttribute("ItmUom") + "' and DlvSchdlNo=" +
                                      rw.getAttribute("DlvSchdlNo"));
                    Row dsRow[] = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
                    if (dsRow.length > 0) {
                        Number tmpQty = new Number(0);
                        if (dsRow[0].getAttribute("TmpRcptQty") != null)
                            tmpQty = (Number)((Number) dsRow[0].getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());
                        dsRow[0].setAttribute("TmpRcptQty", (Number)(tmpQty.add(dlvqty)).round(getGlblRoundQtyDigit()));
                    }


                }
                //-------------------------------
            }

            this.getMmMtlGeItm1().executeQuery();
            this.getMmMtlGeItm().executeQuery();
        }
    }

    /**
     * To check if Doc is being created in open financial year or not.
     * @return
     */

    public boolean isFYOpenForCurrentDate(String cldId, String orgId, Timestamp dt) {
        StringBuffer ck = new StringBuffer("A");
        Integer fyId = 0;
        try {
            //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
            fyId = (Integer) callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                cldId, orgId, dt });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        if (fyId == -1) {
            return false;
        } else {

            try {
                //FUNCTION CHK_ORG_FY_STAT(P_ORG_ID VARCHAR2, P_FY_ID NUMBER, P_FY_TYP VARCHAR2 DEFAULT 'FY',P_BC_FLG VARCHAR2 DEFAULT 'Y')
                ck = new StringBuffer(callStoredFunction(Types.VARCHAR, "APP.PKG_APP.CHK_ORG_FY_STAT(?,?,?,?)", new Object[] {
                                                         orgId, fyId, "FY", "Y"
                    }).toString());

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.CHK_ORG_FY_STAT' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }

        }
        System.out.println("FY IS " + fyId + " FY OPEN/CLOSE CHECK :" + ck);
        if (ck.toString().equals("N")) {
            return true;
        } else {
            return false;
        }

    }


    /**
     * Container's getter for LovUomVw.
     * @return LovUomVw
     */
    public ViewObjectImpl getLovUomVw() {
        return (ViewObjectImpl) findViewObject("LovUomVw");
    }

    /**
     * Container's getter for LovTrfWhVw.
     * @return LovTrfWhVw
     */
    public ViewObjectImpl getLovTrfWhVw() {
        return (ViewObjectImpl) findViewObject("LovTrfWhVw");
    }

    /**
     * Container's getter for LovTrfWhVw1.
     * @return LovTrfWhVw1
     */
    public ViewObjectImpl getLovTrfWhVw1() {
        return (ViewObjectImpl) findViewObject("LovTrfWhVw1");
    }

    /**
     * to Check All Quantity is Returned or not
     */
    public String checkRetQty() {
        String chk = "N";
        Row currGe = this.getMmMtlGe().getCurrentRow();
        String docId = currGe.getAttribute("DocId").toString();
        Row[] filRw = this.getMmMtlGeItm1().getFilteredRows("DocId", docId);
        for (Row rw : filRw) {
            Number dlvqty = (Number)((Number) rw.getAttribute("DlvQty")).round(getGlblRoundQtyDigit());
            Number uomfctr = (Number)((Number) rw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
            if (dlvqty == null) {
                dlvqty = new Number(0);
            }
            if (uomfctr == null) {
                uomfctr = new Number(0);
            }
            Number tot =(Number)(dlvqty.multiply(uomfctr)).round(getGlblRoundQtyDigit());
            Number rcpt = (Number)((Number) rw.getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
            Number ret = new Number(0);
            if (rw.getAttribute("ReturnQty") != null)
                ret = (Number)((Number) rw.getAttribute("ReturnQty")).round(getGlblRoundQtyDigit());
            if (ret.compareTo(new Number(0)) == 0 || rcpt.compareTo(new Number(0)) > 0) {
                return "Y";
            }
        }
        return chk;
    }

    /**
     * Method used to check if Tolerance Qty is to be checked for this Receipt acc. to MM$PRF
     * */
    public String chkToleranceQty(String orgId, Integer SlocId, String CldId) {
        String chk = "N";
        RowQualifier rq = new RowQualifier(this.getViewMMPrf());
        rq.setWhereClause("OrgId='" + orgId + "' and SlocId=" + SlocId + " and CldId='" + CldId + "'");
        Row[] r = this.getViewMMPrf().getFilteredRows(rq);
        if (r.length > 0) {
            chk = r[0].getAttribute("ChkDlvQtyTlrnc").toString();
        }

        return chk;
    }


    /**
     * Method to check tolerance Quantity against the Received Quantity.
     * @return : -2 - Cannot accept more then tolerance quantity.
     *            1 - Valid Quantity
     * */
    public String validateToleranceQty(String CldId, Integer SlocId, String OrgId, String p_itm_id, Number rcpt_qty) {
        Row cur = this.getMmMtlGeItm().getCurrentRow();
        //  String chkValid ="N";
        Integer ret = Integer.parseInt(callStoredFunction(Types.INTEGER, "mm_chk_tlrnc_qty (?,?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, OrgId, cur.getAttribute("DocIdSrc").toString(),
                                                          Integer.parseInt(cur.getAttribute("DlvSchdlNo").toString()),
                                                          p_itm_id, rcpt_qty
        }).toString());
        _log.info("ret valid value:" + ret);
        //if(chkValid.equals(""))
        return ret.toString();
    }

    public void DeleteGE() {
        this.getMmMtlGe().removeCurrentRow();
    }

    public String checkNoOfDocument() {
        int count = 1;
        if (this.getMmMtlGeSrc().getRowCount() == count)
            return "Y";
        else
            return "N";
    }

    public HashSet chkdlvryQtyForItem(String CldId, Integer slocId, String OrgId, String whId) {
        Row curGe = this.getMmMtlGe().getCurrentRow();
        Integer docType = (Integer) curGe.getAttribute("TransSourceDocType");
        if (whId == null) {
            whId = "0";
        }

        String docId = curGe.getAttribute("DocId").toString();
        RowQualifier rq = new RowQualifier(this.getMmMtlGeItm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId + "' and WhId='" +
                          whId + "' and DocId='" + docId + "'");
        Row[] filRw = this.getMmMtlGeItm1().getFilteredRows(rq);
        Number zero = new Number(0);
        HashSet<String> h = new HashSet<String>();
        for (Row rw : filRw) {
            Number dlvQty = (Number) rw.getAttribute("DlvQty");
            if (dlvQty.compareTo(zero) == 0) {
                if (docType.compareTo(new Integer(266)) == 0 || docType.compareTo(new Integer(819)) == 0) {
                    // Row[] r = this.getLovPoNo().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    Row[] r = this.getLovPoNoNew().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    if (r.length > 0) {
                        h.add(r[0].getAttribute("AuthPoNo").toString());
                    }
                } else if (docType.compareTo(new Integer(270)) == 0) {
                    Row[] r =
                        this.getLovTransferOrder().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    if (r.length > 0) {
                        h.add(r[0].getAttribute("TrfNo").toString());
                    }
                } else if (docType.compareTo(new Integer(370)) == 0) {
                    h.add(rw.getAttribute("DocIdSrc").toString());
                }
            }
        }
        _log.info("HashSet--" + h);
        return h;
    }

    /**
     * Container's getter for LovCust1.
     * @return LovCust1
     */
    public ViewObjectImpl getLovCust1() {
        return (ViewObjectImpl) findViewObject("LovCust1");
    }


    /**
     * Populate items from CPO
     */
    public Integer populateGeItmfromCPo() {

        ViewObjectImpl geVo = this.getMmMtlGe();
        ViewObjectImpl gesrc = this.getMmMtlGeSrc();
        ViewObjectImpl itmVo = this.getMmMtlGeItm();
        Row currGe = geVo.getCurrentRow();
        Integer no_of_row = 0;
        String CldId = currGe.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currGe.getAttribute("SlocId");
        String OrgId = currGe.getAttribute("OrgId").toString();
        String crSrc = "N";
        Integer currency = null;
        if (currGe.getAttribute("CurrIdSp") != null)
            currency = (Integer) currGe.getAttribute("CurrIdSp");
        RowQualifier rq = new RowQualifier(this.getMMCpoItm());
        rq.setWhereClause("DocId='" + currGe.getAttribute("TransSourceDocId").toString() + "' and SlocId=" + SlocId +
                          " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");
        Row[] scdlRw = this.getMMCpoItm().getFilteredRows(rq);
        _log.info("No of Rows--" + scdlRw.length);
        no_of_row = scdlRw.length;
        if (scdlRw.length > 0) {

            Row srcRow = gesrc.createRow();
            srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_CPO);
            _log.info("TransSourceDocNo in AM: " + currGe.getAttribute("TransSourceDocNo").toString());
            Row[] r = this.getLovCpoNo().getFilteredRows("DocId", currGe.getAttribute("TransSourceDocId").toString());

            srcRow.setAttribute("TxnIdSrcDisp", r[0].getAttribute("CpoId").toString());
            srcRow.setAttribute("DocIdSrc", currGe.getAttribute("TransSourceDocId").toString());
            srcRow.setAttribute("DocDtSrc", currGe.getAttribute("TransSourceDocDt"));
            srcRow.setAttribute("DlvSchdlNo", 0);
            gesrc.insertRow(srcRow);


            for (Row curr : scdlRw) {
                Row itmRw = itmVo.createRow();
                itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
                itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
                Row[] itms = this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                itmRw.setAttribute("ItmUomBs", itms[0].getAttribute("UomBasic").toString());
                //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
                Number fct =
                    getUomConvFctr(currGe.getAttribute("CldId").toString(),
                                   Integer.parseInt(currGe.getAttribute("SlocId").toString()),
                                   currGe.getAttribute("OrgId").toString(), curr.getAttribute("ItmId").toString(),
                                   curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString());
                Number ordQty = (Number) curr.getAttribute("OrdQty");
                itmRw.setAttribute("UomConvFctr", fct);
                itmRw.setAttribute("DlvQty", ordQty);
                itmRw.setAttribute("DlvQtyBs", ordQty.multiply(fct));

                itmRw.setAttribute("PendQty", ordQty);
                itmRw.setAttribute("PendQtyBs", ordQty.multiply(fct));

                itmRw.setAttribute("RcptQty", ordQty);
                itmRw.setAttribute("RcptQtyBs", ordQty.multiply(fct));

                itmRw.setAttribute("TotRcptQty", ordQty);
                itmRw.setAttribute("TotRcptQtyBs", ordQty.multiply(fct));

                itmRw.setAttribute("ReturnQty", new Number(0));
                itmRw.setAttribute("ReturnQtyBs", new Number(0));

                itmRw.setAttribute("DocIdSrc", currGe.getAttribute("TransSourceDocId").toString());
                itmRw.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                itmVo.insertRow(itmRw);
            }
            currGe.setAttribute("TransSourceDocDt", null);
            currGe.setAttribute("TransSourceDocNo", null);
            currGe.setAttribute("TransSchdlNo", null);
            currGe.setAttribute("CurrIdSp", currency);
        }
        gesrc.executeQuery();
        itmVo.executeQuery();

        return no_of_row;

    }

    /**
     * Container's getter for MMCpoItm.
     * @return MMCpoItm
     */
    public ViewObjectImpl getMMCpoItm() {
        return (ViewObjectImpl) findViewObject("MMCpoItm");
    }

    /**
     * Container's getter for LovCpoNo.
     * @return LovCpoNo
     */
    public ViewObjectImpl getLovCpoNo() {
        return (ViewObjectImpl) findViewObject("LovCpoNo");
    }

    /**
     * Container's getter for MMDraftPoDlvSchdl.
     * @return MMDraftPoDlvSchdl
     */
    public ViewObjectImpl getMMDraftPoDlvSchdl() {
        return (ViewObjectImpl) findViewObject("MMDraftPoDlvSchdl");
    }


    /**
     * Fucntion is used to update TmpRcptQty for DlvSchdl according to change in RcptQty in GE Itm.
     */
    public void updateTxnQty(Number oldRcptQty, Number newRcptQty) {
        Number oldQty = new Number(0);
        Number newQty = new Number(0);
        if (oldRcptQty != null)
            oldQty = (Number)oldRcptQty.round(getGlblRoundQtyDigit());
        if (newRcptQty != null)
            newQty = (Number)newRcptQty.round(getGlblRoundQtyDigit());
        Row curr = this.getMmMtlGeItm().getCurrentRow();
        Number fctr = new Number(1);
        if (curr.getAttribute("UomConvFctr") != null)
            fctr = (Number)((Number) curr.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        curr.setAttribute("RcptQtyBs", (Number)(newRcptQty.multiply(fctr)).round(getGlblRoundQtyDigit()));
        //first substract old qty from tmp qty AND Add new qty to tmp qty
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("CldId='" + curr.getAttribute("CldId") + "' and SlocId=" + curr.getAttribute("SlocId") +
                          " and OrgId='" + curr.getAttribute("OrgId") + "' and DocId='" +
                          curr.getAttribute("DocIdSrc") + "' and ItmId='" + curr.getAttribute("ItmId") +
                          "' and WhId='" + curr.getAttribute("WhId") + "' and ItmUom='" + curr.getAttribute("ItmUom") +
                          "' and DlvSchdlNo=" + curr.getAttribute("DlvSchdlNo"));
        Row dsRow[] = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        if (dsRow.length > 0) {
            Number tmpQty = new Number(0);
            if (dsRow[0].getAttribute("TmpRcptQty") != null)
                tmpQty = (Number)((Number) dsRow[0].getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());
            dsRow[0].setAttribute("TmpRcptQty", (Number)((tmpQty.subtract(oldQty)).add(newQty)).round(getGlblRoundQtyDigit()));
        }
    }

    /**
     * Validate PO Quantity if Tolerance Chk is not applicable on Organisation
     */
    public String validatePoRcptQty(Number rcptQty) {
        Number pendqty = new Number(0);
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty") != null)
            pendqty = (Number)((Number) this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty")).round(getGlblRoundQtyDigit());

        if (pendqty.compareTo((Number)rcptQty.round(getGlblRoundQtyDigit())) >= 0)
            return "Y";
        else
            return "N";
    }

    /**
     * Method used to check if Tolerance Days is to be checked for this Receipt acc. to MM$PRF
     * */
    public String chkToleranceDays(String orgId, Integer SlocId, String CldId) {
        String chk = "N";
        RowQualifier rq = new RowQualifier(this.getViewMMPrf());
        rq.setWhereClause("OrgId='" + orgId + "' and SlocId=" + SlocId + " and CldId='" + CldId + "'");
        Row[] r = this.getViewMMPrf().getFilteredRows(rq);
        _log.info("No. of Filtered Rows=" + r.length);
        if (r.length > 0) {
            chk = r[0].getAttribute("ChkDlvSchdlTlrnc").toString();
        }
        _log.info("check=" + chk);
        return chk;
    }

    /**
     * Method to check tolerance Days against the selected po no/date.
     * @return : -2 - Cannot accept before or after tolerance days.
     *            1 - Valid Date
     * */
    public String validateToleranceDays(String CldId, Integer SlocId, String OrgId, String p_po_no,
                                        Timestamp p_rcpt_date) {
        //  Row cur=this.getMmMtlGeItm().getCurrentRow();



        //  String chkValid ="N";
        Integer Schdlno = new Integer(1);
        Row curr = this.getMmMtlGe().getCurrentRow();
        if (curr.getAttribute("TransSchdlNo") != null)
            Schdlno = (Integer) curr.getAttribute("TransSchdlNo");
        p_po_no = (String) curr.getAttribute("TransSourceDocId");
        Integer ret = Integer.parseInt(callStoredFunction(Types.INTEGER, "mm.mm_chk_tlrnc_days (?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, OrgId, p_po_no, Schdlno, p_rcpt_date
        }).toString());
        _log.info("ret valid value:" + ret);
        return ret.toString();
    }

    public String chkDaysTolerance() {
        Integer Schdlno = new Integer(1);
        Row curr = this.getMmMtlGe().getCurrentRow();
        if (curr.getAttribute("TransSchdlNo") != null)
            Schdlno = (Integer) curr.getAttribute("TransSchdlNo");
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("CldId='" + curr.getAttribute("CldId") + "' and SlocId=" + curr.getAttribute("SlocId") +
                          " and OrgId='" + curr.getAttribute("OrgId") + "' and DocId='" +
                          curr.getAttribute("TransSourceDocId") + "' and  WhId='" + curr.getAttribute("WhId") +
                          "' and  DlvSchdlNo=" + Schdlno);
        _log.info("Query=" + rq.getExprStr());
        Row dsRow[] = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        _log.info("No. of filtered Rows=" + dsRow.length);
        if (dsRow.length > 0) {
            Timestamp dlvDt = (Timestamp) dsRow[0].getAttribute("DlvDt");
            Timestamp rcptDt = (Timestamp) curr.getAttribute("GeDt");

            try {
                if (dlvDt.dateValue().toString().equals(rcptDt.dateValue().toString()))
                    return "Y";
                else
                    return "N";
            } catch (SQLException e) {
                _log.info("Exception to cast timestamp to date.");
            }
        }
        return "P";
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }


    public String checkCurrCompatibilityABC(String OrgId, String CldId, Integer SlocId, String PoDocId) {
        Integer count = this.getMmMtlGeSrc().getRowCount();
        Row currRc = this.getMmMtlGe().getCurrentRow();

        String rcptSrcDoc = currRc.getAttribute("TransSourceDocId").toString();
        _log.info("Count in curr compat-" + count);
        if (count.compareTo(new Integer(1)) >= 0) {
            Row rw = this.getMmMtlGeSrc().first();

            String docId = rw.getAttribute("DocIdSrc").toString(); // docId in table
            //            Row[] filRw = this.getLovPoNo().getFilteredRows("DocId", docId); //old selected
            //
            //            Row[] poFilRw = this.getLovPoNo().getFilteredRows("DocId", rcptSrcDoc); //new selected
            Row[] filRw = this.getLovPoNoNew().getFilteredRows("DocId", docId); //old selected

            Row[] poFilRw = this.getLovPoNoNew().getFilteredRows("DocId", rcptSrcDoc); //new selected

            _log.info(docId + "Rows--" + filRw.length + "--" + poFilRw.length + "--" + PoDocId);
            if (filRw.length > 0) {
                Integer curr = Integer.parseInt(filRw[0].getAttribute("CurrIdSp").toString());

                Integer currPo = Integer.parseInt(poFilRw[0].getAttribute("CurrIdSp").toString());
                _log.info("Currency--" + curr + "--Currency Bs-" + currPo);
                if (curr.equals(currPo)) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "Y";
            }
        } else {
            return "Y";
        }
        /*     RowQualifier rq=new RowQualifier(this.getLovPoNo());


        rq.setWhereClause("SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"' and ");
        Row[] filRw=this.getLovPoNo().getFilteredRows(rq); */

    }

    /**check currency in case of cpo */
    public String checkCurrCompatibilityCPO(String OrgId, String CldId, Integer SlocId, String PoDocId) {
        Integer count = this.getMmMtlGeSrc().getRowCount();
        Row currRc = this.getMmMtlGe().getCurrentRow();

        String rcptSrcDoc = currRc.getAttribute("TransSourceDocId").toString();
        _log.info("Count in curr compat-" + count);
        if (count.compareTo(new Integer(1)) >= 0) {
            Row rw = this.getMmMtlGeSrc().first();

            String docId = rw.getAttribute("DocIdSrc").toString(); // docId in table
            Row[] filRw = this.getLovCpoNo().getFilteredRows("DocId", docId); //old selected

            Row[] poFilRw = this.getLovCpoNo().getFilteredRows("DocId", rcptSrcDoc); //new selected
            _log.info(docId + "Rows--" + filRw.length + "--" + poFilRw.length + "--" + PoDocId);
            if (filRw.length > 0) {
                Integer curr = Integer.parseInt(filRw[0].getAttribute("CurrIdSp").toString());

                Integer currPo = Integer.parseInt(poFilRw[0].getAttribute("CurrIdSp").toString());
                _log.info("Currency--" + curr + "--Currency Bs-" + currPo);
                if (curr.equals(currPo)) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "Y";
            }
        } else {
            return "Y";
        }
        /*     RowQualifier rq=new RowQualifier(this.getLovPoNo());


        rq.setWhereClause("SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"' and ");
        Row[] filRw=this.getLovPoNo().getFilteredRows(rq); */

    }

    public Integer getGESrcCount() {
        Integer count = this.getMmMtlGeSrc().getRowCount();
        return count;
    }

    public void setCurrIdSpInMtlGeWithoutPO() {
        Row geR = this.getMmMtlGe().getCurrentRow();
        Integer eo = null;
        if (geR.getAttribute("EoIdSrc") != null)
            eo = (Integer) geR.getAttribute("EoIdSrc");

        if (eo != null) {
            this.getLovSupplierView().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            this.getLovSupplierView().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            this.getLovSupplierView().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            this.getLovSupplierView().setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            this.getLovSupplierView().setNamedWhereClauseParam("BindEoId", eo);
            this.getLovSupplierView().executeQuery();
            Row[] rr = this.getLovSupplierView().getFilteredRows("EoId", eo);
            _log.info("length :  " + rr.length);
            if (rr.length > 0 && rr[0].getAttribute("SuppCurrId") != null) {
                geR.setAttribute("CurrIdSp", rr[0].getAttribute("SuppCurrId"));
            }
        }

    }

    public void setCurrIdSpInMtlGe() {
        Integer count = this.getMmMtlGeSrc().getRowCount();
        Row geR = this.getMmMtlGe().getCurrentRow();
        Integer eo = null;
        if (geR.getAttribute("EoIdSrc") != null)
            eo = (Integer) geR.getAttribute("EoIdSrc");

        if (count.compareTo(new Integer(1)) >= 0) {
            Row rw = this.getMmMtlGeSrc().first();

            String docId = rw.getAttribute("DocIdSrc").toString(); // docId in table
            _log.info(" docId  in table ----- " + docId);

            String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            // RowQualifier rq = new RowQualifier(this.getLovPoNo());
            RowQualifier rq = new RowQualifier(this.getLovPoNoNew());
            rq.setWhereClause("CldId='" + paramCldId + "' and SlocId=" + paramSlocId + " and OrgId='" + paramOrgId +
                              "' and DocId ='" + docId + "' ");
            Row[] r = this.getLovPoNoNew().getFilteredRows(rq);
            _log.info(rq.getExprStr() + "  query    " + r.length);
            if (r.length > 0)
                if (r[0].getAttribute("CurrIdSp") != null) {
                    _log.info(r[0].getAttribute("PoId") + "    Curr Id  ---  " + r[0].getAttribute("CurrIdSp"));
                    geR.setAttribute("CurrIdSp", r[0].getAttribute("CurrIdSp"));
                }
        }
    }

    public void setCurrIdSpPoToMtlGe(Integer value) {
        Integer count = this.getMmMtlGeSrc().getRowCount();
        Row geR = this.getMmMtlGe().getCurrentRow();
        Integer eo = null;
        if (geR.getAttribute("EoIdSrc") != null)
            eo = (Integer) geR.getAttribute("EoIdSrc");

        if (count.compareTo(new Integer(1)) >= 0) {
            Row rw = this.getMmMtlGeSrc().first();

            String docId = rw.getAttribute("DocIdSrc").toString(); // docId in table
            _log.info(value + " docId  in table ----- " + docId + "  fggfgf   " + value.compareTo(SOURCE_DOC_TYPE_PO));

            String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            if (value.compareTo(SOURCE_DOC_TYPE_PO) == 0 || value.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0 ||
                value.compareTo(SOURCE_DOC_TYPE_CPO) == 0) {
                RowQualifier rq = new RowQualifier(this.getLovPoNoNew());
                rq.setWhereClause("CldId='" + paramCldId + "' and SlocId=" + paramSlocId + " and OrgId='" + paramOrgId +
                                  "' and DocId ='" + docId + "' ");
                Row[] r = this.getLovPoNoNew().getFilteredRows(rq);
                _log.info(rq.getExprStr() + "  query    " + r.length);
                if (r.length > 0) {
                    if (r[0].getAttribute("CurrIdSp") != null) {
                        _log.info(r[0].getAttribute("PoId") + "    Curr Id  ---  " + r[0].getAttribute("CurrIdSp"));
                        geR.setAttribute("CurrIdSp", r[0].getAttribute("CurrIdSp"));
                    }
                    if (value.compareTo(SOURCE_DOC_TYPE_CPO) == 0 && r[0].getAttribute("CoaId") != null) {
                        _log.info(r[0].getAttribute("PoId") + "    Curr Id  ---  " + r[0].getAttribute("CoaId"));
                        geR.setAttribute("CoaId", r[0].getAttribute("CoaId"));
                    }
                }
            }
            
            if(value.compareTo(SOURCE_DOC_TYPE_JITR) == 0){
                this.getLovJITimeReceiptDisp().setNamedWhereClauseParam("BindCldId", paramCldId);
                this.getLovJITimeReceiptDisp().setNamedWhereClauseParam("BindSlocId", paramSlocId);
                this.getLovJITimeReceiptDisp().setNamedWhereClauseParam("BindOrgId", paramOrgId);
                this.getLovJITimeReceiptDisp().setNamedWhereClauseParam("BindHoOrgId", paramHoOrgId);
                this.getLovJITimeReceiptDisp().setNamedWhereClauseParam("BindWhId", geR.getAttribute("WhId"));
                this.getLovJITimeReceiptDisp().setNamedWhereClauseParam("BindDocId", docId);
                this.getLovJITimeReceiptDisp().executeQuery();
                Row rr[] = this.getLovJITimeReceiptDisp().getFilteredRows("DocId", docId);
                if(rr.length>0){
                    _log.info(rr[0].getAttribute("RcptNo") + "    Curr Id  ---  " + rr[0].getAttribute("CurrIdSp"));
                    geR.setAttribute("CurrIdSp", rr[0].getAttribute("CurrIdSp"));
                }
                
            }


        }
    }

    public void updtRcptRetnTmpRcptQty(Number TotRcpt) {
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String whId = null; //this.getMmMtlGe().getCurrentRow().getAttribute("WhId").toString();
        String itmId = null;
        String itmUom = null;
        String docIdSrc = null;
        Integer schlNo = 1;
        if (this.getMmMtlGe().getCurrentRow().getAttribute("WhId") != null) {
            whId = this.getMmMtlGe().getCurrentRow().getAttribute("WhId").toString();
        }
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("DocIdSrc") != null) {
            docIdSrc = this.getMmMtlGeItm().getCurrentRow().getAttribute("DocIdSrc").toString();
        }
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("ItmId") != null) {
            itmId = this.getMmMtlGeItm().getCurrentRow().getAttribute("ItmId").toString();
        }
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("ItmUom") != null) {
            itmUom = this.getMmMtlGeItm().getCurrentRow().getAttribute("ItmUom").toString();
        }
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("DlvSchdlNo") != null) {
            schlNo = (Integer) this.getMmMtlGeItm().getCurrentRow().getAttribute("DlvSchdlNo");
        }
        Number pendqty = new Number(0);
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty") != null) {
            pendqty = (Number)((Number) this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty")).round(getGlblRoundQtyDigit());
        }
        Number tolranctQty = new Number(0);
        String chkTlrnc = chkToleranceQty(paramOrgId, paramSlocId, paramCldId);
        _log.info("chkTlrnc  : " + chkTlrnc);
        if ("Y".equalsIgnoreCase(chkTlrnc)) {
            if (itmId != null && itmUom != null && whId != null && docIdSrc != null) {
                BigDecimal tlrclQtyVal =
                    (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_ITM_TLRNC_QTY(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    paramCldId, paramSlocId, paramOrgId, docIdSrc, itmId, whId, schlNo,
                                                    itmUom, pendqty
                });

                _log.info(tlrclQtyVal + "  tlrclQtyVal2");
                if (tlrclQtyVal != null) {
                    try {
                        tolranctQty = new Number(tlrclQtyVal);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        _log.info("itmId : " + itmId + " itmUom : " + itmUom + " whId :" + whId + " docIdSrc : " + docIdSrc +
                  " schlNo : " + schlNo + " pendqty : " + pendqty);
        _log.info(tolranctQty + " tolranctQty ");
        pendqty = (Number)(pendqty.add((Number)tolranctQty.round(getGlblRoundQtyDigit()))).round(getGlblRoundQtyDigit());

        Number oldRcpt = new Number(0);
        oldRcpt = (Number)((Number) this.getMmMtlGeItm().getCurrentRow().getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
        if (pendqty.compareTo(TotRcpt) < 0) {
            this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty", pendqty);
            this.updateTxnQty(oldRcpt, pendqty); //update TmpRcptQty
            this.getMmMtlGeItm().getCurrentRow().setAttribute("ReturnQty", (Number)(((Number)TotRcpt.round(getGlblRoundQtyDigit())).subtract(pendqty)).round(getGlblRoundQtyDigit()));
        } else {
            this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty", (Number)TotRcpt.round(getGlblRoundQtyDigit()));
            this.updateTxnQty(oldRcpt, TotRcpt); //update TmpRcptQty
            this.getMmMtlGeItm().getCurrentRow().setAttribute("ReturnQty", new Number(0));
        }
    }

    public void updtRcptQty(Number TotRcpt) {
        this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty", (Number)TotRcpt.round(getGlblRoundQtyDigit()));
        this.getMmMtlGeItm().getCurrentRow().setAttribute("ReturnQty", new Number(0));

    }

    public String compTotRcptQty(Number RetQty) {
        Number TotRcpt = new Number(0);
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty") != null)
            TotRcpt = (Number)((Number) this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty")).round(getGlblRoundQtyDigit());
        if (RetQty.compareTo((Number)TotRcpt.round(getGlblRoundQtyDigit())) <= 0)
            return "Y";
        else
            return "N";
    }


    public String callForValidateToleranceQty(String CldId, Integer SlocId, String OrgId, String p_itm_id,
                                              Number retn_qty) {
        Number rcpt_qty = new Number(0);
        Number TotRcpt = new Number(0);
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty") != null)
            TotRcpt = (Number) this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty");
        rcpt_qty = TotRcpt.subtract(retn_qty);
        String ret = validateToleranceQty(CldId, SlocId, OrgId, p_itm_id, rcpt_qty);
        return ret;
    }

    public void updtRcptTmpRcptQty(Number RetnQty) {
        Number totRcptQty = new Number(0);
        Number pendingQty = new Number(0);
        Number totRcptDiff = new Number(0);


        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String whId = null; //this.getMmMtlGe().getCurrentRow().getAttribute("WhId").toString();
        String itmId = null;
        String itmUom = null;
        String docIdSrc = null;
        Integer schlNo = 1;
        if (this.getMmMtlGe().getCurrentRow().getAttribute("WhId") != null) {
            whId = this.getMmMtlGe().getCurrentRow().getAttribute("WhId").toString();
        }
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("DocIdSrc") != null) {
            docIdSrc = this.getMmMtlGeItm().getCurrentRow().getAttribute("DocIdSrc").toString();
        }
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("ItmId") != null) {
            itmId = this.getMmMtlGeItm().getCurrentRow().getAttribute("ItmId").toString();
        }
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("ItmUom") != null) {
            itmUom = this.getMmMtlGeItm().getCurrentRow().getAttribute("ItmUom").toString();
        }
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("DlvSchdlNo") != null) {
            schlNo = (Integer) this.getMmMtlGeItm().getCurrentRow().getAttribute("DlvSchdlNo");
        }
        Number pendqty = new Number(0);
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty") != null) {
            pendqty = (Number)((Number) this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty")).round(getGlblRoundQtyDigit());
        }
        Number tolranctQty = new Number(0);
        String chkTlrnc = chkToleranceQty(paramOrgId, paramSlocId, paramCldId);
        _log.info("chkTlrnc1  : " + chkTlrnc);
        if ("Y".equalsIgnoreCase(chkTlrnc)) {
            if (itmId != null && itmUom != null && whId != null && docIdSrc != null) {
                BigDecimal tlrclQtyVal =
                    (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_ITM_TLRNC_QTY(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    paramCldId, paramSlocId, paramOrgId, docIdSrc, itmId, whId, schlNo,
                                                    itmUom, pendqty
                });

                _log.info(tlrclQtyVal + "  tlrclQtyVal21");
                if (tlrclQtyVal != null) {
                    try {
                        tolranctQty = new Number(tlrclQtyVal);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
            }
        }
        _log.info("itmId1 : " + itmId + " itmUom1 : " + itmUom + " whId1 :" + whId + " docIdSrc1 : " + docIdSrc +
                  " schlNo1 : " + schlNo + " pendqty1 : " + pendqty);
        _log.info(tolranctQty + " tolranctQty1 ");
        pendqty = (Number)(pendqty.add(tolranctQty)).round(getGlblRoundQtyDigit());


        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty") != null) {
            totRcptQty = (Number)((Number) this.getMmMtlGeItm().getCurrentRow().getAttribute("TotRcptQty")).round(getGlblRoundQtyDigit());
        }
        if (this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty") != null) {
            pendingQty = (Number)((Number) this.getMmMtlGeItm().getCurrentRow().getAttribute("PendQty")).round(getGlblRoundQtyDigit());
        }
        Number oldRcpt = new Number(0);
        oldRcpt = (Number)((Number) this.getMmMtlGeItm().getCurrentRow().getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
        _log.info(oldRcpt + " oldRcpt : " + pendingQty + " pendingQty : " + totRcptQty);
        if (oldRcpt.compareTo(pendingQty) == 1 && totRcptQty.compareTo(pendingQty) == 1) {
            _log.info("inside condition ");
            totRcptDiff = (Number)(totRcptQty.subtract(oldRcpt)).round(getGlblRoundQtyDigit());
            _log.info(" totRcptDiff " + totRcptDiff);
            if (totRcptDiff.compareTo(RetnQty) == 1 || totRcptDiff.compareTo(RetnQty) == 0) {
                _log.info("inside condition 2 ");
                Number subtractVal = (Number)(totRcptDiff.subtract(RetnQty)).round(getGlblRoundQtyDigit());
                _log.info("inside condition 2 : " + subtractVal);
                this.getMmMtlGeItm().getCurrentRow().setAttribute("TotRcptQty", totRcptQty.subtract(subtractVal));
            } else {
                Number x = (Number)(totRcptQty.subtract(RetnQty)).round(getGlblRoundQtyDigit());
                _log.info(x + " x value " + pendqty);
                if (x.compareTo(pendqty) == 1) {
                    _log.info("inside condition 3 ");
                    Number subDif = (Number)(x.subtract(pendqty)).round(getGlblRoundQtyDigit());
                    _log.info("inside condition 3 " + subDif);
                    this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty", pendqty);
                    this.getMmMtlGeItm().getCurrentRow().setAttribute("TotRcptQty", (Number)(totRcptQty.subtract(subDif)).round(getGlblRoundQtyDigit()));
                } else {
                    this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty", (Number)(totRcptQty.subtract(RetnQty)).round(getGlblRoundQtyDigit()));
                }
            }
        } else {
            Number x = (Number)(totRcptQty.subtract(RetnQty)).round(getGlblRoundQtyDigit());
            _log.info(x + " x value1 " + pendqty);
            if (x.compareTo(pendqty) == 1) {
                _log.info("inside condition 4 ");
                Number subDif = (Number)(x.subtract(pendqty)).round(getGlblRoundQtyDigit());
                _log.info("inside condition 4 " + subDif);
                this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty", pendqty);
                this.getMmMtlGeItm().getCurrentRow().setAttribute("TotRcptQty", (Number)(totRcptQty.subtract(subDif)).round(getGlblRoundQtyDigit()));
            } else {
                this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty", (Number)(totRcptQty.subtract(RetnQty)).round(getGlblRoundQtyDigit()));
            }
        }

        this.updateTxnQty(oldRcpt, (Number)(totRcptQty.subtract(RetnQty)).round(getGlblRoundQtyDigit())); //update TmpRcptQty

        //  this.getMmMtlGeItm().getCurrentRow().setAttribute("RcptQty", totRcptQty.subtract(RetnQty));
    }

    /**
     * Container's getter for LovCurrency.
     * @return LovCurrency
     */
    public ViewObjectImpl getLovCurrency() {
        return (ViewObjectImpl) findViewObject("LovCurrency");
    }

    /**
     * Container's getter for ViewObj1.
     * @return ViewObj1
     */
    public ViewObjectImpl getViewObj() {
        return (ViewObjectImpl) findViewObject("ViewObj");
    }

    public Integer orgBaseCurrency(String orgId) {
        BigDecimal currBsId = null;
        Integer currIdBs = 73;
        if (orgId != null) {
            currBsId = (BigDecimal) callStoredFunction(Types.NUMERIC, "app.pkg_app.get_org_def_curr_bs1(?)", new Object[] {
                                                       orgId });
        }
        if (currBsId != null) {
            currIdBs = Integer.parseInt(currBsId.toString());

        }
        System.out.println(" currency base :  " + currIdBs);
        return currIdBs;
    }

    /**TO Insert Item in  BarCode Table From Dual*/

    public void insertIntoBarCodeTbl() {
        if (getDualForBarCodeVO1().getCurrentRow() != null) {
            Row createRow = getMmMtlGeItmBcVO1().createRow();
            createRow.setAttribute("ItmId", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransItmId"));
            createRow.setAttribute("ItmUom", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransItmUomId"));
            createRow.setAttribute("DlvQty", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransDelvQty"));
            createRow.setAttribute("RcptQty", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRecptQty"));
            createRow.setAttribute("ReturnQty", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRetQty"));
            getMmMtlGeItmBcVO1().insertRow(createRow);
            getMmMtlGeItmBcVO1().executeQuery();
            getDualForBarCodeVO1().executeQuery();

        }
    }

    /**To Validate Item Id In PO Or Not*/
    public String chkItmIdInPo(String ItmId) {
        if (getMmMtlGeSrc().getCurrentRow().getAttribute("DocIdSrc") != null) {
            String pODocId = getMmMtlGeSrc().getCurrentRow().getAttribute("DocIdSrc").toString();
            System.out.println("PoDocId --" + pODocId);
            Row[] filteredRows = getMmMtlGeItm().getFilteredRows("DocIdSrc", pODocId);
            for (Row r : filteredRows) {
                if (r.getAttribute("ItmId").equals(ItmId)) {
                    System.out.println("item id found in po");
                    return "N";
                }
            }
            System.out.println("item id not found in po");
            return "Y";
        }
        return "Y";
    }

    /**Update Qty If already in Barcode Table*/
    public String updateItmQty(String ItmId) {
        if (ItmId != null) {
            Row[] filteredRows = getMmMtlGeItmBcVO1().getFilteredRows("ItmId", ItmId);
            if (filteredRows.length > 0) {
                // Number delvQty = (Number) filteredRows[0].getAttribute("DlvQty");
                Number rcptQty = (Number) filteredRows[0].getAttribute("RcptQty");
                Number retQty = (Number) filteredRows[0].getAttribute("ReturnQty");
                //Number newDelQty = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransDelvQty");
                Number newRcptQty = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRecptQty");
                Number newRetQty = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRetQty");

                //filteredRows[0].setAttribute("DlvQty", delvQty.add(newDelQty));
                filteredRows[0].setAttribute("RcptQty", rcptQty.add(newRcptQty));
                filteredRows[0].setAttribute("ReturnQty", retQty.add(newRetQty));
                getMmMtlGeItmBcVO1().executeQuery();
                getDualForBarCodeVO1().executeQuery();
                return "Y";
            }
            return "N";
        }
        return "N";
    }

    /**Update qty in GeItem Table from barCode PopUP*/

    public void updateGeItmQty() {
        RowSetIterator bcItr = getMmMtlGeItmBcVO1().createRowSetIterator(null);
        if (bcItr.getRowCount() > 0) {
            System.out.println("Row Count in barCode tbl--->" + bcItr.getRowCount());
            while (bcItr.hasNext()) {
                Row next = bcItr.next();
                Number delQty = (Number) next.getAttribute("DlvQty");
                Number rcptQty = (Number) next.getAttribute("RcptQty");
                Number retQty = (Number) next.getAttribute("ReturnQty");
                Row[] filteredRows = getMmMtlGeItm().getFilteredRows("ItmId", next.getAttribute("ItmId"));
                if (filteredRows.length > 0) {
                    filteredRows[0].setAttribute("DlvQty", delQty);
                    filteredRows[0].setAttribute("TotRcptQty", rcptQty.add(retQty));
                    filteredRows[0].setAttribute("RcptQty", rcptQty);
                    filteredRows[0].setAttribute("ReturnQty", retQty);
                }
            }
            getMmMtlGeItm().executeQuery();
            getMmMtlGeSrc().executeQuery();
            getMmMtlGe().executeQuery();
        }
    }


    public Integer cancelGateEntry() {
        ViewObjectImpl geVo = this.getMmMtlGe();
        Row currRow = geVo.getCurrentRow();
        if (currRow != null) {
            Integer cancelA = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_GE_CANCEL (?,?,?,?,?)", new Object[] {
                                                            currRow.getAttribute("CldId"),
                                                            currRow.getAttribute("OrgId"),
                                                            currRow.getAttribute("SlocId"),
                                                            currRow.getAttribute("DocId"), currRow.getAttribute("WhId")
            }));
            _log.info("cancelA  :: " + cancelA);
            if (cancelA != null) {
                Integer ret = new Integer(cancelA);
                if (ret.compareTo(new Integer(1)) == 0) {
                    _log.info(" inside succusses ::: ");
                    currRow.setAttribute("GeStatus", 880);
                    this.getDBTransaction().commit();
                    return 1;
                } else {
                    return 0;
                }


            } else {
                return 0;
            }
        } else {
            return 0;
        }


    }

    /**
     * Container's getter for MmMtlGeItmBcVO1.
     * @return MmMtlGeItmBcVO1
     */
    public ViewObjectImpl getMmMtlGeItmBcVO1() {
        return (ViewObjectImpl) findViewObject("MmMtlGeItmBcVO1");
    }

    /**
     * Container's getter for MmMtlGeSrcToMmMtlGeItmBcVL1.
     * @return MmMtlGeSrcToMmMtlGeItmBcVL1
     */
    public ViewLinkImpl getMmMtlGeSrcToMmMtlGeItmBcVL1() {
        return (ViewLinkImpl) findViewLink("MmMtlGeSrcToMmMtlGeItmBcVL1");
    }

    /**
     * Container's getter for LovPONoForBarCodeVO1.
     * @return LovPONoForBarCodeVO1
     */
    public ViewObjectImpl getLovPONoForBarCodeVO1() {
        return (ViewObjectImpl) findViewObject("LovPONoForBarCodeVO1");
    }

    /**
     * Container's getter for DualForBarCodeVO1.
     * @return DualForBarCodeVO1
     */
    public ViewObjectImpl getDualForBarCodeVO1() {
        return (ViewObjectImpl) findViewObject("DualForBarCodeVO1");
    }

    /**
     * Container's getter for LovItmForBarCodeVO1.
     * @return LovItmForBarCodeVO1
     */
    public ViewObjectImpl getLovItmForBarCodeVO1() {
        return (ViewObjectImpl) findViewObject("LovItmForBarCodeVO1");
    }

    /**
     * Container's getter for LovPoNoNew1.
     * @return LovPoNoNew1
     */
    public ViewObjectImpl getLovPoNoNew() {
        return (ViewObjectImpl) findViewObject("LovPoNoNew");
    }

    /**
     * Container's getter for LovSupplierView1.
     * @return LovSupplierView1
     */
    public ViewObjectImpl getLovSupplierView() {
        return (ViewObjectImpl) findViewObject("LovSupplierView");
    }

    public Integer chkSupplierInvcCopyReceipt() {

        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));


        //        FUNCTION MM_CHK_SUPP_DOC (P_CLD_ID VARCHAR2,
        //                                                        P_SLOC_ID NUMBER,
        //                                                        P_ORG_ID VARCHAR2,
        //                                                        P_EO_ID NUMBER,
        //                                                        P_GE_NO VARCHAR2,
        //                                                        P_CALLED_FM VARCHAR2)
        //


        try {

            Object validSupp = callStoredFunction(Types.INTEGER, "MM.MM_CHK_SUPP_DOC(?,?,?,?,?,?)", new Object[] {
                                                  paramCldId, paramSlocId, paramOrgId,
                                                  this.getMmMtlGe().getCurrentRow().getAttribute("EoIdSrc"), null, "G"
            });

            _log.info("validSupp  :  " + validSupp);
            if (validSupp != null) {
                if (((Integer) validSupp).compareTo(new Integer(1)) == 0) {
                    _log.info("validSupp true  :  ");
                    return 1;
                } else {
                    return 0;
                }
            } else {
                return 0;
            }

        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }
    
    public void resetOrgWh(Integer rcptType) {
        Row rw = this.getMmMtlGe().getCurrentRow();
        if (rcptType == 262) {
            rw.setAttribute("OrgIdSrc", rw.getAttribute("OrgId").toString());
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("TransSourceDocType", 270);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        } else if (rcptType == 263) {
            rw.setAttribute("TransSourceDocType", 270);
            rw.setAttribute("OrgIdSrc", null);
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        } else if (rcptType == 256) {
            rw.setAttribute("OrgIdSrc", null);
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        } else if (rcptType == 257) {
            rw.setAttribute("OrgIdSrc", null);
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        }else if (rcptType == 256) {
            rw.setAttribute("OrgIdSrc", null);
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        }
        
    }

    /**
     * Container's getter for LovJITimeReceiptDisp1.
     * @return LovJITimeReceiptDisp1
     */
    public ViewObjectImpl getLovJITimeReceiptDisp() {
        return (ViewObjectImpl) findViewObject("LovJITimeReceiptDisp");
    }
}
