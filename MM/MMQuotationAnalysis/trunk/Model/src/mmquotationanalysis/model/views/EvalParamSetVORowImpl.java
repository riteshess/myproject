package mmquotationanalysis.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 29 14:52:39 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EvalParamSetVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        SlocId {
            public Object get(EvalParamSetVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(EvalParamSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CldId {
            public Object get(EvalParamSetVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(EvalParamSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgId {
            public Object get(EvalParamSetVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(EvalParamSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ParamSetId {
            public Object get(EvalParamSetVORowImpl obj) {
                return obj.getParamSetId();
            }

            public void put(EvalParamSetVORowImpl obj, Object value) {
                obj.setParamSetId((String) value);
            }
        }
        ,
        ParamSetNm {
            public Object get(EvalParamSetVORowImpl obj) {
                return obj.getParamSetNm();
            }

            public void put(EvalParamSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MinRate {
            public Object get(EvalParamSetVORowImpl obj) {
                return obj.getMinRate();
            }

            public void put(EvalParamSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MaxRate {
            public Object get(EvalParamSetVORowImpl obj) {
                return obj.getMaxRate();
            }

            public void put(EvalParamSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ParamSetIdTrans {
            public Object get(EvalParamSetVORowImpl obj) {
                return obj.getParamSetIdTrans();
            }

            public void put(EvalParamSetVORowImpl obj, Object value) {
                obj.setParamSetIdTrans((String) value);
            }
        }
        ,
        EvalParamSetVO1 {
            public Object get(EvalParamSetVORowImpl obj) {
                return obj.getEvalParamSetVO1();
            }

            public void put(EvalParamSetVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(EvalParamSetVORowImpl object);

        public abstract void put(EvalParamSetVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int PARAMSETID = AttributesEnum.ParamSetId.index();
    public static final int PARAMSETNM = AttributesEnum.ParamSetNm.index();
    public static final int MINRATE = AttributesEnum.MinRate.index();
    public static final int MAXRATE = AttributesEnum.MaxRate.index();
    public static final int PARAMSETIDTRANS = AttributesEnum.ParamSetIdTrans.index();
    public static final int EVALPARAMSETVO1 = AttributesEnum.EvalParamSetVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public EvalParamSetVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

      //  return (Integer) getAttributeInternal(SLOCID);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
    }


    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return  resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
       // return (String) getAttributeInternal(ORGID);
    }


    /**
     * Gets the attribute value for the calculated attribute ParamSetId.
     * @return the ParamSetId
     */
    public String getParamSetId() {
        return (String) getAttributeInternal(PARAMSETID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParamSetId.
     * @param value value to set the  ParamSetId
     */
    public void setParamSetId(String value) {
        setAttributeInternal(PARAMSETID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParamSetNm.
     * @return the ParamSetNm
     */
    public String getParamSetNm() {
        return (String) getAttributeInternal(PARAMSETNM);
    }


    /**
     * Gets the attribute value for the calculated attribute MinRate.
     * @return the MinRate
     */
    public Integer getMinRate() {
        return (Integer) getAttributeInternal(MINRATE);
    }


    /**
     * Gets the attribute value for the calculated attribute MaxRate.
     * @return the MaxRate
     */
    public Integer getMaxRate() {
        return (Integer) getAttributeInternal(MAXRATE);
    }


    /**
     * Gets the attribute value for the calculated attribute ParamSetIdTrans.
     * @return the ParamSetIdTrans
     */
    public String getParamSetIdTrans() {
        return (String) getAttributeInternal(PARAMSETIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParamSetIdTrans.
     * @param value value to set the  ParamSetIdTrans
     */
    public void setParamSetIdTrans(String value) {
        setAttributeInternal(PARAMSETIDTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> EvalParamSetVO1.
     */
    public RowSet getEvalParamSetVO1() {
        return (RowSet)getAttributeInternal(EVALPARAMSETVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
