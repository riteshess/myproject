package mmexpenseinvoice.model.views;

import java.sql.Timestamp;

import mmexpenseinvoice.model.services.MMExpenseInvoiceAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 08 20:19:46 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SearchExpnsInvcVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        HoOrgId,
        OrgId,
        DocId,
        DocDt,
        FyId,
        DrftInvcNo,
        InvcNo,
        InvcDt,
        EoId,
        BillAddsId,
        CoaId,
        CurrIdSp,
        CurrConvFctr,
        TotAmtSp,
        TotAmtBs,
        InvcStat,
        AuthStat,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        TransEoNm,
        LovUsrVO,
        LovInvcStatVO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCDT = AttributesEnum.DocDt.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int DRFTINVCNO = AttributesEnum.DrftInvcNo.index();
    public static final int INVCNO = AttributesEnum.InvcNo.index();
    public static final int INVCDT = AttributesEnum.InvcDt.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int BILLADDSID = AttributesEnum.BillAddsId.index();
    public static final int COAID = AttributesEnum.CoaId.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int TOTAMTSP = AttributesEnum.TotAmtSp.index();
    public static final int TOTAMTBS = AttributesEnum.TotAmtBs.index();
    public static final int INVCSTAT = AttributesEnum.InvcStat.index();
    public static final int AUTHSTAT = AttributesEnum.AuthStat.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int TRANSEONM = AttributesEnum.TransEoNm.index();
    public static final int LOVUSRVO = AttributesEnum.LovUsrVO.index();
    public static final int LOVINVCSTATVO = AttributesEnum.LovInvcStatVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SearchExpnsInvcVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocDt.
     * @return the DocDt
     */
    public Timestamp getDocDt() {
        return (Timestamp) getAttributeInternal(DOCDT);
    }

    /**
     * Gets the attribute value for the calculated attribute FyId.
     * @return the FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Gets the attribute value for the calculated attribute DrftInvcNo.
     * @return the DrftInvcNo
     */
    public String getDrftInvcNo() {
        return (String) getAttributeInternal(DRFTINVCNO);
    }

    /**
     * Gets the attribute value for the calculated attribute InvcNo.
     * @return the InvcNo
     */
    public String getInvcNo() {
        return (String) getAttributeInternal(INVCNO);
    }

    /**
     * Gets the attribute value for the calculated attribute InvcDt.
     * @return the InvcDt
     */
    public Timestamp getInvcDt() {
        return (Timestamp) getAttributeInternal(INVCDT);
    }

    /**
     * Gets the attribute value for the calculated attribute EoId.
     * @return the EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Gets the attribute value for the calculated attribute BillAddsId.
     * @return the BillAddsId
     */
    public String getBillAddsId() {
        return (String) getAttributeInternal(BILLADDSID);
    }

    /**
     * Gets the attribute value for the calculated attribute CoaId.
     * @return the CoaId
     */
    public Integer getCoaId() {
        return (Integer) getAttributeInternal(COAID);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrIdSp.
     * @return the CurrIdSp
     */
    public Integer getCurrIdSp() {
        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrConvFctr.
     * @return the CurrConvFctr
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Gets the attribute value for the calculated attribute TotAmtSp.
     * @return the TotAmtSp
     */
    public Number getTotAmtSp() {
        return (Number) getAttributeInternal(TOTAMTSP);
    }

    /**
     * Gets the attribute value for the calculated attribute TotAmtBs.
     * @return the TotAmtBs
     */
    public Number getTotAmtBs() {
        return (Number) getAttributeInternal(TOTAMTBS);
    }

    /**
     * Gets the attribute value for the calculated attribute InvcStat.
     * @return the InvcStat
     */
    public Integer getInvcStat() {
        return (Integer) getAttributeInternal(INVCSTAT);
    }

    /**
     * Gets the attribute value for the calculated attribute AuthStat.
     * @return the AuthStat
     */
    public String getAuthStat() {
        return (String) getAttributeInternal(AUTHSTAT);
    }

    /**
     * Gets the attribute value for the calculated attribute UsrIdCreate.
     * @return the UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Gets the attribute value for the calculated attribute UsrIdCreateDt.
     * @return the UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Gets the attribute value for the calculated attribute UsrIdMod.
     * @return the UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Gets the attribute value for the calculated attribute UsrIdModDt.
     * @return the UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEoNm.
     * @return the TransEoNm
     */
    public String getTransEoNm() {
        if (getAttributeInternal(TRANSEONM) == null) {
            Integer eoId = this.getEoId();
            //adfLog.info("eo name is "+eoId);
            // System.out.println(eoId +" Entity");
            if (eoId != null) {
                MMExpenseInvoiceAMImpl am = (MMExpenseInvoiceAMImpl) this.getApplicationModule();
                ViewObjectImpl vo = am.getLovSupplier();
                vo.setNamedWhereClauseParam("bindCldId", this.getCldId());
                vo.setNamedWhereClauseParam("bindSlocId", this.getSlocId());
                vo.setNamedWhereClauseParam("bindOrgId", this.getOrgId());
                vo.setNamedWhereClauseParam("bindEoId", eoId);
                // vo.setNamedWhereClauseParam("bindHoOrdId", this.getTransHoOrgId());
                vo.executeQuery();
                Row[] filRw = vo.getFilteredRows("EoId", eoId);
                // adfLog.info("total eo id is "+filRw.length);
                //  Row[] filRw= am.getLovSupplier1().getFilteredRows(new RowQualifier("EoId="+eoId+" and SlocId="+this.getSlocId()+" and OrgId='"+this.getOrgId()+"' and CldId='"+this.getCldId()+"'"));
                if (filRw.length > 0) {
                    return filRw[0].getAttribute("EoNm").toString();
                } else {
                    return (String) getAttributeInternal(TRANSEONM);
                }
            } else {
                return (String) getAttributeInternal(TRANSEONM);
            }
        }
        return (String) getAttributeInternal(TRANSEONM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEoNm.
     * @param value value to set the  TransEoNm
     */
    public void setTransEoNm(String value) {
        setAttributeInternal(TRANSEONM, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUsrVO.
     */
    public RowSet getLovUsrVO() {
        return (RowSet) getAttributeInternal(LOVUSRVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovInvcStatVO.
     */
    public RowSet getLovInvcStatVO() {
        return (RowSet) getAttributeInternal(LOVINVCSTATVO);
    }
}

