package mmexpenseinvoice.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.HashSet;

import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmexpenseinvoice.model.services.common.MMExpenseInvoiceAM;

import mmexpenseinvoice.model.views.LovDispCoaNmVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
//import oracle.jbo.domain.Number;
import oracle.sql.NUMBER;

import org.dom4j.rule.Mode;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 07 14:28:30 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMExpenseInvoiceAMImpl extends ApplicationModuleImpl implements MMExpenseInvoiceAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MMExpenseInvoiceAMImpl() {
    }

    private static ADFLogger _log = (ADFLogger) ADFLogger.createADFLogger(MMExpenseInvoiceAMImpl.class);
    Number zero = new Number(0);

    public String getcldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    public String getOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    }

    public String gethoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for MmExpnsInvc.
     * @return MmExpnsInvc
     */
    public ViewObjectImpl getMmExpnsInvc() {
        return (ViewObjectImpl) findViewObject("MmExpnsInvc");
    }

    /**
     * Container's getter for MmExpnsInvcSrc.
     * @return MmExpnsInvcSrc
     */
    public ViewObjectImpl getMmExpnsInvcSrc() {
        return (ViewObjectImpl) findViewObject("MmExpnsInvcSrc");
    }

    /**
     * Container's getter for MmExpnsInvcLines.
     * @return MmExpnsInvcLines
     */
    public ViewObjectImpl getMmExpnsInvcLines() {
        return (ViewObjectImpl) findViewObject("MmExpnsInvcLines");
    }

    /**
     * Container's getter for TransSearch.
     * @return TransSearch
     */
    public ViewObjectImpl getTransSearch() {
        return (ViewObjectImpl) findViewObject("TransSearch");
    }

    /**
     * Container's getter for SearchExpnsInvc.
     * @return SearchExpnsInvc
     */
    public ViewObjectImpl getSearchExpnsInvc() {
        return (ViewObjectImpl) findViewObject("SearchExpnsInvc");
    }

    /**
     * Container's getter for LovSupplier.
     * @return LovSupplier
     */
    public ViewObjectImpl getLovSupplier() {
        return (ViewObjectImpl) findViewObject("LovSupplier");
    }

    /**
     * Container's getter for LovSearchExpnc.
     * @return LovSearchExpnc
     */
    public ViewObjectImpl getLovSearchExpnc() {
        return (ViewObjectImpl) findViewObject("LovSearchExpnc");
    }

    /**
     * Container's getter for MMExpenseToInvcSrcVL1.
     * @return MMExpenseToInvcSrcVL1
     */
    public ViewLinkImpl getMMExpenseToInvcSrcVL1() {
        return (ViewLinkImpl) findViewLink("MMExpenseToInvcSrcVL1");
    }

    /**
     * Container's getter for InvcSrcToInvcLinesVL1.
     * @return InvcSrcToInvcLinesVL1
     */
    public ViewLinkImpl getInvcSrcToInvcLinesVL1() {
        return (ViewLinkImpl) findViewLink("InvcSrcToInvcLinesVL1");
    }

    public void searchOcData() {
        Row currRow = this.getMmExpnsInvc().getCurrentRow();
        if (currRow != null) {
            ViewObjectImpl ocVo = this.getLovSearchExpnc();
            ocVo.setNamedWhereClauseParam("bindCldId", getcldId());
            ocVo.setNamedWhereClauseParam("bindSlocId", getSlocId());
            ocVo.setNamedWhereClauseParam("bindOrgId", getOrgId());
            ocVo.setNamedWhereClauseParam("bindExpnsNm", currRow.getAttribute("TranOcId"));
            ocVo.setNamedWhereClauseParam("bindFmDt", currRow.getAttribute("TransFrmDate"));
            ocVo.setNamedWhereClauseParam("bindToDt", currRow.getAttribute("TransToDate"));
            ocVo.setNamedWhereClauseParam("bindEoId", currRow.getAttribute("EoId"));
            ocVo.setNamedWhereClauseParam("bindEoCurrId", currRow.getAttribute("CurrIdSp"));
            _log.info("_-------------------search oc---" + getcldId() + "  " + getOrgId() + " " +
                      currRow.getAttribute("EoId") + "--" + currRow.getAttribute("TranOcId") + "---" +
                      currRow.getAttribute("TransOcName") + " Currency id " + currRow.getAttribute("CurrIdSp"));
            ocVo.executeQuery();
        }
    }

    /**
     * Container's getter for LovAdds1.
     * @return LovAdds1
     */
    public ViewObjectImpl getLovAdds() {
        return (ViewObjectImpl) findViewObject("LovAdds");
    }

    /**
     * Container's getter for LovCurrency1.
     * @return LovCurrency1
     */
    public ViewObjectImpl getLovCurrency() {
        return (ViewObjectImpl) findViewObject("LovCurrency");
    }

    public String proceedDataToSource() {
        Row invRw = this.getMmExpnsInvc().getCurrentRow();
        ViewObjectImpl expnsvo = this.getLovSearchExpnc();
        ViewObjectImpl lovExpns = this.getLovExpenceSrc();
        ViewObjectImpl InvcSrc = this.getMmExpnsInvcSrc();
        ViewObjectImpl InvcLines = this.getMmExpnsInvcLines();


        expnsvo.setNamedWhereClauseParam("bindCldId", getcldId());
        expnsvo.setNamedWhereClauseParam("bindOrgId", getOrgId());
        expnsvo.setNamedWhereClauseParam("bindSlocId", getSlocId());
        expnsvo.setNamedWhereClauseParam("bindEoId", invRw.getAttribute("EoId"));
        expnsvo.setNamedWhereClauseParam("bindEoCurrId", invRw.getAttribute("CurrIdSp"));
        expnsvo.setNamedWhereClauseParam("bindFmDt", null);
        expnsvo.setNamedWhereClauseParam("bindToDt", null);
        //expnsvo.executeQuery();

        lovExpns.setNamedWhereClauseParam("bindCldId", getcldId());
        lovExpns.setNamedWhereClauseParam("bindOrgId", getOrgId());
        lovExpns.setNamedWhereClauseParam("bindSlocId", getSlocId());
        lovExpns.executeQuery();
        RowQualifier rq = new RowQualifier(expnsvo);
        rq.setWhereClause("TransChkFlg='Y'");
        Row[] rr = expnsvo.getFilteredRows(rq);
        _log.info("current rows found is " + rr.length);

        HashSet hs = new HashSet<String>();
        //        HashSet hsEI = new HashSet<String>();
        if (rr.length > 0) {
            for (Row r : rr) {
                hs.add(r.getAttribute("DocId"));
                //                hsEI.add(r.getAttribute("OcId"));

            }
        }
        _log.info("hash size is " + hs.size() + "   ");
        Iterator itr = hs.iterator();
        //        Iterator itr1 = hsEI.iterator();
        while (itr.hasNext()) {
            String docid = itr.next().toString();

            Row[] rr1 = lovExpns.getFilteredRows("DocId", docid);
            _log.info("expense first ------ " + rr1.length + "   " + docid);
            if (rr1.length > 0) {
                for (Row r : rr1) {
                    Row srcRw = InvcSrc.createRow();
                    srcRw.setAttribute("DocIdSrc", r.getAttribute("DocId"));
                    srcRw.setAttribute("DocTypeSrc", r.getAttribute("DocTypeSrc"));
                    srcRw.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                    srcRw.setAttribute("FileNo", r.getAttribute("FileNo"));
                    srcRw.setAttribute("HoOrgId", gethoOrgId());
                    _log.info("bfor ins insrc-----");
                    InvcSrc.insertRow(srcRw);
                    //while(itr1.hasNext())     {

                    /*
                    String expId = itr1.next().toString();

                    RowQualifier rq1 = new RowQualifier(expnsvo);
                    rq1.setWhereClause("DocId = '"+docid +"' and  OcId = '"+expId+"'");
                    */

                    //      Row [] rr3=expnsvo.getFilteredRows(rq1);
                    Row[] rr3 = expnsvo.getFilteredRows("DocId", docid);
                    //        _log.info("----------doc---"+docid+"  "+expId+"   "+rr3.length);
                    if (rr3.length > 0) {
                        for (Row r4 : rr3) {
                            Row lineRw = InvcLines.createRow();
                            _log.info("-------invcLine ------ " + rr3.length + "-----");
                            lineRw.setAttribute("ExpType", r4.getAttribute("ExpnsType"));
                            lineRw.setAttribute("ExpId", r4.getAttribute("OcId"));
                            lineRw.setAttribute("ExpAmtSp", r4.getAttribute("OcAmtSp"));
                            lineRw.setAttribute("ExpAmtBs", r4.getAttribute("OcAmtBs"));
                            lineRw.setAttribute("TotAmtSp", r4.getAttribute("OcAmtSp"));
                            lineRw.setAttribute("TotAmtBs", r4.getAttribute("OcAmtBs"));
                            lineRw.setAttribute("HoOrgId", gethoOrgId());
                            _log.info("bfor ins inLines-----" + rr3.length);
                            InvcLines.insertRow(lineRw);
                        }
                    }
                    //}
                }
            }
        }

        this.getMmExpnsInvcSrc().executeQuery();
        this.getMmExpnsInvcLines().executeQuery();
        this.getMmExpnsInvcLines1().executeQuery();

        return null;
    }


    public String generateExpenceNo() {
        Row invRw = this.getMmExpnsInvc().getCurrentRow();
        Integer fy = (Integer) invRw.getAttribute("FyId");
        String invNo = null;
        if (invRw.getAttribute("InvcNo") == null) {
            invNo = (String) (callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?,?,?)", new Object[] {
                                                 getSlocId(), getcldId(), getOrgId(), "MM$EXPNS$INVC", new Integer(0),
                                                 fy, 18543, 0
            }));
            _log.info(fy + "--InvNo generated--" + invNo);
            invRw.setAttribute("InvcNo", invNo);
            invRw.setAttribute("DrftInvcNo", invNo);


        } else {
            invNo = invRw.getAttribute("InvcNo").toString();
        }
        return null;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            String msg = e.getMessage();
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);

            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Container's getter for LovExpenceSrc1.
     * @return LovExpenceSrc1
     */
    public ViewObjectImpl getLovExpenceSrc() {
        return (ViewObjectImpl) findViewObject("LovExpenceSrc");
    }

    /**
     * Container's getter for LovExpnctype1.
     * @return LovExpnctype1
     */
    public ViewObjectImpl getLovExpnctype() {
        return (ViewObjectImpl) findViewObject("LovExpnctype");
    }

    /**
     * Container's getter for LovDispFrmSrch1.
     * @return LovDispFrmSrch1
     */
    public ViewObjectImpl getLovDispFrmSrch() {
        return (ViewObjectImpl) findViewObject("LovDispFrmSrch");
    }

    public void search() {
        ViewObjectImpl transvo = this.getTransSearch();
        Row curr = transvo.getCurrentRow();
        ViewObjectImpl expnsInvc = this.getSearchExpnsInvc();
        expnsInvc.setNamedWhereClauseParam("bindCldId", getcldId());
        expnsInvc.setNamedWhereClauseParam("bindOrgId", getOrgId());
        expnsInvc.setNamedWhereClauseParam("bindSlocId", getSlocId());
        expnsInvc.setNamedWhereClauseParam("bindHoOrgId", gethoOrgId());
        expnsInvc.setNamedWhereClauseParam("bindEoId", curr.getAttribute("TransEntity"));
        expnsInvc.setNamedWhereClauseParam("bindFmDt", curr.getAttribute("TranFmDate"));
        expnsInvc.setNamedWhereClauseParam("bindInvcNo", curr.getAttribute("TransInvcNo"));
        expnsInvc.setNamedWhereClauseParam("bindInvcStat", curr.getAttribute("TransInvcStat"));
        expnsInvc.setNamedWhereClauseParam("bindToDt", curr.getAttribute("TransToDate"));
        expnsInvc.executeQuery();
    }

    public void reset() {
        ViewObjectImpl transvo = this.getTransSearch();
        ViewObjectImpl expnsInvc = this.getSearchExpnsInvc();
        expnsInvc.setNamedWhereClauseParam("bindCldId", "-1");
        expnsInvc.setNamedWhereClauseParam("bindOrgId", "-1");
        expnsInvc.setNamedWhereClauseParam("bindSlocId", null);
        expnsInvc.setNamedWhereClauseParam("bindHoOrgId", null);
        expnsInvc.setNamedWhereClauseParam("bindEoId", null);
        expnsInvc.setNamedWhereClauseParam("bindFmDt", null);
        expnsInvc.setNamedWhereClauseParam("bindInvcNo", null);
        expnsInvc.setNamedWhereClauseParam("bindInvcStat", null);
        expnsInvc.setNamedWhereClauseParam("bindToDt", null);
        expnsInvc.executeQuery();
    }

    /**
     * Method used to get the COA id for the selected EO id(Supplier)
     * return >0 : Coa ID
     *        -2 : coa is not defined for this eo in this organisation
     *        -3 : multiple coa available for this eo in this org
     *        -4 : Other errors
     * */
    public Integer getCoaForEo(String hoOrgId, String eoName) {
        Row invc = this.getMmExpnsInvc().getCurrentRow();

        String cldId = invc.getAttribute("CldId").toString();
        String orgId = invc.getAttribute("OrgId").toString();
        Integer sloc = Integer.parseInt(invc.getAttribute("SlocId").toString());
        // _log.info("invoice type is " + invc.getAttribute("InvcType"));
        ViewObjectImpl vo = this.getLovSupplierTune();
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", sloc);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindEoNm", eoName);
        vo.executeQuery();
        System.out.println("get row cout  :::::: " + vo.getRowCount());
        //Row[] filRw=this.getLovSupplier1().getFilteredRows(new RowQualifier("EoNm='"+eoName+"' and SlocId="+sloc+" and OrgId='"+orgId+"' and CldId='"+cldId+"' and HoOrgId='"+hoOrgId+"'"));
        //Row[] filRw=vo.getFilteredRows("EoNm", eoName);
        RowQualifier rq11 = new RowQualifier(vo);
        rq11.setWhereClause("EoNm= '" + eoName + "'");
        Row[] filRw = vo.getFilteredRows(rq11);
        System.out.println("cld sloc and org " + cldId + sloc + orgId);
        System.out.println("no. of rows found " + eoName + "       " + filRw.length + " experssion is " +
                           rq11.getExprStr());
        Integer eoId = 0;
        Integer ret = -1;
        //   if(invc.getAttribute("InvcType")!=null){
        if (filRw.length > 0) {
            eoId = (Integer) filRw[0].getAttribute("EoId");
            ret = (Integer) (callStoredFunction(Types.INTEGER, "APP.fn_get_eo_coa_id(?,?,?,?,?)", new Object[] {
                                                getcldId(), getSlocId(), gethoOrgId(), getOrgId(), eoId
            }));
            if (invc.getAttribute("CoaId") == null && ret > 0) {
                invc.setAttribute("CoaId", ret);
            }
        }
        // }
        _log.info(eoId + "--EO ID--COA ID--" + ret);

        return ret;
    }

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Object obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getMmExpnsInvc().getCurrentRow().getAttribute("DocId").toString();

        _log.info("DocNo-------" + DocNo + "  DocId----" + DocId + "  WfNo----" + WfNo + "DocNo1-----" + DocNo);
        Object obj = callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo, levelFrm,
                                        levelTo, action, remark, amount
        });
        _log.info("function return a value inthe txn is " + obj);
        Integer temp = Integer.parseInt(obj.toString());
        return temp;

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getMmExpnsInvc().getCurrentRow().getAttribute("DocId").toString();
        Object obj = Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, 0
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }

    public String getUsrNm(Integer usrId) {
        ViewObjectImpl usrvo = this.getLovUsr();
        String usrname = null;
        if (usrId != null) {
            /*  usrvo.setNamedWhereClauseParam("bindSlocId", slocId);
            usrvo.setNamedWhereClauseParam("bindUsrId", null);
            usrvo.executeQuery(); */



            // usrvo.setNamedWhereClauseParam("bind", arg1);
            Row[] rr = usrvo.getFilteredRows("UsrId", usrId);
            if (rr.length > 0) {
                usrname = rr[0].getAttribute("UsrName").toString();
                return rr[0].getAttribute("UsrName").toString();
            }
        }

        return usrname;
    }

    /**
     * Container's getter for LovSupplierTune1.
     * @return LovSupplierTune1
     */
    public ViewObjectImpl getLovSupplierTune() {
        return (ViewObjectImpl) findViewObject("LovSupplierTune");
    }

    /**
     * Container's getter for LovUsr1.
     * @return LovUsr1
     */
    public ViewObjectImpl getLovUsr() {
        return (ViewObjectImpl) findViewObject("LovUsr");
    }

    public void setauthStat() {
        String wfRtn = resolvEl("#{pageFlowScope.WF_RET_VALUE}").toString();
        Row curr = this.getMmExpnsInvc().getCurrentRow();

        if (wfRtn.equalsIgnoreCase("A")) {
            curr.setAttribute("InvcStat", 863); //AuthStat
            curr.setAttribute("AuthStat", "Y");
            String DocId = getMmExpnsInvc().getCurrentRow().getAttribute("DocId").toString();
            Timestamp docDt = (Timestamp) getMmExpnsInvc().getCurrentRow().getAttribute("DocDt");
            Integer coaId = (Integer) getMmExpnsInvc().getCurrentRow().getAttribute("CoaId");
            Object obj = Integer.parseInt(callStoredFunction(Types.NUMERIC, "MM_INS_GL_EXPNS_INV_VOU(?,?,?,?,?,?,?,?)", new Object[] {
                                                             getcldId(), getSlocId(), gethoOrgId(), getOrgId(), DocId,
                                                             coaId, docDt, getUsrId()
            }).toString());
            _log.info("--called gl ins-------------" + getOrgId() + DocId + docDt + getUsrId() + "--" + coaId);

        }
        if (wfRtn.equalsIgnoreCase("F")) {
            curr.setAttribute("InvcStat", 862);

        }

    }

    public void applyFlter() {
        ViewObjectImpl vo = this.getMmExpnsInvc();
        String docid = resolvEl("#{pageFlowScope.DOC_ID}");
        //#{pageFlowScope.DOC_ID}
        ViewCriteria vc = vo.getViewCriteria("MmExpnsInvcVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", getcldId());
        vo.setNamedWhereClauseParam("bindDocId", docid);
        vo.setNamedWhereClauseParam("bindHoOrgId", gethoOrgId());
        vo.setNamedWhereClauseParam("bindOrgId", getOrgId());
        vo.setNamedWhereClauseParam("bindSlocId", getSlocId());
        vo.executeQuery();

    }

    public void resetSearchOC() {
        ViewObjectImpl ocVo = this.getLovSearchExpnc();
        ocVo.setNamedWhereClauseParam("bindCldId", null);
        ocVo.setNamedWhereClauseParam("bindSlocId", -1);
        ocVo.setNamedWhereClauseParam("bindOrgId", null);
        ocVo.setNamedWhereClauseParam("bindEoId", -1);
        ocVo.setNamedWhereClauseParam("bindEoCurrId", null);
        ocVo.executeQuery();
    }

    public Integer countCkbx() {
        ViewObjectImpl vo = this.getLovSearchExpnc();
        Row r = this.getMmExpnsInvc().getCurrentRow();
        String docId = r.getAttribute("DocId").toString();
        _log.info("DocId--------------" + docId);
        Integer count = new Integer(0);
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("DocIdSrc = '" + docId + "' and  TransChkFlg = 'Y' ");
        Row[] ro = vo.getFilteredRows("TransChkFlg", "Y");
        count = ro.length;
        _log.info("chkbox count--------" + count + " exp------" + rq.getExprStr());
        return count;
    }

    /**
     * Container's getter for MmExpnsTr1.
     * @return MmExpnsTr1
     */
    public ViewObjectImpl getMmExpnsTr() {
        return (ViewObjectImpl) findViewObject("MmExpnsTr");
    }

    /**
     * Container's getter for MmExpansLinesToTrVL1.
     * @return MmExpansLinesToTrVL1
     */
    public ViewLinkImpl getMmExpansLinesToTrVL1() {
        return (ViewLinkImpl) findViewLink("MmExpansLinesToTrVL1");
    }

    /**
     * Container's getter for MmExpnsTrLines1.
     * @return MmExpnsTrLines1
     */
    public ViewObjectImpl getMmExpnsTrLines() {
        return (ViewObjectImpl) findViewObject("MmExpnsTrLines");
    }

    /**
     * Container's getter for FkMmExpnsTrLinesVL1.
     * @return FkMmExpnsTrLinesVL1
     */
    public ViewLinkImpl getFkMmExpnsTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("FkMmExpnsTrLinesVL1");
    }

    /**
     * Container's getter for LovTaxCoaId1.
     * @return LovTaxCoaId1
     */
    public ViewObjectImpl getLovTaxCoaId() {
        return (ViewObjectImpl) findViewObject("LovTaxCoaId");
    }

    /**
     * Container's getter for LovTaxTypeId1.
     * @return LovTaxTypeId1
     */
    public ViewObjectImpl getLovTaxTypeId() {
        return (ViewObjectImpl) findViewObject("LovTaxTypeId");
    }

    public String createNewTaxRule(String docIdSrc, String expId, Number taxableAmt) {
        Row taxRuleRow = null;
        String txnId = (String) this.getMmExpnsInvc().getCurrentRow().getAttribute("DocId");
        RowQualifier rq = new RowQualifier(this.getMmExpnsTr1());
        rq.setWhereClause("DocId = '" + txnId + "' and DocIdSrc='" + docIdSrc + "' and ExpId = '" + expId + "' ");
        Row[] taxRuleFRows = this.getMmExpnsTr1().getFilteredRows(rq);
        _log.info(rq.getExprStr() + "Tax Rule  Rows Size = " + taxRuleFRows.length);
        Number convFactor = new Number(1);
        if (this.getMmExpnsInvc().getCurrentRow().getAttribute("CurrConvFctr") != null) {
            convFactor = (Number) this.getMmExpnsInvc().getCurrentRow().getAttribute("CurrConvFctr");
        }
        //Row[] taxRuleFRows = this.getMmExpnsTr().getFilteredRows("DocId", txnId);
        _log.info("Tax Rule  Rows Size = " + taxRuleFRows.length);
        if (taxRuleFRows.length > 0) //TaxRule already Exist
        {
            _log.info(" else part");
            if (taxRuleFRows.length > 0)
                taxRuleRow = taxRuleFRows[0]; //Get Tax Rule Row

            //if tax already added and amount is different then remove tax lines and tax and add new tax
            //            if (taxRuleRow.getAttribute("TaxableAmt") != null &&
            //                ((Number) taxRuleRow.getAttribute("TaxableAmt")).compareTo((Number) this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTaxableAmt")) !=
            //                0) {
            //                //remove tax
            //
            //
            //
            //               // this.resetTrAndTrLine();
            //
            //                /*    //          this.getPmsSiteRcdTrLine().setRangeSize(-1);
            //                Row lineRow[] = this.getPmsSiteRcdTrLine().getFilteredRows("DocId", txnId);
            //                _log.info("Tax Rule Line Rows Size = " + lineRow.length);
            //                for (Row lr : lineRow) {
            //                    lr.remove();
            //                }
            //                taxRuleRow.remove(); */
            //
            //                //create New Tax
            //                taxRuleRow = this.getPmsSiteRcdTr().createRow();
            //                taxRuleRow.setAttribute("DocId", this.getPmsSiteRcd().getCurrentRow().getAttribute("DocId"));
            //                taxRuleRow.setAttribute("TaxableAmt",
            //                                        this.getPmsSiteRcd().getCurrentRow().getAttribute("TransTaxableAmt"));
            //                taxRuleRow.setAttribute("CurrIdSp", this.getPmsSiteRcd().getCurrentRow().getAttribute("CurrIdSp"));
            //                taxRuleRow.setAttribute("DocDt", this.getPmsSiteRcd().getCurrentRow().getAttribute("RcdDt"));
            //                taxRuleRow.setAttribute("PrjId", this.getPmsSiteRcd().getCurrentRow().getAttribute("PrjId"));
            //                this.getPmsSiteRcdTr().insertRow(taxRuleRow);
            //            }
            //if tax already added and amount is also same then do nothing
            return null;
        } else {
            _log.info(" else part");
            taxRuleRow = this.getMmExpnsTr().createRow();
            taxRuleRow.setAttribute("DocId", txnId);
            taxRuleRow.setAttribute("TaxableAmtSp", taxableAmt);
            taxRuleRow.setAttribute("TaxableAmtBs", taxableAmt.multiply(convFactor));
            taxRuleRow.setAttribute("ExpId", expId);
            taxRuleRow.setAttribute("TaxExmptFlg", "N");
            taxRuleRow.setAttribute("TaxRuleFlg", "I");
            this.getMmExpnsTr().insertRow(taxRuleRow);
            return null;
        }
    }


    public String resetTrAndTrLine() {
        String docId = (String) this.getMmExpnsInvc().getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voTr = this.getMmExpnsTr();
        RowQualifier rq = new RowQualifier(this.getMmExpnsTrLines1());
        rq.setWhereClause("DocId ='" + docId + "' and DocIdSrc = '" + voTr.getCurrentRow().getAttribute("DocIdSrc") +
                          "' and ExpId = '" + voTr.getCurrentRow().getAttribute("ExpId") + "' ");
        Row lineRows[] = this.getMmExpnsTrLines1().getFilteredRows(rq);
        _log.info(lineRows.length + "    " + rq.getExprStr());

        //Row lineRows[] = this.getMmExpnsTrLines1().getFilteredRows("DocId", docId);
        _log.info("No. of Rows in Line=" + lineRows.length);
        for (Row row : lineRows) {
            row.remove();
        }
        this.getMmExpnsTrLines().executeQuery();
        Row trRow[] = this.getMmExpnsTr().getFilteredRows("DocId", docId);
        _log.info("No. of Rows in TR=" + trRow.length);


        if (trRow.length > 0) {

            ViewObjectImpl vo = this.getMmExpnsInvcLines1();
            RowQualifier rqnew = new RowQualifier(vo);
            rqnew.setWhereClause("DocId ='" + docId + "' and  DocIdSrc='" +
                                 voTr.getCurrentRow().getAttribute("DocIdSrc") + "' and ExpId ='" +
                                 voTr.getCurrentRow().getAttribute("ExpId") + "' and ExpType=" +
                                 voTr.getCurrentRow().getAttribute("ExpType") + " ");
            Row[] rr1 = vo.getFilteredRows(rqnew);
            _log.info(rq.getExprStr() + "   " + rr1.length);
            if (rr1.length > 0) {

                rr1[0].setAttribute("TaxAmtSp", 0);
                rr1[0].setAttribute("TaxAmtBs", 0);

                rr1[0].setAttribute("TotAmtSp", rr1[0].getAttribute("ExpAmtSp"));
                rr1[0].setAttribute("TotAmtBs", rr1[0].getAttribute("ExpAmtBs"));
            }


            trRow[0].remove();
        }


        this.getDBTransaction().postChanges();
        if (trRow.length == 0)
            return "N";
        return "Y";
    }


    public void populateTaxRuleLines(String taxRuleNm) {


        Integer taxRuleId = null;
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("TaxRuleIdBind", null);
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("TaxRuleDescBind", taxRuleNm);
        this.getLovTaxRuleIdForDisp().executeQuery();

        Row[] itms = this.getLovTaxRuleIdForDisp().getFilteredRows("TaxRuleDesc", taxRuleNm);
        _log.info("lenth   " + itms.length);
        if (itms.length > 0) {
            if (itms[0].getAttribute("TaxRuleId") != null) {
                taxRuleId = Integer.parseInt(itms[0].getAttribute("TaxRuleId").toString());
            }
        }
        //        if (taxRuleId.compareTo(new Integer(0)) == 1) {
        //            _log.info("taxRuleId  :: " + taxRuleId);
        //            beoTrVo.getCurrentRow().setAttribute("TaxRuleId", taxRuleId);
        //        }
        Number convFactor = new Number(1);
        if (this.getMmExpnsInvc().getCurrentRow().getAttribute("CurrConvFctr") != null) {
            convFactor = (Number) this.getMmExpnsInvc().getCurrentRow().getAttribute("CurrConvFctr");
        }

        Row trRow = this.getMmExpnsTr().getCurrentRow();

        Number taxableAmt = (Number) trRow.getAttribute("TaxableAmtSp");
        Object ret =
            ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                       new StringBuilder("MM.MM_INS_EXPN_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                       EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                       trRow.getAttribute("DocId"), trRow.getAttribute("DocIdSrc"), 1,
                                       trRow.getAttribute("ExpId"), trRow.getAttribute("ExpType"), taxRuleId,
                                       trRow.getAttribute("TaxableAmtSp"), trRow.getAttribute("TaxableAmtSp"), "I",
                                       convFactor, "N", "N"
        }, Types.VARCHAR);

        _log.info(convFactor + "  Return Value =" + ret);
        // this.getPmsSiteRcdTr1().executeQuery();
        this.getMmExpnsTrLines1().executeQuery();
        this.getMmExpnsTrLines().executeQuery();
        Number taxAmt = new Number(0);
        if (ret != null) {
            try {
                taxAmt = new Number(ret);
            } catch (SQLException e) {
            }

        }
        _log.info(" tax amount " + taxAmt);
        _log.info(this.getMmExpnsInvcLines().getCurrentRow().getAttribute("ExpId") + " ExpId  " +
                  this.getMmExpnsInvcLines().getCurrentRow().getAttribute("ExpAmtSp") + "  exp amt sp " +
                  this.getMmExpnsInvcLines().getCurrentRow().getAttribute("DocIdSrc") + " doc Id src");
        trRow.setAttribute("TaxAmt", taxAmt);

        ViewObjectImpl vo = this.getMmExpnsInvcLines1();
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("DocId ='" + trRow.getAttribute("DocId") + "' and  DocIdSrc='" +
                          trRow.getAttribute("DocIdSrc") + "' and ExpId ='" + trRow.getAttribute("ExpId") +
                          "' and ExpType=" + trRow.getAttribute("ExpType") + " ");
        Row[] rr = vo.getFilteredRows(rq);
        _log.info(rq.getExprStr() + "   " + rr.length);
        if (rr.length > 0) {
            rr[0].setAttribute("TaxAmtSp", taxAmt);
            rr[0].setAttribute("TaxAmtBs", taxAmt.multiply(convFactor));

            rr[0].setAttribute("TotAmtSp", taxAmt.add(taxableAmt));
            rr[0].setAttribute("TotAmtBs", (taxAmt.add(taxableAmt)).multiply(convFactor));
        }

    }

    public Integer applyTaxDirect(Number taxableAmt) {
        _log.info("taxableAmt   " + taxableAmt);
        _log.info(this.getMmExpnsInvcLines().getCurrentRow().getAttribute("ExpAmtBs") + " curr " +
                  this.getMmExpnsInvcLines().getCurrentRow().getAttribute("ExpId"));
        return null;
    }

    public Integer applyTaxDirectLine(String docId, String docIdSrc, String expId, Integer expType, Number taxableAmt) {

        _log.info("docId " + docId + " docId src " + docIdSrc + " expid " + expId + "  exp type " + expType);

        RowQualifier rq = new RowQualifier(this.getMmExpnsTr1());
        rq.setWhereClause("DocId = '" + docId + "' and DocIdSrc='" + docIdSrc + "' and ExpId = '" + expId + "' ");
        Row[] taxRuleFRows = this.getMmExpnsTr1().getFilteredRows(rq);
        _log.info(rq.getExprStr() + "Tax Rule  Rows Size = " + taxRuleFRows.length);
        Number convFactor = new Number(1);
        if (this.getMmExpnsInvc().getCurrentRow().getAttribute("CurrConvFctr") != null) {
            convFactor = (Number) this.getMmExpnsInvc().getCurrentRow().getAttribute("CurrConvFctr");
        }
        Integer taxRuleId = null;

        if (taxRuleFRows.length > 0) {
            taxRuleId = Integer.parseInt(taxRuleFRows[0].getAttribute("TaxRuleId").toString());
        }
        if (taxRuleId != null) {
            this.getDBTransaction().postChanges();
            ;
            Object ret =
                ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                           new StringBuilder("MM.MM_INS_EXPN_INV_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                           EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), docId, docIdSrc,
                                           1, expId, expType, taxRuleId, taxableAmt, taxableAmt, "I", convFactor, "N",
                                           "Y"
            }, Types.VARCHAR);

            _log.info(convFactor + "  Return Value =" + ret);
            // this.getPmsSiteRcdTr1().executeQuery();
            this.getMmExpnsTr().executeQuery();
            this.getMmExpnsTr1().executeQuery();
            this.getMmExpnsTrLines1().executeQuery();
            this.getMmExpnsTrLines().executeQuery();
            Number taxAmt = new Number(0);
            if (ret != null) {
                try {
                    taxAmt = new Number(ret);
                } catch (SQLException e) {
                }

            }
            _log.info(" tax amount " + taxAmt);
            _log.info(this.getMmExpnsInvcLines().getCurrentRow().getAttribute("ExpId") + " ExpId  " +
                      this.getMmExpnsInvcLines().getCurrentRow().getAttribute("ExpAmtSp") + "  exp amt sp " +
                      this.getMmExpnsInvcLines().getCurrentRow().getAttribute("DocIdSrc") + " doc Id src");

            ViewObjectImpl vo = this.getMmExpnsInvcLines1();
            RowQualifier rqnew = new RowQualifier(vo);
            rqnew.setWhereClause("DocId ='" + docId + "' and  DocIdSrc='" + docIdSrc + "' and ExpId ='" + expId +
                                 "' and ExpType=" + expType + " ");
            Row[] rr1 = vo.getFilteredRows(rqnew);
            _log.info(rq.getExprStr() + "   " + rr1.length);
            if (rr1.length > 0) {
                rr1[0].setAttribute("TaxAmtSp", taxAmt);
                rr1[0].setAttribute("TaxAmtBs", taxAmt.multiply(convFactor).round(6));

                rr1[0].setAttribute("TotAmtSp", taxAmt.add(taxableAmt));
                rr1[0].setAttribute("TotAmtBs", (taxAmt.add(taxableAmt)).multiply(convFactor).round(6));
                rr1[0].setAttribute("ExpAmtBs", (taxableAmt.multiply(convFactor)).round(6));
            }

        } else {

            ViewObjectImpl vo = this.getMmExpnsInvcLines1();
            RowQualifier rqnew = new RowQualifier(vo);
            rqnew.setWhereClause("DocId ='" + docId + "' and  DocIdSrc='" + docIdSrc + "' and ExpId ='" + expId +
                                 "' and ExpType=" + expType + " ");
            Row[] rr1 = vo.getFilteredRows(rqnew);
            _log.info(rq.getExprStr() + "  4343 " + rr1.length);
            if (rr1.length > 0) {
                rr1[0].setAttribute("ExpAmtBs", (taxableAmt.multiply(convFactor)).round(6));

            }

        }


        _log.info("taxableAmt   " + taxableAmt);
        _log.info(this.getMmExpnsInvcLines().getCurrentRow().getAttribute("ExpAmtBs") + " curr " +
                  this.getMmExpnsInvcLines().getCurrentRow().getAttribute("ExpId"));
        return null;
    }

    /**
     * Container's getter for MmExpnsTr1.
     * @return MmExpnsTr1
     */
    public ViewObjectImpl getMmExpnsTr1() {
        return (ViewObjectImpl) findViewObject("MmExpnsTr1");
    }

    /**
     * Container's getter for MmExpnsTrLines1.
     * @return MmExpnsTrLines1
     */
    public ViewObjectImpl getMmExpnsTrLines1() {
        return (ViewObjectImpl) findViewObject("MmExpnsTrLines1");
    }

    /**
     * Container's getter for LovTaxRuleIdForDisp1.
     * @return LovTaxRuleIdForDisp1
     */
    public ViewObjectImpl getLovTaxRuleIdForDisp() {
        return (ViewObjectImpl) findViewObject("LovTaxRuleIdForDisp");
    }

    /**
     * Container's getter for MmExpnsInvc1.
     * @return MmExpnsInvc1
     */
    public ViewObjectImpl getMmExpnsInvc1() {
        return (ViewObjectImpl) findViewObject("MmExpnsInvc1");
    }

    /**
     * Container's getter for MmExpnsInvcLines1.
     * @return MmExpnsInvcLines1
     */
    public ViewObjectImpl getMmExpnsInvcLines1() {
        return (ViewObjectImpl) findViewObject("MmExpnsInvcLines1");
    }

    public Integer chkManualOcDetails() {
        ViewObjectImpl vo = this.getMmExpnsInvc();
        Row rr = vo.getCurrentRow();
        //TransFileNo TransManualOc  TransManualOcAmt TransBoeDocId
        if (rr.getAttribute("TransFileNo") == null || rr.getAttribute("TransFileNo").toString().length() < 0) {
            return 1;
        }

        if (rr.getAttribute("TransManualOc") == null) {
            return 2;
        }

        if (rr.getAttribute("TransManualOcAmt") == null) {
            return 3;
        }

        if (rr.getAttribute("TransManualOcAmt") != null &&
            zero.compareTo((Number) (rr.getAttribute("TransManualOcAmt"))) == 1) {
            return 4;
        }

        return 0;
    }

    public void addManualOcDetails() {
        ViewObjectImpl expVo = this.getMmExpnsInvc();
        ViewObjectImpl expSrc = this.getMmExpnsInvcSrc();
        ViewObjectImpl expItm = this.getMmExpnsInvcLines();
        Row currExp = expVo.getCurrentRow();

        Number currFac = (Number) expVo.getCurrentRow().getAttribute("CurrConvFctr");
        //TransFileNo TransManualOc  TransManualOcAmt TransBoeDocId  TransFileName
        RowQualifier rq = new RowQualifier(expSrc);
        rq.setWhereClause("DocId ='" + currExp.getAttribute("DocId") + "' and DocIdSrc = '" +
                          currExp.getAttribute("TransBoeDocId") + "'");
        Row rr[] = expSrc.getFilteredRows(rq);
        _log.info(rr.length + "  filter ch " + rq.getExprStr());
        _log.info(currExp.getAttribute("TransFileNo") + "  loggbnb    " + currExp.getAttribute("TransManualOc") +
                  "  docIdSrc   " + currExp.getAttribute("TransBoeDocId"));
        Number totAmtBs = (Number) currFac.multiply((Number) currExp.getAttribute("TransManualOcAmt")).round(6);

        if (rr.length > 0) {
            Row lineRw = expItm.createRow();
            _log.info("-------invcLine ------ -----");
            lineRw.setAttribute("DocIdSrc", currExp.getAttribute("TransBoeDocId"));
            lineRw.setAttribute("ExpType", 860);
            lineRw.setAttribute("ExpId", currExp.getAttribute("TransManualOc"));
            lineRw.setAttribute("ExpAmtSp", currExp.getAttribute("TransManualOcAmt"));
            lineRw.setAttribute("ExpAmtBs", totAmtBs);
            lineRw.setAttribute("TotAmtSp", currExp.getAttribute("TransManualOcAmt"));
            lineRw.setAttribute("TotAmtBs", totAmtBs);
            lineRw.setAttribute("HoOrgId", gethoOrgId());
            _log.info("bfor ins inLines-----");
            expItm.insertRow(lineRw);
        } else {
            Row srcRw = expSrc.createRow();
            srcRw.setAttribute("DocIdSrc", currExp.getAttribute("TransBoeDocId"));
            srcRw.setAttribute("DocTypeSrc", 865);
            srcRw.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
            srcRw.setAttribute("FileNo", currExp.getAttribute("TransFileName"));
            srcRw.setAttribute("HoOrgId", gethoOrgId());
            _log.info("bfor ins insrc-----");
            expSrc.insertRow(srcRw);

            Row lineRwNew = expItm.createRow();
            _log.info("-------invcLine ------ -----");
            lineRwNew.setAttribute("DocIdSrc", currExp.getAttribute("TransBoeDocId"));
            lineRwNew.setAttribute("ExpType", 860);
            lineRwNew.setAttribute("ExpId", currExp.getAttribute("TransManualOc"));
            lineRwNew.setAttribute("ExpAmtSp", currExp.getAttribute("TransManualOcAmt"));
            lineRwNew.setAttribute("ExpAmtBs", totAmtBs);
            lineRwNew.setAttribute("TotAmtSp", currExp.getAttribute("TransManualOcAmt"));
            lineRwNew.setAttribute("TotAmtBs", totAmtBs);
            lineRwNew.setAttribute("HoOrgId", gethoOrgId());
            _log.info("bfor ins inLines-----");
            expItm.insertRow(lineRwNew);

        }

        currExp.setAttribute("TransFileNo", null);
        currExp.setAttribute("TransManualOcAmt", null);
        currExp.setAttribute("TransBoeDocId", null);
        currExp.setAttribute("TransManualOc", null);
        currExp.setAttribute("TransFileName", null);

    }

    public Integer checkOcDuplicate() {
        ViewObjectImpl expVo = this.getMmExpnsInvc();
        ViewObjectImpl expItm = this.getMmExpnsInvcLines1();
        Row currExp = expVo.getCurrentRow();
        RowQualifier rq = new RowQualifier(expItm);
        rq.setWhereClause("DocId ='" + currExp.getAttribute("DocId") + "' and DocIdSrc = '" +
                          currExp.getAttribute("TransBoeDocId") + "' and ExpId ='" +
                          currExp.getAttribute("TransManualOc") + "' ");
        Row rr[] = expItm.getFilteredRows(rq);
        _log.info(rr.length + "  filter ch " + rq.getExprStr());
        if (rr.length > 0) {
            return 1;
        }
        return 0;
    }

    /**
     * Container's getter for LovOcNmView1.
     * @return LovOcNmView1
     */
    public ViewObjectImpl getLovOcNmView() {
        return (ViewObjectImpl) findViewObject("LovOcNmView");
    }

    /**
     * Container's getter for LovDispCoaNm1.
     * @return LovDispCoaNm1
     */
    public LovDispCoaNmVOImpl getLovDispCoaNm1() {
        return (LovDispCoaNmVOImpl) findViewObject("LovDispCoaNm1");
    }
}

