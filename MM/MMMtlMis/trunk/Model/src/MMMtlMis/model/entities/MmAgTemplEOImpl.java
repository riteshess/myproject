package MMMtlMis.model.entities;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 19 12:05:53 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmAgTemplEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public  Integer sloc_Id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    String org_Id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String cld_Id=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    int usr_Id=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    public enum AttributesEnum {
        CldId {
            public Object get(MmAgTemplEOImpl obj) {
                return obj.getCldId();
            }

            public void put(MmAgTemplEOImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(MmAgTemplEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmAgTemplEOImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        OrgId {
            public Object get(MmAgTemplEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmAgTemplEOImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        TmplId {
            public Object get(MmAgTemplEOImpl obj) {
                return obj.getTmplId();
            }

            public void put(MmAgTemplEOImpl obj, Object value) {
                obj.setTmplId((String) value);
            }
        }
        ,
        TmplNm {
            public Object get(MmAgTemplEOImpl obj) {
                return obj.getTmplNm();
            }

            public void put(MmAgTemplEOImpl obj, Object value) {
                obj.setTmplNm((String) value);
            }
        }
        ,
        BktRangeType {
            public Object get(MmAgTemplEOImpl obj) {
                return obj.getBktRangeType();
            }

            public void put(MmAgTemplEOImpl obj, Object value) {
                obj.setBktRangeType((Integer) value);
            }
        }
        ,
        MmAgTemplItem {
            public Object get(MmAgTemplEOImpl obj) {
                return obj.getMmAgTemplItem();
            }

            public void put(MmAgTemplEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MmAgTemplEOImpl object);

        public abstract void put(MmAgTemplEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int TMPLID = AttributesEnum.TmplId.index();
    public static final int TMPLNM = AttributesEnum.TmplNm.index();
    public static final int BKTRANGETYPE = AttributesEnum.BktRangeType.index();
    public static final int MMAGTEMPLITEM = AttributesEnum.MmAgTemplItem.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmAgTemplEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("MMMtlMis.model.entities.MmAgTemplEO");
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }    
    
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for TmplId, using the alias name TmplId.
     * @return the value of TmplId
     */
    public String getTmplId() {
        return (String) getAttributeInternal(TMPLID);
    }

    /**
     * Sets <code>value</code> as the attribute value for TmplId.
     * @param value value to set the TmplId
     */
    public void setTmplId(String value) {
        setAttributeInternal(TMPLID, value);
    }

    /**
     * Gets the attribute value for TmplNm, using the alias name TmplNm.
     * @return the value of TmplNm
     */
    public String getTmplNm() {
        return (String) getAttributeInternal(TMPLNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for TmplNm.
     * @param value value to set the TmplNm
     */
    public void setTmplNm(String value) {
        setAttributeInternal(TMPLNM, value);
    }

    /**
     * Gets the attribute value for BktRangeType, using the alias name BktRangeType.
     * @return the value of BktRangeType
     */
    public Integer getBktRangeType() {
        return (Integer) getAttributeInternal(BKTRANGETYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for BktRangeType.
     * @param value value to set the BktRangeType
     */
    public void setBktRangeType(Integer value) {
        setAttributeInternal(BKTRANGETYPE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMmAgTemplItem() {
        return (RowIterator) getAttributeInternal(MMAGTEMPLITEM);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param tmplId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String tmplId) {
        return new Key(new Object[] { cldId, slocId, orgId, tmplId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        String tempid=null;
        setCldId(cld_Id);
        setSlocId(sloc_Id);
        setOrgId(org_Id);
        tempid = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {sloc_Id,cld_Id,org_Id,"MM$AG$TMPL", null,null});
        setTmplId(tempid);
        System.out.println("Temp Id created::"+tempid);
        //super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //super.lock();
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

