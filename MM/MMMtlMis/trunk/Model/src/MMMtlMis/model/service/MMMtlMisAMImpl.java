package MMMtlMis.model.service;


//import java.math.BigDecimal;
import MMMtlMis.model.service.common.MMMtlMisAM;
import MMMtlMis.model.view.MmMainVOImpl;
import MMMtlMis.model.views.MmAgTemplItemVOImpl;
import MMMtlMis.model.views.MmAgTemplVOImpl;

import adf.utils.ebiz.EbizParams;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 11 09:59:50 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMMtlMisAMImpl extends ApplicationModuleImpl implements MMMtlMisAM {
    /**
     * This is the default constructor (do not remove).
     */
    public static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MMMtlMisAMImpl.class);
    String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
    String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
    Integer slocId = Integer.parseInt(slocIdStr);
    String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
    String hoOrgId = (String) evaluateEL("#{pageFlowScope.GLBL_HO_ORG_ID}");
    Integer usrid = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_USR}"));

    public MMMtlMisAMImpl() {
    }

    /**
     * Container's getter for StkItmBin1.
     * @return StkItmBin1
     */
    public ViewObjectImpl getStkItmBin1() {
        return (ViewObjectImpl) findViewObject("StkItmBin1");
    }

    /**
     * Container's getter for StkItmLot1.
     * @return StkItmLot1
     */
    public ViewObjectImpl getStkItmLot1() {
        return (ViewObjectImpl) findViewObject("StkItmLot1");
    }

    /**
     * Container's getter for StkItmSr1.
     * @return StkItmSr1
     */
    public ViewObjectImpl getStkItmSr1() {
        return (ViewObjectImpl) findViewObject("StkItmSr1");
    }

    /**
     * Container's getter for StkItm1.
     * @return StkItm1
     */
    public ViewObjectImpl getStkItm1() {
        return (ViewObjectImpl) findViewObject("StkItm1");
    }

    public String getHoOrgId() {
        System.out.println("-------------------hoOrgId------" + resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getOrgId() {
        System.out.println("---------------OrgId--------------" + resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public void executeStkItmVo() {
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrgId = (String) evaluateEL("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer usrid = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_USR}"));
        //
        //
        ViewObjectImpl orgVo = this.getOrg1();
        orgVo.setNamedWhereClauseParam("Binghoorgid", getHoOrgId());
        orgVo.setNamedWhereClauseParam("Bindcldid", cldId);
        orgVo.executeQuery();
        adfLog.info("----------executing org vo----------------------" + orgVo.getRangeSize() + " ho_orgId--" +
                    getHoOrgId());
        //
        //
        ViewObjectImpl vo = getStkItm1();
        ViewCriteria vc = vo.getViewCriteria("StkItmVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        // vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindHoOrgId", this.getHoOrgId());

        if (getSrchTrns1().getCurrentRow() != null) {
            vo.setNamedWhereClauseParam("bindOrgId", getSrchTrns1().getCurrentRow().getAttribute("orgId"));
            vo.setNamedWhereClauseParam("bindWhId", getSrchTrns1().getCurrentRow().getAttribute("whId"));
            vo.setNamedWhereClauseParam("bindItmId", getSrchTrns1().getCurrentRow().getAttribute("ItmId"));
            vo.setNamedWhereClauseParam("bindFYId", getSrchTrns1().getCurrentRow().getAttribute("financialYear"));
        } else {
            Integer fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                         cldId, orgId, new Timestamp(System.currentTimeMillis())
            }));
            vo.setNamedWhereClauseParam("bindFYId", fyid);
        }

        vo.executeQuery();

        ViewObjectImpl bkt = getMmAgBkt1();
        bkt.setNamedWhereClauseParam("BindCldId", cldId);
        bkt.setNamedWhereClauseParam("BindOrgId", orgId);
        bkt.setNamedWhereClauseParam("BindSlocId", slocId);
        bkt.setNamedWhereClauseParam("BindUsrId", usrid);
        bkt.executeQuery();
        adfLog.info("rowcount::" + bkt.getRowCount());
        if (bkt.getRowCount() == 0) {
            Row r = bkt.createRow();
            r.setAttribute("BktFor", "P");
            r.setAttribute("BktDaysTo", new Number(0));
            r.setAttribute("BktRange2", new Number(0));
            r.setAttribute("BktRange3", new Number(0));
            r.setAttribute("BktRange4", new Number(0));
            r.setAttribute("BktRange5", new Number(0));
            bkt.insertRow(r);


        }


    }


    public void executeStkItmLotVo() {


        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl itmvo = getStkItm1();
        Row curr = itmvo.getCurrentRow();
        ViewObjectImpl vo = getStkItmLot1();
        ViewCriteria vc = vo.getViewCriteria("StkItmLotVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindItemId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId", curr.getAttribute("WhId"));
        vo.executeQuery();

    }

    public boolean isItmSerialized() {
        ViewObjectImpl itmvo = getStkItm1();
        Row curr = itmvo.getCurrentRow();
        if (curr.getAttribute("SerializedFlg").equals("Y")) {
            return true;
        }
        return false;
    }

    public boolean isLotItmSerialized() {
        ViewObjectImpl lotvo = getStkItmLot1();
        Row curr = lotvo.getCurrentRow();
        if (curr.getAttribute("SerializedFlg").equals("Y")) {
            return true;
        }
        return false;
    }

    public void executeStkItmBinVo() {

        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl itmvo = getStkItm1();
        ViewObjectImpl lotvo = getStkItmLot1();

        Row curr = lotvo.getCurrentRow();
        ViewObjectImpl vo = getStkItmBin1();
        ViewCriteria vc = vo.getViewCriteria("StkItmBinVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindLotId", curr.getAttribute("LotId"));
        vo.setNamedWhereClauseParam("bindWhId", curr.getAttribute("WhId"));
        vo.executeQuery();

    }

    public void executeStkItmSrVo() {

        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl itmvo = getStkItm1();
        ViewObjectImpl lotvo = getStkItmLot1();
        ViewObjectImpl binvo = getStkItmBin1();

        Row curr = binvo.getCurrentRow();
        ViewObjectImpl vo = getStkItmSr1();
        ViewCriteria vc = vo.getViewCriteria("StkItmSrVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindWhId", curr.getAttribute("WhId"));
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindLotId", curr.getAttribute("LotId"));
        vo.setNamedWhereClauseParam("bindBinId", curr.getAttribute("BinId"));
        vo.executeQuery();

    }


    // Execute When Bin is Not Used

    public void executeStkItmLotSrVo() {

        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl itmvo = getStkItm1();
        ViewObjectImpl lotvo = getStkItmLot1();

        Row curr = lotvo.getCurrentRow();
        ViewObjectImpl vo = getStkItmSr1();
        ViewCriteria vc = vo.getViewCriteria("StkItmSrVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindLotId", curr.getAttribute("LotId"));
        vo.setNamedWhereClauseParam("bindWhId", curr.getAttribute("WhId"));
        vo.executeQuery();

    }


    public String evaluateEL(String el) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, el, Object.class);
        String retVal = exp.getValue(elContext).toString();
        return retVal;
    }

    /**
     * Container's getter for Uom1.
     * @return Uom1
     */
    public ViewObjectImpl getUom1() {
        return (ViewObjectImpl) findViewObject("Uom1");
    }

    /**
     * Container's getter for PoVw1.
     * @return PoVw1
     */
    public ViewObjectImpl getPoVw1() {
        return (ViewObjectImpl) findViewObject("PoVw1");
    }


    public void executePoVo(String voName, String voCriteria) {


        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl itmvo = getStkItm1();
        Row curr = itmvo.getCurrentRow();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject(voName);
        ViewCriteria vc = vo.getViewCriteria(voCriteria);
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId", curr.getAttribute("WhId"));
        vo.executeQuery();

    }

    public void executeResvVo(String voName, String voCriteria) {
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");


        ViewObjectImpl itmvo = getStkItm1();
        Row curr = itmvo.getCurrentRow();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject(voName);
        ViewCriteria vc = vo.getViewCriteria(voCriteria);
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId", curr.getAttribute("WhId"));


        Integer fyid = 1;
        fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                             cldId, orgId, new Timestamp(System.currentTimeMillis()) }));
        // vo.setNamedWhereClauseParam("bindFyId",getSrchTrns1().getCurrentRow().getAttribute("financialYear"));

        vo.setNamedWhereClauseParam("bindFyId", fyid);

        System.out.println(fyid + " " + cldId + " " + slocId + " " + orgId + " " + curr.getAttribute("ItmId") + " " +
                           curr.getAttribute("WhId"));

        vo.executeQuery();

    }

    /**
     * Container's getter for SrchTrns1.
     * @return SrchTrns1
     */
    public ViewObjectImpl getSrchTrns1() {
        return (ViewObjectImpl) findViewObject("SrchTrns1");
    }

    /**
     * Container's getter for WH1.
     * @return WH1
     */
    public ViewObjectImpl getWH1() {
        return (ViewObjectImpl) findViewObject("WH1");
    }

    /**
     * Container's getter for Item1.
     * @return Item1
     */
    public ViewObjectImpl getItem1() {
        return (ViewObjectImpl) findViewObject("Item1");
    }

    /**
     * Container's getter for ResvVw1.
     * @return ResvVw1
     */
    public ViewObjectImpl getResvVw1() {
        return (ViewObjectImpl) findViewObject("ResvVw1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    /**
     * Container's getter for ComRcpt1.
     * @return ComRcpt1
     */
    public ViewObjectImpl getComRcpt1() {
        return (ViewObjectImpl) findViewObject("ComRcpt1");
    }

    /**
     * Container's getter for ComIssu1.
     * @return ComIssu1
     */
    public ViewObjectImpl getComIssu1() {
        return (ViewObjectImpl) findViewObject("ComIssu1");
    }

    /**
     * Container's getter for ItmGrp1.
     * @return ItmGrp1
     */
    public ViewObjectImpl getItmGrp1() {
        return (ViewObjectImpl) findViewObject("ItmGrp1");
    }

    /**
     * Container's getter for ItmMov1.
     * @return ItmMov1
     */
    public ViewObjectImpl getItmMov1() {
        return (ViewObjectImpl) findViewObject("ItmMov1");
    }

    /**
     * Container's getter for srchItmMov1.
     * @return srchItmMov1
     */
    public ViewObjectImpl getsrchItmMov1() {
        return (ViewObjectImpl) findViewObject("srchItmMov1");
    }


    public void executeItmMovVo(String voName, String voCriteria) {
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        //String slocIdStr=(String);
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl itmvo = getsrchItmMov1();
        Row curr = itmvo.getCurrentRow();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject(voName);
        ViewCriteria vc = vo.getViewCriteria(voCriteria);
        vo.applyViewCriteria(vc);
        String i = (String) curr.getAttribute("ItmId");
        adfLog.info(i);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", curr.getAttribute("orgId"));
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId", curr.getAttribute("whId"));
        vo.setNamedWhereClauseParam("bindFromDate", curr.getAttribute("fromDate"));
        vo.setNamedWhereClauseParam("bindToDate", curr.getAttribute("toDate"));
        vo.executeQuery();

    }

    public String Isssuedetail() {
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     cldId, orgId, new Timestamp(System.currentTimeMillis())
        }));
        Row curr = getTransSearch1().getCurrentRow();
        Row mainCurr = this.getMmMain1().getCurrentRow();

        ViewObjectImpl issueVo = this.getMmIssueDetail();
        issueVo.setNamedWhereClauseParam("bindCldId", cldId);
        issueVo.setNamedWhereClauseParam("bindOrgId", curr.getAttribute("OrgId"));
        issueVo.setNamedWhereClauseParam("bindSlocId", slocId);
        issueVo.setNamedWhereClauseParam("bindWhId", null);
        //issueVo.setNamedWhereClauseParam("Bindfyid", fyid);
        issueVo.setNamedWhereClauseParam("BinItmId", mainCurr.getAttribute("ItmId"));
        issueVo.executeQuery();
        return null;
    }

    public String MmissueReord() {
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        //   String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Row Curr = this.getTransSearch1().getCurrentRow();
        ViewObjectImpl issueVo = this.getMmIssueDetail();
        //   Integer fyid=(Integer)(callStoredFunction(Types.INTEGER,"APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,orgId,new Timestamp(System.currentTimeMillis())}));

        ViewObjectImpl issuerecord = getMMIssue();
        issuerecord.setNamedWhereClauseParam("BindCldId", cldId);
        issuerecord.setNamedWhereClauseParam("BindSlocId", slocId);
        issuerecord.setNamedWhereClauseParam("BindOrgId", Curr.getAttribute("OrgId"));
        issuerecord.setNamedWhereClauseParam("BindEoId", issueVo.getCurrentRow().getAttribute("IssuSrcId"));
        issuerecord.setNamedWhereClauseParam("BindItmId", issueVo.getCurrentRow().getAttribute("ItmId"));
        issuerecord.executeQuery();
        return null;
    }

    public void MmreservedDetail() {
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     cldId, orgId, new Timestamp(System.currentTimeMillis())
        }));
        Row currMain = this.getMmMain1().getCurrentRow();
        Row curr = this.getTransSearch1().getCurrentRow();

        ViewObjectImpl resvVO = this.getResvDetail();
        resvVO.setNamedWhereClauseParam("Bindcldid", cldId);
        resvVO.setNamedWhereClauseParam("Bindorgid", curr.getAttribute("OrgId"));
        resvVO.setNamedWhereClauseParam("Bindslocid", slocId);
        resvVO.setNamedWhereClauseParam("Binditmid", currMain.getAttribute("ItmId"));
        resvVO.setNamedWhereClauseParam("BindFyId", fyid);
        resvVO.executeQuery();
    }

    public BigDecimal getStockValue(Timestamp date) {
        Timestamp date_p = null;

        if (date == null) {
            date_p = new Timestamp(System.currentTimeMillis());
        } else {
            date_p = date;
        }

        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        ViewObjectImpl srchItmVo = getsrchItmMov1();
        String whId = (String) srchItmVo.getCurrentRow().getAttribute("whId");
        String ItmId = (String) srchItmVo.getCurrentRow().getAttribute("ItmId");

        BigDecimal stckValue = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_AS_ON_STK(?,?,?,?,?,?)", new Object[] {
                                                                cldId, slocId, orgId, whId, ItmId, date_p
        }));
        return stckValue;
    }

    /**
     * Container's getter for FinYr1.
     * @return FinYr1
     */
    public ViewObjectImpl getFinYr1() {
        return (ViewObjectImpl) findViewObject("FinYr1");
    }

    /**
     * Container's getter for RCPT_DTL_VW1.
     * @return RCPT_DTL_VW1
     */
    public ViewObjectImpl getRCPT_DTL_VW1() {
        return (ViewObjectImpl) findViewObject("RCPT_DTL_VW1");
    }

    /**
     * Container's getter for ComRcpt2.
     * @return ComRcpt2
     */
    public ViewObjectImpl getComRcpt2() {
        return (ViewObjectImpl) findViewObject("ComRcpt2");
    }

    /**
     * Container's getter for RCPT_DTL_VW2.
     * @return RCPT_DTL_VW2
     */
    public ViewObjectImpl getRCPT_DTL_VW2() {
        return (ViewObjectImpl) findViewObject("RCPT_DTL_VW2");
    }

    /**
     * Container's getter for RCPT_PO_VL.
     * @return RCPT_PO_VL
     */
    public ViewLinkImpl getRCPT_PO_VL() {
        return (ViewLinkImpl) findViewLink("RCPT_PO_VL");
    }

    /**
     * Container's getter for RCPT_PO_VL1.
     * @return RCPT_PO_VL1
     */
    public ViewLinkImpl getRCPT_PO_VL1() {
        return (ViewLinkImpl) findViewLink("RCPT_PO_VL1");
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public ViewObjectImpl getTransSearch1() {
        return (ViewObjectImpl) findViewObject("TransSearch1");
    }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl) findViewObject("Org1");
    }

    /**
     * Container's getter for Supplier1.
     * @return Supplier1
     */
    public ViewObjectImpl getSupplier1() {
        return (ViewObjectImpl) findViewObject("Supplier1");
    }

    /**
     * Container's getter for ItmPrf1.
     * @return ItmPrf1
     */
    public ViewObjectImpl getItmPrf1() {
        return (ViewObjectImpl) findViewObject("ItmPrf1");
    }


    /*

    public void searchMainAction(String voName,String voCriteria,Boolean includeParam)
    {

        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr=(String)evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId=Integer.parseInt(slocIdStr);
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrgId=(String)evaluateEL("#{pageFlowScope.GLBL_HO_ORG_ID}");

        ViewObjectImpl trnsVo = (ViewObjectImpl)findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();
        String org_Id = (String)row.getAttribute("OrgId");
        String whId = (String)row.getAttribute("WhId");
        String supplier = (String)row.getAttribute("Supplier");
        String itm = (String)row.getAttribute("ItmId");
        String itmGrp = (String)row.getAttribute("ItmGrp");
        String reOrdLvl = (String)row.getAttribute("isBelowReOrdLvl");
        String saftyLvl = (String)row.getAttribute("isBelowSafetyLvl");
        String slsItm = (String)row.getAttribute("isSaleItm");
        String purItm = (String)row.getAttribute("isPurchaseItm");
        String wipItm = (String)row.getAttribute("isWipItm");


        ViewObjectImpl vo = (ViewObjectImpl)findViewObject("MainSrch1");
        ViewCriteria vc = vo.getViewCriteria("MainSrchVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", org_Id);
        vo.setNamedWhereClauseParam("bindHoOrgId",hoOrgId);
        vo.setNamedWhereClauseParam("bindItm",itm);
        vo.setNamedWhereClauseParam("bindItmGrp",itmGrp);
        vo.setNamedWhereClauseParam("bindSupplier",supplier);
        vo.setNamedWhereClauseParam("bindWhId",whId);

        if(reOrdLvl != null && reOrdLvl.equals("Y"))
            vo.setNamedWhereClauseParam("bindBlwReorderLvl",BigDecimal.ZERO);
        else
            vo.setNamedWhereClauseParam("bindBlwReorderLvl",null);

        if(saftyLvl != null && saftyLvl.equals("Y"))
            vo.setNamedWhereClauseParam("bindSaftyLvl",BigDecimal.ZERO);
        else
            vo.setNamedWhereClauseParam("bindSaftyLvl",null);


        if(!includeParam)
        {
          if(purItm != null)
                vo.setNamedWhereClauseParam("bindPurItm",purItm);
          if(slsItm != null)
                vo.setNamedWhereClauseParam("bindSlsItm",slsItm);
          if(wipItm != null)
                vo.setNamedWhereClauseParam("bindWipItm",wipItm);

          else if(wipItm == null)
               {vo.setNamedWhereClauseParam("bindWipItm","NA");}
       }
        else
        { vo.setNamedWhereClauseParam("bindPurItm",null);
                vo.setNamedWhereClauseParam("bindSlsItm",null);
                        vo.setNamedWhereClauseParam("bindWipItm",null);
            }

        Integer fyId =(Integer)(callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,orgId,new Timestamp(System.currentTimeMillis())}));
        vo.setNamedWhereClauseParam("bindFyId",fyId);
        vo.executeQuery();

    }

*/

    /**
     * Container's getter for Graph1.
     * @return Graph1
     */
    public ViewObjectImpl getGraph1() {
        return (ViewObjectImpl) findViewObject("Graph1");
    }


    /**
     * Container's getter for EoItm1.
     * @return EoItm1
     */
    public ViewObjectImpl getEoItm1() {
        return (ViewObjectImpl) findViewObject("EoItm1");
    }


    /*

    public void executeReceiptVo(String voName,String voCriteria)
    {  //  System.out.println("executeReceiptVo");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr=(String)evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId=Integer.parseInt(slocIdStr);
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        ViewObjectImpl itmvo = (ViewObjectImpl)findViewObject("MainSrch1");
        Row curr = itmvo.getCurrentRow();
        ViewObjectImpl vo = (ViewObjectImpl)findViewObject(voName);
        ViewCriteria vc = vo.getViewCriteria(voCriteria);
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", curr.getAttribute("OrgId"));
        vo.setNamedWhereClauseParam("bindItmId",curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId",curr.getAttribute("WhId"));

    //    System.out.println(cldId +" "+slocId+" "+orgId+" "+curr.getAttribute("ItmId")+" "+curr.getAttribute("WhId"));

        Integer fyid=1;
        fyid=(Integer)(callStoredFunction(Types.INTEGER,"APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,orgId,new Timestamp(System.currentTimeMillis())}));
        vo.setNamedWhereClauseParam("bindFyId",fyid);
        vo.executeQuery();

    }

*/

    /**
     * Container's getter for Rcpt1.
     * @return Rcpt1
     */
    public ViewObjectImpl getRcpt1() {
        return (ViewObjectImpl) findViewObject("Rcpt1");
    }

    /**
     * Container's getter for MmMain1.
     * @return MmMain1
     */
    public MmMainVOImpl getMmMain1() {
        return (MmMainVOImpl) findViewObject("MmMain1");
    }


    public boolean isItmSerialized_1() {
        ViewObjectImpl itmvo = getMmMain1();
        Row curr = itmvo.getCurrentRow();
        if (curr.getAttribute("SerializedFlg").equals("Y")) {
            return true;
        }
        return false;
    }

    public void executeReceiptVo(String voName, String voCriteria) { //  System.out.println("executeReceiptVo");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        ViewObjectImpl itmvo = (ViewObjectImpl) findViewObject("MmMain1");
        Row curr = itmvo.getCurrentRow();

        ViewObjectImpl trnsVo = (ViewObjectImpl) findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();

        // System.out.println(cldId+" "+slocId+" "+row.getAttribute("OrgId")+" "+curr.getAttribute("ItmId")+" "+row.getAttribute("WhId"));

        ViewObjectImpl vo = (ViewObjectImpl) findViewObject(voName);
        ViewCriteria vc = vo.getViewCriteria(voCriteria);
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", row.getAttribute("OrgId"));
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId", row.getAttribute("WhId"));
        Integer fyid = 1;
        fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                             cldId, orgId, new Timestamp(System.currentTimeMillis()) }));
        vo.setNamedWhereClauseParam("bindFyId", fyid);
        vo.executeQuery();

    }

    public void searchMainAction(String voName, String voCriteria, Boolean includeParam, String bindFlg) {
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrgId = (String) evaluateEL("#{pageFlowScope.GLBL_HO_ORG_ID}");


        ViewObjectImpl trnsVo = (ViewObjectImpl) findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();
        String org_Id = (String) row.getAttribute("OrgId");
        String whId = (String) row.getAttribute("WhId");
        //String supplier = (String)row.getAttribute("Supplier");
        String itm = (String) row.getAttribute("ItmId");
        String itmGrp = (String) row.getAttribute("ItmGrp");
        String reOrdLvl = (String) row.getAttribute("isBelowReOrdLvl");
        String saftyLvl = (String) row.getAttribute("isBelowSafetyLvl");
        String slsItm = (String) row.getAttribute("isSaleItm");
        String purItm = (String) row.getAttribute("isPurchaseItm");
        String wipItm = (String) row.getAttribute("isWipItm");

        // System.out.println("includeParam : "+includeParam);

        // System.out.println(cldId +"  "+slocId+" "+org_Id);
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("MmMain1");

        System.out.println(whId + " " + itm + " " + itmGrp + "  " + wipItm + " " + slsItm + " " + purItm);

        //vo.setNamedWhereClauseParam("bindCldId", cldId);
        //vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", org_Id);
        vo.setNamedWhereClauseParam("bindItmId", itm);
        vo.setNamedWhereClauseParam("bindGrpId", itmGrp);
        // vo.setNamedWhereClauseParam("bindEoId",supplier);
        vo.setNamedWhereClauseParam("bindWhId", whId);

        // vo.setNamedWhereClauseParam("BINDFLAG",bindFlg=="NONE"?null:bindFlg);

        // System.out.println("BIND FLG : "+bindFlg);

        System.out.println("includeParam : " + includeParam);
        System.out.println("bindWipItmFlg : " + wipItm);
        System.out.println("bindSlsItmFlg : " + slsItm);
        System.out.println("bindPurItmFlg : " + purItm);

        if (includeParam) {
            vo.setNamedWhereClauseParam("bindChkSpwFlg", "Y");
            vo.setNamedWhereClauseParam("bindWipItmFlg", wipItm == null ? "N" : wipItm);
            vo.setNamedWhereClauseParam("bindSlsItmFlg", slsItm == null ? "N" : slsItm);
            vo.setNamedWhereClauseParam("bindPurItmFlg", purItm == null ? "N" : purItm);
        } else {
            vo.setNamedWhereClauseParam("bindChkSpwFlg", null);
            vo.setNamedWhereClauseParam("bindWipItmFlg", null);
            vo.setNamedWhereClauseParam("bindSlsItmFlg", null);
            vo.setNamedWhereClauseParam("bindPurItmFlg", null);

        }
        // vo.setNamedWhereClauseParam("bindMinDt",row.getAttribute("ModifyDateFrom"));
        vo.setNamedWhereClauseParam("bindMaxDt", row.getAttribute("ModifyDateTo"));
        Integer fyid = 1;
        //fyid=(Integer)(callStoredFunction(Types.INTEGER,"APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,hoOrgId,new Timestamp(System.currentTimeMillis())}));
        //fyid=(Integer)(callStoredFunction(Types.INTEGER,"APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,hoOrgId,row.getAttribute("ModifyDateFrom")}));
        //         if(row.getAttribute("financialYearId") == null)
        //            vo.setNamedWhereClauseParam("bindFyId",fyid);
        //        else
        //            vo.setNamedWhereClauseParam("bindFyId",row.getAttribute("financialYearId"));

        vo.executeQuery();
        ViewObjectImpl graph = this.getWarehouseGraph1();
        graph.setNamedWhereClauseParam("BindCldId", cldId);
        graph.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        graph.setNamedWhereClauseParam("BindOrgId", orgId);
        graph.setNamedWhereClauseParam("BindWhId", whId);
        graph.executeQuery();


    }

    public boolean executeStkItmLotVo_1() {


        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl trnsVo = (ViewObjectImpl) findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();

        ViewObjectImpl itmvo = getMmMain1();
        Row curr = itmvo.getCurrentRow();
        ViewObjectImpl vo = getItmLot1();
        //ViewCriteria vc = vo.getViewCriteria("StkItmLotVOCriteria");
        // vo.applyViewCriteria(vc);

        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", row.getAttribute("OrgId"));
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId", row.getAttribute("WhId"));
        vo.executeQuery();

        if (row.getAttribute("OrgId") == null || row.getAttribute("WhId") == null) {
            return false;
        }

        return true;

    }


    public boolean isLotItmSerialized_1() {
        ViewObjectImpl lotvo = getItmLot1();
        Row curr = lotvo.getCurrentRow();
        if (curr.getAttribute("SerializedFlg").equals("Y")) {
            return true;
        }
        return false;
    }

    public void executeStkItmBinVo_1() {

        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl trnsVo = (ViewObjectImpl) findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();

        // ViewObjectImpl itmvo = getItmLot1();
        ViewObjectImpl lotvo = getItmLot1();

        Row curr = lotvo.getCurrentRow();
        ViewObjectImpl vo = getStkItmBin1();
        ViewCriteria vc = vo.getViewCriteria("StkItmBinVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", row.getAttribute("OrgId"));
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindLotId", curr.getAttribute("LotId"));
        vo.setNamedWhereClauseParam("bindWhId", row.getAttribute("WhId"));
        vo.executeQuery();

    }


    public void executeStkItmSrVo_1() {

        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl trnsVo = (ViewObjectImpl) findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();

        ViewObjectImpl itmvo = getStkItm1();
        ViewObjectImpl lotvo = getStkItmLot1();
        ViewObjectImpl binvo = getStkItmBin1();

        Row curr = binvo.getCurrentRow();
        ViewObjectImpl vo = getStkItmSr1();
        ViewCriteria vc = vo.getViewCriteria("StkItmSrVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", row.getAttribute("OrgId"));
        vo.setNamedWhereClauseParam("bindWhId", row.getAttribute("WhId"));
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindLotId", curr.getAttribute("LotId"));
        vo.setNamedWhereClauseParam("bindBinId", curr.getAttribute("BinId"));
        vo.executeQuery();

    }


    public void executeStkItmLotSrVo_1() {

        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl trnsVo = (ViewObjectImpl) findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();
        ViewObjectImpl itmvo = getStkItm1();
        ViewObjectImpl lotvo = getItmLot1();

        Row curr = lotvo.getCurrentRow();
        ViewObjectImpl vo = getStkItmSr1();
        ViewCriteria vc = vo.getViewCriteria("StkItmSrVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", row.getAttribute("OrgId"));
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindLotId", curr.getAttribute("LotId"));
        vo.setNamedWhereClauseParam("bindWhId", row.getAttribute("WhId"));
        vo.executeQuery();

    }


    public void executeReceiptVo_1(String voName) { //  System.out.println("executeReceiptVo");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        ViewObjectImpl itmvo = (ViewObjectImpl) findViewObject("MmMain1");
        Row curr = itmvo.getCurrentRow();

        ViewObjectImpl trnsVo = (ViewObjectImpl) findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject(voName);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", row.getAttribute("OrgId"));
        vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId", row.getAttribute("WhId"));
        adfLog.info("ItmIIIId:::" + curr.getAttribute("ItmId") + " and WhId::" + row.getAttribute("WhId"));
        //        Integer fyid=1;
        //        fyid=(Integer)(callStoredFunction(Types.INTEGER,"APP.GET_ORG_FY_ID (?,?,?)", new Object[] {cldId,orgId,new Timestamp(System.currentTimeMillis())}));
        //        vo.setNamedWhereClauseParam("bindFyId",fyid);
        vo.executeQuery();

    }

    /**
     * Container's getter for ItmLot1.
     * @return ItmLot1
     */
    public ViewObjectImpl getItmLot1() {
        return (ViewObjectImpl) findViewObject("ItmLot1");
    }

    /**
     * Container's getter for Receipt1.
     * @return Receipt1
     */
    public ViewObjectImpl getReceipt1() {
        return (ViewObjectImpl) findViewObject("Receipt1");
    }

    /**
     * Container's getter for SupplierVW1.
     * @return SupplierVW1
     */
    public ViewObjectImpl getSupplierVW1() {
        return (ViewObjectImpl) findViewObject("SupplierVW1");
    }

    public void executeSupplier(String voName) { //  System.out.println("executeReceiptVo");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocIdStr = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Integer slocId = Integer.parseInt(slocIdStr);
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        ViewObjectImpl rcptvo = (ViewObjectImpl) findViewObject("Receipt1");
        Row curr = rcptvo.getCurrentRow();

        ViewObjectImpl trnsVo = (ViewObjectImpl) findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject(voName);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", row.getAttribute("OrgId"));
        // vo.setNamedWhereClauseParam("bindItmId",curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId", row.getAttribute("WhId"));
        vo.setNamedWhereClauseParam("bindRcptSrcId", curr.getAttribute("RcptSrcId"));
        Integer fyid = 1;
        fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                             cldId, orgId, new Timestamp(System.currentTimeMillis()) }));
        vo.setNamedWhereClauseParam("bindFyId", fyid);
        vo.executeQuery();

    }

    public String executeReceiptDetail() {
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        Row Curr = this.getTransSearch1().getCurrentRow();
        ViewObjectImpl rcptVo = this.getReceipt1();
        String eoId = (String) rcptVo.getCurrentRow().getAttribute("RcptSrcId");
        String ItmId = (String) rcptVo.getCurrentRow().getAttribute("ItmId");
        String whId = (String) getTransSearch1().getCurrentRow().getAttribute("WhId");
        adfLog.info("EOID:" + eoId + "ItmId::" + ItmId);
        ViewObjectImpl rcptDetailVo = this.getReceiptDetail();
        rcptDetailVo.setNamedWhereClauseParam("BindCldId", cldId);
        rcptDetailVo.setNamedWhereClauseParam("BindSlocId", slocId);
        rcptDetailVo.setNamedWhereClauseParam("BindOrgId", Curr.getAttribute("OrgId"));
        rcptDetailVo.setNamedWhereClauseParam("BindEoId", eoId);
        rcptDetailVo.setNamedWhereClauseParam("BindItmId", ItmId);
        rcptDetailVo.setNamedWhereClauseParam("BindWhId", whId);
        rcptDetailVo.executeQuery();
        System.out.println("Row count:::" + rcptDetailVo.getAllRowsInRange());
        return null;

    }


    /**
     * Container's getter for Graph2.
     * @return Graph2
     */
    public ViewObjectImpl getGraph2() {
        return (ViewObjectImpl) findViewObject("Graph2");
    }

    /**
     * Container's getter for MMMainGraphVL1.
     * @return MMMainGraphVL1
     */
    public ViewLinkImpl getMMMainGraphVL1() {
        return (ViewLinkImpl) findViewLink("MMMainGraphVL1");
    }


    /**
     * Container's getter for EoItm2.
     * @return EoItm2
     */
    public ViewObjectImpl getEoItm2() {
        return (ViewObjectImpl) findViewObject("EoItm2");
    }

    /**
     * Container's getter for EoVwSupplierVwVL1.
     * @return EoVwSupplierVwVL1
     */
    public ViewLinkImpl getEoVwSupplierVwVL1() {
        return (ViewLinkImpl) findViewLink("EoVwSupplierVwVL1");
    }


    public void resetAction() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl trnsVo = (ViewObjectImpl) findViewObject("TransSearch1");
        Row row = trnsVo.getCurrentRow();
        row.setAttribute("ItmId", null);
        row.setAttribute("Supplier", null);
        row.setAttribute("ItmGrp", null);
        row.setAttribute("OrgId", orgId);
        row.setAttribute("WhId", null);
        row.setAttribute("ModifyDateFrom", null);
        row.setAttribute("ModifyDateTo", null);

        row.setAttribute("isBelowReOrdLvl", null);
        row.setAttribute("isBelowSafetyLvl", null);
        row.setAttribute("isPurchaseItm", null);
        row.setAttribute("isSaleItm", null);
        row.setAttribute("isWipItm", null);
    }

    public void resetAction_1() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        ViewObjectImpl trnsVo = (ViewObjectImpl) this.getsrchItmMov1();
        Row row = trnsVo.getCurrentRow();
        row.setAttribute("orgId", orgId);
        row.setAttribute("whId", null);
        row.setAttribute("ItmId", null);
        row.setAttribute("fromDate", null);
        row.setAttribute("toDate", null);
    }

    /**
     * Container's getter for EoItm3.
     * @return EoItm3
     */
    public ViewObjectImpl getEoItm3() {
        return (ViewObjectImpl) findViewObject("EoItm3");
    }

    /**
     * Container's getter for MMtoEOVL1.
     * @return MMtoEOVL1
     */
    public ViewLinkImpl getMMtoEOVL1() {
        return (ViewLinkImpl) findViewLink("MMtoEOVL1");
    }

    /**
     * Container's getter for PriceMov1.
     * @return PriceMov1
     */
    public ViewObjectImpl getPriceMov1() {
        return (ViewObjectImpl) findViewObject("PriceMov1");
    }

    /**
     * Container's getter for PriceMov2.
     * @return PriceMov2
     */
    public ViewObjectImpl getPriceMov2() {
        return (ViewObjectImpl) findViewObject("PriceMov2");
    }

    /**
     * Container's getter for PriceMovVL1.
     * @return PriceMovVL1
     */
    public ViewLinkImpl getPriceMovVL1() {
        return (ViewLinkImpl) findViewLink("PriceMovVL1");
    }

    /**
     * Container's getter for FinYear1.
     * @return FinYear1
     */
    public ViewObjectImpl getFinYear1() {
        return (ViewObjectImpl) findViewObject("FinYear1");
    }

    /**
     * Container's getter for TopSupplier1.
     * @return TopSupplier1
     */
    public ViewObjectImpl getTopSupplier1() {
        return (ViewObjectImpl) findViewObject("TopSupplier1");
    }

    /**
     * Container's getter for ItmToTopSuppVL1.
     * @return ItmToTopSuppVL1
     */
    public ViewLinkImpl getItmToTopSuppVL1() {
        return (ViewLinkImpl) findViewLink("ItmToTopSuppVL1");
    }

    /**
     * Container's getter for BottomSup1.
     * @return BottomSup1
     */
    public ViewObjectImpl getBottomSup1() {
        return (ViewObjectImpl) findViewObject("BottomSup1");
    }

    /**
     * Container's getter for ItmToBottomSuppVL1.
     * @return ItmToBottomSuppVL1
     */
    public ViewLinkImpl getItmToBottomSuppVL1() {
        return (ViewLinkImpl) findViewLink("ItmToBottomSuppVL1");
    }

    /**
     * Container's getter for ReceiptDetail.
     * @return ReceiptDetail
     */
    public ViewObjectImpl getReceiptDetail() {
        return (ViewObjectImpl) findViewObject("ReceiptDetail");
    }

    /**
     * Container's getter for MMIssue.
     * @return MMIssue
     */
    public ViewObjectImpl getMMIssue() {
        return (ViewObjectImpl) findViewObject("MMIssue");
    }

    /**
     * Container's getter for MmIssueDetail.
     * @return MmIssueDetail
     */
    public ViewObjectImpl getMmIssueDetail() {
        return (ViewObjectImpl) findViewObject("MmIssueDetail");
    }

    /**
     * Container's getter for ResvDetail.
     * @return ResvDetail
     */
    public ViewObjectImpl getResvDetail() {
        return (ViewObjectImpl) findViewObject("ResvDetail");
    }

    /**
     * Container's getter for FinYr2.
     * @return FinYr2
     */
    public ViewObjectImpl getFinYr2() {
        return (ViewObjectImpl) findViewObject("FinYr2");
    }

    /**
     * Container's getter for MmAgBkt1.
     * @return MmAgBkt1
     */
    public ViewObjectImpl getMmAgBkt1() {
        return (ViewObjectImpl) findViewObject("MmAgBkt1");
    }

    /**
     * Container's getter for ProductAgeingMain1.
     * @return ProductAgeingMain1
     */
    public ViewObjectImpl getProductAgeingMain1() {
        return (ViewObjectImpl) findViewObject("ProductAgeingMain1");
    }

    /**
     * Container's getter for ProductAgeingSearch1.
     * @return ProductAgeingSearch1
     */
    public ViewObjectImpl getProductAgeingSearch1() {
        return (ViewObjectImpl) findViewObject("ProductAgeingSearch1");
    }

    /**
     * Container's getter for ProductAgeLot1.
     * @return ProductAgeLot1
     */
    public ViewObjectImpl getProductAgeLot1() {
        return (ViewObjectImpl) findViewObject("ProductAgeLot1");
    }

    public String updateRange() {
        Row r = getMmAgBkt1().getCurrentRow();
        String bktfor = (String) r.getAttribute("BktFor");
        Number range1 = (Number) r.getAttribute("BktDaysTo");
        Number range2 = (Number) r.getAttribute("BktRange2");
        Number range3 = (Number) r.getAttribute("BktRange3");
        Number range4 = (Number) r.getAttribute("BktRange4");
        Number range5 = (Number) r.getAttribute("BktRange5");
        adfLog.info(range1 + " " + range2 + " " + range3 + " " + range4 + " " + range5);
        Integer result = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_AG_BKT(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       cldId, slocId, orgId, usrid, bktfor, range1, range2, range3,
                                                       range4, range5
        }));
        System.out.println("result from function:::" + result);
        return null;
    }

    public String searchProuductAge() {
        String tempId = null;
        Row rr = getMmAgBkt1().getCurrentRow();
        String bktfor = (String) rr.getAttribute("BktFor");
        Number range1 = (Number) rr.getAttribute("BktDaysTo");
        Number range2 = (Number) rr.getAttribute("BktRange2");
        Number range3 = (Number) rr.getAttribute("BktRange3");
        Number range4 = (Number) rr.getAttribute("BktRange4");
        Number range5 = (Number) rr.getAttribute("BktRange5");

        ViewObjectImpl age = this.getProductAgeingSearch1();
        Row r = age.getCurrentRow();
        String whid = (String) r.getAttribute("WhId");
        String orgid = (String) r.getAttribute("OrgId");
        String itmId = (String) r.getAttribute("ItmId");
        String tempNm = (String) r.getAttribute("TempNm");
        String grpid = (String) r.getAttribute("ItmGrpId");
        if (tempNm != null) {
            Row[] row = this.getMmAgTempl1().getFilteredRows("TmplNm", tempNm);
            if (row.length > 0)
                tempId = (String) row[0].getAttribute("TmplId");

        }
        //System.out.println("range1:"+range1+"range"+range2+"range3:"+range3+"range4::"+range4+"range5:"+range5);

        ViewObjectImpl main = this.getProductAgeMain1();
        main.setNamedWhereClauseParam("BindCldId", cldId);
        main.setNamedWhereClauseParam("BindHoOorId", hoOrgId);
        main.setNamedWhereClauseParam("BindItmId", itmId);
        main.setNamedWhereClauseParam("BindOrgId", orgid);
        main.setNamedWhereClauseParam("BindRange1", range1);
        main.setNamedWhereClauseParam("BindRange2", range2);
        main.setNamedWhereClauseParam("BindRange3", range3);
        main.setNamedWhereClauseParam("BindRange4", range4);
        main.setNamedWhereClauseParam("BindRange5", range5);
        main.setNamedWhereClauseParam("BindTmplId", tempId);
        main.setNamedWhereClauseParam("BindGrpId", grpid);
        main.setNamedWhereClauseParam("BindWhId", whid);
        adfLog.info("Day ranges are ----------" + range1 + " " + range2 + " " + range3 + " " + range4 + " " + range5);
        main.executeQuery();
        ViewObjectImpl org = this.getOrgCurr1();
        org.setNamedWhereClauseParam("BindOrg", orgid);
        org.setNamedWhereClauseParam("BindCldId", cldId);
        org.executeQuery();
        /*       if(!this.getMmAgBkt1().getCurrentRow().getAttribute("BktDaysTo").toString().equals("0")){
adfLog.info("executed inside null bkt value------------------"+this.getMmAgBkt1().getCurrentRow().getAttribute("BktDaysTo"));
            this.getMmAgBkt1().executeQuery();
        } */
        return null;

    }

    public String executeProductAgeLot(String itmid) {
        adfLog.info(" in the executeProductAgeLot ");
        if (itmid != null) {
            ViewObjectImpl main = this.getProductAgeMain1();
            Row r = main.getCurrentRow();

            adfLog.info("itmid::" + itmid + "cldid::" + cldId + "whid::" + r.getAttribute("Whid") + "orgid::" +
                        r.getAttribute("Orgid") + "usrid::" + usrid + "hoOrgId:" + hoOrgId);
            ViewObjectImpl ageLot2 = this.getProductAgeLot2();
            ViewObjectImpl ageLot1 = this.getProductAgeLot1();
            ageLot2.setNamedWhereClauseParam("BindCldId", cldId);
            ageLot2.setNamedWhereClauseParam("BindHoOorId", hoOrgId);
            ageLot2.setNamedWhereClauseParam("BindItmId", itmid);
            ageLot2.setNamedWhereClauseParam("BindOrgId", r.getAttribute("Orgid"));
            ageLot2.setNamedWhereClauseParam("BindUsrId", usrid);
            ageLot2.setNamedWhereClauseParam("BindWhId", r.getAttribute("Whid"));
            ageLot2.executeQuery();
            ageLot1.setNamedWhereClauseParam("BindCldId", cldId);
            ageLot1.setNamedWhereClauseParam("BindHoOorId", hoOrgId);
            ageLot1.setNamedWhereClauseParam("BindItmId", itmid);
            ageLot1.setNamedWhereClauseParam("BindOrgId", r.getAttribute("Orgid"));
            ageLot1.setNamedWhereClauseParam("BindUsrId", usrid);
            ageLot1.setNamedWhereClauseParam("BindWhId", r.getAttribute("Whid"));
            ageLot1.executeQuery();
            adfLog.info(ageLot1.getRowCount() + " no. of Row::" + ageLot2.getRowCount());
        }
        return null;

    }

    /**
     * Container's getter for ProductAgeMain1.
     * @return ProductAgeMain1
     */
    public ViewObjectImpl getProductAgeMain1() {
        return (ViewObjectImpl) findViewObject("ProductAgeMain1");
    }

    /**
     * Container's getter for ProductAgeLot2.
     * @return ProductAgeLot2
     */
    public ViewObjectImpl getProductAgeLot2() {
        return (ViewObjectImpl) findViewObject("ProductAgeLot2");
    }

    /**
     * Container's getter for ProductAgeItmToProductAgeLotVL1.
     * @return ProductAgeItmToProductAgeLotVL1
     */
    public ViewLinkImpl getProductAgeItmToProductAgeLotVL1() {
        return (ViewLinkImpl) findViewLink("ProductAgeItmToProductAgeLotVL1");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;

    }


    /**
     * Container's getter for WarehouseGraph1.
     * @return WarehouseGraph1
     */
    public ViewObjectImpl getWarehouseGraph1() {
        return (ViewObjectImpl) findViewObject("WarehouseGraph1");
    }

    /**
     * Container's getter for Org2.
     * @return Org2
     */
    public ViewObjectImpl getOrg2() {
        return (ViewObjectImpl) findViewObject("Org2");
    }

    /**
     * Container's getter for OrgCurr1.
     * @return OrgCurr1
     */
    public ViewObjectImpl getOrgCurr1() {
        return (ViewObjectImpl) findViewObject("OrgCurr1");
    }


    public String searchItm() {
        Row r = this.getMmMain1().getCurrentRow();
        String itmid = (String) r.getAttribute("ItmId");
        // String itmid = (String)actionEvent.getComponent().getAttributes().get("ParaItmId");
        //String itmid=AdfFacesContext.getCurrentInstance().addPartialTarget(getItmNmBind());
        System.out.println("Value of ItmId" + itmid);
        ViewObjectImpl d = this.getHierarchyItmDetails1();
        d.setNamedWhereClauseParam("BindCldId", cldId);
        d.setNamedWhereClauseParam("BindItmId", itmid);
        d.setNamedWhereClauseParam("BindOrgId", orgId);
        d.setNamedWhereClauseParam("BindSlocId", slocId);
        d.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        d.executeQuery();
        return null;
    }

    /**
     * Container's getter for HierarchyItmDetails1.
     * @return HierarchyItmDetails1
     */
    public ViewObjectImpl getHierarchyItmDetails1() {
        return (ViewObjectImpl) findViewObject("HierarchyItmDetails1");
    }

    /**
     * Container's getter for HierarchyLotDetails1.
     * @return HierarchyLotDetails1
     */
    public ViewObjectImpl getHierarchyLotDetails1() {
        return (ViewObjectImpl) findViewObject("HierarchyLotDetails1");
    }

    /**
     * Container's getter for HierarchyItmDetailsToLotVL1.
     * @return HierarchyItmDetailsToLotVL1
     */
    public ViewLinkImpl getHierarchyItmDetailsToLotVL1() {
        return (ViewLinkImpl) findViewLink("HierarchyItmDetailsToLotVL1");
    }

    /**
     * Container's getter for HierarchyBinDetails1.
     * @return HierarchyBinDetails1
     */
    public ViewObjectImpl getHierarchyBinDetails1() {
        return (ViewObjectImpl) findViewObject("HierarchyBinDetails1");
    }

    /**
     * Container's getter for HierarchyLotDetailsToBinDetailsVL1.
     * @return HierarchyLotDetailsToBinDetailsVL1
     */
    public ViewLinkImpl getHierarchyLotDetailsToBinDetailsVL1() {
        return (ViewLinkImpl) findViewLink("HierarchyLotDetailsToBinDetailsVL1");
    }

    /**
     * Container's getter for HierarchySrDetails1.
     * @return HierarchySrDetails1
     */
    public ViewObjectImpl getHierarchySrDetails1() {
        return (ViewObjectImpl) findViewObject("HierarchySrDetails1");
    }

    /**
     * Container's getter for HierarchyBinToSrDetailsVL1.
     * @return HierarchyBinToSrDetailsVL1
     */
    public ViewLinkImpl getHierarchyBinToSrDetailsVL1() {
        return (ViewLinkImpl) findViewLink("HierarchyBinToSrDetailsVL1");
    }

    /**
     * Container's getter for HierarchySrDetails2.
     * @return HierarchySrDetails2
     */
    public ViewObjectImpl getHierarchySrDetails2() {
        return (ViewObjectImpl) findViewObject("HierarchySrDetails2");
    }

    /**
     * Container's getter for HierarchyLotToSrDetailsVL1.
     * @return HierarchyLotToSrDetailsVL1
     */
    public ViewLinkImpl getHierarchyLotToSrDetailsVL1() {
        return (ViewLinkImpl) findViewLink("HierarchyLotToSrDetailsVL1");
    }

    /**
     * Container's getter for MmAgTempl1.
     * @return MmAgTempl1
     */
    public MmAgTemplVOImpl getMmAgTempl1() {
        return (MmAgTemplVOImpl) findViewObject("MmAgTempl1");
    }

    /**
     * Container's getter for MmAgTemplItem1.
     * @return MmAgTemplItem1
     */
    public MmAgTemplItemVOImpl getMmAgTemplItem1() {
        return (MmAgTemplItemVOImpl) findViewObject("MmAgTemplItem1");
    }

    /**
     * Container's getter for MmAgTempToMmAgTemplItemVL1.
     * @return MmAgTempToMmAgTemplItemVL1
     */
    public ViewLinkImpl getMmAgTempToMmAgTemplItemVL1() {
        return (ViewLinkImpl) findViewLink("MmAgTempToMmAgTemplItemVL1");
    }
    //Method to create row for Template Item
    public void templateItem() {
        ViewObjectImpl temp = this.getMmAgTempl1();
        Row r = temp.getCurrentRow();
        String itmid = (String) r.getAttribute("TransItmId");
        String whid = (String) r.getAttribute("TransWhId");
        adfLog.info("Value of Item Id:::" + itmid + "Value of whid::" + whid);
        ViewObjectImpl tempitm = this.getMmAgTemplItem1();
        Row rr = tempitm.createRow();
        rr.setAttribute("ItmId", itmid);
        rr.setAttribute("WhId", whid);
        tempitm.insertRow(rr);
        r.setAttribute("TransItmDesc", null);
    }

    public String filterProductAgeMain() {
        Integer count = 0;
        Row re = this.getMmAgTempl1().getCurrentRow();
        adfLog.info("value of TmplNm" + re.getAttribute("TmplNm"));
        if (re.getAttribute("TmplNm") != null || re.getAttribute("TmplNm") == "") {
            adfLog.info("value of BktRangeType" + re.getAttribute("BktRangeType"));
            if (re.getAttribute("BktRangeType") != null || re.getAttribute("BktRangeType") == "") {
                ViewObjectImpl view = this.getProductAgeMain1();
                RowSetIterator rr = view.createRowSetIterator(null);
                while (rr.hasNext()) {
                    Row r1 = (Row) rr.next();
                    String check = (String) r1.getAttribute("TransCheck");
                    if (check != null && check.equals("Y")) {
                        String itmid = (String) r1.getAttribute("Itmid");
                        String whid = (String) r1.getAttribute("Whid");
                        adfLog.info("i" + itmid + "wh" + whid);
                        ViewObjectImpl agtempl = this.getMmAgTemplItem1();
                        Row r = agtempl.createRow();
                        r.setAttribute("WhId", whid);
                        r.setAttribute("ItmId", itmid);
                        agtempl.insertRow(r);
                        count++;
                    }

                }
                adfLog.info("count" + count);
                if (count > 0)
                    return "Y";
                else
                    return "N";
            } else
                return "B";

        } else {
            return "T";
        }
    }
    // Method to Populate  the Template Name on Search Page

    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        ArrayList<String> h = new ArrayList<String>();
        ViewObjectImpl autoSuggestVO = this.getMmAgTmpl1();
        autoSuggestVO.setNamedWhereClauseParam("BindCldId", cldId);
        autoSuggestVO.setNamedWhereClauseParam("BindOrgId", orgId);
        autoSuggestVO.setNamedWhereClauseParam("BindSlocId", slocId);
        autoSuggestVO.setNamedWhereClauseParam("BindTempNm", itmStr);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(15);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("TmplNm").toString());
        }
        return h;
    }


    /**
     * Container's getter for MmAgTmpl1.
     * @return MmAgTmpl1
     */
    public ViewObjectImpl getMmAgTmpl1() {
        return (ViewObjectImpl) findViewObject("MmAgTmpl1");
    }

    /**
     * Container's getter for MmItmVw1.
     * @return MmItmVw1
     */
    public ViewObjectImpl getMmItmVw1() {
        return (ViewObjectImpl) findViewObject("MmItmVw1");
    }

    /**
     * Container's getter for RangeCalc1.
     * @return RangeCalc1
     */
    public ViewObjectImpl getRangeCalc1() {
        return (ViewObjectImpl) findViewObject("RangeCalc1");
    }
    //Method to selct all item in the main table.

    public String checkAllItem() {
        adfLog.info("in the checkAllItem");
        ViewObjectImpl main = this.getProductAgeMain1();
        RowSetIterator rr = main.createRowSetIterator(null);
        while (rr.hasNext()) {
            Row r1 = (Row) rr.next();
            r1.setAttribute("TransCheck", "Y");
        }
        return null;
    }
    //Method to uncheck all item in the main table
    public String uncheckAllItem() {
        adfLog.info("uncheck");
        ViewObjectImpl main = this.getProductAgeMain1();
        RowSetIterator rr = main.createRowSetIterator(null);
        while (rr.hasNext()) {
            Row r1 = (Row) rr.next();
            r1.setAttribute("TransCheck", "N");
        }
        return null;
    }

    public String filterLoc() {
        adfLog.info("cldid:" + cldId + "slocid:" + slocId + "orgid:" + orgId);
        ViewObjectImpl loc = this.getMapLocVw1();
        loc.setNamedWhereClauseParam("BindCldId", cldId);
        loc.setNamedWhereClauseParam("BindSlocId", slocId);
        loc.setNamedWhereClauseParam("BindOrgId", orgId);
        loc.executeQuery();
        System.out.println("Value of count:" + loc.getRowCount());
        return null;
    }


    /**
     * Container's getter for MapLocVw1.
     * @return MapLocVw1
     */
    public ViewObjectImpl getMapLocVw1() {
        return (ViewObjectImpl) findViewObject("MapLocVw1");
    }

    /**
     * Container's getter for HierarchyItmSearch1.
     * @return HierarchyItmSearch1
     */
    public ViewObjectImpl getHierarchyItmSearch1() {
        return (ViewObjectImpl) findViewObject("HierarchyItmSearch1");
    }

    public void executeDefaultItmMovVo(String voName, String voCriteria) {
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        //String slocIdStr=(String);
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");

        //  ViewObjectImpl itmvo = getsrchItmMov1();
        // Row curr = itmvo.getCurrentRow();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject(voName);
        ViewCriteria vc = vo.getViewCriteria(voCriteria);
        vo.applyViewCriteria(vc);
        // String i = (String) curr.getAttribute("ItmId");
        adfLog.info("parameters in default execute---" + orgId);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        /*  vo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindWhId", curr.getAttribute("whId"));
        vo.setNamedWhereClauseParam("bindFromDate", curr.getAttribute("fromDate"));
        vo.setNamedWhereClauseParam("bindToDate", curr.getAttribute("toDate"));
        */vo.executeQuery();

    }

    public String checkDuplicateTemp() {
        ViewObjectImpl temp = this.getMmAgTempl1();
        Row r = temp.getCurrentRow();
        String itmid = (String) r.getAttribute("TransItmId");
        String whid = (String) r.getAttribute("TransWhId");
        adfLog.info("Value of Item Id:::" + itmid + "Value of whid::" + whid);

        ViewObjectImpl tempitm = this.getMmAgTemplItem1();
        RowQualifier rq = new RowQualifier(tempitm);
        rq.setWhereClause("CldId = '" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId = " +
                          EbizParams.GLBL_APP_SERV_LOC() + " and OrgId = '" + EbizParams.GLBL_APP_USR_ORG() +
                          "' and TmplId = '" + r.getAttribute("TmplId") + "' and WhId = '" +
                          r.getAttribute("TransWhId") + "' and ItmId = '" + r.getAttribute("TransItmId") + "'");
        Row[] rr = tempitm.getFilteredRows(rq);
        adfLog.info("----length-----" + rr.length + " exp " + rq.getExprStr());
        if (rr.length > 0) {
            return "Y";
        } else
            return "N";

    }

}
