package mmpochklistapp.model.service;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import com.tangosol.coherence.component.net.RequestContext;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmpochklistapp.model.service.common.MMPoChkListAppAm;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 17 12:33:10 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMPoChkListAppAmImpl extends ApplicationModuleImpl implements MMPoChkListAppAm {
    /**
     * This is the default constructor (do not remove).
     */
    public MMPoChkListAppAmImpl() {
    }
   
    
     public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for DualVo1.
     * @return DualVo1
     */
    public ViewObjectImpl getDualVo1() {
        return (ViewObjectImpl) findViewObject("DualVo1");
    }

    /**
     * Container's getter for MmIpoDocChkLstVO1.
     * @return MmIpoDocChkLstVO1
     */
    public ViewObjectImpl getMmIpoDocChkLstVO1() {
        return (ViewObjectImpl) findViewObject("MmIpoDocChkLstVO1");
    }

    public void setBindVarOnPageLoad() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        //  String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        /*  getMmIpoDocChkLstVO1().setNamedWhereClauseParam("bindCldId", cldId);
        getMmIpoDocChkLstVO1().setNamedWhereClauseParam("bindOrgId", orgId);
        getMmIpoDocChkLstVO1().setNamedWhereClauseParam("bindSlocId", slocId);
        getMmIpoDocChkLstVO1().setNamedWhereClauseParam("bindDocId", "^");
        getMmIpoDocChkLstVO1().executeQuery(); */
        ViewObjectImpl vo = this.getMmIpoDocChkLstVO1();
        ViewCriteria vc = vo.getViewCriteria("MmIpoDocChkLstVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", "-1");
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindSlocId", "-1");
        vo.setNamedWhereClauseParam("bindDocId", null);
        vo.executeQuery();


    }

    public void search() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        //String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        if (getDualVo1().getCurrentRow().getAttribute("TransPoDocId") != null) {

            ViewObjectImpl vo = this.getMmIpoDocChkLstVO1();
            ViewCriteria vc = vo.getViewCriteria("MmIpoDocChkLstVOCriteria");
            vo.applyViewCriteria(vc);
            vo.setNamedWhereClauseParam("bindCldId", cldId);
            vo.setNamedWhereClauseParam("bindOrgId", orgId);
            vo.setNamedWhereClauseParam("bindSlocId", slocId);
            vo.setNamedWhereClauseParam("bindDocId", getDualVo1().getCurrentRow().getAttribute("TransPoDocId"));
            vo.executeQuery();


            // getMmIpoDocChkLstVO1().executeQuery();
        }
    }

    public void resetSearch() {
        getDualVo1().executeQuery();
        getMmIpoDocChkLstVO1().setNamedWhereClauseParam("bindDocId", "^");
        getMmIpoDocChkLstVO1().executeQuery();

    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }


 public String addNewCheckList() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        
        Row curr = this.getDualVo1().getCurrentRow();
        ViewObjectImpl ipvo = this.getMmIpoDocChkLstVO1();
        if (curr.getAttribute("TransPoDocId") != null) {
            String docId = curr.getAttribute("TransPoDocId").toString();

            RowQualifier rq = new RowQualifier(ipvo);
            rq.setWhereClause("CldId='" + cldId + "' and OrgId='" + orgId + "' and SlocId=" + slocId + " and DocId='" + docId + "'");
            Row[] rr = ipvo.getFilteredRows(rq);
             System.out.println("current ipo length is "+rr.length+"  "+rq.getExprStr());
            if (rr.length > 0) {

            } else {
                /*  Integer Id = (Integer) */ 
                callStoredFunction(Types.NUMERIC, "mm.mm_ipo_ins_chk_lst (?,?,?,?,?)", new Object[] {
                                                           cldId, slocId, orgId, docId,usrId, 
                });
                ipvo.executeQuery();
                this.getDBTransaction().commit();
//                "Record saved successfully
                String s=ADFModelUtils.resolvRsrc("MSG.1262");
                FacesMessage message = new FacesMessage(s);
                message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                
           //     System.out.println("current ipo check value is "+Id);
            }
        }else{
            return "P";
        }
        return "Y";
    }
}

