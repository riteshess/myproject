package mmstkresvrel.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmstkresvrel.model.services.common.MMStkResvRelAM;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 07 12:09:21 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMStkResvRelAMImpl extends ApplicationModuleImpl implements MMStkResvRelAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MMStkResvRelAMImpl() {
    }

    public String getcldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    public String getOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }


    /**
     * Container's getter for LovRadio1.
     * @return LovRadio1
     */
    public ViewObjectImpl getLovRadio1() {
        return (ViewObjectImpl) findViewObject("LovRadio1");
    }

    /**
     * Container's getter for MMStkResvDtl1.
     * @return MMStkResvDtl1
     */
    public ViewObjectImpl getMMStkResvDtl1() {
        return (ViewObjectImpl) findViewObject("MMStkResvDtl1");
    }

    /**
     * Container's getter for MmStkResvRqmt1.
     * @return MmStkResvRqmt1
     */
    public ViewObjectImpl getMmStkResvRqmt1() {
        return (ViewObjectImpl) findViewObject("MmStkResvRqmt1");
    }

    /**
     * Container's getter for MMStkResv1.
     * @return MMStkResv1
     */
    public ViewObjectImpl getMMStkResv1() {
        return (ViewObjectImpl) findViewObject("MMStkResv1");
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public ViewObjectImpl getTransSearch1() {
        return (ViewObjectImpl) findViewObject("TransSearch1");
    }

    /**
     * Container's getter for LovDocSrc1.
     * @return LovDocSrc1
     */
    public ViewObjectImpl getLovDocSrc1() {
        return (ViewObjectImpl) findViewObject("LovDocSrc1");
    }

    /**
     * Container's getter for LovItm1.
     * @return LovItm1
     */
    public ViewObjectImpl getLovItm1() {
        return (ViewObjectImpl) findViewObject("LovItm1");
    }

    /**
     * Container's getter for LovRqmtArea1.
     * @return LovRqmtArea1
     */
    public ViewObjectImpl getLovRqmtArea1() {
        return (ViewObjectImpl) findViewObject("LovRqmtArea1");
    }


    public void search() {
        ViewObjectImpl transvo = this.getTransSearch1();
        Row curr = transvo.getCurrentRow();
        ViewObjectImpl stkResv = this.getMMStkResvRelVW1();
        stkResv.setNamedWhereClauseParam("bindCldId", getcldId());
        stkResv.setNamedWhereClauseParam("bindOrgId", getOrgId());
        stkResv.setNamedWhereClauseParam("bindSlocId", getSlocId());
        System.out.println("Item Id" + curr.getAttribute("TransItmId"));
        stkResv.setNamedWhereClauseParam("bindItmId", curr.getAttribute("TransItmId"));
        Object req = (Object) curr.getAttribute("TransRqmtArea");
        System.out.println("required att id" + req);
        if (req != null) {
            Integer reqAttId = Integer.parseInt(curr.getAttribute("TransRqmtArea").toString());

            stkResv.setNamedWhereClauseParam("bindSrcAttId", reqAttId);
        }

        ViewObjectImpl lovCurrRow = this.getLovDocSrc1();
        Object cuuRowAttId = (Object) curr.getAttribute("TransDocSrc");
        System.out.println("Att Id is" + cuuRowAttId);
        if (cuuRowAttId != null) {
            Integer cRowAtt = Integer.parseInt(curr.getAttribute("TransDocSrc").toString());

            if (cRowAtt == 915) {
                stkResv.setNamedWhereClauseParam("bindSrcDocType", 330);
            }
            if (cRowAtt == 916) {
                stkResv.setNamedWhereClauseParam("bindSrcDocType", 326);
            }
            if (cRowAtt == 917) {
                stkResv.setNamedWhereClauseParam("bindSrcDocType", 329);
            }
        }
        stkResv.executeQuery();
    }

    public void reset() {
        ViewObjectImpl transvo = this.getTransSearch1();
        Row curr = transvo.getCurrentRow();
        ViewObjectImpl stkResvReset = this.getMMStkResvRelVW1();
        stkResvReset.setNamedWhereClauseParam("bindCldId", "-1");
        stkResvReset.setNamedWhereClauseParam("bindOrgId", "-1");
        stkResvReset.setNamedWhereClauseParam("bindSlocId", -1);
        stkResvReset.setNamedWhereClauseParam("bindItmId", null);
        stkResvReset.setNamedWhereClauseParam("bindSrcAttId", null);
        stkResvReset.setNamedWhereClauseParam("bindSrcDocType", null);
        stkResvReset.executeQuery();
    }


    /**
     * Container's getter for MMStkResvRelVW1.
     * @return MMStkResvRelVW1
     */
    public ViewObjectImpl getMMStkResvRelVW1() {
        return (ViewObjectImpl) findViewObject("MMStkResvRelVW1");
    }

    /**
     * Container's getter for MMStkResvDtl2.
     * @return MMStkResvDtl2
     */
    public ViewObjectImpl getMMStkResvDtl2() {
        return (ViewObjectImpl) findViewObject("MMStkResvDtl2");
    }

    /**
     * Container's getter for StkResvToDtlVL1.
     * @return StkResvToDtlVL1
     */
    public ViewLinkImpl getStkResvToDtlVL1() {
        return (ViewLinkImpl) findViewLink("StkResvToDtlVL1");
    }

    /**
     * Container's getter for LovWarehouse1.
     * @return LovWarehouse1
     */
    public ViewObjectImpl getLovWarehouse1() {
        return (ViewObjectImpl) findViewObject("LovWarehouse1");
    }

    /**
     * Container's getter for LovUom1.
     * @return LovUom1
     */
    public ViewObjectImpl getLovUom1() {
        return (ViewObjectImpl) findViewObject("LovUom1");
    }

    /**
     * Container's getter for MMStkResv2.
     * @return MMStkResv2
     */
    public ViewObjectImpl getMMStkResv2() {
        return (ViewObjectImpl) findViewObject("MMStkResv2");
    }

    /**
     * Container's getter for SlsSo1.
     * @return SlsSo1
     */
    public ViewObjectImpl getSlsSo1() {
        return (ViewObjectImpl) findViewObject("SlsSo1");
    }

    /**
     * Container's getter for MmMrs1.
     * @return MmMrs1
     */
    public ViewObjectImpl getMmMrs1() {
        return (ViewObjectImpl) findViewObject("MmMrs1");
    }

    /**
     * Container's getter for MMTrfOrd1.
     * @return MMTrfOrd1
     */
    public ViewObjectImpl getMMTrfOrd1() {
        return (ViewObjectImpl) findViewObject("MMTrfOrd1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            String msg = e.getMessage();
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);

            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /**
     * Container's getter for LovModType1.
     * @return LovModType1
     */
    public ViewObjectImpl getLovModType1() {
        return (ViewObjectImpl) findViewObject("LovModType1");
    }

    public String resetAll() {
        ViewObjectImpl vw = this.getTransSearch1();
        vw.executeQuery();
        this.reset();
        return "resetAll";

    }

    public String viewFilter(String cld_id, Integer sloc_id, String org_id, String docId, String ItmId) {

        String view = "";
        //        ViewObjectImpl vo = this.getMMStkResv1();
        //        ViewCriteria criteria = vo.getViewCriteria("MMStkResvVOCriteria");
        //        vo.applyViewCriteria(criteria);
        //        ViewObject vo1 = this.getMMStkResvRelVW1();
        //        // String doc_id = vo1.getCurrentRow().getAttribute("StkResvDocId").toString();
        //        System.out.println("!@# cld is is" + cld_id + "sloc id is" + sloc_id + "org_id is" + org_id + "doc id is" +
        //                           docId + "itm id is" + ItmId);
        //        vo.setNamedWhereClauseParam("bindCldId", cld_id);
        //        vo.setNamedWhereClauseParam("bindSlocId", sloc_id);
        //        vo.setNamedWhereClauseParam("bindOrgId", org_id);
        //        vo.setNamedWhereClauseParam("bindDocId", docId);
        //        vo.setNamedWhereClauseParam("bindItmId", ItmId);
        //        vo.executeQuery();
        return view;

    }


    public void filterSearch(String cld_id, Integer sloc_id, String org_id, String docId, String ItmId) {
        ViewObjectImpl vo = this.getMMStkResv1();
        ViewCriteria criteria = vo.getViewCriteria("MMStkResvVOCriteria");
        vo.applyViewCriteria(criteria);
        ViewObject vo1 = this.getMMStkResvRelVW1();
        // String doc_id = vo1.getCurrentRow().getAttribute("StkResvDocId").toString();
        System.out.println("!@# cld is is" + cld_id + "sloc id is" + sloc_id + "org_id is" + org_id + "doc id is" +
                           docId + "itm id is" + ItmId);
        vo.setNamedWhereClauseParam("bindCldId", cld_id);
        vo.setNamedWhereClauseParam("bindSlocId", sloc_id);
        vo.setNamedWhereClauseParam("bindOrgId", org_id);
        vo.setNamedWhereClauseParam("bindDocId", docId);
        vo.setNamedWhereClauseParam("bindItmId", ItmId);
        vo.executeQuery();


    }


    public Integer doResvUpdt() {

        String docId1 = null;
        Number modQty = new Number(0);
        Integer modType = null;
        Object docId = (Object) this.getMMStkResv1().getCurrentRow().getAttribute("StkResvDocId");
        if (this.getMMStkResv1().getCurrentRow().getAttribute("ModType") != null) {
            modType = Integer.parseInt(this.getMMStkResv1().getCurrentRow().getAttribute("ModType").toString());
            System.out.println("mod type " + modType);
        }
        Object modQuant = (Object) this.getMMStkResv1().getCurrentRow().getAttribute("ModQty");
        if (modQuant != null) {
            modQty = (Number) this.getMMStkResv1().getCurrentRow().getAttribute("ModQty");
        }
        Integer fyId = Integer.parseInt(this.getMMStkResv1().getCurrentRow().getAttribute("FyId").toString());
        String whId = this.getMMStkResv1().getCurrentRow().getAttribute("WhId").toString();
        String ItmId = this.getMMStkResv1().getCurrentRow().getAttribute("ItmId").toString();
        Integer docType = Integer.parseInt(getMMStkResv1().getCurrentRow().getAttribute("StkResvDocType").toString());

        if (docId != null) {

            docId1 = getMMStkResv1().getCurrentRow().getAttribute("StkResvDocId").toString();
            System.out.println("Doc Id is " + docId1);
        }
        System.out.println("cld " + getcldId() + "orgid " + getOrgId() + "slocid " + getSlocId() + "fyid " + fyId +
                           "wh id " + whId + "itm id " + ItmId + "modQty " + modQty + "doctype " + docType + "docid " +
                           docId1 + "modtype " + modType);
        this.getDBTransaction().postChanges();
        Integer docId3 = (Integer) (callStoredFunction(Types.INTEGER, "MM_STK_RESV_UPDT(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                       getcldId(), getSlocId(), getOrgId(), fyId, whId, ItmId, docId1,
                                                       docType, modQty, modType
        }));
        System.out.println("return of function" + docId3);
        if (docId3 == 1) {
//                        this.getMMStkResv1().getCurrentRow().setAttribute("ModQty", 0);
//                        this.getMMStkResv1().getCurrentRow().setAttribute("ModType", 919);

            this.getMMStkResv1().executeQuery();
        }

        //  

        System.out.println("return of function" + docId3);
        return docId3;
    }

    public void searchFilter() {


        ViewObject vo1 = this.getMMStkResvRelVW1();
        // String doc_id = vo1.getCurrentRow().getAttribute("StkResvDocId").toString();
        //        System.out.println("!@# cld is is" + cld_id + "sloc id is" + sloc_id + "org_id is" + org_id + "doc id is" +
        //                           docId + "itm id is" + ItmId);
        vo1.setNamedWhereClauseParam("bindCldId", getcldId());
        vo1.setNamedWhereClauseParam("bindSlocId", getSlocId());
        vo1.setNamedWhereClauseParam("bindOrgId", getOrgId());
        vo1.setNamedWhereClauseParam("bindItmId", null);
        vo1.setNamedWhereClauseParam("bindSrcAttId", null);
        vo1.setNamedWhereClauseParam("bindSrcDocType", null);

        vo1.executeQuery();
    }

    public String qtyValidator(Number modVal) {
        String docId1 = null;
        Number balQty = new Number(0);
        Integer fyId = Integer.parseInt(this.getMMStkResv1().getCurrentRow().getAttribute("FyId").toString());
        String whId = this.getMMStkResv1().getCurrentRow().getAttribute("WhId").toString();
        String ItmId = this.getMMStkResv1().getCurrentRow().getAttribute("ItmId").toString();
        Integer docType = Integer.parseInt(getMMStkResv1().getCurrentRow().getAttribute("StkResvDocType").toString());
        Object docId = (Object) this.getMMStkResv1().getCurrentRow().getAttribute("StkResvDocId");
        if (docId == null) {
            docId1 = getMMStkResv1().getCurrentRow().getAttribute("StkResvDocId").toString();
            System.out.println("Doc Id is " + docId1);
        }


        if (this.getMMStkResv1().getCurrentRow().getAttribute("ModType") == 918) {

            BigDecimal docId3 = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM_RESV_BAL_QTY(?,?,?,?,?,?,?,?)", new Object[] {
                                                                 getcldId(), getSlocId(), getOrgId(), fyId, whId, ItmId,
                                                                 docId1, docType
            }));

            if (docId3 != null) {
                try {
                    balQty = new Number(docId3);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            System.out.println(" value of bigdecimal funtion is " + docId3);


            if (docType == 329 || docType == 330 || docType == 366) {
                if (balQty.compareTo(modVal) == -1) {
                    return "Y";
                }

            }
        } else {
            Number balStk = (Number) this.getMMStkResv1().getCurrentRow().getAttribute("BalQty");
            if (balStk.compareTo(modVal) >= 0) {

            } else {
                return "Y";
            }
        }

        return "N";
    }

}

