package mmreceiptmtl.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmreceiptmtl.model.entities.MmMtlRcptSrcEOImpl;
import mmreceiptmtl.model.services.MMReceiptMtlAMImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 11 14:56:56 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMtlRcptSrcVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMMTLRCPTSRCEO = 0;
    private static ADFLogger _log = ADFLogger.createADFLogger(MmMtlRcptSrcVORowImpl.class);
    /**
    *Global round digit for Amount
    * @return
    */
    
    public Integer getGlblRoundAmtDigit(){
    if(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}")!=null){
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"));
    }else{
        return 6;
    }
    }
    /**
    *Global round digit for Quantity
    * @return
    */
    
        public Integer getGlblRoundQtyDigit(){
        if(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}")!=null){
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}"));
        }else{
            return 6;
        }
        
    }
        /**
     *Global round digit for currency rate
     * @return
     */
        
     public Integer getGlblRoundCurrRateDigit(){
     if(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}")!=null){
         return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}"));
     }else{
         return 6;
     }
     
     }
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        OrgId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        WhId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getWhId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setWhId((String) value);
            }
        }
        ,
        DocTypeSrc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocTypeSrc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocTypeSrc((Integer) value);
            }
        }
        ,
        DocId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        }
        ,
        DocIdSrc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocIdSrc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocIdSrc((String) value);
            }
        }
        ,
        DocDtSrc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocDtSrc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocDtSrc((Timestamp) value);
            }
        }
        ,
        DlvSchdlNo {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDlvSchdlNo();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDlvSchdlNo((Integer) value);
            }
        }
        ,
        TaxRuleFlg {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTaxRuleFlg();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTaxRuleFlg((String) value);
            }
        }
        ,
        TaxAfterDiscFlg {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTaxAfterDiscFlg();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTaxAfterDiscFlg((String) value);
            }
        }
        ,
        DiscAmtSp {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDiscAmtSp();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDiscAmtSp((Number) value);
            }
        }
        ,
        DiscAmtBs {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDiscAmtBs();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDiscAmtBs((Number) value);
            }
        }
        ,
        PoAmtSp {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getPoAmtSp();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setPoAmtSp((Number) value);
            }
        }
        ,
        PoAmtBs {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getPoAmtBs();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setPoAmtBs((Number) value);
            }
        }
        ,
        DocIdSrcDisp {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocIdSrcDisp();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocIdSrcDisp((String) value);
            }
        }
        ,
        DocIdIssu {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getDocIdIssu();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setDocIdIssu((String) value);
            }
        }
        ,
        TransChkQc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransChkQc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransChkQc((String) value);
            }
        }
        ,
        TransChkRewkPrsnt {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransChkRewkPrsnt();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransChkRewkPrsnt((String) value);
            }
        }
        ,
        TransChkRejctPrsnt {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransChkRejctPrsnt();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransChkRejctPrsnt((String) value);
            }
        }
        ,
        TransSumOcAmt {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransSumOcAmt();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransSumOcAmt((Number) value);
            }
        }
        ,
        TransOcCoaId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransOcCoaId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransOcCoaId((String) value);
            }
        }
        ,
        TransOcDesc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransOcDesc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransOcDesc((Integer) value);
            }
        }
        ,
        TransOcAmt {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransOcAmt();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransOcAmt((Number) value);
            }
        }
        ,
        TransCoaIdForOc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransCoaIdForOc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransCoaIdForOc((Integer) value);
            }
        }
        ,
        TransHoOrgId {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransHoOrgId();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransHoOrgId((String) value);
            }
        }
        ,
        TransSumLndPrice {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransSumLndPrice();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransSumLndPrice((Number) value);
            }
        }
        ,
        TransSumLndPriceSp {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransSumLndPriceSp();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransSumLndPriceSp((Number) value);
            }
        }
        ,
        TransSumTotPriceSp {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransSumTotPriceSp();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransSumTotPriceSp((Number) value);
            }
        }
        ,
        TransSumTaxDutiesSp {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransSumTaxDutiesSp();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransSumTaxDutiesSp((Number) value);
            }
        }
        ,
        TransSumRecTaxSp {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransSumRecTaxSp();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransSumRecTaxSp((Number) value);
            }
        }
        ,
        TransSumDiscSp {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransSumDiscSp();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransSumDiscSp((Number) value);
            }
        }
        ,
        TransPartOfAmountOc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getTransPartOfAmountOc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setTransPartOfAmountOc((Number) value);
            }
        }
        ,
        MmMtlRcptItm {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getMmMtlRcptItm();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmMtlRcptOc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getMmMtlRcptOc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmMtlRcptOc1 {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getMmMtlRcptOc1();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmMtlRcptItmBc {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getMmMtlRcptItmBc();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmMtlRcptItmBc1 {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getMmMtlRcptItmBc1();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovOcDescVO {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getLovOcDescVO();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovOcCoaIdVO {
            public Object get(MmMtlRcptSrcVORowImpl obj) {
                return obj.getLovOcCoaIdVO();
            }

            public void put(MmMtlRcptSrcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static int firstIndex = 0;

        public abstract Object get(MmMtlRcptSrcVORowImpl object);

        public abstract void put(MmMtlRcptSrcVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int DOCTYPESRC = AttributesEnum.DocTypeSrc.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int DOCDTSRC = AttributesEnum.DocDtSrc.index();
    public static final int DLVSCHDLNO = AttributesEnum.DlvSchdlNo.index();
    public static final int TAXRULEFLG = AttributesEnum.TaxRuleFlg.index();
    public static final int TAXAFTERDISCFLG = AttributesEnum.TaxAfterDiscFlg.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int POAMTSP = AttributesEnum.PoAmtSp.index();
    public static final int POAMTBS = AttributesEnum.PoAmtBs.index();
    public static final int DOCIDSRCDISP = AttributesEnum.DocIdSrcDisp.index();
    public static final int DOCIDISSU = AttributesEnum.DocIdIssu.index();
    public static final int TRANSCHKQC = AttributesEnum.TransChkQc.index();
    public static final int TRANSCHKREWKPRSNT = AttributesEnum.TransChkRewkPrsnt.index();
    public static final int TRANSCHKREJCTPRSNT = AttributesEnum.TransChkRejctPrsnt.index();
    public static final int TRANSSUMOCAMT = AttributesEnum.TransSumOcAmt.index();
    public static final int TRANSOCCOAID = AttributesEnum.TransOcCoaId.index();
    public static final int TRANSOCDESC = AttributesEnum.TransOcDesc.index();
    public static final int TRANSOCAMT = AttributesEnum.TransOcAmt.index();
    public static final int TRANSCOAIDFOROC = AttributesEnum.TransCoaIdForOc.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int TRANSSUMLNDPRICE = AttributesEnum.TransSumLndPrice.index();
    public static final int TRANSSUMLNDPRICESP = AttributesEnum.TransSumLndPriceSp.index();
    public static final int TRANSSUMTOTPRICESP = AttributesEnum.TransSumTotPriceSp.index();
    public static final int TRANSSUMTAXDUTIESSP = AttributesEnum.TransSumTaxDutiesSp.index();
    public static final int TRANSSUMRECTAXSP = AttributesEnum.TransSumRecTaxSp.index();
    public static final int TRANSSUMDISCSP = AttributesEnum.TransSumDiscSp.index();
    public static final int TRANSPARTOFAMOUNTOC = AttributesEnum.TransPartOfAmountOc.index();
    public static final int MMMTLRCPTITM = AttributesEnum.MmMtlRcptItm.index();
    public static final int MMMTLRCPTOC = AttributesEnum.MmMtlRcptOc.index();
    public static final int MMMTLRCPTOC1 = AttributesEnum.MmMtlRcptOc1.index();
    public static final int MMMTLRCPTITMBC = AttributesEnum.MmMtlRcptItmBc.index();
    public static final int MMMTLRCPTITMBC1 = AttributesEnum.MmMtlRcptItmBc1.index();
    public static final int LOVOCDESCVO = AttributesEnum.LovOcDescVO.index();
    public static final int LOVOCCOAIDVO = AttributesEnum.LovOcCoaIdVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmMtlRcptSrcVORowImpl() {
    }

    /**
     * Gets MmMtlRcptSrcEO entity object.
     * @return the MmMtlRcptSrcEO
     */
    public MmMtlRcptSrcEOImpl getMmMtlRcptSrcEO() {
        return (MmMtlRcptSrcEOImpl) getEntity(ENTITY_MMMTLRCPTSRCEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for WH_ID using the alias name WhId.
     * @return the WH_ID
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as attribute value for WH_ID using the alias name WhId.
     * @param value value to set the WH_ID
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for DOC_TYPE_SRC using the alias name DocTypeSrc.
     * @return the DOC_TYPE_SRC
     */
    public Integer getDocTypeSrc() {
        return (Integer) getAttributeInternal(DOCTYPESRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_TYPE_SRC using the alias name DocTypeSrc.
     * @param value value to set the DOC_TYPE_SRC
     */
    public void setDocTypeSrc(Integer value) {
        setAttributeInternal(DOCTYPESRC, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @return the DOC_ID_SRC
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @param value value to set the DOC_ID_SRC
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for DOC_DT_SRC using the alias name DocDtSrc.
     * @return the DOC_DT_SRC
     */
    public Timestamp getDocDtSrc() {
        return (Timestamp) getAttributeInternal(DOCDTSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_DT_SRC using the alias name DocDtSrc.
     * @param value value to set the DOC_DT_SRC
     */
    public void setDocDtSrc(Timestamp value) {
        setAttributeInternal(DOCDTSRC, value);
    }

    /**
     * Gets the attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @return the DLV_SCHDL_NO
     */
    public Integer getDlvSchdlNo() {
        return (Integer) getAttributeInternal(DLVSCHDLNO);
    }

    /**
     * Sets <code>value</code> as attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @param value value to set the DLV_SCHDL_NO
     */
    public void setDlvSchdlNo(Integer value) {
        setAttributeInternal(DLVSCHDLNO, value);
    }

    /**
     * Gets the attribute value for TAX_RULE_FLG using the alias name TaxRuleFlg.
     * @return the TAX_RULE_FLG
     */
    public String getTaxRuleFlg() {
        return (String) getAttributeInternal(TAXRULEFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_RULE_FLG using the alias name TaxRuleFlg.
     * @param value value to set the TAX_RULE_FLG
     */
    public void setTaxRuleFlg(String value) {
        setAttributeInternal(TAXRULEFLG, value);
    }

    /**
     * Gets the attribute value for TAX_AFTER_DISC_FLG using the alias name TaxAfterDiscFlg.
     * @return the TAX_AFTER_DISC_FLG
     */
    public String getTaxAfterDiscFlg() {
        return (String) getAttributeInternal(TAXAFTERDISCFLG);
    }

    /**
     * Sets <code>value</code> as attribute value for TAX_AFTER_DISC_FLG using the alias name TaxAfterDiscFlg.
     * @param value value to set the TAX_AFTER_DISC_FLG
     */
    public void setTaxAfterDiscFlg(String value) {
        setAttributeInternal(TAXAFTERDISCFLG, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
        return (Number) getAttributeInternal(DISCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
        setAttributeInternal(DISCAMTSP, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        return (Number) getAttributeInternal(DISCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for PO_AMT_SP using the alias name PoAmtSp.
     * @return the PO_AMT_SP
     */
    public Number getPoAmtSp() {
        return (Number) getAttributeInternal(POAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for PO_AMT_SP using the alias name PoAmtSp.
     * @param value value to set the PO_AMT_SP
     */
    public void setPoAmtSp(Number value) {
        setAttributeInternal(POAMTSP, value);
    }

    /**
     * Gets the attribute value for PO_AMT_BS using the alias name PoAmtBs.
     * @return the PO_AMT_BS
     */
    public Number getPoAmtBs() {
        return (Number) getAttributeInternal(POAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for PO_AMT_BS using the alias name PoAmtBs.
     * @param value value to set the PO_AMT_BS
     */
    public void setPoAmtBs(Number value) {
        setAttributeInternal(POAMTBS, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC_DISP using the alias name DocIdSrcDisp.
     * @return the DOC_ID_SRC_DISP
     */
    public String getDocIdSrcDisp() {
        Integer type = this.getDocTypeSrc();
        String doc = this.getDocIdSrc();
        MMReceiptMtlAMImpl am = (MMReceiptMtlAMImpl) this.getApplicationModule();
        System.out.println(type + "getDocIdSrcDisp---- " + doc);
        if (type.equals(266) || type.equals(819)) {
            Row[] po = am.getLovPurOrder().getFilteredRows("DocId", doc);
            System.out.println("lengtgh---- " + po.length);
            if (po.length > 0) {

                if (po[0].getAttribute("AuthPoNo") != null) {
                    System.out.println("AuthPoNo---- " + po[0].getAttribute("AuthPoNo"));
                    return po[0].getAttribute("AuthPoNo").toString();
                } else {
                    return (String) getAttributeInternal(DOCIDSRCDISP);
                }
            } else if (po.length == 0) { //  Change BL For Check DocIdSrcDisp
                return doc; //  Change BL For Check DocIdSrcDisp




            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        } else if (type.equals(270)) {
            Row[] to = am.getLovTransferOrd1().getFilteredRows("DocId", doc);
            if (to.length > 0) {
                return to[0].getAttribute("TrfNo").toString();
            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        } else if (type.equals(370)) {
            return this.getDocIdSrc();
        } else if (type.equals(396)) {
            return this.getDocIdSrc();
        } else if (type.equals(267)) {
            return this.getDocIdSrc();
        } else if (type.equals(269)) {
            Row[] rma = am.getViewRma().getFilteredRows("DocId", doc);
            if (rma.length > 0) {
                return rma[0].getAttribute("RmaId").toString();
            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        } else if (type.equals(399)) {
            Row[] mrn = am.getViewMMMrn().getFilteredRows("DocId", doc);
            if (mrn.length > 0) {
                return mrn[0].getAttribute("MrnNo").toString();
            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        } else if (type.equals(459)) {
            Row[] po = am.getLovPurOrder().getFilteredRows("DocId", doc);
            System.out.println("lengtgh---- " + po.length);
            if (po.length > 0) {

                if (po[0].getAttribute("AuthPoNo") != null) {
                    System.out.println("AuthPoNo---- " + po[0].getAttribute("AuthPoNo"));
                    return po[0].getAttribute("AuthPoNo").toString();
                } else {
                    return (String) getAttributeInternal(DOCIDSRCDISP);
                }
            } else if (po.length == 0) { //  Change BL For Check DocIdSrcDisp
                return doc; //  Change BL For Check DocIdSrcDisp




            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }


            //            Row[] cpo = am.getLovCpoNoVO().getFilteredRows("DocId", doc);
            //            _log.info("No . of rows in cpo=" + cpo.length);
            //            if (cpo.length > 0) {
            //                return cpo[0].getAttribute("CpoId").toString();
            //            } else {
            //                return (String) getAttributeInternal(DOCIDSRCDISP);
            //            }
        } else if (type.equals(541)) {
            Row[] kit = am.getLovMmKitProdNo().getFilteredRows("DocId", doc);
            if (kit.length > 0) {
                return kit[0].getAttribute("KitProdNo").toString();
            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        } else if (type.equals(770)) {
            Row[] mnfJe = am.getLovMnfJE().getFilteredRows("DocId", doc);
            if (mnfJe.length > 0) {
                return mnfJe[0].getAttribute("JeId").toString();
            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        } else if (type.equals(825)) {
            am.getLovGatePassForView().setNamedWhereClauseParam("BindSlocId", getSlocId());
            am.getLovGatePassForView().setNamedWhereClauseParam("BindCldId", getCldId());
            am.getLovGatePassForView().setNamedWhereClauseParam("BindOrgId", getOrgId());
            am.getLovGatePassForView().setNamedWhereClauseParam("BindDocId", doc);
            am.getLovGatePassForView().executeQuery();
            Row[] geNo = am.getLovGatePassForView().getFilteredRows("DocId", doc);
            if (geNo.length > 0 && geNo[0].getAttribute("GpNo") != null) {
                return geNo[0].getAttribute("GpNo").toString();
            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        } else if (type.equals(823)) {
            am.getLovStkAdjNo().setNamedWhereClauseParam("BindSlocId", getSlocId());
            am.getLovStkAdjNo().setNamedWhereClauseParam("BindCldId", getCldId());
            am.getLovStkAdjNo().setNamedWhereClauseParam("BindOrgId", getOrgId());
            am.getLovStkAdjNo().setNamedWhereClauseParam("BindDocId", doc);
            am.getLovStkAdjNo().executeQuery();
            Row[] geNo = am.getLovStkAdjNo().getFilteredRows("DocId", doc);
            if (geNo.length > 0 && geNo[0].getAttribute("StkAdjtNo") != null) {
                return geNo[0].getAttribute("StkAdjtNo").toString();
            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        } else if (type.equals(774)) {
            am.getLovStockSwapNo().setNamedWhereClauseParam("BindSlocId", getSlocId());
            am.getLovStockSwapNo().setNamedWhereClauseParam("BindCldId", getCldId());
            am.getLovStockSwapNo().setNamedWhereClauseParam("BindOrgId", getOrgId());
            am.getLovStockSwapNo().setNamedWhereClauseParam("BindDocId", doc);
            am.getLovStockSwapNo().executeQuery();
            Row[] geNo = am.getLovStockSwapNo().getFilteredRows("DocId", doc);
            if (geNo.length > 0 && geNo[0].getAttribute("SwapId") != null) {
                return geNo[0].getAttribute("SwapId").toString();
            } else {
                return (String) getAttributeInternal(DOCIDSRCDISP);
            }
        }
        else if (type.equals(858)) {
                    am.getLovSubContractNo().setNamedWhereClauseParam("BindSlocId", getSlocId());
                    am.getLovSubContractNo().setNamedWhereClauseParam("BindCldId", getCldId());
                    am.getLovSubContractNo().setNamedWhereClauseParam("BindOrgId", getOrgId());
                    am.getLovSubContractNo().setNamedWhereClauseParam("BindDocId", doc);
                    am.getLovSubContractNo().executeQuery();
                    Row[] geNo = am.getLovSubContractNo().getFilteredRows("DocId", doc);
                    if (geNo.length > 0 && geNo[0].getAttribute("RcptNo") != null) {
                        return geNo[0].getAttribute("RcptNo").toString();
                    } else {
                        return (String) getAttributeInternal(DOCIDSRCDISP);
                    }
                }
        else if (type.equals(938)) {
                    am.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindSlocId", getSlocId());
                    am.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindCldId", getCldId());
                    am.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindOrgId", getOrgId());
                    am.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindWhId", getWhId());
                    am.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindHoOrgId", getTransHoOrgId());
                    am.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindDocId", doc);
                    am.getLovJITimeReceptDisp().executeQuery();
                    Row[] geNo = am.getLovJITimeReceptDisp().getFilteredRows("DocId", doc);
                    if (geNo.length > 0 && geNo[0].getAttribute("RcptNo") != null) {
                        return geNo[0].getAttribute("RcptNo").toString();
                    } else {
                        return (String) getAttributeInternal(DOCIDSRCDISP);
                    }
                }

        else {
            return (String) getAttributeInternal(DOCIDSRCDISP);
        }

    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC_DISP using the alias name DocIdSrcDisp.
     * @param value value to set the DOC_ID_SRC_DISP
     */
    public void setDocIdSrcDisp(String value) {
        setAttributeInternal(DOCIDSRCDISP, value);
    }

    /**
     * Gets the attribute value for DOC_ID_ISSU using the alias name DocIdIssu.
     * @return the DOC_ID_ISSU
     */
    public String getDocIdIssu() {
        return (String) getAttributeInternal(DOCIDISSU);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_ISSU using the alias name DocIdIssu.
     * @param value value to set the DOC_ID_ISSU
     */
    public void setDocIdIssu(String value) {
        setAttributeInternal(DOCIDISSU, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransChkQc.
     * @return the TransChkQc
     */
    public String getTransChkQc() {
        MMReceiptMtlAMImpl am = (MMReceiptMtlAMImpl) this.getApplicationModule();


        RowQualifier rq = new RowQualifier(am.getMmMtlRcptItm2());
        rq.setWhereClause("CldId='" + this.getCldId() + "' and SlocId=" + this.getSlocId() + " and OrgId='" +
                          this.getOrgId() + "' and DocId='" + this.getDocId() + "' and DocIdSrc='" +
                          this.getDocIdSrc() + "' and DlvSchdlNo=" + this.getDlvSchdlNo() + "");
        Row[] itmRsi = am.getMmMtlRcptItm2().getFilteredRows(rq);

        String ret = "N";
        for (Row cu : itmRsi) {

            String chk = "N";
            String ovrChk = "N";
            Number rcptQtBs = new Number(0);
            if (cu.getAttribute("QcReqdFlg") != null) {
                chk = cu.getAttribute("QcReqdFlg").toString();
            }
            if (cu.getAttribute("QcOverrideFlg") != null) {
                ovrChk = cu.getAttribute("QcOverrideFlg").toString();
            }
            if (cu.getAttribute("RcptQtyBs") != null) {
                rcptQtBs = (Number) cu.getAttribute("RcptQtyBs");
            }

            if (chk.equals("Y") && ovrChk.equals("N") && (rcptQtBs.compareTo(new Number(0)) == 1)) {
                ret = "Y";
            }
        }

        return ret;
        //return (String) getAttributeInternal(TRANSCHKQC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransChkQc.
     * @param value value to set the  TransChkQc
     */
    public void setTransChkQc(String value) {
        setAttributeInternal(TRANSCHKQC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransChkRewkPrsnt.
     * @return the TransChkRewkPrsnt
     */
    public String getTransChkRewkPrsnt() {
        MMReceiptMtlAMImpl am = (MMReceiptMtlAMImpl) this.getApplicationModule();
        RowSetIterator itmRsi = am.getMmMtlRcptItm().createRowSetIterator(null);
        String ret = "N";
        while (itmRsi.hasNext()) {
            Row cu = itmRsi.next();
            Number qty = new Number(0);
            if (cu.getAttribute("RwkQty") != null) {
                qty = (Number) cu.getAttribute("RwkQty");
            }
            if (qty.compareTo(new Number(0)) == 1) {
                ret = "Y";
            }
        }
        itmRsi.closeRowSetIterator();
        return ret;
        //  return (String) getAttributeInternal(TRANSCHKREWKPRSNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransChkRewkPrsnt.
     * @param value value to set the  TransChkRewkPrsnt
     */
    public void setTransChkRewkPrsnt(String value) {
        setAttributeInternal(TRANSCHKREWKPRSNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransChkRejctPrsnt.
     * @return the TransChkRejctPrsnt
     */
    public String getTransChkRejctPrsnt() {
        MMReceiptMtlAMImpl am = (MMReceiptMtlAMImpl) this.getApplicationModule();
        am.getMmMtlRcptItm1().executeQuery();
        RowSetIterator itmRsi = am.getMmMtlRcptItm1().createRowSetIterator(null);
        String ret = "N";
        Number zero = new Number(0);
        while (itmRsi.hasNext()) {
            Row cu = itmRsi.next();
            Number itmRejqty = zero;
            Number qcRejQty = zero;
            if (cu.getAttribute("RejQty") != null) {
                itmRejqty = (Number) cu.getAttribute("RejQty");
            }
            if (cu.getAttribute("QcRejQty") != null) {
                qcRejQty = (Number) cu.getAttribute("QcRejQty");
            }

            if (itmRejqty.compareTo(zero) == 1 || qcRejQty.compareTo(zero) == 1) {
                ret = "Y";
            }
        }
        itmRsi.closeRowSetIterator();
        return ret;


        //  return (String) getAttributeInternal(TRANSCHKREJCTPRSNT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransChkRejctPrsnt.
     * @param value value to set the  TransChkRejctPrsnt
     */
    public void setTransChkRejctPrsnt(String value) {
        setAttributeInternal(TRANSCHKREJCTPRSNT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumOcAmt.
     * @return the TransSumOcAmt
     */
    public Number getTransSumOcAmt() {
        return (Number) getAttributeInternal(TRANSSUMOCAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumOcAmt.
     * @param value value to set the  TransSumOcAmt
     */
    public void setTransSumOcAmt(Number value) {
        setAttributeInternal(TRANSSUMOCAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcCoaId.
     * @return the TransOcCoaId
     */
    public String getTransOcCoaId() {
        return (String) getAttributeInternal(TRANSOCCOAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcCoaId.
     * @param value value to set the  TransOcCoaId
     */
    public void setTransOcCoaId(String value) {
        setAttributeInternal(TRANSOCCOAID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcDesc.
     * @return the TransOcDesc
     */
    public Integer getTransOcDesc() {
        return (Integer) getAttributeInternal(TRANSOCDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcDesc.
     * @param value value to set the  TransOcDesc
     */
    public void setTransOcDesc(Integer value) {
        setAttributeInternal(TRANSOCDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcAmt.
     * @return the TransOcAmt
     */
    public Number getTransOcAmt() {
        return (Number) getAttributeInternal(TRANSOCAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcAmt.
     * @param value value to set the  TransOcAmt
     */
    public void setTransOcAmt(Number value) {
        setAttributeInternal(TRANSOCAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCoaIdForOc.
     * @return the TransCoaIdForOc
     */
    public Integer getTransCoaIdForOc() {
        return (Integer) getAttributeInternal(TRANSCOAIDFOROC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCoaIdForOc.
     * @param value value to set the  TransCoaIdForOc
     */
    public void setTransCoaIdForOc(Integer value) {
        setAttributeInternal(TRANSCOAIDFOROC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        // return (String) getAttributeInternal(TRANSHOORGID);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumLndPrice.
     * @return the TransSumLndPrice
     */
    public Number getTransSumLndPrice() {
        return (Number) getAttributeInternal(TRANSSUMLNDPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumLndPrice.
     * @param value value to set the  TransSumLndPrice
     */
    public void setTransSumLndPrice(Number value) {
        setAttributeInternal(TRANSSUMLNDPRICE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumLndPriceSp.
     * @return the TransSumLndPriceSp
     */
    public Number getTransSumLndPriceSp() {
        if (getAttributeInternal(TRANSSUMLNDPRICESP) != null) {
            MMReceiptMtlAMImpl am = (MMReceiptMtlAMImpl) this.getApplicationModule();
            Number currencyFctr = new Number(1);
            Object obj = am.getMmMtlRcpt().getCurrentRow().getAttribute("CurrConvFctr");
            if (obj != null) {
                currencyFctr = (Number)(((Number) obj).round(getGlblRoundCurrRateDigit()));
            }
            Number lndPricesum = (Number)((Number) getAttributeInternal(TRANSSUMLNDPRICESP)).round(getGlblRoundAmtDigit());
            setPoAmtSp(lndPricesum);
            setPoAmtBs((Number)(lndPricesum.multiply(currencyFctr)).round(getGlblRoundAmtDigit()));
        }
        return (Number) getAttributeInternal(TRANSSUMLNDPRICESP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumLndPriceSp.
     * @param value value to set the  TransSumLndPriceSp
     */
    public void setTransSumLndPriceSp(Number value) {
        setAttributeInternal(TRANSSUMLNDPRICESP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumTotPriceSp.
     * @return the TransSumTotPriceSp
     */
    public Number getTransSumTotPriceSp() {
        return (Number) getAttributeInternal(TRANSSUMTOTPRICESP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumTotPriceSp.
     * @param value value to set the  TransSumTotPriceSp
     */
    public void setTransSumTotPriceSp(Number value) {
        setAttributeInternal(TRANSSUMTOTPRICESP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumTaxDutiesSp.
     * @return the TransSumTaxDutiesSp
     */
    public Number getTransSumTaxDutiesSp() {
        return (Number) getAttributeInternal(TRANSSUMTAXDUTIESSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumTaxDutiesSp.
     * @param value value to set the  TransSumTaxDutiesSp
     */
    public void setTransSumTaxDutiesSp(Number value) {
        setAttributeInternal(TRANSSUMTAXDUTIESSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumRecTaxSp.
     * @return the TransSumRecTaxSp
     */
    public Number getTransSumRecTaxSp() {
        return (Number) getAttributeInternal(TRANSSUMRECTAXSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumRecTaxSp.
     * @param value value to set the  TransSumRecTaxSp
     */
    public void setTransSumRecTaxSp(Number value) {
        setAttributeInternal(TRANSSUMRECTAXSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSumDiscSp.
     * @return the TransSumDiscSp
     */
    public Number getTransSumDiscSp() {
        return (Number) getAttributeInternal(TRANSSUMDISCSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSumDiscSp.
     * @param value value to set the  TransSumDiscSp
     */
    public void setTransSumDiscSp(Number value) {
        setAttributeInternal(TRANSSUMDISCSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPartOfAmountOc.
     * @return the TransPartOfAmountOc
     */
    public Number getTransPartOfAmountOc() {
        Number ocAmt = this.ocAmountsum(11111);
        System.out.println(" is 11111 type " + ocAmt);
        if (ocAmt != null) {
            return ocAmt;
        } else {
            return new Number(0);
        }
        // return (Number) getAttributeInternal(TRANSPARTOFAMOUNTOC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPartOfAmountOc.
     * @param value value to set the  TransPartOfAmountOc
     */
    public void setTransPartOfAmountOc(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSPARTOFAMOUNTOC, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmMtlRcptItm.
     */
    public RowIterator getMmMtlRcptItm() {
        return (RowIterator) getAttributeInternal(MMMTLRCPTITM);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmMtlRcptOc.
     */
    public RowIterator getMmMtlRcptOc() {
        return (RowIterator) getAttributeInternal(MMMTLRCPTOC);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmMtlRcptOc1.
     */
    public RowIterator getMmMtlRcptOc1() {
        return (RowIterator) getAttributeInternal(MMMTLRCPTOC1);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmMtlRcptItmBc.
     */
    public RowIterator getMmMtlRcptItmBc() {
        return (RowIterator) getAttributeInternal(MMMTLRCPTITMBC);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmMtlRcptItmBc1.
     */
    public RowIterator getMmMtlRcptItmBc1() {
        return (RowIterator) getAttributeInternal(MMMTLRCPTITMBC1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOcDescVO.
     */
    public RowSet getLovOcDescVO() {
        return (RowSet) getAttributeInternal(LOVOCDESCVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOcCoaIdVO.
     */
    public RowSet getLovOcCoaIdVO() {
        return (RowSet) getAttributeInternal(LOVOCCOAIDVO);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    public Number ocAmountsum(Integer ocType) {
        Number ocAmt = new Number(0);
        MMReceiptMtlAMImpl am = (MMReceiptMtlAMImpl) this.getApplicationModule();
        ViewObjectImpl vo = am.getMmMtlRcptOc1();
        if (ocType.compareTo(new Integer(11111)) == 0) {
            RowQualifier rq = new RowQualifier(vo);
            rq.setWhereClause("OrgId ='" + getOrgId() + "' and CldId ='" + getCldId() + "' and SlocId =" + getSlocId() +
                              " and DocId ='" + getDocId() + "' ");
            Row[] rr = vo.getFilteredRows(rq);
            System.out.println(ocType + "oc amount " + ocAmt);
            if (rr.length > 0) {
                for (Row rr1 : rr) {
                    am.getOcForImportPoView().setNamedWhereClauseParam("CldIdBind", getCldId());
                    am.getOcForImportPoView().setNamedWhereClauseParam("SlocIdBind", getSlocId());
                    am.getOcForImportPoView().setNamedWhereClauseParam("HoOrgIdBind", getTransHoOrgId());
                    am.getOcForImportPoView().setNamedWhereClauseParam("DocIdBind", 18504);
                    am.getOcForImportPoView().setNamedWhereClauseParam("DocTypeIdBind", 741);
                    am.getOcForImportPoView().executeQuery();
                    Row[] rrN = am.getOcForImportPoView().getFilteredRows("OcId", rr1.getAttribute("OcId"));
                    if (rrN.length > 0 && rrN[0].getAttribute("PartOfCost") != null) {
                        if ("Y".equalsIgnoreCase(rrN[0].getAttribute("PartOfCost").toString()))
                            ocAmt = ocAmt.add((Number) rr1.getAttribute("OcAmtSp"));
                    }
                }
            }
        }
        System.out.println("oc amount return " + ocAmt);
        return ocAmt;
    }
}
