package mmreceiptmtl.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmreceiptmtl.model.services.MMReceiptMtlAMImpl;
import mmreceiptmtl.model.views.common.MmMtlRcptLotVO;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 17 18:40:28 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMtlRcptLotVOImpl extends ViewObjectImpl implements MmMtlRcptLotVO {
    /**
     * This is the default constructor (do not remove).
     */
    public MmMtlRcptLotVOImpl() {
    }

    /**
     * Returns the variable value for itmIdBindVar.
     * @return variable value for itmIdBindVar
     */
    public String getitmIdBindVar() {
        return (String)ensureVariableManager().getVariableValue("itmIdBindVar");
    }
    /**
     *Global round digit for Quantity
     * @return
     */
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    public Integer getGlblRoundQtyDigit() {
        if (resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}") != null) {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}"));
        } else {
            return 6;
        }

    }

    /**
     * Sets <code>value</code> for variable itmIdBindVar.
     * @param value value to bind as itmIdBindVar
     */
    public void setitmIdBindVar(String value) {
        ensureVariableManager().setVariableValue("itmIdBindVar", value);
    }

    /**
     * Returns the variable value for itmUomBindVar.
     * @return variable value for itmUomBindVar
     */
    public String getitmUomBindVar() {
        return (String)ensureVariableManager().getVariableValue("itmUomBindVar");
    }

    /**
     * Sets <code>value</code> for variable itmUomBindVar.
     * @param value value to bind as itmUomBindVar
     */
    public void setitmUomBindVar(String value) {
        ensureVariableManager().setVariableValue("itmUomBindVar", value);
    }

    /**
     * Returns the variable value for DocIdSrcVar.
     * @return variable value for DocIdSrcVar
     */
    public String getDocIdSrcVar() {
        return (String)ensureVariableManager().getVariableValue("DocIdSrcVar");
    }

    /**
     * Sets <code>value</code> for variable DocIdSrcVar.
     * @param value value to bind as DocIdSrcVar
     */
    public void setDocIdSrcVar(String value) {
        ensureVariableManager().setVariableValue("DocIdSrcVar", value);
    }

    /**
     * Returns the variable value for DocIdVar.
     * @return variable value for DocIdVar
     */
    public String getDocIdVar() {
        return (String)ensureVariableManager().getVariableValue("DocIdVar");
    }

    /**
     * Sets <code>value</code> for variable DocIdVar.
     * @param value value to bind as DocIdVar
     */
    public void setDocIdVar(String value) {
        ensureVariableManager().setVariableValue("DocIdVar", value);
    }

    /**
     * Returns the variable value for DocSchdlVar.
     * @return variable value for DocSchdlVar
     */
    public Integer getDocSchdlVar() {
        return (Integer)ensureVariableManager().getVariableValue("DocSchdlVar");
    }

    /**
     * Sets <code>value</code> for variable DocSchdlVar.
     * @param value value to bind as DocSchdlVar
     */
    public void setDocSchdlVar(Integer value) {
        ensureVariableManager().setVariableValue("DocSchdlVar", value);
    }

    /**
     * Returns the variable value for OrgIdVar.
     * @return variable value for OrgIdVar
     */
    public String getOrgIdVar() {
        return (String)ensureVariableManager().getVariableValue("OrgIdVar");
    }

    /**
     * Sets <code>value</code> for variable OrgIdVar.
     * @param value value to bind as OrgIdVar
     */
    public void setOrgIdVar(String value) {
        ensureVariableManager().setVariableValue("OrgIdVar", value);
    }

    /**
     * Returns the variable value for SlocIdVar.
     * @return variable value for SlocIdVar
     */
    public Integer getSlocIdVar() {
        return (Integer)ensureVariableManager().getVariableValue("SlocIdVar");
    }

    /**
     * Sets <code>value</code> for variable SlocIdVar.
     * @param value value to bind as SlocIdVar
     */
    public void setSlocIdVar(Integer value) {
        ensureVariableManager().setVariableValue("SlocIdVar", value);
    }

    /**
     * Returns the variable value for CldIdVar.
     * @return variable value for CldIdVar
     */
    public String getCldIdVar() {
        return (String)ensureVariableManager().getVariableValue("CldIdVar");
    }

    /**
     * Sets <code>value</code> for variable CldIdVar.
     * @param value value to bind as CldIdVar
     */
    public void setCldIdVar(String value) {
        ensureVariableManager().setVariableValue("CldIdVar", value);
    }

    /**
     * Returns the variable value for WhIdVar.
     * @return variable value for WhIdVar
     */
    public String getWhIdVar() {
        return (String)ensureVariableManager().getVariableValue("WhIdVar");
    }

    /**
     * Sets <code>value</code> for variable WhIdVar.
     * @param value value to bind as WhIdVar
     */
    public void setWhIdVar(String value) {
        ensureVariableManager().setVariableValue("WhIdVar", value);
    }
    
    public String isLotQtyValid(Number rcptQty,Number obj){
        Row curRw=this.getCurrentRow();
      /*   MMReceiptMtlAMImpl am=(MMReceiptMtlAMImpl)this.getApplicationModule();
        Number fctr=(Number)am.getMmMtlRcptItm1().getCurrentRow().getAttribute("UomConvFctr");
        */ 
        RowSetIterator rsi= this.createRowSetIterator(null);
        Number sum =new Number(0);
        while(rsi.hasNext()){
            Row cur=rsi.next();
            if(curRw!=cur){
                Number lqty=(Number)((Number)cur.getAttribute("LotQty")).round(getGlblRoundQtyDigit());
                sum=sum.add(lqty);   
            }    
        }
        
        rsi.closeRowSetIterator();
    
        sum=sum.add((Number)obj.round(getGlblRoundQtyDigit()));
        if(sum.compareTo((Number)rcptQty.round(getGlblRoundQtyDigit()))==1){
            return "Y";
        }
        return "N";
    }
    
    public String isLotNoValid(String lotNo){
        RowSetIterator rsi=this.createRowSetIterator(null);
        String stat="N";
        while(rsi.hasNext()){
            Row r=rsi.next();
            if(this.getCurrentRow()!=r){
            if(r.getAttribute("LotId")!=null){
                String lotid=r.getAttribute("LotId").toString();
                if(lotid.equalsIgnoreCase(lotNo)){
                    stat="Y";
                }
            }
            
            }
        }
        rsi.closeRowSetIterator();
        return stat;
    }
    
    public void setValLotQtyBs(Number lotQty){
        if(lotQty!=null){
        MMReceiptMtlAMImpl am=(MMReceiptMtlAMImpl)this.getApplicationModule();
        Number fctr=(Number)((Number)(am.getMmMtlRcptItm1().getCurrentRow().getAttribute("UomConvFctr"))).round(getGlblRoundQtyDigit());
     //   Row r=this.getCurrentRow();
        Number mult=(Number)(fctr.multiply((Number)lotQty.round(getGlblRoundQtyDigit()))).round(getGlblRoundQtyDigit());
        this.getCurrentRow().setAttribute("LotQtyBs",mult);
        }
    }
}
