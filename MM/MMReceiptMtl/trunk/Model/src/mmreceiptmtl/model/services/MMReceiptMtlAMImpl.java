package mmreceiptmtl.model.services;

import adf.utils.ebiz.EbizParams;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmreceiptmtl.model.services.common.MMReceiptMtlAM;
import mmreceiptmtl.model.views.MmMtlRcptBinVOImpl;
import mmreceiptmtl.model.views.MmMtlRcptItmVOImpl;
import mmreceiptmtl.model.views.MmMtlRcptLotVOImpl;
import mmreceiptmtl.model.views.MmMtlRcptSrnoVOImpl;
import mmreceiptmtl.model.views.MmMtlRcptVORowImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
//import oracle.jbo.domain.Date;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 02 16:31:30 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMReceiptMtlAMImpl extends ApplicationModuleImpl implements MMReceiptMtlAM {

    private static ADFLogger _log = ADFLogger.createADFLogger(MMReceiptMtlAMImpl.class);
    private static Integer SOURCE_DOC_TYPE_PO = 266;
    private static Integer SOURCE_DOC_TYPE_IMPORT_PO = 819;
    private static Integer SOURCE_DOC_TYPE_JITR = 938;
    private static Integer SOURCE_DOC_TYPE_TO = 270;
    private static Integer RCPT_TYPE_OB = 396;
    private static Integer SOURCE_DOC_TYPE_WOUT_PO = 370;
    private static Integer SOURCE_DOC_TYPE_MRN = 399;
    private static Integer SOURCE_DOC_TYPE_GPR = 825;
    private static Integer RCPT_TYPE_TO_WITHIN = 337;
    private static Integer RCPT_TYPE_TO_OTHER = 338;
    private static Integer SOURCE_DOC_TYPE_FGR = 267;
    private static Integer SOURCE_DOC_TYPE_CPO = 459;
    private static Integer SOURCE_DOC_TYPE_PRODT = 770;
    String binId = null;
    Number qtyBase = new Number(0);

    /**
     *Global round digit for Amount
     * @return
     */

    public Integer getGlblRoundAmtDigit() {
        if (resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}") != null) {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}"));
        } else {
            return 6;
        }
    }

    /**
     *Global round digit for Quantity
     * @return
     */

    public Integer getGlblRoundQtyDigit() {
        if (resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}") != null) {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_QTY_DIGIT}"));
        } else {
            return 6;
        }

    }

    /**
     *Global round digit for currency rate
     * @return
     */

    public Integer getGlblRoundCurrRateDigit() {
        if (resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}") != null) {
            return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}"));
        } else {
            return 6;
        }

    }


    /**
     * This is the default constructor (do not remove).
     */
    public MMReceiptMtlAMImpl() {
    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Container's getter for MmMtlRcpt.
     * @return MmMtlRcpt
     */
    public ViewObjectImpl getMmMtlRcpt() {
        return (ViewObjectImpl) findViewObject("MmMtlRcpt");
    }

    /**
     * Container's getter for MmMtlRcptSrc.
     * @return MmMtlRcptSrc
     */
    public ViewObjectImpl getMmMtlRcptSrc() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptSrc");
    }

    /**
     * Container's getter for MmMtlRcptItm.
     * @return MmMtlRcptItm
     */
    public MmMtlRcptItmVOImpl getMmMtlRcptItm() {
        return (MmMtlRcptItmVOImpl) findViewObject("MmMtlRcptItm");
    }

    /**
     * Container's getter for FkMmMtlRcptSrcVL1.
     * @return FkMmMtlRcptSrcVL1
     */
    public ViewLinkImpl getFkMmMtlRcptSrcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmMtlRcptSrcVL1");
    }

    /**
     * Container's getter for FkMmMtlRcptItmVL1.
     * @return FkMmMtlRcptItmVL1
     */
    public ViewLinkImpl getFkMmMtlRcptItmVL1() {
        return (ViewLinkImpl) findViewLink("FkMmMtlRcptItmVL1");
    }

    /**
     * Container's getter for MMRmda.
     * @return MMRmda
     */
    public ViewObjectImpl getMMRmda() {
        return (ViewObjectImpl) findViewObject("MMRmda");
    }

    /**
     * Container's getter for MMRmda1.
     * @return MMRmda1
     */
    public ViewObjectImpl getMMRmda1() {
        return (ViewObjectImpl) findViewObject("MMRmda1");
    }

    /**
     * Container's getter for MMRcptToMMRmdaVL1.
     * @return MMRcptToMMRmdaVL1
     */
    public ViewLinkImpl getMMRcptToMMRmdaVL1() {
        return (ViewLinkImpl) findViewLink("MMRcptToMMRmdaVL1");
    }

    /**
     * Container's getter for MMRmdaItm1.
     * @return MMRmdaItm1
     */
    public ViewObjectImpl getMMRmdaItm1() {
        return (ViewObjectImpl) findViewObject("MMRmdaItm1");
    }

    /**
     * Container's getter for MMRmdaToMMRmdaItmVL1.
     * @return MMRmdaToMMRmdaItmVL1
     */
    public ViewLinkImpl getMMRmdaToMMRmdaItmVL1() {
        return (ViewLinkImpl) findViewLink("MMRmdaToMMRmdaItmVL1");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl) findViewObject("LovItmId");
    }

    public Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            //    String msg = e.getMessage().substring(11, end);
            String msg = e.getMessage().toString();
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);
            return null;

        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     *  Method used to create DocId
     *  @param chkWf - check if warehouse is reqd
     *         whIdDef - default user warehouse
     * */
    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId, String whIdDef,
                                      String chkWf) {
        String paramWhChk = resolvEl("#{pageFlowScope.GLBL_ORG_WH_CHK}");
        String prjAlw = "N";
        String prjId = "PROJ000";
        if (resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}") != null) {
            prjId = resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}").toString();
        }

        if (resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ALW}") != null) {
            prjAlw = resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ALW}").toString();
        }
        ;

        // String paramWhChk = resolvEl("#{pageFlowScope.GLBL_ORG_WH_CHK}");
        Row currentRow = this.getMmMtlRcpt().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18515), new Integer(0)
        })); //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)

        _log.info("--DocId new created----" + docId);

        currentRow.setAttribute("DocId", docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocDt", ts);
        currentRow.setAttribute("RcptDt", ts);
        getFYid(CldId, OrgId, ts, "A");

        if ("N".equals(chkWf)) {
            currentRow.setAttribute("WhId", "WH00001");
            currentRow.setAttribute("PrjId", "PROJ0000");
        } else if ("Y".equals(chkWf)) {
            currentRow.setAttribute("WhId", whIdDef);
            if ("Y".equalsIgnoreCase(prjAlw)) {
                currentRow.setAttribute("PrjId", prjId);
            } else {
                currentRow.setAttribute("PrjId", "PROJ0000");
            }
        }
    }

    /**
     * Method to generate Receipt No. in case it is not yet generated.
     * @return Receipt No
     * */
    public String getRcptNo(Integer SlocId, String CldId, String OrgId, String WhId, Integer fyId) {
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        String rcptNo = null;
        if (rcptRw.getAttribute("RcptNo") == null) {
            rcptNo = (String) (callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?,?,?)", new Object[] {
                                                  SlocId, CldId, OrgId, "MM$MTL$RCPT", WhId, fyId,18515,rcptRw.getAttribute("RcptSrcType")
            }));
            _log.info(fyId + "--RcptNo generated--" + rcptNo);
            Object OrgIdSrc = rcptRw.getAttribute("OrgIdSrc");
            Object WhIdSrc = rcptRw.getAttribute("WhIdSrc");
            Object EoIdSrc = rcptRw.getAttribute("EoIdSrc");
            _log.info("OrgSrc=" + OrgIdSrc);
            _log.info("WhSrc=" + WhIdSrc);
            _log.info("EoIdSrc=" + EoIdSrc);
            rcptRw.setAttribute("RcptNo", rcptNo);
            rcptRw.setAttribute("EoIdSrc", EoIdSrc);
            rcptRw.setAttribute("RcptNo", rcptNo);
            rcptRw.setAttribute("OrgIdSrc", OrgIdSrc);
            rcptRw.setAttribute("WhIdSrc", WhIdSrc);

            //  _log.info("RcptNo Setted");
        } else {
            rcptNo = rcptRw.getAttribute("RcptNo").toString();
        }
        return rcptNo;
    }

    /**
     * Method used to call function to get the fy id
     * @return FY Id
     * */
    public Integer getFYid(String CldId, String OrgId, Timestamp rcptDate, String Mode) {
        ViewObjectImpl rcpt = this.getMmMtlRcpt();
        Integer fyId = -1;
        if (rcpt.getCurrentRow().getAttribute("RcptDt") != null) {
            if (rcptDate != null) {
                fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, rcptDate
                }));
            } else {
                fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, rcpt.getCurrentRow().getAttribute("RcptDt")
                }));
            }
            _log.info(rcptDate + ":: -FY RETURNED- ::" + fyId);
            if (Mode.equalsIgnoreCase("A")) {
                // _log.info("Set FyId in case mode is add");

                _log.info("RCpt Date" + rcpt.getCurrentRow().getAttribute("RcptDt"));
                if (fyId > 0) {
                    rcpt.getCurrentRow().setAttribute("FyId", fyId);
                }
            } else if (Mode.equalsIgnoreCase("V")) {
                fyId = (Integer) rcpt.getCurrentRow().getAttribute("FyId");
                _log.info("In case mode is validation");
            }
            return fyId;
        }
        return fyId;
    }

    /**
     * Method to edit the Receipt based on the receipt no. selected on Search page.
     * */
    public void getRcptRecordForEdit(String CldId, Integer SlocId, String OrgId, String docId) {
        //  String docIdSrc=null;
        /*   if(docId==null){
           //String TxnIdSrc=this.getGeSearch().getCurrentRow().getAttribute("GeTxnId").toString();
      //   System.out.println(TxnId+"--TXN--"+TxnIdSrc);
      }else{
          docIdSrc=docId;
      } */



        //  docIdSrc=this.getViewRcptSrch().getCurrentRow().getAttribute("DocId").toString();

        ViewObjectImpl vo = this.getMmMtlRcpt();
        ViewCriteria vc = vo.getViewCriteria("MmMtlRcptVOCriteriaForView");

        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdVar", CldId);
        vo.setNamedWhereClauseParam("SlocIdVar", SlocId);
        vo.setNamedWhereClauseParam("OrgIdVar", OrgId);
        vo.setNamedWhereClauseParam("docIdVar", docId);
        vo.executeQuery();

    }

    /**
     *     Method used to check for duplicate Doc Id
     *     @return : Y- Duplicate
     *               N- Valid
     *               O- Null Value
     * */
    public String checkForDuplicateDocNo(String CldId, Integer SlocId, String OrgId, Integer SrcType) {
        RowQualifier rq = new RowQualifier(this.getMmMtlRcptSrc());
        Row[] geSrcRw = null;
        if (this.getMmMtlRcpt().getCurrentRow().getAttribute("TransSrcDocId") != null) {
            String srcDocId = this.getMmMtlRcpt().getCurrentRow().getAttribute("TransSrcDocId").toString();
            Integer transSchdlNo = 1;
            if (this.getMmMtlRcpt().getCurrentRow().getAttribute("TransSchdlNo") == null) {
                transSchdlNo = 1;
            } else {
                transSchdlNo =
                    Integer.parseInt(this.getMmMtlRcpt().getCurrentRow().getAttribute("TransSchdlNo").toString());
            }

            if (SrcType == 266 ||
                SrcType.compareTo(new Integer(819)) == 0 || SrcType.compareTo(new Integer(938)) == 0) { // change fo IPO 20/04/2015
                // if(isPoScheduled(srcDocId).equals("Y")){

                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                  "' and DocId='" +
                                  this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId").toString() +
                                  "' and DocIdSrc='" + srcDocId + "' and DlvSchdlNo=" + transSchdlNo);
                geSrcRw = this.getMmMtlRcptSrc().getFilteredRows(rq);
                _log.info(rq.getExprStr());
                /* }else{
                rq.setWhereClause("CldId='" + CldId + "' and SlocId="+SlocId+" and OrgId='" + OrgId + "' and DocId='" + this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId").toString() +
                         "' and DocIdSrc='"+srcDocId+"' and DlvSchdlNo=1");
            } */
            } else if (SrcType == 270) {
                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                  "' and DocId='" +
                                  this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId").toString() +
                                  "' and DocIdSrc='" + srcDocId + "'");
                geSrcRw = this.getMmMtlRcptSrc().getFilteredRows(rq);
            } else if (SrcType == 399) {
                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                  "' and DocId='" +
                                  this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId").toString() +
                                  "' and DocIdSrc='" + srcDocId + "'");
                geSrcRw = this.getMmMtlRcptSrc().getFilteredRows(rq);
                _log.info(" SrcType :  " + rq.getExprStr());
            } else if (SrcType == 459) {

                rq = new RowQualifier(this.getMmMtlRcptSrc1());
                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                  "' and  DocIdSrc='" + srcDocId + "'");
                geSrcRw = this.getMmMtlRcptSrc1().getFilteredRows(rq);


                //                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                //                                  "' and DocId='" +
                //                                  this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId").toString() +
                //                                  "' and DocIdSrc='" + srcDocId + "' and DlvSchdlNo=" + transSchdlNo);
                //                geSrcRw = this.getMmMtlRcptSrc().getFilteredRows(rq);
                _log.info(rq.getExprStr());
            }
            //  Row[] geSrcRw=this.getMmMtlGeSrc().getFilteredRows("TxnIdSrc", SrcDocNo);
            // geSrcRw=this.getMmMtlRcptSrc().getFilteredRows(rq);
            _log.info("No. of rows=" + geSrcRw.length);
            if (geSrcRw.length > 0) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return "O";
        }
    }

    /**
     * To check if all the items for a po (itm qty + all_rcpt_qty =balc_qty)
     * */
    /*   public String checkPoValidBalnceQty(){
     if(this.getMmMtlRcpt().getCurrentRow().getAttribute("TransSrcDocId")!=null){
        String srcDocId=this.getMmMtlRcpt().getCurrentRow().getAttribute("TransSrcDocId").toString();
        this.getMmMtlRcptItm2().getFilteredRows(new RowQualifier("SlocId="+sloc+" and OrgId='"+org+"' and CldId='"+cld+"' and WhId='"+whid+"' and DocId='"+docid+"' and DocIdSrc='"+poDoc+"' and DlvSchdlNo="+schdlNo));


      }
        return "N";
    } */

    public void addDocItems(String OrgId, String CldId, Integer SlocId, Integer srcType) {
        _log.info("PARAMS--" + OrgId + "--" + CldId + "--" + SlocId + "--" + srcType);
        if (srcType == 266) {
            _log.info("--PO--");
            this.populateRcptItmfromPo(OrgId, CldId, SlocId);
        } else if (srcType == 270) {
            this.populateRcptItmfromTfrOrdr(OrgId, CldId, SlocId);
        } else if (srcType == 399) {
            this.populateRcptItmfromMrn(OrgId, CldId, SlocId);
        } else if (srcType == 459) {
            this.populateRcptFromCpo(OrgId, CldId, SlocId);
        } else if (srcType == 819) {
            this.populateRcptItmfromBoeIpo(OrgId, CldId, SlocId);
        } else if (srcType == 825) {
            this.populateRcptItmfromGatePasss(OrgId, CldId, SlocId);
        }
    }

    /**
     *  Method used to check if the PO selected is currency compatible to the previously assigned PO
     *  for the current Receipt.
     *  @return - Y : Valid
     *            N : Invalid (cannot be selected)
     * */
    public String checkCurrCompatibility(String OrgId, String CldId, Integer SlocId, String PoDocId) {
        Integer count = this.getMmMtlRcptSrc().getRowCount();
        Row currRc = this.getMmMtlRcpt().getCurrentRow();
        String rcptSrcDoc = currRc.getAttribute("TransSrcDocId").toString();
        _log.info("Count in curr compat-" + count);


        if (count.compareTo(new Integer(1)) >= 0) {
            Row rw = this.getMmMtlRcptSrc().first();
            String docId = rw.getAttribute("DocIdSrc").toString(); // docId in table

            // Row[] filRw = this.getLovPoNo().getFilteredRows("DocId", docId); //old selected   17/04/2015

            // Row[] poFilRw = this.getLovPoNo().getFilteredRows("DocId", rcptSrcDoc); //new selected 17/04/2015

            Row[] filRw = this.getLovPurOrder().getFilteredRows("DocId", docId); //old selected

            Row[] poFilRw = this.getLovPurOrder().getFilteredRows("DocId", rcptSrcDoc); //new selected
            _log.info(docId + "Rows--" + filRw.length + "--" + poFilRw.length + "--" + PoDocId);
            if (filRw.length > 0) {
                Integer curr = Integer.parseInt(filRw[0].getAttribute("CurrIdSp").toString());

                Integer currPo = Integer.parseInt(poFilRw[0].getAttribute("CurrIdSp").toString());
                _log.info("Currency--" + curr + "--Currency Bs-" + currPo);
                if (curr.equals(currPo)) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "Y";
            }
        } else {
            return "Y";
        }
        /*     RowQualifier rq=new RowQualifier(this.getLovPoNo());


        rq.setWhereClause("SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"' and ");
        Row[] filRw=this.getLovPoNo().getFilteredRows(rq); */

    }


    /**
     *  Method used to check if the CPO selected is currency compatible to the previously assigned CPO
     *  for the current Receipt.
     *  @return - Y : Valid
     *            N : Invalid (cannot be selected)
     * */
    public String checkCurrCompatibilityForCPO(String OrgId, String CldId, Integer SlocId, String PoDocId) {
        Integer count = this.getMmMtlRcptSrc().getRowCount();
        Row currRc = this.getMmMtlRcpt().getCurrentRow();
        String rcptSrcDoc = currRc.getAttribute("TransSrcDocId").toString();
        _log.info("Count in curr compat-" + count);


        if (count.compareTo(new Integer(1)) >= 0) {
            Row rw = this.getMmMtlRcptSrc().first();
            String docId = rw.getAttribute("DocIdSrc").toString(); // docId in table

            Row[] filRw = this.getLovCpoNoVO().getFilteredRows("DocId", docId); //old selected

            Row[] poFilRw = this.getLovCpoNoVO().getFilteredRows("DocId", rcptSrcDoc); //new selected
            _log.info(docId + "Rows--" + filRw.length + "--" + poFilRw.length + "--" + PoDocId);
            if (filRw.length > 0) {
                Integer curr = Integer.parseInt(filRw[0].getAttribute("CurrIdSp").toString());

                Integer currPo = Integer.parseInt(poFilRw[0].getAttribute("CurrIdSp").toString());
                _log.info("Currency--" + curr + "--Currency Bs-" + currPo);
                if (curr.equals(currPo)) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "Y";
            }
        } else {
            return "Y";
        }

    }

    /**
     *
     * @param value  Source Type PO or CPO
     * set currency id for reciept when first documnet add in case of PO and CPO.
     */


    public void setCurrIdSpPoToMtlRcpt(Integer value) {
        Integer count = this.getMmMtlRcptSrc().getRowCount();
        Row rcptR = this.getMmMtlRcpt().getCurrentRow();
        Integer eo = null;
        if (rcptR.getAttribute("EoIdSrc") != null)
            eo = (Integer) rcptR.getAttribute("EoIdSrc");

        if (count.compareTo(new Integer(1)) >= 0) {
            Row rw = this.getMmMtlRcptSrc().first();

            String docId = rw.getAttribute("DocIdSrc").toString(); // docId in table
            _log.info(value + " docId  in table ----- " + docId + "  fggfgf   " + value.compareTo(SOURCE_DOC_TYPE_PO));

            String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            if (value.compareTo(SOURCE_DOC_TYPE_PO) == 0 || value.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0 ||
                value.compareTo(SOURCE_DOC_TYPE_CPO) == 0) {
                // RowQualifier rq = new RowQualifier(this.getLovPoNo()); // commented 17/04/2015 for IPO
                RowQualifier rq = new RowQualifier(this.getLovPurOrder());
                rq.setWhereClause("CldId='" + paramCldId + "' and SlocId=" + paramSlocId + " and OrgId='" + paramOrgId +
                                  "' and DocId ='" + docId + "' ");
                ///  Row[] r = this.getLovPoNo().getFilteredRows(rq);
                Row[] r = this.getLovPurOrder().getFilteredRows(rq);
                _log.info(rq.getExprStr() + "  query    " + r.length);
                if (r.length > 0) {
                    if (r[0].getAttribute("CurrIdSp") != null) {
                        _log.info(r[0].getAttribute("PoId") + "    Curr Id  ---  " + r[0].getAttribute("CurrIdSp"));
                        if (rcptR.getAttribute("CurrIdSp") == null) {
                            _log.info("Currency null ::::::::::::::::::::::::::::::::");
                            Integer curridSp = Integer.parseInt(r[0].getAttribute("CurrIdSp").toString());
                            rcptR.setAttribute("CurrIdSp", r[0].getAttribute("CurrIdSp"));
                            _log.info(paramCldId + " paramCldId " + paramSlocId + " paramSlocId " + paramHoOrgId +
                                      "  paramHoOrgId " + paramOrgId + "  paramOrgId " + curridSp);
                            BigDecimal ret =
                                (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_CURR_CONV_FCTR(?,?,?,?,?)", new Object[] {
                                                                 paramCldId, paramSlocId, paramHoOrgId, paramOrgId,
                                                                 curridSp
                            }));


                            Number retVal = new Number(1);
                            if (ret != null) {
                                try {
                                    retVal = new Number(ret);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                            rcptR.setAttribute("CurrConvFctr", (Number) retVal.round(getGlblRoundCurrRateDigit()));
                            _log.info(" retVal : " + retVal);

                        }
                    }
                }
                if (value.compareTo(SOURCE_DOC_TYPE_CPO) == 0 && r[0].getAttribute("CoaId") != null) {
                    rcptR.setAttribute("CoaId", r[0].getAttribute("CoaId"));
                }
            }
            if(value.compareTo(SOURCE_DOC_TYPE_JITR) == 0){
                this.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindCldId", paramCldId);
                this.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindSlocId", paramSlocId);
                this.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindOrgId", paramOrgId);
                this.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindHoOrgId", paramHoOrgId);
                this.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindWhId", rcptR.getAttribute("WhId"));
                this.getLovJITimeReceptDisp().setNamedWhereClauseParam("BindDocId", docId);
                this.getLovJITimeReceptDisp().executeQuery();
                Row rr[] = this.getLovJITimeReceptDisp().getFilteredRows("DocId", docId);
                if(rr.length>0){
                    if (rr[0].getAttribute("CurrIdSp") != null) {
                        _log.info(rr[0].getAttribute("RcptNo") + "    Curr Id  ---  " + rr[0].getAttribute("CurrIdSp"));
                        if (rcptR.getAttribute("CurrIdSp") == null) {
                            _log.info("Currency null ::::::::::::::::::::::::::::::::");
                            Integer curridSp = Integer.parseInt(rr[0].getAttribute("CurrIdSp").toString());
                            rcptR.setAttribute("CurrIdSp", rr[0].getAttribute("CurrIdSp"));
                            _log.info(paramCldId + " paramCldId " + paramSlocId + " paramSlocId " + paramHoOrgId +
                                      "  paramHoOrgId " + paramOrgId + "  paramOrgId " + curridSp);
                            BigDecimal ret =
                                (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_CURR_CONV_FCTR(?,?,?,?,?)", new Object[] {
                                                                 paramCldId, paramSlocId, paramHoOrgId, paramOrgId,
                                                                 curridSp
                            }));


                            Number retVal = new Number(1);
                            if (ret != null) {
                                try {
                                    retVal = new Number(ret);
                                } catch (Exception e) {
                                    e.printStackTrace();
                                }
                            }
                            rcptR.setAttribute("CurrConvFctr", (Number) retVal.round(getGlblRoundCurrRateDigit()));
                            _log.info(" retVal : " + retVal);

                        }
                    }
                }
                
            }


        }
    }


    public Integer getRcptSrcCount() {
        Integer count = this.getMmMtlRcptSrc().getRowCount();
        return count;
    }

    public Integer checkServiceConsumbleItm() {
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptSrc = this.getMmMtlRcptSrc();
        ViewObjectImpl itmVo = this.getMmMtlRcptItm();
        String orgIdN = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        String qcFlag = "N";
        String consmablechk = "N";
        Row[] orgR = this.getViewOrgMMPrf().getFilteredRows("OrgId", orgIdN);
        if (orgR.length > 0) {
            if (orgR[0].getAttribute("UseQc") != null) {
                qcFlag = orgR[0].getAttribute("UseQc").toString();
            }
            if (orgR[0].getAttribute("AlwDirectConsm") != null) {
                consmablechk = orgR[0].getAttribute("AlwDirectConsm").toString();
            }

        }
        _log.info(orgR.length + "   qcFlag    " + qcFlag);
        Row currRc = rcptVo.getCurrentRow();

        String crSrc = "N";

        Integer shdlNo = 1;
        Object no = currRc.getAttribute("TransSchdlNo");

        if (no == null) {
            currRc.setAttribute("TransSchdlNo", 1);
        } else {
            shdlNo = Integer.parseInt(no.toString());
        }


        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());

        //   if(this.isPoScheduled(currRc.getAttribute("TransSrcDocId").toString()).equals("Y")){

        rq.setWhereClause("DocId='" + currRc.getAttribute("TransSrcDocId").toString() + "' and DlvSchdlNo=" + shdlNo +
                          " and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");

        /*    }else{

                    rq.setWhereClause("DocId='"+currRc.getAttribute("TransSrcDocId").toString()+"' and DlvSchdlNo=1 and SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"'");

            } */

        Row[] scdlRw = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        int count = 0;
        _log.info("No of Rows--" + scdlRw.length);
        if (scdlRw.length > 0) {

            for (Row curr : scdlRw) {
                String cnsmableFlg = "N";
                this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", curr.getAttribute("ItmId"));
                this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
                this.getLovItmForDisp().executeQuery();
                Row[] itms = this.getLovItmForDisp().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                //   Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));  // change BL for tunning 02/09/2014
                if (itms[0].getAttribute("ConsumableFlg") != null) {
                    cnsmableFlg = itms[0].getAttribute("ConsumableFlg").toString();
                }
                _log.info(cnsmableFlg + "   cnsmableFlg  " + consmablechk);
                if (itms[0].getAttribute("SrvcItmFlg") != null) { // change for service item not recreipt 17/09/2014
                    if ("N".equalsIgnoreCase(itms[0].getAttribute("SrvcItmFlg").toString())) { // change for service item not recreipt 17/09/2014
                        if ("N".equalsIgnoreCase(cnsmableFlg) || ("Y".equalsIgnoreCase(cnsmableFlg) && "N".equalsIgnoreCase(consmablechk))) { //"Y".equalsIgnoreCase(consmablechk) &&
                            count = count + 1;
                        }
                    }
                }
            }
        }
        if (count > 0) {
            return 1;
        } else {
            return 0;
        }


    }


    public void populateRcptItmfromBoeIpo(String OrgId, String CldId, Integer SlocId) {
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptSrc = this.getMmMtlRcptSrc();
        ViewObjectImpl itmVo = this.getMmMtlRcptItm();
        String hoOrgId = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String whId = rcptVo.getCurrentRow().getAttribute("WhId").toString();
        String docId = rcptVo.getCurrentRow().getAttribute("DocId").toString();
        String docIdPo = rcptVo.getCurrentRow().getAttribute("TransSrcDocId").toString();
        String docIdBoe = rcptVo.getCurrentRow().getAttribute("TransBoeDocId").toString();
        Integer shdlNo = 1;
        Object no = rcptVo.getCurrentRow().getAttribute("TransSchdlNo");

        if (no == null) {
            rcptVo.getCurrentRow().setAttribute("TransSchdlNo", 1);
        } else {
            shdlNo = Integer.parseInt(no.toString());
        }


        _log.info("whId  " + whId + " docId " + docId + " docIdPo " + docIdPo + " docIdBoe " + docIdBoe + " shdlNo  " +
                  shdlNo);
        //        FUNCTION    POPULATE_RCPT_FROM_BOE (
        //                                        P_CLD_ID  VARCHAR2,
        //                                        P_SLOC_ID  NUMBER,
        //                                        P_HO_ORGID VARCHAR2,
        //                                        P_ORG_ID   VARCHAR2,
        //                                        P_WH_ID  VARCHAR2,
        //                                        P_DOC_ID_RCPT  VARCHAR2,
        //                                        P_DOC_ID_BOE  VARCHAR2,
        //                                        P_DOC_ID_PO  VARCHAR2,
        //                                        P_DLV_SCHDL_NO NUMBER
        //                                        )

        String ret = (String) callStoredFunction(Types.VARCHAR, "MM.POPULATE_RCPT_FROM_BOE(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 CldId, SlocId, hoOrgId, OrgId, whId, docId, docIdBoe, docIdPo, shdlNo
        });

        _log.info("ret " + ret);

        if ("Y".equalsIgnoreCase(ret)) {
            this.getMmMtlRcptSrc().executeQuery();
            this.getMmMtlRcptSrc1().executeQuery();
            this.getMmMtlRcptItm().executeQuery();
            this.getMmMtlRcptItm2().executeQuery();
            this.getMmMtlRcptOc1().executeQuery();
            this.getMmMtlRcptTrVO().executeQuery();
            this.getMmMtlRcptTrLinesVO().executeQuery();
            this.getMmMtlRcptTrVO1().executeQuery();
            rcptVo.getCurrentRow().setAttribute("TransSrcDocNo", null);
            rcptVo.getCurrentRow().setAttribute("TransSrcDocId", null);
            rcptVo.getCurrentRow().setAttribute("TransSchdlNo", null);
            rcptVo.getCurrentRow().setAttribute("TransBoeDocId", null);


        } else {
            _log.info("Some error occure in inserting");
        }
    }
    
    
    
    public Integer populateRcptItmfromForJITR(String OrgId, String CldId, Integer SlocId){
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        Row currGe = rcptVo.getCurrentRow();
        
        Object insJitRcpt = callStoredFunction(Types.INTEGER, "MM.MM_INS_RCPT_FROM_JIT_RCPT(?,?,?,?,?,?,?,?)", new Object[] {
                                              CldId, SlocId, OrgId,
                                              currGe.getAttribute("WhId"), currGe.getAttribute("DocId"), currGe.getAttribute("TransSrcDocId")
                                              ,currGe.getAttribute("TransSrcDocNo"),
                                              currGe.getAttribute("TransSrcDate")
        });
        
        _log.info(" returnn  "+insJitRcpt);
        
        if(insJitRcpt!=null){
            if(((Integer)insJitRcpt).compareTo(new Integer(1))==0){
                this.getMmMtlRcptSrc().executeQuery();
                this.getMmMtlRcptSrc1().executeQuery();
                this.getMmMtlRcptItm().executeQuery();
                this.getMmMtlRcptItm2().executeQuery();
                rcptVo.getCurrentRow().setAttribute("TransSrcDocNo", null);
                rcptVo.getCurrentRow().setAttribute("TransSrcDocId", null);
                rcptVo.getCurrentRow().setAttribute("TransSchdlNo", null);
                rcptVo.getCurrentRow().setAttribute("TransSrcDate", null);
                return 1;
            }else{
                return 0;
            }
        }else{
         return 0;
        }
    }

    /**
     *
     * @param OrgId
     * @param CldId
     * @param SlocId
     *
     * populate data from gate pass
     */

    public void populateRcptItmfromGatePasss(String OrgId, String CldId, Integer SlocId) {
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptSrc = this.getMmMtlRcptSrc();
        ViewObjectImpl itmVo = this.getMmMtlRcptItm();
        String whId = rcptVo.getCurrentRow().getAttribute("WhId").toString();
        String docId = rcptVo.getCurrentRow().getAttribute("DocId").toString();
        String docIdSrc = rcptVo.getCurrentRow().getAttribute("TransSrcDocId").toString();
        /// String docSrcDt = rcptVo.getCurrentRow().getAttribute("TransSrcDate").toString();

        _log.info("whId  " + whId + " docId " + docId + " docIdPo " + docIdSrc + " docsrc date " +
                  rcptVo.getCurrentRow().getAttribute("TransSrcDate") + " shdlNo  ");
        //        FUNCTION    MM_RCPT_INS_GP (
        //            P_CLD_ID VARCHAR2,
        //            P_SLOC_ID NUMBER,
        //            P_ORG_ID VARCHAR2,
        //            P_DOC_ID VARCHAR2, --RCPT_DOC_ID
        //            P_GP_ID VARCHAR2, --GATE PASS DOC_ID
        //            P_WH_ID VARCHAR2,
        //            P_DOC_DT DATE
        //        )

        Integer ret = Integer.parseInt(callStoredFunction(Types.INTEGER, "MM.MM_RCPT_INS_GP(?,?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, OrgId, docId, docIdSrc, whId,
                                                          rcptVo.getCurrentRow().getAttribute("TransSrcDate")
        }).toString());

        _log.info("ret " + ret);

        if (ret.compareTo(new Integer(1)) == 0) {
            this.getMmMtlRcptSrc().executeQuery();
            this.getMmMtlRcptSrc1().executeQuery();
            this.getMmMtlRcptItm().executeQuery();
            this.getMmMtlRcptItm2().executeQuery();
            this.getMmMtlRcptOc1().executeQuery();
            this.getMmMtlRcptTrVO().executeQuery();
            this.getMmMtlRcptTrLinesVO().executeQuery();
            this.getMmMtlRcptTrVO1().executeQuery();
            this.getMmMtlRcptSrno1().executeQuery();
            this.getMmMtlRcptLot1().executeQuery();

            rcptVo.getCurrentRow().setAttribute("TransSrcDocNo", null);
            rcptVo.getCurrentRow().setAttribute("TransSrcDocId", null);
            rcptVo.getCurrentRow().setAttribute("TransSrcDate", null);
            rcptVo.getCurrentRow().setAttribute("TransBoeDocId", null);


        } else {
            _log.info("Some error occure in inserting");
        }
    }


    /**
     * Method to populate the receipt item based on the PO No. selected.
     * */
    public void populateRcptItmfromPo(String OrgId, String CldId, Integer SlocId) {
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptSrc = this.getMmMtlRcptSrc();
        ViewObjectImpl itmVo = this.getMmMtlRcptItm();
        String orgIdN = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        String qcFlag = "N";
        String consmablechk = "N";
        Row[] orgR = this.getViewOrgMMPrf().getFilteredRows("OrgId", orgIdN);
        if (orgR.length > 0) {
            if (orgR[0].getAttribute("UseQc") != null) {
                qcFlag = orgR[0].getAttribute("UseQc").toString();
            }
            if (orgR[0].getAttribute("AlwDirectConsm") != null) {
                consmablechk = orgR[0].getAttribute("AlwDirectConsm").toString();
            }

        }
        _log.info(orgR.length + "   qcFlag    " + qcFlag);
        Row currRc = rcptVo.getCurrentRow();

        String crSrc = "N";

        Integer shdlNo = 1;
        Object no = currRc.getAttribute("TransSchdlNo");

        if (no == null) {
            currRc.setAttribute("TransSchdlNo", 1);
        } else {
            shdlNo = Integer.parseInt(no.toString());
        }


        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());

        //   if(this.isPoScheduled(currRc.getAttribute("TransSrcDocId").toString()).equals("Y")){

        rq.setWhereClause("DocId='" + currRc.getAttribute("TransSrcDocId").toString() + "' and DlvSchdlNo=" + shdlNo +
                          " and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");

        /*    }else{

                    rq.setWhereClause("DocId='"+currRc.getAttribute("TransSrcDocId").toString()+"' and DlvSchdlNo=1 and SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"'");

            } */

        Row[] scdlRw = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);

        _log.info("No of Rows--" + scdlRw.length);
        if (scdlRw.length > 0) {

            Row srcRow = rcptSrc.createRow();
            srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_PO);
            srcRow.setAttribute("DocIdSrcDisp", currRc.getAttribute("TransSrcDocNo").toString());
            _log.info("DOC--" + currRc.getAttribute("TransSrcDocId").toString() + "--SCHDL No-" + shdlNo);
            srcRow.setAttribute("DocIdSrc", currRc.getAttribute("TransSrcDocId").toString());
            srcRow.setAttribute("DocDtSrc", currRc.getAttribute("TransSrcDate"));
            srcRow.setAttribute("DlvSchdlNo", shdlNo);
            Row[] filPoRw = this.getLovPoNo().getFilteredRows("DocId", currRc.getAttribute("TransSrcDocId").toString());

            rcptSrc.insertRow(srcRow);


            for (Row curr : scdlRw) {
                String cnsmableFlg = "N";
                this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", curr.getAttribute("ItmId"));
                this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
                this.getLovItmForDisp().executeQuery();
                Row[] itms = this.getLovItmForDisp().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                //   Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));  // change BL for tunning 02/09/2014
                if (itms[0].getAttribute("ConsumableFlg") != null) {
                    cnsmableFlg = itms[0].getAttribute("ConsumableFlg").toString();
                }
                _log.info(cnsmableFlg + "   cnsmableFlg  " + consmablechk);
                if (itms[0].getAttribute("SrvcItmFlg") != null) { // change for service item not recreipt 17/09/2014
                    if ("N".equalsIgnoreCase(itms[0].getAttribute("SrvcItmFlg").toString())) { // change for service item not recreipt 17/09/2014
                        if ("N".equalsIgnoreCase(cnsmableFlg) || ("Y".equalsIgnoreCase(cnsmableFlg) && "N".equalsIgnoreCase(consmablechk))) { //"Y".equalsIgnoreCase(consmablechk) &&

                            Row itmRw = itmVo.createRow();
                            _log.info("Row created in Itm");
                            itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
                            String itmUom = itms[0].getAttribute("UomBasic").toString();
                            itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
                            itmRw.setAttribute("ItmUomBs", itmUom);
                            //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
                            //         Number fct=getUomConvFctr(currGe.getAttribute("CldId").toString(), Integer.parseInt(currGe.getAttribute("SlocId").toString()), currGe.getAttribute("OrgId").toString(), curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString());
                            Number fctr = getUomConvFctr(CldId, SlocId, OrgId, curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString(),

                                                         curr.getAttribute("ItmId").toString());

                            if ("N".equalsIgnoreCase(qcFlag)) {
                                _log.info("organisation not using QC :::::::: ");
                                itmRw.setAttribute("QcReqdFlg", "N");
                            } else if ("Y".equalsIgnoreCase(qcFlag)) {
                                _log.info("organisation using QC :::::::: ");
                                itmRw.setAttribute("QcReqdFlg", itms[0].getAttribute("QcReqdFlg").toString());

                            }
                            if (fctr != null) {
                                System.out.println("FCTR--" + fctr);

                            } else {
                                fctr = new Number(1);
                            }
                            itmRw.setAttribute("UomConvFctr", fctr);
                            Number bal = new Number(0);
                            Number tmp = new Number(0);
                            Number totStk =
                                (Number) this.getItmTotalStk(CldId, SlocId, OrgId,
                                                             curr.getAttribute("ItmId").toString(),
                                                             currRc.getAttribute("WhId").toString(),
                                                             Integer.parseInt(currRc.getAttribute("FyId").toString()));


                            if (curr.getAttribute("BalQty") != null)
                                bal = (Number) ((Number) curr.getAttribute("BalQty")).round(getGlblRoundQtyDigit());
                            if (curr.getAttribute("TmpRcptQty") != null)
                                tmp = (Number) ((Number) curr.getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());
                            itmRw.setAttribute("ItmCurrStk", totStk);
                            itmRw.setAttribute("PendQty", bal.subtract(tmp));
                            itmRw.setAttribute("DlvNoteQty", new Number(0));
                            itmRw.setAttribute("DlvSchdlNo", shdlNo);
                            itmRw.setAttribute("DocIdSrc", currRc.getAttribute("TransSrcDocId").toString());
                            itmRw.setAttribute("DocDtSrc", currRc.getAttribute("TransSrcDate"));
                            itmVo.insertRow(itmRw);
                        }
                    }
                }
            }
            rcptSrc.executeQuery();
            itmVo.executeQuery();
            currRc.setAttribute("TransSrcDocNo", null);
            currRc.setAttribute("TransSrcDocId", null);
            currRc.setAttribute("TransSchdlNo", null);
        } else {
            //  FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Invalid Purchase Order Details.","Invalid Purchase Order Details."));
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                                                          resolvElDCMsg("#{bundle['MSG.793']}").toString(),
                                                                          resolvElDCMsg("#{bundle['MSG.793']}").toString()));
        }
        // }


    }

    public Number getItmTotalStk(String cldId, Integer slocId, String orgId, String itmId, String whId, Integer fyId) {

        //        FUNCTION MM_GET_ITM_AVL_STK (
        //                                                         p_cld_id    VARCHAR2,
        //                                                         p_sloc_id   NUMBER,
        //                                                         p_org_id    VARCHAR2,
        //                                                         p_itm_id    VARCHAR2,
        //                                                         p_wh_id     VARCHAR2,
        //                                                         p_fy_id     NUMBER
        //                                                      )
        Number totStk = new Number(0);


        try {

            BigDecimal currBsId = (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_GET_ITM_AVL_STK(?,?,?,?,?,?)", new Object[] {
                                                                  cldId, slocId, orgId, itmId, whId, fyId
            });

            if (currBsId != null) {
                try {
                    totStk = new Number(currBsId);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return totStk;
        }


        return totStk;
    }

    public Integer orgBaseCurrency(String orgId) {
        BigDecimal currBsId = null;
        Integer currIdBs = 73;
        if (orgId != null) {
            currBsId = (BigDecimal) callStoredFunction(Types.NUMERIC, "app.pkg_app.get_org_def_curr_bs1(?)", new Object[] {
                                                       orgId });
        }
        if (currBsId != null) {
            currIdBs = Integer.parseInt(currBsId.toString());

        }
        System.out.println(" currency base :  " + currIdBs);
        return currIdBs;
    }


    public Integer chkCurrencyConversion(String OrgId, Integer SlocId, String CldId) {


        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String DocId = rcptVo.getCurrentRow().getAttribute("DocId").toString();
        Integer geSrc = (Integer) rcptVo.getCurrentRow().getAttribute("RcptSrcType");
        String orgIdSrc = OrgId;
        if (geSrc.compareTo(new Integer(337)) == 0) {
            return 1;
        }

        if (geSrc.compareTo(new Integer(338)) == 0) {
            if (rcptVo.getCurrentRow().getAttribute("OrgIdSrc") != null) {
                orgIdSrc = rcptVo.getCurrentRow().getAttribute("OrgIdSrc").toString();
            }
            Integer currIdBaseSrc = this.orgBaseCurrency(orgIdSrc);
            try {
                BigDecimal retC = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_CURR_CONV_FCTR(?,?,?,?,?)", new Object[] {
                                                                   CldId, SlocId, hoOrgId, OrgId, currIdBaseSrc
                }));

                _log.info(currIdBaseSrc + "  arg0  " + retC);
                Number retVal = new Number(1);
                if (retC != null) {
                    try {
                        retVal = new Number(retC);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                if (retVal.compareTo(new Number(0)) == 1) {
                    return 1;
                } else {
                    return 0;
                }

            } catch (Exception e) {
                e.printStackTrace();
                return 0;
            }
        }

        return 0;

    }


    /**
     * Method to populate the receipt item based on the Transfer Order selected.
     * */

    public void populateRcptItmfromTfrOrdr(String OrgId, String CldId, Integer SlocId) {
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptSrc = this.getMmMtlRcptSrc();
        ViewObjectImpl itmVo = this.getMmMtlRcptItm();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String DocId = rcptVo.getCurrentRow().getAttribute("DocId").toString();
        Integer geSrc = (Integer) rcptVo.getCurrentRow().getAttribute("RcptSrcType");
        String orgIdSrc = OrgId;
        if (geSrc.compareTo(new Integer(337)) == 0) {
            Integer currIdBase = this.orgBaseCurrency(OrgId);
            _log.info(currIdBase + " base currency  ");
            rcptVo.getCurrentRow().setAttribute("CurrIdSp", currIdBase);
            rcptVo.getCurrentRow().setAttribute("CurrConvFctr", new Number(1));
        }
        if (geSrc.compareTo(new Integer(338)) == 0) {
            if (rcptVo.getCurrentRow().getAttribute("OrgIdSrc") != null) {
                orgIdSrc = rcptVo.getCurrentRow().getAttribute("OrgIdSrc").toString();
            }
            Integer currIdBaseSrc = this.orgBaseCurrency(orgIdSrc);
            rcptVo.getCurrentRow().setAttribute("CurrIdSp", currIdBaseSrc);
            try {
                BigDecimal retC = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_CURR_CONV_FCTR(?,?,?,?,?)", new Object[] {
                                                                   CldId, SlocId, hoOrgId, OrgId, currIdBaseSrc
                }));

                _log.info(currIdBaseSrc + "  arg0  " + retC);
                Number retVal = new Number(1);
                if (retC != null) {
                    try {
                        retVal = new Number(retC);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                this.getMmMtlRcpt().getCurrentRow().setAttribute("CurrConvFctr",
                                                                 (Number) retVal.round(getGlblRoundCurrRateDigit()));
            } catch (Exception e) {
                e.printStackTrace();

            }
        }

        Row currRc = rcptVo.getCurrentRow();

        Row srcRow = rcptSrc.createRow();
        srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_TO);
        srcRow.setAttribute("DocIdSrcDisp", currRc.getAttribute("TransSrcDocNo").toString());
        _log.info("DOC--" + currRc.getAttribute("TransSrcDocId").toString());
        srcRow.setAttribute("DocIdSrc", currRc.getAttribute("TransSrcDocId").toString());
        srcRow.setAttribute("DocDtSrc", currRc.getAttribute("TransSrcDate"));
        srcRow.setAttribute("DocIdIssu", currRc.getAttribute("TransSrcDocIsuueNo"));
        srcRow.setAttribute("DlvSchdlNo", 0);
        rcptSrc.insertRow(srcRow);
        rcptSrc.executeQuery();

        //        RowQualifier rq = new RowQualifier(this.getViewTrfOrderItm());
        //        rq.setWhereClause("DocId='" + currRc.getAttribute("TransSrcDocId").toString() + "' and SlocId=" + SlocId +
        //                          "  and CldId='" + CldId + "'");
        //        Row[] scdlRw = this.getViewTrfOrderItm().getFilteredRows(rq);
        //        _log.info("No of Rows--" + scdlRw.length);
        //
        //        if (scdlRw.length > 0) {
        //            for (Row curr : scdlRw) {
        //                Row itmRw = itmVo.createRow();
        //                _log.info("Row created in Itm");
        //                itmRw.setAttribute("DocIdSrc", currRc.getAttribute("TransSrcDocId").toString());
        //                itmRw.setAttribute("DocDtSrc", currRc.getAttribute("TransSrcDate"));
        //                itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
        //                                                                 resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
        //                                                                 resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
        //                                                                 resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
        //                                                                 resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", curr.getAttribute("ItmId"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
        //                this.getLovItmForDisp().executeQuery();
        //                Row[] itms = this.getLovItmForDisp().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
        //                //   Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));  // change BL for tunning 02/09/2014
        //                String itmUom = itms[0].getAttribute("UomBasic").toString();
        //                itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
        //                itmRw.setAttribute("ItmUomBs", itms[0].getAttribute("UomBasic").toString());
        //                //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
        //                //         Number fct=getUomConvFctr(currGe.getAttribute("CldId").toString(), Integer.parseInt(currGe.getAttribute("SlocId").toString()), currGe.getAttribute("OrgId").toString(), curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString());
        //                Number fctr =
        //                    getUomConvFctr(CldId, SlocId, OrgId, curr.getAttribute("ItmUom").toString(), itmUom,
        //                                   curr.getAttribute("ItmId").toString());
        //                itmRw.setAttribute("QcReqdFlg", "N");
        //                if (fctr != null) {
        //                    System.out.println("FCTR--" + fctr);
        //                } else {
        //                    fctr = new Number(1);
        //                }
        //                itmRw.setAttribute("UomConvFctr", fctr);
        //                Number qty = new Number(0);
        //                if (curr.getAttribute("TrfQty") != null)
        //                    qty = (Number) curr.getAttribute("TrfQty");
        //                itmRw.setAttribute("PendQty", curr.getAttribute("TrfQty"));
        //                itmRw.setAttribute("DlvNoteQty", curr.getAttribute("TrfQty"));
        //                itmRw.setAttribute("RcptQty", qty);
        //                itmRw.setAttribute("RcptQtyBs", qty.multiply(fctr));
        //                itmRw.setAttribute("FinalRcptQty", qty);
        //                Number totTrfQty = new Number(0);
        //                if (curr.getAttribute("TotTrfQty") != null)
        //                    totTrfQty = (Number) curr.getAttribute("TotTrfQty");
        //                Number totTrfQtyBs = new Number(0);
        //                if (curr.getAttribute("TotTrfQtyBs") != null)
        //                    totTrfQtyBs = (Number) curr.getAttribute("TotTrfQtyBs");
        //
        //                Number TrfQty = new Number(0);
        //                if (curr.getAttribute("TrfQty") != null)
        //                    TrfQty = (Number) curr.getAttribute("TrfQty");
        //                Number TrfQtyBs = new Number(0);
        //                if (curr.getAttribute("TrfQtyBs") != null)
        //                    TrfQtyBs = (Number) curr.getAttribute("TrfQtyBs");
        //
        //                curr.setAttribute("TrfQty", new Number(0));
        //                curr.setAttribute("TrfQtyBs", new Number(0));
        //                curr.setAttribute("TotTrfQty", totTrfQty.add(TrfQty));
        //                curr.setAttribute("TotTrfQtyBs", totTrfQty.add(TrfQtyBs));
        //
        //                itmVo.insertRow(itmRw);
        //            }
        //        }


        //        FUNCTION MM_INS_RCPT_ITM_FRM_ISSU
        //                                                        (
        //                                                        P_CLD_ID VARCHAR2,
        //                                                        P_SLOC_ID NUMBER,
        //                                                        P_ORG_ID VARCHAR2,
        //                                                        P_WH_ID VARCHAR2,
        //                                                        P_DOC_ID VARCHAR2,
        //                                                        P_DOC_ID_SRC VARCHAR2,
        //                                                        P_DOC_DT_SRC TIMESTAMP,
        //                                                        P_DOC_ID_ISSU VARCHAR2
        //                                                        )


        try {
            _log.info(currRc.getAttribute("WhId") + "  WH Id " + currRc.getAttribute("TransSrcDocId") + " Doc_id Trf " +
                      currRc.getAttribute("TransSrcDocIsuueNo") + " doc id issuu " + DocId + " doc id " + " TRF SRC  " +
                      currRc.getAttribute("RcptSrcType") + " org id src  " + currRc.getAttribute("OrgIdSrc"));

            Object insItmFrmIss =
                (callStoredFunction(Types.INTEGER, "MM.MM_INS_RCPT_ITM_FRM_ISSU (?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                    CldId, SlocId, OrgId, currRc.getAttribute("WhId"), DocId,
                                    currRc.getAttribute("TransSrcDocId"), new Timestamp(System.currentTimeMillis()),
                                    currRc.getAttribute("TransSrcDocIsuueNo"), currRc.getAttribute("RcptSrcType"),
                                    currRc.getAttribute("OrgIdSrc")
            }));

            _log.info("  insItmFrmIss  " + insItmFrmIss);

            if (insItmFrmIss != null) {
                if ((((Integer) insItmFrmIss)).compareTo(new Integer(1)) == 0) {
                    rcptSrc.executeQuery();
                    itmVo.executeQuery();
                }
            }

        } catch (Exception e) {
            e.printStackTrace();

        }


        currRc.setAttribute("TransSrcDocNo", null);
        currRc.setAttribute("TransSrcDocId", null);
        currRc.setAttribute("TransSrcDocIsuueNo", null);
        currRc.setAttribute("TransSchdlNo", null);
    }

    /**
     * Method to populate the receipt item based on the MRN No. selected.
     * */
    public void populateRcptItmfromMrn(String OrgId, String CldId, Integer SlocId) {
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptSrc = this.getMmMtlRcptSrc();
        ViewObjectImpl itmVo = this.getMmMtlRcptItm();

        Row currRc = rcptVo.getCurrentRow();

        /*
        Row srcRow=rcptSrc.createRow();
            srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_MRN);
            srcRow.setAttribute("DocIdSrcDisp", currRc.getAttribute("TransSrcDocNo").toString());
            _log.info("DOC--"+currRc.getAttribute("TransSrcDocId").toString());
            srcRow.setAttribute("DocIdSrc", currRc.getAttribute("TransSrcDocId").toString());
            srcRow.setAttribute("DocDtSrc", currRc.getAttribute("TransSrcDate"));
            srcRow.setAttribute("DlvSchdlNo",0);
            rcptSrc.insertRow(srcRow);
            rcptSrc.executeQuery();
             */
        _log.info(">>" + CldId + "--" + SlocId + "--" + OrgId + "--" + currRc.getAttribute("WhId").toString() + "--" +
                  currRc.getAttribute("DocId").toString() + "--" + currRc.getAttribute("TransSrcDocId").toString());
        Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_RCPT_INS_MRN(?,?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, currRc.getAttribute("WhId").toString(),
                                                    currRc.getAttribute("DocId").toString(),
                                                    currRc.getAttribute("TransSrcDocId").toString(),
                                                    currRc.getAttribute("TransSrcDate")
        }));

        _log.info("Add MRN :" + ret);
        this.getMmMtlRcptSrc().executeQuery();
        this.getMmMtlRcptItm().executeQuery();

        this.getMmMtlRcptSrno1().executeQuery();
        this.getMmMtlRcptLot1().executeQuery();
        this.getMmMtlRcptItm1().executeQuery();

        /*    RowQualifier rq=new RowQualifier(this.getViewTrfOrderItm());
        rq.setWhereClause("DocId='"+currRc.getAttribute("TransSrcDocId").toString()+"' and SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"'");
        Row[] scdlRw=this.getViewTrfOrderItm().getFilteredRows(rq);
        _log.info("No of Rows--"+scdlRw.length);

        if(scdlRw.length>0){
            for(Row curr:scdlRw){
                Row itmRw=itmVo.createRow();
                _log.info("Row created in Itm");
                itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
                     Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                String itmUom=itms[0].getAttribute("UomBasic").toString();
                itmRw.setAttribute("ItmUom",curr.getAttribute("ItmUom"));
                itmRw.setAttribute("ItmUomBs", itms[0].getAttribute("UomBasic").toString());
                //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
                //         Number fct=getUomConvFctr(currGe.getAttribute("CldId").toString(), Integer.parseInt(currGe.getAttribute("SlocId").toString()), currGe.getAttribute("OrgId").toString(), curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString());
                Number fctr= getUomConvFctr(CldId, SlocId, OrgId,itmUom, curr.getAttribute("ItmUom").toString(),curr.getAttribute("ItmId").toString());
                itmRw.setAttribute("QcReqdFlg","N");
                if(fctr!=null){
                    System.out.println("FCTR--"+fctr);
                }else{
                    fctr=new Number(1);
                }
                itmRw.setAttribute("UomConvFctr",fctr);
                itmRw.setAttribute("PendQty", curr.getAttribute("TrfQty"));
                itmRw.setAttribute("DlvNoteQty",new Number(0));

                itmRw.setAttribute("DocIdSrc",currRc.getAttribute("TransSrcDocId").toString());
                itmRw.setAttribute("DocDtSrc",currRc.getAttribute("TransSrcDate"));
                itmVo.insertRow(itmRw);
            }
         }

        rcptSrc.executeQuery();
        itmVo.executeQuery(); */
        currRc.setAttribute("TransSrcDocNo", null);
        currRc.setAttribute("TransSrcDocId", null);
        currRc.setAttribute("TransSchdlNo", null);
    }

    /**
     * Method used to check if the PO is scheduled
     * */
    public String isPoScheduled(String PoDocId) {
        //  Row[] poRw = this.getLovPoNo().getFilteredRows("DocId", PoDocId); // 17/04/2015
        Row[] poRw = this.getLovPurOrder().getFilteredRows("DocId", PoDocId);
        if (poRw.length > 0) {
            Integer type = Integer.parseInt(poRw[0].getAttribute("PoType").toString());
            _log.info("PO TYPE--" + type);
            if (type == 172) {
                return "Y";
            } else {
                return "N";
            }
        }
        return "N";
    }

    /**
     * Container's getter for LovPoNo.
     * @return LovPoNo
     */
    public ViewObjectImpl getLovPoNo() {
        return (ViewObjectImpl) findViewObject("LovPoNo");
    }

    /**
     * Container's getter for MMDraftPoDlvSchdl.
     * @return MMDraftPoDlvSchdl
     */
    public ViewObjectImpl getMMDraftPoDlvSchdl() {
        return (ViewObjectImpl) findViewObject("MMDraftPoDlvSchdl");
    }

    /**
     * Method to populate the receipt items from the Gate Entry Doc No.
     * */

    public String populateRcptFromGe(String OrgId, String CldId, Integer SlocId, String Geno) {
        _log.info("Geno selected" + Geno);

        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

        RowQualifier rq = new RowQualifier(this.getLovGateEntry());
        rq.setWhereClause("WhId='" + this.getMmMtlRcpt().getCurrentRow().getAttribute("WhId") + "' and OrgId='" +
                          this.getMmMtlRcpt().getCurrentRow().getAttribute("OrgId") + "' and GeNo='" + Geno + "'");
        _log.info("Querry=" + rq.getExprStr());

        Row[] geRw = this.getLovGateEntry().getFilteredRows(rq);

        if (geRw.length > 0) {
            String geDoc = geRw[0].getAttribute("DocId").toString();

            Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
            // String geDocId=rcptRw.getAttribute("GeDocId").toString();
            String whId = rcptRw.getAttribute("WhId").toString();
            String rcptDocId = rcptRw.getAttribute("DocId").toString();

            String ret = (callStoredFunction(Types.VARCHAR, "MM.populate_rcpt_from_ge (?,?,?,?,?,?)", new Object[] {
                                             CldId, SlocId, OrgId, whId, geDoc, rcptDocId
            })).toString();
            if (ret.equals("Y")) {
                Integer typ = Integer.parseInt(geRw[0].getAttribute("RcptSrcType").toString());
                if (typ.toString().equals("256")) { //For Supplier
                    this.getMmMtlRcpt().getCurrentRow().setAttribute("RcptSrcType", 331);
                } else if (typ.toString().equals("257")) {
                    this.getMmMtlRcpt().getCurrentRow().setAttribute("RcptSrcType", 332);
                } else if (typ.toString().equals("262")) {
                    this.getMmMtlRcpt().getCurrentRow().setAttribute("RcptSrcType", 337);
                } else if (typ.toString().equals("263")) {
                    this.getMmMtlRcpt().getCurrentRow().setAttribute("RcptSrcType", 338);
                } else if (typ.toString().equals("260")) {
                    this.getMmMtlRcpt().getCurrentRow().setAttribute("RcptSrcType", 458);
                }
                _log.info(" currency id  " + geRw[0].getAttribute("CurrIdSp"));
                if (geRw[0].getAttribute("CurrIdSp") != null) {
                    Integer currIdsp = Integer.parseInt(geRw[0].getAttribute("CurrIdSp").toString());
                    _log.info(paramCldId + " paramCldId " + paramSlocId + " paramSlocId " + paramHoOrgId +
                              "  paramHoOrgId " + paramOrgId + "  paramOrgId " + currIdsp);
                    BigDecimal retC =
                        (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_CURR_CONV_FCTR(?,?,?,?,?)", new Object[] {
                                                         paramCldId, paramSlocId, paramHoOrgId, paramOrgId, currIdsp
                    }));


                    Number retVal = new Number(1);
                    if (retC != null) {
                        try {
                            retVal = new Number(retC);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    this.getMmMtlRcpt().getCurrentRow().setAttribute("CurrConvFctr",
                                                                     (Number) retVal.round(getGlblRoundCurrRateDigit()));
                    _log.info(" retVal : " + retVal);
                }
                this.getMmMtlRcptSrc().executeQuery();
                this.getMmMtlRcptSrc1().executeQuery();
                this.getMmMtlRcptItm().executeQuery();
                this.getMmMtlRcptItm2().executeQuery();
                return "Y";
            } else {
                return "N";
            }
        }
        return "N";

    }

    /**
     *   Method calls function to get the conversion factor for UOMs
     * */
    public Number getUomConvFctr(String CldId, Integer SlocId, String OrgId, String UomSrc, String UomDst,
                                 String ItmId) {

        Number zero = new Number(1);
        Number fctr = zero;
        try {
            BigDecimal uomConv =
                (BigDecimal) (callStoredFunction(Types.NUMERIC, "APP.FN_GET_UOM_CONV_FCTR (?,?,?,?,?,?)", new Object[] {
                                                 SlocId, CldId, OrgId, ItmId, UomSrc, UomDst
            })); //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)

            _log.info("ITEM :" + ItmId + "-->" + UomSrc + " TO " + UomDst + " UOMCONV:" + uomConv);
            try {
                fctr = new Number(uomConv);
            } catch (SQLException e) {
            }
        } catch (Exception s) {
            _log.info("Conversion factor not defined");
        }
        return (Number) fctr.round(getGlblRoundQtyDigit());
    }

    /**
     * Container's getter for LovGateEntry.
     * @return LovGateEntry
     */
    public ViewObjectImpl getLovGateEntry() {
        return (ViewObjectImpl) findViewObject("LovGateEntry");
    }

    /**
     * Container's getter for MmMtlRcptItm1.
     * @return MmMtlRcptItm1
     */
    public MmMtlRcptItmVOImpl getMmMtlRcptItm1() {
        return (MmMtlRcptItmVOImpl) findViewObject("MmMtlRcptItm1");
    }

    /**
     * Container's getter for FkMmMtlRcptItmVL2.
     * @return FkMmMtlRcptItmVL2
     */
    public ViewLinkImpl getFkMmMtlRcptItmVL2() {
        return (ViewLinkImpl) findViewLink("FkMmMtlRcptItmVL2");
    }

    /**
     * Container's getter for MmMtlRcptLot1.
     * @return MmMtlRcptLot1
     */
    public ViewObjectImpl getMmMtlRcptLot1() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptLot1");
    }

    /**
     * Container's getter for MMRcptItmToMmRcptLotVL1.
     * @return MMRcptItmToMmRcptLotVL1
     */
    public ViewLinkImpl getMMRcptItmToMmRcptLotVL1() {
        return (ViewLinkImpl) findViewLink("MMRcptItmToMmRcptLotVL1");
    }

    /**
     * Container's getter for MmMtlRcptBin1.
     * @return MmMtlRcptBin1
     */
    public ViewObjectImpl getMmMtlRcptBin1() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptBin1");
    }

    /**
     * Container's getter for MMRcptItmToMMRcptBinVL1.
     * @return MMRcptItmToMMRcptBinVL1
     */
    public ViewLinkImpl getMMRcptItmToMMRcptBinVL1() {
        return (ViewLinkImpl) findViewLink("MMRcptItmToMMRcptBinVL1");
    }

    /**
     * Method used to delete the current Row from Lot
     * */
    public void deleteLot() {
        Row curr = this.getMmMtlRcptLot1().getCurrentRow();
        curr.remove();
        this.getMmMtlRcptLot1().executeQuery();
    }

    /**
     * Method used to delete the current Row from Bin
     * */
    public void deleteBin() {
        Row curr = this.getMmMtlRcptBin1().getCurrentRow();
        curr.remove();
        this.getMmMtlRcptBin1().executeQuery();
    }

    public void deleteSr() {
        Row curr = this.getMmMtlRcptSr1().getCurrentRow();
        curr.remove();
        this.getMmMtlRcptSr1().executeQuery();
    }

    /**
     * Container's getter for MmMtlRcptSr1.
     * @return MmMtlRcptSr1
     */
    public ViewObjectImpl getMmMtlRcptSr1() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptSr1");
    }

    /**
     * Container's getter for MMRcptItmToMMRcptSrVL1.
     * @return MMRcptItmToMMRcptSrVL1
     */
    public ViewLinkImpl getMMRcptItmToMMRcptSrVL1() {
        return (ViewLinkImpl) findViewLink("MMRcptItmToMMRcptSrVL1");
    }

    /**
     * Method used to add multiple serials into Rcpt$sr table
     * */
    public String addSerials(ArrayList al) {
        Row currSrRw = this.getMmMtlRcptSr1().getCurrentRow();
        String lotId = currSrRw.getAttribute("LotId").toString();
        String binId = currSrRw.getAttribute("BinId").toString();
        String chk = "Y";
        Iterator it = al.iterator();
        while (it.hasNext()) {
            Object nxt = it.next();
            if (chk.equals("Y")) {
                currSrRw.setAttribute("SrNo", nxt.toString());
                chk = "N";
            } else {
                Row cr = this.getMmMtlRcptSr1().createRow();
                cr.setAttribute("SrNo", nxt.toString());
                cr.setAttribute("LotId", lotId);
                cr.setAttribute("BinId", binId);
                this.getMmMtlRcptSr1().insertRow(cr);
            }
        }
        return "Y";
    }

    /**
     * Container's getter for ViewRcptSrch.
     * @return ViewRcptSrch
     */
    public ViewObjectImpl getViewRcptSrch() {
        return (ViewObjectImpl) findViewObject("ViewRcptSrch");
    }

    /**
     * Container's getter for ViewDummy.
     * @return ViewDummy
     */
    public ViewObjectImpl getViewDummy() {
        return (ViewObjectImpl) findViewObject("ViewDummy");
    }


    /**
     * Container's getter for MmMtlRcptSrno1.
     * @return MmMtlRcptSrno1
     */
    public MmMtlRcptSrnoVOImpl getMmMtlRcptSrno1() {
        return (MmMtlRcptSrnoVOImpl) findViewObject("MmMtlRcptSrno1");
    }

    /**
     * Container's getter for RcptItmToRcptItmSrNoVL1.
     * @return RcptItmToRcptItmSrNoVL1
     */
    public ViewLinkImpl getRcptItmToRcptItmSrNoVL1() {
        return (ViewLinkImpl) findViewLink("RcptItmToRcptItmSrNoVL1");
    }


    /**
     * Method used to update the PO No from Temp PO NO. in case of receipt without PO
     * */
    public String updateSrcDocNo(String DocId, Integer dlvNo) {
        //chk if all itms present in that po
        //if yes update
        //else validation Message
        //    String chkSch=this.isPoScheduled(DocId);
        //    if(chkSch.equals("Y")){
        //       if(dlvNo>0){

        Row r = this.getMmMtlRcpt().getCurrentRow();
        String srcDocId = r.getAttribute("TransSrcDocId").toString();
        DocId = srcDocId;
        _log.info("DocId--" + DocId + "--" + dlvNo);
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("DocId='" + DocId + "' and DlvSchdlNo=" + dlvNo);
        Row[] shdRw = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        //   ArrayList al=new ArrayList();
        /*  for(Row rr:shdRw){
                  RowQualif
                  this.getMmMtlRcptItm().getFilteredRows(arg0) rr.getAttribute("ItmId")
              }
              */
        RowSetIterator rsitm = this.getMmMtlRcptItm().createRowSetIterator(null);
        while (rsitm.hasNext()) {
            Row cr = rsitm.next();
            cr.setAttribute("DocIdSrc", DocId);
            cr.setAttribute("DlvSchdlNo", dlvNo);
        }
        rsitm.closeRowSetIterator();

        this.getMmMtlRcptItm().executeQuery();


        RowSetIterator rsi = this.getMmMtlRcptSrc().createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row cur = rsi.next();
            cur.setAttribute("DocIdSrc", DocId);
            cur.setAttribute("DocTypeSrc", 266);
            cur.setAttribute("DlvSchdlNo", dlvNo);
        }
        rsi.closeRowSetIterator();


        this.getMmMtlRcptSrc().executeQuery();
        /*      }else{
                _log.info("Schedule Number is reqd");
            }
        */
        //}
        //   this.getMMDraftPoDlvSchdl().getFilteredRows(arg0)
        return "Y";
    }

    /**
     * Method used to generated temporary doc no. in case of Receipt without PO
     * */
    public void generateTempDocId(Integer UsrId, String CldId, Integer SlocId, String OrgId, String WhId,
                                  Integer DocTypeSrc) {

        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        String rcptdocid = rcptRw.getAttribute("DocId").toString();

        Integer fyId = getFYid(CldId, OrgId, null, "E");
        String tableNm = "MM$MTL$RCPT$SRC";
        Integer rcptSrcType = Integer.parseInt(rcptRw.getAttribute("RcptSrcType").toString());
        if (rcptSrcType == 396) {
            tableNm = "OPENING_BALANCE";
            DocTypeSrc = 396;
        } else if (rcptSrcType == 334) {
            tableNm = "FG_RECEIPT";
            DocTypeSrc = 267;
        }


        String tnpNoDisp = (String) (callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {
                                                        SlocId, CldId, OrgId, tableNm, WhId, fyId
        })); //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        _log.info(fyId + "Temp Doc Id--" + tnpNoDisp);
        Row cR = this.getMmMtlRcptSrc().createRow();
        cR.setAttribute("DocIdSrc", tnpNoDisp);
        cR.setAttribute("WhId", WhId);
        cR.setAttribute("CldId", CldId);
        cR.setAttribute("OrgId", OrgId);
        cR.setAttribute("DocId", rcptdocid);
        cR.setAttribute("DocTypeSrc", DocTypeSrc);
        cR.setAttribute("DocDtSrc", (Timestamp) rcptRw.getAttribute("DocDt"));
        cR.setAttribute("DlvSchdlNo", 0);
        cR.setAttribute("DocIdSrcDisp", tnpNoDisp);
        this.getMmMtlRcptSrc().insertRow(cR);

        // String tnpNoDisp =(String)(callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {SlocId,CldId,OrgId,"MM$MTL$RCPT$SRC",WhId,fyId}));    //   app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)

        this.getMmMtlRcptSrc().executeQuery();

    }


    /**
     *  Method used to add Items manually to Receipt table in case of Reciept Without PO.
     * */
    public void addItemToRcpt(String ItmName, String ItmUom, Number ItmQty) {
        Row cR = this.getMmMtlRcptItm().createRow();
        Row rwSrc = this.getMmMtlRcptSrc().getCurrentRow();
        String orgIdN = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        String qcFlag = "N";
        Row[] orgR = this.getViewOrgMMPrf().getFilteredRows("OrgId", orgIdN);
        if (orgR.length > 0) {
            if (orgR[0].getAttribute("UseQc") != null) {
                qcFlag = orgR[0].getAttribute("UseQc").toString();
            }
        }
        _log.info(orgR.length + "   qcFlag    " + qcFlag);

        Row[] rw = this.getLovItmSupp().getFilteredRows("ItmDesc", ItmName);

        if (rw.length > 0) {

            cR.setAttribute("ItmId", rw[0].getAttribute("ItmId").toString());
            cR.setAttribute("ItmUom", ItmUom);
            cR.setAttribute("DocDtSrc", (Timestamp) rwSrc.getAttribute("DocDtSrc"));

            this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                             resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
            this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                             resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
            this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                             resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
            this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", rw[0].getAttribute("ItmId").toString());
            this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
            this.getLovItmForDisp().executeQuery();


            Row[] rwItm =
                this.getLovItmForDisp().getFilteredRows("ItmId",
                                                        rw[0].getAttribute("ItmId").toString()); // change BL for tunning 02/09/2014
            cR.setAttribute("ItmUomBs", rwItm[0].getAttribute("UomBasic").toString());
            //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
            Number fct =
                getUomConvFctr(rwSrc.getAttribute("CldId").toString(),
                               Integer.parseInt(rwSrc.getAttribute("SlocId").toString()),
                               rwSrc.getAttribute("OrgId").toString(), ItmUom,
                               rwItm[0].getAttribute("UomBasic").toString(), rw[0].getAttribute("ItmId").toString());

            if ("N".equalsIgnoreCase(qcFlag)) {
                _log.info("organisation not using QC :::::::: ");
                cR.setAttribute("QcReqdFlg", "N");
            } else if ("Y".equalsIgnoreCase(qcFlag)) {
                _log.info("organisation using QC :::::::: ");
                cR.setAttribute("QcReqdFlg", rwItm[0].getAttribute("QcReqdFlg").toString());
            }
            _log.info("FCTR=" + fct);
            cR.setAttribute("UomConvFctr", fct);
            cR.setAttribute("RcptQty", ItmQty);
            cR.setAttribute("RcptQtyBs", (Number) ((Number) ItmQty.multiply(fct)).round(getGlblRoundQtyDigit()));
            cR.setAttribute("DlvNoteQty", new Number(0));

        }
        this.getMmMtlRcptItm().insertRow(cR);
        this.getMmMtlRcptItm().executeQuery();
    }

    public void addItemToRcptForOb(String ItmName, String ItmUom, Number ItmQty) {
        Row cR = this.getMmMtlRcptItm().createRow();
        Row rwSrc = this.getMmMtlRcptSrc().getCurrentRow();
        this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", null);
        this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", ItmName);
        this.getLovItmForDisp().executeQuery();
        Row[] rw = this.getLovItmForDisp().getFilteredRows("ItmDesc", ItmName);

        // Row[] rw= this.getLovItmId().getFilteredRows("ItmDesc", ItmName);  // change BL for tunning 02/09/2014

        if (rw.length > 0) {

            cR.setAttribute("ItmId", rw[0].getAttribute("ItmId").toString());
            cR.setAttribute("ItmUom", ItmUom);
            cR.setAttribute("DocDtSrc", (Timestamp) rwSrc.getAttribute("DocDtSrc"));
            // Row[] rwItm=this.getLovItmId().getFilteredRows("ItmId", rw[0].getAttribute("ItmId").toString()); // change BL for tunning 02/09/2014 no need
            cR.setAttribute("ItmUomBs", rw[0].getAttribute("UomBasic").toString());
            cR.setAttribute("UomConvFctr", new Number(1));
            cR.setAttribute("RcptQty", ItmQty);
            cR.setAttribute("FinalRcptQty", ItmQty);
            cR.setAttribute("TotRcptQty", ItmQty);
            cR.setAttribute("FinalRcptQtyBs", ItmQty);
            //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
            //  Number fct=getUomConvFctr(rwSrc.getAttribute("CldId").toString(), Integer.parseInt(rwSrc.getAttribute("SlocId").toString()), rwSrc.getAttribute("OrgId").toString(),rw[0].getAttribute("ItmId").toString(),ItmUom, rwItm[0].getAttribute("UomBasic").toString());
            //  cR.setAttribute("QcReqdFlg", rwItm[0].getAttribute("QcReqdFlg").toString());
            //  cR.setAttribute("UomConvFctr",fct);
            //   cR.setAttribute("RcptQtyBs", (Number)ItmQty.multiply(fct));
            //  cR.setAttribute("DlvNoteQty",new Number(0));

        }
        this.getMmMtlRcptItm().insertRow(cR);
        this.getMmMtlRcptItm().executeQuery();
    }

    public void addItemToRcptForFGR(String ItmName, String ItmUom, Number ItmQty, Number ItmPrice) {
        Row cR = this.getMmMtlRcptItm().createRow();
        Row rwSrc = this.getMmMtlRcptSrc().getCurrentRow();
        this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", null);
        this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", ItmName);
        this.getLovItmForDisp().executeQuery();
        Row[] rw = this.getLovItmForDisp().getFilteredRows("ItmDesc", ItmName);

        // Row[] rw= this.getLovItmId().getFilteredRows("ItmDesc", ItmName);  // change BL for tunning 02/09/2014
        _log.info(" price  " + ItmPrice);
        if (rw.length > 0) {

            cR.setAttribute("ItmId", rw[0].getAttribute("ItmId").toString());
            cR.setAttribute("ItmUom", ItmUom);
            cR.setAttribute("DocDtSrc", (Timestamp) rwSrc.getAttribute("DocDtSrc"));
            // Row[] rwItm=this.getLovItmId().getFilteredRows("ItmId", rw[0].getAttribute("ItmId").toString()); // change BL for tunning 02/09/2014 no need
            cR.setAttribute("ItmUomBs", rw[0].getAttribute("UomBasic").toString());
            cR.setAttribute("UomConvFctr", new Number(1));
            cR.setAttribute("RcptQty", ItmQty);
            cR.setAttribute("FinalRcptQty", ItmQty);
            cR.setAttribute("TotRcptQty", ItmQty);
            cR.setAttribute("FinalRcptQtyBs", ItmQty);
            cR.setAttribute("LndPrice", ItmPrice);
            cR.setAttribute("LndPriceBs", ItmPrice);
            cR.setAttribute("PurPrice", ItmPrice);
            cR.setAttribute("PurPriceBs", ItmPrice);

            //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
            //  Number fct=getUomConvFctr(rwSrc.getAttribute("CldId").toString(), Integer.parseInt(rwSrc.getAttribute("SlocId").toString()), rwSrc.getAttribute("OrgId").toString(),rw[0].getAttribute("ItmId").toString(),ItmUom, rwItm[0].getAttribute("UomBasic").toString());
            //  cR.setAttribute("QcReqdFlg", rwItm[0].getAttribute("QcReqdFlg").toString());
            //  cR.setAttribute("UomConvFctr",fct);
            //   cR.setAttribute("RcptQtyBs", (Number)ItmQty.multiply(fct));
            //  cR.setAttribute("DlvNoteQty",new Number(0));

        }
        this.getMmMtlRcptItm().insertRow(cR);
        this.getMmMtlRcptItm().executeQuery();
    }


    /**
     * Container's getter for LovItmSupp.
     * @return LovItmSupp
     */
    public ViewObjectImpl getLovItmSupp() {
        return (ViewObjectImpl) findViewObject("LovItmSupp");
    }

    /**
     * Method to validate the PO No. for receipt .
     * @param p_rcpt_flg - Value = 'S' or 'G' (For either Source and Gate Entry)
     * @param poDocId - PO No selected
     * @return : -1 -Invalid PO No
     *           -2 -Unable to fetch temporary PO Number
     *           -3 -Unable to retrieve items from receipt and del schdule
     *           -4 -Items mismatch between receipt and delivery schedule
     *           -5 -unable to fetch PO date
     *           -6 -unable to fetch receipt date
     *           -7 -cannot accept before or after tolerance days
     *           -8 -unable to fetch received quantity
     *           -9 -cannot accept more than tolerance quantity
     *            1 -success i.e. if all checks are surpassed
     * */
    public String validateWoutPoRcptDoc(String CldId, Integer SlocId, String OrgId, String poDocId,
                                        Integer p_dlv_sch_no, String p_rcpt_flg) {
        Row cur = this.getMmMtlRcptSrc().getCurrentRow();

        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        String srcDocId = rcptRw.getAttribute("TransSrcDocId").toString();
        //  String chkValid ="N";
        Integer ret = Integer.parseInt(callStoredFunction(Types.INTEGER, "mm_chk_rcpt_po (?,?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, OrgId, srcDocId,
                                                          cur.getAttribute("DocIdSrc").toString(), p_dlv_sch_no,
                                                          p_rcpt_flg
        }).toString());

        _log.info(srcDocId + "--" + poDocId + "--" + cur.getAttribute("DocIdSrc").toString() + "ret valid value:" +
                  ret);
        //if(chkValid.equals(""))

        return ret.toString();
    }

    /**
     * Method to check tolerance Quantity against the Received Quantity.
     * @return : -2 - Cannot accept more then tolerance quantity.
     *            1 - Valid Quantity
     * */
    public String validateToleranceQty(String CldId, Integer SlocId, String OrgId, String p_itm_id, Number rcpt_qty) {
        Row cur = this.getMmMtlRcptItm().getCurrentRow();
        Number oldQty = new Number(0);
        Number balQty = new Number(0);
        Number tmpRcptQty = new Number(0);
        Number pendRcptQty = new Number(0);
        String tolQtyType = "P";
        Number tolQtyVal = new Number(0);
        Number chkQty = new Number(0);
        if (cur.getAttribute("RcptQty") != null)
            oldQty = (Number) cur.getAttribute("RcptQty");
        if (cur.getAttribute("PendQty") != null)
            pendRcptQty = (Number) cur.getAttribute("PendQty");
        Row curr = this.getMmMtlRcptItm().getCurrentRow();
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("CldId='" + curr.getAttribute("CldId") + "' and SlocId=" + curr.getAttribute("SlocId") +
                          " and OrgId='" + curr.getAttribute("OrgId") + "' and DocId='" +
                          curr.getAttribute("DocIdSrc") + "' and ItmId='" + curr.getAttribute("ItmId") +
                          "' and WhId='" + curr.getAttribute("WhId") + "' and ItmUom='" + curr.getAttribute("ItmUom") +
                          "' and DlvSchdlNo=" + curr.getAttribute("DlvSchdlNo"));
        Row dsRow[] = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);


        if (curr.getAttribute("ItmId") != null && curr.getAttribute("ItmUom") != null &&
            curr.getAttribute("WhId") != null && curr.getAttribute("DocIdSrc") != null) {
            BigDecimal tlrclQtyVal =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_ITM_TLRNC_QTY(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                curr.getAttribute("CldId"), curr.getAttribute("SlocId"),
                                                curr.getAttribute("OrgId"), curr.getAttribute("DocIdSrc"), curr.getAttribute("ItmId"),
                                                curr.getAttribute("WhId"), curr.getAttribute("DlvSchdlNo"), curr.getAttribute("ItmUom"),
                                                pendRcptQty
            });

            _log.info(tlrclQtyVal + "  tlrclQtyVal21");
            if (tlrclQtyVal != null) {
                try {
                    tolQtyVal = new Number(tlrclQtyVal);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        }


        if (dsRow.length > 0) {
            Number tmpQty = new Number(0);
            if (dsRow[0].getAttribute("TmpRcptQty") != null)
                tmpQty = (Number)((Number) dsRow[0].getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());
            tmpRcptQty = tmpQty.subtract(oldQty);
            if (dsRow[0].getAttribute("BalQty") != null)
                balQty = (Number)((Number) dsRow[0].getAttribute("BalQty")).round(getGlblRoundQtyDigit());
//            if (dsRow[0].getAttribute("TlrncQtyType") != null)
//                tolQtyType = (String) dsRow[0].getAttribute("TlrncQtyType");
//            if (dsRow[0].getAttribute("TlrncQtyVal") != null)
//                tolQtyVal = (Number) dsRow[0].getAttribute("TlrncQtyVal");
//            if (tolQtyType.equals("P")) {
//                chkQty =
//                    (balQty.subtract(tmpRcptQty)).add((balQty.subtract(tmpRcptQty)).multiply(tolQtyVal).divide(new Number(100)));
//            } else if (tolQtyType.equals("A")) {
//                chkQty = (balQty.subtract(tmpRcptQty)).add(tolQtyVal);
//            }
            chkQty = (Number)(balQty.subtract(tmpRcptQty)).add((Number)tolQtyVal.round(getGlblRoundQtyDigit())).round(getGlblRoundQtyDigit());
_log.info(balQty+"  balQty "+tmpRcptQty+"  tmpRcptQty "+tolQtyVal+"  tolQtyVal "+tolQtyVal);
            if (((Number)rcpt_qty.round(getGlblRoundQtyDigit())).compareTo(chkQty) > 0)
                return "-2";
            else
                return "1";
        }
        return "1";
        /*  Integer ret =Integer.parseInt(callStoredFunction(Types.INTEGER, "mm_chk_tlrnc_qty (?,?,?,?,?,?,?)", new Object[] {CldId,SlocId,OrgId,cur.getAttribute("DocIdSrc").toString(),Integer.parseInt(cur.getAttribute("DlvSchdlNo").toString()),p_itm_id,rcpt_qty}).toString());
        return ret.toString(); */
    }

    /**
     * Method to check tolerance Days against the selected po no/date.
     * @return : -2 - Cannot accept before or after tolerance days.
     *            1 - Valid Date
     * */
    public String validateToleranceDays(String CldId, Integer SlocId, String OrgId, String p_po_no,
                                        Timestamp p_rcpt_date) {
        //  Row cur=this.getMmMtlRcptItm().getCurrentRow();
        Integer Schdlno = new Integer(1);
        Row curr = this.getMmMtlRcpt().getCurrentRow();
        if (curr.getAttribute("TransSchdlNo") != null)
            Schdlno = (Integer) curr.getAttribute("TransSchdlNo");
        p_po_no = (String) curr.getAttribute("TransSrcDocId");
        //  String chkValid ="N";
        Integer ret = Integer.parseInt(callStoredFunction(Types.INTEGER, "mm_chk_tlrnc_days (?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, OrgId, p_po_no, Schdlno, p_rcpt_date
        }).toString());
        _log.info("ret valid value:" + ret);
        //if(chkValid.equals(""))
        return ret.toString();
    }

    /**
     * Container's getter for ViewOrgMMPrf.
     * @return ViewOrgMMPrf
     */
    public ViewObjectImpl getViewOrgMMPrf() {
        return (ViewObjectImpl) findViewObject("ViewOrgMMPrf");
    }

    /**
     * Method used to check if Tolerance Days is to be checked for this Receipt acc. to MM$PRF
     * */
    public String chkToleranceDays(String orgId, Integer SlocId, String CldId) {
        String chk = "N";
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        RowQualifier rq = new RowQualifier(this.getViewOrgMMPrf());
        rq.setWhereClause("OrgId='" + orgId + "' and SlocId=" + SlocId + " and CldId='" + CldId + "'");
        Row[] r = this.getViewOrgMMPrf().getFilteredRows(rq);
        _log.info("No. of Filtered Rows=" + r.length);

        if (r.length > 0) {
            chk = r[0].getAttribute("ChkDlvSchdlTlrnc").toString();
        }
        _log.info("Check for tolerance=" + chk);
        return chk;
    }


    public String chkDaysTolerance() {
        Row curr = this.getMmMtlRcpt().getCurrentRow();
        Integer dlvschdlno = new Integer(1);
        if (curr.getAttribute("TransSchdlNo") != null)
            dlvschdlno = (Integer) curr.getAttribute("TransSchdlNo");
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("CldId='" + curr.getAttribute("CldId") + "' and SlocId=" + curr.getAttribute("SlocId") +
                          " and OrgId='" + curr.getAttribute("OrgId") + "' and DocId='" +
                          curr.getAttribute("TransSrcDocId") + "' and  WhId='" + curr.getAttribute("WhId") +
                          "' and  DlvSchdlNo=" + dlvschdlno);
        _log.info("Query=" + rq.getExprStr());
        Row dsRow[] = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        _log.info("No. of filtered Rows=" + dsRow.length);
        if (dsRow.length > 0) {
            Timestamp dlvDt = (Timestamp) dsRow[0].getAttribute("DlvDt");
            Timestamp rcptDt = (Timestamp) curr.getAttribute("RcptDt");

            try {
                if (dlvDt.dateValue().toString().equals(rcptDt.dateValue().toString()))
                    return "Y";
                else
                    return "N";
            } catch (SQLException e) {
                _log.info("Exception to cast timestamp to date.");
            }
        }
        return "P";
    }


    /**
     * Method used to check if Tolerance Qty is to be checked for this Receipt acc. to MM$PRF
     * */
    public String chkToleranceQty(String orgId, Integer SlocId, String CldId) {
        String chk = "N";
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        RowQualifier rq = new RowQualifier(this.getViewOrgMMPrf());
        rq.setWhereClause("OrgId='" + orgId + "' and SlocId=" + SlocId + " and CldId='" + CldId + "'");
        _log.info(rq.getExprStr());
        Row[] r = this.getViewOrgMMPrf().getFilteredRows(rq);
        _log.info("No. of rows in org prf for current org=" + r.length);
        if (r.length > 0) {
            chk = r[0].getAttribute("ChkDlvQtyTlrnc").toString();
            _log.info("Chk for Delvry Tlrnc=" + chk);
        }
        return chk;
    }

    /**
     * Method used to add Serials manualy in case QcReqd flag is enabled in any of the Receipt items.
     * */
    public void addManualSerial(String SrNo) {
        ViewObject srnoVo = this.getMmMtlRcptSrno1();
        srnoVo.executeQuery();
        String uombs = this.getMmMtlRcptItm1().getCurrentRow().getAttribute("ItmUomBs").toString();
        Row cr = srnoVo.createRow();
        cr.setAttribute("SrNo", SrNo);
        cr.setAttribute("DocDtSrc", this.getMmMtlRcptItm1().getCurrentRow().getAttribute("DocDtSrc"));
        cr.setAttribute("ItmUomBs", uombs);
        srnoVo.insertRow(cr);
        //
    }


    /**
     * Method used to add Serials manualy in case QcReqd flag is enabled in any of the Receipt items.
     * */
    public void addManualSerialForNoneSrItm(String SrNo) {
        ViewObject srnoVo = this.getMmMtlRcptSrNote();
        srnoVo.executeQuery();

        Object retVal = callStoredFunction(Types.INTEGER, "MM.MM_GET_SL_NO ()", new Object[] { });
        _log.info("retVal  " + retVal);
        if (retVal != null) {
            Integer srlNo = (Integer) retVal;
            _log.info("srlNo  " + srlNo);
            String uombs = this.getMmMtlRcptItm1().getCurrentRow().getAttribute("ItmUomBs").toString();
            Row cr = srnoVo.createRow();
            cr.setAttribute("SrlNo", srlNo);
            cr.setAttribute("SrNo", SrNo);
            //cr.setAttribute("DocDtSrc", this.getMmMtlRcptItm1().getCurrentRow().getAttribute("DocDtSrc"));
            cr.setAttribute("ItmUomBs", uombs);
            srnoVo.insertRow(cr);
        }
        this.getMmMtlRcptItm1().getCurrentRow().setAttribute("TransNoneSrItmForSr", null);
        //
    }

    /**
     * Method to check if the serial no to be added is valid or not(Non-Duplicate across Org)
     * for an Item
     * @return : Y -No Duplicate(Valid)
     *           N -Duplicate(Invalid)
     *           I -Max Serial No. exceeded(Invalid)
     *           O -If receipt quantity is zero.
     * */
    public String isSerialNoValid(String SrNo, String OrgId, Integer slocId, String CldId) {
        Row itmRw = this.getMmMtlRcptItm1().getCurrentRow();
        Number zero = new Number(0);
        Number numQty = (Number) itmRw.getAttribute("RcptQtyBs");
        Number totQty = (Number) itmRw.getAttribute("TransTotalQty");
        _log.info("TOtal=" + totQty);
        if (itmRw.getAttribute("TransTotalQty") != null) {
            totQty = (Number) ((Number) itmRw.getAttribute("TransTotalQty")).round(getGlblRoundQtyDigit());
        }

        Number fctr = new Number(1);
        if (itmRw.getAttribute("UomConvFctr") != null) {
            fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        }

        Number totqtyBs = (Number) (totQty.multiply(fctr)).round(getGlblRoundQtyDigit());

        Integer count = this.getMmMtlRcptSrno1().getRowCount();
        // _log.info(numQty.intValue()+"--COUNT--"+count);
        if (totQty.compareTo(new Number(0)) == 0) {
            return "O";
        } else if (count + 1 > totqtyBs.intValue()) {
            return "I";
        } else {
            String uomBs = itmRw.getAttribute("ItmUomBs").toString();

            RowQualifier rq = new RowQualifier(this.getMmMtlRcptSrno());
            rq.setWhereClause("OrgId='" + OrgId + "' and CldId='" + CldId + "' and SlocId=" + slocId + " and SrNo='" +
                              SrNo + "' and ItmId='" + itmRw.getAttribute("ItmId").toString() + "' and ItmUom='" +
                              uomBs + "'");
            Row[] filRw = this.getMmMtlRcptSrno().getFilteredRows(rq);
            _log.info("Same Sr no Rows in RcptSrNo=" + filRw.length);

            //  Mm_Is_Serial_No_Duplicate
            String dupli = "N";
            try {
                dupli = (callStoredFunction(Types.VARCHAR, "MM.Mm_Is_Serial_No_Duplicate(?,?,?,?,?)", new Object[] {
                                            CldId, slocId, OrgId, itmRw.getAttribute("ItmId").toString(), SrNo
                }).toString());
            } catch (Exception e) {
                e.printStackTrace();
            }


            //            RowQualifier rqsr = new RowQualifier(this.getMmMtlRcptSr2());
            //            rqsr.setWhereClause("OrgId='" + OrgId + "' and CldId='" + CldId + "' and SlocId=" + slocId + " and SrNo='" +
            //                                SrNo + "' and ItmId='" + itmRw.getAttribute("ItmId").toString() + "' and ItmUom='" +
            //                                uomBs + "'");
            //            Row[] filRwsr = this.getMmMtlRcptSr2().getFilteredRows(rqsr);
            //            _log.info("Same Sr no Rows in RcptSr=" + filRwsr.length);
            //
            //            if (filRw.length > 0 || filRwsr.length > 0) {
            //                return "N";
            //            }
            if (filRw.length > 0 || "Y".equalsIgnoreCase(dupli)) {
                return "N";
            }
            return "Y";
        }
    }

    /**
     * Container's getter for MmMtlRcptSrno.
     * @return MmMtlRcptSrno
     */
    public MmMtlRcptSrnoVOImpl getMmMtlRcptSrno() {
        return (MmMtlRcptSrnoVOImpl) findViewObject("MmMtlRcptSrno");
    }


    public void setRcptQtyBase(Number rcptQty) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        Number bs =
            (Number) (fctr.multiply((Number) (rcptQty).round(getGlblRoundQtyDigit()))).round(getGlblRoundQtyDigit());
        _log.info("RcptQtyBase" + bs);
        itmRw.setAttribute("RcptQtyBs", bs);
    }

    public void setRcptQtySpecific(Number rcptQtyBs) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        Number sp =
            (Number) (((Number) rcptQtyBs.round(getGlblRoundQtyDigit())).divide(fctr)).round(getGlblRoundQtyDigit());
        _log.info("RcptQtySp" + sp);
        itmRw.setAttribute("RcptQty", sp);
    }

    public void setRejQtyBase(Number rejQty) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) (((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit()));
        Number bs =
            (Number) (fctr.multiply((Number) (rejQty.round(getGlblRoundQtyDigit())))).round(getGlblRoundQtyDigit());
        itmRw.setAttribute("RejQtyBs", bs);
    }

    public void setRejQtySpecific(Number rejQtyBs) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) (((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit()));
        Number sp =
            (Number) (((Number) rejQtyBs.round(getGlblRoundQtyDigit())).divide(fctr)).round(getGlblRoundQtyDigit());
        _log.info("RejQtySp" + sp);
        Number oldvalue = new Number(0);
        Number newvalue = new Number(0);
        if (itmRw.getAttribute("RejQty") != null)
            oldvalue = (Number) ((Number) itmRw.getAttribute("RejQty")).round(getGlblRoundQtyDigit());
        itmRw.setAttribute("RejQty", sp);
    }

    public void setRwkQtyBase(Number rwkQty) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        Number bs =
            (Number) (fctr.multiply((Number) rwkQty.round(getGlblRoundQtyDigit()))).round(getGlblRoundQtyDigit());
        itmRw.setAttribute("RwkQtyBs", bs);
    }

    public Object resolvElobj(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }

    public void setRwkQtySpecific(Number rwkQtyBs) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        Number sp =
            (Number) (((Number) rwkQtyBs.round(getGlblRoundQtyDigit())).divide(fctr)).round(getGlblRoundQtyDigit());
        //_log.info("RwkQtySp" + sp.round(rnd));
        itmRw.setAttribute("RwkQty", sp);
    }

    public void setFinalRcptQtyBase(Number frcptQty) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        Number bs =
            (Number) (fctr.multiply((Number) frcptQty.round(getGlblRoundQtyDigit()))).round(getGlblRoundQtyDigit());
        itmRw.setAttribute("FinalRcptQty", (Number) frcptQty.round(getGlblRoundQtyDigit()));
        itmRw.setAttribute("FinalRcptQtyBs", bs);
    }

    /**
     * Container's getter for ViewTrfOrderItm.
     * @return ViewTrfOrderItm
     */
    public ViewObjectImpl getViewTrfOrderItm() {
        return (ViewObjectImpl) findViewObject("ViewTrfOrderItm");
    }

    public void resetOrgWh(Integer rcptType) {
        Row rw = this.getMmMtlRcpt().getCurrentRow();
        if (rcptType == 337) {
            rw.setAttribute("OrgIdSrc", rw.getAttribute("OrgId").toString());
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("TransSrcDocType", 270);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        } else if (rcptType == 338) {
            rw.setAttribute("TransSrcDocType", 270);
            rw.setAttribute("OrgIdSrc", null);
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        } else if (rcptType == 334) {
            rw.setAttribute("TransSrcDocType", 399);
            rw.setAttribute("OrgIdSrc", null);
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        } else if (rcptType == 331 || rcptType == 458) {
            rw.setAttribute("OrgIdSrc", null);
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        } else if (rcptType == 332) {
            rw.setAttribute("TransSrcDocType", 825);
            rw.setAttribute("OrgIdSrc", null);
            rw.setAttribute("WhIdSrc", null);
            rw.setAttribute("EoIdSrc", null);
            rw.setAttribute("RqmtAreaIdSrc", null);
        }
    }

    /**
     *   Method to validate before save
     **/
    public String validateStockDetailQty(Integer SlocId, String CldId, String OrgId, String WhId) {
        /*   RowSetIterator rsi= this.getMmMtlRcptItm1().createRowSetIterator(null);
         Number zero=new Number(0);
         while(rsi.hasNext()){
             Row itmRw=rsi.next();
             RowQualifier rq=new RowQualifier(this.getMmMtlRcptLot1());
             rq.setWhereClause("CldId='"+CldId+"' and SlocId="+SlocId+" and OrgId='"+OrgId+"' and WhId='"+WhId+"' and DocId='"+itmRw.getAttribute("DocId").toString()+"' and DocIdSrc='"+itmRw.getAttribute("DocIdSrc").toString()+"' and DlvSchdlNo="+(Integer)itmRw.getAttribute("DlvSchdlNo")+" and ItmId='"+itmRw.getAttribute("ItmId").toString()+"' and ItmUom='"+itmRw.getAttribute("ItmUom").toString()+"'");
             Row[] lotRw=this.getMmMtlRcptLot1().getFilteredRows(rq);
             Number sumLotQty=zero;
             for(Row lrw:lotRw){
               sumLotQty =sumLotQty.add((Number)lrw.getAttribute("LotQty"));
             }
             if(sumLotQty.compareTo((Number)itmRw.getAttribute("RcptQty"))==0){

             }else{
                 _log.info("Lot Quantity Mismatches Itm Quantity");
             }

         }
         rsi.closeRowSetIterator(); */



        return "Y";
    }

    /**
     * Container's getter for MmMtlRcptLot2.
     * @return MmMtlRcptLot2
     */
    public MmMtlRcptLotVOImpl getMmMtlRcptLot2() {
        return (MmMtlRcptLotVOImpl) findViewObject("MmMtlRcptLot2");
    }

    /**
     * Container's getter for MmMtlRcptBin2.
     * @return MmMtlRcptBin2
     */
    public MmMtlRcptBinVOImpl getMmMtlRcptBin2() {
        return (MmMtlRcptBinVOImpl) findViewObject("MmMtlRcptBin2");
    }

    public void setItmLotIdCurrBin() {
        Row lotRw = this.getMmMtlRcptLot1().getCurrentRow();
        Row binRw = this.getMmMtlRcptBin1().getCurrentRow();
        binRw.setAttribute("LotId", lotRw.getAttribute("LotId"));
        binRw.setAttribute("ItmUomBs", lotRw.getAttribute("ItmUomBs"));
    }

    public void getCurrBinIdAndValue() {
        Row lotRw = this.getMmMtlRcptLot1().getCurrentRow();
        Row binRw = this.getMmMtlRcptBin1().getCurrentRow();
        /*  binRw.getAttribute("LotId").toString();
        binRw.getAttribute("ItmUomBs").toString(); */
        if (binRw.getAttribute("BinId") != null)
            binId = binRw.getAttribute("BinId").toString();
        if (binRw.getAttribute("BinQtyBs") != null)
            qtyBase = (Number) ((Number) binRw.getAttribute("BinQtyBs")).round(getGlblRoundQtyDigit());

    }

    public Number setCurrBinIdAndValue() {
        Row lotRw = this.getMmMtlRcptLot1().getCurrentRow();
        Row binRw = this.getMmMtlRcptBin1().getCurrentRow();
        /*  binRw.getAttribute("LotId").toString();
        binRw.getAttribute("ItmUomBs").toString(); */
        if (binId != null)
            binRw.setAttribute("BinId", binId);

        if (qtyBase.compareTo(new Number(0)) == 1)
            binRw.setAttribute("BinQtyBs", (Number) qtyBase.round(getGlblRoundQtyDigit()));

        return (Number) qtyBase.round(getGlblRoundQtyDigit());

    }

    public void setItmLotBinCurrSr() {
        Row currItm = this.getMmMtlRcptItm1().getCurrentRow();
        /*
        Row lotRw=this.getMmMtlRcptLot1().getCurrentRow();
        Row binRw=this.getMmMtlRcptBin1().getCurrentRow();
     */
        Row srRw = this.getMmMtlRcptSr1().getCurrentRow();

        currItm.getAttribute("TransSrBinId").toString();

        System.out.println("--->" + currItm.getAttribute("TransSrLotId").toString() + "--" +
                           currItm.getAttribute("TransSrBinId").toString() + "--" +
                           currItm.getAttribute("TransSrSerialNo").toString());
        srRw.setAttribute("LotId", currItm.getAttribute("TransSrLotId").toString());
        srRw.setAttribute("BinId", currItm.getAttribute("TransSrBinId").toString());
        srRw.setAttribute("SrNo", currItm.getAttribute("TransSrSerialNo").toString());

        srRw.setAttribute("ItmUomBs", currItm.getAttribute("ItmUomBs").toString());

        currItm.setAttribute("TransSrSerialNo", null);

    }

    public void setTrSerialNo(String serial) {
        Row srRw = this.getMmMtlRcptSr1().getCurrentRow();
        srRw.setAttribute("SrNo", serial);
    }

    /**
     * Method to check if the serial no to be added is valid or not(Non-Duplicate across WhId) in RcptSr Table
     * for an Item
     * @return : Y -No Duplicate(Valid)
     *           N -Duplicate(Invalid)
     *           I -Max Serial No. exceeded(Invalid)
     * */
    public String isSerialNoValidSr(String SrNo, String OrgId, Integer slocId, String CldId) {
        Row itmRw = this.getMmMtlRcptItm1().getCurrentRow();
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        Row srRow = this.getMmMtlRcptSr2().getCurrentRow();

        Number fctr = new Number(1);
        if (itmRw.getAttribute("UomConvFctr") != null) {
            fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        }


        Number numQty = (Number) ((Number) itmRw.getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
        if (numQty == null) {
            numQty = new Number(0);
        }
        //(Number)itmRw.getAttribute("RcptQtyBs");
        Number qtyBs = (Number) ((numQty.multiply(fctr)).round(getGlblRoundQtyDigit()));
        _log.info("Validate Total Qty Bs:" + qtyBs);
        Integer count = this.getMmMtlRcptSr1().getRowCount();
        String ret = "Y";
        if (count > qtyBs.intValue()) {
            return "I";
        } else {
            //RowQualifier rq=new RowQualifier(this.getMmMtlRcptSr2());
            RowSetIterator rsi = this.getMmMtlRcptSr2().createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row r = rsi.next();
                if (srRow != r) {
                    String srno = r.getAttribute("SrNo").toString();
                    if (srno.equals(SrNo) == true) {
                        ret = "N";
                    }
                }
            }
            rsi.closeRowSetIterator();
            //rq.setWhereClause("SrNo='"+SrNo+"'");
            //rq.setWhereClause("CldId='"+CldId+"' and SlocId="+slocId+" and OrgId='"+OrgId+"' and WhId='"+rcptRw.getAttribute("WhId").toString()+"' and DocId='"+itmRw.getAttribute("DocId").toString()+"' and DocIdSrc='"+itmRw.getAttribute("DocIdSrc").toString()+"' and DlvSchdlNo="+(Integer)itmRw.getAttribute("DlvSchdlNo")+" and ItmId='"+itmRw.getAttribute("ItmId").toString()+"' and ItmUom='"+itmRw.getAttribute("ItmUom").toString()+"' and SrNo='"+SrNo+"'");
            //  Row[] filRw= this.getMmMtlRcptSr1().getFilteredRows(rq);
            return ret;
            //System.out.println("fil -"+filRw.length+" rq.getExprStr()="+rq.getExprStr());
        }

    }

    /**
     * Container's getter for MmMtlRcptSr2.
     * @return MmMtlRcptSr2
     */
    public ViewObjectImpl getMmMtlRcptSr2() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptSr2");
    }

    /**
     * Container's getter for LovTransferOrd.
     * @return LovTransferOrd
     */
    public ViewObjectImpl getLovTransferOrd() {
        return (ViewObjectImpl) findViewObject("LovTransferOrd");
    }

    /**
     * Container's getter for MmMtlRcpt1.
     * @return MmMtlRcpt1
     */
    public ViewObjectImpl getMmMtlRcpt1() {
        return (ViewObjectImpl) findViewObject("MmMtlRcpt1");
    }

    /**
     * Container's getter for MmMtlRcptSrc1.
     * @return MmMtlRcptSrc1
     */
    public ViewObjectImpl getMmMtlRcptSrc1() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptSrc1");
    }

    /**
     *   Method used to update the stock tables.
     *   Called only after authorisation of receipt.
     *   @return 1 - Successful updation.
     * */
    public Integer updateStock(String cldId, Integer SlocId, String OrgId) {
        Row rcpt = this.getMmMtlRcpt().getCurrentRow();
        Integer usr = (Integer) rcpt.getAttribute("UsrIdCreate");
        Integer rcptTyp = (Integer) rcpt.getAttribute("RcptSrcType");
        Integer srcDocType = (Integer) rcpt.getAttribute("TransSrcDocType");
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer usrCurr = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        Integer ret = 0;
        if (rcptTyp.equals(RCPT_TYPE_OB)) {
            _log.info("OP BAL--" + cldId + "--" + SlocId + "--" + OrgId + "--" + rcpt.getAttribute("WhId").toString() +
                      "--" + rcpt.getAttribute("DocId").toString() + "--" + usr);
            ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_OP_STK_UPDT (?,?,?,?,?,?)", new Object[] {
                                                cldId, SlocId, OrgId, rcpt.getAttribute("WhId").toString(),
                                                rcpt.getAttribute("DocId").toString(), usr
            }));

            if (ret == 1) {
                rcpt.setAttribute("RcptStat", 383);
            } else {
                rcpt.setAttribute("RcptStat", 426);
            }
        } else if (rcptTyp.equals(334) || rcptTyp.equals(332)) {

            if (srcDocType.compareTo(new Integer(267)) == 0) {

                //                FUNCTION    MM_INS_GL_FG_RCPT(
                //                                                            P_SLOCID    number,
                //                                                            P_CLDID     VARCHAR2,
                //                                                            P_HO_ORGID   VARCHAR2,
                //                                                            P_ORGID     varchar2,
                //                                                            P_DOCID     varchar2, -- STOCK ADJUSTMENT
                //                                                            P_DOCDT     DATE,
                //                                                            P_USRID     NUMBER)


                _log.info("Sloc " + SlocId + " cldid " + cldId + " hoOrgId " + hoOrgId + " org id " + OrgId +
                          "doc Id  " + rcpt.getAttribute("DocId").toString() + " doc date " +
                          rcpt.getAttribute("DocDt") + " currenrt usr " + usrCurr);

                try{
                Integer retGl = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_GL_FG_RCPT (?,?,?,?,?,?,?)", new Object[] {
                                                              SlocId, cldId, hoOrgId, OrgId,
                                                              rcpt.getAttribute("DocId").toString(),
                                                              rcpt.getAttribute("DocDt"), usrCurr
                }));


                _log.info("retGl   " + retGl);
                }catch(Exception e) {
                    e.printStackTrace();
                }
            }
            
            
            if (srcDocType.compareTo(new Integer(399)) == 0) {
//
//                FUNCTION    MM_INS_GL_MRN_RCPT(
//                                                            P_SLOCID    number,
//                                                            P_CLDID     VARCHAR2,
//                                                            P_HO_ORGID   VARCHAR2,
//                                                            P_ORGID     varchar2, 
//                                                            P_DOCID     varchar2, -- FG -RCPT DOC ID
//                                                            P_DOCDT     DATE,
//                                                            P_USRID     NUMBER) 

                _log.info("MRN Sloc " + SlocId + " cldid " + cldId + " hoOrgId " + hoOrgId + " org id " + OrgId +
                          "doc Id  " + rcpt.getAttribute("DocId").toString() + " doc date " +
                          rcpt.getAttribute("DocDt") + " currenrt usr " + usrCurr);
                try{

                Integer retGlFormMrn = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_GL_MRN_RCPT (?,?,?,?,?,?,?)", new Object[] {
                                                              SlocId, cldId, hoOrgId, OrgId,
                                                              rcpt.getAttribute("DocId").toString(),
                                                              rcpt.getAttribute("DocDt"), usrCurr
                }));


                _log.info("retGl MRN   " + retGlFormMrn);
                }catch(Exception e){
                    e.printStackTrace();
                }
            }


            _log.info("REQ Area--" + cldId + "--" + SlocId + "--" + OrgId + "--" +
                      rcpt.getAttribute("WhId").toString() + "--" + rcpt.getAttribute("DocId").toString() + "--" +
                      usr); //MM_UPDT_STK_COPY CHANGE
            ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_STK (?,?,?,?,?,?)", new Object[] {
                                                cldId, SlocId, OrgId, rcpt.getAttribute("WhId").toString(),
                                                rcpt.getAttribute("DocId").toString(), "R"
            }));

            _log.info("RET VALUE stk update=" + ret);
            if (ret == 1) {
                rcpt.setAttribute("RcptStat", 383);
                if (srcDocType == 399) {
                    Integer i = callMrnClose(OrgId, SlocId, cldId);
                }
                this.getMmMtlRcptItm().executeQuery();
                this.getMmMtlRcptSrc().executeQuery();
                this.getMmMtlRcptItm1().executeQuery();
            } else {
                _log.info("Update Stock failed--" + ret);
                rcpt.setAttribute("RcptStat", 426);
            }

        } else {
            // ret =(Integer)(callStoredFunction(Types.INTEGER, "MM.MM_UPDT_STK (?,?,?,?,?,?)", new Object[] {cldId,SlocId,OrgId,rcpt.getAttribute("WhId").toString(),rcpt.getAttribute("DocId").toString(),"R"}));
        }

        _log.info("Stock Update Returned val:::::" + ret);
        /* if(ret==1){
            this.getDBTransaction().commit();
        } */
        return ret;
    }

    /**
     * Method to update stock for Receipts other than opening balance
     * */
    public Integer updateStockForOthers(String cldId, Integer SlocId, String OrgId) {
        Row rcpt = this.getMmMtlRcpt().getCurrentRow();
        Integer usr = (Integer) rcpt.getAttribute("UsrIdCreate");
        Integer rcptTyp = (Integer) rcpt.getAttribute("RcptSrcType");
        Integer ret = 0;
        if (rcptTyp.equals(RCPT_TYPE_OB)) {

            // ret=(Integer)(callStoredFunction(Types.INTEGER, "MM.MM_OP_STK_UPDT (?,?,?,?,?,?)", new Object[] {cldId,SlocId,OrgId,rcpt.getAttribute("WhId").toString(),rcpt.getAttribute("DocId").toString(),usr}));
        } else {
            _log.info("OTHERS STKup--" + cldId + "--" + SlocId + "--" + OrgId + "--" +
                      rcpt.getAttribute("WhId").toString() + "--" + rcpt.getAttribute("DocId").toString() + "--" +
                      usr); // MM_UPDT_STK_COPY CHANGE
            ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_STK (?,?,?,?,?,?)", new Object[] {
                                                cldId, SlocId, OrgId, rcpt.getAttribute("WhId").toString(),
                                                rcpt.getAttribute("DocId").toString(), "R"
            }));


        }
        _log.info("Stock Update Returned val:::::" + ret);
        /* if(ret==1){
            this.getDBTransaction().commit();
        } */
        return ret;
    }


    /**
     * Method used to update landed cost
     * */
    public Integer updateLndCost(String cldId, Integer SlocId, String OrgId) {
        Row rcpt = this.getMmMtlRcpt().getCurrentRow();
        Integer rcptTyp = (Integer) rcpt.getAttribute("RcptSrcType");
        Integer rcptDocType = (Integer) rcpt.getAttribute("TransSrcDocType");
        String pdocidsrc = null;
        String pitmid = null;
        String pitmuom = null;
        Integer ret = 0;
        Object retu = null;

        /*  if(SOURCE_DOC_TYPE_FGR.compareTo(rcptDocType)==0){
            this.getDBTransaction().postChanges();
        } */
        _log.info(rcptTyp + "  --------   " + rcptDocType);
        if (SOURCE_DOC_TYPE_FGR.compareTo(rcptDocType) == 0 || SOURCE_DOC_TYPE_PO.compareTo(rcptDocType) == 0 ||
            SOURCE_DOC_TYPE_PRODT.compareTo(rcptDocType) == 0 ||
            SOURCE_DOC_TYPE_IMPORT_PO.compareTo(rcptDocType) == 0 || SOURCE_DOC_TYPE_GPR.compareTo(rcptDocType) == 0 || SOURCE_DOC_TYPE_JITR.compareTo(rcptDocType) == 0) {
            this.getDBTransaction().postChanges();
        } else {
            ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_LND_COST(?,?,?,?,?,?,?)", new Object[] {
                                                cldId, SlocId, OrgId, rcpt.getAttribute("DocId").toString(), pdocidsrc,
                                                pitmid, pitmuom
            }));
        } //update LOT Price
        if (SOURCE_DOC_TYPE_GPR.compareTo(rcptDocType) == 0) {

        } else {
            retu = (Object) (callStoredFunction(Types.NUMERIC, "MM.MM_UPDT_LOT_PRICE(?,?,?,?,?)", new Object[] {
                                                cldId, SlocId, OrgId, rcpt.getAttribute("WhId").toString(),
                                                rcpt.getAttribute("DocId").toString()
            }));
        }
        System.out.println("Ret value by MM_UPDT_LOT_PRICE=" + ret);
        // _log.info(cldId+":"+SlocId+":"+OrgId+":"+rcpt.getAttribute("DocId").toString()+" :MM_UPDT_LND_COST ret val:"+ret);
        return ret;
    }

    /**
     *   Method to check for duplicate item entry in case of Opening Balance and Without PO.
     *   Case 1: Without PO : check for duplicates in the same set of documents for the recpt no.
     *   Case 2: Opening Balance : Get for the min fy.Opening balance updated only for the first FY.
     *                             Check if item is duplicate among that set of documents/rcpts in same FY.
     *   @return - Y : if duplicate(InValid)
     *             D : Duplicate(InValid-OB)
     *             N : Valid
     * */
    public String checkItmDuplicate(String itmNm, String uomId, String paramOrgId, String paramCldId) {

        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Row srcRw = this.getMmMtlRcptSrc().getCurrentRow();
        Integer type = Integer.parseInt(this.getMmMtlRcpt().getCurrentRow().getAttribute("RcptSrcType").toString());
        String whid = this.getMmMtlRcpt().getCurrentRow().getAttribute("WhId").toString();
        String chk = "N";
        _log.info("Rcpt TYpe:" + type);
        if (type.equals(RCPT_TYPE_OB)) {
            _log.info("Opening Bal itm Dupli check");
            this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                             resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
            this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                             resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
            this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                             resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
            this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", null);
            this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", itmNm);
            this.getLovItmForDisp().executeQuery();
            Row[] itms = this.getLovItmForDisp().getFilteredRows("ItmDesc", itmNm);
            // Row[] itms=this.getLovItmId().getFilteredRows("ItmDesc", itmNm);   // change BL for tunning 02/09/2014
            if (itms.length > 0) {
                _log.info(itmNm + "           itms[0].getAttribute   " + itms[0].getAttribute("ItmId"));
                RowQualifier rq = new RowQualifier(this.getViewOrgFy());
                rq.setWhereClause("OrgId='" + paramOrgId + "' and CldId='" + paramCldId + "'");
                Row[] fyRw = this.getViewOrgFy().getFilteredRows(rq);

                Integer minFy = 20; //max
                for (Row fr : fyRw) {
                    Integer fy = Integer.parseInt(fr.getAttribute("OrgFyId").toString());
                    if (fy < minFy) {
                        minFy = fy;
                    }
                }
                _log.info("Min Fy--" + minFy);

                RowQualifier rqRcpt = new RowQualifier(this.getMmMtlRcpt1());
                // rqRcpt.setWhereClause("RcptSrcType ="+396+" and FyId="+minFy+"");
                //  rqRcpt.setWhereClause("OrgId ='"+paramOrgId+"' and CldId ='"+paramCldId+"' and SlocId ="+paramSlocId+" and RcptSrcType ="+396+" and FyId="+minFy+"");
                //  rqRcpt.setWhereClause("OrgId ='"+paramOrgId+"' and CldId ='"+paramCldId+"' and SlocId ="+paramSlocId+" and FyId="+minFy+"");
                rqRcpt.setWhereClause("OrgId ='" + paramOrgId + "' and CldId ='" + paramCldId + "' and SlocId =" +
                                      paramSlocId + " and FyId=" + minFy + " and WhId ='" + whid + "' ");
                Row[] rcptRw = this.getMmMtlRcpt1().getFilteredRows(rqRcpt);
                _log.info("No. of filter rows in rcpt1=" + rcptRw.length);
                for (Row rcp : rcptRw) {
                    String docId = rcp.getAttribute("DocId").toString();
                    RowQualifier rqr = new RowQualifier(this.getMmMtlRcptItm2());
                    rqr.setWhereClause("OrgId ='" + paramOrgId + "' and CldId ='" + paramCldId + "' and SlocId =" +
                                       paramSlocId + " and DocId='" + docId + "' and ItmId='" +
                                       itms[0].getAttribute("ItmId") + "'");
                    //    Row[] itmrw=this.getMmMtlRcptItm2().getFilteredRows("DocId", docId);
                    Row[] itmr = this.getMmMtlRcptItm2().getFilteredRows(rqr);
                    _log.info(rqr.getExprStr() + "    No. of dupli item=" + itmr.length);
                    if (itmr.length > 0) {
                        chk = "Y";
                    }
                }
                _log.info("CHK=" + chk);
                if (chk.equals("N")) {
                    if (srcRw != null) {

                        String docIdsrc = srcRw.getAttribute("DocIdSrc").toString();
                        RowQualifier rq1 = new RowQualifier(this.getMmMtlRcptItm());

                        // Row[] itms=this.getLovItmId().getFilteredRows("ItmDesc", itmNm);
                        rq1.setWhereClause("DocIdSrc='" + docIdsrc + "' and DlvSchdlNo=0 and ItmId='" +
                                           itms[0].getAttribute("ItmId") + "' and  ItmUom='" + uomId + "'");
                        Row[] filRw = this.getMmMtlRcptItm().getFilteredRows(rq1);
                        _log.info("Query for RcptItm=" + rq1.getExprStr());
                        _log.info("Length for filter row RcptItm=" + filRw.length);
                        if (filRw.length > 0) {
                            for (Row r : filRw) {
                                if (r.equals(getMmMtlRcptItm().getCurrentRow())) {
                                    _log.info("This is current row");
                                } else {
                                    _log.info(" This is not current row  ");
                                    return "D";
                                }
                            }
                            return "N";
                        } else
                            return "N";

                    }
                }


                return chk;
            } else {
                return "N";
            }
        } else {
            _log.info("Others itm Dup check");
            if (srcRw != null) {

                String docIdsrc = srcRw.getAttribute("DocIdSrc").toString();
                RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm());
                this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", null);
                this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", itmNm);
                this.getLovItmForDisp().executeQuery();
                Row[] itms = this.getLovItmForDisp().getFilteredRows("ItmDesc", itmNm);

                // Row[] itms=this.getLovItmId().getFilteredRows("ItmDesc", itmNm);  // change BL for tunning 02/09/2014
                rq.setWhereClause("DocIdSrc='" + docIdsrc + "' and DlvSchdlNo=0 and ItmId='" +
                                  itms[0].getAttribute("ItmId") + "' and  ItmUom='" + uomId + "'");
                Row[] filRw = this.getMmMtlRcptItm().getFilteredRows(rq);
                if (filRw.length > 0) {
                    return "Y";
                } else {
                    return "N";
                }
            } else {
                return "N";
            }
        }
    }


    /**
     *  Method  called after new row is created for Lot Table
     *  1. Generates Lot No in case required as defined in ORG$MM$PRF table
     *  2. Set Lot price in case of opening balance.
     *  3.todo-- same item in a receipt goes to same lot no.
     * */
    public void setLotDetails(String OrgId) {
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        Row[] prf = this.getViewOrgMMPrf().getFilteredRows("OrgId", OrgId);
        Row lotRw = this.getMmMtlRcptLot1().getCurrentRow();
        Row curRcpt = this.getMmMtlRcpt().getCurrentRow();

        String CldId = curRcpt.getAttribute("CldId").toString();
        Integer rcptDocType = (Integer) curRcpt.getAttribute("TransSrcDocType");
        Integer SlocId = (Integer) curRcpt.getAttribute("SlocId");
        String WhId = curRcpt.getAttribute("WhId").toString();
        Row srcRw = this.getMmMtlRcptSrc().getCurrentRow();
        _log.info("setlotdetails--" + prf.length + "  org--" + OrgId + " erc--" +
                  this.getViewOrgMMPrf().getEstimatedRowCount());

        if (prf.length > 0) {
            String chk = prf[0].getAttribute("AutoLotGen").toString();
            _log.info("IS LOT ID TO BE GENERATED ?      " + chk);
            if ("Y".equals(chk)) {

                Object obj = callStoredFunction(Types.VARCHAR, "MM.mm_gen_lot(?,?,?,?,?)", new Object[] {
                                                CldId, SlocId, OrgId, WhId, lotRw.getAttribute("ItmId").toString()
                });
                _log.info("LOT_ID generated:" + obj);
                if (obj != null) {
                    lotRw.setAttribute("LotId", obj.toString());
                }

            }
        }

        //set Lot Price and ItmUomBs
        this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", lotRw.getAttribute("ItmId").toString());
        this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
        this.getLovItmForDisp().executeQuery();
        RowQualifier rq = new RowQualifier(this.getLovItmForDisp());
        rq.setWhereClause("ItmId='" + lotRw.getAttribute("ItmId").toString() + "' and CldId='" +
                          lotRw.getAttribute("CldId").toString() + "' and SlocId=" + lotRw.getAttribute("SlocId") +
                          " and OrgId='" + lotRw.getAttribute("OrgId").toString() + "'");
        Row[] itmRw = this.getLovItmForDisp().getFilteredRows(rq);
        /*  RowQualifier rq=new RowQualifier(this.getLovItmId());
        rq.setWhereClause("ItmId='"+lotRw.getAttribute("ItmId").toString()+"' and CldId='"+lotRw.getAttribute("CldId").toString()+"' and SlocId="+lotRw.getAttribute("SlocId")+" and OrgId='"+lotRw.getAttribute("OrgId").toString()+"'");
        Row[] itmRw=this.getLovItmId().getFilteredRows(rq); */ // change BL for tunning 02/09/2014

        if (itmRw.length > 0) {
            Number price = (Number) itmRw[0].getAttribute("PriceBasic");
            lotRw.setAttribute("LotPrice", new Number(0));
            //  lotRw.setAttribute("LotPrice", price);
            lotRw.setAttribute("ItmUomBs", itmRw[0].getAttribute("UomBasic"));
        }
        lotRw.setAttribute("DocDtSrc", srcRw.getAttribute("DocDtSrc"));

        //check first --TODO--25/12
        RowQualifier rowq = new RowQualifier(this.getMmMtlRcptLot2());
        // Commented by Nitesh Garg
        // rowq.setWhereClause("CldId='"+CldId+"' and SlocId="+SlocId+" and OrgId='"+OrgId+"' and WhId='"+WhId+"' and DocId='"+this.getMmMtlRcptItm1().getCurrentRow().getAttribute("DocId").toString()+"' and DocIdSrc='"+this.getMmMtlRcptItm1().getCurrentRow().getAttribute("DocIdSrc").toString()+"' and DlvSchdlNo="+this.getMmMtlRcptItm1().getCurrentRow().getAttribute("DlvSchdlNo")+" and ItmId='"+this.getMmMtlRcptItm1().getCurrentRow().getAttribute("ItmId").toString()+"'");
        // added by Nitesh Garg
        rowq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and WhId='" +
                            WhId + "' and DocId='" +
                            this.getMmMtlRcptItm1().getCurrentRow().getAttribute("DocId").toString() +
                            "' and DlvSchdlNo=" + this.getMmMtlRcptItm1().getCurrentRow().getAttribute("DlvSchdlNo") +
                            " and ItmId='" + this.getMmMtlRcptItm1().getCurrentRow().getAttribute("ItmId").toString() +
                            "'");
        Row[] filteredRows = this.getMmMtlRcptLot2().getFilteredRows(rowq);
        Object obj = null;
        if (filteredRows.length > 0) {
            obj = filteredRows[0].getAttribute("LotId");
        }
        if (obj != null) {
            lotRw.setAttribute("LotId", obj.toString());
        }
        /**
        * added by Nitesh Garg to set Lot Quantity
        * */
        Number frcprQtyBs =
            (Number) ((Number) this.getMmMtlRcptItm1().getCurrentRow().getAttribute("FinalRcptQtyBs")).round(getGlblRoundQtyDigit());
        System.out.println("Lot Quantity=" + frcprQtyBs);
        _log.info("Lot Quantity=" + frcprQtyBs);
        lotRw.setAttribute("LotQty", frcprQtyBs);
        Number fctr = new Number(0);
        if (this.getMmMtlRcptItm1().getCurrentRow().getAttribute("FinalRcptQtyBs") != null)
            fctr =
                (Number) ((Number) this.getMmMtlRcptItm1().getCurrentRow().getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        System.out.println("UOM Conv Fctr=" + fctr);
        _log.info("UOM Conv Fctr=" + fctr);
        Number rejectQty = new Number(0);
        Number rejectQtyQc = new Number(0);
        Number rejectQtyBs = new Number(0);
        Number rejectQtyBsQc = new Number(0);
        Number frcprQtySp =
            (Number) ((Number) this.getMmMtlRcptItm1().getCurrentRow().getAttribute("FinalRcptQty")).round(getGlblRoundQtyDigit());
        if (this.getMmMtlRcptItm1().getCurrentRow().getAttribute("RejQty") != null) {
            rejectQty =
                (Number) ((Number) this.getMmMtlRcptItm1().getCurrentRow().getAttribute("RejQty")).round(getGlblRoundQtyDigit());
        }
        if (this.getMmMtlRcptItm1().getCurrentRow().getAttribute("QcRejQty") != null) {
            rejectQtyQc =
                (Number) ((Number) this.getMmMtlRcptItm1().getCurrentRow().getAttribute("QcRejQty")).round(getGlblRoundQtyDigit());
        }
        if (this.getMmMtlRcptItm1().getCurrentRow().getAttribute("RejQtyBs") != null) {
            rejectQtyBs =
                (Number) ((Number) this.getMmMtlRcptItm1().getCurrentRow().getAttribute("RejQtyBs")).round(getGlblRoundQtyDigit());
        }
        if (this.getMmMtlRcptItm1().getCurrentRow().getAttribute("QcRejQtyBs") != null) {
            rejectQtyBsQc =
                (Number) ((Number) this.getMmMtlRcptItm1().getCurrentRow().getAttribute("QcRejQtyBs")).round(getGlblRoundQtyDigit());
        }
        System.out.println(frcprQtyBs + " arg0 " + frcprQtySp);
        _log.info(frcprQtyBs + " arg0 " + frcprQtySp);
        lotRw.setAttribute("LotQtyBs", frcprQtyBs);
        lotRw.setAttribute("LotQtySp", frcprQtySp);
        _log.info(rejectQtyBs.add(rejectQtyBsQc) + " argfhfbvhjds0 " + rejectQty.add(rejectQtyQc));
        if (SOURCE_DOC_TYPE_IMPORT_PO.compareTo(rcptDocType) == 0) {
            lotRw.setAttribute("RejQtySp", (Number) (rejectQty.add(rejectQtyQc)).round(getGlblRoundQtyDigit()));
            lotRw.setAttribute("RejQtyBs", (Number) (rejectQtyBs.add(rejectQtyBsQc)).round(getGlblRoundQtyDigit()));
        }
        lotRw.setAttribute("MfgDt", this.getMmMtlRcptItm1().getCurrentRow().getAttribute("MfgDt"));
        lotRw.setAttribute("ExpiryDt", this.getMmMtlRcptItm1().getCurrentRow().getAttribute("ExpiryDt"));
    }


    public String chkRcvdQty() {
        Number frcprQtyBs = (Number) this.getMmMtlRcptItm1().getCurrentRow().getAttribute("FinalRcptQtyBs");
        System.out.println("Lot Quantity=" + frcprQtyBs);
        if (frcprQtyBs.compareTo(new Number(0)) > 0)
            return "Y";
        else
            return "N";
    }

    /**
     * Container's getter for ViewOrgFy.
     * @return ViewOrgFy
     */
    public ViewObjectImpl getViewOrgFy() {
        return (ViewObjectImpl) findViewObject("ViewOrgFy");
    }

    /**
     * Container's getter for MmMtlRcptItm2.
     * @return MmMtlRcptItm2
     */
    public MmMtlRcptItmVOImpl getMmMtlRcptItm2() {
        return (MmMtlRcptItmVOImpl) findViewObject("MmMtlRcptItm2");
    }

    /**
     * Container's getter for LovSearchDual1.
     * @return LovSearchDual1
     */
    public ViewObjectImpl getLovSearchDual1() {
        return (ViewObjectImpl) findViewObject("LovSearchDual1");
    }

    public void rcptSearch() {
        ViewObjectImpl srchDual = this.getLovSearchDual1();
        ViewObjectImpl rcptVo = this.getViewRcptSrch();
        Row curSrc = srchDual.getCurrentRow();
        rcptVo.setNamedWhereClauseParam("bindOrgId", curSrc.getAttribute("TransOrgId"));
        rcptVo.setNamedWhereClauseParam("bindCldId", curSrc.getAttribute("TransCldId"));
        rcptVo.setNamedWhereClauseParam("bindSlocId", curSrc.getAttribute("TransSlocId"));
        rcptVo.setNamedWhereClauseParam("bindWhId", curSrc.getAttribute("TransWhId"));
        rcptVo.setNamedWhereClauseParam("bindRcptNo", curSrc.getAttribute("TransRcptNo"));
        rcptVo.setNamedWhereClauseParam("bindDtFrm", curSrc.getAttribute("TransRcptDtFrm"));
        rcptVo.setNamedWhereClauseParam("bindDtTo", curSrc.getAttribute("TransRcptDtTo"));
        rcptVo.setNamedWhereClauseParam("bindFyId", curSrc.getAttribute("TransFyId"));
        rcptVo.setNamedWhereClauseParam("bindEoNm", curSrc.getAttribute("TransEoNm"));
        rcptVo.setNamedWhereClauseParam("bindRcptStg", curSrc.getAttribute("TransRcptStg"));
        rcptVo.setNamedWhereClauseParam("bindRcptStat", curSrc.getAttribute("TransRcptStat"));
        rcptVo.setNamedWhereClauseParam("bindDocIdSrc", curSrc.getAttribute("TransDocIdSrc"));
        rcptVo.setNamedWhereClauseParam("bindRcptDocType", curSrc.getAttribute("TransDocTypeSrc"));

        rcptVo.executeQuery();
    }

    public void rcptResetSearch() {
        ViewObjectImpl srchDual = this.getLovSearchDual1();
        ViewObjectImpl rcptVo = this.getViewRcptSrch();
        Row curSrc = srchDual.getCurrentRow();
        rcptVo.setNamedWhereClauseParam("bindOrgId", curSrc.getAttribute("TransOrgId"));
        rcptVo.setNamedWhereClauseParam("bindCldId", "-1");
        rcptVo.setNamedWhereClauseParam("bindSlocId", curSrc.getAttribute("TransSlocId"));
        rcptVo.setNamedWhereClauseParam("bindWhId", null);
        rcptVo.setNamedWhereClauseParam("bindRcptNo", null);
        rcptVo.setNamedWhereClauseParam("bindDtFrm", null);
        rcptVo.setNamedWhereClauseParam("bindDtTo", null);
        rcptVo.setNamedWhereClauseParam("bindFyId", curSrc.getAttribute("TransFyId"));
        rcptVo.setNamedWhereClauseParam("bindEoNm", null);
        rcptVo.setNamedWhereClauseParam("bindRcptStg", null);
        rcptVo.setNamedWhereClauseParam("bindRcptStat", null);
        rcptVo.setNamedWhereClauseParam("bindDocIdSrc", null);
        rcptVo.setNamedWhereClauseParam("bindRcptDocType", null);
        rcptVo.executeQuery();
    }

    public String checkDlvNoteQty(Number noteQty) {
        Row r = this.getMmMtlRcptItm().getCurrentRow();
        Number pendQty = (Number) r.getAttribute("PendQty");
        if (noteQty.compareTo(pendQty) == 1) {
            return "Y";
        } else {
            return "N";
        }
    }

    public HashSet checkForRcvdQtyPresent(String CldId, Integer slocId, String OrgId, String whId) {
        Row curRcpt = this.getMmMtlRcpt().getCurrentRow();

        Integer docType = (Integer) curRcpt.getAttribute("TransSrcDocType");

        if (whId == null) {
            whId = "0";
        }

        String docId = curRcpt.getAttribute("DocId").toString();

        RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm2());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId + "' and WhId='" +
                          whId + "' and DocId='" + docId + "'");
        Row[] filRw = this.getMmMtlRcptItm2().getFilteredRows(rq);
        Number zero = new Number(0);
        HashSet<String> h = new HashSet<String>();
        for (Row rw : filRw) {
            Number rcptQty = (Number) rw.getAttribute("RcptQty");
            Number rejQty = (Number) rw.getAttribute("RejQty");
            Number rwkQty = (Number) rw.getAttribute("RwkQty");
            if (rcptQty.compareTo(zero) == 0 && rejQty.compareTo(zero) == 0 && rwkQty.compareTo(zero) == 0) {

                if (docType.compareTo(SOURCE_DOC_TYPE_PO) == 0 || docType.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0) {
                    //Row[] r = this.getLovPoNo().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());   // 17/04/2015
                    Row[] r = this.getLovPurOrder().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    if (r.length > 0) {
                        h.add(r[0].getAttribute("AuthPoNo").toString());
                    }
                } else if (docType.compareTo(SOURCE_DOC_TYPE_TO) == 0) {
                    Row[] r = this.getLovTransferOrd().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    if (r.length > 0) {
                        h.add(r[0].getAttribute("TrfNo").toString());
                    }
                } else if (docType.compareTo(new Integer(SOURCE_DOC_TYPE_WOUT_PO)) == 0) {
                    h.add(rw.getAttribute("DocIdSrc").toString());
                } else if (docType.compareTo(SOURCE_DOC_TYPE_CPO) == 0) {
                    Row[] r = this.getLovCpoNoVO().getFilteredRows("DocId", rw.getAttribute("DocIdSrc").toString());
                    if (r.length > 0) {
                        h.add(r[0].getAttribute("CpoNo").toString());
                    }
                }

                //h.add(rw.getAttribute("DocIdSrc").toString());
            }
        }

        _log.info("HashSet--" + h);
        return h;
    }

    public void deleteItemsNonRecvd(String CldId, Integer slocId, String OrgId, String whId) {
        Row curRcpt = this.getMmMtlRcpt().getCurrentRow();
        String docId = curRcpt.getAttribute("DocId").toString();
        RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm2());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId + "' and WhId='" +
                          whId + "' and DocId='" + docId + "'");
        Row[] filRw = this.getMmMtlRcptItm2().getFilteredRows(rq);
        Number zero = new Number(0);
        for (Row rw : filRw) {
            Number rcptQty = (Number) rw.getAttribute("RcptQty");
            if (rcptQty == null) {
                rcptQty = zero;
            }
            Number rejQty = (Number) rw.getAttribute("RejQty");
            if (rejQty == null) {
                rejQty = zero;
            }
            Number rwkQty = (Number) rw.getAttribute("RwkQty");
            if (rwkQty == null) {
                rwkQty = zero;
            }
            if (rcptQty.compareTo(zero) == 0 && rejQty.compareTo(zero) == 0 && rwkQty.compareTo(zero) == 0) {
                rw.remove();
                _log.info("Row Deleted");
            }
        }

        this.getMmMtlRcptItm2().executeQuery();
        this.getMmMtlRcptItm().executeQuery();
        Row[] srcRw = this.getMmMtlRcptSrc().getAllRowsInRange();
        for (Row srw : srcRw) {
            RowQualifier rrq = new RowQualifier(this.getMmMtlRcptItm2());
            rrq.setWhereClause("CldId='" + CldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId + "' and WhId='" +
                               whId + "' and DocId='" + docId + "' and DocIdSrc='" +
                               srw.getAttribute("DocIdSrc").toString() + "'");
            Row[] itmRw = this.getMmMtlRcptItm2().getFilteredRows(rrq);
            if (itmRw.length == 0) {
                srw.remove();
            }
        }
        this.getMmMtlRcptSrc().executeQuery();
    }

    /*  public void checkQcReqd(){
        Row[] rr=this.getMmMtlRcptItm1().getFilteredRows("QcRqd", "Y");
        for(Row itmr:rr){
            //this.getmm
        }
    } */

    /**
     *   Method used to set the receipt status after workflow entry
     *   @param stat : Status Id
     *                 382-Forward for approval
     *                 383-Stock Updated
     * */
    public void setRcptStatus(Integer stat) {
        Row currRw = this.getMmMtlRcpt().getCurrentRow();
        currRw.setAttribute("RcptStat", stat);

    }

    /**
     * Check if any document has been added to this Receipt
     * @return 'Y'-Valid
     *         'N'-Invalid(Empty)
     * */
    public String isDocumentPresent() {
        Integer count = this.getMmMtlRcptSrc().getRowCount();
        if (count.compareTo(0) == 1) {
            return "Y";
        } else {
            return "N";
        }
    }


    public Integer pendingUsrCheck(Integer SlocId, String CldId, String OrgId, Integer RcptDocNo) {
        Row currRcpt = this.getMmMtlRcpt().getCurrentRow();
        String docIdTxn = currRcpt.getAttribute("DocId").toString();
        Integer docType = (Integer) currRcpt.getAttribute("RcptSrcType");
        System.out.println("DOCIDTXN--" + docIdTxn);
        Object obj = callStoredFunction(Types.INTEGER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, RcptDocNo, docIdTxn, docType
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        /*   Integer.parseInt(callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,
                                                                                                                   CldId,
                                                                                                                   OrgId,
                                                                                                                   PoDocNo,
                                                                                                                   docIdTxn }).toString()); */
        System.out.println("User id pending in impl--" + usrId);
        return usrId;

    }

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {
        try {
            Row currRcpt = this.getMmMtlRcpt().getCurrentRow();

            Integer docType = (Integer) currRcpt.getAttribute("RcptSrcType");
            _log.info("Param pass in WF are, sloc=" + sloc_id + " cld=" + cld_id + " org=" + org_id + " doc=" + doc_no +
                      " type=" + docType);
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            sloc_id, cld_id, org_id, doc_no, docType
            });
            System.out.println("WFNO in AMimpl:" + obj);

            return obj.toString();
        } catch (Exception e) {
            System.out.println("GETWFNO--" + e);
            return "0";
        }

    }

    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum,
                             String rcptDocId) {
        Row currRcpt = this.getMmMtlRcpt().getCurrentRow();

        Integer docType = (Integer) currRcpt.getAttribute("RcptSrcType");

        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, rcptDocId, docType
    }).toString());


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer rcpt_doc_no, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post) {
        Row currRcpt = this.getMmMtlRcpt().getCurrentRow();

        Integer docType = (Integer) currRcpt.getAttribute("RcptSrcType");

        String rcptDocId = currRcpt.getAttribute("DocId").toString();

        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, rcpt_doc_no, docType, WfNum, rcptDocId,
                                                   usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());

    }


    public boolean isFYOpenForCurrentDate(String cldId, String orgId, Timestamp dt) {
        StringBuffer ck = new StringBuffer("A");
        Integer fyId = 0;
        try {
            //FUNCTION GET_ORG_FY_ID(P_CLDID VARCHAR2, P_ORG_ID VARCHAR2, P_TXN_DT DATE)
            fyId = (Integer) callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID(?,?,?)", new Object[] {
                                                cldId, orgId, dt });
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'APP.GET_ORG_FY_ID' !");
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }

        if (fyId == -1) {
            return false;
        } else {

            try {
                //FUNCTION CHK_ORG_FY_STAT(P_ORG_ID VARCHAR2, P_FY_ID NUMBER, P_FY_TYP VARCHAR2 DEFAULT 'FY',P_BC_FLG VARCHAR2 DEFAULT 'Y')
                ck = new StringBuffer(callStoredFunction(Types.VARCHAR, "APP.PKG_APP.CHK_ORG_FY_STAT(?,?,?,?)", new Object[] {
                                                         orgId, fyId, "FY", "Y"
                    }).toString());

            } catch (Exception e) {
                FacesMessage message =
                    new FacesMessage("There have been an error in calling function 'APP.CHK_ORG_FY_STAT' !");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                e.printStackTrace();
            }

        }
        // System.out.println("FY IS "+fyId+" FY OPEN/CLOSE CHECK :"+ck);
        if (ck.toString().equals("N")) {
            return true;
        } else {
            return false;
        }

    }

    /*   public void validateAllItm(){

        RowSetIterator rsi=this.getMmMtlRcptSrc().createRowSetIterator(null);
        while(rsi.hasNext()){

        }

    } */

    public void setRcptAuthStat(String stat) {
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        rcptRw.setAttribute("AuthStat", stat);
        Integer srcType = Integer.parseInt(rcptRw.getAttribute("RcptSrcType").toString());
        _log.info(stat + "--SRCTYPE during stk update--" + srcType);
        Integer rcptDocType = (Integer) rcptRw.getAttribute("TransSrcDocType");
        //Code Change by Nitesh Garg
        if (stat.equals("Y") && !srcType.equals(337) && !srcType.equals(338) && !srcType.equals(331) &&
            !srcType.equals(458) && !srcType.equals(335)) {
            rcptRw.setAttribute("RcptStat", 383);

        } else if (stat.equals("Y") &&
                   (srcType.equals(337) || srcType.equals(338) || srcType.equals(331) || srcType.equals(458) ||
                    srcType.equals(335))) {
            //check if any item recieved or not.. if received then Set Stauts="Pending for Stock Update" else set "Stock Updated".
            String flg = "N";
            String docId = rcptRw.getAttribute("DocId").toString();
            this.getMmMtlRcptItm1().executeQuery();
            Row[] filRw = this.getMmMtlRcptItm1().getFilteredRows("DocId", docId);
            _log.info("No of Rows in Item=" + filRw.length);
            Number zero = new Number(0);
            for (Row rw : filRw) {
                Number rcptQty = (Number) rw.getAttribute("RcptQtyBs");
                if (rcptQty.compareTo(zero) != 0) {
                    flg = "Y";
                    break;
                }
            }
            if (flg.equals("Y"))
                rcptRw.setAttribute("RcptStat", 426);
            else
                rcptRw.setAttribute("RcptStat", 383);
            _log.info("RcptStatFlg=" + flg);
            //Generate RMDA for PO
            if (srcType.equals(331) || srcType.equals(458)) {

                String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
                String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
                Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                if (srcType.equals(458) || SOURCE_DOC_TYPE_PO.compareTo(rcptDocType) == 0) {
                    generateRmda(paramOrgId, paramSlocId, paramCldId);
                    this.getMMRmda1().executeQuery();
                    this.getMMRmdaItm1().executeQuery();
                }

            }

            if (stat.equals("Y") && srcType.equals(331)) {
                String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
                String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
                Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                Integer paramUsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
                try {
                    String calR = populateCalculations(paramCldId, paramSlocId, paramOrgId, paramUsrId);
                    _log.info("ret calc " + calR);
                } catch (Exception e) {
                    e.printStackTrace();
                }

            }

            if (srcType.equals(337) || srcType.equals(338)) {
                _log.info("Call tranfer to for sr no");
                try {
                    String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
                    String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
                    Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                    ///_log.info("   arg0    "+rcptRw.getAttribute("DocId"));
                    Integer retV = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_SR_FRM_ISSUE (?,?,?,?,?)", new Object[] {
                                                                 paramCldId, paramSlocId, paramOrgId,
                                                                 rcptRw.getAttribute("WhId"),
                                                                 rcptRw.getAttribute("DocId")
                    }));
                    _log.info(retV + "   arg0    " + rcptRw.getAttribute("DocId"));

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }

            if (srcType.equals(458)) {
                populateDateTaxAndOc();
            }


        }


    }

    public String getUserName(Integer usrId) {
        RowQualifier rq = new RowQualifier(this.getLovUsrId());
        rq.setWhereClause("UsrId =" + usrId);
        Row[] usrRows = this.getLovUsrId().getFilteredRows(rq);
        // Row[] usrRows = this.getLovUsrId().getFilteredRows("UsrId", usrId);
        //RowQualifier rq = new

        StringBuffer usrName = new StringBuffer("");
        _log.info(usrRows.length + " arg0   " + usrId + " query  " + rq.getExprStr());
        if (usrRows.length > 0) {
            _log.info("arg0 usr name  " + usrRows[0].getAttribute("UsrName"));
            usrName = new StringBuffer(usrRows[0].getAttribute("UsrName").toString());
            usrName = new StringBuffer("[").append(usrName).append("]");
        } else {
            _log.info("else partb ");
            usrName = new StringBuffer("[Anonymous]");
        }
        return usrName.toString();
    }

    /**
     * Container's getter for LovUsrId.
     * @return LovUsrId
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl) findViewObject("LovUsrId");
    }

    /**
     * Check if all serials are entered for all serialized items.. in save and forword action.
     * @return 'N':  valid
     *         'Y':  invalid
     * */
    public String checkSerialEntered(String CldId, Integer SlocId, String OrgId) {
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        String docId = rcptRw.getAttribute("DocId").toString();
        Integer doctype = Integer.parseInt(rcptRw.getAttribute("TransSrcDocType").toString());
        Integer rcptStg = Integer.parseInt(rcptRw.getAttribute("RcptStg").toString());


        _log.info("Check serial entered");
        Number zero = new Number(0);
        String chkMsgFlg = "N";
        _log.info("DocType=" + doctype + " and cpo=" + SOURCE_DOC_TYPE_CPO);
        if ((doctype.compareTo(SOURCE_DOC_TYPE_PO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0 ||
             doctype.compareTo(SOURCE_DOC_TYPE_WOUT_PO) == 0 && checkForPOPresent().equals("Y")) ||
            doctype.compareTo(SOURCE_DOC_TYPE_CPO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_CPO) == 0) {
            _log.info("Supplier CPO");
            StringBuilder msg = new StringBuilder("<html><body>");
            msg.append("<b>Serial No.'s don't match the quantities allotted for the following Documents: </b>");
            //     ArrayList docNoArr = new ArrayList();
            this.getMmMtlRcptItm2().executeQuery();

            RowSetIterator rsi = this.getMmMtlRcptSrc().createRowSetIterator(null);
            while (rsi.hasNext()) {
                _log.info("Inside rcptSrc Itr");
                Row srcRw = rsi.next();
                ArrayList<String> itmArray = new ArrayList<String>();
                _log.info("docIdSrcDisp" + srcRw.getAttribute("DocIdSrcDisp"));
                String docIdDisp = srcRw.getAttribute("DocIdSrcDisp").toString();
                _log.info("DocIdSrcDisp=" + docIdDisp);
                RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm2());
                _log.info("docIdSrc=" + srcRw.getAttribute("DocIdSrc"));
                _log.info("Dlvry SchdlNo=" + srcRw.getAttribute("DlvSchdlNo"));
                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                  "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                  "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() + "' and DlvSchdlNo=" +
                                  (Integer) srcRw.getAttribute("DlvSchdlNo"));
                _log.info("Expr=" + rq.getExprStr());
                Row[] itmrw = this.getMmMtlRcptItm2().getFilteredRows(rq);
                _log.info("2");
                for (Row rw : itmrw) {

                    Number finRcptQty = zero;
                    if ((Number) rw.getAttribute("FinalRcptQty") != null) {
                        finRcptQty = (Number) ((Number) rw.getAttribute("FinalRcptQty")).round(getGlblRoundQtyDigit());
                    }

                    Number rejQtyBs = zero;
                    if ((Number) rw.getAttribute("RejQtyBs") != null) {
                        rejQtyBs = (Number) ((Number) rw.getAttribute("RejQtyBs")).round(getGlblRoundQtyDigit());
                    }

                    // add qc reject quantity in Sr check 4/2/15 BL


                    Number rejQtyBsQc = zero;
                    if ((Number) rw.getAttribute("QcRejQtyBs") != null) {
                        rejQtyBsQc = (Number) ((Number) rw.getAttribute("QcRejQtyBs")).round(getGlblRoundQtyDigit());
                    }

                    // add qc rework quantity in Sr check 4/2/15 BL
                    Number rwkQtyBsQc = zero;
                    if ((Number) rw.getAttribute("QcRwkQtyBs") != null) {
                        rwkQtyBsQc = (Number) ((Number) rw.getAttribute("QcRwkQtyBs")).round(getGlblRoundQtyDigit());
                    }

                    Number rwkQtyBs = zero;
                    if ((Number) rw.getAttribute("RwkQtyBs") != null) {
                        rwkQtyBs = (Number) ((Number) rw.getAttribute("RwkQtyBs")).round(getGlblRoundQtyDigit());
                    }
                    Number fctr = zero;
                    if ((Number) rw.getAttribute("UomConvFctr") != null) {
                        fctr = (Number) ((Number) rw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
                    }

                    String itmid = rw.getAttribute("ItmId").toString();
                    _log.info("Final Rcpt Qty:" + finRcptQty + " -- UOM CONV FCTR:" + fctr);

                    String itmId = rw.getAttribute("ItmId").toString();
                    String itmUom = rw.getAttribute("ItmUom").toString();
                    String serialized = rw.getAttribute("TransIsItemSerial").toString();
                    String qcDoneFlg = rw.getAttribute("QcDoneFlg").toString();
                    ;

                    if ("Y".equals(serialized)) {

                        RowQualifier rqSr = new RowQualifier(this.getMmMtlRcptSrno());
                        rqSr.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                            "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                            "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                            "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                            " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "' and StoreRslt='A'");
                        Row[] srnoRw = this.getMmMtlRcptSrno().getFilteredRows(rqSr);
                        _log.info("srnoRw ::  " + rqSr.getExprStr());
                        rqSr.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                            "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                            "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                            "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                            " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "' and StoreRslt='R'");
                        Row[] rejSrnoRw = this.getMmMtlRcptSrno().getFilteredRows(rqSr);
                        _log.info("rejSrnoRw ::  " + rqSr.getExprStr());
                        rqSr.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                            "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                            "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                            "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                            " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "' and StoreRslt='W'");
                        Row[] rwkSrnoRw = this.getMmMtlRcptSrno().getFilteredRows(rqSr);
                        _log.info("rwkSrnoRw ::  " + rqSr.getExprStr());

                        RowQualifier rqSr1 = new RowQualifier(this.getMmMtlRcptSrno());
                        rqSr1.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                             "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                             "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                             "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                             " and ItmId='" + itmId + "' and ItmUom='" + itmUom +
                                             "' and StoreRslt='A' and QcRslt='A' ");
                        Row[] srnoRw1 = this.getMmMtlRcptSrno().getFilteredRows(rqSr1);
                        _log.info("srnoRw1 ::  " + rqSr1.getExprStr());
                        rqSr1.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                             "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                             "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                             "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                             " and ItmId='" + itmId + "' and ItmUom='" + itmUom +
                                             "' and (StoreRslt='R' or QcRslt='R') ");
                        Row[] rejSrnoRw1 = this.getMmMtlRcptSrno().getFilteredRows(rqSr1);
                        _log.info("rejSrnoRw1 ::  " + rqSr1.getExprStr());
                        rqSr1.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                             "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                             "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                             "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                             " and ItmId='" + itmId + "' and ItmUom='" + itmUom +
                                             "' and (StoreRslt='W' or QcRslt='W') ");
                        Row[] rwkSrnoRw1 = this.getMmMtlRcptSrno().getFilteredRows(rqSr1);

                        _log.info("rwkSrnoRw1 ::  " + rqSr1.getExprStr());

                        Number lenAc = new Number(0);
                        Number lenRej = new Number(0);
                        Number lenRwk = new Number(0);
                        if (rcptStg.compareTo(new Integer(346)) == 0) {

                            lenAc = new Number(srnoRw.length);
                            lenRej = new Number(rejSrnoRw.length);
                            lenRwk = new Number(rwkSrnoRw.length);
                            _log.info("before Qc-->" + lenAc + "~" + lenRej + "~" + lenRwk);
                        }
                        if (rcptStg.compareTo(new Integer(347)) == 0) {
                            if ("N".equalsIgnoreCase(qcDoneFlg)) {

                                lenAc = new Number(srnoRw.length);
                                lenRej = new Number(rejSrnoRw.length);
                                lenRwk = new Number(rwkSrnoRw.length);
                                _log.info("after Qc-if part->" + lenAc + "~" + lenRej + "~" + lenRwk);
                            } else {
                                lenAc = new Number(srnoRw1.length);
                                lenRej = new Number(rejSrnoRw1.length);
                                lenRwk = new Number(rwkSrnoRw1.length);
                                _log.info("after Qc-else part->" + lenAc + "~" + lenRej + "~" + lenRwk);
                            }
                            _log.info("after Qc-->" + lenAc + "~" + lenRej + "~" + lenRwk);
                        }
                        _log.info("-->" + lenAc + "~" + lenRej + "~" + lenRwk);

                        //_log.info("-<<<<<<->"+lenAc1+"~"+lenRej1+"~"+lenRwk1);

                        _log.info("-->" + finRcptQty + "~" + rejQtyBs + "~" + rwkQtyBs);
                        _log.info("---->" + finRcptQty + "~" + rejQtyBsQc + "~" + rwkQtyBsQc);

                        Number rejectFinal = (Number) (rejQtyBs.add(rejQtyBsQc)).round(getGlblRoundQtyDigit());
                        Number rewrkFinal = (Number) (rwkQtyBs.add(rwkQtyBsQc)).round(getGlblRoundQtyDigit());
                        _log.info(rejectFinal + "  arg0  " + rewrkFinal);
                        _log.info("arg0A    " + lenAc.compareTo(finRcptQty.multiply(fctr)));
                        _log.info("arg0R    " + lenRej.compareTo(rejectFinal));
                        _log.info("arg0W    " + lenRwk.compareTo(rewrkFinal));


                        //if(lenAc.compareTo(finRcptQty.multiply(fctr))!=0 || lenRej.compareTo(rejQtyBs)!=0 || lenRwk.compareTo(rwkQtyBs)!=0){   // change codition 4/2/15 bl
                        if (lenAc.compareTo((Number) (finRcptQty.multiply(fctr)).round(getGlblRoundQtyDigit())) != 0 ||
                            lenRej.compareTo(rejectFinal) != 0 || lenRwk.compareTo(rewrkFinal) != 0) {
                            String ItmName = null;
                            this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", itmid);
                            this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
                            this.getLovItmForDisp().executeQuery();
                            Row[] r = this.getLovItmForDisp().getFilteredRows("ItmId", itmid);
                            // Row[] r = this.getLovItmId().getFilteredRows("ItmId", itmid);   // change BL for tunning 02/09/2014
                            if (r.length > 0) {
                                ItmName = r[0].getAttribute("ItmDesc").toString();
                            }
                            itmArray.add(ItmName);
                        } //endIf

                    } //endif
                } //endfor-each

                if (itmArray.size() > 0) {

                    chkMsgFlg = "Y";
                    _log.info("inside msg append");
                    msg = msg.append("<p><b>" + docIdDisp + "</b> </p>");
                    msg.append("<ul>");
                    for (String a : itmArray) {
                        msg.append("<li> <b>" + a + "</b></li>");
                    }
                    msg.append("</ul>");
                } //endIf
                itmArray.removeAll(itmArray);
            }

            rsi.closeRowSetIterator();

            if ("Y".equalsIgnoreCase(chkMsgFlg)) {
                msg.append("</body></html>");
                FacesMessage message = new FacesMessage(msg.toString());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }
        }
        return chkMsgFlg;
    }


    /**
     * Check if all serials are entered for all serialized items.. In save action
     * @return 'N':  valid
     *         'Y':  invalid
     * */
    public String checkSerialEnteredForSave(String CldId, Integer SlocId, String OrgId) {
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        String docId = rcptRw.getAttribute("DocId").toString();
        Integer doctype = Integer.parseInt(rcptRw.getAttribute("TransSrcDocType").toString());
        Integer rcptStg = Integer.parseInt(rcptRw.getAttribute("RcptStg").toString());


        _log.info("Check serial entered");
        Number zero = new Number(0);
        String chkMsgFlg = "N";
        _log.info("DocType=" + doctype + " and cpo=" + SOURCE_DOC_TYPE_CPO);
        if ((doctype.compareTo(SOURCE_DOC_TYPE_PO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0 ||
             doctype.compareTo(SOURCE_DOC_TYPE_WOUT_PO) == 0 && checkForPOPresent().equals("Y")) ||
            doctype.compareTo(SOURCE_DOC_TYPE_CPO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_JITR) == 0) {
            _log.info("Supplier CPO");
            StringBuilder msg = new StringBuilder("<html><body>");
            msg.append("<b>Serial No.'s don't match the quantities allotted for the following Documents: </b>");
            //     ArrayList docNoArr = new ArrayList();
            this.getMmMtlRcptItm2().executeQuery();

            RowSetIterator rsi = this.getMmMtlRcptSrc().createRowSetIterator(null);
            while (rsi.hasNext()) {
                _log.info("Inside rcptSrc Itr");
                Row srcRw = rsi.next();
                ArrayList<String> itmArray = new ArrayList<String>();
                _log.info("docIdSrcDisp" + srcRw.getAttribute("DocIdSrcDisp"));
                String docIdDisp = srcRw.getAttribute("DocIdSrcDisp").toString();
                _log.info("DocIdSrcDisp=" + docIdDisp);
                RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm2());
                _log.info("docIdSrc=" + srcRw.getAttribute("DocIdSrc"));
                _log.info("Dlvry SchdlNo=" + srcRw.getAttribute("DlvSchdlNo"));
                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                  "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                  "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() + "' and DlvSchdlNo=" +
                                  (Integer) srcRw.getAttribute("DlvSchdlNo"));
                _log.info("Expr=" + rq.getExprStr());
                Row[] itmrw = this.getMmMtlRcptItm2().getFilteredRows(rq);
                _log.info("2");
                for (Row rw : itmrw) {

                    Number finRcptQty = zero;
                    if ((Number) rw.getAttribute("FinalRcptQty") != null) {
                        finRcptQty = (Number) ((Number) rw.getAttribute("FinalRcptQty")).round(getGlblRoundQtyDigit());
                    }

                    Number rejQtyBs = zero;
                    if ((Number) rw.getAttribute("RejQtyBs") != null) {
                        rejQtyBs = (Number) ((Number) rw.getAttribute("RejQtyBs")).round(getGlblRoundQtyDigit());
                    }

                    // add qc reject quantity in Sr check 4/2/15 BL


                    Number rejQtyBsQc = zero;
                    if ((Number) rw.getAttribute("QcRejQtyBs") != null) {
                        rejQtyBsQc = (Number) ((Number) rw.getAttribute("QcRejQtyBs")).round(getGlblRoundQtyDigit());
                    }

                    // add qc rework quantity in Sr check 4/2/15 BL
                    Number rwkQtyBsQc = zero;
                    if ((Number) rw.getAttribute("QcRwkQtyBs") != null) {
                        rwkQtyBsQc = (Number) ((Number) rw.getAttribute("QcRwkQtyBs")).round(getGlblRoundQtyDigit());
                    }

                    Number rwkQtyBs = zero;
                    if ((Number) rw.getAttribute("RwkQtyBs") != null) {
                        rwkQtyBs = (Number) ((Number) rw.getAttribute("RwkQtyBs")).round(getGlblRoundQtyDigit());
                    }
                    Number fctr = zero;
                    if ((Number) rw.getAttribute("UomConvFctr") != null) {
                        fctr = (Number) ((Number) rw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
                    }

                    String itmid = rw.getAttribute("ItmId").toString();
                    _log.info("Final Rcpt Qty:" + finRcptQty + " -- UOM CONV FCTR:" + fctr);

                    String itmId = rw.getAttribute("ItmId").toString();
                    String itmUom = rw.getAttribute("ItmUom").toString();
                    String serialized = rw.getAttribute("TransIsItemSerial").toString();
                    String qcDoneFlg = rw.getAttribute("QcDoneFlg").toString();
                    ;

                    if ("Y".equals(serialized)) {

                        RowQualifier rqSr = new RowQualifier(this.getMmMtlRcptSrno());
                        rqSr.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                            "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                            "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                            "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                            " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "' and StoreRslt='A'");
                        Row[] srnoRw = this.getMmMtlRcptSrno().getFilteredRows(rqSr);
                        _log.info("srnoRw ::  " + rqSr.getExprStr());
                        rqSr.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                            "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                            "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                            "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                            " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "' and StoreRslt='R'");
                        Row[] rejSrnoRw = this.getMmMtlRcptSrno().getFilteredRows(rqSr);
                        _log.info("rejSrnoRw ::  " + rqSr.getExprStr());
                        rqSr.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                            "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                            "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                            "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                            " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "' and StoreRslt='W'");
                        Row[] rwkSrnoRw = this.getMmMtlRcptSrno().getFilteredRows(rqSr);
                        _log.info("rwkSrnoRw ::  " + rqSr.getExprStr());

                        RowQualifier rqSr1 = new RowQualifier(this.getMmMtlRcptSrno());
                        rqSr1.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                             "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                             "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                             "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                             " and ItmId='" + itmId + "' and ItmUom='" + itmUom +
                                             "' and StoreRslt='A' and QcRslt='A' ");
                        Row[] srnoRw1 = this.getMmMtlRcptSrno().getFilteredRows(rqSr1);
                        _log.info("srnoRw1 ::  " + rqSr1.getExprStr());
                        rqSr1.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                             "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                             "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                             "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                             " and ItmId='" + itmId + "' and ItmUom='" + itmUom +
                                             "' and (StoreRslt='R' or QcRslt='R') ");
                        Row[] rejSrnoRw1 = this.getMmMtlRcptSrno().getFilteredRows(rqSr1);
                        _log.info("rejSrnoRw1 ::  " + rqSr1.getExprStr());
                        rqSr1.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                             "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                             "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                             "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                             " and ItmId='" + itmId + "' and ItmUom='" + itmUom +
                                             "' and (StoreRslt='W' or QcRslt='W') ");
                        Row[] rwkSrnoRw1 = this.getMmMtlRcptSrno().getFilteredRows(rqSr1);

                        _log.info("rwkSrnoRw1 ::  " + rqSr1.getExprStr());

                        Number lenAc = new Number(0);
                        Number lenRej = new Number(0);
                        Number lenRwk = new Number(0);
                        if (rcptStg.compareTo(new Integer(346)) == 0) {

                            lenAc = new Number(srnoRw.length);
                            lenRej = new Number(rejSrnoRw.length);
                            lenRwk = new Number(rwkSrnoRw.length);
                            _log.info("before Qc-->" + lenAc + "~" + lenRej + "~" + lenRwk);
                        }
                        if (rcptStg.compareTo(new Integer(347)) == 0) {
                            if ("N".equalsIgnoreCase(qcDoneFlg)) {

                                lenAc = new Number(srnoRw.length);
                                lenRej = new Number(rejSrnoRw.length);
                                lenRwk = new Number(rwkSrnoRw.length);
                                _log.info("after Qc-if part->" + lenAc + "~" + lenRej + "~" + lenRwk);
                            } else {
                                lenAc = new Number(srnoRw1.length);
                                lenRej = new Number(rejSrnoRw1.length);
                                lenRwk = new Number(rwkSrnoRw1.length);
                                _log.info("after Qc-else part->" + lenAc + "~" + lenRej + "~" + lenRwk);
                            }
                            _log.info("after Qc-->" + lenAc + "~" + lenRej + "~" + lenRwk);
                        }
                        _log.info("-->" + lenAc + "~" + lenRej + "~" + lenRwk);

                        //_log.info("-<<<<<<->"+lenAc1+"~"+lenRej1+"~"+lenRwk1);

                        _log.info("-->" + finRcptQty + "~" + rejQtyBs + "~" + rwkQtyBs);
                        _log.info("---->" + finRcptQty + "~" + rejQtyBsQc + "~" + rwkQtyBsQc);

                        Number rejectFinal = (Number) (rejQtyBs.add(rejQtyBsQc)).round(getGlblRoundQtyDigit());
                        Number rewrkFinal = (Number) (rwkQtyBs.add(rwkQtyBsQc)).round(getGlblRoundQtyDigit());
                        _log.info(rejectFinal + "  arg0  " + rewrkFinal);
                        _log.info("arg0A    " + lenAc.compareTo(finRcptQty.multiply(fctr)));
                        _log.info("arg0R    " + lenRej.compareTo(rejectFinal));
                        _log.info("arg0W    " + lenRwk.compareTo(rewrkFinal));


                        //if(lenAc.compareTo(finRcptQty.multiply(fctr))!=0 || lenRej.compareTo(rejQtyBs)!=0 || lenRwk.compareTo(rwkQtyBs)!=0){   // change codition 4/2/15 bl
                        if (lenAc.compareTo((Number) (finRcptQty.multiply(fctr)).round(getGlblRoundQtyDigit())) != 0 ||
                            lenRej.compareTo(rejectFinal) != 0 || lenRwk.compareTo(rewrkFinal) != 0) {
                            String ItmName = null;
                            this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", itmid);
                            this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
                            this.getLovItmForDisp().executeQuery();
                            Row[] r = this.getLovItmForDisp().getFilteredRows("ItmId", itmid);
                            // Row[] r = this.getLovItmId().getFilteredRows("ItmId", itmid);   // change BL for tunning 02/09/2014
                            if (r.length > 0) {
                                ItmName = r[0].getAttribute("ItmDesc").toString();
                            }
                            itmArray.add(ItmName);
                        } //endIf

                    } //endif
                } //endfor-each

                if (itmArray.size() > 0) {

                    chkMsgFlg = "Y";
                    _log.info("inside msg append");
                    msg = msg.append("<p><b>" + docIdDisp + "</b> </p>");
                    msg.append("<ul>");
                    for (String a : itmArray) {
                        msg.append("<li> <b>" + a + "</b></li>");
                    }
                    msg.append("</ul>");
                } //endIf
                itmArray.removeAll(itmArray);
            }

            rsi.closeRowSetIterator();

            if ("Y".equalsIgnoreCase(chkMsgFlg)) {


                msg.append("</body></html>");

                System.out.println(" serial msg " + msg.toString());
                //                FacesMessage message = new FacesMessage(msg.toString());
                //                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                //                FacesContext fc = FacesContext.getCurrentInstance();
                //                fc.addMessage(null, message);
            }
        }
        return chkMsgFlg;
    }


    /**
     * Method to check if the serial no to be added is valid or not (Non-Duplicate across Org)
     * for an Item
     * @return : Y -No Duplicate(Valid)
     *           N -Duplicate(Invalid)
     *           I -Max Serial No. exceeded(Invalid)
     *           O -If receipt quantity is zero.
     * */
    /*   public String isSrNoValidItmSr(String SrNo,String OrgId,Integer slocId,String CldId){
        Row itmRw=this.getMmMtlRcptItm1().getCurrentRow();

        Number numQty=(Number)itmRw.getAttribute("FinalRcptQty");
        Number uomFctr=(Number)itmRw.getAttribute("UomConvFctr");

        Number finQtyBs=numQty.multiply(uomFctr);


        Integer count=this.getMmMtlRcptSr1().getRowCount();
       // _log.info(numQty.intValue()+"--COUNT--"+count);
        if(finQtyBs.compareTo(new Number(0))==0){
            return "O";
        }else if(count+1>numQty.intValue()){
           return "I";
        }else{
            String uomBs=itmRw.getAttribute("ItmUomBs").toString();

            RowQualifier rq=new RowQualifier(this.getMmMtlRcptSrno());
            rq.setWhereClause("OrgId='"+OrgId+"' and CldId='"+CldId+"' and SlocId="+slocId+" and SrNo='"+SrNo+"' and ItmId='"+itmRw.getAttribute("ItmId").toString()+"' and ItmUom='"+uomBs+"'");
            Row[] filRw= this.getMmMtlRcptSrno().getFilteredRows(rq);
            if(filRw.length>0){
                return "N";
            }
            return "Y";
        }
    } */


    /**
     * Generates RMDA for the receipt
     * @return 1 -Successful
     *         -1/-2 -etc not generated
     * */
    public String generateRmda(String OrgId, Integer slocId, String CldId) {
        Row currRcpt = this.getMmMtlRcpt().getCurrentRow();
        String pwhId = currRcpt.getAttribute("WhId").toString();
        String pDocId = currRcpt.getAttribute("DocId").toString();
        Integer pFyId = Integer.parseInt(currRcpt.getAttribute("FyId").toString());
        Integer pUsrId = Integer.parseInt(currRcpt.getAttribute("UsrIdCreate").toString());
        Integer pEoId = null;
        //in case of cpo EO will be null
        if (currRcpt.getAttribute("EoIdSrc") != null) {
            pEoId = Integer.parseInt(currRcpt.getAttribute("EoIdSrc").toString());
        }
        Timestamp pDocDt = (Timestamp) currRcpt.getAttribute("RcptDt");
        Object obj = callStoredFunction(Types.VARCHAR, "MM.MM_GEN_RMDA(?,?,?,?,?,?,?,?,?)", new Object[] {
                                        CldId, slocId, OrgId, pwhId, pDocId, pDocDt, pFyId, pEoId, pUsrId
        });

        if (obj != null) {
            String ret = obj.toString();
            currRcpt.setAttribute("RmdaStat", "Y");
            this.getMMRmda1().executeQuery();
            this.getMMRmdaItm1().executeQuery();
            return ret;
        } else {
            _log.info("FN_GEN_RMDA did not return any value !!");
            return "-1";
        }
    }

    /**
     *   Method to check if Rejected Quantity changed.
     * */
    public String isRmdaChanged() {
        String ret = "N";
        Number zero = new Number(0);
        if (this.getMMRmda1().getCurrentRow() != null) {
            String rmdaDoc = this.getMMRmda1().getCurrentRow().getAttribute("DocIdRcpt").toString();
            RowSetIterator rsi = this.getMMRmdaItm1().createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row curRmda = rsi.next();

                RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm2());
                rq.setWhereClause("SlocId=" + Integer.parseInt(curRmda.getAttribute("SlocId").toString()) +
                                  " and CldId='" + curRmda.getAttribute("CldId").toString() + "' and OrgId='" +
                                  curRmda.getAttribute("OrgId").toString() + "' and DocId='" + rmdaDoc + "'");
                Row[] itms = this.getMmMtlRcptItm2().getFilteredRows(rq);
                Number sum = zero;

                for (Row rw : itms) {

                    Number qcrej = zero;
                    if (rw.getAttribute("QcRejQty") != null) {
                        qcrej = (Number) ((Number) rw.getAttribute("QcRejQty")).round(getGlblRoundQtyDigit());
                    }
                    Number rej = zero;
                    if (rw.getAttribute("RejQty") != null) {
                        rej = (Number) ((Number) rw.getAttribute("RejQty")).round(getGlblRoundQtyDigit());
                    }
                    sum = (Number) ((sum.add(qcrej).add(rej))).round(getGlblRoundQtyDigit());
                }

                _log.info("SUM=" + sum + "---rej=" + (Number) curRmda.getAttribute("RejQty"));

                if (sum.compareTo((Number) ((Number) curRmda.getAttribute("RejQty")).round(getGlblRoundQtyDigit())) !=
                    0) {
                    ret = "Y";
                }
            }
            rsi.closeRowSetIterator();
        }

        return ret;
    }

    /**
     * Container's getter for ViewRma.
     * @return ViewRma
     */
    public ViewObjectImpl getViewRma() {
        return (ViewObjectImpl) findViewObject("ViewRma");
    }

    /**
     * Container's getter for LovPurOrder.
     * @return LovPurOrder
     */
    public ViewObjectImpl getLovPurOrder() {
        return (ViewObjectImpl) findViewObject("LovPurOrder");
    }

    public Integer getUserIdCreated() {
        Row curRcpt = this.getMmMtlRcpt().getCurrentRow();
        Object usr = curRcpt.getAttribute("UsrIdCreate");
        if (usr != null) {
            return Integer.parseInt(usr.toString());
        } else {
            return -1;
        }
    }

    /**
     * Container's getter for LovTransferOrd1.
     * @return LovTransferOrd1
     */
    public ViewObjectImpl getLovTransferOrd1() {
        return (ViewObjectImpl) findViewObject("LovTransferOrd1");
    }

    public void getWfId(Integer slocId, String cldId, String orgId) {
        String wfId = getWfNo(slocId, cldId, orgId, 18515);
        _log.info("WFID:" + wfId);
        RequestContext context = RequestContext.getCurrentInstance();
        context.getPageFlowScope().put("PARAM_WF_ID", wfId);
    }

    /**
     * Container's getter for ViewMMMrn.
     * @return ViewMMMrn
     */
    public ViewObjectImpl getViewMMMrn() {
        return (ViewObjectImpl) findViewObject("ViewMMMrn");
    }

    public Integer callMrnClose(String OrgId, Integer slocId, String CldId) {
        Row currRcpt = this.getMmMtlRcpt().getCurrentRow();
        String pwhId = currRcpt.getAttribute("WhId").toString();
        String pDocId = currRcpt.getAttribute("DocId").toString();

        Object obj = callStoredFunction(Types.VARCHAR, "MM.MM_CLOSE_MRN(?,?,?,?,?,?)", new Object[] {
                                        CldId, slocId, OrgId, 18515, pDocId, null
        });

        if (obj != null) {
            Integer ret = Integer.parseInt(obj.toString());
            _log.info("MM_CLOSE_MRN ret:" + ret);
            return ret;
        } else {
            _log.info("MM_CLOSE_MRN did not return any value !!");
            return -1;
        }
    }

    /**
     * Method to check if LOT has been allocated for all the documents
     * @return Y- Invalid
     *         N- Valid
     * */
    public String checkLotSelected(String CldId, Integer SlocId, String OrgId) {
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        String docId = rcptRw.getAttribute("DocId").toString();
        Integer doctype = Integer.parseInt(rcptRw.getAttribute("TransSrcDocType").toString());


        Number zero = new Number(0);
        String chkMsgFlg = "N";
        Integer rcptSrcType = Integer.parseInt(rcptRw.getAttribute("RcptSrcType").toString());
        if (doctype.compareTo(SOURCE_DOC_TYPE_PO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0 ||
            doctype.compareTo(SOURCE_DOC_TYPE_FGR) == 0 || rcptSrcType.compareTo(RCPT_TYPE_OB) == 0 ||
            doctype.compareTo(SOURCE_DOC_TYPE_TO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_CPO) == 0 ||
            doctype.compareTo(SOURCE_DOC_TYPE_MRN) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_GPR) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_JITR) == 0) {
            // KEY->>(MSG.795)->Lot Quantity don't match the quantities allotted for the following Documents:
            StringBuilder msg = new StringBuilder("<html><body>");
            msg.append("<b>Lot Quantity don't match the quantities allotted for the following Documents: </b>");
            //     ArrayList docNoArr = new ArrayList();

            RowSetIterator rsi = this.getMmMtlRcptSrc().createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row srcRw = rsi.next();
                ArrayList<String> itmArray = new ArrayList<String>();
                String docIdDisp = srcRw.getAttribute("DocIdSrcDisp").toString();
                _log.info("Rows in itm3 =" + getMmMtlRcptItm3().getEstimatedRowCount());
                _log.info("Rows before filter=" + getMmMtlRcptItm2().getEstimatedRowCount());
                RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm3());
                /**
                 * 14-07-2015
                 * add delivery schedule filter in source table
                 * Case - same Document for multiple schedule in same receipt.
                 *
                 * */
                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                  "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                  "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() + "' and DlvSchdlNo=" +
                                  (Integer) srcRw.getAttribute("DlvSchdlNo"));

                Row[] itmrw = this.getMmMtlRcptItm3().getFilteredRows(rq);
                _log.info("Query=" + rq.getExprStr());
                _log.info("Itm in current Rcpt=" + itmrw.length);
                _log.info("2");
                for (Row rw : itmrw) {

                    Number finRcptQty = zero;
                    if ((Number) rw.getAttribute("FinalRcptQty") != null) {
                        finRcptQty = (Number) ((Number) rw.getAttribute("FinalRcptQty")).round(getGlblRoundQtyDigit());
                    }

                    Number qcRejQty = zero;
                    if ((Number) rw.getAttribute("QcRejQty") != null) {
                        qcRejQty = (Number) ((Number) rw.getAttribute("QcRejQty")).round(getGlblRoundQtyDigit());
                    }

                    Number rwkQtyBs = zero;
                    if ((Number) rw.getAttribute("RwkQtyBs") != null) {
                        rwkQtyBs = (Number) ((Number) rw.getAttribute("RwkQtyBs")).round(getGlblRoundQtyDigit());
                    }


                    Number fctr = new Number(1);
                    if ((Number) rw.getAttribute("UomConvFctr") != null) {
                        fctr = (Number) ((Number) rw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
                    }

                    String itmid = rw.getAttribute("ItmId").toString();
                    _log.info("Final Rcpt Qty:" + finRcptQty + " -- UOM CONV FCTR:" + fctr);
                    Number finRcptQtyBs = (Number) (finRcptQty.multiply(fctr)).round(getGlblRoundQtyDigit());

                    String itmId = rw.getAttribute("ItmId").toString();
                    String itmUom = rw.getAttribute("ItmUom").toString();
                    String serialized = rw.getAttribute("TransIsItemSerial").toString();


                    RowQualifier rqLot = new RowQualifier(this.getMmMtlRcptLot2());
                    rqLot.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                         "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                         "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                         "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                         " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "'");
                    Row[] lotRw = this.getMmMtlRcptLot2().getFilteredRows(rqLot);

                    Number lotqty = zero;

                    for (Row lotR : lotRw) {
                        Number lotq = (Number) ((Number) lotR.getAttribute("LotQty")).round(getGlblRoundQtyDigit());
                        if (lotq == null) {
                            lotq = zero;
                        }
                        lotqty = (Number) (lotqty.add(lotq)).round(getGlblRoundQtyDigit());
                    }
                    _log.info("LOtQty=" + lotqty + " and FnlRcptQtyBs=" + finRcptQtyBs);
                    // if(lotqty.compareTo(finRcptQtyBs.subtract(qcRejQty))!=0){ // change BL 02-02-2015 for check qc rejection and
                    if (lotqty.compareTo(finRcptQtyBs) != 0) {
                        String ItmName = null;
                        this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                         resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                        this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                         resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                        this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                         resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                        this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                         resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                        this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", itmid);
                        this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
                        this.getLovItmForDisp().executeQuery();
                        Row[] r = this.getLovItmForDisp().getFilteredRows("ItmId", itmid);
                        // Row[] r = this.getLovItmId().getFilteredRows("ItmId", itmid);  // change BL for tunning 02/09/2014
                        if (r.length > 0) {
                            ItmName = r[0].getAttribute("ItmDesc").toString();
                        }
                        itmArray.add(ItmName);
                    }

                } //endfor-each

                if (itmArray.size() > 0) {

                    chkMsgFlg = "Y";
                    _log.info("inside msg append");
                    msg = msg.append("<p><b>" + docIdDisp + "</b> </p>");
                    msg.append("<ul>");
                    for (String a : itmArray) {
                        msg.append("<li> <b>" + a + "</b></li>");
                    }
                    msg.append("</ul>");
                } //endIf
                itmArray.removeAll(itmArray);
            }

            rsi.closeRowSetIterator();

            if ("Y".equalsIgnoreCase(chkMsgFlg)) {
                msg.append("</body></html>");
                FacesMessage message = new FacesMessage(msg.toString());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }
        }
        return chkMsgFlg;
    }

    /**
     * Method to check if Bin has been allocated for all the documents
     * @return Y- Invalid
     *         N- Valid
     * */
    public String checkBinSelected(String CldId, Integer SlocId, String OrgId, String Binchk) {

        if ("Y".equals(Binchk)) {
            Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
            String docId = rcptRw.getAttribute("DocId").toString();
            Integer doctype = Integer.parseInt(rcptRw.getAttribute("TransSrcDocType").toString());

            Number zero = new Number(0);
            String chkMsgFlg = "N";

            Integer rcptSrcType = Integer.parseInt(rcptRw.getAttribute("RcptSrcType").toString());
            if (doctype.compareTo(SOURCE_DOC_TYPE_PO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0 ||
                doctype.compareTo(SOURCE_DOC_TYPE_FGR) == 0 || rcptSrcType.compareTo(RCPT_TYPE_OB) == 0 ||
                doctype.compareTo(SOURCE_DOC_TYPE_TO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_CPO) == 0 ||
                doctype.compareTo(SOURCE_DOC_TYPE_PRODT) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_MRN) == 0 ||
                doctype.compareTo(SOURCE_DOC_TYPE_GPR) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_JITR) == 0) {
                // KEY->(MSG.797)->Bin Quantity don't match the quantities allotted for the following Documents:
                StringBuilder msg = new StringBuilder("<html><body>");
                msg.append("<b>Bin Quantity don't match the quantities allotted for the following Documents: </b>");
                //     ArrayList docNoArr = new ArrayList();

                RowSetIterator rsi = this.getMmMtlRcptSrc().createRowSetIterator(null);
                while (rsi.hasNext()) {
                    Row srcRw = rsi.next();
                    ArrayList<String> itmArray = new ArrayList<String>();
                    String docIdDisp = srcRw.getAttribute("DocIdSrcDisp").toString();

                    RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm2());
                    rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                      "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                      "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                      "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo"));
                    Row[] itmrw = this.getMmMtlRcptItm2().getFilteredRows(rq);
                    _log.info("2");
                    for (Row rw : itmrw) {

                        Number finRcptQty = zero;
                        if ((Number) rw.getAttribute("FinalRcptQty") != null) {
                            finRcptQty =
                                (Number) ((Number) rw.getAttribute("FinalRcptQty")).round(getGlblRoundQtyDigit());
                        }

                        Number qcRejQty = zero;
                        if ((Number) rw.getAttribute("QcRejQty") != null) {
                            qcRejQty = (Number) ((Number) rw.getAttribute("QcRejQty")).round(getGlblRoundQtyDigit());
                        }

                        Number rwkQtyBs = zero;
                        if ((Number) rw.getAttribute("RwkQtyBs") != null) {
                            rwkQtyBs = (Number) ((Number) rw.getAttribute("RwkQtyBs")).round(getGlblRoundQtyDigit());
                        }
                        // only check for production
                        Number qcRwkQtyBs = zero;
                        if ((Number) rw.getAttribute("QcRwkQtyBs") != null) {
                            qcRwkQtyBs =
                                (Number) ((Number) rw.getAttribute("QcRwkQtyBs")).round(getGlblRoundQtyDigit());
                        }

                        Number fctr = zero;
                        if ((Number) rw.getAttribute("UomConvFctr") != null) {
                            fctr = (Number) ((Number) rw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
                        }

                        String itmid = rw.getAttribute("ItmId").toString();
                        _log.info("Final Rcpt Qty:" + finRcptQty + " -- UOM CONV FCTR:" + fctr);
                        Number finRcptQtyBs = (Number) (finRcptQty.multiply(fctr)).round(getGlblRoundQtyDigit());

                        String itmId = rw.getAttribute("ItmId").toString();
                        String itmUom = rw.getAttribute("ItmUom").toString();
                        String serialized = rw.getAttribute("TransIsItemSerial").toString();


                        RowQualifier rqLot = new RowQualifier(this.getMmMtlRcptLot2());
                        rqLot.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                             "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                             "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                             "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                             " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "'");
                        Row[] lotRw = this.getMmMtlRcptLot2().getFilteredRows(rqLot);

                        String chk = "N";
                        for (Row lotR : lotRw) {
                            Number lotqty =
                                (Number) ((Number) lotR.getAttribute("LotQty")).round(getGlblRoundQtyDigit());
                            Number lotRejQtyBs =
                                (Number) ((Number) lotR.getAttribute("RejQtyBs")).round(getGlblRoundQtyDigit());
                            Number lotRwkQtyBs =
                                (Number) ((Number) lotR.getAttribute("RwkQtyBs")).round(getGlblRoundQtyDigit());
                            RowQualifier rqBin = new RowQualifier(this.getMmMtlRcptBin2());
                            rqBin.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                                 "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                                 "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                                 "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                                 " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "' and LotId='" +
                                                 lotR.getAttribute("LotId").toString() + "'");
                            Row[] binRws = this.getMmMtlRcptBin2().getFilteredRows(rqBin);
                            Number binqty = zero;
                            Number binRejQtyBs = zero;
                            Number binRwkQtyBs = zero;

                            for (Row binrw : binRws) {
                                binqty =
                                    (Number) (binqty.add((Number) ((Number) binrw.getAttribute("BinQtyBs")).round(getGlblRoundQtyDigit()))).round(getGlblRoundQtyDigit());
                                // for production only
                                if (doctype.compareTo(SOURCE_DOC_TYPE_PRODT) == 0) {
                                    binRejQtyBs =
                                        (Number) (binRejQtyBs.add((Number) ((Number) binrw.getAttribute("RejQtyBs")).round(getGlblRoundQtyDigit()))).round(getGlblRoundQtyDigit());
                                    binRwkQtyBs =
                                        (Number) (binRwkQtyBs.add((Number) ((Number) binrw.getAttribute("RwkQtyBs")).round(getGlblRoundQtyDigit()))).round(getGlblRoundQtyDigit());
                                }
                            }

                            if (binqty.compareTo(lotqty) != 0) {
                                _log.info("lot quantity not match");
                                chk = "Y";
                            }
                            // for prodution only
                            if (doctype.compareTo(SOURCE_DOC_TYPE_PRODT) == 0) {
                                if (binRejQtyBs.compareTo(lotRejQtyBs) != 0) {
                                    _log.info("lot rejected quantity not match");
                                    chk = "Y";
                                }
                                if (binRwkQtyBs.compareTo(lotRwkQtyBs) != 0) {
                                    _log.info("lot rework  quantity not match");
                                    chk = "Y";
                                }
                            }
                        }

                        _log.info("check :::: " + chk);
                        if ("Y".equals(chk)) {
                            String ItmName = null;
                            this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", itmid);
                            this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
                            this.getLovItmForDisp().executeQuery();
                            Row[] r = this.getLovItmForDisp().getFilteredRows("ItmId", itmid);
                            //  Row[] r = this.getLovItmId().getFilteredRows("ItmId", itmid);// change BL for tunning 02/09/2014
                            if (r.length > 0) {
                                ItmName = r[0].getAttribute("ItmDesc").toString();
                            }
                            itmArray.add(ItmName);
                        }

                    } //endfor-each

                    if (itmArray.size() > 0) {

                        chkMsgFlg = "Y";
                        _log.info("inside msg append");
                        msg = msg.append("<p><b>" + docIdDisp + "</b> </p>");
                        msg.append("<ul>");
                        for (String a : itmArray) {
                            msg.append("<li> <b>" + a + "</b></li>");
                        }
                        msg.append("</ul>");
                    } //endIf
                    itmArray.removeAll(itmArray);
                }

                rsi.closeRowSetIterator();

                if ("Y".equalsIgnoreCase(chkMsgFlg)) {
                    msg.append("</body></html>");
                    FacesMessage message = new FacesMessage(msg.toString());
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext fc = FacesContext.getCurrentInstance();
                    fc.addMessage(null, message);
                }
            }
            return chkMsgFlg;
        } else {
            return "N";
        }
    }

    /**
     * Method used to check if all the serial nos are entered prior to stock update
     * Applicable Only for serialized items
     * @return Y-Invalid
     *         N-Valid
     * */
    public String checkSerialSelected(String CldId, Integer SlocId, String OrgId, String Binchk) {
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        String docId = rcptRw.getAttribute("DocId").toString();
        Integer doctype = Integer.parseInt(rcptRw.getAttribute("TransSrcDocType").toString());
        Integer rcptSrcType = Integer.parseInt(rcptRw.getAttribute("RcptSrcType").toString());
        Number zero = new Number(0);
        String chkMsgFlg = "N";
        if (doctype.compareTo(SOURCE_DOC_TYPE_PO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0 ||
            doctype.compareTo(SOURCE_DOC_TYPE_FGR) == 0 || rcptSrcType.compareTo(RCPT_TYPE_OB) == 0 ||
            doctype.compareTo(SOURCE_DOC_TYPE_TO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_CPO) == 0 ||
            doctype.compareTo(SOURCE_DOC_TYPE_PRODT) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_MRN) == 0 ||
            doctype.compareTo(SOURCE_DOC_TYPE_GPR) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_JITR) == 0) {
            // KEY->(MSG.797)->Bin Quantity don't match the quantities allotted for the following Documents:
            StringBuilder msg = new StringBuilder("<html><body>");
            msg.append("<b>Serial No.'s not alloted completely for the following Documents: </b>");
            //     ArrayList docNoArr = new ArrayList();

            RowSetIterator rsi = this.getMmMtlRcptSrc().createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row srcRw = rsi.next();
                ArrayList<String> itmArray = new ArrayList<String>();
                String docIdDisp = srcRw.getAttribute("DocIdSrcDisp").toString();

                RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm2());
                rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                  "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                  "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() + "' and DlvSchdlNo=" +
                                  (Integer) srcRw.getAttribute("DlvSchdlNo"));
                Row[] itmrw = this.getMmMtlRcptItm2().getFilteredRows(rq);

                for (Row rw : itmrw) {

                    Number finRcptQty = zero;
                    if ((Number) rw.getAttribute("FinalRcptQty") != null) {
                        finRcptQty = (Number) ((Number) rw.getAttribute("FinalRcptQty")).round(getGlblRoundQtyDigit());
                    }

                    Number qcRejQty = zero;
                    if ((Number) rw.getAttribute("QcRejQty") != null) {
                        qcRejQty = (Number) ((Number) rw.getAttribute("QcRejQty")).round(getGlblRoundQtyDigit());
                    }

                    Number rwkQtyBs = zero;
                    if ((Number) rw.getAttribute("RwkQtyBs") != null) {
                        rwkQtyBs = (Number) ((Number) rw.getAttribute("RwkQtyBs")).round(getGlblRoundQtyDigit());
                    }


                    Number fctr = zero;
                    if ((Number) rw.getAttribute("UomConvFctr") != null) {
                        fctr = (Number) ((Number) rw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
                    }

                    String itmid = rw.getAttribute("ItmId").toString();
                    _log.info("Final Rcpt Qty:" + finRcptQty + " -- UOM CONV FCTR:" + fctr);
                    Number finRcptQtyBs = (Number) (finRcptQty.multiply(fctr)).round(getGlblRoundQtyDigit());

                    String itmId = rw.getAttribute("ItmId").toString();
                    String itmUom = rw.getAttribute("ItmUom").toString();

                    String serialized = rw.getAttribute("TransIsItemSerial").toString();

                    this.getMmMtlRcptLot2().executeQuery();
                    RowQualifier rqLot = new RowQualifier(this.getMmMtlRcptLot2());
                    rqLot.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                         "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                         "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                         "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                         " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "'");
                    Row[] lotRw = this.getMmMtlRcptLot2().getFilteredRows(rqLot);
                    _log.info("No. of Rows in Lot=" + lotRw.length);
                    if ("Y".equalsIgnoreCase(serialized)) { //check for only serialized items
                        String chk = "N";
                        for (Row lotR : lotRw) {
                            Number lotqty =
                                (Number) ((Number) lotR.getAttribute("LotQty")).round(getGlblRoundQtyDigit());
                            _log.info("LotQty=" + lotqty);
                            this.getMmMtlRcptBin2().executeQuery();
                            RowQualifier rqBin = new RowQualifier(this.getMmMtlRcptBin2());
                            rqBin.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                                 "' and WhId='" + srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                                 "' and DocIdSrc='" + srcRw.getAttribute("DocIdSrc").toString() +
                                                 "' and DlvSchdlNo=" + (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                                 " and ItmId='" + itmId + "' and ItmUom='" + itmUom + "' and LotId='" +
                                                 lotR.getAttribute("LotId").toString() + "'");
                            Row[] binRws = this.getMmMtlRcptBin2().getFilteredRows(rqBin);
                            // Number binrwqty=zero;
                            _log.info("Row in Bin=" + binRws.length);
                            if ("Y".equals(Binchk)) { //if bin is used check quantity from BIN
                                for (Row binrw : binRws) {

                                    Number binrwqty =
                                        (Number) ((Number) binrw.getAttribute("BinQtyBs")).round(getGlblRoundQtyDigit());
                                    _log.info("BinQtyty=" + binrwqty);
                                    if (binrwqty == null) {
                                        binrwqty = zero;
                                    }
                                    Number binrwqtybs = (binrwqty);
                                    _log.info("BinQtyBs=" + binrwqtybs);
                                    RowQualifier rqSerial = new RowQualifier(this.getMmMtlRcptSr2());
                                    rqSerial.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId +
                                                            " and OrgId='" + OrgId + "' and WhId='" +
                                                            srcRw.getAttribute("WhId") + "' and DocId='" + docId +
                                                            "' and DocIdSrc='" +
                                                            srcRw.getAttribute("DocIdSrc").toString() +
                                                            "' and DlvSchdlNo=" +
                                                            (Integer) srcRw.getAttribute("DlvSchdlNo") +
                                                            " and ItmId='" + itmId + "' and ItmUom='" + itmUom +
                                                            "' and LotId='" + binrw.getAttribute("LotId").toString() +
                                                            "' and BinId='" + binrw.getAttribute("BinId").toString() +
                                                            "'");
                                    Row[] srRows = this.getMmMtlRcptSr2().getFilteredRows(rqSerial);

                                    Number srCount = new Number(srRows.length);
                                    _log.info("No. of Serial no.=" + srCount);
                                    if (binrwqtybs.compareTo(srCount) != 0) {
                                        chk = "Y";
                                    }
                                    _log.info("Value of check=" + chk);
                                } //end-for-bin
                            } else { // If BIN is not used check quantity using LOT
                                RowQualifier rqSerial = new RowQualifier(this.getMmMtlRcptSr2());
                                rqSerial.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" +
                                                        OrgId + "' and WhId='" + srcRw.getAttribute("WhId") +
                                                        "' and DocId='" + docId + "' and DocIdSrc='" +
                                                        srcRw.getAttribute("DocIdSrc").toString() +
                                                        "' and DlvSchdlNo=" +
                                                        (Integer) srcRw.getAttribute("DlvSchdlNo") + " and ItmId='" +
                                                        itmId + "' and ItmUom='" + itmUom + "' and LotId='" +
                                                        lotR.getAttribute("LotId").toString() + "'");
                                Row[] srRows = this.getMmMtlRcptSr2().getFilteredRows(rqSerial);
                                Number srCount = new Number(srRows.length);
                                _log.info("SrCount=" + srCount);
                                //  Number lotqtybs=lotqty.multiply(fctr);
                                Number lotqtybs = lotqty;
                                _log.info("LotQtyBs=" + lotqtybs);
                                if (lotqtybs.compareTo(srCount) != 0) {
                                    chk = "Y";
                                }

                            }

                        }


                        if ("Y".equals(chk)) {
                            String ItmName = null;
                            this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                             resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                            this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", itmid);
                            this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
                            this.getLovItmForDisp().executeQuery();
                            Row[] r = this.getLovItmForDisp().getFilteredRows("ItmId", itmid);
                            // Row[] r = this.getLovItmId().getFilteredRows("ItmId", itmid);   // change BL for tunning 02/09/2014
                            if (r.length > 0) {
                                ItmName = r[0].getAttribute("ItmDesc").toString();
                            }
                            itmArray.add(ItmName);
                        }
                    }
                } //endfor-each

                if (itmArray.size() > 0) {

                    chkMsgFlg = "Y";
                    _log.info("inside msg append");
                    msg = msg.append("<p><b>" + docIdDisp + "</b> </p>");
                    msg.append("<ul>");
                    for (String a : itmArray) {
                        msg.append("<li> <b>" + a + "</b></li>");
                    }
                    msg.append("</ul>");
                } //endIf
                itmArray.removeAll(itmArray);
            }

            rsi.closeRowSetIterator();

            if ("Y".equalsIgnoreCase(chkMsgFlg)) {
                msg.append("</body></html>");
                FacesMessage message = new FacesMessage(msg.toString());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }
        }
        return chkMsgFlg;

    }


    /**
     * Container's getter for LovfyIdDesc.
     * @return LovfyIdDesc
     */
    public ViewObjectImpl getLovfyIdDesc() {
        return (ViewObjectImpl) findViewObject("LovfyIdDesc");
    }


    /**
     * Opening Balance would be available to add only in Opening FY,mean FY=1
     */
    public String ChkUseOpeningBalance(Integer SrcType) {
        String retu = "Y";
        if (SrcType.equals(396)) {
            retu = "N";
            RowQualifier rq = new RowQualifier(this.getLovfyIdDesc());
            Row curr = this.getMmMtlRcpt().getCurrentRow();
            rq.setWhereClause("CldId='" + curr.getAttribute("CldId") + "' and OrgFyRefSlocId=" +
                              curr.getAttribute("SlocId") + " and OrgId='" + curr.getAttribute("OrgId") +
                              "' and OrgFyId=" + curr.getAttribute("FyId"));
            Row[] row = this.getLovfyIdDesc().getFilteredRows(rq);
            if (row.length > 0) {
                if (row[0].getAttribute("OrgFyStrtFlg") != null) {
                    if (row[0].getAttribute("OrgFyStrtFlg").toString().equals("Y")) {
                        retu = "Y";
                    } else
                        retu = "N";

                } else
                    retu = "N";
            } else
                retu = "N";
        }
        /*   Integer fy=2;
        if(getMmMtlRcpt().getCurrentRow().getAttribute("FyId")!=null)
        fy = (Integer)this.getMmMtlRcpt().getCurrentRow().getAttribute("FyId");
        if(SrcType==396 && fy==1)
            return "Y";
        else
            return "N"; */
        return retu;
    }


    /**
     * Function Returns "Y" if Lot Has been assigned else return "N"
     * */

    public String ChkLotIsAssignedOrNot() {
        Row lotRw = this.getMmMtlRcptLot1().getCurrentRow();
        if (lotRw != null) {
            _log.info("Lot Value=" + lotRw.getAttribute("LotId"));
            if (lotRw.getAttribute("LotId") != null)
                return "Y";
            else
                return "N";
        } else
            return "N";
    }

    /**
     * Function to check Serial No. is duplicate or Not.
     * */
    public String chkSerialDuplicate(String SrNo) {
        Row itmRw = this.getMmMtlRcptItm1().getCurrentRow();
        String uomBs = itmRw.getAttribute("ItmUomBs").toString();
        String OrgId = itmRw.getAttribute("OrgId").toString();
        String CldId = itmRw.getAttribute("CldId").toString();
        Integer slocId = (Integer) itmRw.getAttribute("SlocId");
        String itmId = itmRw.getAttribute("ItmId").toString();
        RowQualifier rq = new RowQualifier(this.getMmMtlRcptSr1());
        _log.info("OrgId='" + OrgId + "' and CldId='" + CldId + "' and SlocId=" + slocId + " and SrNo='" + SrNo +
                  "' and ItmId='" + itmId + "' and ItmUom='" + uomBs + "'");
        rq.setWhereClause("OrgId='" + OrgId + "' and CldId='" + CldId + "' and SlocId=" + slocId + " and SrNo='" +
                          SrNo + "' and ItmId='" + itmId + "' and ItmUom='" + uomBs + "'");
        Row r[] = this.getMmMtlRcptSr1().getFilteredRows(rq);
        _log.info("No. of Duplicate Rows in SR1=" + r.length);

        Integer rcptSrcType = (Integer) this.getMmMtlRcpt().getCurrentRow().getAttribute("RcptSrcType");
        Integer docType = (Integer) this.getMmMtlRcpt().getCurrentRow().getAttribute("TransSrcDocType");
        RowQualifier rqsrno = new RowQualifier(this.getMmMtlRcptSrno());
        rqsrno.setWhereClause("OrgId='" + OrgId + "' and CldId='" + CldId + "' and SlocId=" + slocId + " and SrNo='" +
                              SrNo + "' and ItmId='" + itmId + "' and ItmUom='" + uomBs + "'");
        Row rsrno[] = this.getMmMtlRcptSrno().getFilteredRows(rqsrno);
        _log.info("No. of Duplicate Rows in SrNo=" + rsrno.length);

        // if(((rcptSrcType.equals(331) || rcptSrcType.equals(458) || rcptSrcType.equals(335))? (r.length==0 ? true : false) : (r.length==0 && rsrno.length==0 ? true : false)))
        if (((rcptSrcType.equals(331) || rcptSrcType.equals(458) || rcptSrcType.equals(335)) ?
             (r.length == 0 ? true : false) : (r.length == 0 && rsrno.length == 0 ? true : false))) // change for MRN
        {
            //  return "N";
            RowQualifier rq1 = new RowQualifier(this.getMmMtlRcptSr2());
            _log.info("OrgId='" + OrgId + "' and CldId='" + CldId + "' and SlocId=" + slocId + " and SrNo='" + SrNo +
                      "' and ItmId='" + itmId + "' and ItmUom='" + uomBs + "'");
            rq1.setWhereClause("OrgId='" + OrgId + "' and CldId='" + CldId + "' and SlocId=" + slocId + " and SrNo='" +
                               SrNo + "' and ItmId='" + itmId + "' and ItmUom='" + uomBs + "'");
            Row r1[] = this.getMmMtlRcptSr2().getFilteredRows(rq1);
            _log.info("No. of Duplicate Rows in sr2=" + r1.length);
            if (r1.length == 0)
                return "N";
            else
                return "Y";
        } else if (docType.compareTo(SOURCE_DOC_TYPE_MRN) == 0 || rcptSrcType.equals(337) || rcptSrcType.equals(338) ||
                   docType.compareTo(SOURCE_DOC_TYPE_GPR) == 0) {
            if (r.length == 0) {
                return "N";
            } else {
                return "Y";
            }
        } else {
            return "Y";
        }
    }

    /**
     * Check for Duplicate Lot No.@Nitesh
     * */
    public String isLotNoValid(String lotNo) {
        RowSetIterator rsi = this.getMmMtlRcptLot2().createRowSetIterator(null);
        Row curr = this.getMmMtlRcptLot1().getCurrentRow();
        String stat = "N";
        while (rsi.hasNext()) {
            Row r = rsi.next();
            if (r.getAttribute("LotId") != null && r.getAttribute("ItmId") != null &&
                r.getAttribute("ItmUom") != null && curr.getAttribute("ItmId") != null &&
                curr.getAttribute("ItmUom") != null && lotNo != null &&
                (!(r.getAttribute("DocId").toString().equals(curr.getAttribute("DocId").toString())))) {
                String lotid = r.getAttribute("LotId").toString();
                String itmId = r.getAttribute("ItmId").toString();
                String itmUom = r.getAttribute("ItmUom").toString();
                if (lotid.equalsIgnoreCase(lotNo) && itmId.equalsIgnoreCase(curr.getAttribute("ItmId").toString()) &&
                    itmUom.equalsIgnoreCase(curr.getAttribute("ItmUom").toString())) {
                    stat = "Y";
                    return stat;
                }
            }
        }
        rsi.closeRowSetIterator();
        return stat;
    }


    /**
     * Check for Another Lot Added Already or not
     * */
    public String ChkLotQuantity() {
        if (this.getMmMtlRcptLot1().getFilteredRows("DocId",
                                                    this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId")).length >
            0)
            return "Y";
        else
            return "N";

    }


    /**
     * Check for Duplicate Item In FGR Case
     */
    public String chkDupliItm(String ItmName) {
        String itmid = null;
        _log.info("Checking for duplicacy of Item");
        this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", null);
        this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", ItmName);
        this.getLovItmForDisp().executeQuery();
        Row[] rw = this.getLovItmForDisp().getFilteredRows("ItmDesc", ItmName);
        // Row[] rw= this.getLovItmId().getFilteredRows("ItmDesc", ItmName); // change BL for tunning 02/09/2014
        if (rw.length > 0)
            itmid = rw[0].getAttribute("ItmId").toString();

        Row r[] = this.getMmMtlRcptItm().getFilteredRows("ItmId", itmid);
        if (r.length > 0)
            return "Y";
        else
            return "N";
    }

    /**
     * Check if PO updated or not.
     */

    public String checkForPOPresent() {
        String docsrc = null;
        if (this.getMmMtlRcptSrc().getCurrentRow().getAttribute("DocIdSrc") != null)
            docsrc = this.getMmMtlRcptSrc().getCurrentRow().getAttribute("DocIdSrc").toString();
        _log.info("Source Document=" + docsrc);
        Row r[] = null;
        if (docsrc != null) {
            // r = this.getLovPoNo().getFilteredRows("DocId", docsrc); 17/04/2015
            r = this.getLovPurOrder().getFilteredRows("DocId", docsrc);
        }
        _log.info("Rows in PO for this Doc=" + r.length);
        if (r.length > 0)
            return "Y";
        else
            return "N";

    }


    /**
     *Check for if NO. of Searial No. entered is less than Quantity or not
     */

    public String chkLotOrBinQuantity(String Binchk) {
        String valid = "N";
        if (Binchk.equals("N")) {
            //Check with LOT
            Number lotQty = new Number(0);
            if (this.getMmMtlRcptLot1().getCurrentRow().getAttribute("LotQty") != null)
                lotQty =
                    (Number) ((Number) this.getMmMtlRcptLot1().getCurrentRow().getAttribute("LotQty")).round(getGlblRoundQtyDigit());
            _log.info("LotQty=" + lotQty);
            String lotId = null;
            if (this.getMmMtlRcptLot1().getCurrentRow().getAttribute("LotId") != null)
                lotId = (String) this.getMmMtlRcptLot1().getCurrentRow().getAttribute("LotId");
            _log.info("LotId=" + lotId);
            Number length = new Number(0);
            /* try {
                length = new Number((Integer)this.getMmMtlRcptSr1().getRowCount());
                _log.info("RowCount="+length);
            } catch (SQLException e) {
            _log.info("Can not cast to Number");
            }
             */
            Row fr[] = this.getMmMtlRcptSr1().getFilteredRows("LotId", lotId);
            try {
                length = new Number((Integer) fr.length);
                _log.info("RowCount=" + length);
            } catch (SQLException e) {
                _log.info("Can not cast to Number");
            }
            if (length.compareTo(lotQty) < 0)
                valid = "Y";
            else
                valid = "N";
        } else {
            //Check with BIN
            Number binQty = new Number(0);
            if (this.getMmMtlRcptBin1().getCurrentRow().getAttribute("BinQtyBs") != null)
                binQty =
                    (Number) ((Number) this.getMmMtlRcptBin1().getCurrentRow().getAttribute("BinQtyBs")).round(getGlblRoundQtyDigit());
            _log.info("BinQty=" + binQty);

            String binId = null;
            if (this.getMmMtlRcptBin1().getCurrentRow().getAttribute("BinId") != null)
                binId = (String) this.getMmMtlRcptBin1().getCurrentRow().getAttribute("BinId");
            _log.info("BinId=" + binId);

            Number length = new Number(0);
            /*  try {
                length = new Number((Integer)this.getMmMtlRcptSr1().getRowCount());
                _log.info("RowCount="+length);
            } catch (SQLException e) {
            _log.info("Can not cast to Number");
            } */
            Row fr[] = this.getMmMtlRcptSr1().getFilteredRows("BinId", binId);
            try {
                length = new Number((Integer) fr.length);
                _log.info("RowCount=" + length);
            } catch (SQLException e) {
                _log.info("Can not cast to Number");
            }
            if (length.compareTo(binQty) < 0)
                valid = "Y";
            else
                valid = "N";

        }

        return valid;
    }

    /**
     * Check Duplicate GateEntry
     */
    public String isGEDupli(String geno) {
        _log.info("GeNo=" + geno);
        RowQualifier rq = new RowQualifier(this.getLovGateEntry());
        rq.setWhereClause("WhId='" + this.getMmMtlRcpt().getCurrentRow().getAttribute("WhId") + "' and OrgId='" +
                          this.getMmMtlRcpt().getCurrentRow().getAttribute("OrgId") + "' and GeNo='" + geno + "'");
        _log.info("Querry=" + rq.getExprStr());
        Row r[] = this.getLovGateEntry().getFilteredRows(rq);
        _log.info("No. of Rows=" + r.length);
        String doc = null;
        if (r.length > 0)
            doc = r[0].getAttribute("DocId").toString();
        _log.info("doc in GE=" + doc);
        RowSetIterator rsi = this.getMmMtlRcpt().createRowSetIterator(null);
        int count = 0;
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != this.getMmMtlRcpt().getCurrentRow() && next.getAttribute("GeDocId") != null && doc != null) {
                if (next.getAttribute("GeDocId").toString().equals(doc)) {
                    return "Y";
                }
            } else {
                //_log.info("next.getAttribute(GeDocId)="+next.getAttribute("GeDocId"));
            }
            count++;
        }
        _log.info("Rows" + count);
        rsi.closeRowSetIterator();
        return "N";
    }


    /**
     *  Check if items received are configured for this Warehouse or not.
     *  @return "Y" - Valid
     *          "N" - Invalid
     * */
    public String isPoWarehouseCompatible() {

        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        Row currRcpt = rcptVo.getCurrentRow();

        //Row currItm=itmVo.getCurrentRow();
        //Row currGeSrc=gesrc.getCurrentRow();
        String CldId = currRcpt.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currRcpt.getAttribute("SlocId");
        String OrgId = currRcpt.getAttribute("OrgId").toString();
        String whId = currRcpt.getAttribute("WhId").toString();
        Integer shdlNo = 1;
        if (currRcpt.getAttribute("TransSchdlNo") != null) {
            Integer shldNewNo = Integer.parseInt(currRcpt.getAttribute("TransSchdlNo").toString());
            if (shldNewNo.compareTo(new Integer(0)) == 0) {

            } else {
                shdlNo = shldNewNo;
            }

        }
        _log.info("shdlNo    :::: " + shdlNo);
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("DocId='" + currRcpt.getAttribute("TransSrcDocId").toString() + "' and DlvSchdlNo=" + shdlNo +
                          " and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");
        Row[] scdlRw = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);

        if (scdlRw.length > 0) {
            String dlvWh = scdlRw[0].getAttribute("WhId").toString();
            System.out.println("Wh=" + scdlRw[0].getAttribute("WhId"));
            if (dlvWh.equalsIgnoreCase(whId)) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return "N";
        }
    }


    /**
     * Check for lot assign for this item or not
     */
    public String chkLotAssignOrNot() {
        String itm = (String) this.getMmMtlRcptItm().getCurrentRow().getAttribute("ItmId");
        String doc = (String) this.getMmMtlRcptItm().getCurrentRow().getAttribute("DocId");
        RowQualifier rqlot = new RowQualifier(this.getMmMtlRcptLot2());
        rqlot.setWhereClause("DocId='" + doc + "' and ItmId='" + itm + "'");
        Row[] r = this.getMmMtlRcptLot2().getFilteredRows(rqlot);
        _log.info(rqlot.getExprStr() + "    ::::: " + r.length);
        if (r.length > 0)
            return "Y";
        else
            return "N";

    }

    /**
     * Delete Lot Bin Searial
     */
    public void deleteLotBinSr() {
        String itm = (String) this.getMmMtlRcptItm().getCurrentRow().getAttribute("ItmId");
        String doc = (String) this.getMmMtlRcptItm().getCurrentRow().getAttribute("DocId");

        RowQualifier rqSr = new RowQualifier(this.getMmMtlRcptSr2());
        rqSr.setWhereClause("DocId='" + doc + "' and ItmId='" + itm + "'");
        Row[] rsr = this.getMmMtlRcptSr2().getFilteredRows(rqSr);
        for (Row row : rsr) {
            if (row.getAttribute("DocId").toString().equals(doc) && row.getAttribute("ItmId").toString().equals(itm))
                row.remove();
        }
        this.getMmMtlRcptSr2().executeQuery();
        this.getMmMtlRcptSr1().executeQuery();

        RowQualifier rqBin = new RowQualifier(this.getMmMtlRcptBin2());
        rqBin.setWhereClause("DocId='" + doc + "' and ItmId='" + itm + "'");
        Row[] rbin = this.getMmMtlRcptBin2().getFilteredRows(rqBin);
        for (Row row : rbin) {
            if (row.getAttribute("DocId").toString().equals(doc) && row.getAttribute("ItmId").toString().equals(itm))
                row.remove();
        }
        this.getMmMtlRcptBin2().executeQuery();
        this.getMmMtlRcptBin1().executeQuery();

        RowQualifier rqlot = new RowQualifier(this.getMmMtlRcptLot2());
        rqlot.setWhereClause("DocId='" + doc + "' and ItmId='" + itm + "'");
        Row[] rlot = this.getMmMtlRcptLot2().getFilteredRows(rqlot);
        for (Row row : rlot) {
            if (row.getAttribute("DocId").toString().equals(doc) && row.getAttribute("ItmId").toString().equals(itm))
                row.remove();
        }
        this.getMmMtlRcptLot2().executeQuery();
        this.getMmMtlRcptLot1().executeQuery();
    }

    public Integer CheckRcptStatus() {
        return (Integer) this.getMmMtlRcpt().getCurrentRow().getAttribute("RcptStat");
    }

    public String isPoSupplierCompatible() {
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        Row currRcpt = rcptVo.getCurrentRow();

        //Row currItm=itmVo.getCurrentRow();
        //Row currGeSrc=gesrc.getCurrentRow();
        String CldId = currRcpt.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currRcpt.getAttribute("SlocId");
        String OrgId = currRcpt.getAttribute("OrgId").toString();
        String eoId = currRcpt.getAttribute("EoIdSrc").toString();
        Integer shdlNo = 1;

        //  RowQualifier rq = new RowQualifier(this.getLovPoNo());  17/04/2015
        RowQualifier rq = new RowQualifier(this.getLovPurOrder());
        rq.setWhereClause("DocId='" + currRcpt.getAttribute("TransSrcDocId").toString() + "' and SlocId=" + SlocId +
                          " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");
        // Row[] porow = this.getLovPoNo().getFilteredRows(rq);//  17/04/2015
        Row[] porow = this.getLovPurOrder().getFilteredRows(rq);
        if (porow.length > 0) {
            String eo = porow[0].getAttribute("EoId").toString();
            if (eo.equalsIgnoreCase(eoId)) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return "N";
        }
    }


    /**
     * Check if any Item Quantity is present for QC or not
     */
    public String chkIsAnyItmForQc() {
        Row curRcpt = this.getMmMtlRcpt().getCurrentRow();

        String docId = curRcpt.getAttribute("DocId").toString();
        Row[] filRw = this.getMmMtlRcptItm2().getFilteredRows("DocId", docId);
        Number zero = new Number(0);
        for (Row rw : filRw) {
            Number rcptQty = (Number) rw.getAttribute("RcptQtyBs");
            if (rcptQty.compareTo(zero) != 0)
                return "Y";

        }
        return "N";
    }


    public void SetOrgSrc(String org) {
        this.getMmMtlRcpt().getCurrentRow().setAttribute("OrgIdSrc", org);
    }


    public void LinkItemtoOrganisation(String CldId, Integer SlocId, String OrgId, String HoOrgId, Integer UsrId) {
        Row r = this.getMmMtlRcpt().getCurrentRow();
        if (r.getAttribute("TransSrcDocId") != null) {
            _log.info("Param=>" + CldId + " " + SlocId + " " + HoOrgId + " " + OrgId + " " +
                      r.getAttribute("TransSrcDocId") + " ");
            Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_ITM_ORG_TRF(?,?,?,?,?,?)", new Object[] {
                                                        CldId, SlocId, HoOrgId, OrgId, r.getAttribute("TransSrcDocId"),
                                                        UsrId
            }));
            //  this.getLovItmId().executeQuery();
            //  this.getLovItmForDisp().executeQuery();
        }
    }

    public String CheckIfAnyDocumentPresent() {
        Row[] srcRw = this.getMmMtlRcptSrc().getAllRowsInRange();
        _log.info("Length in Src=" + srcRw.length);
        if (srcRw.length > 0)
            return "Y";
        else
            return "N";
    }


    public void setTransValueToNull() {
        Row r = this.getMmMtlRcpt().getCurrentRow();
        r.setAttribute("TransSrcDocNo", null);
        r.setAttribute("TransSrcDocId", null);
        r.setAttribute("TransSrcDate", null);
        r.setAttribute("TransItmUom", null);
    }

    /**
     * Container's getter for MmMtlRcptItm3.
     * @return MmMtlRcptItm3
     */
    public MmMtlRcptItmVOImpl getMmMtlRcptItm3() {
        return (MmMtlRcptItmVOImpl) findViewObject("MmMtlRcptItm3");
    }

    /**
     * Validate PO/CPO Quantity if Tolerance Chk is not applicable on Organisation
     */
    public String validatePoRcptQty(Number rcptQty) {
        Number pendqty = new Number(0);
        if (this.getMmMtlRcptItm().getCurrentRow().getAttribute("PendQty") != null)
            pendqty =
                (Number) ((Number) this.getMmMtlRcptItm().getCurrentRow().getAttribute("PendQty")).round(getGlblRoundQtyDigit());

        if (pendqty.compareTo((Number) rcptQty.round(getGlblRoundQtyDigit())) >= 0)
            return "Y";
        else
            return "N";
    }

    /**
     * Function is used to update TmpRcptQty for DlvSchdl according to change in RcptQty in GE Itm.
     */
    public void updateTmpRcptQty(Number oldRcptQty, Number newRcptQty) {
        Number oldQty = new Number(0);
        Number newQty = new Number(0);
        if (oldRcptQty != null)
            oldQty = (Number) oldRcptQty.round(getGlblRoundQtyDigit());
        if (newRcptQty != null)
            newQty = (Number) newRcptQty.round(getGlblRoundQtyDigit());
        Row curr = this.getMmMtlRcptItm().getCurrentRow();
        //first substract old qty from tmp qty AND Add new qty to tmp qty
        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
        rq.setWhereClause("CldId='" + curr.getAttribute("CldId") + "' and SlocId=" + curr.getAttribute("SlocId") +
                          " and OrgId='" + curr.getAttribute("OrgId") + "' and DocId='" +
                          curr.getAttribute("DocIdSrc") + "' and ItmId='" + curr.getAttribute("ItmId") +
                          "' and WhId='" + curr.getAttribute("WhId") + "' and ItmUom='" + curr.getAttribute("ItmUom") +
                          "' and DlvSchdlNo=" + curr.getAttribute("DlvSchdlNo"));
        _log.info("Query=" + rq.getExprStr());
        Row dsRow[] = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
        _log.info("No. of filtered Rows=" + dsRow.length);
        if (dsRow.length > 0) {
            Number tmpQty = new Number(0);
            if (dsRow[0].getAttribute("TmpRcptQty") != null)
                tmpQty = (Number) ((Number) dsRow[0].getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());

            //    dsRow[0].setAttribute("TmpRcptQty", tmpQty.subtract(oldQty));
            dsRow[0].setAttribute("TmpRcptQty", ((tmpQty.subtract(oldQty)).add(newQty)).round(getGlblRoundQtyDigit()));
        }
    }

    public void setBalandTmpQty() {
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        Integer doctype = Integer.parseInt(rcptRw.getAttribute("TransSrcDocType").toString());

        String docId = (String) rcptRw.getAttribute("DocId");
        String whId = (String) rcptRw.getAttribute("WhId");
        String cldId = (String) rcptRw.getAttribute("CldId");
        Integer slocId = (Integer) rcptRw.getAttribute("SlocId");
        String orgId = (String) rcptRw.getAttribute("OrgId");
        Row[] frItm = getMmMtlRcptItm3().getFilteredRows("DocId", docId);
        _log.info("No. of items=" + frItm.length);
        if (doctype.compareTo(SOURCE_DOC_TYPE_PO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0) {
            for (Row curr : frItm) {
                RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());
                rq.setWhereClause("CldId='" + curr.getAttribute("CldId") + "' and SlocId=" +
                                  curr.getAttribute("SlocId") + " and OrgId='" + curr.getAttribute("OrgId") +
                                  "' and DocId='" + curr.getAttribute("DocIdSrc") + "' and ItmId='" +
                                  curr.getAttribute("ItmId") + "' and WhId='" + curr.getAttribute("WhId") +
                                  "' and ItmUom='" + curr.getAttribute("ItmUom") + "' and DlvSchdlNo=" +
                                  curr.getAttribute("DlvSchdlNo"));
                Row dsRow[] = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);
                if (dsRow.length > 0) {
                    Number finalRcptQty = new Number(0);
                    if (curr.getAttribute("FinalRcptQty") != null)
                        finalRcptQty =
                            (Number) ((Number) curr.getAttribute("FinalRcptQty")).round(getGlblRoundQtyDigit());
                    Number tmpQty = new Number(0);
                    if (dsRow[0].getAttribute("TmpRcptQty") != null)
                        tmpQty = (Number) ((Number) dsRow[0].getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());
                    Number balQty = new Number(0);
                    if (dsRow[0].getAttribute("BalQty") != null)
                        balQty = (Number) ((Number) dsRow[0].getAttribute("BalQty")).round(getGlblRoundQtyDigit());
                    dsRow[0].setAttribute("BalQty", balQty.subtract(finalRcptQty));
                    dsRow[0].setAttribute("TmpRcptQty", (tmpQty.subtract(finalRcptQty)).round(getGlblRoundQtyDigit()));
                }
            }


        } else if (doctype.compareTo(SOURCE_DOC_TYPE_CPO) == 0) {
            /* for(Row curr : frItm)
                        {
                            RowQualifier rq=new RowQualifier(this.getMmCpoItm());
                            rq.setWhereClause("CldId='"+curr.getAttribute("CldId")+"' and SlocId="+curr.getAttribute("SlocId")+" and OrgId='"+curr.getAttribute("OrgId")+"' and DocId='"+curr.getAttribute("DocIdSrc")+"' and ItmId='"+curr.getAttribute("ItmId")+"' and ItmUom='"+curr.getAttribute("ItmUom")+"'");
                            Row dsRow[]=this.getMmCpoItm().getFilteredRows(rq);
                            if(dsRow.length>0)
                            {
                                    Number tmpQty=new Number(0);
                                if(dsRow[0].getAttribute("TmpRcptQty")!=null)
                                    tmpQty = (Number)dsRow[0].getAttribute("TmpRcptQty");
                                Number balQty=new Number(0);
                                if(dsRow[0].getAttribute("BalQty")!=null)
                                    balQty = (Number)dsRow[0].getAttribute("BalQty");
                                    dsRow[0].setAttribute("BalQty", balQty.subtract(tmpQty));
                                    dsRow[0].setAttribute("TmpRcptQty",new Number(0));
                            }
                        } */



            /*     //update LOT Price
                      Object ret =(Object)(callStoredFunction(Types.NUMERIC, "MM.MM_UPDT_LOT_PRICE(?,?,?,?,?)", new Object[] {cldId,slocId,orgId,whId,docId}));
                        System.out.println("Ret value by MM_UPDT_LOT_PRICE="+ret);  */
        }

    }

    public String chkItmTrfQty() {
        ViewObjectImpl geVo = this.getMmMtlRcpt();
        Row currGe = geVo.getCurrentRow();
        String CldId = currGe.getAttribute("CldId").toString();
        Integer SlocId = (Integer) currGe.getAttribute("SlocId");
        //String DocId=currGe.getAttribute("DocId").toString();
        RowQualifier rq = new RowQualifier(this.getViewTrfOrderItm());
        rq.setWhereClause("DocId='" + currGe.getAttribute("TransSrcDocId").toString() + "' and SlocId=" + SlocId +
                          " and CldId='" + CldId + "' and TrfQty>0");
        Row[] trfItmRw = this.getViewTrfOrderItm().getFilteredRows(rq);
        if (trfItmRw.length > 0)
            return "Y";
        else
            return "N";
    }

    /**
     * Method to populate the receipt item based on the CPO selected.
     * */
    public void populateRcptFromCpo(String OrgId, String CldId, Integer SlocId) {
        //        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        //        ViewObjectImpl rcptSrc = this.getMmMtlRcptSrc();
        //        ViewObjectImpl itmVo = this.getMmMtlRcptItm();
        //
        //
        //        String orgIdN = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        //        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        //        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        //        this.getViewOrgMMPrf().executeQuery();
        //        String qcFlag = "N";
        //        Row[] orgR = this.getViewOrgMMPrf().getFilteredRows("OrgId", orgIdN);
        //        if (orgR.length > 0) {
        //            if (orgR[0].getAttribute("UseQc") != null) {
        //                qcFlag = orgR[0].getAttribute("UseQc").toString();
        //            }
        //        }
        //
        //        _log.info(orgR.length + "   qcFlag    " + qcFlag);
        //
        //        Row currRc = rcptVo.getCurrentRow();
        //
        //        Row srcRow = rcptSrc.createRow();
        //        srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_CPO);
        //        srcRow.setAttribute("DocIdSrcDisp", currRc.getAttribute("TransSrcDocNo").toString());
        //        _log.info("DOC--" + currRc.getAttribute("TransSrcDocId").toString());
        //        srcRow.setAttribute("DocIdSrc", currRc.getAttribute("TransSrcDocId").toString());
        //        srcRow.setAttribute("DocDtSrc", currRc.getAttribute("TransSrcDate"));
        //        srcRow.setAttribute("DlvSchdlNo", 0);
        //        rcptSrc.insertRow(srcRow);
        //        rcptSrc.executeQuery();
        //
        //        RowQualifier rq = new RowQualifier(this.getMmCpoItm());
        //        rq.setWhereClause("DocId='" + currRc.getAttribute("TransSrcDocId").toString() + "' and SlocId=" + SlocId +
        //                          "  and CldId='" + CldId + "' and OrgId='" + OrgId + "'");
        //        Row[] scdlRw = this.getMmCpoItm().getFilteredRows(rq);
        //        _log.info("No of Rows--" + scdlRw.length);
        //
        //        if (scdlRw.length > 0) {
        //            for (Row curr : scdlRw) {
        //                Row itmRw = itmVo.createRow();
        //                _log.info("Row created in Itm");
        //                itmRw.setAttribute("DocIdSrc", currRc.getAttribute("TransSrcDocId").toString());
        //                itmRw.setAttribute("DocDtSrc", currRc.getAttribute("TransSrcDate"));
        //                itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
        //
        //                this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
        //                                                                 resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
        //                                                                 resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
        //                                                                 resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
        //                                                                 resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", curr.getAttribute("ItmId"));
        //                this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
        //                this.getLovItmForDisp().executeQuery();
        //
        //                Row[] itms =
        //                    this.getLovItmForDisp().getFilteredRows("ItmId",
        //                                                            curr.getAttribute("ItmId")); // change BL for tunning 02/09/2014
        //
        //                //  Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
        //                String itmUom = itms[0].getAttribute("UomBasic").toString();
        //                itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
        //                itmRw.setAttribute("ItmUomBs", itms[0].getAttribute("UomBasic").toString());
        //                Number fctr =
        //                    getUomConvFctr(CldId, SlocId, OrgId, curr.getAttribute("ItmUom").toString(), itmUom,
        //                                   curr.getAttribute("ItmId").toString());
        //
        //                if ("N".equalsIgnoreCase(qcFlag)) {
        //                    _log.info("organisation not using QC :::::::: ");
        //                    itmRw.setAttribute("QcReqdFlg", "N");
        //                } else if ("Y".equalsIgnoreCase(qcFlag)) {
        //                    _log.info("organisation using QC :::::::: ");
        //                    itmRw.setAttribute("QcReqdFlg", itms[0].getAttribute("QcReqdFlg").toString());
        //                }
        //                if (fctr != null) {
        //                    System.out.println("FCTR--" + fctr);
        //                } else {
        //                    fctr = new Number(1);
        //                }
        //                itmRw.setAttribute("UomConvFctr", fctr);
        //                Number ord = new Number(0);
        //                // Number tmp=new Number(0);
        //                if (curr.getAttribute("OrdQty") != null)
        //                    ord = (Number) curr.getAttribute("OrdQty");
        //
        //                itmRw.setAttribute("RcptQty", ord);
        //                itmRw.setAttribute("RcptQtyBs", ord.multiply(fctr));
        //                itmRw.setAttribute("PendQty", ord);
        //                itmRw.setAttribute("DlvNoteQty", ord);
        //                itmRw.setAttribute("FinalRcptQty", ord);
        //                itmRw.setAttribute("FinalRcptQtyBs", ord.multiply(fctr));
        //                itmVo.insertRow(itmRw);
        //            }
        //        }
        //        rcptSrc.executeQuery();
        //        itmVo.executeQuery();
        //        currRc.setAttribute("TransSrcDocNo", null);
        //        currRc.setAttribute("TransSrcDocId", null);
        //        currRc.setAttribute("TransSchdlNo", null);



        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptSrc = this.getMmMtlRcptSrc();
        ViewObjectImpl itmVo = this.getMmMtlRcptItm();
        String orgIdN = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        String qcFlag = "N";
        String consmablechk = "N";
        Row[] orgR = this.getViewOrgMMPrf().getFilteredRows("OrgId", orgIdN);
        if (orgR.length > 0) {
            if (orgR[0].getAttribute("UseQc") != null) {
                qcFlag = orgR[0].getAttribute("UseQc").toString();
            }
            if (orgR[0].getAttribute("AlwDirectConsm") != null) {
                consmablechk = orgR[0].getAttribute("AlwDirectConsm").toString();
            }

        }
        _log.info(orgR.length + "   qcFlag    " + qcFlag);
        Row currRc = rcptVo.getCurrentRow();

        String crSrc = "N";

        Integer shdlNo = 1;
        Object no = currRc.getAttribute("TransSchdlNo");

        if (no == null) {
            currRc.setAttribute("TransSchdlNo", 1);
        } else {
            shdlNo = Integer.parseInt(no.toString());
        }


        RowQualifier rq = new RowQualifier(this.getMMDraftPoDlvSchdl());

        //   if(this.isPoScheduled(currRc.getAttribute("TransSrcDocId").toString()).equals("Y")){

        rq.setWhereClause("DocId='" + currRc.getAttribute("TransSrcDocId").toString() + "' and DlvSchdlNo=" + shdlNo +
                          " and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and CldId='" + CldId + "'");

        /*    }else{

                    rq.setWhereClause("DocId='"+currRc.getAttribute("TransSrcDocId").toString()+"' and DlvSchdlNo=1 and SlocId="+SlocId+" and OrgId='"+OrgId+"' and CldId='"+CldId+"'");

            } */

        Row[] scdlRw = this.getMMDraftPoDlvSchdl().getFilteredRows(rq);

        _log.info("No of Rows--" + scdlRw.length);
        if (scdlRw.length > 0) {

            Row srcRow = rcptSrc.createRow();
            srcRow.setAttribute("DocTypeSrc", SOURCE_DOC_TYPE_CPO);
            srcRow.setAttribute("DocIdSrcDisp", currRc.getAttribute("TransSrcDocNo").toString());
            _log.info("DOC--" + currRc.getAttribute("TransSrcDocId").toString() + "--SCHDL No-" + shdlNo);
            srcRow.setAttribute("DocIdSrc", currRc.getAttribute("TransSrcDocId").toString());
            srcRow.setAttribute("DocDtSrc", currRc.getAttribute("TransSrcDate"));
            srcRow.setAttribute("DlvSchdlNo", shdlNo);
            Row[] filPoRw = this.getLovPoNo().getFilteredRows("DocId", currRc.getAttribute("TransSrcDocId").toString());

            rcptSrc.insertRow(srcRow);


            for (Row curr : scdlRw) {
                String cnsmableFlg = "N";
                this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                 resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", curr.getAttribute("ItmId"));
                this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
                this.getLovItmForDisp().executeQuery();
                Row[] itms = this.getLovItmForDisp().getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                //   Row[] itms=this.getLovItmId().getFilteredRows("ItmId", curr.getAttribute("ItmId"));  // change BL for tunning 02/09/2014
                if (itms[0].getAttribute("ConsumableFlg") != null) {
                    cnsmableFlg = itms[0].getAttribute("ConsumableFlg").toString();
                }
                _log.info(cnsmableFlg + "   cnsmableFlg  " + consmablechk);
                if (itms[0].getAttribute("SrvcItmFlg") != null) { // change for service item not recreipt 17/09/2014
                    if ("N".equalsIgnoreCase(itms[0].getAttribute("SrvcItmFlg").toString())) { // change for service item not recreipt 17/09/2014
                        if ("N".equalsIgnoreCase(cnsmableFlg) || ("Y".equalsIgnoreCase(cnsmableFlg) && "N".equalsIgnoreCase(consmablechk))) { //"Y".equalsIgnoreCase(consmablechk) &&

                            Row itmRw = itmVo.createRow();
                            _log.info("Row created in Itm");
                            itmRw.setAttribute("ItmId", curr.getAttribute("ItmId"));
                            String itmUom = itms[0].getAttribute("UomBasic").toString();
                            itmRw.setAttribute("ItmUom", curr.getAttribute("ItmUom"));
                            itmRw.setAttribute("ItmUomBs", itmUom);
                            //  itmRw.setAttribute("UomConvFctr",new Number(0));PendQty PendQtyBs RcptQty RcptQtyBs ReturnQty ReturnQtyBs DlvQty DlvQtyBs DlvSchdlNo UomConvFctr
                            //         Number fct=getUomConvFctr(currGe.getAttribute("CldId").toString(), Integer.parseInt(currGe.getAttribute("SlocId").toString()), currGe.getAttribute("OrgId").toString(), curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString());
                            Number fctr = getUomConvFctr(CldId, SlocId, OrgId, curr.getAttribute("ItmUom").toString(), itms[0].getAttribute("UomBasic").toString(),

                                                         curr.getAttribute("ItmId").toString());

                            if ("N".equalsIgnoreCase(qcFlag)) {
                                _log.info("organisation not using QC :::::::: ");
                                itmRw.setAttribute("QcReqdFlg", "N");
                            } else if ("Y".equalsIgnoreCase(qcFlag)) {
                                _log.info("organisation using QC :::::::: ");
                                itmRw.setAttribute("QcReqdFlg", itms[0].getAttribute("QcReqdFlg").toString());

                            }
                            if (fctr != null) {
                                System.out.println("FCTR--" + fctr);

                            } else {
                                fctr = new Number(1);
                            }
                            itmRw.setAttribute("UomConvFctr", (Number) fctr.round(getGlblRoundQtyDigit()));
                            Number bal = new Number(0);
                            Number tmp = new Number(0);
                            Number totStk =
                                (Number) this.getItmTotalStk(CldId, SlocId, OrgId,
                                                             curr.getAttribute("ItmId").toString(),
                                                             currRc.getAttribute("WhId").toString(),
                                                             Integer.parseInt(currRc.getAttribute("FyId").toString()));


                            if (curr.getAttribute("BalQty") != null)
                                bal = (Number) ((Number) curr.getAttribute("BalQty")).round(getGlblRoundQtyDigit());
                            if (curr.getAttribute("TmpRcptQty") != null)
                                tmp = (Number) ((Number) curr.getAttribute("TmpRcptQty")).round(getGlblRoundQtyDigit());
                            itmRw.setAttribute("ItmCurrStk", totStk);
                            Number totatQty = (Number) (bal.subtract(tmp)).round(getGlblRoundQtyDigit());
                            itmRw.setAttribute("PendQty", totatQty);
                            itmRw.setAttribute("RcptQty", totatQty);
                            itmRw.setAttribute("RcptQtyBs",
                                               (Number) (totatQty.multiply((Number) fctr.round(getGlblRoundQtyDigit())).round(getGlblRoundQtyDigit())));
                            itmRw.setAttribute("PendQty", totatQty);
                            itmRw.setAttribute("DlvNoteQty", totatQty);
                            itmRw.setAttribute("FinalRcptQty", totatQty);
                            itmRw.setAttribute("FinalRcptQtyBs",
                                               (Number) (totatQty.multiply((Number) fctr.round(getGlblRoundQtyDigit())).round(getGlblRoundQtyDigit())));
                            itmRw.setAttribute("DlvNoteQty", totatQty);
                            itmRw.setAttribute("DlvSchdlNo", shdlNo);
                            itmRw.setAttribute("DocIdSrc", currRc.getAttribute("TransSrcDocId").toString());
                            itmRw.setAttribute("DocDtSrc", currRc.getAttribute("TransSrcDate"));
                            itmVo.insertRow(itmRw);
                            updateTmpRcptQty(new Number(0), totatQty);
                        }
                    }
                }
            }
            rcptSrc.executeQuery();
            itmVo.executeQuery();
            currRc.setAttribute("TransSrcDocNo", null);
            currRc.setAttribute("TransSrcDocId", null);
            currRc.setAttribute("TransSchdlNo", null);
        } else {
            //  FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Invalid Purchase Order Details.","Invalid Purchase Order Details."));
            FacesContext.getCurrentInstance().addMessage(null,
                                                         new FacesMessage(FacesMessage.SEVERITY_ERROR,
                                                                          resolvElDCMsg("#{bundle['MSG.793']}").toString(),
                                                                          resolvElDCMsg("#{bundle['MSG.793']}").toString()));
        }
        // }


    }

    /**
     * Container's getter for ViewMmCpoItm.
     * @return ViewMmCpoItm
     */
    public ViewObjectImpl getViewMmCpoItm() {
        return (ViewObjectImpl) findViewObject("ViewMmCpoItm");
    }

    /**
     * Container's getter for LovCpoNoVO.
     * @return LovCpoNoVO
     */
    public ViewObjectImpl getLovCpoNoVO() {
        return (ViewObjectImpl) findViewObject("LovCpoNoVO");
    }

    /**
     * Container's getter for MmCpoItm.
     * @return MmCpoItm
     */
    public ViewObjectImpl getMmCpoItm() {
        return (ViewObjectImpl) findViewObject("MmCpoItm");
    }

    public String validateRejQty(Number qty) {
        Number rwk = new Number(0);
        Number rcp = new Number(0);
        Number sum = new Number(0);
        Number pend = new Number(0);
        Row r = this.getMmMtlRcptItm().getCurrentRow();
        if (r.getAttribute("RwkQty") != null)
            rwk = (Number) ((Number) r.getAttribute("RwkQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("RcptQty") != null)
            rcp = (Number) ((Number) r.getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("PendQty") != null)
            pend = (Number) ((Number) r.getAttribute("PendQty")).round(getGlblRoundQtyDigit());
        sum = (Number) (rwk.add(rcp).add(qty)).round(getGlblRoundQtyDigit());
        if (sum.compareTo(pend) > 0)
            return "N";
        else
            return "Y";
    }


    public String validateRwkQty(Number qty) {
        Number rej = new Number(0);
        Number rcp = new Number(0);
        Number sum = new Number(0);
        Number pend = new Number(0);
        Row r = this.getMmMtlRcptItm().getCurrentRow();
        if (r.getAttribute("RejQty") != null)
            rej = (Number) ((Number) r.getAttribute("RejQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("RcptQty") != null)
            rcp = (Number) ((Number) r.getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("PendQty") != null)
            pend = (Number) ((Number) r.getAttribute("PendQty")).round(getGlblRoundQtyDigit());
        sum = (Number) (rej.add(rcp).add(qty)).round(getGlblRoundQtyDigit());
        if (sum.compareTo(pend) > 0)
            return "N";
        else
            return "Y";
    }

    public String validateRcptQty(Number qty) {
        Number rwk = new Number(0);
        Number rej = new Number(0);
        Number sum = new Number(0);
        Number pend = new Number(0);
        Row r = this.getMmMtlRcptItm().getCurrentRow();
        if (r.getAttribute("RwkQty") != null)
            rwk = (Number) ((Number) r.getAttribute("RwkQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("RejQty") != null)
            rej = (Number) ((Number) r.getAttribute("RejQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("PendQty") != null)
            pend = (Number) ((Number) r.getAttribute("PendQty")).round(getGlblRoundQtyDigit());
        sum = (Number) (rwk.add(rej).add(qty)).round(getGlblRoundQtyDigit());
        if (sum.compareTo(pend) > 0)
            return "N";
        else
            return "Y";
    }

    public Integer insGlProvVou() {
        Row r = this.getMmMtlRcpt().getCurrentRow();
        Integer slocId = (Integer) r.getAttribute("SlocId");
        String cldId = (String) r.getAttribute("CldId");
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String orgId = (String) r.getAttribute("OrgId");
        String docId = (String) r.getAttribute("DocId");
        Integer curr = (Integer) r.getAttribute("CurrIdSp");
        System.out.println("CurrIdSp=" + curr);
        Integer usr = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        _log.info("No of Rows in Eo Vw=" + this.getLovSupplier().getEstimatedRowCount());
        RowQualifier rq = new RowQualifier(this.getLovSupplier());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId + "' and EoId=" +
                          r.getAttribute("EoIdSrc") + " and HoOrgId='" + hoOrgId + "'");
        Row[] fr = this.getLovSupplier().getFilteredRows(rq);
        Number currconv = new Number(1);
        if (fr.length > 0)
            if (fr[0].getAttribute("ConvFctr") != null)
                currconv = (Number) ((Number) fr[0].getAttribute("ConvFctr")).round(getGlblRoundCurrRateDigit());
        _log.info("CurrConvFctr=" + currconv);
        Integer ret = null;
        ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_GL_PROV (?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                            slocId, cldId, hoOrgId, orgId, docId, r.getAttribute("DocDt"), curr,
                                            currconv, usr, 0
        }));
        _log.info("Return from VouEntry=" + ret);
        return ret;
    }


    /**
     * Container's getter for LovSupplier.
     * @return LovSupplier
     */
    public ViewObjectImpl getLovSupplier() {
        return (ViewObjectImpl) findViewObject("LovSupplier");
    }

    /**
     * Container's getter for LovMmKitProdNo.
     * @return LovMmKitProdNo
     */
    public ViewObjectImpl getLovMmKitProdNo() {
        return (ViewObjectImpl) findViewObject("LovMmKitProdNo");
    }

    /**
     * Container's getter for LovWhSecUsr.
     * @return LovWhSecUsr
     */
    public ViewObjectImpl getLovWhSecUsr() {
        return (ViewObjectImpl) findViewObject("LovWhSecUsr");
    }

    /**
     * Container's getter for MmMtlGeItm.
     * @return MmMtlGeItm
     */
    public ViewObjectImpl getMmMtlGeItm() {
        return (ViewObjectImpl) findViewObject("MmMtlGeItm");
    }


    public String validateRejQtyForGeRcvQty(Number qty) {
        Number newRej = (Number) qty.round(getGlblRoundQtyDigit());

        Number geRcptQty = new Number(0);
        Row r = this.getMmMtlRcptItm().getCurrentRow();


        if (r.getAttribute("transGeRcptQty") != null)
            geRcptQty = (Number) ((Number) r.getAttribute("transGeRcptQty")).round(getGlblRoundQtyDigit());
        if (newRej.compareTo(geRcptQty) > 0)
            return "N";
        else
            return "Y";

    }

    public String validateRwkQtyForGeRcvQty(Number qty) {
        Number newRwk = (Number) qty.round(getGlblRoundQtyDigit());

        Number geRcptQty = new Number(0);
        Row r = this.getMmMtlRcptItm().getCurrentRow();

        if (r.getAttribute("transGeRcptQty") != null)
            geRcptQty = (Number) ((Number) r.getAttribute("transGeRcptQty")).round(getGlblRoundQtyDigit());
        if (newRwk.compareTo(geRcptQty) > 0)
            return "N";
        else
            return "Y";

    }


    public String validateRcptQtyForGeRcvQty(Number qty) {
        Number newRcpt = (Number) qty.round(getGlblRoundQtyDigit());

        Number geRcptQty = new Number(0);
        Row r = this.getMmMtlRcptItm().getCurrentRow();
        System.out.println("current Item=" + r.getAttribute("ItmId"));
        if (r.getAttribute("transGeRcptQty") != null)
            geRcptQty = (Number) ((Number) r.getAttribute("transGeRcptQty")).round(getGlblRoundQtyDigit());
        _log.info("GeRcptQty=" + geRcptQty);
        if (newRcpt.compareTo(geRcptQty) > 0)
            return "N";
        else
            return "Y";

    }


    public void updateRcvQtyFromRej(Number oldRejQty, Number newRejQty) {
        Number newRej = (Number) newRejQty.round(getGlblRoundQtyDigit());
        Number oldRej = (Number) oldRejQty.round(getGlblRoundQtyDigit());
        Number rwk = new Number(0);
        Number rcp = new Number(0);
        Number diff = new Number(0);
        Number geRcptQty = new Number(0);
        Row r = this.getMmMtlRcptItm().getCurrentRow();
        if (r.getAttribute("RwkQty") != null)
            rwk = (Number) ((Number) r.getAttribute("RwkQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("RcptQty") != null)
            rcp = (Number) ((Number) r.getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("transGeRcptQty") != null)
            geRcptQty = (Number) ((Number) r.getAttribute("transGeRcptQty")).round(getGlblRoundQtyDigit());

        if (newRej.compareTo(oldRej) > 0) {
            diff = (Number) (newRej.subtract(oldRej)).round(getGlblRoundQtyDigit());
            if (diff.compareTo(rcp) > 0) {
                r.setAttribute("RcptQty", 0);
                r.setAttribute("RwkQty", (Number) (rwk.subtract(diff.subtract(rcp))).round(getGlblRoundQtyDigit()));
            } else
                r.setAttribute("RcptQty", (Number) (rcp.subtract(diff)).round(getGlblRoundQtyDigit()));
        } else {
            diff = (Number) (oldRej.subtract(newRej)).round(getGlblRoundQtyDigit());
            r.setAttribute("RcptQty", (Number) (rcp.add(diff)).round(getGlblRoundQtyDigit()));
        }
    }

    public void updateRcvQtyFromRwk(Number oldRwkQty, Number newRwkQty) {
        Number newRwk = (Number) newRwkQty.round(getGlblRoundQtyDigit());
        Number oldRwk = (Number) oldRwkQty.round(getGlblRoundQtyDigit());
        Number rej = new Number(0);
        Number rcp = new Number(0);
        Number diff = new Number(0);
        Number geRcptQty = new Number(0);
        Row r = this.getMmMtlRcptItm().getCurrentRow();
        if (r.getAttribute("RejQty") != null)
            rej = (Number) ((Number) r.getAttribute("RejQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("RcptQty") != null)
            rcp = (Number) ((Number) r.getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("transGeRcptQty") != null)
            geRcptQty = (Number) ((Number) r.getAttribute("transGeRcptQty")).round(getGlblRoundQtyDigit());

        if (newRwk.compareTo(oldRwk) > 0) {
            diff = (Number) (newRwk.subtract(oldRwk)).round(getGlblRoundQtyDigit());
            if (diff.compareTo(rcp) > 0) {
                r.setAttribute("RcptQty", 0);
                r.setAttribute("RejQty", (Number) (rej.subtract(diff.subtract(rcp))).round(getGlblRoundQtyDigit()));
            } else
                r.setAttribute("RcptQty", (Number) (rcp.subtract(diff)).round(getGlblRoundQtyDigit()));
        } else {
            diff = (Number) (oldRwk.subtract(newRwk)).round(getGlblRoundQtyDigit());
            r.setAttribute("RcptQty", (Number) (rcp.add(diff)).round(getGlblRoundQtyDigit()));
        }
    }


    public void updateRejQtyFromRcv(Number oldRcvQty, Number newRcvQty) {
        Number newRcv = (Number) newRcvQty.round(getGlblRoundQtyDigit());
        Number oldRcv = (Number) oldRcvQty.round(getGlblRoundQtyDigit());
        Number rej = new Number(0);
        Number rwk = new Number(0);
        Number diff = new Number(0);
        Number geRcptQty = new Number(0);
        Row r = this.getMmMtlRcptItm().getCurrentRow();
        if (r.getAttribute("RejQty") != null)
            rej = (Number) ((Number) r.getAttribute("RejQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("RwkQty") != null)
            rwk = (Number) ((Number) r.getAttribute("RwkQty")).round(getGlblRoundQtyDigit());
        if (r.getAttribute("transGeRcptQty") != null)
            geRcptQty = (Number) ((Number) r.getAttribute("transGeRcptQty")).round(getGlblRoundQtyDigit());

        if (newRcv.compareTo(oldRcv) > 0) {
            diff = (Number) (newRcv.subtract(oldRcv)).round(getGlblRoundQtyDigit());
            if (diff.compareTo(rej) > 0) {
                r.setAttribute("RejQty", 0);
                r.setAttribute("RwkQty", (Number) (rwk.subtract(diff.subtract(rej))).round(getGlblRoundQtyDigit()));
            } else
                r.setAttribute("RejQty", (Number) (rej.subtract(diff)).round(getGlblRoundQtyDigit()));
        } else {
            diff = (Number) (oldRcv.subtract(newRcv)).round(getGlblRoundQtyDigit());
            r.setAttribute("RejQty", (Number) (rej.add(diff)).round(getGlblRoundQtyDigit()));
        }
    }

    public String checkAnyFinalRcptQtyPresent(String CldId, Integer SlocId, String OrgId) {
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        Row currRcpt = rcptVo.getCurrentRow();
        String ret = "Y";
        try {
            ret = (callStoredFunction(Types.VARCHAR, "MM.MM_IS_FNL_RCPT_QTY_PRSNT(?,?,?,?)", new Object[] {
                                      currRcpt.getAttribute("CldId"),
                                      Integer.parseInt(currRcpt.getAttribute("SlocId").toString()),
                                      currRcpt.getAttribute("OrgId"), currRcpt.getAttribute("DocId")
            }).toString());
        } catch (Exception e) {
            e.printStackTrace();
        }

        System.out.println("ret : " + ret);

        return ret;
    }


    public String doCrtProvVourOnRcpt() {
        String ret = "N";
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        Row[] r =
            this.getViewOrgMMPrf().getFilteredRows("OrgId", this.getMmMtlRcpt().getCurrentRow().getAttribute("OrgId"));
        if (r.length > 0)
            if (r[0].getAttribute("CrtProvVouOnRcpt") != null)
                if (r[0].getAttribute("CrtProvVouOnRcpt").toString().equals("Y")) {
                    String flg = "N";
                    Row[] filRw =
                        this.getMmMtlRcptItm().getFilteredRows("DocId",
                                                               this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId"));
                    Number zero = new Number(0);
                    for (Row rw : filRw) {
                        Number rcptQty = (Number) rw.getAttribute("FinalRcptQtyBs");
                        if (rcptQty.compareTo(zero) != 0) {
                            flg = "Y";
                            break;
                        }
                    }
                    if (flg.equals("Y"))
                        ret = "Y";
                }
        return ret;
    }

    public void updateTmpRcptQtyFromRej(Number oldRejQty, Number newRejQty) {
        Number oldsum = new Number(0);
        Number newsum = new Number(0);
        Number rcpt = new Number(0);
        Number rwk = new Number(0);
        if (this.getMmMtlRcptItm().getCurrentRow().getAttribute("RcptQty") != null)
            rcpt =
                (Number) ((Number) this.getMmMtlRcptItm().getCurrentRow().getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
        if (this.getMmMtlRcptItm().getCurrentRow().getAttribute("RwkQty") != null)
            rwk =
                (Number) ((Number) this.getMmMtlRcptItm().getCurrentRow().getAttribute("RwkQty")).round(getGlblRoundQtyDigit());
        oldsum =
            (Number) (rcpt.add(rwk.add((Number) oldRejQty.round(getGlblRoundQtyDigit())))).round(getGlblRoundQtyDigit());
        newsum =
            (Number) (rcpt.add(rwk.add((Number) newRejQty.round(getGlblRoundQtyDigit())))).round(getGlblRoundQtyDigit());
        updateTmpRcptQty(oldsum, newsum);
    }

    public void updateTmpRcptQtyForRwk(Number oldRwkQty, Number newRwkQty) {
        Number oldsum = new Number(0);
        Number newsum = new Number(0);
        Number rcpt = new Number(0);
        Number rej = new Number(0);
        if (this.getMmMtlRcptItm().getCurrentRow().getAttribute("RcptQty") != null)
            rcpt =
                (Number) ((Number) this.getMmMtlRcptItm().getCurrentRow().getAttribute("RcptQty")).round(getGlblRoundQtyDigit());
        if (this.getMmMtlRcptItm().getCurrentRow().getAttribute("RejQty") != null)
            rej =
                (Number) ((Number) this.getMmMtlRcptItm().getCurrentRow().getAttribute("RejQty")).round(getGlblRoundQtyDigit());
        oldsum =
            (Number) (rcpt.add(rej.add((Number) oldRwkQty.round(getGlblRoundQtyDigit())))).round(getGlblRoundQtyDigit());
        newsum =
            (Number) (rcpt.add(rej.add((Number) newRwkQty.round(getGlblRoundQtyDigit())))).round(getGlblRoundQtyDigit());
        updateTmpRcptQty(oldsum, newsum);
    }

    public void updateTmpRcptQtyForRcpt(Number oldRcptQty, Number newRcptQty) {
        Number oldsum = new Number(0);
        Number newsum = new Number(0);
        Number rwk = new Number(0);
        Number rej = new Number(0);
        if (this.getMmMtlRcptItm().getCurrentRow().getAttribute("RwkQty") != null)
            rwk =
                (Number) ((Number) this.getMmMtlRcptItm().getCurrentRow().getAttribute("RwkQty")).round(getGlblRoundQtyDigit());
        if (this.getMmMtlRcptItm().getCurrentRow().getAttribute("RejQty") != null)
            rej =
                (Number) ((Number) this.getMmMtlRcptItm().getCurrentRow().getAttribute("RejQty")).round(getGlblRoundQtyDigit());
        oldsum =
            (Number) (rwk.add(rej.add((Number) oldRcptQty.round(getGlblRoundQtyDigit())))).round(getGlblRoundQtyDigit());
        newsum =
            (Number) (rwk.add(rej.add((Number) newRcptQty.round(getGlblRoundQtyDigit())))).round(getGlblRoundQtyDigit());
        updateTmpRcptQty(oldsum, newsum);
    }

    public void callrcptQtyVCE(Number oldQtyBs, Number newQtyBs) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        Number oldQtySp =
            (Number) (((Number) oldQtyBs.round(getGlblRoundQtyDigit())).divide(fctr)).round(getGlblRoundQtyDigit());
        Number newQtySp =
            (Number) (((Number) newQtyBs.round(getGlblRoundQtyDigit())).divide(fctr)).round(getGlblRoundQtyDigit()); //  newQtyBs.divide(fctr);
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        Integer doctype = Integer.parseInt(rcptRw.getAttribute("TransSrcDocType").toString());
        if (doctype.compareTo(SOURCE_DOC_TYPE_PO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0) {
            if (newQtyBs != null) {
                String paramGeChk = resolvEl("#{pageFlowScope.GLBL_ORG_GE_CHK}");
                if (paramGeChk.equalsIgnoreCase("N")) {
                    updateTmpRcptQtyForRcpt(oldQtySp, newQtySp);
                } else {
                    updateRejQtyFromRcv(oldQtySp, newQtySp);
                }
            }
        }
    }

    public void callrejQtyVCE(Number oldQtyBs, Number newQtyBs) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        //        Number oldQtySp = oldQtyBs.divide(fctr);
        //        Number newQtySp = newQtyBs.divide(fctr);

        Number oldQtySp =
            (Number) (((Number) oldQtyBs.round(getGlblRoundQtyDigit())).divide(fctr)).round(getGlblRoundQtyDigit());
        Number newQtySp =
            (Number) (((Number) newQtyBs.round(getGlblRoundQtyDigit())).divide(fctr)).round(getGlblRoundQtyDigit()); //  newQtyBs.divide(fctr);
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        Integer doctype = Integer.parseInt(rcptRw.getAttribute("TransSrcDocType").toString());
        if (doctype.compareTo(SOURCE_DOC_TYPE_PO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0) {
            if (newQtyBs != null) {
                String paramGeChk = resolvEl("#{pageFlowScope.GLBL_ORG_GE_CHK}");
                if (paramGeChk.equalsIgnoreCase("N")) {
                    updateTmpRcptQtyFromRej(oldQtySp, newQtySp);
                } else {
                    updateRcvQtyFromRej(oldQtySp, newQtySp);
                }
            }
        }
    }

    public void callrwkQtyVCE(Number oldQtyBs, Number newQtyBs) {
        Integer rnd = 2;
        Object r = resolvElobj("#{pageFlowScope.GLBL_QTY_DIGIT}");
        if (r != null) {
            rnd = Integer.parseInt(r.toString());
        }
        Row itmRw = this.getMmMtlRcptItm().getCurrentRow();
        Number fctr = (Number) ((Number) itmRw.getAttribute("UomConvFctr")).round(getGlblRoundQtyDigit());
        //        Number oldQtySp = oldQtyBs.divide(fctr);
        //        Number newQtySp = newQtyBs.divide(fctr);
        Number oldQtySp =
            (Number) (((Number) oldQtyBs.round(getGlblRoundQtyDigit())).divide(fctr)).round(getGlblRoundQtyDigit());
        Number newQtySp =
            (Number) (((Number) newQtyBs.round(getGlblRoundQtyDigit())).divide(fctr)).round(getGlblRoundQtyDigit()); //  newQtyBs.divide(fctr);
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        Integer doctype = Integer.parseInt(rcptRw.getAttribute("TransSrcDocType").toString());
        if (doctype.compareTo(SOURCE_DOC_TYPE_PO) == 0 || doctype.compareTo(SOURCE_DOC_TYPE_IMPORT_PO) == 0) {
            if (newQtyBs != null) {
                String paramGeChk = resolvEl("#{pageFlowScope.GLBL_ORG_GE_CHK}");
                if (paramGeChk.equalsIgnoreCase("N")) {
                    updateTmpRcptQtyForRwk(oldQtySp, newQtySp);
                } else {
                    updateRcvQtyFromRwk(oldQtySp, newQtySp);
                }
            }
        }
    }

    /**
     * Container's getter for LovCurrency.
     * @return LovCurrency
     */
    public ViewObjectImpl getLovCurrency() {
        return (ViewObjectImpl) findViewObject("LovCurrency");
    }

    public String chkRcptWOTPO() {
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String ret = "N";
        String wh_chk = (callStoredFunction(Types.VARCHAR, "MM.mm_chk_org_prf(?,?,?,?)", new Object[] {
                                            paramCldId, paramSlocId, paramOrgId, "ALW_RCPT_WO_PO"
        }).toString());


        if (wh_chk != null) {
            if ("Y".equalsIgnoreCase(wh_chk)) {
                ret = "Y";
            } else if ("N".equalsIgnoreCase(wh_chk)) {
                ret = "N";
            }
        } else {
            ret = "N";
        }
        _log.info(wh_chk + "     wh_chk     " + ret);
        return ret;

    }

    public String chkRWkableQtyPresent() {
        _log.info("chkRWkableQtyPresent    :::::::");
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptItmVo = this.getMmMtlRcptItm2();
        Row currR = rcptVo.getCurrentRow();
        String ret = "N";
        if (currR != null) {
            String docIdR = currR.getAttribute("DocId").toString();
            RowQualifier rqItm = new RowQualifier(rcptItmVo);
            rqItm.setWhereClause("CldId ='" + paramCldId + "' and SlocId = " + paramSlocId + " and OrgId = '" +
                                 paramOrgId + "' and DocId = '" + docIdR + "' ");
            Row[] rrItm = rcptItmVo.getFilteredRows(rqItm);
            _log.info(rqItm.getExprStr() + "  rowsss   " + rrItm.length);
            if (rrItm.length > 0) {
                for (Row rr : rrItm) {
                    if (rr.getAttribute("ItmId") != null) {
                        Number rwkQty = (Number) rr.getAttribute("RwkQty");
                        if (rwkQty.compareTo(new Number(0)) == 1) {
                            ret = "Y";
                        }
                    }
                }
            }
        }
        _log.info("ret  :::      " + ret);

        return ret;
    }

    public void setBindVarFrRmrkView() {
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        //String paramHoOrgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        _log.info("CLD_ID :" + paramCldId + "SlocId:   " + paramSlocId + "OrgId:" + paramOrgId + "DocId:");

        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        Row[] allrow = rcptVo.getAllRowsInRange();
        MmMtlRcptVORowImpl row = null;
        // Row currentRow=this.getMmMtlRcpt().getCurrentRow();
        if (allrow.length > 0) {
            Row soRow = allrow[0];
            System.out.println("Row is: " + soRow);
            row = (MmMtlRcptVORowImpl) soRow;

        } else {
            _log.info("  length  zero ");
        }
        _log.info("CLD_ID :" + paramCldId + "SlocId:   " + paramSlocId + "OrgId:" + paramOrgId + "DocId:" +
                  row.getDocId() + " doc type id   " + row.getRcptSrcType());
        ViewObjectImpl view = this.getViewWfRemark();
        view.setNamedWhereClauseParam("SlocIdBind", paramSlocId);
        view.setNamedWhereClauseParam("CldIdBind", paramCldId);
        view.setNamedWhereClauseParam("OrgIdBind", paramOrgId);
        view.setNamedWhereClauseParam("TxnDocIdBind", row.getDocId());
        view.setNamedWhereClauseParam("DocTypeId", row.getRcptSrcType()); //row.getRcptSrcType()
        view.executeQuery();

        ViewObjectImpl atch = this.getViewWfAttach();
        atch.setNamedWhereClauseParam("bindCldId", paramCldId);
        atch.setNamedWhereClauseParam("bindSlocId", paramSlocId);
        atch.setNamedWhereClauseParam("bindOrgId", paramOrgId);
        atch.setNamedWhereClauseParam("bindDocTxnId", row.getDocId());
        atch.setNamedWhereClauseParam("bindDocId", 18515);
        atch.setNamedWhereClauseParam("bindDocTypeId", null);
        atch.executeQuery();

        ViewObjectImpl atch1 = this.getViewWfAttach1();
        atch1.setNamedWhereClauseParam("bindCldId", paramCldId);
        atch1.setNamedWhereClauseParam("bindSlocId", paramSlocId);
        atch1.setNamedWhereClauseParam("bindOrgId", paramOrgId);
        atch1.setNamedWhereClauseParam("bindDocTxnId", row.getDocId());
        atch1.setNamedWhereClauseParam("bindDocId", 18515);
        atch1.setNamedWhereClauseParam("bindDocTypeId", null);
        atch1.executeQuery();


    }

    /**
     * Container's getter for LovItmForDisp.
     * @return LovItmForDisp
     */
    public ViewObjectImpl getLovItmForDisp() {
        return (ViewObjectImpl) findViewObject("LovItmForDisp");
    }

    /**
     * Container's getter for ViewWfAttach.
     * @return ViewWfAttach
     */
    public ViewObjectImpl getViewWfAttach() {
        return (ViewObjectImpl) findViewObject("ViewWfAttach");
    }

    /**
     * Container's getter for ViewWfRemark.
     * @return ViewWfRemark
     */
    public ViewObjectImpl getViewWfRemark() {
        return (ViewObjectImpl) findViewObject("ViewWfRemark");
    }

    /**
     * Container's getter for ViewWfAttach1.
     * @return ViewWfAttach1
     */
    public ViewObjectImpl getViewWfAttach1() {
        return (ViewObjectImpl) findViewObject("ViewWfAttach1");
    }

    /**
     * Container's getter for RcptTOWfAttachVL1.
     * @return RcptTOWfAttachVL1
     */
    public ViewLinkImpl getRcptTOWfAttachVL1() {
        return (ViewLinkImpl) findViewLink("RcptTOWfAttachVL1");
    }

    /**
     * Container's getter for MmMtlRcptOc1.
     * @return MmMtlRcptOc1
     */
    public ViewObjectImpl getMmMtlRcptOc1() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptOc1");
    }

    /**
     * Container's getter for MMRcptToMMMtlRcptOcVL.
     * @return MMRcptToMMMtlRcptOcVL
     */
    public ViewLinkImpl getMMRcptToMMMtlRcptOcVL() {
        return (ViewLinkImpl) findViewLink("MMRcptToMMMtlRcptOcVL");
    }

    /**
     * Container's getter for MmMtlRcptCalc.
     * @return MmMtlRcptCalc
     */
    public ViewObjectImpl getMmMtlRcptCalc() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptCalc");
    }

    /**
     * Container's getter for MMRcptToMmRcptCalcVL1.
     * @return MMRcptToMmRcptCalcVL1
     */
    public ViewLinkImpl getMMRcptToMmRcptCalcVL1() {
        return (ViewLinkImpl) findViewLink("MMRcptToMmRcptCalcVL1");
    }

    public Integer chkOcCoaId() {
        ViewObjectImpl srcVo = this.getMmMtlRcptSrc();
        Row rrSrc = srcVo.getCurrentRow();
        if (rrSrc.getAttribute("TransOcCoaId") == null) {
            return 1;
        } else {
            return 0;
        }
    }

    public Integer checkOcDuplicate() {
        ViewObjectImpl srcVo = this.getMmMtlRcptSrc();
        ViewObjectImpl ocVo = this.getMmMtlRcptOc1();
        Row rrSrc = srcVo.getCurrentRow();
        String coaId = rrSrc.getAttribute("TransCoaIdForOc").toString();
        RowQualifier rq = new RowQualifier(ocVo);
        rq.setWhereClause("CldId='" + rrSrc.getAttribute("CldId") + "' and SlocId=" + rrSrc.getAttribute("SlocId") +
                          " and OrgId='" + rrSrc.getAttribute("OrgId") + "' and  WhId ='" + rrSrc.getAttribute("WhId") +
                          "' and DocId='" + rrSrc.getAttribute("DocId") + "' and DocIdSrc = '" +
                          rrSrc.getAttribute("DocIdSrc") + "' and DlvSchdlNo = " +
                          Integer.parseInt(rrSrc.getAttribute("DlvSchdlNo").toString()) + " and CoaId=" + coaId + "");
        Row[] rr = ocVo.getFilteredRows(rq);
        _log.info(rr.length + " arg0  " + rq.getExprStr());
        if (rr.length > 0) {
            return 1;
        } else {
            return 0;
        }

    }


    public void addOcDetails() {
        _log.info("Add oc Details  fff ");
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl srcVo = this.getMmMtlRcptSrc();
        ViewObjectImpl ocVo = this.getMmMtlRcptOc1();
        Number currencyFctr = new Number(1);
        Row rrSrc = srcVo.getCurrentRow();
        Row currRcpt = rcptVo.getCurrentRow();
        if (currRcpt.getAttribute("CurrConvFctr") != null) {
            currencyFctr = (Number) ((Number) currRcpt.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        }
        if (rrSrc.getAttribute("TransOcCoaId") != null && rrSrc.getAttribute("TransOcDesc") != null &&
            rrSrc.getAttribute("TransCoaIdForOc") != null && rrSrc.getAttribute("TransOcAmt") != null) {
            _log.info("Add oc Details   ");
            Row rr = ocVo.createRow();
            Number ocAmt = (Number) rrSrc.getAttribute("TransOcAmt");
            rr.setAttribute("OcId", "0");
            rr.setAttribute("CoaId", rrSrc.getAttribute("TransCoaIdForOc").toString());
            rr.setAttribute("OcDesc", Integer.parseInt(rrSrc.getAttribute("TransOcDesc").toString()));
            rr.setAttribute("OcAmtSp", ocAmt);
            rr.setAttribute("OcAmtBs", ocAmt.multiply(currencyFctr)); // change after currency
            ocVo.insertRow(rr);
        }
        rrSrc.setAttribute("TransCoaIdForOc", null);
        rrSrc.setAttribute("TransOcDesc", 180);
        rrSrc.setAttribute("TransOcAmt", null);
        rrSrc.setAttribute("TransOcCoaId", null);
    }

    /**
     * Container's getter for MmMtlRcptTrVO.
     * @return MmMtlRcptTrVO
     */
    public ViewObjectImpl getMmMtlRcptTrVO() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptTrVO");
    }

    /**
     * Container's getter for MMRcptItmToMMRcptTrVL1.
     * @return MMRcptItmToMMRcptTrVL1
     */
    public ViewLinkImpl getMMRcptItmToMMRcptTrVL1() {
        return (ViewLinkImpl) findViewLink("MMRcptItmToMMRcptTrVL1");
    }

    /**
     * Container's getter for MmMtlRcptTrLinesVO.
     * @return MmMtlRcptTrLinesVO
     */
    public ViewObjectImpl getMmMtlRcptTrLinesVO() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptTrLinesVO");
    }

    /**
     * Container's getter for MMRcptTrToMMRcptTrLinesVL1.
     * @return MMRcptTrToMMRcptTrLinesVL1
     */
    public ViewLinkImpl getMMRcptTrToMMRcptTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("MMRcptTrToMMRcptTrLinesVL1");
    }

    public String applyDirectTax(String itmId, Number taxabltAmt, String uom) {
        _log.info("call direct tax :::: ");
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String taxRuleFlg = "I";
        String taxExpt = "N";
        Integer taxRuleId = null;
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptSrc = this.getMmMtlRcptSrc();
        ViewObjectImpl itmVo = this.getMmMtlRcptItm();
        ViewObjectImpl rcptTrVo = this.getMmMtlRcptTrVO();
        ViewObjectImpl rcpttrLines = this.getMmMtlRcptTrLinesVO();
        this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind", paramSlocId);
        this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind", paramCldId);
        this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind", paramHoOrgId);
        this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind", paramOrgId);
        this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", itmId);
        this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
        this.getLovItmForDisp().executeQuery();

        Row[] itms = this.getLovItmForDisp().getFilteredRows("ItmId", itmId);
        _log.info("lenth   " + itms.length);
        if (itms.length > 0) {
            if (itms[0].getAttribute("TaxExmptFlg") != null) {
                taxExpt = itms[0].getAttribute("TaxExmptFlg").toString();
            }
            //            if (itms[0].getAttribute("TaxRuleId") != null) {
            //                taxRuleId = Integer.parseInt(itms[0].getAttribute("TaxRuleId").toString());
            //            }
        }
        Row currRcpt = rcptVo.getCurrentRow();
        Row currSrc = rcptSrc.getCurrentRow();
        Row currItm = itmVo.getCurrentRow();
        String docId = currRcpt.getAttribute("DocId").toString();
        String whId = currRcpt.getAttribute("WhId").toString();
        String docIdSrc = currSrc.getAttribute("DocIdSrc").toString();
        Integer eoId = Integer.parseInt(currRcpt.getAttribute("EoIdSrc").toString());
        Number currencyFctr =
            (Number) ((Number) currRcpt.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        Integer dlvSchdlNo = Integer.parseInt(currSrc.getAttribute("DlvSchdlNo").toString());
        Number taxableAmtOrg = (Number) currItm.getAttribute("TaxableAmtSpOrig");

        _log.info(" WhId : " + whId + " docId : " + docId + " docIdSrc : " + docIdSrc + " dlvSchdlNo  : " + dlvSchdlNo +
                  " itmId : " + itmId + "uom  :" + uom + "taxRuleId  : " + taxRuleId + " taxabltAmt : " + taxabltAmt +
                  " currencyFctr : " + currencyFctr);

        if ("Y".equalsIgnoreCase(taxExpt)) {
            return "N";
        } else {
            if (eoId == null) {
                return "E";
            } else {

                _log.info("taxRuleG  " + eoId);
                Object taxRuleG = callStoredFunction(Types.INTEGER, "APP.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     paramCldId, paramSlocId, "0", paramOrgId, paramHoOrgId, itmId,
                                                     eoId, 18515, null
                });
                //            }
                //        }

                _log.info("taxRuleG  " + taxRuleG);

                if (docId != null && docIdSrc != null && taxRuleG != null) {
                    taxRuleId = (Integer) taxRuleG;
                    if (taxRuleId.compareTo(new Integer(-1)) == 0) {
                        return "R";
                    } else {

                        getDBTransaction().postChanges();
                        //     taxEmptdflg
                        BigDecimal ret =
                            (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                             "MM.INS_RCPT_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                             paramSlocId, paramCldId, paramHoOrgId, paramOrgId, whId,
                                                             docId, docIdSrc, dlvSchdlNo, itmId, uom, taxRuleId,
                                                             taxableAmtOrg, taxabltAmt, taxRuleFlg, currencyFctr,
                                                             taxExpt, "Y"
                        }));


                        Number retVal = new Number(0);
                        if (ret != null) {
                            try {
                                retVal = new Number(ret);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        _log.info(" retVal : " + retVal);
                        currItm.setAttribute("TotTaxAmtSp", (Number) retVal.round(getGlblRoundAmtDigit()));


                        BigDecimal retRec =
                            (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                             "MM.MM_GET_REC_TAX_RCPT(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                             paramCldId, paramSlocId, paramHoOrgId, paramOrgId, whId,
                                                             docId, docIdSrc, dlvSchdlNo, itmId, uom, taxExpt
                        }));

                        Number retRecN = new Number(0);
                        if (retRec != null) {
                            try {
                                retRecN = new Number(retRec);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        _log.info(retRec + " retRecN : " + retRecN);
                        currItm.setAttribute("RecTaxAmtSp", (Number) retRecN.round(getGlblRoundAmtDigit()));
                        currItm.setAttribute("RecTaxAmtBs",
                                             (Number) (((Number) retRecN.round(getGlblRoundAmtDigit())).multiply(currencyFctr)).round(getGlblRoundAmtDigit()));


                        rcptTrVo.executeQuery();
                        rcpttrLines.executeQuery();
                        return "Y";
                    }
                } else {
                    return "R";
                }
            }

        }


    }

    public String populateDateTaxAndOc() {

        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptItmVo = this.getMmMtlRcptItm();
        ViewObjectImpl rcptTrVo = this.getMmMtlRcptTrVO();
        ViewObjectImpl rcpttrLines = this.getMmMtlRcptTrLinesVO();
        Row currR = rcptVo.getCurrentRow();
        String docId = currR.getAttribute("DocId").toString();
        String whId = currR.getAttribute("WhId").toString();
        Number currencyFctr = (Number) ((Number) currR.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        _log.info("doc id  : " + docId + " wh id :  " + whId + " conversion factor : " + currencyFctr);
        String retV = "N";
        getDBTransaction().postChanges();
        //     taxEmptdflg
        Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_RCPT(?,?,?,?,?,?,?)", new Object[] {
                                                    paramCldId, paramSlocId, paramHoOrgId, paramOrgId, whId, docId,
                                                    currencyFctr
        }));

        if (ret != null) {
            if (ret.compareTo(new Integer(1)) == 0) {

                Integer updateLnd =
                    (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_RCPT_LND_COST(?,?,?,?,?,?,?)", new Object[] {
                                                  paramCldId, paramSlocId, paramHoOrgId, paramOrgId, docId, 18515, currencyFctr










                }));

                retV = "Y";
                this.getMmMtlRcptSrc().executeQuery();
                rcptTrVo.executeQuery();
                this.getMmMtlRcptTrVO1();
                rcpttrLines.executeQuery();
                rcptItmVo.executeQuery();
                this.getMmMtlRcptItm1().executeQuery();
                this.getMmMtlRcptSrc1().executeQuery();
                this.getMmMtlRcptOc1().executeQuery();

            }
        }
        _log.info("retV :    " + retV);
        _log.info(" ret ::  " + ret);

        return retV;

    }


    public String updateLndPriceForPO() {

        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptItmVo = this.getMmMtlRcptItm();
        Row currR = rcptVo.getCurrentRow();
        String docId = currR.getAttribute("DocId").toString();
        String whId = currR.getAttribute("WhId").toString();
        Number currencyFctr = (Number) ((Number) currR.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        _log.info("doc id  : " + docId + " wh id :  " + whId + " conversion factor : " + currencyFctr);
        String retV = "N";
        getDBTransaction().postChanges();
        //     taxEmptdflg


        Integer updateLnd = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_RCPT_LND_COST(?,?,?,?,?,?,?)", new Object[] {
                                                          paramCldId, paramSlocId, paramHoOrgId, paramOrgId, docId,
                                                          18515, currencyFctr
        }));

        rcptItmVo.executeQuery();
        this.getMmMtlRcptItm1().executeQuery();


        return retV;

    }

    /**
     * Container's getter for LovTaxRuleIdForDispVO.
     * @return LovTaxRuleIdForDispVO
     */
    public ViewObjectImpl getLovTaxRuleIdForDispVO() {
        return (ViewObjectImpl) findViewObject("LovTaxRuleIdForDispVO");
    }

    /**
     * Container's getter for LovTaxCoaIdVO.
     * @return LovTaxCoaIdVO
     */
    public ViewObjectImpl getLovTaxCoaIdVO() {
        return (ViewObjectImpl) findViewObject("LovTaxCoaIdVO");
    }

    /**
     * Container's getter for LovTaxRuleIdForNmVO.
     * @return LovTaxRuleIdForNmVO
     */
    public ViewObjectImpl getLovTaxRuleIdForNmVO() {
        return (ViewObjectImpl) findViewObject("LovTaxRuleIdForNmVO");
    }


    /**
     *check for all purchase price greater than zero in case of PO
     * @return
     */

    public String chkAllPurPricePresent() {
        _log.info("chech all item price greater than zero or not    :::::::");
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptItmVo = this.getMmMtlRcptItm2();
        Row currR = rcptVo.getCurrentRow();
        String ret = "N";
        if (currR != null) {
            String docIdR = currR.getAttribute("DocId").toString();
            RowQualifier rqItm = new RowQualifier(rcptItmVo);
            rqItm.setWhereClause("CldId ='" + paramCldId + "' and SlocId = " + paramSlocId + " and OrgId = '" +
                                 paramOrgId + "' and DocId = '" + docIdR + "' ");
            Row[] rrItm = rcptItmVo.getFilteredRows(rqItm);
            _log.info(rqItm.getExprStr() + "  rowsss   " + rrItm.length);
            if (rrItm.length > 0) {
                for (Row rr : rrItm) {
                    if (rr.getAttribute("ItmId") != null) {
                        Number purPrice = (Number) rr.getAttribute("PurPrice");
                        Number finalRcptQty = (Number) rr.getAttribute("FinalRcptQty");
                        _log.info(finalRcptQty + "  finalRcptQty  " + purPrice);

                        if (purPrice.compareTo(new Number(0)) == 0 && finalRcptQty.compareTo(new Number(0)) == 1) {
                            ret = "Y";
                        }
                    }
                }
            }
        }
        _log.info("ret  :::      " + ret);

        return ret;
    }

    /**
     * Method used to populate the invoice calculations
     * */
    public String populateCalculations(String p_cld_id, Integer p_sloc_id, String p_org_id, Integer p_usr_id) {
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptSrcVo = this.getMmMtlRcptSrc();
        ViewObjectImpl rcptCalcVo = this.getMmMtlRcptCalc();
        Row rw = rcptVo.getCurrentRow();
        Row srcR = rcptSrcVo.getCurrentRow();
        String p_doc_id = rw.getAttribute("DocId").toString();
        String whId = rw.getAttribute("WhId").toString();
        Integer type = (Integer) srcR.getAttribute("DocTypeSrc");
        String paramHoOrdId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        _log.info("p_doc_id  " + p_doc_id + " whId  " + whId + "  type  " + type);
        Integer ret = 0;
        try {
            this.getDBTransaction().postChanges();

            ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_RCPT_CALC(?,?,?,?,?,?,?)", new Object[] {
                                                p_sloc_id, p_cld_id, paramHoOrdId, p_org_id, whId, p_doc_id, type
            }));
            rcptCalcVo.executeQuery();
            _log.info("ret    " + ret);
        } catch (Exception e) {
            FacesMessage message =
                new FacesMessage("There have been an error in calling function 'MM.MM_INS_RCPT_CALC' !" +
                                 e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        if (ret != null) {
            if (ret > 0) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return "N";
        }
    }


    /**TO Chek The Item Exist in Current PO or Not For  Receive Item using Bar Code */
    public String chkItmIdInPo(String ItmId) {
        if (getMmMtlRcptSrc().getCurrentRow().getAttribute("DocIdSrc") != null) {
            String pODocId = getMmMtlRcptSrc().getCurrentRow().getAttribute("DocIdSrc").toString();
            System.out.println("PoDocId --" + pODocId);
            Row[] filteredRows = getMmMtlRcptItm().getFilteredRows("DocIdSrc", pODocId);
            for (Row r : filteredRows) {
                if (r.getAttribute("ItmId").equals(ItmId)) {
                    System.out.println("item id found in po");
                    return "N";
                }
            }
            System.out.println("item id not found in po");
            return "Y";
        }
        return "Y";
    }


    /**TO Insert Item in  BarCode Table From Dual*/

    public void insertIntoBarCodeTbl() {
        if (getDualForBarCodeVO1().getCurrentRow() != null) {
            Row createRow = getMmMtlRcptItmBcVO1().createRow();
            createRow.setAttribute("ItmId", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransItmId"));
            createRow.setAttribute("SrNo", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransSrNo"));
            createRow.setAttribute("ItmUom", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransItmUom"));
            createRow.setAttribute("ItmUomBs", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransItmUomBs"));
            createRow.setAttribute("UomConvFctr",
                                   getDualForBarCodeVO1().getCurrentRow().getAttribute("TransUomConvFctr"));
            createRow.setAttribute("DlvNoteQty", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransDelvQty"));
            createRow.setAttribute("RcptQty", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRcptQty"));
            createRow.setAttribute("RejQty", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRejectedQty"));
            createRow.setAttribute("RwkQty", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRwrkQty"));

            createRow.setAttribute("DlvNoteQtyBs",
                                   getDualForBarCodeVO1().getCurrentRow().getAttribute("TransDelvQtyBs"));
            createRow.setAttribute("RcptQtyBs", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRcptQtyBs"));
            createRow.setAttribute("RejQtyBs",
                                   getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRejectedQtyBs"));
            createRow.setAttribute("RwkQtyBs", getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRwrkQtyBs"));

            getMmMtlRcptItmBcVO1().insertRow(createRow);
            getMmMtlRcptItmBcVO1().executeQuery();
            getDualForBarCodeVO1().executeQuery();

        }
    }

    /**Update Qty If already in Barcode Table*/
    public String updateItmQty(String ItmId) {
        if (ItmId != null) {
            Row[] filteredRows = getMmMtlRcptItmBcVO1().getFilteredRows("ItmId", ItmId);
            if (filteredRows.length > 0) {
                // Number delvQty = (Number) filteredRows[0].getAttribute("DlvNoteQty");
                Number rcptQty = (Number) filteredRows[0].getAttribute("RcptQty");
                Number rejQty = (Number) filteredRows[0].getAttribute("RejQty");
                Number rwrkQty = (Number) filteredRows[0].getAttribute("RwkQty");

                // Number delvQtyBs = (Number) filteredRows[0].getAttribute("DlvNoteQty");
                Number rcptQtyBs = (Number) filteredRows[0].getAttribute("RcptQtyBs");
                Number rejQtyBs = (Number) filteredRows[0].getAttribute("RejQtyBs");
                Number rwrkQtyBs = (Number) filteredRows[0].getAttribute("RwkQtyBs");


                //Number newDelQty = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransDelvQty");
                Number newRcptQty = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRcptQty");
                Number newRejQty = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRejectedQty");
                Number newRwrkQty = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRwrkQty");

                Number newConvFctr = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransUomConvFctr");

                Number newRcptQtyBs = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRcptQtyBs");
                Number newRwrkQtyBs = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRwrkQtyBs");
                Number newRejQtyBs = (Number) getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRejectedQtyBs");

                Object newSrNo = getDualForBarCodeVO1().getCurrentRow().getAttribute("TransSrNo");

                filteredRows[0].setAttribute("SrNo", newSrNo);

                //filteredRows[0].setAttribute("DlvNoteQty", delvQty.add(newDelQty));
                filteredRows[0].setAttribute("RcptQty", rcptQty.add(newRcptQty));
                filteredRows[0].setAttribute("RejQty", rejQty.add(newRejQty));
                filteredRows[0].setAttribute("RwkQty", rwrkQty.add(newRwrkQty));

                filteredRows[0].setAttribute("UomConvFctr", newConvFctr);

                filteredRows[0].setAttribute("RcptQtyBs", rcptQtyBs.add(newRcptQtyBs));
                filteredRows[0].setAttribute("RejQtyBs", newRejQtyBs.add(rejQtyBs));
                filteredRows[0].setAttribute("RwkQtyBs", newRwrkQtyBs.add(rwrkQtyBs));

                getMmMtlRcptItmBcVO1().executeQuery();
                getDualForBarCodeVO1().executeQuery();
                return "Y";
            }
            return "N";
        }
        return "N";
    }

    /**To Set Uom On ItemID ValueChangeEvent */

    public void setItmUom(String itmId) {
        if (itmId != null) {


            getLovItemForBarCodeVO1().setNamedWhereClauseParam("cldIdBind",
                                                               getDualForBarCodeVO1().getCurrentRow().getAttribute("TransCldId"));
            getLovItemForBarCodeVO1().setNamedWhereClauseParam("hoOrgIdBind",
                                                               getDualForBarCodeVO1().getCurrentRow().getAttribute("TransHoOrgId"));
            getLovItemForBarCodeVO1().setNamedWhereClauseParam("itmIdBind", itmId);
            getLovItemForBarCodeVO1().setNamedWhereClauseParam("orgIdBind",
                                                               getDualForBarCodeVO1().getCurrentRow().getAttribute("TransOrgId"));
            getLovItemForBarCodeVO1().setNamedWhereClauseParam("slocIdBind",
                                                               getDualForBarCodeVO1().getCurrentRow().getAttribute("TransSlocId"));

            getLovItemForBarCodeVO1().executeQuery();
            Row[] filteredRows = getLovItemForBarCodeVO1().getFilteredRows("ItmId", itmId);
            if (filteredRows.length > 0) {
                System.out.println("uom bs filter row length--" + filteredRows.length);
                String uomBs = filteredRows[0].getAttribute("UomBasic").toString();
                System.out.println("uombs is ---" + uomBs);
                getLovNewUomIdVO1().setNamedWhereClauseParam("bindCldId",
                                                             getDualForBarCodeVO1().getCurrentRow().getAttribute("TransCldId"));
                getLovNewUomIdVO1().setNamedWhereClauseParam("bindDelvSchdl",
                                                             getDualForBarCodeVO1().getCurrentRow().getAttribute("TransDelvSchdl"));
                getLovNewUomIdVO1().setNamedWhereClauseParam("bindItmId", itmId);
                getLovNewUomIdVO1().setNamedWhereClauseParam("bindOrgId",
                                                             getDualForBarCodeVO1().getCurrentRow().getAttribute("TransOrgId"));
                getLovNewUomIdVO1().setNamedWhereClauseParam("bindPoDocId",
                                                             getDualForBarCodeVO1().getCurrentRow().getAttribute("TransPoDocId"));
                getLovNewUomIdVO1().setNamedWhereClauseParam("bindRcptDocId",
                                                             getDualForBarCodeVO1().getCurrentRow().getAttribute("TransRcptDocId"));
                getLovNewUomIdVO1().setNamedWhereClauseParam("bindSlocId",
                                                             getDualForBarCodeVO1().getCurrentRow().getAttribute("TransSlocId"));
                getLovNewUomIdVO1().setNamedWhereClauseParam("bindItmUomBs", uomBs);
                getLovNewUomIdVO1().executeQuery();
                getLovNewUomIdVO1().setCurrentRowAtRangeIndex(0);
                System.out.println("---row count" + getLovNewUomIdVO1().getEstimatedRowCount());
                System.out.println("Current ROW IN UOM LOV---" + getLovNewUomIdVO1().getCurrentRow());
                if (getLovNewUomIdVO1().getCurrentRow() != null &&
                    getLovNewUomIdVO1().getCurrentRow().getAttribute("ItmUom") != null) {
                    System.out.println("goning to set Uom and conv fctor--" +
                                       getLovNewUomIdVO1().getCurrentRow().getAttribute("ItmUom") + "  conv fctor---" +
                                       getLovNewUomIdVO1().getCurrentRow().getAttribute("ConvFctr"));
                    getDualForBarCodeVO1().getCurrentRow().setAttribute("TransItmUom",
                                                                        getLovNewUomIdVO1().getCurrentRow().getAttribute("ItmUom").toString());

                    getDualForBarCodeVO1().getCurrentRow().setAttribute("TransItmUomBar",
                                                                        getLovNewUomIdVO1().getCurrentRow().getAttribute("ItmUom").toString());


                    getDualForBarCodeVO1().getCurrentRow().setAttribute("TransUomConvFctr",
                                                                        getLovNewUomIdVO1().getCurrentRow().getAttribute("ConvFctr"));

                    System.out.println(" current unit" +
                                       getDualForBarCodeVO1().getCurrentRow().getAttribute("TransItmUom"));
                }
            }

        }
    }

    /**Update qty in GeItem Table from barCode PopUP*/

    public void updateRcptItmQty() {
        RowSetIterator bcItr = getMmMtlRcptItmBcVO1().createRowSetIterator(null);
        if (bcItr.getRowCount() > 0) {
            System.out.println("Row Count in barCode tbl--->" + bcItr.getRowCount());
            while (bcItr.hasNext()) {
                Row next = bcItr.next();
                Number delQty = (Number) next.getAttribute("DlvNoteQty");
                Number rcptQty = (Number) next.getAttribute("RcptQty");
                Number rwkQty = (Number) next.getAttribute("RwkQty");
                Number rejQty = (Number) next.getAttribute("RejQty");

                String itmUom = (String) next.getAttribute("ItmUom");
                Number convFctor = (Number) next.getAttribute("UomConvFctr");

                // Number delQtyBs = (Number) next.getAttribute("DlvNoteQtyBs");
                Number rcptQtyBs = (Number) next.getAttribute("RcptQtyBs");
                Number rwkQtyBs = (Number) next.getAttribute("RwkQtyBs");
                Number rejQtyBs = (Number) next.getAttribute("RejQtyBs");

                Row[] filteredRows = getMmMtlRcptItm().getFilteredRows("ItmId", next.getAttribute("ItmId"));
                if (filteredRows.length > 0) {
                    filteredRows[0].setAttribute("DlvNoteQty", delQty);
                    filteredRows[0].setAttribute("RwkQty", rwkQty);
                    filteredRows[0].setAttribute("RcptQty", rcptQty);
                    filteredRows[0].setAttribute("RejQty", rejQty);

                    filteredRows[0].setAttribute("FinalRcptQty", rcptQty);

                    filteredRows[0].setAttribute("ItmUom", itmUom);
                    filteredRows[0].setAttribute("UomConvFctr", convFctor);

                    // filteredRows[0].setAttribute("DlvQty", delQty);
                    filteredRows[0].setAttribute("RwkQtyBs", rwkQtyBs);
                    filteredRows[0].setAttribute("RejQtyBs", rejQtyBs);
                    filteredRows[0].setAttribute("RcptQtyBs", rcptQtyBs);
                }
            }
            getMmMtlRcptItm().executeQuery();
        }
    }

    /**
     * Container's getter for MmMtlRcptTrVO1.
     * @return MmMtlRcptTrVO1
     */
    public ViewObjectImpl getMmMtlRcptTrVO1() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptTrVO1");
    }

    /**
     * Container's getter for LovOcCoaIdVO1.
     * @return LovOcCoaIdVO1
     */
    public ViewObjectImpl getLovOcCoaIdVO1() {
        return (ViewObjectImpl) findViewObject("LovOcCoaIdVO1");
    }

    /**
     * Container's getter for LovMnfJE1.
     * @return LovMnfJE1
     */
    public ViewObjectImpl getLovMnfJE() {
        return (ViewObjectImpl) findViewObject("LovMnfJE");
    }

    /**
     * Container's getter for LovUomIdForView1.
     * @return LovUomIdForView1
     */
    public ViewObjectImpl getLovUomIdForView() {
        return (ViewObjectImpl) findViewObject("LovUomIdForView");
    }

    /**
     * Container's getter for MmMtlRcptItmBcVO1.
     * @return MmMtlRcptItmBcVO1
     */
    public ViewObjectImpl getMmMtlRcptItmBcVO1() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptItmBcVO1");
    }

    /**
     * Container's getter for MmMtlRcptSrcTOMmMtlRcptItmBcVL1.
     * @return MmMtlRcptSrcTOMmMtlRcptItmBcVL1
     */
    public ViewLinkImpl getMmMtlRcptSrcTOMmMtlRcptItmBcVL1() {
        return (ViewLinkImpl) findViewLink("MmMtlRcptSrcTOMmMtlRcptItmBcVL1");
    }


    /**
     * Container's getter for LovUomIdVO1.
     * @return LovUomIdVO1
     */
    public ViewObjectImpl getLovUomIdVO1() {
        return (ViewObjectImpl) findViewObject("LovUomIdVO1");
    }

    /**
     * Container's getter for ConvFctorForBarCodeVO1.
     * @return ConvFctorForBarCodeVO1
     */
    public ViewObjectImpl getConvFctorForBarCodeVO1() {
        return (ViewObjectImpl) findViewObject("ConvFctorForBarCodeVO1");
    }

    /**
     * Container's getter for DualForBarCodeVO1.
     * @return DualForBarCodeVO1
     */
    public ViewObjectImpl getDualForBarCodeVO1() {
        return (ViewObjectImpl) findViewObject("DualForBarCodeVO1");
    }

    /**
     * Container's getter for LovItemForBarCodeVO1.
     * @return LovItemForBarCodeVO1
     */
    public ViewObjectImpl getLovItemForBarCodeVO1() {
        return (ViewObjectImpl) findViewObject("LovItemForBarCodeVO1");
    }

    /**
     * Container's getter for LovItemForBarCodeVO2.
     * @return LovItemForBarCodeVO2
     */
    public ViewObjectImpl getLovItemForBarCodeVO2() {
        return (ViewObjectImpl) findViewObject("LovItemForBarCodeVO2");
    }

    /**
     * Container's getter for LovNewUomIdVO1.
     * @return LovNewUomIdVO1
     */
    public ViewObjectImpl getLovNewUomIdVO1() {
        return (ViewObjectImpl) findViewObject("LovNewUomIdVO1");
    }

    /**
     * Container's getter for OcForImportPoView1.
     * @return OcForImportPoView1
     */
    public ViewObjectImpl getOcForImportPoView() {
        return (ViewObjectImpl) findViewObject("OcForImportPoView");
    }

    public Integer checkWarehouseAccessOrNotByUser() {
        if (this.getMmMtlRcpt().getCurrentRow() != null) {
            Row r = this.getMmMtlRcpt().getCurrentRow();
            Integer slocId = (Integer) r.getAttribute("SlocId");
            String cldId = (String) r.getAttribute("CldId");
            String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
            String orgId = (String) r.getAttribute("OrgId");
            String whId = (String) r.getAttribute("WhId");
            String DefultProj ="PROJ0000";
            String prjId = r.getAttribute("PrjId") ==null ? DefultProj : (String)r.getAttribute("PrjId"); 
            
            Integer usr = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            RowQualifier rq = new RowQualifier(this.getLovWarehouseSecUsrVO());
            rq.setWhereClause("HoOrgId ='" + hoOrgId + "' and SlocId =" + slocId + " and CldId ='" + cldId +
                              "' and OrgId ='" + orgId + "' and UsrId =" + usr + " and WhId ='" + whId + "' and PrjId in ('"+DefultProj+"' , '"+prjId+"') ");
            Row[] rr = this.getLovWarehouseSecUsrVO().getFilteredRows(rq);
            _log.info(rq.getExprStr() + " rrr  " + rr.length + " usr " + usr);
            System.out.println(rq.getExprStr() + " rrr  " + rr.length + " usr " + usr);
            if (rr.length > 0) {
                return 0;
            } else {
                return 1;
            }
        } else {
            return 0;
        }

    }

    public String whNmView() {
        if (this.getMmMtlRcpt().getCurrentRow() != null) {
            Row r = this.getMmMtlRcpt().getCurrentRow();
            Integer slocId = (Integer) r.getAttribute("SlocId");
            String cldId = (String) r.getAttribute("CldId");
            String orgId = (String) r.getAttribute("OrgId");
            String whId = (String) r.getAttribute("WhId");
            RowQualifier rq = new RowQualifier(this.getLovWarehouseId());
            rq.setWhereClause("SlocId =" + slocId + " and CldId ='" + cldId + "' and OrgId ='" + orgId +
                              "'  and WhId ='" + whId + "' ");
            Row[] rr = this.getLovWarehouseId().getFilteredRows(rq);
            _log.info(rr.length + " arg0 " + rq.getExprStr());
            if (rr.length > 0 && rr[0].getAttribute("WhNm") != null) {
                _log.info("arg0   " + rr[0].getAttribute("WhNm"));
                return rr[0].getAttribute("WhNm").toString();
            } else {
                return "0";
            }
        } else {
            return "0";
        }
    }

    /**
     * Container's getter for LovWarehouseId1.
     * @return LovWarehouseId1
     */
    public ViewObjectImpl getLovWarehouseId() {
        return (ViewObjectImpl) findViewObject("LovWarehouseId");
    }

    /**
     * Container's getter for LovGatePassForView1.
     * @return LovGatePassForView1
     */
    public ViewObjectImpl getLovGatePassForView() {
        return (ViewObjectImpl) findViewObject("LovGatePassForView");
    }

    /**
     * Container's getter for LovCustomerNameVo1.
     * @return LovCustomerNameVo1
     */
    public ViewObjectImpl getLovCustomerNameVo() {
        return (ViewObjectImpl) findViewObject("LovCustomerNameVo");
    }

    /**
     * Container's getter for LovStkAdjNo1.
     * @return LovStkAdjNo1
     */
    public ViewObjectImpl getLovStkAdjNo() {
        return (ViewObjectImpl) findViewObject("LovStkAdjNo");
    }

    public HashSet checkForTaxAmountMisMatch(String CldId, Integer slocId, String OrgId, String whId) {
        Row curRcpt = this.getMmMtlRcpt().getCurrentRow();

        Integer docType = (Integer) curRcpt.getAttribute("TransSrcDocType");
        String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Number currencyFctr =
            (Number) ((Number) curRcpt.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());

        if (whId == null) {
            whId = "0";
        }

        String docId = curRcpt.getAttribute("DocId").toString();

        RowQualifier rq = new RowQualifier(this.getMmMtlRcptItm2());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId + "' and WhId='" +
                          whId + "' and DocId='" + docId + "'");
        Row[] filRw = this.getMmMtlRcptItm2().getFilteredRows(rq);
        _log.info(rq.getExprStr() + "    arg0      " + filRw.length);
        Number zero = new Number(0);
        HashSet<String> h = new HashSet<String>();
        for (Row rw : filRw) {
            if (rw.getAttribute("ItmId") != null) {
                Integer txrulId = 0;
                RowQualifier rqTr = new RowQualifier(this.getMmMtlRcptTrVO1());
                rqTr.setWhereClause("CldId='" + CldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId +
                                    "' and WhId='" + whId + "' and DocId='" + docId + "' and DocIdSrc = '" +
                                    rw.getAttribute("DocIdSrc") + "' and DlvSchdlNo = " +
                                    rw.getAttribute("DlvSchdlNo") + " and ItmId ='" + rw.getAttribute("ItmId") +
                                    "' and ItmUom ='" + rw.getAttribute("ItmUom") + "' ");

                Row rrtr[] = this.getMmMtlRcptTrVO1().getFilteredRows(rqTr);
                _log.info(rqTr.getExprStr() + "  tr row  " + rrtr.length);
                if (rrtr.length > 0 && rrtr[0].getAttribute("TaxRuleId") != null) {
                    txrulId = Integer.parseInt(rrtr[0].getAttribute("TaxRuleId").toString());
                }
                if (txrulId.compareTo(new Integer(0)) == 1) {

                    BigDecimal ret =
                        (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                         "MM.MM_CHK_TAX(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         CldId, slocId, paramHoOrgId, OrgId, whId, docId,
                                                         rw.getAttribute("DocIdSrc"), rw.getAttribute("DlvSchdlNo"),
                                                         rw.getAttribute("ItmId"), rw.getAttribute("ItmUom"), txrulId,
                                                         rw.getAttribute("TaxableAmtSpOrig"),
                                                         rw.getAttribute("TaxableAmtSp"), "I", currencyFctr, "N", "N"
                    }));


                    Number retVal = new Number(0);
                    if (ret != null) {
                        try {
                            retVal = new Number(ret);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    _log.info(rw.getAttribute("TotTaxAmtSp") + " retVal : " + retVal);

                    if (retVal.compareTo((Number) rw.getAttribute("TotTaxAmtSp")) == 0) {
                    } else {
                        this.getLovItmForDisp().setNamedWhereClauseParam("slocIdBind",
                                                                         resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
                        this.getLovItmForDisp().setNamedWhereClauseParam("cldIdBind",
                                                                         resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
                        this.getLovItmForDisp().setNamedWhereClauseParam("hoOrgIdBind",
                                                                         resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
                        this.getLovItmForDisp().setNamedWhereClauseParam("orgIdBind",
                                                                         resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
                        this.getLovItmForDisp().setNamedWhereClauseParam("itmIdBind", rw.getAttribute("ItmId"));
                        this.getLovItmForDisp().setNamedWhereClauseParam("itmNameBind", null);
                        this.getLovItmForDisp().executeQuery();
                        Row[] r = this.getLovItmForDisp().getFilteredRows("ItmId", rw.getAttribute("ItmId"));
                        if (r.length > 0 && r[0].getAttribute("ItmDesc") != null) {
                            h.add(r[0].getAttribute("ItmDesc").toString());
                        }
                    }
                }
            }
        }

        _log.info("HashSet--" + h);
        return h;
    }

    public void reApplytaxOnItem(String itmIdTax, String itmUomTax, Number taxAmountValue) {
        _log.info("Inside value change listenerrr");
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer paramUsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String paramHoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Number taxAmt = taxAmountValue;
        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl rcptItmVo = this.getMmMtlRcptItm();
        ViewObjectImpl rcptTrVo = this.getMmMtlRcptTrVO1();
        Row rrItm = rcptItmVo.getCurrentRow();
        Row currRcpt = rcptVo.getCurrentRow();
        String docId = rrItm.getAttribute("DocId").toString();
        String whId = rrItm.getAttribute("WhId").toString();
        String docIdSrc = rrItm.getAttribute("DocIdSrc").toString();
        Integer dlvSchdlNo = Integer.parseInt(rrItm.getAttribute("DlvSchdlNo").toString());
        Number taxableAmtOrg = (Number) rrItm.getAttribute("TaxableAmtSpOrig");
        String itmId = itmIdTax;
        String itmUom = itmUomTax;
        Number currencyFctr =
            (Number) ((Number) currRcpt.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        String taxRuleFlg = "I";
        String taxExpt = "N";

        _log.info("docId  : " + docId + " whId " + whId + " docIdSrc " + docIdSrc + " dlvSchdlNo " + dlvSchdlNo +
                  " itmId " + itmId + " itmUom " + itmUom + " taxableAmtOrg::" + taxableAmtOrg);
        rrItm.setAttribute("TaxableAmtBs", taxAmt.multiply(currencyFctr));
        RowQualifier rqTr = new RowQualifier(rcptTrVo);
        rqTr.setWhereClause("CldId ='" + paramCldId + "' and SlocId =" + paramSlocId + " and OrgId ='" + paramOrgId +
                            "' and DocId ='" + docId + "' and WhId ='" + whId + "' and DocIdSrc ='" + docIdSrc +
                            "' and DlvSchdlNo =" + dlvSchdlNo + " and ItmId ='" + itmId + "' and ItmUom ='" + itmUom +
                            "' ");
        Row[] rr = rcptTrVo.getFilteredRows(rqTr);
        _log.info(rqTr.getExprStr() + "  trmmmmmmm  " + rr.length);
        if (rr.length > 0) {
            if (rr[0].getAttribute("TaxRuleId") != null) {
                Integer taxRuleId = Integer.parseInt(rr[0].getAttribute("TaxRuleId").toString());
                if (taxRuleId != null) {
                    _log.info(" taxRuleId : " + taxRuleId);
                    BigDecimal ret =
                        (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                         "MM.INS_RCPT_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         paramSlocId, paramCldId, paramHoOrgId, paramOrgId, whId, docId,
                                                         docIdSrc, dlvSchdlNo, itmId, itmUom, taxRuleId, taxableAmtOrg,
                                                         taxAmt, taxRuleFlg, currencyFctr, taxExpt, "Y"
                    }));


                    Number retVal = new Number(0);
                    if (ret != null) {
                        try {
                            retVal = new Number(ret);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    _log.info(" retVal : " + retVal);
                    rrItm.setAttribute("TotTaxAmtSp", (Number) retVal.round(getGlblRoundAmtDigit()));
                    rrItm.setAttribute("TotTaxAmtBs",
                                       (Number) (((Number) retVal.round(getGlblRoundAmtDigit())).multiply(currencyFctr)).round(getGlblRoundAmtDigit()));

                    BigDecimal retRec =
                        (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_REC_TAX_RCPT(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         paramCldId, paramSlocId, paramHoOrgId, paramOrgId, whId, docId,
                                                         docIdSrc, dlvSchdlNo, itmId, itmUom, taxExpt
                    }));

                    Number retRecN = new Number(0);
                    if (retRec != null) {
                        try {
                            retRecN = new Number(retRec);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    _log.info(retRec + " retRecN : " + retRecN);
                    rrItm.setAttribute("RecTaxAmtSp", (Number) retRecN.round(getGlblRoundAmtDigit()));
                    rrItm.setAttribute("RecTaxAmtBs",
                                       (Number) (((Number) retRecN.round(getGlblRoundAmtDigit())).multiply(currencyFctr)).round(getGlblRoundAmtDigit()));


                    this.getMmMtlRcptTrVO().executeQuery();
                    this.getMmMtlRcptTrLinesVO().executeQuery();
                    //  AdfFacesContext.getCurrentInstance().addPartialTarget(calculationTblBind);

                }
            }

        }
    }


    public String checkForIPODocumentValide(String CldId, Integer SlocId, String OrgId, String SrcDocNo) {

        _log.info("checkForIPODocumentValide  ::::: ");
        Row rcptRw = this.getMmMtlRcpt().getCurrentRow();
        // RowQualifier rq = new RowQualifier(this.getMmMtlGeSrc());
        Integer docSrcType = (Integer) rcptRw.getAttribute("TransSrcDocType");
        Integer scdlno = (Integer) rcptRw.getAttribute("TransSchdlNo");
        if (scdlno == null && docSrcType == 819) {
            scdlno = 1;
        }


        String isIPOValide = (String) (callStoredFunction(Types.VARCHAR, "MM.MM_IS_IPO_STG_VALID (?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, OrgId, SrcDocNo, scdlno, 18515
        }));

        _log.info("isIPOValide  " + isIPOValide);
        return isIPOValide;
    }

    /**
     * Container's getter for LovStockSwapNo1.
     * @return LovStockSwapNo1
     */
    public ViewObjectImpl getLovStockSwapNo() {
        return (ViewObjectImpl) findViewObject("LovStockSwapNo");
    }

    /**
     * Code for Insert all Serail No for on Lot / Bin Per Item.
     *
     * @return
     */
    public Integer insertAllSerialNo() {

        ViewObjectImpl rcptVo = this.getMmMtlRcpt();
        ViewObjectImpl itmVo = this.getMmMtlRcptItm1();
        Row rcptCurr = rcptVo.getCurrentRow();
        Row rcptItmCurr = itmVo.getCurrentRow();
        if (rcptItmCurr != null) {
            //            this.getMmMtlRcptSrNoView().setNamedWhereClauseParam("BindCldId", rcptItmCurr.getAttribute("CldId"));
            //            this.getMmMtlRcptSrNoView().setNamedWhereClauseParam("BindOrgId", rcptItmCurr.getAttribute("OrgId"));
            //            this.getMmMtlRcptSrNoView().setNamedWhereClauseParam("BindSlocId", rcptItmCurr.getAttribute("SlocId"));
            //            this.getMmMtlRcptSrNoView().setNamedWhereClauseParam("BindWhId", rcptItmCurr.getAttribute("WhId"));
            //            this.getMmMtlRcptSrNoView().setNamedWhereClauseParam("BindDocId", rcptItmCurr.getAttribute("DocId"));
            //            this.getMmMtlRcptSrNoView().setNamedWhereClauseParam("BindDocIdSrc", rcptItmCurr.getAttribute("DocIdSrc"));
            //            this.getMmMtlRcptSrNoView().setNamedWhereClauseParam("BindDlvSchdlNo",
            //                                                                 rcptItmCurr.getAttribute("DlvSchdlNo"));
            //            this.getMmMtlRcptSrNoView().setNamedWhereClauseParam("BindItmId", rcptItmCurr.getAttribute("ItmId"));
            //            this.getMmMtlRcptSrNoView().executeQuery();
            //
            //            Row rr[] = this.getMmMtlRcptSrNoView().getFilteredRows("ItmId", rcptItmCurr.getAttribute("ItmId"));
            //
            //            _log.info(rcptItmCurr.getAttribute("ItmId") + "  no of row in sr no " + rr.length);
            //            if (rr.length > 0) {
            //                for (Row rr1 : rr) {
            //                    if (rr1.getAttribute("SrNo") != null) {
            //                       // String chkDupli = "N";
            //                        String chkDupli = chkSerialDuplicate((rr1.getAttribute("SrNo").toString()));
            //                        if ("N".equalsIgnoreCase(chkDupli)) {
            //                            _log.info("Create row for " + rr1.getAttribute("SrNo"));
            //                            Row srRw = this.getMmMtlRcptSr1().createRow();
            //                            srRw.setAttribute("LotId", rcptItmCurr.getAttribute("TransSrLotId").toString());
            //                            srRw.setAttribute("BinId", rcptItmCurr.getAttribute("TransSrBinId").toString());
            //                            srRw.setAttribute("ItmUomBs", rcptItmCurr.getAttribute("ItmUomBs").toString());
            //                            srRw.setAttribute("SrNo", rr1.getAttribute("SrNo"));
            //                            this.getMmMtlRcptSr1().insertRow(srRw);
            //                        } else {
            //                            _log.info("Duplicate serial no found ..........");
            //                        }
            //                    }
            //                }
            //
            //            }

            /**
             * Call Function for Insert all Serial No for eash Item
             */



            //            FUNCTION MM_INS_SR_FRM_SRNO
            //                                            (
            //                                              P_CLD_ID VARCHAR,
            //                                              P_SLOC_ID NUMBER,
            //                                              P_ORG_ID VARCHAR,
            //                                              P_WH_ID VARCHAR,
            //                                              P_DOC_ID VARCHAR,
            //                                              P_DOC_ID_SRC VARCHAR,
            //                                              P_DOC_DT_SRC TIMESTAMP,
            //                                              P_DLV_SCHDL_NO NUMBER,
            //                                              P_LOT_ID VARCHAR,
            //                                              P_BIN_ID VARCHAR,
            //                                              P_ITM_ID VARCHAR,
            //
            //                                            )

            this.getDBTransaction().postChanges();
            Integer retVal =
                (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_SR_FRM_SRNO (?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                              rcptItmCurr.getAttribute("CldId"), rcptItmCurr.getAttribute("SlocId"),
                                              rcptItmCurr.getAttribute("OrgId"), rcptItmCurr.getAttribute("WhId"),
                                              rcptItmCurr.getAttribute("DocId"), rcptItmCurr.getAttribute("DocIdSrc"),
                                              rcptItmCurr.getAttribute("DocDtSrc"),
                                              rcptItmCurr.getAttribute("DlvSchdlNo"),
                                              rcptItmCurr.getAttribute("TransSrLotId"),
                                              rcptItmCurr.getAttribute("TransSrBinId"), rcptItmCurr.getAttribute("ItmId")





            }));

            _log.info("return value " + retVal);
            if (retVal.compareTo(new Integer(1)) == 0) {
                this.getMmMtlRcptSr1().executeQuery();
                this.getMmMtlRcptSr2().executeQuery();
            }


        }


        return 0;
    }

    /**
     * Container's getter for MmMtlRcptSrNoView1.
     * @return MmMtlRcptSrNoView1
     */
    public ViewObjectImpl getMmMtlRcptSrNoView() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptSrNoView");
    }

    /**
     * Container's getter for LovViewBin1.
     * @return LovViewBin1
     */
    public ViewObjectImpl getLovViewBin() {
        return (ViewObjectImpl) findViewObject("LovViewBin");
    }

    public void setItmLotExpiryDate(Timestamp dt) {
        /// MM_GET_ITM_EXPRY_DT
        ViewObjectImpl vo = this.getMmMtlRcpt();
        ViewObjectImpl voItm = this.getMmMtlRcptItm();
        try {
            Timestamp expirydate = null;
            Object expiry = (callStoredFunction(Types.DATE, "MM_GET_ITM_EXPRY_DT (?,?,?,?,?)", new Object[] {
                                                EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                EbizParams.GLBL_HO_ORG_ID(),
                                                voItm.getCurrentRow().getAttribute("ItmId"), dt
            }));
            _log.info("expiry  : " + expiry);

            if (expiry != null) {
                expirydate = new oracle.jbo.domain.Timestamp(new oracle.jbo.domain.Date(expiry));
            }
            if (expirydate != null) {
                _log.info("Expiry date " + expirydate);
                voItm.getCurrentRow().setAttribute("ExpiryDt", expirydate);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    public Integer addLotForAllItem() {
        ViewObjectImpl voRcpt = this.getMmMtlRcpt();
        Row curRow = voRcpt.getCurrentRow();

        if (curRow != null) {
            Integer fyId = 1;
            if (curRow.getAttribute("FyId") != null) {
                fyId = Integer.parseInt(curRow.getAttribute("FyId").toString());
            } else {
                fyId =
                    getFYid(curRow.getAttribute("CldId").toString(), curRow.getAttribute("OrgId").toString(),
                            (Timestamp) curRow.getAttribute("RcptDt"), "A");
            }
            this.getDBTransaction().postChanges();
            _log.info("fyId  " + fyId);
            Integer retVal = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_LOT_ITM_BULK (?,?,?,?,?,?)", new Object[] {
                                                           curRow.getAttribute("CldId"), curRow.getAttribute("SlocId"),
                                                           curRow.getAttribute("OrgId"), fyId,
                                                           curRow.getAttribute("DocId"), curRow.getAttribute("WhId")






















            }));

            _log.info(" retVal  " + 1);
            if (retVal == 1) {
                this.getMmMtlRcptLot1().executeQuery();
                this.getMmMtlRcptLot2().executeQuery();
                return 1;
            } else {
                return -1;
            }

        } else {
            return -2;
        }
    }

    public Number checkBinCapacityBalanceQty(String binId) {

        //MM_GET_BIN_CAP

        ViewObjectImpl voRcpt = this.getMmMtlRcpt();
        ViewObjectImpl voRcptItm = this.getMmMtlRcptItm1();
        Row currRcpt = voRcpt.getCurrentRow();
        Row currItm = voRcptItm.getCurrentRow();

        _log.info(binId + "bin id   " + currItm.getAttribute("ItmId"));
        BigDecimal ret = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_BIN_CAP(?,?,?,?,?,?,?)", new Object[] {
                                                          currRcpt.getAttribute("CldId"),
                                                          currRcpt.getAttribute("SlocId"),
                                                          currRcpt.getAttribute("OrgId"), currRcpt.getAttribute("WhId"),
                                                          binId, currItm.getAttribute("ItmId"), "B"
        }));

        Number retVal = new Number(1);
        if (ret != null) {
            try {
                retVal = new Number(ret);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        _log.info(" retVal : " + retVal);

        return retVal;

    }

    public Number checkBinBalanceQty(String binId) {

        //MM_GET_BIN_CAP

        ViewObjectImpl voRcpt = this.getMmMtlRcpt();
        ViewObjectImpl voRcptItm = this.getMmMtlRcptItm1();
        Row currRcpt = voRcpt.getCurrentRow();
        Row currItm = voRcptItm.getCurrentRow();

        _log.info(binId + "bin id   " + currItm.getAttribute("ItmId"));
        BigDecimal ret = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_BIN_CAP(?,?,?,?,?,?,?)", new Object[] {
                                                          currRcpt.getAttribute("CldId"),
                                                          currRcpt.getAttribute("SlocId"),
                                                          currRcpt.getAttribute("OrgId"), currRcpt.getAttribute("WhId"),
                                                          binId, currItm.getAttribute("ItmId"), "A"
        }));

        Number retVal = new Number(1);
        if (ret != null) {
            try {
                retVal = new Number(ret);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        _log.info(" balQty : " + retVal);

        return retVal;

    }

    public void setCurrentBinNull() {
        this.getMmMtlRcptBin1().getCurrentRow().setAttribute("BinId", null);
    }

    /**
     * Container's getter for LovWarehouseSecUsrVO1.
     * @return LovWarehouseSecUsrVO1
     */
    public ViewObjectImpl getLovWarehouseSecUsrVO() {
        return (ViewObjectImpl) findViewObject("LovWarehouseSecUsrVO");
    }

    /**
     * Container's getter for MmMtlRcptSrNote1.
     * @return MmMtlRcptSrNote1
     */
    public ViewObjectImpl getMmMtlRcptSrNote() {
        return (ViewObjectImpl) findViewObject("MmMtlRcptSrNote");
    }

    /**
     * Container's getter for MMRcptItmToRcptSrNoteVL1.
     * @return MMRcptItmToRcptSrNoteVL1
     */
    public ViewLinkImpl getMMRcptItmToRcptSrNoteVL1() {
        return (ViewLinkImpl) findViewLink("MMRcptItmToRcptSrNoteVL1");
    }

    /**
     * Container's getter for LovSubContractNo1.
     * @return LovSubContractNo1
     */
    public ViewObjectImpl getLovSubContractNo() {
        return (ViewObjectImpl) findViewObject("LovSubContractNo");
    }


    public String checkItmInStockOrNotForOB(String orgId, String cldId, Integer slocId) {


        //        FUNCTION MM_CHK_ITM_TO_SUMM
        //                                          (
        //                                          P_CLD_ID VARCHAR2,
        //                                          P_SLOC_ID NUMBER,
        //                                          P_ORG_ID VARCHAR2,
        //                                          P_WH_ID VARCHAR2,
        //                                          P_DOC_ID VARCHAR2
        //                                          )
        this.getDBTransaction().postChanges();

        Object isItmValide = (callStoredFunction(Types.VARCHAR, "MM.MM_CHK_ITM_TO_SUMM (?,?,?,?,?)", new Object[] {
                                                 cldId, slocId, orgId,
                                                 this.getMmMtlRcpt().getCurrentRow().getAttribute("WhId"),
                                                 this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId")
        }));
        if (isItmValide != null && "Y".equalsIgnoreCase(isItmValide.toString())) {
            return "Y";
        } else {
            return "N";
        }


    }


    public Integer checkItmInAdjAccPresents(String orgId, String cldId, Integer slocId) {


        //        FUNCTION MM_IS_ITM_ADJ_ACC
        //                                          (
        //                                          P_CLD_ID VARCHAR2,
        //                                          P_SLOC_ID NUMBER,
        //                                          P_ORG_ID VARCHAR2,
        //                                          P_WH_ID VARCHAR2,
        //                                          P_DOC_ID VARCHAR2
        //                                          )
        this.getDBTransaction().postChanges();

        Object isItmValide = (callStoredFunction(Types.INTEGER, "MM.MM_IS_ITM_ADJ_ACC (?,?,?,?,?)", new Object[] {
                                                 cldId, slocId, orgId,
                                                 this.getMmMtlRcpt().getCurrentRow().getAttribute("WhId"),
                                                 this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId")
        }));

        _log.info("isItmValide  " + isItmValide);
        if (isItmValide != null && ((Integer) isItmValide).compareTo(new Integer(1)) == 0) {
            return 1;
        } else {
            return 0;
        }


    }


    public String chkInvoiceCopyRequired() {
        String orgIdN = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        String trackSuppDoc = "N";
        Row[] orgR = this.getViewOrgMMPrf().getFilteredRows("OrgId", orgIdN);
        if (orgR.length > 0) {
            if (orgR[0].getAttribute("TrackSuppDoc") != null) {
                trackSuppDoc = orgR[0].getAttribute("TrackSuppDoc").toString();
            }

        }
        return trackSuppDoc;
    }


    public Integer chkinvcCopyFrmGe(String geNo) {

        String invcCopyReq = this.chkInvoiceCopyRequired();

        if ("Y".equalsIgnoreCase(invcCopyReq)) {
            String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

            RowQualifier rq = new RowQualifier(this.getLovGateEntry());
            rq.setWhereClause("WhId='" + this.getMmMtlRcpt().getCurrentRow().getAttribute("WhId") + "' and OrgId='" +
                              this.getMmMtlRcpt().getCurrentRow().getAttribute("OrgId") + "' and GeNo='" + geNo + "'");
            _log.info("Querry=" + rq.getExprStr());
            Row r[] = this.getLovGateEntry().getFilteredRows(rq);
            _log.info("No. of Rows=" + r.length);
            String doc = null;
            if (r.length > 0)
                doc = r[0].getAttribute("DocId").toString();

            //        FUNCTION MM_CHK_SUPP_DOC (P_CLD_ID VARCHAR2,
            //                                                        P_SLOC_ID NUMBER,
            //                                                        P_ORG_ID VARCHAR2,
            //                                                        P_EO_ID NUMBER,
            //                                                        P_GE_NO VARCHAR2,
            //                                                        P_CALLED_FM VARCHAR2)
            //


            try {

                Object validSupp = callStoredFunction(Types.INTEGER, "MM.MM_CHK_SUPP_DOC(?,?,?,?,?,?)", new Object[] {
                                                      paramCldId, paramSlocId, paramOrgId, null, doc, "W"
                });


                _log.info("validSupp " + validSupp);
                if (validSupp != null) {
                    if (((Integer) validSupp).compareTo(new Integer(1)) == 0) {
                        return 1;
                    } else {
                        return 0;
                    }
                } else {
                    return 0;
                }

            } catch (Exception e) {
                e.printStackTrace();
                return 0;
            }
        } else {
            return 1;
        }
    }


    public Integer chkSupplierInvcCopyReceipt() {

        String invcCopyReq = this.chkInvoiceCopyRequired();

        if ("Y".equalsIgnoreCase(invcCopyReq)) {

            String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
            //        FUNCTION MM_CHK_SUPP_DOC (P_CLD_ID VARCHAR2,
            //                                                        P_SLOC_ID NUMBER,
            //                                                        P_ORG_ID VARCHAR2,
            //                                                        P_EO_ID NUMBER,
            //                                                        P_GE_NO VARCHAR2,
            //                                                        P_CALLED_FM VARCHAR2)
            //


            try {

                Object validSupp = callStoredFunction(Types.INTEGER, "MM.MM_CHK_SUPP_DOC(?,?,?,?,?,?)", new Object[] {
                                                      paramCldId, paramSlocId, paramOrgId,
                                                      this.getMmMtlRcpt().getCurrentRow().getAttribute("EoIdSrc"), null,
                                                      "R"
                });

                _log.info("validSupp " + validSupp);
                if (validSupp != null) {
                    if (((Integer) validSupp).compareTo(new Integer(1)) == 0) {
                        return 1;
                    } else {
                        return 0;
                    }
                } else {
                    return 0;
                }

            } catch (Exception e) {
                e.printStackTrace();
                return 0;
            }
        } else {
            return 1;
        }

    }

    public String chkLotAutoGen() {
        this.getViewOrgMMPrf().setNamedWhereClauseParam("SlocIdBind", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getViewOrgMMPrf().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getViewOrgMMPrf().executeQuery();
        String chk = "Y";
        Row[] prf = this.getViewOrgMMPrf().getFilteredRows("OrgId", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        if (prf.length > 0) {
            chk = prf[0].getAttribute("AutoLotGen").toString();
        }
        return chk;
    }


    /**
     * Container's getter for LovJITimeReceptDisp1.
     * @return LovJITimeReceptDisp1
     */
    public ViewObjectImpl getLovJITimeReceptDisp() {
        return (ViewObjectImpl) findViewObject("LovJITimeReceptDisp");
    }
    
    public String viewWFData(){
        if(this.getMmMtlRcpt().getCurrentRow()!=null){
           // WF_GET_DOC_FLOW(P_SLOC_ID NUMBER , P_ORG_ID VARCHAR2 , P_CLD_ID VARCHAR2 , P_DOC_ID NUMBER , P_TXN_DOC_ID VARCHAR2)
            try{
                _log.info("Doc Id "+ this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId"));
                Object ob = callStoredFunction(Types.VARCHAR, "APP.WF_GET_DOC_FLOW(?,?,?,?,?)", new Object[] {
                                                this.getMmMtlRcpt().getCurrentRow().getAttribute("SlocId"),this.getMmMtlRcpt().getCurrentRow().getAttribute("OrgId"),
                                               this.getMmMtlRcpt().getCurrentRow().getAttribute("CldId"), 18515, this.getMmMtlRcpt().getCurrentRow().getAttribute("DocId")
                });
                _log.info("ob    "+ob);
                if(ob!=null){
                    return ob.toString();
                }else{
             return "Document Not In WF";                
                }
            }catch(Exception e){
                e.printStackTrace();
                return "Document Not In WF";
            }
            
           
            
        }else{
            return "Document Not In WF";
        }
    }
}
