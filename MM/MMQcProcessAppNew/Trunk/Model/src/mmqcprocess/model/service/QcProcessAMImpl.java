package mmqcprocess.model.service;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmqcprocess.model.service.common.QcProcessAM;
import mmqcprocess.model.views.LovItmIdOImpl;
import mmqcprocess.model.views.LovItmIdVwVOImpl;
import mmqcprocess.model.views.LovMnfJcOpItmVOImpl;
import mmqcprocess.model.views.LovMnfJeOpItmVOImpl;
import mmqcprocess.model.views.LovMnfJeVOImpl;
import mmqcprocess.model.views.LovMnfRcOpItmVOImpl;
import mmqcprocess.model.views.LovQcParamItmVOImpl;
import mmqcprocess.model.views.LovUsrIdVOImpl;
import mmqcprocess.model.views.MmMtlQcDtlVOImpl;
import mmqcprocess.model.views.MmMtlQcVOImpl;
import mmqcprocess.model.views.MmQcParamItmVOImpl;

import mmqcprocess.model.views.RcptItmVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
//import java.sql.Timestamp;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 14 10:12:15 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QcProcessAMImpl extends ApplicationModuleImpl implements QcProcessAM {
    /**
     * This is the default constructor (do not remove).
     */


    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String p_ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

    public QcProcessAMImpl() {
    }
    private static ADFLogger loginfo = ADFLogger.createADFLogger(QcProcessAMImpl.class);
    Number zero = new Number(0);

    /**
     * Container's getter for MmMtlQc.
     * @return MmMtlQc
     */
    public MmMtlQcVOImpl getMmMtlQc() {
        return (MmMtlQcVOImpl) findViewObject("MmMtlQc");
    }

    /**
     * Container's getter for MmMtlQcRslt.
     * @return MmMtlQcRslt
     */
    public ViewObjectImpl getMmMtlQcRslt() {
        return (ViewObjectImpl) findViewObject("MmMtlQcRslt");
    }

    /**
     * Container's getter for MmQcParamItm.
     * @return MmQcParamItm
     */
    public ViewObjectImpl getMmQcParamItm() {
        return (ViewObjectImpl) findViewObject("MmQcParamItm");
    }

    /**
     * Container's getter for MmMtlQcDtl.
     * @return MmMtlQcDtl
     */
    public MmMtlQcDtlVOImpl getMmMtlQcDtl() {
        return (MmMtlQcDtlVOImpl) findViewObject("MmMtlQcDtl");
    }

    /**
     * Container's getter for FkMmMtlQcRsltVL1.
     * @return FkMmMtlQcRsltVL1
     */
    public ViewLinkImpl getFkMmMtlQcRsltVL1() {
        return (ViewLinkImpl) findViewLink("FkMmMtlQcRsltVL1");
    }

    /**
     * Container's getter for MtlQcRstTOQcParamItmVL1.
     * @return MtlQcRstTOQcParamItmVL1
     */
    public ViewLinkImpl getMtlQcRstTOQcParamItmVL1() {
        return (ViewLinkImpl) findViewLink("MtlQcRstTOQcParamItmVL1");
    }

    /**
     * Container's getter for FkMmMtlQcDtlVL1.
     * @return FkMmMtlQcDtlVL1
     */
    public ViewLinkImpl getFkMmMtlQcDtlVL1() {
        return (ViewLinkImpl) findViewLink("FkMmMtlQcDtlVL1");
    }
    
    
    public void applyGlobalFilter(){
        // Code to filter qc main VO
        
        // code to Filter Rcpt Item Vo
        
        RcptItmVOImpl vo=this.getRcptItm2();
         vo.setCldIdBind(EbizParams.GLBL_APP_CLD_ID());
        vo.setSlocIdBind(EbizParams.GLBL_APP_SERV_LOC());
        vo.setOrgIdBind(EbizParams.GLBL_APP_USR_ORG());
       vo.executeQuery();
       
        LovQcParamItmVOImpl paramItm = this.getLovQcParamItm();
        paramItm.setCldIdBind(EbizParams.GLBL_APP_CLD_ID());
        paramItm.setSlocIdBind(EbizParams.GLBL_APP_SERV_LOC());
        paramItm.setOrgIdBind(EbizParams.GLBL_APP_USR_ORG());
        paramItm.executeQuery();
        
        
        this.getLovItmIdVw1().setNamedWhereClauseParam("CldIdBind", p_cldId);
        this.getLovItmIdVw1().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        this.getLovItmIdVw1().setNamedWhereClauseParam("OrgIdBind", p_org_id);
        this.getLovItmIdVw1().setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
        this.getLovItmIdVw1().executeQuery();
        
        
        this.getLovMnfJeOp().setNamedWhereClauseParam("CldIdBind", p_cldId);
        this.getLovMnfJeOp().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        this.getLovMnfJeOp().setNamedWhereClauseParam("OrgIdBind", p_org_id);
        this.getLovMnfJeOp().setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
        this.getLovMnfJeOp().executeQuery();
        
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
      return ADFModelUtils.callFunction(this, new StringBuilder(stmt),bindVars , sqlReturnType);
    }

    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        Row currentRow = this.getMmMtlQc().getCurrentRow();
        String txnId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18512), new Integer(0)
        })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        loginfo.info("--TxnId new created--" + txnId);
        currentRow.setAttribute("QcTxnId", txnId);
        currentRow.setAttribute("QcTxnDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        getFYid(CldId, OrgId, new Timestamp(System.currentTimeMillis()), "A");


    }


    /**
     *
     * @param SlocId
     * @param CldId
     * @param HoOrgId
     * @param OrgId
     * @param TableName
     * @return
     */

    public String genQcProcessNo(Integer SlocId, String CldId, String HoOrgId, String OrgId, String TableName) {
        Row cmRow = this.getMmMtlQc().getCurrentRow();
        String qcNo = null;
        Integer docType = 0;
        Integer fyId = Integer.parseInt(cmRow.getAttribute("FyId").toString());
        loginfo.info("fyId   ::: " + fyId);
        if (cmRow.getAttribute("QcNo") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            qcNo = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                               SlocId, CldId, OrgId, TableName, null, fyId
            });
            loginfo.info("new id    " + qcNo);
            cmRow.setAttribute("QcNo", qcNo);
        } else {
            qcNo = cmRow.getAttribute("QcNo").toString();
        }
        return qcNo;
    }

    /**
     *
     * @param CldId
     * @param OrgId
     * @param geDate
     * @param Mode
     * @return
     */

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        loginfo.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            loginfo.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmMtlQc();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            loginfo.info("In case mode is validation");
        }
        return fyId;
    }


    public void addDtlItmFromParam() {
        // ViewObjectImpl qcDtl = this.getMmMtlQcDtl();
        //  ViewObjectImpl paramVo = this.getMmQcParamItm();
        // ViewObjectImpl qcRslt = this.getMmMtlQcRslt();
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl qcDtl = this.getMmMtlQcDtl1();
        ViewObjectImpl paramVo = this.getMmQcParamItm1();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        Row qcRsltCurr = qcRslt.getCurrentRow();
        Row mtlQcRow = mtlQc.getCurrentRow();
        RowSetIterator rsi = paramVo.createRowSetIterator(null);
        int okCount = 0;
        int rewkCount = 0;
        int rjctCount = 0;
        int count = 1;
        Number one = new Number(1);
        Integer qcChkType = Integer.parseInt(mtlQcRow.getAttribute("QcChkType").toString());
        loginfo.info("chk type " + qcChkType);
        Integer slNo = Integer.parseInt(callStoredFunction(Types.NUMERIC, "FN_GET_QC_CHK_SLNO (?,?,?,?,?,?)", new Object[] {
                                                           qcRsltCurr.getAttribute("CldId").toString(),
                                                           Integer.parseInt(qcRsltCurr.getAttribute("SlocId").toString()),
                                                           qcRsltCurr.getAttribute("OrgId").toString(),
                                                           qcRsltCurr.getAttribute("QcTxnId").toString(),
                                                           qcRsltCurr.getAttribute("ItmId").toString(),
                                                           qcRsltCurr.getAttribute("ItmUom").toString()
        }).toString());
        while (rsi.hasNext()) {
            Row currRow = rsi.next();
            Row insrtNew = qcDtl.createRow();
            insrtNew.setAttribute("CldId", qcRsltCurr.getAttribute("CldId"));
            insrtNew.setAttribute("SlocId", qcRsltCurr.getAttribute("SlocId"));
            insrtNew.setAttribute("OrgId", qcRsltCurr.getAttribute("OrgId"));
            insrtNew.setAttribute("QcTxnId", qcRsltCurr.getAttribute("QcTxnId"));
            insrtNew.setAttribute("ItmId", qcRsltCurr.getAttribute("ItmId"));
            insrtNew.setAttribute("ItmUom", qcRsltCurr.getAttribute("ItmUom"));
            insrtNew.setAttribute("ChkSrlNo", slNo);
            insrtNew.setAttribute("ParamId", currRow.getAttribute("ParamId"));
            insrtNew.setAttribute("StdVal", currRow.getAttribute("StdVal"));
            insrtNew.setAttribute("LowerLimit", currRow.getAttribute("LowerLimit"));
            insrtNew.setAttribute("UpperLimit", currRow.getAttribute("UpperLimit"));
            if (qcChkType == 282) {
                insrtNew.setAttribute("SrNo", qcRsltCurr.getAttribute("TransSrNo"));
            }
            if (Integer.parseInt(currRow.getAttribute("ParamType").toString()) == 274) {
                insrtNew.setAttribute("ActualVal", currRow.getAttribute("TransActualVal"));
            } else if (Integer.parseInt(currRow.getAttribute("ParamType").toString()) == 275) {
                insrtNew.setAttribute("ActualVal", currRow.getAttribute("TransForBooleanType"));
            }
            insrtNew.setAttribute("QcRslt", currRow.getAttribute("TransQcCheckStatus"));
            qcDtl.insertRow(insrtNew);
            qcDtl.executeQuery();
            if (currRow.getAttribute("TransQcCheckStatus") != null) {
                if (Integer.parseInt(currRow.getAttribute("TransQcCheckStatus").toString()) == 284) {
                    okCount = okCount + 1;
                } else if (Integer.parseInt(currRow.getAttribute("TransQcCheckStatus").toString()) == 285) {
                    rewkCount = rewkCount + 1;
                } else if (Integer.parseInt(currRow.getAttribute("TransQcCheckStatus").toString()) == 286) {
                    rjctCount = rjctCount + 1;
                }
            }
            if (currRow.getAttribute("ParamType") != null) {
                if (Integer.parseInt(currRow.getAttribute("ParamType").toString()) == 274) {
                    currRow.setAttribute("TransActualVal", null);
                    currRow.setAttribute("TransQcCheckStatus", null);
                } else if (Integer.parseInt(currRow.getAttribute("ParamType").toString()) == 275) {
                    currRow.setAttribute("TransForBooleanType", null);
                    currRow.setAttribute("TransQcCheckStatus", 284);
                }
            }

        }
        Number inspctnQty = (Number) (qcRsltCurr.getAttribute("TransQcCheckNo"));
        Number uomCnvrFctr = (Number) (qcRsltCurr.getAttribute("UomConvFctr"));
        Number inspctnQtySp = (Number) inspctnQty.divide(uomCnvrFctr).round(2);
        loginfo.info("inspctnQtySp     " + inspctnQtySp);
        if (okCount > 0 && rewkCount == 0 && rjctCount == 0) {
            Number okBsNew = (Number) (qcRsltCurr.getAttribute("QcOkQtyBs"));
            Number okBsvalue = okBsNew.add(inspctnQty);
            qcRsltCurr.setAttribute("QcOkQtyBs", okBsvalue);
            Number okNew = (Number) (qcRsltCurr.getAttribute("QcOkQty"));
            Number okvalue = okNew.add(inspctnQtySp);
            qcRsltCurr.setAttribute("QcOkQty", okvalue);

        } else if (rjctCount > 0) {
            Number rjctBsNew = (Number) (qcRsltCurr.getAttribute("QcRejQtyBs"));
            Number rjctBsvalue = rjctBsNew.add(inspctnQty);
            qcRsltCurr.setAttribute("QcRejQtyBs", rjctBsvalue);
            Number rjctNew = (Number) (qcRsltCurr.getAttribute("QcRejQty"));
            Number rjctvalue = rjctNew.add(inspctnQtySp);
            qcRsltCurr.setAttribute("QcRejQty", rjctvalue);
        } else if (rewkCount > 0 && rjctCount == 0) {
            Number rwrkBsNew = (Number) (qcRsltCurr.getAttribute("QcRwkQtyBs"));
            Number rwrkBsvalue = rwrkBsNew.add(inspctnQty);
            qcRsltCurr.setAttribute("QcRwkQtyBs", rwrkBsvalue);
            Number rwrkNew = (Number) (qcRsltCurr.getAttribute("QcRwkQty"));
            Number rwrkvalue = rwrkNew.add(inspctnQtySp);
            qcRsltCurr.setAttribute("QcRwkQty", rwrkvalue);
        }
        qcRsltCurr.setAttribute("TransQcCheckNo", one);
        /*   Number okQty=(Number)(qcRsltCurr.getAttribute("QcOkQty"));
      Number rwrkQty=(Number)(qcRsltCurr.getAttribute("QcRwkQty"));
      Number rjctQty=(Number)(qcRsltCurr.getAttribute("QcRejQty")); */
        Number okQty = (Number) (qcRsltCurr.getAttribute("QcOkQtyBs"));
        Number rwrkQty = (Number) (qcRsltCurr.getAttribute("QcRwkQtyBs"));
        Number rjctQty = (Number) (qcRsltCurr.getAttribute("QcRejQtyBs"));
        Number doneQCQty = okQty.add(rwrkQty).add(rjctQty);
        loginfo.info("doneQCQty--------------------" + doneQCQty);
        qcRsltCurr.setAttribute("TransTotalQcDoneQty", doneQCQty);
        if (qcChkType == 282) {
            qcRsltCurr.setAttribute("TransSrNo", null); // for sr no
        }
        rsi.closeRowSetIterator();
        this.getDBTransaction().postChanges();
    }


    public void doneQcProcessForSingleItm() {
        // ViewObjectImpl qcDtl = this.getMmMtlQcDtl();
        //  ViewObjectImpl paramVo = this.getMmQcParamItm();
        // ViewObjectImpl qcRslt = this.getMmMtlQcRslt();
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl qcDtl = this.getMmMtlQcDtl1();
        ViewObjectImpl paramVo = this.getMmQcParamItm1();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        ViewObjectImpl qcCsn = this.getMmMtlQcCsn();
        ViewObjectImpl qcDtl3 = this.getMmMtlQcDtl3();
        Row qcRsltCurr = qcRslt.getCurrentRow();
        Row qcCsnCurr = qcCsn.getCurrentRow();
        Row mtlQcRow = mtlQc.getCurrentRow();
        RowSetIterator rsi = paramVo.createRowSetIterator(null);
        RowSetIterator rsiDlt3 = qcDtl3.createRowSetIterator(null);
        int okCount = 0;
        int rewkCount = 0;
        int rjctCount = 0;
        int count = 1;
        Number one = new Number(1);
        Integer qcChkType = Integer.parseInt(mtlQcRow.getAttribute("QcChkType").toString());
        loginfo.info("chk type " + qcChkType);
        //      Integer slNo = Integer.parseInt(callStoredFunction(Types.NUMERIC, "FN_GET_QC_CHK_SLNO (?,?,?,?,?,?)", new Object[] {qcRsltCurr.getAttribute("CldId").toString(),Integer.parseInt(qcRsltCurr.getAttribute("SlocId").toString()), qcRsltCurr.getAttribute("OrgId").toString()
        //                                                                                                                                               ,qcRsltCurr.getAttribute("QcTxnId").toString(), qcRsltCurr.getAttribute("ItmId").toString(),qcRsltCurr.getAttribute("ItmUom").toString()}).toString());
        //      while(rsi.hasNext()){
        //          Row currRow = rsi.next();
        //          Row insrtNew = qcDtl.createRow();
        //          insrtNew.setAttribute("CldId", qcRsltCurr.getAttribute("CldId"));
        //          insrtNew.setAttribute("SlocId", qcRsltCurr.getAttribute("SlocId"));
        //          insrtNew.setAttribute("OrgId", qcRsltCurr.getAttribute("OrgId"));
        //          insrtNew.setAttribute("QcTxnId", qcRsltCurr.getAttribute("QcTxnId"));
        //          insrtNew.setAttribute("ItmId", qcRsltCurr.getAttribute("ItmId"));
        //          insrtNew.setAttribute("ItmUom", qcRsltCurr.getAttribute("ItmUom"));
        //          insrtNew.setAttribute("ChkSrlNo", slNo);
        //          insrtNew.setAttribute("ParamId", currRow.getAttribute("ParamId"));
        //          insrtNew.setAttribute("StdVal", currRow.getAttribute("StdVal"));
        //          insrtNew.setAttribute("LowerLimit", currRow.getAttribute("LowerLimit"));
        //          insrtNew.setAttribute("UpperLimit", currRow.getAttribute("UpperLimit"));
        //          if(qcChkType==282){
        //            insrtNew.setAttribute("SrNo", qcRsltCurr.getAttribute("TransSrNo"));
        //          }
        //          if(Integer.parseInt(currRow.getAttribute("ParamType").toString())==274){
        //          insrtNew.setAttribute("ActualVal", currRow.getAttribute("TransActualVal"));
        //          }else if(Integer.parseInt(currRow.getAttribute("ParamType").toString())==275){
        //             insrtNew.setAttribute("ActualVal", currRow.getAttribute("TransForBooleanType"));
        //          }
        //          insrtNew.setAttribute("QcRslt", currRow.getAttribute("TransQcCheckStatus"));
        //          qcDtl.insertRow(insrtNew);
        //          qcDtl.executeQuery();
        //          if(currRow.getAttribute("TransQcCheckStatus")!= null){
        //              if(Integer.parseInt(currRow.getAttribute("TransQcCheckStatus").toString())==284){
        //                  okCount=okCount+1;
        //              }else if(Integer.parseInt(currRow.getAttribute("TransQcCheckStatus").toString())==285){
        //                  rewkCount=rewkCount+1;
        //              }else if(Integer.parseInt(currRow.getAttribute("TransQcCheckStatus").toString())==286){
        //                  rjctCount=rjctCount+1;
        //              }
        //          }
        //          if(currRow.getAttribute("ParamType")!=null){
        //              if(Integer.parseInt(currRow.getAttribute("ParamType").toString())==274){
        //              currRow.setAttribute("TransActualVal", null);
        //              currRow.setAttribute("TransQcCheckStatus", null);
        //              }else if(Integer.parseInt(currRow.getAttribute("ParamType").toString())==275){
        //              currRow.setAttribute("TransForBooleanType", null);
        //              currRow.setAttribute("TransQcCheckStatus", 284);
        //              }
        //          }
        //
        //      }


        while (rsiDlt3.hasNext()) {
            loginfo.info("While loop enter ::::");
            Row currRow = rsiDlt3.next();
            if (currRow.getAttribute("QcRslt") != null) {
                loginfo.info("QcRslt not null ::::");
                if (Integer.parseInt(currRow.getAttribute("QcRslt").toString()) == 284) {
                    loginfo.info("Ok Count ::::");
                    okCount = okCount + 1;
                } else if (Integer.parseInt(currRow.getAttribute("QcRslt").toString()) == 285) {
                    loginfo.info("rework  Count ::::");
                    rewkCount = rewkCount + 1;
                } else if (Integer.parseInt(currRow.getAttribute("QcRslt").toString()) == 286) {
                    loginfo.info("reject Count ::::");
                    rjctCount = rjctCount + 1;
                }
            }
        }


        Number inspctnQty = (Number) (qcCsnCurr.getAttribute("QcTotQtyBs"));
        Number uomCnvrFctr = (Number) (qcRsltCurr.getAttribute("UomConvFctr"));
        Number inspctnQtySp = (Number) inspctnQty.divide(uomCnvrFctr).round(2);
        loginfo.info(uomCnvrFctr + "inspctnQtySp     " + inspctnQtySp);
        if (okCount > 0 && rewkCount == 0 && rjctCount == 0) {
            // Qc Result table quantity update....
            Number okBsNew = (Number) (qcRsltCurr.getAttribute("QcOkQtyBs"));
            Number okBsvalue = okBsNew.add(inspctnQty);
            qcRsltCurr.setAttribute("QcOkQtyBs", okBsvalue);
            Number okNew = (Number) (qcRsltCurr.getAttribute("QcOkQty"));
            Number okvalue = okNew.add(inspctnQtySp);
            qcRsltCurr.setAttribute("QcOkQty", okvalue);
            // update Qc Cns Quanity ...
            qcCsnCurr.setAttribute("QcOkQtyBs", inspctnQty);
            qcCsnCurr.setAttribute("QcOkQty", inspctnQtySp);


        } else if (rjctCount > 0) {
            // Qc Result table quantity update....
            Number rjctBsNew = (Number) (qcRsltCurr.getAttribute("QcRejQtyBs"));
            Number rjctBsvalue = rjctBsNew.add(inspctnQty);
            qcRsltCurr.setAttribute("QcRejQtyBs", rjctBsvalue);
            Number rjctNew = (Number) (qcRsltCurr.getAttribute("QcRejQty"));
            Number rjctvalue = rjctNew.add(inspctnQtySp);
            qcRsltCurr.setAttribute("QcRejQty", rjctvalue);
            // update Qc Cns Quanity ...
            qcCsnCurr.setAttribute("QcRejQtyBs", inspctnQty);
            qcCsnCurr.setAttribute("QcRejQty", inspctnQtySp);
        } else if (rewkCount > 0 && rjctCount == 0) {
            // Qc Result table quantity update....
            Number rwrkBsNew = (Number) (qcRsltCurr.getAttribute("QcRwkQtyBs"));
            Number rwrkBsvalue = rwrkBsNew.add(inspctnQty);
            qcRsltCurr.setAttribute("QcRwkQtyBs", rwrkBsvalue);
            Number rwrkNew = (Number) (qcRsltCurr.getAttribute("QcRwkQty"));
            Number rwrkvalue = rwrkNew.add(inspctnQtySp);
            qcRsltCurr.setAttribute("QcRwkQty", rwrkvalue);
            // update Qc Cns Quanity ...
            qcCsnCurr.setAttribute("QcRwkQtyBs", inspctnQty);
            qcCsnCurr.setAttribute("QcRwkQty", inspctnQtySp);
        }
        // qcRsltCurr.setAttribute("TransQcCheckNo", one);
        /*   Number okQty=(Number)(qcRsltCurr.getAttribute("QcOkQty"));
      Number rwrkQty=(Number)(qcRsltCurr.getAttribute("QcRwkQty"));
      Number rjctQty=(Number)(qcRsltCurr.getAttribute("QcRejQty")); */
        Number okQty = (Number) (qcRsltCurr.getAttribute("QcOkQtyBs"));
        Number rwrkQty = (Number) (qcRsltCurr.getAttribute("QcRwkQtyBs"));
        Number rjctQty = (Number) (qcRsltCurr.getAttribute("QcRejQtyBs"));
        Number doneQCQty = okQty.add(rwrkQty).add(rjctQty);
        qcCsnCurr.setAttribute("QcCsnComplete", "Y");

        loginfo.info(okQty + "okQty ::: " + rwrkQty + "  rwrkQty ::: " + rjctQty + "    doneQCQty--------------------" +
                     doneQCQty);
        //      qcRsltCurr.setAttribute("TransTotalQcDoneQty", doneQCQty);
        //        if(qcChkType==282){
        //            qcRsltCurr.setAttribute("TransSrNo", null); // for sr no
        //        }
        //       rsi.closeRowSetIterator();
        //        this.getDBTransaction().postChanges();
    }

    public void editChkSrNoAction() {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        //   ViewObjectImpl qcDtl = this.getMmMtlQcDtl1();
        ViewObjectImpl paramVo = this.getMmQcParamItm1();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        ViewObjectImpl qcCsn = this.getMmMtlQcCsn();
        //  ViewObjectImpl qcDtl3 = this.getMmMtlQcDtl3();
        Row qcRsltCurr = qcRslt.getCurrentRow();
        Row qcCsnCurr = qcCsn.getCurrentRow();
        Row mtlQcRow = mtlQc.getCurrentRow();
        //        RowSetIterator rsi = paramVo.createRowSetIterator(null);
        //        RowSetIterator rsiDlt3 = qcDtl3.createRowSetIterator(null);
        Number zero = new Number(0);
        Integer qcChkType = Integer.parseInt(mtlQcRow.getAttribute("QcChkType").toString());
        loginfo.info("chk type " + qcChkType);
        Number inspctnQty = (Number) (qcCsnCurr.getAttribute("QcTotQtyBs"));
        Number uomCnvrFctr = (Number) (qcRsltCurr.getAttribute("UomConvFctr"));
        Number inspctnQtySp = (Number) inspctnQty.divide(uomCnvrFctr).round(2);
        loginfo.info(uomCnvrFctr + "inspctnQtySp     " + inspctnQtySp);
        if (qcCsnCurr != null) {

            Number qcOKRslt = (Number) qcRsltCurr.getAttribute("QcOkQty");
            Number qcRwkRslt = (Number) qcRsltCurr.getAttribute("QcRwkQty");
            Number qcRejRslt = (Number) qcRsltCurr.getAttribute("QcRejQty");
            Number qcOKBsRslt = (Number) qcRsltCurr.getAttribute("QcOkQtyBs");
            Number qcRwkBsRslt = (Number) qcRsltCurr.getAttribute("QcRwkQtyBs");
            Number qcRejBsRslt = (Number) qcRsltCurr.getAttribute("QcRejQtyBs");
            Number qcOKCsn = (Number) qcCsnCurr.getAttribute("QcOkQty");
            Number qcRwkCsn = (Number) qcCsnCurr.getAttribute("QcRwkQty");
            Number qcRejCsn = (Number) qcCsnCurr.getAttribute("QcRejQty");
            Number qcOKBsCsn = (Number) qcCsnCurr.getAttribute("QcOkQtyBs");
            Number qcRwkBsCsn = (Number) qcCsnCurr.getAttribute("QcRwkQtyBs");
            Number qcRejBsCsn = (Number) qcCsnCurr.getAttribute("QcRejQtyBs");

            Number currQcOk = (Number) qcOKRslt.minus(qcOKCsn);
            Number currQcRwk = (Number) qcRwkRslt.minus(qcRwkCsn);
            Number currQcRej = (Number) qcRejRslt.minus(qcRejCsn);
            Number currQcOkBs = (Number) qcOKBsRslt.minus(qcOKBsCsn);
            Number currQcRwkBs = (Number) qcRwkBsRslt.minus(qcRwkBsCsn);
            Number currQcRejBs = (Number) qcRejBsRslt.minus(qcRejBsCsn);

            qcRsltCurr.setAttribute("QcOkQty", currQcOk);
            qcRsltCurr.setAttribute("QcRwkQty", currQcRwk);
            qcRsltCurr.setAttribute("QcRejQty", currQcRej);
            qcRsltCurr.setAttribute("QcOkQtyBs", currQcOkBs);
            qcRsltCurr.setAttribute("QcRwkQtyBs", currQcRwkBs);
            qcRsltCurr.setAttribute("QcRejQtyBs", currQcRejBs);


            qcCsnCurr.setAttribute("QcOkQty", zero);
            qcCsnCurr.setAttribute("QcRwkQty", zero);
            qcCsnCurr.setAttribute("QcRejQty", zero);
            qcCsnCurr.setAttribute("QcOkQtyBs", zero);
            qcCsnCurr.setAttribute("QcRwkQtyBs", zero);
            qcCsnCurr.setAttribute("QcRejQtyBs", zero);
            qcCsnCurr.setAttribute("QcCsnComplete", "N");

        }
    }


    public void resetSrNo() {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        Row qcRsltCurr = qcRslt.getCurrentRow();
        Row mtlQcRow = mtlQc.getCurrentRow();
        Integer qcChkType = Integer.parseInt(mtlQcRow.getAttribute("QcChkType").toString());
        loginfo.info("chk type " + qcChkType);
        if (qcChkType == 282) {
            loginfo.info("dddd    " + qcRsltCurr.getAttribute("TransSrNo"));
            qcRsltCurr.setAttribute("TransSrNo", null); // for sr no
            loginfo.info("dddd afterer   " + qcRsltCurr.getAttribute("TransSrNo"));
        }
    }

    /**
     * Container's getter for RcptItmVO1.
     * @return RcptItmVO1
     */
    public RcptItmVOImpl getRcptItmVO1() {
        return (RcptItmVOImpl) findViewObject("RcptItmVO1");
    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

//    public ArrayList checkParamItmExist() {
//        ViewObjectImpl mtlQc = this.getMmMtlQc();
//        ViewObjectImpl paramItm = this.getLovQcParamItm();
//        ViewObjectImpl paramForJeRc = this.getMnfQcParamForJeRc();
//        Row mtlQcCurr = mtlQc.getCurrentRow();
//        ArrayList itmdecsList = new ArrayList();
//        Integer qcItmType = Integer.parseInt(mtlQcCurr.getAttribute("QcItmType").toString());
//        if (qcItmType.compareTo(new Integer(280)) == 0) { // Check For Material Receipt
//            Row[] itmRow = this.getRcptItmVO1().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
//            loginfo.info("Length of itemRow::::" + itmRow.length);
//            if (itmRow.length > 0) {
//                for (Row r : itmRow) {
//                    if (("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) &&
//                        ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString()))) {
//                        RowQualifier rowQualifier = new RowQualifier(paramItm);
//                        rowQualifier.setWhereClause("CldId ='" + p_cldId + "' and SlocId =" + p_sloc_id +
//                                                    " and OrgId ='" + p_org_id + "' and ItmId = '" +
//                                                    r.getAttribute("ItmId").toString() + "'");
//                        Row[] row = paramItm.getFilteredRows(rowQualifier);
//                        loginfo.info("Length of Row:::::" + row.length + " Expression+" + rowQualifier.getExprStr());
//                        if (row.length > 0) {
//                        } else {
//                            String itmDesc = null;
//
//                            Row[] rr = this.getLovItmIdVw1().getFilteredRows("ItmId", r.getAttribute("ItmId"));
//
//                            loginfo.info("Length rr::" + rr.length + "  " + r.getAttribute("ItmId"));
//                            if (rr.length > 0) {
//                                itmDesc = rr[0].getAttribute("ItmDesc").toString();
//                                loginfo.info("dec:::" + itmDesc);
//                            }
//                            if (itmDesc != null) {
//                                itmdecsList.add(itmDesc);
//                            }
//                        }
//                    }
//                }
//                loginfo.info("arr---------" + itmdecsList);
//            }
//        } else if (qcItmType.compareTo(new Integer(281)) == 0) { // Check For Job execution
//
//            Integer itmType = 67;
//            RowQualifier rqOp = new RowQualifier(this.getLovMnfJeOp());
//            rqOp.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "'");
//            Row[] srcRow = this.getLovMnfJeOp().getFilteredRows(rqOp);
//            loginfo.info(rqOp.getExprStr() + " length JE " + srcRow.length);
//
//            if (srcRow.length > 0) {
//                for (Row r : srcRow) {
//                    RowQualifier rqOpItm = new RowQualifier(this.getLovMnfJeOpItm());
//                    rqOpItm.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' and ItmType =" +
//                                           itmType + " and OpId ='" + r.getAttribute("OpId").toString() + "' ");
//                    Row[] itmRow = this.getLovMnfJeOpItm().getFilteredRows(rqOpItm);
//                    loginfo.info(rqOpItm.getExprStr() + " length JE Itm " + itmRow.length);
//                    if (itmRow.length > 0) {
//                        for (Row rr1 : itmRow) {
//                            if (rr1.getAttribute("ItmId") != null) {
//                                RowQualifier rowQualifier = new RowQualifier(paramForJeRc);
//                                rowQualifier.setWhereClause("CldId ='" + p_cldId + "' and SlocId =" + p_sloc_id +
//                                                            " and OrgId ='" + p_org_id + "' and ItmId = '" +
//                                                            rr1.getAttribute("ItmId").toString() + "'");
//                                Row[] row = paramForJeRc.getFilteredRows(rowQualifier);
//                                loginfo.info("Length of Row JE:::::" + row.length + " Expression+" +
//                                             rowQualifier.getExprStr());
//                                if (row.length > 0) {
//                                } else {
//                                    String itmDesc = null;
//                                    Row[] rr =
//                                        this.getLovItmIdVw1().getFilteredRows("ItmId", rr1.getAttribute("ItmId"));
//
//                                    loginfo.info("Length rr JE::" + rr.length + "  " + rr1.getAttribute("ItmId"));
//                                    if (rr.length > 0) {
//                                        itmDesc = rr[0].getAttribute("ItmDesc").toString();
//                                        loginfo.info("dec:JE ::" + itmDesc);
//                                    }
//                                    if (itmDesc != null) {
//                                        itmdecsList.add(itmDesc);
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//
//            }
//            loginfo.info("arr---JE------" + itmdecsList);
//        } else if (qcItmType.compareTo(new Integer(780)) == 0) { // Check For job Card
//
//            Integer opStat = 119;
//            Integer itmType = 67;
//            RowQualifier rqOp = new RowQualifier(this.getLovJcItmOpForQcSrc());
//            rqOp.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' and ItmType =" + itmType + " ");
//            Row[] srcRow = this.getLovJcItmOpForQcSrc().getFilteredRows(rqOp);
//            loginfo.info(rqOp.getExprStr() + " length JE " + srcRow.length);
//
//            if (srcRow.length > 0) {
//                for (Row r : srcRow) {
//                    RowQualifier rqOpItm = new RowQualifier(this.getLovMnfJcOpItm());
//                    rqOpItm.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' and ItmType =" +
//                                           itmType + " and OpId ='" + r.getAttribute("OpId").toString() + "' ");
//                    Row[] itmRow = this.getLovMnfJcOpItm().getFilteredRows(rqOpItm);
//                    loginfo.info(rqOpItm.getExprStr() + " length JE Itm " + itmRow.length);
//                    if (itmRow.length > 0) {
//                        for (Row rr1 : itmRow) {
//                            if (rr1.getAttribute("ItmId") != null) {
//                                RowQualifier rowQualifier = new RowQualifier(paramForJeRc);
//                                rowQualifier.setWhereClause("CldId ='" + p_cldId + "' and SlocId =" + p_sloc_id +
//                                                            " and OrgId ='" + p_org_id + "' and ItmId = '" +
//                                                            rr1.getAttribute("ItmId").toString() + "'");
//                                Row[] row = paramForJeRc.getFilteredRows(rowQualifier);
//                                loginfo.info("Length of Row JE:::::" + row.length + " Expression+" +
//                                             rowQualifier.getExprStr());
//                                if (row.length > 0) {
//                                } else {
//                                    String itmDesc = null;
//
//                                    Row[] rr =
//                                        this.getLovItmIdVw1().getFilteredRows("ItmId", rr1.getAttribute("ItmId"));
//
//                                    loginfo.info("Length rr JE::" + rr.length + "  " + rr1.getAttribute("ItmId"));
//                                    if (rr.length > 0) {
//                                        itmDesc = rr[0].getAttribute("ItmDesc").toString();
//                                        loginfo.info("dec:JE ::" + itmDesc);
//                                    }
//                                    if (itmDesc != null) {
//                                        itmdecsList.add(itmDesc);
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//
//            }
//            loginfo.info("arr---JE------" + itmdecsList);
//        } else if (qcItmType.compareTo(new Integer(781)) == 0) { // Check For Route Card
//
//            Integer opStat = 119;
//            Integer itmType = 67;
//            RowQualifier rqOp = new RowQualifier(this.getLovMnfJeOp());
//            rqOp.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' and OpStat =" + opStat + " ");
//            Row[] srcRow = this.getLovMnfJeOp().getFilteredRows(rqOp);
//            loginfo.info(rqOp.getExprStr() + " length JE " + srcRow.length);
//
//            if (srcRow.length > 0) {
//                for (Row r : srcRow) {
//                    RowQualifier rqOpItm = new RowQualifier(this.getLovMnfJeOpItm());
//                    rqOpItm.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' and ItmType =" +
//                                           itmType + " and OpId ='" + r.getAttribute("OpId").toString() + "' ");
//                    Row[] itmRow = this.getLovMnfJeOpItm().getFilteredRows(rqOpItm);
//                    loginfo.info(rqOpItm.getExprStr() + " length JE Itm " + itmRow.length);
//                    if (itmRow.length > 0) {
//                        for (Row rr1 : itmRow) {
//                            if (rr1.getAttribute("ItmId") != null) {
//                                RowQualifier rowQualifier = new RowQualifier(paramForJeRc);
//                                rowQualifier.setWhereClause("CldId ='" + p_cldId + "' and SlocId =" + p_sloc_id +
//                                                            " and OrgId ='" + p_org_id + "' and ItmId = '" +
//                                                            r.getAttribute("ItmId").toString() + "'");
//                                Row[] row = paramForJeRc.getFilteredRows(rowQualifier);
//                                loginfo.info("Length of Row JE:::::" + row.length + " Expression+" +
//                                             rowQualifier.getExprStr());
//                                if (row.length > 0) {
//                                } else {
//                                    String itmDesc = null;
//
//                                    Row[] rr =
//                                        this.getLovItmIdVw1().getFilteredRows("ItmId", rr1.getAttribute("ItmId"));
//
//                                    loginfo.info("Length rr JE::" + rr.length + "  " + rr1.getAttribute("ItmId"));
//                                    if (rr.length > 0) {
//                                        itmDesc = rr[0].getAttribute("ItmDesc").toString();
//                                        loginfo.info("dec:JE ::" + itmDesc);
//                                    }
//                                    if (itmDesc != null) {
//                                        itmdecsList.add(itmDesc);
//                                    }
//                                }
//                            }
//                        }
//                    }
//                }
//
//            }
//            loginfo.info("arr---JE------" + itmdecsList);
//        }
//
//
//        //        Row[] itmRow = this.getRcptItmVO1().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
//        //        loginfo.info("Length of itemRow::::"+itmRow.length);
//        //        if(itmRow.length>0){
//        //           for(Row r : itmRow){
//        //               if(("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString())))  {
//        //                   RowQualifier rowQualifier = new RowQualifier(paramItm);
//        //                   rowQualifier.setWhereClause("ItmId = '"+r.getAttribute("ItmId").toString()+"'");
//        //                   Row[] row = paramItm.getFilteredRows(rowQualifier);
//        //                   loginfo.info("Length of Row:::::"+row.length+" Expression+"+rowQualifier.getExprStr());
//        //                   if(row.length>0){
//        //                   }else{
//        //                       String itmDesc=null;
//        //                       Row[] rr = this.getLovItmIdVw1().getFilteredRows("ItmId",r.getAttribute("ItmId"));
//        //
//        //                       loginfo.info("Length rr::"+rr.length+"  "+r.getAttribute("ItmId"));
//        //                       if(rr.length>0){
//        //                           itmDesc = rr[0].getAttribute("ItmDesc").toString();
//        //                           loginfo.info("dec:::"+itmDesc);
//        //                       }
//        //                       if(itmDesc!=null){
//        //                           itmdecsList.add(itmDesc);
//        //                       }
//        //                   }
//        //               }
//        //           }
//        loginfo.info("arr-----all----" + itmdecsList);
//        //  }
//
//        // }
//        return itmdecsList;
//    }
    
    
    public void executeRequiredQuery(Integer itmType){
        
        
        switch(itmType){
        case 280:
            RcptItmVOImpl vo=this.getRcptItmVO1();
            vo.setCldIdBind(EbizParams.GLBL_APP_CLD_ID());
            vo.setSlocIdBind(EbizParams.GLBL_APP_SERV_LOC());
            vo.setOrgIdBind(EbizParams.GLBL_APP_USR_ORG());
            vo.executeQuery();
            break;
        case 281:
            //ViewObjectImpl paramForJeRc = this.getMnfQcParamForJeRc();
            
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("CldIdBind", p_cldId);
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("OrgIdBind", p_org_id);
            this.getMnfQcParamForJeRc().executeQuery();
            
            
            this.getLovMnfJeOpItm().setNamedWhereClauseParam("CldIdBind", p_cldId);
            this.getLovMnfJeOpItm().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            this.getLovMnfJeOpItm().setNamedWhereClauseParam("OrgIdBind", p_org_id);
            this.getLovMnfJeOpItm().setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
            this.getLovMnfJeOpItm().executeQuery();
            break;
        case 780:
            
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("CldIdBind", p_cldId);
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("OrgIdBind", p_org_id);
            this.getMnfQcParamForJeRc().executeQuery();
            
            this.getLovMnfJcOpItm().setNamedWhereClauseParam("CldIdBind", p_cldId);
            this.getLovMnfJcOpItm().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            this.getLovMnfJcOpItm().setNamedWhereClauseParam("OrgIdBind", p_org_id);
            this.getLovMnfJcOpItm().setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
            this.getLovMnfJcOpItm().executeQuery();
            break;
        case 781:
            
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("CldIdBind", p_cldId);
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("OrgIdBind", p_org_id);
            this.getMnfQcParamForJeRc().setNamedWhereClauseParam("dOCIdBind", this.getMmMtlQc().getCurrentRow().getAttribute("QcSrcTxnId"));
            this.getMnfQcParamForJeRc().executeQuery();
            //this.getMmMtlQc().getCurrentRow().getAttribute("QcSrcTxnId")
            
            this.getLovMnfRcOpItm().setNamedWhereClauseParam("CldIdBind", p_cldId);
            this.getLovMnfRcOpItm().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            this.getLovMnfRcOpItm().setNamedWhereClauseParam("OrgIdBind", p_org_id);
            this.getLovMnfRcOpItm().setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
            this.getLovMnfRcOpItm().executeQuery();

            break;
        case 884:
            this.getLovScRcptItm1().setNamedWhereClauseParam("CldIdBind", p_cldId);
            this.getLovScRcptItm1().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            this.getLovScRcptItm1().setNamedWhereClauseParam("OrgIdBind", p_org_id);
            this.getLovScRcptItm1().executeQuery();
            
            this.getLovScRcptSrcVO1().setNamedWhereClauseParam("CldIdBind", p_cldId);
            this.getLovScRcptSrcVO1().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
            this.getLovScRcptSrcVO1().setNamedWhereClauseParam("OrgIdBind", p_org_id);
            this.getLovScRcptSrcVO1().executeQuery();
            break;
        }        
    }
    
    
    
    /**Same Logic has been commented Above
     *
     * @param type -- RCPT,JE,JC,RC,MM$SC$RCPT
     * 280	MATERIAL RECEIPT
       281	PRODUCTION - JOB EXECUTION
       780	JOB CARD
       781	ROUTE CARD
       884      SUBCONTRATCING RECEIPT
     */




    public ArrayList checkParamItmExist() {
        
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl paramItm = this.getLovQcParamItm();
        ViewObjectImpl paramForJeRc = this.getMnfQcParamForJeRc();
        ViewObjectImpl item=null;
        Row mtlQcCurr = mtlQc.getCurrentRow();
        ArrayList itmdecsList = new ArrayList();
        Integer qcItmType = Integer.parseInt(mtlQcCurr.getAttribute("QcItmType").toString());
        Row[] itmRow = null;
        this.executeRequiredQuery(qcItmType);
        
        switch(qcItmType.toString()){
        case "280":
            itmRow=this.getRcptItmVO1().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            break;
        case "281":
            itmRow = this.getLovMnfJeOpItm().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            break;
        case "781":
            itmRow = this.getLovMnfJcOpItm().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            break;
        case "782":
            itmRow = this.getLovMnfRcOpItm().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            break;
        case "884":
            itmRow = this.getLovScRcptItm1().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            break;
        }
        
        if(itmRow==null)
            return itmdecsList;
        
            for (Row r : itmRow) {
                if (("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) &&
                    ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString()))) {
                    
                    RowQualifier rowQualifier = new RowQualifier(paramItm);
                    rowQualifier.setWhereClause("CldId ='" + p_cldId + "' and SlocId =" + p_sloc_id + " and OrgId ='" +
                                                p_org_id + "' and ItmId = '" + r.getAttribute("ItmId").toString() +
                                                "'");
                    Row[] row = paramItm.getFilteredRows(rowQualifier);
                    if (row.length > 0) {
                    } else {
                        String itmDesc = null;
                        Row[] rr = this.getLovItmIdVw1().getFilteredRows("ItmId", r.getAttribute("ItmId"));
                        if (rr.length > 0) {
                            itmDesc = rr[0].getAttribute("ItmDesc").toString();
                        }
                        if (itmDesc != null) {
                            itmdecsList.add(itmDesc);
                        }
                    }
                }
            }


        return itmdecsList;
    }


    /**
     *
     * @param type -- RCPT,JE,JC,RC
     * 280	MATERIAL RECEIPT
       281	PRODUCTION - JOB EXECUTION
       780	JOB CARD
       781	ROUTE CARD
     */

    public void addQcRsltItm(Integer type) {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl qcRcptItm = this.getRcptItmVO1();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        ViewObjectImpl qcSrc = this.getMmMtlQcSrc1();
        Row mtlQcCurr = mtlQc.getCurrentRow();
        ViewObjectImpl RcptItm = this.getRcptItm2();
        ViewObjectImpl jeOpItm = this.getLovMnfJeOpItm();
        ViewObjectImpl jcOpItm = this.getLovMnfJcOpItm();
        ViewObjectImpl rcOpItm = this.getLovMnfRcOpItm();
        String addRcptItm = "Y";
        if (type.compareTo(new Integer(280)) == 0) { // for material reciept
            Row[] srcRow = this.getLovMtlRcptSrc().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            Row[] itmRow = this.getRcptItmVO1().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            ArrayList arrRcptItm = new ArrayList();

            // check for Item Id , Item Unit , Item Base Unit , Reciept Quantity and Reciept base Quantity and unit conversion factor Not null ... !!

            if (itmRow.length > 0) {
                for (Row r1 : itmRow) {
                    if (("Y".equalsIgnoreCase(r1.getAttribute("QcReqdFlg").toString())) &&
                        ("N".equalsIgnoreCase(r1.getAttribute("QcOverrideFlg").toString()))) {
                        if (r1.getAttribute("ItmId") == null || r1.getAttribute("ItmUom") == null ||
                            r1.getAttribute("ItmUomBs") == null || r1.getAttribute("RcptQty") == null ||
                            r1.getAttribute("RcptQtyBs") == null || r1.getAttribute("UomConvFctr") == null) {
                            addRcptItm = "N";
                            if (r1.getAttribute("ItmId") != null) {
                                String ItmName = null;
                                String itmid = r1.getAttribute("ItmId").toString();
                                if (itmid != null) {
                                    
                                    Row[] r2 = this.getLovItmIdVw1().getFilteredRows("ItmId", itmid);

                                    if (r2.length > 0) {
                                        ItmName = r2[0].getAttribute("ItmDesc").toString();
                                    }
                                }
                                arrRcptItm.add(ItmName);

                            }
                        }
                    }
                }
            }
            loginfo.info("addRcptItm---------------" + addRcptItm + "-- arrRcptItm  " + arrRcptItm);

            // If all condititon true for Reciept

            if ("Y".equalsIgnoreCase(addRcptItm) && arrRcptItm.isEmpty()) {

                loginfo.info("lenth   " + srcRow.length);
                if (srcRow.length > 0) {
                    for (Row r1 : srcRow) {
                        RowQualifier newRQforItm = new RowQualifier(RcptItm);
                        newRQforItm.setWhereClause("DocId = '" + r1.getAttribute("DocId").toString() +
                                                   "' and DocIdSrc = '" + r1.getAttribute("DocIdSrc").toString() + "'");
                        Row[] rcptItmRow = RcptItm.getFilteredRows(newRQforItm);
                        loginfo.info(newRQforItm.getExprStr());
                        loginfo.info("itm row in src --  " + rcptItmRow.length);
                        int count = 0;

                        // check for add Source document no or Not.
                        if (rcptItmRow.length > 0) {
                            for (Row rI : rcptItmRow) {
                                if (rI.getAttribute("ItmId") != null) {
                                    Number rcptBs = (Number) rI.getAttribute("RcptQtyBs");
                                    if (("Y".equalsIgnoreCase(rI.getAttribute("QcReqdFlg").toString())) &&
                                        ("N".equalsIgnoreCase(rI.getAttribute("QcOverrideFlg").toString())) &&
                                        rcptBs.compareTo(zero) == 1) {
                                        count = count + 1;
                                    }
                                }
                            }
                        }
                        // If Count Is greater than 0 .. item QC required for Item . add Source Document no.
                        if (count > 0) {
                            loginfo.info("create Src row -----------------");
                            loginfo.info("doc src -------" + r1.getAttribute("DocIdSrc"));
                            Row srcNewRow = qcSrc.createRow();
                            srcNewRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                            srcNewRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                            srcNewRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                            srcNewRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                            srcNewRow.setAttribute("DocIdSrc", r1.getAttribute("DocIdSrc"));
                            if (r1.getAttribute("DocDtSrc") != null) {
                                loginfo.info("doc Date Src not null -----------------");
                                srcNewRow.setAttribute("DocDtSrc", r1.getAttribute("DocDtSrc"));
                            } else if (r1.getAttribute("DocDtSrc") == null) {
                                loginfo.info("doc Date Src is  null -----------------");
                                srcNewRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                            }
                            srcNewRow.setAttribute("DlvSchdlNo", r1.getAttribute("DlvSchdlNo"));
                            srcNewRow.setAttribute("DocTypeSrc", r1.getAttribute("DocTypeSrc"));
                            qcSrc.insertRow(srcNewRow);
                            qcSrc.executeQuery();
                        } else {
                            loginfo.info("NO ITEM FOR QC IN THIS SOURCE DOCUMENT NO......!");
                        }
                    }
                }
                if (itmRow.length > 0) {
                    for (Row r : itmRow) {
                        Number rcptBs = (Number) r.getAttribute("RcptQtyBs");
                        loginfo.info("rcptBs------------------   " + rcptBs);
                        if (("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) &&
                            ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString())) &&
                            rcptBs.compareTo(zero) == 1) {
                            Row newRow = qcRslt.createRow();
                            newRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                            newRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                            newRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                            newRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                            newRow.setAttribute("DocIdSrc", r.getAttribute("DocIdSrc"));
                            newRow.setAttribute("DlvSchdlNo", r.getAttribute("DlvSchdlNo"));
                            newRow.setAttribute("ItmId", r.getAttribute("ItmId"));
                            newRow.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                            newRow.setAttribute("QcTotQty", r.getAttribute("RcptQty"));
                            newRow.setAttribute("QcOkQty", new Number(0));
                            newRow.setAttribute("QcRejQty", new Number(0));
                            newRow.setAttribute("QcRwkQty", new Number(0));
                            newRow.setAttribute("ItmUomBs", r.getAttribute("ItmUomBs"));
                            newRow.setAttribute("QcTotQtyBs", r.getAttribute("RcptQtyBs"));
                            newRow.setAttribute("UomConvFctr", r.getAttribute("UomConvFctr"));
                            newRow.setAttribute("QcOkQtyBs", new Number(0));
                            newRow.setAttribute("QcRejQtyBs", new Number(0));
                            newRow.setAttribute("QcRwkQtyBs", new Number(0));
                            newRow.setAttribute("UsrIdCreate", mtlQcCurr.getAttribute("UsrIdCreate"));
                            newRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                            newRow.setAttribute("TransQcSrcTxnId", mtlQcCurr.getAttribute("QcSrcTxnId"));
                            newRow.setAttribute("TransQcCheckNo", new Number(1));
                            newRow.setAttribute("TransTotalQcDoneQty", new Number(0));
                            qcRslt.insertRow(newRow);
                            //qcRslt.executeQuery();
                        }
                    }
                }
            } else {
                FacesMessage msg =
                    //new FacesMessage(FacesMessage.SEVERITY_ERROR,"Can't add Receipt Item .Required Information Incomplete .!! ",null);
                    //resolvElDCMsg("#{bundle['APP.COA.FinCOAMsg8.Label']}").toString();
                    new FacesMessage(FacesMessage.SEVERITY_ERROR, resolvElDCMsg("#{bundle['MSG.698']}").toString(),
                                     null);

                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, msg);
            }
        } else if (type.compareTo(new Integer(281)) == 0) { // fro job execution
       
            loginfo.info("Job Execution");
           
            Integer itmType = 67;
            RowQualifier rqOp = new RowQualifier(this.getLovMnfJeOp());
            rqOp.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") +"'");
            Row[] srcRow = this.getLovMnfJeOp().getFilteredRows(rqOp);
            loginfo.info(rqOp.getExprStr() + " length JE " + srcRow.length);

            RowQualifier rqOpItm = new RowQualifier(this.getLovMnfJeOpItm());
            rqOpItm.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' and ItmType =" + itmType +
                                   " ");
            Row[] itmRow = this.getLovMnfJeOpItm().getFilteredRows(rqOpItm);
            loginfo.info(rqOpItm.getExprStr() + " length JE Itm " + itmRow.length);
            // Row[] srcRow = this.getLovMnfJeOp().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            //  Row[] itmRow = this.getLovMnfJeOpItm().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            ArrayList arrRcptItm = new ArrayList();

            // check for Item Id , Item Unit , Item Base Unit , Reciept Quantity and Reciept base Quantity and unit conversion factor Not null ... !!

            if (itmRow.length > 0) {
                for (Row r1 : itmRow) {
                    // if(("Y".equalsIgnoreCase(r1.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r1.getAttribute("QcOverrideFlg").toString())))  {
                    if (r1.getAttribute("ItmId") == null || r1.getAttribute("ItmUom") == null) {
                        addRcptItm = "N";
                        if (r1.getAttribute("ItmId") != null) {
                            String ItmName = null;
                            String itmid = r1.getAttribute("ItmId").toString();
                            if (itmid != null) {
                                Row[] r2 = this.getLovItmIdVw1().getFilteredRows("ItmId", itmid);

                                if (r2.length > 0) {
                                    ItmName = r2[0].getAttribute("ItmDesc").toString();
                                }
                            }
                            arrRcptItm.add(ItmName);

                        }
                    }
                    // }
                }
            }
            loginfo.info("addRcptItm-------JE--------" + addRcptItm + "-- arrRcptItm  " + arrRcptItm);

            // If all condititon true for Reciept

            if ("Y".equalsIgnoreCase(addRcptItm) && arrRcptItm.isEmpty()) {

                loginfo.info("lenth JE  " + srcRow.length);
                if (srcRow.length > 0) {
                    for (Row r1 : srcRow) {
                        RowQualifier newRQforItm = new RowQualifier(jeOpItm);
                        newRQforItm.setWhereClause("DocId = '" + r1.getAttribute("DocId").toString() +
                                                   "' and OpId = '" + r1.getAttribute("OpId").toString() + "'");
                        Row[] rcptItmRow = jeOpItm.getFilteredRows(newRQforItm);
                        loginfo.info(newRQforItm.getExprStr());
                        loginfo.info("itm row in src je--  " + rcptItmRow.length);
                        int count = 1;

                        // check for add Source document no or Not.
                        //                        if(rcptItmRow.length>0){
                        //                            for(Row rI : rcptItmRow){
                        //                                if(rI.getAttribute("ItmId")!=null){
                        //                                Number rcptBs = (Number)rI.getAttribute("RcptQtyBs");
                        //                                    if(("Y".equalsIgnoreCase(rI.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(rI.getAttribute("QcOverrideFlg").toString())) && rcptBs.compareTo(zero)==1 )  {
                        //                                        count= count+1;
                        //                                }
                        //                            }
                        //                        }
                        //                        }
                        // If Count Is greater than 0 .. item QC required for Item . add Source Document no.
                        if (count > 0) {
                            loginfo.info("create Src row JE-----------------");
                            loginfo.info("doc src ------JE-" + r1.getAttribute("OpId"));
                            Row srcNewRow = qcSrc.createRow();
                            srcNewRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                            srcNewRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                            srcNewRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                            srcNewRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                            srcNewRow.setAttribute("DocIdSrc", r1.getAttribute("OpId"));
                            srcNewRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                            srcNewRow.setAttribute("DlvSchdlNo", new Integer(0));
                            srcNewRow.setAttribute("DocTypeSrc", new Integer(999));
                            //                        if(r1.getAttribute("DocDtSrc")!=null){
                            //                            loginfo.info("doc Date Src not null -----------------");
                            //                          srcNewRow.setAttribute("DocDtSrc", r1.getAttribute("DocDtSrc"));
                            //                        }else if(r1.getAttribute("DocDtSrc")==null){
                            //                            loginfo.info("doc Date Src is  null -----------------");
                            //                          srcNewRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                            //                        }
                            //  srcNewRow.setAttribute("DlvSchdlNo", r1.getAttribute("DlvSchdlNo"));
                            // srcNewRow.setAttribute("DocTypeSrc", r1.getAttribute("DocTypeSrc"));
                            qcSrc.insertRow(srcNewRow);
                            qcSrc.executeQuery();
                        } else {
                            loginfo.info("NO ITEM FOR QC IN THIS SOURCE DOCUMENT NO......!");
                        }
                    }
                }
                if (itmRow.length > 0) {
                    for (Row r : itmRow) {
                        Number rcptBs = (Number) r.getAttribute("ActItmQty");
                        loginfo.info("ActItmQty------------------   " + rcptBs);
                        // if(("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString())) && rcptBs.compareTo(zero)==1)  {
                        Row newRow = qcRslt.createRow();
                        newRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                        newRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                        newRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                        newRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                        newRow.setAttribute("DocIdSrc", r.getAttribute("OpId"));
                        newRow.setAttribute("DlvSchdlNo", new Integer(0));
                        newRow.setAttribute("DocIdPdo", r.getAttribute("PdoId"));
                        newRow.setAttribute("ItmId", r.getAttribute("ItmId"));
                        newRow.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                        newRow.setAttribute("QcTotQty", r.getAttribute("ActItmQty"));
                        newRow.setAttribute("QcOkQty", new Number(0));
                        newRow.setAttribute("QcRejQty", new Number(0));
                        newRow.setAttribute("QcRwkQty", new Number(0));
                        newRow.setAttribute("ItmUomBs", r.getAttribute("ItmUom"));
                        newRow.setAttribute("QcTotQtyBs", r.getAttribute("ActItmQty"));
                        newRow.setAttribute("UomConvFctr", new Number(1));
                        newRow.setAttribute("QcOkQtyBs", new Number(0));
                        newRow.setAttribute("QcRejQtyBs", new Number(0));
                        newRow.setAttribute("QcRwkQtyBs", new Number(0));
                        newRow.setAttribute("UsrIdCreate", mtlQcCurr.getAttribute("UsrIdCreate"));
                        newRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                        newRow.setAttribute("TransQcSrcTxnId", mtlQcCurr.getAttribute("QcSrcTxnId"));
                        newRow.setAttribute("TransQcCheckNo", new Number(1));
                        newRow.setAttribute("TransTotalQcDoneQty", new Number(0));
                        qcRslt.insertRow(newRow);
                        qcRslt.executeQuery();
                        //  }
                    }
                }

                ViewObjectImpl mnfJe = this.getMnfJeItmMoveView();
                mnfJe.setNamedWhereClauseParam("BindCldId", p_cldId);
                mnfJe.setNamedWhereClauseParam("BindSlocId", p_sloc_id);
                mnfJe.setNamedWhereClauseParam("BindOrgId", p_org_id);
                mnfJe.setNamedWhereClauseParam("BindHoOrgId", p_ho_org_id);
                mnfJe.setNamedWhereClauseParam("BindDocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
                mnfJe.executeQuery();
                loginfo.info(mnfJe.getRowCount() + "lentgetrow count ::" + mtlQcCurr.getAttribute("QcSrcTxnId"));

                RowQualifier rqJeM = new RowQualifier(mnfJe);

                rqJeM.setWhereClause("DocId = '" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' ");
                Row[] rrA = mnfJe.getFilteredRows(rqJeM);
                loginfo.info(rrA.length + "lent of itm move view :: " + rqJeM.getExprStr());
                Row[] rrI = mnfJe.getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));

                loginfo.info(mnfJe.getRowCount() + "lent of itm move view :: " + rrI.length);
                if (rrI.length > 0) {
                    if (rrI[0].getAttribute("ItmMvmtType") != null) {
                        loginfo.info("itm moveemet type " + rrI[0].getAttribute("ItmMvmtType"));
                        mtlQcCurr.setAttribute("JeItmMvmtType", rrI[0].getAttribute("ItmMvmtType"));
                    }

                }

            } else {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR, resolvElDCMsg("#{bundle['MSG.698']}").toString(),
                                     null);

                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, msg);
            }

        } else if (type.compareTo(new Integer(780)) == 0) { // for job card
            
            Integer opStat = 119;
            Integer itmType = 67;
            RowQualifier rqOp = new RowQualifier(this.getLovJcItmOpForQcSrc());
            rqOp.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' and ItmType =" + itmType + " ");
            Row[] srcRow = this.getLovJcItmOpForQcSrc().getFilteredRows(rqOp);
            loginfo.info(rqOp.getExprStr() + " length JC " + srcRow.length);

            RowQualifier rqOpItm = new RowQualifier(this.getLovMnfJcOpItm());
            rqOpItm.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' and ItmType =" + itmType +
                                   " ");
            Row[] itmRow = this.getLovMnfJcOpItm().getFilteredRows(rqOpItm);
            loginfo.info(rqOpItm.getExprStr() + " length JC Itm " + itmRow.length);
            // Row[] srcRow = this.getLovMnfJeOp().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            //  Row[] itmRow = this.getLovMnfJeOpItm().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            ArrayList arrRcptItm = new ArrayList();

            // check for Item Id , Item Unit , Item Base Unit , Reciept Quantity and Reciept base Quantity and unit conversion factor Not null ... !!

            if (itmRow.length > 0) {
                for (Row r1 : itmRow) {
                    // if(("Y".equalsIgnoreCase(r1.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r1.getAttribute("QcOverrideFlg").toString())))  {
                    if (r1.getAttribute("ItmId") == null || r1.getAttribute("ItmUom") == null) {
                        addRcptItm = "N";
                        if (r1.getAttribute("ItmId") != null) {
                            String ItmName = null;
                            String itmid = r1.getAttribute("ItmId").toString();
                            if (itmid != null) {
                                Row[] r2 = this.getLovItmIdVw1().getFilteredRows("ItmId", itmid);

                                if (r2.length > 0) {
                                    ItmName = r2[0].getAttribute("ItmDesc").toString();
                                }
                            }
                            arrRcptItm.add(ItmName);

                        }
                    }
                    // }
                }
            }
            loginfo.info("addRcptItm-------JE--------" + addRcptItm + "-- arrRcptItm  " + arrRcptItm);

            // If all condititon true for Reciept

            if ("Y".equalsIgnoreCase(addRcptItm) && arrRcptItm.isEmpty()) {

                loginfo.info("lenth JE  " + srcRow.length);
                if (srcRow.length > 0) {
                    for (Row r1 : srcRow) {
                        RowQualifier newRQforItm = new RowQualifier(jcOpItm);
                        newRQforItm.setWhereClause("DocId = '" + r1.getAttribute("DocId").toString() +
                                                   "' and OpId = '" + r1.getAttribute("OpId").toString() + "'");
                        Row[] rcptItmRow = jcOpItm.getFilteredRows(newRQforItm);
                        loginfo.info(newRQforItm.getExprStr());
                        loginfo.info("itm row in src jc--  " + rcptItmRow.length);
                        int count = 1;
                        if (count > 0) {
                            loginfo.info("create Src row Jc-----------------");
                            loginfo.info("doc src ------Jc-" + r1.getAttribute("OpId"));
                            Row srcNewRow = qcSrc.createRow();
                            srcNewRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                            srcNewRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                            srcNewRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                            srcNewRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                            srcNewRow.setAttribute("DocIdSrc", r1.getAttribute("OpId"));
                            srcNewRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                            srcNewRow.setAttribute("DlvSchdlNo", new Integer(0));
                            srcNewRow.setAttribute("DocTypeSrc", new Integer(888));
                            qcSrc.insertRow(srcNewRow);
                            qcSrc.executeQuery();
                        } else {
                            loginfo.info("NO ITEM FOR QC IN THIS SOURCE DOCUMENT NO......!");
                        }
                    }
                }
                if (itmRow.length > 0) {
                    for (Row r : itmRow) {
                        Number rcptBs = (Number) r.getAttribute("ItmQty");
                        loginfo.info("ActItmQty------------------   " + rcptBs);
                        // if(("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString())) && rcptBs.compareTo(zero)==1)  {
                        Row newRow = qcRslt.createRow();
                        newRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                        newRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                        newRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                        newRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                        newRow.setAttribute("DocIdSrc", r.getAttribute("OpId"));
                        newRow.setAttribute("DlvSchdlNo", new Integer(0));
                        newRow.setAttribute("DocIdPdo", r.getAttribute("PdoId"));
                        newRow.setAttribute("ItmId", r.getAttribute("ItmId"));
                        newRow.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                        newRow.setAttribute("QcTotQty", r.getAttribute("ItmQty"));
                        newRow.setAttribute("QcOkQty", new Number(0));
                        newRow.setAttribute("QcRejQty", new Number(0));
                        newRow.setAttribute("QcRwkQty", new Number(0));
                        newRow.setAttribute("ItmUomBs", r.getAttribute("ItmUom"));
                        newRow.setAttribute("QcTotQtyBs", r.getAttribute("ItmQty"));
                        newRow.setAttribute("UomConvFctr", new Number(1));
                        newRow.setAttribute("QcOkQtyBs", new Number(0));
                        newRow.setAttribute("QcRejQtyBs", new Number(0));
                        newRow.setAttribute("QcRwkQtyBs", new Number(0));
                        newRow.setAttribute("UsrIdCreate", mtlQcCurr.getAttribute("UsrIdCreate"));
                        newRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                        newRow.setAttribute("TransQcSrcTxnId", mtlQcCurr.getAttribute("QcSrcTxnId"));
                        newRow.setAttribute("TransQcCheckNo", new Number(1));
                        newRow.setAttribute("TransTotalQcDoneQty", new Number(0));
                        qcRslt.insertRow(newRow);
                        qcRslt.executeQuery();
                        //  }
                    }
                }
            } else {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR, resolvElDCMsg("#{bundle['MSG.698']}").toString(),
                                     null);

                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, msg);
            }

        } else if (type.compareTo(new Integer(781)) == 0) { // for Route card
            
            Integer itmType = 67;
            RowQualifier rqOp = new RowQualifier(this.getLovMnfRcOp());
            rqOp.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' ");
            Row[] srcRow = this.getLovMnfRcOp().getFilteredRows(rqOp);
            loginfo.info(rqOp.getExprStr() + " length JC " + srcRow.length);

            RowQualifier rqOpItm = new RowQualifier(this.getLovMnfRcOpItm());
            rqOpItm.setWhereClause("DocId ='" + mtlQcCurr.getAttribute("QcSrcTxnId") + "' and ItmType =" + itmType +
                                   " ");
            Row[] itmRow = this.getLovMnfRcOpItm().getFilteredRows(rqOpItm);
            loginfo.info(rqOpItm.getExprStr() + " length rc Itm " + itmRow.length);
            ArrayList arrRcptItm = new ArrayList();

            // check for Item Id , Item Unit , Item Base Unit ,  Not null ... !!

            if (itmRow.length > 0) {
                for (Row r1 : itmRow) {
                    // if(("Y".equalsIgnoreCase(r1.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r1.getAttribute("QcOverrideFlg").toString())))  {
                    if (r1.getAttribute("ItmId") == null || r1.getAttribute("ItmUom") == null) {
                        addRcptItm = "N";
                        if (r1.getAttribute("ItmId") != null) {
                            String ItmName = null;
                            String itmid = r1.getAttribute("ItmId").toString();
                            if (itmid != null) {
                                Row[] r2 = this.getLovItmIdVw1().getFilteredRows("ItmId", itmid);

                                if (r2.length > 0) {
                                    ItmName = r2[0].getAttribute("ItmDesc").toString();
                                }
                            }
                            arrRcptItm.add(ItmName);

                        }
                    }
                    // }
                }
            }
            loginfo.info("addRcptItm-------rc--------" + addRcptItm + "-- arrRcptItm  " + arrRcptItm);

            // If all condititon true for Reciept

            if ("Y".equalsIgnoreCase(addRcptItm) && arrRcptItm.isEmpty()) {

                loginfo.info("lenth JE  " + srcRow.length);
                if (srcRow.length > 0) {
                    for (Row r1 : srcRow) {
                        RowQualifier newRQforItm = new RowQualifier(rcOpItm);
                        newRQforItm.setWhereClause("DocId = '" + r1.getAttribute("DocId").toString() +
                                                   "' and OpId = '" + r1.getAttribute("OpId").toString() + "'");
                        Row[] rcptItmRow = rcOpItm.getFilteredRows(newRQforItm);
                        loginfo.info(newRQforItm.getExprStr());
                        loginfo.info("itm row in src jc--  " + rcptItmRow.length);
                        int count = 1;
                        if (count > 0) {
                            loginfo.info("create Src row Jc-----------------");
                            loginfo.info("doc src ------Jc-" + r1.getAttribute("OpId"));
                            Row srcNewRow = qcSrc.createRow();
                            srcNewRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                            srcNewRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                            srcNewRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                            srcNewRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                            srcNewRow.setAttribute("DocIdSrc", r1.getAttribute("OpId"));
                            srcNewRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                            srcNewRow.setAttribute("DlvSchdlNo", new Integer(0));
                            srcNewRow.setAttribute("DocTypeSrc", new Integer(777));
                            qcSrc.insertRow(srcNewRow);
                            qcSrc.executeQuery();
                        } else {
                            loginfo.info("NO ITEM FOR QC IN THIS SOURCE DOCUMENT NO......!");
                        }
                    }
                }
                if (itmRow.length > 0) {
                    for (Row r : itmRow) {
                        Number rcptBs = (Number) r.getAttribute("ItmQty");
                        loginfo.info("ActItmQty------------------   " + rcptBs);
                        // if(("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString())) && rcptBs.compareTo(zero)==1)  {
                        Row newRow = qcRslt.createRow();
                        newRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                        newRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                        newRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                        newRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                        newRow.setAttribute("DocIdSrc", r.getAttribute("OpId"));
                        newRow.setAttribute("DlvSchdlNo", new Integer(0));
                        newRow.setAttribute("DocIdPdo", r.getAttribute("PdoId"));
                        newRow.setAttribute("ItmId", r.getAttribute("ItmId"));
                        newRow.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                        newRow.setAttribute("QcTotQty", r.getAttribute("ItmQty"));
                        newRow.setAttribute("QcOkQty", new Number(0));
                        newRow.setAttribute("QcRejQty", new Number(0));
                        newRow.setAttribute("QcRwkQty", new Number(0));
                        newRow.setAttribute("ItmUomBs", r.getAttribute("ItmUom"));
                        newRow.setAttribute("QcTotQtyBs", r.getAttribute("ItmQty"));
                        newRow.setAttribute("UomConvFctr", new Number(1));
                        newRow.setAttribute("QcOkQtyBs", new Number(0));
                        newRow.setAttribute("QcRejQtyBs", new Number(0));
                        newRow.setAttribute("QcRwkQtyBs", new Number(0));
                        newRow.setAttribute("UsrIdCreate", mtlQcCurr.getAttribute("UsrIdCreate"));
                        newRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                        newRow.setAttribute("TransQcSrcTxnId", mtlQcCurr.getAttribute("QcSrcTxnId"));
                        newRow.setAttribute("TransQcCheckNo", new Number(1));
                        newRow.setAttribute("TransTotalQcDoneQty", new Number(0));
                        qcRslt.insertRow(newRow);
                        qcRslt.executeQuery();
                        //  }
                    }
                }
            } else {
                FacesMessage msg =
                    new FacesMessage(FacesMessage.SEVERITY_ERROR, resolvElDCMsg("#{bundle['MSG.698']}").toString(),
                                     null);

                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, msg);
            }

        }

        if (type.compareTo(new Integer(884)) == 0) { // for Subcontrating reciept
            
            Row[] srcRow = this.getLovScRcptSrcVO1().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            Row[] itmRow = this.getLovScRcptItm1().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            ArrayList arrRcptItm = new ArrayList();

            // check for Item Id , Item Unit , Item Base Unit , Reciept Quantity and Reciept base Quantity and unit conversion factor Not null ... !!

            if (itmRow.length > 0) {
                for (Row r1 : itmRow) {
                    if (("Y".equalsIgnoreCase(r1.getAttribute("QcReqdFlg").toString())) &&
                        ("N".equalsIgnoreCase(r1.getAttribute("QcOverrideFlg").toString()))) {
                        System.out.println("Row existin sc ");
                        if (r1.getAttribute("ItmId") == null || r1.getAttribute("ItmUom") == null ||
                            r1.getAttribute("ItmUomBs") == null || r1.getAttribute("RcptQty") == null ||
                            r1.getAttribute("RcptQtyBs") == null || r1.getAttribute("UomConvFctr") == null) {
                            addRcptItm = "N";
                            if (r1.getAttribute("ItmId") != null) {
                                String ItmName = null;
                                String itmid = r1.getAttribute("ItmId").toString();
                                if (itmid != null) {
                                    
                                    Row[] r2 = this.getLovItmIdVw1().getFilteredRows("ItmId", itmid);

                                    if (r2.length > 0) {
                                        ItmName = r2[0].getAttribute("ItmDesc").toString();
                                    }
                                }
                                arrRcptItm.add(ItmName);

                            }
                        }
                    }
                }
            }
            loginfo.info("addRcptItm---------------" + addRcptItm + "-- arrRcptItm  " + arrRcptItm);

            // If all condititon true for Reciept

            if ("Y".equalsIgnoreCase(addRcptItm) && arrRcptItm.isEmpty()) {

                loginfo.info("lenth   " + srcRow.length);
                if (srcRow.length > 0) {
                    for (Row r1 : srcRow) {
                        RowQualifier newRQforItm = new RowQualifier(this.getLovScRcptItm1());
                        newRQforItm.setWhereClause("DocId = '" + r1.getAttribute("DocId").toString() +
                                                   "' and DocIdSrc = '" + r1.getAttribute("DocIdSrc").toString() + "'");
                        Row[] rcptItmRow = this.getLovScRcptItm1().getFilteredRows(newRQforItm);
                        loginfo.info(newRQforItm.getExprStr());
                        loginfo.info("itm row in src --  " + rcptItmRow.length);
                        int count = 0;

                        // check for add Source document no or Not.
                        if (rcptItmRow.length > 0) {
                            for (Row rI : rcptItmRow) {
                                if (rI.getAttribute("ItmId") != null) {
                                    Number rcptBs = (Number) rI.getAttribute("RcptQtyBs");
                                    if (("Y".equalsIgnoreCase(rI.getAttribute("QcReqdFlg").toString())) &&
                                        ("N".equalsIgnoreCase(rI.getAttribute("QcOverrideFlg").toString())) &&
                                        rcptBs.compareTo(zero) == 1) {
                                        count = count + 1;
                                    }
                                }
                            }
                        }
                        // If Count Is greater than 0 .. item QC required for Item . add Source Document no.
                        if (count > 0) {
                            loginfo.info("create Src row -----------------");
                            loginfo.info("doc src -------" + r1.getAttribute("DocIdSrc"));
                            Row srcNewRow = qcSrc.createRow();
                            srcNewRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                            srcNewRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                            srcNewRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                            srcNewRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                            srcNewRow.setAttribute("DocIdSrc", r1.getAttribute("DocIdSrc"));
                            if (r1.getAttribute("DocDtSrc") != null) {
                                loginfo.info("doc Date Src not null -----------------");
                                srcNewRow.setAttribute("DocDtSrc", r1.getAttribute("DocDtSrc"));
                            } else if (r1.getAttribute("DocDtSrc") == null) {
                                loginfo.info("doc Date Src is  null -----------------");
                                srcNewRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                            }
                            srcNewRow.setAttribute("DlvSchdlNo", r1.getAttribute("DlvSchdlNo"));
                            srcNewRow.setAttribute("DocTypeSrc", r1.getAttribute("DocTypeSrc"));
                            qcSrc.insertRow(srcNewRow);
                        } else {
                            loginfo.info("NO ITEM FOR QC IN THIS SOURCE DOCUMENT NO......!");
                        }
                    }
                }
                if (itmRow.length > 0) {
                    for (Row r : itmRow) {
                        Number rcptBs = (Number) r.getAttribute("RcptQtyBs");
                        loginfo.info("rcptBs------------------   " + rcptBs);
                        if (("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) &&
                            ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString())) &&
                            rcptBs.compareTo(zero) == 1) {
                            Row newRow = qcRslt.createRow();
                            newRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                            newRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                            newRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                            newRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                            newRow.setAttribute("DocIdSrc", r.getAttribute("DocIdSrc"));
                            newRow.setAttribute("DlvSchdlNo", r.getAttribute("DlvSchdlNo"));
                            newRow.setAttribute("ItmId", r.getAttribute("ItmId"));
                            newRow.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                            newRow.setAttribute("QcTotQty", r.getAttribute("RcptQty"));
                            newRow.setAttribute("QcOkQty", new Number(0));
                            newRow.setAttribute("QcRejQty", new Number(0));
                            newRow.setAttribute("QcRwkQty", new Number(0));
                            newRow.setAttribute("ItmUomBs", r.getAttribute("ItmUomBs"));
                            newRow.setAttribute("QcTotQtyBs", r.getAttribute("RcptQtyBs"));
                            newRow.setAttribute("UomConvFctr", r.getAttribute("UomConvFctr"));
                            newRow.setAttribute("QcOkQtyBs", new Number(0));
                            newRow.setAttribute("QcRejQtyBs", new Number(0));
                            newRow.setAttribute("QcRwkQtyBs", new Number(0));
                            newRow.setAttribute("UsrIdCreate", mtlQcCurr.getAttribute("UsrIdCreate"));
                            newRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                            newRow.setAttribute("TransQcSrcTxnId", mtlQcCurr.getAttribute("QcSrcTxnId"));
                            newRow.setAttribute("TransQcCheckNo", new Number(1));
                            newRow.setAttribute("TransTotalQcDoneQty", new Number(0));
                            qcRslt.insertRow(newRow);
                            //qcRslt.executeQuery();
                        }
                    }
                }
            } else {
                FacesMessage msg =
                    //new FacesMessage(FacesMessage.SEVERITY_ERROR,"Can't add Receipt Item .Required Information Incomplete .!! ",null);
                    //resolvElDCMsg("#{bundle['APP.COA.FinCOAMsg8.Label']}").toString();
                    new FacesMessage(FacesMessage.SEVERITY_ERROR, resolvElDCMsg("#{bundle['MSG.698']}").toString(),
                                     null);

                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, msg);
            }
        }  
    }

    public void resetSearch() {
        ViewObjectImpl searchVo = this.getMtlQcSearchVO();
        searchVo.setNamedWhereClauseParam("BindQcItmType", null);
        searchVo.setNamedWhereClauseParam("BindRcpyNo", null);
        searchVo.setNamedWhereClauseParam("BindFromDate", null);
        searchVo.setNamedWhereClauseParam("BindToDate", null);
        searchVo.setNamedWhereClauseParam("BindItemId", null);
        searchVo.setNamedWhereClauseParam("BindOrgId", "-1");
        searchVo.setNamedWhereClauseParam("BindQcNo", null);
        searchVo.setNamedWhereClauseParam("BindQcStatus", null);
        searchVo.executeQuery();
    }

    public String SearchQcProcess() {
        ViewObjectImpl qctransVo = getTransQcSearch();
        Row qcCurrr = qctransVo.getCurrentRow();

        if (qcCurrr != null) {
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            System.out.println("curr row is " + qcCurrr);
            /*  String qcType=qcCurrr.getAttribute("QcItmTypeTrans").toString();
            String ItmName=qcCurrr.getAttribute("ItemNmTrans").toString();
            String rcptNo=qcCurrr.getAttribute("ReceiptNoTrans").toString();
            Date fromdate=(Date)qcCurrr.getAttribute("FromDTTrans");
            Date todate=(Date) qcCurrr.getAttribute("ToDttrans"); */
            System.out.println("qc typer " + qcCurrr.getAttribute("QcItmTypeTrans") + " rcptno " +
                               qcCurrr.getAttribute("ReceiptNoTrans") + " fromdate " +
                               qcCurrr.getAttribute("FromDTTrans") + " to date " + qcCurrr.getAttribute("ToDttrans") +
                               " item name " + qcCurrr.getAttribute("ItemNmTrans") + " item id " +
                               qcCurrr.getAttribute("ItmIdTrans"));

            ViewObjectImpl searchVo = this.getMtlQcSearchVO();
            searchVo.setNamedWhereClauseParam("BindQcItmType", qcCurrr.getAttribute("QcItmTypeTrans"));
            searchVo.setNamedWhereClauseParam("BindRcpyNo", qcCurrr.getAttribute("ReceiptNoTrans"));
            searchVo.setNamedWhereClauseParam("BindFromDate", qcCurrr.getAttribute("FromDTTrans"));
            searchVo.setNamedWhereClauseParam("BindToDate", qcCurrr.getAttribute("ToDttrans"));
            searchVo.setNamedWhereClauseParam("BindItemId", qcCurrr.getAttribute("ItmIdTrans"));
            searchVo.setNamedWhereClauseParam("BindOrgId", p_org_id);
            searchVo.setNamedWhereClauseParam("BindQcNo", qcCurrr.getAttribute("QcNoTrans"));
            searchVo.setNamedWhereClauseParam("BindQcStatus", qcCurrr.getAttribute("TransQcStatus"));
            searchVo.executeQuery();

        }


        return null;
    }

    public void qcViewQuery() {
        System.out.println("Executing Query");
        ViewObject vo = this.getMmMtlQc();
        ViewObjectImpl servo = this.getMtlQcSearchVO();
        Row currRow = servo.getCurrentRow();
        ViewCriteria vc = getMmMtlQc().getViewCriteria("MmMtlQcVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdBind", currRow.getAttribute("CldId"));
        vo.setNamedWhereClauseParam("SlocIdBind", currRow.getAttribute("SlocId"));
        vo.setNamedWhereClauseParam("OrgIdBind", currRow.getAttribute("OrgId"));
        vo.setNamedWhereClauseParam("QcTxnIdBind", currRow.getAttribute("QcTxnId"));
        vo.executeQuery();
        System.out.println("Executing Complete");
    }

    public void qcResetViewQuery() {
        ViewObject vo = this.getMmMtlQc();
        ViewObjectImpl servo = this.getMtlQcSearchVO();
        Row currRow = servo.getCurrentRow();
        ViewCriteria vc = getMmMtlQc().getViewCriteria("MmMtlQcVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdBind", null);
        vo.setNamedWhereClauseParam("SlocIdBind", null);
        vo.setNamedWhereClauseParam("OrgIdBind", null);
        vo.setNamedWhereClauseParam("QcTxnIdBind", null);
        vo.executeQuery();
    }


    public void resetDtlQuery() {
        ViewObject dltvo = this.getMmMtlQcDtl1();
        ViewCriteria vc = getMmMtlQcDtl1().getViewCriteria("MmMtlQcDtlVOCriteria");
        dltvo.applyViewCriteria(vc);
        dltvo.setNamedWhereClauseParam("SrNoBind", null);
        dltvo.setNamedWhereClauseParam("ParamIdBind", null);
        dltvo.executeQuery();
    }

    public void editQcDtl(Integer statusValue) {
        ViewObjectImpl qcDlt = this.getMmMtlQcDtl1();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        Row currRowRslt = qcRslt.getCurrentRow();
        Row currRow = qcDlt.getCurrentRow();
        RowQualifier rowQualifier = new RowQualifier(qcDlt);
        rowQualifier.setWhereClause(" ItmId ='" + currRow.getAttribute("ItmId").toString() + "' and ChkSrlNo =" +
                                    Integer.parseInt(currRow.getAttribute("ChkSrlNo").toString()) + "");
        Row[] rows = qcDlt.getFilteredRows(rowQualifier);
        loginfo.info(rowQualifier.getExprStr());
        loginfo.info("no of row" + rows.length);
        int okCount = 0;
        int rewkCount = 0;
        int rjctCount = 0;
        Number one = new Number(1);
        if (rows.length > 0) {
            for (Row r : rows) {
                Integer qtyStatus = Integer.parseInt(r.getAttribute("QcRslt").toString());
                if (qtyStatus == 284) {
                    okCount = okCount + 1;
                } else if (qtyStatus == 285) {
                    rewkCount = rewkCount + 1;
                } else if (qtyStatus == 286) {
                    rjctCount = rjctCount + 1;
                }
            }
        }
        loginfo.info("previous value ------" + statusValue);
        loginfo.info("okCount---- " + okCount + "rewkCount--- " + rewkCount + "rjctCount  " + rjctCount);
        Number okSpNew = (Number) (currRowRslt.getAttribute("QcOkQty"));
        Number rjctSpNew = (Number) (currRowRslt.getAttribute("QcRejQty"));
        Number rwrkSpNew = (Number) (currRowRslt.getAttribute("QcRwkQty"));
        Number okNew = (Number) (currRowRslt.getAttribute("QcOkQtyBs"));
        Number rjctNew = (Number) (currRowRslt.getAttribute("QcRejQtyBs"));
        Number rwrkNew = (Number) (currRowRslt.getAttribute("QcRwkQtyBs"));
        Number uomCnvrFctr = (Number) (currRowRslt.getAttribute("UomConvFctr"));
        Number inspctnQtySp = one.divide(uomCnvrFctr);
        if (okCount > 0 && rewkCount == 0 && rjctCount == 0) {
            if (statusValue == 284) {

            } else {
                currRowRslt.setAttribute("QcOkQtyBs", okNew.add(one));
                currRowRslt.setAttribute("QcOkQty", okSpNew.add(inspctnQtySp)); //
                if (statusValue == 285) {
                    currRowRslt.setAttribute("QcRwkQtyBs", rwrkNew.minus(one));
                    currRowRslt.setAttribute("QcRwkQty", rwrkSpNew.minus(inspctnQtySp));
                } else if (statusValue == 286) {
                    currRowRslt.setAttribute("QcRejQtyBs", rjctNew.minus(one));
                    currRowRslt.setAttribute("QcRejQty", rjctSpNew.minus(inspctnQtySp));
                }
            }
        } else if (rjctCount > 0) {
            if (statusValue == 286) {

            } else {
                currRowRslt.setAttribute("QcRejQtyBs", rjctNew.add(one));
                currRowRslt.setAttribute("QcRejQty", rjctSpNew.add(inspctnQtySp));
                if (statusValue == 285) {
                    currRowRslt.setAttribute("QcRwkQtyBs", rwrkNew.minus(one));
                    currRowRslt.setAttribute("QcRwkQty", rwrkSpNew.minus(inspctnQtySp));
                } else if (statusValue == 284) {
                    currRowRslt.setAttribute("QcOkQtyBs", okNew.minus(one));
                    currRowRslt.setAttribute("QcOkQty", okSpNew.minus(inspctnQtySp));
                }
            }
        } else if (rewkCount > 0 && rjctCount == 0) {
            if (statusValue == 285) {

            } else {
                currRowRslt.setAttribute("QcRwkQtyBs", rwrkNew.add(one));
                currRowRslt.setAttribute("QcRwkQty", rwrkSpNew.add(inspctnQtySp));
                if (statusValue == 286) {
                    currRowRslt.setAttribute("QcRejQtyBs", rjctNew.minus(one));
                    currRowRslt.setAttribute("QcRejQty", rjctSpNew.minus(inspctnQtySp));
                } else if (statusValue == 284) {
                    currRowRslt.setAttribute("QcOkQtyBs", okNew.minus(one));
                    currRowRslt.setAttribute("QcOkQty", okSpNew.minus(inspctnQtySp));
                }
            }
        }

    }

    public Integer itemPreviousStatus() {
        // ViewObjectImpl qcDlt = this.getMmMtlQcDtl();
        ViewObjectImpl qcDlt = this.getMmMtlQcDtl1();
        Row currRow = qcDlt.getCurrentRow();
        RowQualifier rowQualifier = new RowQualifier(qcDlt);
        rowQualifier.setWhereClause(" ItmId ='" + currRow.getAttribute("ItmId").toString() + "' and ChkSrlNo =" +
                                    Integer.parseInt(currRow.getAttribute("ChkSrlNo").toString()) + "");
        Row[] rows = qcDlt.getFilteredRows(rowQualifier);
        loginfo.info(rowQualifier.getExprStr());
        loginfo.info("no1 of row" + rows.length);
        int okCount = 0;
        int rewkCount = 0;
        int rjctCount = 0;
        int status = 0;
        if (rows.length > 0) {
            for (Row r : rows) {
                Integer qtyStatus = Integer.parseInt(r.getAttribute("QcRslt").toString());
                if (qtyStatus == 284) {
                    okCount = okCount + 1;
                } else if (qtyStatus == 285) {
                    rewkCount = rewkCount + 1;
                } else if (qtyStatus == 286) {
                    rjctCount = rjctCount + 1;
                }
            }
        }
        loginfo.info("okCount1---- " + okCount + "rewkCount1--- " + rewkCount + "rjctCount1  " + rjctCount);

        if (okCount > 0 && rewkCount == 0 && rjctCount == 0) {
            status = 284;
        } else if (rjctCount > 0) {
            status = 286;
        } else if (rewkCount > 0 && rjctCount == 0) {
            status = 285;
        }
        return status;
    }

    public String isParamStatusTrue() {
        ViewObjectImpl paramvo = this.getMmQcParamItm1();
        int totalCount = paramvo.getRowCount();
        int rangeSize = paramvo.getRangeSize();
        paramvo.setRangeSize(totalCount);
        Row[] rr = paramvo.getAllRowsInRange();
        int count = 0;
        for (Row r : rr) {
            try {

                if (r.getAttribute("TransQcCheckStatus") == null) {
                    count = count + 1;
                    //Integer qcChkSt  = Integer.parseInt(r.getAttribute("TransQcCheckStatus").toString());
                }
            } catch (NullPointerException npe) {
                npe.printStackTrace();
            }
        }
        paramvo.setRangeSize(rangeSize);
        if (count == 0) {
            return "N";
        } else {
            return "Y";
        }
    }

    public String isParamStatusTrueDlt() {
        ViewObjectImpl paramvo = this.getMmMtlQcDtl3();
        int totalCount = paramvo.getRowCount();
        int rangeSize = paramvo.getRangeSize();
        paramvo.setRangeSize(totalCount);
        Row[] rr = paramvo.getAllRowsInRange();
        int count = 0;
        for (Row r : rr) {
            try {

                if (r.getAttribute("QcRslt") == null) {
                    count = count + 1;
                    //Integer qcChkSt  = Integer.parseInt(r.getAttribute("TransQcCheckStatus").toString());
                }
            } catch (NullPointerException npe) {
                npe.printStackTrace();
            }
        }
        paramvo.setRangeSize(rangeSize);
        if (count == 0) {
            return "N";
        } else {
            return "Y";
        }
    }

    public String isSrNoDuplicate(String SrNoValue) {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();
        ViewObjectImpl mtlDlt = this.getMmMtlQcDtl2();
        Row mtlQcRow = mtlQc.getCurrentRow();
        Row mtlQcRsltRow = mtlQcRslt.getCurrentRow();
        loginfo.info(" Sr No   " + SrNoValue);
        RowQualifier rq = new RowQualifier(mtlDlt);
        rq.setWhereClause("QcTxnId ='" + mtlQcRsltRow.getAttribute("QcTxnId") + "' and DocIdSrc = '" +
                          mtlQcRsltRow.getAttribute("DocIdSrc") + "' and  ItmId = '" +
                          mtlQcRsltRow.getAttribute("ItmId") + "' and SrNo = '" + SrNoValue + "'");
        loginfo.info(rq.getExprStr());
        Row[] dltRow = mtlDlt.getFilteredRows(rq);
        // Row[] dltRow = this.getMmMtlQcDtl2().getFilteredRows("SrNo", SrNoValue);
        loginfo.info("lent Sr No   " + dltRow.length);
        if (dltRow.length > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    public void updateCompleteQcCheck() {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcSrc = this.getMmMtlQcSrc1();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();
        Row currQc = mtlQc.getCurrentRow();
        int count = 0;
        String qcTxnId = currQc.getAttribute("QcTxnId").toString();
        Integer qcChkType = Integer.parseInt(currQc.getAttribute("QcChkType").toString());
        RowQualifier rowQualifier = new RowQualifier(mtlQcSrc);
        rowQualifier.setWhereClause("QcTxnId = '" + qcTxnId + "'");
        loginfo.info(rowQualifier.getExprStr());
        Row[] rowSrc = mtlQcSrc.getFilteredRows(rowQualifier);
        loginfo.info("rowSrc.length------" + rowSrc.length);
        if (rowSrc.length > 0) {
            for (Row r : rowSrc) {
                String docSrc = r.getAttribute("DocIdSrc").toString();
                loginfo.info("docSrc-------" + docSrc);
                RowQualifier rowQualifier1 = new RowQualifier(mtlQcRslt);
                rowQualifier1.setWhereClause("QcTxnId = '" + qcTxnId + "' and DocIdSrc = '" + docSrc + "'");
                loginfo.info(rowQualifier1.getExprStr());
                Row[] itmRow = mtlQcRslt.getFilteredRows(rowQualifier1);
                loginfo.info("itmRow.length------" + itmRow.length);
                loginfo.info(" before itm row ----------");
                if (itmRow.length > 0) {
                    for (Row r1 : itmRow) {
                        /*  Number totalQty = (Number)r1.getAttribute("QcTotQty");
                        Number okQty = (Number)r1.getAttribute("QcOkQty");
                        Number rjctQty = (Number)r1.getAttribute("QcRejQty"); */
                        Number totalQty = (Number) r1.getAttribute("QcTotQtyBs");
                        Number okQty = (Number) r1.getAttribute("QcOkQtyBs");
                        Number rjctQty = (Number) r1.getAttribute("QcRejQtyBs");
                        loginfo.info("totalQty  " + totalQty + "  okQty   " + okQty + "   rjctQty  " + rjctQty);
                        if (totalQty.compareTo(okQty.plus(rjctQty)) == 0) {

                        } else {
                            count = count + 1;
                        }
                    }
                }
            }
        }
        if (count == 0) {
            currQc.setAttribute("QcComplete", "Y");
        } else {
            currQc.setAttribute("QcComplete", "N");
        }
    }

    public String checkCompleteQcDone() {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcSrc = this.getMmMtlQcSrc1();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt2();
        Row currQc = mtlQc.getCurrentRow();
        int count = 0;
        String retValue = "N";
        
        String qcTxnId = currQc.getAttribute("QcTxnId").toString();
        Integer qcItmType = Integer.parseInt(currQc.getAttribute("QcItmType").toString());
        
        RowQualifier rowQualifier = new RowQualifier(mtlQcSrc);
        rowQualifier.setWhereClause("QcTxnId = '" + qcTxnId + "'");
        
        loginfo.info(rowQualifier.getExprStr());
        
        Row[] rowSrc = mtlQcSrc.getFilteredRows(rowQualifier);
        loginfo.info("rowSrc.length------" + rowSrc.length);
        if (rowSrc.length > 0) {
            for (Row r : rowSrc) {
                String docSrc = r.getAttribute("DocIdSrc").toString();
                loginfo.info("docSrc-------" + docSrc);
                RowQualifier rowQualifier1 = new RowQualifier(mtlQcRslt);
                rowQualifier1.setWhereClause("QcTxnId = '" + qcTxnId + "' and DocIdSrc = '" + docSrc + "'");
                loginfo.info(rowQualifier1.getExprStr());
                Row[] itmRow = mtlQcRslt.getFilteredRows(rowQualifier1);
                loginfo.info("itmRow.length------" + itmRow.length);
                loginfo.info(" before itm row ----------");
                if (itmRow.length > 0) {
                    for (Row r1 : itmRow) {
                        /*  Number totalQty = (Number)r1.getAttribute("QcTotQty");
                        Number okQty = (Number)r1.getAttribute("QcOkQty");
                        Number rjctQty = (Number)r1.getAttribute("QcRejQty"); */
                        Number totalQty = (Number) r1.getAttribute("QcTotQtyBs");
                        Number okQty = (Number) r1.getAttribute("QcOkQtyBs");
                        Number rjctQty = (Number) r1.getAttribute("QcRejQtyBs");
                        Number rwkQty = (Number) r1.getAttribute("QcRwkQtyBs");
                        loginfo.info("totalQty  " + totalQty + "  okQty   " + okQty + "   rjctQty  " + rjctQty +
                                     " rwkQty " + rwkQty);

                        if (qcItmType.compareTo(new Integer(280)) == 0) {
                            if (totalQty.compareTo(okQty.plus(rjctQty)) == 0) {

                            } else {
                                count = count + 1;
                            }
                        } else {
                            if (totalQty.compareTo(okQty.plus(rjctQty).plus(rwkQty)) == 0) {

                            } else {
                                count = count + 1;
                            }
                        }
                    }
                }
            }
        }
        loginfo.info("count = " + count);
        if (count == 0) {
            retValue = "Y";
            //currQc.setAttribute("QcComplete", "Y");
        } else {
            retValue = "N";
            //currQc.setAttribute("QcComplete", "N");
        }
        return retValue;
    }

    public String checkQcTypeComplete() {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcSrc = this.getMmMtlQcSrc1();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt2(); // change 15/01/2014
        Row currQc = mtlQc.getCurrentRow();
        int count = 0;
        String retValue = "N";
        String chkMsgFlg = "N";
        StringBuilder msg = new StringBuilder("<html><body>");
        msg.append("<b>Following items Accept All or Reject All for listed Document no because Qc Check Type Is Sample Check</b>"); //MSG.699
        String qcTxnId = currQc.getAttribute("QcTxnId").toString();
        Integer qcChkType = Integer.parseInt(currQc.getAttribute("QcChkType").toString());
        RowQualifier rowQualifier = new RowQualifier(mtlQcSrc);
        rowQualifier.setWhereClause("QcTxnId = '" + qcTxnId + "'");
        loginfo.info(rowQualifier.getExprStr());
        Row[] rowSrc = mtlQcSrc.getFilteredRows(rowQualifier);
        loginfo.info("rowSrc.length------" + rowSrc.length);
        if (qcChkType == 282) { // In case of complete Qc Check
            currQc.setAttribute("QcComplete", "Y");
            retValue = "Y";
        } else if (qcChkType == 283) { // In Case of Sample Qc Check Item Wise check Accept/Reject value A/R not N
            if (rowSrc.length > 0) {
                for (Row r : rowSrc) {

                    ArrayList<String> itmArray = new ArrayList<String>();
                    String docIdSrcDisp = r.getAttribute("DocIdSrcDisp").toString();
                    String docSrc = r.getAttribute("DocIdSrc").toString();
                    loginfo.info("docSrc-------" + docSrc + "--display id----" + docIdSrcDisp);
                    RowQualifier rowQualifier1 = new RowQualifier(mtlQcRslt);
                    rowQualifier1.setWhereClause("QcTxnId = '" + qcTxnId + "' and DocIdSrc = '" + docSrc + "'");
                    loginfo.info(rowQualifier1.getExprStr());
                    Row[] itmRow = mtlQcRslt.getFilteredRows(rowQualifier1);
                    loginfo.info("itmRow.length------" + itmRow.length);
                    loginfo.info(" before itm row ----------");
                    if (itmRow.length > 0) {
                        for (Row r1 : itmRow) {
                            if (r1.getAttribute("ItmId") != null) {
                                String accRej = "N";
                                if (r1.getAttribute("AccRejAll") != null) {
                                    accRej = r1.getAttribute("AccRejAll").toString();
                                }
                                if ("N".equalsIgnoreCase(accRej)) {
                                    String ItmName = null;
                                    String itmid = r1.getAttribute("ItmId").toString();
                                    if (itmid != null) {
                                        Row[] r2 = this.getLovItmIdVw1().getFilteredRows("ItmId", itmid);

                                        if (r2.length > 0) {
                                            ItmName = r2[0].getAttribute("ItmDesc").toString();
                                        }
                                    }
                                    itmArray.add(ItmName);
                                }
                            }
                        }
                    }


                    loginfo.info("count---------: " + itmArray + "-----" + docSrc + "--------" + docIdSrcDisp);
                    if (itmArray.size() > 0) {
                        chkMsgFlg = "Y";
                        loginfo.info("inside msd append");
                        msg = msg.append("<p><b>" + docIdSrcDisp + "</b> </p>");
                        msg.append("<ul>");
                        for (String a : itmArray) {
                            msg.append("<li> <b>" + a + "</b></li>");
                        }
                        msg.append("</ul>");
                    }
                    itmArray.removeAll(itmArray);
                }
            }
        }
        if ("Y".equalsIgnoreCase(chkMsgFlg)) {

            msg.append("</body></html>");
            retValue = "N";
            FacesMessage message = new FacesMessage(msg.toString());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        } else if ("N".equalsIgnoreCase(chkMsgFlg) && "N".equalsIgnoreCase(retValue)) {
           // Object src=currQc.getAttribute("QcSrcTxnId");
            currQc.setAttribute("QcComplete", "Y");
         //   currQc.setAttribute("QcSrcTxnId",src);
            retValue = "Y";
        }
        return retValue;
    }

    public String updateReceiptTable() {
        this.getDBTransaction().postChanges();
        ViewObjectImpl qcVo = this.getMmMtlQc();
        Row currRow = qcVo.getCurrentRow();
        String rtrnVal = "N";
        Integer itmChkType = Integer.parseInt(currRow.getAttribute("QcItmType").toString());
        if (currRow.getAttribute("QcComplete") != null) {
            String qcComplete = currRow.getAttribute("QcComplete").toString();
            loginfo.info("qcComplete      " + qcComplete);
            if ("Y".equalsIgnoreCase(qcComplete)) {


                if (itmChkType.compareTo(new Integer(280)) == 0) {

                    loginfo.info("   call Update RCPT Function");
                    loginfo.info("qc txn id    " + currRow.getAttribute("QcTxnId"));
                    Integer rtnVal =
                        Integer.parseInt(callStoredFunction(Types.NUMERIC, "MM.mm_updt_rcpt_frm_qc (?,?,?,?,?)", new Object[] {
                                                            currRow.getAttribute("CldId").toString(),
                                                            Integer.parseInt(currRow.getAttribute("SlocId").toString()),
                                                            currRow.getAttribute("OrgId").toString(),
                                                            currRow.getAttribute("QcTxnId").toString(),
                                                            Integer.parseInt(currRow.getAttribute("QcChkType").toString())
                    }).toString());


                    if (rtnVal == 1) {
                        rtrnVal = "Y";
                    }

                } else if (itmChkType.compareTo(new Integer(281)) == 0) {
                    loginfo.info("   call Update JE Function");
                    loginfo.info("qc txn id    " + currRow.getAttribute("CldId"));
                    loginfo.info("qc txn id    " + currRow.getAttribute("SlocId"));
                    loginfo.info("qc txn id    " + currRow.getAttribute("OrgId"));
                    loginfo.info("qc txn id    " + currRow.getAttribute("QcTxnId"));
                    loginfo.info("qc txn id    " + currRow.getAttribute("QcSrcTxnId"));
                    loginfo.info("qc txn id    " + currRow.getAttribute("QcTxnId"));
                    Integer rtnValJE =
                        Integer.parseInt(callStoredFunction(Types.NUMERIC, "MNF.fn_upd_je_frm_qc (?,?,?,?,?,?)", new Object[] {
                                                            currRow.getAttribute("CldId").toString(),
                                                            Integer.parseInt(currRow.getAttribute("SlocId").toString()),
                                                            currRow.getAttribute("OrgId").toString(),
                                                            currRow.getAttribute("QcTxnId").toString(),
                                                            currRow.getAttribute("QcSrcTxnId").toString(),
                                                            Integer.parseInt(currRow.getAttribute("QcChkType").toString())
                    }).toString());


                    loginfo.info("  rtnValJE :: " + rtnValJE);
                    if (rtnValJE == 1) {
                        //
                        String whId = null;
                        Integer rqmtId = 0;

                        ViewObjectImpl mnfJe = this.getLovMnfJe1();
                        mnfJe.setNamedWhereClauseParam("BindCldId", currRow.getAttribute("CldId").toString());
                        mnfJe.setNamedWhereClauseParam("BindSlocId",
                                                       Integer.parseInt(currRow.getAttribute("SlocId").toString()));
                        mnfJe.setNamedWhereClauseParam("BindOrgId", currRow.getAttribute("OrgId").toString());
                        mnfJe.setNamedWhereClauseParam("BindHoOrgId", p_ho_org_id);
                        mnfJe.setNamedWhereClauseParam("BindDocId", currRow.getAttribute("QcSrcTxnId").toString());
                        mnfJe.executeQuery();
                        Row[] rr = mnfJe.getFilteredRows("DocId", currRow.getAttribute("QcSrcTxnId").toString());
                        if (rr.length > 0) {
                            if (rr[0].getAttribute("WhId") != null)
                                whId = rr[0].getAttribute("WhId").toString();
                            if (rr[0].getAttribute("RqmtAreaId") != null)
                                rqmtId = Integer.parseInt(rr[0].getAttribute("RqmtAreaId").toString());
                        }

                        loginfo.info(whId + " whId  " + rqmtId + " requrement area " +
                                     currRow.getAttribute("JeItmMvmtType"));
                        if (whId == null || rqmtId.compareTo(new Integer(0)) == 0) {
                            return "N";
                        } else {

                            String rtnValJEToRcpt =
                                (String) callStoredFunction(Types.VARCHAR,
                                                            "MNF.fn_mnf_ins_mm_je_to_rcpt (?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            currRow.getAttribute("CldId").toString(),
                                                            Integer.parseInt(currRow.getAttribute("SlocId").toString()),
                                                            currRow.getAttribute("OrgId").toString(), whId,
                                                            currRow.getAttribute("QcSrcTxnId").toString(),
                                                            Integer.parseInt(currRow.getAttribute("FyId").toString()),
                                                            Integer.parseInt(currRow.getAttribute("UsrIdCreate").toString()),
                                                            Integer.parseInt(currRow.getAttribute("JeItmMvmtType").toString()),
                                                            rqmtId
                            });


                            //  Integer rtnValJEToRcpt =new Integer(1);
                            loginfo.info("rtnValJEToRcpt ::  " + rtnValJEToRcpt);
                            if ("Y".equalsIgnoreCase(rtnValJEToRcpt)) {
                                rtrnVal = "Y";
                            }
                        }
                    } else {
                        rtrnVal = "N";
                    }

                }
            }
        }
        loginfo.info("  rtnValJE " + rtrnVal);
        return rtrnVal;
    }
    
    
    
    public String updateScReceipt(){
        // This will update SC Receipt
        this.getDBTransaction().postChanges();
        ViewObjectImpl qcVo = this.getMmMtlQc();
        Row currRow = qcVo.getCurrentRow();
        
        Integer rtnVal =
            Integer.parseInt(callStoredFunction(Types.NUMERIC, "MM.mm_sc_updt_rcpt_frm_qc (?,?,?,?,?)", new Object[] {
                                                currRow.getAttribute("CldId").toString(),
                                                Integer.parseInt(currRow.getAttribute("SlocId").toString()),
                                                currRow.getAttribute("OrgId").toString(),
                                                currRow.getAttribute("QcTxnId").toString(),
                                                Integer.parseInt(currRow.getAttribute("QcChkType").toString())
        }).toString());


        if (rtnVal == 1) {
            return "Y";
        }else{
            return "N";
        }
                
    }
    /**
     *
     * @param value -- document no. like Reciept No , JE No, JC No, RC No
     * @param type - Receipt, Job Execution , Job Card and Route Card     // add parameter 27/01/15 BL
     * @return
     */


    public String isReceiptNoDuplicate(String value) { //, Integer type
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        Row currR = mtlQc.getCurrentRow();
        loginfo.info(currR.getAttribute("QcSrcTxnId") + "----------vlue------------> " + value + "-------------" +
                     mtlQc.getRowCount());
        //Row[] rr =mtlQc.getFilteredRows("QcSrcTxnId", value);
        RowQualifier newQualifier = new RowQualifier(mtlQc);
        newQualifier.setWhereClause("QcSrcTxnId = '" + value + "'");
        loginfo.info(newQualifier.getExprStr());
        Row[] rr = mtlQc.getFilteredRows(newQualifier);
        loginfo.info("length valid" + rr.length);
        int count = 0;
        String flag = "N";
        if (rr.length > 0) {
            for (Row r1 : rr) {
                loginfo.info("Rows------------------");
                // if(!r1.equals(currR)){
                if (r1 != currR) {
                    count = count + 1;
                    flag = "Y";
                }
            }

        }
        loginfo.info("count    " + count + "flag   " + flag);
        return flag;
    }

    public String chkQcEditable() {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        Row currR = mtlQc.getCurrentRow();
        String rtrnVal = "N";
        if (currR.getAttribute("QcComplete") != null) {
            String qcComplete = currR.getAttribute("QcComplete").toString();
            if ("Y".equalsIgnoreCase(qcComplete)) {
                rtrnVal = "Y";
            }
        }
        return rtrnVal;
    }

    public String chkQcForSampaleCase() {
        return null;
    }

    public void updateSpQtyAccRej(String value) {
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();
        Row currRow = mtlQcRslt.getCurrentRow();
        if ("A".equalsIgnoreCase(value)) {
            if (currRow.getAttribute("QcTotQty") != null) {
                currRow.setAttribute("QcOkQty", currRow.getAttribute("QcTotQty"));
                currRow.setAttribute("QcRejQty", new Number(0));
                currRow.setAttribute("QcRwkQty", new Number(0));
                currRow.setAttribute("QcRejResn", null);
            }
        } else if ("R".equalsIgnoreCase(value)) {
            if (currRow.getAttribute("QcTotQty") != null) {
                currRow.setAttribute("QcOkQty", new Number(0));
                currRow.setAttribute("QcRejQty", currRow.getAttribute("QcTotQty"));
                currRow.setAttribute("QcRwkQty", new Number(0));
            }
        }
    }

    public String isSrNoRequired() {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();
        Row currRow = mtlQcRslt.getCurrentRow();
        Row currQc = mtlQc.getCurrentRow();
        Integer qcChkType = Integer.parseInt(currQc.getAttribute("QcChkType").toString());

        String retVal = "N";
        //  if(qcChkType==282){
        if (currRow.getAttribute("TransItmSerialCheck") != null) {
            if ("Y".equalsIgnoreCase(currRow.getAttribute("TransItmSerialCheck").toString())) {
                if (currRow.getAttribute("TransSrNo") == null) {
                    retVal = "Y";
                }
            } else if ("N".equalsIgnoreCase(currRow.getAttribute("TransItmSerialCheck").toString())) {
                if (currRow.getAttribute("TransCheckQuantity") == null ||
                    (currRow.getAttribute("TransCheckQuantity") != null &&
                     zero.compareTo((Number) currRow.getAttribute("TransCheckQuantity")) == 0)) {
                    retVal = "X";
                }
            }
        }
        //  }
        return retVal;
    }

    /**
     * Container's getter for MtlQcSearchVO.
     * @return MtlQcSearchVO
     */
    public ViewObjectImpl getMtlQcSearchVO() {
        return (ViewObjectImpl) findViewObject("MtlQcSearchVO");
    }

    /**
     * Container's getter for LovQcItmTypeVO.
     * @return LovQcItmTypeVO
     */
    public ViewObjectImpl getLovQcItmTypeVO() {
        return (ViewObjectImpl) findViewObject("LovQcItmTypeVO");
    }

    /**
     * Container's getter for LocQCItmVO.
     * @return LocQCItmVO
     */
    public ViewObjectImpl getLocQCItmVO() {
        return (ViewObjectImpl) findViewObject("LocQCItmVO");
    }

    /**
     * Container's getter for LovParamIdVO.
     * @return LovParamIdVO
     */
    public ViewObjectImpl getLovParamIdVO() {
        return (ViewObjectImpl) findViewObject("LovParamIdVO");
    }

    /**
     * Container's getter for ParamFailActnVO.
     * @return ParamFailActnVO
     */
    public ViewObjectImpl getParamFailActnVO() {
        return (ViewObjectImpl) findViewObject("ParamFailActnVO");
    }

    /**
     * Container's getter for LovItmIdO.
     * @return LovItmIdO
     */
    public LovItmIdOImpl getLovItmIdO() {
        return (LovItmIdOImpl) findViewObject("LovItmIdO");
    }

    /**
     * Container's getter for LovQcParamItm.
     * @return LovQcParamItm
     */
    public LovQcParamItmVOImpl getLovQcParamItm() {
        return (LovQcParamItmVOImpl) findViewObject("LovQcParamItm");
    }

    /**
     * Container's getter for MmMtlQcSrc1.
     * @return MmMtlQcSrc1
     */
    public ViewObjectImpl getMmMtlQcSrc1() {
        return (ViewObjectImpl) findViewObject("MmMtlQcSrc1");
    }

    /**
     * Container's getter for MmMtlQcToSrcVL1.
     * @return MmMtlQcToSrcVL1
     */
    public ViewLinkImpl getMmMtlQcToSrcVL1() {
        return (ViewLinkImpl) findViewLink("MmMtlQcToSrcVL1");
    }

    /**
     * Container's getter for MmMtlQcRslt1.
     * @return MmMtlQcRslt1
     */
    public ViewObjectImpl getMmMtlQcRslt1() {
        return (ViewObjectImpl) findViewObject("MmMtlQcRslt1");
    }

    /**
     * Container's getter for MmMtlSrcToRsltVL1.
     * @return MmMtlSrcToRsltVL1
     */
    public ViewLinkImpl getMmMtlSrcToRsltVL1() {
        return (ViewLinkImpl) findViewLink("MmMtlSrcToRsltVL1");
    }

    /**
     * Container's getter for MmMtlQcDtl1.
     * @return MmMtlQcDtl1
     */
    public MmMtlQcDtlVOImpl getMmMtlQcDtl1() {
        return (MmMtlQcDtlVOImpl) findViewObject("MmMtlQcDtl1");
    }

    /**
     * Container's getter for FkMmMtlQcDtlVL2.
     * @return FkMmMtlQcDtlVL2
     */
    public ViewLinkImpl getFkMmMtlQcDtlVL2() {
        return (ViewLinkImpl) findViewLink("FkMmMtlQcDtlVL2");
    }

    /**
     * Container's getter for MmQcParamItm1.
     * @return MmQcParamItm1
     */
    public MmQcParamItmVOImpl getMmQcParamItm1() {
        return (MmQcParamItmVOImpl) findViewObject("MmQcParamItm1");
    }

    /**
     * Container's getter for MtlQcRstTOQcParamItmVL2.
     * @return MtlQcRstTOQcParamItmVL2
     */
    public ViewLinkImpl getMtlQcRstTOQcParamItmVL2() {
        return (ViewLinkImpl) findViewLink("MtlQcRstTOQcParamItmVL2");
    }

    /**
     * Container's getter for MmMtlQcSrc.
     * @return MmMtlQcSrc
     */
    public ViewObjectImpl getMmMtlQcSrc() {
        return (ViewObjectImpl) findViewObject("MmMtlQcSrc");
    }

    /**
     * Container's getter for LovMtlRcptSrc.
     * @return LovMtlRcptSrc
     */
    public ViewObjectImpl getLovMtlRcptSrc() {
        return (ViewObjectImpl) findViewObject("LovMtlRcptSrc");
    }

    /**
     * Container's getter for MmMtlQcDtl2.
     * @return MmMtlQcDtl2
     */
    public MmMtlQcDtlVOImpl getMmMtlQcDtl2() {
        return (MmMtlQcDtlVOImpl) findViewObject("MmMtlQcDtl2");
    }

    /**
     * Container's getter for LovPoNo.
     * @return LovPoNo
     */
    public ViewObjectImpl getLovPoNo() {
        return (ViewObjectImpl) findViewObject("LovPoNo");
    }

    /**
     * Container's getter for LovTransferOrd.
     * @return LovTransferOrd
     */
    public ViewObjectImpl getLovTransferOrd() {
        return (ViewObjectImpl) findViewObject("LovTransferOrd");
    }

    /**
     * Container's getter for LovReceiptNo.
     * @return LovReceiptNo
     */
    public ViewObjectImpl getLovReceiptNo() {
        return (ViewObjectImpl) findViewObject("LovReceiptNo");
    }

    /**
     * Container's getter for MmMtlQcRslt2.
     * @return MmMtlQcRslt2
     */
    public ViewObjectImpl getMmMtlQcRslt2() {
        return (ViewObjectImpl) findViewObject("MmMtlQcRslt2");
    }


    /**
     * Container's getter for RcptItm2.
     * @return RcptItm2
     */
    public RcptItmVOImpl getRcptItm2() {
        return (RcptItmVOImpl) findViewObject("RcptItm2");
    }

    public void filterItm() {
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String p_cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ViewObject itmVO = this.getLovItmIdO();
        ViewObject pramVo = this.getLovParamIdVO();
        ViewObject paramItm = this.getMmQcParamItm1();
        // ViewCriteria vc = getLovItmIdO().getViewCriteria("LovItmIdOCriteria");
        //   itmVO.applyViewCriteria(vc);

        ViewCriteria vcParam = getLovParamIdVO().getViewCriteria("LovParamIdVOCriteria");
        pramVo.applyViewCriteria(vcParam);
        pramVo.setNamedWhereClauseParam("CldIdBind", p_cldId);
        pramVo.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        pramVo.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        pramVo.executeQuery();

        ViewCriteria vcParamItm = getLovParamIdVO().getViewCriteria("MmQcParamItmVOCriteria");
        paramItm.applyViewCriteria(vcParamItm);
        paramItm.setNamedWhereClauseParam("CldIdBind", p_cldId);
        paramItm.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        paramItm.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        paramItm.executeQuery();

    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for TransQcSearch.
     * @return TransQcSearch
     */
    public ViewObjectImpl getTransQcSearch() {
        return (ViewObjectImpl) findViewObject("TransQcSearch");
    }

    /**
     * Container's getter for LovItmIdO1.
     * @return LovItmIdO1
     */
    public LovItmIdOImpl getLovItmIdO1() {
        return (LovItmIdOImpl) findViewObject("LovItmIdO1");
    }

    /**
     * Container's getter for LovItmIdVw1.
     * @return LovItmIdVw1
     */
    public LovItmIdVwVOImpl getLovItmIdVw1() {
        return (LovItmIdVwVOImpl) findViewObject("LovItmIdVw1");
    }

    public Integer QcItemType() {
        loginfo.info("in the QcItem type  ");
        Integer type = (Integer) this.getMmMtlQc().getCurrentRow().getAttribute("QcItmType");
        loginfo.info("type::" + type);
        return type;
    }

    public String setQcComplete() {
        this.getMmMtlQc().getCurrentRow().setAttribute("QcComplete", "Y");
        return null;

    }

    /**
     * Container's getter for LovMnfJe1.
     * @return LovMnfJe1
     */
    public LovMnfJeVOImpl getLovMnfJe1() {
        return (LovMnfJeVOImpl) findViewObject("LovMnfJe1");
    }

    /**
     * Container's getter for LovRqtArea1.
     * @return LovRqtArea1
     */
    public ViewObjectImpl getLovRqtArea1() {
        return (ViewObjectImpl) findViewObject("LovRqtArea1");
    }

    /**
     * Container's getter for MmMtlQcCsn1.
     * @return MmMtlQcCsn1
     */
    public ViewObjectImpl getMmMtlQcCsn() {
        return (ViewObjectImpl) findViewObject("MmMtlQcCsn");
    }

    /**
     * Container's getter for QcRsltToQcCsnVL1.
     * @return QcRsltToQcCsnVL1
     */
    public ViewLinkImpl getQcRsltToQcCsnVL1() {
        return (ViewLinkImpl) findViewLink("QcRsltToQcCsnVL1");
    }

    /**
     * Container's getter for MmMtlQcDtl3.
     * @return MmMtlQcDtl3
     */
    public MmMtlQcDtlVOImpl getMmMtlQcDtl3() {
        return (MmMtlQcDtlVOImpl) findViewObject("MmMtlQcDtl3");
    }

    /**
     * Container's getter for QcCsnToQcDtlVL1.
     * @return QcCsnToQcDtlVL1
     */
    public ViewLinkImpl getQcCsnToQcDtlVL1() {
        return (ViewLinkImpl) findViewLink("QcCsnToQcDtlVL1");
    }

    public Integer addCsnAndParameter(Integer count) {
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl qcDtl = this.getMmMtlQcDtl1();
        ViewObjectImpl qcDtl3 = this.getMmMtlQcDtl3();
        ViewObjectImpl paramVo = this.getLovItmParamLink();
        ViewObjectImpl forJeRc = this.getMnfQcParamForJeRc();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        ViewObjectImpl qcCsn = this.getMmMtlQcCsn();
        Row qcRsltCurr = qcRslt.getCurrentRow();
        Row mtlQcRow = mtlQc.getCurrentRow();
        //RowSetIterator rsi = paramVo.createRowSetIterator(null);


        Number one = new Number(1);
        Integer qcChkType = Integer.parseInt(mtlQcRow.getAttribute("QcChkType").toString());
        Integer qcItmType = Integer.parseInt(mtlQcRow.getAttribute("QcItmType").toString());
        loginfo.info(qcRslt.getCurrentRow().getAttribute("TransCheckQuantity") + "chk type " + qcChkType);
        //        Integer slNo = Integer.parseInt(callStoredFunction(Types.NUMERIC, "FN_GET_QC_CHK_SLNO (?,?,?,?,?,?)", new Object[] {qcRsltCurr.getAttribute("CldId").toString(),Integer.parseInt(qcRsltCurr.getAttribute("SlocId").toString()), qcRsltCurr.getAttribute("OrgId").toString()
        //                                                                                                                                   ,qcRsltCurr.getAttribute("QcTxnId").toString(), qcRsltCurr.getAttribute("ItmId").toString(),qcRsltCurr.getAttribute("ItmUom").toString()}).toString());
        //
        Number uomCnvrFctr = one;
        Number qty = one;
        String chkItmSerialized = "N";
        Integer slNo = count;
        if (qcRslt.getCurrentRow().getAttribute("TransCheckQuantity") != null &&
            ((Number) qcRslt.getCurrentRow().getAttribute("TransCheckQuantity")).compareTo(zero) == 1) {
            loginfo.info("TransCheckQuantity  greater than zero :::");
            qty = (Number) qcRslt.getCurrentRow().getAttribute("TransCheckQuantity");
        }

        if (qcRsltCurr.getAttribute("UomConvFctr") != null)
            uomCnvrFctr = (Number) (qcRsltCurr.getAttribute("UomConvFctr"));
        if (qcRsltCurr.getAttribute("TransItmSerialCheck") != null) {
            chkItmSerialized = qcRsltCurr.getAttribute("TransItmSerialCheck").toString();
        }
        loginfo.info(chkItmSerialized + " arg0  " + qcRsltCurr.getAttribute("TransItmSerialCheck"));
        loginfo.info(" sr no1  " + qcRsltCurr.getAttribute("TransSrNo"));
        Number inspctnQtySp = (Number) qty.divide(uomCnvrFctr).round(2);
        if (qcRslt.getCurrentRow().getAttribute("ItmId") != null) {
            String itmId = qcRslt.getCurrentRow().getAttribute("ItmId").toString();
            Row insrtNew = qcCsn.createRow();
            insrtNew.setAttribute("CldId", qcRsltCurr.getAttribute("CldId"));
            insrtNew.setAttribute("SlocId", qcRsltCurr.getAttribute("SlocId"));
            insrtNew.setAttribute("OrgId", qcRsltCurr.getAttribute("OrgId"));
            insrtNew.setAttribute("QcTxnId", qcRsltCurr.getAttribute("QcTxnId"));
            insrtNew.setAttribute("DocIdSrc", qcRsltCurr.getAttribute("DocIdSrc"));
            insrtNew.setAttribute("DlvSchdlNo", qcRsltCurr.getAttribute("DlvSchdlNo"));
            insrtNew.setAttribute("ItmId", qcRsltCurr.getAttribute("ItmId"));
            insrtNew.setAttribute("ItmUom", qcRsltCurr.getAttribute("ItmUom"));
            insrtNew.setAttribute("ItmUomBs", qcRsltCurr.getAttribute("ItmUomBs"));
            insrtNew.setAttribute("ChkSrlNo", slNo);
            if ("Y".equalsIgnoreCase(chkItmSerialized)) {
                loginfo.info("Insde serial itm Y");
                loginfo.info(" sr no2  " + qcRsltCurr.getAttribute("TransSrNo"));
                insrtNew.setAttribute("SrNo", qcRsltCurr.getAttribute("TransSrNo"));
                insrtNew.setAttribute("QcTotQtyBs", one);
                insrtNew.setAttribute("QcTotQty", one);
            } else {
                loginfo.info("Insde serial itm N ");
                insrtNew.setAttribute("QcTotQtyBs", qty);
                insrtNew.setAttribute("QcTotQty", inspctnQtySp);
            }

            qcCsn.insertRow(insrtNew);
            qcCsn.executeQuery();
            loginfo.info("arg0 :::  " + paramVo.getRowCount());
            Row[] rr = null;
            if ((qcItmType.compareTo(new Integer(280)) == 0)|| (qcItmType.compareTo(new Integer(884))==0)) {
                RowQualifier rq = new RowQualifier(paramVo);
                rq.setWhereClause("CldId ='" + p_cldId + "' and SlocId =" + p_sloc_id + " and OrgId ='" + p_org_id +
                                  "' and ItmId ='" + itmId + "'");
                rr = paramVo.getFilteredRows(rq);
                loginfo.info(rq.getExprStr() + "  : arg0 :");
            } else {
                System.out.println("Row Count is "+forJeRc.getRowCount());
                RowQualifier rq = new RowQualifier(forJeRc);
                rq.setWhereClause(" ItmId ='" + itmId + "'");
                rr = paramVo.getFilteredRows(rq);
            }
            //  loginfo.info("arg0 :::  "+paramVo.getRowCount());
            loginfo.info("  : arg0 :  " + rr.length);
            if (rr.length > 0) {
                for (Row rr1 : rr) {
                    loginfo.info("Row created in details ::::::::: ");
                    Row insrtDltNew = qcDtl3.createRow();
                    insrtDltNew.setAttribute("CldId", qcRsltCurr.getAttribute("CldId"));
                    insrtDltNew.setAttribute("SlocId", qcRsltCurr.getAttribute("SlocId"));
                    insrtDltNew.setAttribute("OrgId", qcRsltCurr.getAttribute("OrgId"));
                    insrtDltNew.setAttribute("QcTxnId", qcRsltCurr.getAttribute("QcTxnId"));
                    insrtDltNew.setAttribute("DocIdSrc", qcRsltCurr.getAttribute("DocIdSrc"));
                    insrtDltNew.setAttribute("DlvSchdlNo", qcRsltCurr.getAttribute("DlvSchdlNo"));
                    insrtDltNew.setAttribute("ItmId", qcRsltCurr.getAttribute("ItmId"));
                    insrtDltNew.setAttribute("ItmUom", qcRsltCurr.getAttribute("ItmUom"));
                    insrtDltNew.setAttribute("ChkSrlNo", slNo);
                    insrtDltNew.setAttribute("ParamId", rr1.getAttribute("ParamId"));
                    insrtDltNew.setAttribute("StdVal", rr1.getAttribute("StdVal"));
                    insrtDltNew.setAttribute("LowerLimit", rr1.getAttribute("LowerLimit"));
                    insrtDltNew.setAttribute("UpperLimit", rr1.getAttribute("UpperLimit"));
                    if ("Y".equalsIgnoreCase(chkItmSerialized)) {
                        insrtDltNew.setAttribute("SrNo", qcRsltCurr.getAttribute("TransSrNo"));
                    }
                    //                if(qcChkType==282){
                    //                 insrtNew.setAttribute("SrNo", qcRsltCurr.getAttribute("TransSrNo"));
                    //               }
                    //               if(Integer.parseInt(rr1.getAttribute("ParamType").toString())==274){
                    //               insrtDltNew.setAttribute("ActualVal", currRow.getAttribute("TransActualVal"));
                    //               }else if(Integer.parseInt(currRow.getAttribute("ParamType").toString())==275){
                    //                  insrtDltNew.setAttribute("ActualVal", currRow.getAttribute("TransForBooleanType"));
                    //               }
                    //               insrtDltNew.setAttribute("QcRslt", currRow.getAttribute("TransQcCheckStatus"));
                    qcDtl3.insertRow(insrtDltNew);
                    qcDtl3.executeQuery();

                }
            }
        }
        Number doneQCQty = (Number) qcRsltCurr.getAttribute("TransTotalQcDoneQty");
        loginfo.info(qty + "  doneQCQty :  " + doneQCQty);
        doneQCQty = doneQCQty.add(qty);
        loginfo.info(qty + "  doneQCQty 2 :  " + doneQCQty);
        qcRsltCurr.setAttribute("TransTotalQcDoneQty", doneQCQty);
        qcRslt.getCurrentRow().setAttribute("TransCheckQuantity", new Number(0));
        qcRsltCurr.setAttribute("TransSrNo", null); // for sr no
        //this.getDBTransaction().postChanges();
        return 0;
    }

    public Integer isProcessCompleteForSingleSr() {
        //        ViewObjectImpl mtlQc = this.getMmMtlQc();
        //        ViewObjectImpl qcDtl = this.getMmMtlQcDtl1();
        //        ViewObjectImpl qcDtl3 = this.getMmMtlQcDtl3();
        //         ViewObjectImpl paramVo = this.getLovItmParamLink();
        //        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        ViewObjectImpl qcCsn = this.getMmMtlQcCsn();
        //        Row qcRsltCurr = qcRslt.getCurrentRow();
        //        Row mtlQcRow = mtlQc.getCurrentRow();
        Row currCsnRow = qcCsn.getCurrentRow();
        if (currCsnRow != null) {
            if (currCsnRow.getAttribute("QcCsnComplete") != null) {
                if ("Y".equalsIgnoreCase(currCsnRow.getAttribute("QcCsnComplete").toString())) {
                    return 1;
                } else {
                    return 0;
                }
            } else {
                return 0;
            }
        }
        return 0;

    }

    /**
     * Container's getter for MmQcParamItm2.
     * @return MmQcParamItm2
     */
    public MmQcParamItmVOImpl getMmQcParamItm2() {
        return (MmQcParamItmVOImpl) findViewObject("MmQcParamItm2");
    }

    /**
     * Container's getter for LovItmParamLink1.
     * @return LovItmParamLink1
     */
    public ViewObjectImpl getLovItmParamLink() {
        return (ViewObjectImpl) findViewObject("LovItmParamLink");
    }

    /**
     * Container's getter for LovMnfJeOp1.
     * @return LovMnfJeOp1
     */
    public ViewObjectImpl getLovMnfJeOp() {
        return (ViewObjectImpl) findViewObject("LovMnfJeOp");
    }

    /**
     * Container's getter for LovMnfJeOpItm1.
     * @return LovMnfJeOpItm1
     */
    public LovMnfJeOpItmVOImpl getLovMnfJeOpItm() {
        return (LovMnfJeOpItmVOImpl) findViewObject("LovMnfJeOpItm");
    }


    /**
     * Container's getter for MnfQcParamForJeRc1.
     * @return MnfQcParamForJeRc1
     */
    public ViewObjectImpl getMnfQcParamForJeRc() {
        return (ViewObjectImpl) findViewObject("MnfQcParamForJeRc");
    }

    /**
     * Container's getter for LovJocCardNo1.
     * @return LovJocCardNo1
     */
    public ViewObjectImpl getLovJocCardNo() {
        return (ViewObjectImpl) findViewObject("LovJocCardNo");
    }

    /**
     * Container's getter for LovRouteCardNo1.
     * @return LovRouteCardNo1
     */
    public ViewObjectImpl getLovRouteCardNo() {
        return (ViewObjectImpl) findViewObject("LovRouteCardNo");
    }

    /**
     * Container's getter for LovJcItmOpForQcSrc1.
     * @return LovJcItmOpForQcSrc1
     */
    public ViewObjectImpl getLovJcItmOpForQcSrc() {
        return (ViewObjectImpl) findViewObject("LovJcItmOpForQcSrc");
    }

    /**
     * Container's getter for LovMnfJcOpItm1.
     * @return LovMnfJcOpItm1
     */
    public LovMnfJcOpItmVOImpl getLovMnfJcOpItm() {
        return (LovMnfJcOpItmVOImpl) findViewObject("LovMnfJcOpItm");
    }

    /**
     * Container's getter for LovMnfRcOp1.
     * @return LovMnfRcOp1
     */
    public ViewObjectImpl getLovMnfRcOp() {
        return (ViewObjectImpl) findViewObject("LovMnfRcOp");
    }

    /**
     * Container's getter for LovMnfRcOpItm1.
     * @return LovMnfRcOpItm1
     */
    public LovMnfRcOpItmVOImpl getLovMnfRcOpItm() {
        return (LovMnfRcOpItmVOImpl) findViewObject("LovMnfRcOpItm");
    }

    /**
     * Container's getter for LovMnfPdoNo1.
     * @return LovMnfPdoNo1
     */
    public ViewObjectImpl getLovMnfPdoNo() {
        return (ViewObjectImpl) findViewObject("LovMnfPdoNo");
    }

    /**
     * Container's getter for LovUomIdView1.
     * @return LovUomIdView1
     */
    public ViewObjectImpl getLovUomIdView() {
        return (ViewObjectImpl) findViewObject("LovUomIdView");
    }

    /**
     * Container's getter for MnfJeItmMoveView1.
     * @return MnfJeItmMoveView1
     */
    public ViewObjectImpl getMnfJeItmMoveView() {
        return (ViewObjectImpl) findViewObject("MnfJeItmMoveView");
    }

    public String isAcceptRejectEnable() {
        ViewObjectImpl rsltVo = this.getMmMtlQcRslt1();
        if (rsltVo.getCurrentRow() != null) {
            if ((rsltVo.getCurrentRow().getAttribute("QcOkQtyBs") != null &&
                 zero.compareTo(((Number) rsltVo.getCurrentRow().getAttribute("QcOkQtyBs"))) == -1) ||
                (rsltVo.getCurrentRow().getAttribute("QcRejQtyBs") != null &&
                 zero.compareTo(((Number) rsltVo.getCurrentRow().getAttribute("QcRejQtyBs"))) == -1) ||
                (rsltVo.getCurrentRow().getAttribute("QcRwkQtyBs") != null &&
                 zero.compareTo(((Number) rsltVo.getCurrentRow().getAttribute("QcRwkQtyBs"))) == -1)) {
                return "N";
            } else {
                return "Y";
            }
        } else {
            return "Y";
        }
    }

    public String isParameterEdiable() {

        ViewObjectImpl rsltVo = this.getMmMtlQcRslt1();
        if (this.getMmMtlQc().getCurrentRow() != null) {
            Integer qcChkType =
                Integer.parseInt(this.getMmMtlQc().getCurrentRow().getAttribute("QcChkType").toString());
            if (qcChkType.compareTo(new Integer(283)) == 0) {
                if (this.getMmMtlQcRslt1().getCurrentRow() != null) {
                    if (this.getMmMtlQcRslt1().getCurrentRow().getAttribute("AccRejAll") != null) {
                        if ("A".equalsIgnoreCase(this.getMmMtlQcRslt1().getCurrentRow().getAttribute("AccRejAll").toString()) ||
                            "R".equalsIgnoreCase(this.getMmMtlQcRslt1().getCurrentRow().getAttribute("AccRejAll").toString())) {
                            return "N";
                        } else {
                            return "Y";
                        }
                    } else {
                        return "Y";
                    }
                } else {
                    return "Y";
                }
            } else {
                return "Y";
            }

        } else {
            return "Y";
        }
    }

    /**
     * Container's getter for ViewRcptItmDetails1.
     * @return ViewRcptItmDetails1
     */
    public ViewObjectImpl getViewRcptItmDetails() {
        return (ViewObjectImpl) findViewObject("ViewRcptItmDetails");
    }

    public Integer viewRcptItmDetails(String docIdSrc) {
        ViewObjectImpl vo = this.getMmMtlQc();
        Row rr = vo.getCurrentRow();
        if (rr != null) {
            loginfo.info(" inside filetr");
            this.getViewRcptItmDetails().setNamedWhereClauseParam("BindSlocId", rr.getAttribute("SlocId"));
            this.getViewRcptItmDetails().setNamedWhereClauseParam("BindCldId", rr.getAttribute("CldId"));
            this.getViewRcptItmDetails().setNamedWhereClauseParam("BindOrgId", rr.getAttribute("OrgId"));
            this.getViewRcptItmDetails().setNamedWhereClauseParam("BindDocId", rr.getAttribute("QcSrcTxnId"));
            this.getViewRcptItmDetails().executeQuery();

        }
        return 1;
    }

    /**
     * Container's getter for LovUsrIdVO1.
     * @return LovUsrIdVO1
     */
    public LovUsrIdVOImpl getLovUsrIdVO1() {
        return (LovUsrIdVOImpl) findViewObject("LovUsrIdVO1");
    }

    /**
     * Container's getter for LovScRcpt1.
     * @return LovScRcpt1
     */
    public ViewObjectImpl getLovScRcpt1() {
        return (ViewObjectImpl) findViewObject("LovScRcpt1");
    }

    /**
     * Container's getter for LovScRcptItm1.
     * @return LovScRcptItm1
     */
    public ViewObjectImpl getLovScRcptItm1() {
        return (ViewObjectImpl) findViewObject("LovScRcptItm1");
    }

    /**
     * Container's getter for LovScRcptSrcVO1.
     * @return LovScRcptSrcVO1
     */
    public ViewObjectImpl getLovScRcptSrcVO1() {
        return (ViewObjectImpl) findViewObject("LovScRcptSrcVO1");
    }
}
