package mmqcprocess.model.entities;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Dec 06 12:28:44 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMtlQcSrcEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getCldId();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        QcTxnId {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getQcTxnId();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setQcTxnId((String)value);
            }
        }
        ,
        DocTypeSrc {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getDocTypeSrc();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setDocTypeSrc((Integer)value);
            }
        }
        ,
        DocIdSrc {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getDocIdSrc();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setDocIdSrc((String)value);
            }
        }
        ,
        DocDtSrc {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getDocDtSrc();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setDocDtSrc((Timestamp)value);
            }
        }
        ,
        DlvSchdlNo {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getDlvSchdlNo();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setDlvSchdlNo((Integer)value);
            }
        }
        ,
        MmMtlQc {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getMmMtlQc();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setMmMtlQc((MmMtlQcEOImpl)value);
            }
        }
        ,
        MmMtlQcRslt {
            public Object get(MmMtlQcSrcEOImpl obj) {
                return obj.getMmMtlQcRslt();
            }

            public void put(MmMtlQcSrcEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmMtlQcSrcEOImpl object);

        public abstract void put(MmMtlQcSrcEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int QCTXNID = AttributesEnum.QcTxnId.index();
    public static final int DOCTYPESRC = AttributesEnum.DocTypeSrc.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int DOCDTSRC = AttributesEnum.DocDtSrc.index();
    public static final int DLVSCHDLNO = AttributesEnum.DlvSchdlNo.index();
    public static final int MMMTLQC = AttributesEnum.MmMtlQc.index();
    public static final int MMMTLQCRSLT = AttributesEnum.MmMtlQcRslt.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmMtlQcSrcEOImpl() {
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for QcTxnId, using the alias name QcTxnId.
     * @return the value of QcTxnId
     */
    public String getQcTxnId() {
        return (String)getAttributeInternal(QCTXNID);
    }

    /**
     * Sets <code>value</code> as the attribute value for QcTxnId.
     * @param value value to set the QcTxnId
     */
    public void setQcTxnId(String value) {
        setAttributeInternal(QCTXNID, value);
    }

    /**
     * Gets the attribute value for DocTypeSrc, using the alias name DocTypeSrc.
     * @return the value of DocTypeSrc
     */
    public Integer getDocTypeSrc() {
        return (Integer)getAttributeInternal(DOCTYPESRC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocTypeSrc.
     * @param value value to set the DocTypeSrc
     */
    public void setDocTypeSrc(Integer value) {
        setAttributeInternal(DOCTYPESRC, value);
    }

    /**
     * Gets the attribute value for DocIdSrc, using the alias name DocIdSrc.
     * @return the value of DocIdSrc
     */
    public String getDocIdSrc() {
        return (String)getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocIdSrc.
     * @param value value to set the DocIdSrc
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for DocDtSrc, using the alias name DocDtSrc.
     * @return the value of DocDtSrc
     */
    public Timestamp getDocDtSrc() {
        return (Timestamp)getAttributeInternal(DOCDTSRC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocDtSrc.
     * @param value value to set the DocDtSrc
     */
    public void setDocDtSrc(Timestamp value) {
        setAttributeInternal(DOCDTSRC, value);
    }

    /**
     * Gets the attribute value for DlvSchdlNo, using the alias name DlvSchdlNo.
     * @return the value of DlvSchdlNo
     */
    public Integer getDlvSchdlNo() {
        return (Integer)getAttributeInternal(DLVSCHDLNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for DlvSchdlNo.
     * @param value value to set the DlvSchdlNo
     */
    public void setDlvSchdlNo(Integer value) {
        setAttributeInternal(DLVSCHDLNO, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity MmMtlQcEOImpl.
     */
    public MmMtlQcEOImpl getMmMtlQc() {
        return (MmMtlQcEOImpl)getAttributeInternal(MMMTLQC);
    }

    /**
     * Sets <code>value</code> as the associated entity MmMtlQcEOImpl.
     */
    public void setMmMtlQc(MmMtlQcEOImpl value) {
        setAttributeInternal(MMMTLQC, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMmMtlQcRslt() {
        return (RowIterator)getAttributeInternal(MMMTLQCRSLT);
    }

    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param qcTxnId key constituent
     * @param docIdSrc key constituent
     * @param dlvSchdlNo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String qcTxnId, String docIdSrc,
                                       Integer dlvSchdlNo) {
        return new Key(new Object[]{cldId, slocId, orgId, qcTxnId, docIdSrc, dlvSchdlNo});
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mmqcprocess.model.entities.MmMtlQcSrcEO");
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
      //  super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}
