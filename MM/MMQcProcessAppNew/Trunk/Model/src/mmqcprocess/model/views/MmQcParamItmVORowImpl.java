package mmqcprocess.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmqcprocess.model.service.QcProcessAMImpl;
import mmqcprocess.model.views.common.MmQcParamItmVORow;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 16 15:11:36 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmQcParamItmVORowImpl extends ViewRowImpl implements MmQcParamItmVORow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        OrgId {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        ItmId {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setItmId((String)value);
            }
        }
        ,
        ParamId {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getParamId();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setParamId((String)value);
            }
        }
        ,
        StdVal {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getStdVal();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setStdVal((Number)value);
            }
        }
        ,
        TlrncLower {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getTlrncLower();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setTlrncLower((Number)value);
            }
        }
        ,
        TlrncUpper {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getTlrncUpper();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setTlrncUpper((Number)value);
            }
        }
        ,
        TlrncType {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getTlrncType();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setTlrncType((String)value);
            }
        }
        ,
        FailActn {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getFailActn();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setFailActn((Integer)value);
            }
        }
        ,
        LowerLimit {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getLowerLimit();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setLowerLimit((Number)value);
            }
        }
        ,
        UpperLimit {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getUpperLimit();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setUpperLimit((Number)value);
            }
        }
        ,
        ApldFrmGp {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getApldFrmGp();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setApldFrmGp((String)value);
            }
        }
        ,
        ParamSpec {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getParamSpec();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setParamSpec((String)value);
            }
        }
        ,
        ParamType {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getParamType();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setParamType((Integer)value);
            }
        }
        ,
        TransActualVal {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getTransActualVal();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setTransActualVal((Number)value);
            }
        }
        ,
        TransForBooleanType {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getTransForBooleanType();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setTransForBooleanType((Integer)value);
            }
        }
        ,
        TransQcCheckStatus {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getTransQcCheckStatus();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setTransQcCheckStatus((Integer)value);
            }
        }
        ,
        LovParamTypeVO {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getLovParamTypeVO();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovParamIdVO {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getLovParamIdVO();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovFailActnVO {
            public Object get(MmQcParamItmVORowImpl obj) {
                return obj.getLovFailActnVO();
            }

            public void put(MmQcParamItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmQcParamItmVORowImpl object);

        public abstract void put(MmQcParamItmVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int PARAMID = AttributesEnum.ParamId.index();
    public static final int STDVAL = AttributesEnum.StdVal.index();
    public static final int TLRNCLOWER = AttributesEnum.TlrncLower.index();
    public static final int TLRNCUPPER = AttributesEnum.TlrncUpper.index();
    public static final int TLRNCTYPE = AttributesEnum.TlrncType.index();
    public static final int FAILACTN = AttributesEnum.FailActn.index();
    public static final int LOWERLIMIT = AttributesEnum.LowerLimit.index();
    public static final int UPPERLIMIT = AttributesEnum.UpperLimit.index();
    public static final int APLDFRMGP = AttributesEnum.ApldFrmGp.index();
    public static final int PARAMSPEC = AttributesEnum.ParamSpec.index();
    public static final int PARAMTYPE = AttributesEnum.ParamType.index();
    public static final int TRANSACTUALVAL = AttributesEnum.TransActualVal.index();
    public static final int TRANSFORBOOLEANTYPE = AttributesEnum.TransForBooleanType.index();
    public static final int TRANSQCCHECKSTATUS = AttributesEnum.TransQcCheckStatus.index();
    public static final int LOVPARAMTYPEVO = AttributesEnum.LovParamTypeVO.index();
    public static final int LOVPARAMIDVO = AttributesEnum.LovParamIdVO.index();
    public static final int LOVFAILACTNVO = AttributesEnum.LovFailActnVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmQcParamItmVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmId.
     * @param value value to set the  ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParamId.
     * @return the ParamId
     */
    public String getParamId() {
        return (String) getAttributeInternal(PARAMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParamId.
     * @param value value to set the  ParamId
     */
    public void setParamId(String value) {
        setAttributeInternal(PARAMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute StdVal.
     * @return the StdVal
     */
    public Number getStdVal() {
        return (Number) getAttributeInternal(STDVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute StdVal.
     * @param value value to set the  StdVal
     */
    public void setStdVal(Number value) {
        setAttributeInternal(STDVAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TlrncLower.
     * @return the TlrncLower
     */
    public Number getTlrncLower() {
        return (Number) getAttributeInternal(TLRNCLOWER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TlrncLower.
     * @param value value to set the  TlrncLower
     */
    public void setTlrncLower(Number value) {
        setAttributeInternal(TLRNCLOWER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TlrncUpper.
     * @return the TlrncUpper
     */
    public Number getTlrncUpper() {
        return (Number) getAttributeInternal(TLRNCUPPER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TlrncUpper.
     * @param value value to set the  TlrncUpper
     */
    public void setTlrncUpper(Number value) {
        setAttributeInternal(TLRNCUPPER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TlrncType.
     * @return the TlrncType
     */
    public String getTlrncType() {
        return (String) getAttributeInternal(TLRNCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TlrncType.
     * @param value value to set the  TlrncType
     */
    public void setTlrncType(String value) {
        setAttributeInternal(TLRNCTYPE, value);
    }
    
    public Object resolvElDC(String data) {
      FacesContext fc = FacesContext.getCurrentInstance();
      Application app = fc.getApplication();
      ExpressionFactory elFactory = app.getExpressionFactory();
      ELContext elContext = fc.getELContext();
      ValueExpression valueExp =
     elFactory.createValueExpression
    (elContext, "#{data." + data + ".dataProvider}", Object.class);
            return valueExp.getValue(elContext);
        }

    /**
     * Gets the attribute value for the calculated attribute FailActn.
     * @return the FailActn
     */
    public Integer getFailActn() {
       return (Integer) getAttributeInternal(FAILACTN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FailActn.
     * @param value value to set the  FailActn
     */
    public void setFailActn(Integer value) {
        setAttributeInternal(FAILACTN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute LowerLimit.
     * @return the LowerLimit
     */
    public Number getLowerLimit() {
        return (Number) getAttributeInternal(LOWERLIMIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute LowerLimit.
     * @param value value to set the  LowerLimit
     */
    public void setLowerLimit(Number value) {
        setAttributeInternal(LOWERLIMIT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UpperLimit.
     * @return the UpperLimit
     */
    public Number getUpperLimit() {
        return (Number) getAttributeInternal(UPPERLIMIT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UpperLimit.
     * @param value value to set the  UpperLimit
     */
    public void setUpperLimit(Number value) {
        setAttributeInternal(UPPERLIMIT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ApldFrmGp.
     * @return the ApldFrmGp
     */
    public String getApldFrmGp() {
        return (String) getAttributeInternal(APLDFRMGP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ApldFrmGp.
     * @param value value to set the  ApldFrmGp
     */
    public void setApldFrmGp(String value) {
        setAttributeInternal(APLDFRMGP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParamSpec.
     * @return the ParamSpec
     */
    public String getParamSpec() {
        return (String) getAttributeInternal(PARAMSPEC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParamSpec.
     * @param value value to set the  ParamSpec
     */
    public void setParamSpec(String value) {
        setAttributeInternal(PARAMSPEC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ParamType.
     * @return the ParamType
     */
    public Integer getParamType() {
        return (Integer) getAttributeInternal(PARAMTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ParamType.
     * @param value value to set the  ParamType
     */
    public void setParamType(Integer value) {
        setAttributeInternal(PARAMTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransActualVal.
     * @return the TransActualVal
     */
    public Number getTransActualVal() {
        return (Number) getAttributeInternal(TRANSACTUALVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransActualVal.
     * @param value value to set the  TransActualVal
     */
    public void setTransActualVal(Number value) {
        if(value == null){
            value = new Number(0);
        }
        if(getParamType()!=null && getLowerLimit()!=null && getUpperLimit()!=null && getFailActn()!=null){
            if(getParamType()==274){
                if(value.compareTo(getLowerLimit()) >=0 && value.compareTo(getUpperLimit())<=0){
                setTransQcCheckStatus(284);
            }else if(getFailActn()==285){
                setTransQcCheckStatus(285);
                }else if(getFailActn()==286){
                    setTransQcCheckStatus(286);
                }
        }
        }
        setAttributeInternal(TRANSACTUALVAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransForBooleanType.
     * @return the TransForBooleanType
     */
    public Integer getTransForBooleanType() {
        return (Integer) getAttributeInternal(TRANSFORBOOLEANTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransForBooleanType.
     * @param value value to set the  TransForBooleanType
     */
    public void setTransForBooleanType(Integer value) {
        if(value==null){
            value =1;
        }
        if(getParamType()!=null && getFailActn()!=null){
        if(getParamType()==275){
            if(value == 1){
                setTransQcCheckStatus(284);
            }else if(getFailActn()==285){
                setTransQcCheckStatus(285);
            }else if(getFailActn()==286){
                setTransQcCheckStatus(286);
            }
        }
        }
        setAttributeInternal(TRANSFORBOOLEANTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransQcCheckStatus.
     * @return the TransQcCheckStatus
     */
    public Integer getTransQcCheckStatus() {
        return (Integer) getAttributeInternal(TRANSQCCHECKSTATUS);
      
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransQcCheckStatus.
     * @param value value to set the  TransQcCheckStatus
     */
    public void setTransQcCheckStatus(Integer value) {
        setAttributeInternal(TRANSQCCHECKSTATUS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovParamTypeVO.
     */
    public RowSet getLovParamTypeVO() {
        return (RowSet)getAttributeInternal(LOVPARAMTYPEVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovParamIdVO.
     */
    public RowSet getLovParamIdVO() {
        return (RowSet)getAttributeInternal(LOVPARAMIDVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovFailActnVO.
     */
    public RowSet getLovFailActnVO() {
        return (RowSet)getAttributeInternal(LOVFAILACTNVO);
    }
    public String isStatus(){
        if(getTransQcCheckStatus()==null){
            return "Y";
        }else{
        return "N";
        }
    }
    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
