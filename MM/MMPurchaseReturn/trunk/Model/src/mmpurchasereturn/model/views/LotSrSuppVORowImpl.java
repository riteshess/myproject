package mmpurchasereturn.model.views;

import mmpurchasereturn.model.services.MmPurchaseReturnAMImpl;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 17 11:32:21 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LotSrSuppVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SlocId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        OrgId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        FyId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getFyId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        WhId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getWhId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        EoId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getEoId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItmId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItmUomBs {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getItmUomBs();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LotId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getLotId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        BinId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getBinId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        SrNo {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getSrNo();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TotStk {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getTotStk();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        RejStk {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getRejStk();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        RwkStk {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getRwkStk();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DocId {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ExtDocNo {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getExtDocNo();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TransSrCB {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getTransSrCB();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setTransSrCB((String) value);
            }
        }
        ,
        BinNameSRTrans {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getBinNameSRTrans();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setBinNameSRTrans((String) value);
            }
        }
        ,
        TransSrRejCB {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getTransSrRejCB();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setTransSrRejCB((String) value);
            }
        }
        ,
        TransSrRewCB {
            public Object get(LotSrSuppVORowImpl obj) {
                return obj.getTransSrRewCB();
            }

            public void put(LotSrSuppVORowImpl obj, Object value) {
                obj.setTransSrRewCB((String) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(LotSrSuppVORowImpl object);

        public abstract void put(LotSrSuppVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int FYID = AttributesEnum.FyId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int LOTID = AttributesEnum.LotId.index();
    public static final int BINID = AttributesEnum.BinId.index();
    public static final int SRNO = AttributesEnum.SrNo.index();
    public static final int TOTSTK = AttributesEnum.TotStk.index();
    public static final int REJSTK = AttributesEnum.RejStk.index();
    public static final int RWKSTK = AttributesEnum.RwkStk.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int EXTDOCNO = AttributesEnum.ExtDocNo.index();
    public static final int TRANSSRCB = AttributesEnum.TransSrCB.index();
    public static final int BINNAMESRTRANS = AttributesEnum.BinNameSRTrans.index();
    public static final int TRANSSRREJCB = AttributesEnum.TransSrRejCB.index();
    public static final int TRANSSRREWCB = AttributesEnum.TransSrRewCB.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LotSrSuppVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute FyId.
     * @return the FyId
     */
    public Integer getFyId() {
        return (Integer) getAttributeInternal(FYID);
    }

    /**
     * Gets the attribute value for the calculated attribute WhId.
     * @return the WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Gets the attribute value for the calculated attribute EoId.
     * @return the EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmId.
     * @return the ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUomBs.
     * @return the ItmUomBs
     */
    public String getItmUomBs() {
        return (String) getAttributeInternal(ITMUOMBS);
    }

    /**
     * Gets the attribute value for the calculated attribute LotId.
     * @return the LotId
     */
    public String getLotId() {
        return (String) getAttributeInternal(LOTID);
    }

    /**
     * Gets the attribute value for the calculated attribute BinId.
     * @return the BinId
     */
    public String getBinId() {
        return (String) getAttributeInternal(BINID);
    }

    /**
     * Gets the attribute value for the calculated attribute SrNo.
     * @return the SrNo
     */
    public String getSrNo() {
        return (String) getAttributeInternal(SRNO);
    }

    /**
     * Gets the attribute value for the calculated attribute TotStk.
     * @return the TotStk
     */
    public Number getTotStk() {
        return (Number) getAttributeInternal(TOTSTK);
    }

    /**
     * Gets the attribute value for the calculated attribute RejStk.
     * @return the RejStk
     */
    public Number getRejStk() {
        return (Number) getAttributeInternal(REJSTK);
    }

    /**
     * Gets the attribute value for the calculated attribute RwkStk.
     * @return the RwkStk
     */
    public Number getRwkStk() {
        return (Number) getAttributeInternal(RWKSTK);
    }


    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute ExtDocNo.
     * @return the ExtDocNo
     */
    public String getExtDocNo() {
        return (String) getAttributeInternal(EXTDOCNO);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSrCB.
     * @return the TransSrCB
     */
    public String getTransSrCB() {
        return (String) getAttributeInternal(TRANSSRCB);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSrCB.
     * @param value value to set the  TransSrCB
     */
    public void setTransSrCB(String value) {
        setAttributeInternal(TRANSSRCB, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BinNameSRTrans.
     * @return the BinNameSRTrans
     */
    public String getBinNameSRTrans() {
        if (getBinId() != null) {
            MmPurchaseReturnAMImpl am = (MmPurchaseReturnAMImpl) this.getApplicationModule();
            ViewObjectImpl binVo = am.getLovBinNm1();
           ViewCriteria vc = binVo.getViewCriteria("LovBinNmVOCriteria");
          binVo.applyViewCriteria(vc);
            binVo.setNamedWhereClauseParam("BindBinId", getBinId());
            binVo.setNamedWhereClauseParam("BindWhId", getWhId());
            binVo.setNamedWhereClauseParam("BindOrgId", getOrgId());
            binVo.setNamedWhereClauseParam("BindCldId", getCldId());
            binVo.setNamedWhereClauseParam("BindSlocId", getSlocId());
            binVo.executeQuery();
            Row[] rr = binVo.getFilteredRows("BinId", getBinId());
            if (rr.length > 0 && rr[0].getAttribute("BinNm") != null) {
            System.out.println("--sr  bin name---"+  rr[0].getAttribute("BinNm").toString());
                return rr[0].getAttribute("BinNm").toString();

            } else {
                return (String) getAttributeInternal(BINNAMESRTRANS);
            }
        }
        
        return (String) getAttributeInternal(BINNAMESRTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BinNameSRTrans.
     * @param value value to set the  BinNameSRTrans
     */
    public void setBinNameSRTrans(String value) {
        setAttributeInternal(BINNAMESRTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSrRejCB.
     * @return the TransSrRejCB
     */
    public String getTransSrRejCB() {
        return (String) getAttributeInternal(TRANSSRREJCB);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSrRejCB.
     * @param value value to set the  TransSrRejCB
     */
    public void setTransSrRejCB(String value) {
        setAttributeInternal(TRANSSRREJCB, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSrRewCB.
     * @return the TransSrRewCB
     */
    public String getTransSrRewCB() {
        return (String) getAttributeInternal(TRANSSRREWCB);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSrRewCB.
     * @param value value to set the  TransSrRewCB
     */
    public void setTransSrRewCB(String value) {
        setAttributeInternal(TRANSSRREWCB, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

