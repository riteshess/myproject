package mmpurchasereturn.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import java.util.HashMap;
import java.util.HashSet;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmpurchasereturn.model.services.common.MmPurchaseReturnAM;
import mmpurchasereturn.model.views.DispSuppRefNoVOImpl;
import mmpurchasereturn.model.views.LovItmIdVOImpl;
import mmpurchasereturn.model.views.MmMrnItmVOImpl;
import mmpurchasereturn.model.views.MmPurRetnItmVOImpl;
import mmpurchasereturn.model.views.MmPurRetnSrcVOImpl;
import mmpurchasereturn.model.views.MmPurRetnVOImpl;
import mmpurchasereturn.model.views.PurchaseReturnSearchVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.VariableValueManager;
import oracle.jbo.ViewCriteria;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 11 16:58:15 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmPurchaseReturnAMImpl extends ApplicationModuleImpl //implements MmPurchaseReturnAM
    implements MmPurchaseReturnAM {

    private Number zero = new Number(0);
    public static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MmPurchaseReturnAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public MmPurchaseReturnAMImpl() {
    }
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    //  String projId = resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}").toString();

    public void AddMrnNoToSrc() {
        Row currPr = this.getMmPurRetn().getCurrentRow();
        String cldId = currPr.getAttribute("CldId").toString();
        Integer slocId = Integer.parseInt(currPr.getAttribute("SlocId").toString());
        String orgId = (String) currPr.getAttribute("OrgId");
        String whId = (String) currPr.getAttribute("WhId");
        String docId = (String) currPr.getAttribute("DocId");
        String docIdMrn = (String) currPr.getAttribute("TransDocIdMrn");
        Row srcRow = this.getMmPurRetnSrc().createRow();
        srcRow.setAttribute("CldId", cldId);
        srcRow.setAttribute("SlocId", slocId);
        srcRow.setAttribute("OrgId", orgId);
        srcRow.setAttribute("WhId", whId);
        srcRow.setAttribute("DocId", docId);
        srcRow.setAttribute("DocIdMrn", docIdMrn);
        adfLog.info("-------inside -------------adf mrn no-----------------");
        this.getMmPurRetnSrc().insertRow(srcRow);
        this.getMmPurRetnSrc().executeQuery();
    }

    public void AddItmToPurRetItm() {
        //get value of MRN No and its DocId
        adfLog.info("-------inside add item--------------11111111");
        Row currPr = this.getMmPurRetn().getCurrentRow();
        String cldId = currPr.getAttribute("CldId").toString();
        Integer slocId = Integer.parseInt(currPr.getAttribute("SlocId").toString());
        String orgId = (String) currPr.getAttribute("OrgId");
        String whId = (String) currPr.getAttribute("WhId");
        String docId = (String) currPr.getAttribute("DocId");
        String docIdMrn = (String) currPr.getAttribute("TransDocIdMrn");
        Integer eoId = Integer.parseInt(currPr.getAttribute("EoId").toString());
        RowSetIterator rsiMrnitm = this.getMmMrnItm().createRowSetIterator(null);
        Map<String, Number> map = new HashMap<String, Number>();
        adfLog.info("-------inside add item--------------2" + rsiMrnitm.getRowCount());
        //get itmid and uom from mrn_itm
        while (rsiMrnitm.hasNext()) {
            Row rMrn = rsiMrnitm.next();
            adfLog.info("-------inside add item--------------233333" + rsiMrnitm.getRowCount());
            if (rMrn.getAttribute("DocId").toString().equals(docIdMrn) &&
                rMrn.getAttribute("CldId").toString().equals(cldId) &&
                rMrn.getAttribute("SlocId").toString().equals(slocId.toString()) &&
                rMrn.getAttribute("OrgId").toString().equals(orgId)) {
                adfLog.info("-------inside add item--------------2333333333333333333333333333333334444444444444");
                Number rejQty = zero;
                if (rMrn.getAttribute("RejQty") != null)
                    rejQty = (Number) rMrn.getAttribute("RejQty");

                Number rwkQty = zero;
                if (rMrn.getAttribute("RwkQty") != null)
                    rwkQty = (Number) rMrn.getAttribute("RwkQty");
                adfLog.info("-------inside add item--------------233333344  " + rejQty.add(rwkQty));
                if (rejQty.add(rwkQty).compareTo(0) > 0) {
                    String itmId = rMrn.getAttribute("ItmId").toString();
                    String itmUom = rMrn.getAttribute("ItmUom").toString();


                    //if item of same EO is not add in any purchase return
                    String itmUomBs = rMrn.getAttribute("ItmUomBs").toString();
                    Number uomConvFctr = new Number(1);
                    if (rMrn.getAttribute("UomConvFctr") != null)
                        uomConvFctr = (Number) rMrn.getAttribute("UomConvFctr");
                    Number totRejQty = zero;
                    Number totRwkQty = zero;
                    RowSetIterator rsiMrnStk = this.getMmMrnItmStk().createRowSetIterator(null);
                    adfLog.info("-------inside add item--------------33333333333");
                    while (rsiMrnStk.hasNext()) {
                        Row rMrnStk = rsiMrnStk.next();
                        if (rMrnStk.getAttribute("DocId").toString().equals(docIdMrn) &&
                            rMrnStk.getAttribute("CldId").toString().equals(cldId) &&
                            rMrnStk.getAttribute("SlocId").toString().equals(slocId.toString()) &&
                            rMrnStk.getAttribute("OrgId").toString().equals(orgId) &&
                            rMrnStk.getAttribute("ItmId").toString().equals(itmId) &&
                            rMrnStk.getAttribute("ItmUom").toString().equals(itmUom) &&
                            rMrnStk.getAttribute("EoId").toString().equals(eoId.toString())) {
                            if (rMrnStk.getAttribute("RejQty") != null)
                                totRejQty = totRejQty.add((Number) rMrnStk.getAttribute("RejQty"));
                            if (rMrnStk.getAttribute("RwkQty") != null)
                                totRwkQty = totRwkQty.add((Number) rMrnStk.getAttribute("RwkQty"));

                            //getting lot price for unique lot
                            map.put(rMrnStk.getAttribute("LotId").toString(),
                                    ((Number) rMrnStk.getAttribute("LotPrice") == null ? zero :
                                     (Number) rMrnStk.getAttribute("LotPrice")));
                            adfLog.info("-------inside add item--------------4444");
                        }
                    }


                    rsiMrnStk.closeRowSetIterator();
                    Number rejQtyBs = zero;
                    rejQtyBs = totRejQty.multiply(uomConvFctr);
                    Number rwkQtyBs = zero;
                    rwkQtyBs = totRwkQty.multiply(uomConvFctr);
                    //calculating tot itm price
                    adfLog.info("-------inside add item--------------55555555555555");
                    //
                    Number totQty = totRejQty.add(totRwkQty);
                    Number lotPrice = zero;
                    for (Map.Entry mm : map.entrySet()) {
                        lotPrice = lotPrice.add((Number) mm.getValue());
                        adfLog.info("-----iterate map MRN " + mm.getKey() + " " + mm.getValue() + " size " +
                                    map.size());
                    }
                    adfLog.info("-------getting totqty " + totQty + " lotPrice " + lotPrice + " totPrice " +
                                totQty.multiply(lotPrice));
                    lotPrice = totQty.multiply(lotPrice);


                    //create row for item and insert values
                    Row purItm = this.getMmPurRetnItm().createRow();
                    purItm.setAttribute("CldId", cldId);
                    purItm.setAttribute("SlocId", slocId);
                    purItm.setAttribute("OrgId", orgId);
                    purItm.setAttribute("WhId", whId);
                    purItm.setAttribute("DocId", docId);
                    purItm.setAttribute("DocIdMrn", docIdMrn);
                    purItm.setAttribute("ItmId", itmId);
                    purItm.setAttribute("ItmUom", itmUom);
                    purItm.setAttribute("ItmUomBs", itmUomBs);
                    purItm.setAttribute("RejQty", totRejQty);
                    purItm.setAttribute("RwkQty", totRwkQty);
                    purItm.setAttribute("RejQtyBs", rejQtyBs);
                    purItm.setAttribute("RwkQtyBs", rwkQtyBs);
                    purItm.setAttribute("OkQty", new Number(0));
                    purItm.setAttribute("OkQtyBs", new Number(0));
                    purItm.setAttribute("TotRetQty", rejQty.add(rwkQty));
                    purItm.setAttribute("UomConvFctr", uomConvFctr);
                    purItm.setAttribute("TotItmPrice", lotPrice);
                    this.getMmPurRetnItm().insertRow(purItm);

                    //create rows in ItmStk and insert.
                    RowQualifier stkrq = new RowQualifier(this.getMmMrnItmStk());
                    stkrq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                         "' and DocId='" + docIdMrn + "' and ItmId='" + itmId + "' and ItmUom='" +
                                         itmUom + "'");
                    Row[] frstk = this.getMmMrnItmStk().getFilteredRows(stkrq);
                    Integer len = -1;
                    if (frstk.length > 0)
                        len = frstk.length - 1;
                    Number itmStkRwkBs = zero;
                    if (frstk[len].getAttribute("RwkQtyBs") != null) {
                        itmStkRwkBs = (Number) frstk[len].getAttribute("RwkQtyBs");
                    }
                    Number itmStkRejBs = zero;
                    if (frstk[len].getAttribute("RejQtyBs") != null) {
                        itmStkRejBs = (Number) frstk[len].getAttribute("RejQtyBs");
                    }

                    ViewObjectImpl impl = this.getMmPurRetnItmStk();
                    while (len >= 0) {
                        Number rejQtychk = (Number) frstk[len].getAttribute("RejQty");
                        Number rwkQtychk = (Number) frstk[len].getAttribute("RwkQty");
                        if (rejQtychk.compareTo(zero) == 1 || rwkQtychk.compareTo(zero) == 1) {
                            Row stkrow = impl.createRow();
                            stkrow.setAttribute("CldId", cldId);
                            stkrow.setAttribute("DocId", docId);
                            stkrow.setAttribute("DocIdMrn", docIdMrn);
                            stkrow.setAttribute("ItmId", itmId);
                            System.out.println("ItmId=" + itmId);
                            stkrow.setAttribute("ItmUom", itmUom);
                            stkrow.setAttribute("ItmUomBs", itmUomBs);
                            stkrow.setAttribute("LotId", frstk[len].getAttribute("LotId"));
                            //
                            stkrow.setAttribute("LotPrice", frstk[len].getAttribute("LotPrice"));
                            //
                            stkrow.setAttribute("OrgId", orgId);
                            stkrow.setAttribute("RejQty", frstk[len].getAttribute("RejQty"));
                            stkrow.setAttribute("RejQtyBs", itmStkRejBs);
                            stkrow.setAttribute("RwkQty", frstk[len].getAttribute("RwkQty"));
                            stkrow.setAttribute("RwkQtyBs", itmStkRwkBs);
                            stkrow.setAttribute("OkQty", new Number(0));
                            stkrow.setAttribute("OkQtyBs", new Number(0));
                            stkrow.setAttribute("SlocId", slocId);
                            stkrow.setAttribute("SrNo", frstk[len].getAttribute("SrNo"));
                            stkrow.setAttribute("BinId", "0");
                            stkrow.setAttribute("UomConvFctr", uomConvFctr);
                            stkrow.setAttribute("WhId", whId);
                            impl.insertRow(stkrow);
                        }
                        len--;
                    }
                    this.getMmPurRetnItmStk().executeQuery();
                }
            }
        }
        rsiMrnitm.closeRowSetIterator();
        this.getMmPurRetnItm().executeQuery();
    }

    public void ResetTrans() {
        this.getMmPurRetn().getCurrentRow().setAttribute("TransMrnNo", null);
        this.getMmPurRetn().getCurrentRow().setAttribute("TransDocDtMrn", null);
        this.getMmPurRetn().getCurrentRow().setAttribute("TransDocIdMrn", null);
    }

    public String ChkDuplicateMrn() {
        Integer eoId = Integer.parseInt(this.getMmPurRetn().getCurrentRow().getAttribute("EoId").toString());
        String transDocId = (String) this.getMmPurRetn().getCurrentRow().getAttribute("TransDocIdMrn");
        RowSetIterator rsiSrc = this.getMmPurRetnSrc().createRowSetIterator(null);
        while (rsiSrc.hasNext()) {
            Row r = rsiSrc.next();
            if (r.getAttribute("DocIdMrn").toString().equals(transDocId)) {
                rsiSrc.closeRowSetIterator();
                return "Y";
            }
        }
        rsiSrc.closeRowSetIterator();

        RowSetIterator rsiPr = this.getMmPurRetn().createRowSetIterator(null);
        while (rsiPr.hasNext()) {
            Row prRow = rsiPr.next();
            if (prRow.getAttribute("EoId").toString().equals(eoId.toString())) {
                String doc = prRow.getAttribute("DocId").toString();
                RowSetIterator rsiitm = this.getMmPurRetnItm1().createRowSetIterator(null);
                while (rsiitm.hasNext()) {
                    Row ritm = rsiitm.next();
                    if (ritm.getAttribute("DocIdMrn").toString().equals(transDocId) &&
                        ritm.getAttribute("DocId").toString().equals(doc)) {
                        rsiSrc.closeRowSetIterator();
                        return "D";
                    }
                }
                rsiitm.closeRowSetIterator();
            }
        }
        rsiPr.closeRowSetIterator();

        return "N";
    }

    public void generatePRNo() {
        if (getMmPurRetn().getCurrentRow().getAttribute("PurRetNo") == null) {
            String cldId = this.getMmPurRetn().getCurrentRow().getAttribute("CldId").toString();
            Integer slocId = Integer.parseInt(this.getMmPurRetn().getCurrentRow().getAttribute("SlocId").toString());
            String orgId = (String) this.getMmPurRetn().getCurrentRow().getAttribute("OrgId");
            String whId = (String) this.getMmPurRetn().getCurrentRow().getAttribute("WhId");
            Integer fyId = Integer.parseInt(this.getMmPurRetn().getCurrentRow().getAttribute("FyId").toString());
            String prNo = (String) (callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {
                                                       slocId, cldId, orgId, "MM$PUR$RETN", whId, fyId
            }));
            this.getMmPurRetn().getCurrentRow().setAttribute("PurRetNo", prNo);
        }
        /*     if(projId==null){
            this.getMmPurRetn().getCurrentRow().setAttribute("PrjId", "PROJ0000");
        }else {
            this.getMmPurRetn().getCurrentRow().setAttribute("PrjId",projId);
        } */

    }

    /**
     * Container's getter for MmPurRetn.
     * @return MmPurRetn
     */
    public MmPurRetnVOImpl getMmPurRetn() {
        return (MmPurRetnVOImpl) findViewObject("MmPurRetn");
    }


    /**
     * Container's getter for LovWhId.
     * @return LovWhId
     */
    public ViewObjectImpl getLovWhId() {
        return (ViewObjectImpl) findViewObject("LovWhId");
    }

    /**
     * Container's getter for LovPurRetStat.
     * @return LovPurRetStat
     */
    public ViewObjectImpl getLovPurRetStat() {
        return (ViewObjectImpl) findViewObject("LovPurRetStat");
    }

    /**
     * Container's getter for LovOrgId.
     * @return LovOrgId
     */
    public ViewObjectImpl getLovOrgId() {
        return (ViewObjectImpl) findViewObject("LovOrgId");
    }

    /**
     * Container's getter for LovEoId.
     * @return LovEoId
     */
    public ViewObjectImpl getLovEoId() {
        return (ViewObjectImpl) findViewObject("LovEoId");
    }


    /**
     * Container's getter for MmPurRetnSrc.
     * @return MmPurRetnSrc
     */
    public ViewObjectImpl getMmPurRetnSrc() {
        return (ViewObjectImpl) findViewObject("MmPurRetnSrc");
    }

    /**
     * Container's getter for MmPurRetnToSrcVL.
     * @return MmPurRetnToSrcVL
     */
    public ViewLinkImpl getMmPurRetnToSrcVL() {
        return (ViewLinkImpl) findViewLink("MmPurRetnToSrcVL");
    }

    /**
     * Container's getter for MmPurRetnItm.
     * @return MmPurRetnItm
     */
    public MmPurRetnItmVOImpl getMmPurRetnItm() {
        return (MmPurRetnItmVOImpl) findViewObject("MmPurRetnItm");
    }

    /**
     * Container's getter for MmPurRetnSrcToItmVL.
     * @return MmPurRetnSrcToItmVL
     */
    public ViewLinkImpl getMmPurRetnSrcToItmVL() {
        return (ViewLinkImpl) findViewLink("MmPurRetnSrcToItmVL");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl) findViewObject("LovItmId");
    }

    /**
     * Container's getter for LovUomId.
     * @return LovUomId
     */
    public ViewObjectImpl getLovUomId() {
        return (ViewObjectImpl) findViewObject("LovUomId");
    }

    /**
     * Container's getter for MmMrnItm.
     * @return MmMrnItm
     */
    public ViewObjectImpl getMmMrnItm() {
        return (ViewObjectImpl) findViewObject("MmMrnItm");
    }

    /**
     * Container's getter for LovMrnNo.
     * @return LovMrnNo
     */
    public ViewObjectImpl getLovMrnNo() {
        return (ViewObjectImpl) findViewObject("LovMrnNo");
    }


    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;

    public Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }
    }

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }

    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
    }).toString());


    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getMmPurRetn().getCurrentRow().getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo,
                                                   levelFrm, levelTo, action, remark, amount
    }).toString());

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getMmPurRetn().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, DocId, 0
        });
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }

    public void updateAuthstat(String retValue) {
        if (retValue.toString().equalsIgnoreCase("A")) {
            String cldId = this.getMmPurRetn().getCurrentRow().getAttribute("CldId").toString();
            Integer slocId = Integer.parseInt(this.getMmPurRetn().getCurrentRow().getAttribute("SlocId").toString());
            String orgId = (String) this.getMmPurRetn().getCurrentRow().getAttribute("OrgId");
            String docId = (String) this.getMmPurRetn().getCurrentRow().getAttribute("DocId");
            this.getMmPurRetn().getCurrentRow().setAttribute("AuthStat", "Y");
            this.getMmPurRetn().getCurrentRow().setAttribute("PurRetStat", 430);
            this.getMmPurRetn().getCurrentRow().setAttribute("PurRetStatDt", new Timestamp(System.currentTimeMillis()));
            Object isclose = callStoredFunction(NUMBER, "MM.MM_CLOSE_MRN(?,?,?,?,?)", new Object[] {
                                                cldId, slocId, orgId, 18529, docId
            });
            System.out.println("Is Closed=" + isclose);
            Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            System.out.println(docId + " date is " + getMmPurRetn().getCurrentRow().getAttribute("DocDt") + " eo id" +
                               this.getMmPurRetn().getCurrentRow().getAttribute("EoId") + usrId);
            String retval = callStoredFunction(Types.NUMERIC, "MM.MM_INS_GL_DEBIT_NOTE(?,?,?,?,?,?,?,?)", new Object[] {
                                               slocId, cldId, hoOrgId, orgId, docId,
                                               this.getMmPurRetn().getCurrentRow().getAttribute("DocDt"),
                                               this.getMmPurRetn().getCurrentRow().getAttribute("EoId"), usrId
            }).toString();
            //String retval=callStoredFunction(Types.NUMERIC, "MM.MM_INS_GL_DEBIT_NOTE(?,?,?,?,?,?,?,?)", new Object[] { slocId,cldId,hoOrgId,orgId,docId,"30-DEC-2014",this.getMmPurRetn().getCurrentRow().getAttribute("EoId"),usrId}).toString();
            Integer retuval = Integer.parseInt(retval);
            Integer purRetnType =
                Integer.parseInt(this.getMmPurRetn().getCurrentRow().getAttribute("PurType").toString());
            adfLog.info("------------inside auth sate ---pur type " + purRetnType);
            if (purRetnType == 887) {
                Object issuInsert = callStoredFunction(Types.INTEGER, "MM.MM_ISSU_STK_UPDT(?,?,?,?,?,?,?,?)", new Object[] {
                                                       cldId, slocId, orgId,
                                                       this.getMmPurRetn().getCurrentRow().getAttribute("WhId"), docId,
                                                       this.getMmPurRetn().getCurrentRow().getAttribute("DocDt"),
                                                       this.getMmPurRetn().getCurrentRow().getAttribute("EoId"), usrId,










                });
                adfLog.info("------------inside if  ---pur type " + purRetnType + "  " + issuInsert);
            }

            try {
                this.sendDataFromTempCcToPRCc();
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
            System.out.println("Return from Debit Note=" + retuval + "----");
        }

    }

    /**
     * Container's getter for MmMrnItmStk.
     * @return MmMrnItmStk
     */
    public ViewObjectImpl getMmMrnItmStk() {
        return (ViewObjectImpl) findViewObject("MmMrnItmStk");
    }

    /**
     * Container's getter for MmPurRetnItm1.
     * @return MmPurRetnItm1
     */
    public MmPurRetnItmVOImpl getMmPurRetnItm1() {
        return (MmPurRetnItmVOImpl) findViewObject("MmPurRetnItm1");
    }

    public String GenerateFyId() {
        String CldId = (String) this.getMmPurRetn().getCurrentRow().getAttribute("CldId");
        String OrgId = (String) this.getMmPurRetn().getCurrentRow().getAttribute("OrgId");
        Timestamp dt = (Timestamp) this.getMmPurRetn().getCurrentRow().getAttribute("PurRetDt");
        Integer fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, dt
        }));
        if (fyid > 0) {
            this.getMmPurRetn().getCurrentRow().setAttribute("FyId", fyid);
            return "Y";
        } else
            return "N";
    }

    public void setsearchValues() {
        ViewObjectImpl searchvo = this.getSearch();
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        this.getPurchaseReturnSearch().getCurrentRow().setAttribute("TransCldId", CldId);
        this.getPurchaseReturnSearch().getCurrentRow().setAttribute("TransOrgId", OrgId);
        this.getPurchaseReturnSearch().getCurrentRow().setAttribute("TransSlocId", SlocId);
        /* getMmPurRetn().setcldIdBind(CldId);
            getMmPurRetn().setslocBind(SlocId);
            getMmPurRetn().setorgBind(OrgId); */
        searchvo.setNamedWhereClauseParam("cldIdBind", CldId);
        searchvo.setNamedWhereClauseParam("slocBind", SlocId);
        searchvo.setNamedWhereClauseParam("orgBind", OrgId);
        searchvo.executeQuery();
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    /**
     * Container's getter for PurchaseReturnSearch.
     * @return PurchaseReturnSearch
     */
    public PurchaseReturnSearchVOImpl getPurchaseReturnSearch() {
        return (PurchaseReturnSearchVOImpl) findViewObject("PurchaseReturnSearch");
    }


    public void SearchPurchaseReturn() {
        // System.out.println("In search..");
        ViewObjectImpl searchvo = this.getSearch();
        String prno = null;
        Integer eoid = null;
        String whid = null;
        Timestamp prdtfrm = null;
        Timestamp prdtto = null;
        Integer prst = null;
        String itmid = null;
        if (getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetNo") != null &&
            (!getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetNo").toString().equals(""))) {
            prno = getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetNo").toString();
            searchvo.setNamedWhereClauseParam("PurRetNoBind", prno);
        } else
            searchvo.setNamedWhereClauseParam("PurRetNoBind", null);
        //     System.out.println("Pr no="+prno);

        if (getPurchaseReturnSearch().getCurrentRow().getAttribute("TransWhName") != null &&
            (!getPurchaseReturnSearch().getCurrentRow().getAttribute("TransWhName").toString().equals(""))) {
            whid = getPurchaseReturnSearch().getCurrentRow().getAttribute("TransWhName").toString();
            searchvo.setNamedWhereClauseParam("whBind", whid);
        } else
            searchvo.setNamedWhereClauseParam("whBind", null);
        //  System.out.println("wh="+whid);

        if (getPurchaseReturnSearch().getCurrentRow().getAttribute("TransEoId") != null &&
            (!getPurchaseReturnSearch().getCurrentRow().getAttribute("TransEoId").toString().equals(""))) {
            eoid = Integer.parseInt(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransEoId").toString());
            searchvo.setNamedWhereClauseParam("SuppIdBind", eoid);
        } else
            searchvo.setNamedWhereClauseParam("SuppIdBind", null);
        //   System.out.println("eo="+eoid);

        if (getPurchaseReturnSearch().getCurrentRow().getAttribute("TransFromDt") != null) {
            prdtfrm = new Timestamp(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransFromDt").toString());
            searchvo.setNamedWhereClauseParam("dtFromBind", prdtfrm);
        } else
            searchvo.setNamedWhereClauseParam("dtFromBind", null);
        //   System.out.println("dt frm="+prdtfrm);

        if (getPurchaseReturnSearch().getCurrentRow().getAttribute("TransToDt") != null) {
            prdtto = new Timestamp(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransToDt").toString());
            searchvo.setNamedWhereClauseParam("dateToBind", prdtto);
        } else
            searchvo.setNamedWhereClauseParam("dateToBind", null);
        // System.out.println("dt to="+prdtto);

        if (getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetStatus") != null &&
            !(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetStatus").toString().equals(""))) {
            prst =
                Integer.parseInt(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransPurRetStatus").toString());
            searchvo.setNamedWhereClauseParam("statusBind", prst);
        } else
            searchvo.setNamedWhereClauseParam("statusBind", null);
        //  System.out.println("status="+prst);
        if (getPurchaseReturnSearch().getCurrentRow().getAttribute("TransItmId") != null &&
            !(getPurchaseReturnSearch().getCurrentRow().getAttribute("TransItmId").toString().equals(""))) {
            itmid = (getPurchaseReturnSearch().getCurrentRow().getAttribute("TransItmId").toString());
            searchvo.setNamedWhereClauseParam("itmIdBind", itmid);
        } else
            searchvo.setNamedWhereClauseParam("itmIdBind", null);

        searchvo.executeQuery();

    }

    public void ResetSearch() {
        ViewObjectImpl searchvo = this.getSearch();
        getPurchaseReturnSearch().getCurrentRow().setAttribute("TransPurRetNo", null);
        getPurchaseReturnSearch().getCurrentRow().setAttribute("TransWhName", null);
        getPurchaseReturnSearch().getCurrentRow().setAttribute("TransSuppNm", null);
        getPurchaseReturnSearch().getCurrentRow().setAttribute("TransFromDt", null);
        getPurchaseReturnSearch().getCurrentRow().setAttribute("TransToDt", null);
        getPurchaseReturnSearch().getCurrentRow().setAttribute("TransPurRetStatus", null);
        getPurchaseReturnSearch().getCurrentRow().setAttribute("TransItmDesc", null);
        VariableValueManager vm = getMmPurRetn().ensureVariableManager();
        searchvo.setNamedWhereClauseParam("PurRetNoBind", null);
        searchvo.setNamedWhereClauseParam("whBind", null);
        searchvo.setNamedWhereClauseParam("SuppIdBind", null);
        searchvo.setNamedWhereClauseParam("dtFromBind", null);
        searchvo.setNamedWhereClauseParam("dateToBind", null);
        searchvo.setNamedWhereClauseParam("statusBind", null);
        searchvo.setNamedWhereClauseParam("itmIdBind", null);
        searchvo.executeQuery();
    }

    /**
     * Container's getter for Search.
     * @return Search
     */
    public ViewObjectImpl getSearch() {
        return (ViewObjectImpl) findViewObject("Search");
    }

    public void PurRetnViewQuery() {
        ViewObjectImpl vo = this.getMmPurRetn();
        ViewObjectImpl servo = this.getSearch();
        Row currRow = servo.getCurrentRow();
        ViewCriteria vc = getMmPurRetn().getViewCriteria("MmPurRetnSearchCriteria");
        vo.applyViewCriteria(vc);
        // if(currRow!=null){
        vo.setNamedWhereClauseParam("cldIdBind", currRow.getAttribute("CldId").toString());
        vo.setNamedWhereClauseParam("slocBind", (Integer) currRow.getAttribute("SlocId"));
        vo.setNamedWhereClauseParam("orgBind", currRow.getAttribute("OrgId").toString());
        vo.setNamedWhereClauseParam("docIdBind", currRow.getAttribute("DocId").toString());
        vo.setNamedWhereClauseParam("whBind", currRow.getAttribute("WhId").toString());
        vo.executeQuery();
        System.out.println("For doc id=" + currRow.getAttribute("DocId"));
        // }
    }


    public String MrnValid() {
        if (this.getMmPurRetn().getCurrentRow().getAttribute("TransDocIdMrn") != null) {
            String prStat = (String) (callStoredFunction(Types.VARCHAR, "MM.MM_IS_PUR_RETN_VALID (?,?,?,?)", new Object[] {
                                                         CldId, SlocId, OrgId,
                                                         this.getMmPurRetn().getCurrentRow().getAttribute("TransDocIdMrn")
            }));
            System.out.println("purchase return is " + prStat);
            if (prStat != null) {
                if ("Y".equalsIgnoreCase(prStat))
                    return "Y";
                else
                    return "N";
            }
        }


        return "Y";
    }

    public String getUserName(Integer usrId) {
        RowQualifier rq = new RowQualifier(this.getLovUsrId());
        rq.setWhereClause("UsrId =" + usrId);
        Row[] usrRows = this.getLovUsrId().getFilteredRows(rq);
        // Row[] usrRows = this.getLovUsrId().getFilteredRows("UsrId", usrId);
        //RowQualifier rq = new

        StringBuffer usrName = new StringBuffer("");
        //_log.info(usrRows.length + " arg0   " + usrId + " query  " + rq.getExprStr());
        if (usrRows.length > 0) {
            //   _log.info("arg0 usr name  " + usrRows[0].getAttribute("UsrName"));
            usrName = new StringBuffer(usrRows[0].getAttribute("UsrName").toString());
            usrName = new StringBuffer("[").append(usrName).append("]");
        } else {
            //_log.info("else partb ");
            usrName = new StringBuffer("[Anonymous]");
        }
        return usrName.toString();
    }


    /**
     * Container's getter for MmPurRetnItmStk.
     * @return MmPurRetnItmStk
     */
    public ViewObjectImpl getMmPurRetnItmStk() {
        return (ViewObjectImpl) findViewObject("MmPurRetnItmStk");
    }

    /**
     * Container's getter for MmPurRetnItmToStkVL1.
     * @return MmPurRetnItmToStkVL1
     */
    public ViewLinkImpl getMmPurRetnItmToStkVL1() {
        return (ViewLinkImpl) findViewLink("MmPurRetnItmToStkVL1");
    }

    public void executeVO() {
        this.getMmPurRetnItmStk().executeQuery();
    }

    /**
     * Container's getter for LovMrnNoNew.
     * @return LovMrnNoNew
     */
    public ViewObjectImpl getLovMrnNoNew() {
        return (ViewObjectImpl) findViewObject("LovMrnNoNew");
    }


    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl) findViewObject("LovUsrId");
    }

    /**
     * Container's getter for PRItm1.
     * @return PRItm1
     */
    public ViewObjectImpl getPRItm1() {
        return (ViewObjectImpl) findViewObject("PRItm1");
    }

    public void generateTempDocId() {
        Row currRow = this.getMmPurRetn().getCurrentRow();
        String whId = (String) currRow.getAttribute("WhId");
        Integer fyId = (Integer) currRow.getAttribute("FyId");
        String docId = (String) currRow.getAttribute("DocId");
        String tempDisp = (String) (callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {
                                                       SlocId, CldId, OrgId, "MM$PUR$RETN_PRS", whId, fyId
        }));

        Row crow = this.getMmPurRetnSrc().createRow();
        /* crow.setAttribute("CldId", CldId);
        crow.setAttribute("SlocId", SlocId);
        crow.setAttribute("OrgId", OrgId);
        crow.setAttribute("WhId", whId);
        crow.setAttribute("DocId", docId);
         */
        adfLog.info("------+++++++++++++++--------");
        crow.setAttribute("DocIdMrn", tempDisp);
        adfLog.info("------+++++++++++++++->>>-------");
        this.getMmPurRetnSrc().insertRow(crow);
    }

    public String checkDupItem() {
        Row currRow = this.getMmPurRetn().getCurrentRow();
        String whId = (String) currRow.getAttribute("WhId");
        String itmId = (String) currRow.getAttribute("TransItmId");

        ViewObjectImpl vo = this.getMmPurRetnItm();
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("OrgId = '" + OrgId + "' and WhId = '" + whId + "' and ItmId = '" + itmId + "'");
        Row[] r = vo.getFilteredRows(rq);
        adfLog.info("----length--------" + r.length + "---" + rq.getExprStr());
        if (r.length > 0) {
            return "Y";
        } else
            return "N";
    }

    public void addPurRtnItm() {
        Row ins = this.getMmPurRetnItm().createRow();
        adfLog.info("-------------------------");
        Row curr = this.getMmPurRetn().getCurrentRow();
        ins.setAttribute("ItmId", curr.getAttribute("TransItmId").toString());
        ins.setAttribute("ItmUom", curr.getAttribute("TransItmUOMBS").toString());
        ins.setAttribute("ItmUomBs", curr.getAttribute("TransItmUOMBS").toString());
        ins.setAttribute("UomConvFctr", new Number(1));
        ins.setAttribute("RejQty", new Number(0));
        ins.setAttribute("RwkQty", new Number(0));
        ins.setAttribute("TotRetQty", new Number(0));
        ins.setAttribute("OkQty", new Number(0));
        ins.setAttribute("OkQtyBs", new Number(0));
        adfLog.info("------------------------->>>>>>>>>>>>>>");

        this.getMmPurRetnItm().insertRow(ins);
    }


    /**
     * Container's getter for LotBinSupp1.
     * @return LotBinSupp1
     */
    public ViewObjectImpl getLotBinSupp1() {
        return (ViewObjectImpl) findViewObject("LotBinSupp1");
    }

    /**
     * Container's getter for LotSrSupp1.
     * @return LotSrSupp1
     */
    public ViewObjectImpl getLotSrSupp1() {
        return (ViewObjectImpl) findViewObject("LotSrSupp1");
    }

    /**
     * Container's getter for LovBinNm1.
     * @return LovBinNm1
     */
    public ViewObjectImpl getLovBinNm1() {
        return (ViewObjectImpl) findViewObject("LovBinNm1");
    }

    /**
     * Container's getter for LotSupp1.
     * @return LotSupp1
     */
    public ViewObjectImpl getLotSupp1() {
        return (ViewObjectImpl) findViewObject("LotSupp1");
    }


    public void executeLotSuppVO() {
        Row prCurrRow = this.getMmPurRetn().getCurrentRow();
        Integer fyId = Integer.parseInt(prCurrRow.getAttribute("FyId").toString());
        Integer eoId = Integer.parseInt(prCurrRow.getAttribute("EoId").toString());
        String whId = prCurrRow.getAttribute("WhId").toString();
        Row prCurrRowI = this.getMmPurRetnItm().getCurrentRow();
        String itmId = prCurrRowI.getAttribute("ItmId").toString();

        ViewObjectImpl lotVo = this.getLotSupp1();
        lotVo.setNamedWhereClauseParam("BindCldId", CldId);
        lotVo.setNamedWhereClauseParam("BindSlocId", SlocId);
        lotVo.setNamedWhereClauseParam("BindOrgId", OrgId);
        lotVo.setNamedWhereClauseParam("BindFyId", fyId);
        lotVo.setNamedWhereClauseParam("BindEoId", eoId);
        lotVo.setNamedWhereClauseParam("BindItmId", itmId);
        lotVo.setNamedWhereClauseParam("BindWhId", whId);
        lotVo.executeQuery();

        RowSetIterator rs = lotVo.createRowSetIterator(null);
        Integer count = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            count++;

        }
        adfLog.info("-----count---" + count);
        rs.closeRowSetIterator();

    }

    public void executeLotBinSuppVO() {
        Row prCurrRow = this.getMmPurRetn().getCurrentRow();
        Integer fyId = Integer.parseInt(prCurrRow.getAttribute("FyId").toString());
        Integer eoId = Integer.parseInt(prCurrRow.getAttribute("EoId").toString());
        String whId = prCurrRow.getAttribute("WhId").toString();
        Row prCurrRowI = this.getMmPurRetnItm().getCurrentRow();
        String itmId = prCurrRowI.getAttribute("ItmId").toString();
        ViewObjectImpl lotVo = this.getLotBinSupp1();
        lotVo.setNamedWhereClauseParam("BindCldId", CldId);
        lotVo.setNamedWhereClauseParam("BindSlocId", SlocId);
        lotVo.setNamedWhereClauseParam("BindOrgId", OrgId);
        lotVo.setNamedWhereClauseParam("BindFyId", fyId);
        lotVo.setNamedWhereClauseParam("BindEoId", eoId);
        lotVo.setNamedWhereClauseParam("BindItmId", itmId);
        lotVo.setNamedWhereClauseParam("BindWhId", whId);
        lotVo.executeQuery();
        adfLog.info("-------executing lot bin ---- " + lotVo.getRangeSize() + " " + OrgId + " " + fyId + " " + eoId +
                    " " + itmId + " " + whId);

        RowSetIterator rs = lotVo.createRowSetIterator(null);
        Integer count = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            count++;

        }
        adfLog.info("-----count---" + count);
        rs.closeRowSetIterator();

    }

    public void executeLotSrSuppVO() {
        Row prCurrRow = this.getMmPurRetn().getCurrentRow();
        Integer fyId = Integer.parseInt(prCurrRow.getAttribute("FyId").toString());
        Integer eoId = Integer.parseInt(prCurrRow.getAttribute("EoId").toString());
        String whId = prCurrRow.getAttribute("WhId").toString();
        Row prCurrRowI = this.getMmPurRetnItm().getCurrentRow();
        String itmId = prCurrRowI.getAttribute("ItmId").toString();
        ViewObjectImpl lotVo = this.getLotSrSupp1();
        lotVo.setNamedWhereClauseParam("BindCldId", CldId);
        lotVo.setNamedWhereClauseParam("BindSlocId", SlocId);
        lotVo.setNamedWhereClauseParam("BindOrgId", OrgId);
        lotVo.setNamedWhereClauseParam("BindFyId", fyId);
        lotVo.setNamedWhereClauseParam("BindEoId", eoId);
        lotVo.setNamedWhereClauseParam("BindItmId", itmId);
        lotVo.setNamedWhereClauseParam("BindWhId", whId);
        lotVo.executeQuery();
        adfLog.info("-------executing lotSR ---- " + lotVo.getRangeSize() + " " + OrgId + " " + fyId + " " + eoId +
                    " " + itmId + " " + whId);

        RowSetIterator rs = lotVo.createRowSetIterator(null);
        Integer count = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            count++;

        }
        adfLog.info("-----count---" + count);
        rs.closeRowSetIterator();

    }

    public HashSet validateLotQty() {
        ViewObjectImpl lotVo = this.getLotSupp1();
        RowSetIterator rs = lotVo.createRowSetIterator(null);
        HashSet al = new HashSet();
        String lotId = null;
        Integer count = 0;
        while (rs.hasNext()) {
            Row r = rs.next();

            /*             if ((r.getAttribute("TransOkQty") != null &&
                 ((Number) r.getAttribute("TransOkQty")).compareTo(new Number(0)) == 1) ||
                (r.getAttribute("TransRejQty") != null &&
                 ((Number) r.getAttribute("TransRejQty")).compareTo(new Number(0)) == 1) ||
                (r.getAttribute("TransRewQty") != null &&
                 ((Number) r.getAttribute("TransRewQty")).compareTo(new Number(0)) == 1)) { */
            //inside entered value lot rows
            if (r.getAttribute("TransOkQty") != null || r.getAttribute("TransRejQty") != null ||
                r.getAttribute("TransRewQty") != null) {
                if (r.getAttribute("TransOkQty") != null) {

                    if (((Number) r.getAttribute("TotStk")).compareTo((Number) r.getAttribute("TransOkQty")) == -1) {
                        adfLog.info("---------------->>>>>>ok qty-->>>" + r.getAttribute("TotStk") + "  entered  " +
                                    r.getAttribute("TransOkQty"));
                        lotId = r.getAttribute("LotId").toString();
                        al.add(lotId);
                    } else if (((Number) r.getAttribute("TransOkQty")).compareTo(new Number(0)) == -1) {
                        adfLog.info("---less than -1 ok " + r.getAttribute("TransOkQty"));
                        al.add(lotId);
                    }
                }


                if (r.getAttribute("TransRejQty") != null) {

                    if (((Number) r.getAttribute("RejStk")).compareTo((Number) r.getAttribute("TransRejQty")) == -1) {
                        adfLog.info("---------------->>>>>>Rej qty-->>>" + r.getAttribute("TransRejQty"));
                        lotId = r.getAttribute("LotId").toString();
                        al.add(lotId);
                    } else if (((Number) r.getAttribute("TransRejQty")).compareTo(new Number(0)) == -1) {
                        adfLog.info("---less than -1 rej " + r.getAttribute("TransRejQty"));
                        al.add(lotId);
                    }
                }

                if (r.getAttribute("TransRewQty") != null) {

                    if (((Number) r.getAttribute("RwkStk")).compareTo((Number) r.getAttribute("TransRewQty")) == -1) {
                        adfLog.info("---------------->>>>>Rew qty-->>>" + r.getAttribute("TransRewQty"));
                        lotId = r.getAttribute("LotId").toString();
                        al.add(lotId);
                    } else if (((Number) r.getAttribute("TransRewQty")).compareTo(new Number(0)) == -1) {
                        adfLog.info("---less than -1 rew " + r.getAttribute("TransRewQty"));
                        al.add(lotId);
                    }
                }
            }
            count++;
        }
        adfLog.info("------count Validate--------" + count + "-----" + al.size());
        lotVo.closeRowSetIterator();
        return al;

    }


    public void populateItemFromLot() {
        ViewObjectImpl lotVo = this.getLotSupp1();
        RowSetIterator rs = lotVo.createRowSetIterator(null);
        Integer count = 0;
        Number okVar = new Number(0);
        Number rejVar = new Number(0);
        Number rewVar = new Number(0);
        Number lndPrice = new Number(0);
        Map<String, Number> map = new HashMap<String, Number>();

        while (rs.hasNext()) {
            Row r = rs.next();
            adfLog.info("---inside while---" + r.getAttribute("TransOkQty") + "  " + r.getAttribute("LotId"));
            if ((r.getAttribute("TransOkQty") != null &&
                 ((Number) r.getAttribute("TransOkQty")).compareTo(new Number(0)) == 1) ||
                (r.getAttribute("TransRejQty") != null &&
                 ((Number) r.getAttribute("TransRejQty")).compareTo(new Number(0)) == 1) ||
                (r.getAttribute("TransRewQty") != null &&
                 ((Number) r.getAttribute("TransRewQty")).compareTo(new Number(0)) == 1)) {
                //-- create row
                Row prStkRow = this.getMmPurRetnItmStk().createRow();
                prStkRow.setAttribute("LotId", r.getAttribute("LotId").toString());
                prStkRow.setAttribute("ItmUomBs", r.getAttribute("ItmUomBs").toString());
                prStkRow.setAttribute("UomConvFctr", new Number(1));
                prStkRow.setAttribute("SrNo", "0");
                prStkRow.setAttribute("BinId", "0");
                prStkRow.setAttribute("DocIdInvc", r.getAttribute("DocId"));
                adfLog.info("---inside if----" + "  .." + r.getAttribute("LotId").toString() + "  .");

                Object retnLnd = null;
                try {
                    adfLog.info("---------bfr return value of check stock qty--- ");
                    retnLnd = callStoredFunction(Types.NUMERIC, "MM.MM_GET_LOT_LND_PRICE(?,?,?,?,?,?)", new Object[] {
                                                 CldId, SlocId, OrgId, r.getAttribute("WhId").toString(),
                                                 r.getAttribute("ItmId").toString(), r.getAttribute("LotId").toString()
                    });
                    adfLog.info("---MM_GET_LOT_LND_PRICE parameter are lot " + r.getAttribute("WhId").toString() +
                                " ItmId " + r.getAttribute("ItmId").toString() + " LotId " +
                                r.getAttribute("LotId").toString());
                    adfLog.info("---------return value Land Price--- " + retnLnd);
                    lndPrice = new Number(retnLnd);
                    adfLog.info("----lnd price after converted number--- " + lndPrice);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }
                map.put(r.getAttribute("LotId").toString(), lndPrice);
                prStkRow.setAttribute("LotPrice", lndPrice);

                if (r.getAttribute("TransOkQty") != null &&
                    ((Number) r.getAttribute("TransOkQty")).compareTo(new Number(0)) == 1) {
                    // -- set ok value r.getAttribute("TransOkQty"))
                    adfLog.info("---------------->>>>>>ok qty--" + r.getAttribute("TransOkQty"));
                    prStkRow.setAttribute("OkQty", (Number) r.getAttribute("TransOkQty"));
                    prStkRow.setAttribute("OkQtyBs", (Number) r.getAttribute("TransOkQty"));
                    okVar = okVar.add((Number) r.getAttribute("TransOkQty"));
                } else {
                    prStkRow.setAttribute("OkQty", new Number(0));
                    prStkRow.setAttribute("OkQtyBs", new Number(0));
                }

                if (r.getAttribute("TransRejQty") != null &&
                    ((Number) r.getAttribute("TransRejQty")).compareTo(new Number(0)) == 1) {
                    // -- set rej value r.getAttribute("TransOkQty"))

                    adfLog.info("---------------->>>>>>ref qty-->>>" + r.getAttribute("TransRejQty"));
                    prStkRow.setAttribute("RejQty", (Number) r.getAttribute("TransRejQty"));
                    prStkRow.setAttribute("RejQtyBs", (Number) r.getAttribute("TransRejQty"));
                    rejVar = rejVar.add((Number) r.getAttribute("TransRejQty"));
                } else {
                    // set ok value 0
                    adfLog.info("---------------->>>>>>ref qty--000000 " + r.getAttribute("TransRejQty"));
                    prStkRow.setAttribute("RejQty", new Number(0));
                    prStkRow.setAttribute("RejQtyBs", new Number(0));
                }
                if (r.getAttribute("TransRewQty") != null &&
                    ((Number) r.getAttribute("TransRewQty")).compareTo(new Number(0)) == 1) {
                    // -- set resw value r.getAttribute("TransOkQty"))
                    adfLog.info("---------------->>>>>>rewk qty--" + r.getAttribute("TransRewQty"));
                    prStkRow.setAttribute("RwkQty", (Number) r.getAttribute("TransRewQty"));
                    prStkRow.setAttribute("RwkQtyBs", (Number) r.getAttribute("TransRewQty"));
                    rewVar = rewVar.add((Number) r.getAttribute("TransRewQty"));

                } else {
                    adfLog.info("---------------->>>>>>rewk qty--000 " + r.getAttribute("TransRewQty"));
                    prStkRow.setAttribute("RwkQty", new Number(0));
                    prStkRow.setAttribute("RwkQtyBs", new Number(0));
                }
                this.getMmPurRetnItmStk().insertRow(prStkRow);
            }
            count++;
        }

        this.getMmPurRetnItm().getCurrentRow().setAttribute("OkQty", okVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("OkQtyBs", okVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("RejQty", rejVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("RejQtyBs", rejVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("RwkQty", rewVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("RwkQtyBs", rewVar);
        adfLog.info("total ok rej----" + okVar + " " + rejVar + " " + rewVar);

        Number totItmPrice = new Number(0);
        Number totQty = okVar.add(rejVar).add(rewVar);
        for (Map.Entry mm : map.entrySet()) {
            totItmPrice = totItmPrice.add((Number) mm.getValue());
            adfLog.info("-----iterate map " + mm.getKey() + " " + mm.getValue() + " size " + map.size());
        }
        adfLog.info("-------getting totqty " + totQty + " totItmPrice " + totItmPrice);
        totItmPrice = totQty.multiply(totItmPrice);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("TotItmPrice", totItmPrice);

        adfLog.info("-----count---lot--" + count);
        rs.closeRowSetIterator();
        //  lotVo.closeRowSetIterator();
    }


    public HashSet validateLotBinQty() {
        ViewObjectImpl lotVo = this.getLotBinSupp1();
        RowSetIterator rs = lotVo.createRowSetIterator(null);
        HashSet hs = new HashSet();
        String lotId = null;
        String binId = null;
        Integer count = 0;
        while (rs.hasNext()) {
            Row r = rs.next();
            //BinId
            /*  if ((r.getAttribute("TransOkQtyBin") != null &&
                 ((Number) r.getAttribute("TransOkQtyBin")).compareTo(new Number(0)) == 1) ||
                (r.getAttribute("TransRejQtyBin") != null &&
                 ((Number) r.getAttribute("TransRejQtyBin")).compareTo(new Number(0)) == 1) ||
                (r.getAttribute("TransRewQtyBin") != null &&
                 ((Number) r.getAttribute("TransRewQtyBin")).compareTo(new Number(0)) == 1)) {
            */ //inside entered value lot rows
            if (r.getAttribute("TransOkQtyBin") != null || r.getAttribute("TransRejQtyBin") != null ||
                r.getAttribute("TransRewQtyBin") != null) {
                if (r.getAttribute("TransOkQtyBin") != null) {

                    if (((Number) r.getAttribute("TotStk")).compareTo((Number) r.getAttribute("TransOkQtyBin")) == -1) {
                        adfLog.info("---------------->>>>>>ok qty-->>>" + r.getAttribute("TotStk") + "  entered  " +
                                    r.getAttribute("TransOkQtyBin"));
                        lotId = r.getAttribute("LotId").toString();
                        binId = r.getAttribute("BinNameTrans").toString();
                        hs.add(lotId + " - " + binId);
                    } else if (((Number) r.getAttribute("TransOkQtyBin")).compareTo(new Number(0)) == -1) {
                        adfLog.info("---------------->>>>>OK qty-->>> -1 -----" + r.getAttribute("TransOkQtyBin"));
                        lotId = r.getAttribute("LotId").toString();
                        binId = r.getAttribute("BinNameTrans").toString();
                        hs.add(lotId + " - " + binId);
                    }

                }


                if (r.getAttribute("TransRejQtyBin") != null) {

                    if (((Number) r.getAttribute("RejStk")).compareTo((Number) r.getAttribute("TransRejQtyBin")) ==
                        -1) {
                        adfLog.info("---------------->>>>>>Rej qty-->>>" + r.getAttribute("TransRejQtyBin"));
                        lotId = r.getAttribute("LotId").toString();
                        binId = r.getAttribute("BinNameTrans").toString();
                        hs.add(lotId + " - " + binId);
                    } else if (((Number) r.getAttribute("TransRejQtyBin")).compareTo(new Number(0)) == -1) {
                        adfLog.info("---------------->>>>>Rej qty-->>> -1 -----" + r.getAttribute("TransRejQtyBin"));
                        lotId = r.getAttribute("LotId").toString();
                        binId = r.getAttribute("BinNameTrans").toString();
                        hs.add(lotId + " - " + binId);
                    }
                }

                if (r.getAttribute("TransRewQtyBin") != null) {

                    if (((Number) r.getAttribute("RwkStk")).compareTo((Number) r.getAttribute("TransRewQtyBin")) ==
                        -1) {
                        adfLog.info("---------------->>>>>Rew qty-->>>" + r.getAttribute("TransRewQtyBin"));
                        lotId = r.getAttribute("LotId").toString();
                        binId = r.getAttribute("BinNameTrans").toString();
                        hs.add(lotId + " - " + binId);
                    } else if (((Number) r.getAttribute("TransRewQtyBin")).compareTo(new Number(0)) == -1) {
                        adfLog.info("---------------->>>>>Rew qty-->>> -1 -----" + r.getAttribute("TransRewQtyBin"));
                        lotId = r.getAttribute("LotId").toString();
                        binId = r.getAttribute("BinNameTrans").toString();
                        hs.add(lotId + " - " + binId);
                    }
                }
            }
            count++;
        }
        adfLog.info("------count Validate bin--------" + count + "-----" + hs.size());
        lotVo.closeRowSetIterator();
        return hs;
    }

    public void populateFromLotBin() {
        ViewObjectImpl lotVo = this.getLotBinSupp1();
        RowSetIterator rs = lotVo.createRowSetIterator(null);
        Integer count = 0;
        Number okVar = new Number(0);
        Number rejVar = new Number(0);
        Number rewVar = new Number(0);
        Number lndPrice = new Number(0);
        Map<String, Number> map = new HashMap<String, Number>();
        while (rs.hasNext()) {
            Row r = rs.next();
            if ((r.getAttribute("TransOkQtyBin") != null &&
                 ((Number) r.getAttribute("TransOkQtyBin")).compareTo(new Number(0)) == 1) ||
                (r.getAttribute("TransRejQtyBin") != null &&
                 ((Number) r.getAttribute("TransRejQtyBin")).compareTo(new Number(0)) == 1) ||
                (r.getAttribute("TransRewQtyBin") != null &&
                 ((Number) r.getAttribute("TransRewQtyBin")).compareTo(new Number(0)) == 1)) {
                //-- create row
                Row prStkRow = this.getMmPurRetnItmStk().createRow();
                prStkRow.setAttribute("LotId", r.getAttribute("LotId").toString());
                prStkRow.setAttribute("ItmUomBs", r.getAttribute("ItmUomBs").toString());
                prStkRow.setAttribute("UomConvFctr", new Number(1));
                prStkRow.setAttribute("SrNo", "0");
                prStkRow.setAttribute("BinId", r.getAttribute("BinId").toString());
                prStkRow.setAttribute("DocIdInvc", r.getAttribute("DocId"));


                Object retnLnd = null;
                try {
                    adfLog.info("---------bfr return value of check stock qty--- ");
                    retnLnd = callStoredFunction(Types.NUMERIC, "MM.MM_GET_LOT_LND_PRICE(?,?,?,?,?,?)", new Object[] {
                                                 CldId, SlocId, OrgId, r.getAttribute("WhId").toString(),
                                                 r.getAttribute("ItmId").toString(), r.getAttribute("LotId").toString()
                    });
                    adfLog.info("---MM_GET_LOT_LND_PRICE parameter are " + r.getAttribute("WhId").toString() +
                                " ItmId " + r.getAttribute("ItmId").toString() + " LotId " +
                                r.getAttribute("LotId").toString());
                    adfLog.info("---------return value Land Price--- " + retnLnd);
                    lndPrice = new Number(retnLnd);
                    adfLog.info("----lnd price after converted number--- " + lndPrice);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }
                map.put(r.getAttribute("LotId").toString(), lndPrice);
                prStkRow.setAttribute("LotPrice", lndPrice);
                if (r.getAttribute("TransOkQtyBin") != null &&
                    ((Number) r.getAttribute("TransOkQtyBin")).compareTo(new Number(0)) == 1) {
                    // -- set ok value r.getAttribute("TransOkQty"))
                    adfLog.info("---------------->>>>>>ok qty--" + r.getAttribute("TransOkQtyBin"));
                    prStkRow.setAttribute("OkQty", (Number) r.getAttribute("TransOkQtyBin"));
                    prStkRow.setAttribute("OkQtyBs", (Number) r.getAttribute("TransOkQtyBin"));
                    okVar = okVar.add((Number) r.getAttribute("TransOkQtyBin"));
                } else {
                    prStkRow.setAttribute("OkQty", new Number(0));
                    prStkRow.setAttribute("OkQtyBs", new Number(0));
                }

                if (r.getAttribute("TransRejQtyBin") != null &&
                    ((Number) r.getAttribute("TransRejQtyBin")).compareTo(new Number(0)) == 1) {
                    // -- set rej value r.getAttribute("TransOkQty"))

                    adfLog.info("---------------->>>>>>ref qty-->>>" + r.getAttribute("TransRejQtyBin"));
                    prStkRow.setAttribute("RejQty", (Number) r.getAttribute("TransRejQtyBin"));
                    prStkRow.setAttribute("RejQtyBs", (Number) r.getAttribute("TransRejQtyBin"));
                    rejVar = rejVar.add((Number) r.getAttribute("TransRejQtyBin"));
                } else {
                    // set ok value 0
                    adfLog.info("---------------->>>>>>ref qty--000000 " + r.getAttribute("TransRejQtyBin"));
                    prStkRow.setAttribute("RejQty", new Number(0));
                    prStkRow.setAttribute("RejQtyBs", new Number(0));
                }
                if (r.getAttribute("TransRewQtyBin") != null &&
                    ((Number) r.getAttribute("TransRewQtyBin")).compareTo(new Number(0)) == 1) {
                    // -- set resw value r.getAttribute("TransOkQty"))
                    adfLog.info("---------------->>>>>>rewk qty--" + r.getAttribute("TransRewQtyBin"));
                    prStkRow.setAttribute("RwkQty", (Number) r.getAttribute("TransRewQtyBin"));
                    prStkRow.setAttribute("RwkQtyBs", (Number) r.getAttribute("TransRewQtyBin"));
                    rewVar = rewVar.add((Number) r.getAttribute("TransRewQtyBin"));

                } else {
                    adfLog.info("---------------->>>>>>rewk qty--000 " + r.getAttribute("TransRewQtyBin"));
                    prStkRow.setAttribute("RwkQty", new Number(0));
                    prStkRow.setAttribute("RwkQtyBs", new Number(0));
                }
                this.getMmPurRetnItmStk().insertRow(prStkRow);
            }
            count++;

        }
        Number totItmPrice = new Number(0);
        Number totQty = okVar.add(rejVar).add(rewVar);
        for (Map.Entry mm : map.entrySet()) {
            totItmPrice = totItmPrice.add((Number) mm.getValue());
            adfLog.info("-----iterate map " + mm.getKey() + " " + mm.getValue() + " size " + map.size());
        }
        adfLog.info("-------getting totqty " + totQty + " totItmPrice " + totItmPrice);
        totItmPrice = totQty.multiply(totItmPrice);

        this.getMmPurRetnItm().getCurrentRow().setAttribute("OkQty", okVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("OkQtyBs", okVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("RejQty", rejVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("RejQtyBs", rejVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("RwkQty", rewVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("RwkQtyBs", rewVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("TotItmPrice", totItmPrice);
        adfLog.info("total ok rej----" + okVar + " " + rejVar + " " + rewVar + " totItmPrice " + totItmPrice);

        adfLog.info("-----count---lot bin--" + count);
        rs.closeRowSetIterator();
    }

    public void populateFromLotBinSr() {
        //Row prCurrRow = this.getMmPurRetn().getCurrentRow();
        String binChk = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        ViewObjectImpl lotVo = this.getLotSrSupp1();
        RowSetIterator rs = lotVo.createRowSetIterator(null);
        Integer count = 0;
        Number okVar = new Number(0);
        Number lndPrice = new Number(0);
        Map<String, Number> map = new HashMap<String, Number>();

        while (rs.hasNext()) {
            Row r = rs.next();
            if ((r.getAttribute("TransSrCB") != null &&
                 (r.getAttribute("TransSrCB")).toString().equalsIgnoreCase("Y")) ||
                (r.getAttribute("TransSrRejCB") != null &&
                 (r.getAttribute("TransSrRejCB")).toString().equalsIgnoreCase("Y")) ||
                (r.getAttribute("TransSrRewCB") != null &&
                 (r.getAttribute("TransSrRewCB")).toString().equalsIgnoreCase("Y"))) {
                //-- create row
                Row prStkRow = this.getMmPurRetnItmStk().createRow();
                prStkRow.setAttribute("LotId", r.getAttribute("LotId").toString());
                prStkRow.setAttribute("ItmUomBs", r.getAttribute("ItmUomBs").toString());
                prStkRow.setAttribute("UomConvFctr", new Number(1));
                prStkRow.setAttribute("SrNo", r.getAttribute("SrNo").toString());
                prStkRow.setAttribute("DocIdInvc", r.getAttribute("DocId"));

                Object retnLnd = null;
                try {
                    adfLog.info("---------bfr return value of check stock qty--- ");
                    retnLnd = callStoredFunction(Types.NUMERIC, "MM.MM_GET_LOT_LND_PRICE(?,?,?,?,?,?)", new Object[] {
                                                 CldId, SlocId, OrgId, r.getAttribute("WhId").toString(),
                                                 r.getAttribute("ItmId").toString(), r.getAttribute("LotId").toString()
                    });
                    adfLog.info("---MM_GET_LOT_LND_PRICE parameter are " + r.getAttribute("WhId").toString() +
                                " ItmId " + r.getAttribute("ItmId").toString() + " LotId " +
                                r.getAttribute("LotId").toString());
                    adfLog.info("---------return value Land Price--- " + retnLnd);
                    lndPrice = new Number(retnLnd);
                    adfLog.info("----lnd price after converted number--- " + lndPrice);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }
                map.put(r.getAttribute("LotId").toString(), lndPrice);
                prStkRow.setAttribute("LotPrice", lndPrice);

                if (binChk.equalsIgnoreCase("Y")) {
                    prStkRow.setAttribute("BinId", r.getAttribute("BinId").toString());
                } else {
                    prStkRow.setAttribute("BinId", "0");
                }
                prStkRow.setAttribute("RejQty", new Number(0));
                prStkRow.setAttribute("RejQtyBs", new Number(0));
                prStkRow.setAttribute("RwkQty", new Number(0));
                prStkRow.setAttribute("RwkQtyBs", new Number(0));
                if (r.getAttribute("TransSrCB") != null &&
                    (r.getAttribute("TransSrCB")).toString().equalsIgnoreCase("Y")) {
                    // -- set ok value r.getAttribute("TransOkQty"))
                    adfLog.info("---------------->>>>>>ok qty--" + r.getAttribute("TransSrCB"));
                    prStkRow.setAttribute("OkQty", new Number(1));
                    prStkRow.setAttribute("OkQtyBs", new Number(1));
                    okVar = okVar.add(new Number(1));
                } else {
                    prStkRow.setAttribute("OkQty", new Number(0));
                    prStkRow.setAttribute("OkQtyBs", new Number(0));
                }


                /* if (r.getAttribute("TransSrRejCB") != null &&
                    (r.getAttribute("TransSrRejCB")).toString().equalsIgnoreCase("Y")) {
                    // -- set rej value r.getAttribute("TransOkQty"))


                    adfLog.info("---------------->>>>>>ref qty-->>>" + r.getAttribute("TransRejQtyBin"));
                    prStkRow.setAttribute("RejQty", (Number) r.getAttribute("TransRejQtyBin"));
                    prStkRow.setAttribute("RejQtyBs", (Number) r.getAttribute("TransRejQtyBin"));
                } else {
                    // set ok value 0
                    adfLog.info("---------------->>>>>>ref qty--000000 " + r.getAttribute("TransRejQty"));
                    prStkRow.setAttribute("RejQty", new Number(0));
                    prStkRow.setAttribute("RejQtyBs", new Number(0));
                }
                if (r.getAttribute("TransSrRewCB") != null &&
                    (r.getAttribute("TransSrRewCB")).toString().equalsIgnoreCase("Y")) {
                    // -- set resw value r.getAttribute("TransOkQty"))
                    adfLog.info("---------------->>>>>>rewk qty--" + r.getAttribute("TransRewQtyBin"));
                    prStkRow.setAttribute("RwkQty", (Number) r.getAttribute("TransRewQtyBin"));
                    prStkRow.setAttribute("RwkQtyBs", (Number) r.getAttribute("TransRewQtyBin"));

                } else {
                    adfLog.info("---------------->>>>>>rewk qty--000 " + r.getAttribute("TransRewQtyBin"));
                    prStkRow.setAttribute("RwkQty", new Number(0));
                    prStkRow.setAttribute("RwkQtyBs", new Number(0));
                } */
                this.getMmPurRetnItmStk().insertRow(prStkRow);
            }
            count++;
        }
        this.getMmPurRetnItm().getCurrentRow().setAttribute("OkQty", okVar);
        this.getMmPurRetnItm().getCurrentRow().setAttribute("OkQtyBs", okVar);

        Number totItmPrice = new Number(0);

        for (Map.Entry mm : map.entrySet()) {
            totItmPrice = totItmPrice.add((Number) mm.getValue());
            adfLog.info("-----iterate map " + mm.getKey() + " " + mm.getValue() + " size " + map.size());
        }
        adfLog.info("-------getting totqty " + okVar + " totItmPrice " + totItmPrice);
        totItmPrice = okVar.multiply(totItmPrice);

        this.getMmPurRetnItm().getCurrentRow().setAttribute("TotItmPrice", totItmPrice);


        adfLog.info("---total qty---" + okVar + " totItmPrice " + totItmPrice);
        adfLog.info("-----count---lot bin sr--" + count);
        rs.closeRowSetIterator();
    }
    //method to check stock qty before save and forward.
    public Integer checkStockQtyBfrSaved() {
        Integer prType = (Integer) this.getMmPurRetn().getCurrentRow().getAttribute("PurType");
        Integer rtn = new Integer(-1);
        if (prType != null) {
            if (prType == 887) {
                this.getDBTransaction().postChanges();
                String docId = (String) this.getMmPurRetn().getCurrentRow().getAttribute("DocId");
                String whId = (String) this.getMmPurRetn().getCurrentRow().getAttribute("WhId");
                // Integer rtn = new Integer(-1);
                Object retnO = null;
                try {
                    adfLog.info("---------bfr return value of check stock qty--- ");
                    retnO = callStoredFunction(INTEGER, "MM.MM_PUR_RETN_STK_CHK(?,?,?,?,?)", new Object[] {
                                               CldId, SlocId, OrgId, whId, docId
                    });

                    adfLog.info("---------return value of check stock qty--- " + retnO);

                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }
                if (retnO != null) {
                    rtn = Integer.parseInt(retnO.toString());
                    return rtn;
                } else {
                    rtn = -1;
                    return rtn;
                }
            } else {
                adfLog.info("---else part " + rtn);
                rtn = 1;
                return rtn;

            }
        } else {
            return rtn;
        }
    }

    //reset lot entered value on trans vo
    public void setLotSuppValue() {
        ViewObjectImpl mainLot = this.getMmPurRetnItmStk();
        Row itmr = this.getMmPurRetnItm().getCurrentRow();
        Row lotr = mainLot.getCurrentRow();
        Number zero = new Number(0);
        RowQualifier rqL = new RowQualifier(mainLot);
        rqL.setWhereClause("OrgId = '" + itmr.getAttribute("OrgId").toString() + "' and ItmId= '" +
                           itmr.getAttribute("ItmId").toString() + "' and WhId ='" +
                           itmr.getAttribute("WhId").toString() + "' and DocId = '" + itmr.getAttribute("DocId") + "'");

        //        Row[] lotRow = mainLot.getFilteredRows("ItmId", itmr.getAttribute("ItmId"));
        Row[] lotRow = mainLot.getFilteredRows(rqL);
        adfLog.info("  lotRow " + lotRow.length);
        if (lotRow.length > 0) {
            for (Row rr1 : lotRow) {

                if ((rr1.getAttribute("OkQty") != null && ((Number) rr1.getAttribute("OkQty")).compareTo(zero) >= 0) ||
                    (rr1.getAttribute("RejQty") != null &&
                     ((Number) rr1.getAttribute("RejQty")).compareTo(zero) >= 0) ||
                    (rr1.getAttribute("RwkQty") != null &&
                     ((Number) rr1.getAttribute("RwkQty")).compareTo(zero) >= 0)) {
                    RowQualifier rq = new RowQualifier(this.getLotSupp1());
                    rq.setWhereClause("OrgId = '" + rr1.getAttribute("OrgId").toString() + "' and ItmId= '" +
                                      rr1.getAttribute("ItmId").toString() + "' and LotId ='" +
                                      rr1.getAttribute("LotId").toString() + "'");
                    Row[] viewLot = this.getLotSupp1().getFilteredRows(rq);

                    adfLog.info("lot filter  " + rq.getExprStr() + "  " + viewLot.length);
                    if (viewLot.length > 0) {
                        for (Row rr2 : viewLot) {
                            if (rr1.getAttribute("OkQty") != null &&
                                ((Number) rr1.getAttribute("OkQty")).compareTo(zero) >= 0) {
                                adfLog.info("rr1.getAttribute(\"OkQty\")   " + rr1.getAttribute("OkQty"));
                                rr2.setAttribute("TransOkQty", rr1.getAttribute("OkQty"));
                            }
                            if (rr1.getAttribute("RejQty") != null &&
                                ((Number) rr1.getAttribute("RejQty")).compareTo(zero) >= 0) {
                                adfLog.info("bin rwk bfr set   " + rr1.getAttribute("RejQty"));
                                rr2.setAttribute("TransRejQty", rr1.getAttribute("RejQty"));
                            }

                            if (rr1.getAttribute("RwkQty") != null &&
                                ((Number) rr1.getAttribute("RwkQty")).compareTo(zero) >= 0) {
                                adfLog.info("bin rwk bfr set   " + rr1.getAttribute("RwkQty"));
                                rr2.setAttribute("TransRewQty", rr1.getAttribute("RwkQty"));
                            }


                        }
                    }
                }

            }
        }
    }

    //reset lot entered value on trans vo
    public void setLotBinSuppValue() {
        ViewObjectImpl mainLot = this.getMmPurRetnItmStk();
        Row itmr = this.getMmPurRetnItm().getCurrentRow();
        Row lotr = mainLot.getCurrentRow();
        Number zero = new Number(0);
        RowQualifier rqL = new RowQualifier(mainLot);
        rqL.setWhereClause("OrgId = '" + itmr.getAttribute("OrgId").toString() + "' and ItmId= '" +
                           itmr.getAttribute("ItmId").toString() + "' and WhId ='" +
                           itmr.getAttribute("WhId").toString() + "' and DocId = '" + itmr.getAttribute("DocId") + "'");

        //        Row[] lotRow = mainLot.getFilteredRows("ItmId", itmr.getAttribute("ItmId"));
        Row[] lotRow = mainLot.getFilteredRows(rqL);
        adfLog.info("  lotRow " + lotRow.length);
        if (lotRow.length > 0) {
            for (Row rr1 : lotRow) {

                if ((rr1.getAttribute("OkQty") != null && ((Number) rr1.getAttribute("OkQty")).compareTo(zero) >= 0) ||
                    (rr1.getAttribute("RejQty") != null &&
                     ((Number) rr1.getAttribute("RejQty")).compareTo(zero) >= 0) ||
                    (rr1.getAttribute("RwkQty") != null &&
                     ((Number) rr1.getAttribute("RwkQty")).compareTo(zero) >= 0)) {

                    RowQualifier rq = new RowQualifier(this.getLotBinSupp1());
                    rq.setWhereClause("OrgId = '" + rr1.getAttribute("OrgId").toString() + "' and ItmId= '" +
                                      rr1.getAttribute("ItmId").toString() + "' and LotId ='" +
                                      rr1.getAttribute("LotId").toString() + "' and BinId = '" +
                                      rr1.getAttribute("BinId").toString() + "'");
                    Row[] viewLot = this.getLotBinSupp1().getFilteredRows(rq);

                    adfLog.info("lot bin filter  " + rq.getExprStr() + " length- " + viewLot.length);
                    if (viewLot.length > 0) {
                        for (Row rr2 : viewLot) {
                            if (rr1.getAttribute("OkQty") != null &&
                                ((Number) rr1.getAttribute("OkQty")).compareTo(zero) >= 0) {
                                adfLog.info("bin ok bfr set   " + rr1.getAttribute("OkQty"));
                                rr2.setAttribute("TransOkQtyBin", rr1.getAttribute("OkQty"));
                            }
                            if (rr1.getAttribute("RejQty") != null &&
                                ((Number) rr1.getAttribute("RejQty")).compareTo(zero) >= 0) {
                                adfLog.info("bin rej bfr set   " + rr1.getAttribute("RejQty"));
                                rr2.setAttribute("TransRejQtyBin", rr1.getAttribute("RejQty"));
                            }

                            if (rr1.getAttribute("RwkQty") != null &&
                                ((Number) rr1.getAttribute("RwkQty")).compareTo(zero) >= 0) {
                                adfLog.info("bin rwk bfr set   " + rr1.getAttribute("RwkQty"));
                                rr2.setAttribute("TransRewQtyBin", rr1.getAttribute("RwkQty"));
                            }


                        }
                    }
                }

            }
        }
    }

    //reset lot entered value on trans vo
    public void setLotSRSuppValue() {
        String binChk = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        ViewObjectImpl mainLot = this.getMmPurRetnItmStk();
        Row itmr = this.getMmPurRetnItm().getCurrentRow();
        Row lotr = mainLot.getCurrentRow();
        Number zero = new Number(0);
        RowQualifier rqL = new RowQualifier(mainLot);
        rqL.setWhereClause("OrgId = '" + itmr.getAttribute("OrgId").toString() + "' and ItmId= '" +
                           itmr.getAttribute("ItmId").toString() + "' and WhId ='" +
                           itmr.getAttribute("WhId").toString() + "' and DocId = '" + itmr.getAttribute("DocId") + "'");

        //        Row[] lotRow = mainLot.getFilteredRows("ItmId", itmr.getAttribute("ItmId"));
        Row[] lotRow = mainLot.getFilteredRows(rqL);
        adfLog.info("  lotRow " + lotRow.length + " exp " + rqL.getExprStr());
        if (lotRow.length > 0) {
            for (Row rr1 : lotRow) {

                if (rr1.getAttribute("OkQty") != null) {
                    if (((Number) rr1.getAttribute("OkQty")).compareTo(zero) >= 0) {
                        RowQualifier rq = new RowQualifier(this.getLotSrSupp1());
                        if (binChk.equalsIgnoreCase("Y")) {

                            rq.setWhereClause("OrgId = '" + rr1.getAttribute("OrgId").toString() + "' and ItmId= '" +
                                              rr1.getAttribute("ItmId").toString() + "' and LotId ='" +
                                              rr1.getAttribute("LotId").toString() + "' and BinId = '" +
                                              rr1.getAttribute("BinId").toString() + "' and SrNo = '" +
                                              rr1.getAttribute("SrNo").toString() + "'");
                        } else {
                            rq.setWhereClause("OrgId = '" + rr1.getAttribute("OrgId").toString() + "' and ItmId= '" +
                                              rr1.getAttribute("ItmId").toString() + "' and LotId ='" +
                                              rr1.getAttribute("LotId").toString() + "' and SrNo = '" +
                                              rr1.getAttribute("SrNo").toString() + "'");
                        }
                        Row[] viewLot = this.getLotSrSupp1().getFilteredRows(rq);

                        adfLog.info("lot filter  " + rq.getExprStr() + "  " + viewLot.length);
                        if (viewLot.length > 0) {
                            for (Row rr2 : viewLot) {
                                adfLog.info("before set lot trans cb   " + rr1.getAttribute("OkQty") + "   " +
                                            ((((Number) rr1.getAttribute("OkQty")).compareTo(new Number(1)) == 0) ?
                                             "Y" : "N"));
                                rr2.setAttribute("TransSrCB",
                                                 ((((Number) rr1.getAttribute("OkQty")).compareTo(new Number(1)) == 0) ?
                                                  "Y" : "N"));
                                //  rr2.setAttribute("TransRejQty", rr1.getAttribute("RejQty"));
                                // rr2.setAttribute("TransRewQty", rr1.getAttribute("RwkQty"));
                            }
                        }
                    }

                }
            }
        }
    }

    public void deleteAftrUpdateLot() {
        ViewObjectImpl mainLot = this.getMmPurRetnItmStk();
        Row itmr = this.getMmPurRetnItm().getCurrentRow();
        Number zero = new Number(0);

        RowQualifier rq = new RowQualifier(this.getMmPurRetnItmStk());
        rq.setWhereClause("OrgId = '" + itmr.getAttribute("OrgId").toString() + "' and DocId ='" +
                          itmr.getAttribute("DocId").toString() + "' and ItmId= '" +
                          itmr.getAttribute("ItmId").toString() + "'");
        Row[] rr = this.getMmPurRetnItmStk().getFilteredRows(rq);
        adfLog.info("----------length to delete -- " + rr.length + "  " + rq.getExprStr());
        if (rr.length > 0) {
            for (Row r : rr) {
                r.remove();
                adfLog.info("----remove---");
            }
        }
    }

    public void deleteStktableRow() {
        Row stkr = this.getMmPurRetnItmStk().getCurrentRow();
        if (stkr != null) {
            stkr.remove();
            adfLog.info("---removed---stk table row");
        }
    }


    //for cost center
    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {
        releaseAppAM(getAppAM());
        super.finalize();
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDoc1() {
        return (ViewObjectImpl) findViewObject("AppCcDoc1");
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVw1() {
        return (ViewObjectImpl) findViewObject("AppCcVw1");
    }

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;

        ViewObjectImpl appCcDocVO1 = this.getAppCcDoc1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 18529);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVw1();
        appCcVwVO1.setRangeSize(-1);
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        appCcVwVO1.setNamedWhereClauseParam("BindCldId", cld_id);
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", slocId);
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrg_id);
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", orgId);
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 18529);

        Row currentRow = this.getMmPurRetnItm1().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                System.out.println("----------all range in cost center-------" + allRowsInRange);
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getMmPurRetnItm1().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            System.out.println("j value is " + attributeDef[j].getColumnName());
                            System.out.println("------------ null value is " + r.getAttribute("DbobColNm"));
                            System.out.println("attributeDef[j].getColumnName().equalsIgnoreCase(r.getAttribute(\"DbobColNm\").toString()) " +
                                               attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm")));

                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
           * @param cldId
           * @param slocId
           * @param hoOrgId
           * @param orgId
           * @param tempId
           * @param tempSrc
           * @param docId
           * @param usrId
           * @param tempCcId
           * @param amount
           * @param pCcLevel1
           * @param pCcLevel2
           * @param pCcLevel3
           * @param pCcLevel4
           * @param pCcLevel5
           */


            Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

            ViewObjectImpl impl = this.getMmPurRetn();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();


                amCC.generateCostCenterApp(CldId, SlocId, EbizParams.GLBL_HO_ORG_ID(), OrgId,
                                           currentRow.getAttribute("DocId").toString(), "H", 18529, usrId,
                                           currentRow.getAttribute("DocId").toString(), new Number(0),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                // System.out.println("-----------ccc--"+ (String) resolvEl("#{pageFlowScope.P_CC_LEVEL1}"));
            }
        }
    }


    /**
     * Method which will call cost center bean
     */
    public void deleteCostCenterItem() {
        if (chkCcApplicableOrNot()) {
            System.out.println("Inside delete method");
            ViewObjectImpl impl = this.getMmPurRetnItm1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {
                    System.out.println("------------------ Not null" + EbizParams.GLBL_APP_USR());
                    amCC.deleteCCLines(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_CLD_ID(),
                                       currentRow.getAttribute("DocId").toString(), "L", 18529,
                                       EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                       new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                       (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                }
            }
            System.out.println("After calling delete method");
        }
    }

    /**
     * Method which will update amount present in cost center table
     */
    public void updateCostCenterAmt() {

        if (chkCcApplicableOrNot()) {
            System.out.println("Inside cost ceneter update amount method");
            ViewObjectImpl impl = this.getMmPurRetnItm1();
            Row currentRow = impl.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("CcId") != null &&
                currentRow.getAttribute("ItmAmtBs") != null) {
                AppCostCenterServiceAMImpl amCC = getAppAM();
                System.out.println("Inside Am after cresting object");
                if (amCC != null) {

                    this.declareGlblValuesForCC();

                    System.out.println("------------------ Not null");
                    Boolean amount =
                        amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                            EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                            currentRow.getAttribute("DocId").toString(), "L", 18529,
                                            EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                            //   (Number) currentRow.getAttribute("ItmAmtBs")
                                            new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                            (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                    if (!amount) {
                        ADFModelUtils.showFormattedFacesMessage("Update Cost Center",
                                                                "Please Update Cost Center Values.",
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
            // System.out.println("After calling Update method");
        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to MM$PR$COST$CENTER Table
     */
    public void sendDataFromTempCcToPRCc() {
        if (chkCcApplicableOrNot()) {

            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 18529, "MM",
                               "MM$PUR$RETN$COST$CENTER", this.getMmPurRetn().getCurrentRow().getAttribute("DocId")
            });
        }
    }

    //check profit centre is finalize or not
    public String ccFinalizedCheck() {
        ViewObjectImpl ccvo = this.getCCFinalChk1();
        ccvo.setNamedWhereClauseParam("BindCldId", CldId);
        ccvo.setNamedWhereClauseParam("BindSlocId", SlocId);
        ccvo.setNamedWhereClauseParam("BindOrgId", OrgId);
        ccvo.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        ccvo.executeQuery();
        Row[] r = ccvo.getFilteredRows("CcPrfDocId", new Integer(18529));
        if (r.length > 0) {
            adfLog.info("cc finalized --- " + r[0].getAttribute("CcFinalize"));
            return "Y";
        } else
            return "N";
    }


    /**
     * Container's getter for CCFinalChk1.
     * @return CCFinalChk1
     */
    public ViewObjectImpl getCCFinalChk1() {
        return (ViewObjectImpl) findViewObject("CCFinalChk1");
    }

    /**
     * Container's getter for DispSuppRefNo1.
     * @return DispSuppRefNo1
     */
    public DispSuppRefNoVOImpl getDispSuppRefNo1() {
        return (DispSuppRefNoVOImpl) findViewObject("DispSuppRefNo1");
    }
}
