package mmpurchasereturn.model.entities;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 28 16:12:24 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmPurRetnItmEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getCldId();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        OrgId {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        WhId {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getWhId();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setWhId((String) value);
            }
        }
        ,
        DocId {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getDocId();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        }
        ,
        DocIdMrn {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getDocIdMrn();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setDocIdMrn((String) value);
            }
        }
        ,
        ItmId {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getItmId();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setItmId((String) value);
            }
        }
        ,
        ItmUom {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getItmUom();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setItmUom((String) value);
            }
        }
        ,
        TotRetQty {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getTotRetQty();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setTotRetQty((Number) value);
            }
        }
        ,
        RejQty {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getRejQty();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setRejQty((Number) value);
            }
        }
        ,
        RwkQty {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getRwkQty();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setRwkQty((Number) value);
            }
        }
        ,
        ItmUomBs {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getItmUomBs();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setItmUomBs((String) value);
            }
        }
        ,
        UomConvFctr {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getUomConvFctr();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setUomConvFctr((Number) value);
            }
        }
        ,
        RejQtyBs {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getRejQtyBs();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setRejQtyBs((Number) value);
            }
        }
        ,
        RwkQtyBs {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getRwkQtyBs();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setRwkQtyBs((Number) value);
            }
        }
        ,
        OkQty {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getOkQty();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setOkQty((Number) value);
            }
        }
        ,
        OkQtyBs {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getOkQtyBs();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setOkQtyBs((Number) value);
            }
        }
        ,
        CcId {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getCcId();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setCcId((String) value);
            }
        }
        ,
        TotItmPrice {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getTotItmPrice();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setTotItmPrice((Number) value);
            }
        }
        ,
        ItmRmrks {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getItmRmrks();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setItmRmrks((String) value);
            }
        }
        ,
        MmPurRetnSrc {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getMmPurRetnSrc();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setMmPurRetnSrc((EntityImpl) value);
            }
        }
        ,
        MmPurRetnItmStk {
            public Object get(MmPurRetnItmEOImpl obj) {
                return obj.getMmPurRetnItmStk();
            }

            public void put(MmPurRetnItmEOImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MmPurRetnItmEOImpl object);

        public abstract void put(MmPurRetnItmEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDMRN = AttributesEnum.DocIdMrn.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int TOTRETQTY = AttributesEnum.TotRetQty.index();
    public static final int REJQTY = AttributesEnum.RejQty.index();
    public static final int RWKQTY = AttributesEnum.RwkQty.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int UOMCONVFCTR = AttributesEnum.UomConvFctr.index();
    public static final int REJQTYBS = AttributesEnum.RejQtyBs.index();
    public static final int RWKQTYBS = AttributesEnum.RwkQtyBs.index();
    public static final int OKQTY = AttributesEnum.OkQty.index();
    public static final int OKQTYBS = AttributesEnum.OkQtyBs.index();
    public static final int CCID = AttributesEnum.CcId.index();
    public static final int TOTITMPRICE = AttributesEnum.TotItmPrice.index();
    public static final int ITMRMRKS = AttributesEnum.ItmRmrks.index();
    public static final int MMPURRETNSRC = AttributesEnum.MmPurRetnSrc.index();
    public static final int MMPURRETNITMSTK = AttributesEnum.MmPurRetnItmStk.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmPurRetnItmEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mmpurchasereturn.model.entities.MmPurRetnItmEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for WhId, using the alias name WhId.
     * @return the value of WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WhId.
     * @param value value to set the WhId
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocIdMrn, using the alias name DocIdMrn.
     * @return the value of DocIdMrn
     */
    public String getDocIdMrn() {
        return (String) getAttributeInternal(DOCIDMRN);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocIdMrn.
     * @param value value to set the DocIdMrn
     */
    public void setDocIdMrn(String value) {
        setAttributeInternal(DOCIDMRN, value);
    }

    /**
     * Gets the attribute value for ItmId, using the alias name ItmId.
     * @return the value of ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmId.
     * @param value value to set the ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ItmUom, using the alias name ItmUom.
     * @return the value of ItmUom
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmUom.
     * @param value value to set the ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for TotRetQty, using the alias name TotRetQty.
     * @return the value of TotRetQty
     */
    public Number getTotRetQty() {
        return (Number) getAttributeInternal(TOTRETQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for TotRetQty.
     * @param value value to set the TotRetQty
     */
    public void setTotRetQty(Number value) {
        setAttributeInternal(TOTRETQTY, value);
    }

    /**
     * Gets the attribute value for RejQty, using the alias name RejQty.
     * @return the value of RejQty
     */
    public Number getRejQty() {
        return (Number) getAttributeInternal(REJQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for RejQty.
     * @param value value to set the RejQty
     */
    public void setRejQty(Number value) {
        setAttributeInternal(REJQTY, value);
    }

    /**
     * Gets the attribute value for RwkQty, using the alias name RwkQty.
     * @return the value of RwkQty
     */
    public Number getRwkQty() {
        return (Number) getAttributeInternal(RWKQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for RwkQty.
     * @param value value to set the RwkQty
     */
    public void setRwkQty(Number value) {
        setAttributeInternal(RWKQTY, value);
    }

    /**
     * Gets the attribute value for ItmUomBs, using the alias name ItmUomBs.
     * @return the value of ItmUomBs
     */
    public String getItmUomBs() {
        return (String) getAttributeInternal(ITMUOMBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmUomBs.
     * @param value value to set the ItmUomBs
     */
    public void setItmUomBs(String value) {
        setAttributeInternal(ITMUOMBS, value);
    }

    /**
     * Gets the attribute value for UomConvFctr, using the alias name UomConvFctr.
     * @return the value of UomConvFctr
     */
    public Number getUomConvFctr() {
        return (Number) getAttributeInternal(UOMCONVFCTR);
    }

    /**
     * Sets <code>value</code> as the attribute value for UomConvFctr.
     * @param value value to set the UomConvFctr
     */
    public void setUomConvFctr(Number value) {
        setAttributeInternal(UOMCONVFCTR, value);
    }

    /**
     * Gets the attribute value for RejQtyBs, using the alias name RejQtyBs.
     * @return the value of RejQtyBs
     */
    public Number getRejQtyBs() {
        return (Number) getAttributeInternal(REJQTYBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for RejQtyBs.
     * @param value value to set the RejQtyBs
     */
    public void setRejQtyBs(Number value) {
        setAttributeInternal(REJQTYBS, value);
    }

    /**
     * Gets the attribute value for RwkQtyBs, using the alias name RwkQtyBs.
     * @return the value of RwkQtyBs
     */
    public Number getRwkQtyBs() {
        return (Number) getAttributeInternal(RWKQTYBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for RwkQtyBs.
     * @param value value to set the RwkQtyBs
     */
    public void setRwkQtyBs(Number value) {
        setAttributeInternal(RWKQTYBS, value);
    }

    /**
     * Gets the attribute value for OkQty, using the alias name OkQty.
     * @return the value of OkQty
     */
    public Number getOkQty() {
        return (Number) getAttributeInternal(OKQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for OkQty.
     * @param value value to set the OkQty
     */
    public void setOkQty(Number value) {
        setAttributeInternal(OKQTY, value);
    }

    /**
     * Gets the attribute value for OkQtyBs, using the alias name OkQtyBs.
     * @return the value of OkQtyBs
     */
    public Number getOkQtyBs() {
        return (Number) getAttributeInternal(OKQTYBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for OkQtyBs.
     * @param value value to set the OkQtyBs
     */
    public void setOkQtyBs(Number value) {
        setAttributeInternal(OKQTYBS, value);
    }

    /**
     * Gets the attribute value for CcId, using the alias name CcId.
     * @return the value of CcId
     */
    public String getCcId() {
        return (String) getAttributeInternal(CCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CcId.
     * @param value value to set the CcId
     */
    public void setCcId(String value) {
        setAttributeInternal(CCID, value);
    }

    /**
     * Gets the attribute value for TotItmPrice, using the alias name TotItmPrice.
     * @return the value of TotItmPrice
     */
    public Number getTotItmPrice() {
        return (Number) getAttributeInternal(TOTITMPRICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for TotItmPrice.
     * @param value value to set the TotItmPrice
     */
    public void setTotItmPrice(Number value) {
        setAttributeInternal(TOTITMPRICE, value);
    }

    /**
     * Gets the attribute value for ItmRmrks, using the alias name ItmRmrks.
     * @return the value of ItmRmrks
     */
    public String getItmRmrks() {
        return (String) getAttributeInternal(ITMRMRKS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmRmrks.
     * @param value value to set the ItmRmrks
     */
    public void setItmRmrks(String value) {
        setAttributeInternal(ITMRMRKS, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public EntityImpl getMmPurRetnSrc() {
        return (EntityImpl) getAttributeInternal(MMPURRETNSRC);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setMmPurRetnSrc(EntityImpl value) {
        setAttributeInternal(MMPURRETNSRC, value);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getMmPurRetnItmStk() {
        return (RowIterator) getAttributeInternal(MMPURRETNITMSTK);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param whId key constituent
     * @param docId key constituent
     * @param docIdMrn key constituent
     * @param itmId key constituent
     * @param itmUom key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String whId, String docId,
                                       String docIdMrn, String itmId, String itmUom) {
        return new Key(new Object[] { cldId, slocId, orgId, whId, docId, docIdMrn, itmId, itmUom });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        setCcId(this.getHexDocNoFromFun());
        System.out.println("----ccId=-- " + getCcId());
        super.create(attributeList);
    }

    public String getHexDocNoFromFun() {
        String hexDocIdFromFun = "0";
        try {
            hexDocIdFromFun = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)", new Object[] {
                                                      this.getCldId(), this.getSlocId(), this.getOrgId(),
                                                      EbizParams.GLBL_APP_USR(), 18529, 84901, 0
            }).toString();
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at BdgEoBudgetEoImpl :" + e.getMessage());
        }
        System.out.println("===========" + hexDocIdFromFun);
        return hexDocIdFromFun;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            String msg = e.getMessage(); //.substring(11, end);

            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }
}

