package flexifieldsetupapp.model.service;

import flexifieldsetupapp.model.service.common.FlexiFieldSetupAppAM;
import flexifieldsetupapp.model.views.AppFlxFldViewVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Mar 27 10:31:17 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FlexiFieldSetupAppAMImpl extends ApplicationModuleImpl implements FlexiFieldSetupAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public FlexiFieldSetupAppAMImpl() {
    }

    /**
     * Container's getter for AppFlxFldViewVO1.
     * @return AppFlxFldViewVO1
     */
    public AppFlxFldViewVOImpl getAppFlxFldViewVO1() {
        return (AppFlxFldViewVOImpl) findViewObject("AppFlxFldViewVO1");
    }

    /**
     * Container's getter for AppFlxFldDocViewVO1.
     * @return AppFlxFldDocViewVO1
     */
    public ViewObjectImpl getAppFlxFldDocViewVO1() {
        return (ViewObjectImpl) findViewObject("AppFlxFldDocViewVO1");
    }

    /**
     * Container's getter for AppFlxFldNmViewVO1.
     * @return AppFlxFldNmViewVO1
     */
    public ViewObjectImpl getAppFlxFldNmViewVO1() {
        return (ViewObjectImpl) findViewObject("AppFlxFldNmViewVO1");
    }

    /**
     * Container's getter for FkAppFlxFldDocLink1.
     * @return FkAppFlxFldDocLink1
     */
    public ViewLinkImpl getFkAppFlxFldDocLink1() {
        return (ViewLinkImpl) findViewLink("FkAppFlxFldDocLink1");
    }

    /**
     * Container's getter for FkAppFlxFldNmLink1.
     * @return FkAppFlxFldNmLink1
     */
    public ViewLinkImpl getFkAppFlxFldNmLink1() {
        return (ViewLinkImpl) findViewLink("FkAppFlxFldNmLink1");
    }


    /**To Check Duplicate Field Name*/
    public String chkDuplicateFldNm(String FldNm) {
        System.out.println("Fld nm is -->" + FldNm);
        RowSetIterator itr = getAppFlxFldViewVO1().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (!next.equals(getAppFlxFldViewVO1().getCurrentRow())) {
                String nm = next.getAttribute("FldNm").toString();
                if (nm.equalsIgnoreCase(FldNm)) {
                    return "Y";
                }
            }
        }
        return "N";
    }

    /**To Check Duplicate Document name and Type*/

    public String chkDuplicateDocNmAndType(Integer docId, Integer docTypeId) {
        if (getAppFlxFldViewVO1().getCurrentRow().getAttribute("FldId") != null) {
            RowQualifier rq = new RowQualifier(getAppFlxFldDocViewVO1());
            rq.setWhereClause("FldId='" + getAppFlxFldViewVO1().getCurrentRow().getAttribute("FldId") + "' AND DocId=" +
                              docId + " And DocTypeId=" + docTypeId);
            Row[] filteredRows = getAppFlxFldDocViewVO1().getFilteredRows(rq);
            System.out.println("filter row at doc nm valid--" + filteredRows.length);
            if (filteredRows.length > 0 && (!filteredRows[0].equals(getAppFlxFldDocViewVO1().getCurrentRow()))) {
                System.out.println("going to return Yes");
                return "Y";
            }
        }
        return "N";
    }

    /**To Check Duplicate Language Name Corresponding to the Field_Id*/
    public String chkDuplicateLangNameValidator(String langNm) {
        if (getAppFlxFldViewVO1().getCurrentRow().getAttribute("FldId") != null) {

            Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();

            getLovLangNmVO1().setNamedWhereClauseParam("bindCldId", cldId);
            getLovLangNmVO1().setNamedWhereClauseParam("bindSlocId", slocId);
            getLovLangNmVO1().executeQuery();
            Row[] fRows = getLovLangNmVO1().getFilteredRows("LangDesc", langNm);
            System.out.println("in lang lov filtered row--" + fRows.length);
            if (fRows.length > 0) {
                String langId = fRows[0].getAttribute("LangId").toString();
                RowQualifier rq = new RowQualifier(getAppFlxFldNmViewVO1());
                rq.setWhereClause("FldId='" + getAppFlxFldViewVO1().getCurrentRow().getAttribute("FldId") +
                                  "' AND LangId=" + langId);
                Row[] filteredRows = getAppFlxFldNmViewVO1().getFilteredRows(rq);
                System.out.println("lang filter row length---->" + filteredRows.length);
                if (filteredRows.length > 0 && (!filteredRows[0].equals(getAppFlxFldNmViewVO1().getCurrentRow()))) {
                    System.out.println("going to return yes in lang name");
                    return "Y";
                }
                return "N";
            }
            return "N";
        }
        return "N";
    }

    public Object resolvEl(String data) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, data, Object.class);
        return exp.getValue(elContext);
    }

    /**
     * Container's getter for LovLangNmVO1.
     * @return LovLangNmVO1
     */
    public ViewObjectImpl getLovLangNmVO1() {
        return (ViewObjectImpl) findViewObject("LovLangNmVO1");
    }

    /**
     * Container's getter for LovNewForDocNameVO1.
     * @return LovNewForDocNameVO1
     */
    public ViewObjectImpl getLovNewForDocNameVO1() {
        return (ViewObjectImpl) findViewObject("LovNewForDocNameVO1");
    }

    //        public String chkValidation() {
    //            ViewObject vo = this.getLovDataType1();
    //            RowQualifier rq=new RowQualifier("DataType='"+row1.get);
    //            Row[] row = vo.getFilteredRows("");
    //            return null;


    /**
     * Container's getter for LovDataType1.
     * @return LovDataType1
     */
    //    public ViewObjectImpl getLovDataType1() {
    //        return (ViewObjectImpl) findViewObject("LovDataType1");
    //    }

    /**
     * Container's getter for LovDataType1.
     * @return LovDataType1
     */
    public ViewObjectImpl getLovDataType1() {
        return (ViewObjectImpl) findViewObject("LovDataType1");
    }

    /**
     * Container's getter for AppFlxFldLovVo1.
     * @return AppFlxFldLovVo1
     */
    public ViewObjectImpl getAppFlxFldLovVo1() {
        return (ViewObjectImpl) findViewObject("AppFlxFldLovVo1");
    }

    public String lovDataType() {
        System.out.println("in amimpl lovdataType method");
        Integer dataType = 0;
        ViewObject vo = this.getAppFlxFldViewVO1();
        Row currentRow = vo.getCurrentRow();
        String status = "N";
        if (currentRow != null) {
            dataType = (Integer) vo.getCurrentRow().getAttribute("DataType");
            System.out.println("value of data type is" + dataType);
            Object obj = vo.getCurrentRow().getAttribute("HsLov");

            if (obj != null) {
                status = obj.toString();
            }
        }
        System.out.println("status of check box is" + status);
        if ((dataType == 756 || dataType == 759) && (status == "Y")) {
            return "N";
        } else {
            FacesMessage message = new FacesMessage("Record Saved Successfully!");
            message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        }
        return "Y";
    }


    /**
     * Container's getter for AppFlxFldLovVo2.
     * @return AppFlxFldLovVo2
     */
    public ViewObjectImpl getAppFlxFldLovVo() {
        return (ViewObjectImpl) findViewObject("AppFlxFldLovVo");
    }

    /**
     * Container's getter for FlxFldtoFlxFldLov1.
     * @return FlxFldtoFlxFldLov1
     */
    public ViewLinkImpl getFlxFldtoFlxFldLov1() {
        return (ViewLinkImpl) findViewLink("FlxFldtoFlxFldLov1");
    }

    public String fldEditValidation() {
        System.out.println("in fldEdit Validation method");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        System.out.println("cld id id" + cld_id);
        Row currentRow = getAppFlxFldViewVO1().getCurrentRow();
        String fld_id = null;
        if (currentRow != null) {
            Object fld = currentRow.getAttribute("FldId");
            if (fld != null)
                fld_id = fld.toString();
        }

        System.out.println("fld is is" + fld_id);
        String s = callStoredFunction(Types.VARCHAR, "APP.FN_CHK_FLX_FLD_USED(?,?)", new Object[] {
                                      cld_id, fld_id }).toString();
        System.out.println("value returned is" + s);

        return s;
    }

    private Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    //   System.out.println("bindVars " + z + " " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            //   System.out.println("In Exception exch and Op and generate-->");

            String msg = e.getMessage();
            //  System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }

    }

    /**
     * Container's getter for LOVUniqueLangNm1.
     * @return LOVUniqueLangNm1
     */
    public ViewObjectImpl getLOVUniqueLangNm1() {
        return (ViewObjectImpl) findViewObject("LOVUniqueLangNm1");
    }

    public boolean chkForUniqueResNm(String name) {
        ViewObjectImpl impl = this.getLOVUniqueLangNm1();
        impl.setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        impl.setNamedWhereClauseParam("FldNmBind", name);
        impl.setNamedWhereClauseParam("LangIdBind",
                                      this.getAppFlxFldNmViewVO1().getCurrentRow().getAttribute("LangId"));
        impl.executeQuery();

        if (impl.getAllRowsInRange().length > 0) {
            return false;
        }
        return true;
    }

    /*   public String lovFielValidate(String name) {

    } */
}

