package mmquotation.model.views;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.HashMap;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmquotation.model.entities.MmQuotItmEOImpl;
import mmquotation.model.service.QuotationAMImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 29 11:42:07 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmQuotItmVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMQUOTITMEO = 0;
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MmQuotItmVORowImpl.class);

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */


    public enum AttributesEnum {
        SlocId {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        },
        OrgId {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        },
        DocId {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        },
        ItmId {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmId((String) value);
            }
        },
        QuotQty {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getQuotQty();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setQuotQty((Number) value);
            }
        },
        ItmPrice {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmPrice();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmPrice((Number) value);
            }
        },
        DiscType {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getDiscType();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setDiscType((String) value);
            }
        },
        DiscVal {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getDiscVal();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setDiscVal((Number) value);
            }
        },
        RejAlwd {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getRejAlwd();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setRejAlwd((String) value);
            }
        },
        ItmAmtBs {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmAmtBs();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmAmtBs((Number) value);
            }
        },
        ItmAmtSp {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmAmtSp();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmAmtSp((Number) value);
            }
        },
        UsrIdCreate {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getUsrIdCreate();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setUsrIdCreate((Integer) value);
            }
        },
        UsrIdCreateDt {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getUsrIdCreateDt();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        UsrIdMod {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getUsrIdMod();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setUsrIdMod((Integer) value);
            }
        },
        UsrIdModDt {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getUsrIdModDt();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        EntityId {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getEntityId();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setEntityId((Integer) value);
            }
        },
        TlrncQtyType {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTlrncQtyType();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTlrncQtyType((String) value);
            }
        },
        TlrncQtyVal {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTlrncQtyVal();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTlrncQtyVal((Number) value);
            }
        },
        ItmUom {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmUom();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmUom((String) value);
            }
        },
        CldId {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        },
        ItmPriceBs {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmPriceBs();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmPriceBs((Number) value);
            }
        },
        DiscAmtBs {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getDiscAmtBs();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setDiscAmtBs((Number) value);
            }
        },
        DiscAmtSp {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getDiscAmtSp();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setDiscAmtSp((Number) value);
            }
        },
        ItmUomBs {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmUomBs();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmUomBs((String) value);
            }
        },
        UomConvFctr {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getUomConvFctr();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setUomConvFctr((Number) value);
            }
        },
        TotDiscAmtBs {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTotDiscAmtBs();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTotDiscAmtBs((Number) value);
            }
        },
        TotDiscAmtSp {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTotDiscAmtSp();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTotDiscAmtSp((Number) value);
            }
        },
        ItmAmtBs_Trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmAmtBs_Trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmAmtBs_Trans((Number) value);
            }
        },
        ItmAmtSp_Trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmAmtSp_Trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmAmtSp_Trans((Number) value);
            }
        },
        ItmAmtSpAftTax_Trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmAmtSpAftTax_Trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmAmtSpAftTax_Trans((Number) value);
            }
        },
        Discout_trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getDiscout_trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setDiscout_trans((Number) value);
            }
        },
        TaxAmtItm_Trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTaxAmtItm_Trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTaxAmtItm_Trans((Number) value);
            }
        },
        ItmAmtBsAftTax_Trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmAmtBsAftTax_Trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmAmtBsAftTax_Trans((Number) value);
            }
        },
        ItmAmtSpBeforeDisc_Trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmAmtSpBeforeDisc_Trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmAmtSpBeforeDisc_Trans((Number) value);
            }
        },
        MarkedForDeleteItm {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getMarkedForDeleteItm();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setMarkedForDeleteItm((String) value);
            }
        },
        ItemId_Trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItemId_Trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItemId_Trans((String) value);
            }
        },
        UomClass_Trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getUomClass_Trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setUomClass_Trans((Integer) value);
            }
        },
        TransTaxChangedFlg {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTransTaxChangedFlg();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ValidQuotQty_Trans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getValidQuotQty_Trans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setValidQuotQty_Trans((Number) value);
            }
        },
        TransTaxExmptFlg {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTransTaxExmptFlg();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTransTaxExmptFlg((String) value);
            }
        },
        TransTaxRuleFlg {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTransTaxRuleFlg();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTransTaxRuleFlg((String) value);
            }
        },
        TransIsQtyOvrFlw {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTransIsQtyOvrFlw();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTransIsQtyOvrFlw((String) value);
            }
        },
        TransHoOrgId {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTransHoOrgId();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTransHoOrgId((String) value);
            }
        },
        TransItmsugg {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTransItmsugg();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        ItmGrpIdTrans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmGrpIdTrans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmGrpIdTrans((String) value);
            }
        },
        ItmAttDetailTrans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmAttDetailTrans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmAttDetailTrans((String) value);
            }
        },
        ItmGrpDetailTrans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmGrpDetailTrans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmGrpDetailTrans((String) value);
            }
        },
        TransItmAmtSp {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getTransItmAmtSp();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setTransItmAmtSp((Number) value);
            }
        },
        ItmUOMTrans {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getItmUOMTrans();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setItmUOMTrans((String) value);
            }
        },
        MmQuotTr {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getMmQuotTr();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        PoHist {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getPoHist();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        LovItmIdVO {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getLovItmIdVO();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        LovDiscTypVO {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getLovDiscTypVO();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        LovUomIdVO {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getLovUomIdVO();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        LovUomVwVO1 {
            public Object get(MmQuotItmVORowImpl obj) {
                return obj.getLovUomVwVO1();
            }

            public void put(MmQuotItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        static AttributesEnum[] vals = null; ;
        private static int firstIndex = 0;

        public abstract Object get(MmQuotItmVORowImpl object);

        public abstract void put(MmQuotItmVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int QUOTQTY = AttributesEnum.QuotQty.index();
    public static final int ITMPRICE = AttributesEnum.ItmPrice.index();
    public static final int DISCTYPE = AttributesEnum.DiscType.index();
    public static final int DISCVAL = AttributesEnum.DiscVal.index();
    public static final int REJALWD = AttributesEnum.RejAlwd.index();
    public static final int ITMAMTBS = AttributesEnum.ItmAmtBs.index();
    public static final int ITMAMTSP = AttributesEnum.ItmAmtSp.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int ENTITYID = AttributesEnum.EntityId.index();
    public static final int TLRNCQTYTYPE = AttributesEnum.TlrncQtyType.index();
    public static final int TLRNCQTYVAL = AttributesEnum.TlrncQtyVal.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ITMPRICEBS = AttributesEnum.ItmPriceBs.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int UOMCONVFCTR = AttributesEnum.UomConvFctr.index();
    public static final int TOTDISCAMTBS = AttributesEnum.TotDiscAmtBs.index();
    public static final int TOTDISCAMTSP = AttributesEnum.TotDiscAmtSp.index();
    public static final int ITMAMTBS_TRANS = AttributesEnum.ItmAmtBs_Trans.index();
    public static final int ITMAMTSP_TRANS = AttributesEnum.ItmAmtSp_Trans.index();
    public static final int ITMAMTSPAFTTAX_TRANS = AttributesEnum.ItmAmtSpAftTax_Trans.index();
    public static final int DISCOUT_TRANS = AttributesEnum.Discout_trans.index();
    public static final int TAXAMTITM_TRANS = AttributesEnum.TaxAmtItm_Trans.index();
    public static final int ITMAMTBSAFTTAX_TRANS = AttributesEnum.ItmAmtBsAftTax_Trans.index();
    public static final int ITMAMTSPBEFOREDISC_TRANS = AttributesEnum.ItmAmtSpBeforeDisc_Trans.index();
    public static final int MARKEDFORDELETEITM = AttributesEnum.MarkedForDeleteItm.index();
    public static final int ITEMID_TRANS = AttributesEnum.ItemId_Trans.index();
    public static final int UOMCLASS_TRANS = AttributesEnum.UomClass_Trans.index();
    public static final int TRANSTAXCHANGEDFLG = AttributesEnum.TransTaxChangedFlg.index();
    public static final int VALIDQUOTQTY_TRANS = AttributesEnum.ValidQuotQty_Trans.index();
    public static final int TRANSTAXEXMPTFLG = AttributesEnum.TransTaxExmptFlg.index();
    public static final int TRANSTAXRULEFLG = AttributesEnum.TransTaxRuleFlg.index();
    public static final int TRANSISQTYOVRFLW = AttributesEnum.TransIsQtyOvrFlw.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int TRANSITMSUGG = AttributesEnum.TransItmsugg.index();
    public static final int ITMGRPIDTRANS = AttributesEnum.ItmGrpIdTrans.index();
    public static final int ITMATTDETAILTRANS = AttributesEnum.ItmAttDetailTrans.index();
    public static final int ITMGRPDETAILTRANS = AttributesEnum.ItmGrpDetailTrans.index();
    public static final int TRANSITMAMTSP = AttributesEnum.TransItmAmtSp.index();
    public static final int ITMUOMTRANS = AttributesEnum.ItmUOMTrans.index();
    public static final int MMQUOTTR = AttributesEnum.MmQuotTr.index();
    public static final int POHIST = AttributesEnum.PoHist.index();
    public static final int LOVITMIDVO = AttributesEnum.LovItmIdVO.index();
    public static final int LOVDISCTYPVO = AttributesEnum.LovDiscTypVO.index();
    public static final int LOVUOMIDVO = AttributesEnum.LovUomIdVO.index();
    public static final int LOVUOMVWVO1 = AttributesEnum.LovUomVwVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmQuotItmVORowImpl() {
    }

    /**
     * Gets MmQuotItmEO entity object.
     * @return the MmQuotItmEO
     */
    public MmQuotItmEOImpl getMmQuotItmEO() {
        return (MmQuotItmEOImpl) getEntity(ENTITY_MMQUOTITMEO);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for ITM_ID using the alias name ItmId.
     * @return the ITM_ID
     */
    public String getItmId() {
        // System.out.println("Itmid="+getAttributeInternal(ITMID));
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID using the alias name ItmId.
     * @param value value to set the ITM_ID
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for QUOT_QTY using the alias name QuotQty.
     * @return the QUOT_QTY
     */
    public Number getQuotQty() {
        return (Number) getAttributeInternal(QUOTQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for QUOT_QTY using the alias name QuotQty.
     * @param value value to set the QUOT_QTY
     */
    public void setQuotQty(Number value) {
        Number zero = new Number(0);
        if (value == null) {
            value = zero;
        }


        Number totalSp = (Number) value.multiply(getItmPrice()).round(6); //
        if (getItmPrice() != null || getItmAmtBs() != null) {
            if (getDiscType().equalsIgnoreCase("P") && getTotDiscAmtSp() != null) {
                try {
                    Number totAftDisc =
                        (Number) totalSp.minus((totalSp.multiply(getTotDiscAmtSp()).divide(new Number(100)))).round(6);
                    //setItmAmtSp(totAftDisc);
                    setItmAmtSp_Trans(totAftDisc);
                    setItmAmtSpAftTax_Trans(totAftDisc);
                } catch (SQLException e) {
                }
            } else if (getDiscType().equalsIgnoreCase("A") && getTotDiscAmtSp() != null) {
                try {
                    //setItmAmtSp((Number)totalSp.minus(getDiscVal()).round(2));
                    setItmAmtSp_Trans((Number) totalSp.minus(getTotDiscAmtSp()).round(6));
                    setItmAmtSpAftTax_Trans((Number) totalSp.minus(getTotDiscAmtSp()).round(6));
                } catch (SQLException e) {
                }
            } else {
                setItmAmtSp_Trans(totalSp);
                setItmAmtSpAftTax_Trans(totalSp);
            }
        }
        /** code to discount amount and over all discount amount*/
        /* if(getItmPrice()!=null && value!=null){
            QuotationAMImpl am=(QuotationAMImpl)this.getApplicationModule();
            HashMap hm=am.getTotalAndTaxableAmt("Y", value, getItmPrice(), getDiscVal(), getDiscType());
            //  adfLog.info("taxable-------- "+hm.get("TaxableAmount")+" total amount value is--------- "+hm.get("TotalAmt")+"discount amount is "+hm.get("DiscountAmt"));

             setTotDiscAmtSp((Number)hm.get("DiscountAmt"));
             adfLog.info("current discount amount going to set is "+hm.get("DiscountAmt"));
            am.discountoverAll();
             //setTransTotAmt((Number)hm.get("TotalAmt"));
             //setTaxableAmt((Number)hm.get("TaxableAmount"));
        } */
        setAttributeInternal(QUOTQTY, value.round(6));
    }

    /**
     * Gets the attribute value for ITM_PRICE using the alias name ItmPrice.
     * @return the ITM_PRICE
     */
    public Number getItmPrice() {
        if (getAttributeInternal(ITMPRICE) != null &&
            getAm().getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr") != null) {
            Number curr = (Number) getAm().getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr");
            Number price = (Number) getAttributeInternal(ITMPRICE);
            setItmPriceBs((Number) curr.multiply(price).round(6)); //
        } else
            setItmPriceBs(new Number(0));
        return (Number) getAttributeInternal(ITMPRICE);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_PRICE using the alias name ItmPrice.
     * @param value value to set the ITM_PRICE
     */
    public void setItmPrice(Number value) {
        Number zero = new Number(0);
        if (value == null) {
            value = zero;
        }
        /* if(getDiscVal()==null){
            setDiscVal(zero);
        } */

        Number totalSp = (Number) value.multiply(getQuotQty()).round(6);
        if (getQuotQty() != null || getItmAmtBs() != null) {
            if (getDiscType().equalsIgnoreCase("P") && getTotDiscAmtSp() != null) {
                try {
                    Number totAftDisc =
                        (Number) totalSp.minus((totalSp.multiply(getTotDiscAmtSp()).divide(new Number(100)))).round(6);
                    //setItmAmtSp(totAftDisc);
                    setItmAmtSp_Trans(totAftDisc);
                    setItmAmtSpAftTax_Trans(totAftDisc);
                } catch (SQLException e) {
                }
            } else if (getDiscType().equalsIgnoreCase("A") && getTotDiscAmtSp() != null) {
                try {
                    //setItmAmtSp((Number)totalSp.minus(getDiscVal()).round(2));
                    setItmAmtSp_Trans((Number) totalSp.minus(getTotDiscAmtSp()).round(6));
                    setItmAmtSpAftTax_Trans((Number) totalSp.minus(getTotDiscAmtSp()).round(6));
                } catch (SQLException e) {
                }
            } else {
                //Number totalSp=value.multiply(getQuotQty());
                //setItmAmtSp(totalSp);
                setItmAmtSp_Trans(totalSp);
                setItmAmtSpAftTax_Trans(totalSp);
            }
        }

        /** code to check and over all discount amount */
        /*  if(getQuotQty()!=null && value!=null){
            QuotationAMImpl am=(QuotationAMImpl)this.getApplicationModule();
            HashMap hm=am.getTotalAndTaxableAmt("Y", getQuotQty(), value, getDiscVal(), getDiscType());
            //  adfLog.info("taxable-------- "+hm.get("TaxableAmount")+" total amount value is--------- "+hm.get("TotalAmt")+"discount amount is "+hm.get("DiscountAmt"));

             setTotDiscAmtSp((Number)hm.get("DiscountAmt"));
             adfLog.info("current discount amount going to set is "+hm.get("DiscountAmt"));
           // am.discountoverAll();
             //setTransTotAmt((Number)hm.get("TotalAmt"));
             //setTaxableAmt((Number)hm.get("TaxableAmount"));
        } */
        setAttributeInternal(ITMPRICE, value.round(6));
    }

    /**
     * Gets the attribute value for DISC_TYPE using the alias name DiscType.
     * @return the DISC_TYPE
     */
    public String getDiscType() {
        return (String) getAttributeInternal(DISCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_TYPE using the alias name DiscType.
     * @param value value to set the DISC_TYPE
     */
    public void setDiscType(String value) {
        setAttributeInternal(DISCTYPE, value);
    }

    /**
     * Gets the attribute value for DISC_VAL using the alias name DiscVal.
     * @return the DISC_VAL
     */
    public Number getDiscVal() {
        return (Number) getAttributeInternal(DISCVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_VAL using the alias name DiscVal.
     * @param value value to set the DISC_VAL
     */
    public void setDiscVal(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        /**code change and update from value change listener*/
        /*   Number tot=(getItmPrice().multiply(getQuotQty()));
        if(getDiscType().equalsIgnoreCase("P")){
            try{
                Number totAftDisc = (Number)tot.minus((tot.multiply(value).divide(new Number(100)))).round(2);
                //setItmAmtSp(totAftDisc);
                setItmAmtSp_Trans(totAftDisc);
                setItmAmtSpAftTax_Trans(totAftDisc);
            }catch (SQLException e) {
                }
        }else if(getDiscType().equalsIgnoreCase("A")){
            try{
                //setItmAmtSp((Number)tot.minus(value).round(2));
                setItmAmtSp_Trans((Number)tot.minus(value).round(2));
                setItmAmtSpAftTax_Trans((Number)tot.minus(value).round(2));
            }catch (SQLException e) {
                }
        } */
        setAttributeInternal(DISCVAL, value);
    }

    /**
     * Gets the attribute value for REJ_ALWD using the alias name RejAlwd.
     * @return the REJ_ALWD
     */
    public String getRejAlwd() {
        return (String) getAttributeInternal(REJALWD);
    }

    /**
     * Sets <code>value</code> as attribute value for REJ_ALWD using the alias name RejAlwd.
     * @param value value to set the REJ_ALWD
     */
    public void setRejAlwd(String value) {
        setAttributeInternal(REJALWD, value);
    }

    /**
     * Gets the attribute value for ITM_AMT_BS using the alias name ItmAmtBs.
     * @return the ITM_AMT_BS
     */
    public Number getItmAmtBs() {
        return (Number) getAttributeInternal(ITMAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_BS using the alias name ItmAmtBs.
     * @param value value to set the ITM_AMT_BS
     */
    public void setItmAmtBs(Number value) {
        setAttributeInternal(ITMAMTBS, value);
    }

    /**
     * Gets the attribute value for ITM_AMT_SP using the alias name ItmAmtSp.
     * @return the ITM_AMT_SP
     */
    public Number getItmAmtSp() {
        return (Number) getAttributeInternal(ITMAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_SP using the alias name ItmAmtSp.
     * @param value value to set the ITM_AMT_SP
     */
    public void setItmAmtSp(Number value) {
        setAttributeInternal(ITMAMTSP, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Date getUsrIdCreateDt() {
        return (Date) getAttributeInternal(USRIDCREATEDT);
    }


    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Date getUsrIdModDt() {
        return (Date) getAttributeInternal(USRIDMODDT);
    }


    /**
     * Gets the attribute value for ENTITY_ID using the alias name EntityId.
     * @return the ENTITY_ID
     */
    public Integer getEntityId() {
        return (Integer) getAttributeInternal(ENTITYID);
    }

    /**
     * Sets <code>value</code> as attribute value for ENTITY_ID using the alias name EntityId.
     * @param value value to set the ENTITY_ID
     */
    public void setEntityId(Integer value) {
        setAttributeInternal(ENTITYID, value);
    }

    /**
     * Gets the attribute value for TLRNC_QTY_TYPE using the alias name TlrncQtyType.
     * @return the TLRNC_QTY_TYPE
     */
    public String getTlrncQtyType() {
        return (String) getAttributeInternal(TLRNCQTYTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_QTY_TYPE using the alias name TlrncQtyType.
     * @param value value to set the TLRNC_QTY_TYPE
     */
    public void setTlrncQtyType(String value) {
        setAttributeInternal(TLRNCQTYTYPE, value);
    }

    /**
     * Gets the attribute value for TLRNC_QTY_VAL using the alias name TlrncQtyVal.
     * @return the TLRNC_QTY_VAL
     */
    public Number getTlrncQtyVal() {
        return (Number) getAttributeInternal(TLRNCQTYVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for TLRNC_QTY_VAL using the alias name TlrncQtyVal.
     * @param value value to set the TLRNC_QTY_VAL
     */
    public void setTlrncQtyVal(Number value) {
        setAttributeInternal(TLRNCQTYVAL, value);
    }

    /**
     * Gets the attribute value for ITM_UOM using the alias name ItmUom.
     * @return the ITM_UOM
     */
    public String getItmUom() {
        //  System.out.println("Itmuom="+ getAttributeInternal(ITMUOM));
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM using the alias name ItmUom.
     * @param value value to set the ITM_UOM
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }


    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for ITM_PRICE_BS using the alias name ItmPriceBs.
     * @return the ITM_PRICE_BS
     */
    public Number getItmPriceBs() {
        if ((Number) getAttributeInternal(ITMPRICEBS) != null)
            return (Number) getAttributeInternal(ITMPRICEBS);
        else if (getItmPrice() != null && getAm().getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr") != null) {
            Number price = getItmPrice();
            Number curr = (Number) getAm().getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr");
            return (Number) price.multiply(curr).round(6);
        } else
            return (new Number(0));

    }

    /**
     * Sets <code>value</code> as attribute value for ITM_PRICE_BS using the alias name ItmPriceBs.
     * @param value value to set the ITM_PRICE_BS
     */
    public void setItmPriceBs(Number value) {
        /*  System.out.println("setItmpricebs");
        if(value!=null)
        setAttributeInternal(ITMPRICEBS, value);
       else
         if(getAttributeInternal(ITMPRICE)!=null && getAm().getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr")!=null)
        {
            Number price=(Number) getAttributeInternal(ITMPRICE);
            Number curr = (Number)getAm().getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr");
            setAttributeInternal(ITMPRICEBS, price.multiply(curr));
            }
        else  */
        setAttributeInternal(ITMPRICEBS, value);

        // setAttributeInternal(ITMPRICEBS, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        if ((Number) getAttributeInternal(DISCAMTBS) != null)
            return (Number) getAttributeInternal(DISCAMTBS);
        else
            return (new Number(0));
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
        if ((Number) getAttributeInternal(DISCAMTSP) != null)
            return (Number) getAttributeInternal(DISCAMTSP);
        else
            return (new Number(0));
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
        setAttributeInternal(DISCAMTSP, value);
    }

    /**
     * Gets the attribute value for ITM_UOM_BS using the alias name ItmUomBs.
     * @return the ITM_UOM_BS
     */
    public String getItmUomBs() {
        return (String) getAttributeInternal(ITMUOMBS);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM_BS using the alias name ItmUomBs.
     * @param value value to set the ITM_UOM_BS
     */
    public void setItmUomBs(String value) {
        setAttributeInternal(ITMUOMBS, value);
    }

    /**
     * Gets the attribute value for UOM_CONV_FCTR using the alias name UomConvFctr.
     * @return the UOM_CONV_FCTR
     */
    public Number getUomConvFctr() {
        return (Number) getAttributeInternal(UOMCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for UOM_CONV_FCTR using the alias name UomConvFctr.
     * @param value value to set the UOM_CONV_FCTR
     */
    public void setUomConvFctr(Number value) {
        setAttributeInternal(UOMCONVFCTR, value);
    }

    /**
     * Gets the attribute value for TOT_DISC_AMT_BS using the alias name TotDiscAmtBs.
     * @return the TOT_DISC_AMT_BS
     */
    public Number getTotDiscAmtBs() {
        return (Number) getAttributeInternal(TOTDISCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_DISC_AMT_BS using the alias name TotDiscAmtBs.
     * @param value value to set the TOT_DISC_AMT_BS
     */
    public void setTotDiscAmtBs(Number value) {
        setAttributeInternal(TOTDISCAMTBS, value);
    }

    /**
     * Gets the attribute value for TOT_DISC_AMT_SP using the alias name TotDiscAmtSp.
     * @return the TOT_DISC_AMT_SP
     */
    public Number getTotDiscAmtSp() {
        return (Number) getAttributeInternal(TOTDISCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_DISC_AMT_SP using the alias name TotDiscAmtSp.
     * @param value value to set the TOT_DISC_AMT_SP
     */
    public void setTotDiscAmtSp(Number value) {
        setAttributeInternal(TOTDISCAMTSP, value);
    }

    /**
     * Gets the attribute value for ITM_AMT_BS_TRANS using the alias name ItmAmtBs_Trans.
     * @return the ITM_AMT_BS_TRANS
     */
    public Number getItmAmtBs_Trans() {
        QuotationAMImpl am = (QuotationAMImpl) resolvElDC("QuotationAMDataControl");
        Number currFctr = (Number) am.getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr");
        Number amtBs = new Number(0);
        if (getItmAmtSpAftTax_Trans() != null && currFctr != null) {
            amtBs = (Number) getItmAmtSpAftTax_Trans().multiply(currFctr).round(6);
            setItmAmtBs(amtBs);
            return amtBs;
        } else {
            return (Number) getAttributeInternal(ITMAMTBS_TRANS);
        }
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_BS_TRANS using the alias name ItmAmtBs_Trans.
     * @param value value to set the ITM_AMT_BS_TRANS
     */
    public void setItmAmtBs_Trans(Number value) {
        setAttributeInternal(ITMAMTBS_TRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute Discout_trans.
     * @return the Discout_trans
     */
    public Number getDiscout_trans() {
        Number zero = new Number(0);
        Number disc = null;
        if (getTotDiscAmtSp() != null)
            disc = getTotDiscAmtSp();
        else
            disc = zero;
        Number curr = null;
        if (getAm().getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr") != null)
            curr = (Number) getAm().getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr");
        else
            curr = zero;
        /*  if(getDiscType().equalsIgnoreCase("A")){
            setDiscAmtSp(disc);
            setDiscAmtBs(disc.multiply(curr));
            return disc;
                }else if(getDiscType().equalsIgnoreCase("P")){
                    disc=getItmPrice().multiply(getQuotQty()).multiply(getDiscVal()).divide(new Number(100));
        setDiscAmtSp(disc);
        setDiscAmtBs(disc.multiply(curr));
        return disc;
        }else{ */
        // adfLog.info(" value return  --------------- "+getAttributeInternal(DISCOUT_TRANS));
        return (Number) getAttributeInternal(DISCOUT_TRANS);
        // }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Discout_trans.
     * @param value value to set the  Discout_trans
     */
    public void setDiscout_trans(Number value) {
        setAttributeInternal(DISCOUT_TRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TaxAmtItm_Trans.
     * @return the TaxAmtItm_Trans
     */
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    public Number getTaxAmtItm_Trans() {
        String itmId = null;
        String itmUom = null;
        Number taxAmt = null;
        if (getItmId() != null)
            itmId = getItmId();
        if (getItmUom() != null)
            itmUom = getItmUom();
        QuotationAMImpl am = (QuotationAMImpl) resolvElDC("QuotationAMDataControl");
        ViewObjectImpl viewTr = am.getMmQuotTr();
        /*  viewTr.setRangeSize(-1);
          viewTr.getAllRowsInRange(); */
        RowQualifier rowQualifier = new RowQualifier(viewTr);
        rowQualifier.setWhereClause("ItmId ='" + itmId + "' and ItmUom='" + itmUom + "'");
        Row[] rows = viewTr.getFilteredRows(rowQualifier);
        // adfLog.info(" length tr in item "+rows.length);
        if (rows.length > 0) {
            taxAmt = (Number) rows[0].getAttribute("TaxAmt");
            return taxAmt;
        } else {
            return (new Number(0));
            // return (Number) getAttributeInternal(TAXAMTITM_TRANS);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TaxAmtItm_Trans.
     * @param value value to set the  TaxAmtItm_Trans
     */
    public void setTaxAmtItm_Trans(Number value) {
        Number zero = new Number(0);
        if (value == null) {
            value = zero;
        }
        if (getItmAmtSp_Trans() != null) {
            setItmAmtSpAftTax_Trans(getItmAmtSp_Trans().plus(value));
        }
        setAttributeInternal(TAXAMTITM_TRANS, value);
    }


    /**
     * Gets the attribute value for the calculated attribute ItmAmtBsAftTax_Trans.
     * @return the ItmAmtBsAftTax_Trans
     */
    public Number getItmAmtBsAftTax_Trans() {
        return (Number) getAttributeInternal(ITMAMTBSAFTTAX_TRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmAmtBsAftTax_Trans.
     * @param value value to set the  ItmAmtBsAftTax_Trans
     */
    public void setItmAmtBsAftTax_Trans(Number value) {
        setAttributeInternal(ITMAMTBSAFTTAX_TRANS, value);
    }


    /**
     * Gets the attribute value for ITM_AMT_SP_TRANS using the alias name ItmAmtSp_Trans.
     * @return the ITM_AMT_SP_TRANS
     */
    public Number getItmAmtSp_Trans() {
        Number totalSp = new Number(0);
        Number transSp = new Number(0);
        if (getQuotQty() != null && getItmPrice() != null) {
            totalSp = (Number) getItmPrice().multiply(getQuotQty()).round(6);
            if (getDiscType().equalsIgnoreCase("P") && getTotDiscAmtSp() != null) {
                try {
                    // transSp = (Number)totalSp.minus((totalSp.multiply(getTotDiscAmtSp()).divide(new Number(100)))).round(2);
                    transSp = (Number) totalSp.minus(getTotDiscAmtSp()).round(6);
                    adfLog.info(getTotDiscAmtSp() + " discount _trans value is " + getDiscout_trans() +
                                " getTotDiscAmtSp   transSp in p case  " + transSp);
                    //return totAftDisc;
                } catch (SQLException e) {
                }
            } else if (getDiscType().equalsIgnoreCase("A") && getTotDiscAmtSp() != null) {
                try {

                    transSp = (Number) totalSp.minus(getTotDiscAmtSp()).round(6);

                } catch (SQLException e) {
                }
            } else {
                transSp = totalSp;
            }
            return transSp;
        } else {
            return (Number) getAttributeInternal(ITMAMTSP_TRANS);
        }
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_SP_TRANS using the alias name ItmAmtSp_Trans.
     * @param value value to set the ITM_AMT_SP_TRANS
     */
    public void setItmAmtSp_Trans(Number value) {
        setAttributeInternal(ITMAMTSP_TRANS, value);
    }


    /**
     * Gets the attribute value for ITM_AMT_SP_AFT_TAX_TRANS using the alias name ItmAmtSpAftTax_Trans.
     * @return the ITM_AMT_SP_AFT_TAX_TRANS
     */
    public Number getItmAmtSpAftTax_Trans() {
        Number spAmt = new Number(0);
        if (getItmAmtSp_Trans() != null) {
            if (getTaxAmtItm_Trans() != null) {
                spAmt = getItmAmtSp_Trans().plus(getTaxAmtItm_Trans());
                setItmAmtSp(spAmt);
            } else {
                spAmt = getItmAmtSp_Trans();
                setItmAmtSp(spAmt);
            }
            return spAmt;
        }
        return (Number) getAttributeInternal(ITMAMTSPAFTTAX_TRANS);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_AMT_SP_AFT_TAX_TRANS using the alias name ItmAmtSpAftTax_Trans.
     * @param value value to set the ITM_AMT_SP_AFT_TAX_TRANS
     */
    public void setItmAmtSpAftTax_Trans(Number value) {
        setAttributeInternal(ITMAMTSPAFTTAX_TRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmAmtSpBeforeDisc_Trans.
     * @return the ItmAmtSpBeforeDisc_Trans
     */
    public Number getItmAmtSpBeforeDisc_Trans() {
        return (Number) getAttributeInternal(ITMAMTSPBEFOREDISC_TRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmAmtSpBeforeDisc_Trans.
     * @param value value to set the  ItmAmtSpBeforeDisc_Trans
     */
    public void setItmAmtSpBeforeDisc_Trans(Number value) {
        setAttributeInternal(ITMAMTSPBEFOREDISC_TRANS, value);
    }


    /**
     * Gets the attribute value for the calculated attribute MarkedForDeleteItm.
     * @return the MarkedForDeleteItm
     */
    public String getMarkedForDeleteItm() {
        return (String) getAttributeInternal(MARKEDFORDELETEITM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MarkedForDeleteItm.
     * @param value value to set the  MarkedForDeleteItm
     */
    public void setMarkedForDeleteItm(String value) {
        setAttributeInternal(MARKEDFORDELETEITM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItemId_Trans.
     * @return the ItemId_Trans
     */
    public String getItemId_Trans() {

        QuotationAMImpl am = (QuotationAMImpl) resolvElDC("QuotationAMDataControl");
        String inputitm = null;
        String itmDesc = null;

        inputitm = getItmId();
        //x.getAttribute("TvouCoaId");

        if (inputitm != null) {
            getAm().getLovItmIdForCode().setNamedWhereClauseParam("cldBind", getCldId());
            getAm().getLovItmIdForCode().setNamedWhereClauseParam("slocBind", getSlocId());
            getAm().getLovItmIdForCode().setNamedWhereClauseParam("orgBind", getOrgId());
            getAm().getLovItmIdForCode().setNamedWhereClauseParam("hoOrgBind", getTransHoOrgId());
            getAm().getLovItmIdForCode().setNamedWhereClauseParam("itmBind", inputitm);
            getAm().getLovItmIdForCode().setNamedWhereClauseParam("itmDescBind", null);
            getAm().getLovItmIdForCode().executeQuery();
            Row[] xx = getAm().getLovItmIdForCode().getFilteredRows("ItmId", inputitm);
            // Row [] xx=am.getLovInputItmId1().getFilteredRowsInRange("ItmId", inputitm);
            // System.out.println(getItmId()+" itm row impl ---  "+xx.length);
            if (xx.length > 0) {
                //System.out.println(xx[0].getAttribute("ItmDesc")+" itm row impl ---  "+xx.length);
                itmDesc = xx[0].getAttribute("ItmDesc").toString();
            }
            return itmDesc;

        } else {
            return (String) getAttributeInternal(ITEMID_TRANS);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItemId_Trans.
     * @param value value to set the  ItemId_Trans
     */
    public void setItemId_Trans(String value) {
        setAttributeInternal(ITEMID_TRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute UomClass_Trans.
     * @return the UomClass_Trans
     */
    public Integer getUomClass_Trans() {
        QuotationAMImpl am = (QuotationAMImpl) resolvElDC("QuotationAMDataControl");

        String inputuom = null;
        Integer uomClass = null;

        inputuom = getItmUom();

        if (inputuom != null) {
            Row[] r = am.getLovUomId().getFilteredRows("UomId", inputuom);
            if (r.length > 0) {
                uomClass = (Integer) r[0].getAttribute("UomClass");
            }
            return uomClass;
        } else {
            return (Integer) getAttributeInternal(UOMCLASS_TRANS);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute UomClass_Trans.
     * @param value value to set the  UomClass_Trans
     */
    public void setUomClass_Trans(Integer value) {
        setAttributeInternal(UOMCLASS_TRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxChangedFlg.
     * @return the TransTaxChangedFlg
     */
    public String getTransTaxChangedFlg() {
        Number zero = new Number(0);
        Number taxable = zero;
        Number amtforTax = zero;
        QuotationAMImpl am = (QuotationAMImpl) resolvElDC("QuotationAMDataControl");
        Row currQuot = am.getMmQuot1().getCurrentRow();
        ViewObjectImpl trPo = am.getMmQuotTr();
        RowQualifier rq = new RowQualifier(trPo);
        rq.setWhereClause("ItmId='" + getItmId() + "' and ItmUom='" + getItmUom() + "'");
        Row[] rw = trPo.getFilteredRows(rq);
        String applyTax = currQuot.getAttribute("TaxRuleFlg").toString();
        String flg = currQuot.getAttribute("TaxAfterDiscFlg").toString();
        //adfLog.info(" length tr in323 item "+rw.length);
        adfLog.info(applyTax + " tax after flag  " + flg);
        if (flg.equalsIgnoreCase("Y")) {
            amtforTax = getItmAmtSp_Trans();
        } else if (flg.equalsIgnoreCase("N")) {
            amtforTax = getItmAmtSpBeforeDisc_Trans();
        }

        if (rw.length > 0) {
            taxable = (Number) rw[0].getAttribute("TaxableAmt");
            if ("I".equalsIgnoreCase(applyTax) || "Q".equalsIgnoreCase(applyTax)) {
                if (amtforTax.compareTo(taxable) != 0) {
                    return "Y";
                } else {
                    return "N";
                }
            } else
                return "N";
        } else
            return "N";

        //return (String) getAttributeInternal(TRANSTAXCHANGEDFLG);
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    public QuotationAMImpl getAm() {
        return (QuotationAMImpl) resolvElDC("QuotationAMDataControl");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getAm().getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Gets the attribute value for the calculated attribute ValidQuotQty_Trans.
     * @return the ValidQuotQty_Trans
     */
    public Number getValidQuotQty_Trans() {
        Integer P_SLOCID = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        String P_ORGID = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}");
        String CldID = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String P_Ho_Org_Id = (String) resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String p_quot_item_id = null;
        BigDecimal valideQty = null;
        if (getItmId() != null) {
            p_quot_item_id = getItmId();
        }
        Integer fy = -1;
        Date dt = (Date) getAm().getMmQuot1().getCurrentRow().getAttribute("QuotDt");
        Integer fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldID, P_ORGID, dt
        }));
        fy = fyid;
        if (fy == -1 || fy == 0 || fy == null)
            fy = 2;

        if (p_quot_item_id != null) {
            valideQty = (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.PKG_MM_STK.GET_VALID_QTY(?,?,?,?,?,?)", new Object[] {
                                                        P_SLOCID, CldID, P_Ho_Org_Id, P_ORGID, p_quot_item_id, fy
            });
        }
        Number retval = null;
        //return (Number) getAttributeInternal(VALIDQUOTQTY_TRANS);

        try {
            if (valideQty != null)
                retval = new Number(valideQty);
        } catch (SQLException e) {

        }
        return retval;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ValidQuotQty_Trans.
     * @param value value to set the  ValidQuotQty_Trans
     */
    public void setValidQuotQty_Trans(Number value) {
        setAttributeInternal(VALIDQUOTQTY_TRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxExmptFlg.
     * @return the TransTaxExmptFlg
     */
    public String getTransTaxExmptFlg() {
        String itmId = getItmId();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}");
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        getAm().getLovItmIdForCode().setNamedWhereClauseParam("cldBind", getCldId());
        getAm().getLovItmIdForCode().setNamedWhereClauseParam("slocBind", getSlocId());
        getAm().getLovItmIdForCode().setNamedWhereClauseParam("orgBind", getOrgId());
        getAm().getLovItmIdForCode().setNamedWhereClauseParam("hoOrgBind", getTransHoOrgId());
        getAm().getLovItmIdForCode().setNamedWhereClauseParam("itmBind", itmId);
        getAm().getLovItmIdForCode().setNamedWhereClauseParam("itmDescBind", null);
        getAm().getLovItmIdForCode().executeQuery();
        RowQualifier rq = new RowQualifier(getAm().getLovItmIdForCode());
        rq.setWhereClause("ItmId='" + itmId + "' and CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" +
                          orgId + "' and HoOrgId='" + hoOrgId + "'");
        Row[] r = getAm().getLovItmIdForCode().getFilteredRows(rq);
        String flg = "N";
        if (r.length > 0)
            flg = (String) r[0].getAttribute("TaxExmptFlg");
        return flg;
        // return (String) getAttributeInternal(TRANSTAXEXMPTFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxExmptFlg.
     * @param value value to set the  TransTaxExmptFlg
     */
    public void setTransTaxExmptFlg(String value) {
        setAttributeInternal(TRANSTAXEXMPTFLG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxRuleFlg.
     * @return the TransTaxRuleFlg
     */
    public String getTransTaxRuleFlg() {
        /*   String itmId=getItmId();
        String cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String orgId=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}");
        String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer slocId=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        ViewObjectImpl impl = getAm().getLovItmId();
        RowQualifier rq=new RowQualifier(impl);
        rq.setWhereClause("ItmId='"+itmId+"' and CldId='"+cldId+"' and SlocId="+slocId+
            " and OrgId='"+orgId+"' and HoOrgId='"+hoOrgId+"'");
        Row[] r=impl.getFilteredRows(rq);
        String flg="N";
        if(r.length>0)
           flg = (String)r[0].getAttribute("TaxExmptFlg");
        return flg; */
        return (String) getAttributeInternal(TRANSTAXEXMPTFLG);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxRuleFlg.
     * @param value value to set the  TransTaxRuleFlg
     */
    public void setTransTaxRuleFlg(String value) {
        setAttributeInternal(TRANSTAXRULEFLG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransIsQtyOvrFlw.
     * @return the TransIsQtyOvrFlw
     */
    public String getTransIsQtyOvrFlw() {
        String ret = "N";
        if (getValidQuotQty_Trans() != null && getValidQuotQty_Trans().compareTo(new Number(0)) < 0)
            ret = "Y";
        // return (String) getAttributeInternal(TRANSISQTYOVRFLW);
        return ret;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransIsQtyOvrFlw.
     * @param value value to set the  TransIsQtyOvrFlw
     */
    public void setTransIsQtyOvrFlw(String value) {
        setAttributeInternal(TRANSISQTYOVRFLW, value);
    }


    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        if (resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}") != null) {
            return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        } else {
            return (String) getAttributeInternal(TRANSHOORGID);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmsugg.
     * @return the TransItmsugg
     */
    public String getTransItmsugg() {
        return (String) getAttributeInternal(TRANSITMSUGG);
    }


    /**
     * Gets the attribute value for the calculated attribute ItmGrpIdTrans.
     * @return the ItmGrpIdTrans
     */
    public String getItmGrpIdTrans() {
        return (String) getAttributeInternal(ITMGRPIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmGrpIdTrans.
     * @param value value to set the  ItmGrpIdTrans
     */
    public void setItmGrpIdTrans(String value) {
        setAttributeInternal(ITMGRPIDTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmAttDetailTrans.
     * @return the ItmAttDetailTrans
     */
    public String getItmAttDetailTrans() {
        if (getItmId() != null) {

            Object attdetail = callStoredFunction(Types.VARCHAR, "APP.FN_GET_ITM_ATT(?,?,?,?,?,?)", new Object[] {
                                                  getCldId(), getSlocId(), getTransHoOrgId(), getItmId(), "R", ","
            });
            adfLog.info("function return " + attdetail + " " + getItmId());
            if (attdetail != null) {
                return attdetail.toString();
            } else {
                return "None";
            }
        } else {
            return "None";
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmAttDetailTrans.
     * @param value value to set the  ItmAttDetailTrans
     */
    public void setItmAttDetailTrans(String value) {
        setAttributeInternal(ITMATTDETAILTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmGrpDetailTrans.
     * @return the ItmGrpDetailTrans
     */
    public String getItmGrpDetailTrans() {
        if (getItmId() != null) {
            QuotationAMImpl am = (QuotationAMImpl) this.getApplicationModule();
            ViewObjectImpl itmvo = am.getLovItmIdForCode();
            itmvo.setNamedWhereClauseParam("cldBind", getCldId());
            itmvo.setNamedWhereClauseParam("slocBind", getSlocId());
            itmvo.setNamedWhereClauseParam("hoOrgBind", getTransHoOrgId());
            //orgBind
            itmvo.setNamedWhereClauseParam("orgBind", getOrgId());
            itmvo.setNamedWhereClauseParam("itmBind", getItmId());
            itmvo.setNamedWhereClauseParam("itmDescBind", null);
            itmvo.executeQuery();
            RowQualifier rq = new RowQualifier(itmvo);
            rq.setWhereClause("ItmId ='" + getItmId() + "'");
            Row[] rr1 = itmvo.getFilteredRows(rq);
            Object attdetail = null;
            if (rr1.length > 0) {
                attdetail = callStoredFunction(Types.VARCHAR, "APP.GET_ITM_GRP_PATH(?,?,?,?)", new Object[] {
                                               getSlocId(), getCldId(), getTransHoOrgId(), rr1[0].getAttribute("GrpId")
                });
            }
            adfLog.info("function return " + attdetail + " grp and itm id is " + getItmGrpIdTrans() + " " + getItmId() +
                        "row length" + rr1.length);
            if (attdetail != null) {
                return attdetail.toString();
            } else {
                return (String) getAttributeInternal(ITMGRPDETAILTRANS);
            }
        } else {
            return (String) getAttributeInternal(ITMGRPDETAILTRANS);
        }

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmGrpDetailTrans.
     * @param value value to set the  ItmGrpDetailTrans
     */
    public void setItmGrpDetailTrans(String value) {
        setAttributeInternal(ITMGRPDETAILTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmAmtSp.
     * @return the TransItmAmtSp
     */
    public Number getTransItmAmtSp() {
        Number zero = new Number(0);
        Number amt = zero;
        Number hund = new Number(100);
        Number pr = zero;
        Number ord = zero;
        Number dis = zero;

        if (getItmPrice() != null)
            pr = (Number) getItmPrice();

        if (getQuotQty() != null)
            ord = (Number) getQuotQty();

        if (getDiscAmtSp() != null)
            dis = (Number) getDiscAmtSp();

        amt = (Number) amt.add((pr.multiply(ord)).subtract(dis)).round(6);

        return amt;
        //return (Number) getAttributeInternal(TRANSITMAMTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmAmtSp.
     * @param value value to set the  TransItmAmtSp
     */
    public void setTransItmAmtSp(Number value) {
        setAttributeInternal(TRANSITMAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ItmUOMTrans.
     * @return the ItmUOMTrans
     */
    public String getItmUOMTrans() {
        RowSet idVO = this.getLovUomIdVO();
        Row[] filteredRows = idVO.getFilteredRows("UomId", this.getItmUom());
        if (filteredRows.length > 0) {
            return filteredRows[0].getAttribute("UomNm").toString();
        }
        return (String) getAttributeInternal(ITMUOMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ItmUOMTrans.
     * @param value value to set the  ItmUOMTrans
     */
    public void setItmUOMTrans(String value) {
        setAttributeInternal(ITMUOMTRANS, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmQuotTr.
     */
    public RowIterator getMmQuotTr() {
        return (RowIterator) getAttributeInternal(MMQUOTTR);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link PoHist.
     */
    public RowIterator getPoHist() {
        return (RowIterator) getAttributeInternal(POHIST);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovItmIdVO.
     */
    public RowSet getLovItmIdVO() {
        return (RowSet) getAttributeInternal(LOVITMIDVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovDiscTypVO.
     */
    public RowSet getLovDiscTypVO() {
        return (RowSet) getAttributeInternal(LOVDISCTYPVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUomIdVO.
     */
    public RowSet getLovUomIdVO() {
        return (RowSet) getAttributeInternal(LOVUOMIDVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUomVwVO1.
     */
    public RowSet getLovUomVwVO1() {
        return (RowSet) getAttributeInternal(LOVUOMVWVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
