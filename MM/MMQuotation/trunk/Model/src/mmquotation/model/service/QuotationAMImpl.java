package mmquotation.model.service;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashMap;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmquotation.model.service.common.QuotationAM;
import mmquotation.model.views.MmQuotItmVOImpl;
import mmquotation.model.views.MmQuotOcVOImpl;
import mmquotation.model.views.MmQuotTrLinesVOImpl;
import mmquotation.model.views.MmQuotTrVOImpl;
import mmquotation.model.views.MmQuotVOImpl;

import mmquotation.model.views.QuotSearchVOImpl;
import mmquotation.model.views.trnsSrchVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 28 12:05:20 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QuotationAMImpl extends ApplicationModuleImpl implements QuotationAM {
    /**
     * This is the default constructor (do not remove).
     */
    public QuotationAMImpl() {
    }

    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(QuotationAMImpl.class);

    private static final int VARCHAR = Types.VARCHAR;

    /**
     * Container's getter for MmQuot1.
     * @return MmQuot1
     */
    public MmQuotVOImpl getMmQuot1() {
        return (MmQuotVOImpl) findViewObject("MmQuot1");
    }

    /**
     * Container's getter for MmQuotItm.
     * @return MmQuotItm
     */
    public MmQuotItmVOImpl getMmQuotItm() {
        return (MmQuotItmVOImpl) findViewObject("MmQuotItm");
    }

    /**
     * Container's getter for MmQuotOc.
     * @return MmQuotOc
     */
    public ViewObjectImpl getMmQuotOc() {
        return (ViewObjectImpl) findViewObject("MmQuotOc");
    }

    /**
     * Container's getter for MmQuotTnc.
     * @return MmQuotTnc
     */
    public ViewObjectImpl getMmQuotTnc() {
        return (ViewObjectImpl) findViewObject("MmQuotTnc");
    }

    /**
     * Container's getter for MmQuotTr.
     * @return MmQuotTr
     */
    public ViewObjectImpl getMmQuotTr() {
        return (ViewObjectImpl) findViewObject("MmQuotTr");
    }

    /**
     * Container's getter for LovRfqItm1.
     * @return LovRfqItm1
     */
    public ViewObjectImpl getLovRfqItm1() {
        return (ViewObjectImpl) findViewObject("LovRfqItm1");
    }

    /**
     * Container's getter for ViewQuatItm1.
     * @return ViewQuatItm1
     */
    public ViewObjectImpl getViewQuatItm1() {
        return (ViewObjectImpl) findViewObject("ViewQuatItm1");
    }

    /**
     * Container's getter for QuotTOQuotItmVL1.
     * @return QuotTOQuotItmVL1
     */
    public ViewLinkImpl getQuotTOQuotItmVL1() {
        return (ViewLinkImpl) findViewLink("QuotTOQuotItmVL1");
    }

    /**
     * Container's getter for QuotTOQuotOcVL1.
     * @return QuotTOQuotOcVL1
     */
    public ViewLinkImpl getQuotTOQuotOcVL1() {
        return (ViewLinkImpl) findViewLink("QuotTOQuotOcVL1");
    }

    /**
     * Container's getter for QuotTOQuotTncVL1.
     * @return QuotTOQuotTncVL1
     */
    public ViewLinkImpl getQuotTOQuotTncVL1() {
        return (ViewLinkImpl) findViewLink("QuotTOQuotTncVL1");
    }

    /**
     * Container's getter for QuotTOQuotTrVL1.
     * @return QuotTOQuotTrVL1
     */
    public ViewLinkImpl getQuotTOQuotTrVL1() {
        return (ViewLinkImpl) findViewLink("QuotTOQuotTrVL1");
    }


    /**
     * Container's getter for QuotSearch1.
     * @return QuotSearch1
     */
    public ViewObjectImpl getQuotSearch1() {
        return (ViewObjectImpl) findViewObject("QuotSearch1");
    }

    /**
     * Container's getter for LovEoId1.
     * @return LovEoId1
     */
    public ViewObjectImpl getLovEoId1() {
        return (ViewObjectImpl) findViewObject("LovEoId1");
    }

    /**
     * Container's getter for LovOrgId.
     * @return LovOrgId
     */
    public ViewObjectImpl getLovOrgId() {
        return (ViewObjectImpl) findViewObject("LovOrgId");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl) findViewObject("LovItmId");
    }

    public void searchQuery(Integer SlocId, String OrgId, String DocId) {
        RequestContext.getCurrentInstance().getPageFlowScope().put("Add_Edit_Mode", "V");
        ViewObject v1 = this.getMmQuot1();
        DocId = resolvEl("#{pageFlowScope.DOC_ID}");
        System.out.println("Doc Id Found : " + DocId);
        v1.setWhereClause("SLOC_ID=" + SlocId + " AND ORG_ID='" + OrgId + "' AND DOC_ID='" + DocId + "'");
        v1.executeQuery();

    }

    public void resetQuery() {
        ViewObject v1 = this.getMmQuot1();
        v1.setWhereClause(null);
        v1.executeQuery();

    }

    /**
     * Container's getter for LovDlvAdds.
     * @return LovDlvAdds
     */
    public ViewObjectImpl getLovDlvAdds() {
        return (ViewObjectImpl) findViewObject("LovDlvAdds");
    }

    /**
     * Container's getter for LovBillAdds.
     * @return LovBillAdds
     */
    public ViewObjectImpl getLovBillAdds() {
        return (ViewObjectImpl) findViewObject("LovBillAdds");
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public void tranlateQuot() {
        try {
            ViewObjectImpl v = getMmQuot1();
            Row row = v.getCurrentRow();
            String doc_id = row.getAttribute("DocId").toString();
            System.out.println(doc_id + "------");
            Integer P_SLOCID = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
            String P_ORGID = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}");
            String CldID = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR1}"));
            String pending = callStoredFunction(VARCHAR, "MM.PKG_MM_QUOT.TRANSLATE_QUOT(?,?,?,?)", new Object[] {
                                                P_SLOCID, P_ORGID, CldID, doc_id
            }).toString();
            String wfRtn = (String) resolvEl("#{pageFlowScope.ret_wf}");
            if (wfRtn.equals("A")) {
                FacesMessage message = new FacesMessage("Document Approved Successfully");
                message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }
        } catch (Exception e) {
            System.out.println(e + "--------------");
        }

    }

    /**
     * Container's getter for MmQuotTrLines.
     * @return MmQuotTrLines
     */
    public ViewObjectImpl getMmQuotTrLines() {
        return (ViewObjectImpl) findViewObject("MmQuotTrLines");
    }

    /**
     * Container's getter for QuotTrTOQuotTrLineVL1.
     * @return QuotTrTOQuotTrLineVL1
     */
    public ViewLinkImpl getQuotTrTOQuotTrLineVL1() {
        return (ViewLinkImpl) findViewLink("QuotTrTOQuotTrLineVL1");
    }

    /**
     * Container's getter for LovUomId.
     * @return LovUomId
     */
    public ViewObjectImpl getLovUomId() {
        return (ViewObjectImpl) findViewObject("LovUomId");
    }

    /**
     * Container's getter for LovItmIdEo.
     * @return LovItmIdEo
     */
    public ViewObjectImpl getLovItmIdEo() {
        return (ViewObjectImpl) findViewObject("LovItmIdEo");
    }

    /**
     * Container's getter for LovCurrency.
     * @return LovCurrency
     */
    public ViewObjectImpl getLovCurrency() {
        return (ViewObjectImpl) findViewObject("LovCurrency");
    }

    /**
     * Container's getter for MmQuotVO1.
     * @return MmQuotVO1
     */
    public MmQuotVOImpl getMmQuotVO1() {
        return (MmQuotVOImpl) findViewObject("MmQuotVO1");
    }

    /**
     * Container's getter for LovQuotStatus.
     * @return LovQuotStatus
     */
    public ViewObjectImpl getLovQuotStatus() {
        return (ViewObjectImpl) findViewObject("LovQuotStatus");
    }

    /**
     * Container's getter for LovrfqId.
     * @return LovrfqId
     */
    public ViewObjectImpl getLovrfqId() {
        return (ViewObjectImpl) findViewObject("LovrfqId");
    }

    /**
     * Container's getter for LovCurrId.
     * @return LovCurrId
     */
    public ViewObjectImpl getLovCurrId() {
        return (ViewObjectImpl) findViewObject("LovCurrId");
    }

    /**
     * Container's getter for trnsSrch1.
     * @return trnsSrch1
     */
    public ViewObjectImpl gettrnsSrch1() {
        return (ViewObjectImpl) findViewObject("trnsSrch1");
    }

    /*   public void filterItems()
    {
         String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocIdInt=Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
       // Integer slocIdInt = Integer.parseInt(slocId);

      ViewObjectImpl vw = this.getLovItmId();
      ViewCriteria vc  = vw.getViewCriteria("LovItmIdVOCriteria1");
      vw.applyViewCriteria(vc);
      vw.setNamedWhereClauseParam("SlocIdBindVar", slocIdInt);
      vw.setNamedWhereClauseParam("CldIdBindVar",cldId);
      vw.setNamedWhereClauseParam("OrgIdBind", orgId);
      vw.executeQuery();

    }  */

    public static Object evaluateEL(String el) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, el, Object.class);
        return exp.getValue(elContext);
    }


    public void searchAction() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocIdInt = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //Integer slocIdInt = Integer.parseInt(slocId);
        ViewObjectImpl inputVo = this.gettrnsSrch1();
        Row row = inputVo.getCurrentRow();
        ViewObjectImpl vw = this.getQuotSearch1();
        vw.setNamedWhereClauseParam("SlocIdBind", slocIdInt);
        vw.setNamedWhereClauseParam("OrgIdBindVar", orgId);
        vw.setNamedWhereClauseParam("QuotIdBindVar", row.getAttribute("quotNo"));
        vw.setNamedWhereClauseParam("FromQuotDtBindVar", row.getAttribute("fromDate"));
        vw.setNamedWhereClauseParam("ToQuotDtBindVar", row.getAttribute("toDate"));
        vw.setNamedWhereClauseParam("EoNmBindVaR", row.getAttribute("supplierId"));
        vw.setNamedWhereClauseParam("TotItmBindVar", row.getAttribute("itmName"));
        vw.setNamedWhereClauseParam("FromQuotAmtBsBindVar", row.getAttribute("amtRange"));
        vw.setNamedWhereClauseParam("ToQuotAmtBsBindVar", row.getAttribute("To"));
        vw.setNamedWhereClauseParam("QuotStatusBindVar", row.getAttribute("status"));
        vw.executeQuery();
    }

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        Integer DocTypId = 0;
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, DocTypId
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }
    private static int NUMBER = Types.NUMERIC;

    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Integer DocTypId = 0;
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, UsrId, WfNo, DocNo, DocTypId
    }).toString());


    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        Integer DocTypId = 0;
        String DocId = getMmQuot1().getCurrentRow().getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo, DocTypId, WfNo, DocId, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount
    }).toString());

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        Integer DocTypeId = 0;
        String DocId = getMmQuot1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, DocId, DocTypeId
        });
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }


    public String getTxnId() {
        String DocId = getMmQuot1().getCurrentRow().getAttribute("DocId").toString();
        if (DocId != null) {
            return DocId;
        } else {
            return null;
        }
    }

    public String CheckSaved() {
        String DocId = getMmQuot1().getCurrentRow().getAttribute("DocId").toString();
        Row[] r = getWF1().getFilteredRows("TxnDocId", DocId);
        if (r.length > 0)
            return "1";
        else
            return "-1";
    }

    /**
     * Container's getter for WF1.
     * @return WF1
     */
    public ViewObjectImpl getWF1() {
        return (ViewObjectImpl) findViewObject("WF1");
    }

    /**
     * Container's getter for LovUomVw1.
     * @return LovUomVw1
     */
    public ViewObjectImpl getLovUomVw1() {
        return (ViewObjectImpl) findViewObject("LovUomVw1");
    }

    /**
     * Container's getter for TransRfqDocIdDisp.
     * @return TransRfqDocIdDisp
     */
    public ViewObjectImpl getTransRfqDocIdDisp() {
        return (ViewObjectImpl) findViewObject("TransRfqDocIdDisp");
    }

    /**
     * Container's getter for MmQuotTrLines1.
     * @return MmQuotTrLines1
     */
    public MmQuotTrLinesVOImpl getMmQuotTrLines1() {
        return (MmQuotTrLinesVOImpl) findViewObject("MmQuotTrLines1");
    }

    /**
     * Container's getter for MmQuotTr1.
     * @return MmQuotTr1
     */
    public MmQuotTrVOImpl getMmQuotTr1() {
        return (MmQuotTrVOImpl) findViewObject("MmQuotTr1");
    }

    /**
     * Container's getter for MmQuotItmToQuotTrVL1.
     * @return MmQuotItmToQuotTrVL1
     */
    public ViewLinkImpl getMmQuotItmToQuotTrVL1() {
        return (ViewLinkImpl) findViewLink("MmQuotItmToQuotTrVL1");
    }

    /**
     * Container's getter for MmQuotTrLines2.
     * @return MmQuotTrLines2
     */
    public MmQuotTrLinesVOImpl getMmQuotTrLines2() {
        return (MmQuotTrLinesVOImpl) findViewObject("MmQuotTrLines2");
    }

    /**
     * Container's getter for QuotTrTOQuotTrLineVL2.
     * @return QuotTrTOQuotTrLineVL2
     */
    public ViewLinkImpl getQuotTrTOQuotTrLineVL2() {
        return (ViewLinkImpl) findViewLink("QuotTrTOQuotTrLineVL2");
    }


    public void setBindVarToEoId() {
        Integer P_SLOCID = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String P_ORGID = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String CldID = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String hoorg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        this.getLovEoId1().setNamedWhereClauseParam("cldIdBindVar", CldID);
        this.getLovEoId1().setNamedWhereClauseParam("SlocIdBindVar", P_SLOCID);
        this.getLovEoId1().setNamedWhereClauseParam("orgIdBindVar", P_ORGID);
        this.getLovEoId1().setNamedWhereClauseParam("hoOrgIdBindVar", hoorg);
        this.getLovEoId1().executeQuery();
        this.getLovTaxTypeId().setNamedWhereClauseParam("HoOrgIdBind", hoorg);
        this.getLovTaxTypeId().setNamedWhereClauseParam("CldIdBind", CldID);
        this.getLovTaxTypeId().setNamedWhereClauseParam("SlocIdBind", P_SLOCID);
        this.getLovTaxTypeId().executeQuery();
        System.out.println("Bind var set to eo");

        ViewObjectImpl tncvo = this.getLovTNC();
        tncvo.setNamedWhereClauseParam("bindCldId", CldID);
        tncvo.setNamedWhereClauseParam("bindSlocId", P_SLOCID);
        tncvo.setNamedWhereClauseParam("bindOrgId", P_ORGID);
        tncvo.executeQuery();

    }

    /**
     * Container's getter for LovUsrId.
     * @return LovUsrId
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl) findViewObject("LovUsrId");
    }

    /**
     * Container's getter for LovTaxRuleId.
     * @return LovTaxRuleId
     */
    public ViewObjectImpl getLovTaxRuleId() {
        return (ViewObjectImpl) findViewObject("LovTaxRuleId");
    }

    /**
     * Container's getter for LovTaxTypeId.
     * @return LovTaxTypeId
     */
    public ViewObjectImpl getLovTaxTypeId() {
        return (ViewObjectImpl) findViewObject("LovTaxTypeId");
    }

    /**
     * Container's getter for LovTaxCoaId.
     * @return LovTaxCoaId
     */
    public ViewObjectImpl getLovTaxCoaId() {
        return (ViewObjectImpl) findViewObject("LovTaxCoaId");
    }

    /**
     * Container's getter for LovTNC.
     * @return LovTNC
     */
    public ViewObjectImpl getLovTNC() {
        return (ViewObjectImpl) findViewObject("LovTNC");
    }

    /**
     * Container's getter for LovItmIdForCode.
     * @return LovItmIdForCode
     */
    public ViewObjectImpl getLovItmIdForCode() {
        return (ViewObjectImpl) findViewObject("LovItmIdForCode");
    }

    /**
     * Container's getter for LovCoaId.
     * @return LovCoaId
     */
    public ViewObjectImpl getLovCoaId() {
        return (ViewObjectImpl) findViewObject("LovCoaId");
    }

    /**
     * Container's getter for LovRfqTnc.
     * @return LovRfqTnc
     */
    public ViewObjectImpl getLovRfqTnc() {
        return (ViewObjectImpl) findViewObject("LovRfqTnc");
    }

    /**
     * Method to get suggested Item in AutoSuggest.
     * @param itmStr
     * @return
     */
    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        ArrayList<String> h = new ArrayList<String>();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        ViewObjectImpl autoSuggestVO = this.getLOVAutoSuggestItemsVO1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind", cld_id);
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", slocId);
        autoSuggestVO.setNamedWhereClauseParam("OrgIdbind", orgId);
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", hoOrg_id);
        autoSuggestVO.setNamedWhereClauseParam("ItmNmbind", itmStr);
        //  autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }


    /**
     * Container's getter for LOVAutoSuggestItemsVO1.
     * @return LOVAutoSuggestItemsVO1
     */
    public ViewObjectImpl getLOVAutoSuggestItemsVO1() {
        return (ViewObjectImpl) findViewObject("LOVAutoSuggestItemsVO1");
    }

    /**
     * Tax check is taxable Y or N
     * Item Quantity in Number itmQty
     * Item Price in Number itmPrice
     * Discount value as discValue
     * Discount Type A/P discType
     *
     * */

    public HashMap getTotalAndTaxableAmt(String taxCheck, Number itmQty, Number itmPrice, Number discValue,
                                         String discType) {

        // adfLog.info("taxcheck " + taxCheck + " itemqty " + itmQty + " itemprice " + itmPrice + " discvalue = " +
        //               discValue + " disctype = " + discType);
        HashMap Hm = new HashMap();
        Number ItemQuantity = new Number(0);
        Number ItemPrice = new Number(0);
        Number discountVal = new Number(0);
        String discountType = "A";
        String taxAfterbefore = "N";

        if (taxCheck != null)
            taxAfterbefore = taxCheck;
        if (itmQty != null)
            ItemQuantity = itmQty;
        if (itmPrice != null)
            ItemPrice = itmPrice;
        if (discValue != null)
            discountVal = discValue;
        if (discType != null)
            discountType = discType;
        Number itmPriceQty = (Number) ItemPrice.multiply(ItemQuantity).round(6);
        Number discAmount = new Number(0);
        Number Hundred = new Number(100);
        Number taxableAmt = new Number(0);
        Number totalAmt = new Number(0);

        if (discountType.equalsIgnoreCase("A")) {
            discAmount = discountVal;

        } else if (discountType.equalsIgnoreCase("P")) {
            discAmount = (Number) itmPriceQty.multiply(discountVal).divide(Hundred).round(6);
        }
        //   adfLog.info("Now discount amount is-------------  " + discAmount);

        if ("Y".equalsIgnoreCase(taxAfterbefore)) {
            taxableAmt = (Number) (((Number) itmPriceQty.minus(discAmount)).round(6));
            totalAmt = (Number) (((Number) itmPriceQty.minus(discAmount)).round(6));


        } else if ("N".equalsIgnoreCase(taxAfterbefore)) {
            taxableAmt = (Number) itmPriceQty.round(6);
            totalAmt = (Number) (((Number) itmPriceQty.minus(discAmount)).round(6));
        }
        Hm.put("TaxableAmount", taxableAmt);
        Hm.put("TotalAmt", totalAmt);
        Hm.put("DiscountAmt", discAmount);

        return Hm;
    }


    public void discountoverAll() {
        adfLog.info("discount over all start by per gate");
        Number zero = new Number(0);
        String discTypePo = "A";
        Number discValPo = zero;
        Number sumItmAmt = zero;
        Number totDiscAmtSum = zero;
        Number totaldiscSum = zero;
        Number diff = zero;
        //     Number discPerc=zero;
        Number currFactr = new Number(1);
        if (this.getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr") != null) {
            currFactr = (Number) this.getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr");
        }
        Row currPo = this.getMmQuot1().getCurrentRow();
        if (currPo.getAttribute("DiscType") != null)
            discTypePo = (String) currPo.getAttribute("DiscType");
        if (currPo.getAttribute("DiscVal") != null)
            discValPo = (Number) currPo.getAttribute("DiscVal");

        //        if (discValPo.compareTo(zero) == 1) {
        if (discValPo.compareTo(zero) >= 0) {
            System.out.println("Come in !!");
            RowSetIterator rsiItm = this.getMmQuotItm().createRowSetIterator(null);
            while (rsiItm.hasNext()) {
                Row r = rsiItm.next();
                if (r.getAttribute("TransItmAmtSp") != null) //Item amount without tax
                    sumItmAmt = sumItmAmt.add((Number) r.getAttribute("TransItmAmtSp"));
            }
            rsiItm.closeRowSetIterator();

            adfLog.info("total amount is " + sumItmAmt);
            Number amt = zero;
            Number itmAmtInPer = zero;
            Number discAmt = zero;
            Number discAmtItm = zero;
            RowSetIterator rsiItmPer = this.getMmQuotItm().createRowSetIterator(null);
            while (rsiItmPer.hasNext()) {
                amt = zero;
                discAmt = zero;
                itmAmtInPer = zero;
                discAmtItm = zero;
                Row r = rsiItmPer.next();

                if (r.getAttribute("TransItmAmtSp") != null) //Item amount without tax
                    amt = ((Number) r.getAttribute("TransItmAmtSp"));


                if (discTypePo.equalsIgnoreCase("A")) {
                    currPo.setAttribute("DiscAmtSp", discValPo);
                    itmAmtInPer =
                        new Number((amt.multiply(new Number(100)).divide(sumItmAmt)).round(6)); //Item amount in percent of total amount
                    adfLog.info("itmAmtInPer  ::::::::    " + itmAmtInPer);
                    discAmt =
                        new Number(((discValPo.multiply(itmAmtInPer)).divide(new Number(100))).round(6)); //discount amount for an item
                    adfLog.info("discAmt  ::::::::    " + discAmt);
                } else if (discTypePo.equalsIgnoreCase("P")) {
                    // discAmt =new Number(((amt.multiply(discValPo)).divide(new Number(100))).round(6)); //if discount in percent then calculate discount amount.

                    //   Number aftrAmt=sumItmAmt.multiply(discValPo).divide(new Number(100));
                    //Item amount in percent of total amount
                    discAmt =
                        new Number(((amt.multiply(discValPo)).divide(new Number(100))).round(6)); //if discount in percent then calculate discount amount.

                    adfLog.info("else itmAmtInPer  ::::::::    " + itmAmtInPer);
                    // discAmt =new Number(((aftrAmt.multiply(amt)).divide(sumItmAmt)).round(6)); //discount amount for an item
                    adfLog.info("else discAmt  ::::::::    " + discAmt);

                    currPo.setAttribute("DiscAmtSp", discAmt);
                }

                if (r.getAttribute("DiscAmtSp") != null)
                    discAmtItm = (Number) r.getAttribute("DiscAmtSp");

                r.setAttribute("TotDiscAmtSp", discAmtItm.add(discAmt));
                r.setAttribute("TotDiscAmtBs", ((Number) (discAmtItm.add(discAmt)).multiply(currFactr)).round(6));
                totDiscAmtSum = totDiscAmtSum.add((Number) r.getAttribute("TotDiscAmtSp"));

                adfLog.info("totDiscAmtSum    :::::::  " + totDiscAmtSum); //OverAllDiscTrans
            }
            rsiItmPer.closeRowSetIterator(); //TotalDiscAmt_trans
        }

    }


    public void discountAmountset(Number value, String type) {
        Row curritm = this.getMmQuotItm().getCurrentRow();
        Number qty = (Number) curritm.getAttribute("QuotQty");
        Number discval = (Number) curritm.getAttribute("DiscVal");
        Number price = (Number) curritm.getAttribute("ItmPrice");
        String discType = curritm.getAttribute("DiscType").toString();
        if (qty != null && value != null) {
            adfLog.info("current hm value is " + qty + " value " + value + "  disc val " + discval + " disc type " +
                        discType);
            if ("P".equalsIgnoreCase(type)) {
                HashMap hm = this.getTotalAndTaxableAmt("Y", qty, value, discval, discType);
                curritm.setAttribute("TotDiscAmtSp", (Number) hm.get("DiscountAmt"));
                adfLog.info("current discount amount going to set is " + hm.get("DiscountAmt") +
                            " current item amount is " + curritm.getAttribute("TransItmAmtSp"));
            } else if ("Q".equalsIgnoreCase(type)) {
                HashMap hm = this.getTotalAndTaxableAmt("Y", value, price, discval, discType);
                curritm.setAttribute("TotDiscAmtSp", (Number) hm.get("DiscountAmt"));
                curritm.setAttribute("DiscAmtSp", (Number) hm.get("DiscountAmt"));
                adfLog.info("current discount amount going to set is " + hm.get("DiscountAmt") +
                            " current item amount is " + curritm.getAttribute("TransItmAmtSp"));

            }
            discountoverAll();
            //setTransTotAmt((Number)hm.get("TotalAmt"));
            //setTaxableAmt((Number)hm.get("TaxableAmount"));
        }
    }

    public void itmWiseDiscAmt(Number value) {
        Number oldDisc = new Number(0);
        Number oldtotDisc = new Number(0);
        Number newDisc = new Number(0);
        Number newDiscVal = new Number(0);
        Number ordQty = new Number(0);
        Number itmPrice = new Number(0);
        String discType = "A";
        Number currFactr = new Number(1);
        if (this.getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr") != null) {
            currFactr = (Number) this.getMmQuot1().getCurrentRow().getAttribute("CurrConvFctr");
        }
        Row poItmRow = this.getMmQuotItm().getCurrentRow();
        if (poItmRow.getAttribute("ItmPrice") != null)
            itmPrice = (Number) poItmRow.getAttribute("ItmPrice");
        if (poItmRow.getAttribute("QuotQty") != null)
            ordQty = (Number) poItmRow.getAttribute("QuotQty");
        if (poItmRow.getAttribute("DiscType") != null)
            discType = (String) poItmRow.getAttribute("DiscType");
        if (poItmRow.getAttribute("DiscVal") != null)
            oldDisc = (Number) poItmRow.getAttribute("DiscVal");
        System.out.println("Discount value=" + oldDisc);
        if (poItmRow.getAttribute("TotDiscAmtSp") != null)
            oldtotDisc = (Number) poItmRow.getAttribute("TotDiscAmtSp");

        if (value != null)
            newDisc = (Number) value;
        //   if(discAmtValBind.getValue()!=null && discAmtValBind.getValue()!="")
        //    newDisc = (Number)valueChangeEvent.getNewValue();
        if (discType.equals("A")) {
            newDiscVal = newDisc;
        } else if (discType.equals("P")) {
            newDiscVal = new Number(((itmPrice.multiply(ordQty).multiply(newDisc)).divide(new Number(100))).round(6));
        }
        adfLog.info("new disc amt=" + newDiscVal);

        poItmRow.setAttribute("DiscAmtSp", newDiscVal);
        poItmRow.setAttribute("DiscAmtBs", (Number) newDiscVal.multiply(currFactr).round(6));
        // poItmRow.setAttribute("Discout_trans", newDiscVal);//TransDiscAmt
        // poItmRow.setAttribute("DiscVal",newDiscVal);
        poItmRow.setAttribute("TransItmAmtSp", (Number) itmPrice.multiply(ordQty).subtract(newDiscVal).round(6));

        adfLog.info("Disc Amt set=" + poItmRow.getAttribute("DiscAmtSp") + " and " +
                    poItmRow.getAttribute("Discout_trans"));
        RowSetIterator rowsetitr = this.getMmQuotItm().createRowSetIterator(null);
        while (rowsetitr.hasNext()) {
            Row r = rowsetitr.next();
            /*    if(r.getAttribute("DiscVal")!=null)
           r.setAttribute("TotDiscAmtSp",r.getAttribute("DiscVal"));
            else
                r.setAttribute("TotDiscAmtSp",new Number(0));   */
            if (r.getAttribute("DiscAmtSp") != null) {
                r.setAttribute("TotDiscAmtSp", r.getAttribute("DiscAmtSp"));
                r.setAttribute("TotDiscAmtBs", ((Number) r.getAttribute("DiscAmtSp")).multiply(currFactr).round(6));
                adfLog.info("total disc amt is " + r.getAttribute("TotDiscAmtSp") + " " + r.getAttribute("DiscAmtSp"));
            } else {
                r.setAttribute("TotDiscAmtSp", new Number(0));
                r.setAttribute("TotDiscAmtBs", new Number(0));
            }
            adfLog.info("total disc amt is " + r.getAttribute("TotDiscAmtSp") + " " + r.getAttribute("DiscAmtSp"));
        }
        rowsetitr.closeRowSetIterator();

        Number zero = new Number(0);
        String discTypePo = "A";
        Number discValPo = zero;
        Number sumItmAmt = zero;
        //     Number discPerc=zero;

        Row currPo = this.getMmQuot1().getCurrentRow();
        if (currPo.getAttribute("DiscType") != null)
            discTypePo = (String) currPo.getAttribute("DiscType");

        if (currPo.getAttribute("DiscVal") != null)
            discValPo = (Number) currPo.getAttribute("DiscVal");

        RowSetIterator rsiItm = this.getMmQuotItm().createRowSetIterator(null);
        while (rsiItm.hasNext()) {
            Row r = rsiItm.next();
            if (r.getAttribute("TransItmAmtSp") != null) //Item amount without tax
                sumItmAmt = sumItmAmt.add((Number) r.getAttribute("TransItmAmtSp"));
        }
        rsiItm.closeRowSetIterator();
        Number amt = zero;
        Number itmAmtInPer = zero;
        Number discAmt = zero;
        Number discAmtItm = zero;
        RowSetIterator rsiItmPer = this.getMmQuotItm().createRowSetIterator(null);
        while (rsiItmPer.hasNext()) {
            amt = zero;
            discAmt = zero;
            itmAmtInPer = zero;
            discAmtItm = zero;
            Row r = rsiItmPer.next();

            if (r.getAttribute("TransItmAmtSp") != null) //Item amount without tax
                amt = ((Number) r.getAttribute("TransItmAmtSp"));
            System.out.println("Item amount without tax=" + amt);
            if (discTypePo.equals("A") && sumItmAmt.compareTo(zero) != 0) {
                itmAmtInPer =
                    (Number) amt.multiply(new Number(100)).divide(sumItmAmt).round(6); //Item amount in percent of total amount
                discAmt =
                    new Number((discValPo.multiply(itmAmtInPer)).divide(new Number(100)).round(6)); //discount amount for an item
            } else {
                discAmt =
                    new Number((amt.multiply(discValPo)).divide(new Number(100)).round(6)); //if discount in percent then calculate discount amount.
                adfLog.info("Discamt=" + discAmt);
            }

            if (r.getAttribute("DiscAmtSp") != null)
                discAmtItm = (Number) r.getAttribute("DiscAmtSp");

            adfLog.info("disc amt itemwise=" + discAmtItm);
            r.setAttribute("TotDiscAmtSp", discAmtItm.add(discAmt));
            r.setAttribute("TotDiscAmtBs", ((Number) discAmtItm.add(discAmt).multiply(currFactr)).round(6));
            // System.out.println("total Disc amt sp=" + discAmtItm.add(discAmt));
            adfLog.info("total Disc amt sp=" + discAmtItm.add(discAmt));
        }
        rsiItmPer.closeRowSetIterator();
    }

    public Integer changeProspectToSupplier(String EoNm) {
        adfLog.info("Call convert function");

        //        FUNCTION     FN_EO_TYPE_CONV(
        //                                                                    P_CLD_ID VARCHAR2,
        //                                                                    P_SLOC_ID NUMBER,
        //                                                                    P_HO_ORG_ID VARCHAR2,
        //                                                                    P_ORG_ID VARCHAR2,
        //                                                                    P_EO_ID NUMBER,
        //                                                                    P_NEW_TYPE_ID NUMBER,
        //                                                                    P_CATG_ID NUMBER,
        //                                                                    P_USR_ID NUMBER,
        //                                                                    P_BEHAV VARCHAR2 DEFAULT 'C')

        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR1}"));
        ViewObjectImpl vo = this.getMmQuot1();
        Row curr = vo.getCurrentRow();
        Integer eoId = null;
        Integer eoType = null;
        this.getLovRfqEO().setNamedWhereClauseParam("BindEoNm", EoNm);
        this.getLovRfqEO().executeQuery();
        Row[] rr = this.getLovRfqEO().getFilteredRows("EoNm", EoNm);
        if (rr.length > 0) {
            if (rr[0].getAttribute("EoId") != null) {
                eoId = Integer.parseInt(rr[0].getAttribute("EoId").toString());
            }
            if (rr[0].getAttribute("EoType") != null) {
                eoType = Integer.parseInt(rr[0].getAttribute("EoType").toString());
            }
        }
        adfLog.info(eoId + "eo id  ");

        adfLog.info(eoType + "eoType ");

        if (eoType != null && eoId != null) {
            adfLog.info(curr.getAttribute("EoId") + "eoType " + eoType);
            if (eoType.compareTo(new Integer(82)) == 0) {


                Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "APP.FN_EO_TYPE_CONV (?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            cld_id, slocId, hoOrg_id, orgId, eoId, 69, null, p_user_id,
                                                            "C"
                }));
                adfLog.info("arg0  " + curr.getAttribute("OrgBsCurrId"));
                curr.setAttribute("CurrIdSp", eoId);
                curr.setAttribute("CurrIdSp", 73);
                // curr.setAttribute("CurrConvFctr", new Number(1));
                adfLog.info("ret   " + ret);
            }
        }

        return 1;
    }


    /**
     * Container's getter for LovRfqEO1.
     * @return LovRfqEO1
     */
    public ViewObjectImpl getLovRfqEO() {
        return (ViewObjectImpl) findViewObject("LovRfqEO");
    }

    /**
     * Container's getter for AFAttachVo1.
     * @return AFAttachVo1
     */
    public ViewObjectImpl getAFAttachVo1() {
        return (ViewObjectImpl) findViewObject("AFAttachVo1");
    }

    /**
     * Container's getter for MMQuotToAfAttachVL1.
     * @return MMQuotToAfAttachVL1
     */
    public ViewLinkImpl getMMQuotToAfAttachVL1() {
        return (ViewLinkImpl) findViewLink("MMQuotToAfAttachVL1");
    }

    public void filterRmkAndDocVo() {
        this.getAFAttachVo1().executeQuery();
        ViewObjectImpl aFRemkVo1 = this.getAFRemkVo1();

        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));

        aFRemkVo1.setNamedWhereClauseParam("CLD_ID", cld_id);
        aFRemkVo1.setNamedWhereClauseParam("DOC_ID", 18503);
        aFRemkVo1.setNamedWhereClauseParam("DOC_TYPE_ID", 0);
        aFRemkVo1.setNamedWhereClauseParam("ORG_ID", orgId);
        aFRemkVo1.setNamedWhereClauseParam("SLOC_ID", slocId);
        aFRemkVo1.setNamedWhereClauseParam("TXN_DOC_ID", this.getMmQuot1().getCurrentRow().getAttribute("DocId"));
        aFRemkVo1.executeQuery();
    }

    /**
     * Container's getter for AFRemkVo1.
     * @return AFRemkVo1
     */
    public ViewObjectImpl getAFRemkVo1() {
        return (ViewObjectImpl) findViewObject("AFRemkVo1");
    }

    /**
     * Container's getter for MmQuotAttch1.
     * @return MmQuotAttch1
     */
    public ViewObjectImpl getMmQuotAttch1() {
        return (ViewObjectImpl) findViewObject("MmQuotAttch1");
    }

    /**
     * Container's getter for FkMmQuotAttchVL1.
     * @return FkMmQuotAttchVL1
     */
    public ViewLinkImpl getFkMmQuotAttchVL1() {
        return (ViewLinkImpl) findViewLink("FkMmQuotAttchVL1");
    }

    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));

        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG1}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String path = getUpFilePath(slocId);
        System.out.println("path " + path);

        String fileId = getUpFileId(cld_id, slocId, hoOrg_id, orgId);
        // _log.info("fileId " + fileId+"prev file length "+fileNm.length());
        if (fileNm != null && fileNm.length() > 49) {
            fileNm = fileNm.substring(0, Math.min(fileNm.length(), 49));

        }

        //String upToNCharacters = s.substring(0, Math.min(s.length(), n));

        Row r = this.getMmQuotAttch1().createRow();


        //     r.setAttribute("HoOrgId", hoOrg_id);
        r.setAttribute("FlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("FlNm", fileId);
        r.setAttribute("FlPath", path + fileId + extn);

        getMmQuotAttch1().insertRow(r);

        this.getDBTransaction().postChanges(); // Used this for increasing fileId else throws too many object error

        return path + fileId;
    }

    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MM$QUOT$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_APP_GEN_FILE_ATTCH_ID at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    // showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            // System.out.println("ERROR IN CALLING FUNCTION FN_GET_APP_DOC_ATTACH_PATH at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //  showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }

    /**
     * Container's getter for PoHist1.
     * @return PoHist1
     */
    public ViewObjectImpl getPoHist1() {
        return (ViewObjectImpl) findViewObject("PoHist1");
    }

    /**
     * Container's getter for MMQuotItmToPoHistVL1.
     * @return MMQuotItmToPoHistVL1
     */
    public ViewLinkImpl getMMQuotItmToPoHistVL1() {
        return (ViewLinkImpl) findViewLink("MMQuotItmToPoHistVL1");
    }

    /**
     * Container's getter for MmQuotFlxVO1.
     * @return MmQuotFlxVO1
     */
    public ViewObjectImpl getMmQuotFlxVO1() {
        return (ViewObjectImpl) findViewObject("MmQuotFlxVO1");
    }

    /**
     * Container's getter for QuotToFlxVL1.
     * @return QuotToFlxVL1
     */
    public ViewLinkImpl getQuotToFlxVL1() {
        return (ViewLinkImpl) findViewLink("QuotToFlxVL1");
    }

    public String getFlexiFieldFilter() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        //  Object typ = this.getMmQuot1().getCurrentRow().getAttribute("PrCatg");
        System.out.println("in getFlexiFieldFilter method");
        ViewObjectImpl mmflex = this.getMmQuotFlxVO1();
        ViewObjectImpl flex = this.getAPpFlxFldInsrtVO1();
        flex.setNamedWhereClauseParam("bindCldId", cld_id);
        flex.setNamedWhereClauseParam("bindDocId", (Integer) 18503);
        flex.setNamedWhereClauseParam("bindTypeId", 0);
        flex.executeQuery();
        System.out.println("now row count: " + flex.getRowCount());
        //Integer count = flex.getRowCount();
        //System.out.println("total fields are" + count);
        //adfLog.info("no of field ::" + count);
        //adfLog.info("current row is " + this.getMmPrFlx().getCurrentRow());
        //System.out.println("current row is " + this.getMmPrFlx().getCurrentRow());
        //  RowSetIterator rr = flex.createRowSetIterator(null);
        Row[] rr = flex.getFilteredRows("DocId", new Integer(18503));

        System.out.println("lenth of row is" + rr.length);

        if (rr.length > 0) {
            for (Row r : rr) {
                adfLog.info("total no. of rows found " + r.getAttribute("FldId"));
                System.out.println("total no. of rows found " + r.getAttribute("FldId"));
                Row r1 = mmflex.createRow();
                r1.setAttribute("FldId", r.getAttribute("FldId"));
                mmflex.insertRow(r1);
            }
        }
        mmflex.executeQuery();
        //adfLog.info("count111::" + mmflex.getRowCount());
        return null;
    }

    /**
     * Container's getter for APpFlxFldInsrtVO1.
     * @return APpFlxFldInsrtVO1
     */
    public ViewObjectImpl getAPpFlxFldInsrtVO1() {
        return (ViewObjectImpl) findViewObject("APpFlxFldInsrtVO1");
    }

    /**
     * Container's getter for AppFlexFldVO1.
     * @return AppFlexFldVO1
     */
    public ViewObjectImpl getAppFlexFldVO1() {
        return (ViewObjectImpl) findViewObject("AppFlexFldVO1");
    }
}
