package appwfservice.model.module;


import appwfservice.model.module.common.WfServAM;
import appwfservice.model.views.AppWfAttchVOImpl;
import appwfservice.model.views.DualUserVOImpl;
import appwfservice.model.views.UserMailVOImpl;
import appwfservice.model.views.WfHistVOImpl;
import appwfservice.model.views.WfRmrkVOImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.FacesMessage;

import oracle.binding.OperationBinding;

import oracle.jbo.JboException;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 11 17:50:42 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class WfServAMImpl extends ApplicationModuleImpl implements WfServAM {
    /**
     * This is the default constructor (do not remove).
     */
    public WfServAMImpl() {
    }
    private static int NUMBER = Types.INTEGER;
    private static int VARCHAR = Types.VARCHAR;

    /**
     * Container's getter for UserLevel1.
     * @return UserLevel1
     */
    public ViewObjectImpl getUserLevel1() {
        return (ViewObjectImpl)findViewObject("UserLevel1");
    }

    /**
     * Container's getter for SelectForTop1.
     * @return SelectForTop1
     */
    public ViewObjectImpl getSelectForTop1() {
        return (ViewObjectImpl)findViewObject("SelectForTop1");
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object msg = valueExp.getValue(elContext);
        return msg;
    }

    public void refreshData() {
        
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String wf_id = resolvEl("#{pageFlowScope.WF_ID}").toString();
        Integer doc_id = Integer.parseInt(resolvEl("#{pageFlowScope.Doc_id}").toString());
        String doc_txn_id = resolvEl("#{pageFlowScope.Doc_txn_id}").toString();
        Integer doc_type_id=new Integer(0);
        if(resolvEl("#{pageFlowScope.Doc_type_id}")!=null)
           doc_type_id= Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString());
        System.out.println("All Parameters entered for Workflow are as=");
        
        System.out.println("CldId="+cld_id+" UserId="+usr_id+" OrgId="+org_id+" SlocId="+sloc_id+
                           " WfId="+wf_id+" DocNo="+doc_id+" DocType="+doc_txn_id+" Txn No="+doc_txn_id);

        
        String lvl =
            callStoredFunction(VARCHAR, "APP.WF_GET_USR_STG(?,?,?,?,?,?,?)", new Object[] { sloc_id, cld_id,
                                                                                                org_id, usr_id,
                                                                                                wf_id ,
                                                                                                doc_id,doc_type_id}).toString();
       System.out.println("Wf_get_usr_stg="+lvl);
        Integer level = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_NXT_LVL(?,?,?,?,?,?)", new Object[] { sloc_id, cld_id,
                                                                                                org_id, doc_id,
                                                                                                doc_txn_id, doc_type_id }).toString());
       System.out.println("wf_get_nxt_lvl="+level);
        String status =
            callStoredFunction(VARCHAR, "APP.WF_GET_STATUS(?,?,?,?,?,?)", new Object[] { sloc_id, cld_id,
                                                                                                org_id, doc_id,
                                                                                                doc_txn_id, doc_type_id }).toString();
       System.out.println("wf_get_status="+status);
        Integer initialUser = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_INT_USR(?,?,?,?,?,?)", new Object[] { sloc_id, cld_id,
                                                                                                org_id, doc_id,
                                                                                                doc_txn_id, doc_type_id }).toString());
       System.out.println("wf_get_int_usr="+initialUser);
        if(usr_id == initialUser)
        {
                ViewObjectImpl top = getTopDisable1();
                top.setWhereClause("value = 'D'"); 
                top.executeQuery();  
            
            }
        else
        {
                ViewObjectImpl top = getTopDisable1();
                top.setWhereClause("value = 'E'"); 
                top.executeQuery();
            
            }
          ViewObjectImpl wfLvl = getAppWfLvl1();
          wfLvl.setWhereClause("WF_ID = '"+wf_id+"' and WF_LVL = "+level+" and org_id = '"+org_id+"' and cld_id = '"+cld_id+"'"); 
          wfLvl.executeQuery();
          
       
          ViewObjectImpl usr = getLvlUserSelect1();
        System.out.println("rows in user Lov="+usr.getEstimatedRowCount());
          usr.setWhereClause("WF_ID = '"+wf_id+"' and WF_LVL = "+level+" and doc_id = "+doc_id+" and cld_id = '"+cld_id+"' and org_id = '"+org_id+"' and DOC_TYPE_ID="+doc_type_id);
          usr.executeQuery();
        System.out.println("rows in user Lov after setwhere="+usr.getEstimatedRowCount());
         
        System.out.println(lvl+"------lvl");

        ViewObjectImpl v = getUserLevel1();
        v.setWhereClause("lvl = '"+lvl+"'");
        v.executeQuery();
        
        if(status.equalsIgnoreCase("I") || status.equalsIgnoreCase("R"))
        {
         ViewObjectImpl rr =  getRRDsib1();
         rr.setWhereClause("value = 'I'");
         rr.executeQuery();
            }
        else
        {
                ViewObjectImpl rr =  getRRDsib1();
                rr.setWhereClause("value = 'R'");
                rr.executeQuery();
        
            }
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Container's getter for SelectForFI1.
     * @return SelectForFI1
     */
    public ViewObjectImpl getSelectForFI1() {
        return (ViewObjectImpl)findViewObject("SelectForFI1");
    }

    /**
     * Container's getter for WfLvl1.
     * @return WfLvl1
     */
    public ViewObjectImpl getWfLvl1() {
        return (ViewObjectImpl)findViewObject("WfLvl1");
    }

    /**
     * Container's getter for LvlUserSelect1.
     * @return LvlUserSelect1
     */
    public ViewObjectImpl getLvlUserSelect1() {
        return (ViewObjectImpl)findViewObject("LvlUserSelect1");
    }

    /**
     * Container's getter for DualUser1.
     * @return DualUser1
     */
    public ViewObjectImpl getDualUser1() {
        return (ViewObjectImpl)findViewObject("DualUser1");
    }

    /**
     * Container's getter for RRDsib1.
     * @return RRDsib1
     */
    public ViewObjectImpl getRRDsib1() {
        return (ViewObjectImpl)findViewObject("RRDsib1");
    }

    /**
     * Container's getter for AppWfLvl1.
     * @return AppWfLvl1
     */
    public ViewObjectImpl getAppWfLvl1() {
        return (ViewObjectImpl)findViewObject("AppWfLvl1");
    }

    /**
     * Container's getter for TopDisable1.
     * @return TopDisable1
     */
    public ViewObjectImpl getTopDisable1() {
        return (ViewObjectImpl)findViewObject("TopDisable1");
    }

    /**
     * Container's getter for WfRmrk1.
     * @return WfRmrk1
     */
    public WfRmrkVOImpl getWfRmrk1() {
        return (WfRmrkVOImpl)findViewObject("WfRmrk1");
    }

    /**
     * Container's getter for AppSeczUrs1.
     * @return AppSeczUrs1
     */
    public ViewObjectImpl getAppSeczUrs1() {
        return (ViewObjectImpl)findViewObject("AppSeczUrs1");
    }


    /**
     * Container's getter for AppWfAttchVO1.
     * @return AppWfAttchVO1
     */
    public ViewObjectImpl getAppWfAttchVO1() {
        return (ViewObjectImpl)findViewObject("AppWfAttchVO1");
    }

    /**
     * Container's getter for WfRmrk2.
     * @return WfRmrk2
     */
    public WfRmrkVOImpl getWfRmrk2() {
        return (WfRmrkVOImpl)findViewObject("WfRmrk2");
    }


    /**
     * Container's getter for AppSeczUrsVO1.
     * @return AppSeczUrsVO1
     */
    public ViewObjectImpl getAppSeczUrsVO1() {
        return (ViewObjectImpl)findViewObject("AppSeczUrsVO1");
    }

    /**
     * Container's getter for AppSeczUrsVO2.
     * @return AppSeczUrsVO2
     */
    public ViewObjectImpl getAppSeczUrsVO2() {
        return (ViewObjectImpl)findViewObject("AppSeczUrsVO2");
    }

    /**
     * Container's getter for WfHist1.
     * @return WfHist1
     */
    public WfHistVOImpl getWfHist1() {
        return (WfHistVOImpl)findViewObject("WfHist1");
    }
    
    
    public boolean checkIfUserIsAuthorisedToApprove()  {
        try {
            Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String wf_id = resolvEl("#{pageFlowScope.WF_ID}").toString();
            Integer doc_id = Integer.parseInt(resolvEl("#{pageFlowScope.Doc_id}").toString());
            String doc_txn_id = resolvEl("#{pageFlowScope.Doc_txn_id}").toString();
            //   Integer doc_type_id=Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString());
            Integer doc_type_id = new Integer(0);
            if (resolvEl("#{pageFlowScope.Doc_type_id}") != null)
                doc_type_id = Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString());
            oracle.jbo.domain.Number amount = new oracle.jbo.domain.Number(0);

            //#{pageFlowScope.Amount}
            String lvl = "";
            //FUNCTION CAN_INT_USR_APRV (p_slocid number , p_orgid varchar2, p_cldid varchar2, P_DOCID NUMBER, P_USRID number, P_DOC_AMT NUMBER)
            try {
                amount = new oracle.jbo.domain.Number(resolvEl("#{pageFlowScope.Amount}").toString());
            } catch (SQLException e) {
                System.out.println("Error on amount=" + e);
            }
            System.out.println("Amount :" + amount);
            lvl = callStoredFunction(VARCHAR, "APP.WF_CAN_INT_USR_APRV(?,?,?,?,?,?,?)", new Object[] {
                                     sloc_id, org_id, cld_id, doc_id, usr_id, amount, doc_type_id
            }).toString();

            System.out.println("level is : " + lvl);
            if (lvl.equalsIgnoreCase("Y")) {
                System.out.println("Returned true");
                return true;
            } else {
                return false;
            }
        } catch (NumberFormatException nfe) {
            // TODO: Add catch code
            nfe.printStackTrace();
            return false;
        }
        
    }

    /**
     * Container's getter for LovRevertUsr.
     * @return LovRevertUsr
     */
    public ViewObjectImpl getLovRevertUsr() {
        return (ViewObjectImpl)findViewObject("LovRevertUsr");
    }
      
      
       public void setbindValForRevertUsr(Integer slocBind,String cldBind,String orgBind,Integer docBind,Integer docTypeBind,String txnBind)
       {
       
    }

    /**
     * Container's getter for UserMail1.
     * @return UserMail1
     */
    public UserMailVOImpl getUserMail1() {
        return (UserMailVOImpl) findViewObject("UserMail1");
    }
    
    public void insertTxnAsApprove (){
        String action = "A";
        WfServAMImpl am = (WfServAMImpl)resolvElDC("WfServAMDataControl");
        String remark = null;
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String wf_id = resolvEl("#{pageFlowScope.WF_ID}").toString();
        Integer doc_id = Integer.parseInt(resolvEl("#{pageFlowScope.Doc_id}").toString());
        Integer doc_type_id =new Integer(0);
        if(resolvEl("#{pageFlowScope.Doc_type_id}")!=null)
            doc_type_id=Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString());
        String doc_txn_id = resolvEl("#{pageFlowScope.Doc_txn_id}").toString();
        oracle.jbo.domain.Number amount = null;
        try {
            amount = new oracle.jbo.domain.Number(resolvEl("#{pageFlowScope.Amount}").toString());
        } catch (SQLException e) {
            
        }

        Integer level =
            Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { sloc_id,
                                                                                                                    cld_id,
                                                                                                                    org_id,
                                                                                                                    usr_id,
                                                                                                                    wf_id,
                                                                                                                    doc_id, doc_type_id }).toString());
        Integer usr_id_to=usr_id;
        Integer lvl_to=level;
        
        try{
            
            String res =
                (callStoredFunction(Types.VARCHAR, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                                    new Object[] { sloc_id, cld_id, org_id, doc_id,doc_type_id, wf_id, doc_txn_id,
                                                                   usr_id, usr_id_to, 0, 0, "A", remark,amount ,
                                                                   "P" }).toString());
            
            
           
       
            this.getDBTransaction().commit();
        }catch(Exception e){
            e.printStackTrace();
            FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR,"Error ","Don't Ignore it.Please contact ESS"));
        }
        
        return;
    }
}
