package mmstockadjustment.model.service;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmstockadjustment.model.view.ItmTrnsVOImpl;
import mmstockadjustment.model.view.SrchLotVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 02 18:09:08 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMStockAdjustmentAMImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */

    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MMStockAdjustmentAMImpl.class);

    public MMStockAdjustmentAMImpl() {
    }

    /**
     * Container's getter for ITM1.
     * @return ITM1
     */
    public ViewObjectImpl getITM1() {
        return (ViewObjectImpl) findViewObject("ITM1");
    }

    /**
     * Container's getter for ORG1.
     * @return ORG1
     */
    public ViewObjectImpl getORG1() {
        return (ViewObjectImpl) findViewObject("ORG1");
    }


    /**
     * Container's getter for STKADJT1.
     * @return STKADJT1
     */
    public ViewObjectImpl getSTKADJT1() {
        return (ViewObjectImpl) findViewObject("STKADJT1");
    }

    /**
     * Container's getter for UOM1.
     * @return UOM1
     */
    public ViewObjectImpl getUOM1() {
        return (ViewObjectImpl) findViewObject("UOM1");
    }

    /**
     * Container's getter for WH1.
     * @return WH1
     */
    public ViewObjectImpl getWH1() {
        return (ViewObjectImpl) findViewObject("WH1");
    }

    /**
     * Container's getter for StckStat1.
     * @return StckStat1
     */
    public ViewObjectImpl getStckStat1() {
        return (ViewObjectImpl) findViewObject("StckStat1");
    }

    /**
     * Container's getter for STCKTYPE1.
     * @return STCKTYPE1
     */
    public ViewObjectImpl getSTCKTYPE1() {
        return (ViewObjectImpl) findViewObject("STCKTYPE1");
    }


    public Integer getFYId() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Timestamp date = (Timestamp) this.getSTKADJT1().getCurrentRow().getAttribute("PrDt");
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     cldId, orgId, date
        }));
        ViewObjectImpl ge = this.getSTKADJT1();
        if (fyId != null) {
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        }

        return fyId;
    }

    public static Object evaluateEL(String el) {
        FacesContext facesContext = FacesContext.getCurrentInstance();
        ELContext elContext = facesContext.getELContext();
        ExpressionFactory expressionFactory = facesContext.getApplication().getExpressionFactory();
        ValueExpression exp = expressionFactory.createValueExpression(elContext, el, Object.class);
        return exp.getValue(elContext);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public void filterAdjstmnt(String cldId, Integer slocId, String orgId, String docId) {
        ViewObjectImpl vo = this.getSTKADJT1();
        ViewCriteria vc = vo.getViewCriteria("STKADJTVOCriteria2");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("DocIdBind", docId);
        vo.executeQuery();


    }

    /**
     * Container's getter for STKTAKE1.
     * @return STKTAKE1
     */
    public ViewObjectImpl getSTKTAKE1() {
        return (ViewObjectImpl) findViewObject("STKTAKE1");
    }


    /**
     * Container's getter for STKADJTITM2.
     * @return STKADJTITM2
     */
    public ViewObjectImpl getSTKADJTITM2() {
        return (ViewObjectImpl) findViewObject("STKADJTITM2");
    }

    /**
     * Container's getter for STKITMVL1.
     * @return STKITMVL1
     */
    public ViewLinkImpl getSTKITMVL1() {
        return (ViewLinkImpl) findViewLink("STKITMVL1");
    }


    public void addItems() {
        ViewObjectImpl voStk = getSTKADJT1();
        ViewObjectImpl voStkItm = getSTKADJTITM2();
        voStkItm.getCurrentRow().setAttribute("WhId", voStk.getCurrentRow().getAttribute("WhId"));
        voStkItm.getCurrentRow().setAttribute("DocId", voStk.getCurrentRow().getAttribute("DocId"));
    }

    public void rollBackItemVo() {
        ViewObjectImpl voStkItm = getSTKADJTITM2();
        voStkItm.getDBTransaction().rollback();
    }


    public boolean copyAllItemByGroup() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        boolean flag = false;
        String grpId = (String) this.getGroup1().getCurrentRow().getAttribute("ItemGrpId");

        ViewObjectImpl voStkItm = getSTKADJTITM2();
        ViewObjectImpl voItm = getITM1();
        ViewObjectImpl voStk = getSTKADJT1();
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        Integer fyId = (Integer) voStk.getCurrentRow().getAttribute("FyId");

        RowQualifier rq = new RowQualifier(voItm);
        rq.setWhereClause("GrpId = '" + grpId + "' AND OrgId = '" + orgId + "' AND CldId = '" + cldId +
                          "' AND SlocId = " + slocId + " AND WhId = '" + whId + "' AND FyId = " + fyId + "");
        Row rows[] = voItm.getFilteredRows(rq);

        if (rows != null && rows.length > 0) {
            for (Row row : rows) {

                rq = new RowQualifier(voStkItm);
                rq.setWhereClause("DocId = '" + docId + "' AND OrgId = '" + orgId + "' AND CldId = '" + cldId +
                                  "' AND SlocId = " + slocId + " AND WhId = '" + whId + "' AND ItmId = '" +
                                  row.getAttribute("ItmId").toString() + "'");
                Row exists[] = voStkItm.getFilteredRows(rq);

                // insert row if and only if, it is not exist in StkAdjtItmVo.
                if (exists != null && exists.length == 0) {
                    Row newRow = voStkItm.createRow();
                    newRow.setAttribute("WhId", whId);
                    newRow.setAttribute("DocId", docId);
                    newRow.setAttribute("ItmId", row.getAttribute("ItmId").toString());
                    newRow.setAttribute("ItmUom", row.getAttribute("UomBasic"));
                    newRow.setAttribute("ItemGrpId", grpId);
                    voStkItm.insertRow(newRow);

                    flag = true;
                }
            }
        }
        voStkItm.executeQuery();
        adfLog.info("------------------------copyall method------" + flag);
        return flag;
    }


    /**
     * Container's getter for ItmGrp1.
     * @return ItmGrp1
     */
    public ViewObjectImpl getItmGrp1() {
        return (ViewObjectImpl) findViewObject("ItmGrp1");
    }


    /*   public void copyLotBinSrByItemId()
    {
        String orgId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId=(String)evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId =Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());




        ViewObject voStkItm = getSTKADJTITM2();
        ViewObject voItm = getITM1();
        ViewObject voStk = getSTKADJT1();
      //  ViewObject voLot = getMmStkLotSumm1();
        ViewObject voItmLot =getSTKADJTLOT1();
        ViewObject vobin =getSTKADJTBIN1();
        ViewObjectImpl voItmSumm = getMmStkSummItm1();




        if(voItmLot.getRowCount()>0)    //If any Row Exist in Vo.Clear View Object
        {
            Row norows[] = voItmLot.getAllRowsInRange();
            if(norows!=null && norows.length > 0)
            { for(Row row:norows)
                {
                   voItmLot.setCurrentRow(row);
                   voItmLot.removeCurrentRow();
               }
            }
        }

        String ItemId = (String)voStkItm.getCurrentRow().getAttribute("ItmId");
        String whId= (String)voStk.getCurrentRow().getAttribute("WhId");
        String docId =(String)voStk.getCurrentRow().getAttribute("DocId");


        voItmLot.executeQuery();
        ViewCriteria vc=voItmSumm.getViewCriteria("MmStkSummItmVOCriteria");
        voItmSumm.applyViewCriteria(vc);

        voItmSumm.setNamedWhereClauseParam("bindOrgId1", orgId);
        voItmSumm.setNamedWhereClauseParam("bindCldId1", cldId);
        voItmSumm.setNamedWhereClauseParam("bindSlocId1", slocId);
        voItmSumm.setNamedWhereClauseParam("bindItemId1", ItemId);
        voItmSumm.setNamedWhereClauseParam("bindWhId1", whId);
        voItmSumm.executeQuery();

    }
*/

    public void createLot() {
        ViewObject voStkItm = getSTKADJTITM2();
        ViewObject voItm = getITM1();
        ViewObject voStk = getSTKADJT1();
        ViewObject voItmLot = getSTKADJTLOT1();
        ViewObjectImpl votrns = gettransLot1();

        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String ItemId = (String) voStkItm.getCurrentRow().getAttribute("ItmId");
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");

        Row newRow = voItmLot.createRow();
        voItmLot.insertRow(newRow);
        newRow.setAttribute("OrgId", orgId);
        newRow.setAttribute("CldId", cldId);
        newRow.setAttribute("SlocId", slocId);
        newRow.setAttribute("ItmId", votrns.getCurrentRow().getAttribute("ItemId"));
        newRow.setAttribute("LotId", votrns.getCurrentRow().getAttribute("LotId"));
        newRow.setAttribute("WhId", whId);
        newRow.setAttribute("DocId", docId);
        newRow.setAttribute("AdjtQty", votrns.getCurrentRow().getAttribute("AdjtQty"));
        voItmLot.executeQuery();
    }

    /**
     * Container's getter for BinSumm1.
     * @return BinSumm1
     */
    public ViewObjectImpl getBinSumm1() {
        return (ViewObjectImpl) findViewObject("BinSumm1");
    }


    /**
     * Container's getter for transLot1.
     * @return transLot1
     */
    public ViewObjectImpl gettransLot1() {
        return (ViewObjectImpl) findViewObject("transLot1");
    }


    /*    public void updateBinByLot()
    {    ViewObject voItmLot =getSTKADJTLOT1();
        ViewObjectImpl vobin =getMmStkSummBin1();
        ViewCriteria vc=vobin.getViewCriteria("MmStkSummBinVOCriteria");
        vobin.applyViewCriteria(vc);

        vobin.setNamedWhereClauseParam("bindItemId", voItmLot.getCurrentRow().getAttribute("ItmId"));
        vobin.setNamedWhereClauseParam("bindLotId", voItmLot.getCurrentRow().getAttribute("LotId"));
        vobin.executeQuery();
    }


    public Integer updateLotbyItem()
    {   ViewObject voItmLot =getSTKADJTLOT1();
        ViewObjectImpl vobin =getMmStkSummBin1();
        ViewCriteria vc=vobin.getViewCriteria("MmStkSummLotVOCriteria");
        vobin.applyViewCriteria(vc);

        vobin.setNamedWhereClauseParam("bindItemId", voItmLot.getCurrentRow().getAttribute("ItmId"));
        vobin.setNamedWhereClauseParam("bindLotId", voItmLot.getCurrentRow().getAttribute("LotId"));
        vobin.executeQuery();
        return -1 ;
    }

  */

    public String findFacet() {
        ViewObjectImpl votrns = gettransLot1();
        ViewObject voStk = getSTKADJT1();
        Row currRow = votrns.getCurrentRow();
        String isBinAval = (String) evaluateEL("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        String Serial = (String) currRow.getAttribute("ItemId");

        String auth = (String) voStk.getCurrentRow().getAttribute("AuthStat"); //In case Adjtment Approved
        if (auth.equals("Y")) {
            return "ViewFacet";
        }

        if (Serial == null) {
            return "defaultFacet";
        }

        if (isItemSerialized(Serial)) {
            if (isBinAval.equals("Y")) {
                return "SRFacet";
            } else {
                return "LotSrFacet";
            }
        }

        else {
            if (isBinAval.equals("Y")) {
                return "BinFacet";
            }

            else {
                return "LotFacet";
            }
        }
    }


    public boolean isItemSerialized(String ItemId) {

        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        Integer fyId = (Integer) voStk.getCurrentRow().getAttribute("FyId");

        ViewObjectImpl voItm = getITM1();
        RowQualifier rq = new RowQualifier(voItm);
        rq.setWhereClause("ItmId = '" + ItemId + "' AND CldId = '" + cldId + "' AND FyId = " + fyId + " AND OrgId = '" +
                          orgId + "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
        Row rows[] = voItm.getFilteredRows(rq);

        if (rows != null && rows.length == 1) {
            String flag = (String) rows[0].getAttribute("SerializedFlg");
            if (flag.equals("Y")) {
                return true;
            } else {
                return false;
            }
        }

        return false; //default return value when Item not exists in ItemVo.
    }


    public boolean isItemSurplus(String itemId) {
        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voStkItm = getSTKADJTITM2();
        RowQualifier rq = new RowQualifier(voStkItm);
        rq.setWhereClause("ItmId = '" + itemId + "' AND CldId = '" + cldId + "' AND DocId = '" + docId +
                          "' AND OrgId = '" + orgId + "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
        Row rows[] = voStkItm.getFilteredRows(rq);

        if (rows != null && rows.length == 1) {
            if (rows[0].getAttribute("AdjtType").equals("A")) {
                return true;
            } else {
                return false;
            }
        }
        return false;
    }


    public void executeViewObject(String voName) {

        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");

        if (voName.equals("LotFacet")) {
            ViewObjectImpl votrns = gettransLot1();
            Row currRow = votrns.getCurrentRow();
            ViewObjectImpl voSrchLot = (ViewObjectImpl) findViewObject("SrchLot1");
            ViewCriteria vc = voSrchLot.getViewCriteria("SrchLotVOCriteria");
            voSrchLot.applyViewCriteria(vc);
            voSrchLot.setNamedWhereClauseParam("bindOrgId", orgId);
            voSrchLot.setNamedWhereClauseParam("bindCldId", cldId);
            voSrchLot.setNamedWhereClauseParam("bindSlocId", slocId);
            voSrchLot.setNamedWhereClauseParam("bindWhId", whId);
            voSrchLot.setNamedWhereClauseParam("bindItmId", currRow.getAttribute("ItemId"));
            voSrchLot.setNamedWhereClauseParam("bindLotId", currRow.getAttribute("LotId"));
            voSrchLot.executeQuery();

        } else if (voName.equals("SRFacet")) {
            ViewObjectImpl votrns = gettransLot1();
            Row currRow = votrns.getCurrentRow();
            ViewObjectImpl voSrchSr = (ViewObjectImpl) findViewObject("SrchSr1");
            ViewCriteria vc = voSrchSr.getViewCriteria("SrchSrVOCriteria");
            voSrchSr.applyViewCriteria(vc);
            voSrchSr.setNamedWhereClauseParam("bindOrgId", orgId);
            voSrchSr.setNamedWhereClauseParam("bindCldId", cldId);
            voSrchSr.setNamedWhereClauseParam("bindSlocId", slocId);
            voSrchSr.setNamedWhereClauseParam("bindWhId", whId);
            voSrchSr.setNamedWhereClauseParam("bindSrId", currRow.getAttribute("SrId"));
            voSrchSr.setNamedWhereClauseParam("bindItemId", currRow.getAttribute("ItemId"));
            voSrchSr.setNamedWhereClauseParam("bindLotId", currRow.getAttribute("LotId"));
            voSrchSr.setNamedWhereClauseParam("bindBinId", currRow.getAttribute("BinId"));


            if (isItemSurplus((String) currRow.getAttribute("ItemId"))) {
                voSrchSr.setNamedWhereClauseParam("bindTotStk", 0);
            }

            else {
                voSrchSr.setNamedWhereClauseParam("bindTotStk", 1);
            }
            voSrchSr.executeQuery();

        } else if (voName.equals("BinFacet")) {
            ViewObjectImpl votrns = gettransLot1();
            Row currRow = votrns.getCurrentRow();
            ViewObjectImpl voSrchSr = (ViewObjectImpl) findViewObject("SrchBinVo1");
            ViewCriteria vc = voSrchSr.getViewCriteria("SrchBinVoCriteria");
            voSrchSr.applyViewCriteria(vc);
            voSrchSr.setNamedWhereClauseParam("bindOrgId", orgId);
            voSrchSr.setNamedWhereClauseParam("bindCldId", cldId);
            voSrchSr.setNamedWhereClauseParam("bindSlocId", slocId);
            voSrchSr.setNamedWhereClauseParam("bindWhId", whId);
            voSrchSr.setNamedWhereClauseParam("bindItemId", currRow.getAttribute("ItemId"));
            voSrchSr.setNamedWhereClauseParam("bindLotId", currRow.getAttribute("LotId"));
            voSrchSr.setNamedWhereClauseParam("bindBinId", currRow.getAttribute("BinId"));
            voSrchSr.executeQuery();
        }

        else if (voName.equals("LotSrFacet")) {
            ViewObjectImpl votrns = gettransLot1();
            Row currRow = votrns.getCurrentRow();
            ViewObjectImpl voSrchSr = (ViewObjectImpl) findViewObject("SrchSrLot1");
            ViewCriteria vc = voSrchSr.getViewCriteria("SrchSrLotVOCriteria");
            voSrchSr.applyViewCriteria(vc);
            voSrchSr.setNamedWhereClauseParam("bindOrgId", orgId);
            voSrchSr.setNamedWhereClauseParam("bindCldId", cldId);
            voSrchSr.setNamedWhereClauseParam("bindSlocId", slocId);
            voSrchSr.setNamedWhereClauseParam("bindWhId", whId);
            voSrchSr.setNamedWhereClauseParam("bindSrId", currRow.getAttribute("SrId"));
            voSrchSr.setNamedWhereClauseParam("bindItemId", currRow.getAttribute("ItemId"));
            voSrchSr.setNamedWhereClauseParam("bindLotId", currRow.getAttribute("LotId"));

            if (isItemSurplus((String) currRow.getAttribute("ItemId"))) {
                voSrchSr.setNamedWhereClauseParam("bindTotStk", 0);
            }

            else {
                voSrchSr.setNamedWhereClauseParam("bindTotStk", 1);
            }
            voSrchSr.executeQuery();

        }

    }


    /**
     * Container's getter for SrchLot1.
     * @return SrchLot1
     */
    public SrchLotVOImpl getSrchLot1() {
        return (SrchLotVOImpl) findViewObject("SrchLot1");
    }


    //----------------------------------------------------------------------LOT---------------------------------------------------------------------------

    public void addRowInAdjstLot(String oldValue, String newValue) {
        ViewObjectImpl voItmLot = getSTKADJTLOT1();
        ViewObject voStk = getSTKADJT1();
        ViewObjectImpl votrns = gettransLot1();
        ViewObjectImpl trnsVo = getSrchLot1();
        Row newRow = null;
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        adfLog.info("old vale " + oldValue + " new Value " + newValue);
        if (newValue == null) {
            newValue = "0";
        }

        if (oldValue == null && !newValue.equals("0")) {
            adfLog.info("arg0  VO CREATE  ");
            Row row = voItmLot.createRow();
            row.setAttribute("OrgId", orgId);
            row.setAttribute("CldId", cldId);
            row.setAttribute("SlocId", slocId);
            row.setAttribute("ItmId", trnsVo.getCurrentRow().getAttribute("ItmId"));
            row.setAttribute("WhId", whId);
            row.setAttribute("DocId", docId);
            row.setAttribute("LotId", trnsVo.getCurrentRow().getAttribute("LotId"));
            row.setAttribute("AdjtQty", new BigDecimal(newValue));
            newRow = getAdjustItmRow(trnsVo.getCurrentRow().getAttribute("ItmId").toString());
            row.setAttribute("AdjtType", newRow.getAttribute("AdjtType"));
            row.setAttribute("ItmUom",
                             getAdjustItmRow(trnsVo.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("ItmUom"));
            adfLog.info("unit for " +
                        getAdjustItmRow(trnsVo.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("ItmUom"));
            voItmLot.insertRow(row);
        }

        else {

            adfLog.info("  ellse part   ");
            voItmLot = getSTKADJTLOT1();
            trnsVo = getSrchLot1();
            Row rows[] =
                voItmLot.getFilteredRows("LotId",
                                         trnsVo.getCurrentRow().getAttribute("LotId")); // Make RowQualifier to set more Parameters.

            if (rows != null && rows.length == 1) {
                rows[0].setAttribute("AdjtQty", new BigDecimal(newValue));
                newRow = getAdjustItmRow(rows[0].getAttribute("ItmId").toString());
                rows[0].setAttribute("AdjtType", newRow.getAttribute("AdjtType"));
            }

        }


        if (!checkItemExists(trnsVo.getCurrentRow().getAttribute("ItmId").toString())) {
            adfLog.info(" inside not checkm ");

            ViewObjectImpl userSrSumVo = getShowSrSum1();
            Row currRow = userSrSumVo.createRow();
            currRow.setAttribute("ItmId", trnsVo.getCurrentRow().getAttribute("ItmId"));
            currRow.setAttribute("AdjType", newRow.getAttribute("AdjtType"));
            currRow.setAttribute("AdjQty", trnsVo.getCurrentRow().getAttribute("AdjtQty"));
            currRow.setAttribute("requiredQty",
                                 getAdjustItmRow(trnsVo.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("AdjtQty"));
            currRow.setAttribute("VoName", "STKADJTLOT1");
            userSrSumVo.insertRow(currRow);
        } else {

            adfLog.info(" inside not else part ");
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            RowQualifier rq = new RowQualifier(userSrSumVo);
            rq.setWhereClause("ItmId = '" + trnsVo.getCurrentRow().getAttribute("ItmId").toString() + "'");
            Row rows[] = userSrSumVo.getFilteredRows(rq);

            if (rows != null && rows.length == 1) {
                rq = new RowQualifier(voItmLot);
                rq.setWhereClause("ItmId = '" + trnsVo.getCurrentRow().getAttribute("ItmId").toString() +
                                  "' AND CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                                  "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
                Row r[] = voItmLot.getFilteredRows(rq);
                BigDecimal sum = new BigDecimal(0);
                if (r != null) {
                    for (Row row : r) {
                        if (row.getAttribute("AdjtQty") != null) {
                            sum = sum.add(new BigDecimal(Double.valueOf(row.getAttribute("AdjtQty").toString())));
                        }
                    }
                }
                rows[0].setAttribute("AdjQty", sum);
            }
        }
    }

    //----------------------------------------------------------------------LOT END--------------------------------------------------------------------

    //----------------------------------------------------------------------BIN--------------------------------------------------------------------

    public void addRowInAdjstBin(String oldValue, String newValue) {
        ViewObjectImpl voItmBin = getSTKADJTBIN1();
        ViewObject voStk = getSTKADJT1();
        ViewObjectImpl votrns = gettransLot1();
        ViewObjectImpl trnsBinVo = getSrchBinVo1();
        Row newRow = null;
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");

        if (newValue == null) {
            newValue = "0";
        }

        if (oldValue == null && !newValue.equals("0")) {
            Row row = voItmBin.createRow();
            row.setAttribute("OrgId", orgId);
            row.setAttribute("CldId", cldId);
            row.setAttribute("SlocId", slocId);
            row.setAttribute("ItmId", trnsBinVo.getCurrentRow().getAttribute("ItmId"));
            row.setAttribute("WhId", whId);
            row.setAttribute("DocId", docId);
            row.setAttribute("LotId", trnsBinVo.getCurrentRow().getAttribute("LotId"));
            row.setAttribute("BinId", trnsBinVo.getCurrentRow().getAttribute("BinId"));
            row.setAttribute("AdjtQty", new BigDecimal(newValue));
            newRow = getAdjustItmRow(trnsBinVo.getCurrentRow().getAttribute("ItmId").toString());
            row.setAttribute("AdjtType", newRow.getAttribute("AdjtType"));
            row.setAttribute("ItmUom",
                             getAdjustItmRow(trnsBinVo.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("ItmUom"));
            voItmBin.insertRow(row);
        }

        else {
            voItmBin = getSTKADJTBIN1();
            trnsBinVo = getSrchBinVo1();

            RowQualifier rq = new RowQualifier(voItmBin);
            rq.setWhereClause("ItmId = '" + trnsBinVo.getCurrentRow().getAttribute("ItmId").toString() +
                              "' AND LotId = '" + trnsBinVo.getCurrentRow().getAttribute("LotId") + "' AND BinId = '" +
                              trnsBinVo.getCurrentRow().getAttribute("BinId") + "'");
            Row rows[] = voItmBin.getFilteredRows(rq);
            if (rows != null && rows.length == 1) {
                rows[0].setAttribute("AdjtQty", new BigDecimal(newValue));
                newRow = getAdjustItmRow(rows[0].getAttribute("ItmId").toString());
                rows[0].setAttribute("AdjtType", newRow.getAttribute("AdjtType"));
            }

        }


        if (!checkItemExists(trnsBinVo.getCurrentRow().getAttribute("ItmId").toString())) {
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            Row currRow = userSrSumVo.createRow();
            currRow.setAttribute("ItmId", trnsBinVo.getCurrentRow().getAttribute("ItmId"));
            currRow.setAttribute("AdjType", newRow.getAttribute("AdjtType"));
            currRow.setAttribute("AdjQty", trnsBinVo.getCurrentRow().getAttribute("AdjtQty"));
            currRow.setAttribute("requiredQty",
                                 getAdjustItmRow(trnsBinVo.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("AdjtQty"));
            currRow.setAttribute("VoName", "STKADJTBIN1");
            userSrSumVo.insertRow(currRow);
        } else {
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            RowQualifier rq = new RowQualifier(userSrSumVo);
            rq.setWhereClause("ItmId = '" + trnsBinVo.getCurrentRow().getAttribute("ItmId").toString() + "'");
            Row rows[] = userSrSumVo.getFilteredRows(rq);

            if (rows != null && rows.length == 1) {
                rq = new RowQualifier(voItmBin);
                rq.setWhereClause("ItmId = '" + trnsBinVo.getCurrentRow().getAttribute("ItmId").toString() +
                                  "' AND CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                                  "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
                Row r[] = voItmBin.getFilteredRows(rq);
                BigDecimal sum = new BigDecimal(0);
                if (r != null) {
                    for (Row row : r) {
                        if (row.getAttribute("AdjtQty") != null) {
                            sum = sum.add(new BigDecimal(Double.valueOf(row.getAttribute("AdjtQty").toString())));
                        }
                    }
                }
                rows[0].setAttribute("AdjQty", sum);
            }
        }


    }


    //---------------------------------------------------------------------------BIN END-------------------------------------------------------------------------


    // This Method Add Row in StkAsjtSrVo Whenever User Checked on Check Box.--------------------- SR------------------------------------------------------------

    public void addRowInAdjtSr() {
        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voStkAdjSr = getSTKADJTSR1();
        ViewObjectImpl voSrchtrns = getSrchSr1();

        Row row = voStkAdjSr.createRow();
        row.setAttribute("OrgId", orgId);
        row.setAttribute("CldId", cldId);
        row.setAttribute("SlocId", slocId);
        row.setAttribute("WhId", whId);
        row.setAttribute("DocId", docId);
        row.setAttribute("ItmId", voSrchtrns.getCurrentRow().getAttribute("ItmId"));
        row.setAttribute("ItmUom",
                         getAdjustItmRow(voSrchtrns.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("ItmUom"));
        row.setAttribute("LotId", voSrchtrns.getCurrentRow().getAttribute("LotId"));
        row.setAttribute("BinId", voSrchtrns.getCurrentRow().getAttribute("BinId"));
        row.setAttribute("SrNo", voSrchtrns.getCurrentRow().getAttribute("SrNo"));

        Row newRow = getAdjustItmRow(voSrchtrns.getCurrentRow().getAttribute("ItmId").toString());
        row.setAttribute("AdjtType", newRow.getAttribute("AdjtType"));
        row.setAttribute("AdjtQty", new Integer(1));
        voStkAdjSr.insertRow(row);


        if (!checkItemExists(voSrchtrns.getCurrentRow().getAttribute("ItmId").toString())) {
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            Row currRow = userSrSumVo.createRow();
            currRow.setAttribute("ItmId", voSrchtrns.getCurrentRow().getAttribute("ItmId"));
            currRow.setAttribute("AdjType", newRow.getAttribute("AdjtType"));
            currRow.setAttribute("AdjQty", new Integer(1));
            currRow.setAttribute("requiredQty",
                                 getAdjustItmRow(voSrchtrns.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("AdjtQty"));
            currRow.setAttribute("VoName", "STKADJTSR1");
            userSrSumVo.insertRow(currRow);
        } else {
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            RowQualifier rq = new RowQualifier(userSrSumVo);
            rq.setWhereClause("ItmId = '" + voSrchtrns.getCurrentRow().getAttribute("ItmId").toString() + "'");
            Row rows[] = userSrSumVo.getFilteredRows(rq);

            if (rows != null && rows.length == 1) {
                rq = new RowQualifier(voStkAdjSr);
                rq.setWhereClause("ItmId = '" + voSrchtrns.getCurrentRow().getAttribute("ItmId").toString() +
                                  "' AND CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                                  "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
                Row r[] = voStkAdjSr.getFilteredRows(rq);
                Integer countRow = 0;
                if (r != null) {
                    countRow = r.length;
                }
                rows[0].setAttribute("AdjQty", countRow);
            }
        }
    }


    public void refreshUserSrVOAction() {
        try {
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            userSrSumVo.getCurrentRow().setAttribute("requiredQty",
                                                     getAdjustItmRow(userSrSumVo.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("AdjtQty"));
        } catch (NullPointerException ex) {
        }
    }


    public void setTransVoAttrs() {
    }


    // This Method Remove Row in StkAsjtSrVo Whenever User Unchecked on Check Box.

    public void subRowInAdjtSr() {
        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voStkAdjSr = getSTKADJTSR1();
        ViewObjectImpl voSrchtrns = getSrchSr1();

        Row currRow = voSrchtrns.getCurrentRow();
        String itemId = currRow.getAttribute("ItmId").toString();
        String lotId = currRow.getAttribute("LotId").toString();
        String binId = currRow.getAttribute("BinId").toString();
        String srId = currRow.getAttribute("SrNo").toString();
        RowQualifier rq = new RowQualifier(voStkAdjSr);
        rq.setWhereClause("ItmId = '" + itemId + "' AND CldId = '" + cldId + "' AND DocId = '" + docId +
                          "' AND OrgId = '" + orgId + "' AND SlocId = " + slocId + " AND WhId = '" + whId +
                          "' AND LotId = '" + lotId + "' AND BinId = '" + binId + "' AND SrNo = '" + srId + "'");
        Row rows[] = voStkAdjSr.getFilteredRows(rq);
        if (rows != null && rows.length == 1) //Remove Current Row from StkAjstSrVo
        {
            voStkAdjSr.setCurrentRow(rows[0]);
            voStkAdjSr.removeCurrentRow();
        }


        rq = new RowQualifier(voStkAdjSr);
        rq.setWhereClause("ItmId = '" + itemId + "' AND CldId = '" + cldId + "' AND DocId = '" + docId +
                          "' AND OrgId = '" + orgId + "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
        rows = voStkAdjSr.getFilteredRows(rq);
        Integer countRow = 0;
        if (rows != null) {
            countRow = rows.length;
        }


        ViewObjectImpl userSrSumVo = getShowSrSum1();
        rq = new RowQualifier(userSrSumVo);
        rq.setWhereClause("ItmId = '" + voSrchtrns.getCurrentRow().getAttribute("ItmId").toString() + "'");
        rows = userSrSumVo.getFilteredRows(rq);

        if (rows != null && rows.length == 1) {
            rows[0].setAttribute("AdjQty", new BigDecimal(countRow));
        }

    }


    // get Total Adjusted Quantity By Item.

    public BigDecimal getTotalSrAdjustedQty(String itemId) {

        ViewObjectImpl voSrchtrns = getSrchSr1();
        RowQualifier rq = new RowQualifier(voSrchtrns);
        rq.setWhereClause("quantityUpDown = 'Y' and ItmId = '" + itemId + "'");
        Row rows[] = voSrchtrns.getFilteredRows(rq);

        if (rows != null) {
            return new BigDecimal(rows.length);
        }

        else {
            return new BigDecimal(1);
        }
    }


    // This Method Checks wheather the given Item is exists in ShowSrSummVo  or not.

    public boolean checkItemExists(String itemId) {
        ViewObjectImpl userSrSumVo = getShowSrSum1();
        Row rows[] = userSrSumVo.getFilteredRows("ItmId", itemId);
        if (rows != null && rows.length > 0) {
            return true;
        } else {
            return false;
        }
    }


    // Returns the Current Row of the given Item from StkAdjtItmVo.

    public Row getAdjustItmRow(String itemId) {
        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voStkItm = getSTKADJTITM2();
        RowQualifier rq = new RowQualifier(voStkItm);
        rq.setWhereClause("ItmId = '" + itemId + "' AND CldId = '" + cldId + "' AND DocId = '" + docId +
                          "' AND OrgId = '" + orgId + "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
        Row row = null;
        Row rows[] = voStkItm.getFilteredRows(rq);
        if (rows != null && rows.length == 1) {
            row = rows[0];
        }

        return row;
    }


    /**
     * Container's getter for SrchSr1.
     * @return SrchSr1
     */
    public ViewObjectImpl getSrchSr1() {
        return (ViewObjectImpl) findViewObject("SrchSr1");
    }

    /**
     * Container's getter for STKADJTSR1.
     * @return STKADJTSR1
     */
    public ViewObjectImpl getSTKADJTSR1() {
        return (ViewObjectImpl) findViewObject("STKADJTSR1");
    }

    /**
     * Container's getter for ShowSrSum1.
     * @return ShowSrSum1
     */
    public ViewObjectImpl getShowSrSum1() {
        return (ViewObjectImpl) findViewObject("ShowSrSum1");
    }

    /**
     * Container's getter for STKADJTLOT1.
     * @return STKADJTLOT1
     */
    public ViewObjectImpl getSTKADJTLOT1() {
        return (ViewObjectImpl) findViewObject("STKADJTLOT1");
    }

    /**
     * Container's getter for AdjtLotVL1.
     * @return AdjtLotVL1
     */
    public ViewLinkImpl getAdjtLotVL1() {
        return (ViewLinkImpl) findViewLink("AdjtLotVL1");
    }

    /**
     * Container's getter for SrchBinVo1.
     * @return SrchBinVo1
     */
    public ViewObjectImpl getSrchBinVo1() {
        return (ViewObjectImpl) findViewObject("SrchBinVo1");
    }

    /**
     * Container's getter for STKADJTBIN1.
     * @return STKADJTBIN1
     */
    public ViewObjectImpl getSTKADJTBIN1() {
        return (ViewObjectImpl) findViewObject("STKADJTBIN1");
    }

    /**
     * Container's getter for AdjtBinVL1.
     * @return AdjtBinVL1
     */
    public ViewLinkImpl getAdjtBinVL1() {
        return (ViewLinkImpl) findViewLink("AdjtBinVL1");
    }

    /**
     * Container's getter for SrchSrLot1.
     * @return SrchSrLot1
     */
    public ViewObjectImpl getSrchSrLot1() {
        return (ViewObjectImpl) findViewObject("SrchSrLot1");
    }


    //------------------------------------------------------------------------LOT-SR----------------------------------------------------------------------------
    public void addRowInAdjtLotSr() {
        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voStkAdjSr = getSTKADJTSR1();
        ViewObjectImpl voSrchtrns = getSrchSrLot1();

        Row row = voStkAdjSr.createRow();
        row.setAttribute("OrgId", orgId);
        row.setAttribute("CldId", cldId);
        row.setAttribute("SlocId", slocId);
        row.setAttribute("WhId", whId);
        row.setAttribute("DocId", docId);
        row.setAttribute("ItmId", voSrchtrns.getCurrentRow().getAttribute("ItmId"));
        row.setAttribute("ItmUom",
                         getAdjustItmRow(voSrchtrns.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("ItmUom"));
        row.setAttribute("LotId", voSrchtrns.getCurrentRow().getAttribute("LotId"));
        row.setAttribute("BinId", "0"); // Bin Not Used In this Context.
        row.setAttribute("SrNo", voSrchtrns.getCurrentRow().getAttribute("SrNo"));

        Row newRow = getAdjustItmRow(voSrchtrns.getCurrentRow().getAttribute("ItmId").toString());
        row.setAttribute("AdjtType", newRow.getAttribute("AdjtType"));
        row.setAttribute("AdjtQty", new Integer(1));
        voStkAdjSr.insertRow(row);


        if (!checkItemExists(voSrchtrns.getCurrentRow().getAttribute("ItmId").toString())) {
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            Row currRow = userSrSumVo.createRow();
            currRow.setAttribute("ItmId", voSrchtrns.getCurrentRow().getAttribute("ItmId"));
            currRow.setAttribute("AdjType", newRow.getAttribute("AdjtType"));
            currRow.setAttribute("AdjQty", new Integer(1));
            currRow.setAttribute("requiredQty",
                                 getAdjustItmRow(voSrchtrns.getCurrentRow().getAttribute("ItmId").toString()).getAttribute("AdjtQty"));
            currRow.setAttribute("VoName", "STKADJTSR1");
            userSrSumVo.insertRow(currRow);
        } else {
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            RowQualifier rq = new RowQualifier(userSrSumVo);
            rq.setWhereClause("ItmId = '" + voSrchtrns.getCurrentRow().getAttribute("ItmId").toString() + "'");
            Row rows[] = userSrSumVo.getFilteredRows(rq);

            if (rows != null && rows.length == 1) {
                rq = new RowQualifier(voStkAdjSr);
                rq.setWhereClause("ItmId = '" + voSrchtrns.getCurrentRow().getAttribute("ItmId").toString() +
                                  "' AND CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                                  "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
                Row r[] = voStkAdjSr.getFilteredRows(rq);
                Integer countRow = 0;
                if (r != null) {
                    countRow = r.length;
                }
                rows[0].setAttribute("AdjQty", countRow);
            }
        }
    }


    public void subRowInAdjtLotSr() {
        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voStkAdjSr = getSTKADJTSR1();
        ViewObjectImpl voSrchtrns = getSrchSrLot1();

        Row currRow = voSrchtrns.getCurrentRow();
        String itemId = currRow.getAttribute("ItmId").toString();
        String lotId = currRow.getAttribute("LotId").toString();
        String binId = "0"; //Set Bin default 0 as org not used Bin Concept.
        String srId = currRow.getAttribute("SrNo").toString();
        RowQualifier rq = new RowQualifier(voStkAdjSr);
        rq.setWhereClause("ItmId = '" + itemId + "' AND CldId = '" + cldId + "' AND DocId = '" + docId +
                          "' AND OrgId = '" + orgId + "' AND SlocId = " + slocId + " AND WhId = '" + whId +
                          "' AND LotId = '" + lotId + "' AND BinId = '" + binId + "' AND SrNo = '" + srId + "'");
        Row rows[] = voStkAdjSr.getFilteredRows(rq);
        if (rows != null && rows.length == 1) //Remove Current Row from StkAjstSrVo
        {
            voStkAdjSr.setCurrentRow(rows[0]);
            voStkAdjSr.removeCurrentRow();
        }


        rq = new RowQualifier(voStkAdjSr);
        rq.setWhereClause("ItmId = '" + itemId + "' AND CldId = '" + cldId + "' AND DocId = '" + docId +
                          "' AND OrgId = '" + orgId + "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
        rows = voStkAdjSr.getFilteredRows(rq);
        Integer countRow = 0;
        if (rows != null) {
            countRow = rows.length;
        }


        ViewObjectImpl userSrSumVo = getShowSrSum1();
        rq = new RowQualifier(userSrSumVo);
        rq.setWhereClause("ItmId = '" + voSrchtrns.getCurrentRow().getAttribute("ItmId").toString() + "'");
        rows = userSrSumVo.getFilteredRows(rq);

        if (rows != null && rows.length == 1) {
            rows[0].setAttribute("AdjQty", new BigDecimal(countRow));
        }

    }


    public boolean isLotSrQuantityExceed() {
        ViewObjectImpl voSrchtrns = getSrchSrLot1();
        ViewObjectImpl userSrSumVo = getShowSrSum1();
        RowQualifier rq = new RowQualifier(userSrSumVo);
        rq.setWhereClause("ItmId = '" + voSrchtrns.getCurrentRow().getAttribute("ItmId").toString() + "'");
        Row[] rows = userSrSumVo.getFilteredRows(rq);

        if (rows != null && rows.length == 1) {
            BigDecimal adjQty = (BigDecimal) rows[0].getAttribute("AdjQty");
            BigDecimal reqQty = (BigDecimal) rows[0].getAttribute("requiredQty");
            adjQty = adjQty.add(new BigDecimal(1));
            if (adjQty.compareTo(reqQty) == 1) {
                return true;
            }
        }

        return false;
    }

    public boolean isSrQuantityExceed() {
        ViewObjectImpl voSrchtrns = getSrchSr1();
        ViewObjectImpl userSrSumVo = getShowSrSum1();
        RowQualifier rq = new RowQualifier(userSrSumVo);
        rq.setWhereClause("ItmId = '" + voSrchtrns.getCurrentRow().getAttribute("ItmId").toString() + "'");
        Row[] rows = userSrSumVo.getFilteredRows(rq);

        if (rows != null && rows.length == 1) {
            BigDecimal adjQty = (BigDecimal) rows[0].getAttribute("AdjQty");
            BigDecimal reqQty = (BigDecimal) rows[0].getAttribute("requiredQty");
            adjQty = adjQty.add(new BigDecimal(1));
            if (adjQty.compareTo(reqQty) == 1) {
                return true;
            }
        }

        return false;
    }


    public boolean isLotQtyValid(BigDecimal obj) {
        BigDecimal rcptQty = null;
        ViewObjectImpl voSrchLot = (ViewObjectImpl) findViewObject("SrchLot1");
        Row curRw = voSrchLot.getCurrentRow();

        ViewObjectImpl userSrSumVo = getShowSrSum1();
        RowQualifier rq = new RowQualifier(userSrSumVo);
        rq.setWhereClause("ItmId = '" + voSrchLot.getCurrentRow().getAttribute("ItmId").toString() + "'");
        Row[] rows = userSrSumVo.getFilteredRows(rq);
        if (rows != null && rows.length == 1) {
            rcptQty = (BigDecimal) rows[0].getAttribute("requiredQty");
        }

        if (rcptQty == null) {
            Row r = getAdjustItmRow(voSrchLot.getCurrentRow().getAttribute("ItmId").toString());
            if (r != null)
                rcptQty = (BigDecimal) r.getAttribute("AdjtQty");
        }

        RowSetIterator rsi = voSrchLot.createRowSetIterator(null);
        BigDecimal sum = new BigDecimal(0);
        while (rsi.hasNext()) {
            Row cur = rsi.next();
            if (cur != null && curRw != cur) {
                BigDecimal lqty = (BigDecimal) cur.getAttribute("AdjtQty");
                if (lqty != null) {
                    sum = sum.add(lqty);
                }
            }
        }
        rsi.closeRowSetIterator();
        sum = sum.add(obj);
        if (rcptQty != null && sum.compareTo(rcptQty) == 1) {
            return true;
        }
        return false;
    }


    public BigDecimal isStkItmSummQty(BigDecimal obj, String type) {
        ADFLogger _logger = ADFLogger.createADFLogger(getClass());
        System.out.println("type in isStkItmSumm : " + type);

        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        Integer fyId = (Integer) voStk.getCurrentRow().getAttribute("FyId");
        ViewObjectImpl voStkItm = getSTKADJTITM2();
        Object object = voStkItm.getCurrentRow().getAttribute("ItmId");


        ViewObjectImpl voItmSumm = (ViewObjectImpl) findViewObject("MmStkSummItm1");
        RowQualifier rq = new RowQualifier(voItmSumm);
        rq.setWhereClause("CldId = '" + cldId + "' AND OrgId = '" + orgId + "' AND SlocId = " + slocId +
                          " AND WhId = '" + whId + "' AND FyId = " + fyId + " AND ItmId ='" + object + "'");
        Row norows[] = voItmSumm.getFilteredRows(rq);

        if (norows != null && norows.length == 1) {

            if (type != null && type.equals("S")) {
                BigDecimal qty = (BigDecimal) norows[0].getAttribute("TotStk");
                if (obj.compareTo(qty) == 1) {
                    return qty;
                }
                if (qty.compareTo(BigDecimal.ZERO) == 0) {
                    return BigDecimal.ZERO;
                }
            }
        }


        return new BigDecimal(-999);
    }


    public boolean isBinQtyValid(BigDecimal obj) {
        BigDecimal rcptQty = null;
        ViewObjectImpl voSrchLot = (ViewObjectImpl) findViewObject("SrchBinVo1");
        Row curRw = voSrchLot.getCurrentRow();

        ViewObjectImpl userSrSumVo = getShowSrSum1();
        RowQualifier rq = new RowQualifier(userSrSumVo);
        rq.setWhereClause("ItmId = '" + voSrchLot.getCurrentRow().getAttribute("ItmId").toString() + "'");
        Row[] rows = userSrSumVo.getFilteredRows(rq);
        if (rows != null && rows.length == 1) {
            rcptQty = (BigDecimal) rows[0].getAttribute("requiredQty");
        }

        if (rcptQty == null) {
            Row r = getAdjustItmRow(voSrchLot.getCurrentRow().getAttribute("ItmId").toString());
            if (r != null)
                rcptQty = (BigDecimal) r.getAttribute("AdjtQty");
        }

        RowSetIterator rsi = voSrchLot.createRowSetIterator(null);
        BigDecimal sum = new BigDecimal(0);
        while (rsi.hasNext()) {
            Row cur = rsi.next();
            if (cur != null && curRw != cur) {
                BigDecimal lqty = (BigDecimal) cur.getAttribute("AdjtQty");
                if (lqty != null) {
                    sum = sum.add(lqty);
                }
            }
        }
        rsi.closeRowSetIterator();
        sum = sum.add(obj);
        if (rcptQty != null && sum.compareTo(rcptQty) == 1) {
            return true;
        }
        return false;
    }


    // Returns Vo Name According to Item Id....

    public String getVONameByItem(String itemId) {
        ViewObjectImpl userSrSumVo = getShowSrSum1();
        RowQualifier rq = new RowQualifier(userSrSumVo);
        rq.setWhereClause("ItmId = '" + itemId + "'");
        Row[] rows = userSrSumVo.getFilteredRows(rq);
        if (rows != null && rows.length == 1) {
            return (String) rows[0].getAttribute("VoName");
        }
        return null;
    }


    public Row getCurrentTransRow(String itemId) {
        ViewObjectImpl userSrSumVo = getShowSrSum1();
        RowQualifier rq = new RowQualifier(userSrSumVo);
        rq.setWhereClause("ItmId = '" + itemId + "'");
        Row[] rows = userSrSumVo.getFilteredRows(rq);
        if (rows != null && rows.length == 1) {
            return (Row) rows[0];
        }
        return null;
    }


    public void deleteAllAdjustments() {
        ViewObject voStk = getSTKADJT1();
        ViewObjectImpl userSrSumVo = getShowSrSum1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voStkItm = getSTKADJTITM2();

        Object object = voStkItm.getCurrentRow().getAttribute("ItmId");
        String itemId = null;
        String VoName = null;

        if (object != null) {
            itemId = (String) object;
            VoName = getVONameByItem(itemId);
        }


        removeRowInLotBinSr(); //remove all rows of delete Item from Lot/SR/Bin Vo
        Row r = getCurrentTransRow(itemId); //remove row from trans Vo
        if (r != null) {
            r.remove();
        }
        voStkItm.removeCurrentRow();

        /*       if(VoName !=null)
        {
            ViewObjectImpl vo=(ViewObjectImpl)findViewObject(VoName);
            RowQualifier rq = new RowQualifier(vo);
            rq.setWhereClause("ItmId = '"+itemId+"' AND CldId = '"+cldId+"' AND DocId = '"+docId+"' AND OrgId = '"+orgId+"' AND SlocId = "+slocId+" AND WhId = '"+whId+"'");
            Row []rows=vo.getFilteredRows(rq);
           for(Row row:rows)
            {
             vo.setCurrentRow(row);
             vo.removeCurrentRow();
            }
            Row r=getCurrentTransRow(itemId);     //remove row from trans Vo
         if(r!=null)
            {r.remove();}


            voStkItm.removeCurrentRow();
        }
        else
        {voStkItm.removeCurrentRow();}
  */
    }


    public boolean isAllItemAdjusted() {
        ViewObjectImpl voStkItm = getSTKADJTITM2();
        ViewObjectImpl userSrSumVo = getShowSrSum1();

        int countStkItm = voStkItm.getRowCount();
        int countTrnItm = userSrSumVo.getRowCount() - 1;

        if (countStkItm == countTrnItm)
            return true;
        else
            return false;
    }

    public String validateAdjtForm() {


        boolean valid = isAllItemAdjusted();
        if (!valid) {
            return "MISS_MATCH";
        }

        else {
            ViewObjectImpl voStkItm = getSTKADJTITM2();
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            Row itmRows[] = voStkItm.getAllRowsInRange();
            Row trnRows[] = userSrSumVo.getAllRowsInRange();

            for (Row itm : itmRows) {
                Row trns[] = userSrSumVo.getFilteredRows("ItmId", itm.getAttribute("ItmId"));
                if (trns != null && trns.length == 1) {
                    BigDecimal trsQty = (BigDecimal) trns[0].getAttribute("AdjQty");
                    BigDecimal itmQty = (BigDecimal) itm.getAttribute("AdjtQty");

                    if ((itmQty.compareTo(trsQty) != 0) ||
                        !(trns[0].getAttribute("AdjType").toString().equals(itm.getAttribute("AdjtType").toString()))) {
                        return "CHANGE_QTY_TYPE";
                    }

                } else {
                    return "MISS_MATCH";
                }
            }

        }
        return "COMMIT";
    }


    public String getAdjustableQty() {
        ViewObjectImpl votrns = gettransLot1();
        ViewObjectImpl voStkItm = getSTKADJTITM2();
        Row r = votrns.getCurrentRow();
        if (r != null) {
            try {
                Row row = getAdjustItmRow((String) votrns.getCurrentRow().getAttribute("ItemId"));
                BigDecimal bd = (BigDecimal) row.getAttribute("AdjtQty");
                return (String) bd.toString();
            } catch (NullPointerException ex) {
                return null;
            }
        }
        return null;
    }


    public void refreshTrnsVo() { //this.getDBTransaction().postChanges();
        try {
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            Row rows[] = userSrSumVo.getAllRowsInRange();
            if (rows != null && rows.length > 0) {
                for (Row row : rows) {
                    if (row != null)
                        row.setAttribute("requiredQty",
                                         getAdjustItmRow(row.getAttribute("ItmId").toString()).getAttribute("AdjtQty"));
                    row.setAttribute("AdjType",
                                     getAdjustItmRow(row.getAttribute("ItmId").toString()).getAttribute("AdjtType"));
                }
            }
        } catch (NullPointerException ex) {
            return;
        }
        getSTKADJTITM2().executeQuery();

    }


    public boolean checkTransactionAgnstItem() {
        ViewObjectImpl voStkItm = getSTKADJTITM2();
        Row currRow = voStkItm.getCurrentRow();
        String itemId = (String) currRow.getAttribute("ItmId");
        ViewObjectImpl userSrSumVo = getShowSrSum1();
        RowQualifier rq = new RowQualifier(userSrSumVo);
        rq.setWhereClause("ItmId = '" + itemId + "' AND AdjQty > 0");
        Row[] rows = userSrSumVo.getFilteredRows(rq);
        if (rows != null && rows.length == 1) {
            return true;
        }
        return false;
    }

    /**
     * Container's getter for ItmTrns1.
     * @return ItmTrns1
     */
    public ItmTrnsVOImpl getItmTrns1() {
        return (ItmTrnsVOImpl) findViewObject("ItmTrns1");
    }


    public boolean duplicateValue(String itmName) {
        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");

        ViewObjectImpl v = getSTKADJTITM2();
        String itmDesc = null;
        int totalCount = v.getRowCount(); //get ALL rows
        int rangeSize = v.getRangeSize(); //all in range
        v.setRangeSize(totalCount);
        //  Row[] rArray = v.getAllRowsInRange();

        RowQualifier rq = new RowQualifier(v);
        rq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                          "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
        Row[] rArray = v.getFilteredRows(rq);

        //check for duplicate rows
        Row cRow = v.getCurrentRow();
        int count = 0;
        String currName = "";

        for (Row r : rArray) {

            if (!r.equals(cRow)) {
                try {
                    currName = r.getAttribute("ItmId").toString();
                    adfLog.info("---------currName --- " + currName);
                } catch (NullPointerException npe) {
                    npe.printStackTrace();
                    currName = "";
                    adfLog.info("---------currName catch--- " + currName);
                }
                if (currName != null) {
                    Row[] xx = getITM1().getFilteredRows("ItmId", currName);
                    if (xx.length > 0) {
                        itmDesc = xx[0].getAttribute("ItmDesc").toString();
                    }
                    if (itmName.equalsIgnoreCase(itmDesc)) {
                        count = count + 1;
                    }
                }

            }

        }
        v.setRangeSize(rangeSize); //set to original range

        if (count > 0) {
            return true;
        }


        return false;
    }


    public void copyAllItemByStkTakenId(String txnId) {
        ViewObjectImpl voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voItm = getITM1();

        ViewObjectImpl stkTkItmVo = (ViewObjectImpl) getStkTkItm1();
        ViewObjectImpl voStkItm = getSTKADJTITM1();
        RowQualifier rq = new RowQualifier(voStkItm);
        rq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                          "' AND SlocId = " + slocId + "");
        Row norows[] = voStkItm.getFilteredRows(rq);
        if (norows != null && norows.length > 0) {
            for (Row row : norows) {
                row.remove();
            }
        }
        voStkItm.executeQuery();
        RowQualifier rq1 = new RowQualifier(stkTkItmVo);
        rq1.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + txnId + "' AND OrgId = '" + orgId +
                           "' AND SlocId = " + slocId + "");
        Row rows[] = stkTkItmVo.getFilteredRows(rq1);
        if (rows != null && rows.length > 0) {
            for (Row row : rows) {
                Row newRow = getSTKADJTITM2().createRow();
                newRow.setAttribute("OrgId", orgId);
                newRow.setAttribute("SlocId", slocId);
                newRow.setAttribute("CldId", cldId);
                newRow.setAttribute("WhId", row.getAttribute("WhId"));
                newRow.setAttribute("DocId", docId);
                newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                newRow.setAttribute("ItmUom", row.getAttribute("ItmUom"));
                newRow.setAttribute("AdjtQty", row.getAttribute("DiffQty"));
                newRow.setAttribute("AdjtType", row.getAttribute("DiffType"));
                getSTKADJTITM2().insertRow(newRow);
            }
        }

        getSTKADJTITM2().executeQuery();
    }

    /**
     * Container's getter for StkTkItm1.
     * @return StkTkItm1
     */
    public ViewObjectImpl getStkTkItm1() {
        return (ViewObjectImpl) findViewObject("StkTkItm1");
    }


    public void cleanUpStkItmVo() {
        ViewObjectImpl voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voStkItm = getSTKADJTITM1();
        RowQualifier rq = new RowQualifier(voStkItm);
        rq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                          "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
        Row norows[] = voStkItm.getFilteredRows(rq);
        if (norows != null && norows.length > 0) {
            for (Row row : norows) {
                row.remove();
            }
        }
        voStkItm.executeQuery();
    }

    /**
     * Container's getter for STKADJTITM1.
     * @return STKADJTITM1
     */
    public ViewObjectImpl getSTKADJTITM1() {
        return (ViewObjectImpl) findViewObject("STKADJTITM1");
    }

    /**
     * Container's getter for transSrch1.
     * @return transSrch1
     */
    public ViewObjectImpl gettransSrch1() {
        return (ViewObjectImpl) findViewObject("transSrch1");
    }


    public void beforeCommitAction() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl voStk = getSTKADJT1();
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        Integer fyId = (Integer) voStk.getCurrentRow().getAttribute("FyId");

        clearUpVoData();
        removeZeroRowInLotBinSr();

        if (getCurrentRowStkNo() == null) {
            String tableName = "MM$STK$ADJT";
            String stkAdjNo = (String) (callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                                           slocId, cldId, orgId, tableName, null, fyId
            }));
            voStk.getCurrentRow().setAttribute("StkAdjtNo", stkAdjNo);
        }
        this.getDBTransaction().postChanges();
        // DB function which is used to insert data in all tables such as bin,lot,sr,etc.
        Integer inserted = (Integer) (callStoredFunction(Types.INTEGER, " MM.mm_ins_stk_adjt(?,?,?,?,?)", new Object[] {
                                                         cldId, slocId, orgId, whId, docId
        }));
    }


    public void clearUpVoData() {
        ViewObjectImpl voStk = getSTKADJT1();
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl stkItmVo = getSTKADJTITM1();

        RowQualifier rq = new RowQualifier(stkItmVo);
        rq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                          "' AND SlocId = " + slocId + " AND WhId <> '" + whId + "'");
        Row rows[] = stkItmVo.getFilteredRows(rq);

        if (rows != null && rows.length > 0) {
            for (Row row : rows) {
                row.remove();
            }
        }
    }


    public void searchAction(String stkAdjtNo, Timestamp frmDate, Timestamp toDate, Integer stckStat) {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl voSrch = (ViewObjectImpl) getSTKADJT1();
        ViewCriteria vc = voSrch.getViewCriteria("STKADJTVOCriteria");
        voSrch.applyViewCriteria(vc);
        voSrch.setNamedWhereClauseParam("bindCldId", cldId);
        voSrch.setNamedWhereClauseParam("bindSlocId", slocId);
        voSrch.setNamedWhereClauseParam("bindOrgId", orgId);
        voSrch.setNamedWhereClauseParam("bindStkAdjtNo", stkAdjtNo);
        voSrch.setNamedWhereClauseParam("bindfromDate", frmDate);
        voSrch.setNamedWhereClauseParam("bindtoDate", toDate);
        voSrch.setNamedWhereClauseParam("bindStckStat", stckStat);
        voSrch.executeQuery();
    }


    public void defaultSearchAction() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl voSrch = (ViewObjectImpl) getSTKADJT1();
        ViewCriteria vc = voSrch.getViewCriteria("STKADJTVOCriteria");
        voSrch.applyViewCriteria(vc);
        voSrch.setNamedWhereClauseParam("bindCldId", cldId);
        voSrch.setNamedWhereClauseParam("bindSlocId", slocId);
        voSrch.setNamedWhereClauseParam("bindOrgId", orgId);
        voSrch.setNamedWhereClauseParam("bindStckStat", 352);
        voSrch.setNamedWhereClauseParam("bindfromDate", null);
        voSrch.setNamedWhereClauseParam("bindtoDate", null);
        voSrch.executeQuery();
    }

    public void resetAction() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl voSrch = (ViewObjectImpl) getSTKADJT1();
        ViewCriteria vc = voSrch.getViewCriteria("STKADJTVOCriteria");
        voSrch.applyViewCriteria(vc);
        voSrch.setNamedWhereClauseParam("bindCldId", cldId);
        voSrch.setNamedWhereClauseParam("bindSlocId", slocId);
        voSrch.setNamedWhereClauseParam("bindOrgId", orgId);
        voSrch.setNamedWhereClauseParam("bindStckStat", 352);
        voSrch.setNamedWhereClauseParam("bindStkAdjtNo", null);
        voSrch.setNamedWhereClauseParam("bindfromDate", null);
        voSrch.setNamedWhereClauseParam("bindtoDate", null);
        voSrch.executeQuery();
    }


    public String getCurrentRowStockType() {
        Row row = getSTKADJT1().getCurrentRow();
        Integer type = null;
        String stockType = "D";
        if (row != null) {
            type = (Integer) row.getAttribute("StkAdjtType");
            if (type == 350) {
                stockType = "ST";
            } else if (type == 351) {
                stockType = "AD";
            }
        }

        return stockType; //Default
    }


    public String getCurrentRowStockStatus() {
        Row row = getSTKADJT1().getCurrentRow();
        Integer type = null;
        String stockStatus = "D";
        if (row != null) {
            type = (Integer) row.getAttribute("StkAdjtStat");
            if (type == 353) {
                stockStatus = "SU";
            } else if (type == 352) {
                stockStatus = "PD";
            }
        }

        return stockStatus; //Default
    }


    public Object getCurrentRowStkNo() {
        Row row = getSTKADJT1().getCurrentRow();
        if (row != null) {
            return row.getAttribute("StkAdjtNo");
        }
        return null; //Default
    }


    public void removeRowInLotBinSr() //delete Row from Lot,Bin,Sr as user done Delete action on Item.
    {

        ViewObjectImpl voStk = getSTKADJT1();
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());


        ViewObjectImpl stkItmVo = getSTKADJTITM2();
        String itemId = (String) stkItmVo.getCurrentRow().getAttribute("ItmId");

        ViewObjectImpl voItmLot = getSTKADJTLOT1();
        RowQualifier lotrq = new RowQualifier(voItmLot);
        lotrq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                             "' AND SlocId = " + slocId + " AND WhId = '" + whId + "' AND ItmId = '" + itemId + "'");
        Row lotRows[] = voItmLot.getFilteredRows(lotrq);
        if (lotRows != null && lotRows.length > 0) {
            for (Row row : lotRows) {
                row.remove();
            }
        }


        ViewObjectImpl voItmBin = getSTKADJTBIN1();
        RowQualifier binrq = new RowQualifier(voItmBin);
        binrq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                             "' AND SlocId = " + slocId + " AND WhId = '" + whId + "' AND ItmId = '" + itemId + "'");
        Row binRows[] = voItmBin.getFilteredRows(binrq);
        if (binRows != null && binRows.length > 0) {
            for (Row row : binRows) {
                row.remove();
            }
        }

        ViewObjectImpl voStkAdjSr = getSTKADJTSR1();
        RowQualifier srrq = new RowQualifier(voStkAdjSr);
        srrq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                            "' AND SlocId = " + slocId + " AND WhId = '" + whId + "' AND ItmId = '" + itemId + "'");
        Row srRows[] = voStkAdjSr.getFilteredRows(srrq);
        if (srRows != null && srRows.length > 0) {
            for (Row row : srRows) {
                row.remove();
            }
        }

    }


    /**
     * Container's getter for AdjtType1.
     * @return AdjtType1
     */
    public ViewObjectImpl getAdjtType1() {
        return (ViewObjectImpl) findViewObject("AdjtType1");
    }

    public void setTransVo(String mode, String stockType) {
        if (mode.equals("E")) {

            ViewObjectImpl voStk = getSTKADJT1();
            ViewObjectImpl voLot = getSTKADJTLOT1();
            String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
            String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
            String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            ViewObjectImpl stkItmVo = getSTKADJTITM2();
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            RowQualifier rq = new RowQualifier(stkItmVo);
            rq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                              "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
            Row rows[] = stkItmVo.getFilteredRows(rq);
            BigDecimal sum = BigDecimal.ZERO;
            if (rows != null && rows.length > 0) {
                for (Row row : rows) {
                    Row rowExist = getCurrentTransRow((String) row.getAttribute("ItmId"));
                    if (rowExist == null) {

                        if (stockType.equals("ST")) {
                            Row newRow = userSrSumVo.createRow();
                            newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                            newRow.setAttribute("AdjQty", row.getAttribute("AdjtQty"));
                            newRow.setAttribute("requiredQty", row.getAttribute("AdjtQty"));
                            newRow.setAttribute("AdjType", row.getAttribute("AdjtType"));
                            userSrSumVo.insertRow(newRow);
                        }

                        else if (stockType.equals("AD") && row.getAttribute("isNewRow") == null) {

                            Row rws[] = voLot.getFilteredRows("ItmId", row.getAttribute("ItmId"));
                            sum = BigDecimal.ZERO;
                            for (Row rw : rws) {
                                sum = sum.add((BigDecimal) rw.getAttribute("AdjtQty"));
                            }

                            Row newRow = userSrSumVo.createRow();
                            newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                            newRow.setAttribute("AdjQty", sum);
                            newRow.setAttribute("requiredQty", row.getAttribute("AdjtQty"));
                            newRow.setAttribute("AdjType", row.getAttribute("AdjtType"));
                            userSrSumVo.insertRow(newRow);
                        }

                        else if (stockType.equals("AD") && row.getAttribute("isNewRow") != null &&
                                 row.getAttribute("isNewRow").equals("Y")) {
                            Row newRow = userSrSumVo.createRow();
                            newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                            newRow.setAttribute("AdjQty", 0);
                            newRow.setAttribute("requiredQty", row.getAttribute("AdjtQty"));
                            newRow.setAttribute("AdjType", row.getAttribute("AdjtType"));
                            userSrSumVo.insertRow(newRow);
                        }
                    }
                }
            }


        }
    }


    public void removeZeroRowInLotBinSr() //delete Row  from Lot,Bin,Sr where Adjt Qty is ZERO.
    {

        ViewObjectImpl voStk = getSTKADJT1();
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());


        ViewObjectImpl stkItmVo = getSTKADJTITM2();
        String itemId = (String) stkItmVo.getCurrentRow().getAttribute("ItmId");


        ViewObjectImpl voItmLot = getSTKADJTLOT1();
        RowQualifier lotrq = new RowQualifier(voItmLot);
        lotrq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                             "' AND SlocId = " + slocId + " AND WhId = '" + whId + "' AND ItmId = '" + itemId +
                             "' AND AdjtQty = 0");
        Row lotRows[] = voItmLot.getFilteredRows(lotrq);
        if (lotRows != null && lotRows.length > 0) {
            for (Row row : lotRows) {
                row.remove();
            }
        }


        ViewObjectImpl voItmBin = getSTKADJTBIN1();
        RowQualifier binrq = new RowQualifier(voItmBin);
        binrq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                             "' AND SlocId = " + slocId + " AND WhId = '" + whId + "' AND ItmId = '" + itemId +
                             "' AND AdjtQty = 0");
        Row binRows[] = voItmBin.getFilteredRows(binrq);
        if (binRows != null && binRows.length > 0) {
            for (Row row : binRows) {
                row.remove();
            }
        }

        ViewObjectImpl voStkAdjSr = getSTKADJTSR1();
        RowQualifier srrq = new RowQualifier(voStkAdjSr);
        srrq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                            "' AND SlocId = " + slocId + " AND WhId = '" + whId + "' AND ItmId = '" + itemId +
                            "' AND AdjtQty = 0");
        Row srRows[] = voStkAdjSr.getFilteredRows(srrq);
        if (srRows != null && srRows.length > 0) {
            for (Row row : srRows) {
                row.remove();
            }
        }

    }

    //------------------------------------------------------------------------------WORK FLOW----------------------------------------------

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {

        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        /* return Integer.parseInt(callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_USR_LEVEL(?,?,?,?,?,?)", new Object[] { SlocId,CldId,
                                                                                                                                    OrgId,
                                                                                                                                    UsrId,
                                                                                                                                    WfNo,
                                                                                                                                    DocNo }).toString()); */
        return UsrId;

    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getSTKADJT1().getCurrentRow().getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo,
                                                   levelFrm, levelTo, action, remark, amount
    }).toString());


    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getSTKADJT1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, 0
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return UsrId;
    }


    public String getTxnId() {
        String DocId = getSTKADJT1().getCurrentRow().getAttribute("DocId").toString();
        if (DocId != null) {
            return DocId;
        } else {
            return null;
        }
    }

    public String CheckSaved() {
        String DocId = getSTKADJT1().getCurrentRow().getAttribute("DocId").toString();
        Row[] r = getWF1().getFilteredRows("TxnDocId", DocId);
        if (r.length > 0)
            return "1";
        else
            return "-1";
    }

    /**
     * Container's getter for WF1.
     * @return WF1
     */
    public ViewObjectImpl getWF1() {
        return (ViewObjectImpl) findViewObject("WF1");
    }


    public void SetAuthorisedStatus() {
        String authStat = (String) evaluateEL("#{pageFlowScope.RETURN_PARA}");

        if (authStat.equals("A")) {
            String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String hoOrgId = (String) evaluateEL("#{pageFlowScope.GLBL_HO_ORG_ID}");
            Integer usr = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_USR}").toString());
            ViewObjectImpl voStk = getSTKADJT1();
            String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
            String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
            Integer fyId = (Integer) voStk.getCurrentRow().getAttribute("FyId");
            Object dt = voStk.getCurrentRow().getAttribute("StkAdjtDt");

            try {
                Integer updated = (Integer) (callStoredFunction(Types.INTEGER, " MM.mm_updt_stk_adjt(?,?,?,?,?,?)", new Object[] {
                                                                cldId, slocId, orgId, whId, docId, fyId
                }));

            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
                Integer retrn = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)", new Object[] {
                                                             slocId, cldId, orgId, 18517, docId, 0
                });
                this.getDBTransaction().commit();
                String msg = evaluateEL("#{bundle['MSG.1724']}").toString();
                FacesMessage message = new FacesMessage(msg); //"Something went wrong. Please Contact to ESS!"
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                return;
            }
            Integer ret = -1;
            // Integer ret =(Integer)(callStoredFunction(Types.INTEGER, "MM.MM_INS_GL_JOURNAL_VOUCHER (?,?,?,?,?,?,?)", new Object[] {slocId,cldId,hoOrgId,orgId,docId,dt,usr}));
            try {
                ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_GL_STK_ADJT(?,?,?,?,?,?,?)", new Object[] {
                                                    slocId, cldId, hoOrgId, orgId, docId, dt, usr
                }));
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
                ret = -1;

                Integer retrn = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)", new Object[] {
                                                             slocId, cldId, orgId, 18517, docId, 0
                });
                this.getDBTransaction().commit();
                String msg = evaluateEL("#{bundle['MSG.1724']}").toString();
                FacesMessage message = new FacesMessage(msg); //"Something went wrong. Please Contact to ESS!"
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                return;

            }
            //    System.out.println("RETURN : "+ret);

            if (ret == 1) {

                Key key = getSTKADJT1().getCurrentRow().getKey();
                //  System.out.println("Key : "+key);

                getSTKADJT1().executeQuery();
                Row row = getSTKADJT1().getRow(key);
                getSTKADJT1().setCurrentRow(row);
                getSTKADJT1().getCurrentRow().setAttribute("AuthStat", "Y");
                getSTKADJT1().getCurrentRow().setAttribute("StkAdjtStat", 353);

                this.getDBTransaction().commit();
            }
            System.out.println(docId);
            String VoucherId = null;
            Object voucherId = null;
            try {
                voucherId = callStoredFunction(Types.VARCHAR, " MM_GET_RCPT_PROV_GL(?,?,?,?,?,?)", new Object[] {
                                               cldId, slocId, orgId, docId, "S", "NO"
                });
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
                adfLog.info("-----------MM_GET_RCPT_PROV_GL-------------catch");
                Integer retrn = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)", new Object[] {
                                                             slocId, cldId, orgId, 18517, docId, 0
                });
                this.getDBTransaction().commit();
                String msg = evaluateEL("#{bundle['MSG.1724']}").toString();
                FacesMessage message = new FacesMessage(msg); //"Something went wrong. Please Contact to ESS!"
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                return;
            }

            System.out.println("Voucher ID::" + VoucherId);
            if (voucherId != null) {


                FacesMessage message = new FacesMessage("Stock Updated with Voucher Id:" + voucherId.toString());
                message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            } else {
                FacesMessage message = new FacesMessage("Stock Updated Successfully");
                message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }
        }
    }

    //@Override
    public void refreshVos() {
        getWF1().executeQuery();
    }

    /**
     * Container's getter for Group1.
     * @return Group1
     */
    public ViewObjectImpl getGroup1() {
        return (ViewObjectImpl) findViewObject("Group1");
    }

    /**
     * Container's getter for MmStkSummItm1.
     * @return MmStkSummItm1
     */
    public ViewObjectImpl getMmStkSummItm1() {
        return (ViewObjectImpl) findViewObject("MmStkSummItm1");
    }


    /**
     * Container's getter for STKADJTLOT2.
     * @return STKADJTLOT2
     */
    public ViewObjectImpl getSTKADJTLOT2() {
        return (ViewObjectImpl) findViewObject("STKADJTLOT2");
    }

    /**
     * Container's getter for STKADJTBIN2.
     * @return STKADJTBIN2
     */
    public ViewObjectImpl getSTKADJTBIN2() {
        return (ViewObjectImpl) findViewObject("STKADJTBIN2");
    }


    public void executeAdjtViewObject() {

        executeVo("STKADJTLOT2", "STKADJTLOTVOCriteria");
        executeVo("STKADJTBIN2", "STKADJTBINVOCriteria");
        executeVo("STKADJTSR1", "STKADJTSRVOCriteria");

    }


    private void executeVo(String viewName, String viewCriteria) {
        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");

        ViewObjectImpl votrns = gettransLot1();
        Row currRow = votrns.getCurrentRow();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject(viewName);
        ViewCriteria vc = vo.getViewCriteria(viewCriteria);
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindWhId", whId);
        vo.setNamedWhereClauseParam("bindDocId", docId);
        vo.setNamedWhereClauseParam("bindItmId", currRow.getAttribute("ItemId"));

        vo.executeQuery();
    }


    public Integer executeViewObject_1(String voName) {

        ViewObject voStk = getSTKADJT1();
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        Integer flg = 0;
        if (voName.equals("LotFacet")) {
            ViewObjectImpl votrns = gettransLot1();
            Row currRow = votrns.getCurrentRow();
            ViewObjectImpl voSrchLot = (ViewObjectImpl) findViewObject("SrchLot1");
            ViewCriteria vc = voSrchLot.getViewCriteria("SrchLotVOCriteria");
            voSrchLot.applyViewCriteria(vc);
            voSrchLot.setNamedWhereClauseParam("bindOrgId", orgId);
            voSrchLot.setNamedWhereClauseParam("bindCldId", cldId);
            voSrchLot.setNamedWhereClauseParam("bindSlocId", slocId);
            voSrchLot.setNamedWhereClauseParam("bindWhId", whId);
            voSrchLot.setNamedWhereClauseParam("bindItmId", currRow.getAttribute("ItemId"));
            voSrchLot.setNamedWhereClauseParam("bindLotId", currRow.getAttribute("LotId"));
            voSrchLot.executeQuery();
            return -1;

        } else if (voName.equals("SRFacet")) {
            ViewObjectImpl votrns = gettransLot1();
            Row currRow = votrns.getCurrentRow();
            ViewObjectImpl voSrchSr = (ViewObjectImpl) findViewObject("SrchSr1");
            ViewCriteria vc = voSrchSr.getViewCriteria("SrchSrVOCriteria");
            voSrchSr.applyViewCriteria(vc);
            voSrchSr.setNamedWhereClauseParam("bindOrgId", orgId);
            voSrchSr.setNamedWhereClauseParam("bindCldId", cldId);
            voSrchSr.setNamedWhereClauseParam("bindSlocId", slocId);
            voSrchSr.setNamedWhereClauseParam("bindWhId", whId);
            voSrchSr.setNamedWhereClauseParam("bindSrId", currRow.getAttribute("SrId"));
            voSrchSr.setNamedWhereClauseParam("bindItemId", currRow.getAttribute("ItemId"));
            voSrchSr.setNamedWhereClauseParam("bindLotId", currRow.getAttribute("LotId"));
            voSrchSr.setNamedWhereClauseParam("bindBinId", currRow.getAttribute("BinId"));


            if (isItemSurplus((String) currRow.getAttribute("ItemId"))) {
                voSrchSr.setNamedWhereClauseParam("bindTotStk", 0);
            }

            else {
                voSrchSr.setNamedWhereClauseParam("bindTotStk", 1);
            }
            voSrchSr.executeQuery();

            flg = voSrchSr.getRowCount();
            return flg;

        } else if (voName.equals("BinFacet")) {
            ViewObjectImpl votrns = gettransLot1();
            Row currRow = votrns.getCurrentRow();
            ViewObjectImpl voSrchSr = (ViewObjectImpl) findViewObject("SrchBinVo1");
            ViewCriteria vc = voSrchSr.getViewCriteria("SrchBinVoCriteria");
            voSrchSr.applyViewCriteria(vc);
            voSrchSr.setNamedWhereClauseParam("bindOrgId", orgId);
            voSrchSr.setNamedWhereClauseParam("bindCldId", cldId);
            voSrchSr.setNamedWhereClauseParam("bindSlocId", slocId);
            voSrchSr.setNamedWhereClauseParam("bindWhId", whId);
            voSrchSr.setNamedWhereClauseParam("bindItemId", currRow.getAttribute("ItemId"));
            voSrchSr.setNamedWhereClauseParam("bindLotId", currRow.getAttribute("LotId"));
            voSrchSr.setNamedWhereClauseParam("bindBinId", currRow.getAttribute("BinId"));
            voSrchSr.executeQuery();
            return -1;
        }

        else if (voName.equals("LotSrFacet")) {
            ViewObjectImpl votrns = gettransLot1();
            Row currRow = votrns.getCurrentRow();
            ViewObjectImpl voSrchSr = (ViewObjectImpl) findViewObject("SrchSrLot1");
            ViewCriteria vc = voSrchSr.getViewCriteria("SrchSrLotVOCriteria");
            voSrchSr.applyViewCriteria(vc);
            voSrchSr.setNamedWhereClauseParam("bindOrgId", orgId);
            voSrchSr.setNamedWhereClauseParam("bindCldId", cldId);
            voSrchSr.setNamedWhereClauseParam("bindSlocId", slocId);
            voSrchSr.setNamedWhereClauseParam("bindWhId", whId);
            voSrchSr.setNamedWhereClauseParam("bindSrId", currRow.getAttribute("SrId"));
            voSrchSr.setNamedWhereClauseParam("bindItemId", currRow.getAttribute("ItemId"));
            voSrchSr.setNamedWhereClauseParam("bindLotId", currRow.getAttribute("LotId"));

            if (isItemSurplus((String) currRow.getAttribute("ItemId"))) {
                voSrchSr.setNamedWhereClauseParam("bindTotStk", 0);
            }

            else {
                voSrchSr.setNamedWhereClauseParam("bindTotStk", 1);
            }
            voSrchSr.executeQuery();
            flg = voSrchSr.getRowCount();
            return flg;
        }
        return -1;
    }


    public boolean isInvcAuth() {
        ViewObjectImpl vo = this.getSTKADJT1();
        Row row = vo.getCurrentRow();
        if (row != null) {
            String str = (String) row.getAttribute("AuthStat");
            return (str.equalsIgnoreCase("Y")) ? Boolean.TRUE : Boolean.FALSE;
        }
        return Boolean.FALSE;
    }

    /**
     * Container's getter for User1.
     * @return User1
     */
    public ViewObjectImpl getUser1() {
        return (ViewObjectImpl) findViewObject("User1");
    }


    public String getUserName(Integer userId) {
        adfLog.info("Value of UserId::" + userId);
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl vo = this.getUser1();
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.executeQuery();
        Row row[] = vo.getFilteredRows("UsrId", userId);
        //adfLog.info("name:::"+(String) row[0].getAttribute("UsrName"));
        if (row.length > 0) {
            return (String) row[0].getAttribute("UsrName");
        }
        return null;
    }


    public Integer getShowSrSum1Count() {
        return getShowSrSum1().getRowCount();
    }


    public void setTransVo_(String mode, String stockType) {
        if (mode.equals("E")) {
            ViewObjectImpl voStk = getSTKADJT1();
            ViewObjectImpl voLot = getSTKADJTLOT1();
            String whId = (String) voStk.getCurrentRow().getAttribute("WhId");
            String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
            String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
            String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
            Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            ViewObjectImpl stkItmVo = getSTKADJTITM2();
            ViewObjectImpl userSrSumVo = getShowSrSum1();
            RowQualifier rq = new RowQualifier(stkItmVo);
            rq.setWhereClause("CldId = '" + cldId + "' AND DocId = '" + docId + "' AND OrgId = '" + orgId +
                              "' AND SlocId = " + slocId + " AND WhId = '" + whId + "'");
            Row rows[] = stkItmVo.getFilteredRows(rq);
            BigDecimal sum = BigDecimal.ZERO;
            if (rows != null && rows.length > 0) {
                for (Row row : rows) {
                    Row rowExist = getCurrentTransRow((String) row.getAttribute("ItmId"));
                    if (rowExist == null) {
                        //System.out.println("Else 1");

                        if (stockType.equals("ST")) {
                            Row newRow = userSrSumVo.createRow();
                            newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                            newRow.setAttribute("AdjQty", row.getAttribute("AdjtQty"));
                            newRow.setAttribute("requiredQty", row.getAttribute("AdjtQty"));
                            newRow.setAttribute("AdjType", row.getAttribute("AdjtType"));
                            userSrSumVo.insertRow(newRow);
                        }

                        else if (stockType.equals("AD") && row.getAttribute("isNewRow") == null) {
                            //  System.out.println("Else 2" + " Item : "+row.getAttribute("ItmId") + "IsNewRow : "+row.getAttribute("isNewRow"));

                            Row rws[] = voLot.getFilteredRows("ItmId", row.getAttribute("ItmId"));
                            sum = BigDecimal.ZERO;
                            for (Row rw : rws) {
                                sum = sum.add((BigDecimal) rw.getAttribute("AdjtQty"));
                            }

                            Row newRow = userSrSumVo.createRow();
                            newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                            newRow.setAttribute("AdjQty", sum);
                            newRow.setAttribute("requiredQty", row.getAttribute("AdjtQty"));
                            newRow.setAttribute("AdjType", row.getAttribute("AdjtType"));
                            userSrSumVo.insertRow(newRow);
                        }


                        // User have to adjust the quantity.

                        /*   else if(stockType.equals("AD") && row.getAttribute("isNewRow") != null && row.getAttribute("isNewRow").equals("Y"))
                        {
                            System.out.println("Else 3" + " Item : "+row.getAttribute("ItmId") +"IsNewRow : "+row.getAttribute("isNewRow"));

                            Row newRow=userSrSumVo.createRow();
                            newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                            newRow.setAttribute("AdjQty", 0);
                            newRow.setAttribute("requiredQty", row.getAttribute("AdjtQty"));
                            newRow.setAttribute("AdjType", row.getAttribute("AdjtType"));
                            userSrSumVo.insertRow(newRow);
                        } */
                    }
                }
            }


        }
    }

    public String VoucherId() {
        String orgId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cldId = (String) evaluateEL("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(evaluateEL("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        ViewObjectImpl voStk = getSTKADJT1();
        String docId = (String) voStk.getCurrentRow().getAttribute("DocId");
        Object VoucherId = null;
        try {
            VoucherId = callStoredFunction(Types.VARCHAR, " MM_GET_RCPT_PROV_GL(?,?,?,?,?,?)", new Object[] {
                                           cldId, slocId, orgId, docId, "S", "NO"
            });
        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        System.out.println(VoucherId.toString());
        return VoucherId.toString();
    }

    public String chkAjdType() {
        ViewObjectImpl adjItmvo = this.getSTKADJTITM2();
        String docId = (String) this.getSTKADJT1().getCurrentRow().getAttribute("DocId");
        String orgId = (String) this.getSTKADJT1().getCurrentRow().getAttribute("OrgId");
        RowQualifier rq = new RowQualifier(adjItmvo);
        String rtrn = "N";
        rq.setWhereClause("OrgId = '" + orgId + "' and DocId = '" + docId + "'");
        Row[] rr = adjItmvo.getFilteredRows(rq);
        adfLog.info("----------chkAjdType --- " + rr.length + " " + rq.getExprStr());
        if (rr.length > 0) {
            for (Row r : rr) {
                adfLog.info("------------inside row------------");
                if (r.getAttribute("AdjtType") != null) {
                    adfLog.info("-------->>>>>>>>>>>>>>gettin  ");
                } else {
                    adfLog.info("-------->>>>>>>>>>>>>>gettin null ");
                    rtrn = "Y";
                    // return rtrn;
                }
            }

        }
        return rtrn;
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }
}


