package mmperfevalparameter.model.services;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.faces.validator.ValidatorException;

import javax.sql.RowSetInternal;

import mmperfevalparameter.model.services.common.perfEvalparamAM;
import mmperfevalparameter.model.views.MmEvalParamSetVOImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.common.RowSetIteratorHelper;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Dec 07 09:54:22 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class perfEvalparamAMImpl extends ApplicationModuleImpl implements perfEvalparamAM {
    /**
     * This is the default constructor (do not remove).
     */
    public perfEvalparamAMImpl() {
    }

    /**
     * Container's getter for MmEvalParamSet1.
     * @return MmEvalParamSet1
     */
    public ViewObjectImpl getMmEvalParamSet1() {
        return (ViewObjectImpl)findViewObject("MmEvalParamSet1");
    }

    /**
     * Container's getter for MmEvalParam1.
     * @return MmEvalParam1
     */
    public ViewObjectImpl getMmEvalParam1() {
        return (ViewObjectImpl)findViewObject("MmEvalParam1");
    }

    /**
     * Container's getter for FkMmEvalParamVL1.
     * @return FkMmEvalParamVL1
     */
    public ViewLinkImpl getFkMmEvalParamVL1() {
        return (ViewLinkImpl)findViewLink("FkMmEvalParamVL1");
    }

    /**
     * Container's getter for QuotAnaRslt1.
     * @return QuotAnaRslt1
     */
    public ViewObjectImpl getQuotAnaRslt1() {
        return (ViewObjectImpl)findViewObject("QuotAnaRslt1");
    }

    /**
     * Container's getter for mmEoPerfRslt1.
     * @return mmEoPerfRslt1
     */
    public ViewObjectImpl getmmEoPerfRslt1() {
        return (ViewObjectImpl)findViewObject("mmEoPerfRslt1");
    }
    Integer slocid = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    String orgid = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    String cldid = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    
    public void setBindVar(Integer slocid ,String orgId, String cldid) {
  /*  getMmEvalParamSet1().setWhereClause("SLOC_ID = "+slocid+" AND  ORG_ID = '"+orgId+"' AND CLD_ID = '"+cldid+"'");
    getMmEvalParamSet1().executeQuery();

    getmmEoPerfRslt1().setWhereClause("SLOC_ID = "+slocid+" AND  ORG_ID = '"+orgId+"' AND CLD_ID = '"+cldid+"'");
    getmmEoPerfRslt1().executeQuery();

    getQuotAnaRslt1().setWhereClause("SLOC_ID = "+slocid+" AND  ORG_ID = '"+orgId+"' AND CLD_ID = '"+cldid+"'");
    getQuotAnaRslt1().executeQuery();
    */
        ViewObjectImpl evalParamSet1 = this.getMmEvalParamSet1();
        ViewObjectImpl eoPerfRslt1 = this.getmmEoPerfRslt1();
        ViewObjectImpl anaRslt1 = this.getQuotAnaRslt1();
        ViewObjectImpl evalParam1 = this.getMmEvalParam1();
        
        evalParam1.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        evalParam1.setNamedWhereClauseParam("OrgIdBindVar", orgId);
        evalParam1.setNamedWhereClauseParam("CldIdBindVar", cldid);
        evalParam1.executeQuery();
        
        anaRslt1.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        anaRslt1.setNamedWhereClauseParam("OrgIdBindVar", orgId);
        anaRslt1.setNamedWhereClauseParam("CldIdBindVar", cldid);
        anaRslt1.executeQuery();
        
        eoPerfRslt1.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        eoPerfRslt1.setNamedWhereClauseParam("OrgIdBindVar", orgId);
        eoPerfRslt1.setNamedWhereClauseParam("CldIdBindVar", cldid);
        eoPerfRslt1.executeQuery();
        
        evalParamSet1.setNamedWhereClauseParam("SlocIdBindVar", slocid);
        evalParamSet1.setNamedWhereClauseParam("OrgIdBindVar", orgId);
        evalParamSet1.setNamedWhereClauseParam("CldIdBindVar", cldid);
        evalParamSet1.executeQuery();

    }
    
    public String resolvEl(String data){
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           String Message=valueExp.getValue(elContext).toString();
           return Message;
         }
    
    public void CheckweghtValue(){
        System.out.println("in the CheckweghtValue");
     ViewObjectImpl view=this.getMmEvalParam1();
     RowSetIterator r=view.createRowSetIterator(null);
     while(r.hasNext()) {
        Row r1=r.next();
         Number w =(Number)r1.getAttribute("ParamWtg");
         System.out.println(w);
         if(w.equals(NUMBER.zero())) {
             throw new ValidatorException(new FacesMessage(FacesMessage.SEVERITY_ERROR,"Weightage will not be zero",null));
         }
     }
     }
    }

