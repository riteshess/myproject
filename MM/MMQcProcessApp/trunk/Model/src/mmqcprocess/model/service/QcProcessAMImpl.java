package mmqcprocess.model.service;

import java.sql.CallableStatement;
import java.sql.SQLException;
//import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmqcprocess.model.views.LovItmIdOImpl;
import mmqcprocess.model.views.MmMtlQcDtlVOImpl;
import mmqcprocess.model.views.MmMtlQcVOImpl;
import mmqcprocess.model.views.MmQcParamItmVOImpl;

import oracle.jbo.domain.Timestamp;
import mmqcprocess.model.service.common.QcProcessAM;



import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Array;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 14 10:12:15 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QcProcessAMImpl extends ApplicationModuleImpl implements QcProcessAM {
    /**
     * This is the default constructor (do not remove).
     */
    
    
    Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String p_cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String p_ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    public QcProcessAMImpl() {
    }
    private static ADFLogger loginfo= ADFLogger.createADFLogger(QcProcessAMImpl.class);
   Number zero = new Number(0);
    /**
     * Container's getter for MmMtlQc.
     * @return MmMtlQc
     */
    public ViewObjectImpl getMmMtlQc() {
        return (ViewObjectImpl)findViewObject("MmMtlQc");
    }

    /**
     * Container's getter for MmMtlQcRslt.
     * @return MmMtlQcRslt
     */
    public ViewObjectImpl getMmMtlQcRslt() {
        return (ViewObjectImpl)findViewObject("MmMtlQcRslt");
    }

    /**
     * Container's getter for MmQcParamItm.
     * @return MmQcParamItm
     */
    public ViewObjectImpl getMmQcParamItm() {
        return (ViewObjectImpl)findViewObject("MmQcParamItm");
    }

    /**
     * Container's getter for MmMtlQcDtl.
     * @return MmMtlQcDtl
     */
    public MmMtlQcDtlVOImpl getMmMtlQcDtl() {
        return (MmMtlQcDtlVOImpl)findViewObject("MmMtlQcDtl");
    }

    /**
     * Container's getter for FkMmMtlQcRsltVL1.
     * @return FkMmMtlQcRsltVL1
     */
    public ViewLinkImpl getFkMmMtlQcRsltVL1() {
        return (ViewLinkImpl)findViewLink("FkMmMtlQcRsltVL1");
    }

    /**
     * Container's getter for MtlQcRstTOQcParamItmVL1.
     * @return MtlQcRstTOQcParamItmVL1
     */
    public ViewLinkImpl getMtlQcRstTOQcParamItmVL1() {
        return (ViewLinkImpl)findViewLink("MtlQcRstTOQcParamItmVL1");
    }

    /**
     * Container's getter for FkMmMtlQcDtlVL1.
     * @return FkMmMtlQcDtlVL1
     */
    public ViewLinkImpl getFkMmMtlQcDtlVL1() {
        return (ViewLinkImpl)findViewLink("FkMmMtlQcDtlVL1");
    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
           loginfo.info("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    public void setTxnIdForCurrentRow(Integer UsrId,String CldId,Integer SlocId,String OrgId){
    Row currentRow=this.getMmMtlQc().getCurrentRow();
    String txnId =(String)(callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {CldId,SlocId, OrgId,UsrId, new Integer(18512),new Integer(0)})); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
    loginfo.info("--TxnId new created--"+txnId);
    currentRow.setAttribute("QcTxnId", txnId);
    currentRow.setAttribute("QcTxnDt", new Timestamp(System.currentTimeMillis()));
    currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
    }
    
    public void addDtlItmFromParam(){
       // ViewObjectImpl qcDtl = this.getMmMtlQcDtl();
      //  ViewObjectImpl paramVo = this.getMmQcParamItm();
       // ViewObjectImpl qcRslt = this.getMmMtlQcRslt();
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl qcDtl = this.getMmMtlQcDtl1();
         ViewObjectImpl paramVo = this.getMmQcParamItm1();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        Row qcRsltCurr = qcRslt.getCurrentRow();
        Row mtlQcRow = mtlQc.getCurrentRow();
      RowSetIterator rsi = paramVo.createRowSetIterator(null);
      int okCount=0;
      int rewkCount=0;
      int rjctCount=0;
      int count =1;
      Number one = new Number(1);
      Integer qcChkType = Integer.parseInt(mtlQcRow.getAttribute("QcChkType").toString());
     loginfo.info("chk type "+qcChkType);
      Integer slNo = Integer.parseInt(callStoredFunction(Types.NUMERIC, "FN_GET_QC_CHK_SLNO (?,?,?,?,?,?)", new Object[] {qcRsltCurr.getAttribute("CldId").toString(),Integer.parseInt(qcRsltCurr.getAttribute("SlocId").toString()), qcRsltCurr.getAttribute("OrgId").toString()
                                                                                                                                               ,qcRsltCurr.getAttribute("QcTxnId").toString(), qcRsltCurr.getAttribute("ItmId").toString(),qcRsltCurr.getAttribute("ItmUom").toString()}).toString());
      while(rsi.hasNext()){
          Row currRow = rsi.next();
          Row insrtNew = qcDtl.createRow();
          insrtNew.setAttribute("CldId", qcRsltCurr.getAttribute("CldId"));
          insrtNew.setAttribute("SlocId", qcRsltCurr.getAttribute("SlocId"));
          insrtNew.setAttribute("OrgId", qcRsltCurr.getAttribute("OrgId"));
          insrtNew.setAttribute("QcTxnId", qcRsltCurr.getAttribute("QcTxnId"));
          insrtNew.setAttribute("ItmId", qcRsltCurr.getAttribute("ItmId"));
          insrtNew.setAttribute("ItmUom", qcRsltCurr.getAttribute("ItmUom"));
          insrtNew.setAttribute("ChkSrlNo", slNo);
          insrtNew.setAttribute("ParamId", currRow.getAttribute("ParamId"));
          insrtNew.setAttribute("StdVal", currRow.getAttribute("StdVal"));
          insrtNew.setAttribute("LowerLimit", currRow.getAttribute("LowerLimit"));
          insrtNew.setAttribute("UpperLimit", currRow.getAttribute("UpperLimit"));
          if(qcChkType==282){
            insrtNew.setAttribute("SrNo", qcRsltCurr.getAttribute("TransSrNo"));
          }
          if(Integer.parseInt(currRow.getAttribute("ParamType").toString())==274){
          insrtNew.setAttribute("ActualVal", currRow.getAttribute("TransActualVal"));
          }else if(Integer.parseInt(currRow.getAttribute("ParamType").toString())==275){
             insrtNew.setAttribute("ActualVal", currRow.getAttribute("TransForBooleanType"));
          }
          insrtNew.setAttribute("QcRslt", currRow.getAttribute("TransQcCheckStatus"));
          qcDtl.insertRow(insrtNew);
          qcDtl.executeQuery();
          if(currRow.getAttribute("TransQcCheckStatus")!= null){
              if(Integer.parseInt(currRow.getAttribute("TransQcCheckStatus").toString())==284){
                  okCount=okCount+1;
              }else if(Integer.parseInt(currRow.getAttribute("TransQcCheckStatus").toString())==285){
                  rewkCount=rewkCount+1;
              }else if(Integer.parseInt(currRow.getAttribute("TransQcCheckStatus").toString())==286){
                  rjctCount=rjctCount+1;
              }
          }
          if(currRow.getAttribute("ParamType")!=null){
              if(Integer.parseInt(currRow.getAttribute("ParamType").toString())==274){
              currRow.setAttribute("TransActualVal", null);
              currRow.setAttribute("TransQcCheckStatus", null);
              }else if(Integer.parseInt(currRow.getAttribute("ParamType").toString())==275){
              currRow.setAttribute("TransForBooleanType", null);
              currRow.setAttribute("TransQcCheckStatus", 284);
              }
          }
         
      }
        Number inspctnQty = (Number)(qcRsltCurr.getAttribute("TransQcCheckNo"));
        Number uomCnvrFctr = (Number)(qcRsltCurr.getAttribute("UomConvFctr"));
        Number inspctnQtySp = (Number)inspctnQty.divide(uomCnvrFctr).round(2);
        loginfo.info("inspctnQtySp     "+inspctnQtySp);
      if(okCount > 0 && rewkCount ==0 && rjctCount==0){
          Number okBsNew = (Number)(qcRsltCurr.getAttribute("QcOkQtyBs"));
          Number okBsvalue =okBsNew.add(inspctnQty);
          qcRsltCurr.setAttribute("QcOkQtyBs", okBsvalue);
          Number okNew = (Number)(qcRsltCurr.getAttribute("QcOkQty"));
          Number okvalue =okNew.add(inspctnQtySp);
          qcRsltCurr.setAttribute("QcOkQty", okvalue);
         
      }else if(rjctCount>0){
          Number rjctBsNew = (Number)(qcRsltCurr.getAttribute("QcRejQtyBs"));
          Number rjctBsvalue =rjctBsNew.add(inspctnQty);
          qcRsltCurr.setAttribute("QcRejQtyBs", rjctBsvalue);
          Number rjctNew = (Number)(qcRsltCurr.getAttribute("QcRejQty"));
          Number rjctvalue =rjctNew.add(inspctnQtySp);
          qcRsltCurr.setAttribute("QcRejQty", rjctvalue);
      }else if(rewkCount>0 && rjctCount==0){
          Number rwrkBsNew = (Number)(qcRsltCurr.getAttribute("QcRwkQtyBs"));
          Number rwrkBsvalue =rwrkBsNew.add(inspctnQty);
          qcRsltCurr.setAttribute("QcRwkQtyBs", rwrkBsvalue);
          Number rwrkNew = (Number)(qcRsltCurr.getAttribute("QcRwkQty"));
          Number rwrkvalue =rwrkNew.add(inspctnQtySp);
          qcRsltCurr.setAttribute("QcRwkQty", rwrkvalue);
      }
    qcRsltCurr.setAttribute("TransQcCheckNo", one); 
    /*   Number okQty=(Number)(qcRsltCurr.getAttribute("QcOkQty"));
      Number rwrkQty=(Number)(qcRsltCurr.getAttribute("QcRwkQty"));
      Number rjctQty=(Number)(qcRsltCurr.getAttribute("QcRejQty")); */
        Number okQty=(Number)(qcRsltCurr.getAttribute("QcOkQtyBs"));
        Number rwrkQty=(Number)(qcRsltCurr.getAttribute("QcRwkQtyBs"));
        Number rjctQty=(Number)(qcRsltCurr.getAttribute("QcRejQtyBs"));
      Number doneQCQty =okQty.add(rwrkQty).add(rjctQty);
      loginfo.info("doneQCQty--------------------"+doneQCQty);
      qcRsltCurr.setAttribute("TransTotalQcDoneQty", doneQCQty);
        if(qcChkType==282){
            qcRsltCurr.setAttribute("TransSrNo", null); // for sr no 
        }
       rsi.closeRowSetIterator();
        this.getDBTransaction().postChanges();
    }

    public void resetSrNo(){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        Row qcRsltCurr = qcRslt.getCurrentRow();
        Row mtlQcRow = mtlQc.getCurrentRow();
        Integer qcChkType = Integer.parseInt(mtlQcRow.getAttribute("QcChkType").toString());
        loginfo.info("chk type "+qcChkType);
        if(qcChkType==282){
            loginfo.info("dddd    "+qcRsltCurr.getAttribute("TransSrNo"));
            qcRsltCurr.setAttribute("TransSrNo", null); // for sr no 
            loginfo.info("dddd afterer   "+qcRsltCurr.getAttribute("TransSrNo"));
        }
    }
    /**
     * Container's getter for RcptItmVO1.
     * @return RcptItmVO1
     */
    public ViewObjectImpl getRcptItmVO1() {
        return (ViewObjectImpl)findViewObject("RcptItmVO1");
    }
    public Object resolvElDCMsg(String data) {
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           return valueExp.getValue(elContext);
       } 
    
    public ArrayList checkParamItmExist(){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl qcRcptItm = this.getRcptItmVO1();
      ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        ViewObjectImpl paramItm = this.getLovQcParamItm();
        Row mtlQcCurr = mtlQc.getCurrentRow();
        ArrayList itmdecsList = new ArrayList();
        Row[] itmRow = this.getRcptItmVO1().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId")); 
        loginfo.info("Length of itemRow::::"+itmRow.length);
       if(itmRow.length>0){
           for(Row r : itmRow){
               if(("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString())))  {
                   RowQualifier rowQualifier = new RowQualifier(paramItm);
                   rowQualifier.setWhereClause("ItmId = '"+r.getAttribute("ItmId").toString()+"'");
                   Row[] row = paramItm.getFilteredRows(rowQualifier);
                   loginfo.info("Length of Row:::::"+row.length+" Expression+"+rowQualifier.getExprStr());
                   if(row.length>0){
                   }else{
                       String itmDesc=null;
                       this.getLovItmIdVw1().setNamedWhereClauseParam("CldIdBind", p_cldId);
                       this.getLovItmIdVw1().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
                       this.getLovItmIdVw1().setNamedWhereClauseParam("OrgIdBind", p_org_id);
                       this.getLovItmIdVw1().setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
                       this.getLovItmIdVw1().executeQuery();
                       
                       Row[] rr = this.getLovItmIdVw1().getFilteredRows("ItmId",r.getAttribute("ItmId"));
                    
                       loginfo.info("Length rr::"+rr.length+"  "+r.getAttribute("ItmId"));
                       if(rr.length>0){
                           itmDesc = rr[0].getAttribute("ItmDesc").toString();
                           loginfo.info("dec:::"+itmDesc);
                       }
                       if(itmDesc!=null){
                           itmdecsList.add(itmDesc);
                       }
                   }
               }
           }
           loginfo.info("arr---------"+itmdecsList);
       }
        return itmdecsList;
    }
    
    public void addQcRsltItm(){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl qcRcptItm = this.getRcptItmVO1();
       ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
       ViewObjectImpl qcSrc = this.getMmMtlQcSrc1();
        Row mtlQcCurr = mtlQc.getCurrentRow();
      ViewObjectImpl RcptItm = this.getRcptItm2();
        String addRcptItm = "Y";
        Row[] srcRow = this.getLovMtlRcptSrc().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
        Row[] itmRow = this.getRcptItmVO1().getFilteredRows("DocId", mtlQcCurr.getAttribute("QcSrcTxnId"));
        ArrayList arrRcptItm = new ArrayList();
       
       // check for Item Id , Item Unit , Item Base Unit , Reciept Quantity and Reciept base Quantity and unit conversion factor Not null ... !!
        
        if(itmRow.length>0){
        for(Row r1 : itmRow){
            if(("Y".equalsIgnoreCase(r1.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r1.getAttribute("QcOverrideFlg").toString())))  {
                if(r1.getAttribute("ItmId") == null || r1.getAttribute("ItmUom") == null || r1.getAttribute("ItmUomBs") == null || r1.getAttribute("RcptQty")==null || r1.getAttribute("RcptQtyBs") == null || r1.getAttribute("UomConvFctr") ==null){
                    addRcptItm = "N";
                    if(r1.getAttribute("ItmId")!=null){
                            String ItmName =null;
                           String itmid = r1.getAttribute("ItmId").toString();
                            if(itmid!=null){
                                    this.getLovItmIdVw1().setNamedWhereClauseParam("CldIdBind", p_cldId);
                                    this.getLovItmIdVw1().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
                                    this.getLovItmIdVw1().setNamedWhereClauseParam("OrgIdBind", p_org_id);
                                    this.getLovItmIdVw1().setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
                                    this.getLovItmIdVw1().executeQuery();
                                Row[] r2 = this.getLovItmIdVw1().getFilteredRows("ItmId", itmid);
                            
                                if(r2.length>0){
                                    ItmName = r2[0].getAttribute("ItmDesc").toString();
                                }
                                }
                                    arrRcptItm.add(ItmName);  
                        
                    }
                }
            }
        }
        }
        loginfo.info("addRcptItm---------------"+addRcptItm+"-- arrRcptItm  "+arrRcptItm);
        
        // If all condititon true for Reciept
        
        if("Y".equalsIgnoreCase(addRcptItm) && arrRcptItm.isEmpty()){
          
            loginfo.info("lenth   "+srcRow.length);
            if(srcRow.length>0){
                for(Row r1 :  srcRow){
                   RowQualifier newRQforItm = new RowQualifier(RcptItm);
                    newRQforItm.setWhereClause("DocId = '"+r1.getAttribute("DocId").toString()+"' and DocIdSrc = '"+r1.getAttribute("DocIdSrc").toString()+"'");
                    Row []rcptItmRow = RcptItm.getFilteredRows(newRQforItm);
                    loginfo.info(newRQforItm.getExprStr());
                    loginfo.info("itm row in src --  "+rcptItmRow.length);
                int count=0;
                    
                    // check for add Source document no or Not.
                    if(rcptItmRow.length>0){
                        for(Row rI : rcptItmRow){
                            if(rI.getAttribute("ItmId")!=null){
                            Number rcptBs = (Number)rI.getAttribute("RcptQtyBs");
                                if(("Y".equalsIgnoreCase(rI.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(rI.getAttribute("QcOverrideFlg").toString())) && rcptBs.compareTo(zero)==1 )  { 
                                    count= count+1;
                            }
                        }
                    }
                    }
            // If Count Is greater than 0 .. item QC required for Item . add Source Document no.
                    if(count>0){
                    loginfo.info("create Src row -----------------");
                    loginfo.info("doc src -------"+r1.getAttribute("DocIdSrc"));
                    Row srcNewRow = qcSrc.createRow();
                    srcNewRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
                    srcNewRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
                    srcNewRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
                    srcNewRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
                    srcNewRow.setAttribute("DocIdSrc", r1.getAttribute("DocIdSrc"));
                    if(r1.getAttribute("DocDtSrc")!=null){
                        loginfo.info("doc Date Src not null -----------------");
                      srcNewRow.setAttribute("DocDtSrc", r1.getAttribute("DocDtSrc"));
                    }else if(r1.getAttribute("DocDtSrc")==null){
                        loginfo.info("doc Date Src is  null -----------------");
                      srcNewRow.setAttribute("DocDtSrc", new Timestamp(System.currentTimeMillis()));
                    }
                    srcNewRow.setAttribute("DlvSchdlNo", r1.getAttribute("DlvSchdlNo"));
                    srcNewRow.setAttribute("DocTypeSrc", r1.getAttribute("DocTypeSrc"));
                    qcSrc.insertRow(srcNewRow);
                    qcSrc.executeQuery();
                    }else{
                        loginfo.info("NO ITEM FOR QC IN THIS SOURCE DOCUMENT NO......!");
                    }
                }
            }
        if(itmRow.length>0){
        for(Row r : itmRow){
            Number rcptBs = (Number)r.getAttribute("RcptQtyBs");
            loginfo.info("rcptBs------------------   "+rcptBs);
            if(("Y".equalsIgnoreCase(r.getAttribute("QcReqdFlg").toString())) && ("N".equalsIgnoreCase(r.getAttribute("QcOverrideFlg").toString())) && rcptBs.compareTo(zero)==1)  {
            Row newRow =qcRslt.createRow();
            newRow.setAttribute("CldId", mtlQcCurr.getAttribute("CldId"));
            newRow.setAttribute("SlocId", mtlQcCurr.getAttribute("SlocId"));
            newRow.setAttribute("OrgId", mtlQcCurr.getAttribute("OrgId"));
            newRow.setAttribute("QcTxnId", mtlQcCurr.getAttribute("QcTxnId"));
            newRow.setAttribute("DocIdSrc", r.getAttribute("DocIdSrc"));
            newRow.setAttribute("DlvSchdlNo", r.getAttribute("DlvSchdlNo"));
            newRow.setAttribute("ItmId", r.getAttribute("ItmId"));
            newRow.setAttribute("ItmUom", r.getAttribute("ItmUom"));
            newRow.setAttribute("QcTotQty", r.getAttribute("RcptQty"));
            newRow.setAttribute("QcOkQty", new Number(0));
            newRow.setAttribute("QcRejQty", new Number(0));
            newRow.setAttribute("QcRwkQty", new Number(0));
            newRow.setAttribute("ItmUomBs", r.getAttribute("ItmUomBs"));
            newRow.setAttribute("QcTotQtyBs", r.getAttribute("RcptQtyBs"));
            newRow.setAttribute("UomConvFctr", r.getAttribute("UomConvFctr"));
            newRow.setAttribute("QcOkQtyBs", new Number(0));
            newRow.setAttribute("QcRejQtyBs", new Number(0));
            newRow.setAttribute("QcRwkQtyBs", new Number(0));
            newRow.setAttribute("UsrIdCreate", mtlQcCurr.getAttribute("UsrIdCreate"));
            newRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            newRow.setAttribute("TransQcSrcTxnId", mtlQcCurr.getAttribute("QcSrcTxnId"));
            newRow.setAttribute("TransQcCheckNo", new Number(1));
            newRow.setAttribute("TransTotalQcDoneQty", new Number(0));
            qcRslt.insertRow(newRow);
            qcRslt.executeQuery();
            }
        }
        }
        }else{
            FacesMessage msg =
            //new FacesMessage(FacesMessage.SEVERITY_ERROR,"Can't add Receipt Item .Required Information Incomplete .!! ",null);
                //resolvElDCMsg("#{bundle['APP.COA.FinCOAMsg8.Label']}").toString();
                new FacesMessage(FacesMessage.SEVERITY_ERROR,resolvElDCMsg("#{bundle['MSG.698']}").toString(),null);
            
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, msg);
        }
    }
    public void resetSearch(){
       ViewObjectImpl searchVo=this.getMtlQcSearchVO();
       searchVo.setNamedWhereClauseParam("BindQcItmType",null);
       searchVo.setNamedWhereClauseParam("BindRcpyNo", null);
       searchVo.setNamedWhereClauseParam("BindFromDate", null);
       searchVo.setNamedWhereClauseParam("BindToDate", null);
       searchVo.setNamedWhereClauseParam("BindItemId", null);
       searchVo.setNamedWhereClauseParam("BindOrgId", "-1");
       searchVo.executeQuery();
    }
    
    public String SearchQcProcess(){
        ViewObjectImpl qctransVo=getTransQcSearch();
        Row qcCurrr=qctransVo.getCurrentRow();
        
        if(qcCurrr!=null){
            String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
           System.out.println("curr row is "+qcCurrr);
           /*  String qcType=qcCurrr.getAttribute("QcItmTypeTrans").toString();
            String ItmName=qcCurrr.getAttribute("ItemNmTrans").toString();
            String rcptNo=qcCurrr.getAttribute("ReceiptNoTrans").toString();
            Date fromdate=(Date)qcCurrr.getAttribute("FromDTTrans");
            Date todate=(Date) qcCurrr.getAttribute("ToDttrans"); */
           System.out.println("qc typer "+qcCurrr.getAttribute("QcItmTypeTrans") +" rcptno " +qcCurrr.getAttribute("ReceiptNoTrans")+" fromdate "+ qcCurrr.getAttribute("FromDTTrans")
                              +" to date "+  qcCurrr.getAttribute("ToDttrans")+ " item name "+qcCurrr.getAttribute("ItemNmTrans")+" item id "+qcCurrr.getAttribute("ItmIdTrans") );
           
            ViewObjectImpl searchVo=this.getMtlQcSearchVO();
            searchVo.setNamedWhereClauseParam("BindQcItmType",qcCurrr.getAttribute("QcItmTypeTrans"));
            searchVo.setNamedWhereClauseParam("BindRcpyNo", qcCurrr.getAttribute("ReceiptNoTrans"));
            searchVo.setNamedWhereClauseParam("BindFromDate",qcCurrr.getAttribute("FromDTTrans"));
            searchVo.setNamedWhereClauseParam("BindToDate", qcCurrr.getAttribute("ToDttrans"));
            searchVo.setNamedWhereClauseParam("BindItemId", qcCurrr.getAttribute("ItmIdTrans"));
            searchVo.setNamedWhereClauseParam("BindOrgId", p_org_id);
            searchVo.executeQuery();
            
        }
        
        
        return null;
    }
    public void qcViewQuery(){
         ViewObject vo = this.getMmMtlQc();
         ViewObjectImpl servo = this.getMtlQcSearchVO();
         Row currRow = servo.getCurrentRow();
       ViewCriteria vc = getMmMtlQc().getViewCriteria("MmMtlQcVOCriteria");
       vo.applyViewCriteria(vc);
       vo.setNamedWhereClauseParam("CldIdBind", currRow.getAttribute("CldId"));
       vo.setNamedWhereClauseParam("SlocIdBind", currRow.getAttribute("SlocId"));
       vo.setNamedWhereClauseParam("OrgIdBind", currRow.getAttribute("OrgId"));
       vo.setNamedWhereClauseParam("QcTxnIdBind", currRow.getAttribute("QcTxnId"));
       vo.executeQuery();
    }
    public void qcResetViewQuery(){
         ViewObject vo = this.getMmMtlQc();
         ViewObjectImpl servo = this.getMtlQcSearchVO();
         Row currRow = servo.getCurrentRow();
       ViewCriteria vc = getMmMtlQc().getViewCriteria("MmMtlQcVOCriteria");
       vo.applyViewCriteria(vc);
       vo.setNamedWhereClauseParam("CldIdBind", null);
       vo.setNamedWhereClauseParam("SlocIdBind", null);
       vo.setNamedWhereClauseParam("OrgIdBind", null);
       vo.setNamedWhereClauseParam("QcTxnIdBind", null);
       vo.executeQuery();
    }
    
    
    public void resetDtlQuery(){
        ViewObject dltvo = this.getMmMtlQcDtl1();
        ViewCriteria vc = getMmMtlQcDtl1().getViewCriteria("MmMtlQcDtlVOCriteria");
        dltvo.applyViewCriteria(vc);
        dltvo.setNamedWhereClauseParam("SrNoBind", null);
        dltvo.setNamedWhereClauseParam("ParamIdBind", null);
        dltvo.executeQuery();
    }
    public void editQcDtl(Integer statusValue){
        ViewObjectImpl qcDlt = this.getMmMtlQcDtl1();
        ViewObjectImpl qcRslt = this.getMmMtlQcRslt1();
        Row currRowRslt = qcRslt.getCurrentRow();
        Row currRow = qcDlt.getCurrentRow();
        RowQualifier rowQualifier =new RowQualifier(qcDlt);
        rowQualifier.setWhereClause(" ItmId ='"+currRow.getAttribute("ItmId").toString()+"' and ChkSrlNo ="+Integer.parseInt(currRow.getAttribute("ChkSrlNo").toString())+"");
        Row[] rows=qcDlt.getFilteredRows(rowQualifier);
        loginfo.info(rowQualifier.getExprStr());
        loginfo.info("no of row"+rows.length);
        int okCount=0;
        int rewkCount=0;
        int rjctCount=0;
        Number one = new Number(1);
        if(rows.length>0){
            for(Row r : rows){
                Integer qtyStatus = Integer.parseInt(r.getAttribute("QcRslt").toString());
                if(qtyStatus==284){
                    okCount=okCount+1;
                        }else if(qtyStatus==285){
                            rewkCount= rewkCount+1;
                }else if(qtyStatus==286){
                    rjctCount=rjctCount+1;
                }
            }
        }
        loginfo.info("previous value ------"+statusValue);
        loginfo.info("okCount---- "+okCount+"rewkCount--- "+rewkCount+"rjctCount  "+rjctCount);
         Number okSpNew = (Number)(currRowRslt.getAttribute("QcOkQty"));
        Number rjctSpNew = (Number)(currRowRslt.getAttribute("QcRejQty"));
        Number rwrkSpNew = (Number)(currRowRslt.getAttribute("QcRwkQty")); 
       Number okNew = (Number)(currRowRslt.getAttribute("QcOkQtyBs"));
        Number rjctNew = (Number)(currRowRslt.getAttribute("QcRejQtyBs"));
        Number rwrkNew = (Number)(currRowRslt.getAttribute("QcRwkQtyBs"));
        Number uomCnvrFctr = (Number)(currRowRslt.getAttribute("UomConvFctr"));
        Number inspctnQtySp = one.divide(uomCnvrFctr);
        if(okCount > 0 && rewkCount ==0 && rjctCount==0){
            if(statusValue==284){
                
            }else{
            currRowRslt.setAttribute("QcOkQtyBs", okNew.add(one));
                currRowRslt.setAttribute("QcOkQty", okSpNew.add(inspctnQtySp)); //
                if(statusValue==285){
                    currRowRslt.setAttribute("QcRwkQtyBs", rwrkNew.minus(one));
                    currRowRslt.setAttribute("QcRwkQty", rwrkSpNew.minus(inspctnQtySp));
                }else if(statusValue==286){
                currRowRslt.setAttribute("QcRejQtyBs", rjctNew.minus(one));
                    currRowRslt.setAttribute("QcRejQty", rjctSpNew.minus(inspctnQtySp));
                }
            }
        }else if(rjctCount>0){
            if(statusValue==286){
                
            }else{
            currRowRslt.setAttribute("QcRejQtyBs", rjctNew.add(one));
                currRowRslt.setAttribute("QcRejQty", rjctSpNew.add(inspctnQtySp));
                if(statusValue==285){
                    currRowRslt.setAttribute("QcRwkQtyBs", rwrkNew.minus(one));
                    currRowRslt.setAttribute("QcRwkQty", rwrkSpNew.minus(inspctnQtySp));
                }else if(statusValue==284){
                currRowRslt.setAttribute("QcOkQtyBs", okNew.minus(one));
                    currRowRslt.setAttribute("QcOkQty", okSpNew.minus(inspctnQtySp));
                }
            }
        }else if(rewkCount>0 && rjctCount==0){
            if(statusValue==285){
                
            }else{
            currRowRslt.setAttribute("QcRwkQtyBs", rwrkNew.add(one));
                currRowRslt.setAttribute("QcRwkQty", rwrkSpNew.add(inspctnQtySp));
                if(statusValue==286){
                    currRowRslt.setAttribute("QcRejQtyBs", rjctNew.minus(one));
                    currRowRslt.setAttribute("QcRejQty", rjctSpNew.minus(inspctnQtySp));
                }else if(statusValue==284){
                currRowRslt.setAttribute("QcOkQtyBs", okNew.minus(one));
                    currRowRslt.setAttribute("QcOkQty", okSpNew.minus(inspctnQtySp));
                }
            }
        }
    
    }
    public Integer itemPreviousStatus(){
       // ViewObjectImpl qcDlt = this.getMmMtlQcDtl();
        ViewObjectImpl qcDlt = this.getMmMtlQcDtl1();
        Row currRow = qcDlt.getCurrentRow();
        RowQualifier rowQualifier =new RowQualifier(qcDlt);
        rowQualifier.setWhereClause(" ItmId ='"+currRow.getAttribute("ItmId").toString()+"' and ChkSrlNo ="+Integer.parseInt(currRow.getAttribute("ChkSrlNo").toString())+"");
        Row[] rows=qcDlt.getFilteredRows(rowQualifier);
        loginfo.info(rowQualifier.getExprStr());
        loginfo.info("no1 of row"+rows.length);
        int okCount=0;
        int rewkCount=0;
        int rjctCount=0;
        int status=0;
        if(rows.length>0){
            for(Row r : rows){
                Integer qtyStatus = Integer.parseInt(r.getAttribute("QcRslt").toString());
                if(qtyStatus==284){
                    okCount=okCount+1;
                        }else if(qtyStatus==285){
                            rewkCount= rewkCount+1;
                }else if(qtyStatus==286){
                    rjctCount=rjctCount+1;
                }
            }
        }
        loginfo.info("okCount1---- "+okCount+"rewkCount1--- "+rewkCount+"rjctCount1  "+rjctCount);
    
        if(okCount > 0 && rewkCount ==0 && rjctCount==0){
            status=284;
        }else if(rjctCount>0){
            status=286;
        }else if(rewkCount>0 && rjctCount==0){
            status=285;
        }
    return status;
    }
    
    public String isParamStatusTrue(){
        ViewObjectImpl paramvo = this.getMmQcParamItm1();
        int totalCount =paramvo.getRowCount();
        int rangeSize= paramvo.getRangeSize();
        paramvo.setRangeSize(totalCount);
        Row[] rr =paramvo.getAllRowsInRange();
        int count=0;
        for(Row r :rr){
            try{
                                                                                                  
                if(r.getAttribute("TransQcCheckStatus")==null){
                    count=count+1;
                   //Integer qcChkSt  = Integer.parseInt(r.getAttribute("TransQcCheckStatus").toString());
                }
            }catch(NullPointerException npe){
                npe.printStackTrace();
            }
        }
        paramvo.setRangeSize(rangeSize);
        if(count==0){
            return "N";
        }else{
        return "Y";
        }
    }
    public String isSrNoDuplicate(String SrNoValue){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();
        ViewObjectImpl mtlDlt =this.getMmMtlQcDtl2();
        Row mtlQcRow = mtlQc.getCurrentRow();
        Row mtlQcRsltRow = mtlQcRslt.getCurrentRow();
        loginfo.info(" Sr No   "+SrNoValue);
        RowQualifier rq = new RowQualifier(mtlDlt);
            rq.setWhereClause("ItmId = '"+mtlQcRsltRow.getAttribute("ItmId")+"' and SrNo = '"+SrNoValue+"'");
        loginfo.info(rq.getExprStr());
        Row[] dltRow = mtlDlt.getFilteredRows(rq);
       // Row[] dltRow = this.getMmMtlQcDtl2().getFilteredRows("SrNo", SrNoValue);
       loginfo.info("lent Sr No   "+dltRow.length);
        if(dltRow.length>0){
            return "Y";
        }else{
        return "N";
        }
    }
    public void updateCompleteQcCheck(){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcSrc = this.getMmMtlQcSrc1();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();
        Row currQc = mtlQc.getCurrentRow();
        int count = 0;
        String qcTxnId = currQc.getAttribute("QcTxnId").toString();
        Integer qcChkType = Integer.parseInt(currQc.getAttribute("QcChkType").toString());
        RowQualifier rowQualifier = new RowQualifier(mtlQcSrc);
        rowQualifier.setWhereClause("QcTxnId = '"+qcTxnId+"'");
        loginfo.info(rowQualifier.getExprStr());
        Row[] rowSrc = mtlQcSrc.getFilteredRows(rowQualifier);
        loginfo.info("rowSrc.length------"+rowSrc.length);
        if(rowSrc.length>0){
            for(Row r : rowSrc){
                String docSrc = r.getAttribute("DocIdSrc").toString();
                loginfo.info("docSrc-------"+docSrc);
                RowQualifier rowQualifier1 = new RowQualifier(mtlQcRslt);
                rowQualifier1.setWhereClause("QcTxnId = '"+qcTxnId+"' and DocIdSrc = '"+docSrc+"'");
                loginfo.info(rowQualifier1.getExprStr());
                Row[] itmRow = mtlQcRslt.getFilteredRows(rowQualifier1);
                 loginfo.info("itmRow.length------"+itmRow.length);
                loginfo.info(" before itm row ----------");
                if(itmRow.length>0){
                    for(Row r1 :itmRow){
                       /*  Number totalQty = (Number)r1.getAttribute("QcTotQty");
                        Number okQty = (Number)r1.getAttribute("QcOkQty");
                        Number rjctQty = (Number)r1.getAttribute("QcRejQty"); */
                       Number totalQty = (Number)r1.getAttribute("QcTotQtyBs");
                       Number okQty = (Number)r1.getAttribute("QcOkQtyBs");
                       Number rjctQty = (Number)r1.getAttribute("QcRejQtyBs");
                        loginfo.info("totalQty  "+totalQty+"  okQty   "+okQty+"   rjctQty  "+rjctQty);
                        if(totalQty.compareTo(okQty.plus(rjctQty))==0){
                            
                        }else{
                            count= count+1;
                        }
                    }
                }
             }
        }
        if(count==0){
            currQc.setAttribute("QcComplete", "Y");
        }else{
            currQc.setAttribute("QcComplete", "N");
        }
    }
    public String checkCompleteQcDone(){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcSrc = this.getMmMtlQcSrc1();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();
        Row currQc = mtlQc.getCurrentRow();
        int count = 0;
        String retValue= "N";
        String qcTxnId = currQc.getAttribute("QcTxnId").toString();
        Integer qcChkType = Integer.parseInt(currQc.getAttribute("QcChkType").toString());
        RowQualifier rowQualifier = new RowQualifier(mtlQcSrc);
        rowQualifier.setWhereClause("QcTxnId = '"+qcTxnId+"'");
        loginfo.info(rowQualifier.getExprStr());
        Row[] rowSrc = mtlQcSrc.getFilteredRows(rowQualifier);
        loginfo.info("rowSrc.length------"+rowSrc.length);
        if(rowSrc.length>0){
            for(Row r : rowSrc){
                String docSrc = r.getAttribute("DocIdSrc").toString();
                loginfo.info("docSrc-------"+docSrc);
                RowQualifier rowQualifier1 = new RowQualifier(mtlQcRslt);
                rowQualifier1.setWhereClause("QcTxnId = '"+qcTxnId+"' and DocIdSrc = '"+docSrc+"'");
                loginfo.info(rowQualifier1.getExprStr());
                Row[] itmRow = mtlQcRslt.getFilteredRows(rowQualifier1);
                 loginfo.info("itmRow.length------"+itmRow.length);
                loginfo.info(" before itm row ----------");
                if(itmRow.length>0){
                    for(Row r1 :itmRow){
                       /*  Number totalQty = (Number)r1.getAttribute("QcTotQty");
                        Number okQty = (Number)r1.getAttribute("QcOkQty");
                        Number rjctQty = (Number)r1.getAttribute("QcRejQty"); */
                       Number totalQty = (Number)r1.getAttribute("QcTotQtyBs");
                       Number okQty = (Number)r1.getAttribute("QcOkQtyBs");
                       Number rjctQty = (Number)r1.getAttribute("QcRejQtyBs");
                        loginfo.info("totalQty  "+totalQty+"  okQty   "+okQty+"   rjctQty  "+rjctQty);
                        if(totalQty.compareTo(okQty.plus(rjctQty))==0){
                            
                        }else{
                            count= count+1;
                        }
                    }
                }
             }
        }
        if(count==0){
                retValue = "Y";
            //currQc.setAttribute("QcComplete", "Y");
        }else{
            retValue = "N";
            //currQc.setAttribute("QcComplete", "N");
        }
        return retValue;
    }
    public String checkQcTypeComplete(){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcSrc = this.getMmMtlQcSrc1();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();  // change 15/01/2014
        Row currQc = mtlQc.getCurrentRow();
        int count = 0;
        String retValue= "N";
        String chkMsgFlg ="N";
        StringBuilder msg =new StringBuilder("<html><body>");
                           msg.append("<b>Following items Accept All or Reject All for listed Document no because Qc Check Type Is Sample Check</b>");//MSG.699
        String qcTxnId = currQc.getAttribute("QcTxnId").toString();
        Integer qcChkType = Integer.parseInt(currQc.getAttribute("QcChkType").toString());
        RowQualifier rowQualifier = new RowQualifier(mtlQcSrc);
        rowQualifier.setWhereClause("QcTxnId = '"+qcTxnId+"'");
        loginfo.info(rowQualifier.getExprStr());
        Row[] rowSrc = mtlQcSrc.getFilteredRows(rowQualifier);
        loginfo.info("rowSrc.length------"+rowSrc.length);
        if(qcChkType==282){ // In case of complete Qc Check
            currQc.setAttribute("QcComplete", "Y");
            retValue = "Y";
        }else if(qcChkType==283){ // In Case of Sample Qc Check Item Wise check Accept/Reject value A/R not N
        if(rowSrc.length>0){
            for(Row r : rowSrc){
               
                ArrayList<String> itmArray = new ArrayList<String>();
                String docIdSrcDisp = r.getAttribute("DocIdSrcDisp").toString();
                String docSrc = r.getAttribute("DocIdSrc").toString();
                loginfo.info("docSrc-------"+docSrc+"--display id----"+docIdSrcDisp);
                RowQualifier rowQualifier1 = new RowQualifier(mtlQcRslt);
                rowQualifier1.setWhereClause("QcTxnId = '"+qcTxnId+"' and DocIdSrc = '"+docSrc+"'");
                loginfo.info(rowQualifier1.getExprStr());
                Row[] itmRow = mtlQcRslt.getFilteredRows(rowQualifier1);
                 loginfo.info("itmRow.length------"+itmRow.length);
                loginfo.info(" before itm row ----------");
                if(itmRow.length>0){
                    for(Row r1 :itmRow){
                        if(r1.getAttribute("ItmId")!=null){
                            String accRej="N";
                            if(r1.getAttribute("AccRejAll")!=null){
                              accRej = r1.getAttribute("AccRejAll").toString();
                            }
                            if("N".equalsIgnoreCase(accRej)){
                                String ItmName =null;
                               String itmid = r1.getAttribute("ItmId").toString();
                                if(itmid!=null){
                                        this.getLovItmIdVw1().setNamedWhereClauseParam("CldIdBind", p_cldId);
                                        this.getLovItmIdVw1().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
                                        this.getLovItmIdVw1().setNamedWhereClauseParam("OrgIdBind", p_org_id);
                                        this.getLovItmIdVw1().setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
                                        this.getLovItmIdVw1().executeQuery();
                                    Row[] r2 = this.getLovItmIdVw1().getFilteredRows("ItmId", itmid);
                                
                                    if(r2.length>0){
                                        ItmName = r2[0].getAttribute("ItmDesc").toString();
                                    }
                                    }
                                        itmArray.add(ItmName);  
                            }
                        }
                    }
                }
               
               
               loginfo.info("count---------: "+itmArray+"-----"+docSrc+"--------"+docIdSrcDisp);
                        if(itmArray.size()>0){
                            chkMsgFlg = "Y";
                            loginfo.info("inside msd append");
                            msg =
                                msg.append("<p><b>" + docIdSrcDisp +
                                                  "</b> </p>");
                            msg.append("<ul>");
                            for(String a : itmArray){
                             msg.append("<li> <b>" + a + "</b></li>");
                            }
                            msg.append("</ul>");
                        }
                    itmArray.removeAll(itmArray); 
            }
        }
        }
        if("Y".equalsIgnoreCase(chkMsgFlg)){
        
         msg.append("</body></html>");
         retValue = "N";
        FacesMessage message = new FacesMessage(msg.toString());
        message.setSeverity(FacesMessage.SEVERITY_ERROR);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, message);
        }else if("N".equalsIgnoreCase(chkMsgFlg) && "N".equalsIgnoreCase(retValue)){
            currQc.setAttribute("QcComplete", "Y");
            retValue = "Y";
        }
        return retValue;
    }
    public String updateReceiptTable(){
        this.getDBTransaction().postChanges();
        ViewObjectImpl qcVo = this.getMmMtlQc();
        Row currRow = qcVo.getCurrentRow();
        String rtrnVal ="N";
        if(currRow.getAttribute("QcComplete")!=null){
            String qcComplete = currRow.getAttribute("QcComplete").toString();
            loginfo.info("qcComplete      "+qcComplete);
            if("Y".equalsIgnoreCase(qcComplete)){
               
               loginfo.info("qc txn id    "+currRow.getAttribute("QcTxnId"));
                Integer rtnVal = Integer.parseInt(callStoredFunction(Types.NUMERIC, "mm_updt_rcpt_frm_qc (?,?,?,?,?)", new Object[] {currRow.getAttribute("CldId").toString(),Integer.parseInt(currRow.getAttribute("SlocId").toString()), currRow.getAttribute("OrgId").toString()
                                                                                                                                                        ,currRow.getAttribute("QcTxnId").toString(), Integer.parseInt(currRow.getAttribute("QcChkType").toString())}).toString());
               
                if(rtnVal==1){ 
                    rtrnVal = "Y";  
                }
            }
            
        }
        return rtrnVal;
    }
    public String isReceiptNoDuplicate(String value){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        Row currR = mtlQc.getCurrentRow();
        loginfo.info(currR.getAttribute("QcSrcTxnId")+"----------vlue------------> "+value+"-------------"+mtlQc.getRowCount());
        //Row[] rr =mtlQc.getFilteredRows("QcSrcTxnId", value);
        RowQualifier newQualifier = new RowQualifier(mtlQc);
        newQualifier.setWhereClause("QcSrcTxnId = '"+value+"'");
        loginfo.info(newQualifier.getExprStr());
        Row []rr = mtlQc.getFilteredRows(newQualifier);
        loginfo.info("length valid"+rr.length);
        int count =0;
        String flag = "N";
        if(rr.length>0){
            for(Row r1 : rr){
                loginfo.info("Rows------------------");
               // if(!r1.equals(currR)){
                if(r1!=currR){
                    count= count+1;
                    flag= "Y"; 
                }
            }
           
        }
        loginfo.info("count    "+count+"flag   "+flag);
       return flag;
    }
    
   public String chkQcEditable(){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        Row currR = mtlQc.getCurrentRow();
        String rtrnVal ="N";
        if(currR.getAttribute("QcComplete")!=null){
            String qcComplete = currR.getAttribute("QcComplete").toString();
            if("Y".equalsIgnoreCase(qcComplete)){
                      rtrnVal = "Y";
            }
        }
        return rtrnVal;
    }
    
    public String chkQcForSampaleCase(){
        return null;
    }
    
    public void updateSpQtyAccRej(String value){
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();
        Row currRow = mtlQcRslt.getCurrentRow();
        if("A".equalsIgnoreCase(value)){
            if(currRow.getAttribute("QcTotQty")!=null){
                currRow.setAttribute("QcOkQty", currRow.getAttribute("QcTotQty"));
                currRow.setAttribute("QcRejQty", new Number(0));
                currRow.setAttribute("QcRwkQty", new Number(0));
                currRow.setAttribute("QcRejResn", null);
            }
        }else if("R".equalsIgnoreCase(value)){
            if(currRow.getAttribute("QcTotQty")!=null){
                currRow.setAttribute("QcOkQty",new Number(0));
                currRow.setAttribute("QcRejQty",  currRow.getAttribute("QcTotQty"));
                currRow.setAttribute("QcRwkQty", new Number(0));
            }
        }
    }
    
    public String isSrNoRequired(){
        ViewObjectImpl mtlQc = this.getMmMtlQc();
        ViewObjectImpl mtlQcRslt = this.getMmMtlQcRslt1();
        Row currRow = mtlQcRslt.getCurrentRow();
        Row currQc = mtlQc.getCurrentRow();
        Integer qcChkType = Integer.parseInt(currQc.getAttribute("QcChkType").toString());
        
        String retVal = "N";
        if(qcChkType==282){
            if(currRow.getAttribute("TransItmSerialCheck")!=null){
                if("Y".equalsIgnoreCase(currRow.getAttribute("TransItmSerialCheck").toString())){
               if(currRow.getAttribute("TransSrNo")==null){
                 retVal = "Y";
        }
        }
        }
        }
        return retVal;
    }
    
    /**
     * Container's getter for MtlQcSearchVO.
     * @return MtlQcSearchVO
     */
    public ViewObjectImpl getMtlQcSearchVO() {
        return (ViewObjectImpl)findViewObject("MtlQcSearchVO");
    }

    /**
     * Container's getter for LovQcItmTypeVO.
     * @return LovQcItmTypeVO
     */
    public ViewObjectImpl getLovQcItmTypeVO() {
        return (ViewObjectImpl)findViewObject("LovQcItmTypeVO");
    }

    /**
     * Container's getter for LocQCItmVO.
     * @return LocQCItmVO
     */
    public ViewObjectImpl getLocQCItmVO() {
        return (ViewObjectImpl)findViewObject("LocQCItmVO");
    }

    /**
     * Container's getter for LovParamIdVO.
     * @return LovParamIdVO
     */
    public ViewObjectImpl getLovParamIdVO() {
        return (ViewObjectImpl)findViewObject("LovParamIdVO");
    }

    /**
     * Container's getter for ParamFailActnVO.
     * @return ParamFailActnVO
     */
    public ViewObjectImpl getParamFailActnVO() {
        return (ViewObjectImpl)findViewObject("ParamFailActnVO");
    }

    /**
     * Container's getter for LovItmIdO.
     * @return LovItmIdO
     */
    public LovItmIdOImpl getLovItmIdO() {
        return (LovItmIdOImpl) findViewObject("LovItmIdO");
    }

    /**
     * Container's getter for LovQcParamItm.
     * @return LovQcParamItm
     */
    public ViewObjectImpl getLovQcParamItm() {
        return (ViewObjectImpl)findViewObject("LovQcParamItm");
    }

    /**
     * Container's getter for MmMtlQcSrc1.
     * @return MmMtlQcSrc1
     */
    public ViewObjectImpl getMmMtlQcSrc1() {
        return (ViewObjectImpl)findViewObject("MmMtlQcSrc1");
    }

    /**
     * Container's getter for MmMtlQcToSrcVL1.
     * @return MmMtlQcToSrcVL1
     */
    public ViewLinkImpl getMmMtlQcToSrcVL1() {
        return (ViewLinkImpl)findViewLink("MmMtlQcToSrcVL1");
    }

    /**
     * Container's getter for MmMtlQcRslt1.
     * @return MmMtlQcRslt1
     */
    public ViewObjectImpl getMmMtlQcRslt1() {
        return (ViewObjectImpl)findViewObject("MmMtlQcRslt1");
    }

    /**
     * Container's getter for MmMtlSrcToRsltVL1.
     * @return MmMtlSrcToRsltVL1
     */
    public ViewLinkImpl getMmMtlSrcToRsltVL1() {
        return (ViewLinkImpl)findViewLink("MmMtlSrcToRsltVL1");
    }

    /**
     * Container's getter for MmMtlQcDtl1.
     * @return MmMtlQcDtl1
     */
    public MmMtlQcDtlVOImpl getMmMtlQcDtl1() {
        return (MmMtlQcDtlVOImpl)findViewObject("MmMtlQcDtl1");
    }

    /**
     * Container's getter for FkMmMtlQcDtlVL2.
     * @return FkMmMtlQcDtlVL2
     */
    public ViewLinkImpl getFkMmMtlQcDtlVL2() {
        return (ViewLinkImpl)findViewLink("FkMmMtlQcDtlVL2");
    }

    /**
     * Container's getter for MmQcParamItm1.
     * @return MmQcParamItm1
     */
    public MmQcParamItmVOImpl getMmQcParamItm1() {
        return (MmQcParamItmVOImpl)findViewObject("MmQcParamItm1");
    }

    /**
     * Container's getter for MtlQcRstTOQcParamItmVL2.
     * @return MtlQcRstTOQcParamItmVL2
     */
    public ViewLinkImpl getMtlQcRstTOQcParamItmVL2() {
        return (ViewLinkImpl)findViewLink("MtlQcRstTOQcParamItmVL2");
    }

    /**
     * Container's getter for MmMtlQcSrc.
     * @return MmMtlQcSrc
     */
    public ViewObjectImpl getMmMtlQcSrc() {
        return (ViewObjectImpl)findViewObject("MmMtlQcSrc");
    }

    /**
     * Container's getter for LovMtlRcptSrc.
     * @return LovMtlRcptSrc
     */
    public ViewObjectImpl getLovMtlRcptSrc() {
        return (ViewObjectImpl)findViewObject("LovMtlRcptSrc");
    }

    /**
     * Container's getter for MmMtlQcDtl2.
     * @return MmMtlQcDtl2
     */
    public MmMtlQcDtlVOImpl getMmMtlQcDtl2() {
        return (MmMtlQcDtlVOImpl)findViewObject("MmMtlQcDtl2");
    }

    /**
     * Container's getter for LovPoNo.
     * @return LovPoNo
     */
    public ViewObjectImpl getLovPoNo() {
        return (ViewObjectImpl)findViewObject("LovPoNo");
    }

    /**
     * Container's getter for LovTransferOrd.
     * @return LovTransferOrd
     */
    public ViewObjectImpl getLovTransferOrd() {
        return (ViewObjectImpl)findViewObject("LovTransferOrd");
    }

    /**
     * Container's getter for LovReceiptNo.
     * @return LovReceiptNo
     */
    public ViewObjectImpl getLovReceiptNo() {
        return (ViewObjectImpl)findViewObject("LovReceiptNo");
    }

    /**
     * Container's getter for MmMtlQcRslt2.
     * @return MmMtlQcRslt2
     */
    public ViewObjectImpl getMmMtlQcRslt2() {
        return (ViewObjectImpl)findViewObject("MmMtlQcRslt2");
    }

    /**
     * Container's getter for LovViewReceiptNo.
     * @return LovViewReceiptNo
     */
    public ViewObjectImpl getLovViewReceiptNo() {
        return (ViewObjectImpl)findViewObject("LovViewReceiptNo");
    }

    /**
     * Container's getter for LovPoNoForView.
     * @return LovPoNoForView
     */
    public ViewObjectImpl getLovPoNoForView() {
        return (ViewObjectImpl)findViewObject("LovPoNoForView");
    }

    /**
     * Container's getter for RcptItm2.
     * @return RcptItm2
     */
    public ViewObjectImpl getRcptItm2() {
        return (ViewObjectImpl)findViewObject("RcptItm2");
    }
    public void filterItm(){
        Integer p_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String p_cldId=resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String p_ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        ViewObject itmVO = this.getLovItmIdO();
        ViewObject pramVo=this.getLovParamIdVO();
        ViewObject paramItm = this.getMmQcParamItm1();
       // ViewCriteria vc = getLovItmIdO().getViewCriteria("LovItmIdOCriteria");
     //   itmVO.applyViewCriteria(vc);
     this.getLovItmIdVw1().setNamedWhereClauseParam("CldIdBind", p_cldId);
     this.getLovItmIdVw1().setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
     this.getLovItmIdVw1().setNamedWhereClauseParam("OrgIdBind", p_org_id);
     this.getLovItmIdVw1().setNamedWhereClauseParam("HoOrgIdBind", p_ho_org_id);
     this.getLovItmIdVw1().executeQuery();
        
        ViewCriteria vcParam = getLovParamIdVO().getViewCriteria("LovParamIdVOCriteria");
        pramVo.applyViewCriteria(vcParam);
        pramVo.setNamedWhereClauseParam("CldIdBind", p_cldId);
        pramVo.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        pramVo.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        pramVo.executeQuery();
        
        ViewCriteria vcParamItm = getLovParamIdVO().getViewCriteria("MmQcParamItmVOCriteria");
        paramItm.applyViewCriteria(vcParamItm);
        paramItm.setNamedWhereClauseParam("CldIdBind", p_cldId);
        paramItm.setNamedWhereClauseParam("SlocIdBind", p_sloc_id);
        paramItm.setNamedWhereClauseParam("OrgIdBind", p_org_id);
        paramItm.executeQuery();
        
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for TransQcSearch.
     * @return TransQcSearch
     */
    public ViewObjectImpl getTransQcSearch() {
        return (ViewObjectImpl)findViewObject("TransQcSearch");
    }

    /**
     * Container's getter for LovItmIdO1.
     * @return LovItmIdO1
     */
    public LovItmIdOImpl getLovItmIdO1() {
        return (LovItmIdOImpl) findViewObject("LovItmIdO1");
    }

    /**
     * Container's getter for LovItmIdVw1.
     * @return LovItmIdVw1
     */
    public ViewObjectImpl getLovItmIdVw1() {
        return (ViewObjectImpl) findViewObject("LovItmIdVw1");
    }
    public Integer QcItemType() {
        loginfo.info("in the QcItem type  ");
      Integer type=(Integer)this.getMmMtlQc().getCurrentRow().getAttribute("QcItmType");
      loginfo.info("type::"+type);
      return type;
    }
    
    public String setQcComplete() {
        this.getMmMtlQc().getCurrentRow().setAttribute("QcComplete", "Y");
        return null;
        
    }

    /**
     * Container's getter for LovMnfJe1.
     * @return LovMnfJe1
     */
    public ViewObjectImpl getLovMnfJe1() {
        return (ViewObjectImpl) findViewObject("LovMnfJe1");
    }

    /**
     * Container's getter for LovRqtArea1.
     * @return LovRqtArea1
     */
    public ViewObjectImpl getLovRqtArea1() {
        return (ViewObjectImpl) findViewObject("LovRqtArea1");
    }
}
