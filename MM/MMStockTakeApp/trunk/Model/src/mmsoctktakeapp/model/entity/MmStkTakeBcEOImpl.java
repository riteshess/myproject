package mmsoctktakeapp.model.entity;

import java.math.BigDecimal;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Mar 12 12:30:19 PDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmStkTakeBcEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getCldId();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        OrgId {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        WhId {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getWhId();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setWhId((String) value);
            }
        }
        ,
        DocId {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getDocId();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        }
        ,
        LotId {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getLotId();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setLotId((String) value);
            }
        }
        ,
        BinId {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getBinId();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setBinId((String) value);
            }
        }
        ,
        SrNo {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getSrNo();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setSrNo((String) value);
            }
        }
        ,
        ItmId {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getItmId();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setItmId((String) value);
            }
        }
        ,
        ItmUom {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getItmUom();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setItmUom((String) value);
            }
        }
        ,
        PhyQty {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getPhyQty();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setPhyQty((Number) value);
            }
        }
        ,
        RwkQty {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getRwkQty();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setRwkQty((Number) value);
            }
        }
        ,
        ScrpQty {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getScrpQty();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setScrpQty((Number) value);
            }
        }
        ,
        MmStkTake {
            public Object get(MmStkTakeBcEOImpl obj) {
                return obj.getMmStkTake();
            }

            public void put(MmStkTakeBcEOImpl obj, Object value) {
                obj.setMmStkTake((MmStkTakeEOImpl) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MmStkTakeBcEOImpl object);

        public abstract void put(MmStkTakeBcEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int LOTID = AttributesEnum.LotId.index();
    public static final int BINID = AttributesEnum.BinId.index();
    public static final int SRNO = AttributesEnum.SrNo.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int PHYQTY = AttributesEnum.PhyQty.index();
    public static final int RWKQTY = AttributesEnum.RwkQty.index();
    public static final int SCRPQTY = AttributesEnum.ScrpQty.index();
    public static final int MMSTKTAKE = AttributesEnum.MmStkTake.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmStkTakeBcEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mmsoctktakeapp.model.entity.MmStkTakeBcEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for WhId, using the alias name WhId.
     * @return the value of WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WhId.
     * @param value value to set the WhId
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for LotId, using the alias name LotId.
     * @return the value of LotId
     */
    public String getLotId() {
        return (String) getAttributeInternal(LOTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for LotId.
     * @param value value to set the LotId
     */
    public void setLotId(String value) {
        setAttributeInternal(LOTID, value);
    }

    /**
     * Gets the attribute value for BinId, using the alias name BinId.
     * @return the value of BinId
     */
    public String getBinId() {
        return (String) getAttributeInternal(BINID);
    }

    /**
     * Sets <code>value</code> as the attribute value for BinId.
     * @param value value to set the BinId
     */
    public void setBinId(String value) {
        setAttributeInternal(BINID, value);
    }

    /**
     * Gets the attribute value for SrNo, using the alias name SrNo.
     * @return the value of SrNo
     */
    public String getSrNo() {
        return (String) getAttributeInternal(SRNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SrNo.
     * @param value value to set the SrNo
     */
    public void setSrNo(String value) {
        setAttributeInternal(SRNO, value);
    }

    /**
     * Gets the attribute value for ItmId, using the alias name ItmId.
     * @return the value of ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmId.
     * @param value value to set the ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ItmUom, using the alias name ItmUom.
     * @return the value of ItmUom
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmUom.
     * @param value value to set the ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for PhyQty, using the alias name PhyQty.
     * @return the value of PhyQty
     */
    public oracle.jbo.domain.Number getPhyQty() {
        return (oracle.jbo.domain.Number) getAttributeInternal(PHYQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for PhyQty.
     * @param value value to set the PhyQty
     */
    public void setPhyQty(oracle.jbo.domain.Number value) {
        setAttributeInternal(PHYQTY, value);
    }

    /**
     * Gets the attribute value for RwkQty, using the alias name RwkQty.
     * @return the value of RwkQty
     */
    public Number getRwkQty() {
        return (Number) getAttributeInternal(RWKQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for RwkQty.
     * @param value value to set the RwkQty
     */
    public void setRwkQty(Number value) {
        setAttributeInternal(RWKQTY, value);
    }

    /**
     * Gets the attribute value for ScrpQty, using the alias name ScrpQty.
     * @return the value of ScrpQty
     */
    public Number getScrpQty() {
        return (Number) getAttributeInternal(SCRPQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for ScrpQty.
     * @param value value to set the ScrpQty
     */
    public void setScrpQty(Number value) {
        setAttributeInternal(SCRPQTY, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity MmStkTakeEOImpl.
     */
    public MmStkTakeEOImpl getMmStkTake() {
        return (MmStkTakeEOImpl) getAttributeInternal(MMSTKTAKE);
    }

    /**
     * Sets <code>value</code> as the associated entity MmStkTakeEOImpl.
     */
    public void setMmStkTake(MmStkTakeEOImpl value) {
        setAttributeInternal(MMSTKTAKE, value);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param whId key constituent
     * @param docId key constituent
     * @param lotId key constituent
     * @param binId key constituent
     * @param srNo key constituent
     * @param itmId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String whId, String docId,
                                       String lotId, String binId, String srNo, String itmId) {
        return new Key(new Object[] { cldId, slocId, orgId, whId, docId, lotId, binId, srNo, itmId });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //   super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
}

