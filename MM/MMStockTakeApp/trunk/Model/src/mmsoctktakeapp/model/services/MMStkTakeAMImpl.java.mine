package mmsoctktakeapp.model.services;

import java.io.InputStream;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

import java.util.ListIterator;
import java.util.Map;

import java.util.Scanner;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmsoctktakeapp.model.services.common.MMStkTakeAM;
import mmsoctktakeapp.model.view.BarcodeDualVOImpl;
import mmsoctktakeapp.model.view.BarcodeDualVORowImpl;
import mmsoctktakeapp.model.view.ItemTransVOImpl;
import mmsoctktakeapp.model.view.ItmPrfVOImpl;
import mmsoctktakeapp.model.view.MmStkSummLotVOImpl;
import mmsoctktakeapp.model.view.MmStkTakeBcVOImpl;
import mmsoctktakeapp.model.view.MmStkTakeBcVORowImpl;
import mmsoctktakeapp.model.view.MmStkTakeBinVOImpl;
import mmsoctktakeapp.model.view.MmStkTakeBinVORowImpl;
import mmsoctktakeapp.model.view.MmStkTakeItmVOImpl;
import mmsoctktakeapp.model.view.MmStkTakeItmVORowImpl;
import mmsoctktakeapp.model.view.MmStkTakeLotVOImpl;
import mmsoctktakeapp.model.view.MmStkTakeLotVORowImpl;
import mmsoctktakeapp.model.view.MmStkTakeSrVOImpl;
import mmsoctktakeapp.model.view.MmStkTakeSrVORowImpl;
import mmsoctktakeapp.model.view.MmStkTakeVOImpl;
import mmsoctktakeapp.model.view.StkItmSummVOImpl;
import mmsoctktakeapp.model.view.StkTakePrfCriteriaVOImpl;
import mmsoctktakeapp.model.view.StkTakePrfVOImpl;
import mmsoctktakeapp.model.view.TransAddItemVOImpl;
import mmsoctktakeapp.model.view.TransDistinctItemVOImpl;
import mmsoctktakeapp.model.view.TransSearchItmVOImpl;

import mmsoctktakeapp.model.view.TransSearchStkTakeVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 06 14:39:30 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMStkTakeAMImpl extends ApplicationModuleImpl implements MMStkTakeAM {
    /**
     * This is the default constructor (do not remove).
     */
    private String TxnIdLast = null;


    public MMStkTakeAMImpl() {
    }

    /**
     * Container's getter for MmStkTake1.
     * @return MmStkTake1
     */
    public MmStkTakeVOImpl getMmStkTake1() {
        return (MmStkTakeVOImpl) findViewObject("MmStkTake1");
    }

    /**
     * Container's getter for MmStkTakeItm1.
     * @return MmStkTakeItm1
     */
    public MmStkTakeItmVOImpl getMmStkTakeItm1() {
        return (MmStkTakeItmVOImpl) findViewObject("MmStkTakeItm1");
    }

    /**
     * Container's getter for MmStkTakeLot1.
     * @return MmStkTakeLot1
     */
    public MmStkTakeLotVOImpl getMmStkTakeLot1() {
        return (MmStkTakeLotVOImpl) findViewObject("MmStkTakeLot1");
    }

    /**
     * Container's getter for MmStkTakeBin1.
     * @return MmStkTakeBin1
     */
    public MmStkTakeBinVOImpl getMmStkTakeBin1() {
        return (MmStkTakeBinVOImpl) findViewObject("MmStkTakeBin1");
    }

    /**
     * Container's getter for MmStkTakeSr1.
     * @return MmStkTakeSr1
     */
    public ViewObjectImpl getMmStkTakeSr1() {
        return (ViewObjectImpl) findViewObject("MmStkTakeSr1");
    }

    /**
     * Container's getter for MmStkTake2.
     * @return MmStkTake2
     */
    public MmStkTakeVOImpl getMmStkTake2() {
        return (MmStkTakeVOImpl) findViewObject("MmStkTake2");
    }

    /**
     * Container's getter for MmStkTakeItm2.
     * @return MmStkTakeItm2
     */
    public MmStkTakeItmVOImpl getMmStkTakeItm2() {
        return (MmStkTakeItmVOImpl) findViewObject("MmStkTakeItm2");
    }

    /**
     * Container's getter for MmStkTakeLot2.
     * @return MmStkTakeLot2
     */
    public MmStkTakeLotVOImpl getMmStkTakeLot2() {
        return (MmStkTakeLotVOImpl) findViewObject("MmStkTakeLot2");
    }

    /**
     * Container's getter for MmStkTakeBin2.
     * @return MmStkTakeBin2
     */
    public MmStkTakeBinVOImpl getMmStkTakeBin2() {
        return (MmStkTakeBinVOImpl) findViewObject("MmStkTakeBin2");
    }

    /**
     * Container's getter for MmStkTakeSr2.
     * @return MmStkTakeSr2
     */
    public ViewObjectImpl getMmStkTakeSr2() {
        return (ViewObjectImpl) findViewObject("MmStkTakeSr2");
    }

    /**
     * Container's getter for StkTakePrf1.
     * @return StkTakePrf1
     */
    public StkTakePrfVOImpl getStkTakePrf1() {
        return (StkTakePrfVOImpl) findViewObject("StkTakePrf1");
    }

    /**
     * Container's getter for AppDsAtt1.
     * @return AppDsAtt1
     */
    public ViewObjectImpl getAppDsAtt1() {
        return (ViewObjectImpl) findViewObject("AppDsAtt1");
    }

    /**
     * Container's getter for Warehouse1.
     * @return Warehouse1
     */
    public ViewObjectImpl getWarehouse1() {
        return (ViewObjectImpl) findViewObject("Warehouse1");
    }

    /**
     * Container's getter for Organisation1.
     * @return Organisation1
     */
    public ViewObjectImpl getOrganisation1() {
        return (ViewObjectImpl) findViewObject("Organisation1");
    }

    /**
     * Container's getter for StkTakeStatus1.
     * @return StkTakeStatus1
     */
    public ViewObjectImpl getStkTakeStatus1() {
        return (ViewObjectImpl) findViewObject("StkTakeStatus1");
    }

    /**
     * Container's getter for StkTakePrfCriteria1.
     * @return StkTakePrfCriteria1
     */
    public StkTakePrfCriteriaVOImpl getStkTakePrfCriteria1() {
        return (StkTakePrfCriteriaVOImpl) findViewObject("StkTakePrfCriteria1");
    }

    /**
     * Container's getter for StkItmSumm1.
     * @return StkItmSumm1
     */
    public StkItmSummVOImpl getStkItmSumm1() {
        return (StkItmSummVOImpl) findViewObject("StkItmSumm1");
    }

    /**
     * Container's getter for StkTaketoItemVL1.
     * @return StkTaketoItemVL1
     */
    public ViewLinkImpl getStkTaketoItemVL1() {
        return (ViewLinkImpl) findViewLink("StkTaketoItemVL1");
    }

    /**
     * Container's getter for StkItemtoLotVL1.
     * @return StkItemtoLotVL1
     */
    public ViewLinkImpl getStkItemtoLotVL1() {
        return (ViewLinkImpl) findViewLink("StkItemtoLotVL1");
    }

    /**
     * Container's getter for StkLottoBinVL1.
     * @return StkLottoBinVL1
     */
    public ViewLinkImpl getStkLottoBinVL1() {
        return (ViewLinkImpl) findViewLink("StkLottoBinVL1");
    }

    /**
     * Container's getter for StkBintoSrVL1.
     * @return StkBintoSrVL1
     */
    public ViewLinkImpl getStkBintoSrVL1() {
        return (ViewLinkImpl) findViewLink("StkBintoSrVL1");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = null;
        if (valueExp.getValue(elContext) != null)
            msg = valueExp.getValue(elContext).toString();
        else
            msg = null;
        return msg;
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }
    }


    public String genStkTkNo() {

        if (getMmStkTake1().getCurrentRow().getAttribute("StkTakeNo") != null) {

            return (String) getMmStkTake1().getCurrentRow().getAttribute("StkTakeNo");
        } else {

            String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            Integer fyid = (Integer) getMmStkTake1().getCurrentRow().getAttribute("FyId");
            String tableName = "MM$STK$TAKE";
            String stkno = (String) (callStoredFunction(Types.VARCHAR, "MM.fn_mm_gen_id(?,?,?,?,?,?)", new Object[] {
                                                        SlocId, CldId, OrgId, tableName, null, fyid
            }));
            getMmStkTake1().getCurrentRow().setAttribute("StkTakeNo", stkno);
            return stkno;
        }
    }

    public void setQtyforItem() {
        String WhId = (String) getMmStkTake1().getCurrentRow().getAttribute("WhId");
        getMmStkTakeItm1().getCurrentRow().setAttribute("WhId", WhId);
        String OrgId = (String) getMmStkTakeItm1().getCurrentRow().getAttribute("OrgId");
        Integer SlocId = Integer.parseInt(getMmStkTakeItm1().getCurrentRow().getAttribute("SlocId").toString());
        String CldId = (String) getMmStkTakeItm1().getCurrentRow().getAttribute("CldId");
        String DocId = (String) getMmStkTakeItm1().getCurrentRow().getAttribute("DocId");
        Integer FyId = Integer.parseInt(getMmStkTake1().getCurrentRow().getAttribute("FyId").toString());

        String ItmId = (String) getMmStkTakeItm1().getCurrentRow().getAttribute("ItmId");
        RowQualifier rq = new RowQualifier(getStkItmSumm1());
        rq.setWhereClause("OrgId='" + OrgId + "' AND SlocId=" + SlocId + " AND CldId='" + CldId + "' AND WhId='" +
                          WhId + "'  AND ItmId='" + ItmId + "'");
        Row[] r = getStkItmSumm1().getFilteredRows(rq);
        // BigDecimal PhyQty = (BigDecimal)getMmStkTakeItm1().getCurrentRow().getAttribute("PhyQty");
        // BigDecimal DiffQty=null;
        if (r.length > 0) {
            BigDecimal TotQty = (BigDecimal) r[0].getAttribute("TotStk");
            BigDecimal OrdQty = (BigDecimal) r[0].getAttribute("OrdStk");
            BigDecimal ReqQty = (BigDecimal) r[0].getAttribute("ReqStk");
            // DiffQty=TotQty.subtract(PhyQty);
            getMmStkTakeItm1().getCurrentRow().setAttribute("TotQty", TotQty);
            getMmStkTakeItm1().getCurrentRow().setAttribute("OrdQty", OrdQty);
            getMmStkTakeItm1().getCurrentRow().setAttribute("ReqQty", ReqQty);
            //  if(DiffQty.compareTo(new BigDecimal(0))>0)
            //      getMmStkTakeItm1().getCurrentRow().setAttribute("DiffType","S");
            //  else
            //      if(DiffQty.compareTo(new BigDecimal(0))==0)
            //      getMmStkTakeItm1().getCurrentRow().setAttribute("DiffType","D");
            //   getMmStkTakeItm1().getCurrentRow().setAttribute("DiffQty",DiffQty.abs());

        } else {
            getMmStkTakeItm1().getCurrentRow().setAttribute("TotQty", 0);
            getMmStkTakeItm1().getCurrentRow().setAttribute("OrdQty", 0);
            getMmStkTakeItm1().getCurrentRow().setAttribute("ReqQty", 0);
            //    DiffQty=PhyQty;
            //   if(DiffQty.compareTo(new BigDecimal(0))>0)
            //       getMmStkTakeItm1().getCurrentRow().setAttribute("DiffType","S");
            //  else
            //       if(DiffQty.compareTo(new BigDecimal(0))==0)
            //       getMmStkTakeItm1().getCurrentRow().setAttribute("DiffType","D");
            //   getMmStkTakeItm1().getCurrentRow().setAttribute("DiffQty",DiffQty.abs());
        }


    }

    public void setQtyforLot() {
        /* BigDecimal PhyQty = (BigDecimal)getMmStkTakeLot3().getCurrentRow().getAttribute("PhyQty");
         BigDecimal TotQty = (BigDecimal)getMmStkTakeLot3().getCurrentRow().getAttribute("TotQty");
            BigDecimal DiffQty=TotQty.subtract(PhyQty);
            getMmStkTakeLot3().getCurrentRow().setAttribute("DiffQty",DiffQty.abs());  */

    }

    /**
     * Container's getter for ItmPrf1.
     * @return ItmPrf1
     */
    public ViewObjectImpl getItmPrf1() {
        return (ViewObjectImpl) findViewObject("ItmPrf1");
    }

    /**
     * Container's getter for ItemTrans1.
     * @return ItemTrans1
     */
    public ItemTransVOImpl getItemTrans1() {
        return (ItemTransVOImpl) findViewObject("ItemTrans1");
    }

    /**
     * Container's getter for MmStkTakeLot3.
     * @return MmStkTakeLot3
     */
    public MmStkTakeLotVOImpl getMmStkTakeLot3() {
        return (MmStkTakeLotVOImpl) findViewObject("MmStkTakeLot3");
    }

    /**
     * Container's getter for TransItmToLotVL1.
     * @return TransItmToLotVL1
     */
    public ViewLinkImpl getTransItmToLotVL1() {
        return (ViewLinkImpl) findViewLink("TransItmToLotVL1");
    }

    /**
     * Container's getter for MmStkTakeBin3.
     * @return MmStkTakeBin3
     */
    public MmStkTakeBinVOImpl getMmStkTakeBin3() {
        return (MmStkTakeBinVOImpl) findViewObject("MmStkTakeBin3");
    }

    /**
     * Container's getter for StkLottoBinVL2.
     * @return StkLottoBinVL2
     */
    public ViewLinkImpl getStkLottoBinVL2() {
        return (ViewLinkImpl) findViewLink("StkLottoBinVL2");
    }

    /**
     * Container's getter for MmStkTakeSr3.
     * @return MmStkTakeSr3
     */
    public ViewObjectImpl getMmStkTakeSr3() {
        return (ViewObjectImpl) findViewObject("MmStkTakeSr3");
    }

    /**
     * Container's getter for BinToSrVL1.
     * @return BinToSrVL1
     */
    public ViewLinkImpl getBinToSrVL1() {
        return (ViewLinkImpl) findViewLink("BinToSrVL1");
    }

    public String profileCriteriaChange(String profile) {
        String PrfId = null;
        Integer MtlSelCrt = null;
        StkTakePrfVOImpl impl = getStkTakePrf1();
        Row r[] = impl.getFilteredRows("PrfNm", profile);
        if (r.length > 0) {
            PrfId = (String) r[0].getAttribute("PrfId");
            MtlSelCrt = (Integer) r[0].getAttribute("MtlSelCrt");
        }
        if (MtlSelCrt != null)
            return MtlSelCrt.toString();
        else
            return null;
        /*   if(MtlSelCrt==364)
        {
          if(getMmStkTake1().getCurrentRow().getAttribute("WhId")!= null)
            return (String)getMmStkTake1().getCurrentRow().getAttribute("WhId");
           else
           {
                   getMmStkTake1().getCurrentRow().setAttribute("StkTakeCriteria",null);
                   getMmStkTake1().getCurrentRow().setAttribute("StkTakePrfId",null);
               return null;
               }

            }
        else
            return "0";*/

    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);

    }

    public void setItmAcctoWhouse(String WhId) {
        System.out.println(" in the setItmAcctoWhouse");
        System.out.println("Warehouse Id:" + WhId);
        String CldId = getMmStkTake1().getCurrentRow().getAttribute("CldId").toString();
        String OrgId = getMmStkTake1().getCurrentRow().getAttribute("OrgId").toString();
        String DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        Integer SlocId = Integer.parseInt(getMmStkTake1().getCurrentRow().getAttribute("SlocId").toString());
        String HoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String Wh = WhId;

        System.out.println(CldId + " " + SlocId + " " + HoOrg + " " + OrgId + " " + WhId + " " + " " + DocId);
        Integer stknum = (Integer) callStoredFunction(Types.INTEGER, "MM_STK_TAKE_INIT(?,?,?,?,?,?,?,?)", new Object[] {
                                                      CldId, SlocId, HoOrg, OrgId, Wh, null, "N", DocId
        });
        System.out.println("Returned value:" + stknum);
        getMmStkTakeItm2().executeQuery();
        getMmStkTakeItm1().executeQuery();
        System.out.println("Total number of Rows in Vos:" + getMmStkTakeItm1().getRowCount());
    }

    public void setItemAcctoWh(String WhId) {
        StkItmSummVOImpl impl = this.getStkItmSumm1();
        MmStkTakeItmVOImpl impltake = getMmStkTakeItm1();
        MmStkTakeVOImpl implstktake = getMmStkTake1();
        //RowQualifier rq = new RowQualifier(impl);
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        //Integer fyId = (Integer)getMmStkTake1().getCurrentRow().getAttribute("FyId");
        String HoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        System.out.println("CldId::" + CldId + "SlocId:::" + SlocId + "OrgId::::" + OrgId + "HoOrg::" + HoOrg +
                           "DocId:::" + DocId + "WhId::" + WhId);
        Integer stknum = (Integer) callStoredFunction(Types.INTEGER, "MM_STK_TAKE_INIT(?,?,?,?,?,?,?,?)", new Object[] {
                                                      CldId, SlocId, HoOrg, OrgId, WhId, null, "N", DocId
        });
        System.out.println("Value :" + stknum);

        //rq.setWhereClause("WhId = '" + WhId + "' And CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" +
        //                 OrgId + "' and FyId=" + fyId);
        //        Row r[] = impl.getFilteredRows(rq);
        //        Integer i = -1;
        //        Row newrow = null;
        //        if (r.length > 0) {
        //            i = r.length - 1;
        //            Integer count = 0;
        //            while (i >= 0) {
        //                RowQualifier rqd = new RowQualifier(getMmStkTakeItm2());
        //                rqd.setWhereClause("WhId ='" + WhId + "' And CldId='" +
        //                                   implstktake.getCurrentRow().getAttribute("CldId") + "' and SlocId=" +
        //                                   implstktake.getCurrentRow().getAttribute("SlocId") + " and OrgId='" +
        //                                   implstktake.getCurrentRow().getAttribute("OrgId") + "' and DocId='" +
        //                                   implstktake.getCurrentRow().getAttribute("DocId") + "' and ItmId='" +
        //                                   r[i].getAttribute("ItmId") + "'");
        //                Row rd[] = getMmStkTakeItm2().getFilteredRows(rqd);
        //                if (rd.length == 0) {
        //                    count = count + 1;
        //                    newrow = impltake.createRow();
        //                    newrow.setAttribute("DocId", implstktake.getCurrentRow().getAttribute("DocId"));
        //                    newrow.setAttribute("CldId", implstktake.getCurrentRow().getAttribute("CldId"));
        //                    newrow.setAttribute("SlocId", implstktake.getCurrentRow().getAttribute("SlocId"));
        //                    newrow.setAttribute("OrgId", implstktake.getCurrentRow().getAttribute("OrgId"));
        //                    newrow.setAttribute("WhId", WhId);
        //                    newrow.setAttribute("ItmId", r[i].getAttribute("ItmId"));
        //                    newrow.setAttribute("ReqQty", r[i].getAttribute("ReqStk"));
        //                    newrow.setAttribute("OrdQty", r[i].getAttribute("OrdStk"));
        //                    newrow.setAttribute("TotQty", r[i].getAttribute("TotStk"));
        //                    newrow.setAttribute("PhyQty", r[i].getAttribute("TotStk"));
        //                    newrow.setAttribute("DiffQty", BigDecimal.ZERO);
        //                    newrow.setAttribute("DiffType", "A");
        //                    newrow.setAttribute("ItmUom", r[i].getAttribute("ItmUomBs"));
        //                    impltake.insertRow(newrow);
        //                }
        //                i--;
        //            }
        //            if (count == 0) {
        //                FacesMessage msg =
        //                    new FacesMessage(resolvElDCMsg("All Items of selected Warehouse are already added to this Slip").toString());
        //                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
        //                FacesContext ctx = FacesContext.getCurrentInstance();
        //                ctx.addMessage(null, msg);
        //            }
        //        } else {
        //            FacesMessage msg = new FacesMessage(resolvElDCMsg("No Item for selected Warehouse in Stock").toString());
        //            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
        //            FacesContext ctx = FacesContext.getCurrentInstance();
        //            ctx.addMessage(null, msg);
        //        }
        getMmStkTakeItm2().executeQuery();
        getMmStkTakeItm1().executeQuery();
    }

    public void setBindVarforTransItem() {
        MmStkTakeVOImpl implstktake = getMmStkTake1();
        String CldId = (String) implstktake.getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) implstktake.getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) implstktake.getCurrentRow().getAttribute("OrgId");
        String WhId = (String) getMmStkTakeItm1().getCurrentRow().getAttribute("WhId");
        String DocId = (String) implstktake.getCurrentRow().getAttribute("DocId");


        ViewCriteria vc1 = getMmStkTakeItm1().getViewCriteria("MmStkTakeItmVOCriteria");
        getMmStkTakeItm1().applyViewCriteria(vc1);
        getMmStkTakeItm1().setNamedWhereClauseParam("CldBind", CldId);
        getMmStkTakeItm1().setNamedWhereClauseParam("SlocBind", SlocId);
        getMmStkTakeItm1().setNamedWhereClauseParam("OrgBind", OrgId);
        getMmStkTakeItm1().setNamedWhereClauseParam("DocBind", DocId);
        getMmStkTakeItm1().setNamedWhereClauseParam("WhBind", WhId);
        //   getMmStkTakeItm1().executeQuery();

        /*   ViewCriteria vc2=getItemTrans1().getViewCriteria("ItemTransVOCriteria");
            getItemTrans1().applyViewCriteria(vc2);
            //getItemTrans1().setApplyViewCriteriaName("ItemTransVOCriteria");
            getItemTrans1().setNamedWhereClauseParam("CldIdBind",CldId);
            getItemTrans1().setNamedWhereClauseParam("SlocIdBind",SlocId);
            getItemTrans1().setNamedWhereClauseParam("OrgIdBind",OrgId);
            getItemTrans1().setNamedWhereClauseParam("WhIdBind",WhId);
            getItemTrans1().setNamedWhereClauseParam("DocIdBind",DocId);
            getItemTrans1().executeQuery();*/


    }

    /**
     * Container's getter for MmStkSummLot1.
     * @return MmStkSummLot1
     */
    public MmStkSummLotVOImpl getMmStkSummLot1() {
        return (MmStkSummLotVOImpl) findViewObject("MmStkSummLot1");
    }

    public void addSummLotToTakeLot() {
        /*     Integer length=null;
            Row r[]=  getMmStkSummLot1().getFilteredRows("IsSelected","Y");
            ViewObjectImpl vo=getMmStkTakeLot3();
            MmStkTakeVOImpl implstktake=getMmStkTake1();
            if(r.length>0)
                length=r.length-1;
            Row newrow=null;
            while(length >= 0)
            {
                    newrow=vo.createRow();
                    newrow.setAttribute("DocId",implstktake.getCurrentRow().getAttribute("DocId"));
                    newrow.setAttribute("CldId",implstktake.getCurrentRow().getAttribute("CldId"));
                    newrow.setAttribute("SlocId",implstktake.getCurrentRow().getAttribute("SlocId"));
                    newrow.setAttribute("OrgId",implstktake.getCurrentRow().getAttribute("OrgId"));
                    newrow.setAttribute("WhId",implstktake.getCurrentRow().getAttribute("WhId"));
                    newrow.setAttribute("LotId",r[length].getAttribute("LotId"));
                    newrow.setAttribute("ItmId",r[length].getAttribute("ItmId"));
                    newrow.setAttribute("ItmUom",r[length].getAttribute("ItmUomBs"));
                    vo.insertRow(newrow);
                length--;
                }
             */
    }

    public String checkItmSerialize(String ItmId) {
        String sr = null;
        if (getItemTrans1().getCurrentRow() != null) {
            String CldId = (String) getItemTrans1().getCurrentRow().getAttribute("CldId");
            String OrgId = (String) getItemTrans1().getCurrentRow().getAttribute("OrgId");
            Integer SlocId = (Integer) getItemTrans1().getCurrentRow().getAttribute("SlocId");
            ViewObjectImpl voimpl = getItmPrf1();
            RowQualifier rq = new RowQualifier(voimpl);
            rq.setWhereClause("CldId='" + CldId + "' AND ItmId='" + ItmId + "' and SlocId=" + SlocId);
            Row[] r = voimpl.getFilteredRows(rq);
            if (r.length > 0) {
                sr = (String) r[0].getAttribute("SerializedFlg");
            }
        }
        return sr;
    }

    /**
     * Container's getter for TransSearchStkTake1.
     * @return TransSearchStkTake1
     */
    public ViewObjectImpl getTransSearchStkTake1() {
        return (ViewObjectImpl) findViewObject("TransSearchStkTake1");
    }


    public void searchStkTake(Timestamp fromdate, Timestamp todate) {

        String stkno = null;
        String prfid = null;

        /* Timestamp fromdate = null;
            Timestamp todate = null; */

        String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        // VariableValueManager vm =getMmStkTake1().ensureVariableManager();
        getMmStkTake1().setApplyViewCriteriaName("MmStkTakeVOCriteria");
        if (getTransSearchStkTake1().getCurrentRow().getAttribute("StkTakeNo") != null) {
            stkno = (String) getTransSearchStkTake1().getCurrentRow().getAttribute("StkTakeNo");
            getMmStkTake1().setNamedWhereClauseParam("StkTakeNoBind", stkno);
        } else
            getMmStkTake1().setNamedWhereClauseParam("StkTakeNoBind", null);

        if (getTransSearchStkTake1().getCurrentRow().getAttribute("PrfId") != null) {
            prfid = (String) getTransSearchStkTake1().getCurrentRow().getAttribute("PrfId");
            getMmStkTake1().setNamedWhereClauseParam("StkTakePrfIdBind", prfid);
        } else
            getMmStkTake1().setNamedWhereClauseParam("StkTakePrfIdBind", null);

        /* if(getTransSearchStkTake1().getCurrentRow().getAttribute("FromDate")!=null)
            {
                    fromdate = (Timestamp)getTransSearchStkTake1().getCurrentRow().getAttribute("FromDate");
                    getMmStkTake1().setNamedWhereClauseParam("StkTakeFromDate",fromdate);
                    System.out.println("From Date : "+fromdate.getValue());
                }
            else
            getMmStkTake1().setNamedWhereClauseParam("StkTakeFromDate",null);

            if(getTransSearchStkTake1().getCurrentRow().getAttribute("ToDate")!=null)
            {
                    todate = (Timestamp)getTransSearchStkTake1().getCurrentRow().getAttribute("ToDate");
                    getMmStkTake1().setNamedWhereClauseParam("StkTakeToDateBind",todate);
                    System.out.println("From Date : "+todate.getValue());
                }
            else
           getMmStkTake1().setNamedWhereClauseParam("StkTakeToDateBind",null); */

        getMmStkTake1().setNamedWhereClauseParam("StkTakeFromDate", fromdate);
        getMmStkTake1().setNamedWhereClauseParam("StkTakeToDateBind", todate);

        if (getTransSearchStkTake1().getCurrentRow().getAttribute("CldId") != null) {
            cld = (String) getTransSearchStkTake1().getCurrentRow().getAttribute("CldId");
            getMmStkTake1().setNamedWhereClauseParam("StkTakeCldBind", cld);
        }

        if (getTransSearchStkTake1().getCurrentRow().getAttribute("SlocId") != null) {
            sloc = (Integer) getTransSearchStkTake1().getCurrentRow().getAttribute("SlocId");
            getMmStkTake1().setNamedWhereClauseParam("StkTakeSlocBind", sloc);
        }

        if (getTransSearchStkTake1().getCurrentRow().getAttribute("OrgId") != null) {
            org = (String) getTransSearchStkTake1().getCurrentRow().getAttribute("OrgId");
            getMmStkTake1().setNamedWhereClauseParam("StkTakeOrgBind", org);
        }
        getMmStkTake1().executeQuery();

    }


    public void resetStkTake() {
        getMmStkTake1().setApplyViewCriteriaName("MmStkTakeVOCriteria");
        getMmStkTake1().setNamedWhereClauseParam("StkTakeNoBind", null);
        getMmStkTake1().setNamedWhereClauseParam("StkTakePrfIdBind", null);
        getMmStkTake1().setNamedWhereClauseParam("StkTakeFromDate", null);
        getMmStkTake1().setNamedWhereClauseParam("StkTakeToDateBind", null);


        getTransSearchStkTake1().getCurrentRow().setAttribute("FromDate", null);
        getTransSearchStkTake1().getCurrentRow().setAttribute("ToDate", null);
        getTransSearchStkTake1().getCurrentRow().setAttribute("PrfId", null);
        getTransSearchStkTake1().getCurrentRow().setAttribute("StkTakeNo", null);
        getMmStkTake1().executeQuery();

    }

    public void setKeyforTransItm() {
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");

        getItemTrans1().getCurrentRow().setAttribute("CldId", CldId);
        getItemTrans1().getCurrentRow().setAttribute("SlocId", SlocId);
        getItemTrans1().getCurrentRow().setAttribute("OrgId", OrgId);
        getItemTrans1().getCurrentRow().setAttribute("DocId", DocId);

    }


    public void setLotAcctoItem(String Wh) {
        //  System.out.println("Setting lot for all item");
        Integer i = -1;
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        String WhId = Wh;
        //filter itm vo according to header
        RowQualifier rq = new RowQualifier(getMmStkTakeItm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and WhId='" +
                          WhId + "' and DocId='" + DocId + "'");
        Row r[] = getMmStkTakeItm1().getFilteredRows(rq);
        if (r.length > 0)
            i = r.length - 1;
        //    System.out.println("No. of items to lot="+r.length);
        Row newrow = null;
        while (i >= 0) {
            Integer ilot = -1;
            String CldIditm = (String) r[i].getAttribute("CldId");
            Integer SlocIditm = (Integer) r[i].getAttribute("SlocId");
            String OrgIditm = (String) r[i].getAttribute("OrgId");
            String ItmIditm = (String) r[i].getAttribute("ItmId");
            String WhIditm = (String) r[i].getAttribute("WhId");
            RowQualifier rqlot = new RowQualifier(getMmStkSummLot1());
            rqlot.setWhereClause("CldId='" + CldIditm + "' and SlocId=" + SlocIditm + " and OrgId='" + OrgIditm +
                                 "' and WhId='" + WhIditm + "' and ItmId='" + ItmIditm + "'");
            Row rlot[] = getMmStkSummLot1().getFilteredRows(rqlot);
            if (rlot.length > 0)
                ilot = rlot.length - 1;
            while (ilot >= 0) {

                String CldIdlot = (String) rlot[ilot].getAttribute("CldId");
                Integer SlocIdlot = (Integer) rlot[ilot].getAttribute("SlocId");
                String OrgIdlot = (String) rlot[ilot].getAttribute("OrgId");
                String ItmIdlot = (String) rlot[ilot].getAttribute("ItmId");
                String WhIditmlot = (String) rlot[ilot].getAttribute("WhId");
                String DocIdlot = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
                String LotIdlot = (String) rlot[ilot].getAttribute("LotId");
                BigDecimal Totlot = new BigDecimal(rlot[ilot].getAttribute("TotStk").toString());
                String ItmUomBs = (String) rlot[ilot].getAttribute("ItmUomBs");

                // RowQualifier drq=new RowQualifier("CldId='"+CldIdlot+"' and SlocId="+SlocIdlot+" and OrgId='"+OrgIdlot+"'");// and WhId='"+WhIditmlot+" and ItmId='"+ItmIdlot+"' and DocId='"+DocIdlot+"' And LotId='"+LotIdlot+"'");
                RowQualifier drq = new RowQualifier(getMmStkTakeLot2());
                drq.setWhereClause("CldId='" + CldIdlot + "' and SlocId=" + SlocIdlot + " and OrgId='" + OrgIdlot +
                                   "' and WhId='" + WhIditmlot + "' and ItmId='" + ItmIdlot + "' and DocId='" +
                                   DocIdlot + "' And LotId='" + LotIdlot + "'");
                // System.out.println("CldId='"+CldIdlot+"' and SlocId="+SlocIdlot+" and OrgId='"+OrgIdlot+"' and WhId='"+WhIditmlot+"' and ItmId='"+ItmIdlot+"' and DocId='"+DocIdlot+"' And LotId='"+LotIdlot+"'");
                Row dr[] = getMmStkTakeLot2().getFilteredRows(drq);
                // System.out.println("Duplicate Rows in lot="+dr.length);
                if (dr.length == 0) {
                    newrow = getMmStkTakeLot1().createRow();
                    newrow.setAttribute("CldId", CldIdlot);
                    newrow.setAttribute("DocId", DocIdlot);
                    newrow.setAttribute("SlocId", SlocIdlot);
                    newrow.setAttribute("OrgId", OrgIdlot);
                    newrow.setAttribute("WhId", WhIditmlot);
                    newrow.setAttribute("ItmId", ItmIdlot);
                    newrow.setAttribute("LotId", LotIdlot);
                    newrow.setAttribute("TotQty", Totlot);
                    newrow.setAttribute("PhyQty", Totlot);
                    newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                    newrow.setAttribute("ItmUom", ItmUomBs);
                    newrow.setAttribute("DiffType", "A");
                    getMmStkTakeLot1().insertRow(newrow);
                }
                ilot--;
            }
            i--;
        }
        getMmStkTakeLot1().executeQuery();
        getMmStkTakeLot2().executeQuery();
    }


    public void setBinAcctoLot(String whbin) {
        Integer i = -1;
        Row newrow = null;
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        String WhId = whbin;
        RowQualifier rq = new RowQualifier(getMmStkTakeItm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and WhId='" +
                          WhId + "' and DocId='" + DocId + "'");
        Row r[] = getMmStkTakeItm1().getFilteredRows(rq);
        if (r.length > 0)
            i = r.length - 1;
        while (i >= 0) {
            Integer ilot = -1;
            String Cld = (String) r[i].getAttribute("CldId");
            Integer Sloc = (Integer) r[i].getAttribute("SlocId");
            String Org = (String) r[i].getAttribute("OrgId");
            String Wh = whbin;
            String Itm = (String) r[i].getAttribute("ItmId");
            RowQualifier rqlot = new RowQualifier(getMmStkSummLot1());
            rqlot.setWhereClause("CldId='" + Cld + "' and SlocId=" + Sloc + " and OrgId='" + Org + "' and WhId='" + Wh +
                                 "' and ItmId='" + Itm + "'");
            Row rlot[] = getMmStkSummLot1().getFilteredRows(rqlot);
            if (rlot.length > 0)
                ilot = rlot.length - 1;
            while (ilot >= 0) {
                Integer ibin = -1;
                String Cldlot = (String) rlot[ilot].getAttribute("CldId");
                Integer Sloclot = (Integer) rlot[ilot].getAttribute("SlocId");
                String Orglot = (String) rlot[ilot].getAttribute("OrgId");
                String Whlot = whbin;
                String Lotlot = (String) rlot[ilot].getAttribute("LotId");
                String Itmlot = (String) rlot[ilot].getAttribute("ItmId");

                RowQualifier rqbin = new RowQualifier(getMmStkSummBin1());
                rqbin.setWhereClause("CldId='" + Cldlot + "' and SlocId=" + Sloclot + " and OrgId='" + Orglot +
                                     "' and WhId='" + Whlot + "' and ItmId='" + Itmlot + "' and LotId='" + Lotlot +
                                     "'");
                Row rbin[] = getMmStkSummBin1().getFilteredRows(rqbin);
                if (rbin.length > 0)
                    ibin = rbin.length - 1;
                newrow = null;
                while (ibin >= 0) {

                    String Cldbin = (String) rbin[ibin].getAttribute("CldId");
                    Integer Slocbin = (Integer) rbin[ibin].getAttribute("SlocId");
                    String Orgbin = (String) rbin[ibin].getAttribute("OrgId");
                    String Whbin = whbin;
                    String Docbin = DocId;
                    String Lotbin = (String) rbin[ibin].getAttribute("LotId");
                    String Itmbin = (String) rbin[ibin].getAttribute("ItmId");
                    String Binbin = (String) rbin[ibin].getAttribute("BinId");
                    BigDecimal TotQtybin = new BigDecimal(rbin[ibin].getAttribute("TotStk").toString());
                    String ItmUombin = (String) rbin[ibin].getAttribute("ItmUomBs");

                    RowQualifier rqd = new RowQualifier(getMmStkTakeBin2());
                    rqd.setWhereClause("WhId = '" + Whbin + "' And CldId='" + Cldbin + "' and SlocId=" + Slocbin +
                                       " and OrgId='" + Orgbin + "' and DocId='" + Docbin + "' and ItmId='" + Itmbin +
                                       "' and LotId='" + Lotbin + "' and BinId='" + Binbin + "'");
                    Row rd[] = getMmStkTakeBin2().getFilteredRows(rqd);
                    if (rd.length == 0) {
                        newrow = getMmStkTakeBin1().createRow();
                        newrow.setAttribute("CldId", Cldbin);
                        newrow.setAttribute("SlocId", Slocbin);
                        newrow.setAttribute("OrgId", Orgbin);
                        newrow.setAttribute("WhId", Whbin);
                        newrow.setAttribute("DocId", Docbin);
                        newrow.setAttribute("LotId", Lotbin);
                        newrow.setAttribute("TotQty", TotQtybin);
                        newrow.setAttribute("PhyQty", TotQtybin);
                        newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                        newrow.setAttribute("DiffType", "A");
                        newrow.setAttribute("ItmUom", ItmUombin);
                        newrow.setAttribute("ItmId", Itmbin);
                        newrow.setAttribute("BinId", Binbin);
                        getMmStkTakeBin1().insertRow(newrow);
                    }
                    ibin--;
                }
                ilot--;
            }
            i--;
        }
        getMmStkTakeBin1().executeQuery();
        getMmStkTakeBin2().executeQuery();
    }


    public void setSrAcctoBin(String whsr) {
        //   System.out.println("Setting Sr acc to bin");
        Integer i = -1;
        Row newrow = null;
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        String WhId = whsr;
        RowQualifier rq = new RowQualifier(getMmStkTakeItm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and WhId='" +
                          WhId + "' and DocId='" + DocId + "'");
        Row r[] = getMmStkTakeItm1().getFilteredRows(rq);
        if (r.length > 0)
            i = r.length - 1;
        while (i >= 0) {
            Integer ilot = -1;
            String Cld = (String) r[i].getAttribute("CldId");
            Integer Sloc = (Integer) r[i].getAttribute("SlocId");
            String Org = (String) r[i].getAttribute("OrgId");
            String Wh = whsr;
            String Itm = (String) r[i].getAttribute("ItmId");
            RowQualifier rqlot = new RowQualifier(getMmStkSummLot1());
            rqlot.setWhereClause("CldId='" + Cld + "' and SlocId=" + Sloc + " and OrgId='" + Org + "' and WhId='" + Wh +
                                 "' and ItmId='" + Itm + "'");
            Row rlot[] = getMmStkSummLot1().getFilteredRows(rqlot);
            //        System.out.println("No. of lot added for item="+Itm+" ="+rlot.length);
            if (rlot.length > 0)
                ilot = rlot.length - 1;
            while (ilot >= 0) {
                //             System.out.println("lot no="+rlot[ilot].getAttribute("LotId"));
                Integer ibin = -1;
                String Cldlot = (String) rlot[ilot].getAttribute("CldId");
                Integer Sloclot = (Integer) rlot[ilot].getAttribute("SlocId");
                String Orglot = (String) rlot[ilot].getAttribute("OrgId");
                String Whlot = whsr;

                String Lotlot = (String) rlot[ilot].getAttribute("LotId");
                String Itmlot = (String) rlot[ilot].getAttribute("ItmId");

                RowQualifier rqbin = new RowQualifier(getMmStkSummBin1());
                rqbin.setWhereClause("CldId='" + Cldlot + "' and SlocId=" + Sloclot + " and OrgId='" + Orglot +
                                     "' and WhId='" + Whlot + "' and ItmId='" + Itmlot + "' and LotId='" + Lotlot +
                                     "'");
                Row rbin[] = getMmStkSummBin1().getFilteredRows(rqbin);
                if (rbin.length > 0)
                    ibin = rbin.length - 1;
                //             System.out.println("No. of bin for this item="+rbin.length);
                Integer isr = -1;
                while (ibin >= 0) {
                    String Cldbin = (String) rbin[ibin].getAttribute("CldId");
                    Integer Slocbin = (Integer) rbin[ibin].getAttribute("SlocId");
                    String Orgbin = (String) rbin[ibin].getAttribute("OrgId");
                    String Whbin = (String) rbin[ibin].getAttribute("WhId");
                    String Lotbin = (String) rbin[ibin].getAttribute("LotId");
                    String Itmbin = (String) rbin[ibin].getAttribute("ItmId");
                    String Binbin = (String) rbin[ibin].getAttribute("BinId");
                    String ItmUom = (String) rbin[ibin].getAttribute("ItmUomBs");
                    //     System.out.println("bin id="+Binbin);
                    RowQualifier rqsr = new RowQualifier(getMmStkSummSr1());
                    rqsr.setWhereClause("CldId='" + Cldbin + "' and SlocId=" + Slocbin + " and OrgId='" + Orgbin +
                                        "' and WhId='" + Whbin + "' and ItmId='" + Itmbin + "' and LotId='" + Lotbin +
                                        "' and BinId='" + Binbin + "'");
                    Row rsr[] = getMmStkSummSr1().getFilteredRows(rqsr);
                    if (rsr.length > 0)
                        isr = rsr.length - 1;
                    //                        System.out.println("No. of Sr for this bin="+rsr.length);
                    while (isr >= 0) {
                        RowQualifier rqd = new RowQualifier(getMmStkTakeSr2());
                        rqd.setWhereClause("WhId = '" + rsr[isr].getAttribute("WhId") + "' And CldId='" +
                                           rsr[isr].getAttribute("CldId") + "' and SlocId=" +
                                           rsr[isr].getAttribute("SlocId") + " and OrgId='" +
                                           rsr[isr].getAttribute("OrgId") + "' and DocId='" + DocId + "' and ItmId='" +
                                           rsr[isr].getAttribute("ItmId") + "' and LotId='" +
                                           rsr[isr].getAttribute("LotId") + "' and BinId='" +
                                           rsr[isr].getAttribute("BinId") + "' and SrNo='" +
                                           rsr[isr].getAttribute("SrNo") + "'");
                        Row rd[] = getMmStkTakeSr2().getFilteredRows(rqd);
                        if (rd.length == 0) {
                            //                 System.out.println("Sr create for "+rsr[isr].getAttribute("ItmId")+" ="+rsr[isr].getAttribute("SrNo"));
                            newrow = getMmStkTakeSr1().createRow();
                            newrow.setAttribute("CldId", rsr[isr].getAttribute("CldId"));
                            newrow.setAttribute("SlocId", rsr[isr].getAttribute("SlocId"));
                            newrow.setAttribute("OrgId", rsr[isr].getAttribute("OrgId"));
                            newrow.setAttribute("WhId", rsr[isr].getAttribute("WhId"));
                            newrow.setAttribute("DocId", DocId);
                            newrow.setAttribute("ItmId", rsr[isr].getAttribute("ItmId"));
                            newrow.setAttribute("BinId", rsr[isr].getAttribute("BinId"));
                            newrow.setAttribute("LotId", rsr[isr].getAttribute("LotId"));
                            newrow.setAttribute("TotQty", rsr[isr].getAttribute("TotStk"));
                            newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                            newrow.setAttribute("PhyQty", rsr[isr].getAttribute("TotStk"));
                            newrow.setAttribute("SrNo", rsr[isr].getAttribute("SrNo"));
                            newrow.setAttribute("ItmUom", ItmUom);
                            newrow.setAttribute("DiffType", "A");
                            getMmStkTakeSr1().insertRow(newrow);
                        }
                        isr--;
                    }
                    ibin--;
                }
                ilot--;
            }
            i--;
        }
        getMmStkTakeSr1().executeQuery();
        getMmStkTakeSr2().executeQuery();
    }


    public void setSrAcctoLot(String whsr) {
        Integer i = -1;
        Row newrow = null;
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        String WhId = whsr;
        RowQualifier rq = new RowQualifier(getMmStkTakeItm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and WhId='" +
                          WhId + "' and DocId='" + DocId + "'");
        Row r[] = getMmStkTakeItm1().getFilteredRows(rq);

        if (r.length > 0)
            i = r.length - 1;
        while (i >= 0) {
            Integer ilot = -1;
            String Cld = (String) r[i].getAttribute("CldId");
            Integer Sloc = (Integer) r[i].getAttribute("SlocId");
            String Org = (String) r[i].getAttribute("OrgId");
            String Wh = (String) r[i].getAttribute("WhId");
            String Doc = (String) r[i].getAttribute("DocId");
            String Itm = (String) r[i].getAttribute("ItmId");
            RowQualifier rqlot = new RowQualifier(getMmStkSummLot1());
            rqlot.setWhereClause("CldId='" + Cld + "' and SlocId=" + Sloc + " and OrgId='" + Org + "' and WhId='" + Wh +
                                 "' and ItmId='" + Itm + "'");
            Row rlot[] = getMmStkSummLot1().getFilteredRows(rqlot);

            if (rlot.length > 0)
                ilot = rlot.length - 1;
            while (ilot >= 0) {
                String Cldlot = (String) rlot[ilot].getAttribute("CldId");
                Integer Sloclot = (Integer) rlot[ilot].getAttribute("SlocId");
                String Orglot = (String) rlot[ilot].getAttribute("OrgId");
                String Whlot = (String) rlot[ilot].getAttribute("WhId");

                String Lotlot = (String) rlot[ilot].getAttribute("LotId");
                String Itmlot = (String) rlot[ilot].getAttribute("ItmId");
                String ItmUom = (String) rlot[ilot].getAttribute("ItmUomBs");
                String Binbin = "0";
                Integer isr = -1;
                RowQualifier rqsr = new RowQualifier(getMmStkSummSr1());
                rqsr.setWhereClause("CldId='" + Cldlot + "' and SlocId=" + Sloclot + " and OrgId='" + Orglot +
                                    "' and WhId='" + Whlot + "' and ItmId='" + Itmlot + "' and LotId='" + Lotlot +
                                    "' and BinId='" + Binbin + "'");
                Row rsr[] = getMmStkSummSr1().getFilteredRows(rqsr);
                if (rsr.length > 0)
                    isr = rsr.length - 1;
                while (isr >= 0) {
                    RowQualifier rqd = new RowQualifier(getMmStkTakeSr2());
                    rqd.setWhereClause("WhId = '" + rsr[isr].getAttribute("WhId") + "' And CldId='" +
                                       rsr[isr].getAttribute("CldId") + "' and SlocId=" +
                                       rsr[isr].getAttribute("SlocId") + " and OrgId='" +
                                       rsr[isr].getAttribute("OrgId") + "' and DocId='" + DocId + "' and ItmId='" +
                                       rsr[isr].getAttribute("ItmId") + "' and LotId='" +
                                       rsr[isr].getAttribute("LotId") + "' and BinId='" +
                                       rsr[isr].getAttribute("BinId") + "' and SrNo='" + rsr[isr].getAttribute("SrNo") +
                                       "'");
                    Row rd[] = getMmStkTakeSr2().getFilteredRows(rqd);
                    if (rd.length == 0) {
                        newrow = getMmStkTakeSr1().createRow();
                        newrow.setAttribute("CldId", rsr[isr].getAttribute("CldId"));
                        newrow.setAttribute("SlocId", rsr[isr].getAttribute("SlocId"));
                        newrow.setAttribute("OrgId", rsr[isr].getAttribute("OrgId"));
                        newrow.setAttribute("WhId", rsr[isr].getAttribute("WhId"));
                        newrow.setAttribute("DocId", DocId);
                        newrow.setAttribute("ItmId", rsr[isr].getAttribute("ItmId"));
                        newrow.setAttribute("BinId", rsr[isr].getAttribute("BinId"));
                        newrow.setAttribute("LotId", rsr[isr].getAttribute("LotId"));
                        newrow.setAttribute("TotQty", rsr[isr].getAttribute("TotStk"));
                        newrow.setAttribute("PhyQty", rsr[isr].getAttribute("TotStk"));
                        newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                        newrow.setAttribute("DiffType", "A");
                        newrow.setAttribute("ItmUom", ItmUom);
                        newrow.setAttribute("SrNo", rsr[isr].getAttribute("SrNo"));
                        getMmStkTakeSr1().insertRow(newrow);
                    }
                    isr--;
                }
                ilot--;
            }
            i--;
        }
        getMmStkTakeSr1().executeQuery();
        getMmStkTakeSr2().executeQuery();
    }


    /**
     * Container's getter for MmStkSummBin1.
     * @return MmStkSummBin1
     */
    public ViewObjectImpl getMmStkSummBin1() {
        return (ViewObjectImpl) findViewObject("MmStkSummBin1");
    }

    /**
     * Container's getter for MmStkSummSr1.
     * @return MmStkSummSr1
     */
    public ViewObjectImpl getMmStkSummSr1() {
        return (ViewObjectImpl) findViewObject("MmStkSummSr1");
    }

    /**
     * Container's getter for TransAddItem1.
     * @return TransAddItem1
     */
    public ViewObjectImpl getTransAddItem1() {
        return (ViewObjectImpl) findViewObject("TransAddItem1");
    }

    public void setItmfronewarehouse(String itm, String wh) {
        //System.out.println("setItmfronewarehouse");
        String CldId = getMmStkTake1().getCurrentRow().getAttribute("CldId").toString();
        String OrgId = getMmStkTake1().getCurrentRow().getAttribute("OrgId").toString();
        String DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        Integer SlocId = Integer.parseInt(getMmStkTake1().getCurrentRow().getAttribute("SlocId").toString());
        String HoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String WhId = wh;
        String ItmId = itm;
        System.out.println(CldId + " " + SlocId + " " + HoOrg + " " + OrgId + " " + WhId + " " + ItmId + " " + DocId);
        Integer stknum = (Integer) callStoredFunction(Types.INTEGER, "MM_STK_TAKE_INIT(?,?,?,?,?,?,?,?)", new Object[] {
                                                      CldId, SlocId, HoOrg, OrgId, WhId, ItmId, "N", DocId
        });
        System.out.println("Returned value:" + stknum);
    }

    public void setItmForAllWareHouse(String itm, String wh) {
        //System.out.println("setItmForAllWareHouse");
        String CldId = getMmStkTake1().getCurrentRow().getAttribute("CldId").toString();
        String OrgId = getMmStkTake1().getCurrentRow().getAttribute("OrgId").toString();
        String DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        Integer SlocId = Integer.parseInt(getMmStkTake1().getCurrentRow().getAttribute("SlocId").toString());
        String HoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String WhId = wh;
        String ItmId = itm;
        System.out.println(CldId + " " + SlocId + " " + HoOrg + " " + OrgId + " " + WhId + " " + ItmId + " " + DocId);
        Integer stknum = (Integer) callStoredFunction(Types.INTEGER, "MM_STK_TAKE_INIT(?,?,?,?,?,?,?,?)", new Object[] {
                                                      CldId, SlocId, HoOrg, OrgId, WhId, ItmId, "Y", DocId
        });
        System.out.println("Returned value:" + stknum);
    }

    public void setitemforonewarehouse(String itm, String wh) {
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        Integer FyId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("FyId");
        String WhId = wh;
        String ItmId = itm;
        Integer i = -1;

        RowQualifier rq = new RowQualifier(getStkItmSumm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and WhId='" +
                          WhId + "' and ItmId='" + ItmId + "' and FyId=" + FyId);
        // rq.setWhereClause("CldId='"+CldId+"' and SlocId="+SlocId+" and OrgId='"+OrgId+"' and WhId='"+WhId+"' and ItmId='"+ItmId+"'");
        Row r[] = getStkItmSumm1().getFilteredRows(rq);
        if (r.length > 0) {
            i = r.length - 1;
            Row newrow = null;
            Integer count = 0;
            while (i >= 0) {
                RowQualifier drq = new RowQualifier(getMmStkTakeItm2());
                drq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId +
                                   "' and WhId='" + WhId + "' and ItmId='" + ItmId + "' and DocId='" + DocId + "'");
                Row dr[] = getMmStkTakeItm2().getFilteredRows(drq);
                if (dr.length == 0) {
                    count = count + 1;
                    newrow = getMmStkTakeItm1().createRow();
                    newrow.setAttribute("DocId", DocId);
                    newrow.setAttribute("CldId", CldId);
                    newrow.setAttribute("SlocId", SlocId);
                    newrow.setAttribute("OrgId", OrgId);
                    newrow.setAttribute("WhId", WhId);
                    newrow.setAttribute("ItmId", ItmId);
                    newrow.setAttribute("ReqQty", r[i].getAttribute("ReqStk"));
                    newrow.setAttribute("OrdQty", r[i].getAttribute("OrdStk"));
                    newrow.setAttribute("TotQty", r[i].getAttribute("TotStk"));
                    newrow.setAttribute("PhyQty", r[i].getAttribute("TotStk"));
                    newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                    newrow.setAttribute("DiffType", "A");
                    newrow.setAttribute("ItmUom", r[i].getAttribute("ItmUomBs"));
                    getMmStkTakeItm1().insertRow(newrow);
                }
                i--;
            }
            getMmStkTakeItm1().executeQuery();
            getMmStkTakeItm2().executeQuery();
            if (count == 0) {
                FacesMessage msg =
                    new FacesMessage(resolvElDCMsg("Item for selected Warehouse is already added to this Slip").toString());
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext ctx = FacesContext.getCurrentInstance();
                ctx.addMessage(null, msg);
                //show message for all items added in stock.feaf
            }
        } else {
            FacesMessage msg = new FacesMessage(resolvElDCMsg("This Item is not in Selected Warehouse.").toString());
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext ctx = FacesContext.getCurrentInstance();
            ctx.addMessage(null, msg);
            //show msg for no item in warehouse
        }
    }

    /**
     * Container's getter for TransDistinctItem1.
     * @return TransDistinctItem1
     */
    public TransDistinctItemVOImpl getTransDistinctItem1() {
        return (TransDistinctItemVOImpl) findViewObject("TransDistinctItem1");
    }

    /**
     * Container's getter for DistinctWh1.
     * @return DistinctWh1
     */
    public ViewObjectImpl getDistinctWh1() {
        return (ViewObjectImpl) findViewObject("DistinctWh1");
    }

    public void setlotforonewarehouse(String itm, String wh) {
        //    System.out.println("Setting lot for one wh");
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String WhId = wh;
        String ItmId = itm;
        RowQualifier rq = new RowQualifier(getMmStkSummLot1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and WhId='" +
                          WhId + "' and ItmId='" + ItmId + "'");
        Row r[] = getMmStkSummLot1().getFilteredRows(rq);
        Integer i = -1;
        // System.out.println("length="+r.length);
        if (r.length > 0)
            i = r.length - 1;
        Row newrow = null;
        while (i >= 0) {

            String CldIdlot = (String) r[i].getAttribute("CldId");
            Integer SlocIdlot = (Integer) r[i].getAttribute("SlocId");
            String OrgIdlot = (String) r[i].getAttribute("OrgId");
            String ItmIdlot = (String) r[i].getAttribute("ItmId");
            String WhIditmlot = (String) r[i].getAttribute("WhId");
            String DocIdlot = DocId;
            String LotIdlot = (String) r[i].getAttribute("LotId");
            BigDecimal Totlot = new BigDecimal(r[i].getAttribute("TotStk").toString());
            String ItmUomBs = (String) r[i].getAttribute("ItmUomBs");
            RowQualifier drq = new RowQualifier(getMmStkTakeLot2());
            drq.setWhereClause("CldId='" + CldIdlot + "' and SlocId=" + SlocIdlot + " and OrgId='" + OrgIdlot +
                               "' and WhId='" + WhIditmlot + "' and ItmId='" + ItmIdlot + "' and DocId='" + DocIdlot +
                               "' and LotId='" + LotIdlot + "'");
            Row dr[] = getMmStkTakeLot2().getFilteredRows(drq);

            if (dr.length == 0) {
                newrow = getMmStkTakeLot1().createRow();
                newrow.setAttribute("CldId", CldIdlot);
                newrow.setAttribute("DocId", DocIdlot);
                newrow.setAttribute("SlocId", SlocIdlot);
                newrow.setAttribute("OrgId", OrgIdlot);
                newrow.setAttribute("WhId", WhIditmlot);
                newrow.setAttribute("ItmId", ItmIdlot);
                newrow.setAttribute("LotId", LotIdlot);
                newrow.setAttribute("TotQty", Totlot);
                newrow.setAttribute("ItmUom", ItmUomBs);
                newrow.setAttribute("PhyQty", Totlot);
                newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                newrow.setAttribute("DiffType", "A");
                getMmStkTakeLot1().insertRow(newrow);
            }
            i--;

        }
        getMmStkTakeLot1().executeQuery();
        getMmStkTakeLot2().executeQuery();
    }


    public void setbinforonewarehouse(String itm, String wh) {
        //    System.out.println("Setting bin for one wh");
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String WhId = wh;
        String ItmId = itm;
        RowQualifier rq = new RowQualifier(getMmStkSummLot1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and WhId='" +
                          WhId + "' and ItmId='" + ItmId + "'");
        Row r[] = getMmStkSummLot1().getFilteredRows(rq);
        Integer i = -1;
        if (r.length > 0)
            i = r.length - 1;
        while (i >= 0) {
            String CldIdlot = (String) r[i].getAttribute("CldId");
            Integer SlocIdlot = (Integer) r[i].getAttribute("SlocId");
            String OrgIdlot = (String) r[i].getAttribute("OrgId");
            String WhIdlot = (String) r[i].getAttribute("WhId");
            String ItmIdlot = (String) r[i].getAttribute("ItmId");
            String LotIdlot = (String) r[i].getAttribute("LotId");

            RowQualifier rqbin = new RowQualifier(getMmStkSummBin1());
            rqbin.setWhereClause("CldId='" + CldIdlot + "' and SlocId=" + SlocIdlot + " and OrgId='" + OrgIdlot +
                                 "' and WhId='" + WhIdlot + "' and ItmId='" + ItmIdlot + "' and LotId='" + LotIdlot +
                                 "'");
            Row[] rbin = getMmStkSummBin1().getFilteredRows(rqbin);
            //       System.out.println("No. of bin="+rbin.length);
            Integer ibin = -1;
            if (rbin.length > 0)
                ibin = rbin.length - 1;
            Row newrow = null;
            while (ibin >= 0) {


                String CldIdbin = (String) rbin[ibin].getAttribute("CldId");
                Integer SlocIdbin = (Integer) rbin[ibin].getAttribute("SlocId");
                String OrgIdbin = (String) rbin[ibin].getAttribute("OrgId");
                String DocIdbin = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
                String WhIdbin = (String) rbin[ibin].getAttribute("WhId");
                String ItmIdbin = (String) rbin[ibin].getAttribute("ItmId");
                String LotIdbin = (String) rbin[ibin].getAttribute("LotId");
                String Binidbin = (String) rbin[ibin].getAttribute("BinId");
                String ItmUom = (String) rbin[ibin].getAttribute("ItmUomBs");
                BigDecimal TotQty = (BigDecimal) rbin[ibin].getAttribute("TotStk");
                RowQualifier rqd = new RowQualifier(getMmStkTakeBin2());
                rqd.setWhereClause("CldId='" + CldIdbin + "' and SlocId=" + SlocIdbin + " and OrgId='" + OrgIdbin +
                                   "' and WhId='" + WhIdbin + "' and ItmId='" + ItmIdbin + "' and LotId='" + LotIdbin +
                                   "' and DocId='" + DocIdbin + "' and BinId='" + Binidbin + "'");
                Row[] rd = getMmStkTakeBin2().getFilteredRows(rqd);
                //          System.out.println("No of same row in bin="+rd.length);
                if (rd.length == 0) {
                    newrow = getMmStkTakeBin1().createRow();
                    newrow.setAttribute("CldId", CldIdbin);
                    newrow.setAttribute("SlocId", SlocIdbin);
                    newrow.setAttribute("OrgId", OrgIdbin);
                    newrow.setAttribute("DocId", DocIdbin);
                    newrow.setAttribute("WhId", WhIdbin);
                    newrow.setAttribute("ItmId", ItmIdbin);
                    newrow.setAttribute("LotId", LotIdbin);
                    newrow.setAttribute("BinId", Binidbin);
                    newrow.setAttribute("ItmUom", ItmUom);
                    newrow.setAttribute("TotQty", TotQty);
                    newrow.setAttribute("PhyQty", TotQty);
                    newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                    newrow.setAttribute("DiffType", "A");
                    getMmStkTakeBin1().insertRow(newrow);
                }
                ibin--;
            }
            i--;
        }
        getMmStkTakeBin1().executeQuery();
        getMmStkTakeBin2().executeQuery();
    }


    public void setsrfromlotforonewh(String itm, String wh) {
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String WhId = wh;
        String ItmId = itm;
        RowQualifier rq = new RowQualifier(getMmStkSummLot1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and WhId='" +
                          WhId + "' and ItmId='" + ItmId + "'");
        Row r[] = getMmStkSummLot1().getFilteredRows(rq);
        Integer i = -1;
        if (r.length > 0)
            i = r.length - 1;
        while (i >= 0) {
            String CldIdlot = (String) r[i].getAttribute("CldId");
            Integer SlocIdlot = (Integer) r[i].getAttribute("SlocId");
            String OrgIdlot = (String) r[i].getAttribute("OrgId");
            String WhIdlot = (String) r[i].getAttribute("WhId");
            String ItmIdlot = (String) r[i].getAttribute("ItmId");
            String LotIdlot = (String) r[i].getAttribute("LotId");
            String ItmUom = (String) r[i].getAttribute("ItmUomBs");

            RowQualifier rqbin = new RowQualifier(getMmStkSummSr1());
            rqbin.setWhereClause("CldId='" + CldIdlot + "' and SlocId=" + SlocIdlot + " and OrgId='" + OrgIdlot +
                                 "' and WhId='" + WhIdlot + "' and ItmId='" + ItmIdlot + "' and LotId='" + LotIdlot +
                                 "' and BinId='0'");
            Row[] rbin = getMmStkSummSr1().getFilteredRows(rqbin);
            Integer ibin = -1;
            if (rbin.length > 0)
                ibin = rbin.length - 1;
            Row newrow = null;
            while (ibin >= 0) {

                String CldIdbin = (String) rbin[ibin].getAttribute("CldId");
                Integer SlocIdbin = (Integer) rbin[ibin].getAttribute("SlocId");
                String OrgIdbin = (String) rbin[ibin].getAttribute("OrgId");
                String DocIdbin = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
                String WhIdbin = (String) rbin[ibin].getAttribute("WhId");
                String ItmIdbin = (String) rbin[ibin].getAttribute("ItmId");
                String LotIdbin = (String) rbin[ibin].getAttribute("LotId");
                String Binidbin = (String) rbin[ibin].getAttribute("BinId");
                String SrIdbin = (String) rbin[ibin].getAttribute("SrNo");
                Integer TotQty = (Integer) rbin[ibin].getAttribute("TotStk");
                //    String ItmUom = (String)rbin[ibin].getAttribute("ItmUomBs");
                RowQualifier rqd = new RowQualifier(getMmStkTakeSr2());
                rqd.setWhereClause("CldId='" + CldIdbin + "' and SlocId=" + SlocIdbin + " and OrgId='" + OrgIdbin +
                                   "' and WhId='" + WhIdbin + "' and ItmId='" + ItmIdbin + "' and LotId='" + LotIdbin +
                                   "' and BinId='" + Binidbin + "' and DocId='" + DocIdbin + "' and SrNo='" + SrIdbin +
                                   "'");
                Row[] rd = getMmStkTakeSr2().getFilteredRows(rqd);

                if (rd.length == 0) {
                    newrow = getMmStkTakeSr5().createRow();
                    newrow.setAttribute("CldId", CldIdbin);
                    newrow.setAttribute("SlocId", SlocIdbin);
                    newrow.setAttribute("OrgId", OrgIdbin);
                    newrow.setAttribute("DocId", DocIdbin);
                    newrow.setAttribute("WhId", WhIdbin);
                    newrow.setAttribute("ItmId", ItmIdbin);
                    newrow.setAttribute("LotId", LotIdbin);
                    newrow.setAttribute("BinId", Binidbin);
                    newrow.setAttribute("SrNo", SrIdbin);
                    newrow.setAttribute("TotQty", TotQty);
                    newrow.setAttribute("PhyQty", TotQty);
                    newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                    newrow.setAttribute("ItmUom", ItmUom);
                    newrow.setAttribute("DiffType", "A");
                    getMmStkTakeSr5().insertRow(newrow);
                }
                ibin--;
            }
            i--;
        }
        getMmStkTakeSr5().executeQuery();
        getMmStkTakeSr2().executeQuery();
    }


    public void setsrfrombinforonewh(String itm, String wh) {

        String Cld = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer Sloc = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String Org = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String Doc = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        String Wh = wh;
        String Itm = itm;
        RowQualifier rqlot = new RowQualifier(getMmStkSummLot1());
        rqlot.setWhereClause("CldId='" + Cld + "' and SlocId=" + Sloc + " and OrgId='" + Org + "' and WhId='" + Wh +
                             "' and ItmId='" + Itm + "'");
        Row rlot[] = getMmStkSummLot1().getFilteredRows(rqlot);
        Integer ilot = -1;
        if (rlot.length > 0)
            ilot = rlot.length - 1;
        while (ilot >= 0) {
            Integer ibin = -1;
            String Cldlot = (String) rlot[ilot].getAttribute("CldId");
            Integer Sloclot = (Integer) rlot[ilot].getAttribute("SlocId");
            String Orglot = (String) rlot[ilot].getAttribute("OrgId");
            String Whlot = (String) rlot[ilot].getAttribute("WhId");
            String Lotlot = (String) rlot[ilot].getAttribute("LotId");
            String Itmlot = (String) rlot[ilot].getAttribute("ItmId");
            // String ItmUom=(String)rlot[ilot].getAttribute("ItmUomBs");
            RowQualifier rqbin = new RowQualifier(getMmStkSummBin1());
            rqbin.setWhereClause("CldId='" + Cldlot + "' and SlocId=" + Sloclot + " and OrgId='" + Orglot +
                                 "' and WhId='" + Whlot + "' and ItmId='" + Itmlot + "' and LotId='" + Lotlot + "'");
            Row rbin[] = getMmStkSummBin1().getFilteredRows(rqbin);
            if (rbin.length > 0)
                ibin = rbin.length - 1;

            Integer isr = -1;
            while (ibin >= 0) {
                String Cldbin = (String) rbin[ibin].getAttribute("CldId");
                Integer Slocbin = (Integer) rbin[ibin].getAttribute("SlocId");
                String Orgbin = (String) rbin[ibin].getAttribute("OrgId");
                String Whbin = (String) rbin[ibin].getAttribute("WhId");
                String Lotbin = (String) rbin[ibin].getAttribute("LotId");
                String Itmbin = (String) rbin[ibin].getAttribute("ItmId");
                String Binbin = (String) rbin[ibin].getAttribute("BinId");
                String ItmUom = (String) rbin[ibin].getAttribute("ItmUomBs");

                RowQualifier rqsr = new RowQualifier(getMmStkSummSr1());
                rqsr.setWhereClause("CldId='" + Cldbin + "' and SlocId=" + Slocbin + " and OrgId='" + Orgbin +
                                    "' and WhId='" + Whbin + "' and ItmId='" + Itmbin + "' and LotId='" + Lotbin +
                                    "' and BinId='" + Binbin + "'");
                Row rsr[] = getMmStkSummSr1().getFilteredRows(rqsr);
                if (rsr.length > 0)
                    isr = rsr.length - 1;
                Row newrow = null;
                while (isr >= 0) {
                    RowQualifier rqd = new RowQualifier(getMmStkTakeSr2());
                    rqd.setWhereClause("CldId='" + rsr[isr].getAttribute("CldId") + "' and SlocId=" +
                                       rsr[isr].getAttribute("SlocId") + " and OrgId='" +
                                       rsr[isr].getAttribute("OrgId") + "' and WhId='" + rsr[isr].getAttribute("WhId") +
                                       "' and ItmId='" + rsr[isr].getAttribute("ItmId") + "' and LotId='" +
                                       rsr[isr].getAttribute("LotId") + "' and BinId='" +
                                       rsr[isr].getAttribute("BinId") + "' and DocId='" + Doc + "' and SrNo='" +
                                       rsr[isr].getAttribute("SrNo") + "'");
                    Row[] rd = getMmStkTakeSr2().getFilteredRows(rqd);

                    if (rd.length == 0) {
                        newrow = getMmStkTakeSr1().createRow();
                        newrow.setAttribute("CldId", rsr[isr].getAttribute("CldId"));
                        newrow.setAttribute("SlocId", rsr[isr].getAttribute("SlocId"));
                        newrow.setAttribute("OrgId", rsr[isr].getAttribute("OrgId"));
                        newrow.setAttribute("WhId", rsr[isr].getAttribute("WhId"));
                        newrow.setAttribute("DocId", Doc);
                        newrow.setAttribute("ItmId", rsr[isr].getAttribute("ItmId"));
                        newrow.setAttribute("BinId", rsr[isr].getAttribute("BinId"));
                        newrow.setAttribute("LotId", rsr[isr].getAttribute("LotId"));
                        newrow.setAttribute("TotQty", rsr[isr].getAttribute("TotStk"));
                        newrow.setAttribute("PhyQty", rsr[isr].getAttribute("TotStk"));
                        newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                        newrow.setAttribute("ItmUom", ItmUom);
                        newrow.setAttribute("SrNo", rsr[isr].getAttribute("SrNo"));
                        newrow.setAttribute("DiffType", "A");
                        getMmStkTakeSr1().insertRow(newrow);
                    }
                    isr--;
                }
                ibin--;
            }
            ilot--;
        }
        getMmStkTakeSr1().executeQuery();
        getMmStkTakeSr2().executeQuery();
    }


    public void setItemForAllWh(String itm) {
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        Integer fyId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("FyId");
        String ItmId = itm;
        RowQualifier rq = new RowQualifier(getStkItmSumm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and ItmId='" +
                          ItmId + "' and FyId=" + fyId);
        Row r[] = getStkItmSumm1().getFilteredRows(rq);
        Integer i = -1;
        if (r.length > 0) {
            i = r.length - 1;
            Row newrow = null;
            Integer count = 0;
            while (i >= 0) {
                RowQualifier drq = new RowQualifier(getMmStkTakeItm2());
                drq.setWhereClause("CldId='" + r[i].getAttribute("CldId") + "' and SlocId=" +
                                   r[i].getAttribute("SlocId") + " and OrgId='" + r[i].getAttribute("OrgId") +
                                   "' and WhId='" + r[i].getAttribute("WhId") + "' and ItmId='" +
                                   r[i].getAttribute("ItmId") + "' and DocId='" + DocId + "'");
                Row dr[] = getMmStkTakeItm2().getFilteredRows(drq);
                if (dr.length == 0) {
                    count = count + 1;
                    newrow = getMmStkTakeItm1().createRow();
                    newrow.setAttribute("CldId", r[i].getAttribute("CldId"));
                    newrow.setAttribute("SlocId", r[i].getAttribute("SlocId"));
                    newrow.setAttribute("OrgId", r[i].getAttribute("OrgId"));
                    newrow.setAttribute("DocId", DocId);
                    newrow.setAttribute("WhId", r[i].getAttribute("WhId"));
                    newrow.setAttribute("ItmId", r[i].getAttribute("ItmId"));
                    newrow.setAttribute("ReqQty", r[i].getAttribute("ReqStk"));
                    newrow.setAttribute("OrdQty", r[i].getAttribute("OrdStk"));
                    newrow.setAttribute("TotQty", r[i].getAttribute("TotStk"));
                    newrow.setAttribute("PhyQty", r[i].getAttribute("TotStk"));
                    newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                    newrow.setAttribute("DiffType", "A");
                    newrow.setAttribute("ItmUom", r[i].getAttribute("ItmUomBs"));
                    getMmStkTakeItm1().insertRow(newrow);
                }
                i--;
            }
            getMmStkTakeItm1().executeQuery();
            if (count ==
                0) {
                //Item of all warehouse already added to slip
                FacesMessage msg =
           new FacesMessage(resolvElDCMsg("This Item for all warehouse already added to slip.").toString());
                msg.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext ctx = FacesContext.getCurrentInstance();
                ctx.addMessage(null, msg);
            }
        } else {
            //This item is not in any of warehouse.
            FacesMessage msg = new FacesMessage(resolvElDCMsg("This Item is not in any Warehouse.").toString());
            msg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext ctx = FacesContext.getCurrentInstance();
            ctx.addMessage(null, msg);
        }
    }

    public void setLotForAllWh(String itm) {
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        String ItmId = itm;
        RowQualifier rq = new RowQualifier(getMmStkTakeItm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and ItmId='" +
                          ItmId + "' and DocId='" + DocId + "'");
        Row r[] = getMmStkTakeItm1().getFilteredRows(rq);
        Integer i = -1;
        //  System.out.println("Length="+r.length);
        if (r.length > 0)
            i = r.length - 1;
        while (i >= 0) {
            String CldItm = (String) r[i].getAttribute("CldId");
            Integer SlocItm = (Integer) r[i].getAttribute("SlocId");
            String OrgItm = (String) r[i].getAttribute("OrgId");
            String WhItm = (String) r[i].getAttribute("WhId");
            String ItmItm = itm;
            RowQualifier rqlot = new RowQualifier(getMmStkSummLot1());
            rqlot.setWhereClause("CldId='" + CldItm + "' and SlocId=" + SlocItm + " and OrgId='" + OrgItm +
                                 "' and ItmId='" + ItmItm + "' and WhId='" + WhItm + "'");
            Row rlot[] = getMmStkSummLot1().getFilteredRows(rqlot);
            Integer ilot = -1;
            if (rlot.length > 0)
                ilot = rlot.length - 1;
            Row newrow = null;
            while (ilot >= 0) {
                RowQualifier rqd = new RowQualifier(getMmStkTakeLot2());
                rqd.setWhereClause("CldId='" + rlot[ilot].getAttribute("CldId") + "' and SlocId=" +
                                   rlot[ilot].getAttribute("SlocId") + " and OrgId='" +
                                   rlot[ilot].getAttribute("OrgId") + "' and ItmId='" +
                                   rlot[ilot].getAttribute("ItmId") + "' and WhId='" + rlot[ilot].getAttribute("WhId") +
                                   "' and LotId='" + rlot[ilot].getAttribute("LotId") + "' and DocId='" + DocId + "'");
                Row rd[] = getMmStkTakeLot2().getFilteredRows(rqd);
                if (rd.length == 0) {
                    newrow = getMmStkTakeLot1().createRow();
                    newrow.setAttribute("CldId", rlot[ilot].getAttribute("CldId"));
                    newrow.setAttribute("SlocId", rlot[ilot].getAttribute("SlocId"));
                    newrow.setAttribute("OrgId", rlot[ilot].getAttribute("OrgId"));
                    newrow.setAttribute("WhId", rlot[ilot].getAttribute("WhId"));
                    newrow.setAttribute("DocId", DocId);
                    newrow.setAttribute("ItmId", rlot[ilot].getAttribute("ItmId"));
                    newrow.setAttribute("LotId", rlot[ilot].getAttribute("LotId"));
                    newrow.setAttribute("ItmUom", rlot[ilot].getAttribute("ItmUomBs"));
                    newrow.setAttribute("TotQty", rlot[ilot].getAttribute("TotStk"));
                    newrow.setAttribute("PhyQty", rlot[ilot].getAttribute("TotStk"));
                    newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                    newrow.setAttribute("DiffType", "A");
                    getMmStkTakeLot1().insertRow(newrow);
                }
                ilot--;
            }
            i--;
        }
        getMmStkTakeLot1().executeQuery();
        getMmStkTakeLot2().executeQuery();
    }

    public void setBinforAllWh(String itm) {
        Integer i = -1;
        Row newrow = null;
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        String ItmId = itm;
        RowQualifier rq = new RowQualifier(getMmStkTakeItm1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and ItmId='" +
                          ItmId + "' and DocId='" + DocId + "'");
        Row r[] = getMmStkTakeItm1().getFilteredRows(rq);
        if (r.length > 0)
            i = r.length - 1;
        while (i >= 0) {
            Integer ilot = -1;
            String Cld = (String) r[i].getAttribute("CldId");
            Integer Sloc = (Integer) r[i].getAttribute("SlocId");
            String Org = (String) r[i].getAttribute("OrgId");
            String Wh = (String) r[i].getAttribute("WhId");
            String Doc = (String) r[i].getAttribute("DocId");
            String Itm = (String) r[i].getAttribute("ItmId");
            RowQualifier rqlot = new RowQualifier(getMmStkSummLot1());
            rqlot.setWhereClause("CldId='" + Cld + "' and SlocId=" + Sloc + " and OrgId='" + Org + "' and WhId='" + Wh +
                                 "' and ItmId='" + Itm + "'");
            Row rlot[] = getMmStkSummLot1().getFilteredRows(rqlot);
            if (rlot.length > 0)
                ilot = rlot.length - 1;
            while (ilot >= 0) {
                Integer ibin = -1;
                String Cldlot = (String) rlot[ilot].getAttribute("CldId");
                Integer Sloclot = (Integer) rlot[ilot].getAttribute("SlocId");
                String Orglot = (String) rlot[ilot].getAttribute("OrgId");
                String Whlot = (String) rlot[ilot].getAttribute("WhId");
                String Lotlot = (String) rlot[ilot].getAttribute("LotId");
                String Itmlot = (String) rlot[ilot].getAttribute("ItmId");

                RowQualifier rqbin = new RowQualifier(getMmStkSummBin1());
                rqbin.setWhereClause("CldId='" + Cldlot + "' and SlocId=" + Sloclot + " and OrgId='" + Orglot +
                                     "' and WhId='" + Whlot + "' and ItmId='" + Itmlot + "' and LotId='" + Lotlot +
                                     "'");
                Row rbin[] = getMmStkSummBin1().getFilteredRows(rqbin);
                if (rbin.length > 0)
                    ibin = rbin.length - 1;
                while (ibin >= 0) {

                    String Cldbin = (String) rbin[ibin].getAttribute("CldId");
                    Integer Slocbin = (Integer) rbin[ibin].getAttribute("SlocId");
                    String Orgbin = (String) rbin[ibin].getAttribute("OrgId");
                    String Whbin = (String) rbin[ibin].getAttribute("WhId");
                    String Docbin = DocId;
                    String Lotbin = (String) rbin[ibin].getAttribute("LotId");
                    String Itmbin = (String) rbin[ibin].getAttribute("ItmId");
                    String Binbin = (String) rbin[ibin].getAttribute("BinId");
                    BigDecimal TotQtybin = new BigDecimal(rbin[ibin].getAttribute("TotStk").toString());
                    String ItmUombin = (String) rbin[ibin].getAttribute("ItmUomBs");

                    RowQualifier rqd = new RowQualifier(getMmStkTakeBin2());
                    rqd.setWhereClause("CldId='" + Cldbin + "' and SlocId=" + Slocbin + " and OrgId='" + Orgbin +
                                       "' and WhId='" + Whbin + "' and ItmId='" + Itmbin + "' and LotId='" + Lotbin +
                                       "' and DocId='" + Docbin + "' and BinId='" + Binbin + "'");
                    Row rd[] = getMmStkTakeBin2().getFilteredRows(rqd);
                    if (rd.length == 0) {
                        newrow = getMmStkTakeBin1().createRow();
                        newrow.setAttribute("CldId", Cldbin);
                        newrow.setAttribute("SlocId", Slocbin);
                        newrow.setAttribute("OrgId", Orgbin);
                        newrow.setAttribute("WhId", Whbin);
                        newrow.setAttribute("DocId", Docbin);
                        newrow.setAttribute("LotId", Lotbin);
                        newrow.setAttribute("TotQty", TotQtybin);
                        newrow.setAttribute("PhyQty", TotQtybin);
                        newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                        newrow.setAttribute("DiffType", "A");
                        newrow.setAttribute("ItmUom", ItmUombin);
                        newrow.setAttribute("ItmId", Itmbin);
                        newrow.setAttribute("BinId", Binbin);
                        getMmStkTakeBin1().insertRow(newrow);
                    }
                    ibin--;
                }
                ilot--;
            }
            i--;
        }
        getMmStkTakeBin1().executeQuery();
        getMmStkTakeBin2().executeQuery();
    }


    public void setSrfromBinForallWh(String itm) {
        Integer i = -1;
        Row newrow = null;
        String Cld = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer Sloc = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String Org = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String Doc = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        String Itm = itm;
        RowQualifier rqlot = new RowQualifier(getMmStkSummLot1());
        rqlot.setWhereClause("CldId='" + Cld + "' and SlocId=" + Sloc + " and OrgId='" + Org + "' and ItmId='" + Itm +
                             "'");
        Row rlot[] = getMmStkSummLot1().getFilteredRows(rqlot);
        Integer ilot = -1;
        if (rlot.length > 0)
            ilot = rlot.length - 1;
        while (ilot >= 0) {
            Integer ibin = -1;
            String Cldlot = (String) rlot[ilot].getAttribute("CldId");
            Integer Sloclot = (Integer) rlot[ilot].getAttribute("SlocId");
            String Orglot = (String) rlot[ilot].getAttribute("OrgId");
            String Whlot = (String) rlot[ilot].getAttribute("WhId");
            String Lotlot = (String) rlot[ilot].getAttribute("LotId");
            String Itmlot = (String) rlot[ilot].getAttribute("ItmId");

            RowQualifier rqbin = new RowQualifier(getMmStkSummBin1());
            rqbin.setWhereClause("CldId='" + Cldlot + "' and SlocId=" + Sloclot + " and OrgId='" + Orglot +
                                 "' and WhId='" + Whlot + "' and ItmId='" + Itmlot + "' and LotId='" + Lotlot + "'");
            Row rbin[] = getMmStkSummBin1().getFilteredRows(rqbin);
            if (rbin.length > 0)
                ibin = rbin.length - 1;
            Integer isr = -1;
            while (ibin >= 0) {
                String Cldbin = (String) rbin[ibin].getAttribute("CldId");
                Integer Slocbin = (Integer) rbin[ibin].getAttribute("SlocId");
                String Orgbin = (String) rbin[ibin].getAttribute("OrgId");
                String Whbin = (String) rbin[ibin].getAttribute("WhId");
                String Lotbin = (String) rbin[ibin].getAttribute("LotId");
                String Itmbin = (String) rbin[ibin].getAttribute("ItmId");
                String Binbin = (String) rbin[ibin].getAttribute("BinId");
                String ItmUom = (String) rbin[ibin].getAttribute("ItmUomBs");
                RowQualifier rqsr = new RowQualifier(getMmStkSummSr1());
                rqsr.setWhereClause("CldId='" + Cldbin + "' and SlocId=" + Slocbin + " and OrgId='" + Orgbin +
                                    "' and WhId='" + Whbin + "' and ItmId='" + Itmbin + "' and LotId='" + Lotbin +
                                    "' and BinId='" + Binbin + "'");
                Row rsr[] = getMmStkSummSr1().getFilteredRows(rqsr);
                if (rsr.length > 0)
                    isr = rsr.length - 1;
                while (isr >= 0) {

                    RowQualifier rqd = new RowQualifier(getMmStkTakeSr2());
                    rqd.setWhereClause("CldId='" + rsr[isr].getAttribute("CldId") + "' and SlocId=" +
                                       rsr[isr].getAttribute("SlocId") + " and OrgId='" +
                                       rsr[isr].getAttribute("OrgId") + "' and WhId='" + rsr[isr].getAttribute("WhId") +
                                       "' and ItmId='" + rsr[isr].getAttribute("ItmId") + "' and LotId='" +
                                       rsr[isr].getAttribute("LotId") + "' and BinId='" +
                                       rsr[isr].getAttribute("BinId") + "' and DocId='" + Doc + "' and SrNo='" +
                                       rsr[isr].getAttribute("SrNo") + "'");
                    Row[] rd = getMmStkTakeSr2().getFilteredRows(rqd);

                    if (rd.length == 0) {
                        newrow = getMmStkTakeSr1().createRow();
                        newrow.setAttribute("CldId", rsr[isr].getAttribute("CldId"));
                        newrow.setAttribute("SlocId", rsr[isr].getAttribute("SlocId"));
                        newrow.setAttribute("OrgId", rsr[isr].getAttribute("OrgId"));
                        newrow.setAttribute("WhId", rsr[isr].getAttribute("WhId"));
                        newrow.setAttribute("DocId", Doc);
                        newrow.setAttribute("ItmId", rsr[isr].getAttribute("ItmId"));
                        newrow.setAttribute("BinId", rsr[isr].getAttribute("BinId"));
                        newrow.setAttribute("LotId", rsr[isr].getAttribute("LotId"));
                        newrow.setAttribute("TotQty", rsr[isr].getAttribute("TotStk"));
                        newrow.setAttribute("PhyQty", rsr[isr].getAttribute("TotStk"));
                        newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                        newrow.setAttribute("ItmUom", ItmUom);
                        newrow.setAttribute("SrNo", rsr[isr].getAttribute("SrNo"));
                        newrow.setAttribute("DiffType", "A");
                        getMmStkTakeSr1().insertRow(newrow);
                    }
                    isr--;
                }
                ibin--;
            }
            ilot--;
        }
        getMmStkTakeSr1().executeQuery();
        getMmStkTakeSr2().executeQuery();
    }


    public void setSrFromLotforallWh(String itm) {
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        String OrgId = (String) getMmStkTake1().getCurrentRow().getAttribute("OrgId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String ItmId = itm;
        RowQualifier rq = new RowQualifier(getMmStkSummLot1());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and ItmId='" +
                          ItmId + "'");
        Row r[] = getMmStkSummLot1().getFilteredRows(rq);
        Integer i = -1;
        if (r.length > 0)
            i = r.length - 1;
        while (i >= 0) {
            String CldIdlot = (String) r[i].getAttribute("CldId");
            Integer SlocIdlot = (Integer) r[i].getAttribute("SlocId");
            String OrgIdlot = (String) r[i].getAttribute("OrgId");
            String WhIdlot = (String) r[i].getAttribute("WhId");
            String ItmIdlot = (String) r[i].getAttribute("ItmId");
            String LotIdlot = (String) r[i].getAttribute("LotId");
            String ItmUom = (String) r[i].getAttribute("ItmUomBs");

            RowQualifier rqbin = new RowQualifier(getMmStkSummSr1());
            rqbin.setWhereClause("CldId='" + CldIdlot + "' and SlocId=" + SlocIdlot + " and OrgId='" + OrgIdlot +
                                 "' and WhId='" + WhIdlot + "' and ItmId='" + ItmIdlot + "' and LotId='" + LotIdlot +
                                 "' and BinId='0'");
            Row[] rbin = getMmStkSummSr1().getFilteredRows(rqbin);
            Integer ibin = -1;
            if (rbin.length > 0)
                ibin = rbin.length - 1;
            Row newrow = null;
            while (ibin >= 0) {
                String CldIdbin = (String) rbin[ibin].getAttribute("CldId");
                Integer SlocIdbin = (Integer) rbin[ibin].getAttribute("SlocId");
                String OrgIdbin = (String) rbin[ibin].getAttribute("OrgId");
                String DocIdbin = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
                String WhIdbin = (String) rbin[ibin].getAttribute("WhId");
                String ItmIdbin = (String) rbin[ibin].getAttribute("ItmId");
                String LotIdbin = (String) rbin[ibin].getAttribute("LotId");
                String Binidbin = (String) rbin[ibin].getAttribute("BinId");
                String SrIdbin = (String) rbin[ibin].getAttribute("SrNo");
                Integer TotQty = (Integer) rbin[ibin].getAttribute("TotStk");
                //String ItmUom=(String)rbin[ibin].getAttribute("ItmUomBs");
                RowQualifier rqd = new RowQualifier(getMmStkTakeSr2());
                rqd.setWhereClause("CldId='" + CldIdbin + "' and SlocId=" + SlocIdbin + " and OrgId='" + OrgIdbin +
                                   "' and WhId='" + WhIdbin + "' and ItmId='" + ItmIdbin + "' and LotId='" + LotIdbin +
                                   "' and BinId='" + Binidbin + "' and DocId='" + DocIdbin + "' and SrNo='" + SrIdbin +
                                   "'");
                Row[] rd = getMmStkTakeSr2().getFilteredRows(rqd);

                if (rd.length == 0) {
                    newrow = getMmStkTakeSr5().createRow();
                    newrow.setAttribute("CldId", CldIdbin);
                    newrow.setAttribute("SlocId", SlocIdbin);
                    newrow.setAttribute("OrgId", OrgIdbin);
                    newrow.setAttribute("DocId", DocIdbin);
                    newrow.setAttribute("WhId", WhIdbin);
                    newrow.setAttribute("ItmId", ItmIdbin);
                    newrow.setAttribute("LotId", LotIdbin);
                    newrow.setAttribute("BinId", Binidbin);
                    newrow.setAttribute("SrNo", SrIdbin);
                    newrow.setAttribute("TotQty", TotQty);
                    newrow.setAttribute("PhyQty", TotQty);
                    newrow.setAttribute("DiffQty", BigDecimal.ZERO);
                    newrow.setAttribute("ItmUom", ItmUom);
                    newrow.setAttribute("DiffType", "A");
                    getMmStkTakeSr5().insertRow(newrow);
                }
                ibin--;
            }
            i--;
        }
        getMmStkTakeSr5().executeQuery();
        getMmStkTakeSr2().executeQuery();
    }


    public String checkItmidSerialize(String ItmId) {
        System.out.println("In thr checkItmIdSerialize:" + ItmId);
        String sr = null;
        String CldId = (String) getMmStkTake1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("SlocId");
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        System.out.println("CldId" + CldId + " " + "SlocId" + SlocId);
        if (ItmId != null) {
            System.out.println("in if loop condition");
            System.out.println(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
            System.out.println(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
            System.out.println(Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
            System.out.println(ItmId);
            this.getItmPrf1().setNamedWhereClauseParam("bindCldId",
                                                       resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
            this.getItmPrf1().setNamedWhereClauseParam("bindSlocId",
                                                       Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
            this.getItmPrf1().setNamedWhereClauseParam("bindHoOrgId",
                                                       resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
            this.getItmPrf1().setNamedWhereClauseParam("bindItmId", ItmId);
            this.getItmPrf1().executeQuery();
        }
        System.out.println("RowQualifier");
        RowQualifier rq = new RowQualifier(this.getItmPrf1());
        rq.setWhereClause("CldId='" + CldId + "' AND ItmId='" + ItmId + "' and SlocId=" +
                          SlocId); //+"and HoOrgId='"+hoOrgId+"'");
        Row[] r = this.getItmPrf1().getFilteredRows(rq);
        System.out.println("AAAAAA");
        System.out.println("No. of Filtered Rows=" + r.length);
        if (r.length > 0) {

            sr = (String) r[0].getAttribute("SerializedFlg");

        }
        return sr;
    }


    public Integer generateFyId() {
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String StockDate = getMmStkTake1().getCurrentRow().getAttribute("StkTakeDt").toString();
        Timestamp dt = new Timestamp(StockDate);
        Integer fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, dt
        }));
        if (fyid > 0)
            getMmStkTake1().getCurrentRow().setAttribute("FyId", fyid);
        return fyid;
    }

    public void executeVos() {
        //this.getDBTransaction().postChanges();
        getMmStkTakeItm2().executeQuery(); //getMmStkTakeItm1().clearCache();
        getMmStkTakeLot2().executeQuery(); //getMmStkTakeLot1().clearCache();
        getMmStkTakeBin2().executeQuery(); //getMmStkTakeBin1().clearCache();
        getMmStkTakeSr2().executeQuery(); //getMmStkTakeSr1().clearCache();
        getMmStkTakeItm1().executeQuery(); //getMmStkTakeItm1().clearCache();
        getMmStkTakeLot1().executeQuery(); //getMmStkTakeLot1().clearCache();
        getMmStkTakeBin1().executeQuery(); //getMmStkTakeBin1().clearCache();
        getMmStkTakeSr1().executeQuery(); //getMmStkTakeSr1().clearCache();
        getMmStkTakeSr5().executeQuery(); //getMmStkTakeSr5().clearCache();
        getTransAddItem1().executeQuery(); //getTransAddItem1().clearCache();
    }

    public void deleteItem() {
        String CldId = (String) this.getMmStkTakeItm1().getCurrentRow().getAttribute("CldId");
        Integer SlocId = (Integer) this.getMmStkTakeItm1().getCurrentRow().getAttribute("SlocId");
        String OrgId = (String) this.getMmStkTakeItm1().getCurrentRow().getAttribute("OrgId");
        String WhId = (String) this.getMmStkTakeItm1().getCurrentRow().getAttribute("WhId");
        String DocId = (String) this.getMmStkTakeItm1().getCurrentRow().getAttribute("DocId");
        String ItmId = (String) this.getMmStkTakeItm1().getCurrentRow().getAttribute("ItmId");
        System.out.println("Delete for itm id=" + ItmId);
        String HoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        System.out.println("CldId::" + CldId + "SlocId::" + SlocId + "HoOrgId::" + HoOrg + "OrgId" + OrgId + "WhId:" +
                           WhId + "ItmId::" + ItmId + "DocId" + DocId);
        Object obj = callStoredFunction(NUMBER, "MM.MM_STK_TAKE_DEL(?,?,?,?,?,?,?)", new Object[] {
                                        CldId, SlocId, HoOrg, OrgId, WhId, ItmId, DocId
        });


        System.out.println("value of obj::" + obj);

        //        RowSetIterator rsr = this.getMmStkTakeSr7().createRowSetIterator(null);
        //        Integer count = 0;
        //        while (rsr.hasNext()) {
        //            Row r = rsr.next();
        //            /*  if(r.getAttribute("CldId").toString().equals(CldId)
        //                      && r.getAttribute("SlocId").toString().equals(SlocId)
        //                      && r.getAttribute("OrgId").toString().equals(OrgId)
        //                      && r.getAttribute("WhId").toString().equals(WhId)
        //                      && r.getAttribute("DocId").toString().equals(DocId)
        //                      && r.getAttribute("ItmId").toString().equals(ItmId))
        //                  {  */
        //            r.remove();
        //            count++;
        //            //  }
        //        }
        //        rsr.closeRowSetIterator();
        //        System.out.println(count + " rows removed from Serial");
        //
        //
        //        RowSetIterator rbin = this.getMmStkTakeBin6().createRowSetIterator(null);
        //        count = 0;
        //        while (rbin.hasNext()) {
        //            Row r = rbin.next();
        //            /*  if(r.getAttribute("CldId").toString().equals(CldId)
        //                               && r.getAttribute("SlocId").toString().equals(SlocId)
        //                               && r.getAttribute("OrgId").toString().equals(OrgId)
        //                               && r.getAttribute("WhId").toString().equals(WhId)
        //                               && r.getAttribute("DocId").toString().equals(DocId)
        //                               && r.getAttribute("ItmId").toString().equals(ItmId))
        //                           {  */
        //            r.remove();
        //            count++;
        //            //  }
        //        }
        //        rbin.closeRowSetIterator();
        //        System.out.println(count + " rows removed from Bin");
        //
        //        RowSetIterator rlot = this.getMmStkTakeLot1().createRowSetIterator(null);
        //        count = 0;
        //        while (rlot.hasNext()) {
        //            Row r = rlot.next();
        //            /*  if(r.getAttribute("CldId").toString().equals(CldId)
        //                               && r.getAttribute("SlocId").toString().equals(SlocId)
        //                               && r.getAttribute("OrgId").toString().equals(OrgId)
        //                               && r.getAttribute("WhId").toString().equals(WhId)
        //                               && r.getAttribute("DocId").toString().equals(DocId)
        //                               && r.getAttribute("ItmId").toString().equals(ItmId))
        //                           {  */
        //            r.remove();
        //            count++;
        //            //  }
        //        }
        //        rlot.closeRowSetIterator();
        //        System.out.println(count + " rows removed from Lot");
        //
        //        getMmStkTakeItm1().getCurrentRow().remove();
        //
        //        System.out.println("Itm removed");
        //        /*   //  this.getMmStkTakeSr7().executeQuery();
        //                  this.getMmStkTakeSr5().executeQuery();
        //               this.getMmStkTakeSr1().executeQuery();
        //                 // this.getMmStkTakeBin6().executeQuery();
        //               this.getMmStkTakeBin1().executeQuery();
        //                  this.getMmStkTakeLot1().executeQuery();
        //                  this.getMmStkTakeItm1().executeQuery();     */

    }

    /**
     * Container's getter for TransSearchItm1.
     * @return TransSearchItm1
     */
    public TransSearchItmVOImpl getTransSearchItm1() {
        return (TransSearchItmVOImpl) findViewObject("TransSearchItm1");
    }

    public void resetItemSearch() {
        //reset take item criteria
        getMmStkTakeItm1().setApplyViewCriteriaName("MmStkTakeItmVOCriteria");
        getMmStkTakeItm1().setNamedWhereClauseParam("CldBind", null);
        getMmStkTakeItm1().setNamedWhereClauseParam("SlocBind", null);
        getMmStkTakeItm1().setNamedWhereClauseParam("OrgBind", null);
        getMmStkTakeItm1().setNamedWhereClauseParam("DocBind", null);
        getMmStkTakeItm1().setNamedWhereClauseParam("WhBind", null);
        getMmStkTakeItm1().executeQuery();

        //reset take lot criteria
        getMmStkTakeLot1().setApplyViewCriteriaName("MmStkTakeLotVOCriteria");
        getMmStkTakeLot1().setNamedWhereClauseParam("CldBind", null);
        getMmStkTakeLot1().setNamedWhereClauseParam("SlocBind", null);
        getMmStkTakeLot1().setNamedWhereClauseParam("OrgBind", null);
        getMmStkTakeLot1().setNamedWhereClauseParam("DocBind", null);
        getMmStkTakeLot1().setNamedWhereClauseParam("WhBind", null);
        getMmStkTakeLot1().setNamedWhereClauseParam("ItmBind", null);
        getMmStkTakeLot1().executeQuery();

        //reset take bin criteria
        getMmStkTakeBin1().setApplyViewCriteriaName("MmStkTakeBinVOCriteria");
        getMmStkTakeBin1().setNamedWhereClauseParam("CldBind", null);
        getMmStkTakeBin1().setNamedWhereClauseParam("SlocBind", null);
        getMmStkTakeBin1().setNamedWhereClauseParam("OrgBind", null);
        getMmStkTakeBin1().setNamedWhereClauseParam("DocBind", null);
        getMmStkTakeBin1().setNamedWhereClauseParam("WhBind", null);
        getMmStkTakeBin1().setNamedWhereClauseParam("ItmBind", null);
        getMmStkTakeBin1().setNamedWhereClauseParam("LotBind", null);
        getMmStkTakeBin1().executeQuery();

        //reset take sr criteria
        getMmStkTakeSr1().setApplyViewCriteriaName("MmStkTakeSrVOCriteria");
        getMmStkTakeSr1().setNamedWhereClauseParam("CldBind", null);
        getMmStkTakeSr1().setNamedWhereClauseParam("SlocBind", null);
        getMmStkTakeSr1().setNamedWhereClauseParam("OrgBind", null);
        getMmStkTakeSr1().setNamedWhereClauseParam("DocBind", null);
        getMmStkTakeSr1().setNamedWhereClauseParam("WhBind", null);
        getMmStkTakeSr1().setNamedWhereClauseParam("ItmBind", null);
        getMmStkTakeSr1().setNamedWhereClauseParam("LotBind", null);
        getMmStkTakeSr1().setNamedWhereClauseParam("BinBind", null);
        getMmStkTakeSr1().executeQuery();

        getTransSearchItm1().getCurrentRow().setAttribute("WhId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("ItmId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("LotId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("BinId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("SrNo", null);

        getMmStkTakeSr4().setApplyViewCriteriaName("MmStkTakeSrVOCriteria");
        getMmStkTakeSr4().setNamedWhereClauseParam("WhBind", null);
        getMmStkTakeSr4().setNamedWhereClauseParam("ItmBind", null);
        getMmStkTakeSr4().setNamedWhereClauseParam("LotBind", null);
        getMmStkTakeSr4().setNamedWhereClauseParam("BinBind", null);
        getMmStkTakeSr4().setNamedWhereClauseParam("SrBind", null);
        getMmStkTakeSr4().executeQuery();

        getMmStkTakeBin4().setApplyViewCriteriaName("MmStkTakeBinVOCriteria");
        getMmStkTakeBin4().setNamedWhereClauseParam("WhBind", null);
        getMmStkTakeBin4().setNamedWhereClauseParam("ItmBind", null);
        getMmStkTakeBin4().setNamedWhereClauseParam("LotBind", null);
        getMmStkTakeBin4().setNamedWhereClauseParam("BinBind", null);
        getMmStkTakeBin4().executeQuery();

        getMmStkTakeLot4().setApplyViewCriteriaName("MmStkTakeLotVOCriteria");
        getMmStkTakeLot4().setNamedWhereClauseParam("WhBind", null);
        getMmStkTakeLot4().setNamedWhereClauseParam("ItmBind", null);
        getMmStkTakeLot4().setNamedWhereClauseParam("LotBind", null);
        getMmStkTakeLot4().executeQuery();

    }


    public void setwhenwhnull() {
        getTransSearchItm1().getCurrentRow().setAttribute("WhId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("ItmId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("LotId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("BinId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("SrNo", null);
    }

    public void setwhenitmnull() {
        getTransSearchItm1().getCurrentRow().setAttribute("ItmId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("LotId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("BinId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("SrNo", null);
    }

    public void setwhenlotnull() {
        getTransSearchItm1().getCurrentRow().setAttribute("LotId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("BinId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("SrNo", null);
    }

    public void setwhenbinnull() {
        getTransSearchItm1().getCurrentRow().setAttribute("BinId", null);
        getTransSearchItm1().getCurrentRow().setAttribute("SrNo", null);
    }

    public void setwhensrnull() {
        getTransSearchItm1().getCurrentRow().setAttribute("SrNo", null);

    }

    /**
     * Container's getter for MmStkTakeSr4.
     * @return MmStkTakeSr4
     */
    public MmStkTakeSrVOImpl getMmStkTakeSr4() {
        return (MmStkTakeSrVOImpl) findViewObject("MmStkTakeSr4");
    }

    public void searchItems() {
        String sr = null;
        String WhId = null;
        String ItmId = null;
        String LotId = null;
        String BinId = null;
        String SrNo = null;
        String DocId = null;
        String OrgId = null;
        String CldId = null;
        Integer SlocId = null;


        if (getTransSearchItm1().getCurrentRow().getAttribute("ItmId") != null) {
            ItmId = getTransSearchItm1().getCurrentRow().getAttribute("ItmId").toString();
            CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            RowQualifier rq = new RowQualifier(getItmPrf1());
            rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + "  and ItmId='" + ItmId + "'");
            Row r[] = getItmPrf1().getFilteredRows(rq);
            if (r.length > 0) {
                sr = (String) r[0].getAttribute("SerializedFlg");
                //  System.out.println();
            } else
                sr = "N";
        } else
            sr = "Y";
        if (sr.equals("Y")) {
            getMmStkTakeSr4().setApplyViewCriteriaName("MmStkTakeSrVOCriteria");
            if (getTransSearchItm1().getCurrentRow().getAttribute("WhId") != null) {
                WhId = (String) getTransSearchItm1().getCurrentRow().getAttribute("WhId");
                getMmStkTakeSr4().setNamedWhereClauseParam("WhBind", WhId);
            } else
                getMmStkTakeSr4().setNamedWhereClauseParam("WhBind", null);

            if (getTransSearchItm1().getCurrentRow().getAttribute("ItmId") != null) {
                ItmId = (String) getTransSearchItm1().getCurrentRow().getAttribute("ItmId");
                getMmStkTakeSr4().setNamedWhereClauseParam("ItmBind", ItmId);
            } else
                getMmStkTakeSr4().setNamedWhereClauseParam("ItmBind", null);

            if (getTransSearchItm1().getCurrentRow().getAttribute("LotId") != null) {
                LotId = (String) getTransSearchItm1().getCurrentRow().getAttribute("LotId");
                getMmStkTakeSr4().setNamedWhereClauseParam("LotBind", LotId);
            } else
                getMmStkTakeSr4().setNamedWhereClauseParam("LotBind", null);


            if (resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString().equals("N"))
                getMmStkTakeSr4().setNamedWhereClauseParam("BinBind", "0");
            else if (getTransSearchItm1().getCurrentRow().getAttribute("BinId") != null) {
                BinId = (String) getTransSearchItm1().getCurrentRow().getAttribute("BinId");
                getMmStkTakeSr4().setNamedWhereClauseParam("BinBind", BinId);
            } else
                getMmStkTakeSr4().setNamedWhereClauseParam("BinBind", null);

            if (getTransSearchItm1().getCurrentRow().getAttribute("SrNo") != null) {
                SrNo = (String) getTransSearchItm1().getCurrentRow().getAttribute("SrNo");
                getMmStkTakeSr4().setNamedWhereClauseParam("SrBind", SrNo);
            } else
                getMmStkTakeSr4().setNamedWhereClauseParam("SrBind", null);


            CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            getMmStkTakeSr4().setNamedWhereClauseParam("CldBind", CldId);

            SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            getMmStkTakeSr4().setNamedWhereClauseParam("SlocBind", SlocId);

            OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            getMmStkTakeSr4().setNamedWhereClauseParam("OrgBind", OrgId);

            DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
            getMmStkTakeSr4().setNamedWhereClauseParam("DocBind", DocId);

            getMmStkTakeSr4().executeQuery();
        } else //Sr=N
        {
            if (resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString().equals("N")) {

                getMmStkTakeLot4().setApplyViewCriteriaName("MmStkTakeLotVOCriteria");
                if (getTransSearchItm1().getCurrentRow().getAttribute("WhId") != null) {
                    WhId = (String) getTransSearchItm1().getCurrentRow().getAttribute("WhId");
                    getMmStkTakeLot4().setNamedWhereClauseParam("WhBind", WhId);
                } else
                    getMmStkTakeLot4().setNamedWhereClauseParam("WhBind", null);

                if (getTransSearchItm1().getCurrentRow().getAttribute("ItmId") != null) {
                    ItmId = (String) getTransSearchItm1().getCurrentRow().getAttribute("ItmId");
                    getMmStkTakeLot4().setNamedWhereClauseParam("ItmBind", ItmId);
                } else
                    getMmStkTakeLot4().setNamedWhereClauseParam("ItmBind", null);

                if (getTransSearchItm1().getCurrentRow().getAttribute("LotId") != null) {
                    LotId = (String) getTransSearchItm1().getCurrentRow().getAttribute("LotId");
                    getMmStkTakeLot4().setNamedWhereClauseParam("LotBind", LotId);
                } else
                    getMmStkTakeLot4().setNamedWhereClauseParam("LotBind", null);

                CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                getMmStkTakeLot4().setNamedWhereClauseParam("CldBind", CldId);

                SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                getMmStkTakeLot4().setNamedWhereClauseParam("SlocBind", SlocId);

                OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                getMmStkTakeLot4().setNamedWhereClauseParam("OrgBind", OrgId);

                DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
                getMmStkTakeLot4().setNamedWhereClauseParam("DocBind", DocId);

                getMmStkTakeLot4().executeQuery();
            }

            else //Sr=N and Bin=Y
            {

                getMmStkTakeBin4().setApplyViewCriteriaName("MmStkTakeBinVOCriteria");
                if (getTransSearchItm1().getCurrentRow().getAttribute("WhId") != null) {
                    WhId = (String) getTransSearchItm1().getCurrentRow().getAttribute("WhId");
                    getMmStkTakeBin4().setNamedWhereClauseParam("WhBind", WhId);
                } else
                    getMmStkTakeBin4().setNamedWhereClauseParam("WhBind", null);

                if (getTransSearchItm1().getCurrentRow().getAttribute("ItmId") != null) {
                    ItmId = (String) getTransSearchItm1().getCurrentRow().getAttribute("ItmId");
                    getMmStkTakeBin4().setNamedWhereClauseParam("ItmBind", ItmId);
                } else
                    getMmStkTakeBin4().setNamedWhereClauseParam("ItmBind", null);

                if (getTransSearchItm1().getCurrentRow().getAttribute("LotId") != null) {
                    LotId = (String) getTransSearchItm1().getCurrentRow().getAttribute("LotId");
                    getMmStkTakeBin4().setNamedWhereClauseParam("LotBind", LotId);
                } else
                    getMmStkTakeBin4().setNamedWhereClauseParam("LotBind", null);


                if (resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString().equals("N"))
                    getMmStkTakeBin4().setNamedWhereClauseParam("BinBind", "0");
                else if (getTransSearchItm1().getCurrentRow().getAttribute("BinId") != null) {
                    BinId = (String) getTransSearchItm1().getCurrentRow().getAttribute("BinId");
                    getMmStkTakeBin4().setNamedWhereClauseParam("BinBind", BinId);
                } else
                    getMmStkTakeBin4().setNamedWhereClauseParam("BinBind", null);

                CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
                getMmStkTakeBin4().setNamedWhereClauseParam("CldBind", CldId);

                SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
                getMmStkTakeBin4().setNamedWhereClauseParam("SlocBind", SlocId);

                OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                getMmStkTakeBin4().setNamedWhereClauseParam("OrgBind", OrgId);

                DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
                getMmStkTakeBin4().setNamedWhereClauseParam("DocBind", DocId);

                getMmStkTakeBin4().executeQuery();

            }
        }
    }

    public void setBindonTabDisc() {
        getMmStkTakeSr4().setApplyViewCriteriaName("MmStkTakeSrVOCriteria");
        getMmStkTakeSr4().setNamedWhereClauseParam("CldBind", "-1");
        getMmStkTakeSr4().executeQuery();
        getMmStkTakeBin4().setApplyViewCriteriaName("MmStkTakeBinVOCriteria");
        getMmStkTakeBin4().setNamedWhereClauseParam("CldBind", "-1");
        getMmStkTakeBin4().executeQuery();
        getMmStkTakeLot4().setApplyViewCriteriaName("MmStkTakeLotVOCriteria");
        getMmStkTakeLot4().setNamedWhereClauseParam("CldBind", "-1");
        getMmStkTakeLot4().executeQuery();

    }

    /**
     * Container's getter for MmStkTakeBin4.
     * @return MmStkTakeBin4
     */
    public MmStkTakeBinVOImpl getMmStkTakeBin4() {
        return (MmStkTakeBinVOImpl) findViewObject("MmStkTakeBin4");
    }

    /**
     * Container's getter for MmStkTakeLot4.
     * @return MmStkTakeLot4
     */
    public MmStkTakeLotVOImpl getMmStkTakeLot4() {
        return (MmStkTakeLotVOImpl) findViewObject("MmStkTakeLot4");
    }

    public void setDiffQtyForBin(BigDecimal Phy) {
        BigDecimal PhyQty = new BigDecimal(0);
        if (Phy != null)
            PhyQty = Phy;

        BigDecimal TotQty = new BigDecimal(0);
        if (getMmStkTakeBin4().getCurrentRow().getAttribute("TotQty") != null)
            TotQty = (BigDecimal) getMmStkTakeBin4().getCurrentRow().getAttribute("TotQty");

        BigDecimal RwkQty = new BigDecimal(0);
        if (getMmStkTakeBin4().getCurrentRow().getAttribute("RwkQty") != null)
            RwkQty = (BigDecimal) getMmStkTakeBin4().getCurrentRow().getAttribute("RwkQty");
        else
            getMmStkTakeBin4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

        BigDecimal ScrpQty = new BigDecimal(0);
        if (getMmStkTakeBin4().getCurrentRow().getAttribute("ScrpQty") != null)
            ScrpQty = (BigDecimal) getMmStkTakeBin4().getCurrentRow().getAttribute("ScrpQty");
        else
            getMmStkTakeBin4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

        BigDecimal DiffQty = new BigDecimal(0);
        //DiffQty=TotQty.subtract(PhyQty.add(RwkQty.add(ScrpQty)));
        DiffQty = TotQty.subtract(PhyQty);
        System.out.println("diff qty for bin----" + DiffQty);
        if (DiffQty.compareTo(new BigDecimal(0)) > 0)
            getMmStkTakeBin4().getCurrentRow().setAttribute("DiffType", "S");
        else
            getMmStkTakeBin4().getCurrentRow().setAttribute("DiffType", "A");
        getMmStkTakeBin4().getCurrentRow().setAttribute("DiffQty", DiffQty.abs());

    }

    public void setDiffQtyForLot(BigDecimal Phy) {
        BigDecimal PhyQty = new BigDecimal(0);
        if (Phy != null)
            PhyQty = Phy;

        BigDecimal TotQty = new BigDecimal(0);
        if (getMmStkTakeLot4().getCurrentRow().getAttribute("TotQty") != null)
            TotQty = (BigDecimal) getMmStkTakeLot4().getCurrentRow().getAttribute("TotQty");

        BigDecimal RwkQty = new BigDecimal(0);
        if (getMmStkTakeLot4().getCurrentRow().getAttribute("RwkQty") != null)
            RwkQty = (BigDecimal) getMmStkTakeLot4().getCurrentRow().getAttribute("RwkQty");
        else
            getMmStkTakeLot4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

        BigDecimal ScrpQty = new BigDecimal(0);
        if (getMmStkTakeLot4().getCurrentRow().getAttribute("ScrpQty") != null)
            ScrpQty = (BigDecimal) getMmStkTakeLot4().getCurrentRow().getAttribute("ScrpQty");
        else
            getMmStkTakeLot4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

        BigDecimal DiffQty = new BigDecimal(0);
        DiffQty = TotQty.subtract(PhyQty.add(RwkQty.add(ScrpQty)));
        // DiffQty=TotQty.subtract(PhyQty);
        System.out.println("diff qty for lot--" + DiffQty);
        if (DiffQty.compareTo(new BigDecimal(0)) > 0)
            getMmStkTakeLot4().getCurrentRow().setAttribute("DiffType", "S");
        else
            getMmStkTakeLot4().getCurrentRow().setAttribute("DiffType", "A");
        getMmStkTakeLot4().getCurrentRow().setAttribute("DiffQty", DiffQty.abs());
    }

    /**
     * Container's getter for MmStkTakeSr5.
     * @return MmStkTakeSr5
     */
    public ViewObjectImpl getMmStkTakeSr5() {
        return (ViewObjectImpl) findViewObject("MmStkTakeSr5");
    }

    /**
     * Container's getter for MmTakeLotToSrVL1.
     * @return MmTakeLotToSrVL1
     */
    public ViewLinkImpl getMmTakeLotToSrVL1() {
        return (ViewLinkImpl) findViewLink("MmTakeLotToSrVL1");
    }

    public Boolean setDiffQtyForSr(BigDecimal Phy) {

        BigDecimal PhyQty = new BigDecimal(0);
        if (Phy != null)
            PhyQty = Phy;

        BigDecimal TotQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty") != null)
            TotQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty");

        BigDecimal RwkQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("RwkQty") != null)
            RwkQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("RwkQty");
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

        BigDecimal ScrpQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("ScrpQty") != null)
            ScrpQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("ScrpQty");
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

        BigDecimal DiffQty = new BigDecimal(0);
        if ((PhyQty.compareTo(new BigDecimal("1")) == 0 || (PhyQty.compareTo(new BigDecimal("0")) == 0))) {
            // DiffQty=TotQty.subtract(PhyQty.add(RwkQty.add(ScrpQty)));
            DiffQty = TotQty.subtract(PhyQty);
            System.out.println("diff qty for sr--" + DiffQty);

            if (DiffQty.compareTo(new BigDecimal(0)) > 0)
                getMmStkTakeSr4().getCurrentRow().setAttribute("DiffType", "S");
            else
                getMmStkTakeSr4().getCurrentRow().setAttribute("DiffType", "A");
            getMmStkTakeSr4().getCurrentRow().setAttribute("DiffQty", DiffQty.abs());
            return true;
        } else
            return false;
    }


    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });

            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }

    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;

    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo,
                                                   levelFrm, levelTo, action, remark, amount
    }).toString());

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, 0
        }).toString());
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }

    public String getTxnId() {
        String DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        return DocId;
    }

    public void updateAuth() {
        String retVal = resolvEl("#{pageFlowScope.WF_RET_VALUE}");
        String VoucherId = null;
        //  System.out.println("wf return="+retVal);
        if ("A".equals(retVal)) {
            getMmStkTake1().getCurrentRow().setAttribute("AuthStat", "Y");
            getMmStkTake1().getCurrentRow().setAttribute("StkTakeStat", 356);
            String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
            Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
            String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
            String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
            Integer FyId = (Integer) getMmStkTake1().getCurrentRow().getAttribute("FyId");
            Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());

            //call for Adjustments
            //Update stock
            BigDecimal obj = (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.mm_updt_stk_take(?,?,?,?,?,?)", new Object[] {
                                                             CldId, SlocId, OrgId, DocId, FyId, UsrId
            });
            System.out.println("Obj=" + obj);
            VoucherId = (String) callStoredFunction(Types.VARCHAR, "MM.MM_GET_RCPT_PROV_GL(?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, DocId, "T", "NO"
            });
            System.out.println("Voucher Id :" + VoucherId);
            FacesMessage message = new FacesMessage("Stock Adjusted with Voucher Id :" + VoucherId);
            message.setSeverity(FacesMessage.SEVERITY_INFO);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);


        } else if ("F".equals(retVal)) {
            System.out.println("forwared");
        }
    }


    public void settxnidlast(String txn) {
        TxnIdLast = txn;
    }


    public void setCurrentRow() {
        System.out.println("TxnidLast=" + TxnIdLast);
        Row r[] = getMmStkTake1().getFilteredRows("DocId", TxnIdLast);
        System.out.println(r.length + " " + TxnIdLast);
        if (r.length > 0)
            getMmStkTake1().setCurrentRow(r[0]);
    }

    public void ChangeStatus() {
        getMmStkTake1().getCurrentRow().setAttribute("StkTakeStat", 355);
    }

    public String checkDataUpdated() {
        String DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        //  System.out.println("DocId="+DocId);
        Row[] r = getMmStkTakeItm3().getFilteredRows("DocId", DocId);
        //  System.out.println("No of item in this doc="+r.length);
        Integer itmlength = -1;
        if (r.length > 0)
            itmlength = r.length - 1;
        while (itmlength >= 0) {
            String issr = "N";
            String ItmId = r[itmlength].getAttribute("ItmId").toString();
            //  System.out.println("For item="+ItmId);
            String CldId = (String) r[itmlength].getAttribute("CldId");
            //String OrgId = (String)r[itmlength].getAttribute("OrgId");
            Integer SlocId = (Integer) r[itmlength].getAttribute("SlocId");
            ViewObjectImpl voimpl = getItmPrf1();
            RowQualifier rq = new RowQualifier(voimpl);
            rq.setWhereClause("CldId='" + CldId + "' AND ItmId='" + ItmId + "' and SlocId=" + SlocId);
            Row[] row = voimpl.getFilteredRows(rq);
            //   System.out.println("no of rows in itm prf="+row.length);
            if (row.length > 0) {
                issr = (String) row[0].getAttribute("SerializedFlg");
            }
            //   System.out.println("Is this item serialize="+issr);


            if (issr.equals("Y")) {
                Row[] rsr = getMmStkTakeSr6().getFilteredRows("DocId", DocId);
                Integer srlength = -1;
                if (rsr.length > 0)
                    srlength = rsr.length - 1;
                while (srlength >= 0) {
                    if (rsr[srlength].getAttribute("PhyQty") != null) {
                    } else {
                        return "0";
                    }
                    srlength--;
                }
            } else if (issr.equals("N")) {
                String isbin = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
                if (isbin.equals("Y")) {
                    Row[] rbin = getMmStkTakeBin5().getFilteredRows("DocId", DocId);
                    Integer binlength = -1;
                    if (rbin.length > 0)
                        binlength = rbin.length - 1;
                    while (binlength >= 0) {
                        if (rbin[binlength].getAttribute("PhyQty") != null) {
                        } else {
                            return "0";
                        }
                        binlength--;
                    }

                } else if (isbin.equals("N")) {
                    Row[] rlot = getMmStkTakeLot5().getFilteredRows("DocId", DocId);
                    Integer lotlength = -1;
                    if (rlot.length > 0)
                        lotlength = rlot.length - 1;
                    while (lotlength >= 0) {
                        if (rlot[lotlength].getAttribute("PhyQty") != null) {
                        } else {
                            return "0";
                        }
                        lotlength--;

                    }
                }
            }
            itmlength--;
        }
        return "1";
    }

    /**
     * Container's getter for MmStkTakeItm3.
     * @return MmStkTakeItm3
     */
    public MmStkTakeItmVOImpl getMmStkTakeItm3() {
        return (MmStkTakeItmVOImpl) findViewObject("MmStkTakeItm3");
    }

    /**
     * Container's getter for MmStkTakeLot5.
     * @return MmStkTakeLot5
     */
    public MmStkTakeLotVOImpl getMmStkTakeLot5() {
        return (MmStkTakeLotVOImpl) findViewObject("MmStkTakeLot5");
    }

    /**
     * Container's getter for MmStkTakeBin5.
     * @return MmStkTakeBin5
     */
    public MmStkTakeBinVOImpl getMmStkTakeBin5() {
        return (MmStkTakeBinVOImpl) findViewObject("MmStkTakeBin5");
    }

    /**
     * Container's getter for MmStkTakeSr6.
     * @return MmStkTakeSr6
     */
    public ViewObjectImpl getMmStkTakeSr6() {
        return (ViewObjectImpl) findViewObject("MmStkTakeSr6");
    }


    public String CheckSaved() {
        String DocId = getMmStkTake1().getCurrentRow().getAttribute("DocId").toString();
        Row[] r = getMmStkTakeWfTxn1().getFilteredRows("TxnDocId", DocId);
        //  System.out.println("length in txn="+r.length);
        if (r.length > 0)
            return "Saved";
        else
            return "not Saved";
    }

    /**
     * Container's getter for MmStkTakeWfTxn1.
     * @return MmStkTakeWfTxn1
     */
    public ViewObjectImpl getMmStkTakeWfTxn1() {
        return (ViewObjectImpl) findViewObject("MmStkTakeWfTxn1");
    }

    public void setBindVarForSearchPageAtLoad() {
        // String linkvalue=resolvEl("#{pageFlowScope.GLBL_APP_STK_TAKE}").toString();
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        getMmStkTake1().setApplyViewCriteriaName("MmStkTakeVOCriteria");

        getMmStkTake1().setNamedWhereClauseParam("StkTakeCldBind", "-1");
        getMmStkTake1().setNamedWhereClauseParam("StkTakeSlocBind", SlocId);
        getMmStkTake1().setNamedWhereClauseParam("StkTakeOrgBind", OrgId);

        getMmStkTake1().executeQuery();
    }

    public Boolean setDiffQtybyRwkForSr(BigDecimal Rwk) {
        BigDecimal RwkQty = new BigDecimal(0);
        if (Rwk != null)
            RwkQty = Rwk;
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

        BigDecimal TotQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty") != null)
            TotQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty");

        BigDecimal PhyQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("PhyQty") != null)
            PhyQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("PhyQty");


        BigDecimal ScrpQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("ScrpQty") != null)
            ScrpQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("ScrpQty");
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

        BigDecimal DiffQty = new BigDecimal(0);
        if ((PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("1")) == 0 ||
            (PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("0")) == 0) {
            DiffQty = TotQty.subtract(PhyQty.add(RwkQty.add(ScrpQty)));
            if (DiffQty.compareTo(new BigDecimal(0)) > 0)
                getMmStkTakeSr4().getCurrentRow().setAttribute("DiffType", "S");
            else
                getMmStkTakeSr4().getCurrentRow().setAttribute("DiffType", "A");
            getMmStkTakeSr4().getCurrentRow().setAttribute("DiffQty", DiffQty.abs());
            return true;
        } else
            return false;
    }

    public void setDiffQtybyRwkForLot(BigDecimal Rwk) {
        BigDecimal RwkQty = new BigDecimal(0);
        if (Rwk != null)
            RwkQty = Rwk;
        else
            getMmStkTakeLot4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

        BigDecimal TotQty = new BigDecimal(0);
        if (getMmStkTakeLot4().getCurrentRow().getAttribute("TotQty") != null)
            TotQty = (BigDecimal) getMmStkTakeLot4().getCurrentRow().getAttribute("TotQty");

        BigDecimal PhyQty = new BigDecimal(0);
        if (getMmStkTakeLot4().getCurrentRow().getAttribute("PhyQty") != null)
            PhyQty = (BigDecimal) getMmStkTakeLot4().getCurrentRow().getAttribute("PhyQty");

        BigDecimal ScrpQty = new BigDecimal(0);
        if (getMmStkTakeLot4().getCurrentRow().getAttribute("ScrpQty") != null)
            ScrpQty = (BigDecimal) getMmStkTakeLot4().getCurrentRow().getAttribute("ScrpQty");
        else
            getMmStkTakeLot4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

        BigDecimal DiffQty = new BigDecimal(0);
        DiffQty = TotQty.subtract(PhyQty.add(RwkQty.add(ScrpQty)));
        if (DiffQty.compareTo(new BigDecimal(0)) > 0)
            getMmStkTakeLot4().getCurrentRow().setAttribute("DiffType", "S");
        else
            getMmStkTakeLot4().getCurrentRow().setAttribute("DiffType", "A");
        getMmStkTakeLot4().getCurrentRow().setAttribute("DiffQty", DiffQty.abs());
    }

    public void setDiffQtybyRwkForBin(BigDecimal Rwk) {
        BigDecimal RwkQty = new BigDecimal(0);
        if (Rwk != null)
            RwkQty = Rwk;
        //else
        if (getMmStkTakeBin4().getCurrentRow() != null) {
            getMmStkTakeBin4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

            BigDecimal TotQty = new BigDecimal(0);
            if (getMmStkTakeBin4().getCurrentRow().getAttribute("TotQty") != null)
                TotQty = (BigDecimal) getMmStkTakeBin4().getCurrentRow().getAttribute("TotQty");

            BigDecimal PhyQty = new BigDecimal(0);
            if (getMmStkTakeBin4().getCurrentRow().getAttribute("PhyQty") != null)
                PhyQty = (BigDecimal) getMmStkTakeBin4().getCurrentRow().getAttribute("PhyQty");

            BigDecimal ScrpQty = new BigDecimal(0);
            if (getMmStkTakeBin4().getCurrentRow().getAttribute("ScrpQty") != null)
                ScrpQty = (BigDecimal) getMmStkTakeBin4().getCurrentRow().getAttribute("ScrpQty");
            else
                getMmStkTakeBin4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

            BigDecimal DiffQty = new BigDecimal(0);
            //DiffQty=TotQty.subtract(PhyQty.add(RwkQty.add(ScrpQty)));
            DiffQty = TotQty.subtract(PhyQty);
            if (DiffQty.compareTo(new BigDecimal(0)) > 0)
                getMmStkTakeBin4().getCurrentRow().setAttribute("DiffType", "S");
            else
                getMmStkTakeBin4().getCurrentRow().setAttribute("DiffType", "A");
            getMmStkTakeBin4().getCurrentRow().setAttribute("DiffQty", DiffQty.abs());
        }
    }

    public Boolean setDiffQtybyScrpForSr(BigDecimal Scrp) {
        BigDecimal ScrpQty = new BigDecimal(0);
        if (Scrp != null)
            ScrpQty = Scrp;
        // else */
        if (getMmStkTakeSr4().getCurrentRow() != null) {
            getMmStkTakeSr4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

            BigDecimal TotQty = new BigDecimal(0);
            if (getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty") != null)
                TotQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty");

            BigDecimal PhyQty = new BigDecimal(0);
            if (getMmStkTakeSr4().getCurrentRow().getAttribute("PhyQty") != null)
                PhyQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("PhyQty");

            BigDecimal RwkQty = new BigDecimal(0);
            if (getMmStkTakeSr4().getCurrentRow().getAttribute("RwkQty") != null)
                RwkQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("RwkQty");
            else
                getMmStkTakeSr4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

            BigDecimal DiffQty = new BigDecimal(0);
            if ((PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("1")) == 0 ||
                (PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("0")) == 0) {
                // DiffQty=TotQty.subtract(PhyQty.add(RwkQty.add(ScrpQty)));
                DiffQty = TotQty.subtract(PhyQty);
                if (DiffQty.compareTo(new BigDecimal(0)) > 0)
                    getMmStkTakeSr4().getCurrentRow().setAttribute("DiffType", "S");
                else
                    getMmStkTakeSr4().getCurrentRow().setAttribute("DiffType", "A");
                getMmStkTakeSr4().getCurrentRow().setAttribute("DiffQty", DiffQty.abs());
                return true;
            } else
                return false;
        }
        return false;
    }

    public void setDiffQtybyScrpForBin(BigDecimal Scrp) {
        /* BigDecimal ScrpQty = new BigDecimal(0);
        if (Scrp != null)
            ScrpQty = Scrp; */

        if (getMmStkTakeBin4().getCurrentRow() != null) {

            getMmStkTakeBin4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

            BigDecimal TotQty = new BigDecimal(0);
            if (getMmStkTakeBin4().getCurrentRow() != null &&
                getMmStkTakeBin4().getCurrentRow().getAttribute("TotQty") != null)
                TotQty = (BigDecimal) getMmStkTakeBin4().getCurrentRow().getAttribute("TotQty");

            BigDecimal PhyQty = new BigDecimal(0);
            if (getMmStkTakeBin4().getCurrentRow() != null &&
                getMmStkTakeBin4().getCurrentRow().getAttribute("PhyQty") != null)
                PhyQty = (BigDecimal) getMmStkTakeBin4().getCurrentRow().getAttribute("PhyQty");

            BigDecimal RwkQty = new BigDecimal(0);
            if (getMmStkTakeBin4().getCurrentRow() != null &&
                getMmStkTakeBin4().getCurrentRow().getAttribute("RwkQty") != null)
                RwkQty = (BigDecimal) getMmStkTakeBin4().getCurrentRow().getAttribute("RwkQty");
            else
                getMmStkTakeBin4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

            BigDecimal DiffQty = new BigDecimal(0);
            // DiffQty=TotQty.subtract(PhyQty.add(RwkQty.add(ScrpQty)));
            DiffQty = TotQty.subtract(PhyQty);

            if (DiffQty.compareTo(new BigDecimal(0)) > 0)
                getMmStkTakeBin4().getCurrentRow().setAttribute("DiffType", "S");
            else
                getMmStkTakeBin4().getCurrentRow().setAttribute("DiffType", "A");

            getMmStkTakeBin4().getCurrentRow().setAttribute("DiffQty", DiffQty.abs());
        }
    }

    public void setDiffQtybyScrpForLot(BigDecimal Scrp) {
        BigDecimal ScrpQty = new BigDecimal(0);
        if (Scrp != null)
            ScrpQty = Scrp;
        else
            getMmStkTakeLot4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

        BigDecimal TotQty = new BigDecimal(0);
        if (getMmStkTakeLot4().getCurrentRow().getAttribute("TotQty") != null)
            TotQty = (BigDecimal) getMmStkTakeLot4().getCurrentRow().getAttribute("TotQty");

        BigDecimal PhyQty = new BigDecimal(0);
        if (getMmStkTakeLot4().getCurrentRow().getAttribute("PhyQty") != null)
            PhyQty = (BigDecimal) getMmStkTakeLot4().getCurrentRow().getAttribute("PhyQty");

        BigDecimal RwkQty = new BigDecimal(0);
        if (getMmStkTakeLot4().getCurrentRow().getAttribute("RwkQty") != null)
            RwkQty = (BigDecimal) getMmStkTakeLot4().getCurrentRow().getAttribute("RwkQty");
        else
            getMmStkTakeLot4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

        BigDecimal DiffQty = new BigDecimal(0);
        //DiffQty=TotQty.subtract(PhyQty.add(RwkQty.add(ScrpQty)));
        DiffQty = TotQty.subtract(PhyQty);
        if (DiffQty.compareTo(new BigDecimal(0)) > 0)
            getMmStkTakeLot4().getCurrentRow().setAttribute("DiffType", "S");
        else
            getMmStkTakeLot4().getCurrentRow().setAttribute("DiffType", "A");

        getMmStkTakeLot4().getCurrentRow().setAttribute("DiffQty", DiffQty.abs());
    }

    public Boolean ChangeStatusFreeze() {
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        Row[] r = getMmStkTakeItm1().getFilteredRows("DocId", DocId);
        if (r.length > 0) {
            getMmStkTake1().getCurrentRow().setAttribute("StkTakeStat", 418);
            return true;
        } else
            return false;

    }

    public void updateQuantity() {
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        //  String WhId = (String)getMmStkTake1().getCurrentRow().getAttribute("WhId");
        String DocId = (String) getMmStkTake1().getCurrentRow().getAttribute("DocId");
        BigDecimal cnt = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.mm_ins_stk_take(?,?,?,?)", new Object[] {
                                                          CldId, SlocId, OrgId, DocId
        }));
        System.out.println("Cnt=" + cnt);

    }

    /**
     * Container's getter for LOVUsrId1.
     * @return LOVUsrId1
     */
    public ViewObjectImpl getLOVUsrId1() {
        return (ViewObjectImpl) findViewObject("LOVUsrId1");
    }

    public void setDfltPrf() {
        RowQualifier rq = new RowQualifier(getStkTakePrf1());
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and PrfDflt='Y'");
        Row r[] = this.getStkTakePrf1().getFilteredRows(rq);
        if (r.length > 0) {
            this.getMmStkTake1().getCurrentRow().setAttribute("StkTakePrfId", r[0].getAttribute("PrfId"));
            this.getMmStkTake1().getCurrentRow().setAttribute("StkTakeCriteria", r[0].getAttribute("MtlSelCrt"));
        }
    }

    /**
     * Container's getter for MmStkTakeBin6.
     * @return MmStkTakeBin6
     */
    public MmStkTakeBinVOImpl getMmStkTakeBin6() {
        return (MmStkTakeBinVOImpl) findViewObject("MmStkTakeBin6");
    }

    /**
     * Container's getter for StkItemtoBinVL1.
     * @return StkItemtoBinVL1
     */
    public ViewLinkImpl getStkItemtoBinVL1() {
        return (ViewLinkImpl) findViewLink("StkItemtoBinVL1");
    }

    /**
     * Container's getter for MmStkTakeSr7.
     * @return MmStkTakeSr7
     */
    public MmStkTakeSrVOImpl getMmStkTakeSr7() {
        return (MmStkTakeSrVOImpl) findViewObject("MmStkTakeSr7");
    }

    /**
     * Container's getter for StkItemtoSrVL1.
     * @return StkItemtoSrVL1
     */
    public ViewLinkImpl getStkItemtoSrVL1() {
        return (ViewLinkImpl) findViewLink("StkItemtoSrVL1");
    }

    public Integer CheckStatus() {
        return (Integer) this.getMmStkTake1().getCurrentRow().getAttribute("StkTakeStat");
    }


    public Boolean ChkSumForPhySr(BigDecimal Phy) {

        BigDecimal PhyQty = new BigDecimal(0);
        if (Phy != null)
            PhyQty = Phy;

        BigDecimal TotQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty") != null)
            TotQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty");

        BigDecimal RwkQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("RwkQty") != null)
            RwkQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("RwkQty");
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

        BigDecimal ScrpQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("ScrpQty") != null)
            ScrpQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("ScrpQty");
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

        BigDecimal DiffQty = new BigDecimal(0);
        if ((PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("1")) == 0 ||
            (PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("0")) == 0) {
            return true;
        } else {
            getMmStkTakeSr4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);
            getMmStkTakeSr4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);
            return true;
        }
    }

    public Boolean ChkSumForScrpSr(BigDecimal Scrp) {
        BigDecimal ScrpQty = new BigDecimal(0);
        if (Scrp != null)
            ScrpQty = Scrp;
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

        BigDecimal TotQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty") != null)
            TotQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty");

        BigDecimal PhyQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("PhyQty") != null)
            PhyQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("PhyQty");
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("PhyQty", BigDecimal.ZERO);

        BigDecimal RwkQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("RwkQty") != null)
            RwkQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("RwkQty");
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

        BigDecimal DiffQty = new BigDecimal(0);
        if ((PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("1")) == 0 ||
            (PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("0")) == 0) {
            return true;
        } else {
            getMmStkTakeSr4().getCurrentRow().setAttribute("PhyQty", BigDecimal.ZERO);
            getMmStkTakeSr4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);
            return true;
        }
    }

    public Boolean ChkSumForRwkSr(BigDecimal Rwk) {
        BigDecimal RwkQty = new BigDecimal(0);
        if (Rwk != null)
            RwkQty = Rwk;
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("RwkQty", BigDecimal.ZERO);

        BigDecimal TotQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty") != null)
            TotQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("TotQty");

        BigDecimal PhyQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("PhyQty") != null)
            PhyQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("PhyQty");
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("PhyQty", BigDecimal.ZERO);

        BigDecimal ScrpQty = new BigDecimal(0);
        if (getMmStkTakeSr4().getCurrentRow().getAttribute("ScrpQty") != null)
            ScrpQty = (BigDecimal) getMmStkTakeSr4().getCurrentRow().getAttribute("ScrpQty");
        else
            getMmStkTakeSr4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);

        BigDecimal DiffQty = new BigDecimal(0);
        if ((PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("1")) == 0 ||
            (PhyQty.add(RwkQty.add(ScrpQty))).compareTo(new BigDecimal("0")) == 0) {
            return true;
        } else {
            getMmStkTakeSr4().getCurrentRow().setAttribute("PhyQty", BigDecimal.ZERO);
            getMmStkTakeSr4().getCurrentRow().setAttribute("ScrpQty", BigDecimal.ZERO);
            return true;
        }
    }


    /**
     * Container's getter for LovWarehouseForSearch1.
     * @return LovWarehouseForSearch1
     */
    public ViewObjectImpl getLovWarehouseForSearch1() {
        return (ViewObjectImpl) findViewObject("LovWarehouseForSearch1");
    }

    /**
     * Container's getter for AppBin1.
     * @return AppBin1
     */
    public ViewObjectImpl getAppBin1() {
        return (ViewObjectImpl) findViewObject("AppBin1");
    }

    public String chkValidUser() {
        if (this.getMmStkTake1().getCurrentRow().getAttribute("UsrIdCreate") != null) {
            String UsrId = (resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            if (UsrId.equals(this.getMmStkTake1().getCurrentRow().getAttribute("UsrIdCreate").toString()))
                return "Y";
            else
                return "N";
        }
        return "N";
    }

    public void updateValue() {
        ViewObjectImpl impl = this.getMmStkTakeSr4();
        Row currentRow = impl.getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("RwkQty", 0);
            currentRow.setAttribute("ScrpQty", 1);
            currentRow.setAttribute("PhyQty", 0);
        }
    }

    /**
     * Container's getter for AppItmPrf1VO1.
     * @return AppItmPrf1VO1
     */
    public ViewObjectImpl getAppItmPrf1VO1() {
        return (ViewObjectImpl) findViewObject("AppItmPrf1VO1");
    }

    /**
     * Container's getter for LovUom1.
     * @return LovUom1
     */
    public ViewObjectImpl getLovUom1() {
        return (ViewObjectImpl) findViewObject("LovUom1");
    }

    /**
     * Container's getter for AppItemPrf1.
     * @return AppItemPrf1
     */
    public ViewObjectImpl getAppItemPrf1() {
        return (ViewObjectImpl) findViewObject("AppItemPrf1");
    }

    /**
     * Container's getter for MmStkTakeBc1.
     * @return MmStkTakeBc1
     */
    public MmStkTakeBcVOImpl getMmStkTakeBc1() {
        return (MmStkTakeBcVOImpl) findViewObject("MmStkTakeBc1");
    }

    /**
     * Container's getter for FkMmStkTakeBcVL1.
     * @return FkMmStkTakeBcVL1
     */
    public ViewLinkImpl getFkMmStkTakeBcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmStkTakeBcVL1");
    }

    /**
     * Container's getter for BarcodeDual1.
     * @return BarcodeDual1
     */
    public BarcodeDualVOImpl getBarcodeDual1() {
        return (BarcodeDualVOImpl) findViewObject("BarcodeDual1");
    }

    public Map addToBarcodeList() {
        Row currentRow = this.getBarcodeDual1().getCurrentRow();
        if (currentRow != null) {
            BarcodeDualVORowImpl row = (BarcodeDualVORowImpl) currentRow;
            /*  BarCodeData data =
                new BarCodeData(row.getWhId(), row.getWhNm(), row.getItmId(), row.getItmNm(), row.getBinId(),
                                row.getBinNm(), row.getLotId(), row.getItmUom(), row.getSerFlg(), row.getSrNo(),
                                row.getPhyQty(), row.getRwkQty(), row.getScrpQty()); */
            // return data;k
            //            return new ArrayList(data);
            Map map = new HashMap();
            map.put("WhId", row.getWhId());
            map.put("WhNm", row.getWhNm());
            map.put("ItmId", row.getItmId());
            map.put("ItmNm", row.getItmNm());
            map.put("BinId", (row.getBinId() == null ? "0" : row.getBinId()));
            map.put("BinNm", (row.getBinNm() == null ? "0" : row.getBinNm()));
            map.put("LotId", row.getLotId());
            map.put("Uom", row.getItmUom());
            map.put("serFlg", row.getSerFlg());
            map.put("SrNo", (row.getSrNo() == null ? "0" : row.getSrNo()));
            map.put("PhyQty", (row.getPhyQty() == null ? new Number(0) : row.getPhyQty()));
            map.put("RwkQty", (row.getRwkQty() == null ? new Number(0) : row.getRwkQty()));
            map.put("ScrpQty", (row.getScrpQty() == null ? new Number(0) : row.getScrpQty()));
            return map;
        }
        return null;
    }

    public void insertToTable(List BarData) {
        ViewObjectImpl bc1 = this.getMmStkTakeBc1();
        RowSetIterator itr1 = bc1.createRowSetIterator(null);
        while (itr1.hasNext()) {
            itr1.next().remove();
        }
        ListIterator itr = BarData.listIterator();
        while (itr.hasNext()) {
            BarCodeData dt = (BarCodeData) itr.next();
            Row createRow = bc1.createRow();
            bc1.insertRow(createRow);
            MmStkTakeBcVORowImpl row = (MmStkTakeBcVORowImpl) createRow;
            row.setWhId(dt.getWhId());
            row.setItmId(dt.getItmId());
            row.setLotId(dt.getLotId());
            row.setBinId(dt.getBinId());
            row.setSrNo(dt.getSrNo());
            row.setItmUom(dt.getItmUom());
            row.setPhyQty(dt.getPhyQty());
            row.setRwkQty(dt.getRwkQty());
            row.setScrpQty(dt.getScrpQty());
        }
    }

    public List<BarCodeData> getList() {
        MmStkTakeBcVOImpl bc1 = this.getMmStkTakeBc1();
        List<BarCodeData> list = new ArrayList<BarCodeData>();
        RowSetIterator itr = bc1.createRowSetIterator(null);
        while (itr.hasNext()) {
            MmStkTakeBcVORowImpl bc = (MmStkTakeBcVORowImpl) itr.next();
            BarCodeData data =
                new BarCodeData(bc.getWhId(), bc.getWhNmTrans(), bc.getItmId(), bc.getItmNmTrans(), bc.getBinId(),
                                bc.getBinNmTrans(), bc.getLotId(), bc.getItmUom(), bc.getSerFlgtrans(), bc.getSrNo(),
                                bc.getPhyQty(), bc.getRwkQty(), bc.getScrpQty());
            // next.getWhId()
            System.out.println("Trans: " + bc.getBinNmTrans());
            list.add(data);
        }
        Collections.sort(list);
        return list;
    }

    public int chkBcFieldValid() {
        String binChk = this.resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        BarcodeDualVOImpl dual = this.getBarcodeDual1();
        Row row = dual.getCurrentRow();
        if (row != null) {
            BarcodeDualVORowImpl curRow = (BarcodeDualVORowImpl) row;
            if (curRow.getWhId() == null || curRow.getWhNm() == null) {
                return 1;
            }
            if (curRow.getItmId() == null || curRow.getItmNm() == null) {
                return 2;
            }
            if (curRow.getLotId() == null) {
                return 3;
            }
            if (binChk != null && binChk.equalsIgnoreCase("y") &&
                (curRow.getBinId() == null || curRow.getBinNm() == null)) {
                return 4;
            }
            if (curRow.getSerFlg() != null && curRow.getSerFlg().equalsIgnoreCase("y") && curRow.getSrNo() == null) {
                return 5;
            }
        }
        return 0;
    }

    public void updateTableFromBC() {
        MmStkTakeItmVOImpl impl = this.getMmStkTakeItm1();
        /*    MmStkTakeLotVOImpl lot1 = this.getMmStkTakeLot1();
        MmStkTakeBinVOImpl bin1 = this.getMmStkTakeBin1();
        ViewObjectImpl mmStkTakeSr1 = this.getMmStkTakeSr1();
        ViewObjectImpl mmStkTakeSr5 = this.getMmStkTakeSr5(); */
        String isbin = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();

        MmStkTakeBcVOImpl bc1 = this.getMmStkTakeBc1();
        RowSetIterator itr = bc1.createRowSetIterator(null);

        while (itr.hasNext()) {
            MmStkTakeBcVORowImpl next = (MmStkTakeBcVORowImpl) itr.next();
            String id = next.getItmId();
            Row[] filteredRows = impl.getFilteredRows("ItmId", id);
            if (filteredRows.length == 0) {
                System.out.println("inserting...");
                Integer stknum = (Integer) callStoredFunction(Types.INTEGER, "MM_STK_TAKE_INIT(?,?,?,?,?,?,?,?)", new Object[] {
                                                              next.getCldId(), next.getSlocId(), next.getHoOrgId(),
                                                              next.getOrgId(), next.getWhId(), next.getItmId(), "N",
                                                              next.getDocId()
                });
                System.out.println("Return output: " + stknum);
                impl.executeQuery();
                this.getMmStkTakeLot1().executeQuery();
                this.getMmStkTakeLot2().executeQuery();
                this.getMmStkTakeBin1().executeQuery();
                this.getMmStkTakeBin2().executeQuery();
                this.getMmStkTakeSr5().executeQuery();
                this.getMmStkTakeSr1().executeQuery();
                this.getMmStkTakeSr2().executeQuery();
            }
            //  System.out.println("Lot count: " + this.getMmStkTakeLot2().getRowCount());
            //  System.out.println("bin count: " + this.getMmStkTakeBin2().getRowCount());
            //  System.out.println("sr count: " + this.getMmStkTakeSr2().getRowCount());
            if (!next.getSrNo().equalsIgnoreCase("0")) {
                ViewObjectImpl mmStkTakeSr2 = this.getMmStkTakeSr2();
                RowQualifier rq = new RowQualifier(mmStkTakeSr2);
                rq.setWhereClause("CldId = '" + next.getCldId() + "' and SlocId= " + next.getSlocId() +
                                  " and OrgId = '" + next.getOrgId() + "' and DocId='" + next.getDocId() +
                                  "' and WhId='" + next.getWhId() + "' and ItmId='" + next.getItmId() +
                                  "' and LotId='" + next.getLotId() + "' and BinId='" + next.getBinId() +
                                  "' and SrNo='" + next.getSrNo() + "'");
                Row[] row = mmStkTakeSr2.getFilteredRows(rq);
                if (row.length > 0) {
                    MmStkTakeSrVORowImpl r = (MmStkTakeSrVORowImpl) row[0];
                    r.setPhyQty(new BigDecimal(next.getPhyQty().doubleValue()));
                    r.setScrpQty(new BigDecimal(next.getScrpQty().doubleValue()));
                    r.setRwkQty(new BigDecimal(next.getRwkQty().doubleValue()));
                    BigDecimal bigDecimal = r.getTotQty().subtract(r.getPhyQty());
                    r.setDiffQty(bigDecimal.abs());
                    System.out.println("type like: " + bigDecimal.compareTo(new BigDecimal(0)));
                    if (bigDecimal.compareTo(new BigDecimal(0)) >= 0) {
                        r.setDiffType("A");
                    } else {
                        r.setDiffType("S");
                    }
                }
            } else if (isbin.equalsIgnoreCase("Y")) {
                System.out.println("come in bean for calc");
                ViewObjectImpl mmStkTakebin2 = this.getMmStkTakeBin2();

                RowQualifier rq = new RowQualifier(mmStkTakebin2);
                rq.setWhereClause("CldId = '" + next.getCldId() + "' and SlocId= " + next.getSlocId() +
                                  " and OrgId = '" + next.getOrgId() + "' and DocId='" + next.getDocId() +
                                  "' and WhId='" + next.getWhId() + "' and ItmId='" + next.getItmId() +
                                  "' and LotId='" + next.getLotId() + "' and BinId='" + next.getBinId() + "'");
                Row[] row = mmStkTakebin2.getFilteredRows(rq);
                System.out.println("rows are: " + row.length + " -- " + next.getItmId());
                if (row.length > 0) {
                    MmStkTakeBinVORowImpl r = (MmStkTakeBinVORowImpl) row[0];
                    r.setPhyQty(new BigDecimal(next.getPhyQty().doubleValue()));
                    r.setScrpQty(new BigDecimal(next.getScrpQty().doubleValue()));
                    r.setRwkQty(new BigDecimal(next.getRwkQty().doubleValue()));
                    BigDecimal bigDecimal = r.getTotQty().subtract(r.getPhyQty());
                    r.setDiffQty(bigDecimal.abs());
                    System.out.println("type like: " + bigDecimal.compareTo(new BigDecimal(0)));
                    if (bigDecimal.compareTo(new BigDecimal(0)) >= 0) {
                        r.setDiffType("A");
                    } else {
                        r.setDiffType("S");
                    }
                    System.out.println("done till ..");
                }
            } else {
                ViewObjectImpl mmStkTakeLot2 = this.getMmStkTakeLot2();
                RowQualifier rq = new RowQualifier(mmStkTakeLot2);
                rq.setWhereClause("CldId = '" + next.getCldId() + "' and SlocId= " + next.getSlocId() +
                                  " and OrgId = '" + next.getOrgId() + "' and DocId='" + next.getDocId() +
                                  "' and WhId='" + next.getWhId() + "' and ItmId='" + next.getItmId() +
                                  "' and LotId='" + next.getLotId() + "'");
                Row[] row = mmStkTakeLot2.getFilteredRows(rq);
                if (row.length > 0) {
                    MmStkTakeLotVORowImpl r = (MmStkTakeLotVORowImpl) row[0];
                    r.setPhyQty(new BigDecimal(next.getPhyQty().doubleValue()));
                    r.setScrpQty(new BigDecimal(next.getScrpQty().doubleValue()));
                    r.setRwkQty(new BigDecimal(next.getRwkQty().doubleValue()));
                    BigDecimal bigDecimal = r.getTotQty().subtract(r.getPhyQty());
                    r.setDiffQty(bigDecimal.abs());
                    System.out.println("type like: " + bigDecimal.compareTo(new BigDecimal(0)));
                    if (bigDecimal.compareTo(new BigDecimal(0)) >= 0) {
                        r.setDiffType("A");
                    } else {
                        r.setDiffType("S");
                    }
                    System.out.println("done till .. lot");
                }
            }
        }
        itr.closeRowSetIterator();
    }

    public void insrtinBcFromCSV(InputStream input) {
        // MmStkTakeBcVOImpl bc1 = this.getMmStkTakeBc1();

    }
}
