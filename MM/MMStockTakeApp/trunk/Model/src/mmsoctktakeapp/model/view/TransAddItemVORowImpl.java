package mmsoctktakeapp.model.view;


import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmsoctktakeapp.model.services.MMStkTakeAMImpl;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 03 15:20:03 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransAddItemVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    String HoOrgId=null;
    public enum AttributesEnum {
        Dummy {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TransItmId {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getTransItmId();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setTransItmId((String) value);
            }
        }
        ,
        TransItmDesc {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getTransItmDesc();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setTransItmDesc((String) value);
            }
        }
        ,
        TransWhId {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getTransWhId();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setTransWhId((String) value);
            }
        }
        ,
        TransFyId {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getTransFyId();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setTransFyId((Integer) value);
            }
        }
        ,
        TransOrg {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getTransOrg();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setTransOrg((String) value);
            }
        }
        ,
        TransHoOrgId {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getTransHoOrgId();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        StkItmSummVO1 {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getStkItmSummVO1();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        TransDistinctItemVO1 {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getTransDistinctItemVO1();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        DistinctWhVO1 {
            public Object get(TransAddItemVORowImpl obj) {
                return obj.getDistinctWhVO1();
            }

            public void put(TransAddItemVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TransAddItemVORowImpl object);

        public abstract void put(TransAddItemVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int TRANSITMID = AttributesEnum.TransItmId.index();
    public static final int TRANSITMDESC = AttributesEnum.TransItmDesc.index();
    public static final int TRANSWHID = AttributesEnum.TransWhId.index();
    public static final int TRANSFYID = AttributesEnum.TransFyId.index();
    public static final int TRANSORG = AttributesEnum.TransOrg.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int STKITMSUMMVO1 = AttributesEnum.StkItmSummVO1.index();
    public static final int TRANSDISTINCTITEMVO1 = AttributesEnum.TransDistinctItemVO1.index();
    public static final int DISTINCTWHVO1 = AttributesEnum.DistinctWhVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransAddItemVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }


    /**
     * Gets the attribute value for the calculated attribute TransItmId.
     * @return the TransItmId
     */
    public String getTransItmId() {
        return (String) getAttributeInternal(TRANSITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmId.
     * @param value value to set the  TransItmId
     */
    public void setTransItmId(String value) {
        setAttributeInternal(TRANSITMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmDesc.
     * @return the TransItmDesc
     */
    public String getTransItmDesc() {
        return (String) getAttributeInternal(TRANSITMDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmDesc.
     * @param value value to set the  TransItmDesc
     */
    public void setTransItmDesc(String value) {
        setAttributeInternal(TRANSITMDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransWhId.
     * @return the TransWhId
     */
    public String getTransWhId() {
        return (String) getAttributeInternal(TRANSWHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransWhId.
     * @param value value to set the  TransWhId
     */
    public void setTransWhId(String value) {
        setAttributeInternal(TRANSWHID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFyId.
     * @return the TransFyId
     */
    public Integer getTransFyId() {
        return (Integer) getAttributeInternal(TRANSFYID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFyId.
     * @param value value to set the  TransFyId
     */
    public void setTransFyId(Integer value) {
        setAttributeInternal(TRANSFYID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOrg.
     * @return the TransOrg
     */
    public String getTransOrg() {
        if(getAttributeInternal(TRANSORG)!=null)
        return (String) getAttributeInternal(TRANSORG);
        else
        {
            MMStkTakeAMImpl am = (MMStkTakeAMImpl)this.getApplicationModule();
            return (String)am.getMmStkTake1().getCurrentRow().getAttribute("OrgId");
            }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOrg.
     * @param value value to set the  TransOrg
     */
    public void setTransOrg(String value) {
        setAttributeInternal(TRANSORG, value);
    }
    public String resolvEl(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
    String Message = valueExp.getValue(elContext).toString();
    return Message;
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        if(getAttributeInternal(TRANSORG)!=null)
        return (String) getAttributeInternal(TRANSHOORGID);
        else{
        HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        return HoOrgId;
        }
    
    }

    /**
     * Gets the view accessor <code>RowSet</code> StkItmSummVO1.
     */
    public RowSet getStkItmSummVO1() {
        return (RowSet)getAttributeInternal(STKITMSUMMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> TransDistinctItemVO1.
     */
    public RowSet getTransDistinctItemVO1() {
        return (RowSet)getAttributeInternal(TRANSDISTINCTITEMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> DistinctWhVO1.
     */
    public RowSet getDistinctWhVO1() {
        return (RowSet)getAttributeInternal(DISTINCTWHVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
