package mmsoctktakeapp.model.view;

import java.math.BigDecimal;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmsoctktakeapp.model.entity.MmStkTakeItmEOImpl;


import mmsoctktakeapp.model.services.MMStkTakeAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.BFileDomain;
import oracle.jbo.domain.NClobDomain;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 07 10:22:37 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmStkTakeItmVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMSTKTAKEITMEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        DiffQty {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getDiffQty();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setDiffQty((BigDecimal) value);
            }
        }
        ,
        DiffType {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getDiffType();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setDiffType((String) value);
            }
        }
        ,
        DocId {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        }
        ,
        ItmId {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setItmId((String) value);
            }
        }
        ,
        ItmUom {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getItmUom();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setItmUom((String) value);
            }
        }
        ,
        OrdQty {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getOrdQty();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setOrdQty((BigDecimal) value);
            }
        }
        ,
        OrgId {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        PhyQty {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getPhyQty();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setPhyQty((BigDecimal) value);
            }
        }
        ,
        ReqQty {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getReqQty();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setReqQty((BigDecimal) value);
            }
        }
        ,
        SlocId {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        TotQty {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getTotQty();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setTotQty((BigDecimal) value);
            }
        }
        ,
        RwkQty {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getRwkQty();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setRwkQty((BigDecimal) value);
            }
        }
        ,
        ScrpQty {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getScrpQty();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setScrpQty((BigDecimal) value);
            }
        }
        ,
        WhId {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getWhId();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setWhId((String) value);
            }
        }
        ,
        TransItemDesc {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getTransItemDesc();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setTransItemDesc((String) value);
            }
        }
        ,
        TransUOMDesc {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getTransUOMDesc();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setTransUOMDesc((String) value);
            }
        }
        ,
        TransItmDescToShow {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getTransItmDescToShow();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setTransItmDescToShow((String) value);
            }
        }
        ,
        TransItmId {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getTransItmId();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setTransItmId((String) value);
            }
        }
        ,
        TransWhId {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getTransWhId();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setTransWhId((String) value);
            }
        }
        ,
        TransIsSerialize {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getTransIsSerialize();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setTransIsSerialize((String) value);
            }
        }
        ,
        TransItmName {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getTransItmName();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setTransItmName((String) value);
            }
        }
        ,
        TransUomNm {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getTransUomNm();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setTransUomNm((String) value);
            }
        }
        ,
        MmStkTakeLot {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getMmStkTakeLot();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmStkTakeBin {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getMmStkTakeBin();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmStkTakeSr {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getMmStkTakeSr();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        ItmPrfVO1 {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getItmPrfVO1();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        MmStkTakeItmVO1 {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getMmStkTakeItmVO1();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        WarehouseVO1 {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getWarehouseVO1();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        StkItmSummVO1 {
            public Object get(MmStkTakeItmVORowImpl obj) {
                return obj.getStkItmSummVO1();
            }

            public void put(MmStkTakeItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static int firstIndex = 0;

        public abstract Object get(MmStkTakeItmVORowImpl object);

        public abstract void put(MmStkTakeItmVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int DIFFQTY = AttributesEnum.DiffQty.index();
    public static final int DIFFTYPE = AttributesEnum.DiffType.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int ORDQTY = AttributesEnum.OrdQty.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int PHYQTY = AttributesEnum.PhyQty.index();
    public static final int REQQTY = AttributesEnum.ReqQty.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int TOTQTY = AttributesEnum.TotQty.index();
    public static final int RWKQTY = AttributesEnum.RwkQty.index();
    public static final int SCRPQTY = AttributesEnum.ScrpQty.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int TRANSITEMDESC = AttributesEnum.TransItemDesc.index();
    public static final int TRANSUOMDESC = AttributesEnum.TransUOMDesc.index();
    public static final int TRANSITMDESCTOSHOW = AttributesEnum.TransItmDescToShow.index();
    public static final int TRANSITMID = AttributesEnum.TransItmId.index();
    public static final int TRANSWHID = AttributesEnum.TransWhId.index();
    public static final int TRANSISSERIALIZE = AttributesEnum.TransIsSerialize.index();
    public static final int TRANSITMNAME = AttributesEnum.TransItmName.index();
    public static final int TRANSUOMNM = AttributesEnum.TransUomNm.index();
    public static final int MMSTKTAKELOT = AttributesEnum.MmStkTakeLot.index();
    public static final int MMSTKTAKEBIN = AttributesEnum.MmStkTakeBin.index();
    public static final int MMSTKTAKESR = AttributesEnum.MmStkTakeSr.index();
    public static final int ITMPRFVO1 = AttributesEnum.ItmPrfVO1.index();
    public static final int MMSTKTAKEITMVO1 = AttributesEnum.MmStkTakeItmVO1.index();
    public static final int WAREHOUSEVO1 = AttributesEnum.WarehouseVO1.index();
    public static final int STKITMSUMMVO1 = AttributesEnum.StkItmSummVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmStkTakeItmVORowImpl() {
    }

    /**
     * Gets MmStkTakeItmEO entity object.
     * @return the MmStkTakeItmEO
     */
    public MmStkTakeItmEOImpl getMmStkTakeItmEO() {
        return (MmStkTakeItmEOImpl)getEntity(ENTITY_MMSTKTAKEITMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for DIFF_QTY using the alias name DiffQty.
     * @return the DIFF_QTY
     */
    public BigDecimal getDiffQty() {
        return (BigDecimal) getAttributeInternal(DIFFQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for DIFF_QTY using the alias name DiffQty.
     * @param value value to set the DIFF_QTY
     */
    public void setDiffQty(BigDecimal value) {
        setAttributeInternal(DIFFQTY, value);
    }

    /**
     * Gets the attribute value for DIFF_TYPE using the alias name DiffType.
     * @return the DIFF_TYPE
     */
    public String getDiffType() {
        return (String) getAttributeInternal(DIFFTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for DIFF_TYPE using the alias name DiffType.
     * @param value value to set the DIFF_TYPE
     */
    public void setDiffType(String value) {
        setAttributeInternal(DIFFTYPE, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for ITM_ID using the alias name ItmId.
     * @return the ITM_ID
     */
    public String getItmId() {
        System.out.println("getter:"+(String) getAttributeInternal(ITMID));
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID using the alias name ItmId.
     * @param value value to set the ITM_ID
     */
    public void setItmId(String value) {
        //System.out.println("setter :"+value );
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ITM_UOM using the alias name ItmUom.
     * @return the ITM_UOM
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM using the alias name ItmUom.
     * @param value value to set the ITM_UOM
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for ORD_QTY using the alias name OrdQty.
     * @return the ORD_QTY
     */
    public BigDecimal getOrdQty() {
        return (BigDecimal) getAttributeInternal(ORDQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for ORD_QTY using the alias name OrdQty.
     * @param value value to set the ORD_QTY
     */
    public void setOrdQty(BigDecimal value) {
        setAttributeInternal(ORDQTY, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for PHY_QTY using the alias name PhyQty.
     * @return the PHY_QTY
     */
    public BigDecimal getPhyQty() {
        return (BigDecimal) getAttributeInternal(PHYQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for PHY_QTY using the alias name PhyQty.
     * @param value value to set the PHY_QTY
     */
    public void setPhyQty(BigDecimal value) {
        setAttributeInternal(PHYQTY, value);
    }

    /**
     * Gets the attribute value for REQ_QTY using the alias name ReqQty.
     * @return the REQ_QTY
     */
    public BigDecimal getReqQty() {
        return (BigDecimal) getAttributeInternal(REQQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for REQ_QTY using the alias name ReqQty.
     * @param value value to set the REQ_QTY
     */
    public void setReqQty(BigDecimal value) {
        setAttributeInternal(REQQTY, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for TOT_QTY using the alias name TotQty.
     * @return the TOT_QTY
     */
    public BigDecimal getTotQty() {
        return (BigDecimal) getAttributeInternal(TOTQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_QTY using the alias name TotQty.
     * @param value value to set the TOT_QTY
     */
    public void setTotQty(BigDecimal value) {
        setAttributeInternal(TOTQTY, value);
    }

    /**
     * Gets the attribute value for RWK_QTY using the alias name RwkQty.
     * @return the RWK_QTY
     */
    public BigDecimal getRwkQty() {
        if((BigDecimal) getAttributeInternal(RWKQTY)!=null)
        return (BigDecimal) getAttributeInternal(RWKQTY);
        else
            return BigDecimal.ZERO;
    }

    /**
     * Sets <code>value</code> as attribute value for RWK_QTY using the alias name RwkQty.
     * @param value value to set the RWK_QTY
     */
    public void setRwkQty(BigDecimal value) {
        setAttributeInternal(RWKQTY, value);
    }

    /**
     * Gets the attribute value for SCRP_QTY using the alias name ScrpQty.
     * @return the SCRP_QTY
     */
    public BigDecimal getScrpQty() {
        if((BigDecimal) getAttributeInternal(SCRPQTY)!=null)
        return (BigDecimal) getAttributeInternal(SCRPQTY);
        else
            return BigDecimal.ZERO;
    }

    /**
     * Sets <code>value</code> as attribute value for SCRP_QTY using the alias name ScrpQty.
     * @param value value to set the SCRP_QTY
     */
    public void setScrpQty(BigDecimal value) {
        setAttributeInternal(SCRPQTY, value);
        
            
    }

    /**
     * Gets the attribute value for WH_ID using the alias name WhId.
     * @return the WH_ID
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as attribute value for WH_ID using the alias name WhId.
     * @param value value to set the WH_ID
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItemDesc.
     * @return the TransItemDesc
     */
     public String resolvEl(String data) {
     FacesContext fc = FacesContext.getCurrentInstance();
     Application app = fc.getApplication();
     ExpressionFactory elFactory = app.getExpressionFactory();
     ELContext elContext = fc.getELContext();
     ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
     String Message = valueExp.getValue(elContext).toString();
     return Message;
     }


    public String getTransItemDesc() {
        String name = null;
        MMStkTakeAMImpl a=(MMStkTakeAMImpl)this.getApplicationModule();
       ViewObjectImpl view=a.getAppItmPrf1VO1();
        //String ItmId=view.getCurrentRow().getAttribute("ItmId").toString();
        System.out.println("Itm Id:------->>"+getItmId());
    if(getItmId()!=null) {
    
    
       view.setNamedWhereClauseParam("bindCldId",resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
       view.setNamedWhereClauseParam("bindSlocId",Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
       view.setNamedWhereClauseParam("bindHoOrgId",resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
       view.setNamedWhereClauseParam("bindItmId",getItmId());
       view.executeQuery();
    }       
        Row rows[] = view.getFilteredRows("ItmId", getItmId());
        if (rows.length > 0) {
            if (rows[0].getAttribute("ItmDesc") != null) {
                name = rows[0].getAttribute("ItmDesc").toString();
            }
        }
    System.out.println("Name --"+name);
        if (name != null) {
            return name;
        } else {
            return (String)getAttributeInternal(TRANSITEMDESC);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItemDesc.
     * @param value value to set the  TransItemDesc
     */
    public void setTransItemDesc(String value) {
        setAttributeInternal(TRANSITEMDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransUOMDesc.
     * @return the TransUOMDesc
     */
    public String getTransUOMDesc() {
//        String name = null;
//        System.out.println(" int the getter of TransUOMDesc"+getItmUom());
//        Row rows[] = getItmPrfVO1().getFilteredRows("UomBasic", getItmUom());
//        System.out.println("Length: "+rows.length);
//        if (rows.length > 0) {
//            if (rows[0].getAttribute("UomDesc") != null) {
//                name = rows[0].getAttribute("UomDesc").toString();
//            }
//        }
//        System.out.println("Name:"+name);
//        if (name != null) {
//            return name;
//        } else {
//            return (String) getAttributeInternal(TRANSUOMDESC);
//        }  
               
        String name = null;
        System.out.println(" int the getter of TransUOMDesc"+getItmUom());
        MMStkTakeAMImpl a=(MMStkTakeAMImpl)this.getApplicationModule();
        ViewObjectImpl view=a.getLovUom1();
        view.setNamedWhereClauseParam("BindCldId",resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        view.setNamedWhereClauseParam("BindSlocId",Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        view.setNamedWhereClauseParam("BindUomId",getItmUom());
        //view.setNamedWhereClauseParam("bindItmId",getItmId());
        view.executeQuery();
        
        Row rows[] = view.getFilteredRows("UomId", getItmUom());
        System.out.println("Length: "+rows.length);
        if (rows.length > 0) {
            if (rows[0].getAttribute("UomDesc") != null) {
                name = rows[0].getAttribute("UomDesc").toString();
            }
        }
        
        if (name != null) {
            return name;
        } else {
            return (String) getAttributeInternal(TRANSUOMDESC);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUOMDesc.
     * @param value value to set the  TransUOMDesc
     */
    public void setTransUOMDesc(String value) {
        setAttributeInternal(TRANSUOMDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmDescToShow.
     * @return the TransItmDescToShow
     */
    public String getTransItmDescToShow() {  
        return (String) getAttributeInternal(TRANSITMDESCTOSHOW);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmDescToShow.
     * @param value value to set the  TransItmDescToShow
     */
    public void setTransItmDescToShow(String value) {
        setAttributeInternal(TRANSITMDESCTOSHOW, value);
    }


    /**
     * Gets the attribute value for the calculated attribute TransItmId.
     * @return the TransItmId
     */
    public String getTransItmId() {
        return (String) getAttributeInternal(TRANSITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmId.
     * @param value value to set the  TransItmId
     */
    public void setTransItmId(String value) {
        setAttributeInternal(TRANSITMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransWhId.
     * @return the TransWhId
     */
    public String getTransWhId() {
        return (String) getAttributeInternal(TRANSWHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransWhId.
     * @param value value to set the  TransWhId
     */
    public void setTransWhId(String value) {
        setAttributeInternal(TRANSWHID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransIsSerialize.
     * @return the TransIsSerialize
     */
    public String getTransIsSerialize() { 
        if(getAttributeInternal(TRANSISSERIALIZE)!=null)
        return (String) getAttributeInternal(TRANSISSERIALIZE);
        else
        {
            String ser="N";
                String id=(String) getAttributeInternal(ITMID);
                MMStkTakeAMImpl am = (MMStkTakeAMImpl)resolvElDC("MMStkTakeAMDataControl");
                  ViewObjectImpl itmvo=  am.getItmPrf1();
                RowQualifier rq=new RowQualifier(itmvo);
                rq.setWhereClause("CldId='"+getCldId()+"' and SlocId="+getSlocId()+"  and ItmId='"+id+"'");
                Row[] r=itmvo.getFilteredRows(rq);
            if(r.length>0)
            {
                ser = (String)r[0].getAttribute("SerializedFlg");
                return ser;
            }
            else
                return (String) getAttributeInternal(TRANSISSERIALIZE);
            }
    }
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransIsSerialize.
     * @param value value to set the  TransIsSerialize
     */
    public void setTransIsSerialize(String value) {
        setAttributeInternal(TRANSISSERIALIZE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmName.
     * @return the TransItmName
     */
    public String getTransItmName() {
        System.out.println("innnnnns the TransItmName");
        String name = null;
        MMStkTakeAMImpl a=(MMStkTakeAMImpl)this.getApplicationModule();
        ViewObjectImpl view=a.getAppItmPrf1VO1();
        //String ItmId=view.getCurrentRow().getAttribute("ItmId").toString();
        String itmid= (String)a.getTransSearchItm1().getCurrentRow().getAttribute("ItmId");
        System.out.println("Trans Itm Id:------->>"+itmid);
        if(itmid!=null) {
        
        
        view.setNamedWhereClauseParam("bindCldId",resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        view.setNamedWhereClauseParam("bindSlocId",Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        view.setNamedWhereClauseParam("bindHoOrgId",resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        view.setNamedWhereClauseParam("bindItmId",itmid);
        view.executeQuery();
        }
        Row rows[] = view.getFilteredRows("ItmId", itmid);
        if (rows.length > 0) {
            if (rows[0].getAttribute("ItmDesc") != null) {
                name = rows[0].getAttribute("ItmDesc").toString();
            }
        }
        System.out.println("TransItmName --"+name);
        if (name != null) {
            return name;
        } else {
            return (String) getAttributeInternal(TRANSITMNAME);
        }
        
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmName.
     * @param value value to set the  TransItmName
     */
    public void setTransItmName(String value) {
        setAttributeInternal(TRANSITMNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransUomNm.
     * @return the TransUomNm
     */
    public String getTransUomNm() {
        System.out.println("in the transUomNm");
        String uom=null;
        
         MMStkTakeAMImpl a=(MMStkTakeAMImpl)this.getApplicationModule();
//        ViewObjectImpl view=a.getAppItmPrf1VO1();
//        String ItmId=(String)view.getCurrentRow().getAttribute("ItmId");
        String itmid= (String)a.getTransSearchItm1().getCurrentRow().getAttribute("ItmId");
       // System.out.println("UomItmId : "+itmid);
        ViewObjectImpl view=a.getAppItemPrf1();
        view.setNamedWhereClauseParam("bindCldId", getCldId());
        view.setNamedWhereClauseParam("bindSlocId", getSlocId());
        view.setNamedWhereClauseParam("bindItmId", itmid);
        view.setNamedWhereClauseParam("bindHoOrgId", resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        view.executeQuery();
               Row r1[]=view.getFilteredRows("ItmId", itmid);
               
               if(r1.length>0) {
                                String uombs=(String)r1[0].getAttribute("UomBasic");
                                System.out.println("uombs:"+uombs);
                                    
                                ViewObjectImpl lov=a.getLovUom1();
                                lov.setNamedWhereClauseParam("BindCldId", getCldId());
                                lov.setNamedWhereClauseParam("BindSlocId", getSlocId());
                                lov.setNamedWhereClauseParam("BindUomId", uombs);
                                lov.executeQuery();
                                Row r2[]=lov.getFilteredRows("UomId", uombs);
                                
                                if(r2.length>0) {
                                    uom=(String)r2[0].getAttribute("UomDesc");
                                    
                                }
                                
                        return uom;   
                    }
               else{
        
        return (String) getAttributeInternal(TRANSUOMNM);
    }
    }
    

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUomNm.
     * @param value value to set the  TransUomNm
     */
    public void setTransUomNm(String value) {
        setAttributeInternal(TRANSUOMNM, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmStkTakeLot.
     */
    public RowIterator getMmStkTakeLot() {
        return (RowIterator)getAttributeInternal(MMSTKTAKELOT);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmStkTakeBin.
     */
    public RowIterator getMmStkTakeBin() {
        return (RowIterator)getAttributeInternal(MMSTKTAKEBIN);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmStkTakeSr.
     */
    public RowIterator getMmStkTakeSr() {
        return (RowIterator)getAttributeInternal(MMSTKTAKESR);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ItmPrfVO1.
     */
    public RowSet getItmPrfVO1() {
        return (RowSet)getAttributeInternal(ITMPRFVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> MmStkTakeItmVO1.
     */
    public RowSet getMmStkTakeItmVO1() {
        return (RowSet)getAttributeInternal(MMSTKTAKEITMVO1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> WarehouseVO1.
     */
    public RowSet getWarehouseVO1() {
        return (RowSet)getAttributeInternal(WAREHOUSEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> StkItmSummVO1.
     */
    public RowSet getStkItmSummVO1() {
        return (RowSet)getAttributeInternal(STKITMSUMMVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
