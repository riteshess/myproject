package procurementreportapp.model.views;

import java.sql.CallableStatement;
import java.sql.SQLException;

import oracle.jbo.JboException;
import oracle.jbo.RowSet;
import oracle.jbo.server.ViewRowImpl;

import procurementreportapp.model.views.common.TransRptAppVORow;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 28 09:09:24 PST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransRptAppVORowImpl extends ViewRowImpl implements TransRptAppVORow {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Dummy,
        RptNmTrans,
        RptDescTrans,
        RptFileNmTrans,
        MarginDetailsTrans,
        BgColorTrans,
        HeaderColorTrans,
        downCBTrans,
        LovRptAppVO1;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int RPTNMTRANS = AttributesEnum.RptNmTrans.index();
    public static final int RPTDESCTRANS = AttributesEnum.RptDescTrans.index();
    public static final int RPTFILENMTRANS = AttributesEnum.RptFileNmTrans.index();
    public static final int MARGINDETAILSTRANS = AttributesEnum.MarginDetailsTrans.index();
    public static final int BGCOLORTRANS = AttributesEnum.BgColorTrans.index();
    public static final int HEADERCOLORTRANS = AttributesEnum.HeaderColorTrans.index();
    public static final int DOWNCBTRANS = AttributesEnum.downCBTrans.index();
    public static final int LOVRPTAPPVO1 = AttributesEnum.LovRptAppVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransRptAppVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Gets the attribute value for the calculated attribute RptNmTrans.
     * @return the RptNmTrans
     */
    public String getRptNmTrans() {
        return (String) getAttributeInternal(RPTNMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RptNmTrans.
     * @param value value to set the  RptNmTrans
     */
    public void setRptNmTrans(String value) {
        setAttributeInternal(RPTNMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RptDescTrans.
     * @return the RptDescTrans
     */
    public String getRptDescTrans() {
        return (String) getAttributeInternal(RPTDESCTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RptDescTrans.
     * @param value value to set the  RptDescTrans
     */
    public void setRptDescTrans(String value) {
        setAttributeInternal(RPTDESCTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute RptFileNmTrans.
     * @return the RptFileNmTrans
     */
    public String getRptFileNmTrans() {
        return (String) getAttributeInternal(RPTFILENMTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute RptFileNmTrans.
     * @param value value to set the  RptFileNmTrans
     */
    public void setRptFileNmTrans(String value) {
        setAttributeInternal(RPTFILENMTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute MarginDetailsTrans.
     * @return the MarginDetailsTrans
     */
    public String getMarginDetailsTrans() {
        return (String) getAttributeInternal(MARGINDETAILSTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute MarginDetailsTrans.
     * @param value value to set the  MarginDetailsTrans
     */
    public void setMarginDetailsTrans(String value) {
        setAttributeInternal(MARGINDETAILSTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute BgColorTrans.
     * @return the BgColorTrans
     */
    public String getBgColorTrans() {
        if (getAttributeInternal(BGCOLORTRANS) == null) {
            return "D";
        } else
            return (String) getAttributeInternal(BGCOLORTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute BgColorTrans.
     * @param value value to set the  BgColorTrans
     */
    public void setBgColorTrans(String value) {
        setAttributeInternal(BGCOLORTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HeaderColorTrans.
     * @return the HeaderColorTrans
     */
    public String getHeaderColorTrans() {
        if (getAttributeInternal(HEADERCOLORTRANS) == null) {
            return "D";
        } else
            return (String) getAttributeInternal(HEADERCOLORTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HeaderColorTrans.
     * @param value value to set the  HeaderColorTrans
     */
    public void setHeaderColorTrans(String value) {
        setAttributeInternal(HEADERCOLORTRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute downCBTrans.
     * @return the downCBTrans
     */
    public String getdownCBTrans() {
        return (String) getAttributeInternal(DOWNCBTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute downCBTrans.
     * @param value value to set the  downCBTrans
     */
    public void setdownCBTrans(String value) {
        setAttributeInternal(DOWNCBTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovRptAppVO1.
     */
    public RowSet getLovRptAppVO1() {
        // return (RowSet) getAttributeInternal(LOVRPTAPPVO1);
        return getRefreshedAppRptLOV();

    }

    RowSet getRefreshedAppRptLOV() {
        LovRptAppVOImpl LovVo = (LovRptAppVOImpl) ((RowSet) getAttributeInternal(LOVRPTAPPVO1)).getViewObject();
        LovVo.executeQuery();
        return LovVo.getRowSet();
    }
   

}

