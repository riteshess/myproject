package mmappwhprf.model.module;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmappwhprf.model.module.common.MMAppWhPrfAM;


import mmappwhprf.model.views.AppLocBinVOImpl;
import mmappwhprf.model.views.AppLocBinVORowImpl;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Apr 14 11:46:33 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMAppWhPrfAMImpl extends ApplicationModuleImpl implements MMAppWhPrfAM {
    public MMAppWhPrfAMImpl() {
    }

    /**
     * Container's getter for AppWhOrg1.
     * @return AppWhOrg1
     */
    public ViewObjectImpl getAppWhOrg1() {
        return (ViewObjectImpl) findViewObject("AppWhOrg1");
    }

    /**
     * Container's getter for WarehouseSearch1.
     * @return WarehouseSearch1
     */
    public ViewObjectImpl getWarehouseSearch1() {
        return (ViewObjectImpl) findViewObject("WarehouseSearch1");
    }

    public void searchWarehouse() {
        ViewCriteria vc = this.getAppWhOrg1().getViewCriteria("AppWhOrgVOCriteria");
        String WId = null;
        ViewObjectImpl srch = this.getWarehouseSearch1();
        Row currentRow = srch.getCurrentRow();
        if (currentRow.getAttribute("WhId") != null) {
            WId = currentRow.getAttribute("WhId").toString();
            this.getAppWhOrg1().setNamedWhereClauseParam("BINDWHID", WId);
        } else {
            this.getAppWhOrg1().setNamedWhereClauseParam("BINDWHID", WId);
        }
        this.getAppWhOrg1().applyViewCriteria(vc);
        this.getAppWhOrg1().executeQuery();
    }

    public void resetWarehouse() {
        ViewCriteria vc = this.getAppWhOrg1().getViewCriteria("AppWhOrgVOCriteria");
        this.getWarehouseSearch1().getCurrentRow().setAttribute("WhId", null);
        this.getWarehouseSearch1().executeQuery();
        this.getAppWhOrg1().setNamedWhereClauseParam("BINDWHID", null);
        this.getAppWhOrg1().applyViewCriteria(vc);
        this.getAppWhOrg1().executeQuery();
    }

    public Key getCurrentRowKey() {
        return this.getAppWhOrg1().getCurrentRow().getKey();
    }

    public void setCurrentRow(Key key) {
        this.getAppWhOrg1().executeQuery();
        Row r = this.getAppWhOrg1().getRow(key);
        System.out.println("row get=" + r);
        if (r != null)
            System.out.println("Key of this row=" + r.getKey());
        this.getAppWhOrg1().setCurrentRow(r);
    }

    public String resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext).toString();
        return Message.toString();
    }

    public String CheckDuplicateName(String whNm) {
        String flag = "N";
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        RowSetIterator whiterator = this.getAppWhOrg1().createRowSetIterator(null);
        Row currentRow = this.getAppWhOrg1().getCurrentRow();
        while (whiterator.hasNext()) {
            Row r1 = whiterator.next();
            // System.out.println("r1.getKey(): "+r1.getKey());
            if (r1 != currentRow) {
                String whNm1 = r1.getAttribute("WhNm").toString();
                String orgId1 = r1.getAttribute("OrgId").toString();
                if (orgId.equals(orgId1) && whNm.equalsIgnoreCase(whNm1)) {
                    flag = "Y";
                }
            }
        }
        whiterator.closeRowSetIterator();
        System.out.println("function serialize" + flag);
        //  this.getMmKitProdStk2().closeRowSetIterator();

        //duplicate name in same org
        /*  this.getAppWhOrg2().executeQuery();
        ViewObjectImpl appWhOrg2 = this.getAppWhOrg2();
       RowQualifier rq=new RowQualifier(appWhOrg2);
       Row curr= this.getAppWhOrg1().getCurrentRow();
       rq.setWhereClause("CldId='"+curr.getAttribute("CldId")+"' and OrgId='"+curr.getAttribute("OrgId")+"' and SlocId="+curr.getAttribute("SlocId")+" and HoOrgId='"+curr.getAttribute("HoOrgId")+"' and WhNm='"+whNm.trim()+"'");
            Row[] fr=appWhOrg2.getFilteredRows(rq);
            System.out.println("No of same rows="+fr.length);
            if(fr.length>0)
            {
                for(Row r:fr)
                {
                if(curr.getAttribute("WhId").equals(r.getAttribute("WhId")) && curr.getAttribute("CldId").equals(r.getAttribute("CldId")) && curr.getAttribute("SlocId").equals(r.getAttribute("SlocId")) && curr.getAttribute("OrgId").equals(r.getAttribute("OrgId")) && curr.getAttribute("HoOrgId").equals(r.getAttribute("HoOrgId")))
                {}
                else
                    return "Y";
                }
            }
            return "N"; */
        return flag;
    }

    public String ChkAdds() {
        System.out.println("Inside");
        String chk = "N";
        if (this.getAppWhOrg1().getCurrentRow() != null) {
            System.out.println("Current row is not null");
            if (this.getAppWhOrg1().getCurrentRow().getAttribute("AddsId") != null) {
                chk = "Y";
                System.out.println("add is not null");
            }
        }
        System.out.println("chkexit=" + chk);
        return chk;
    }

    public void executeCriteriaForWhOrg(String cld, String hoOrg, String org, Integer sloc) {
        ViewCriteria vc = this.getAppWhOrg1().getViewCriteria("AppWhOrgVOCriteria");
        this.getAppWhOrg1().setNamedWhereClauseParam("BINDCLDID", cld);
        this.getAppWhOrg1().setNamedWhereClauseParam("BINDSLOCID", sloc);
        this.getAppWhOrg1().setNamedWhereClauseParam("BINDORGID", org);
        this.getAppWhOrg1().setNamedWhereClauseParam("BINDHOORGID", hoOrg);
        this.getAppWhOrg1().applyViewCriteria(vc);
        this.getAppWhOrg1().executeQuery();
    }

    /**
     * Container's getter for AppWhOrg2.
     * @return AppWhOrg2
     */
    public ViewObjectImpl getAppWhOrg2() {
        return (ViewObjectImpl) findViewObject("AppWhOrg2");
    }

    /**
     * Container's getter for lovAddsTune.
     * @return lovAddsTune
     */
    public ViewObjectImpl getlovAddsTune() {
        return (ViewObjectImpl) findViewObject("lovAddsTune");
    }

    /**
     * Container's getter for AppLocBin1.
     * @return AppLocBin1
     */
    public AppLocBinVOImpl getAppLocBin1() {
        return (AppLocBinVOImpl) findViewObject("AppLocBin1");
    }

    /**
     * Container's getter for WhToBinVL1.
     * @return WhToBinVL1
     */
    public ViewLinkImpl getWhToBinVL1() {
        return (ViewLinkImpl) findViewLink("WhToBinVL1");
    }

    public boolean checkLocNm() {
        AppLocBinVOImpl appLocBin1 = this.getAppLocBin1();
        Row currentRow = appLocBin1.getCurrentRow();
        if (currentRow != null) {
            Object attribute = currentRow.getAttribute("LocNm");
            if (attribute == null) {
                return true;
            }
        }
        return false;
    }

    public boolean checkLocRow() {
        AppLocBinVOImpl appLocBin1 = this.getAppLocBin1();
        int count = appLocBin1.getRowCount();
        if (count > 0) {
            return true;
        }
        return false;
    }

    public void postChange() {
        this.getDBTransaction().postChanges();
        System.out.println("Post changes");
        this.getTree1().executeQuery();
        this.getTree2().executeQuery();
    }

    public boolean checkLocParent(String idParent) {
        //this.
        AppLocBinVOImpl appLocBin1 = this.getAppLocBin1();
        Row currentRow = appLocBin1.getCurrentRow();
        AppLocBinVORowImpl row = (AppLocBinVORowImpl) currentRow;
        // String idParent = row.getLocIdParent();
        String id = row.getLocId();
        if (id.equals(idParent))
            return true;

        boolean check = check(appLocBin1, idParent, id);
        return check;
    }

    public boolean check(AppLocBinVOImpl a, String id, String matcher) {
        RowQualifier rq = new RowQualifier(a);
        rq.setWhereClause("LocId = '" + id + "'");
        Row[] filteredRows = a.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            Object attribute = filteredRows[0].getAttribute("LocIdParent");
            if (attribute != null) {
                if (attribute.toString().equals(matcher)) {
                    return true;
                } else {
                    return check(a, attribute.toString(), matcher);
                }
            }
        }
        return false;
    }

    public boolean isChildExists() {
        AppLocBinVOImpl appLocBinVOImpl = this.getAppLocBin1();
        Row currentRow = appLocBinVOImpl.getCurrentRow();
        if (currentRow != null) {
            Object locID = currentRow.getAttribute("LocId");
            AppLocBinVOImpl appLocBin1 = this.getAppLocBin2();
            appLocBin1.executeQuery();
            RowQualifier rq = new RowQualifier(appLocBin1);
            rq.setWhereClause("LocIdParent = '" + locID.toString() + "'");
            Row[] filteredRows = appLocBin1.getFilteredRows(rq);
            if (filteredRows.length > 0)
                return true;
        }
        return false;
    }


    public void filterView(String locId) {
        AppLocBinVOImpl appLocBin1 = this.getAppLocBin1();
        appLocBin1.setNamedWhereClauseParam("locIdBind", locId);
        //appLocBin1.setWhereClause(null);
        //appLocBin1.setWhereClause("LOC_ID = '" + locId + "'");
        appLocBin1.executeQuery();
    }


    public void resetLocTable() {
        AppLocBinVOImpl appLocBin1 = this.getAppLocBin1();
        appLocBin1.setNamedWhereClauseParam("locIdBind", null);
        appLocBin1.executeQuery();
    }

    public void insertinLocBin(String locID) {
        postChange();
        AppLocBinVOImpl appLocBin1 = this.getAppLocBin1();
        /*
        Row currentRow = appLocBin1.getCurrentRow();
        Object locId = null;
        if (currentRow != null) {
            locId = currentRow.getAttribute("LocId");
        } */
        Row createRow = appLocBin1.createRow();
        appLocBin1.insertRow(createRow);
        createRow.setAttribute("LocIdParent", locID);
        //this.getDBTransaction().postChanges();
        AppLocBinVORowImpl row = (AppLocBinVORowImpl) createRow;
        row.getLovLocParentVO1().executeQuery();
    }

    public boolean deleteLocBin() {
        AppLocBinVOImpl appLocBin1 = this.getAppLocBin1();
        Row currentRow = appLocBin1.getCurrentRow();
        if (currentRow != null) {
            String whid = currentRow.getAttribute("WhId").toString();
            String locId = currentRow.getAttribute("LocId").toString();
            boolean flg = chkIfLocBinExists(whid, locId);
            if (flg == true)
                return true;
            currentRow.remove();
        }
        appLocBin1.setNamedWhereClauseParam("locIdBind", null);
        appLocBin1.executeQuery();
        return false;
    }

    /**
     * Container's getter for AppLocBin2.
     * @return AppLocBin2
     */
    public AppLocBinVOImpl getAppLocBin2() {
        return (AppLocBinVOImpl) findViewObject("AppLocBin2");
    }

    /**
     * Container's getter for WhToBinVL2.
     * @return WhToBinVL2
     */
    public ViewLinkImpl getWhToBinVL2() {
        return (ViewLinkImpl) findViewLink("WhToBinVL2");
    }


    /**
     * Container's getter for Tree1.
     * @return Tree1
     */
    public ViewObjectImpl getTree1() {
        return (ViewObjectImpl) findViewObject("Tree1");
    }

    /**
     * Container's getter for WhToTreeVL1.
     * @return WhToTreeVL1
     */
    public ViewLinkImpl getWhToTreeVL1() {
        return (ViewLinkImpl) findViewLink("WhToTreeVL1");
    }

    /**
     * Container's getter for Tree2.
     * @return Tree2
     */
    public ViewObjectImpl getTree2() {
        return (ViewObjectImpl) findViewObject("Tree2");
    }

    /**
     * Container's getter for ViewLinkVL1.
     * @return ViewLinkVL1
     */
    public ViewLinkImpl getViewLinkVL1() {
        return (ViewLinkImpl) findViewLink("ViewLinkVL1");
    }

    public boolean chkIfLocBinExists(String whId, String locId) {
        int sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope. GLBL_APP_USR_ORG}").toString();

        Object count = callStoredFunction(Types.NUMERIC, "APP.FN_CHK_BIN_LOC (?,?,?,?,?)", new Object[] {
                                          CldId, sloc_id, orgId, whId, locId
        });
        System.out.println("count is: " + count + "--" + whId + "--" + locId);
        if (count != null) {
            int x = Integer.parseInt(count.toString());
            if (x > 0)
                return true;
        }
        return false;
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);

                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public boolean CanChangePrjId() {
        int sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope. GLBL_APP_USR_ORG}").toString();
        if (this.getAppWhOrg1().getCurrentRow() != null) {
            Object chk = callStoredFunction(Types.VARCHAR, "MM.MM_IS_WH_EMPTY (?,?,?,?)", new Object[] {
                                            CldId, sloc_id, orgId,
                                            this.getAppWhOrg1().getCurrentRow().getAttribute("WhId")
            });
            System.out.println("chk is: " + chk);
            if (chk != null && chk.toString().equals("Y")) {
                return true;
            }
        }
        return false;
    }
}
