package vendorpricelevel.model.services;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;

import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import vendorpricelevel.model.services.common.vendorpriceAM;
import vendorpricelevel.model.views.AppEoPrfVOImpl;
import vendorpricelevel.model.views.AppEoPrfVORowImpl;
import vendorpricelevel.model.views.DualVoForOrgImpl;
import vendorpricelevel.model.views.MmEoItmVOImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 08 10:22:57 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class vendorpriceAMImpl extends ApplicationModuleImpl implements vendorpriceAM {
    /**
     * This is the default constructor (do not remove).
     */
    public vendorpriceAMImpl() {
    }

    /**
     * Container's getter for MmEoItm1.
     * @return MmEoItm1
     */
    public MmEoItmVOImpl getMmEoItm1() {
        return (MmEoItmVOImpl)findViewObject("MmEoItm1");
    }

    /**
     * Container's getter for supIdLOV1.
     * @return supIdLOV1
     */
    public ViewObjectImpl getsupIdLOV1() {
        return (ViewObjectImpl)findViewObject("supIdLOV1");
    }

    /**
     * Container's getter for AppEoPrf.
     * @return AppEoPrf
     */
    public AppEoPrfVOImpl getAppEoPrf() {
        return (AppEoPrfVOImpl)findViewObject("AppEoPrf");
    }

    /**
     * Container's getter for MmEoItm.
     * @return MmEoItm
     */
    public MmEoItmVOImpl getMmEoItm() {
       /*  MmEoItmVOImpl itmVO=(MmEoItmVOImpl) (MmEoItmVOImpl)findViewObject("MmEoItm");
        itmVO.setorg(null);
        itmVO.executeQuery();
       
        itmVO.setorg(((AppEoPrfVORowImpl)(getAppEoPrf().getCurrentRow())).getOrgId());
        itmVO.executeQuery();
        return itmVO; */
       return (MmEoItmVOImpl)findViewObject("MmEoItm");
    }

    /**
     * Container's getter for AppEoPrfToMMEoItmVL1.
     * @return AppEoPrfToMMEoItmVL1
     */
    public ViewLinkImpl getAppEoPrfToMMEoItmVL1() {
        return (ViewLinkImpl)findViewLink("AppEoPrfToMMEoItmVL1");
    }

    /**
     * Container's getter for uomLOV1.
     * @return uomLOV1
     */
    public ViewObjectImpl getuomLOV1() {
        return (ViewObjectImpl)findViewObject("uomLOV1");
    }

    /**
     * Container's getter for ItmIdLOV1.
     * @return ItmIdLOV1
     */
    public ViewObjectImpl getItmIdLOV1() {
        return (ViewObjectImpl)findViewObject("ItmIdLOV1");
    }
    
    public void loadSupplierApplyBindVar(String hoOrgId,String cldId,Integer slocId,String orgId)
    {
            this.getAppEoPrf().setNamedWhereClauseParam("orgIdBind", orgId);
            this.getAppEoPrf().setNamedWhereClauseParam("slocIdBind", slocId);
            this.getAppEoPrf().setNamedWhereClauseParam("CldIdBindVar", cldId);
            this.getAppEoPrf().setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
            this.getAppEoPrf().executeQuery();

         
                this.getItmIdLOV1().setNamedWhereClauseParam("orgIdBindVar", orgId);
                this.getItmIdLOV1().setNamedWhereClauseParam("SlocIDBindVar", slocId);
                this.getItmIdLOV1().setNamedWhereClauseParam("CldIdBindVar", cldId);
                this.getItmIdLOV1().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
                this.getItmIdLOV1().executeQuery();
                
            ViewCriteria vceoitm=this.getMmEoItm().getViewCriteria("MmEoItmVOCriteria");
                this.getMmEoItm().setNamedWhereClauseParam("orgIdBind", orgId);
                this.getMmEoItm().setNamedWhereClauseParam("slocIdBind", slocId);
                this.getMmEoItm().setNamedWhereClauseParam("CldIdBindVar", cldId);
                this.getMmEoItm().applyViewCriteria(vceoitm);
                this.getMmEoItm().executeQuery();


                this.getuomLOV1().setNamedWhereClauseParam("orgBind", orgId);
                this.getuomLOV1().setNamedWhereClauseParam("SlocIdBindVar", slocId);
                this.getuomLOV1().setNamedWhereClauseParam("CldIdBindVar", cldId);
                this.getuomLOV1().setNamedWhereClauseParam("hoorgBind", hoOrgId);
                this.getuomLOV1().executeQuery();
                
            ViewCriteria vcSup=this.getsupIdLOV1().getViewCriteria("supIdLOVCriteria");
                this.getsupIdLOV1().setNamedWhereClauseParam("orgIdBindVar", orgId);
                this.getsupIdLOV1().setNamedWhereClauseParam("SlocIdBindVar", slocId);
                this.getsupIdLOV1().setNamedWhereClauseParam("CldIdBindVar", cldId);
                this.getsupIdLOV1().setNamedWhereClauseParam("hoOrg", hoOrgId);
                this.getsupIdLOV1().applyViewCriteria(vcSup);
                this.getsupIdLOV1().executeQuery();       
        
        }

    /**
     * Container's getter for LovCurrVwVO1.
     * @return LovCurrVwVO1
     */
    public ViewObjectImpl getLovCurrVwVO1() {
        return (ViewObjectImpl)findViewObject("LovCurrVwVO1");
    }

    /**
     * Container's getter for DualVoForOrg.
     * @return DualVoForOrg
     */
    public DualVoForOrgImpl getDualVoForOrg() {
        return (DualVoForOrgImpl)findViewObject("DualVoForOrg");
    }

    /**
     * Container's getter for CurrencyVO1.
     * @return CurrencyVO1
     */
    public ViewObjectImpl getCurrencyVO1() {
        return (ViewObjectImpl)findViewObject("CurrencyVO1");
    }

    /**
     * Container's getter for LovItmIdTune.
     * @return LovItmIdTune
     */
    public ViewObjectImpl getLovItmIdTune() {
        return (ViewObjectImpl)findViewObject("LovItmIdTune");
    }

    /**
     * Container's getter for LovItmDescTune.
     * @return LovItmDescTune
     */
    public ViewObjectImpl getLovItmDescTune() {
        return (ViewObjectImpl)findViewObject("LovItmDescTune");
    }

    /**
     * Container's getter for LOVAutoSuggestITemsVO1.
     * @return LOVAutoSuggestITemsVO1
     */
    public ViewObjectImpl getLOVAutoSuggestITemsVO1() {
        return (ViewObjectImpl) findViewObject("LOVAutoSuggestITemsVO1");
    }
    
     
    /**
    * Method to get suggested Item in AutoSuggest.
    * @param itmStr
    * @return
    */
    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        ArrayList<String> h = new ArrayList<String>();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl autoSuggestVO = this.getLOVAutoSuggestITemsVO1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind",cld_id);
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", slocId);
        autoSuggestVO.setNamedWhereClauseParam("OrgIdbind", orgId);
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", hoOrg_id);
        autoSuggestVO.setNamedWhereClauseParam("ItmNmbind", itmStr);
      //  autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }
    
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public ViewObjectImpl getSearch1() {
        return (ViewObjectImpl) findViewObject("Search1");
    }
    
    
    public void search(String name){
        System.out.println("String for search is "+name);
        if(name == null ||name.toString().trim().length()==0){
            AppEoPrfVOImpl vo=this.getAppEoPrf();
            vo.setSupNameBind(null);
            vo.executeQuery(); 
        }else{
            AppEoPrfVOImpl vo=this.getAppEoPrf();
            vo.setSupNameBind(name.toUpperCase());
            vo.executeQuery();
        }
    
    }
    
    public void reset(){
        this.getSearch1().executeQuery();
        
        AppEoPrfVOImpl vo=this.getAppEoPrf();
        vo.setSupNameBind(null);
        vo.executeQuery(); 
    }
}
