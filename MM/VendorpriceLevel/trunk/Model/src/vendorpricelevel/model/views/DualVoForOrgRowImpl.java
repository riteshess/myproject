package vendorpricelevel.model.views;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;

import vendorpricelevel.model.services.vendorpriceAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 15 13:05:04 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DualVoForOrgRowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(DualVoForOrgRowImpl obj) {
                return obj.getDummy();
            }

            public void put(DualVoForOrgRowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        OrgCurrId {
            public Object get(DualVoForOrgRowImpl obj) {
                return obj.getOrgCurrId();
            }

            public void put(DualVoForOrgRowImpl obj, Object value) {
                obj.setOrgCurrId((Integer)value);
            }
        }
        ,
        OrgCurrNotation {
            public Object get(DualVoForOrgRowImpl obj) {
                return obj.getOrgCurrNotation();
            }

            public void put(DualVoForOrgRowImpl obj, Object value) {
                obj.setOrgCurrNotation((String)value);
            }
        }
        ,
        OrgCurrDesc {
            public Object get(DualVoForOrgRowImpl obj) {
                return obj.getOrgCurrDesc();
            }

            public void put(DualVoForOrgRowImpl obj, Object value) {
                obj.setOrgCurrDesc((String)value);
            }
        }
        ,
        LovCurrVwVO1 {
            public Object get(DualVoForOrgRowImpl obj) {
                return obj.getLovCurrVwVO1();
            }

            public void put(DualVoForOrgRowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(DualVoForOrgRowImpl object);

        public abstract void put(DualVoForOrgRowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int ORGCURRID = AttributesEnum.OrgCurrId.index();
    public static final int ORGCURRNOTATION = AttributesEnum.OrgCurrNotation.index();
    public static final int ORGCURRDESC = AttributesEnum.OrgCurrDesc.index();
    public static final int LOVCURRVWVO1 = AttributesEnum.LovCurrVwVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DualVoForOrgRowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgCurrId.
     * @return the OrgCurrId
     */
    public Integer getOrgCurrId() {
        if(getAttributeInternal(ORGCURRID)!=null)
        return (Integer) getAttributeInternal(ORGCURRID);
        else
        {
            String org=resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
                Integer currId=(Integer)(callStoredFunction(Types.INTEGER, "APP.PKG_APP.GET_ORG_DEF_CURR_BS1(?)", new Object[] {org}));

               return currId;
            }
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);

    }
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            vendorpriceAMImpl am = (vendorpriceAMImpl)resolvElDC("vendorpriceAMDataControl");
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }
    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgCurrId.
     * @param value value to set the  OrgCurrId
     */
    public void setOrgCurrId(Integer value) {
        setAttributeInternal(ORGCURRID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgCurrNotation.
     * @return the OrgCurrNotation
     */
    public String getOrgCurrNotation() {
        if(getAttributeInternal(ORGCURRNOTATION)!=null)
        return (String) getAttributeInternal(ORGCURRNOTATION);
        else
        {
                vendorpriceAMImpl am = (vendorpriceAMImpl)resolvElDC("vendorpriceAMDataControl");
               Row r[]=am.getLovCurrVwVO1().getFilteredRows("CurrId",getOrgCurrId());
            if(r.length>0)
                return (String)r[0].getAttribute("CurrNotationAlias");
            else
                return (String) getAttributeInternal(ORGCURRNOTATION);
            }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgCurrNotation.
     * @param value value to set the  OrgCurrNotation
     */
    public void setOrgCurrNotation(String value) {
        setAttributeInternal(ORGCURRNOTATION, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgCurrDesc.
     * @return the OrgCurrDesc
     */
    public String getOrgCurrDesc() {
        if(getAttributeInternal(ORGCURRDESC)!=null)
            return (String) getAttributeInternal(ORGCURRDESC);
        else
        {
                vendorpriceAMImpl am = (vendorpriceAMImpl)resolvElDC("vendorpriceAMDataControl");
               Row r[]=am.getLovCurrVwVO1().getFilteredRows("CurrId",getOrgCurrId());
            if(r.length>0)
                return (String)r[0].getAttribute("CurrDesc");
            else
                return (String) getAttributeInternal(ORGCURRDESC);
            }
       
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgCurrDesc.
     * @param value value to set the  OrgCurrDesc
     */
    public void setOrgCurrDesc(String value) {
        setAttributeInternal(ORGCURRDESC, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCurrVwVO1.
     */
    public RowSet getLovCurrVwVO1() {
        return (RowSet)getAttributeInternal(LOVCURRVWVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
