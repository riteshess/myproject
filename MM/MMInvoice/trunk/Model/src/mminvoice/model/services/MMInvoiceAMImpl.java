
package mminvoice.model.services;

import adf.utils.ebiz.EbizParams;

import appCostCenterSevice.model.service.AppCostCenterServiceAMImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.HashSet;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mminvoice.model.services.common.MMInvoiceAM;
import mminvoice.model.views.LovPoNoVOImpl;
import mminvoice.model.views.MmInvcItmVOImpl;
import mminvoice.model.views.MmInvcPmtSchdlVOImpl;
import mminvoice.model.views.MmInvcVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ApplicationModule;
import oracle.jbo.AttributeDef;
import oracle.jbo.JboSQLException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.client.Configuration;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 24 15:35:35 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMInvoiceAMImpl extends ApplicationModuleImpl implements MMInvoiceAM {
    private static ADFLogger _log = ADFLogger.createADFLogger(MMInvoiceAMImpl.class);


    /**
     * This is the default constructor (do not remove).
     */
    public MMInvoiceAMImpl() {
    }

    /**
     * Container's getter for MmInvc.
     * @return MmInvc
     */
    public MmInvcVOImpl getMmInvc() {
        return (MmInvcVOImpl) findViewObject("MmInvc");
    }

    /**
     * Container's getter for MmInvcDtl.
     * @return MmInvcDtl
     */
    public ViewObjectImpl getMmInvcDtl() {
        return (ViewObjectImpl) findViewObject("MmInvcDtl");
    }

    /**
     * Container's getter for MmInvcSrc.
     * @return MmInvcSrc
     */
    public ViewObjectImpl getMmInvcSrc() {
        return (ViewObjectImpl) findViewObject("MmInvcSrc");
    }

    /**
     * Container's getter for MmInvcItm.
     * @return MmInvcItm
     */
    public MmInvcItmVOImpl getMmInvcItm() {
        return (MmInvcItmVOImpl) findViewObject("MmInvcItm");
    }

    /**
     * Container's getter for MmInvcOc.
     * @return MmInvcOc
     */
    public ViewObjectImpl getMmInvcOc() {
        return (ViewObjectImpl) findViewObject("MmInvcOc");
    }

    /**
     * Container's getter for MmInvcTr.
     * @return MmInvcTr
     */
    public ViewObjectImpl getMmInvcTr() {
        return (ViewObjectImpl) findViewObject("MmInvcTr");
    }

    /**
     * Container's getter for MmInvcTrLines.
     * @return MmInvcTrLines
     */
    public ViewObjectImpl getMmInvcTrLines() {
        return (ViewObjectImpl) findViewObject("MmInvcTrLines");
    }

    /**
     * Container's getter for FkMmInvcDtlVL1.
     * @return FkMmInvcDtlVL1
     */
    public ViewLinkImpl getFkMmInvcDtlVL1() {
        return (ViewLinkImpl) findViewLink("FkMmInvcDtlVL1");
    }

    /**
     * Container's getter for FkMmInvcSrcVL1.
     * @return FkMmInvcSrcVL1
     */
    public ViewLinkImpl getFkMmInvcSrcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmInvcSrcVL1");
    }

    /**
     * Container's getter for FkMmInvcItmVL1.
     * @return FkMmInvcItmVL1
     */
    public ViewLinkImpl getFkMmInvcItmVL1() {
        return (ViewLinkImpl) findViewLink("FkMmInvcItmVL1");
    }

    /**
     * Container's getter for FkMmInvcOcVL1.
     * @return FkMmInvcOcVL1
     */
    public ViewLinkImpl getFkMmInvcOcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmInvcOcVL1");
    }

    /**
     * Container's getter for FkMmInvcTrVL1.
     * @return FkMmInvcTrVL1
     */
    public ViewLinkImpl getFkMmInvcTrVL1() {
        return (ViewLinkImpl) findViewLink("FkMmInvcTrVL1");
    }

    /**
     * Container's getter for FkMmInvcTrLinesVL1.
     * @return FkMmInvcTrLinesVL1
     */
    public ViewLinkImpl getFkMmInvcTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("FkMmInvcTrLinesVL1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            int end = e.getMessage().indexOf("\n");
            //  throw new JboException(e.getMessage().substring(11, end));
            String msg = e.getMessage();
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            //  throw new JboException(e);

            return null;
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    //getcld

    /**
     *  Method used to create DocId
     * */
    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        //   String paramWhChk = resolvEl("#{pageFlowScope.GLBL_ORG_WH_CHK}");
        Row currentRow = this.getMmInvc().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18521), new Integer(0)
        }));
        // String prjId=resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}").toString();

        currentRow.setAttribute("OrgId", OrgId);
        currentRow.setAttribute("CldId", CldId);
        currentRow.setAttribute("SlocId", SlocId);
        currentRow.setAttribute("UsrIdCreate", UsrId);
        currentRow.setAttribute("DocId", docId);
        Timestamp t = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocDt", t);
        currentRow.setAttribute("InvcDt", t);
        // currentRow.setAttribute("arg0", arg1);
        Integer fy = getFYid(CldId, OrgId, t, "A");
        //currentRow.setAttribute("FyId",5);
        _log.info(fy + "--DocId new created----" + docId);
        //System.out.println("DocID : "+docId);

        String prjId = (String) resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
        if (prjId == null) {
            currentRow.setAttribute("PrjId", "PROJ0000");
        } else {
            currentRow.setAttribute("PrjId", prjId);
        }

        this.getLovRcpt().executeQuery();
    }


    /**
     * Method to generate Invoice No. in case it is not yet generated.
     * @return Receipt No
     * */
    public String getInvNo(Integer SlocId, String CldId, String OrgId) {
        Row invRw = this.getMmInvc().getCurrentRow();
        Integer fy = (Integer) invRw.getAttribute("FyId");
        String invNo = null;
        if (invRw.getAttribute("InvcNo") == null) {
            invNo = (String) (callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?,?,?)", new Object[] {
                                                 SlocId, CldId, OrgId, "MM$INVC", new Integer(0), fy,
                                                 new Integer(18521), (Integer) invRw.getAttribute("InvcType")
            }));
            _log.info(fy + "--InvNo generated--" + invNo);
            invRw.setAttribute("InvcNo", invNo);
        } else {
            invNo = invRw.getAttribute("InvcNo").toString();
        }
        return invNo;
    }


    public void doBeforeCommit(Integer SlocId, String CldId, String OrgId) {
        Row invRw = this.getMmInvc().getCurrentRow();
        String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        if (invRw != null) {
            Number cc = new Number(1);
            Object ccObj = invRw.getAttribute("CurrConvFctr");
            if (ccObj != null) {
                cc = (Number) ((Number) ccObj).round(getGlblCurrDigit());
            }

            Number totalBsAmt = new Number(1);
            Object bsObj = invRw.getAttribute("TransInvcAmtSp");
            if (bsObj != null) {
                totalBsAmt = (Number) bsObj;
            }
            totalBsAmt = totalBsAmt.multiply(cc);

            removeAllZeroAdjustments();
            invRw.setAttribute("TotAmtBs", totalBsAmt);
            invRw.setAttribute("TotAmtSp", invRw.getAttribute("TransInvcAmtSp"));

            Integer mmLndUpdate =
                (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_INVC_LND_COST(?,?,?,?,?,?,?)", new Object[] {
                                              CldId, SlocId, HoOrgId, OrgId, invRw.getAttribute("DocId"), 18521, cc
            }));
            _log.info("lnd cost sp function return is " + mmLndUpdate);

            this.populateCCForItems(invRw.getAttribute("DocId").toString());
        }


        Integer iVal = (Integer) invRw.getAttribute("InvcType");
        if (iVal == 455 || iVal == 457) //In case of Purchase Invoice or Cash Purchase Update receipt status.
        {
            Row dltRows[] = this.getMmInvcDtl().getFilteredRows("DocId", invRw.getAttribute("DocId"));
            for (Row row : dltRows) {
                Integer rcpt = (Integer) (callStoredFunction(Types.INTEGER, "MM.mm_updt_rcpt_stat(?,?,?,?)", new Object[] {
                                                             CldId, SlocId, OrgId, row.getAttribute("DocIdRcpt")
                }));
            }
        } else if (iVal == 456) //In case of Material Transfer Invoice.
        {
            Row dltRows[] = this.getMmInvcDtl().getFilteredRows("DocId", invRw.getAttribute("DocId"));
            for (Row row : dltRows) {
                Integer rcpt = (Integer) (callStoredFunction(Types.INTEGER, "MM.mm_updt_issu_stat(?,?,?,?)", new Object[] {
                                                             CldId, SlocId, OrgId, row.getAttribute("DocIdRcpt")
                }));
            }
        }
        /**
         * in case of service invoice and consumable invoice update Purchase Order Status*/
        else if (iVal == 737 || iVal == 739) //In case of service and cinsumable invoice
        {
            //  Row dltRows[] = this.getMmInvcDtl().getFilteredRows("DocId",invRw.getAttribute("DocId"));
            // for(Row row:dltRows)
            Integer PO = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_PO_ON_INVC(?,?,?,?,?)", new Object[] {
                                                       CldId, SlocId, OrgId, invRw.getAttribute("DocId"),
                                                       invRw.getAttribute("UsrIdCreate")
            }));

        }


        try {
            this.sendDateFromTempCcToMmInvcCc();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * Method used to call function to get the fy id
     * @return FY Id
     * */
    public Integer getFYid(String CldId, String OrgId, Timestamp invDate, String Mode) {
        ViewObjectImpl inv = this.getMmInvc();
        if (inv.getCurrentRow().getAttribute("InvcDt") != null) {
            Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                         CldId, OrgId, inv.getCurrentRow().getAttribute("InvcDt")
            }));
            _log.info(invDate + ":: -FY RETURNED- ::" + fyId);
            if (Mode.equalsIgnoreCase("A")) {

                _log.info("Rcpt Date" + inv.getCurrentRow().getAttribute("InvcDt"));
                if (fyId > 0) {
                    inv.getCurrentRow().setAttribute("FyId", fyId);
                }
            } else if (Mode.equalsIgnoreCase("V")) {
                _log.info("In case mode is validation");
            }
            return fyId;
        }
        return -1;
    }

    /**
     * Method used for populating the details for the selected RcptNo/Issue no.
     * @return 1:populated
     *        -2:document not selected
     *        -1:function returned error
     * */
    public Integer populateInvoice(String CldId, Integer SlocId, String OrgId, String rcptId, Integer UsrId) {
        Row invRw = this.getMmInvc().getCurrentRow();

        String invId = invRw.getAttribute("DocId").toString();
        Integer p_fy_id = (Integer) invRw.getAttribute("FyId");
        Integer ret = -1;


        if (invRw.getAttribute("TransSrcDocId") != null) {
            String rcptdocId = invRw.getAttribute("TransSrcDocId").toString();
            Number currcnv = new Number(1);
            if (invRw.getAttribute("CurrConvFctr") != null)
                currcnv = (Number) ((Number) invRw.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());
            _log.info(invId + " " + p_fy_id + " " + rcptdocId);

            Row[] rr = getLovRcpt().getFilteredRows("DocId", rcptdocId);
            if (rr.length > 0) {
                if (invRw.getAttribute("ExtDocNo") != null) {
                } else {
                    invRw.setAttribute("ExtDocNo", rr[0].getAttribute("InvoiceNoSrc"));
                }
                if (invRw.getAttribute("ExtDocDt") != null) {
                } else {
                    invRw.setAttribute("ExtDocDt", rr[0].getAttribute("InvoiceDtSrc"));
                }
            }


            ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.ins_inv_frm_rcpt (?,?,?,?,?,?,?,?)", new Object[] {
                                                CldId, SlocId, OrgId, rcptdocId, invId, p_fy_id, UsrId, currcnv
            }));

            Object impChk = callStoredFunction(Types.VARCHAR, "MM.MM_INV_FRM_PO_CHK (?,?,?,?)", new Object[] {
                                               CldId, SlocId, OrgId, rcptdocId
            });

            if (impChk != null) {
                invRw.setAttribute("ImportPur", impChk.toString());
            } else
                invRw.setAttribute("ImportPur", "N");

            if (ret != null) {
                if (ret == 1) {
                    // this.getDBTransaction().postChanges();
                    this.getMmInvcDtl().executeQuery();
                    this.getMmInvcSrc().executeQuery();
                    this.getMmInvcItm().executeQuery();
                    this.getMmInvcTr().executeQuery();
                    this.getMmInvcTrLines().executeQuery();
                    this.getMmInvcOc().executeQuery();
                    this.getMmInvcOc1().executeQuery();
                    //   this.getMmInvc().executeQuery();
                    this.populateCCForItems(invId);
                }
            }
        } else {
            return -2;
        }

        return ret;
    }

    public String populateSrvcInvoice() {
        Row invcr = this.getMmInvc().getCurrentRow();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        _log.info("servisable item value is " + invcr.getAttribute("DocId") + "doc Id po is " +
                  invcr.getAttribute("TransSrcDocId") + " ");
        if (invcr.getAttribute("TransSrcDocId") != null) {
            String docIdPo = invcr.getAttribute("TransSrcDocId").toString();
            Integer invcType = null;
            if (invcr.getAttribute("InvcType") != null)
                invcType = (Integer) invcr.getAttribute("InvcType");

            Number currcnv = new Number(1);
            if (invcr.getAttribute("CurrConvFctr") != null)
                currcnv = (Number) ((Number) invcr.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());

            // Integer ret=null;
            // if(invcType==737)
            Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_INV_DIRECT (?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        cldId.toString(), slocId, hoOrgId.toString(), orgId.toString(),
                                                        docIdPo, invcr.getAttribute("DocId").toString(),
                                                        Integer.parseInt(invcr.getAttribute("FyId").toString()), userId,
                                                        currcnv, "S"
            }));

            //   if(invcType==737)
            //   ret=(Integer)(callStoredFunction(Types.INTEGER, "MM.MM_INS_INV_DIRECT (?,?,?,?,?,?,?,?,?,?,?)", new Object[] {cldId.toString(),slocId,hoOrgId.toString(),orgId.toString(),docIdPo,invcr.getAttribute("DocId").toString(),Integer.parseInt(invcr.getAttribute("FyId").toString()),userId,currcnv,"S","P"}));

            if (ret != null) {
                if (ret == 1) {
                    this.getMmInvcDtl().executeQuery();
                    this.getMmInvcSrc().executeQuery();
                    this.getMmInvcItm().executeQuery();
                    this.getMmInvcTr().executeQuery();
                    this.getMmInvcTrLines().executeQuery();
                    this.getMmInvcOc().executeQuery();
                    this.getMmInvcOc1().executeQuery();
                    this.populateCCForItems(invcr.getAttribute("DocId").toString());
                }
            }
        }
        return null;
    }

    public String populateConsumabeInvoice() {
        Row invcr = this.getMmInvc().getCurrentRow();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        _log.info("servisable item value is " + invcr.getAttribute("DocId") + "doc Id po is " +
                  invcr.getAttribute("TransSrcDocId") + " ");
        if (invcr.getAttribute("TransSrcDocId") != null) {
            String docIdPo = invcr.getAttribute("TransSrcDocId").toString();
            Number currcnv = new Number(1);
            if (invcr.getAttribute("CurrConvFctr") != null)
                currcnv = (Number) ((Number) invcr.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());
            Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_INV_DIRECT (?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                        cldId.toString(), slocId, hoOrgId.toString(), orgId.toString(),
                                                        docIdPo, invcr.getAttribute("DocId").toString(),
                                                        Integer.parseInt(invcr.getAttribute("FyId").toString()), userId,
                                                        currcnv, "C"
            }));
            if (ret != null) {
                if (ret == 1) {
                    this.getMmInvcDtl().executeQuery();
                    this.getMmInvcSrc().executeQuery();
                    this.getMmInvcItm().executeQuery();
                    this.getMmInvcTr().executeQuery();
                    this.getMmInvcTrLines().executeQuery();
                    this.getMmInvcOc().executeQuery();
                    this.getMmInvcOc1().executeQuery();
                    this.populateCCForItems(invcr.getAttribute("DocId").toString());
                }
            }
        }
        return null;
    }

    public Integer populateInvoiceByIssue(String CldId, Integer SlocId, String OrgId, String rcptId, Integer UsrId) {
        /*
         System.out.println("CldId : "+CldId);
        System.out.println("SlocId : "+SlocId);
        System.out.println("OrgId : "+OrgId);
        System.out.println("rcptId : "+rcptId);
        System.out.println("UsrId : "+UsrId);
        */
        Row invRw = this.getMmInvc().getCurrentRow();
        Number CurrConvFctr = (Number) ((Number) invRw.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        ViewObjectImpl currVo = (ViewObjectImpl) this.getLovCurrency();
        currVo.setNamedWhereClauseParam("bindCldId", CldId);
        currVo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId.toString());
        currVo.setNamedWhereClauseParam("bindOrgId", OrgId);
        currVo.setNamedWhereClauseParam("bindCcId", invRw.getAttribute("TransCCId"));
        Number RevCurrConvFctr = new Number(1);

        Row rows[] = currVo.getFilteredRows("CcCurrIdTxn", invRw.getAttribute("CurrIdSp"));
        if (rows.length > 0) {
            RevCurrConvFctr = (Number) ((Number) rows[0].getAttribute("CcBuyRev")).round(getGlblCurrDigit());
        }

        String invId = invRw.getAttribute("DocId").toString();
        Integer p_fy_id = (Integer) invRw.getAttribute("FyId");
        Integer ret = -1;

        if (invRw.getAttribute("TransSrcDocId") != null) {
            String rcptdocId = invRw.getAttribute("TransSrcDocId").toString();

            _log.info(invId + " " + p_fy_id + " " + rcptdocId);

            ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_INV_FRM_ISSU(?,?,?,?,?,?,?,?)", new Object[] {
                                                CldId, SlocId, OrgId, rcptdocId, invId, p_fy_id, UsrId, RevCurrConvFctr
            }));
            if (ret != null) {
                if (ret == 1) {
                    this.getMmInvcDtl().executeQuery();
                    this.getMmInvcSrc().executeQuery();
                    this.getMmInvcItm().executeQuery();
                    this.getMmInvcTr().executeQuery();
                    this.getMmInvcTrLines().executeQuery();
                    this.getMmInvcOc().executeQuery();
                    this.getMmInvcOc1().executeQuery();
                    this.populateCCForItems(invId);
                }
            }
        } else {
            return -2;
        }

        return ret;
    }


    public Integer populateInvoiceByCashPurchase(String CldId, Integer SlocId, String OrgId, String rcptId,
                                                 Integer UsrId) {

        Row invRw = this.getMmInvc().getCurrentRow();
        String invId = invRw.getAttribute("DocId").toString();
        Integer p_fy_id = (Integer) invRw.getAttribute("FyId");
        Integer ret = -1;

        if (invRw.getAttribute("TransSrcDocId") != null) {
            String rcptdocId = invRw.getAttribute("TransSrcDocId").toString();


            Integer chk = checkReceiptInCPO();
            if (chk == -1) {
                return -3;
            }

            /*        ViewObjectImpl vo =this.getMMDTLCOAVW1();
            RowQualifier rq = new RowQualifier(vo);
            rq.setWhereClause("CldId = '"+CldId+"' AND SlocId = "+SlocId+" AND OrgId = '"+OrgId+"' AND RcptDocId = '"+rcptdocId+"'");
            Row rows[] = vo.getFilteredRows(rq);

            System.out.println("Rows : "+rows.length);

            if(rows != null && rows.length >0)
            {  invRw.setAttribute("CurrIdSp", rows[0].getAttribute("CurrIdSp"));
               invRw.setAttribute("CoaId",rows[0].getAttribute("CoaId"));
               invRw.setAttribute("CurrConvFctr",rows[0].getAttribute("CurrConvFctr"));
             }     */
            Number currcnv = new Number(1);
            if (invRw.getAttribute("CurrConvFctr") != null)
                currcnv = (Number) ((Number) invRw.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());
            _log.info(invId + " " + p_fy_id + " " + rcptdocId);
            ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_INV_FRM_CPO(?,?,?,?,?,?,?,?)", new Object[] {
                                                CldId, SlocId, OrgId, rcptdocId, invId, p_fy_id, UsrId, currcnv
            }));


            if (ret != null) {
                if (ret == 1) {
                    this.getMmInvcDtl().executeQuery();
                    this.getMmInvcSrc().executeQuery();
                    this.getMmInvcItm().executeQuery();
                    this.getMmInvcTr().executeQuery();
                    this.getMmInvcTrLines().executeQuery();
                    this.getMmInvcOc().executeQuery();
                    this.getMmInvcOc1().executeQuery();
                }
                this.populateCCForItems(invId);
            }
        } else {
            return -2;
        }

        return ret;
    }


    /**
     * Container's getter for LovRcpt.
     * @return LovRcpt
     */
    public ViewObjectImpl getLovRcpt() {
        return (ViewObjectImpl) findViewObject("LovRcpt");
    }

    /**
     * Container's getter for LovPoNo.
     * @return LovPoNo
     */
    public LovPoNoVOImpl getLovPoNo() {
        return (LovPoNoVOImpl) findViewObject("LovPoNo");
    }

    /**
     * Method to apply the selected tax rule for PO/ITEM
     * @param type : Specifies if Tax applied on PO or Item
     * */
    public void applyTaxRule(String cldId, Integer slocId, String orgId, Integer ruleId, Number taxableAmt,
                             String type) {

        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        if (type.equalsIgnoreCase("ALL")) {
            _log.info("---------------ALL part->>>>>>>>>>>>>>>>>>>>>>>");
            Row poRw = this.getMmInvcSrc().getCurrentRow();
            String p_doc_id = poRw.getAttribute("DocId").toString();
            String p_rcpt_doc_id = poRw.getAttribute("DocIdRcpt").toString();
            String p_doc_id_po = poRw.getAttribute("DocIdPo").toString();
            Integer p_schdl_no = (Integer) poRw.getAttribute("DlvSchdlNo");
            Number p_curr_fctr = (Number) ((Number) poRw.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());
            RowSetIterator rsi = this.getMmInvcItm().createRowSetIterator(null);
            ViewObjectImpl tr = this.getMmInvcTr1();
            //First Remove TaxRule if Any Tax Applied Before..
            while (rsi.hasNext()) {
                _log.info("---------------ALL part while ->>>>>>>>>>>>>>>>>>>>>>>" + rsi.getRowCount());
                Row rw = rsi.next();

                /**
             * code to check tax TaxExmptFlg flag for  item from app$itm$prf
             * */
                String taxExmtd = "N";
                String itmId = null;
                if (rw.getAttribute("ItmId") != null) {
                    itmId = rw.getAttribute("ItmId").toString();
                }
                ViewObjectImpl itmVo = this.getItem();
                itmVo.setNamedWhereClauseParam("bindCldId", cldId);
                itmVo.setNamedWhereClauseParam("bindSlocId", slocId);
                itmVo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
                itmVo.setNamedWhereClauseParam("bindItmId", itmId);
                itmVo.executeQuery();
                Row[] rr1itm = itmVo.getFilteredRows("ItmId", itmId);

                if (rr1itm.length > 0) {
                    taxExmtd = rr1itm[0].getAttribute("TaxExmptFlg").toString();
                }
                //code completed to get exempted flag over here
                if ("Y".equalsIgnoreCase(taxExmtd)) {
                    _log.info("this item does't have tax rule exempted -------------- " + itmId);
                } else {
                    //  taxableAmt=(Number)rw.getAttribute("TransTaxableAmt");
                    _log.info("---------------ALL part taxExmted N->>>>>>>>>>>>>>>>>>>>>>>");
                    taxableAmt = (Number) rw.getAttribute("TaxableAmtSp");
                    Number taxableAmtOrg = new Number(0);
                    if (rw.getAttribute("TaxableAmtSpOrig") != null)
                        taxableAmtOrg = (Number) rw.getAttribute("TaxableAmtSpOrig");
                    _log.info("Taxable amt--" + taxableAmt + " taxabble amt org is " + taxableAmtOrg + " docidRcpt  " +
                              p_rcpt_doc_id + "  doc_id_po " + p_doc_id_po + " doc Id is " + p_doc_id + " Itm Id= " +
                              rw.getAttribute("ItmId").toString() + " dlv sc " + p_schdl_no);
                    String exemptFlg = "N";
                    _log.info("-----------after rowq--0---------->>>>>>>>>>>> ");
                    RowQualifier rowq = new RowQualifier(this.getMmInvcTr1());
                    _log.info("-----------after rowq----1-------->>>>>>>>>>>> ");
                    rowq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + "  and OrgId='" + orgId +
                                        "' and DocId='" + p_doc_id + "' and DocIdRcpt='" + p_rcpt_doc_id +
                                        "' and DocIdPo='" + p_doc_id_po + "' and DlvSchdlNo=" + p_schdl_no +
                                        " and ItmId='" + rw.getAttribute("ItmId").toString() + "' and ItmUom='" +
                                        rw.getAttribute("ItmUom").toString() + "'");
                    _log.info("-----------after rowq---2--------->>>>>>>>>>>> " + rowq.getExprStr());
                    Row[] r = this.getMmInvcTr1().getFilteredRows(rowq);
                    _log.info("mm invc tr is --------------- " + r.length + "   " + rowq.getExprStr());
                    if (r.length > 0) {

                        if (r[0].getAttribute("TaxExmptFlg") != null) {
                            exemptFlg = r[0].getAttribute("TaxExmptFlg").toString();
                        }


                        _log.info("Tax Rule Flg : " + r[0].getAttribute("TaxRuleFlg"));
                        //      if (r[0].getAttribute("TaxRuleFlg").toString().equalsIgnoreCase("P")) {
                        if (r[0].getAttribute("TaxRuleFlg").toString().equalsIgnoreCase("I")) {

                            /*   RowQualifier rowqtr1=new RowQualifier(this.getMmInvcTrLines1());
                        rowqtr1.setWhereClause("CldId='"+cldId+"' and SlocId="+slocId+"  and OrgId='"+orgId+"' and DocId='"+p_doc_id+"' and DocIdRcpt='"+p_rcpt_doc_id+"' and DocIdPo='"+p_doc_id_po+"' and DlvSchdlNo="+p_schdl_no+" and ItmId='"+rw.getAttribute("ItmId").toString()+"' and ItmUom='"+rw.getAttribute("ItmUom").toString()+"' and TaxRuleId="+ Integer.parseInt(r[0].getAttribute("TaxRuleId").toString())+" ");
                        Row[] trLnRows1=this.getMmInvcTrLines1().getFilteredRows(rowqtr1);
                        _log.info(" 111rows foung in trlines "+trLnRows1.length+" expression is "+rowqtr1.getExprStr()); */
                            RowQualifier rowqtr =
                                new RowQualifier(this.getMmInvcTrLines3()); //AND TaxRuleFlg = 'P' //at last we need to add this
                            rowqtr.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + "  and OrgId='" +
                                                  orgId + "' and DocId='" + p_doc_id + "' and DocIdRcpt='" +
                                                  p_rcpt_doc_id + "' and DocIdPo='" + p_doc_id_po +
                                                  "' and DlvSchdlNo=" + p_schdl_no + " and ItmId='" +
                                                  rw.getAttribute("ItmId").toString() + "' and ItmUom='" +
                                                  rw.getAttribute("ItmUom").toString() + "' and TaxRuleId= " +
                                                  r[0].getAttribute("TaxRuleId").toString() + " ");
                            Row[] trLnRows = this.getMmInvcTrLines3().getFilteredRows(rowqtr);

                            //  Row[] trLnRows=getMmInvcTrLines3().getFilteredRows("DocId", p_doc_id);
                            _log.info(" rows found in trlines " + trLnRows.length + " expression is ");
                            for (Row lrow : trLnRows) {
                                _log.info(" delete tr lines ----::::::: ");
                                lrow.remove();
                            }
                            //   this.getMmInvcTrLines3().executeQuery();
                            r[0].remove();
                            this.getMmInvcTrLines3().executeQuery();
                            tr.executeQuery(); // for testing commented

                            // Applied  New Tax Rule on Complete PO.
                            Row trRw = tr.createRow();
                            trRw.setAttribute("CldId", cldId);
                            trRw.setAttribute("SlocId", slocId);
                            trRw.setAttribute("OrgId", orgId);
                            trRw.setAttribute("DocId", p_doc_id);
                            trRw.setAttribute("DocIdRcpt", p_rcpt_doc_id);
                            trRw.setAttribute("DocIdPo", p_doc_id_po);
                            trRw.setAttribute("DlvSchdlNo", p_schdl_no);
                            trRw.setAttribute("ItmId", rw.getAttribute("ItmId").toString());
                            trRw.setAttribute("ItmUom", rw.getAttribute("ItmUom").toString());
                            trRw.setAttribute("TaxRuleId", ruleId);
                            trRw.setAttribute("TaxableAmtSp", taxableAmt);
                            if (taxableAmt.compareTo(new Number(0)) == 1) {
                                Number multiply = p_curr_fctr.multiply(taxableAmt);
                                trRw.setAttribute("TaxableAmtBs", multiply);
                            }
                            //  trRw.setAttribute("TaxRuleFlg", "P");
                            trRw.setAttribute("TaxRuleFlg", "I");
                            tr.insertRow(trRw);
                            this.getDBTransaction().postChanges();
                            BigDecimal ret =
                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                "MM.ins_inv_tr_lines(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                slocId, cldId, hoOrgId.toString(), orgId, p_doc_id,
                                                                p_rcpt_doc_id, p_doc_id_po, p_schdl_no,
                                                                rw.getAttribute("ItmId").toString(),
                                                                rw.getAttribute("ItmUom").toString(), ruleId,
                                                                taxableAmtOrg, taxableAmt, "I", p_curr_fctr, "N", "N"
                            }); //changed P to I

                            BigDecimal retrnbl =
                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                "MM.MM_GET_REC_TAX_INVC(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                cldId, slocId, hoOrgId.toString(), orgId, p_doc_id,
                                                                p_doc_id_po, p_rcpt_doc_id, p_schdl_no,
                                                                rw.getAttribute("ItmId").toString(),
                                                                rw.getAttribute("ItmUom").toString(), "N"
                            });
                            Number n = new Number(0);
                            Number n1 = new Number(0);

                            this.getDBTransaction().postChanges();
                            try {
                                n = new Number(ret);
                                n1 = new Number(retrnbl);

                            } catch (SQLException e) {
                            }
                            /**TAX AMT AND RECOVERABLE */
                            rw.setAttribute("TotTaxAmtSp", ret);
                            rw.setAttribute("TotTaxAmtBs", (Number) n.multiply(p_curr_fctr).round(getAmtRoundOff()));
                            rw.setAttribute("RecTaxAmtSp", retrnbl);
                            rw.setAttribute("RecTaxAmtBs", (Number) n1.multiply(p_curr_fctr).round(getAmtRoundOff()));

                            tr.getCurrentRow().setAttribute("TaxAmt", ret);

                            _log.info("ret------------------------->" + ret);

                        } else {
                            _log.info("tax rule flg id not found not workin in i case");
                        }
                        this.getDBTransaction().postChanges(); // because of not iterating second item
                        tr.executeQuery(); //for testing commented
                    }

                    else //To Apply Tax on all Items(Not Item Wise Tax)
                    {
                        _log.info("new data :::::::   ");
                        Row trRw = tr.createRow();
                        trRw.setAttribute("CldId", cldId);
                        trRw.setAttribute("SlocId", slocId);
                        trRw.setAttribute("OrgId", orgId);
                        trRw.setAttribute("DocId", p_doc_id);
                        trRw.setAttribute("DocIdRcpt", p_rcpt_doc_id);
                        trRw.setAttribute("DocIdPo", p_doc_id_po);
                        trRw.setAttribute("DlvSchdlNo", p_schdl_no);
                        trRw.setAttribute("ItmId", rw.getAttribute("ItmId").toString());
                        trRw.setAttribute("ItmUom", rw.getAttribute("ItmUom").toString());
                        trRw.setAttribute("TaxRuleId", ruleId);
                        trRw.setAttribute("TaxableAmtSp", taxableAmt);
                        if (taxableAmt.compareTo(new Number(0)) == 1) {
                            Number multiply = p_curr_fctr.multiply(taxableAmt);
                            trRw.setAttribute("TaxableAmtBs", multiply);
                        }
                        trRw.setAttribute("TaxRuleFlg", "P");
                        tr.insertRow(trRw);
                        BigDecimal ret =
                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                            "MM.ins_inv_tr_lines(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            slocId, cldId, hoOrgId.toString(), orgId, p_doc_id,
                                                            p_rcpt_doc_id, p_doc_id_po, p_schdl_no,
                                                            rw.getAttribute("ItmId").toString(),
                                                            rw.getAttribute("ItmUom").toString(), ruleId, taxableAmtOrg,
                                                            taxableAmt, "P", p_curr_fctr, "N", "N"
                        });
                        BigDecimal retrnbl =
                            (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                            "MM.MM_GET_REC_TAX_INVC(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                            cldId, slocId, hoOrgId.toString(), orgId, p_doc_id,
                                                            p_doc_id_po, p_rcpt_doc_id, p_schdl_no,
                                                            rw.getAttribute("ItmId").toString(),
                                                            rw.getAttribute("ItmUom").toString(), "N"
                        });
                        Number n = new Number(0);
                        Number n1 = new Number(0);

                        this.getDBTransaction().postChanges();
                        try {
                            n = new Number(ret);
                            n1 = new Number(retrnbl);

                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
                        /**TAX AMT AND RECOVERABLE */
                        rw.setAttribute("TotTaxAmtSp", ret);
                        rw.setAttribute("TotTaxAmtBs", (Number) n.multiply(p_curr_fctr).round(getAmtRoundOff()));
                        rw.setAttribute("RecTaxAmtSp", retrnbl);
                        rw.setAttribute("RecTaxAmtBs", (Number) n1.multiply(p_curr_fctr).round(getAmtRoundOff()));
                        _log.info("---------else part last------------------ " + ret);
                        //this.getDBTransaction().postChanges();
                        tr.getCurrentRow().setAttribute("TaxAmt", ret);
                        tr.executeQuery();
                    }
                    // tr.executeQuery();
                }
            }
            rsi.closeRowSetIterator(); //need to add curly braces over here
            this.getMmInvcTrLines().executeQuery();
            tr.executeQuery();
        }

        //Item Wise Tax Rule Applied
        else if (type.equalsIgnoreCase("I")) {
            Row itmRw = this.getMmInvcItm().getCurrentRow();
            String p_doc_id = itmRw.getAttribute("DocId").toString();
            String p_rcpt_doc_id = itmRw.getAttribute("DocIdRcpt").toString();
            String p_doc_id_po = itmRw.getAttribute("DocIdPo").toString();
            Integer p_schdl_no = (Integer) itmRw.getAttribute("DlvSchdlNo");
            String p_itm_id = itmRw.getAttribute("ItmId").toString();
            String p_itm_uom = itmRw.getAttribute("ItmUom").toString();
            Number p_curr_fctr = (Number) ((Number) itmRw.getAttribute("TransCurrConvFctr")).round(getGlblCurrDigit());
            // taxableAmt=(Number)itmRw.getAttribute("TranTaxItmAmt");
            taxableAmt = (Number) itmRw.getAttribute("TaxableAmtSp");
            Number taxableAmtOrg = new Number(0);
            if (itmRw.getAttribute("TaxableAmtSpOrig") != null)
                taxableAmtOrg = (Number) itmRw.getAttribute("TaxableAmtSpOrig");

            Row trRw = this.getMmInvcTr().getCurrentRow();


            System.out.println("Tax Rule Id : " + trRw.getAttribute("TaxRuleId"));
            Row countRw[] = this.getMmInvcTrLines().getFilteredRows("TaxRuleId", trRw.getAttribute("TaxRuleId"));
            System.out.println("No of Rows : " + countRw.length);
            //    System.out.println("BEFORE COUNT : "+this.getMmInvcTrLines().getEstimatedRowCount());

            //Remove if any tax rule line exist.


            if (countRw.length > 0) {
                RowSetIterator rsi = this.getMmInvcTrLines().createRowSetIterator(null);
                while (rsi.hasNext()) {
                    rsi.next().remove();
                }
                rsi.closeRowSetIterator();


                this.getMmInvcTrLines().executeQuery();
                //  Long count=this.getMmInvcTrLines().getEstimatedRowCount();
                // System.out.println("AFTER COUNT : "+count);
                Row Rw[] = this.getMmInvcTrLines().getFilteredRows("TaxRuleId", trRw.getAttribute("TaxRuleId"));
                System.out.println("No of Rows After : " + Rw.length);
            }

            trRw.setAttribute("TaxRuleId", ruleId);
            trRw.setAttribute("TaxRuleFlg", type);

            /*   _log.info("slocId : " + slocId);
            _log.info("cldId : " + cldId);
            _log.info("orgId : " + orgId);
            _log.info("p_doc_id : " + p_doc_id);
            _log.info("Flag : " + trRw.getAttribute("TaxExmptFlg"));
            _log.info("p_itm_id : " + p_itm_id);
            _log.info("p_itm_uom : " + p_itm_uom);
            _log.info("ruleId : " + ruleId);
            _log.info("p_rcpt_doc_id : " + p_rcpt_doc_id);
            _log.info("p_schdl_no : " + p_schdl_no);
            _log.info("taxableAmt : " + taxableAmt);
            _log.info("p_doc_id_po : " + p_doc_id_po);
            _log.info("currency conv factor "+p_curr_fctr);
           */
            this.getDBTransaction().postChanges();
            BigDecimal ret =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.ins_inv_tr_lines(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                slocId, cldId, hoOrgId.toString(), orgId, p_doc_id, p_rcpt_doc_id,
                                                p_doc_id_po, p_schdl_no, p_itm_id, p_itm_uom, ruleId, taxableAmtOrg,
                                                taxableAmt, "I", p_curr_fctr, "N", "N"
            });
            _log.info("Tax val:" + ret);
            BigDecimal retrnbl =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_GET_REC_TAX_INVC(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                cldId, slocId, hoOrgId.toString(), orgId, p_doc_id, p_doc_id_po,
                                                p_rcpt_doc_id, p_schdl_no, p_itm_id, p_itm_uom, "N"
            });
            Number n = new Number(0);
            Number n1 = new Number(0);

            // this.getDBTransaction().postChanges();
            try {
                n = new Number(ret);
                n1 = new Number(retrnbl);

            } catch (SQLException e) {
            }
            /**TAX AMT AND RECOVERABLE */
            itmRw.setAttribute("TotTaxAmtSp", ret);
            itmRw.setAttribute("TotTaxAmtBs", (Number) n.multiply(p_curr_fctr).round(getAmtRoundOff()));
            itmRw.setAttribute("RecTaxAmtSp", retrnbl);
            itmRw.setAttribute("RecTaxAmtBs", (Number) n1.multiply(p_curr_fctr).round(getAmtRoundOff()));

            this.getMmInvcTr().getCurrentRow().setAttribute("TaxAmt", ret);
            this.getDBTransaction().postChanges();
            /**code commented because of another user has changed the primary key - 04-02-2015*/
            this.getMmInvcTrLines().executeQuery();
            /* this.getMmInvcTrLines1().executeQuery();
            this.getMmInvcTrLines2().executeQuery(); */

            // System.out.println(this.getMmInvcTrLines().getEstimatedRowCount() + " : No of Rows in Lines");
        } else if (type.equalsIgnoreCase("A")) {
            Row itmRw = this.getMmInvcItm().getCurrentRow();
            String p_doc_id = itmRw.getAttribute("DocId").toString();
            String p_rcpt_doc_id = itmRw.getAttribute("DocIdRcpt").toString();
            String p_doc_id_po = itmRw.getAttribute("DocIdPo").toString();
            Integer p_schdl_no = (Integer) itmRw.getAttribute("DlvSchdlNo");
            String p_itm_id = itmRw.getAttribute("ItmId").toString();
            String p_itm_uom = itmRw.getAttribute("ItmUom").toString();
            Number p_curr_fctr = (Number) ((Number) itmRw.getAttribute("TransCurrConvFctr")).round(getGlblCurrDigit());
            // taxableAmt=(Number)itmRw.getAttribute("TranTaxItmAmt");
            taxableAmt = (Number) itmRw.getAttribute("TaxableAmtSp");
            //
            Number taxableAmtOrg = new Number(0);
            if (itmRw.getAttribute("TaxableAmtSpOrig") != null)
                taxableAmtOrg = (Number) itmRw.getAttribute("TaxableAmtSpOrig");
            Row trRw = this.getMmInvcTr().getCurrentRow();


            System.out.println("Tax Rule Id : " + trRw.getAttribute("TaxRuleId"));
            Row countRw[] = this.getMmInvcTrLines().getFilteredRows("TaxRuleId", trRw.getAttribute("TaxRuleId"));
            System.out.println("No of Rows : " + countRw.length);
            //    System.out.println("BEFORE COUNT : "+this.getMmInvcTrLines().getEstimatedRowCount());

            //Remove if any tax rule line exist.


            if (countRw.length > 0) {
                RowSetIterator rsi = this.getMmInvcTrLines().createRowSetIterator(null);
                while (rsi.hasNext()) {
                    rsi.next().remove();
                }
                rsi.closeRowSetIterator();


                this.getMmInvcTrLines().executeQuery();
                //  Long count=this.getMmInvcTrLines().getEstimatedRowCount();
                // System.out.println("AFTER COUNT : "+count);
                Row Rw[] = this.getMmInvcTrLines().getFilteredRows("TaxRuleId", trRw.getAttribute("TaxRuleId"));
                System.out.println("No of Rows After : " + Rw.length);
            }
            ruleId = (Integer) trRw.getAttribute("TaxRuleId");
            // trRw.setAttribute("TaxRuleId", trRw.getAttribute("TaxRuleId"));
            trRw.setAttribute("TaxRuleFlg", "I");
            _log.info("TAamt is           " + taxableAmt);
            this.getDBTransaction().postChanges();
            BigDecimal ret =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.ins_inv_tr_lines(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                slocId, cldId, hoOrgId.toString(), orgId, p_doc_id, p_rcpt_doc_id,
                                                p_doc_id_po, p_schdl_no, p_itm_id, p_itm_uom, ruleId, taxableAmtOrg,
                                                taxableAmt, "I", p_curr_fctr, "N", "N"
            });
            _log.info("Tax val:" + ret);
            BigDecimal retrnbl =
                (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_GET_REC_TAX_INVC(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                cldId, slocId, hoOrgId.toString(), orgId, p_doc_id, p_doc_id_po,
                                                p_rcpt_doc_id, p_schdl_no, p_itm_id, p_itm_uom, "N"
            });
            Number n = new Number(0);
            Number n1 = new Number(0);

            this.getDBTransaction().postChanges();
            try {
                n = new Number(ret);
                n1 = new Number(retrnbl);

            } catch (SQLException e) {
            }
            /**TAX AMT AND RECOVERABLE */
            itmRw.setAttribute("TotTaxAmtSp", ret);
            itmRw.setAttribute("TotTaxAmtBs", (Number) n.multiply(p_curr_fctr).round(getAmtRoundOff()));
            itmRw.setAttribute("RecTaxAmtSp", retrnbl);
            itmRw.setAttribute("RecTaxAmtBs", (Number) n1.multiply(p_curr_fctr).round(getAmtRoundOff()));

            this.getDBTransaction().postChanges();
            this.getMmInvcTr().getCurrentRow().setAttribute("TaxAmt", ret);
            this.getMmInvcTrLines().executeQuery();
            this.getMmInvcTrLines1().executeQuery();
            this.getMmInvcTrLines2().executeQuery();

            // System.out.println(this.getMmInvcTrLines().getEstimatedRowCount() + " : No of Rows in Lines");

        }
    }


    public Integer getTrRuleId() {
        //   StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Row r = this.getMmInvcItm().getCurrentRow();
        Row rows[] = this.getMmInvcTr().getFilteredRows("ItmId", r.getAttribute("ItmId"));
        Integer str = 0;
        if (rows.length > 0) {
            str = (Integer) rows[0].getAttribute("TaxRuleId");
            if (r.getAttribute("TaxableAmtSp") != null)
                rows[0].setAttribute("TaxableAmtSp", (Number) r.getAttribute("TaxableAmtSp"));
        }
        return str;
    }


    public Integer getTdsRuleId() {
        /// StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        Row r = this.getMmInvcItm().getCurrentRow();
        Row rows[] = this.getMmInvcTds().getFilteredRows("ItmId", r.getAttribute("ItmId"));
        Integer str = 0;
        if (rows.length > 0) {
            str = (Integer) rows[0].getAttribute("TdsRuleId");
        }
        System.out.println("tds rule id is :" + str);
        return str;
    }


    /**
     * Method to apply the selected tds rule for PO/ITEM
     * @param type : Specifies if Tds applied on PO or Item
     * */
    public void applyTdsRule(String cldId, Integer slocId, String orgId, Integer ruleId, Number taxableAmt,
                             String type) {

        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        //If TDS Applied on entire PO.
        if (type.equalsIgnoreCase("ALL")) {
            Row poRw = this.getMmInvcSrc().getCurrentRow();
            String p_doc_id = poRw.getAttribute("DocId").toString();
            String p_rcpt_doc_id = poRw.getAttribute("DocIdRcpt").toString();
            String p_doc_id_po = poRw.getAttribute("DocIdPo").toString();
            Integer p_schdl_no = (Integer) poRw.getAttribute("DlvSchdlNo");
            Number p_curr_fctr = (Number) ((Number) poRw.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());

            //System.out.println("-COunt-"+this.getMmInvcItm().getRowCount());

            RowSetIterator rsi = this.getMmInvcItm().createRowSetIterator(null);
            ViewObjectImpl tr = this.getMmInvcTds1();

            //Remove all Tds Rule Applied Before
            while (rsi.hasNext()) {
                Row rw = rsi.next();

                taxableAmt = (Number) rw.getAttribute("TransTdsOnAmt");
                _log.info("Taxable amt--" + taxableAmt);
                String exemptFlg = "N";

                RowQualifier rowq = new RowQualifier(this.getMmInvcTds1());
                rowq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + "  and OrgId='" + orgId +
                                    "' and DocId='" + p_doc_id + "' and DocIdRcpt='" + p_rcpt_doc_id +
                                    "' and DocIdPo='" + p_doc_id_po + "' and DlvSchdlNo=" + p_schdl_no +
                                    " and ItmId='" + rw.getAttribute("ItmId").toString() + "' and ItmUom='" +
                                    rw.getAttribute("ItmUom").toString() + "'");
                Row[] r = tr.getFilteredRows(rowq);
                exemptFlg = "N";
                if (r.length > 0) {
                    if (r[0].getAttribute("TaxExmptFlg") != null) {
                        exemptFlg = r[0].getAttribute("TaxExmptFlg").toString();
                    }

                    RowQualifier rowqtr = new RowQualifier(this.getMmInvcTdsLines1());
                    rowq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + "  and OrgId='" + orgId +
                                        "' and DocId='" + p_doc_id + "' and DocIdRcpt='" + p_rcpt_doc_id +
                                        "' and DocIdPo='" + p_doc_id_po + "' and DlvSchdlNo=" + p_schdl_no +
                                        " and ItmId='" + rw.getAttribute("ItmId").toString() + "' and ItmUom='" +
                                        rw.getAttribute("ItmUom").toString() + "' and TdsRuleId='" +
                                        rw.getAttribute("TdsRuleId").toString() + "'");
                    Row[] trLnRows = this.getMmInvcTdsLines1().getFilteredRows(rowqtr);

                    for (Row lrow : trLnRows) {
                        lrow.remove();
                    }
                    this.getMmInvcTdsLines1().executeQuery();
                    r[0].remove();
                }
                tr.executeQuery();


                // Applied New Tds on Item.
                Row trRw = tr.createRow();
                trRw.setAttribute("CldId", cldId);
                trRw.setAttribute("SlocId", slocId);
                trRw.setAttribute("OrgId", orgId);
                trRw.setAttribute("DocId", p_doc_id);
                trRw.setAttribute("DocIdRcpt", p_rcpt_doc_id);
                trRw.setAttribute("DocIdPo", p_doc_id_po);
                trRw.setAttribute("DlvSchdlNo", p_schdl_no);
                trRw.setAttribute("ItmId", rw.getAttribute("ItmId").toString());
                trRw.setAttribute("ItmUom", rw.getAttribute("ItmUom").toString());
                trRw.setAttribute("TdsRuleId", ruleId);
                trRw.setAttribute("TdsOnAmtSp", taxableAmt);
                // trRw.setAttribute("TdsOnAmtSp", taxableAmt);

                if (taxableAmt.compareTo(new Number(0)) == 1) {
                    Number multiply = p_curr_fctr.multiply(taxableAmt);
                    trRw.setAttribute("TdsOnAmtBs", multiply);
                }
                trRw.setAttribute("TdsRuleFlg", "P");
                tr.insertRow(trRw);
                //   this.getMmInvcTr().executeQuery();


                BigDecimal ret =
                    (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                    "MM.INS_INV_TDS_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    slocId, cldId, hoOrgId.toString(), orgId, p_doc_id, p_rcpt_doc_id,
                                                    p_doc_id_po, p_schdl_no, rw.getAttribute("ItmId").toString(),
                                                    rw.getAttribute("ItmUom").toString(), ruleId, taxableAmt, "P",
                                                    p_curr_fctr, "N", taxableAmt, "N"
                });
                tr.getCurrentRow().setAttribute("TaxAmt", ret);
                //  System.out.println("ret-->"+ret);

            }
            rsi.closeRowSetIterator();
            this.getMmInvcTdsLines().executeQuery();
            tr.executeQuery();

        }

        //Applied Tds ITem Wise
        else if (type.equalsIgnoreCase("I")) {
            Row itmRw = this.getMmInvcItm().getCurrentRow();
            String p_doc_id = itmRw.getAttribute("DocId").toString();
            String p_rcpt_doc_id = itmRw.getAttribute("DocIdRcpt").toString();
            String p_doc_id_po = itmRw.getAttribute("DocIdPo").toString();
            Integer p_schdl_no = (Integer) itmRw.getAttribute("DlvSchdlNo");
            String p_itm_id = itmRw.getAttribute("ItmId").toString();
            String p_itm_uom = itmRw.getAttribute("ItmUom").toString();
            Number p_curr_fctr = (Number) ((Number) itmRw.getAttribute("TransCurrConvFctr")).round(getGlblCurrDigit());
            taxableAmt = (Number) itmRw.getAttribute("TransTaxableAmt");
            //taxableAmt=(Number)itmRw.getAttribute("TaxableAmtSp");
            //_log.info("taxable amount value is "+taxableAmt);
            Row trRw = this.getMmInvcTds().getCurrentRow();
            trRw.setAttribute("TdsRuleId", ruleId);
            _log.info("rule id is " + ruleId);
            if (ruleId !=
                null) {
                //this.postChng();
                BigDecimal ret =
          (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.INS_INV_TDS_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                          slocId, cldId, hoOrgId.toString(), orgId, p_doc_id, p_rcpt_doc_id,
                                          p_doc_id_po, p_schdl_no, p_itm_id, p_itm_uom, ruleId, taxableAmt, "I",
                                          p_curr_fctr, trRw.getAttribute("TdsExmptFlg").toString(), taxableAmt, "N"
                });
                _log.info("Tds val:" + ret);
                this.getMmInvcTds().getCurrentRow().setAttribute("TdsAmt", ret);
                this.getMmInvcTdsLines().executeQuery();
            }
        }
    }


    public String checkTaxPresent() {
        //    Row itmRw=this.getMmInvcItm().getCurrentRow();
        Integer count = ((Long) this.getMmInvcTr().getEstimatedRowCount()).intValue();
        _log.info("Est rw count tax:" + count);
        if (count > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    public String isTaxApplicable() {
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        Row curr = this.getMmInvcItm().getCurrentRow();
        String flag = null;
        if (curr.getAttribute("ItmId") != null) {
            ViewObjectImpl itemvo = this.getItem();
            itemvo.setNamedWhereClauseParam("bindCldId", cldId);
            itemvo.setNamedWhereClauseParam("bindSlocId", slocId);
            itemvo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
            itemvo.setNamedWhereClauseParam("bindItmId", curr.getAttribute("ItmId"));
            itemvo.executeQuery();
            Row[] rr1 = itemvo.getFilteredRows("ItmId", curr.getAttribute("ItmId"));
            if (rr1.length > 0) {
                flag = rr1[0].getAttribute("TaxExmptFlg").toString();
            }
            // _log.info("tax exmptd flag is "+flag);
        }

        return flag;
    }

    public String checkTdsPresent() {
        Row itmRw = this.getMmInvcItm().getCurrentRow();
        //Integer count = ((Long) this.getMmInvcTds().getEstimatedRowCount()).intValue();
        Row[] rr = this.getMmInvcTds().getFilteredRows("ItmId", itmRw.getAttribute("ItmId"));
        //  Integer count=rr.length;
        _log.info("Est rw count tax:" + rr.length);
        if (rr.length > 0) {
            return "Y";
        } else {
            return "N";
        }
    }

    /**
     * Container's getter for MmInvcTr1.
     * @return MmInvcTr1
     */
    public ViewObjectImpl getMmInvcTr1() {
        return (ViewObjectImpl) findViewObject("MmInvcTr1");
    }

    public Key ocCurrentRowKey() {
        Row curr = this.getMmInvcOc().getCurrentRow();
        if (curr != null) {
            return curr.getKey();
        } else {
            return null;
        }

    }

    /**
     * Container's getter for LovCurrency.
     * @return LovCurrency
     */
    public ViewObjectImpl getLovCurrency() {
        return (ViewObjectImpl) findViewObject("LovCurrency");
    }

    /**
     * Container's getter for MmInvcTrLines1.
     * @return MmInvcTrLines1
     */
    public ViewObjectImpl getMmInvcTrLines1() {
        return (ViewObjectImpl) findViewObject("MmInvcTrLines1");
    }

    /**
     * Container's getter for FkMmInvcTrLinesVL2.
     * @return FkMmInvcTrLinesVL2
     */
    public ViewLinkImpl getFkMmInvcTrLinesVL2() {
        return (ViewLinkImpl) findViewLink("FkMmInvcTrLinesVL2");
    }

    public void setTrExempted(String Flg) {
        // System.out.println("flg="+Flg);
        if ("Y".equals(Flg)) {
            Row currRw = this.getMmInvcTr().getCurrentRow();
            currRw.setAttribute("TaxAmt", new Number(0));
        } else {
            RowSetIterator rsi = this.getMmInvcTrLines().createRowSetIterator(null);
            Number sum = new Number(0);
            while (rsi.hasNext()) {
                Row rsiRw = rsi.next();
                sum = sum.add((Number) rsiRw.getAttribute("TaxAmtSp"));
            }
            rsi.closeRowSetIterator();
            Row currRw = this.getMmInvcTr().getCurrentRow();
            currRw.setAttribute("TaxAmt", sum);
        }
    }

    /**
     * Container's getter for MmInvcTds.
     * @return MmInvcTds
     */
    public ViewObjectImpl getMmInvcTds() {
        return (ViewObjectImpl) findViewObject("MmInvcTds");
    }

    /**
     * Container's getter for FkMmInvcTdsVL1.
     * @return FkMmInvcTdsVL1
     */
    public ViewLinkImpl getFkMmInvcTdsVL1() {
        return (ViewLinkImpl) findViewLink("FkMmInvcTdsVL1");
    }

    /**
     * Container's getter for MmInvcTdsLines.
     * @return MmInvcTdsLines
     */
    public ViewObjectImpl getMmInvcTdsLines() {
        return (ViewObjectImpl) findViewObject("MmInvcTdsLines");
    }

    /**
     * Container's getter for FkMmInvcTdsLinesVL1.
     * @return FkMmInvcTdsLinesVL1
     */
    public ViewLinkImpl getFkMmInvcTdsLinesVL1() {
        return (ViewLinkImpl) findViewLink("FkMmInvcTdsLinesVL1");
    }

    /**
     * Container's getter for MmInvcTds1.
     * @return MmInvcTds1
     */
    public ViewObjectImpl getMmInvcTds1() {
        return (ViewObjectImpl) findViewObject("MmInvcTds1");
    }

    /**
     * Container's getter for MmInvcTdsLines1.
     * @return MmInvcTdsLines1
     */
    public ViewObjectImpl getMmInvcTdsLines1() {
        return (ViewObjectImpl) findViewObject("MmInvcTdsLines1");
    }

    /**
     * Container's getter for FkMmInvcTdsLinesVL2.
     * @return FkMmInvcTdsLinesVL2
     */
    public ViewLinkImpl getFkMmInvcTdsLinesVL2() {
        return (ViewLinkImpl) findViewLink("FkMmInvcTdsLinesVL2");
    }


    /**
     * Container's getter for MmInvcCalc.
     * @return MmInvcCalc
     */
    public ViewObjectImpl getMmInvcCalc() {
        return (ViewObjectImpl) findViewObject("MmInvcCalc");
    }

    /**
     * Container's getter for FkMMInvcCalcVL1.
     * @return FkMMInvcCalcVL1
     */
    public ViewLinkImpl getFkMMInvcCalcVL1() {
        return (ViewLinkImpl) findViewLink("FkMMInvcCalcVL1");
    }

    /**
     * Method used to populate the invoice calculations
     * */
    public String populateCalculations(String p_cld_id, Integer p_sloc_id, String p_org_id, Integer p_usr_id) {
        Row rw = this.getMmInvc().getCurrentRow();
        String p_doc_id = rw.getAttribute("DocId").toString();
        Integer type = (Integer) rw.getAttribute("InvcType");
        String paramHoOrdId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer ret = 0;
        try {
            String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
            //String EoIdSrc=rw.getAttribute("EoIdSrc").toString();
            //Integer p_curr_id_sp=Integer.parseInt(rw.getAttribute("CurrIdSp").toString());
            //Number p_conv_rate=(Number)rw.getAttribute("CurrConvFctr");
            //Integer p_curr_id_bs=getDefualtOrgCurr(p_cld_id,p_org_id);
            //System.out.println("-----------Process 1");
            Number cc = new Number(0);
            Object ccObj = rw.getAttribute("CurrConvFctr");
            if (ccObj != null) {
                cc = (Number) ((Number) ccObj).round(getGlblCurrDigit());
            }
            this.getDBTransaction().postChanges();
            //    System.out.println("-----------Process 2");
            ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INS_INVC_CALC(?,?,?,?,?,?)", new Object[] {
                                                p_sloc_id, p_cld_id, paramHoOrdId, p_org_id, p_doc_id, type
            }));
            Integer mmLndUpdate =
                (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_INVC_LND_COST(?,?,?,?,?,?,?)", new Object[] {
                                              p_cld_id, p_sloc_id, HoOrgId, p_org_id, rw.getAttribute("DocId"), 18521, cc









































            }));

            //this.getDBTransaction().postChanges();
            //code to insert data in cost center
            try {
                this.sendDateFromTempCcToMmInvcCc();
            } catch (Exception e) {
                e.printStackTrace();
            }
            //   System.out.println("-----------Process 3");
            this.getMmInvcCalc().executeQuery();
            //System.out.println("-----------Process 4");
        } catch (Exception e) {
            // There have been an error in calling function 'MM.MM_INS_INVC_CALC' !
            String msg = resolvElDCMsg("#{bundle['MSG.2139']}").toString() + " " + "MM.MM_INS_INVC_CALC.";
            FacesMessage message = new FacesMessage(msg + e.getMessage());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            e.printStackTrace();
        }
        if (ret != null) {
            if (ret > 0) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return "N";
        }
    }

    /**
     * Method to get the default Currency of the org
     * */
    public Integer getDefualtOrgCurr(String cldId, String orgId) {
        Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_GET_ORG_BS_CURR(?,?)", new Object[] {
                                                    cldId, orgId }));
        return ret;
    }


    public String getOrgBsCurrency() {
        Row invc = this.getMmInvc().getCurrentRow();
        String cldId = invc.getAttribute("CldId").toString();
        String orgId = invc.getAttribute("OrgId").toString();
        Integer ret = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_GET_ORG_BS_CURR(?,?)", new Object[] {
                                                    cldId, orgId }));
        Row curr[] = null;
        if (ret != null) {
            curr = this.getLovCurrency().getFilteredRows("CcCurrId", ret);
            return (curr.length > 0) ? curr[0].getAttribute("CurrDesc").toString() : "No Currency Found";
        } else
            return "No Currency Found";
    }


    public String getSupplierBsCurrency() {
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        //  Integer ret=(Integer)(callStoredFunction(Types.INTEGER, "MM.MM_GET_ORG_BS_CURR(?,?)", new Object[]{cldId,orgId}));

        Row invc = this.getMmInvc().getCurrentRow();
        Object obj = invc.getAttribute("CurrIdSp");

        //        System.out.println("Supplier Currency : "+obj);

        Row curr[] = null;
        if (obj != null) {
            /*   this.getLovCurrency().setNamedWhereClauseParam("bindCldId", cldId.toString());
          this.getLovCurrency().setNamedWhereClauseParam("bindOrgId", orgId.toString());
          this.getLovCurrency().setNamedWhereClauseParam("bindHoOrgId", hoOrgId.toString());
          this.getLovCurrency().setNamedWhereClauseParam("bindCcId", ret);
          this.getLovCurrency().executeQuery();
         */curr = this.getLovCurrency().getFilteredRows("CcCurrIdTxn", (Integer) obj);

            //          System.out.println("Currency Name : "+curr[0].getAttribute("CurrDesc"));

            return (curr.length > 0) ? curr[0].getAttribute("CurrDescTxn").toString() : "No Currency Found";
        } else
            return "No Currency Found";
    }

    /**
     * Method used to get the COA id for the selected EO id(Supplier)
     * return >0 : Coa ID
     *        -2 : coa is not defined for this eo in this organisation
     *        -3 : multiple coa available for this eo in this org
     *        -4 : Other errors
     * */
    public Integer getCoaForEo(String hoOrgId, String eoName) {
        Row invc = this.getMmInvc().getCurrentRow();

        String cldId = invc.getAttribute("CldId").toString();
        String orgId = invc.getAttribute("OrgId").toString();
        Integer sloc = Integer.parseInt(invc.getAttribute("SlocId").toString());
        _log.info("invoice type is " + invc.getAttribute("InvcType"));
        ViewObjectImpl vo = this.getLovSupplierTune();
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", sloc);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindEoNm", eoName);
        vo.executeQuery();
        System.out.println("get row cout  :::::: " + vo.getRowCount());
        //Row[] filRw=this.getLovSupplier1().getFilteredRows(new RowQualifier("EoNm='"+eoName+"' and SlocId="+sloc+" and OrgId='"+orgId+"' and CldId='"+cldId+"' and HoOrgId='"+hoOrgId+"'"));
        //Row[] filRw=vo.getFilteredRows("EoNm", eoName);
        RowQualifier rq11 = new RowQualifier(vo);
        rq11.setWhereClause("EoNm= '" + eoName + "'");
        Row[] filRw = vo.getFilteredRows(rq11);
        System.out.println("cld sloc and org " + cldId + sloc + orgId);
        System.out.println("no. of rows found " + eoName + "       " + filRw.length + " experssion is " +
                           rq11.getExprStr());
        Integer eoId = 0;
        Integer ret = -1;
        //   if(invc.getAttribute("InvcType")!=null){
        if (filRw.length > 0) {
            eoId = (Integer) filRw[0].getAttribute("EoId");
            ret = (Integer) (callStoredFunction(Types.INTEGER, "APP.fn_get_eo_coa_id(?,?,?,?,?)", new Object[] {
                                                cldId, sloc, hoOrgId, orgId, eoId
            }));
            if (invc.getAttribute("CoaId") == null && ret > 0) {
                invc.setAttribute("CoaId", ret);
            }
        }
        // }
        _log.info(eoId + "--EO ID--COA ID--" + ret);

        return ret;
    }

    /**
     * Container's getter for LovSupplier1.
     * @return LovSupplier1
     */
    public ViewObjectImpl getLovSupplier1() {
        return (ViewObjectImpl) findViewObject("LovSupplier1");
    }

    public void setcoaIdForInvc(Integer coa) {
        _log.info("set coa in AM");
        Row invc = this.getMmInvc().getCurrentRow();
        invc.setAttribute("CoaId", coa);
    }

    /**
     * Container's getter for MmInvcPmtSchdl.
     * @return MmInvcPmtSchdl
     */
    public MmInvcPmtSchdlVOImpl getMmInvcPmtSchdl() {
        return (MmInvcPmtSchdlVOImpl) findViewObject("MmInvcPmtSchdl");
    }

    /**
     * Container's getter for FkMMInvcPmtSchdlVL1.
     * @return FkMMInvcPmtSchdlVL1
     */
    public ViewLinkImpl getFkMMInvcPmtSchdlVL1() {
        return (ViewLinkImpl) findViewLink("FkMMInvcPmtSchdlVL1");
    }

    /**
     * Container's getter for MMInvcAdj1.
     * @return MMInvcAdj1
     */
    public ViewObjectImpl getMMInvcAdj1() {
        return (ViewObjectImpl) findViewObject("MMInvcAdj1");
    }

    /**
     * Container's getter for FkMMInvcAdjVL1.
     * @return FkMMInvcAdjVL1
     */
    public ViewLinkImpl getFkMMInvcAdjVL1() {
        return (ViewLinkImpl) findViewLink("FkMMInvcAdjVL1");
    }


    public void postChng() { //System.out.println("POST CHNG");
        this.getDBTransaction().postChanges();
    }


    public String paymentDateValidation(Timestamp paydt) {

        ViewObject mmPmt = this.getMmInvcPmtSchdl();

        if (paydt != null) {
            Row rows[] = mmPmt.getFilteredRows("PayDt", paydt);


            /*  if (rows.length > 0 && ((String)rows[0].getAttribute("AdjFlg")).equalsIgnoreCase("Y")) {
                return "AP";
            }
            */

            if (rows.length > 0) {
                return "Y";
            }


            else {
                return "N";
            }
        } else {
            return null;
        }

    }


    public void donePaySchdlAction(Integer p_user_id, Number totAmt, Integer paymentMode) {

        // System.out.println("Total Amt : "+totAmt);
        /*     if (totAmt != null) {
            Double totalDoubAmt = new Double(0);
            if (this.getInvAmtRoundOff().compareTo(new Integer(905)) == 0) {
                totAmt = totAmt;
                _log.info("------905 return -- " + totAmt);
            } else if (this.getInvAmtRoundOff().compareTo(new Integer(906)) == 0) {
                try {
                    totalDoubAmt = totAmt.doubleValue();
                    _log.info("---before round " + totalDoubAmt + " act " + totAmt);
                    Long amt = Math.round(totalDoubAmt);
                    _log.info("---after round " + totalDoubAmt + "  round " + Math.round(totalDoubAmt) + "--- " + amt);
                    totAmt = new Number(amt);
                    //totalDoubAmt = new Double(Math.round(totalDoubAmt));
                    _log.info("------906 return -- " + totAmt + " double " + totalDoubAmt);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

            } else if (this.getInvAmtRoundOff().compareTo(new Integer(907)) == 0) {
                try {
                    totalDoubAmt = totAmt.doubleValue();
                    _log.info("-------before floor -" + totalDoubAmt + " " + totAmt);
                    totalDoubAmt = Math.floor(totalDoubAmt);
                    _log.info("----after floor -------" + totalDoubAmt + " " + Math.floor(totalDoubAmt) + "  ");
                    totAmt = new Number(totalDoubAmt);
                    _log.info("------907 return -- " + totAmt);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

            } else if (this.getInvAmtRoundOff().compareTo(new Integer(908)) == 0) {
                try {
                    totalDoubAmt = totAmt.doubleValue();
                    _log.info("-------before ceil -" + totalDoubAmt + " " + totAmt);
                    totalDoubAmt = Math.ceil(totalDoubAmt);
                    _log.info("----after ceil -------" + totalDoubAmt + " " + Math.ceil(totalDoubAmt));
                    totAmt = new Number(totalDoubAmt);
                    //totalDoubAmt = new Double(Math.round(totalDoubAmt));
                    _log.info("------908 return -- " + totAmt);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

            }
        } */
        if (totAmt != null) {
            totAmt = this.getRoundOffInvoiceAmt(totAmt);
        }


        ViewObject pmtVo = this.getMmInvcPmtSchdl();
        ViewObject slsSo = this.getMmInvc();
        Number cc = new Number(1);
        Object ccObj = slsSo.getCurrentRow().getAttribute("CurrConvFctr");
        if (ccObj != null) {
            cc = (Number) ((Number) ccObj).round(getGlblCurrDigit());
        }
        String flg = "N";
        Number num = new Number(0);
        Number remain = new Number(0);
        Row currSo = slsSo.getCurrentRow();

        if (currSo.getAttribute("TransPayDate") != null) {
            Timestamp dt = (Timestamp) currSo.getAttribute("TransPayDate");
            Timestamp soDt = (Timestamp) currSo.getAttribute("DocDt");
            java.sql.Date ordDate = null;
            java.sql.Date payDt = null;
            java.util.Date ordUtilDt = null;
            java.util.Date payUtilDt = null;
            try {
                SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
                ordDate = soDt.dateValue();
                payDt = dt.dateValue();
                ordUtilDt = sdf.parse(ordDate.toString());
                payUtilDt = sdf.parse(dt.toString());
            } catch (SQLException e) {
                _log.info("Eception in Date Conveersion->" + e);
            } catch (ParseException e) {
                _log.info("Eception in Date Conveersion->" + e);
            }
            if (currSo.getAttribute("TransAdvFlg") != null) {
                flg = currSo.getAttribute("TransAdvFlg").toString();
            }

            if ("Y".equalsIgnoreCase(flg) && soDt.compareTo(dt) == -1) {
                //String msg2 = "Payment Date must be less than or equal to Invoice Date for Advance";
                String msg2 = resolvElDCMsg("#{bundle['MSG.975']}").toString();
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);

                //if Order Date is more than Payment Date & Advance Flag is unchecked.

            } else if ("N".equalsIgnoreCase(flg) && (ordUtilDt.after(payUtilDt))) {
                // String msg2 = "Payment Date cannot be less than Invoice Date";
                String msg2 = resolvElDCMsg("#{bundle['MSG.978']}").toString();
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);

            } else if (currSo.getAttribute("TransPmtAmtSp") != null) {

                Number amt = (Number) currSo.getAttribute("TransPmtAmtSp");
                if (amt != null) {
                    amt = (Number) amt.round(getAmtRoundOff());
                }

                totAmt = (Number) totAmt.round(getAmtRoundOff());

                Number zero = new Number(0);

                // Add Total Payment Amount
                RowSetIterator rsi = pmtVo.createRowSetIterator(null);
                while (rsi.hasNext()) {
                    Row rw = rsi.next();
                    if (rw.getAttribute("PayAmtSp") != null) {
                        Number PayAmt = (Number) rw.getAttribute("PayAmtSp");
                        num = num.add(PayAmt);
                    }

                }
                rsi.closeRowSetIterator();


                if (amt.compareTo(zero) == 1 && amt.compareTo(totAmt) != 1) {

                    remain = totAmt.subtract(num);

                    Integer payMode = 160;
                    if (currSo.getAttribute("TransPayMode") != null) {
                        payMode = paymentMode;
                    }
                    payMode = paymentMode;
                    if (remain.subtract(amt).compareTo(zero) == -1) {

                        //  String msg2 = "Total Payment Amount must be less than total amount.";
                        String msg2 = resolvElDCMsg("#{bundle['MSG.981']}").toString();
                        FacesMessage message2 = new FacesMessage(msg2);
                        message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                        FacesContext.getCurrentInstance().addMessage(null, message2);
                    } else if (dt != null && (amt != null || amt.compareTo(zero) == 1)) {

                        Row pmtCurr = pmtVo.createRow();
                        pmtCurr.setAttribute("PayDt", dt);
                        pmtCurr.setAttribute("PayAmtSp", amt);
                        pmtCurr.setAttribute("PayAmtBs", amt.multiply(cc));
                        pmtCurr.setAttribute("TotAmtSp", totAmt);
                        pmtCurr.setAttribute("SrNo",
                                             ((Long) this.getMmInvcPmtSchdl().getEstimatedRowCount()).intValue());
                        pmtCurr.setAttribute("AdvFlg", flg);
                        pmtCurr.setAttribute("PayMode", paymentMode);
                        pmtCurr.setAttribute("AdjFlg", "N");
                        remain = remain.subtract(amt);
                    }


                    if (remain.compareTo(zero) == 0) {
                        currSo.setAttribute("TransPmtAmtSp", new Number(0));
                    } else if (remain.compareTo(zero) == 1) {
                        currSo.setAttribute("TransPmtAmtSp", remain);
                    }

                    currSo.setAttribute("TransPayDate", null);
                    currSo.setAttribute("TransAdvFlg", "N");

                }

                else if (amt.compareTo(totAmt) == 1) {
                    /*  String msg2 =
                        "Payment amount " + amt + " must be less than equals to Total Invoice amount " + totAmt;
                    */
                    String msg2 =
                      resolvElDCMsg("#{bundle['MSG.986']}").toString() + amt +
                      resolvElDCMsg("#{bundle['MSG.988']}").toString() + totAmt;

                    FacesMessage message2 = new FacesMessage(msg2);
                    message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message2);
                } else {
                    // String msg2 = "Amount " + amt + " must be greater than Zero.";
                    String msg2 =
                        resolvElDCMsg("#{bundle['MSG.990']}").toString() + amt +
                        resolvElDCMsg("#{bundle['MSG.992']}").toString();
                    FacesMessage message2 = new FacesMessage(msg2);
                    message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message2);
                }

                pmtVo.executeQuery();
            } else {
                // String msg2 = "Please specify Payment amount.";
                String msg2 = resolvElDCMsg("#{bundle['MSG.422']}").toString();
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message2);
            }
        }


        else {
            // String msg2 = "Please specify Payment Date.";
            String msg2 = resolvElDCMsg("#{bundle['MSG.423']}").toString();
            FacesMessage message2 = new FacesMessage(msg2);
            message2.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message2);
        }
    }


    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    public Integer getPaySchdRowCount() {
        return ((Long) this.getMmInvcPmtSchdl().getEstimatedRowCount()).intValue();
    }


    public Integer getInvcAdjRowCount() {
        return this.getMMInvcAdj1().getRowCount();
    }

    public Integer getInvAmtRoundOff() {
        ViewObjectImpl mmPrf = this.getMMProfile1();
        mmPrf.setNamedWhereClauseParam("BindCldId", getCldId());
        mmPrf.setNamedWhereClauseParam("BindSlocId", getSlocId());
        mmPrf.setNamedWhereClauseParam("BindOrgId", getOrgId());
        mmPrf.executeQuery();

        Row[] rr = mmPrf.getFilteredRows("OrgId", getOrgId());
        _log.info("------length of round off value " + rr.length);
        Integer retrn = new Integer(905);
        if (rr.length > 0) {
            retrn = (Integer) rr[0].getAttribute("RoundOffInvcAmt");
        }
        _log.info("------return value of round off value " + retrn);
        return retrn;
    }

    public void setPaymentAmount() {
        Integer count = ((Long) this.getMmInvcPmtSchdl().getEstimatedRowCount()).intValue();
        ViewObject InvcVo = this.getMmInvc();
        Row currRow = InvcVo.getCurrentRow();

        Double totalDoubAmt = new Double(0);
        Number adjustedAmt = getTotalPaymentSchdAmount();
        Number totalAmt = new Number(0);
        Object obj = currRow.getAttribute("TransInvcAmtSp");

        if (obj != null) {
            totalAmt = (Number) currRow.getAttribute("TransInvcAmtSp");
            /*         if (this.getInvAmtRoundOff().compareTo(new Integer(905)) == 0) {
                totalAmt = totalAmt;
                _log.info("------905 return -- " + totalAmt);
            } else if (this.getInvAmtRoundOff().compareTo(new Integer(906)) == 0) {
                try {
                    totalDoubAmt = totalAmt.doubleValue();
                    _log.info("---before round " + totalDoubAmt + " act " + totalAmt);
                    Long amt = Math.round(totalDoubAmt);
                    _log.info("---after round " + totalDoubAmt + "  round " + Math.round(totalDoubAmt) + "--- " + amt);
                    totalAmt = new Number(amt);
                    //totalDoubAmt = new Double(Math.round(totalDoubAmt));
                    _log.info("------906 return -- " + totalAmt + " double " + totalDoubAmt);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

            } else if (this.getInvAmtRoundOff().compareTo(new Integer(907)) == 0) {
                try {
                    totalDoubAmt = totalAmt.doubleValue();
                    _log.info("-------before floor -" + totalDoubAmt + " " + totalAmt);
                    totalDoubAmt = Math.floor(totalDoubAmt);
                    _log.info("----after floor -------" + totalDoubAmt + " " + Math.floor(totalDoubAmt) + "  ");
                    totalAmt = new Number(totalDoubAmt);
                    _log.info("------907 return -- " + totalAmt);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

            } else if (this.getInvAmtRoundOff().compareTo(new Integer(908)) == 0) {
                try {
                    totalDoubAmt = totalAmt.doubleValue();
                    _log.info("-------before ceil -" + totalDoubAmt + " " + totalAmt);
                    totalDoubAmt = Math.ceil(totalDoubAmt);
                    _log.info("----after ceil -------" + totalDoubAmt + " " + Math.ceil(totalDoubAmt));
                    totalAmt = new Number(totalDoubAmt);
                    //totalDoubAmt = new Double(Math.round(totalDoubAmt));
                    _log.info("------908 return -- " + totalAmt);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

            }*/
        }
        totalAmt = this.getRoundOffInvoiceAmt(totalAmt);

        _log.info("------last return -- " + totalAmt);
        currRow.setAttribute("TransPmtAmtSp", totalAmt.subtract(adjustedAmt));


        /*  if(count <= 0)
             {currRow.setAttribute("TransPmtAmtSp", totalAmt.subtract(adjustedAmt));}
             else
             {currRow.setAttribute("TransPmtAmtSp", new Number(0));}
        */
    }


    public void deletePaymentSchedule() {
        ViewObject InvcVo = this.getMmInvc();
        Row currRow = InvcVo.getCurrentRow();
        ViewObjectImpl paySchdVo = this.getMmInvcPmtSchdl();
        ViewObjectImpl adjtVo = this.getMMInvcAdj1();
        Row payRow = paySchdVo.getCurrentRow();
        Integer selectedSrNo = (Integer) payRow.getAttribute("SrNo");
        Number sum = new Number(0);
        Number total = new Number(0);
        Number remainAmt = new Number(0);

        if (((String) payRow.getAttribute("AdjFlg")).equalsIgnoreCase("Y")) {
            RowSetIterator it = adjtVo.createRowSetIterator(null);
            while (it.hasNext()) {
                Row r = it.next();
                r.setAttribute("AdjAmtBs", new Number(0));
                r.setAttribute("AdjAmtSp", new Number(0));
            }
            it.closeRowSetIterator();
        }


        payRow.remove();
        RowSetIterator it = paySchdVo.createRowSetIterator(null);
        while (it.hasNext()) {
            Row r = it.next();
            Integer iValue = (Integer) r.getAttribute("SrNo");
            if (iValue > selectedSrNo) {
                r.setAttribute("SrNo", iValue - 1);
            }

            sum = sum.add((Number) r.getAttribute("PayAmtSp"));
        }
        it.closeRowSetIterator();

        total = (Number) currRow.getAttribute("TransInvcAmtSp");
        //

        /*
        Double totalDoubAmt = new Double(0);
        if (this.getInvAmtRoundOff().compareTo(new Integer(905)) == 0) {
            total = total;
            _log.info("------905 return -- " + total);
        } else if (this.getInvAmtRoundOff().compareTo(new Integer(906)) == 0) {
            try {
                totalDoubAmt = total.doubleValue();
                _log.info("---before round " + totalDoubAmt + " act " + total);
                Long amt = Math.round(totalDoubAmt);
                _log.info("---after round " + totalDoubAmt + "  round " + Math.round(totalDoubAmt) + "--- " + amt);
                total = new Number(amt);
                //totalDoubAmt = new Double(Math.round(totalDoubAmt));
                _log.info("------906 return -- " + total + " double " + totalDoubAmt);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }

        } else if (this.getInvAmtRoundOff().compareTo(new Integer(907)) == 0) {
            try {
                totalDoubAmt = total.doubleValue();
                _log.info("-------before floor -" + totalDoubAmt + " " + total);
                totalDoubAmt = Math.floor(totalDoubAmt);
                _log.info("----after floor -------" + totalDoubAmt + " " + Math.floor(totalDoubAmt) + "  ");
                total = new Number(totalDoubAmt);
                _log.info("------907 return -- " + total);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }

        } else if (this.getInvAmtRoundOff().compareTo(new Integer(908)) == 0) {
            try {
                totalDoubAmt = total.doubleValue();
                _log.info("-------before ceil -" + totalDoubAmt + " " + total);
                totalDoubAmt = Math.ceil(totalDoubAmt);
                _log.info("----after ceil -------" + totalDoubAmt + " " + Math.ceil(totalDoubAmt));
                total = new Number(totalDoubAmt);
                //totalDoubAmt = new Double(Math.round(totalDoubAmt));
                _log.info("------908 return -- " + total);
            } catch (Exception e) {
                // TODO: Add catch code
                e.printStackTrace();
            }

        } */

        total = this.getRoundOffInvoiceAmt(total);
        ////////
        remainAmt = total.subtract(sum);
        currRow.setAttribute("TransPmtAmtSp", remainAmt);

        paySchdVo.executeQuery();
        adjtVo.executeQuery();
    }


    public void deleteOtherCharges() {
        ViewObject ocVo = this.getMmInvcOc();
        Row ocRow = ocVo.getCurrentRow();
        if (ocRow != null) {
            ocRow.remove();
        }
        ocVo.executeQuery();
    }


    public void deleteTrFromSrc() {
        ViewObjectImpl trVo = this.getMmInvcTr1();
        ViewObjectImpl trLineVo = this.getMmInvcTrLines2();

        ViewObjectImpl itmVo = this.getMmInvcItm();

        ViewObjectImpl srcVo = this.getMmInvcSrc();
        Row srcRow = srcVo.getCurrentRow();


        String cldId = srcRow.getAttribute("CldId").toString();
        String slocId = srcRow.getAttribute("SlocId").toString();
        String orgId = srcRow.getAttribute("OrgId").toString();
        String p_doc_id = srcRow.getAttribute("DocId").toString();
        String p_rcpt_doc_id = srcRow.getAttribute("DocIdRcpt").toString();
        String p_doc_id_po = srcRow.getAttribute("DocIdPo").toString();
        Integer p_schdl_no = (Integer) srcRow.getAttribute("DlvSchdlNo");


        Object obj = callStoredFunction(Types.INTEGER, "MM.MM_REMOVE_TR_LINES_SRC(?,?,?,?,?,?,?)", new Object[] {
                                        slocId, cldId, orgId, p_doc_id, p_rcpt_doc_id, p_doc_id_po, p_schdl_no
        });

        if (obj.toString().equals("1") || obj.toString().equals("0")) {
            Row itmRows[] = itmVo.getFilteredRows("DocIdPo", srcRow.getAttribute("DocIdPo"));
            for (Row itmRow : itmRows) {
                RowQualifier trRq = new RowQualifier(trVo);
                trRq.setWhereClause("ItmId = '" + itmRow.getAttribute("ItmId") + "' AND CldId='" +
                                    itmRow.getAttribute("CldId") + "' AND SlocId = " + itmRow.getAttribute("SlocId") +
                                    " AND OrgId= '" + itmRow.getAttribute("OrgId") + "' AND DocId = '" +
                                    itmRow.getAttribute("DocId") + "' AND DocIdRcpt = '" +
                                    itmRow.getAttribute("DocIdRcpt") + "' AND DocIdPo = '" +
                                    itmRow.getAttribute("DocIdPo") + "' AND DlvSchdlNo = " +
                                    itmRow.getAttribute("DlvSchdlNo") + " AND ItmUom = '" +
                                    itmRow.getAttribute("ItmUom") + "'");
                Row trRows[] = trVo.getFilteredRows(trRq);

                for (Row trRow : trRows) {
                    if (trRow.getAttribute("TaxRuleFlg").toString().equals("P")) //Remove Tr Lines
                        trRow.remove();
                }
            }
        }


        /*
        Row itmRows[] = itmVo.getFilteredRows("DocIdPo", srcRow.getAttribute("DocIdPo"));
       for(Row itmRow:itmRows)
      {
          RowQualifier trRq = new RowQualifier(trVo);
          trRq.setWhereClause("ItmId = '"+itmRow.getAttribute("ItmId")+"' AND CldId='"+itmRow.getAttribute("CldId")+"' AND SlocId = "+itmRow.getAttribute("SlocId")+" AND OrgId= '"+itmRow.getAttribute("OrgId")+"' AND DocId = '"+itmRow.getAttribute("DocId")+"' AND DocIdRcpt = '"+itmRow.getAttribute("DocIdRcpt")+"' AND DocIdPo = '"+itmRow.getAttribute("DocIdPo")+"' AND DlvSchdlNo = "+itmRow.getAttribute("DlvSchdlNo")+" AND ItmUom = '"+itmRow.getAttribute("ItmUom")+"'");
          Row trRows[] = trVo.getFilteredRows(trRq);

          for(Row trRow:trRows)
          {
              System.out.println(trLineVo.getEstimatedRowCount());
              RowQualifier trLineRq = new RowQualifier(trLineVo);
              trLineRq.setWhereClause("TaxRuleId = "+trRow.getAttribute("TaxRuleId")+" AND ItmId = '"+trRow.getAttribute("ItmId")+"' AND CldId='"+trRow.getAttribute("CldId")+"' AND SlocId = "+trRow.getAttribute("SlocId")+" AND OrgId= '"+trRow.getAttribute("OrgId")+"' AND DocId = '"+trRow.getAttribute("DocId")+"' AND DocIdRcpt = '"+trRow.getAttribute("DocIdRcpt")+"' AND DocIdPo = '"+trRow.getAttribute("DocIdPo")+"' AND DlvSchdlNo = "+trRow.getAttribute("DlvSchdlNo")+" AND ItmUom = '"+trRow.getAttribute("ItmUom")+"'");
              Row trLines[] = trLineVo.getFilteredRows(trLineRq);

              System.out.println("No. of LINES : "+trLines.length);
              for(Row removeRow:trLines)
              {
                  if(removeRow.getAttribute("TaxRuleFlg").toString().equals("P"))   //Remove Tr Lines
                    {removeRow.remove();}
              }

               if(trRow.getAttribute("TaxRuleFlg").toString().equals("P"))   //Remove Tr
                 {trRow.remove();}
          }

      }
       */

        trVo.executeQuery();
        this.getMmInvcTr().executeQuery();
        this.getMmInvcTr1().executeQuery();
        trLineVo.executeQuery();
        this.getMmInvcTrLines().executeQuery();
        this.getMmInvcTrLines1().executeQuery();
        srcVo.executeQuery();
        itmVo.executeQuery();

    }


    public void deleteTrFromItm() {

        ViewObjectImpl trVo = this.getMmInvcTr1();
        ViewObjectImpl trLineVo = this.getMmInvcTrLines2();
        ViewObjectImpl itmVo = this.getMmInvcItm();
        Row itmRow = itmVo.getCurrentRow();

        String cldId = itmRow.getAttribute("CldId").toString();
        String slocId = itmRow.getAttribute("SlocId").toString();
        String orgId = itmRow.getAttribute("OrgId").toString();
        String p_doc_id = itmRow.getAttribute("DocId").toString();
        String p_rcpt_doc_id = itmRow.getAttribute("DocIdRcpt").toString();
        String p_doc_id_po = itmRow.getAttribute("DocIdPo").toString();
        Integer p_schdl_no = (Integer) itmRow.getAttribute("DlvSchdlNo");


        Object obj = callStoredFunction(Types.INTEGER, "MM.MM_REMOVE_TR_LINES(?,?,?,?,?,?,?,?,?)", new Object[] {
                                        slocId, cldId, orgId, p_doc_id, p_rcpt_doc_id, p_doc_id_po, p_schdl_no,
                                        itmRow.getAttribute("ItmId").toString(),
                                        itmRow.getAttribute("ItmUom").toString()
        });


        if (obj.toString().equals("1") || obj.toString().equals("0")) {

            RowQualifier trRq = new RowQualifier(trVo);
            trRq.setWhereClause("ItmId = '" + itmRow.getAttribute("ItmId") + "' AND CldId='" +
                                itmRow.getAttribute("CldId") + "' AND SlocId = " + itmRow.getAttribute("SlocId") +
                                " AND OrgId= '" + itmRow.getAttribute("OrgId") + "' AND DocId = '" +
                                itmRow.getAttribute("DocId") + "' AND DocIdRcpt = '" +
                                itmRow.getAttribute("DocIdRcpt") + "' AND DocIdPo = '" +
                                itmRow.getAttribute("DocIdPo") + "' AND DlvSchdlNo = " +
                                itmRow.getAttribute("DlvSchdlNo") + " AND ItmUom = '" + itmRow.getAttribute("ItmUom") +
                                "'");
            Row trRows[] = trVo.getFilteredRows(trRq);
            if (trRows.length > 0) {
                trRows[0].remove();
            }
        }

        /*
        RowQualifier trRq = new RowQualifier(trVo);
        trRq.setWhereClause("ItmId = '"+itmRow.getAttribute("ItmId")+"' AND CldId='"+itmRow.getAttribute("CldId")+"' AND SlocId = "+itmRow.getAttribute("SlocId")+" AND OrgId= '"+itmRow.getAttribute("OrgId")+"' AND DocId = '"+itmRow.getAttribute("DocId")+"' AND DocIdRcpt = '"+itmRow.getAttribute("DocIdRcpt")+"' AND DocIdPo = '"+itmRow.getAttribute("DocIdPo")+"' AND DlvSchdlNo = "+itmRow.getAttribute("DlvSchdlNo")+" AND ItmUom = '"+itmRow.getAttribute("ItmUom")+"'");
        Row trRows[] = trVo.getFilteredRows(trRq);

        System.out.println("TR : "+trRows.length);

         if(trRows != null && trRows.length >= 1)
        {
            Row trRow=trRows[0];
            RowQualifier trLineRq = new RowQualifier(trLineVo);
            trLineRq.setWhereClause("TaxRuleId = "+trRow.getAttribute("TaxRuleId")+" AND ItmId = '"+trRow.getAttribute("ItmId")+"' AND CldId='"+trRow.getAttribute("CldId")+"' AND SlocId = "+trRow.getAttribute("SlocId")+" AND OrgId= '"+trRow.getAttribute("OrgId")+"' AND DocId = '"+trRow.getAttribute("DocId")+"' AND DocIdRcpt = '"+trRow.getAttribute("DocIdRcpt")+"' AND DocIdPo = '"+trRow.getAttribute("DocIdPo")+"' AND DlvSchdlNo = "+trRow.getAttribute("DlvSchdlNo")+" AND ItmUom = '"+trRow.getAttribute("ItmUom")+"'");
            Row trLines[] = trLineVo.getFilteredRows(trLineRq);

           System.out.println("TR Lines : "+trLines.length);

            for(Row removeRow:trLines)
            {removeRow.remove();}

            trRows[0].remove();
        }
        */


        trVo.executeQuery();
        this.getMmInvcTr().executeQuery();
        this.getMmInvcTr1().executeQuery();
        trLineVo.executeQuery();
        this.getMmInvcTrLines().executeQuery();
        this.getMmInvcTrLines1().executeQuery();
        this.getMmInvcSrc().executeQuery();
        itmVo.executeQuery();
        this.getDBTransaction().postChanges();

    }


    public void deleteTdsFromItm() {
        ViewObjectImpl tdsVo = this.getMmInvcTds();
        ViewObjectImpl tdsLineVo = this.getMmInvcTdsLines();

        ViewObjectImpl itmVo = this.getMmInvcItm();
        Row itmRow = itmVo.getCurrentRow();

        String cldId = itmRow.getAttribute("CldId").toString();
        String slocId = itmRow.getAttribute("SlocId").toString();
        String orgId = itmRow.getAttribute("OrgId").toString();
        String p_doc_id = itmRow.getAttribute("DocId").toString();
        String p_rcpt_doc_id = itmRow.getAttribute("DocIdRcpt").toString();
        String p_doc_id_po = itmRow.getAttribute("DocIdPo").toString();
        Integer p_schdl_no = (Integer) itmRow.getAttribute("DlvSchdlNo");


        Object obj = callStoredFunction(Types.INTEGER, "MM.MM_REMOVE_TDS_LINES(?,?,?,?,?,?,?,?,?)", new Object[] {
                                        slocId, cldId, orgId, p_doc_id, p_rcpt_doc_id, p_doc_id_po, p_schdl_no,
                                        itmRow.getAttribute("ItmId").toString(),
                                        itmRow.getAttribute("ItmUom").toString()
        });

        //System.out.println("TDS : "+obj);
        if (obj.toString().equals("1") || obj.toString().equals("0")) {

            RowQualifier trRq = new RowQualifier(tdsVo);
            trRq.setWhereClause("ItmId = '" + itmRow.getAttribute("ItmId") + "' AND CldId='" +
                                itmRow.getAttribute("CldId") + "' AND SlocId = " + itmRow.getAttribute("SlocId") +
                                " AND OrgId= '" + itmRow.getAttribute("OrgId") + "' AND DocId = '" +
                                itmRow.getAttribute("DocId") + "' AND DocIdRcpt = '" +
                                itmRow.getAttribute("DocIdRcpt") + "' AND DocIdPo = '" +
                                itmRow.getAttribute("DocIdPo") + "' AND DlvSchdlNo = " +
                                itmRow.getAttribute("DlvSchdlNo") + " AND ItmUom = '" + itmRow.getAttribute("ItmUom") +
                                "'");
            Row trRows[] = tdsVo.getFilteredRows(trRq);
            if (trRows.length > 0) {
                trRows[0].remove();
            }
        }

        /*
        Row []rows=tdsVo.getFilteredRows("ItmId", itmRow.getAttribute("ItmId"));

        if(rows != null && rows.length>0)
        {
            Row []rws=tdsLineVo.getFilteredRows("TdsRuleId", rows[0].getAttribute("TdsRuleId"));
         for(Row removeRow:rws)
            {removeRow.remove();}
            rows[0].remove();
        }
       */
        tdsVo.executeQuery();
        tdsLineVo.executeQuery();
        this.getMmInvcSrc().executeQuery();
        itmVo.executeQuery();
    }


    public void insertAdjustmentLines() {
        //      System.out.println("Insert Rows");
        ViewObjectImpl mmInvcVo = this.getMmInvc();
        Row row = mmInvcVo.getCurrentRow();
        String hoOrdId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");

        String cldId = (String) row.getAttribute("CldId");
        Integer slocId = (Integer) row.getAttribute("SlocId");
        String orgId = (String) row.getAttribute("OrgId");
        Integer coaId = (Integer) row.getAttribute("CoaId");
        Integer eoId = (Integer) row.getAttribute("EoIdSrc");
        Integer currId = (Integer) row.getAttribute("CurrIdSp");

        ViewObjectImpl apVo = this.getViewArapOs1();

        apVo.setNamedWhereClauseParam("bindCldId", cldId);
        apVo.setNamedWhereClauseParam("bindHoOrgId", hoOrdId);
        apVo.setNamedWhereClauseParam("bindSlocId", slocId);
        apVo.setNamedWhereClauseParam("bindOrgId", orgId);
        apVo.setNamedWhereClauseParam("bindCoaId", coaId);
        apVo.setNamedWhereClauseParam("bindEoId", eoId);
        apVo.setNamedWhereClauseParam("bindCurrId", currId);
        apVo.executeQuery();

        // Delete rows on repeted adjustemnt populate
        RowSetIterator cr = this.getMMInvcAdj1().createRowSetIterator(null);
        while (cr.hasNext()) {
            Row next = cr.next();
            //        next.remove();
            Number ajdAmtBS = (Number) next.getAttribute("AdjAmtBs");
            if (ajdAmtBS.compareTo(new Number(0)) <= 0) {
                next.remove();
            }
        }
        cr.closeRowSetIterator();
        this.getMMInvcAdj1().executeQuery();


        RowSetIterator itr = apVo.createRowSetIterator(null);
        RowSetIterator adjItr = null;
        Integer i = 1;
        Integer count = 0;
        Integer srNo = 1;
        while (itr.hasNext()) {
            adjItr = this.getMMInvcAdj1().createRowSetIterator(null);
            Row currow = itr.next();

            if (adjItr.getRowCount() != 0) {
                count = 0;
                while (adjItr.hasNext()) {
                    Row r = adjItr.next();
                    /*         System.out.println("COA ID : "+r.getAttribute("CoaId"));
                    System.out.println("CC COA ID : "+currow.getAttribute("ArapCoaId"));
                    System.out.println("DOC ID : "+r.getAttribute("GlDocId"));
                    System.out.println("ArapVouId : "+currow.getAttribute("ArapVouId"));
         */
                    if ((String.valueOf(r.getAttribute("CoaId")).equals(String.valueOf(currow.getAttribute("ArapCoaId")))) &&
                        (r.getAttribute("GlDocId").equals(currow.getAttribute("ArapVouId")))) {
                        count = 1;
                        //adjItr.closeRowSetIterator();
                        break;
                    }
                } //close Inner While Loop
            } //End If
            if (count == 0) {
                Row newRow = this.getMMInvcAdj1().createRow();
                newRow.setAttribute("CoaId", currow.getAttribute("ArapCoaId"));
                newRow.setAttribute("GlDocId", currow.getAttribute("ArapVouId"));
                newRow.setAttribute("ApGlSlNo", currow.getAttribute("ArapGlSlNo"));
                newRow.setAttribute("ApSlNo", currow.getAttribute("ArapslNo"));
                Number cc = (Number) currow.getAttribute("ApCc");
                Number apAmtSp = (Number) currow.getAttribute("ArapNetAmtOt");
                newRow.setAttribute("GlAmtBs", cc.multiply(apAmtSp));
                newRow.setAttribute("GlAmtSp", currow.getAttribute("ArapNetAmtOt"));
                newRow.setAttribute("SrNo", srNo++);
                newRow.setAttribute("TranType", currow.getAttribute("ArapAmtTyp"));
                newRow.setAttribute("GlDocDt", currow.getAttribute("ArapVouDt"));
                newRow.setAttribute("CurrConvFctr", currow.getAttribute("ApCc"));
                newRow.setAttribute("CurrIdSp", currow.getAttribute("ArapCurrIdSp"));
                newRow.setAttribute("vouDispId", currow.getAttribute("DocTxnIdDisp"));
                newRow.setAttribute("AdjAmtBs", new Number(0));
                newRow.setAttribute("AdjAmtSp", new Number(0));
                this.getMMInvcAdj1().insertRow(newRow);
            } //End IF
        } //Close Outer While Loop
        itr.closeRowSetIterator();
        if (adjItr != null) {
            adjItr.closeRowSetIterator();
        }
        this.getMMInvcAdj1().executeQuery();
    }

    /**
     * Container's getter for ViewArapOs1.
     * @return ViewArapOs1
     */
    public ViewObjectImpl getViewArapOs1() {
        return (ViewObjectImpl) findViewObject("ViewArapOs1");
    }

    /**
     * Container's getter for LOVOUCHER1.
     * @return LOVOUCHER1
     */
    public ViewObjectImpl getLOVOUCHER1() {
        return (ViewObjectImpl) findViewObject("LOVOUCHER1");
    }


    public String isAdjustmentValidate(Number num) {
        ViewObjectImpl adjVo = this.getMMInvcAdj1();
        ViewObjectImpl invcVo = this.getMmInvc();
        Row currRow = adjVo.getCurrentRow();


        Number glAmt = (Number) currRow.getAttribute("GlAmtSp");
        if (num.compareTo(glAmt) > 0) {
            return "GL_VALID_FAILS";
        }
        Number sum = new Number(0);
        RowSetIterator itr = adjVo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            if (!currRow.equals(row)) {
                Number number = new Number(0);
                Object obj = row.getAttribute("AdjAmtSp");

                if (obj != null) {
                    number = (Number) row.getAttribute("AdjAmtSp");
                }

                sum = sum.add(number);
            }
        }
        itr.closeRowSetIterator();
        sum = sum.add(num);
        Number invSpAmt = (Number) invcVo.getCurrentRow().getAttribute("TransInvcAmtSp");

        //----------------------------------Date:22 Jul--------------------------
        if (invSpAmt != null) {
            invSpAmt = (Number) invSpAmt.round(getAmtRoundOff());
        }
        //-------------------------------------------------------------------------

        if (sum.compareTo(invSpAmt) > 0) {
            return "TOTAL_VALID_FAILS";
        }

        return "VALID_OK";
    }

    //Method returns Sum of total Adjustment

    public Number getTotalAdjustedAmount() {
        Number retValue = new Number(0);
        ViewObjectImpl adjVo = this.getMMInvcAdj1();
        RowSetIterator itr = adjVo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            Number number = new Number(0);
            Object obj = row.getAttribute("AdjAmtSp");

            if (obj != null) {
                number = (Number) row.getAttribute("AdjAmtSp");
            }

            retValue = retValue.add(number);
        }
        itr.closeRowSetIterator();
        return retValue;
    }

    //Method returns Sum of total Payment Schedule

    public Number getTotalPaymentSchdAmount() {
        Number retValue = new Number(0);
        ViewObjectImpl adjVo = this.getMmInvcPmtSchdl();
        RowSetIterator itr = adjVo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            Number number = new Number(0);
            Object obj = row.getAttribute("PayAmtSp");

            if (obj != null) {
                number = (Number) row.getAttribute("PayAmtSp");
            }

            retValue = retValue.add(number);
        }
        itr.closeRowSetIterator();
        return retValue;
    }


    public Number setAdjustmentBSAmount(Number AdjtSpAmt) {
        Number retValue = new Number(0);
        ViewObjectImpl adjVo = this.getMMInvcAdj1();
        ViewObject pmtVo = this.getMmInvcPmtSchdl();
        ViewObjectImpl invcVo = this.getMmInvc();
        Row currRow = adjVo.getCurrentRow();
        // Number cc = (Number)currRow.getAttribute("CurrConvFctr");

        // Number adjAmtSp =  (Number)currRow.getAttribute("AdjAmtSp");
        Number cc = (Number) ((Number) invcVo.getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblCurrDigit());
        currRow.setAttribute("AdjAmtBs", cc.multiply(AdjtSpAmt));
        currRow.setAttribute("AdjAmtSp", AdjtSpAmt);


        RowSetIterator itr = adjVo.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row row = itr.next();
            if (!currRow.equals(row)) {
                Number number = new Number(0);
                Object obj = row.getAttribute("AdjAmtSp");

                if (obj != null) {
                    number = (Number) row.getAttribute("AdjAmtSp");
                }

                retValue = retValue.add(number);
            }
        }
        retValue = retValue.add(AdjtSpAmt);
        itr.closeRowSetIterator();

        //-----------------------------------------------------------

        Timestamp dt = new Timestamp(System.currentTimeMillis());
        RowSetIterator itrPaySchdVo = pmtVo.createRowSetIterator(null);
        while (itrPaySchdVo.hasNext()) {
            Row row = itrPaySchdVo.next();
            Timestamp payDt = (Timestamp) row.getAttribute("PayDt");

            String payAdjtDt = null;
            String compDt = null;
            try {
                compDt = dt.dateValue().toString();
                payAdjtDt = payDt.dateValue().toString();
            } catch (SQLException e) {
                _log.info("Exception in Date Conveersion->" + e);
            }

            if (payAdjtDt.equalsIgnoreCase(compDt)) {
                row.remove();
            }
        }
        itrPaySchdVo.closeRowSetIterator();
        //------------------------------------------------------------------------------------------------


        Number num = getTotalAdjustedAmount();
        if (num.compareTo(new Number(0)) == 1) {
            Row pmtCurr = pmtVo.createRow();
            try {
                pmtCurr.setAttribute("PayDt", dt.dateValue());
            } catch (SQLException e) {
                _log.info("Exception in Date Conveersion->" + e);
            }
            pmtCurr.setAttribute("PayAmtSp", num);
            pmtCurr.setAttribute("TotAmtSp", num);
            pmtCurr.setAttribute("SrNo", ((Long) this.getMmInvcPmtSchdl().getEstimatedRowCount()).intValue());
            pmtCurr.setAttribute("AdvFlg", "N");
            pmtCurr.setAttribute("PayMode", Integer.valueOf(0));
            pmtCurr.setAttribute("PayAmtBs", cc.multiply(num));
            pmtCurr.setAttribute("TotAmtBs", cc.multiply(num));
            pmtCurr.setAttribute("AdjFlg", "Y");
            pmtVo.insertRow(pmtCurr);
        }

        return retValue;
    }


    public void appendPaymentAmtOnSameDt(Number amt, Timestamp date) {
        ViewObject pmtVo = this.getMmInvcPmtSchdl();
        ViewObject slsSo = this.getMmInvc();
        Number cc = new Number(1);
        Object ccObj = slsSo.getCurrentRow().getAttribute("CurrConvFctr");
        if (ccObj != null) {
            cc = (Number) ((Number) ccObj).round(getGlblCurrDigit());
        }
        RowSetIterator itrPaySchdVo = pmtVo.createRowSetIterator(null);
        String compDt = null;
        try {
            compDt = date.dateValue().toString();
        } catch (SQLException e) {
            _log.info("Exception in Date Conveersion on appendPaymentAmtOnSameDT compDt->" + e);
        }

        while (itrPaySchdVo.hasNext()) {
            Row row = itrPaySchdVo.next();
            Timestamp payDt = (Timestamp) row.getAttribute("PayDt");

            String payAdjtDt = null;

            try {
                payAdjtDt = payDt.dateValue().toString();
            } catch (SQLException e) {
                _log.info("Exception in Date Conveersion on appendPaymentAmtOnSameDT payAdjt->" + e);
            }

            if (payAdjtDt.equalsIgnoreCase(compDt)) {
                Number num = (Number) row.getAttribute("PayAmtSp");
                row.setAttribute("PayAmtSp", num.add(amt));
                row.setAttribute("PayAmtBs", (num.add(amt)).multiply(cc));
                row.setAttribute("TotAmtBs", (num.add(amt)).multiply(cc));
                row.setAttribute("TotAmtSp", num.add(amt));
                break;
            }
        }
        itrPaySchdVo.closeRowSetIterator(); //while end


        pmtVo.executeQuery();

        Row currRow = this.getMmInvc().getCurrentRow();
        Number total = (Number) currRow.getAttribute("TransInvcAmtSp");
        Number remainAmt = total.subtract(getTotalPaymentSchdAmount());
        currRow.setAttribute("TransPmtAmtSp", remainAmt);

    }


    public void deletePaymentSchduleAll() {
        ViewObject pmtVo = this.getMmInvcPmtSchdl();
        RowSetIterator itrPaySchdVo = pmtVo.createRowSetIterator(null);
        while (itrPaySchdVo.hasNext()) {
            Row row = itrPaySchdVo.next();
            row.remove();
        }
        itrPaySchdVo.closeRowSetIterator();
        _log.info("Delete Payement Schedule Completely.");
    }


    //--------------------------------------------------------------------------WORK FLOW-------------------------------------------------------------


    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        Row row = this.getMmInvc().getCurrentRow();

        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo,
                                            Integer.valueOf(row.getAttribute("InvcType").toString())
            });
            System.out.println(" calling getWFno " + obj.toString());
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {

        /*   System.out.println(SlocId );
            System.out.println(CldId );
            System.out.println(OrgId );
            System.out.println(UsrId );
            System.out.println(WfNo );
            System.out.println(DocNo ); */
        Row row = this.getMmInvc().getCurrentRow();
        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, UsrId, WfNo, DocNo,
                                                   Integer.valueOf(row.getAttribute("InvcType").toString())
    }).toString());
    }


    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        Row row = this.getMmInvc().getCurrentRow();
        String DocId = getMmInvc().getCurrentRow().getAttribute("DocId").toString();

        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo,
                                                   Integer.valueOf(row.getAttribute("InvcType").toString()), WfNo,
                                                   DocId, usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark, amount
    }).toString());
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        String DocId = getMmInvc().getCurrentRow().getAttribute("DocId").toString();
        Row row = this.getMmInvc().getCurrentRow();
        Object obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, DocId,
                                        Integer.valueOf(row.getAttribute("InvcType").toString())
        });
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }


    public String getCurrentDocId() {
        String DocId = getMmInvc().getCurrentRow().getAttribute("DocId").toString();
        if (DocId != null) {
            return DocId;
        } else {
            return null;
        }
    }

    public String CheckSaved() {
        String DocId = getMmInvc().getCurrentRow().getAttribute("DocId").toString();
        Row[] r = getWF1().getFilteredRows("TxnDocId", DocId);
        if (r.length > 0)
            return "1";
        else
            return "-1";
    }

    /**
     * Container's getter for WF1.
     * @return WF1
     */
    public ViewObjectImpl getWF1() {
        return (ViewObjectImpl) findViewObject("WF1");
    }


    public void callFunctionAfterWf() {

        String retStr = resolvEl("#{pageFlowScope.RETURN_FROM_WF}");
        Integer result = 0;
        Integer resultAdj = 0;
        Row row = getMmInvc().getCurrentRow();
        ViewObjectImpl dtlvo = this.getMmInvcDtl();

        String CldId = row.getAttribute("CldId").toString();
        Integer SlocId = (Integer) row.getAttribute("SlocId");
        String OrgId = row.getAttribute("OrgId").toString();
        String DocId = row.getAttribute("DocId").toString();
        Timestamp DocDt = (Timestamp) row.getAttribute("DocDt");
        Integer EoIdSrc = (Integer) row.getAttribute("EoIdSrc");
        Integer CoaId = (Integer) row.getAttribute("CoaId");
        Integer UsrIdCreate = (Integer) row.getAttribute("UsrIdCreate");
        Integer CurrIdSp = (Integer) row.getAttribute("CurrIdSp");
        Number CurrConvFctr = (Number) ((Number) row.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());
        String hoOrdId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer type = (Integer) row.getAttribute("InvcType");
        /*
        System.out.println("Cld : "+CldId);
        System.out.println("SlocId : "+SlocId);
        System.out.println("HoOrgId : "+hoOrdId);
        System.out.println("OrgId : "+OrgId);
        System.out.println("DocId : "+DocId);
        System.out.println("DocDt : "+DocDt);
        System.out.println("EoIdSrc : "+EoIdSrc);
        System.out.println("CoaId : "+CoaId);
        System.out.println("UsrIdCreate : "+UsrIdCreate);
        System.out.println("CurrIdSp : "+CurrIdSp);
        System.out.println("CurrConvFctr : "+CurrConvFctr);
            System.out.println("Type : "+type);
   */
        //  System.out.println("DocId : "+DocId);

        _log.info("CurrConvFctr : --- " + CurrConvFctr);

        if (retStr.equalsIgnoreCase("A")) {
            try {

                String flg = populateCalculations(CldId, SlocId, OrgId, UsrIdCreate);
                /**
              * GL liability voucher reversal in case of supplier (only for receipt and po case) voucher reversal*/
                if (type == 455) {
                    /** commit as on date 03-05-2015 - ALOK refer to Sukanta sir*/
                    /*   Row [] rr1=dtlvo.getFilteredRows("DocId", DocId);
                 if(rr1.length>0){
                //1 REVERSE PROVISIONAL LIABILITY
                     for(Row r:rr1){
                           result =(Integer)callStoredFunction(Types.INTEGER, "MM.MM_INS_GL_PROV(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                                                                        SlocId,
                                                                                                                        CldId,
                                                                                                                        hoOrdId,
                                                                                                                        OrgId,
                                                                                                                        r.getAttribute("DocIdRcpt").toString(),
                                                                                                                        DocDt,
                                                                                                                        CurrIdSp,
                                                                                                                        CurrConvFctr,
                                                                                                                        UsrIdCreate,
                                                                                                                        1});

                     _log.info("docid rcpt is "+r.getAttribute("DocIdRcpt"));
                     }

            } */
                }

                /**
              * Cash Purchase invoice*/

                if (type == 457) {

                    result = (Integer) callStoredFunction(Types.INTEGER, "MM.MM_INS_GL_CASH_PUR(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, hoOrdId, OrgId, DocId, DocDt, CoaId,
                                                          UsrIdCreate, CurrIdSp, CurrConvFctr
                    });

                }
                /**Below function use for
              * 1) purchase invoice ->455
              * 2) suppliementary invoice -> 492
              * 3) purchase order(Services) ->737
              * 4) purchase order consumable ->739
              * */

                else if (type == 455 || type == 492 || type == 737 || type == 739) {
                    result = (Integer) callStoredFunction(Types.INTEGER, "MM.MM_INS_GL(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, hoOrdId, OrgId, DocId, DocDt, EoIdSrc, CoaId,
                                                          UsrIdCreate, CurrIdSp, CurrConvFctr
                    });
                }
                /**
              * 1)Material Transfer Invoice ->456
              * 2)Supplementary Transfer Invoice ->716
              * */
                else if (type == 456 || type == 716) {

                    result = (Integer) callStoredFunction(Types.INTEGER, "MM.MM_INS_GL_TRF_INVC(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          CldId, SlocId, hoOrdId, OrgId, DocId, DocDt, UsrIdCreate,
                                                          CurrIdSp, CurrConvFctr
                    });


                }


                /*
                Integer p_curr_id_bs=getDefualtOrgCurr(CldId,OrgId);
                if(getInvcAdjRowCount()>0)
                {

                  RowSetIterator itr =this.getMMInvcAdj1().createRowSetIterator(null);
                  while(itr.hasNext())
                  {
                      Row adjrow=itr.next();
                      String GlDocId= adjrow.getAttribute("GlDocId").toString();
                      Timestamp GlDocDt= (Timestamp)adjrow.getAttribute("GlDocDt");

                      System.out.println(CldId +" "+SlocId+" "+hoOrdId+" "+OrgId+" "+DocId+" "+DocDt+" "+GlDocId+" "+GlDocDt+" "+p_curr_id_bs+" "+UsrIdCreate);
                      resultAdj= (Integer)callStoredFunction(Types.INTEGER, "MM.MM_INS_GL_ADJ(?,?,?,?,?,?,?,?,?,?)", new Object[] {CldId,
                                                                                                                       SlocId,
                                                                                                                        hoOrdId,
                                                                                                                        OrgId,
                                                                                                                        DocId,
                                                                                                                        DocDt,
                                                                                                                        GlDocId,
                                                                                                                        GlDocDt,
                                                                                                                        p_curr_id_bs,
                                                                                                                        UsrIdCreate});



                  }itr.closeRowSetIterator();//While End

                }//End if
               */


                ViewObjectImpl rmrksvo = this.getAppRmrks();
                rmrksvo.setNamedWhereClauseParam("CldIdBind", CldId);
                rmrksvo.setNamedWhereClauseParam("SlocIdBind", SlocId);
                rmrksvo.setNamedWhereClauseParam("OrgIdBind", OrgId);
                rmrksvo.setNamedWhereClauseParam("DocIdBind", 18521);
                rmrksvo.setNamedWhereClauseParam("TxnDocIdBind", DocId);
                rmrksvo.setNamedWhereClauseParam("DocTypeId", type);
                rmrksvo.executeQuery();

                _log.info("docID is and type" + DocId + "  " + type);
                ViewObjectImpl atch = this.getAppWfAtch();
                atch.setNamedWhereClauseParam("bindCldId", CldId);
                atch.setNamedWhereClauseParam("bindSlocId", SlocId);
                atch.setNamedWhereClauseParam("bindOrgId", OrgId);
                atch.setNamedWhereClauseParam("bindDocTxnId", DocId);
                atch.setNamedWhereClauseParam("bindDocId", 18521);
                atch.setNamedWhereClauseParam("bindDocTypeId", null);
                atch.executeQuery();

                if (result == null) {
                    _log.info("sql exception result null here ");

                    result = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)", new Object[] {
                                                          SlocId, CldId, OrgId, "18521", DocId, type
                    });
                    this.getDBTransaction().commit();
                    String msg = resolvElDCMsg("#{bundle['MSG.1724']}").toString();
                    FacesMessage message = new FacesMessage(msg); //"Something went wrong. Please Contact to ESS!"
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    FacesContext.getCurrentInstance().addMessage(null, message);
                    return;
                }


            } catch (Exception e) {
                /**this catch statement not execute */
                _log.info("sql exception catch here ");
                result = -1;
                e.printStackTrace();
                result = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)", new Object[] {
                                                      SlocId, CldId, OrgId, "18521", DocId, type
                });
                this.getDBTransaction().commit();
                String msg = resolvElDCMsg("#{bundle['MSG.1724']}").toString();
                FacesMessage message = new FacesMessage(msg); //"Something went wrong. Please Contact to ESS!"
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
                return;
            }
            _log.info("result after function call " + result);

            if (result != null && result == 1) {
                row.setAttribute("AuthStat", "Y");
                /*  Object dispId =(Object)(callStoredFunction(Types.VARCHAR, "MM.MM_GET_VOU_NO(?,?,?,?)", new Object[] {CldId,SlocId,OrgId,DocId}));
            if (dispId != null) {
                row.setAttribute("TransVouId", String.valueOf(dispId).toString().substring(2));
            } */
                row.getAttribute("TransVouId");
                this.getDBTransaction().commit();
                this.populateCCForItems(this.getMmInvc().getCurrentRow().getAttribute("DocId").toString());
                try {
                    this.sendDateFromTempCcToMmInvcCc();
                } catch (Exception e) {
                    e.printStackTrace();
                }
                this.getDBTransaction().commit();
                RequestContext.getCurrentInstance().getPageFlowScope().put("ADD_EDIT_MODE", "V");

                //System.out.println("Commit...");
            }

        }


        if (retStr.equalsIgnoreCase("F")) {
            this.getDBTransaction().commit();
            RequestContext.getCurrentInstance().getPageFlowScope().put("ADD_EDIT_MODE", "V");
        }


        this.getLovRcpt().executeQuery();
        this.getLovIssuVO1().executeQuery();
        this.getLovRcptCPO1().executeQuery();
        this.getLovFrSrvcInvc().executeQuery();
        this.getLovFrCnsmbl().executeQuery();
    }


    //Method to remove all adjustments having amount of 0.00 .
    private void removeAllZeroAdjustments() {

        RowSetIterator itr = this.getMMInvcAdj1().createRowSetIterator(null);
        while (itr.hasNext()) {
            Row adjrow = itr.next();
            Number numBs = (Number) adjrow.getAttribute("AdjAmtBs");
            Number numSp = (Number) adjrow.getAttribute("AdjAmtSp");
            if (numBs.compareTo(new Number(0)) == 0 || numSp.compareTo(new Number(0)) == 0) {
                adjrow.remove();
            }

        }
        itr.closeRowSetIterator();

        _log.info("Invoice Adjustment Remove Successfully.");
    }

    /**
     * Container's getter for TransSrch1.
     * @return TransSrch1
     */
    public ViewObjectImpl getTransSrch1() {
        return (ViewObjectImpl) findViewObject("TransSrch1");
    }

    /**
     * Container's getter for LOVInvc1.
     * @return LOVInvc1
     */
    public ViewObjectImpl getLOVInvc1() {
        return (ViewObjectImpl) findViewObject("LOVInvc1");
    }

    /**
     * Container's getter for InvoiceSrch1.
     * @return InvoiceSrch1
     */
    public ViewObjectImpl getInvoiceSrch1() {
        return (ViewObjectImpl) findViewObject("InvoiceSrch1");
    }


    public void defaultInvcSrch() {
        _log.info("invoice going to open");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String paramOrdId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl vo = this.getInvoiceSrch1();
        vo.setNamedWhereClauseParam("bindCldId", paramCldId);
        vo.setNamedWhereClauseParam("bindSlocId", paramSlocId);
        vo.setNamedWhereClauseParam("bindOrgId", paramOrdId);
        vo.setNamedWhereClauseParam("bindFyId", -1);
        vo.executeQuery();
        _log.info("errors in query execution");

    }

    public void searchAction() {

        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String paramOrdId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl vo = this.getInvoiceSrch1();
        ViewObjectImpl vo1 = this.getTransSrch1();
        Row row = vo1.getCurrentRow();

        vo.setNamedWhereClauseParam("bindCldId", paramCldId);
        vo.setNamedWhereClauseParam("bindSlocId", paramSlocId);
        vo.setNamedWhereClauseParam("bindOrgId", paramOrdId);
        vo.setNamedWhereClauseParam("bindDocId", row.getAttribute("InvcId"));
        vo.setNamedWhereClauseParam("bindInvcType", row.getAttribute("InvcType"));
        vo.setNamedWhereClauseParam("bindFrmDt", row.getAttribute("fromDate"));
        vo.setNamedWhereClauseParam("bindToDt", row.getAttribute("toDate"));
        vo.setNamedWhereClauseParam("bindEoIdSrc", row.getAttribute("EoId"));
        vo.setNamedWhereClauseParam("bindCurrId", row.getAttribute("CurrencyBsId"));
        vo.setNamedWhereClauseParam("bindFrTotAmySp", row.getAttribute("fromSpAmt"));
        vo.setNamedWhereClauseParam("bindToTotAmtSp", row.getAttribute("toSpAmt"));
        vo.setNamedWhereClauseParam("bindFyId", null);
        vo.setNamedWhereClauseParam("bindCoaId", null);
        vo.setNamedWhereClauseParam("BindSrcDocNo", row.getAttribute("SrcDocNoTrans"));
        vo.executeQuery();
    }


    public void resetAction() {

        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String paramOrdId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl vo = this.getInvoiceSrch1();

        ViewObjectImpl vo1 = this.getTransSrch1();
        Row row = vo1.getCurrentRow();
        row.setAttribute("EoId", null);
        row.setAttribute("EoNm", null);
        row.setAttribute("InvcType", null);
        row.setAttribute("InvcId", null);
        row.setAttribute("InvcDispId", null);
        row.setAttribute("CurrencyBsId", null);
        row.setAttribute("toSpAmt", null);
        row.setAttribute("fromSpAmt", null);
        row.setAttribute("fromDate", null);
        row.setAttribute("toDate", null);
        row.setAttribute("SrcDocNoTrans", null);
        vo.setNamedWhereClauseParam("bindCldId", paramCldId);
        vo.setNamedWhereClauseParam("bindSlocId", paramSlocId);
        vo.setNamedWhereClauseParam("bindOrgId", paramOrdId);
        vo.setNamedWhereClauseParam("bindFyId", -1);
        vo.executeQuery();
    }

    public void setSelectDocIdOnViewPage() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        String Docid = null;
        MmInvcVOImpl impl = (MmInvcVOImpl) this.getMmInvc();
        Row r = ((Row) this.getInvoiceSrch1().getCurrentRow());
        if (r != null) {
            Docid = (String) r.getAttribute("DocId");
        } else {
            try {
                Docid = (String) (resolvEl("#{pageFlowScope.DOC_ID}"));
            } catch (Exception e) {
                //"There have been an error in calling taskflow 'MMInvoiceAppAddTF'!
                String msg = resolvElDCMsg("#{bundle['MSG.2139']}").toString() + " " + "MMInvoiceAppAddTF";
                FacesMessage message = new FacesMessage(msg);
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);
            }

        }
        impl.setbindCldId(cldId.toString());
        impl.setbindSlocId(slocId);
        impl.setbindOrgId(orgId.toString());
        impl.setbindHoOrgId(hoOrgId.toString());

        if (Docid != null) {
            impl.setbindDocId(Docid.toString());
            impl.executeQuery();
            Row[] rr1 = impl.getFilteredRows("CldId", cldId.toString());

            _log.info("docID is and type" + Docid + "  " + rr1[0].getAttribute("InvcType"));
            if (rr1.length > 0) {
                ViewObjectImpl rmrksvo = this.getAppRmrks();
                rmrksvo.setNamedWhereClauseParam("CldIdBind", cldId.toString());
                rmrksvo.setNamedWhereClauseParam("SlocIdBind", slocId);
                rmrksvo.setNamedWhereClauseParam("OrgIdBind", orgId.toString());
                rmrksvo.setNamedWhereClauseParam("DocIdBind", 18521);
                rmrksvo.setNamedWhereClauseParam("TxnDocIdBind", Docid);
                rmrksvo.setNamedWhereClauseParam("DocTypeId", rr1[0].getAttribute("InvcType"));
                rmrksvo.executeQuery();

                _log.info("docID is and type" + Docid + "  " + rr1[0].getAttribute("InvcType"));
                ViewObjectImpl atch = this.getAppWfAtch();
                atch.setNamedWhereClauseParam("bindCldId", cldId.toString());
                atch.setNamedWhereClauseParam("bindSlocId", slocId);
                atch.setNamedWhereClauseParam("bindOrgId", orgId.toString());
                atch.setNamedWhereClauseParam("bindDocTxnId", Docid);
                atch.setNamedWhereClauseParam("bindDocId", 18521);
                atch.setNamedWhereClauseParam("bindDocTypeId", null);
                atch.executeQuery();
            }

        }

    }


    public boolean isInvcAuth() {
        ViewObjectImpl vo = this.getMmInvc();
        Row row = vo.getCurrentRow();
        if (row != null) {
            String str = (String) row.getAttribute("AuthStat");
            return (str.equalsIgnoreCase("Y")) ? Boolean.TRUE : Boolean.FALSE;
        }
        return Boolean.FALSE;
    }

    /**
     * Container's getter for MmInvcTrLines2.
     * @return MmInvcTrLines2
     */
    public ViewObjectImpl getMmInvcTrLines2() {
        return (ViewObjectImpl) findViewObject("MmInvcTrLines2");
    }


    public boolean checkAmount() {
        ViewObjectImpl vo = this.getMmInvc();
        Row row = vo.getCurrentRow();
        Number totalPIAmt = new Number(0);
        if (row.getAttribute("TransInvcAmtSp") != null) {
            totalPIAmt = (Number) row.getAttribute("TransInvcAmtSp");
            /*            Double totalDoubAmt = new Double(0);
            if (this.getInvAmtRoundOff().compareTo(new Integer(905)) == 0) {
                totalPIAmt = totalPIAmt;
                _log.info("------ ad 905 return -- " + totalPIAmt);
            } else if (this.getInvAmtRoundOff().compareTo(new Integer(906)) == 0) {
                try {
                    totalDoubAmt = totalPIAmt.doubleValue();
                    Long amt = Math.round(totalDoubAmt);
                    totalPIAmt = new Number(amt);
                    _log.info("------ad 906 return -- " + totalPIAmt);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

            } else if (this.getInvAmtRoundOff().compareTo(new Integer(907)) == 0) {
                try {
                    totalDoubAmt = totalPIAmt.doubleValue();
                    totalDoubAmt = Math.floor(totalDoubAmt);
                    totalPIAmt = new Number(totalDoubAmt);
                    _log.info("------ad 907 return -- " + totalPIAmt);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

            } else if (this.getInvAmtRoundOff().compareTo(new Integer(908)) == 0) {
                try {
                    totalDoubAmt = totalPIAmt.doubleValue();
                    totalDoubAmt = Math.ceil(totalDoubAmt);
                    totalPIAmt = new Number(totalDoubAmt);
                    _log.info("------908 return -- " + totalPIAmt);
                } catch (Exception e) {
                    // TODO: Add catch code
                    e.printStackTrace();
                }

            } */
            totalPIAmt = this.getRoundOffInvoiceAmt(totalPIAmt);
        }

        Number totalPSAmt = getTotalPaymentSchdAmount();
        _log.info("total payment amount sp " + totalPSAmt + "pi amount is " + totalPIAmt);
        /**In Total pi amount comes total amount of purchase and receipt order and in ps amout is equal to current given price plus total added amount*/
        //    System.out.println("Total Amt : "+totalPIAmt);
        //  System.out.println("Total Amt : "+totalPSAmt);

        if (totalPIAmt.round(getAmtRoundOff()).compareTo(totalPSAmt.round(getAmtRoundOff())) == 0) {
            if (totalPIAmt.round(getAmtRoundOff()).compareTo(Number.zero()) == 0) {
                String msg2 = resolvEl("#{bundle['MSG.2140']}");
                //Total Purchase Invoice amount should be Greater than zero
                //   String msg2 = "Total Purchase Invoice amount should be Greater than zero)";
                FacesMessage message2 = new FacesMessage(msg2);
                message2.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message2);
                return Boolean.FALSE;
            }
            return Boolean.TRUE;
        }

        else if (totalPIAmt.round(getAmtRoundOff()).compareTo(Number.zero()) <= 0) {
            return Boolean.FALSE;
        }

        else {
            return Boolean.FALSE;
        }
    }

    /**
     * Container's getter for LovRcptStat1.
     * @return LovRcptStat1
     */
    public ViewObjectImpl getLovRcptStat1() {
        return (ViewObjectImpl) findViewObject("LovRcptStat1");
    }


    public Number getTotalAmt() {
        Row row = this.getMmInvc().getCurrentRow();
        Object num = row.getAttribute("TransInvcAmtSp");
        return (num != null) ? (Number) num : null;
    }

    /**
     * Container's getter for LovIssuVO1.
     * @return LovIssuVO1
     */
    public ViewObjectImpl getLovIssuVO1() {
        return (ViewObjectImpl) findViewObject("LovIssuVO1");
    }

    /**
     * Container's getter for LovWhVO1.
     * @return LovWhVO1
     */
    public ViewObjectImpl getLovWhVO1() {
        return (ViewObjectImpl) findViewObject("LovWhVO1");
    }

    /**
     * Container's getter for LovSrcOrgVO1.
     * @return LovSrcOrgVO1
     */
    public ViewObjectImpl getLovSrcOrgVO1() {
        return (ViewObjectImpl) findViewObject("LovSrcOrgVO1");
    }


    public String setCurrencyFactor(String OrgId) {
        ViewObjectImpl vo = this.getLovSrcOrgVO1();
        ViewObjectImpl voInvc = this.getMmInvc();
        Row r = vo.getCurrentRow();
        Row row = voInvc.getCurrentRow();

        //Object obj = r.getAttribute("OrgId");
        Integer p_curr_id_bs = null;
        String cldId = (String) row.getAttribute("CldId");
        Integer slocId = (Integer) row.getAttribute("SlocId");
        String orgId = (String) row.getAttribute("OrgId");
        BigDecimal result;
        Number num = new Number(1);
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        if (OrgId != null) {
            p_curr_id_bs = getDefualtOrgCurr(cldId, OrgId);
        }
        _log.info("currency id is " + p_curr_id_bs + "  orgId is " + OrgId + " " + cldId);


        String currNm = getCurrencyName(p_curr_id_bs, cldId, OrgId);

        _log.info("currency id is " + p_curr_id_bs + "  " + currNm + " orgid " + orgId + "  " + hoOrgId);
        if (p_curr_id_bs != getDefualtOrgCurr(cldId, orgId) && p_curr_id_bs != null) {
            result = (BigDecimal) callStoredFunction(Types.NUMERIC, "MM.MM_GET_CURR_CONV_FCTR(?,?,?,?,?)", new Object[] {
                                                     cldId, slocId, hoOrgId.toString(), orgId, p_curr_id_bs
            });


            if (result == null) {
                return "-1";
            } //return if Currency Factor not found against this Organisation.

            try {
                num = (Number) new Number(result).round(getGlblCurrDigit());
            } catch (SQLException e) {
                e.printStackTrace();
            }
            row.setAttribute("CurrIdSp", p_curr_id_bs);
            row.setAttribute("CurrConvFctr", num);
        } else {
            if (currNm != null) {
                row.setAttribute("TransCurrName", currNm);
            }
            row.setAttribute("CurrIdSp", p_curr_id_bs);
            row.setAttribute("CurrConvFctr", new Number(1));
        }

        Integer coaVal = (Integer) callStoredFunction(Types.INTEGER, "MM.MM_GET_ORG_TRF_COA(?,?,?)", new Object[] {
                                                      cldId, slocId, OrgId
        });

        if (coaVal != null) {
            if (coaVal == -1 || coaVal == -2) {
                return "-2";
            } else {
                row.setAttribute("CoaId", coaVal);
            }
        } else {
            return "-2";
        } //return if COA not found against this Orgnisation.

        return "1";
    }


    public void cleanUp() {
        ViewObjectImpl voInvc = this.getMmInvc();
        Row curr = voInvc.getCurrentRow();
        curr.setAttribute("CurrIdSp", null);
        curr.setAttribute("CurrConvFctr", new Number(0));
        curr.setAttribute("ExtDocDt", null);
        curr.setAttribute("ExtDocNo", null);
        curr.setAttribute("OrgIdSrc", null);
        curr.setAttribute("WhIdSrc", null);
        curr.setAttribute("EoIdSrc", null);
        curr.setAttribute("CoaId", null);
        curr.setAttribute("BillAddsId", null);
        curr.setAttribute("TransEoName", null);
        curr.setAttribute("TransSupAdd", null);

        ViewObjectImpl voSelectPI = this.getSelectedPIItem1();

        String sql =
            "Select C.Cld_Id,C.Sloc_Id,C.Org_Id,C.Doc_Id,C.Doc_Id_Rcpt,C.Doc_Id_Po,C.DLV_SCHDL_NO,C.Itm_Id,C.Itm_Uom,C.Foc_Flg," +
            "C.Final_Rcpt_Qty,C.Disc_Amt_Sp,C.Disc_Amt_Bs,C.Itm_Amt_Sp,C.Itm_Amt_Bs,C.Itm_Uom_Bs,C.Uom_Conv_Fctr," +
            "C.FINAL_RCPT_QTY_BS,C.ITM_PRICE From Mm.Mm$invc$itm C Where C.Cld_Id =:bindCldId  AND C.Sloc_Id =:bindSlocId AND C.Org_Id =:bindOrgId";
        voSelectPI.setQuery(sql);
        voSelectPI.setNamedWhereClauseParam("bindCldId", "-1");
        voSelectPI.setNamedWhereClauseParam("bindSlocId", -1);
        voSelectPI.setNamedWhereClauseParam("bindOrgId", "-1");
        voSelectPI.executeQuery();

        ViewObjectImpl voSelectedPI = this.getSrchPurInvcTrans1();
        voSelectedPI.setNamedWhereClauseParam("bindCldId", "-1");
        voSelectedPI.setNamedWhereClauseParam("bindSlocId", -1);
        voSelectedPI.setNamedWhereClauseParam("bindOrgId", "-1");
        voSelectedPI.setNamedWhereClauseParam("bindEoId", "-1");
        voSelectedPI.setNamedWhereClauseParam("bindItmId", null);
        voSelectedPI.setNamedWhereClauseParam("bindFrmDt", null);
        voSelectedPI.setNamedWhereClauseParam("bindToDt", null);
        voSelectedPI.setNamedWhereClauseParam("bindFyId", null);
        voSelectedPI.setNamedWhereClauseParam("bindCurrSpId", -1);
        voSelectedPI.executeQuery();


        ViewObjectImpl voSelectTI = this.getSelectTIItem();
        String sqlQuery =
            "Select C.Cld_Id,C.Sloc_Id,C.Org_Id,C.Doc_Id,C.Doc_Id_Rcpt,C.Doc_Id_Po,C.DLV_SCHDL_NO,C.Itm_Id,C.Itm_Uom,C.Foc_Flg,C.Final_Rcpt_Qty,C.Disc_Amt_Sp,C.Disc_Amt_Bs,C.Itm_Amt_Sp,C.Itm_Amt_Bs,C.Itm_Uom_Bs,C.Uom_Conv_Fctr,C.FINAL_RCPT_QTY_BS,C.ITM_PRICE From Mm.Mm$invc$itm C Where C.Cld_Id =:bindCldId" +
            " AND C.Sloc_Id =:bindSlocId" + " AND C.Org_Id =:bindOrgId";
        voSelectTI.setQuery(sqlQuery);
        voSelectTI.setNamedWhereClauseParam("bindCldId", "-1");
        voSelectTI.setNamedWhereClauseParam("bindSlocId", -1);
        voSelectTI.setNamedWhereClauseParam("bindOrgId", "-1");
        voSelectTI.executeQuery();


        ViewObjectImpl voSelectedTI = this.getSrchMMInvcTrans();
        voSelectedTI.setNamedWhereClauseParam("bindCldId", "-1");
        voSelectedTI.setNamedWhereClauseParam("bindSlocId", -1);
        voSelectedTI.setNamedWhereClauseParam("bindOrgId", "-1");
        voSelectedTI.setNamedWhereClauseParam("bindOrgSrcId", "-1");
        voSelectedTI.setNamedWhereClauseParam("bindWhSrcId", "-1");
        voSelectedTI.setNamedWhereClauseParam("bindItmId", null);
        voSelectedTI.setNamedWhereClauseParam("bindFrmDt", null);
        voSelectedTI.setNamedWhereClauseParam("bindToDt", null);
        voSelectedTI.setNamedWhereClauseParam("bindFyId", null);
        voSelectedTI.setNamedWhereClauseParam("bindCurrSpId", -1);
        voSelectedTI.executeQuery();


        this.getSrchSupp1().executeQuery();
    }

    public String addinvcType(Integer invcType) {
        if (invcType != null) {
            _log.info("invc type start  --------  " + invcType);
            //Integer invc=Integer.parseInt(invcType.toString());
            getMmInvc().getCurrentRow().setAttribute("InvcType", invcType);
            _log.info("invc type set is  --------  " + getMmInvc().getCurrentRow().getAttribute("InvcType"));
        }
        return null;
    }

    public void cleanUpOnInvcCreate() {
        ViewObjectImpl voSelectPI = this.getSelectedPIItem1();
        Row invcvo = this.getMmInvc().getCurrentRow();
        invcvo.setAttribute("TransDocName", null);
        invcvo.setAttribute("TransSrcDocId", null);

        String sql =
            "Select C.Cld_Id,C.Sloc_Id,C.Org_Id,C.Doc_Id,C.Doc_Id_Rcpt,C.Doc_Id_Po,C.DLV_SCHDL_NO,C.Itm_Id,C.Itm_Uom,C.Foc_Flg," +
            "C.Final_Rcpt_Qty,C.Disc_Amt_Sp,C.Disc_Amt_Bs,C.Itm_Amt_Sp,C.Itm_Amt_Bs,C.Itm_Uom_Bs,C.Uom_Conv_Fctr," +
            "C.FINAL_RCPT_QTY_BS,C.ITM_PRICE From Mm.Mm$invc$itm C Where C.Cld_Id =:bindCldId  AND C.Sloc_Id =:bindSlocId AND C.Org_Id =:bindOrgId";
        voSelectPI.setQuery(sql);
        voSelectPI.setNamedWhereClauseParam("bindCldId", "-1");
        voSelectPI.setNamedWhereClauseParam("bindSlocId", -1);
        voSelectPI.setNamedWhereClauseParam("bindOrgId", "-1");
        voSelectPI.executeQuery();

        ViewObjectImpl voSelectedPI = this.getSrchPurInvcTrans1();
        voSelectedPI.setNamedWhereClauseParam("bindCldId", "-1");
        voSelectedPI.setNamedWhereClauseParam("bindSlocId", -1);
        voSelectedPI.setNamedWhereClauseParam("bindOrgId", "-1");
        voSelectedPI.setNamedWhereClauseParam("bindEoId", "-1");
        voSelectedPI.setNamedWhereClauseParam("bindItmId", null);
        voSelectedPI.setNamedWhereClauseParam("bindFrmDt", null);
        voSelectedPI.setNamedWhereClauseParam("bindToDt", null);
        voSelectedPI.setNamedWhereClauseParam("bindFyId", null);
        voSelectedPI.setNamedWhereClauseParam("bindCurrSpId", -1);
        voSelectedPI.executeQuery();

        this.getSrchSupp1().executeQuery();
    }

    private String getCurrencyName(Integer currId, String cldId, String orgId) {
        ViewObjectImpl vo = this.getLovCurrency();
        RowQualifier rw = new RowQualifier(vo);
        rw.setWhereClause("CldId = '" + cldId + "' AND OrgId = '" + orgId + "' AND CcCurrId = " + currId + "");
        Row rows[] = vo.getFilteredRows(rw);
        if (rows.length > 0) {
            return (String) rows[0].getAttribute("CurrDescTxn");
        }

        return null;
    }

    /**
     * Container's getter for LovCpoVO1.
     * @return LovCpoVO1
     */
    public ViewObjectImpl getLovCpoVO1() {
        return (ViewObjectImpl) findViewObject("LovCpoVO1");
    }

    /**
     * Container's getter for CPOVO1.
     * @return CPOVO1
     */
    public ViewObjectImpl getCPOVO1() {
        return (ViewObjectImpl) findViewObject("CPOVO1");
    }


    public boolean chkValidation(Number amt) {
        ViewObject slsSo = this.getMmInvc();
        Row currSo = slsSo.getCurrentRow();
        Number totalAmt = (Number) currSo.getAttribute("TransPmtAmtSp");

        /*
       * System.out.println("Total Amt : "+totalAmt);
        Number payAmt = getTotalPaymentSchdAmount();
        System.out.println("Pay Amt : "+payAmt);
        payAmt=payAmt.add(amt);
        System.out.println("Pay After add Amt : "+payAmt);
        System.out.println(payAmt.round(2) +" == "+totalAmt.round(2));
        if(payAmt.round(2).compareTo(totalAmt.round(2)) >0)
         {return Boolean.FALSE;}
        */

        if (totalAmt.compareTo(0) <= 0) {
            return Boolean.FALSE;
        }

        return Boolean.TRUE;
    }

    /**
     * Container's getter for LovRcptCPO1.
     * @return LovRcptCPO1
     */
    public ViewObjectImpl getLovRcptCPO1() {
        return (ViewObjectImpl) findViewObject("LovRcptCPO1");
    }

    /**
     * Container's getter for MMDTLCOAVW1.
     * @return MMDTLCOAVW1
     */
    public ViewObjectImpl getMMDTLCOAVW1() {
        return (ViewObjectImpl) findViewObject("MMDTLCOAVW1");
    }

    /**
     * Container's getter for LovRcptCpo1_1.
     * @return LovRcptCpo1_1
     */
    public ViewObjectImpl getLovRcptCpo1_1() {
        return (ViewObjectImpl) findViewObject("LovRcptCpo1_1");
    }

    public Row getCurrentRow() {
        return this.getMmInvc().getCurrentRow();
    }

    /**
     * Container's getter for SrchSupp1.
     * @return SrchSupp1
     */
    public ViewObjectImpl getSrchSupp1() {
        return (ViewObjectImpl) findViewObject("SrchSupp1");
    }

    /**
     * Container's getter for SrchPurInvcTrans1.
     * @return SrchPurInvcTrans1
     */
    public ViewObjectImpl getSrchPurInvcTrans1() {
        return (ViewObjectImpl) findViewObject("SrchPurInvcTrans1");
    }


    public void executePurchaseInvoiceVO() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));

        ViewObjectImpl voTrns = this.getSrchSupp1();
        Row currRow = voTrns.getCurrentRow();

        ViewObjectImpl voInvc = this.getMmInvc();
        Row row = voInvc.getCurrentRow();
        Integer eoId = (Integer) row.getAttribute("EoIdSrc");
        ViewObjectImpl vo = this.getSrchPurInvcTrans1();
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", (Integer) slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindEoId", eoId);
        vo.setNamedWhereClauseParam("bindFrmDt", currRow.getAttribute("FromDate"));
        vo.setNamedWhereClauseParam("bindToDt", currRow.getAttribute("ToDate"));
        vo.setNamedWhereClauseParam("bindItmId", currRow.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindFyId", (Integer) row.getAttribute("FyId"));
        vo.setNamedWhereClauseParam("bindCurrSpId", (Integer) row.getAttribute("CurrIdSp"));
        vo.executeQuery();
    }

    /**
     * Container's getter for SelectedPurchaseInvoice1.
     * @return SelectedPurchaseInvoice1
     */
    public ViewObjectImpl getSelectedPurchaseInvoice1() {
        return (ViewObjectImpl) findViewObject("SelectedPurchaseInvoice1");
    }


    /*     public void selectedPurchaseInvoiceAction()
    {

       ViewObjectImpl vo = this.getSrchPurInvcTrans1();
       ViewObjectImpl voItm = this.getSrchPurchaseInvcItm1();
        ViewObjectImpl votempItm = this.getSelectedPurchaseInvoice1();
       RowSetIterator It = vo.createRowSetIterator(null);
       while(It.hasNext())
       {
           Row row = It.next();
           Boolean isChecked = (Boolean)row.getAttribute("TransCheck");
           if(isChecked != null && isChecked == true)
           {
            String docId = (String)row.getAttribute("DocId");
            RowQualifier rq = new RowQualifier(voItm);
            rq.setWhereClause("DocId = '"+docId+"'");
            Row rows[] = voItm.getFilteredRows(rq);

            for(Row rw:rows)
            {
                Row tempRow = votempItm.createRow();
                tempRow.setAttribute("ItmId", rw.getAttribute("ItmId"));
                tempRow.setAttribute("ItmDesc", rw.getAttribute("ItmId"));
                tempRow.setAttribute("CldId", rw.getAttribute("CldId"));
                tempRow.setAttribute("SlocId", rw.getAttribute("SlocId"));
                tempRow.setAttribute("OrgId", rw.getAttribute("OrgId"));
                tempRow.setAttribute("DocId", rw.getAttribute("DocId"));
                tempRow.setAttribute("OldPrice", rw.getAttribute("ItmPrice"));
                votempItm.insertRow(tempRow);
             }
           }
        }It.closeRowSetIterator();

    }
     */


    public boolean checkValidation() {
        ViewObjectImpl vo = this.getSrchPurInvcTrans1();
        RowSetIterator It = vo.createRowSetIterator(null);
        while (It.hasNext()) {
            Row row = It.next();
            Boolean isChecked = (Boolean) row.getAttribute("TransCheck");
            if (isChecked != null && isChecked == true) {
                return true;
            }
        }
        It.closeRowSetIterator();
        return false;
    }


    public void selectedPurchaseInvoiceAction() {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));


        ViewObjectImpl vo = this.getSrchPurInvcTrans1();
        ViewObjectImpl voItm = this.getSrchPurchaseInvcItm1();
        ViewObjectImpl votempItm = this.getSelectedPurchaseInvoice1();
        RowSetIterator It = vo.createRowSetIterator(null);
        Set<String> set = new HashSet<String>();
        while (It.hasNext()) {
            Row row = It.next();
            Boolean isChecked = (Boolean) row.getAttribute("TransCheck");
            if (isChecked != null && isChecked == true) {

                String docId = (String) row.getAttribute("DocId");
                set.add(docId);
            }
        }
        It.closeRowSetIterator();


        StringBuffer sb = new StringBuffer("DOC_ID IN ( ");

        int count = 1;
        for (String doc : set) {
            sb.append("'");
            sb.append(doc);
            sb.append("'");
            if (count < set.size()) {
                sb.append(" ,");
            }
            count++;
        }
        /*  sb.append("'");
        sb.append(set);
        sb.append("'");
        */

        sb.append(" )");

        //System.out.println("QUERY : "+sb.toString());
        _log.info("QUERY : " + sb.toString());
        ViewObjectImpl voPurItm = this.getSelectedPIItem1();
        voPurItm.setNamedWhereClauseParam("bindCldId", cldId);
        voPurItm.setNamedWhereClauseParam("bindSlocId", slocId);
        voPurItm.setNamedWhereClauseParam("bindOrgId", orgId);
        //    System.out.println(voPurItm.getQuery());
        /**becozz crash appear when we add fields **/
        StringBuffer sql = new StringBuffer(voPurItm.getQuery());

        sql.append(" AND ");
        sql.append(sb.toString());

        System.out.println(sql);
        voPurItm.setQuery(sql.toString());
        voPurItm.executeQuery();
    }


    /**
     * Container's getter for SrchPurchaseInvcItm1.
     * @return SrchPurchaseInvcItm1
     */
    public ViewObjectImpl getSrchPurchaseInvcItm1() {
        return (ViewObjectImpl) findViewObject("SrchPurchaseInvcItm1");
    }


    public void setDifferencePrice(Number newPrice) {
        Row row = this.getSelectedPIItem1().getCurrentRow();
        Number oldPrice = (Number) row.getAttribute("ItmPrice");
        if (newPrice != null && newPrice.compareTo(oldPrice) > 0) {
            Number diffPrice = newPrice.subtract(oldPrice);
            row.setAttribute("DiffPrice", diffPrice);
        }

        else if (newPrice != null && newPrice.compareTo(oldPrice) <= 0) {
            row.setAttribute("DiffPrice", 0);
        }

        else if (newPrice == null) {
            row.setAttribute("DiffPrice", 0);
        }
    }

    /**
     * Container's getter for SelectedPIItem1.
     * @return SelectedPIItem1
     */
    public ViewObjectImpl getSelectedPIItem1() {
        return (ViewObjectImpl) findViewObject("SelectedPIItem1");
    }


    public void setPerInSelectedPI(Number per) {

        ViewObjectImpl vo = this.getSelectedPIItem1();
        RowSetIterator it = vo.createRowSetIterator(null);
        while (it.hasNext()) {
            Row row = it.next();
            Number diffAmt = new Number(0);
            Number Price = (Number) row.getAttribute("ItmPrice");
            diffAmt = (Number) Price.mul(per.divide(100));
            row.setAttribute("NewPrice", Price.add(diffAmt));
            row.setAttribute("DiffPrice", diffAmt);
        }
        it.closeRowSetIterator();
    }

    public void setAmtInSelectedPI(Number amount) {

        ViewObjectImpl vo = this.getSelectedPIItem1();
        RowSetIterator it = vo.createRowSetIterator(null);
        while (it.hasNext()) {
            Row row = it.next();
            Number amt = new Number(0);
            Number Price = (Number) row.getAttribute("ItmPrice");
            amt = Price.add(amount);
            row.setAttribute("NewPrice", amt);
            row.setAttribute("DiffPrice", amount);
        }
        it.closeRowSetIterator();
    }

    /**
     * code to insert suplimentary transfer invoice detail 25-08-2014
     * */
    public String insertNewPurTransferInvc() {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));


        //System.out.println("insertNew Invoice");
        ViewObjectImpl voTr = this.getMmInvcTr1();
        ViewObjectImpl voTds = this.getMmInvcTds1();
        ViewObjectImpl vo = this.getSelectTIItem();
        ViewObjectImpl voDtl = this.getMmInvcDtl();
        ViewObjectImpl voSrc = this.getMmInvcSrc();
        ViewObjectImpl voItm = this.getMmInvcItm();
        ViewObjectImpl voInvc = this.getMmInvc();


        Set<String> dtlSet = new HashSet<String>();
        Set<DtlSrcBean> srcSet = new HashSet<DtlSrcBean>(); //code check for transfer no. check
        Set<String> invcSet = new HashSet<String>();
        Row invcRow = voInvc.getCurrentRow();
        ViewObjectImpl voissue = this.getLovIssuVO1();
        voissue.setNamedWhereClauseParam("bindOrgId", orgId);
        voissue.setNamedWhereClauseParam("bindSlocId", slocId);
        voissue.setNamedWhereClauseParam("bindCldId", cldId);
        voissue.executeQuery();

        ViewObjectImpl voTrfNo = this.getLovIssuNo(); //query changed for insert transfer order record
        voTrfNo.setNamedWhereClauseParam("bindCldId", cldId);
        voTrfNo.setNamedWhereClauseParam("bindSlocId", slocId);
        voTrfNo.setNamedWhereClauseParam("bindOrgId", orgId);
        voTrfNo.executeQuery();
        // ViewObjectImpl voRcpt = this.getLovRcptStat1();
        Number currencyFact = (Number) ((Number) invcRow.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());
        _log.info("issue hash set value is " + srcSet + " currency factor " + currencyFact);
        /*  ViewObjectImpl voPo = this.getLovPoNo();
        voPo.setNamedWhereClauseParam("bindCldId", cldId);
        voPo.setNamedWhereClauseParam("bindOrgId", orgId);
        voPo.setNamedWhereClauseParam("bindSlocId", slocId);
        */
        RowSetIterator it = vo.createRowSetIterator(null);
        while (it.hasNext()) {
            Row row = it.next();
            Number num = (Number) row.getAttribute("DiffPrice");
            Number qty = (Number) row.getAttribute("FinalRcptQtyBs");

            /*   System.out.println("Num :"+num);
            System.out.println("qty :"+qty);
            System.out.println("DocId :"+row.getAttribute("DocIdRcpt").toString());
          */
            if (num != null && num.compareTo(Number.zero()) > 0 && qty != null &&
                qty.compareTo(0) > 0) //reciept data inserted in set
            {
                dtlSet.add(row.getAttribute("DocIdRcpt").toString());
                invcSet.add(row.getAttribute("DocId").toString());
            }

        }
        it.closeRowSetIterator();

        for (String dtl : dtlSet) {
            Row newDtlRow = voDtl.createRow();
            newDtlRow.setAttribute("DocIdRcpt", dtl);
            Row r[] = voissue.getFilteredRows("DocId", dtl); //issue doc_id insertion detail entry

            if (r.length > 0) {
                newDtlRow.setAttribute("DocDtRcpt", r[0].getAttribute("IssuDt"));
            }

            else {
                newDtlRow.setAttribute("DocDtRcpt", new Timestamp(System.currentTimeMillis()));
            }

            voDtl.insertRow(newDtlRow);

            Row rows[] = vo.getFilteredRows("DocIdRcpt", dtl);

            for (Row row : rows) {
                Integer dlvschdlno = Integer.parseInt(row.getAttribute("DlvSchdlNo").toString());
                if (srcSet.add(new DtlSrcBean(dtl, row.getAttribute("DocIdPo").toString(),
                                              dlvschdlno))) //particular source data insertion
                {
                    Row rs[] =
                        voTrfNo.getFilteredRows("DocId",
                                                row.getAttribute("DocIdPo").toString()); //data will be inserted in transfer order

                    Row newSrcRow = voSrc.createRow();
                    newSrcRow.setAttribute("CldId", invcRow.getAttribute("CldId"));
                    newSrcRow.setAttribute("SlocId", invcRow.getAttribute("SlocId"));
                    newSrcRow.setAttribute("OrgId", invcRow.getAttribute("OrgId"));
                    newSrcRow.setAttribute("DocId", invcRow.getAttribute("DocId"));
                    newSrcRow.setAttribute("DocIdRcpt", dtl);
                    newSrcRow.setAttribute("DocIdPo", row.getAttribute("DocIdPo"));
                    newSrcRow.setAttribute("DlvSchdlNo", row.getAttribute("DlvSchdlNo"));
                    newSrcRow.setAttribute("DocDtPo", rs[0].getAttribute("TrfDt"));
                    newSrcRow.setAttribute("TaxAfterDiscFlg", "N");
                    newSrcRow.setAttribute("CurrConvFctr",
                                           (Number) ((Number) invcRow.getAttribute("CurrConvFctr")).round(getGlblCurrDigit()));
                    voSrc.insertRow(newSrcRow);


                    RowQualifier rq = new RowQualifier(vo);
                    rq.setWhereClause("DocIdRcpt = '" + dtl + "' AND DocIdPo = '" +
                                      row.getAttribute("DocIdPo").toString() + "'  AND DiffPrice > 0 and DlvSchdlNo=" +
                                      row.getAttribute("DlvSchdlNo"));
                    Row items[] = vo.getFilteredRows(rq);
                    _log.info("item wise filter rows is " + items.length);
                    for (Row item : items) //insertion in invoice item
                    {

                        Row newItmRow = voItm.createRow();
                        newItmRow.setAttribute("CldId", invcRow.getAttribute("CldId"));
                        newItmRow.setAttribute("SlocId", invcRow.getAttribute("SlocId"));
                        newItmRow.setAttribute("OrgId", invcRow.getAttribute("OrgId"));
                        newItmRow.setAttribute("DocId", invcRow.getAttribute("DocId"));
                        newItmRow.setAttribute("DocIdRcpt", dtl);
                        newItmRow.setAttribute("DocIdPo", row.getAttribute("DocIdPo"));
                        newItmRow.setAttribute("DlvSchdlNo", row.getAttribute("DlvSchdlNo"));
                        newItmRow.setAttribute("ItmId", item.getAttribute("ItmId"));
                        newItmRow.setAttribute("ItmUom", item.getAttribute("ItmUom"));
                        newItmRow.setAttribute("FinalRcptQty", item.getAttribute("FinalRcptQty"));
                        newItmRow.setAttribute("ItmPrice", item.getAttribute("DiffPrice"));
                        newItmRow.setAttribute("ItmPriceBs",
                                               ((Number) item.getAttribute("DiffPrice")).multiply(currencyFact));
                        newItmRow.setAttribute("DiscAmtSp", Number.zero());
                        newItmRow.setAttribute("DiscAmtBs", Number.zero());
                        newItmRow.setAttribute("FinalRcptQtyBs", item.getAttribute("FinalRcptQty"));
                        newItmRow.setAttribute("ItmPriceBsNew",
                                               ((Number) item.getAttribute("NewPrice")).multiply(currencyFact));
                        newItmRow.setAttribute("ItmPriceBsOld",
                                               ((Number) item.getAttribute("ItmPrice")).multiply(currencyFact));
                        newItmRow.setAttribute("ItmPriceNew", item.getAttribute("NewPrice"));
                        newItmRow.setAttribute("ItmPriceOld", item.getAttribute("ItmPrice"));
                        newItmRow.setAttribute("ItmAmtSp",
                                               ((Number) item.getAttribute("DiffPrice")).multiply((Number) item.getAttribute("FinalRcptQty")));
                        newItmRow.setAttribute("ItmAmtBs",
                                               (((Number) item.getAttribute("DiffPrice")).multiply((Number) item.getAttribute("FinalRcptQty"))).multiply(currencyFact));

                        Number taxableAmtSpCalc =
                            (Number) ((Number) item.getAttribute("DiffPrice")).multiply((Number) item.getAttribute("FinalRcptQty")).round(getAmtRoundOff());
                        newItmRow.setAttribute("TaxableAmtSp", taxableAmtSpCalc);
                        newItmRow.setAttribute("TaxableAmtBs",
                                               taxableAmtSpCalc.multiply(currencyFact).round(getAmtRoundOff()));
                        newItmRow.setAttribute("TaxableAmtSpOrig", taxableAmtSpCalc);
                        newItmRow.setAttribute("TaxableAmtBsOrig",
                                               taxableAmtSpCalc.multiply(currencyFact).round(getAmtRoundOff()));

                        voItm.insertRow(newItmRow);

                        /**
                        * need to check and verify this record for data insertion in mm$invc$trf
                        *
                        * */
                        RowQualifier trRq = new RowQualifier(voTr);
                        trRq.setWhereClause("CldId = '" + cldId + "' AND SlocId =" + slocId + " AND OrgId = '" + orgId +
                                            "' AND DocIdRcpt = '" + dtl + "' AND DocIdPo = '" +
                                            row.getAttribute("DocIdPo") + "' AND ItmId = '" +
                                            item.getAttribute("ItmId") + "' AND ItmUom = '" +
                                            item.getAttribute("ItmUom") + "'");
                        Row trRow[] = voTr.getFilteredRows(trRq);
                        if (trRow != null && trRow.length > 0) {
                            Row tr = this.getMmInvcTr().createRow();
                            tr.setAttribute("CldId", cldId);
                            tr.setAttribute("SlocId", slocId);
                            tr.setAttribute("OrgId", orgId);
                            tr.setAttribute("DocId", invcRow.getAttribute("DocId"));
                            tr.setAttribute("DocIdRcpt", dtl);
                            tr.setAttribute("DocIdPo", row.getAttribute("DocIdPo"));
                            tr.setAttribute("ItmId", item.getAttribute("ItmId"));
                            tr.setAttribute("ItmUom", item.getAttribute("ItmUom"));
                            tr.setAttribute("DlvSchdlNo", row.getAttribute("DlvSchdlNo"));
                            tr.setAttribute("TaxRuleId", trRow[0].getAttribute("TaxRuleId"));
                            tr.setAttribute("TaxableAmtSp", newItmRow.getAttribute("TransTaxableAmt"));
                            tr.setAttribute("TaxableAmtBs",
                                            ((Number) newItmRow.getAttribute("TransTaxableAmt")).multiply(currencyFact));
                            tr.setAttribute("TaxExmptFlg", trRow[0].getAttribute("TaxExmptFlg"));
                            tr.setAttribute("TaxRuleFlg", trRow[0].getAttribute("TaxRuleFlg"));
                            this.getMmInvcTr().insertRow(tr);
                            //   this.getDBTransaction().postChanges();

                            String p_doc_id = invcRow.getAttribute("DocId").toString();
                            String p_rcpt_doc_id = dtl;
                            String p_doc_id_po = row.getAttribute("DocIdPo").toString();
                            Integer p_schdl_no = (Integer) row.getAttribute("DlvSchdlNo");
                            String p_itm_id = item.getAttribute("ItmId").toString();
                            String p_itm_uom = item.getAttribute("ItmUom").toString();
                            Number taxbleAmt = (Number) newItmRow.getAttribute("TransTaxableAmt");
                            Integer txRuleId = (Integer) trRow[0].getAttribute("TaxRuleId");
                            String exmptFlg = (String) trRow[0].getAttribute("TaxExmptFlg");
                            if (exmptFlg == null) {
                                exmptFlg = "N";
                            }
                            /*
                                System.out.println("slocId : "+slocId);
                                System.out.println("cldId : "+cldId.toString());
                                System.out.println("hoOrgId : "+hoOrgId.toString());
                                System.out.println("orgId : "+orgId.toString());
                                System.out.println("p_doc_id : "+p_doc_id);
                                System.out.println("p_rcpt_doc_id : "+p_rcpt_doc_id);
                                System.out.println("p_doc_id_po : "+p_doc_id_po);
                                System.out.println("p_schdl_no : "+p_schdl_no);
                                System.out.println("p_itm_id : "+p_itm_id);
                                System.out.println("p_itm_uom : "+p_itm_uom);
                                System.out.println("txRuleId : "+txRuleId);
                                System.out.println("taxbleAmt : "+taxbleAmt);
                                System.out.println("cc : "+cc);
                                System.out.println("FlgExmpt : "+trRow[0].getAttribute("TaxExmptFlg"));
                                */
                            /**commented becoz in case of transfer order no tax is applicable*/
                            /*  BigDecimal ret =
                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                "MM.ins_inv_tr_lines(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                slocId, cldId.toString(), hoOrgId.toString(),
                                                                orgId.toString(), p_doc_id, p_rcpt_doc_id, p_doc_id_po,
                                                                p_schdl_no, p_itm_id, p_itm_uom, txRuleId, taxbleAmt,
                                                                "I", currencyFact, exmptFlg, "N"
                            });

                            BigDecimal retrnbl =
                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                "MM.MM_GET_REC_TAX_INVC(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                cldId.toString(), slocId, hoOrgId.toString(),
                                                                orgId.toString(), p_doc_id, p_doc_id_po, p_rcpt_doc_id,
                                                                p_schdl_no, p_itm_id, p_itm_uom, "N"
                            });
                            Number n = new Number(0);
                            Number n1 = new Number(0); */

                            // this.getDBTransaction().postChanges();
                            /*   try {
                                n = new Number(ret);
                                n1 = new Number(retrnbl);

                            } catch (SQLException e) {
                            }

                            newItmRow.setAttribute("TotTaxAmtSp", ret);
                            newItmRow.setAttribute("TotTaxAmtBs",
                                                   (Number) n.multiply(currencyFact).round(getAmtRoundOff()));
                            newItmRow.setAttribute("RecTaxAmtSp", retrnbl);
                            newItmRow.setAttribute("RecTaxAmtBs",
                                                   (Number) n1.multiply(currencyFact).round(getAmtRoundOff()));

                            //  System.out.println("Tax Amt : "+ret);
                            _log.info("tr lines in invc ines " + ret);
                            tr.setAttribute("TaxAmt", ret);
                            Number ret1 = new Number(1);
                            try {
                                ret1 = new Number(ret);
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }
 // tr.setAttribute("TaxAmtBs", ret1.multiply(currencyFact));*/
                            /**TAX AMT AND RECOVERABLE */


                            this.getMmInvcTrLines().executeQuery();
                            this.getMmInvcTrLines1().executeQuery();
                            this.getMmInvcTrLines2().executeQuery();


                        } // Tr and Tr Lines IF End
                        //this.getDBTransaction().postChanges();
                        Row[] rr1 = this.getMmInvcTrLines().getFilteredRows("DocId", invcRow.getAttribute("DocId"));

                        _log.info("       ----------------------------- " + rr1.length);
                        RowQualifier tdsRq = new RowQualifier(voTds);
                        tdsRq.setWhereClause("CldId = '" + cldId + "' AND SlocId =" + slocId + " AND OrgId = '" +
                                             orgId + "' AND DocIdRcpt = '" + dtl + "' AND DocIdPo = '" +
                                             row.getAttribute("DocIdPo") + "' AND ItmId = '" +
                                             item.getAttribute("ItmId") + "' AND ItmUom = '" +
                                             item.getAttribute("ItmUom") + "'");
                        Row tdsRow[] = voTds.getFilteredRows(tdsRq);
                        if (tdsRow != null && tdsRow.length > 0) {
                            Row tds = this.getMmInvcTds().createRow();
                            tds.setAttribute("CldId", cldId);
                            tds.setAttribute("SlocId", slocId);
                            tds.setAttribute("OrgId", orgId);
                            tds.setAttribute("DocId", invcRow.getAttribute("DocId"));
                            tds.setAttribute("DocIdRcpt", dtl);
                            tds.setAttribute("DocIdPo", row.getAttribute("DocIdPo"));
                            tds.setAttribute("ItmId", item.getAttribute("ItmId"));
                            tds.setAttribute("ItmUom", item.getAttribute("ItmUom"));
                            tds.setAttribute("DlvSchdlNo", row.getAttribute("DlvSchdlNo"));
                            tds.setAttribute("TdsRuleId", tdsRow[0].getAttribute("TdsRuleId"));
                            tds.setAttribute("TdsOnAmtSp", newItmRow.getAttribute("TransTaxableAmt"));
                            tds.setAttribute("TdsOnAmtBs",
                                             ((Number) newItmRow.getAttribute("TransTaxableAmt")).multiply(currencyFact));
                            tds.setAttribute("TdsExmptFlg", tdsRow[0].getAttribute("TdsExmptFlg"));
                            tds.setAttribute("TdsRuleFlg", tdsRow[0].getAttribute("TdsRuleFlg"));
                            this.getMmInvcTds().insertRow(tds);
                            // this.getDBTransaction().postChanges();

                            String p_doc_id = invcRow.getAttribute("DocId").toString();
                            String p_rcpt_doc_id = dtl;
                            String p_doc_id_po = row.getAttribute("DocIdPo").toString();
                            Integer p_schdl_no = (Integer) row.getAttribute("DlvSchdlNo");
                            String p_itm_id = item.getAttribute("ItmId").toString();
                            String p_itm_uom = item.getAttribute("ItmUom").toString();
                            Number taxbleAmt = (Number) newItmRow.getAttribute("TransTaxableAmt");
                            Integer tdsRuleId = (Integer) tdsRow[0].getAttribute("TdsRuleId");
                            String exmptFlg = (String) tds.getAttribute("TdsExmptFlg");
                            if (exmptFlg == null) {
                                exmptFlg = "N";
                            }

                            BigDecimal ret =
                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                "MM.INS_INV_TDS_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                slocId.toString(), cldId.toString(), hoOrgId.toString(),
                                                                orgId.toString(), p_doc_id, p_rcpt_doc_id, p_doc_id_po,
                                                                p_schdl_no, p_itm_id, p_itm_uom, tdsRuleId, taxbleAmt,
                                                                "I", currencyFact, exmptFlg, taxbleAmt, "N"
                            });
                            _log.info("Tds val:" + ret);
                            this.getMmInvcTds().getCurrentRow().setAttribute("TdsAmt", ret);
                            Number ret1 = new Number(1);
                            try {
                                ret1 = new Number(ret);
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            this.getMmInvcTds().getCurrentRow().setAttribute("TdsAmtBs", ret1.multiply(currencyFact));
                            this.getMmInvcTdsLines().executeQuery();
                        } //TDS AND TDSLINES END HERE...
                    }
                }
            } //nedd to add postchanges-------------
            this.getMmInvcTrLines().executeQuery();
            this.getMmInvcTrLines1().executeQuery();
            this.getMmInvcTrLines2().executeQuery();

        }

        // this.getDBTransaction().postChanges();
        ViewObjectImpl voSupple = this.getMmInvcSupple1();
        for (String invcdocNo : invcSet) {
            Row newR = voSupple.createRow();
            newR.setAttribute("DocIdRefInvc", invcdocNo);
            voSupple.insertRow(newR);
        }
        this.populateCCForItems(this.getMmInvc().getCurrentRow().getAttribute("DocId").toString());
        return null;
    }

    public void insertNewPurchaseInvoice() {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));


        //System.out.println("insertNew Invoice");
        ViewObjectImpl voTr = this.getMmInvcTr1();
        ViewObjectImpl voTds = this.getMmInvcTds1();

        ViewObjectImpl vo = this.getSelectedPIItem1();
        ViewObjectImpl voDtl = this.getMmInvcDtl();
        ViewObjectImpl voSrc = this.getMmInvcSrc();
        ViewObjectImpl voItm = this.getMmInvcItm();
        ViewObjectImpl voInvc = this.getMmInvc();

        Set<String> dtlSet = new HashSet<String>();
        Set<DtlSrcBean> srcSet = new HashSet<DtlSrcBean>(); //po no. match
        Set<String> invcSet = new HashSet<String>();
        Row invcRow = voInvc.getCurrentRow();
        ViewObjectImpl voRcpt = this.getLovRcptStat1();
        Number cc = (Number) ((Number) invcRow.getAttribute("CurrConvFctr")).round(getGlblCurrDigit());

        ViewObjectImpl voPo = this.getLovPoNo();
        voPo.setNamedWhereClauseParam("bindCldId", cldId);
        voPo.setNamedWhereClauseParam("bindOrgId", orgId);
        voPo.setNamedWhereClauseParam("bindSlocId", slocId);

        RowSetIterator it = vo.createRowSetIterator(null);
        while (it.hasNext()) {
            Row row = it.next();
            Number num = (Number) row.getAttribute("DiffPrice");
            Number qty = (Number) row.getAttribute("FinalRcptQty");

            /*   System.out.println("Num :"+num);
            System.out.println("qty :"+qty);
            System.out.println("DocId :"+row.getAttribute("DocIdRcpt").toString());
          */
            if (num != null && num.compareTo(Number.zero()) > 0 && qty != null &&
                qty.compareTo(0) > 0) //reciept data inserted in set
            {
                dtlSet.add(row.getAttribute("DocIdRcpt").toString());
                invcSet.add(row.getAttribute("DocId").toString());
            }

        }
        it.closeRowSetIterator();

        for (String dtl : dtlSet) {
            Row newDtlRow = voDtl.createRow();
            newDtlRow.setAttribute("DocIdRcpt", dtl);
            Row r[] = voRcpt.getFilteredRows("DocId", dtl); //reciept detail entry

            if (r.length > 0) {
                newDtlRow.setAttribute("DocDtRcpt", r[0].getAttribute("RcptDt"));
            }

            else {
                newDtlRow.setAttribute("DocDtRcpt", new Timestamp(System.currentTimeMillis()));
            }

            voDtl.insertRow(newDtlRow);

            Row rows[] = vo.getFilteredRows("DocIdRcpt", dtl);

            for (Row row : rows) {
                Integer dlvschdlno = Integer.parseInt(row.getAttribute("DlvSchdlNo").toString());
                if (srcSet.add(new DtlSrcBean(dtl, row.getAttribute("DocIdPo").toString(),
                                              dlvschdlno))) //particular source data insertion -- with diffrent schedule no in differetnt po case
                {
                    Row rs[] = voPo.getFilteredRows("DocId", row.getAttribute("DocIdPo").toString());

                    Row newSrcRow = voSrc.createRow();
                    newSrcRow.setAttribute("CldId", invcRow.getAttribute("CldId"));
                    newSrcRow.setAttribute("SlocId", invcRow.getAttribute("SlocId"));
                    newSrcRow.setAttribute("OrgId", invcRow.getAttribute("OrgId"));
                    newSrcRow.setAttribute("DocId", invcRow.getAttribute("DocId"));
                    newSrcRow.setAttribute("DocIdRcpt", dtl);
                    newSrcRow.setAttribute("DocIdPo", row.getAttribute("DocIdPo"));
                    newSrcRow.setAttribute("DlvSchdlNo", row.getAttribute("DlvSchdlNo"));
                    newSrcRow.setAttribute("DocDtPo", rs[0].getAttribute("PoDt"));
                    newSrcRow.setAttribute("TaxAfterDiscFlg", "N");
                    newSrcRow.setAttribute("CurrConvFctr",
                                           (Number) ((Number) invcRow.getAttribute("CurrConvFctr")).round(getGlblCurrDigit()));
                    voSrc.insertRow(newSrcRow);


                    RowQualifier rq = new RowQualifier(vo);
                    rq.setWhereClause("DocIdRcpt = '" + dtl + "' AND DocIdPo = '" +
                                      row.getAttribute("DocIdPo").toString() + "'  AND DiffPrice > 0 and DlvSchdlNo=" +
                                      row.getAttribute("DlvSchdlNo"));
                    Row items[] = vo.getFilteredRows(rq);

                    for (Row item : items) //insertion in invoice item
                    {
                        //final receipt quantity need to be changed becoz of partial quantity need to be generated for supplimentary invoice
                        Row newItmRow = voItm.createRow();
                        newItmRow.setAttribute("CldId", invcRow.getAttribute("CldId"));
                        newItmRow.setAttribute("SlocId", invcRow.getAttribute("SlocId"));
                        newItmRow.setAttribute("OrgId", invcRow.getAttribute("OrgId"));
                        newItmRow.setAttribute("DocId", invcRow.getAttribute("DocId"));
                        newItmRow.setAttribute("DocIdRcpt", dtl);
                        newItmRow.setAttribute("DocIdPo", row.getAttribute("DocIdPo"));
                        newItmRow.setAttribute("DlvSchdlNo", row.getAttribute("DlvSchdlNo"));
                        newItmRow.setAttribute("ItmId", item.getAttribute("ItmId"));
                        newItmRow.setAttribute("ItmUom", item.getAttribute("ItmUom"));
                        newItmRow.setAttribute("FinalRcptQty",
                                               item.getAttribute("TransFinlRcptQtyNew")); //getAttribute("FinalRcptQty") becoz of partial quantity issue
                        newItmRow.setAttribute("ItmPrice", item.getAttribute("DiffPrice"));
                        newItmRow.setAttribute("ItmPriceBs", ((Number) item.getAttribute("DiffPrice")).multiply(cc));
                        newItmRow.setAttribute("DiscAmtSp", Number.zero());
                        newItmRow.setAttribute("DiscAmtBs", Number.zero());
                        newItmRow.setAttribute("FinalRcptQtyBs",
                                               item.getAttribute("TransFinlRcptQtyNew")); //getAttribute("FinalRcptQty") becoz of partial quantity issue
                        newItmRow.setAttribute("ItmPriceBsNew", ((Number) item.getAttribute("NewPrice")).multiply(cc));
                        newItmRow.setAttribute("ItmPriceBsOld", ((Number) item.getAttribute("ItmPrice")).multiply(cc));
                        newItmRow.setAttribute("ItmPriceNew", item.getAttribute("NewPrice"));
                        newItmRow.setAttribute("ItmPriceOld", item.getAttribute("ItmPrice")); //
                        newItmRow.setAttribute("FinalRcptQtyOld", item.getAttribute("FinalRcptQty"));
                        newItmRow.setAttribute("FinalRcptQtyBsOld",
                                               (Number) ((Number) item.getAttribute("FinalRcptQty")).multiply(cc).round(getAmtRoundOff()));

                        Number taxableAmtSpCalc =
                            (Number) ((Number) item.getAttribute("DiffPrice")).multiply((Number) item.getAttribute("TransFinlRcptQtyNew")).round(getAmtRoundOff());
                        newItmRow.setAttribute("TaxableAmtSp", taxableAmtSpCalc);
                        newItmRow.setAttribute("TaxableAmtBs", taxableAmtSpCalc.multiply(cc).round(getAmtRoundOff()));
                        newItmRow.setAttribute("TaxableAmtSpOrig", taxableAmtSpCalc);
                        newItmRow.setAttribute("TaxableAmtBsOrig",
                                               taxableAmtSpCalc.multiply(cc).round(getAmtRoundOff()));

                        newItmRow.setAttribute("ItmAmtSp",
                                               ((Number) item.getAttribute("DiffPrice")).multiply((Number) item.getAttribute("TransFinlRcptQtyNew"))); //getAttribute("FinalRcptQty") becoz of partial quantity issue
                        newItmRow.setAttribute("ItmAmtBs",
                                               (((Number) item.getAttribute("DiffPrice")).multiply((Number) item.getAttribute("TransFinlRcptQtyNew"))).multiply(cc)); //getAttribute("FinalRcptQty") becoz of partial quantity issue

                        //insert land cost new
                        newItmRow.setAttribute("LndCostSp", (Number) item.getAttribute("NewPrice"));
                        newItmRow.setAttribute("LndCostBs", ((Number) item.getAttribute("NewPrice")).multiply(cc));

                        ViewObjectImpl lovIvcItm = this.getLovInvcItm();
                        lovIvcItm.setNamedWhereClauseParam("bindDocId", (String) item.getAttribute("DocId"));
                        lovIvcItm.setNamedWhereClauseParam("bindItmId", (String) item.getAttribute("ItmId"));
                        lovIvcItm.executeQuery();
                        Row[] invcR = lovIvcItm.getFilteredRows("ItmId", item.getAttribute("ItmId"));
                        _log.info("------->......................" + invcR.length);
                        if (invcR.length > 0) {
                            _log.info("------->......................length---" + invcR.length + "  " +
                                      invcR[0].getAttribute("LndCostSp"));
                            newItmRow.setAttribute("LndCostSpOld", invcR[0].getAttribute("LndCostSp"));
                            newItmRow.setAttribute("LndCostBsOld", invcR[0].getAttribute("LndCostBs"));

                        }
                        voItm.insertRow(newItmRow);


                        RowQualifier trRq = new RowQualifier(voTr);
                        trRq.setWhereClause("CldId = '" + cldId + "' AND SlocId =" + slocId + " AND OrgId = '" + orgId +
                                            "' AND DocIdRcpt = '" + dtl + "' AND DocIdPo = '" +
                                            row.getAttribute("DocIdPo") + "' AND ItmId = '" +
                                            item.getAttribute("ItmId") + "' AND ItmUom = '" +
                                            item.getAttribute("ItmUom") + "'");
                        Row trRow[] = voTr.getFilteredRows(trRq);
                        if (trRow != null && trRow.length > 0) {
                            Row tr = this.getMmInvcTr().createRow();
                            tr.setAttribute("CldId", cldId);
                            tr.setAttribute("SlocId", slocId);
                            tr.setAttribute("OrgId", orgId);
                            tr.setAttribute("DocId", invcRow.getAttribute("DocId"));
                            tr.setAttribute("DocIdRcpt", dtl);
                            tr.setAttribute("DocIdPo", row.getAttribute("DocIdPo"));
                            tr.setAttribute("ItmId", item.getAttribute("ItmId"));
                            tr.setAttribute("ItmUom", item.getAttribute("ItmUom"));
                            tr.setAttribute("DlvSchdlNo", row.getAttribute("DlvSchdlNo"));
                            tr.setAttribute("TaxRuleId", trRow[0].getAttribute("TaxRuleId"));
                            tr.setAttribute("TaxableAmtSp", newItmRow.getAttribute("TransTaxableAmt"));
                            tr.setAttribute("TaxableAmtBs",
                                            ((Number) newItmRow.getAttribute("TransTaxableAmt")).multiply(cc));
                            tr.setAttribute("TaxExmptFlg", trRow[0].getAttribute("TaxExmptFlg"));
                            tr.setAttribute("TaxRuleFlg", trRow[0].getAttribute("TaxRuleFlg"));
                            this.getMmInvcTr().insertRow(tr);
                            //   this.getDBTransaction().postChanges();

                            String p_doc_id = invcRow.getAttribute("DocId").toString();
                            String p_rcpt_doc_id = dtl;
                            String p_doc_id_po = row.getAttribute("DocIdPo").toString();
                            Integer p_schdl_no = (Integer) row.getAttribute("DlvSchdlNo");
                            String p_itm_id = item.getAttribute("ItmId").toString();
                            String p_itm_uom = item.getAttribute("ItmUom").toString();
                            Number taxbleAmt = (Number) newItmRow.getAttribute("TransTaxableAmt");
                            Number taxbleAmtOrig = new Number(0);
                            if (newItmRow.getAttribute("TaxableAmtSpOrig") != null)
                                taxbleAmtOrig = (Number) newItmRow.getAttribute("TaxableAmtSpOrig");

                            Integer txRuleId = (Integer) trRow[0].getAttribute("TaxRuleId");
                            String exmptFlg = (String) trRow[0].getAttribute("TaxExmptFlg");
                            String TaxRuleFlg = (String) trRow[0].getAttribute("TaxRuleFlg");
                            if (exmptFlg == null) {
                                exmptFlg = "N";
                            }
                            /*
                                System.out.println("slocId : "+slocId);
                                System.out.println("cldId : "+cldId.toString());
                                System.out.println("hoOrgId : "+hoOrgId.toString());
                                System.out.println("orgId : "+orgId.toString());
                                System.out.println("p_doc_id : "+p_doc_id);
                                System.out.println("p_rcpt_doc_id : "+p_rcpt_doc_id);
                                System.out.println("p_doc_id_po : "+p_doc_id_po);
                                System.out.println("p_schdl_no : "+p_schdl_no);
                                System.out.println("p_itm_id : "+p_itm_id);
                                System.out.println("p_itm_uom : "+p_itm_uom);
                                System.out.println("txRuleId : "+txRuleId);
                                System.out.println("taxbleAmt : "+taxbleAmt);
                                System.out.println("cc : "+cc);
                                System.out.println("FlgExmpt : "+trRow[0].getAttribute("TaxExmptFlg"));
                                */
                            BigDecimal ret =
                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                "MM.ins_inv_tr_lines(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                slocId, cldId.toString(), hoOrgId.toString(),
                                                                orgId.toString(), p_doc_id, p_rcpt_doc_id, p_doc_id_po,
                                                                p_schdl_no, p_itm_id, p_itm_uom, txRuleId,
                                                                taxbleAmtOrig, taxbleAmt, TaxRuleFlg, cc, exmptFlg, "N"
                            });
                            //  System.out.println("Tax Amt : "+ret);
                            BigDecimal retrnbl =
                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                "MM.MM_GET_REC_TAX_INVC(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                cldId.toString(), slocId, hoOrgId.toString(),
                                                                orgId.toString(), p_doc_id, p_doc_id_po, p_rcpt_doc_id,
                                                                p_schdl_no, p_itm_id, p_itm_uom, "N"
                            });
                            Number n = new Number(0);
                            Number n1 = new Number(0);

                            // this.getDBTransaction().postChanges();
                            try {
                                n = new Number(ret);
                                n1 = new Number(retrnbl);

                            } catch (SQLException e) {
                            }
                            /**TAX AMT AND RECOVERABLE */
                            newItmRow.setAttribute("TotTaxAmtSp", ret);
                            newItmRow.setAttribute("TotTaxAmtBs", (Number) n.multiply(cc).round(getAmtRoundOff()));
                            newItmRow.setAttribute("RecTaxAmtSp", retrnbl);
                            newItmRow.setAttribute("RecTaxAmtBs", (Number) n1.multiply(cc).round(getAmtRoundOff()));


                            tr.setAttribute("TaxAmt", ret);
                            Number ret1 = new Number(1);
                            try {
                                ret1 = new Number(ret);
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            tr.setAttribute("TaxAmtBs", ret1.multiply(cc));
                            this.getMmInvcTrLines().executeQuery();
                            this.getMmInvcTrLines1().executeQuery();
                            this.getMmInvcTrLines2().executeQuery();

                        } // Tr and Tr Lines IF End


                        RowQualifier tdsRq = new RowQualifier(voTds);
                        tdsRq.setWhereClause("CldId = '" + cldId + "' AND SlocId =" + slocId + " AND OrgId = '" +
                                             orgId + "' AND DocIdRcpt = '" + dtl + "' AND DocIdPo = '" +
                                             row.getAttribute("DocIdPo") + "' AND ItmId = '" +
                                             item.getAttribute("ItmId") + "' AND ItmUom = '" +
                                             item.getAttribute("ItmUom") + "'");
                        Row tdsRow[] = voTds.getFilteredRows(tdsRq);
                        if (tdsRow != null && tdsRow.length > 0) {
                            Row tds = this.getMmInvcTds().createRow();
                            tds.setAttribute("CldId", cldId);
                            tds.setAttribute("SlocId", slocId);
                            tds.setAttribute("OrgId", orgId);
                            tds.setAttribute("DocId", invcRow.getAttribute("DocId"));
                            tds.setAttribute("DocIdRcpt", dtl);
                            tds.setAttribute("DocIdPo", row.getAttribute("DocIdPo"));
                            tds.setAttribute("ItmId", item.getAttribute("ItmId"));
                            tds.setAttribute("ItmUom", item.getAttribute("ItmUom"));
                            tds.setAttribute("DlvSchdlNo", row.getAttribute("DlvSchdlNo"));
                            tds.setAttribute("TdsRuleId", tdsRow[0].getAttribute("TdsRuleId"));
                            tds.setAttribute("TdsOnAmtSp", newItmRow.getAttribute("TransTaxableAmt"));
                            tds.setAttribute("TdsOnAmtBs",
                                             ((Number) newItmRow.getAttribute("TransTaxableAmt")).multiply(cc));
                            tds.setAttribute("TdsExmptFlg", tdsRow[0].getAttribute("TdsExmptFlg"));
                            tds.setAttribute("TdsRuleFlg", tdsRow[0].getAttribute("TdsRuleFlg"));
                            this.getMmInvcTds().insertRow(tds);
                            // this.getDBTransaction().postChanges();

                            String p_doc_id = invcRow.getAttribute("DocId").toString();
                            String p_rcpt_doc_id = dtl;
                            String p_doc_id_po = row.getAttribute("DocIdPo").toString();
                            Integer p_schdl_no = (Integer) row.getAttribute("DlvSchdlNo");
                            String p_itm_id = item.getAttribute("ItmId").toString();
                            String p_itm_uom = item.getAttribute("ItmUom").toString();
                            Number taxbleAmt = (Number) newItmRow.getAttribute("TransTaxableAmt");
                            Integer tdsRuleId = (Integer) tdsRow[0].getAttribute("TdsRuleId");
                            String exmptFlg = (String) tds.getAttribute("TdsExmptFlg");
                            String tdsRuleFlg = (String) tds.getAttribute("TdsRuleFlg");
                            if (exmptFlg == null) {
                                exmptFlg = "N";
                            }

                            BigDecimal ret =
                                (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                                "MM.INS_INV_TDS_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                slocId.toString(), cldId.toString(), hoOrgId.toString(),
                                                                orgId.toString(), p_doc_id, p_rcpt_doc_id, p_doc_id_po,
                                                                p_schdl_no, p_itm_id, p_itm_uom, tdsRuleId, taxbleAmt,
                                                                tdsRuleFlg, cc, exmptFlg, taxbleAmt, "N"
                            });
                            _log.info("Tds val:" + ret);
                            this.getMmInvcTds().getCurrentRow().setAttribute("TdsAmt", ret);
                            Number ret1 = new Number(1);
                            try {
                                ret1 = new Number(ret);
                            } catch (SQLException e) {
                                e.printStackTrace();
                            }

                            this.getMmInvcTds().getCurrentRow().setAttribute("TdsAmtBs", ret1.multiply(cc));
                            this.getMmInvcTdsLines().executeQuery();
                        } //TDS AND TDSLINES END HERE...
                    }
                }
            }
        }

        ViewObjectImpl voSupple = this.getMmInvcSupple1();
        for (String invcdocNo : invcSet) {
            Row newR = voSupple.createRow();
            newR.setAttribute("DocIdRefInvc", invcdocNo);
            voSupple.insertRow(newR);
        }

        /*
        *  ViewObjectImpl voSrch = this.getSrchPurInvcTrans1();
         RowSetIterator It = voSrch.createRowSetIterator(null);
              while(It.hasNext())
              {
                  Row row = It.next();

                  Boolean isChecked = (Boolean)row.getAttribute("TransCheck");
                  if(isChecked != null && isChecked == true)
                  {
                   String docId = (String)row.getAttribute("DocId");
                      Row newR = voSupple.createRow();
                      newR.setAttribute("DocIdRefInvc", docId);
                      voSupple.insertRow(newR);
                  }
               }It.closeRowSetIterator();
        */
        this.populateCCForItems(this.getMmInvc().getCurrentRow().getAttribute("DocId").toString());
    }


    public Boolean checkEoExist() {
        ViewObjectImpl vo = this.getMmInvc();
        Row row = vo.getCurrentRow();
        try {
            Integer eoId = (Integer) row.getAttribute("EoIdSrc");
            if (eoId != null || eoId > 0) {
                return Boolean.TRUE;
            }
        } catch (NullPointerException npe) {
            return Boolean.FALSE;
        } catch (Exception ex) {
            return Boolean.FALSE;
        }
        return Boolean.FALSE;
    }


    public Boolean checkCurrencyExist() {
        ViewObjectImpl vo = this.getMmInvc();
        Row row = vo.getCurrentRow();
        try {
            Integer currId = (Integer) row.getAttribute("CurrIdSp");
            //       System.out.println("currId : "+currId);
            if (currId != null || currId > 0) {
                return Boolean.TRUE;
            }
        } catch (NullPointerException npe) {
            return Boolean.FALSE;
        } catch (Exception ex) {
            return Boolean.FALSE;
        }
        return Boolean.FALSE;
    }

    /**
     * Container's getter for MmInvcSupple1.
     * @return MmInvcSupple1
     */
    public ViewObjectImpl getMmInvcSupple1() {
        return (ViewObjectImpl) findViewObject("MmInvcSupple1");
    }

    /**
     * Container's getter for FkMMInvcSuppleVL1.
     * @return FkMMInvcSuppleVL1
     */
    public ViewLinkImpl getFkMMInvcSuppleVL1() {
        return (ViewLinkImpl) findViewLink("FkMMInvcSuppleVL1");
    }

    public String checkItemSelectedTI() {

        ViewObjectImpl vo = this.getSelectTIItem();
        RowSetIterator it = vo.createRowSetIterator(null);
        while (it.hasNext()) {
            Row row = it.next();
            Number str = (Number) row.getAttribute("DiffPrice");
            _log.info("difference value ok and return " + str.compareTo(0));

            if (str != null && str.compareTo(0) > 0) {
                it.closeRowSetIterator();
                return "Y";
            }
        }
        it.closeRowSetIterator();
        _log.info("difference value ok and return N");

        return "N";
    }

    public Boolean checkItemSelectedPI() {

        ViewObjectImpl vo = this.getSelectedPIItem1();
        RowSetIterator it = vo.createRowSetIterator(null);
        while (it.hasNext()) {
            Row row = it.next();
            Number str = (Number) row.getAttribute("DiffPrice");
            if (str != null && str.compareTo(0) > 0) {
                it.closeRowSetIterator();
                return Boolean.TRUE;
            }
        }
        it.closeRowSetIterator();

        return Boolean.FALSE;
    }


    public void cleanSelectedInvoiceVo() {
        ViewObjectImpl voSelectPI = this.getSelectedPIItem1();

        String sql =
            "Select C.Cld_Id,C.Sloc_Id,C.Org_Id,C.Doc_Id,C.Doc_Id_Rcpt,C.Doc_Id_Po,C.DLV_SCHDL_NO,C.Itm_Id,C.Itm_Uom,C.Foc_Flg," +
            "C.Final_Rcpt_Qty,C.Disc_Amt_Sp,C.Disc_Amt_Bs,C.Itm_Amt_Sp,C.Itm_Amt_Bs,C.Itm_Uom_Bs,C.Uom_Conv_Fctr," +
            "C.FINAL_RCPT_QTY_BS,C.ITM_PRICE From Mm.Mm$invc$itm C Where C.Cld_Id =:bindCldId  AND C.Sloc_Id =:bindSlocId AND C.Org_Id =:bindOrgId";
        voSelectPI.setQuery(sql);
        voSelectPI.setNamedWhereClauseParam("bindCldId", "-1");
        voSelectPI.setNamedWhereClauseParam("bindSlocId", -1);
        voSelectPI.setNamedWhereClauseParam("bindOrgId", "-1");
        voSelectPI.executeQuery();
    }

    /**
     * Container's getter for AppDocTxn1.
     * @return AppDocTxn1
     */
    public ViewObjectImpl getAppDocTxn1() {
        return (ViewObjectImpl) findViewObject("AppDocTxn1");
    }


    public Integer checkReceiptInCPO() {
        ViewObjectImpl dtlVo = this.getMmInvcDtl();
        ViewObjectImpl invcVo = this.getMmInvc();
        ViewObjectImpl cpRcptVo = this.getMMDTLCOAVW1();

        Row row = invcVo.getCurrentRow();
        if (row.getAttribute("TransSrcDocId") != null) {
            String rcptdocId = row.getAttribute("TransSrcDocId").toString();

            Integer count = dtlVo.getRowCount();
            if (count > 0) {

                String cldId = (String) row.getAttribute("CldId");
                Integer SlocId = Integer.parseInt(row.getAttribute("SlocId").toString());
                String OrgId = (String) row.getAttribute("OrgId");
                Integer coaId = (Integer) row.getAttribute("CoaId");
                Integer currId = (Integer) row.getAttribute("CurrIdSp");
                RowQualifier rq = new RowQualifier(cpRcptVo);
                rq.setWhereClause("CldId = '" + cldId + "' AND SlocId = " + SlocId + " AND OrgId = '" + OrgId +
                                  "' AND RcptDocId = '" + rcptdocId + "' AND CoaId = " + coaId + " AND CurrIdSp = " +
                                  currId + "");
                Row rs[] = cpRcptVo.getFilteredRows(rq);
                if (rs.length == 0) {
                    return -1;
                } //Receipt can not be add beacause of different Coa and Currency.
            }
        }
        return 1;
    }

    private Integer getAmtRoundOff() {
        Integer roundOff = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_AMT_DIGIT}").toString());
        if (roundOff == null) {
            return 2;
        }
        return roundOff;
    }

    private Integer getCurrRoundOff() {
        Integer roundOff = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_CURR_DIGIT}").toString());
        if (roundOff == null) {
            return 2;
        }
        return roundOff;
    }


    public Boolean checkTaxRuleApplied() {
        Row invc = this.getMmInvc().getCurrentRow();
        String orgId = invc.getAttribute("OrgId").toString();
        String orgSrcId = invc.getAttribute("OrgIdSrc").toString();
        if (orgId.equals(orgSrcId)) {
            return Boolean.FALSE;
        } else {
            return Boolean.TRUE;
        }
    }

    /**
     * Container's getter for LovStat1.
     * @return LovStat1
     */
    public ViewObjectImpl getLovStat1() {
        return (ViewObjectImpl) findViewObject("LovStat1");
    }

    /**
     * Container's getter for LovStat2.
     * @return LovStat2
     */
    public ViewObjectImpl getLovStat2() {
        return (ViewObjectImpl) findViewObject("LovStat2");
    }

    /**
     * Container's getter for LovTrfStat.
     * @return LovTrfStat
     */
    public ViewObjectImpl getLovTrfStat() {
        return (ViewObjectImpl) findViewObject("LovTrfStat");
    }

    /**
     * Container's getter for LovUsrId.
     * @return LovUsrId
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl) findViewObject("LovUsrId");
    }


    public String getUserName(Integer userId) {
        ViewObjectImpl vo = this.getLovUsrId();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("SlocId = " + slocId + " AND UsrId = " + userId + "");
        Row row[] = vo.getFilteredRows(rq);
        if (row.length > 0) {
            String usrName = row[0].getAttribute("UsrName").toString();
            return usrName;
        }
        return "Anonymous";
    }


    public void refreshAllLovs() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));

        this.getLovRcpt().executeQuery();
        this.getLovRcptCPO1().executeQuery();
        ViewObjectImpl voIssu = this.getLovIssuVO1();
        voIssu.setNamedWhereClauseParam("bindCldId", cldId.toString());
        voIssu.setNamedWhereClauseParam("bindSlocId", slocId);
        voIssu.setNamedWhereClauseParam("bindOrgId", orgId.toString());
        voIssu.executeQuery();
    }

    /**
     * Container's getter for LovAdds1.
     * @return LovAdds1
     */
    public ViewObjectImpl getLovAdds1() {
        return (ViewObjectImpl) findViewObject("LovAdds1");
    }


    public void setDefaultAddress() {
        /* Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));

        ViewObjectImpl addVo = this.getLovSupplier1();
        ViewObjectImpl invcVo = this.getMmInvc();
        addVo.setNamedWhereClauseParam("bindCldId", cldId.toString());
        addVo.setNamedWhereClauseParam("bindSlocId", slocId);
        addVo.setNamedWhereClauseParam("bindOrgId", orgId.toString());
        Row curr = invcVo.getCurrentRow();
        Integer supId=(Integer)curr.getAttribute("CurrIdSp");
        Row[] rw= addVo.getFilteredRows("EoId", supId);


        if(rw.length>0)
        {
      //    System.out.println(rw[0].getAttribute("DfltBillAdds").toString());
        } */

    }

    /**
     * Container's getter for Item.
     * @return Item
     */
    public ViewObjectImpl getItem() {
        return (ViewObjectImpl) findViewObject("Item");
    }

    /**
     * Container's getter for TransOC1.
     * @return TransOC1
     */
    public ViewObjectImpl getTransOC1() {
        return (ViewObjectImpl) findViewObject("TransOC1");
    }


    public void addCoa() {
        ViewObjectImpl vo = (ViewObjectImpl) this.getMmInvcOc();
        ViewObjectImpl trnsVo = (ViewObjectImpl) this.getTransOC1();
        ViewObjectImpl invc = (ViewObjectImpl) this.getMmInvc();

        Row ocRow = trnsVo.getCurrentRow();
        Number cc = (Number) ((Number) invc.getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblCurrDigit());
        Number spAmt = (Number) ocRow.getAttribute("TransSpAmt");
        Row row = vo.createRow();
        row.setAttribute("CoaId", ocRow.getAttribute("CoaId"));
        row.setAttribute("OcAmtSp", ocRow.getAttribute("TransSpAmt"));
        row.setAttribute("OcAmtBs", spAmt.multiply(cc));
        row.setAttribute("OcId", "0");
        vo.insertRow(row);
        vo.executeQuery();
        trnsVo.executeQuery();
    }

    /**
     * Container's getter for LovCoaOC.
     * @return LovCoaOC
     */
    public ViewObjectImpl getLovCoaOC() {
        return (ViewObjectImpl) findViewObject("LovCoaOC");
    }


    public Boolean checkDuplicateCoa() {
        ViewObjectImpl trnsVo = (ViewObjectImpl) this.getTransOC1();
        Row ocRow = trnsVo.getCurrentRow();
        Integer coaId = (Integer) ocRow.getAttribute("CoaId");
        ViewObjectImpl voOc = (ViewObjectImpl) this.getMmInvcOc();

        RowSetIterator it = voOc.createRowSetIterator(null);
        while (it.hasNext()) {
            Row r = it.next();
            if (ocRow.getAttribute("CoaId").equals(r.getAttribute("CoaId"))) {
                it.closeRowSetIterator();
                return Boolean.TRUE;
            }
        }
        it.closeRowSetIterator();

        return Boolean.FALSE;
    }

    /**
     * Container's getter for LovSupVw.
     * @return LovSupVw
     */
    public ViewObjectImpl getLovSupVw() {
        return (ViewObjectImpl) findViewObject("LovSupVw");
    }

    /**
     * Container's getter for LovUomVw.
     * @return LovUomVw
     */
    public ViewObjectImpl getLovUomVw() {
        return (ViewObjectImpl) findViewObject("LovUomVw");
    }

    /**
     * Container's getter for SrchTrnsInvc.
     * @return SrchTrnsInvc
     */
    public ViewObjectImpl getSrchTrnsInvc() {
        return (ViewObjectImpl) findViewObject("SrchTrnsInvc");
    }

    /**
     * Container's getter for SrchMMInvcTrans.
     * @return SrchMMInvcTrans
     */
    public ViewObjectImpl getSrchMMInvcTrans() {
        return (ViewObjectImpl) findViewObject("SrchMMInvcTrans");
    }


    public void executeTransferInvoiceVO() {
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));

        ViewObjectImpl voTrns = this.getSrchTrnsInvc();
        Row currRow = voTrns.getCurrentRow();

        ViewObjectImpl voInvc = this.getMmInvc();
        Row row = voInvc.getCurrentRow();
        String orgSrcId = (String) row.getAttribute("OrgIdSrc");
        String whSrcId = (String) row.getAttribute("WhIdSrc");

        ViewObjectImpl vo = this.getSrchMMInvcTrans();
        //_log.info("from date "+currRow.getAttribute("FromDate")+"to date "+currRow.getAttribute("ToDate") +" itmid "+currRow.getAttribute("ItmId")+" whid src "+whSrcId+" orgSrcId"+orgSrcId);
        //_log.info("fy id is= "+ row.getAttribute("FyId")+" curr id sp= "+row.getAttribute("CurrIdSp"));
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindOrgId", orgId);
        vo.setNamedWhereClauseParam("bindOrgSrcId", orgSrcId);
        vo.setNamedWhereClauseParam("bindWhSrcId", whSrcId);
        vo.setNamedWhereClauseParam("bindFrmDt", currRow.getAttribute("FromDate"));
        vo.setNamedWhereClauseParam("bindToDt", currRow.getAttribute("ToDate"));
        vo.setNamedWhereClauseParam("bindItmId", currRow.getAttribute("ItmId"));
        vo.setNamedWhereClauseParam("bindFyId", row.getAttribute("FyId"));
        vo.setNamedWhereClauseParam("bindCurrSpId", row.getAttribute("CurrIdSp"));
        vo.executeQuery();
        _log.info("vo query is = " + vo.getQuery());
    }

    /**
     * Container's getter for SelectTIItem.
     * @return SelectTIItem
     */
    public ViewObjectImpl getSelectTIItem() {
        return (ViewObjectImpl) findViewObject("SelectTIItem");
    }


    public void selectedTransferInvoiceAction() {

        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));


        ViewObjectImpl vo = this.getSrchMMInvcTrans();
        RowSetIterator It = vo.createRowSetIterator(null);
        Set<String> set = new HashSet<String>();
        while (It.hasNext()) {
            Row row = It.next();
            Boolean isChecked = (Boolean) row.getAttribute("TrMMChk");
            if (isChecked != null && isChecked == true) {

                String docId = (String) row.getAttribute("DocId");
                set.add(docId);
            }
        }
        It.closeRowSetIterator();


        StringBuffer sb = new StringBuffer("DOC_ID IN ( ");

        int count = 1;
        for (String doc : set) {
            sb.append("'");
            sb.append(doc);
            sb.append("'");
            if (count < set.size()) {
                sb.append(" ,");
            }
            count++;
        }
        sb.append(" )");

        //System.out.println("QUERY : "+sb.toString());

        ViewObjectImpl voInvcItm = this.getSelectTIItem();
        voInvcItm.setNamedWhereClauseParam("bindCldId", cldId);
        voInvcItm.setNamedWhereClauseParam("bindSlocId", slocId);
        voInvcItm.setNamedWhereClauseParam("bindOrgId", orgId);
        //    System.out.println(voPurItm.getQuery());
        StringBuffer sql = new StringBuffer(voInvcItm.getQuery());
        sql.append(" AND ");
        sql.append(sb.toString());

        // System.out.println(sql);
        voInvcItm.setQuery(sql.toString());
        voInvcItm.executeQuery();
    }


    public void cleanSelectedTrfInvoiceVo() {
        ViewObjectImpl voSelectTI = this.getSelectTIItem();

        String sql =
            "Select C.Cld_Id,C.Sloc_Id,C.Org_Id,C.Doc_Id,C.Doc_Id_Rcpt,C.Doc_Id_Po,C.DLV_SCHDL_NO,C.Itm_Id,C.Itm_Uom,C.Foc_Flg," +
            "C.Final_Rcpt_Qty,C.Disc_Amt_Sp,C.Disc_Amt_Bs,C.Itm_Amt_Sp,C.Itm_Amt_Bs,C.Itm_Uom_Bs,C.Uom_Conv_Fctr," +
            "C.FINAL_RCPT_QTY_BS,C.ITM_PRICE From Mm.Mm$invc$itm C Where C.Cld_Id =:bindCldId  AND C.Sloc_Id =:bindSlocId AND C.Org_Id =:bindOrgId";
        voSelectTI.setQuery(sql);
        voSelectTI.setNamedWhereClauseParam("bindCldId", "-1");
        voSelectTI.setNamedWhereClauseParam("bindSlocId", -1);
        voSelectTI.setNamedWhereClauseParam("bindOrgId", "-1");
        voSelectTI.executeQuery();
    }

    /**
     * Container's getter for IssuVw.
     * @return IssuVw
     */
    public ViewObjectImpl getIssuVw() {
        return (ViewObjectImpl) findViewObject("IssuVw");
    }

    /**
     * Container's getter for TrfOrdVw.
     * @return TrfOrdVw
     */
    public ViewObjectImpl getTrfOrdVw() {
        return (ViewObjectImpl) findViewObject("TrfOrdVw");
    }


    public void setAmtInSelectedPI1(Number amount) {

        ViewObjectImpl vo = this.getSelectTIItem();
        RowSetIterator it = vo.createRowSetIterator(null);
        while (it.hasNext()) {
            Row row = it.next();
            Number amt = new Number(0);
            Number Price = (Number) row.getAttribute("ItmPrice");
            amt = Price.add(amount);
            row.setAttribute("NewPrice", amt);
            row.setAttribute("DiffPrice", amount);
        }
        it.closeRowSetIterator();
    }


    public void setPerInSelectedPI1(Number per) {

        ViewObjectImpl vo = this.getSelectTIItem();
        RowSetIterator it = vo.createRowSetIterator(null);
        while (it.hasNext()) {
            Row row = it.next();
            Number diffAmt = new Number(0);
            Number Price = (Number) row.getAttribute("ItmPrice");
            diffAmt = (Number) Price.mul(per.divide(100));
            row.setAttribute("NewPrice", Price.add(diffAmt));
            row.setAttribute("DiffPrice", diffAmt);
        }
        it.closeRowSetIterator();
    }


    public boolean checkValidation1() {
        ViewObjectImpl vo = this.getSrchMMInvcTrans();
        RowSetIterator It = vo.createRowSetIterator(null);
        while (It.hasNext()) {
            Row row = It.next();
            Boolean isChecked = (Boolean) row.getAttribute("TrMMChk");
            if (isChecked != null && isChecked == true) {
                return true;
            }
        }
        It.closeRowSetIterator();
        return false;
    }

    /**
     * Container's getter for LovIssuNo.
     * @return LovIssuNo
     */
    public ViewObjectImpl getLovIssuNo() {
        return (ViewObjectImpl) findViewObject("LovIssuNo");
    }


    /**
     * Container's getter for LovIssuforview.
     * @return LovIssuforview
     */
    public ViewObjectImpl getLovIssuforview() {
        return (ViewObjectImpl) findViewObject("LovIssuforview");
    }

    /**
     * Container's getter for LovSupplierTune.
     * @return LovSupplierTune
     */
    public ViewObjectImpl getLovSupplierTune() {
        return (ViewObjectImpl) findViewObject("LovSupplierTune");
    }

    /**
     * Container's getter for MmInvcTrLines3.
     * @return MmInvcTrLines3
     */
    public ViewObjectImpl getMmInvcTrLines3() {
        return (ViewObjectImpl) findViewObject("MmInvcTrLines3");
    }

    /**
     * Container's getter for LovFrCnsmbl.
     * @return LovFrCnsmbl
     */
    public ViewObjectImpl getLovFrCnsmbl() {
        return (ViewObjectImpl) findViewObject("LovFrCnsmbl");
    }

    /**
     * Container's getter for LovFrSrvcInvc.
     * @return LovFrSrvcInvc
     */
    public ViewObjectImpl getLovFrSrvcInvc() {
        return (ViewObjectImpl) findViewObject("LovFrSrvcInvc");
    }

    /**
     * Container's getter for AppRmrks.
     * @return AppRmrks
     */
    public ViewObjectImpl getAppRmrks() {
        return (ViewObjectImpl) findViewObject("AppRmrks");
    }

    /**
     * Container's getter for AppWfAtch.
     * @return AppWfAtch
     */
    public ViewObjectImpl getAppWfAtch() {
        return (ViewObjectImpl) findViewObject("AppWfAtch");
    }

    /**
     * Container's getter for LovRcptNoFltrDtl1.
     * @return LovRcptNoFltrDtl1
     */
    public ViewObjectImpl getLovRcptNoFltrDtl() {
        return (ViewObjectImpl) findViewObject("LovRcptNoFltrDtl");
    }

    /**
     * Container's getter for LovOcDoc1.
     * @return LovOcDoc1
     */
    public ViewObjectImpl getLovOcDoc() {
        return (ViewObjectImpl) findViewObject("LovOcDoc");
    }

    /**
     * Container's getter for MmInvcOc1.
     * @return MmInvcOc1
     */
    public ViewObjectImpl getMmInvcOc1() {
        return (ViewObjectImpl) findViewObject("MmInvcOc1");
    }

    /**
     * Container's getter for LovInvcItmVO1.
     * @return LovInvcItmVO1
     */
    public ViewObjectImpl getLovInvcItm() {
        return (ViewObjectImpl) findViewObject("LovInvcItm");
    }

    /**METHOD FOR COST CENTER***/

    /**
     * Method which will let us know whether cost center is applicable for this current document or not
     */
    public Boolean chkCcApplicableOrNot() {
        Boolean val = false;
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl appCcDocVO1 = this.getAppCcDoc1();
        appCcDocVO1.setNamedWhereClauseParam("BindCldId", cld_id);
        appCcDocVO1.setNamedWhereClauseParam("BindSlocId", slocId);
        appCcDocVO1.setNamedWhereClauseParam("BindHoOrgId", hoOrg_id);
        appCcDocVO1.setNamedWhereClauseParam("BindOrgId", orgId);
        appCcDocVO1.setNamedWhereClauseParam("BindDocId", 18504);
        appCcDocVO1.executeQuery();

        Row[] allRowsInRange = appCcDocVO1.getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            val = true;
        }

        return val;
    }

    /**
     * Container's getter for AppCcDoc1.
     * @return AppCcDoc1
     */
    public ViewObjectImpl getAppCcDoc1() {
        return (ViewObjectImpl) findViewObject("AppCcDoc1");
    }


    public AppCostCenterServiceAMImpl getAppAM() {
        String appModuleName = "appCostCenterSevice.model.service.AppCostCenterServiceAM";
        String appModuleConfig = "AppCostCenterServiceAMLocal";
        return (AppCostCenterServiceAMImpl) Configuration.createRootApplicationModule(appModuleName, appModuleConfig);
    }


    public void releaseAppAM(AppCostCenterServiceAMImpl appCostCenter) {
        Configuration.releaseRootApplicationModule((ApplicationModule) appCostCenter, true);
    }

    @Override
    protected void finalize() throws Throwable {

        releaseAppAM(getAppAM());

        super.finalize();
    }

    /**
     * Method which will set Global Parameter Values and will be called before opening AppCostCenterServicesTF
     */
    public void declareGlblValuesForCC() {
        ViewObjectImpl appCcVwVO1 = this.getAppCcVwVO1();
        appCcVwVO1.setRangeSize(-1);

        appCcVwVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        appCcVwVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
        appCcVwVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        appCcVwVO1.setNamedWhereClauseParam("BindDocId", 18521);

        Row currentRow = this.getMmInvcItm().getCurrentRow();
        if (currentRow != null) {
            for (int i = 1; i <= 5; i++) {
                appCcVwVO1.setNamedWhereClauseParam("BindCcPos", i);
                appCcVwVO1.executeQuery();

                Row[] allRowsInRange = appCcVwVO1.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    String columnName = null;
                    for (Row r : allRowsInRange) {
                        AttributeDef[] attributeDef = this.getMmInvcItm().getAttributeDefs();

                        for (int j = 0; j < attributeDef.length; j++) {
                            if (attributeDef[j].getColumnName() != null &&
                                attributeDef[j].getColumnName().equals(r.getAttribute("DbobColNm"))) {
                                columnName = attributeDef[j].getName();
                            }
                        }
                        System.out.println("Column Name is " + columnName);

                        if (columnName != null) {

                            System.out.println("i is " + i + " Cost center Value is " +
                                               currentRow.getAttribute(columnName));


                            RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i,
                                                                                       currentRow.getAttribute(columnName));
                        }
                    }
                } else {
                    System.out.println("i is" + i + " cost center value is null");

                    RequestContext.getCurrentInstance().getPageFlowScope().put("P_CC_LEVEL" + i, null);

                }
            }
        }
    }

    /**
     * Method which will push data of Cost Center from TempCostCenter to SlsSoCostCenter Table
     */
    public void sendDateFromTempCcToMmInvcCc() {
        if (chkCcApplicableOrNot()) {
            callStoredFunction(Types.VARCHAR, "APP.FN_SAVE_COST_CENTER(?,?,?,?,?,?,?,?)", new Object[] {
                               EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                               EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 18521, "MM",
                               "MM$INVC$COST$CENTER", this.getMmInvc().getCurrentRow().getAttribute("DocId")
            });
        }
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter in Detail Part
     */
    public void generateCostCenter() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
           * @param cldId
           * @param slocId
           * @param hoOrgId
           * @param orgId
           * @param tempId
           * @param tempSrc
           * @param docId
           * @param usrId
           * @param tempCcId
           * @param amount
           * @param pCcLevel1
           * @param pCcLevel2
           * @param pCcLevel3
           * @param pCcLevel4
           * @param pCcLevel5
           */
            MmInvcItmVOImpl impl = this.getMmInvcItm();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();

                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "L", 18521,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("CcId").toString(),
                                           (Number) currentRow.getAttribute("AsblAmtSp"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

                /* ADFModelUtils.showFormattedFacesMessage("Cost ceneter", "Data Inserted into cost center successfullt",
                                                       FacesMessage.SEVERITY_INFO); */

            }
        }
    }

    public Object resolvElO(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Method which will be called when user click on generate Cost Ceneter based on header wise
     */
    public void generateCostCenterHeaderWise() {
        if (chkCcApplicableOrNot()) {
            AppCostCenterServiceAMImpl amCC = getAppAM();
            /*
           * @param cldId
           * @param slocId
           * @param hoOrgId
           * @param orgId
           * @param tempId
           * @param tempSrc
           * @param docId
           * @param usrId
           * @param tempCcId
           * @param amount
           * @param pCcLevel1
           * @param pCcLevel2
           * @param pCcLevel3
           * @param pCcLevel4
           * @param pCcLevel5
           */
            MmInvcVOImpl impl = this.getMmInvc();
            Row currentRow = impl.getCurrentRow();

            if (currentRow != null) {
                declareGlblValuesForCC();

                amCC.generateCostCenterApp(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                           EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                           currentRow.getAttribute("DocId").toString(), "H", 18521,
                                           EbizParams.GLBL_APP_USR(), currentRow.getAttribute("DocId").toString(),
                                           new Number(0), (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                           (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));

            }
        }
    }

    /**
     * Container's getter for AppCcVw1.
     * @return AppCcVw1
     */
    public ViewObjectImpl getAppCcVwVO1() {
        return (ViewObjectImpl) findViewObject("AppCcVwVO1");
    }


    public String getHexDocNoFromFun() {
        String hexDocIdFromFun = "0";
        try {

            hexDocIdFromFun = this.callStoredFunction(Types.VARCHAR, "APP.GET_TXN_ID_CC(?,?,?,?,?,?,?)", new Object[] {
                                                      EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                      EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_APP_USR(), 18521,
                                                      84901, 0
            }).toString();

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION GET_TXN_ID at BdgEoBudgetEoImpl :" + e.getMessage());
        }
        System.out.println("===========" + hexDocIdFromFun);

        return hexDocIdFromFun;
    }

    /**
     * Container's getter for MmInvcItm1.
     * @return MmInvcItm1
     */
    public MmInvcItmVOImpl getMmInvcItm1() {
        return (MmInvcItmVOImpl) findViewObject("MmInvcItm1");
    }

    public void populateCCForItems(String docTxnId) {
        if (this.chkCcApplicableOrNot()) {
            //            this.getMmInvcItm1().executeQuery();//commented becoz of another user has changed pk error in case of transfer invoice
            Row[] fr = this.getMmInvcItm1().getFilteredRows("DocId", docTxnId);
            _log.info("No. of Filtered Rows=" + fr.length);
            AppCostCenterServiceAMImpl amCC = this.getAppAM();
            if (fr.length > 0) {
                for (Row row : fr) {
                    String ccId = null;
                    if (row.getAttribute("CcId") != null)
                        ccId = (String) row.getAttribute("CcId");
                    else {
                        ccId = this.getHexDocNoFromFun();
                        _log.info("Generated CCId=" + ccId);
                        row.setAttribute("CcId", ccId);
                    }
                    this.declareGlblValuesForCC();
                    amCC.updateCCAmount(EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                        EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                        row.getAttribute("DocId").toString(), "L", 18521, EbizParams.GLBL_APP_USR(),
                                        ccId,
                                        (row.getAttribute("LndCostSp") != null ?
                                         (Number) row.getAttribute("LndCostSp") : new Number(0)),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL1}"),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL2}"),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL3}"),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL4}"),
                                        (String) resolvElO("#{pageFlowScope.P_CC_LEVEL5}"));
                }
            }
        }
    }

    public String getCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public String getHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    // showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            // System.out.println("ERROR IN CALLING FUNCTION FN_GET_APP_DOC_ATTACH_PATH at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //  showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }

    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId) {

        Object fnRetVal;

        try {
            /** TABLE NOT CREATED TILL NOW WE WILL UPDATED LATER*/
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MM$INVC$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_APP_GEN_FILE_ATTCH_ID at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }


    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {
        _log.info("Inside AMIMPL");
        String path = getUpFilePath(getSlocId());
        System.out.println("path " + path);

        String fileId = getUpFileId(getCldId(), getSlocId(), getHoOrgId(), getOrgId());
        _log.info("fileId " + fileId + "prev file length " + fileNm.length());
        if (fileNm != null && fileNm.length() > 49) {
            fileNm = fileNm.substring(0, Math.min(fileNm.length(), 49));
            _log.info("new file name is " + fileNm.length());
        }
        _log.info("new file name is " + fileNm);
        //String upToNCharacters = s.substring(0, Math.min(s.length(), n));

        Row r = getMmInvcAttch().createRow();

        _log.info("contentTyp " + contentTyp);
        r.setAttribute("FlExtn", contentTyp);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("FlNm", fileId);
        r.setAttribute("FlPath", path + fileId + extn);

        getMmInvcAttch().insertRow(r);

        this.getDBTransaction().postChanges(); // Used this for increasing fileId else throws too many object error

        return path + fileId;
        // return null;
    }


    /**
     * Container's getter for MmInvcAttch1.
     * @return MmInvcAttch1
     */
    public ViewObjectImpl getMmInvcAttch() {
        return (ViewObjectImpl) findViewObject("MmInvcAttch");
    }

    /**
     * Container's getter for FkMmInvcAttchVL1.
     * @return FkMmInvcAttchVL1
     */
    public ViewLinkImpl getFkMmInvcAttchVL1() {
        return (ViewLinkImpl) findViewLink("FkMmInvcAttchVL1");
    }

    public Integer chkCancelInvc() {
        Row r = this.getMmInvc().getCurrentRow();
        String docId = r.getAttribute("DocId").toString();
        Integer retrn = 0;
        try {
            retrn = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_CHK_INVC_CNCL(?,?,?,?)", new Object[] {

                getCldId(), getSlocId(), getOrgId(), docId
            }));
        } catch (Exception e) {

            e.printStackTrace();
        }
        _log.info("chkCancelInvc-----------------" + retrn + " doc_id----" + docId);
        return retrn;
    }

    public Integer cancelInvc() {

        Row r = this.getMmInvc().getCurrentRow();
        String docId = r.getAttribute("DocId").toString();
        Integer retrn = 0;
        try {
            retrn = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INVC_CANCEL (?,?,?,?,?,?)", new Object[] {

                getCldId(), getSlocId(), getOrgId(), getHoOrgId(), docId, getUsrId()
            }));
        } catch (Exception e) {
            e.printStackTrace();
        }
        _log.info("MM_INVC_CANCEL-----------------" + retrn + " doc_id----" + docId);
        return retrn;
    }

    public Integer updateRcptAftrCancel() {
        Row r = this.getMmInvc().getCurrentRow();
        String docId = r.getAttribute("DocId").toString();
        Integer retrn = 0;
        try {
            retrn = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_RCPT_INV_CNCL(?,?,?,?)", new Object[] {

                getCldId(), getSlocId(), getOrgId(), docId
            }));
        } catch (Exception e) {
            e.printStackTrace();
        }
        _log.info("MM_UPDT_RCPT_INV_CNCL-----------------" + retrn + " doc_id----" + docId);
        return retrn;
    }

    public void afterCancelWF() {
        Integer cnInvRtn = 0;
        Integer updRcpt = 0;
        String wfRtn = resolvEl("#{pageFlowScope.RETURN_FROM_WF}");
        _log.info("cancel wf retn -----------" + wfRtn);

        Row r = this.getMmInvc().getCurrentRow();
        String docId = r.getAttribute("DocId").toString();
        Integer type = (Integer) r.getAttribute("InvcType");
        Integer retrn = 0;
        Integer retrnRcpt = 0;
        try {
            retrn = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_INVC_CANCEL (?,?,?,?,?,?)", new Object[] {

                getCldId(), getSlocId(), getOrgId(), getHoOrgId(), docId, getUsrId()
            }));

            _log.info("MM_INVC_CANCEL-----------------" + retrn + " doc_id----" + docId);
        } catch (Exception e) {
            _log.info("sql exception catch MM_INVC_CANCEL.");
            retrn = -1;
            e.printStackTrace();
            retrn = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)", new Object[] {
                                                 getSlocId(), getCldId(), getOrgId(), "18521", docId, type
            });
            this.getDBTransaction().commit();
            String msg = resolvElDCMsg("#{bundle['MSG.1724']}").toString();
            FacesMessage message = new FacesMessage(msg); //"Something went wrong. Please Contact to ESS!"
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
            //           return;
        }

        if (retrn == 1) {

            try {
                if (type == 492) {
                    retrnRcpt = 1;
                } else {
                    retrnRcpt = (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_RCPT_INV_CNCL(?,?,?,?)", new Object[] {

                        getCldId(), getSlocId(), getOrgId(), docId
                    }));
                }
                _log.info("MM_UPDT_RCPT_INV_CNCL-----------------" + retrn + " doc_id----" + docId);
            } catch (Exception e) {
                _log.info("sql exception catch in  MM_UPDT_RCPT_INV_CNCL.");
                retrnRcpt = -1;
                e.printStackTrace();
                retrnRcpt = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)", new Object[] {
                                                         getSlocId(), getCldId(), getOrgId(), "18521", docId, type
                });
                this.getDBTransaction().commit();
                String msg = resolvElDCMsg("#{bundle['MSG.1724']}").toString();
                FacesMessage message = new FacesMessage(msg); //"Something went wrong. Please Contact to ESS!"
                FacesContext.getCurrentInstance().addMessage(null, message);
                //             return;
            }

            if (retrnRcpt == 1) {

                _log.info("before commit------------------------------");

                r.setAttribute("InvcStat", 874);
                this.getDBTransaction().commit();
                //set up
            } else {
                _log.info("sql exception catch else111111111111111111111 ");
                retrnRcpt = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)", new Object[] {
                                                         getSlocId(), getCldId(), getOrgId(), "18521", docId, type
                });
                this.getDBTransaction().commit();
                String msg = resolvElDCMsg("#{bundle['MSG.1724']}").toString();
                FacesMessage message = new FacesMessage(msg); //"Something went wrong. Please Contact to ESS!"
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext.getCurrentInstance().addMessage(null, message);

            }


        } else {
            _log.info("sql exception catch else2222222222222222222222222222 ");
            retrn = (Integer) callStoredFunction(Types.INTEGER, "APP.WF_REV_STATUS_APRV(?,?,?,?,?,?)", new Object[] {
                                                 getSlocId(), getCldId(), getOrgId(), "18521", docId, type
            });
            this.getDBTransaction().commit();
            String msg = resolvElDCMsg("#{bundle['MSG.1724']}").toString();
            FacesMessage message = new FacesMessage(msg); //"Something went wrong. Please Contact to ESS!"
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, message);
        }

    }

    /*  checking upload file is require or not before save and forward*/
    public String chkAttchRqd() {
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));

        Row currentRow = this.getMmInvc().getCurrentRow();

        Integer invcType = (Integer) currentRow.getAttribute("InvcType");
        String docId = (String) currentRow.getAttribute("DocId");
        String retrn = null;
        if (invcType != null && docId != null) {
            try {
                retrn = (String) (callStoredFunction(Types.VARCHAR, "app.FN_IS_ATTCH_REQD (?,?,?,?,?,?)", new Object[] {
                                                     paramCldId, paramSlocId, paramOrgId, new Integer(18521), invcType,
                                                     docId
                }));
            } catch (JboSQLException e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        _log.info("-----return value-----" + docId + "  " + invcType + "  " + retrn);
        return retrn;
    }

    /* getting top level user id of worklow.
     * */
    public String checkWFUsrLevel() {
        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer paramSlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));

        Row currentRow = this.getMmInvc().getCurrentRow();

        Integer invcType = (Integer) currentRow.getAttribute("InvcType");
        String docId = (String) currentRow.getAttribute("DocId");
        String retrn = "N";
        if (docId != null) {
            try {
                retrn = (String) (callStoredFunction(Types.VARCHAR, "app.WF_GET_USR_TOP_LVL (?,?,?,?,?,?)", new Object[] {
                                                     paramSlocId, paramCldId, paramOrgId, new Integer(18521), invcType,
                                                     userId
                }));
            } catch (JboSQLException e) {
                // TODO: Add catch code
                e.printStackTrace();
            }
        }
        _log.info("-----return value-----" + docId + "  " + "---" + invcType + "  " + retrn);
        return retrn;
    }

    /*  apply default tds*/
    public String applyDefaultTDS() {
        Row itmRw = this.getMmInvcItm().getCurrentRow();
        String p_doc_id = itmRw.getAttribute("DocId").toString();
        String p_rcpt_doc_id = itmRw.getAttribute("DocIdRcpt").toString();
        String p_doc_id_po = itmRw.getAttribute("DocIdPo").toString();
        Integer p_schdl_no = (Integer) itmRw.getAttribute("DlvSchdlNo");
        String p_itm_id = itmRw.getAttribute("ItmId").toString();
        String p_itm_uom = itmRw.getAttribute("ItmUom").toString();
        Number p_curr_fctr = (Number) ((Number) itmRw.getAttribute("TransCurrConvFctr")).round(getGlblCurrDigit());
        Number taxableAmt = (Number) itmRw.getAttribute("TransTaxableAmt");
        String addsId = (String) this.getMmInvc().getCurrentRow().getAttribute("BillAddsId");
        Integer eoId = (Integer) this.getMmInvc().getCurrentRow().getAttribute("EoIdSrc");
        Integer ruleId = (Integer) callStoredFunction(Types.INTEGER, "APP.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      getCldId(), getSlocId(), addsId, getOrgId(), getHoOrgId(),
                                                      p_itm_id, eoId, new Integer(18521), null
        });
        _log.info("return value from FN_GET_TAX_RULE_ID---" + ruleId);
        if (ruleId != null) {
            if (ruleId == -1) {
                return "N";
            } else {

                this.postChng();
                _log.info("rule id is " + ruleId);
                BigDecimal ret =
                    (BigDecimal) callStoredFunction(Types.NUMERIC,
                                                    "MM.INS_INV_TDS_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    getSlocId(), getCldId(), getHoOrgId(), getOrgId(), p_doc_id,
                                                    p_rcpt_doc_id, p_doc_id_po, p_schdl_no, p_itm_id, p_itm_uom, ruleId,
                                                    taxableAmt, "I", p_curr_fctr, "N", taxableAmt, "Y"
                });
                _log.info("Tds val in default tds from INS_INV_TDS_LINES " + ret + " parameters-- " + getOrgId() + " " +
                          p_doc_id + " " + p_rcpt_doc_id + " " + p_doc_id_po + " " + p_schdl_no + " " + p_itm_id + " " +
                          p_itm_uom + " " + ruleId + " " + taxableAmt + " " + p_curr_fctr + taxableAmt);
                this.getMmInvcTdsLines().executeQuery();
                return "Y";
            }
        } else
            return "S";
    }

    public Integer checkSuppDoc() {
        Integer eoId = (Integer) this.getMmInvc().getCurrentRow().getAttribute("EoIdSrc");
        Integer ret = (Integer) callStoredFunction(Types.INTEGER, "MM.MM_CHK_SUPP_DOC(?,?,?,?,?,?)", new Object[] {
                                                   getCldId(), getSlocId(), getOrgId(), eoId, null, "I"
        });
        _log.info("return value from MM_CHK_SUPP_DOC--- " + ret);
        if (ret != null) {
            return ret;
        } else {
            return 0;
        }
    }

    /**
     * Container's getter for ccFinalizeCheck1.
     * @return ccFinalizeCheck1
     */
    public ViewObjectImpl getccFinalizeCheck1() {
        return (ViewObjectImpl) findViewObject("ccFinalizeCheck1");
    }

    //to check cost center profile finalized or not
    public String ccFinalizedCheck() {
        ViewObjectImpl ccvo = this.getccFinalizeCheck1();
        ccvo.setNamedWhereClauseParam("BindCldId", getCldId());
        ccvo.setNamedWhereClauseParam("BindSlocId", getSlocId());
        ccvo.setNamedWhereClauseParam("BindOrgId", getOrgId());
        ccvo.setNamedWhereClauseParam("BindHoOrgId", getHoOrgId());
        ccvo.executeQuery();
        Row[] r = ccvo.getFilteredRows("CcPrfDocId", new Integer(18521));
        _log.info("-----parameter in ccfinalizedCheck--- " + getCldId() + " " + getOrgId() + " " + getHoOrgId() + " " +
                  r.length);
        if (r.length > 0) {
            _log.info("cc finalized --- " + r[0].getAttribute("CcFinalize"));
            return "Y";
        } else
            return "N";
    }

    /**
     * Container's getter for MMProfile1.
     * @return MMProfile1
     */
    public ViewObjectImpl getMMProfile1() {
        return (ViewObjectImpl) findViewObject("MMProfile1");
    }

    /**
     * Method to return Round Off Value of Invoice Amount
     * 905--None(No Round Off)
     * 906--Natural Round Off.
     * 907--Floor Round
     * 908--Ceil Round.
     * */

    private Number getRoundOffInvoiceAmt(Number totalAmt) {
        Row currRow = this.getMmInvc().getCurrentRow();

        try {

            Double totalDoubAmt = new Double(0);

            String imprtPur = "N";
            Number totTaxAmt = new Number(0);
            if (currRow.getAttribute("ImportPur") != null) {
                imprtPur = currRow.getAttribute("ImportPur").toString();
            }
            if (currRow.getAttribute("TransTotTaxAmt") != null) {
                totTaxAmt = (Number) currRow.getAttribute("TransTotTaxAmt");
            }
            if (imprtPur.toString().equals("Y")) {
                totalAmt = totalAmt.subtract(totTaxAmt);
            }


            if (this.getInvAmtRoundOff().compareTo(new Integer(905)) == 0) {
                totalAmt = totalAmt;
                _log.info("------905 return -- " + totalAmt);
            } else if (this.getInvAmtRoundOff().compareTo(new Integer(906)) == 0) {
                totalDoubAmt = totalAmt.doubleValue();
                Long amt = Math.round(totalDoubAmt);
                _log.info("---after round " + totalDoubAmt + "  round " + Math.round(totalDoubAmt) + "--- " + amt);
                totalAmt = new Number(amt);
                _log.info("------906 return -- " + totalAmt + " double " + totalDoubAmt);

            } else if (this.getInvAmtRoundOff().compareTo(new Integer(907)) == 0) {
                totalDoubAmt = totalAmt.doubleValue();
                totalDoubAmt = Math.floor(totalDoubAmt);
                _log.info("----after floor -------" + totalDoubAmt);
                totalAmt = new Number(totalDoubAmt);
                _log.info("------907 return -- " + totalAmt);
            } else if (this.getInvAmtRoundOff().compareTo(new Integer(908)) == 0) {
                totalDoubAmt = totalAmt.doubleValue();
                totalDoubAmt = Math.ceil(totalDoubAmt);
                _log.info("----after ceil -------" + totalDoubAmt);
                totalAmt = new Number(totalDoubAmt);
                _log.info("------908 return -- " + totalAmt);
            }

        } catch (Exception e) {
            // TODO: Add catch code
            e.printStackTrace();
        }
        return totalAmt;
    }

    public void deleteAttachRow() {
        if (this.getMmInvcAttch().getCurrentRow() != null) {
            _log.info("----deleting row -- " + this.getMmInvcAttch().getCurrentRow().getKey());
            this.getMmInvcAttch().getCurrentRow().remove();
            _log.info("------------after delete-------");
        }
    }

    public Integer getGlblCurrDigit() {
        return ((Integer) EbizParams.GLBL_CURR_DIGIT() == null ? 6 : (Integer) EbizParams.GLBL_CURR_DIGIT());
    }

    /**
     * Container's getter for MmInvcTr2.
     * @return MmInvcTr2
     */
    public ViewObjectImpl getMmInvcTr2() {
        return (ViewObjectImpl) findViewObject("MmInvcTr2");
    }

    public String viewWFData() {
        if (this.getMmInvc().getCurrentRow() != null) {
            // WF_GET_DOC_FLOW(P_SLOC_ID NUMBER , P_ORG_ID VARCHAR2 , P_CLD_ID VARCHAR2 , P_DOC_ID NUMBER , P_TXN_DOC_ID VARCHAR2)
            try {
                _log.info("Doc Id " + this.getMmInvc().getCurrentRow().getAttribute("DocId"));
                Object ob = callStoredFunction(Types.VARCHAR, "APP.WF_GET_DOC_FLOW(?,?,?,?,?)", new Object[] {
                                               this.getMmInvc().getCurrentRow().getAttribute("SlocId"),
                                               this.getMmInvc().getCurrentRow().getAttribute("OrgId"),
                                               this.getMmInvc().getCurrentRow().getAttribute("CldId"), 18521,
                                               this.getMmInvc().getCurrentRow().getAttribute("DocId")
                });
                _log.info("ob    " + ob);
                if (ob != null) {
                    return ob.toString();
                } else {
                    return "Document Not In WF";
                }
            } catch (Exception e) {
                e.printStackTrace();
                return "Document Not In WF";
            }


        } else {
            return "Document Not In WF";
        }
    }
}
