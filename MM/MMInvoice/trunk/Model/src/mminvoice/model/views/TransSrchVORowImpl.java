package mminvoice.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Feb 24 12:52:27 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransSrchVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        CldId {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        OrgId {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        HoOrgId {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setHoOrgId((String) value);
            }
        }
        ,
        InvcId {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getInvcId();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setInvcId((String) value);
            }
        }
        ,
        InvcType {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getInvcType();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setInvcType((Integer) value);
            }
        }
        ,
        EoId {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getEoId();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setEoId((Integer) value);
            }
        }
        ,
        fromDate {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getfromDate();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setfromDate((Timestamp) value);
            }
        }
        ,
        toDate {
            public Object get(TransSrchVORowImpl obj) {
                return obj.gettoDate();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.settoDate((Timestamp) value);
            }
        }
        ,
        fromSpAmt {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getfromSpAmt();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setfromSpAmt((Number) value);
            }
        }
        ,
        toSpAmt {
            public Object get(TransSrchVORowImpl obj) {
                return obj.gettoSpAmt();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.settoSpAmt((Number) value);
            }
        }
        ,
        CurrencyBsId {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getCurrencyBsId();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setCurrencyBsId((Integer) value);
            }
        }
        ,
        EoNm {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getEoNm();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setEoNm((String) value);
            }
        }
        ,
        InvcDispId {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getInvcDispId();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setInvcDispId((String) value);
            }
        }
        ,
        SrcDocNoTrans {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getSrcDocNoTrans();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setSrcDocNoTrans((String) value);
            }
        }
        ,
        LovInvoiceTypeVO1 {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getLovInvoiceTypeVO1();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovSupplierVO1 {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getLovSupplierVO1();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LOVInvcVO1 {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getLOVInvcVO1();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovVO1 {
            public Object get(TransSrchVORowImpl obj) {
                return obj.getLovVO1();
            }

            public void put(TransSrchVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TransSrchVORowImpl object);

        public abstract void put(TransSrchVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int INVCID = AttributesEnum.InvcId.index();
    public static final int INVCTYPE = AttributesEnum.InvcType.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int FROMDATE = AttributesEnum.fromDate.index();
    public static final int TODATE = AttributesEnum.toDate.index();
    public static final int FROMSPAMT = AttributesEnum.fromSpAmt.index();
    public static final int TOSPAMT = AttributesEnum.toSpAmt.index();
    public static final int CURRENCYBSID = AttributesEnum.CurrencyBsId.index();
    public static final int EONM = AttributesEnum.EoNm.index();
    public static final int INVCDISPID = AttributesEnum.InvcDispId.index();
    public static final int SRCDOCNOTRANS = AttributesEnum.SrcDocNoTrans.index();
    public static final int LOVINVOICETYPEVO1 = AttributesEnum.LovInvoiceTypeVO1.index();
    public static final int LOVSUPPLIERVO1 = AttributesEnum.LovSupplierVO1.index();
    public static final int LOVINVCVO1 = AttributesEnum.LOVInvcVO1.index();
    public static final int LOVVO1 = AttributesEnum.LovVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransSrchVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }


    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        StringBuffer cldId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        if(cldId != null)
         {return cldId.toString();}
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        Integer  slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        if(slocId != null)
         {return slocId;}
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        StringBuffer orgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        if(orgId != null)
         {return orgId.toString();}
        
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        StringBuffer hoOrgId = new StringBuffer(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
        if(hoOrgId != null)
         {return hoOrgId.toString();}
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute InvcId.
     * @return the InvcId
     */
    public String getInvcId() {
        return (String) getAttributeInternal(INVCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute InvcId.
     * @param value value to set the  InvcId
     */
    public void setInvcId(String value) {
        setAttributeInternal(INVCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute ccc.
     * @return the ccc
     */
    public Integer getInvcType() {
        return (Integer) getAttributeInternal(INVCTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ccc.
     * @param value value to set the  ccc
     */
    public void setInvcType(Integer value) {
        setAttributeInternal(INVCTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EoId.
     * @return the EoId
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoId.
     * @param value value to set the  EoId
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute fromDate.
     * @return the fromDate
     */
    public Timestamp getfromDate() {
        return (Timestamp) getAttributeInternal(FROMDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute fromDate.
     * @param value value to set the  fromDate
     */
    public void setfromDate(Timestamp value) {
        setAttributeInternal(FROMDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute toDate.
     * @return the toDate
     */
    public Timestamp gettoDate() {
        return (Timestamp) getAttributeInternal(TODATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute toDate.
     * @param value value to set the  toDate
     */
    public void settoDate(Timestamp value) {
        setAttributeInternal(TODATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute fromSpAmt.
     * @return the fromSpAmt
     */
    public Number getfromSpAmt() {
        return (Number) getAttributeInternal(FROMSPAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute fromSpAmt.
     * @param value value to set the  fromSpAmt
     */
    public void setfromSpAmt(Number value) {
        setAttributeInternal(FROMSPAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute toSpAmt.
     * @return the toSpAmt
     */
    public Number gettoSpAmt() {
        return (Number) getAttributeInternal(TOSPAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute toSpAmt.
     * @param value value to set the  toSpAmt
     */
    public void settoSpAmt(Number value) {
        setAttributeInternal(TOSPAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrencyBsId.
     * @return the CurrencyBsId
     */
    public Integer getCurrencyBsId() {
        return (Integer) getAttributeInternal(CURRENCYBSID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CurrencyBsId.
     * @param value value to set the  CurrencyBsId
     */
    public void setCurrencyBsId(Integer value) {
        setAttributeInternal(CURRENCYBSID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute EoNm.
     * @return the EoNm
     */
    public String getEoNm() {
        return (String) getAttributeInternal(EONM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute EoNm.
     * @param value value to set the  EoNm
     */
    public void setEoNm(String value) {
        setAttributeInternal(EONM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute InvcDispId.
     * @return the InvcDispId
     */
    public String getInvcDispId() {
        return (String) getAttributeInternal(INVCDISPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute InvcDispId.
     * @param value value to set the  InvcDispId
     */
    public void setInvcDispId(String value) {
        setAttributeInternal(INVCDISPID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SrcDocNoTrans.
     * @return the SrcDocNoTrans
     */
    public String getSrcDocNoTrans() {
        return (String) getAttributeInternal(SRCDOCNOTRANS);
    }


    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SrcDocNoTrans.
     * @param value value to set the  SrcDocNoTrans
     */
    public void setSrcDocNoTrans(String value) {
        setAttributeInternal(SRCDOCNOTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovInvoiceTypeVO1.
     */
    public RowSet getLovInvoiceTypeVO1() {
        return (RowSet)getAttributeInternal(LOVINVOICETYPEVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSupplierVO1.
     */
    public RowSet getLovSupplierVO1() {
        return (RowSet)getAttributeInternal(LOVSUPPLIERVO1);
    }


    /**
     * Gets the view accessor <code>RowSet</code> LOVInvcVO1.
     */
    public RowSet getLOVInvcVO1() {
        return (RowSet)getAttributeInternal(LOVINVCVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovVO1.
     */
    public RowSet getLovVO1() {
        return (RowSet)getAttributeInternal(LOVVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    
    public String resolvEl(String data) {
            FacesContext fc = FacesContext.getCurrentInstance();
            Application app = fc.getApplication();
            ExpressionFactory elFactory = app.getExpressionFactory();
            ELContext elContext = fc.getELContext();
            ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
            String Message = valueExp.getValue(elContext).toString();
            return Message;
        }
}
