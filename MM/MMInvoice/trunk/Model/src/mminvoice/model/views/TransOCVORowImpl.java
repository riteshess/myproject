package mminvoice.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 12 12:03:04 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransOCVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(TransOCVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(TransOCVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        CoaId {
            public Object get(TransOCVORowImpl obj) {
                return obj.getCoaId();
            }

            public void put(TransOCVORowImpl obj, Object value) {
                obj.setCoaId((Integer)value);
            }
        }
        ,
        CoaName {
            public Object get(TransOCVORowImpl obj) {
                return obj.getCoaName();
            }

            public void put(TransOCVORowImpl obj, Object value) {
                obj.setCoaName((String)value);
            }
        }
        ,
        TransSpAmt {
            public Object get(TransOCVORowImpl obj) {
                return obj.getTransSpAmt();
            }

            public void put(TransOCVORowImpl obj, Object value) {
                obj.setTransSpAmt((Number)value);
            }
        }
        ,
        OrgId {
            public Object get(TransOCVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(TransOCVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        HoOrgId {
            public Object get(TransOCVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(TransOCVORowImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        CldId {
            public Object get(TransOCVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(TransOCVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        SlocId {
            public Object get(TransOCVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(TransOCVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        LovOcCoaVO1 {
            public Object get(TransOCVORowImpl obj) {
                return obj.getLovOcCoaVO1();
            }

            public void put(TransOCVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(TransOCVORowImpl object);

        public abstract void put(TransOCVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int COAID = AttributesEnum.CoaId.index();
    public static final int COANAME = AttributesEnum.CoaName.index();
    public static final int TRANSSPAMT = AttributesEnum.TransSpAmt.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int LOVOCCOAVO1 = AttributesEnum.LovOcCoaVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransOCVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CoaId.
     * @return the CoaId
     */
    public Integer getCoaId() {
        return (Integer) getAttributeInternal(COAID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CoaId.
     * @param value value to set the  CoaId
     */
    public void setCoaId(Integer value) {
        setAttributeInternal(COAID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CoaName.
     * @return the CoaName
     */
    public String getCoaName() {
        return (String) getAttributeInternal(COANAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CoaName.
     * @param value value to set the  CoaName
     */
    public void setCoaName(String value) {
        setAttributeInternal(COANAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSpAmt.
     * @return the TransSpAmt
     */
    public Number getTransSpAmt() {
        return (Number) getAttributeInternal(TRANSSPAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSpAmt.
     * @param value value to set the  TransSpAmt
     */
    public void setTransSpAmt(Number value) {
        setAttributeInternal(TRANSSPAMT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        String paramHoOrdId= resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
                  if(paramHoOrdId != null)
                  {return paramHoOrdId;}
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
     * @param value value to set the  OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        String paramHoOrdId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
                  if(paramHoOrdId != null)
                  {return paramHoOrdId;}
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
     * @param value value to set the  HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        String paramHoOrdId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
                  if(paramHoOrdId != null)
                  {return paramHoOrdId;}
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
     * @param value value to set the  CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        String paramSlocId= resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
                  if(paramSlocId != null)
                  {return Integer.parseInt(paramSlocId);}
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
     * @param value value to set the  SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOcCoaVO1.
     */
    public RowSet getLovOcCoaVO1() {
        return (RowSet)getAttributeInternal(LOVOCCOAVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    
    private String resolvEl(String data) {
           FacesContext fc = FacesContext.getCurrentInstance();
           Application app = fc.getApplication();
           ExpressionFactory elFactory = app.getExpressionFactory();
           ELContext elContext = fc.getELContext();
           ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
           String Message = valueExp.getValue(elContext).toString();
           return Message;
       }
}
