package mmcashpo.model.module;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.domain.Number;
import mmcashpo.model.module.common.MmCashPOAM;
import mmcashpo.model.views.MmCpoItmVOImpl;

import mmcashpo.model.views.MmCpoTrVOImpl;
import mmcashpo.model.views.MmCpoVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.DBTransaction;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 12 16:50:55 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmCashPOAMImpl extends ApplicationModuleImpl implements MmCashPOAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MmCashPOAMImpl() {
    }

ADFLogger Adflog=(ADFLogger)ADFLogger.createADFLogger(MmCashPOAMImpl.class);
    
    /**
     * Container's getter for LovItmId1.
     * @return LovItmId1
     */
     public ViewObjectImpl getLovItmId1() {
        return (ViewObjectImpl)findViewObject("LovItmId1");
    }

    /**
     * Container's getter for CpoSearch1.
     * @return CpoSearch1
     */
    public ViewObjectImpl getCpoSearch1() {
        return (ViewObjectImpl)findViewObject("CpoSearch1");
    }


    /**
     * Container's getter for MmCpo1.
     * @return MmCpo1
     */
    public ViewObjectImpl getMmCpo1() {
        return (ViewObjectImpl)findViewObject("MmCpo1");
    }

    /**
     * Container's getter for MmCpoItm1.
     * @return MmCpoItm1
     */
    public MmCpoItmVOImpl getMmCpoItm1() {
        return (MmCpoItmVOImpl)findViewObject("MmCpoItm1");
    }

    /**
     * Container's getter for CpoToCpoItemVL1.
     * @return CpoToCpoItemVL1
     */
    public ViewLinkImpl getCpoToCpoItemVL1() {
        return (ViewLinkImpl)findViewLink("CpoToCpoItemVL1");
    }

    /**
     * Container's getter for LovItmIdForadd1.
     * @return LovItmIdForadd1
     */
    public ViewObjectImpl getLovItmIdForadd1() {
        return (ViewObjectImpl)findViewObject("LovItmIdForadd1");
    }
    
    
    public void searchQuery(Integer SlocId,String OrgId,String DocId , String CldId){
          ViewObject v1= this.getMmCpo1();
          v1.setWhereClause("SLOC_ID="+SlocId+" AND ORG_ID='"+OrgId+"' AND DOC_ID='"+DocId+"' AND CLD_ID = '"+CldId+"'");
          v1.executeQuery();
      
      }
    
    public void resetQuery(){
          ViewObject v1= this.getMmCpo1();
          v1.setWhereClause(null);
          v1.executeQuery();
      
      }

    /**
     * Container's getter for MmCpoOc1.
     * @return MmCpoOc1
     */
    public ViewObjectImpl getMmCpoOc1() {
        return (ViewObjectImpl)findViewObject("MmCpoOc1");
    }

    /**
     * Container's getter for MmCpoOc2.
     * @return MmCpoOc2
     */
    public ViewObjectImpl getMmCpoOc2() {
        return (ViewObjectImpl)findViewObject("MmCpoOc2");
    }

    /**
     * Container's getter for CpoToCpoOcVL1.
     * @return CpoToCpoOcVL1
     */
    public ViewLinkImpl getCpoToCpoOcVL1() {
        return (ViewLinkImpl)findViewLink("CpoToCpoOcVL1");
    }

    /**
     * Container's getter for MmCpoTrLines1.
     * @return MmCpoTrLines1
     */
    public ViewObjectImpl getMmCpoTrLines1() {
        return (ViewObjectImpl)findViewObject("MmCpoTrLines1");
    }

    /**
     * Container's getter for MmCpoTr1.
     * @return MmCpoTr1
     */
    public ViewObjectImpl getMmCpoTr1() {
        return (ViewObjectImpl)findViewObject("MmCpoTr1");
    }


    /**
     * Container's getter for PoOrdVw1.
     * @return PoOrdVw1
     */
    public ViewObjectImpl getPoOrdVw1() {
        return (ViewObjectImpl)findViewObject("PoOrdVw1");
    }

    /**
     * Container's getter for CpoItmToPoOrdVwVL1.
     * @return CpoItmToPoOrdVwVL1
     */
    public ViewLinkImpl getCpoItmToPoOrdVwVL1() {
        return (ViewLinkImpl)findViewLink("CpoItmToPoOrdVwVL1");
    }

    /**
     * Container's getter for ItmLovSearch1.
     * @return ItmLovSearch1
     */
    public ViewObjectImpl getItmLovSearch1() {
        return (ViewObjectImpl)findViewObject("ItmLovSearch1");
    }

    /**
     * Container's getter for LovUomId.
     * @return LovUomId
     */
    public ViewObjectImpl getLovUomId() {
        return (ViewObjectImpl)findViewObject("LovUomId");
    }

    /**
     * Container's getter for MmCpoTr2.
     * @return MmCpoTr2
     */
    public MmCpoTrVOImpl getMmCpoTr2() {
        return (MmCpoTrVOImpl)findViewObject("MmCpoTr2");
    }

    /**
     * Container's getter for CpoItmToCpoTrVL1.
     * @return CpoItmToCpoTrVL1
     */
    public ViewLinkImpl getCpoItmToCpoTrVL1() {
        return (ViewLinkImpl)findViewLink("CpoItmToCpoTrVL1");
    }

    /**
     * Container's getter for MmCpoTrLines2.
     * @return MmCpoTrLines2
     */
    public ViewObjectImpl getMmCpoTrLines2() {
        return (ViewObjectImpl)findViewObject("MmCpoTrLines2");
    }

    /**
     * Container's getter for CpoTrToCpoTrLinesVL1.
     * @return CpoTrToCpoTrLinesVL1
     */
    public ViewLinkImpl getCpoTrToCpoTrLinesVL1() {
        return (ViewLinkImpl)findViewLink("CpoTrToCpoTrLinesVL1");
    }

    /**
     * Container's getter for MmCpoTr.
     * @return MmCpoTr
     */
    public MmCpoTrVOImpl getMmCpoTr() {
        return (MmCpoTrVOImpl)findViewObject("MmCpoTr");
    }

    /**
     * Container's getter for MmCpoToMmCpoTrVL1.
     * @return MmCpoToMmCpoTrVL1
     */
    public ViewLinkImpl getMmCpoToMmCpoTrVL1() {
        return (ViewLinkImpl)findViewLink("MmCpoToMmCpoTrVL1");
    }

    /**
     * Container's getter for MmCpoTrLines.
     * @return MmCpoTrLines
     */
    public ViewObjectImpl getMmCpoTrLines() {
        return (ViewObjectImpl)findViewObject("MmCpoTrLines");
    }

    /**
     * Container's getter for CpoTrToCpoTrLinesVL2.
     * @return CpoTrToCpoTrLinesVL2
     */
    public ViewLinkImpl getCpoTrToCpoTrLinesVL2() {
        return (ViewLinkImpl)findViewLink("CpoTrToCpoTrLinesVL2");
    }

    /**
     * Container's getter for LovForCurrConv1.
     * @return LovForCurrConv1
     */
    public ViewObjectImpl getLovForCurrConv1() {
        return (ViewObjectImpl)findViewObject("LovForCurrConv1");
    }
    
    
    
    public Integer pendingUsrCheck(Integer SlocId,String CldId,String OrgId,Integer RcptDocNo){
        Row currRcpt=this.getMmCpo1().getCurrentRow();
        String docIdTxn= currRcpt.getAttribute("DocId").toString();
        System.out.println("DOCIDTXN--"+docIdTxn);
        Integer DOCTYPEID=0;
        Object obj= callStoredFunction(Types.INTEGER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,RcptDocNo,docIdTxn,DOCTYPEID });
        Integer usrId=null; 
        if(obj!=null){
            usrId=Integer.parseInt(obj.toString());
        }
       System.out.println("User id pending in impl--"+usrId);
        return usrId;
        
    }
    
    public String getWfNo(Integer sloc_id,String cld_id,String org_id,Integer doc_no) {
        Integer DocTypId=0;
        try {
            Object obj=callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)",
                                      new Object[] {sloc_id, cld_id, org_id, doc_no,DocTypId });
            System.out.println("WFNO in AMimpl:"+obj.toString());
            return obj.toString();
        } catch (Exception e) {
            System.out.println("GETWFNO--"+e);
            return "0";
        }
    
    }
    
    public Integer getUsrLvl(Integer SlocId,String CldId,String OrgId,Integer usr_id,String WfNum,String rcptDocId){
        Integer DocTypeId=0;
        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] { SlocId,CldId,
                                                                                                                                OrgId,
                                                                                                                                usr_id,
                                                                                                                                WfNum,
                                                                                                                                rcptDocId,DocTypeId }).toString());


    }
    
    public Integer insIntoTxn(Integer sloc_id,String cld_id,String pOrgId,Integer rcpt_doc_no,String WfNum,Integer usr_idFrm,Integer usr_idTo,Integer levelTo,Integer levelFrm,String action,String remark,Number amount,String post ){
    System.out.println("Inside method");
        String rcptDocId=this.getMmCpo1().getCurrentRow().getAttribute("DocId").toString();
        Integer DocTypeId=0;
        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                        new Object[] { sloc_id, cld_id, pOrgId, rcpt_doc_no,DocTypeId, WfNum, rcptDocId,
                                                       usr_idFrm, usr_idTo, levelFrm, levelTo, action, remark,
                                                       amount,post}).toString());
    
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                
                st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
     
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) { throw new JboException(e);
                    }
                }
            }
        }
    
    
    public void updateCpoStat()
    {
     this.getMmCpo1().getCurrentRow().setAttribute("AuthStat", "Y"); 
        }

    /**
     * Container's getter for LovUsrIdCreate.
     * @return LovUsrIdCreate
     */
    public ViewObjectImpl getLovUsrIdCreate() {
        return (ViewObjectImpl)findViewObject("LovUsrIdCreate");
    }

    /**
     * Container's getter for OrgMmPrf.
     * @return OrgMmPrf
     */
    public ViewObjectImpl getOrgMmPrf() {
        return (ViewObjectImpl)findViewObject("OrgMmPrf");
    }

    /**
     * Container's getter for MmitmVwVO1.
     * @return MmitmVwVO1
     */
    public ViewObjectImpl getMmitmVwVO1() {
        return (ViewObjectImpl)findViewObject("MmitmVwVO1");
    }

    /**
     * Container's getter for LOVAutoSuggesFortItemsVO1.
     * @return LOVAutoSuggesFortItemsVO1
     */
    public ViewObjectImpl getLOVAutoSuggesFortItemsVO1() {
        return (ViewObjectImpl) findViewObject("LOVAutoSuggesFortItemsVO1");
    }
    /**
    * Method to get suggested Item in AutoSuggest.
    * @param itmStr
    * @return
    */
    public ArrayList<String> getSuggestedItemDesc(String itmStr) {
        ArrayList<String> h = new ArrayList<String>();
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        ViewObjectImpl autoSuggestVO = this.getLOVAutoSuggesFortItemsVO1();
        autoSuggestVO.setNamedWhereClauseParam("CldIdBind",cld_id);
        autoSuggestVO.setNamedWhereClauseParam("SlocIdBind", slocId);
        autoSuggestVO.setNamedWhereClauseParam("OrgIdbind", orgId);
        autoSuggestVO.setNamedWhereClauseParam("HoOrgIdBind", hoOrg_id);
        autoSuggestVO.setNamedWhereClauseParam("ItmNmbind", itmStr);
      //  autoSuggestVO.setNamedWhereClauseParam("SampleItmFlgBind", smpl);
        autoSuggestVO.executeQuery();
        autoSuggestVO.setRangeSize(12);
        for (Row r : autoSuggestVO.getAllRowsInRange()) {
            h.add(r.getAttribute("ItmDesc").toString());
        }
        return h;
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = "N";
        if(valueExp != null)
        {
         msg = valueExp.getValue(elContext).toString();
        }
        return msg;
    }
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    public String isTaxApplicable() {
        
        Row curr = this.getMmCpoItm1().getCurrentRow();
        String flag = null;
        if (curr.getAttribute("ItmId") != null) {
            ViewObjectImpl taxrulevo = this.getLovTaxRuleItm();
        RowQualifier rq=new RowQualifier(taxrulevo);
        rq.setWhereClause("CldId='"+CldId+"' and SlocId= "+SlocId+" and OrgId='"+OrgId+"' and HoOrgId='"+HoOrgId+"' and ItmId='"+ curr.getAttribute("ItmId")+"'");
        Row[] rr1 = taxrulevo.getFilteredRows(rq);
            if (rr1.length > 0) {
                String taxFlg = rr1[0].getAttribute("TaxExmptFlg").toString();
                

                if (taxFlg.equalsIgnoreCase("Y")) {
                    return "Y";
                } else {
                    if (rr1[0].getAttribute("TaxRuleId") != null) {
                       return "N";
                    }
                    return "Y";
                }
               

            }

        }
        return flag;
    }
    public void ApplyTax() {
        
        Row curr = this.getMmCpoItm1().getCurrentRow();
        Row svcR=this.getMmCpo1().getCurrentRow();
        ViewObjectImpl taxrulevo = this.getLovTaxRuleItm();
        Number str=null;
        Number ret = null;
        Integer tax=null;
        Integer taxRule=null;
        String taxExmpt=null;
        
        Adflog.info("current taxable amount is "+curr.getAttribute("TranItmAmtSp"));
        if (curr.getAttribute("TranItmAmtSp") != null && ((Number)curr.getAttribute("TranItmAmtSp")).compareTo(new Number(0))==1) {
            RowQualifier rq=null;
            if(curr.getAttribute("ItmId")!=null){
                rq=new RowQualifier(taxrulevo);
                rq.setWhereClause("CldId='"+CldId+"' and SlocId= "+SlocId+" and OrgId='"+OrgId+"' and HoOrgId='"+HoOrgId+"' and ItmId='"+ curr.getAttribute("ItmId")+"'");
            }
            Row[] rr1 = taxrulevo.getFilteredRows(rq);
            if(rr1.length>0){
              taxRule=(Integer)rr1[0].getAttribute("TaxRuleId");
              taxExmpt=  rr1[0].getAttribute("TaxExmptFlg").toString();
            }
            
              Number taxableAmt = (Number)curr.getAttribute("TranItmAmtSp");
              String ItmId=curr.getAttribute("ItmId").toString();
              String DocId=curr.getAttribute("DocId").toString();
              String itmUom=curr.getAttribute("ItmUom").toString();
            
            
            Number convfctr=new Number(1);
            if(svcR.getAttribute("CurrConvFctr")!=null)
               convfctr=(Number)svcR.getAttribute("CurrConvFctr");
            
            getDBTransaction().postChanges();
            Adflog.info("parametere are "+taxableAmt+"  "+ItmId+"  "+taxRule+"  "+convfctr+"   "+taxExmpt);
        //     taxEmptdflg
         BigDecimal  ret33 = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_INS_CPO_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    SlocId,CldId, HoOrgId, OrgId, DocId,ItmId,itmUom,taxRule,usrId ,taxableAmt,"I",convfctr,taxExmpt,"Y"}));

            this.getDBTransaction().postChanges();
            if(ret33!=null){
               try{
                  ret=new Number(ret33);
               }catch(Exception e){
                   Adflog.info("some error found in typecast tax"+e);
               }
           }
           // getDBTransaction().postChanges();
           
        }
        this.getMmCpoItm1().executeQuery();
        this.getMmCpoTr1().executeQuery();
        this.getMmCpoTrLines1().executeQuery();
        Adflog.info("return in tr lines is "+ret);
        if(ret!=null && ret.compareTo(new Number(0))>0){
            str=ret;
            curr.setAttribute("NewTaxAmt", str);
            Adflog.info("new tax amtis -------------> "+curr.getAttribute("NewTaxAmt"));
           // Number qty=(Number)curr.getAttribute("ItmQty");
            //Number itmPrice=(Number)curr.getAttribute("ItmPrice");
            /*   if(curr.getAttribute("DiscVal")!=null){
                Number discvalue=(Number)curr.getAttribute("DiscVal");
                Number totamt=(Number)((Number)qty.multiply(itmPrice).add(str).minus(discvalue)).round(6);
                curr.setAttribute("TransTotAmt", totamt);
            }else{
                Number totamt=(Number)((Number)qty.multiply(itmPrice).add(str)).round(6);
                curr.setAttribute("TransTotAmt", totamt);
            } */
            
        }else{
            ret =new Number(0);
        }
        
    }

    /**
     * Container's getter for LovTaxRuleItm1.
     * @return LovTaxRuleItm1
     */
    public ViewObjectImpl getLovTaxRuleItm() {
        return (ViewObjectImpl) findViewObject("LovTaxRuleItm");
    }
}
