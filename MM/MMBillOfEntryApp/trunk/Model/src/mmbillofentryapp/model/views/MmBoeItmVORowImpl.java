package mmbillofentryapp.model.views;

import adf.utils.ebiz.EbizParams;

import mmbillofentryapp.model.entities.MmBoeItmEOImpl;
import mmbillofentryapp.model.services.BillOfEntryAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 02 14:29:14 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmBoeItmVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMBOEITMEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        DocId,
        DocIdSrc,
        DlvSchdlNo,
        ItmId,
        ItmUom,
        PendQty,
        DlvQty,
        ItmUomBs,
        UomConvFctr,
        DlvQtyBs,
        LndPrice,
        PurPrice,
        PurPriceBs,
        LndPriceBs,
        TaxableAmtSp,
        TaxableAmtBs,
        DiscAmtSp,
        DiscAmtBs,
        TotTaxAmtSp,
        TotTaxAmtBs,
        RecTaxAmtSp,
        RecTaxAmtBs,
        OcAmtSp,
        OcAmtBs,
        TaxableAmtSpOrig,
        TaxableAmtBsOrig,
        TransItmName,
        TransUnitName,
        TransHoOrgId,
        OcTaxAmtSp,
        TransTaxableAmountSp,
        TransTaxableAmtSp,
        TransItmAmtWithTax,
        TransTotalItmAmountSp,
        TransConvrsionFactor,
        TransTotalItmAmountBs,
        TransLandedCost,
        TransLandedCostBs,
        MmBoeTr;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int DLVSCHDLNO = AttributesEnum.DlvSchdlNo.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int PENDQTY = AttributesEnum.PendQty.index();
    public static final int DLVQTY = AttributesEnum.DlvQty.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int UOMCONVFCTR = AttributesEnum.UomConvFctr.index();
    public static final int DLVQTYBS = AttributesEnum.DlvQtyBs.index();
    public static final int LNDPRICE = AttributesEnum.LndPrice.index();
    public static final int PURPRICE = AttributesEnum.PurPrice.index();
    public static final int PURPRICEBS = AttributesEnum.PurPriceBs.index();
    public static final int LNDPRICEBS = AttributesEnum.LndPriceBs.index();
    public static final int TAXABLEAMTSP = AttributesEnum.TaxableAmtSp.index();
    public static final int TAXABLEAMTBS = AttributesEnum.TaxableAmtBs.index();
    public static final int DISCAMTSP = AttributesEnum.DiscAmtSp.index();
    public static final int DISCAMTBS = AttributesEnum.DiscAmtBs.index();
    public static final int TOTTAXAMTSP = AttributesEnum.TotTaxAmtSp.index();
    public static final int TOTTAXAMTBS = AttributesEnum.TotTaxAmtBs.index();
    public static final int RECTAXAMTSP = AttributesEnum.RecTaxAmtSp.index();
    public static final int RECTAXAMTBS = AttributesEnum.RecTaxAmtBs.index();
    public static final int OCAMTSP = AttributesEnum.OcAmtSp.index();
    public static final int OCAMTBS = AttributesEnum.OcAmtBs.index();
    public static final int TAXABLEAMTSPORIG = AttributesEnum.TaxableAmtSpOrig.index();
    public static final int TAXABLEAMTBSORIG = AttributesEnum.TaxableAmtBsOrig.index();
    public static final int TRANSITMNAME = AttributesEnum.TransItmName.index();
    public static final int TRANSUNITNAME = AttributesEnum.TransUnitName.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int OCTAXAMTSP = AttributesEnum.OcTaxAmtSp.index();
    public static final int TRANSTAXABLEAMOUNTSP = AttributesEnum.TransTaxableAmountSp.index();
    public static final int TRANSTAXABLEAMTSP = AttributesEnum.TransTaxableAmtSp.index();
    public static final int TRANSITMAMTWITHTAX = AttributesEnum.TransItmAmtWithTax.index();
    public static final int TRANSTOTALITMAMOUNTSP = AttributesEnum.TransTotalItmAmountSp.index();
    public static final int TRANSCONVRSIONFACTOR = AttributesEnum.TransConvrsionFactor.index();
    public static final int TRANSTOTALITMAMOUNTBS = AttributesEnum.TransTotalItmAmountBs.index();
    public static final int TRANSLANDEDCOST = AttributesEnum.TransLandedCost.index();
    public static final int TRANSLANDEDCOSTBS = AttributesEnum.TransLandedCostBs.index();
    public static final int MMBOETR = AttributesEnum.MmBoeTr.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmBoeItmVORowImpl() {
    }
    Number one = new Number(1);
    Number zero = new Number(0);
    
    /**
    *Global round digit for Amount
    * @return
    */
    
    public Integer getGlblRoundAmtDigit(){
    if(EbizParams.GLBL_AMT_DIGIT()!=null){
        return EbizParams.GLBL_AMT_DIGIT();
    }else{
        return 6;
    }
    }
    /**
    *Global round digit for Quantity
    * @return
    */
    
        public Integer getGlblRoundQtyDigit(){
        if(EbizParams.GLBL_QTY_DIGIT()!=null){
            return EbizParams.GLBL_QTY_DIGIT();
        }else{
            return 6;
        }
        
    }
        /**
     *Global round digit for currency rate
     * @return
     */
        
     public Integer getGlblRoundCurrRateDigit(){
     if(EbizParams.GLBL_CURR_DIGIT()!=null){
         return EbizParams.GLBL_CURR_DIGIT();
     }else{
         return 6;
     }
     
     }

    /**
     * Gets MmBoeItmEO entity object.
     * @return the MmBoeItmEO
     */
    public MmBoeItmEOImpl getMmBoeItmEO() {
        return (MmBoeItmEOImpl) getEntity(ENTITY_MMBOEITMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @return the DOC_ID_SRC
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @param value value to set the DOC_ID_SRC
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @return the DLV_SCHDL_NO
     */
    public Integer getDlvSchdlNo() {
        return (Integer) getAttributeInternal(DLVSCHDLNO);
    }

    /**
     * Sets <code>value</code> as attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @param value value to set the DLV_SCHDL_NO
     */
    public void setDlvSchdlNo(Integer value) {
        setAttributeInternal(DLVSCHDLNO, value);
    }

    /**
     * Gets the attribute value for ITM_ID using the alias name ItmId.
     * @return the ITM_ID
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID using the alias name ItmId.
     * @param value value to set the ITM_ID
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ITM_UOM using the alias name ItmUom.
     * @return the ITM_UOM
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM using the alias name ItmUom.
     * @param value value to set the ITM_UOM
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for PEND_QTY using the alias name PendQty.
     * @return the PEND_QTY
     */
    public Number getPendQty() {
        return (Number) getAttributeInternal(PENDQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for PEND_QTY using the alias name PendQty.
     * @param value value to set the PEND_QTY
     */
    public void setPendQty(Number value) {
        setAttributeInternal(PENDQTY, value);
    }

    /**
     * Gets the attribute value for DLV_QTY using the alias name DlvQty.
     * @return the DLV_QTY
     */
    public Number getDlvQty() {
        return (Number) getAttributeInternal(DLVQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for DLV_QTY using the alias name DlvQty.
     * @param value value to set the DLV_QTY
     */
    public void setDlvQty(Number value) {
        if (value == null) {
            value = zero;
        }
        if (getPurPrice() != null) {
            Number currFactor = one;
            String taxAftDiscFlg = "N";
            if (getAm().getMmBoe().getCurrentRow().getAttribute("CurrConvFctr") != null) {
                currFactor = (Number)((Number) getAm().getMmBoe().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
            }
            if (getAm().getMmBoeSrc().getCurrentRow().getAttribute("TaxAfterDiscFlg") != null) {
                taxAftDiscFlg = getAm().getMmBoeSrc().getCurrentRow().getAttribute("TaxAfterDiscFlg").toString();
            }
            Number tot = value.multiply(getPurPrice());
            Number totWithDis = (Number) tot.minus(getDiscAmtSp());
            if ("N".equalsIgnoreCase(taxAftDiscFlg)) {
                setTaxableAmtSp((Number) tot.round(getGlblRoundAmtDigit()));
                setTaxableAmtBs((Number) tot.multiply(currFactor).round(getGlblRoundAmtDigit()));
                setTaxableAmtSpOrig((Number) tot.round(getGlblRoundAmtDigit()));
                setTaxableAmtBsOrig((Number) tot.multiply(currFactor).round(getGlblRoundAmtDigit()));
                setTransTaxableAmountSp((Number)this.taxValue().round(getGlblRoundAmtDigit()));
            } else if ("Y".equalsIgnoreCase(taxAftDiscFlg)) {
                setTaxableAmtSp((Number) totWithDis.round(getGlblRoundAmtDigit()));
                setTaxableAmtBs((Number) totWithDis.multiply(currFactor).round(getGlblRoundAmtDigit()));
                setTaxableAmtSpOrig((Number) totWithDis.round(getGlblRoundAmtDigit()));
                setTaxableAmtBsOrig((Number) totWithDis.multiply(currFactor).round(getGlblRoundAmtDigit()));
                setTransTaxableAmountSp((Number)(this.taxValue().round(getGlblRoundAmtDigit())));
            }

        }

        setAttributeInternal(DLVQTY, value);
    }

    /**
     * Gets the attribute value for ITM_UOM_BS using the alias name ItmUomBs.
     * @return the ITM_UOM_BS
     */
    public String getItmUomBs() {
        return (String) getAttributeInternal(ITMUOMBS);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM_BS using the alias name ItmUomBs.
     * @param value value to set the ITM_UOM_BS
     */
    public void setItmUomBs(String value) {
        setAttributeInternal(ITMUOMBS, value);
    }

    /**
     * Gets the attribute value for UOM_CONV_FCTR using the alias name UomConvFctr.
     * @return the UOM_CONV_FCTR
     */
    public Number getUomConvFctr() {
        return (Number) getAttributeInternal(UOMCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for UOM_CONV_FCTR using the alias name UomConvFctr.
     * @param value value to set the UOM_CONV_FCTR
     */
    public void setUomConvFctr(Number value) {
        setAttributeInternal(UOMCONVFCTR, value);
    }

    /**
     * Gets the attribute value for DLV_QTY_BS using the alias name DlvQtyBs.
     * @return the DLV_QTY_BS
     */
    public Number getDlvQtyBs() {
        return (Number) getAttributeInternal(DLVQTYBS);
    }

    /**
     * Sets <code>value</code> as attribute value for DLV_QTY_BS using the alias name DlvQtyBs.
     * @param value value to set the DLV_QTY_BS
     */
    public void setDlvQtyBs(Number value) {
        setAttributeInternal(DLVQTYBS, value);
    }

    /**
     * Gets the attribute value for LND_PRICE using the alias name LndPrice.
     * @return the LND_PRICE
     */
    public Number getLndPrice() {
        return (Number) getAttributeInternal(LNDPRICE);
    }

    /**
     * Sets <code>value</code> as attribute value for LND_PRICE using the alias name LndPrice.
     * @param value value to set the LND_PRICE
     */
    public void setLndPrice(Number value) {
        setAttributeInternal(LNDPRICE, value);
    }

    /**
     * Gets the attribute value for PUR_PRICE using the alias name PurPrice.
     * @return the PUR_PRICE
     */
    public Number getPurPrice() {
        return (Number) getAttributeInternal(PURPRICE);
    }

    /**
     * Sets <code>value</code> as attribute value for PUR_PRICE using the alias name PurPrice.
     * @param value value to set the PUR_PRICE
     */
    public void setPurPrice(Number value) {
        setAttributeInternal(PURPRICE, value);
    }

    /**
     * Gets the attribute value for PUR_PRICE_BS using the alias name PurPriceBs.
     * @return the PUR_PRICE_BS
     */
    public Number getPurPriceBs() {
        return (Number) getAttributeInternal(PURPRICEBS);
    }

    /**
     * Sets <code>value</code> as attribute value for PUR_PRICE_BS using the alias name PurPriceBs.
     * @param value value to set the PUR_PRICE_BS
     */
    public void setPurPriceBs(Number value) {
        setAttributeInternal(PURPRICEBS, value);
    }

    /**
     * Gets the attribute value for LND_PRICE_BS using the alias name LndPriceBs.
     * @return the LND_PRICE_BS
     */
    public Number getLndPriceBs() {
        return (Number) getAttributeInternal(LNDPRICEBS);
    }

    /**
     * Sets <code>value</code> as attribute value for LND_PRICE_BS using the alias name LndPriceBs.
     * @param value value to set the LND_PRICE_BS
     */
    public void setLndPriceBs(Number value) {
        setAttributeInternal(LNDPRICEBS, value);
    }

    /**
     * Gets the attribute value for TAXABLE_AMT_SP using the alias name TaxableAmtSp.
     * @return the TAXABLE_AMT_SP
     */
    public Number getTaxableAmtSp() {
        return (Number) getAttributeInternal(TAXABLEAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TAXABLE_AMT_SP using the alias name TaxableAmtSp.
     * @param value value to set the TAXABLE_AMT_SP
     */
    public void setTaxableAmtSp(Number value) {
        setAttributeInternal(TAXABLEAMTSP,(Number) value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for TAXABLE_AMT_BS using the alias name TaxableAmtBs.
     * @return the TAXABLE_AMT_BS
     */
    public Number getTaxableAmtBs() {
        return (Number) getAttributeInternal(TAXABLEAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TAXABLE_AMT_BS using the alias name TaxableAmtBs.
     * @param value value to set the TAXABLE_AMT_BS
     */
    public void setTaxableAmtBs(Number value) {
        setAttributeInternal(TAXABLEAMTBS, (Number)value.round(getGlblRoundAmtDigit()));
    }

    /**
     * Gets the attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @return the DISC_AMT_SP
     */
    public Number getDiscAmtSp() {
        return (Number) getAttributeInternal(DISCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_SP using the alias name DiscAmtSp.
     * @param value value to set the DISC_AMT_SP
     */
    public void setDiscAmtSp(Number value) {
        setAttributeInternal(DISCAMTSP, value);
    }

    /**
     * Gets the attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @return the DISC_AMT_BS
     */
    public Number getDiscAmtBs() {
        return (Number) getAttributeInternal(DISCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for DISC_AMT_BS using the alias name DiscAmtBs.
     * @param value value to set the DISC_AMT_BS
     */
    public void setDiscAmtBs(Number value) {
        setAttributeInternal(DISCAMTBS, value);
    }

    /**
     * Gets the attribute value for TOT_TAX_AMT_SP using the alias name TotTaxAmtSp.
     * @return the TOT_TAX_AMT_SP
     */
    public Number getTotTaxAmtSp() {
        return (Number) getAttributeInternal(TOTTAXAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_TAX_AMT_SP using the alias name TotTaxAmtSp.
     * @param value value to set the TOT_TAX_AMT_SP
     */
    public void setTotTaxAmtSp(Number value) {
        setAttributeInternal(TOTTAXAMTSP, value);
    }

    /**
     * Gets the attribute value for TOT_TAX_AMT_BS using the alias name TotTaxAmtBs.
     * @return the TOT_TAX_AMT_BS
     */
    public Number getTotTaxAmtBs() {
        return (Number) getAttributeInternal(TOTTAXAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_TAX_AMT_BS using the alias name TotTaxAmtBs.
     * @param value value to set the TOT_TAX_AMT_BS
     */
    public void setTotTaxAmtBs(Number value) {
        setAttributeInternal(TOTTAXAMTBS, value);
    }

    /**
     * Gets the attribute value for REC_TAX_AMT_SP using the alias name RecTaxAmtSp.
     * @return the REC_TAX_AMT_SP
     */
    public Number getRecTaxAmtSp() {
        return (Number) getAttributeInternal(RECTAXAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for REC_TAX_AMT_SP using the alias name RecTaxAmtSp.
     * @param value value to set the REC_TAX_AMT_SP
     */
    public void setRecTaxAmtSp(Number value) {
        setAttributeInternal(RECTAXAMTSP, value);
    }

    /**
     * Gets the attribute value for REC_TAX_AMT_BS using the alias name RecTaxAmtBs.
     * @return the REC_TAX_AMT_BS
     */
    public Number getRecTaxAmtBs() {
        return (Number) getAttributeInternal(RECTAXAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for REC_TAX_AMT_BS using the alias name RecTaxAmtBs.
     * @param value value to set the REC_TAX_AMT_BS
     */
    public void setRecTaxAmtBs(Number value) {
        setAttributeInternal(RECTAXAMTBS, value);
    }

    /**
     * Gets the attribute value for OC_AMT_SP using the alias name OcAmtSp.
     * @return the OC_AMT_SP
     */
    public Number getOcAmtSp() {
        return (Number) getAttributeInternal(OCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_AMT_SP using the alias name OcAmtSp.
     * @param value value to set the OC_AMT_SP
     */
    public void setOcAmtSp(Number value) {
        setAttributeInternal(OCAMTSP, value);
    }

    /**
     * Gets the attribute value for OC_AMT_BS using the alias name OcAmtBs.
     * @return the OC_AMT_BS
     */
    public Number getOcAmtBs() {
        return (Number) getAttributeInternal(OCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_AMT_BS using the alias name OcAmtBs.
     * @param value value to set the OC_AMT_BS
     */
    public void setOcAmtBs(Number value) {
        setAttributeInternal(OCAMTBS, value);
    }

    /**
     * Gets the attribute value for TAXABLE_AMT_SP_ORIG using the alias name TaxableAmtSpOrig.
     * @return the TAXABLE_AMT_SP_ORIG
     */
    public Number getTaxableAmtSpOrig() {
        return (Number) getAttributeInternal(TAXABLEAMTSPORIG);
    }

    /**
     * Sets <code>value</code> as attribute value for TAXABLE_AMT_SP_ORIG using the alias name TaxableAmtSpOrig.
     * @param value value to set the TAXABLE_AMT_SP_ORIG
     */
    public void setTaxableAmtSpOrig(Number value) {
        setAttributeInternal(TAXABLEAMTSPORIG, value);
    }

    /**
     * Gets the attribute value for TAXABLE_AMT_BS_ORIG using the alias name TaxableAmtBsOrig.
     * @return the TAXABLE_AMT_BS_ORIG
     */
    public Number getTaxableAmtBsOrig() {
        return (Number) getAttributeInternal(TAXABLEAMTBSORIG);
    }

    /**
     * Sets <code>value</code> as attribute value for TAXABLE_AMT_BS_ORIG using the alias name TaxableAmtBsOrig.
     * @param value value to set the TAXABLE_AMT_BS_ORIG
     */
    public void setTaxableAmtBsOrig(Number value) {
        setAttributeInternal(TAXABLEAMTBSORIG, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmName.
     * @return the TransItmName
     */
    public String getTransItmName() {
        if (getItmId() != null) {

            getAm().getLovItmDesc().setNamedWhereClauseParam("CldIdBind", getCldId());
            getAm().getLovItmDesc().setNamedWhereClauseParam("SlocIdBind", getSlocId());
            getAm().getLovItmDesc().setNamedWhereClauseParam("HoOrgIdBind", getTransHoOrgId());
            getAm().getLovItmDesc().setNamedWhereClauseParam("OrgIdBind", getOrgId());
            getAm().getLovItmDesc().setNamedWhereClauseParam("ItmDescBind", null);
            getAm().getLovItmDesc().setNamedWhereClauseParam("ItmIdBind", getItmId());
            getAm().getLovItmDesc().executeQuery();
            Row[] rr = getAm().getLovItmDesc().getFilteredRows("ItmId", getItmId());
            if (rr.length > 0 && rr[0].getAttribute("ItmDesc") != null) {
                return rr[0].getAttribute("ItmDesc").toString();
            } else {
                return (String) getAttributeInternal(TRANSITMNAME);
            }

        } else {
            return (String) getAttributeInternal(TRANSITMNAME);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmName.
     * @param value value to set the  TransItmName
     */
    public void setTransItmName(String value) {
        setAttributeInternal(TRANSITMNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransUnitName.
     * @return the TransUnitName
     */
    public String getTransUnitName() {
        if (getItmUom() != null) {
            Row[] rr = getAm().getLovUomNm().getFilteredRows("UomId", getItmUom());
            if (rr.length > 0 && rr[0].getAttribute("UomDesc") != null) {
                return rr[0].getAttribute("UomDesc").toString();
            } else {
                return (String) getAttributeInternal(TRANSUNITNAME);
            }
        }
        return (String) getAttributeInternal(TRANSUNITNAME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUnitName.
     * @param value value to set the  TransUnitName
     */
    public void setTransUnitName(String value) {
        setAttributeInternal(TRANSUNITNAME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        return EbizParams.GLBL_HO_ORG_ID();
        // return (String) getAttributeInternal(TRANSHOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OcTaxAmtSp.
     * @return the OcTaxAmtSp
     */
    public Number getOcTaxAmtSp() {

        BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
        //System.out.println("inside getttttttttttt");
        if (getDocIdSrc() != null) {
            ViewObjectImpl vosrc = am.getMmBoe();
            ViewObjectImpl vo = am.getMmBoeSrc();
            Number totalOc = new Number(0);
            Number totalWoOc = new Number(0);
            RowQualifier rq = new RowQualifier(vosrc);
            rq.setWhereClause("CldId ='" + getCldId() + "' and  SlocId =" + getSlocId() + " and OrgId ='" + getOrgId() +
                              "' and DocId ='" + getDocId() + "'");
            Row[] rr = vosrc.getFilteredRows(rq);
            if (rr.length > 0) {
                if (rr[0].getAttribute("TransPartOfAmountOc") != null)
                    totalOc = (Number) rr[0].getAttribute("TransPartOfAmountOc");
            }
            RowQualifier rq1 = new RowQualifier(vo);
            rq1.setWhereClause("CldId ='" + getCldId() + "' and  SlocId =" + getSlocId() + " and OrgId ='" +
                               getOrgId() + "' and DocId ='" + getDocId() + "'");
            Row[] rr1 = vo.getFilteredRows(rq1);
           // System.out.println(rq.getExprStr() + "TransTotalItmAmtWithTax rr lenth " + rr.length);
            if (rr1.length > 0) {
                if (rr1[0].getAttribute("TransTotalItmAmtWithTax") != null)
                    totalWoOc = (Number) rr1[0].getAttribute("TransTotalItmAmtWithTax");
            }
            if (totalOc.compareTo(new Number(0)) > 0 && totalWoOc.compareTo(new Number(0)) > 0) {
                // Number poCostWoutOc=new Number(0);
                /*  if(am.getMmDrftPo().getCurrentRow().getAttribute("TransPoAmtSmWoutOc")!=null)
              poCostWoutOc = (Number)am.getMmDrftPo().getCurrentRow().getAttribute("TransPoAmtSmWoutOc");
              Number itmPrice=new Number(0);
              Number disc=new Number(0);
              Number tax=new Number(0);
              Number itmOcAmt=new Number(0);
              Number qty=new Number(0);
              if(getItmPrice()!=null)
                  itmPrice=getItmPrice();
              if(getTotDiscAmtSp()!=null)
                  disc=getTotDiscAmtSp();
              if(getTransItemTaxAmt()!=null)
                  tax=getTransItemTaxAmt();
              if(getOrdQty()!=null)
                  qty=getOrdQty(); */



                // Number itmAmt=(qty.multiply(itmPrice)).subtract(disc).add(tax);
             //   System.out.println("getTransLndPrice=   " + getTransItmAmtWithTax() + "  totalWoOc " + totalWoOc);
                Number itmOcAmt = new Number(0);
                Number itmAmt = getTransItmAmtWithTax();
                Number itmPerc = new Number(0);
                // itmPerc=itmAmt.multiply(new Number(100)).divide(poCostWoutOc);
                itmPerc = itmAmt.multiply(new Number(100)).divide(totalWoOc);
                itmOcAmt = totalOc.multiply(itmPerc).divide(new Number(100));
               // Number conv=(Number)vosrc.getCurrentRow().getAttribute("CurrConvFctr");
             //   System.out.println("itmOcAmt=" + itmOcAmt);
               //if(itmOcAmt!=null)
                //   setOcAmtSp((Number)itmOcAmt.round(6));
                //if(conv!=null)
                  //  setOcAmtBs((Number)itmOcAmt.multiply(conv).round(6));
                
                
                return itmOcAmt;
            }
           // setOcAmtSp(new Number(0));
            //setOcAmtBs(new Number(0));
            return new Number(0);
        }

        return new Number(0);

        //  return (Number) getAttributeInternal(TRANSITMAMTOC);


        // return (Number) getAttributeInternal(OCTAXAMTSP);
        // return getTaxableAmtSpOrig().add(getTransTaxableAmountSp());

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OcTaxAmtSp.
     * @param value value to set the  OcTaxAmtSp
     */
    public void setOcTaxAmtSp(Number value) {
        setAttributeInternal(OCTAXAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxableAmountSp.
     * @return the TransTaxableAmountSp
     */
    public Number getTransTaxableAmountSp() {
        //        if (getAttributeInternal(TRANSTAXABLEAMOUNTSP) != null) {
        //            return (Number) getAttributeInternal(TRANSTAXABLEAMOUNTSP);
        //        } else {
        BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
        ViewObjectImpl vo = am.getMmBoeSrc();
        ViewObjectImpl boeVo = am.getMmBoe();
        if (vo.getCurrentRow() != null && vo.getCurrentRow().getAttribute("ShpmntBasis") != null) {
            Number ocTaxAmt = new Number(0);

            Number totalSumtaxableSp = (Number) vo.getCurrentRow().getAttribute("TransTotAmountSumTax");
            Number ocOtherSp = (Number) boeVo.getCurrentRow().getAttribute("TransOcOtherSp");
            Number ocInsSp = (Number) boeVo.getCurrentRow().getAttribute("TransOcInsSp");
            Number ocFrtSp = (Number) boeVo.getCurrentRow().getAttribute("TransOcFrtOfCost");

            Integer shpBasis = Integer.parseInt(vo.getCurrentRow().getAttribute("ShpmntBasis").toString());
            if (shpBasis.compareTo(new Integer(807)) == 0 && totalSumtaxableSp.compareTo(new Number(0)) == 1) { //for FOB
                Number ocAmt = ocOtherSp.add(ocInsSp).add(ocFrtSp);
                Number ocPer = (Number) getTaxableAmtSpOrig().divide(totalSumtaxableSp).round(getGlblRoundAmtDigit());
                //ocTaxAmt = (Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(6);
                ocTaxAmt = (Number) (ocAmt.multiply(ocPer)).round(getGlblRoundAmtDigit());
                /*   System.out.println(ocTaxAmt + " ocTaxAmt  " + ocAmt + " ocAmt 807  ocPer " + ocPer + " ocOtherSp " +
                                   ocOtherSp + "   ocInsSp  " + ocInsSp + "  ocFrtSp  " + ocFrtSp +
                                   "   getTaxableAmtSpOrig  " + getTaxableAmtSpOrig() + " totalSumtaxableSp " +
                                   totalSumtaxableSp);*/ 
                // setTaxableAmtSp((Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(6));
                return ocTaxAmt;

            } else if (shpBasis.compareTo(new Integer(808)) == 0 && totalSumtaxableSp.compareTo(new Number(0)) == 1) { // For CIF
                Number ocAmt = ocOtherSp;
                Number ocPer = (Number) getTaxableAmtSpOrig().divide(totalSumtaxableSp).round(getGlblRoundAmtDigit());
                //  ocTaxAmt = (Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(6);
                ocTaxAmt = (Number) (ocAmt.multiply(ocPer)).round(getGlblRoundAmtDigit());
                /*  System.out.println(ocTaxAmt + " ocTaxAmt  " + ocAmt + " ocAmt 808  ocPer " + ocPer + " ocOtherSp " +
                                   ocOtherSp + "   ocInsSp  " + ocInsSp + "  ocFrtSp  " + ocFrtSp +
                                   "   getTaxableAmtSpOrig  " + getTaxableAmtSpOrig() + " totalSumtaxableSp " +
                                   totalSumtaxableSp);
                */ // setTaxableAmtSp((Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(6));
                return ocTaxAmt;
            } else if (shpBasis.compareTo(new Integer(809)) == 0 && totalSumtaxableSp.compareTo(new Number(0)) == 1) { // For C&F
                Number ocAmt = ocOtherSp.add(ocInsSp);
                Number ocPer = (Number) getTaxableAmtSpOrig().divide(totalSumtaxableSp).round(getGlblRoundAmtDigit());
                // ocTaxAmt = (Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(6);
                ocTaxAmt = (Number) (ocAmt.multiply(ocPer)).round(getGlblRoundAmtDigit());
                /*   System.out.println(ocTaxAmt + " ocTaxAmt  " + ocAmt + " ocAmt 809  ocPer " + ocPer + " ocOtherSp " +
                                   ocOtherSp + "   ocInsSp  " + ocInsSp + "  ocFrtSp  " + ocFrtSp +
                                   "   getTaxableAmtSpOrig  " + getTaxableAmtSpOrig() + " totalSumtaxableSp " +
                                   totalSumtaxableSp);
               */  // setTaxableAmtSp((Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(6));
                return ocTaxAmt;
            } else if (shpBasis.compareTo(new Integer(810)) == 0 && totalSumtaxableSp.compareTo(new Number(0)) == 1) { // fro C&I
                Number ocAmt = ocOtherSp.add(ocFrtSp);
                Number ocPer = (Number) getTaxableAmtSpOrig().divide(totalSumtaxableSp).round(getGlblRoundAmtDigit());
                // ocTaxAmt = (Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(6);
                ocTaxAmt = (Number) (ocAmt.multiply(ocPer)).round(getGlblRoundAmtDigit());
                /*    System.out.println(ocTaxAmt + " ocTaxAmt  " + ocAmt + " ocAmt 810  ocPer " + ocPer + " ocOtherSp " +
                                   ocOtherSp + "   ocInsSp  " + ocInsSp + "  ocFrtSp  " + ocFrtSp +
                                   "   getTaxableAmtSpOrig  " + getTaxableAmtSpOrig() + " totalSumtaxableSp " +
                                   totalSumtaxableSp);
              */   //setTaxableAmtSp((Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(6));
                return ocTaxAmt;
            } else {
                if(getAttributeInternal(TRANSTAXABLEAMOUNTSP)!=null){
                return (Number) getAttributeInternal(TRANSTAXABLEAMOUNTSP);
                }else{
                    return zero;
                }
            }
        } else {
            if(getAttributeInternal(TRANSTAXABLEAMOUNTSP)!=null){
            return (Number) getAttributeInternal(TRANSTAXABLEAMOUNTSP);
            }else{
                return zero;
            }

            //  }
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxableAmountSp.
     * @param value value to set the  TransTaxableAmountSp
     */
    public void setTransTaxableAmountSp(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setAttributeInternal(TRANSTAXABLEAMOUNTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTaxableAmtSp.
     * @return the TransTaxableAmtSp
     */
    public Number getTransTaxableAmtSp() {
        if(getTaxableAmtSpOrig()!=null && getTransTaxableAmountSp()!=null){
        Number ab = getTransTaxableAmountSp().add(getTaxableAmtSpOrig());
        //System.out.println("else   " + ab);
        return ab;
        }
        else{
            return new Number(0);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxableAmtSp.
     * @param value value to set the  TransTaxableAmtSp
     */
    public void setTransTaxableAmtSp(Number value) {
        setAttributeInternal(TRANSTAXABLEAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmAmtWithTax.
     * @return the TransItmAmtWithTax
     */
    public Number getTransItmAmtWithTax() {


        if (getAttributeInternal(TRANSITMAMTWITHTAX) != null) {
            return (Number) getAttributeInternal(TRANSITMAMTWITHTAX);
        } else {
            Number lndcost = (Number) ((getPurPrice().multiply(getDlvQty())).minus(getDiscAmtSp()));
            Number tax = (Number) getTotTaxAmtSp().minus(getRecTaxAmtSp());
            return (Number) lndcost.add(tax).round(getGlblRoundAmtDigit());
        }
        //  return (Number) getAttributeInternal(TRANSITMAMTWITHTAX);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmAmtWithTax.
     * @param value value to set the  TransItmAmtWithTax
     */
    public void setTransItmAmtWithTax(Number value) {
        setAttributeInternal(TRANSITMAMTWITHTAX, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalItmAmountSp.
     * @return the TransTotalItmAmountSp
     */
    public Number getTransTotalItmAmountSp() {
        if (getAttributeInternal(TRANSTOTALITMAMOUNTSP) != null) {
            BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
            Row curr = am.getMmBoe().getCurrentRow();
            Number totAmt = (Number) getAttributeInternal(TRANSTOTALITMAMOUNTSP);
            if (getDlvQty() != null) {
                Number dlvQty = (Number) getDlvQty();
                Number lndPrice = (Number) totAmt.divide(dlvQty).round(getGlblRoundAmtDigit());
                setLndPrice(lndPrice);
                if (curr.getAttribute("CurrConvFctr") != null) {
                    Number conv = (Number)((Number) curr.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
                    setLndPriceBs((Number) lndPrice.multiply(conv).round(getGlblRoundAmtDigit()));
                }
            }
        }
        return (Number) getAttributeInternal(TRANSTOTALITMAMOUNTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalItmAmountSp.
     * @param value value to set the  TransTotalItmAmountSp
     */
    public void setTransTotalItmAmountSp(Number value) {
        setAttributeInternal(TRANSTOTALITMAMOUNTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransConvrsionFactor.
     * @return the TransConvrsionFactor
     */
    public Number getTransConvrsionFactor() {
        BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
        if (am.getMmBoe().getCurrentRow() != null &&
            am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr") != null) {
            return (Number)((Number)am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        } else {
            return new Number(1);
        }
        // return (Number) getAttributeInternal(TRANSCONVRSIONFACTOR);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransConvrsionFactor.
     * @param value value to set the  TransConvrsionFactor
     */
    public void setTransConvrsionFactor(Number value) {
        setAttributeInternal(TRANSCONVRSIONFACTOR, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalItmAmountBs.
     * @return the TransTotalItmAmountBs
     */
    public Number getTransTotalItmAmountBs() {
        return (Number) getAttributeInternal(TRANSTOTALITMAMOUNTBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalItmAmountBs.
     * @param value value to set the  TransTotalItmAmountBs
     */
    public void setTransTotalItmAmountBs(Number value) {
        setAttributeInternal(TRANSTOTALITMAMOUNTBS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLandedCost.
     * @return the TransLandedCost
     */
    public Number getTransLandedCost() {
        return (Number) getAttributeInternal(TRANSLANDEDCOST);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransLandedCost.
     * @param value value to set the  TransLandedCost
     */
    public void setTransLandedCost(Number value) {
        setAttributeInternal(TRANSLANDEDCOST, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLandedCostBs.
     * @return the TransLandedCostBs
     */
    public Number getTransLandedCostBs() {
        return (Number) getAttributeInternal(TRANSLANDEDCOSTBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransLandedCostBs.
     * @param value value to set the  TransLandedCostBs
     */
    public void setTransLandedCostBs(Number value) {
        setAttributeInternal(TRANSLANDEDCOSTBS, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link MmBoeTr.
     */
    public RowIterator getMmBoeTr() {
        return (RowIterator) getAttributeInternal(MMBOETR);
    }

    public BillOfEntryAMImpl getAm() {
        return (BillOfEntryAMImpl) this.getApplicationModule();
    }

    public Number taxValue() {
       // System.out.println("Calaaaaaaaaaaaaaaaaaaaaaaaaaaaaa");
        BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
        ViewObjectImpl vo = am.getMmBoeSrc();
        ViewObjectImpl boeVo = am.getMmBoe();
        Number ocTaxAmt = new Number(0);
        if (vo.getCurrentRow() != null && vo.getCurrentRow().getAttribute("ShpmntBasis") != null) {


            Number totalSumtaxableSp = (Number) vo.getCurrentRow().getAttribute("TransTotAmountSumTax");
            Number ocOtherSp = (Number) boeVo.getCurrentRow().getAttribute("TransOcOtherSp");
            Number ocInsSp = (Number) boeVo.getCurrentRow().getAttribute("TransOcInsSp");
            Number ocFrtSp = (Number) boeVo.getCurrentRow().getAttribute("TransOcFrtOfCost");

            Integer shpBasis = Integer.parseInt(vo.getCurrentRow().getAttribute("ShpmntBasis").toString());
            if (shpBasis.compareTo(new Integer(807)) == 0 && totalSumtaxableSp.compareTo(new Number(0)) == 1) { //for FOB
                Number ocAmt = ocOtherSp.add(ocInsSp).add(ocFrtSp);
                Number ocPer = (Number) getTaxableAmtSpOrig().divide(totalSumtaxableSp).round(getGlblRoundAmtDigit());
                ocTaxAmt = (Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(getGlblRoundAmtDigit());
                /*  System.out.println(ocTaxAmt + " ocTaxAmt  " + ocAmt + " ocAmt 807  ocPer " + ocPer + " ocOtherSp " +
                                   ocOtherSp + "   ocInsSp  " + ocInsSp + "  ocFrtSp  " + ocFrtSp +
                                   "   getTaxableAmtSpOrig  " + getTaxableAmtSpOrig() + " totalSumtaxableSp " +
                                   totalSumtaxableSp);
                */ setTaxableAmtSp(ocTaxAmt);
                // return ocTaxAmt;

            } else if (shpBasis.compareTo(new Integer(808)) == 0 && totalSumtaxableSp.compareTo(new Number(0)) == 1) { // For CIF
                Number ocAmt = ocOtherSp;
                Number ocPer = (Number) getTaxableAmtSpOrig().divide(totalSumtaxableSp).round(getGlblRoundAmtDigit());
                ocTaxAmt = (Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(getGlblRoundAmtDigit());
                /*   System.out.println(ocTaxAmt + " ocTaxAmt  " + ocAmt + " ocAmt 808  ocPer " + ocPer + " ocOtherSp " +
                                   ocOtherSp + "   ocInsSp  " + ocInsSp + "  ocFrtSp  " + ocFrtSp +
                                   "   getTaxableAmtSpOrig  " + getTaxableAmtSpOrig() + " totalSumtaxableSp " +
                                   totalSumtaxableSp);
               */  setTaxableAmtSp(ocTaxAmt);
                // return ocTaxAmt;
            } else if (shpBasis.compareTo(new Integer(809)) == 0 && totalSumtaxableSp.compareTo(new Number(0)) == 1) { // For C&F
                Number ocAmt = ocOtherSp.add(ocInsSp);
                Number ocPer = (Number) getTaxableAmtSpOrig().divide(totalSumtaxableSp).round(getGlblRoundAmtDigit());
                ocTaxAmt = (Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(getGlblRoundAmtDigit());
                /*    System.out.println(ocTaxAmt + " ocTaxAmt  " + ocAmt + " ocAmt 809  ocPer " + ocPer + " ocOtherSp " +
                                   ocOtherSp + "   ocInsSp  " + ocInsSp + "  ocFrtSp  " + ocFrtSp +
                                   "   getTaxableAmtSpOrig  " + getTaxableAmtSpOrig() + " totalSumtaxableSp " +
                                   totalSumtaxableSp);
              */   setTaxableAmtSp(ocTaxAmt);
                //return ocTaxAmt;
            } else if (shpBasis.compareTo(new Integer(810)) == 0 && totalSumtaxableSp.compareTo(new Number(0)) == 1) { // fro C&I
                Number ocAmt = ocOtherSp.add(ocFrtSp);
                Number ocPer = (Number) getTaxableAmtSpOrig().divide(totalSumtaxableSp).round(getGlblRoundAmtDigit());
                ocTaxAmt = (Number) getTaxableAmtSpOrig().add((ocAmt.multiply(ocPer))).round(getGlblRoundAmtDigit());
                /*       System.out.println(ocTaxAmt + " ocTaxAmt  " + ocAmt + " ocAmt 810  ocPer " + ocPer + " ocOtherSp " +
                                   ocOtherSp + "   ocInsSp  " + ocInsSp + "  ocFrtSp  " + ocFrtSp +
                                   "   getTaxableAmtSpOrig  " + getTaxableAmtSpOrig() + " totalSumtaxableSp " +
                                   totalSumtaxableSp);
           */      setTaxableAmtSp(ocTaxAmt);
                //  return ocTaxAmt;
            }
        }
        return ocTaxAmt;
    }


}

