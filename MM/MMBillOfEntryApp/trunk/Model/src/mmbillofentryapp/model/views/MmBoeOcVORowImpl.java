package mmbillofentryapp.model.views;

import adf.utils.ebiz.EbizParams;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import mmbillofentryapp.model.entities.MmBoeOcEOImpl;
import mmbillofentryapp.model.services.BillOfEntryAMImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Apr 03 17:20:41 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmBoeOcVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMBOEOCEO = 0;
    private static ADFLogger _log = (ADFLogger) ADFLogger.createADFLogger(MmBoeOcVORowImpl.class);

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        DocId,
        DocIdSrc,
        DlvSchdlNo,
        OcId,
        CoaId,
        OcCat,
        TranType,
        OcAmtBs,
        OcAmtSp,
        CurrIdSpOc,
        CurrConvFctrOc,
        OcAmtSpOc,
        EoId,
        InvcCreated,
        ThirdParty,
        OcCalcType,
        OcCalcVal,
        OcQty,
        OcCalcOnPct,
        TransHoOrgId,
        TransCoaNm,
        TransOrgBsCurrId,
        TransOcCurrency,
        TransOcNm,
        TransEoNmOc,
        TransOcEoNmView,
        LovOcCategaryVO,
        LovCurrencyIdVO,
        LovSupplierViewVO,
        LovServiceProviderVO,
        LovOcCalsTypeVO;
        static AttributesEnum[] vals = null; ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int DLVSCHDLNO = AttributesEnum.DlvSchdlNo.index();
    public static final int OCID = AttributesEnum.OcId.index();
    public static final int COAID = AttributesEnum.CoaId.index();
    public static final int OCCAT = AttributesEnum.OcCat.index();
    public static final int TRANTYPE = AttributesEnum.TranType.index();
    public static final int OCAMTBS = AttributesEnum.OcAmtBs.index();
    public static final int OCAMTSP = AttributesEnum.OcAmtSp.index();
    public static final int CURRIDSPOC = AttributesEnum.CurrIdSpOc.index();
    public static final int CURRCONVFCTROC = AttributesEnum.CurrConvFctrOc.index();
    public static final int OCAMTSPOC = AttributesEnum.OcAmtSpOc.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int INVCCREATED = AttributesEnum.InvcCreated.index();
    public static final int THIRDPARTY = AttributesEnum.ThirdParty.index();
    public static final int OCCALCTYPE = AttributesEnum.OcCalcType.index();
    public static final int OCCALCVAL = AttributesEnum.OcCalcVal.index();
    public static final int OCQTY = AttributesEnum.OcQty.index();
    public static final int OCCALCONPCT = AttributesEnum.OcCalcOnPct.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int TRANSCOANM = AttributesEnum.TransCoaNm.index();
    public static final int TRANSORGBSCURRID = AttributesEnum.TransOrgBsCurrId.index();
    public static final int TRANSOCCURRENCY = AttributesEnum.TransOcCurrency.index();
    public static final int TRANSOCNM = AttributesEnum.TransOcNm.index();
    public static final int TRANSEONMOC = AttributesEnum.TransEoNmOc.index();
    public static final int TRANSOCEONMVIEW = AttributesEnum.TransOcEoNmView.index();
    public static final int LOVOCCATEGARYVO = AttributesEnum.LovOcCategaryVO.index();
    public static final int LOVCURRENCYIDVO = AttributesEnum.LovCurrencyIdVO.index();
    public static final int LOVSUPPLIERVIEWVO = AttributesEnum.LovSupplierViewVO.index();
    public static final int LOVSERVICEPROVIDERVO = AttributesEnum.LovServiceProviderVO.index();
    public static final int LOVOCCALSTYPEVO = AttributesEnum.LovOcCalsTypeVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmBoeOcVORowImpl() {
    }

    /**
     *Global round digit for Amount
     * @return
     */

    public Integer getGlblRoundAmtDigit() {
        if (EbizParams.GLBL_AMT_DIGIT() != null) {
            return EbizParams.GLBL_AMT_DIGIT();
        } else {
            return 6;
        }
    }

    /**
     *Global round digit for Quantity
     * @return
     */

    public Integer getGlblRoundQtyDigit() {
        if (EbizParams.GLBL_QTY_DIGIT() != null) {
            return EbizParams.GLBL_QTY_DIGIT();
        } else {
            return 6;
        }

    }

    /**
     *Global round digit for currency rate
     * @return
     */

    public Integer getGlblRoundCurrRateDigit() {
        if (EbizParams.GLBL_CURR_DIGIT() != null) {
            return EbizParams.GLBL_CURR_DIGIT();
        } else {
            return 6;
        }

    }

    /**
     *Global round digit for Rate
     * @return
     */

    public Integer getGlblRoundRateDigit() {
        if (EbizParams.GLBL_RATE_DIGIT() != null) {
            return EbizParams.GLBL_RATE_DIGIT();
        } else {
            return 6;
        }
    }

    /**
     * Gets MmBoeOcEO entity object.
     * @return the MmBoeOcEO
     */
    public MmBoeOcEOImpl getMmBoeOcEO() {
        return (MmBoeOcEOImpl) getEntity(ENTITY_MMBOEOCEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @return the DOC_ID_SRC
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID_SRC using the alias name DocIdSrc.
     * @param value value to set the DOC_ID_SRC
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @return the DLV_SCHDL_NO
     */
    public Integer getDlvSchdlNo() {
        return (Integer) getAttributeInternal(DLVSCHDLNO);
    }

    /**
     * Sets <code>value</code> as attribute value for DLV_SCHDL_NO using the alias name DlvSchdlNo.
     * @param value value to set the DLV_SCHDL_NO
     */
    public void setDlvSchdlNo(Integer value) {
        setAttributeInternal(DLVSCHDLNO, value);
    }

    /**
     * Gets the attribute value for OC_ID using the alias name OcId.
     * @return the OC_ID
     */
    public String getOcId() {
        return (String) getAttributeInternal(OCID);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_ID using the alias name OcId.
     * @param value value to set the OC_ID
     */
    public void setOcId(String value) {
        setAttributeInternal(OCID, value);
    }

    /**
     * Gets the attribute value for COA_ID using the alias name CoaId.
     * @return the COA_ID
     */
    public Integer getCoaId() {
        return (Integer) getAttributeInternal(COAID);
    }

    /**
     * Sets <code>value</code> as attribute value for COA_ID using the alias name CoaId.
     * @param value value to set the COA_ID
     */
    public void setCoaId(Integer value) {
        setAttributeInternal(COAID, value);
    }

    /**
     * Gets the attribute value for OC_CAT using the alias name OcCat.
     * @return the OC_CAT
     */
    public Integer getOcCat() {
        return (Integer) getAttributeInternal(OCCAT);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_CAT using the alias name OcCat.
     * @param value value to set the OC_CAT
     */
    public void setOcCat(Integer value) {
        setAttributeInternal(OCCAT, value);
    }

    /**
     * Gets the attribute value for TRAN_TYPE using the alias name TranType.
     * @return the TRAN_TYPE
     */
    public String getTranType() {
        return (String) getAttributeInternal(TRANTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TRAN_TYPE using the alias name TranType.
     * @param value value to set the TRAN_TYPE
     */
    public void setTranType(String value) {
        setAttributeInternal(TRANTYPE, value);
    }

    /**
     * Gets the attribute value for OC_AMT_BS using the alias name OcAmtBs.
     * @return the OC_AMT_BS
     */
    public Number getOcAmtBs() {
        return (Number) getAttributeInternal(OCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_AMT_BS using the alias name OcAmtBs.
     * @param value value to set the OC_AMT_BS
     */
    public void setOcAmtBs(Number value) {
        setAttributeInternal(OCAMTBS, value);
    }

    /**
     * Gets the attribute value for OC_AMT_SP using the alias name OcAmtSp.
     * @return the OC_AMT_SP
     */
    public Number getOcAmtSp() {
        return (Number) getAttributeInternal(OCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_AMT_SP using the alias name OcAmtSp.
     * @param value value to set the OC_AMT_SP
     */
    public void setOcAmtSp(Number value) {
        setAttributeInternal(OCAMTSP, value);
    }

    /**
     * Gets the attribute value for CURR_ID_SP_OC using the alias name CurrIdSpOc.
     * @return the CURR_ID_SP_OC
     */
    public Integer getCurrIdSpOc() {
        return (Integer) getAttributeInternal(CURRIDSPOC);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_ID_SP_OC using the alias name CurrIdSpOc.
     * @param value value to set the CURR_ID_SP_OC
     */
    public void setCurrIdSpOc(Integer value) {
        setAttributeInternal(CURRIDSPOC, value);
    }

    /**
     * Gets the attribute value for CURR_CONV_FCTR_OC using the alias name CurrConvFctrOc.
     * @return the CURR_CONV_FCTR_OC
     */
    public Number getCurrConvFctrOc() {
        return (Number) getAttributeInternal(CURRCONVFCTROC);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_CONV_FCTR_OC using the alias name CurrConvFctrOc.
     * @param value value to set the CURR_CONV_FCTR_OC
     */
    public void setCurrConvFctrOc(Number value) {
        setAttributeInternal(CURRCONVFCTROC, value);
    }

    /**
     * Gets the attribute value for OC_AMT_SP_OC using the alias name OcAmtSpOc.
     * @return the OC_AMT_SP_OC
     */
    public Number getOcAmtSpOc() {
        return (Number) getAttributeInternal(OCAMTSPOC);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_AMT_SP_OC using the alias name OcAmtSpOc.
     * @param value value to set the OC_AMT_SP_OC
     */
    public void setOcAmtSpOc(Number value) {
        if (value == null) {
            value = new Number(0);

        }
        BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
        Number poCurrF = new Number(1);
        if (am.getMmBoe().getCurrentRow() != null) {
            if (am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr") != null)
                poCurrF =
                    (Number) ((Number) am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        }
        if (getCurrConvFctrOc() != null) {
            Number bsAmt = (Number) value.multiply(getCurrConvFctrOc());
            setOcAmtBs((Number) value.multiply(getCurrConvFctrOc()).round(getGlblRoundAmtDigit()));
            setOcAmtSp((Number) bsAmt.divide(poCurrF).round(getGlblRoundAmtDigit()));
            System.out.println(bsAmt + "  bsAmt " + poCurrF + " poCurrF " + value);
        }
        setAttributeInternal(OCAMTSPOC, value);
    }

    /**
     * Gets the attribute value for EO_ID using the alias name EoId.
     * @return the EO_ID
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as attribute value for EO_ID using the alias name EoId.
     * @param value value to set the EO_ID
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for INVC_CREATED using the alias name InvcCreated.
     * @return the INVC_CREATED
     */
    public String getInvcCreated() {
        return (String) getAttributeInternal(INVCCREATED);
    }

    /**
     * Sets <code>value</code> as attribute value for INVC_CREATED using the alias name InvcCreated.
     * @param value value to set the INVC_CREATED
     */
    public void setInvcCreated(String value) {
        setAttributeInternal(INVCCREATED, value);
    }

    /**
     * Gets the attribute value for THIRD_PARTY using the alias name ThirdParty.
     * @return the THIRD_PARTY
     */
    public String getThirdParty() {
        return (String) getAttributeInternal(THIRDPARTY);
    }

    /**
     * Sets <code>value</code> as attribute value for THIRD_PARTY using the alias name ThirdParty.
     * @param value value to set the THIRD_PARTY
     */
    public void setThirdParty(String value) {
        setAttributeInternal(THIRDPARTY, value);
    }

    /**
     * Gets the attribute value for OC_CALC_TYPE using the alias name OcCalcType.
     * @return the OC_CALC_TYPE
     */
    public String getOcCalcType() {
        return (String) getAttributeInternal(OCCALCTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_CALC_TYPE using the alias name OcCalcType.
     * @param value value to set the OC_CALC_TYPE
     */
    public void setOcCalcType(String value) {
        setAttributeInternal(OCCALCTYPE, value);
    }

    /**
     * Gets the attribute value for OC_CALC_VAL using the alias name OcCalcVal.
     * @return the OC_CALC_VAL
     */
    public Number getOcCalcVal() {
        return (Number) getAttributeInternal(OCCALCVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_CALC_VAL using the alias name OcCalcVal.
     * @param value value to set the OC_CALC_VAL
     */
    public void setOcCalcVal(Number value) {
        if (value == null) {
            value = new Number(0);

        }
        BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
        Number poCurrF = new Number(1);
        if (am.getMmBoe().getCurrentRow() != null) {
            if (am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr") != null)
                poCurrF =
                    (Number) ((Number) am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        }
        if (getCurrConvFctrOc() != null) {
            if ("A".equalsIgnoreCase(getOcCalcType())) {

                Number ocAmtspOc = (Number) (value.multiply(getOcQty())).round(getGlblRoundAmtDigit());

                Number bsAmt = (Number)((Number) (ocAmtspOc.multiply(getCurrConvFctrOc())).round(getGlblRoundAmtDigit())).round(getGlblRoundAmtDigit());

                setOcAmtSpOc(ocAmtspOc);
                setOcAmtBs((Number) ocAmtspOc.multiply(getCurrConvFctrOc()).round(getGlblRoundAmtDigit()));
                setOcAmtSp((Number)((Number) bsAmt.divide(poCurrF).round(getGlblRoundAmtDigit())).round(getGlblRoundAmtDigit()));
               _log.info(bsAmt + "  bsAmt " + poCurrF + " poCurrF " + value + " ocAmtspOc " + ocAmtspOc +
                                   "  getOcQty " + getOcQty());
            } else if ("P".equalsIgnoreCase(getOcCalcType())) {

                Number ocPrcVal = getOcCalcOnPct() == null ? new Number(0) : getOcCalcOnPct();

                Number pctAmt =
                    (Number) (((Number) ((Number) (ocPrcVal.multiply(value.round(getGlblRoundRateDigit())))).round(getGlblRoundAmtDigit())).divide(new Number(100))).round(getGlblRoundAmtDigit());

               Number ocQty= getOcQty() == null ? new Number(1) : getOcQty();
               
                Number ocAmtOc = (Number)pctAmt.multiply(ocQty).round(getGlblRoundAmtDigit()); 

                Number bsAmt = (Number)((Number) (ocAmtOc.multiply(getCurrConvFctrOc())).round(getGlblRoundAmtDigit())).round(getGlblRoundAmtDigit());

                setOcAmtSpOc(ocAmtOc);
                setOcAmtBs((Number) ocAmtOc.multiply(getCurrConvFctrOc()).round(getGlblRoundAmtDigit()));
                setOcAmtSp((Number)((Number) bsAmt.divide(poCurrF).round(getGlblRoundAmtDigit())).round(getGlblRoundAmtDigit()));
                _log.info(bsAmt + " P bsAmt " + poCurrF + " poCurrF " + value + " ocAmtspOc " + pctAmt +
                                   "  getOcQty " + getOcQty()+" ocAmtOc "+ocAmtOc);
            
            
            }
        }
        setAttributeInternal(OCCALCVAL, value);
    }


    /**
     * Gets the attribute value for OC_QTY using the alias name OcQty.
     * @return the OC_QTY
     */
    public Number getOcQty() {
        return (Number) getAttributeInternal(OCQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_QTY using the alias name OcQty.
     * @param value value to set the OC_QTY
     */
    public void setOcQty(Number value) {
        if (value == null) {
            value = new Number(1);

        }
        BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
        Number poCurrF = new Number(1);
        if (am.getMmBoe().getCurrentRow() != null) {
            if (am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr") != null)
                poCurrF =
                    (Number) ((Number) am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        }
        if (getCurrConvFctrOc() != null) {
            if("A".equalsIgnoreCase(getOcCalcType())){
            Number ocAmtspOc = (Number) (value.multiply(getOcCalcVal())).round(getGlblRoundAmtDigit());

            Number bsAmt = (Number) (ocAmtspOc.multiply(getCurrConvFctrOc())).round(getGlblRoundAmtDigit());

            // Number bsAmt = (Number) value.multiply(getCurrConvFctrOc());
            setOcAmtSpOc(ocAmtspOc);
            setOcAmtBs((Number) ocAmtspOc.multiply(getCurrConvFctrOc()).round(getGlblRoundAmtDigit()));
            setOcAmtSp((Number) bsAmt.divide(poCurrF).round(getGlblRoundAmtDigit()));
           _log.info(bsAmt + "  bsAmt " + poCurrF + " poCurrF " + value + " ocAmtspOc  " + ocAmtspOc +
                               "  getOcCalcVal " + getOcCalcVal());
            }else if("P".equalsIgnoreCase(getOcCalcType())){
                
                Number ocPrcVal = getOcCalcOnPct() == null ? new Number(0) : getOcCalcOnPct();
                Number ocCalcVal= getOcCalcVal() == null ? new Number(0) : getOcCalcVal();

                Number pctAmt =
                    (Number) (((Number) ((Number) (ocPrcVal.multiply(ocCalcVal.round(getGlblRoundRateDigit())))).round(getGlblRoundAmtDigit())).divide(new Number(100))).round(getGlblRoundAmtDigit());

               Number ocAmtOc = (Number)pctAmt.multiply(value).round(getGlblRoundAmtDigit()); 
               
                Number bsAmt = (Number)((Number) (ocAmtOc.multiply(getCurrConvFctrOc())).round(getGlblRoundAmtDigit())).round(getGlblRoundAmtDigit());

                setOcAmtSpOc(ocAmtOc);
                setOcAmtBs((Number) ocAmtOc.multiply(getCurrConvFctrOc()).round(getGlblRoundAmtDigit()));
                setOcAmtSp((Number)((Number) bsAmt.divide(poCurrF).round(getGlblRoundAmtDigit())).round(getGlblRoundAmtDigit()));
                _log.info(bsAmt + " P bsAmt " + poCurrF + " poCurrF " + value + " ocAmtspOc  " + pctAmt +
                                   "  getOcCalcVal " + getOcCalcVal()+" ocAmtOc "+ocAmtOc);
                
            }
        }
        setAttributeInternal(OCQTY, value);
    }

    /**
     * Gets the attribute value for OC_CALC_ON_PCT using the alias name OcCalcOnPct.
     * @return the OC_CALC_ON_PCT
     */
    public Number getOcCalcOnPct() {
        return (Number) getAttributeInternal(OCCALCONPCT);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_CALC_ON_PCT using the alias name OcCalcOnPct.
     * @param value value to set the OC_CALC_ON_PCT
     */
    public void setOcCalcOnPct(Number value) {
        
        if (value == null) {
            value = new Number(0);

        }
        String ocCalcType = getOcCalcType() == null ? "A" : getOcCalcType();
        
        if("P".equalsIgnoreCase(ocCalcType)){
        BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
        Number poCurrF = new Number(1);
        if (am.getMmBoe().getCurrentRow() != null) {
            if (am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr") != null)
                poCurrF =
                    (Number) ((Number) am.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        }
        
        
                
                Number ocQty = getOcQty() == null ? new Number(1) : getOcQty();
                Number ocCalcVal= getOcCalcVal() == null ? new Number(0) : getOcCalcVal();

                Number pctAmt =
                    (Number) (((Number) ((Number) (value.multiply(ocCalcVal.round(getGlblRoundRateDigit())))).round(getGlblRoundAmtDigit())).divide(new Number(100))).round(getGlblRoundAmtDigit());

               Number ocAmtOc = (Number)pctAmt.multiply(ocQty).round(getGlblRoundAmtDigit()); 
               
                Number bsAmt = (Number)((Number) (ocAmtOc.multiply(getCurrConvFctrOc())).round(getGlblRoundAmtDigit())).round(getGlblRoundAmtDigit());

                setOcAmtSpOc(ocAmtOc);
                setOcAmtBs((Number) ocAmtOc.multiply(getCurrConvFctrOc()).round(getGlblRoundAmtDigit()));
                setOcAmtSp((Number)((Number) bsAmt.divide(poCurrF).round(getGlblRoundAmtDigit())).round(getGlblRoundAmtDigit()));
                _log.info(bsAmt + " Percent bsAmt " + poCurrF + " poCurrF " + value + " ocAmtspOc  " + pctAmt +
                                   "  getOcCalcVal " + getOcCalcVal()+" ocAmtOc "+ocAmtOc);
                
           
        }
        
        setAttributeInternal(OCCALCONPCT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
    public String getTransHoOrgId() {
        return EbizParams.GLBL_HO_ORG_ID();
        //return (String) getAttributeInternal(TRANSHOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCoaNm.
     * @return the TransCoaNm
     */
    public String getTransCoaNm() {
        if (getCoaId() != null) {
            BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
            am.getLovCoaId().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            am.getLovCoaId().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            am.getLovCoaId().setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            am.getLovCoaId().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            am.getLovCoaId().setNamedWhereClauseParam("CoaIdBind", getCoaId());
            am.getLovCoaId().executeQuery();
            Row[] rr = am.getLovCoaId().getFilteredRows("CoaId", getCoaId());
            if (rr.length > 0 && rr[0].getAttribute("CoaNm") != null) {
                return rr[0].getAttribute("CoaNm").toString();
            } else {
                return (String) getAttributeInternal(TRANSCOANM);
            }
        }

        return (String) getAttributeInternal(TRANSCOANM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCoaNm.
     * @param value value to set the  TransCoaNm
     */
    public void setTransCoaNm(String value) {
        setAttributeInternal(TRANSCOANM, value);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /**
     * Gets the attribute value for the calculated attribute TransOrgBsCurrId.
     * @return the TransOrgBsCurrId
     */
    public Integer getTransOrgBsCurrId() {

        if (getAttributeInternal(TRANSORGBSCURRID) != null)
            return (Integer) getAttributeInternal(TRANSORGBSCURRID);
        else {

            //        ADFModelUtils.callFunction((BillOfEntryAMImpl)this.getApplicationModule(), "APP.PKG_APP.GET_ORG_DEF_CURR_BS1(?)", new Object[] {EbizParams.GLBL_APP_USR_ORG()}, Types.INTEGER)
            //
            Integer currId = (Integer) (callStoredFunction(Types.INTEGER, "APP.PKG_APP.GET_ORG_DEF_CURR_BS1(?)", new Object[] {
                                                           EbizParams.GLBL_APP_USR_ORG() }));
            return currId;
        }


    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOrgBsCurrId.
     * @param value value to set the  TransOrgBsCurrId
     */
    public void setTransOrgBsCurrId(Integer value) {
        setAttributeInternal(TRANSORGBSCURRID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcCurrency.
     * @return the TransOcCurrency
     */
    public String getTransOcCurrency() {
        if (getCurrIdSpOc() != null) {
            BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
            Row[] rr = am.getLovCurrId().getFilteredRows("CurrId", getCurrIdSpOc());
            if (rr.length > 0 && rr[0].getAttribute("CurrDesc") != null) {
                return rr[0].getAttribute("CurrDesc").toString();
            } else {
                return (String) getAttributeInternal(TRANSOCCURRENCY);
            }
        } else {
            return (String) getAttributeInternal(TRANSOCCURRENCY);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcCurrency.
     * @param value value to set the  TransOcCurrency
     */
    public void setTransOcCurrency(String value) {
        setAttributeInternal(TRANSOCCURRENCY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcNm.
     * @return the TransOcNm
     */
    public String getTransOcNm() {
        if (getOcId() != null) {
            BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
            am.getLovOcNm().setNamedWhereClauseParam("SlocIdBind", getSlocId());
            am.getLovOcNm().setNamedWhereClauseParam("CldIdBind", getCldId());
            am.getLovOcNm().setNamedWhereClauseParam("HoOrgIdBind", getTransHoOrgId());
            am.getLovOcNm().setNamedWhereClauseParam("OcIdBind", getOcId());
            am.getLovOcNm().executeQuery();
            Row[] rr = am.getLovOcNm().getFilteredRows("OcId", getOcId());
            if (rr.length > 0 && rr[0].getAttribute("OcNm") != null) {
                return rr[0].getAttribute("OcNm").toString();
            } else {
                return (String) getAttributeInternal(TRANSOCNM);
            }
        } else {
            return (String) getAttributeInternal(TRANSOCNM);
        }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcNm.
     * @param value value to set the  TransOcNm
     */
    public void setTransOcNm(String value) {
        setAttributeInternal(TRANSOCNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEoNmOc.
     * @return the TransEoNmOc
     */
    public String getTransEoNmOc() {
        if (getEoId() != null) {
            BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
            am.getLovServiceProvider().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            am.getLovServiceProvider().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            am.getLovServiceProvider().setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            am.getLovServiceProvider().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            am.getLovServiceProvider().executeQuery();
            Row[] rr = am.getLovServiceProvider().getFilteredRows("EoId", getEoId());
            if (rr.length > 0 && rr[0].getAttribute("EoNm") != null) {
                return rr[0].getAttribute("EoNm").toString();
            } else {
                return (String) getAttributeInternal(TRANSEONMOC);
            }
        } else {
            return (String) getAttributeInternal(TRANSEONMOC);
        }

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEoNmOc.
     * @param value value to set the  TransEoNmOc
     */
    public void setTransEoNmOc(String value) {
        setAttributeInternal(TRANSEONMOC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcEoNmView.
     * @return the TransOcEoNmView
     */
    public String getTransOcEoNmView() {
        if (getEoId() != null) {
            BillOfEntryAMImpl am = (BillOfEntryAMImpl) this.getApplicationModule();
            am.getLovServiceProvider().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            am.getLovServiceProvider().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            am.getLovServiceProvider().setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            am.getLovServiceProvider().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            am.getLovServiceProvider().executeQuery();
            Row[] rr = am.getLovServiceProvider().getFilteredRows("EoId", getEoId());
            if (rr.length > 0 && rr[0].getAttribute("EoNm") != null) {
                return rr[0].getAttribute("EoNm").toString();
            } else {
                return (String) getAttributeInternal(TRANSOCEONMVIEW);
            }
        } else {
            return (String) getAttributeInternal(TRANSOCEONMVIEW);
        }

    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcEoNmView.
     * @param value value to set the  TransOcEoNmView
     */
    public void setTransOcEoNmView(String value) {
        setAttributeInternal(TRANSOCEONMVIEW, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOcCategaryVO.
     */
    public RowSet getLovOcCategaryVO() {
        return (RowSet) getAttributeInternal(LOVOCCATEGARYVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCurrencyIdVO.
     */
    public RowSet getLovCurrencyIdVO() {
        return (RowSet) getAttributeInternal(LOVCURRENCYIDVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSupplierViewVO.
     */
    public RowSet getLovSupplierViewVO() {
        return (RowSet) getAttributeInternal(LOVSUPPLIERVIEWVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovServiceProviderVO.
     */
    public RowSet getLovServiceProviderVO() {
        return (RowSet) getAttributeInternal(LOVSERVICEPROVIDERVO);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOcCalsTypeVO.
     */
    public RowSet getLovOcCalsTypeVO() {
        return (RowSet) getAttributeInternal(LOVOCCALSTYPEVO);
    }
}

