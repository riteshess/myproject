package mmbillofentryapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.HashSet;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmbillofentryapp.model.services.common.BillOfEntryAM;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 02 11:02:30 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BillOfEntryAMImpl extends ApplicationModuleImpl implements BillOfEntryAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger _log = (ADFLogger) ADFLogger.createADFLogger(BillOfEntryAMImpl.class);
    Number zero = new Number(0);

    public BillOfEntryAMImpl() {
    }

    /**
     *Global round digit for Amount
     * @return
     */

    public Integer getGlblRoundAmtDigit() {
        if (EbizParams.GLBL_AMT_DIGIT() != null) {
            return EbizParams.GLBL_AMT_DIGIT();
        } else {
            return 6;
        }
    }

    /**
     *Global round digit for Quantity
     * @return
     */

    public Integer getGlblRoundQtyDigit() {
        if (EbizParams.GLBL_QTY_DIGIT() != null) {
            return EbizParams.GLBL_QTY_DIGIT();
        } else {
            return 6;
        }

    }

    /**
     *Global round digit for currency rate
     * @return
     */

    public Integer getGlblRoundCurrRateDigit() {
        if (EbizParams.GLBL_CURR_DIGIT() != null) {
            return EbizParams.GLBL_CURR_DIGIT();
        } else {
            return 6;
        }

    }
    
    /**
     *Global round digit for Rate
     * @return
     */

    public Integer getGlblRoundRateDigit() {
        if (EbizParams.GLBL_RATE_DIGIT() != null) {
            return EbizParams.GLBL_RATE_DIGIT();
        } else {
            return 6;
        }
    }


    /**
     *
     * @param sqlReturnType
     * @param stmt
     * @param bindVars
     * @return
     */

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            _log.info("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     *  Create DocId and DocDt
     * @param UsrId
     * @param CldId
     * @param SlocId
     * @param OrgId
     */


    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        Row currentRow = this.getMmBoe().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18539), new Integer(0)
        })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        _log.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("DocDt", ts);
        currentRow.setAttribute("UsrIdCreateDt", ts);
        getFYid(CldId, OrgId, ts, "A");


    }

    /**
     *
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param TableName
     * @param fyId
     * @return
     */

    public String genBeoNo(Integer SlocId, String CldId, String OrgId, String TableName, Integer fyId) {
        Row cmRow = this.getMmBoe().getCurrentRow();
        String boeNo = null;
        if (cmRow.getAttribute("BoeNo") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            boeNo = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                                SlocId, CldId, OrgId, TableName, null, fyId, 18539, 0
            });
            _log.info("new id    " + boeNo);
            cmRow.setAttribute("BoeNo", boeNo);
        } else {
            boeNo = cmRow.getAttribute("BoeNo").toString();
        }
        return boeNo;
    }

    /**
     *
     * @param CldId
     * @param OrgId
     * @param geDate
     * @param Mode
     * @return
     */

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        _log.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            _log.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmBoe();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            _log.info("In case mode is validation");
        }
        return fyId;
    }

    public void addSupplierAndCurrency() {
        ViewObjectImpl beoVo = this.getMmBoe();
        Row currR = beoVo.getCurrentRow();
        if (currR != null && currR.getAttribute("TransPoDocId") != null) {
            String docIdPo = currR.getAttribute("TransPoDocId").toString();
            this.getLov().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            this.getLov().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            this.getLov().setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
            this.getLov().setNamedWhereClauseParam("DocIdBind", docIdPo);
            this.getLov().executeQuery();
            Row[] rr = this.getLov().getFilteredRows("DocId", docIdPo);
            if (rr.length > 0 && rr[0].getAttribute("EoId") != null && rr[0].getAttribute("CurrIdSp") != null) {
                Integer curridSp = Integer.parseInt(rr[0].getAttribute("CurrIdSp").toString());
                currR.setAttribute("EoId", rr[0].getAttribute("EoId"));
                currR.setAttribute("CurrIdSp", curridSp);
                currR.setAttribute("EoIdShp", rr[0].getAttribute("EoIdShpCo"));

                BigDecimal ret = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_CURR_CONV_FCTR(?,?,?,?,?)", new Object[] {
                                                                  EbizParams.GLBL_APP_CLD_ID(),
                                                                  EbizParams.GLBL_APP_SERV_LOC(),
                                                                  EbizParams.GLBL_HO_ORG_ID(),
                                                                  EbizParams.GLBL_APP_USR_ORG(), curridSp
                }));


                Number retVal = new Number(1);
                if (ret != null) {
                    try {
                        retVal = new Number(ret);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                }
                currR.setAttribute("CurrConvFctr", retVal);
                _log.info(" retVal : " + retVal);
            }
        }
    }


    public Integer insetDataFromPo() {
        _log.info("insert ::::::");

        ViewObjectImpl beo = this.getMmBoe();
        Row currR = beo.getCurrentRow();
        Number currencyFacto = new Number(1);
        if (currR.getAttribute("TransPoDocId") != null) {
            this.getLovPoNo().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            this.getLovPoNo().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            this.getLovPoNo().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            this.getLovPoNo().setNamedWhereClauseParam("BindEoId", null);
            this.getLovPoNo().executeQuery();
            Row[] rr = this.getLovPoNo().getFilteredRows("DocId", currR.getAttribute("TransPoDocId"));
            _log.info(" cc length " + rr.length);
            if (rr.length > 0) {
                _log.info("AuthPoNo    " + rr[0].getAttribute("AuthPoNo"));
                //  _log.info("AutoPoNo    " + rr[0].getAttribute("AutoPoNo"));
                _log.info("DlvSchdlNo    " + rr[0].getAttribute("DlvSchdlNo"));
                _log.info("FileNo    " + rr[0].getAttribute("FileNo"));
                _log.info("CurrIdSp    " + rr[0].getAttribute("CurrIdSp"));
                _log.info("CurrConvFctr    " + rr[0].getAttribute("CurrConvFctr"));
                currencyFacto = this.setCurrncyConversion((Integer) rr[0].getAttribute("CurrIdSp"));
            }

        }

        //currR.setAttribute("arg0", "a");

        /*   FUNCTION    MM_INS_BOE_FRM_PO (
                                                                                                                                    P_CLD_ID         VARCHAR2,
                                                                                                                                    P_SLOC_ID        NUMBER,
                                                                                                                                    P_HO_ORGID      VARCHAR2,
                                                                                                                                    P_ORG_ID         VARCHAR2,
                                                                                                                                    P_DOC_ID        VARCHAR2,
                                                                                                                                    P_DOC_TYPE_SRC  NUMBER,
                                                                                                                                    P_DOC_ID_PO     VARCHAR2,
                                                                                                                                    P_DLV_SCHDL_NO  NUMBER,
                                                                                                                                    P_USR_ID        NUMBER,
                                                                                                                                    P_CURR_CONV     NUMBER
         */

        this.getDBTransaction().postChanges();

        _log.info(" before function ");
        _log.info(currR.getAttribute("DocId") + " Doc Id   " + currR.getAttribute("DocTypeSrc").toString() +
                  " doc type id " + currR.getAttribute("TransPoDocId") + " doc id po  " +
                  currR.getAttribute("TransSchdlNo"));
        Integer ret = Integer.parseInt(callStoredFunction(Types.INTEGER, "MM.MM_INS_BOE_FRM_PO1(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_HO_ORG_ID(),

                                                          EbizParams.GLBL_APP_USR_ORG(), currR.getAttribute("DocId"),
                                                          Integer.parseInt(currR.getAttribute("DocTypeSrc").toString()),
                                                          currR.getAttribute("TransPoDocId"),
                                                          Integer.parseInt(currR.getAttribute("TransSchdlNo").toString()),
                                                          EbizParams.GLBL_APP_USR(), currencyFacto
        }).toString());
        _log.info(" after function ");

        _log.info(" ret value " + ret);
        if (ret != null) {
            _log.info("not null function ");
            if (ret.compareTo(new Integer(1)) == 0) {

                this.getMmBoeSrc().executeQuery();
                this.getMmBoeItm().executeQuery();
                this.getMmBoeTr().executeQuery();
                this.getMmBoeTr1().executeQuery();
                this.getMmBoeTrLines().executeQuery();
                this.getMmBoeOc().executeQuery();
                this.getDBTransaction().postChanges();
            }
            return ret;
        } else
            return 1;

    }

    /**
     * Container's getter for MmBoe.
     * @return MmBoe
     */
    public ViewObjectImpl getMmBoe() {
        return (ViewObjectImpl) findViewObject("MmBoe");
    }


    /**
     * Container's getter for MmBoeOc.
     * @return MmBoeOc
     */
    public ViewObjectImpl getMmBoeOc() {
        return (ViewObjectImpl) findViewObject("MmBoeOc");
    }


    /**
     * Container's getter for FkMmBoeOcVL1.
     * @return FkMmBoeOcVL1
     */
    public ViewLinkImpl getFkMmBoeOcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmBoeOcVL1");
    }


    /**
     * Container's getter for LovItmDesc1.
     * @return LovItmDesc1
     */
    public ViewObjectImpl getLovItmDesc() {
        return (ViewObjectImpl) findViewObject("LovItmDesc");
    }

    /**
     * Container's getter for LovCurrId1.
     * @return LovCurrId1
     */
    public ViewObjectImpl getLovCurrId() {
        return (ViewObjectImpl) findViewObject("LovCurrId");
    }

    /**
     * Container's getter for LovUomNm1.
     * @return LovUomNm1
     */
    public ViewObjectImpl getLovUomNm() {
        return (ViewObjectImpl) findViewObject("LovUomNm");
    }

    /**
     * Container's getter for MmBoeSrc1.
     * @return MmBoeSrc1
     */
    public ViewObjectImpl getMmBoeSrc() {
        return (ViewObjectImpl) findViewObject("MmBoeSrc");
    }

    /**
     * Container's getter for FkMmBoeSrcVL1.
     * @return FkMmBoeSrcVL1
     */
    public ViewLinkImpl getFkMmBoeSrcVL1() {
        return (ViewLinkImpl) findViewLink("FkMmBoeSrcVL1");
    }

    /**
     * Container's getter for MmBoeItm1.
     * @return MmBoeItm1
     */
    public ViewObjectImpl getMmBoeItm() {
        return (ViewObjectImpl) findViewObject("MmBoeItm");
    }

    /**
     * Container's getter for FkBoeItmNewVL1.
     * @return FkBoeItmNewVL1
     */
    public ViewLinkImpl getFkBoeItmNewVL1() {
        return (ViewLinkImpl) findViewLink("FkBoeItmNewVL1");
    }

    /**
     * Container's getter for MmBoeTr1.
     * @return MmBoeTr1
     */
    public ViewObjectImpl getMmBoeTr() {
        return (ViewObjectImpl) findViewObject("MmBoeTr");
    }

    /**
     * Container's getter for FkMmBoeTrVL1.
     * @return FkMmBoeTrVL1
     */
    public ViewLinkImpl getFkMmBoeTrVL1() {
        return (ViewLinkImpl) findViewLink("FkMmBoeTrVL1");
    }

    /**
     * Container's getter for MmBoeTrLines1.
     * @return MmBoeTrLines1
     */
    public ViewObjectImpl getMmBoeTrLines() {
        return (ViewObjectImpl) findViewObject("MmBoeTrLines");
    }

    /**
     * Container's getter for FkMmBoeTrLinesVL1.
     * @return FkMmBoeTrLinesVL1
     */
    public ViewLinkImpl getFkMmBoeTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("FkMmBoeTrLinesVL1");
    }

    /**
     * Container's getter for Lov1.
     * @return Lov1
     */
    public ViewObjectImpl getLov() {
        return (ViewObjectImpl) findViewObject("Lov");
    }


    /**
     * Container's getter for OcForImportPoView2.
     * @return OcForImportPoView2
     */
    public ViewObjectImpl getOcForImportPoView() {
        return (ViewObjectImpl) findViewObject("OcForImportPoView");
    }


    public void filterAllCriteria() {
        this.getOcForImportPoView().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getOcForImportPoView().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getOcForImportPoView().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getOcForImportPoView().setNamedWhereClauseParam("DocIdBind", 18539);
        this.getOcForImportPoView().setNamedWhereClauseParam("DocTypeIdBind", 0);
        this.getOcForImportPoView().executeQuery();
    }

    public String applyDirectTax() {
        _log.info("call direct tax :::: ");
        String taxRuleFlg = "I";
        String taxExpt = "N";
        Integer taxRuleId = null;
        ViewObjectImpl beoVo = this.getMmBoe();
        ViewObjectImpl beoSrc = this.getMmBoeSrc();
        ViewObjectImpl itmVo = this.getMmBoeItm();
        ViewObjectImpl beoTrVo = this.getMmBoeTr();
        ViewObjectImpl beotrLines = this.getMmBoeTrLines();
        Row currItm = itmVo.getCurrentRow();
        String itmId = currItm.getAttribute("ItmId").toString();
        String uom = currItm.getAttribute("ItmUom").toString();
        Number taxabltAmt = (Number) currItm.getAttribute("TaxableAmtSp");
        Number taxableAmtOrig = (Number) currItm.getAttribute("TaxableAmtSpOrig");
        this.getLovItmDesc().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovItmDesc().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getLovItmDesc().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getLovItmDesc().setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getLovItmDesc().setNamedWhereClauseParam("ItmIdBind", itmId);
        this.getLovItmDesc().setNamedWhereClauseParam("ItmDescBind", null);
        this.getLovItmDesc().executeQuery();

        Row[] itms = this.getLovItmDesc().getFilteredRows("ItmId", itmId);
        _log.info("lenth   " + itms.length);
        if (itms.length > 0) {
            if (itms[0].getAttribute("TaxExmptFlg") != null) {
                taxExpt = itms[0].getAttribute("TaxExmptFlg").toString();
            }
            //            if (itms[0].getAttribute("TaxRuleId") != null) {
            //                taxRuleId = Integer.parseInt(itms[0].getAttribute("TaxRuleId").toString());
            //            }
        }
        Row currBeo = beoVo.getCurrentRow();
        Row currSrc = beoSrc.getCurrentRow();

        String docId = currBeo.getAttribute("DocId").toString();
        Integer eoId = Integer.parseInt(currBeo.getAttribute("EoId").toString());
        String docIdSrc = currSrc.getAttribute("DocIdSrc").toString();
        Number currencyFctr =
            (Number) ((Number) currBeo.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        Integer dlvSchdlNo = Integer.parseInt(currSrc.getAttribute("DlvSchdlNo").toString());

        _log.info(" docId : " + docId + " docIdSrc : " + docIdSrc + " dlvSchdlNo  : " + dlvSchdlNo + " itmId : " +
                  itmId + "uom  :" + uom + "taxRuleId  : " + taxRuleId + " taxabltAmt : " + taxabltAmt +
                  " currencyFctr : " + currencyFctr);


        if ("Y".equalsIgnoreCase(taxExpt)) {
            return "N";
        } else {
            if (eoId == null) {
                return "E";
            } else {

                _log.info("taxRuleG  " + eoId);
                Object taxRuleG = callStoredFunction(Types.INTEGER, "APP.FN_GET_TAX_RULE_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                     EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(), "0",
                                                     EbizParams.GLBL_APP_USR_ORG(), EbizParams.GLBL_HO_ORG_ID(), itmId,
                                                     eoId, 18539, null
                });
                //            }
                //        }

                _log.info("taxRuleG  " + taxRuleG);


                if (docId != null && docIdSrc != null && taxRuleG != null) {
                    taxRuleId = (Integer) taxRuleG;
                    if (taxRuleId.compareTo(new Integer(-1)) == 0) {
                        return "R";
                    } else {
                        getDBTransaction().postChanges();
                        //     taxEmptdflg
                        BigDecimal ret =
                            (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                             "MM.INS_BOE_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                             EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_HO_ORG_ID(),
                                                             EbizParams.GLBL_APP_USR_ORG(), docId, docIdSrc, dlvSchdlNo,
                                                             itmId, uom, taxRuleId, taxableAmtOrig, taxabltAmt,
                                                             taxRuleFlg, currencyFctr, taxExpt, "Y"
                        }));


                        Number retVal = new Number(0);
                        if (ret != null) {
                            try {
                                retVal = new Number(ret);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        _log.info(" retVal : " + retVal);
                        currItm.setAttribute("TotTaxAmtSp", (Number) retVal.round(getGlblRoundAmtDigit()));
                        currItm.setAttribute("TotTaxAmtBs",
                                             (Number) (retVal.multiply(currencyFctr).round(getGlblRoundAmtDigit())));


                        BigDecimal retRec =
                            (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                             "MM.MM_GET_REC_TAX_BOE(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                             EbizParams.GLBL_APP_CLD_ID(),
                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                             EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                             docId, docIdSrc, dlvSchdlNo, itmId, uom, taxExpt
                        }));

                        Number retRecN = new Number(0);
                        if (retRec != null) {
                            try {
                                retRecN = new Number(retRec);
                            } catch (Exception e) {
                                e.printStackTrace();
                            }
                        }
                        _log.info(retRec + " retRecN : " + retRecN);
                        currItm.setAttribute("RecTaxAmtSp", retRecN.round(getGlblRoundAmtDigit()));
                        currItm.setAttribute("RecTaxAmtBs",
                                             retRecN.multiply(currencyFctr).round(getGlblRoundAmtDigit()));


                        beoTrVo.executeQuery();
                        beotrLines.executeQuery();
                        this.getMmBoeTr1().executeQuery();
                        return "Y";
                    }
                } else {
                    return "R";
                }
            }
        }
    }


    public String applyItemTax(String taxRule) {
        _log.info("call direct tax :::: ");
        String taxRuleFlg = "I";
        Integer taxRuleId = 0;
        String taxExpt = "N";
        ViewObjectImpl beoVo = this.getMmBoe();
        ViewObjectImpl beoSrc = this.getMmBoeSrc();
        ViewObjectImpl itmVo = this.getMmBoeItm();
        ViewObjectImpl beoTrVo = this.getMmBoeTr();
        ViewObjectImpl beotrLines = this.getMmBoeTrLines();
        Row currItm = itmVo.getCurrentRow();
        String itmId = currItm.getAttribute("ItmId").toString();
        String uom = currItm.getAttribute("ItmUom").toString();


        Number taxabltAmt = (Number) currItm.getAttribute("TaxableAmtSp");
        Number taxableAmtOrig =
            (Number) ((Number) currItm.getAttribute("TaxableAmtSpOrig")).round(getGlblRoundAmtDigit());
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("TaxRuleIdBind", null);
        this.getLovTaxRuleIdForDisp().setNamedWhereClauseParam("TaxRuleDescBind", taxRule);
        this.getLovTaxRuleIdForDisp().executeQuery();

        Row[] itms = this.getLovTaxRuleIdForDisp().getFilteredRows("TaxRuleDesc", taxRule);
        _log.info("lenth   " + itms.length);
        if (itms.length > 0) {
            if (itms[0].getAttribute("TaxRuleId") != null) {
                taxRuleId = Integer.parseInt(itms[0].getAttribute("TaxRuleId").toString());
            }
        }
        if (taxRuleId.compareTo(new Integer(0)) == 1) {
            _log.info("taxRuleId  :: " + taxRuleId);
            beoTrVo.getCurrentRow().setAttribute("TaxRuleId", taxRuleId);
        }
        Row currBeo = beoVo.getCurrentRow();
        Row currSrc = beoSrc.getCurrentRow();

        String docId = currBeo.getAttribute("DocId").toString();
        String docIdSrc = currSrc.getAttribute("DocIdSrc").toString();
        Number currencyFctr =
            (Number) ((Number) currBeo.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        Integer dlvSchdlNo = Integer.parseInt(currSrc.getAttribute("DlvSchdlNo").toString());

        _log.info(" docId : " + docId + " docIdSrc : " + docIdSrc + " dlvSchdlNo  : " + dlvSchdlNo + " itmId : " +
                  itmId + "uom  :" + uom + "taxRuleId  : " + taxRuleId + " taxabltAmt : " + taxabltAmt +
                  " currencyFctr : " + currencyFctr);

        if (docId != null && docIdSrc != null && taxRuleId != null && taxRuleId.compareTo(new Integer(0)) == 1) {

            _log.info("befor post changed ");
            this.getDBTransaction().postChanges();
            //     taxEmptdflg
            _log.info("after change list post changed ");
            _log.info("call tax ++    ::::");
            BigDecimal ret =
                (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.INS_BOE_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                 EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), docId,
                                                 docIdSrc, dlvSchdlNo, itmId, uom, taxRuleId, taxabltAmt,
                                                 taxableAmtOrig, taxRuleFlg, currencyFctr, taxExpt, "N"
            }));
            System.out.println("Para :: " + EbizParams.GLBL_APP_SERV_LOC() + " -- " + EbizParams.GLBL_APP_CLD_ID() +
                               " -- " + EbizParams.GLBL_HO_ORG_ID() + " -- " + EbizParams.GLBL_APP_USR_ORG() + " -- " +
                               docId + " -- " + docIdSrc + " -- " + dlvSchdlNo + " -- " + itmId + " -- " + uom +
                               " -- " + taxRuleId + " -- " + taxabltAmt + " -- " + taxableAmtOrig + " -- " +
                               taxRuleFlg + " -- " + currencyFctr + " -- " + taxExpt + " -- " + "N");
            _log.info(" end call tax ++    ::::" + ret);
            System.out.println(" end call tax ++    ::::" + ret);
            Number retVal = new Number(0);
            if (ret != null) {
                try {
                    retVal = new Number(ret);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            System.out.println(" retVal : " + retVal);
            _log.info(" retVal : " + retVal);

            beoTrVo.getCurrentRow().setAttribute("TaxAmt", (Number) retVal.round(getGlblRoundAmtDigit()));
            beoTrVo.getCurrentRow().setAttribute("TaxAmtBs",
                                                 (Number) (retVal.multiply(currencyFctr).round(getGlblRoundAmtDigit())));
            beoTrVo.getCurrentRow().setAttribute("TaxableAmtSpOrig", taxableAmtOrig); //
            beoTrVo.getCurrentRow().setAttribute("TaxableAmtBsOrig",
                                                 (Number) (taxableAmtOrig.multiply(currencyFctr).round(getGlblRoundAmtDigit()))); //
            currItm.setAttribute("TotTaxAmtSp", (Number) retVal.round(getGlblRoundAmtDigit()));
            currItm.setAttribute("TotTaxAmtBs", (Number) (retVal.multiply(currencyFctr).round(getGlblRoundAmtDigit())));


            BigDecimal retRec =
                (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_REC_TAX_BOE(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                 EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), docId,
                                                 docIdSrc, dlvSchdlNo, itmId, uom, taxExpt
            }));

            Number retRecN = new Number(0);
            if (retRec != null) {
                try {
                    retRecN = new Number(retRec);
                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
            _log.info(retRec + " retRecN : " + retRecN);
            currItm.setAttribute("RecTaxAmtSp", retRecN.round(getGlblRoundAmtDigit()));
            currItm.setAttribute("RecTaxAmtBs", retRecN.multiply(currencyFctr).round(getGlblRoundAmtDigit()));


            //   beoTrVo.executeQuery();
            beotrLines.executeQuery();
        }
        return null;
    }


    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaId() {
        return (ViewObjectImpl) findViewObject("LovCoaId");
    }

    /**
     * Container's getter for LovTaxRuleIdForDisp1.
     * @return LovTaxRuleIdForDisp1
     */
    public ViewObjectImpl getLovTaxRuleIdForDisp() {
        return (ViewObjectImpl) findViewObject("LovTaxRuleIdForDisp");
    }

    /**
     * Container's getter for LovTaxCoaId1.
     * @return LovTaxCoaId1
     */
    public ViewObjectImpl getLovTaxCoaId() {
        return (ViewObjectImpl) findViewObject("LovTaxCoaId");
    }

    /**
     * Container's getter for LovTaxType1.
     * @return LovTaxType1
     */
    public ViewObjectImpl getLovTaxType() {
        return (ViewObjectImpl) findViewObject("LovTaxType");
    }

    /**
     * Container's getter for MmBoeTr1.
     * @return MmBoeTr1
     */
    public ViewObjectImpl getMmBoeTr1() {
        return (ViewObjectImpl) findViewObject("MmBoeTr1");
    }


    public Integer isOcDuplicate(String ocId) {
        ViewObjectImpl ocView = this.getMmBoeOc();
        RowQualifier rq = new RowQualifier(ocView);
        rq.setWhereClause("OrgId ='" + this.getMmBoe().getCurrentRow().getAttribute("OrgId") + "' and SlocId =" +
                          this.getMmBoe().getCurrentRow().getAttribute("SlocId") + " and CldId ='" +
                          this.getMmBoe().getCurrentRow().getAttribute("CldId") + "' and DocId ='" +
                          this.getMmBoe().getCurrentRow().getAttribute("DocId") + "' and OcId ='" + ocId + "' ");
        Row[] rr = ocView.getFilteredRows(rq);
        _log.info(rr.length + "  oc dupli  " + rq.getExprStr());
        if (rr.length > 0) {
            return 1;
        } else {
            return 0;
        }
    }


//    public void addOthercharges(String ocId, Integer coaId, Integer ocCat, String thirdParty) {
//        _log.info(" call oc amiple  ");
//        if (ocId != null) {
//            _log.info(ocId + "  oc id and coa Id " + coaId + " oc categary   " + ocCat);
//            Row rr = this.getMmBoeOc().createRow();
//            rr.setAttribute("DocIdSrc", this.getMmBoeSrc().getCurrentRow().getAttribute("DocIdSrc"));
//            rr.setAttribute("DlvSchdlNo", this.getMmBoeSrc().getCurrentRow().getAttribute("DlvSchdlNo"));
//            rr.setAttribute("OcId", ocId);
//            rr.setAttribute("CoaId", coaId);
//            rr.setAttribute("OcCat", ocCat);
//            rr.setAttribute("ThirdParty", thirdParty);
//            rr.setAttribute("CurrIdSpOc", this.getMmBoe().getCurrentRow().getAttribute("TransCurrIdBs"));
//            rr.setAttribute("CurrConvFctrOc", 1);
//            this.getMmBoeOc().insertRow(rr);
//        }
//
//    }


    public void addOthercharges(String ocId, Integer coaId, Integer ocCat, String thirdParty,String ocCalcType , Number ocCalcVal) {
        _log.info(" call oc amiple  ");
        if (ocId != null) {
            Number poCurrF = new Number(1);
            if (this.getMmBoe().getCurrentRow() != null) {
                if (this.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr") != null)
                    poCurrF = (Number)((Number) this.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
            }
            Number ocCalcAmt = (Number)ocCalcVal.round(getGlblRoundRateDigit());
            _log.info(ocId + "  oc id and coa Id " + coaId + " oc categary   " + ocCat+" ocCalcAmt  "+ocCalcAmt);
            Row rr = this.getMmBoeOc().createRow();
            rr.setAttribute("DocIdSrc", this.getMmBoeSrc().getCurrentRow().getAttribute("DocIdSrc"));
            rr.setAttribute("DlvSchdlNo", this.getMmBoeSrc().getCurrentRow().getAttribute("DlvSchdlNo"));
            rr.setAttribute("OcId", ocId);
            rr.setAttribute("CoaId", coaId);
            rr.setAttribute("OcCat", ocCat);
            rr.setAttribute("ThirdParty", thirdParty);
            rr.setAttribute("CurrIdSpOc", this.getMmBoe().getCurrentRow().getAttribute("TransCurrIdBs"));
            rr.setAttribute("CurrConvFctrOc", 1);
            rr.setAttribute("OcCalcType", ocCalcType);
            rr.setAttribute("OcCalcVal", (Number)ocCalcAmt.round(getGlblRoundRateDigit()));
            rr.setAttribute("OcQty", 1);
            if("A".equalsIgnoreCase(ocCalcType)){
                rr.setAttribute("OcAmtSp", (Number)((Number)ocCalcAmt.div(poCurrF)).round(getGlblRoundAmtDigit()));
                rr.setAttribute("OcAmtBs", ocCalcAmt);
                rr.setAttribute("OcCalcOnPct", zero);
                rr.setAttribute("OcAmtSpOc", ocCalcAmt);
                
            }else if("P".equalsIgnoreCase(ocCalcType)){
                rr.setAttribute("OcAmtSp", zero);
                rr.setAttribute("OcAmtBs", zero);
                rr.setAttribute("OcCalcOnPct", zero);
                rr.setAttribute("OcAmtSpOc", zero);
            }
           
          
            
            this.getMmBoeOc().insertRow(rr);
        }

    }

    public void addAllRequiredOC() {
        _log.info("addAllRequiredOC  ");
        if (this.getMmBoe().getCurrentRow() != null) {
            Number poCurrF = new Number(1);
            if (this.getMmBoe().getCurrentRow() != null) {
                if (this.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr") != null)
                    poCurrF = (Number)((Number) this.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
            }
            ViewObjectImpl ocView = this.getMmBoeOc();
            this.getOcForImportPoView().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            this.getOcForImportPoView().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            this.getOcForImportPoView().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            this.getOcForImportPoView().setNamedWhereClauseParam("DocIdBind", 18539);
            this.getOcForImportPoView().setNamedWhereClauseParam("DocTypeIdBind", 0);
            this.getOcForImportPoView().executeQuery();
            String chk = "Y";
            Integer docId = 18539;
            Integer docTypeId = 0;
            RowQualifier rq = new RowQualifier(this.getOcForImportPoView());
            rq.setWhereClause("Reqd ='" + chk + "' and DocId =" + docId + " and DocTypeId =" + docTypeId + " ");
            Row[] rr = this.getOcForImportPoView().getFilteredRows(rq);
            _log.info(rr.length + " row lenth  " + rq.getExprStr());
            if (rr.length > 0) {
                for (Row r : rr) {
                    RowQualifier rqOc = new RowQualifier(ocView);
                    rqOc.setWhereClause("OrgId ='" + this.getMmBoe().getCurrentRow().getAttribute("OrgId") +
                                        "' and SlocId =" + this.getMmBoe().getCurrentRow().getAttribute("SlocId") +
                                        " and CldId ='" + this.getMmBoe().getCurrentRow().getAttribute("CldId") +
                                        "' and DocId ='" + this.getMmBoe().getCurrentRow().getAttribute("DocId") +
                                        "' and OcId ='" + r.getAttribute("OcId") + "' ");
                    Row[] rrOcChk = ocView.getFilteredRows(rqOc);
                    _log.info(rrOcChk.length + "  oc dupli  " + rqOc.getExprStr());
                    if (rrOcChk.length == 0) {
                        _log.info(" record created.....");
                        String coCalcTyp = r.getAttribute("OcCalcType")==null ? "A" : r.getAttribute("OcCalcType").toString();
                        Row rrOc = this.getMmBoeOc().createRow();
                        rrOc.setAttribute("DocIdSrc", this.getMmBoeSrc().getCurrentRow().getAttribute("DocIdSrc"));
                        rrOc.setAttribute("DlvSchdlNo", this.getMmBoeSrc().getCurrentRow().getAttribute("DlvSchdlNo"));
                        rrOc.setAttribute("OcId", r.getAttribute("OcId"));
                        rrOc.setAttribute("CoaId", r.getAttribute("CoaId") == null ? 0 : r.getAttribute("CoaId"));
                        rrOc.setAttribute("OcCat", r.getAttribute("OcCat"));
                        rrOc.setAttribute("ThirdParty", r.getAttribute("ThirdParty"));
                        rrOc.setAttribute("CurrIdSpOc", this.getMmBoe().getCurrentRow().getAttribute("TransCurrIdBs"));
                        rrOc.setAttribute("CurrConvFctrOc", 1);
                        rrOc.setAttribute("OcCalcType", r.getAttribute("OcCalcType")==null ? "A" : r.getAttribute("OcCalcType"));
                        rrOc.setAttribute("OcCalcVal", r.getAttribute("OcCalcVal")==null ? 0 :  r.getAttribute("OcCalcVal") );
                        rrOc.setAttribute("OcQty", 1);
                        if("A".equalsIgnoreCase(coCalcTyp)){
                        rrOc.setAttribute("OcAmtSp", r.getAttribute("OcCalcVal")==null ? 0 :  r.getAttribute("OcCalcVal"));
                        rrOc.setAttribute("OcAmtBs", r.getAttribute("OcCalcVal")==null ? 0 :  r.getAttribute("OcCalcVal") );
                        rrOc.setAttribute("OcCalcOnPct", zero);
                        rrOc.setAttribute("OcAmtSpOc", r.getAttribute("OcCalcVal")==null ? 0 :  r.getAttribute("OcCalcVal"));
                        }else if("P".equalsIgnoreCase(coCalcTyp)){
                        rrOc.setAttribute("OcAmtSp", zero);
                        rrOc.setAttribute("OcAmtBs", zero);
                        rrOc.setAttribute("OcCalcOnPct", zero);
                        rrOc.setAttribute("OcAmtSpOc", r.getAttribute("OcCalcVal")==null ? 0 :  r.getAttribute("OcCalcVal"));
                        }
                        this.getMmBoeOc().insertRow(rrOc);
                    } else {
                        _log.info(" record already exist.....");
                    }

                }
            }

        }
    }

    public Integer checkAllOcApply() {
        if (this.getMmBoe().getCurrentRow() != null) {
            ViewObjectImpl ocView = this.getMmBoeOc();
            this.getOcForImportPoView().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
            this.getOcForImportPoView().setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            this.getOcForImportPoView().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            this.getOcForImportPoView().setNamedWhereClauseParam("DocIdBind", 18539);
            this.getOcForImportPoView().setNamedWhereClauseParam("DocTypeIdBind", 0);
            this.getOcForImportPoView().executeQuery();
            _log.info("row count " + this.getOcForImportPoView().getRowCount());
            String chk = "Y";
            Integer docId = 18539;
            Integer docTypeId = 0;
            RowQualifier rq = new RowQualifier(this.getOcForImportPoView());
            rq.setWhereClause("Reqd ='" + chk + "' and DocId =" + docId + " and DocTypeId =" + docTypeId + " ");
            Row[] rr = this.getOcForImportPoView().getFilteredRows(rq);
            _log.info(rr.length + " row lenth  " + rq.getExprStr());
            if (rr.length > 0) {
                for (Row r : rr) {
                    RowQualifier rqOc = new RowQualifier(this.getMmBoeOc());
                    rqOc.setWhereClause("OrgId ='" + this.getMmBoe().getCurrentRow().getAttribute("OrgId") +
                                        "' and SlocId =" + this.getMmBoe().getCurrentRow().getAttribute("SlocId") +
                                        " and CldId ='" + this.getMmBoe().getCurrentRow().getAttribute("CldId") +
                                        "' and DocId ='" + this.getMmBoe().getCurrentRow().getAttribute("DocId") +
                                        "' and OcId ='" + r.getAttribute("OcId") + "' ");
                    Row[] rrRow = this.getMmBoeOc().getFilteredRows(rqOc);
                    _log.info(rrRow.length + "    rrRow   " + rqOc.getExprStr());
                    if (rrRow.length == 0) {
                        return 1;
                    }
                }
            }
        }
        setOcAmtSp();
        return 0;
    }

    public Integer chkAllQcAmtEnter() {
        if (this.getMmBoe().getCurrentRow() != null) {
            RowQualifier rqOc = new RowQualifier(this.getMmBoeOc());
            rqOc.setWhereClause("OrgId ='" + this.getMmBoe().getCurrentRow().getAttribute("OrgId") + "' and SlocId =" +
                                this.getMmBoe().getCurrentRow().getAttribute("SlocId") + " and CldId ='" +
                                this.getMmBoe().getCurrentRow().getAttribute("CldId") + "' and DocId ='" +
                                this.getMmBoe().getCurrentRow().getAttribute("DocId") + "' ");
            Row[] rr = this.getMmBoeOc().getFilteredRows(rqOc);
            _log.info(rr.length + "  row for x  " + rqOc.getExprStr());
            if (rr.length > 0) {
                for (Row r : rr) {
                    if (r.getAttribute("OcAmtSp") == null || zero.compareTo((Number) r.getAttribute("OcAmtSp")) == 0) {
                        _log.info("some Oc amount zero");
                        return 1;
                    }
                }

            } else {
                return 0;
            }
        }
        return 0;
    }

    public Integer chkAllThirdPartySupplierSelect() {
        if (this.getMmBoe().getCurrentRow() != null) {
            RowQualifier rqOc = new RowQualifier(this.getMmBoeOc());
            rqOc.setWhereClause("OrgId ='" + this.getMmBoe().getCurrentRow().getAttribute("OrgId") + "' and SlocId =" +
                                this.getMmBoe().getCurrentRow().getAttribute("SlocId") + " and CldId ='" +
                                this.getMmBoe().getCurrentRow().getAttribute("CldId") + "' and DocId ='" +
                                this.getMmBoe().getCurrentRow().getAttribute("DocId") + "' ");
            Row[] rr = this.getMmBoeOc().getFilteredRows(rqOc);
            _log.info(rr.length + "  row for x  " + rqOc.getExprStr());
            if (rr.length > 0) {
                for (Row r : rr) {
                    if (r.getAttribute("ThirdParty") != null) {
                        if ("Y".equalsIgnoreCase(r.getAttribute("ThirdParty").toString()) &&
                            r.getAttribute("EoId") == null) {
                            _log.info("some third party supplier not selected. ");
                            return 1;
                        }
                    }
                }

            } else {
                return 0;
            }
        }
        return 0;
    }


    public Number setCurrncyConversion(Integer currId) {
        Number ocFactor = new Number(1);
        if (currId != null) {
            if (this.getMmBoe().getCurrentRow() != null &&
                this.getMmBoe().getCurrentRow().getAttribute("TransCurrIdBs") != null) {

                Integer currIdBs =
                    Integer.parseInt(this.getMmBoe().getCurrentRow().getAttribute("TransCurrIdBs").toString());
                if (currIdBs != null && currId != null) {
                    //                    RowQualifier rq = new RowQualifier(this.getLovCurrId());
                    //                                        rq.setWhereClause("HoOrgId ='" + this.getMmDrftPo().getCurrentRow().getAttribute("TransHoOrgId") +
                    //                                                          "' and OrgId = '" + this.getMmDrftPo().getCurrentRow().getAttribute("OrgId") +
                    //                                                          "' and CldId ='" + this.getMmDrftPo().getCurrentRow().getAttribute("CldId") +
                    //                                                          "' and CcCurrId =" + currIdBs + " and CcCurrIdTxn =" + currOcId + " ");

                    this.getLovCurrencyId().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                    this.getLovCurrencyId().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                    this.getLovCurrencyId().setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
                    this.getLovCurrencyId().setNamedWhereClauseParam("CcCurrIdBind", currIdBs);
                    this.getLovCurrencyId().executeQuery();


                    Row[] rrC = this.getLovCurrencyId().getFilteredRows("CcCurrIdTxn", currId);


                    _log.info(rrC.length + "  currency row ");
                    if (rrC.length > 0 && rrC[0].getAttribute("CcBuy") != null) {
                        ocFactor = (Number) ((Number) rrC[0].getAttribute("CcBuy")).round(getGlblRoundCurrRateDigit());
                    }
                    _log.info(ocFactor + "   currSpFactr  ");
                    if (ocFactor.compareTo(0) == 1) {

                        this.getMmBoe().getCurrentRow().setAttribute("CurrConvFctr", ocFactor);
                    }
                }

            }
        }
        _log.info("oc factoeerrr  " + ocFactor);
        return ocFactor;
    }


    public void changeOcCurrncy(String curr) {
        if (curr != null) {
            if (this.getMmBoeOc().getCurrentRow() != null &&
                ((Number) this.getMmBoeOc().getCurrentRow().getAttribute("OcAmtSpOc")).compareTo(zero) == 1) {
                Number ocFactor = new Number(1);
                Integer currOcId = 73;
                Integer currIdBs =
                    Integer.parseInt(this.getMmBoe().getCurrentRow().getAttribute("TransCurrIdBs").toString());
                Number currSpFactr =
                    (Number) ((Number) this.getMmBoe().getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
                _log.info(currSpFactr + "curr in " + curr);
                Row[] rr = this.getLovCurrId().getFilteredRows("CurrDesc", curr);
                if (rr.length > 0 && rr[0].getAttribute("CurrId") != null) {
                    currOcId = Integer.parseInt(rr[0].getAttribute("CurrId").toString());
                }
                if (currIdBs != null && currOcId != null) {
                    //                    RowQualifier rq = new RowQualifier(this.getLovCurrId());
                    //                                        rq.setWhereClause("HoOrgId ='" + this.getMmDrftPo().getCurrentRow().getAttribute("TransHoOrgId") +
                    //                                                          "' and OrgId = '" + this.getMmDrftPo().getCurrentRow().getAttribute("OrgId") +
                    //                                                          "' and CldId ='" + this.getMmDrftPo().getCurrentRow().getAttribute("CldId") +
                    //                                                          "' and CcCurrId =" + currIdBs + " and CcCurrIdTxn =" + currOcId + " ");

                    this.getLovCurrencyId().setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                    this.getLovCurrencyId().setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                    this.getLovCurrencyId().setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
                    this.getLovCurrencyId().setNamedWhereClauseParam("CcCurrIdBind", currIdBs);
                    this.getLovCurrencyId().executeQuery();


                    Row[] rrC = this.getLovCurrencyId().getFilteredRows("CcCurrIdTxn", currOcId);


                    _log.info(rrC.length + "  currency row ");
                    if (rrC.length > 0 && rrC[0].getAttribute("CcBuy") != null) {
                        ocFactor = (Number) rrC[0].getAttribute("CcBuy");
                    }
                    _log.info(ocFactor + "   currSpFactr  " + currSpFactr);
                    if (ocFactor.compareTo(0) == 1 && currSpFactr.compareTo(zero) == 1) {

                        Number ocAmt = (Number) this.getMmBoeOc().getCurrentRow().getAttribute("OcAmtSpOc");
                        _log.info((ocAmt.multiply(ocFactor)).divide(currSpFactr) + "  ocAmt " + ocAmt +
                                  " ocAmt.multiply(ocFactor)   " + ocAmt.multiply(ocFactor));
                        this.getMmBoeOc().getCurrentRow().setAttribute("OcAmtBs",
                                                                       ocAmt.multiply(ocFactor).round(getGlblRoundAmtDigit()));
                        this.getMmBoeOc().getCurrentRow().setAttribute("OcAmtSp",
                                                                       ((ocAmt.multiply(ocFactor)).divide(currSpFactr)).round(getGlblRoundAmtDigit()));

                        //this.getMmDrftPoOc().getCurrentRow().setoca

                        _log.info("arg023  " + this.getMmBoeOc().getCurrentRow().getAttribute("OcAmtBs"));
                        _log.info("arg0234  " + this.getMmBoeOc().getCurrentRow().getAttribute("OcAmtSp"));
                    }
                }

            }
        }

    }

    /**
     * Container's getter for LovCurrencyId1.
     * @return LovCurrencyId1
     */
    public ViewObjectImpl getLovCurrencyId() {
        return (ViewObjectImpl) findViewObject("LovCurrencyId");
    }

    /**
     * Container's getter for TransBillOfEntrySearch1.
     * @return TransBillOfEntrySearch1
     */
    public ViewObjectImpl getTransBillOfEntrySearch() {
        return (ViewObjectImpl) findViewObject("TransBillOfEntrySearch");
    }

    public void resetSearch() {
        ViewObjectImpl searchVo = this.getBillOfEntrySrch();
        searchVo.setNamedWhereClauseParam("BindSlocId", null);
        searchVo.setNamedWhereClauseParam("BindOrgId", "-1");
        searchVo.setNamedWhereClauseParam("BindCldId", "-1");
        searchVo.setNamedWhereClauseParam("BindEoId", null);
        searchVo.setNamedWhereClauseParam("BindAuthPoNo", null);
        searchVo.setNamedWhereClauseParam("BindFromDate", null);
        searchVo.setNamedWhereClauseParam("BindToDate", null);
        // searchVo.setNamedWhereClauseParam("BindBoeType", null);
        searchVo.setNamedWhereClauseParam("BindDocType", null);
        searchVo.setNamedWhereClauseParam("BindBeoStat", null);
        searchVo.setNamedWhereClauseParam("BindFileNo", null);
        searchVo.setNamedWhereClauseParam("BindBeoNo", null);
        searchVo.executeQuery();
    }

    public String SearchBilOfEntry() {
        ViewObjectImpl potransVo = getTransBillOfEntrySearch();
        Row poCurrr = potransVo.getCurrentRow();

        if (poCurrr != null) {
            ViewObjectImpl searchVo = this.getBillOfEntrySrch();
            searchVo.setNamedWhereClauseParam("BindSlocId", poCurrr.getAttribute("TransSlocId"));
            searchVo.setNamedWhereClauseParam("BindOrgId", poCurrr.getAttribute("TransOrgId"));
            searchVo.setNamedWhereClauseParam("BindCldId", poCurrr.getAttribute("TransCldId"));
            searchVo.setNamedWhereClauseParam("BindEoId", poCurrr.getAttribute("TranEoId"));
            searchVo.setNamedWhereClauseParam("BindAuthPoNo", poCurrr.getAttribute("TransAuthPoNo"));
            searchVo.setNamedWhereClauseParam("BindFromDate", poCurrr.getAttribute("TransFromDate"));
            searchVo.setNamedWhereClauseParam("BindToDate", poCurrr.getAttribute("TransToDate"));
            searchVo.setNamedWhereClauseParam("BindDocType", poCurrr.getAttribute("TransBoeType"));
            searchVo.setNamedWhereClauseParam("BindBeoNo", poCurrr.getAttribute("TransBoeNO"));
            searchVo.setNamedWhereClauseParam("BindBeoStat", poCurrr.getAttribute("TransBoeStat"));
            searchVo.setNamedWhereClauseParam("BindFileNo", poCurrr.getAttribute("TransFileNo"));
            searchVo.executeQuery();

        }


        return null;
    }

    public void viewBillOfEntry(String cldId, Integer slocId, String orgId, String docId) {
        ViewObjectImpl poVo = this.getMmBoe();
        _log.info("cld Id " + cldId + " sloc id " + slocId + "  org id " + orgId + " doc id " + docId);
        System.out.println("cld Id " + cldId + " sloc id " + slocId + "  org id " + orgId + " doc id " + docId);
        ViewCriteria vc = poVo.getViewCriteria("MmBoeVOCriteria");
        poVo.applyViewCriteria(vc);
        poVo.setNamedWhereClauseParam("BindCldId", cldId);
        poVo.setNamedWhereClauseParam("BindSlocId", slocId);
        poVo.setNamedWhereClauseParam("BindOrgId", orgId);
        poVo.setNamedWhereClauseParam("BindDocId", docId);
        poVo.executeQuery();
    }

    /**
     * Container's getter for BillOfEntrySrch1.
     * @return BillOfEntrySrch1
     */
    public ViewObjectImpl getBillOfEntrySrch() {
        return (ViewObjectImpl) findViewObject("BillOfEntrySrch");
    }

    /**
     * Container's getter for LovSupplierView1.
     * @return LovSupplierView1
     */
    public ViewObjectImpl getLovSupplierView() {
        return (ViewObjectImpl) findViewObject("LovSupplierView");
    }

    /**
     * Container's getter for LovOcNm1.
     * @return LovOcNm1
     */
    public ViewObjectImpl getLovOcNm() {
        return (ViewObjectImpl) findViewObject("LovOcNm");
    }

    public void setTaxAmtfromOc() {
        ViewObjectImpl vo = this.getMmBoe();
        ViewObjectImpl voItm = this.getMmBoeItm();
        ViewObjectImpl voSrc = this.getMmBoeSrc();
        String taxAftDiscFlg = "N";
        RowQualifier rq = new RowQualifier(voSrc);
        rq.setWhereClause("DocId ='" + vo.getCurrentRow().getAttribute("DocId") + "'");
        Row[] rrSrc = voSrc.getFilteredRows(rq);
        _log.info(rq.getExprStr() + "  arg0 " + rrSrc.length);

        if (rrSrc.length > 0 && rrSrc[0].getAttribute("TaxAfterDiscFlg") != null) {
            taxAftDiscFlg = rrSrc[0].getAttribute("TaxAfterDiscFlg").toString();
        }
        Row[] rr = voItm.getFilteredRows("DocId", vo.getCurrentRow().getAttribute("DocId"));
        _log.info("roe length " + rr.length);
        Number currencyFctr =
            (Number) ((Number) vo.getCurrentRow().getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        if (rr.length > 0) {
            for (Row r :
                 rr) {
                // Number totAmt = (((Number)((Number) r.getAttribute("DlvQty")).round(getGlblRoundQtyDigit()))).multiply((Number) r.getAttribute("PurPrice"));
                Number totAmt =
            (Number) ((((Number) ((Number) r.getAttribute("DlvQty")).round(getGlblRoundQtyDigit()))).multiply(((Number) ((Number) r.getAttribute("PurPrice")).round(getGlblRoundAmtDigit())))).round(getGlblRoundAmtDigit());
                if ("Y".equalsIgnoreCase(taxAftDiscFlg)) {
                    totAmt =
                        (Number) ((Number) totAmt.minus(((Number) r.getAttribute("DiscAmtSp")).round(getGlblRoundAmtDigit()))).round(getGlblRoundAmtDigit());
                }
                _log.info(totAmt + " totAmt  " + taxAftDiscFlg + " taxAftDiscFlg " +
                          r.getAttribute("TransTaxableAmountSp"));
                Number ab =
                    (Number) (totAmt.add((Number) ((Number) r.getAttribute("TransTaxableAmountSp")).round(getGlblRoundAmtDigit()))).round(getGlblRoundAmtDigit());
                _log.info("ab    " + ab);
                r.setAttribute("TaxableAmtSp", ab);
                r.setAttribute("TaxableAmtBs", (Number) (ab.multiply(currencyFctr)).round(getGlblRoundAmtDigit()));
                r.setAttribute("TaxableAmtSpOrig", ab);
                r.setAttribute("TaxableAmtBsOrig", (Number) (ab.multiply(currencyFctr)).round(getGlblRoundAmtDigit()));

            }
        }
    }

    /**
     * Delete Other Charges
     */
    public void deleteOtherCharge() {
        ViewObjectImpl voOC = this.getMmBoeOc();
        if (voOC.getCurrentRow() != null) {
            voOC.getCurrentRow().remove();
        }
    }

    /**
     * Container's getter for LovPoNo1.
     * @return LovPoNo1
     */
    public ViewObjectImpl getLovPoNo() {
        return (ViewObjectImpl) findViewObject("LovPoNo");
    }

    public Integer applyTaxInTaxableAmtVCL(Number amt) {
        _log.info("Inside value change listenerrr");
        //        String paramOrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        //        String paramCldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        //        Integer paramSlocId= Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        //        Integer paramUsrId= Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //        String paramHoOrgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        //  Number taxAmt = (Number)vce.getNewValue();

        Number taxAmt = amt;
        ViewObjectImpl rcptVo = this.getMmBoe();
        ViewObjectImpl rcptItmVo = this.getMmBoeItm();
        ViewObjectImpl rcptTrVo = this.getMmBoeTr1();
        Row rrItm = rcptItmVo.getCurrentRow();
        Row currRcpt = rcptVo.getCurrentRow();
        String docId = rrItm.getAttribute("DocId").toString();
        String docIdSrc = rrItm.getAttribute("DocIdSrc").toString();
        Integer dlvSchdlNo = Integer.parseInt(rrItm.getAttribute("DlvSchdlNo").toString());
        String itmId = rrItm.getAttribute("ItmId").toString();
        String itmUom = rrItm.getAttribute("ItmUom").toString();
        Number taxableAmtOrig = (Number) rrItm.getAttribute("TaxableAmtSpOrig");
        Number currencyFctr =
            (Number) ((Number) currRcpt.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        String taxRuleFlg = "I";
        String taxExpt = "N";
        _log.info("docId  : " + docId + " " + docIdSrc + " dlvSchdlNo " + dlvSchdlNo + " itmId " + itmId + " itmUom " +
                  itmUom);
        rrItm.setAttribute("TaxableAmtBs", taxAmt.multiply(currencyFctr));
        RowQualifier rqTr = new RowQualifier(rcptTrVo);
        rqTr.setWhereClause("CldId ='" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId =" +
                            EbizParams.GLBL_APP_SERV_LOC() + " and OrgId ='" + EbizParams.GLBL_APP_USR_ORG() +
                            "' and DocId ='" + docId + "' and DocIdSrc ='" + docIdSrc + "' and DlvSchdlNo =" +
                            dlvSchdlNo + " and ItmId ='" + itmId + "' and ItmUom ='" + itmUom + "' ");
        Row[] rr = rcptTrVo.getFilteredRows(rqTr);
        _log.info(rqTr.getExprStr() + "  trmmmmmmm  " + rr.length);
        if (rr.length > 0) {
            if (rr[0].getAttribute("TaxRuleId") != null) {
                Integer taxRuleId = Integer.parseInt(rr[0].getAttribute("TaxRuleId").toString());
                if (taxRuleId != null) {
                    this.getDBTransaction().postChanges();
                    _log.info(" taxRuleId : " + taxRuleId);
                    BigDecimal ret =
                        (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                         "MM.INS_BOE_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                         EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                         docId, docIdSrc, dlvSchdlNo, itmId, itmUom, taxRuleId,
                                                         taxableAmtOrig, taxAmt, taxRuleFlg, currencyFctr, taxExpt, "Y"
                    }));

                    _log.info(" end call tax ++    ::::");
                    Number retVal = new Number(0);
                    if (ret != null) {
                        try {
                            retVal = new Number(ret);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    _log.info(" retVal : " + retVal);

                    //  beoTrVo.getCurrentRow().setAttribute("TaxAmt", (Number) retVal.round(6));
                    // beoTrVo.getCurrentRow().setAttribute("TaxAmtBs", (Number) (retVal.multiply(currencyFctr).round(6)));
                    rrItm.setAttribute("TotTaxAmtSp", (Number) retVal.round(getGlblRoundAmtDigit()));
                    rrItm.setAttribute("TotTaxAmtBs",
                                       (Number) (retVal.multiply(currencyFctr).round(getGlblRoundAmtDigit())));


                    BigDecimal retRec =
                        (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_REC_TAX_BOE(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                         EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                         EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(),
                                                         docId, docIdSrc, dlvSchdlNo, itmId, itmUom, taxExpt
                    }));

                    Number retRecN = new Number(0);
                    if (retRec != null) {
                        try {
                            retRecN = new Number(retRec);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                    _log.info(retRec + " retRecN : " + retRecN);
                    rrItm.setAttribute("RecTaxAmtSp", retRecN.round(getGlblRoundAmtDigit()));
                    rrItm.setAttribute("RecTaxAmtBs", retRecN.multiply(currencyFctr).round(getGlblRoundAmtDigit()));


                    this.getMmBoeTr().executeQuery();
                    this.getMmBoeTrLines().executeQuery();

                    //                    _log.info(" taxRuleId : " + taxRuleId);
                    //                    BigDecimal ret =
                    //                        (BigDecimal) (callStoredFunction(Types.NUMERIC,
                    //                                                         "MM.INS_RCPT_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                    //                                                         paramSlocId, paramCldId, paramHoOrgId, paramOrgId, whId, docId,
                    //                                                         docIdSrc, dlvSchdlNo, itmId, itmUom, taxRuleId, taxAmt,
                    //                                                         taxRuleFlg, currencyFctr, taxExpt, "Y"
                    //                    }));
                    //
                    //
                    //                    Number retVal = new Number(0);
                    //                    if (ret != null) {
                    //                        try {
                    //                            retVal = new Number(ret);
                    //                        } catch (Exception e) {
                    //                            e.printStackTrace();
                    //                        }
                    //                    }
                    //                    _log.info(" retVal : " + retVal);
                    //                    rrItm.setAttribute("TotTaxAmtSp", retVal);
                    //                    rrItm.setAttribute("TotTaxAmtBs", retVal.multiply(currencyFctr));
                    //
                    //                    BigDecimal retRec =
                    //                        (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM.MM_GET_REC_TAX_RCPT(?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                    //                                                         paramCldId, paramSlocId, paramHoOrgId, paramOrgId, whId, docId,
                    //                                                         docIdSrc, dlvSchdlNo, itmId, itmUom, taxExpt
                    //                    }));
                    //
                    //                    Number retRecN = new Number(0);
                    //                    if (retRec != null) {
                    //                        try {
                    //                            retRecN = new Number(retRec);
                    //                        } catch (Exception e) {
                    //                            e.printStackTrace();
                    //                        }
                    //                    }
                    //                    _log.info(retRec + " retRecN : " + retRecN);
                    //                    rrItm.setAttribute("RecTaxAmtSp", retRecN);
                    //                    rrItm.setAttribute("RecTaxAmtBs", retRecN.multiply(currencyFctr));
                    //
                    //
                    //                    getAm().getMmMtlRcptTrVO().executeQuery();
                    //                    getAm().getMmMtlRcptTrLinesVO().executeQuery();
                    //                    AdfFacesContext.getCurrentInstance().addPartialTarget(calculationTblBind);

                }

            }

        }
        return 0;
    }


    //Function call for GET WF ID
    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {
        try {
            //  System.out.println("Getting wfNo.");
            _log.info("workflow id is " + sloc_id + " " + cld_id);
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            sloc_id, cld_id, org_id, doc_no, 0
            });
            _log.info("workflow id is " + obj);
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }


    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;


    //Function call for Get User Level
    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum,
                             String RfqDocId) {
        // System.out.println("Getting user level");
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, RfqDocId, 0
    }).toString());


    }


    //Function to insert into TXN table
    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer RFQ_DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount) {
        // System.out.println("Insert into txn");
        String rfqDocId = getMmBoe().getCurrentRow().getAttribute("DocId").toString();
        //  System.out.println("sloc_id "+sloc_id+"cld_id   "+cld_id+"pOrgId   "+pOrgId+"PO_DOC_NO   "+RFQ_DOC_NO+"WfNum "+WfNum+"poDocId "+rfqDocId+"usr_idFrm  "+usr_idFrm+"usr_idTo   "+usr_idTo+"levelFrm "+levelFrm+"levelTo  "+levelTo+"action  "+action+"remark  "+remark+"amount"+amount);
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, RFQ_DOC_NO, 0, WfNum, rfqDocId, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount
    }).toString());

    }


    //Function to get Pending User

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer RfqDocNo) {
        _log.info("pending user sloc id " + SlocId + " " + CldId);
        String docIdTxn = getMmBoe().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        Object obj = callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, RfqDocNo, docIdTxn
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        System.out.println("User id pending in impl--" + usrId);
        return usrId;

    }

    public void updateDocState() {

        String wfreturn = ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_VALUE}").toString();
        System.out.println("current wf return value is " + wfreturn);
        if ("A".equalsIgnoreCase(wfreturn)) {
            this.getMmBoe().getCurrentRow().setAttribute("AuthStat", "Y");
            this.getMmBoe().getCurrentRow().setAttribute("BoeStat", 816);
        }
        if ("F".equalsIgnoreCase(wfreturn)) {
            this.getMmBoe().getCurrentRow().setAttribute("AuthStat", "N");
            this.getMmBoe().getCurrentRow().setAttribute("BoeStat", 815);
        }
    }


    public String getUsrNm(Integer userId) {
        ViewObjectImpl usrvo = this.getLovUsr();
        String usrname = null;
        Integer slocId = Integer.parseInt(ADFModelUtils.resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        _log.info("user id is " + userId);
        if (userId != null) {
            usrvo.setNamedWhereClauseParam("bindSlocId", slocId);
            usrvo.setNamedWhereClauseParam("bindUsrId", userId);
            usrvo.executeQuery();
            // usrvo.setNamedWhereClauseParam("bind", arg1);
            Row[] rr = usrvo.getFilteredRows("UsrId", userId);
            if (rr.length > 0) {
                usrname = rr[0].getAttribute("UsrName").toString();
                return rr[0].getAttribute("UsrName").toString();
            }
        }
        _log.info("user id is " + usrname);
        return usrname;
    }

    /**
     * Container's getter for LovUsr1.
     * @return LovUsr1
     */
    public ViewObjectImpl getLovUsr() {
        return (ViewObjectImpl) findViewObject("LovUsr");
    }

    public void setOcAmtSp() {
        Row currPrnt = this.getMmBoe().getCurrentRow();
        //  ViewObjectImpl srcvo=this.getsvc
        Row curr = this.getMmBoeSrc().getCurrentRow();
        Number conv = (Number) ((Number) currPrnt.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
        if (curr != null) {
            String docId = curr.getAttribute("DocId").toString();
            Row[] rr = this.getMmBoeItm().getFilteredRows("DocId", docId);
            if (rr.length > 0) {
                for (Row r : rr) {
                    Number itmocAmt = (Number) r.getAttribute("OcTaxAmtSp");
                    r.setAttribute("OcAmtSp", (Number) itmocAmt.round(getGlblRoundAmtDigit()));
                    r.setAttribute("OcAmtBs", (Number) conv.multiply(itmocAmt).round(getGlblRoundAmtDigit()));
                }
            }
        }

        if (currPrnt != null && curr.getAttribute("TransSumTotalAmtSp") != null) {
            if (curr != null) {
                Number poAmt = (Number) curr.getAttribute("TransSumTotalAmtSp");
                curr.setAttribute("PoAmtSp", (Number) poAmt.round(getGlblRoundAmtDigit()));
                curr.setAttribute("PoAmtBs", (Number) poAmt.multiply(conv).round(getGlblRoundAmtDigit()));
            }
        }

    }

    public String reApplyTax() {
        Row curr = this.getMmBoe().getCurrentRow();
        ViewObjectImpl srcvo = this.getMmBoeSrc();
        ViewObjectImpl itmvo = this.getMmBoeItm();

        ViewObjectImpl trvo = this.getMmBoeTr1();
        trvo.executeQuery();
        _log.info("execute reapply tax ");
        if (curr != null) {
            this.getDBTransaction().postChanges();
            String docId = curr.getAttribute("DocId").toString();
            Number currencyFctr =
                (Number) ((Number) curr.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
            String taxRuleFlg = "I";
            String taxExpt = "N";
            Row[] srcRw = srcvo.getFilteredRows("DocId", docId);
            _log.info("length is src " + srcRw.length);
            if (srcRw.length > 0) {
                for (Row r : srcRw) {
                    String docIdsrc = r.getAttribute("DocIdSrc").toString();
                    Integer dlvSchdlNo = Integer.parseInt(r.getAttribute("DlvSchdlNo").toString());
                    Row[] itmRw = itmvo.getFilteredRows("DocIdSrc", docIdsrc);
                    _log.info("itm length " + itmRw.length);
                    if (itmRw.length > 0) {
                        for (Row itmR : itmRw) {
                            Number ItmtaxableAmtSp =
                                (Number) ((Number) itmR.getAttribute("TaxableAmtSp")).round(getAmtRoundOff()); //current amount
                            Number taxableAmtOrig =
                                (Number) ((Number) itmR.getAttribute("TaxableAmtSpOrig")).round(getGlblRoundAmtDigit());
                            String itmId = itmR.getAttribute("ItmId").toString();
                            String uom = itmR.getAttribute("ItmUom").toString();
                            //Number taxableAmt=(Number)itmR.getAttribute("TaxableAmt");

                            RowQualifier rq = new RowQualifier(trvo);
                            rq.setWhereClause("ItmId='" + itmId + "' and DocIdSrc='" + docIdsrc + "' and DocId='" +
                                              docId + "'");
                            Row[] trRow = trvo.getFilteredRows(rq);
                            _log.info("tr row length " + trRow.length);
                            System.out.println("tr row length " + trRow.length);
                            if (trRow.length > 0) {
                                for (Row rtr : trRow) {
                                    Number trTxblChk =
                                        (Number) ((Number) rtr.getAttribute("TaxableAmtSp")).round(getAmtRoundOff()); // previous amount check
                                    Number trTxblOrig =
                                        (Number) ((Number) rtr.getAttribute("TaxableAmtSpOrig")).round(getAmtRoundOff()); // previous orig amount check
                                    _log.info(trTxblOrig + "taxable check is " + trTxblChk);
                                    System.out.println(trTxblOrig + "taxable check is " + trTxblChk);
                                    //   Integer taxRuleId=Integer.parseInt(rtr.getAttribute("TaxableAmtSp").toString());
                                    if (rtr.getAttribute("TaxExmptFlg") != null) {
                                        taxExpt = rtr.getAttribute("TaxExmptFlg").toString();
                                    }
                                    System.out.println(trTxblChk + " current and previouse taxable amount is " +
                                                       ItmtaxableAmtSp + "comparison is " +
                                                       trTxblChk.compareTo(ItmtaxableAmtSp) + " taxable orig " +
                                                       taxableAmtOrig + " trTxblOrig " + trTxblOrig + " compir ORIG " +
                                                       trTxblOrig.compareTo(taxableAmtOrig));
                                    //   if (trTxblChk.compareTo(ItmtaxableAmtSp) == 1 || trTxblChk.compareTo(ItmtaxableAmtSp) ==-1) {
                                    //need to call tr insert function over here becoz taxable amt change at this place
                                    System.out.println("current tax rule id is " + rtr.getAttribute("TaxRuleId"));
                                    if (rtr.getAttribute("TaxRuleId") != null) {
                                        Integer taxRuleId = Integer.parseInt(rtr.getAttribute("TaxRuleId").toString());

                                        BigDecimal ret =
                                            (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                                             "MM.INS_BOE_TR_LINES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                                             EbizParams.GLBL_APP_CLD_ID(),
                                                                             EbizParams.GLBL_HO_ORG_ID(),
                                                                             EbizParams.GLBL_APP_USR_ORG(), docId,
                                                                             docIdsrc, dlvSchdlNo, itmId, uom,
                                                                             taxRuleId, taxableAmtOrig, ItmtaxableAmtSp,
                                                                             taxRuleFlg, currencyFctr, taxExpt, "Y"
                                        }));


                                        // For Recover tax
                                        /**
                                         * set recover tax
                                         * added on 29-09--2015
                                         */


                                        BigDecimal retRec =
                                            (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                                             "MM.MM_GET_REC_TAX_BOE(?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                             EbizParams.GLBL_APP_CLD_ID(),
                                                                             EbizParams.GLBL_APP_SERV_LOC(),
                                                                             EbizParams.GLBL_HO_ORG_ID(),
                                                                             EbizParams.GLBL_APP_USR_ORG(), docId,
                                                                             docIdsrc, dlvSchdlNo, itmId, uom, taxExpt
                                        }));


                                        this.getDBTransaction().postChanges(); // added for test only
                                        this.getMmBoeTr().executeQuery();
                                        this.getMmBoeTrLines().executeQuery();
                                        trvo.executeQuery();
                                        System.out.println(" end call tax ++    ::::");
                                        Number retVal = new Number(0);
                                        if (ret != null) {
                                            try {
                                                retVal = new Number(ret);
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                        }
                                        _log.info(" retVal : " + retVal);
                                        itmR.setAttribute("TotTaxAmtSp", (Number) retVal.round(getGlblRoundAmtDigit()));
                                        itmR.setAttribute("TotTaxAmtBs",
                                                          (Number) (retVal.multiply(currencyFctr).round(getGlblRoundAmtDigit())));


                                        /**
 * set recover tax
 * added on 29-09--2015
 */


                                        Number retRecN = new Number(0);
                                        if (retRec != null) {
                                            try {
                                                retRecN = new Number(retRec);
                                            } catch (Exception e) {
                                                e.printStackTrace();
                                            }
                                        }
                                        _log.info(retRec + " retRecN : " + retRecN);
                                        itmR.setAttribute("RecTaxAmtSp", retRecN.round(getGlblRoundAmtDigit()));
                                        itmR.setAttribute("RecTaxAmtBs",
                                                          retRecN.multiply(currencyFctr).round(getGlblRoundAmtDigit()));


                                    }
                                    //}
                                }
                            }

                            //itmR.set
                        }
                    }
                }
            }
        }
        return null;
    }

    public String checkAllTaxApply() {
        ArrayList itmArr = new ArrayList();
        HashSet srcArr = new HashSet();

        Row curr = this.getMmBoe().getCurrentRow();
        ViewObjectImpl srcvo = this.getMmBoeSrc();
        ViewObjectImpl itmvo = this.getMmBoeItm();
        ViewObjectImpl itmDescvo = this.getLovItmDesc();
        ViewObjectImpl poNovo = this.getLov();

        ViewObjectImpl trvo = this.getMmBoeTr1();
        trvo.executeQuery();
        _log.info("execute reapply tax ");
        String chkMsgFlg = "N";
        StringBuilder msg = new StringBuilder("<html><body>");
        msg.append("<b>These document item taxable amount has been changed re-apply Tax</b>");

        if (curr != null) {
            this.getDBTransaction().postChanges();
            String docId = curr.getAttribute("DocId").toString();
            Number currencyFctr =
                (Number) ((Number) curr.getAttribute("CurrConvFctr")).round(getGlblRoundCurrRateDigit());
            String taxRuleFlg = "I";
            String taxExpt = "N";

            Row[] srcRw = srcvo.getFilteredRows("DocId", docId);
            System.out.println("length is src " + srcRw.length);
            //  _log.info("length is src "+srcRw.length);
            if (srcRw.length > 0) {
                for (Row r : srcRw) {

                    String docIdsrc = r.getAttribute("DocIdSrc").toString();
                    Integer dlvSchdlNo = Integer.parseInt(r.getAttribute("DlvSchdlNo").toString());
                    Row[] itmRw = itmvo.getFilteredRows("DocIdSrc", docIdsrc);
                    System.out.println("itm length " + itmRw.length);
                    // _log.info("itm length "+itmRw.length);
                    if (itmRw.length > 0) {
                        for (Row itmR : itmRw) {
                            Number ItmtaxableAmtSp =
                                (Number) ((Number) itmR.getAttribute("TaxableAmtSp")).round(getAmtRoundOff()); //current amount
                            Number ItmtaxableAmtSpOrig =
                                (Number) ((Number) itmR.getAttribute("TaxableAmtSpOrig")).round(getAmtRoundOff()); //current amount ORIG
                            _log.info(ItmtaxableAmtSpOrig + "  orig  tax amount sp  " + ItmtaxableAmtSp);
                            String itmId = itmR.getAttribute("ItmId").toString();
                            String uom = itmR.getAttribute("ItmUom").toString();
                            //Number taxableAmt=(Number)itmR.getAttribute("TaxableAmt");

                            RowQualifier rq = new RowQualifier(trvo);
                            rq.setWhereClause("ItmId='" + itmId + "' and DocIdSrc='" + docIdsrc + "' and DocId='" +
                                              docId + "'");
                            Row[] trRow = trvo.getFilteredRows(rq);
                            _log.info("tr row length " + trRow.length);
                            if (trRow.length > 0) {
                                for (Row rtr : trRow) {
                                    Number trTxblChk =
                                        (Number) ((Number) rtr.getAttribute("TaxableAmtSp")).round(getAmtRoundOff()); // previous amount check
                                    // _log.info("taxable check is "+trTxblChk);
                                    Number trTxblChkOrig =
                                        (Number) ((Number) rtr.getAttribute("TaxableAmtSpOrig")).round(getAmtRoundOff()); // previous amount check Orig
                                    System.out.println(trTxblChkOrig + "  orig taxable check is amount  " + trTxblChk);
                                    //   Integer taxRuleId=Integer.parseInt(rtr.getAttribute("TaxableAmtSp").toString());
                                    if (rtr.getAttribute("TaxExmptFlg") != null) {
                                        taxExpt = rtr.getAttribute("TaxExmptFlg").toString();
                                    }
                                    System.out.println(trTxblChk + " current and previouse taxable amount is " +
                                                       ItmtaxableAmtSp + "comparison is " +
                                                       trTxblChk.compareTo(ItmtaxableAmtSp) + "   orig compe  " +
                                                       trTxblChkOrig.compareTo(ItmtaxableAmtSpOrig));
                                    _log.info(trTxblChk + " current and previouse taxable amount is " +
                                              ItmtaxableAmtSp + "comparison is " +
                                              trTxblChk.compareTo(ItmtaxableAmtSp) + "   orig compe  " +
                                              trTxblChkOrig.compareTo(ItmtaxableAmtSpOrig));
                                    // _log.info(trTxblChk+" current and previouse taxable amount is "+ItmtaxableAmtSp +"comparison is "+trTxblChk.compareTo(ItmtaxableAmtSp));
                                    if (trTxblChk.compareTo(ItmtaxableAmtSp) == 1 ||
                                        trTxblChk.compareTo(ItmtaxableAmtSp) == -1 ||
                                        trTxblChkOrig.compareTo(ItmtaxableAmtSpOrig) == 1 ||
                                        trTxblChkOrig.compareTo(ItmtaxableAmtSpOrig) == -1) {
                                        _log.info("current tax rule id is " + rtr.getAttribute("TaxRuleId"));
                                        itmDescvo.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                                        itmDescvo.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                                        itmDescvo.setNamedWhereClauseParam("ItmDescBind", null);
                                        itmDescvo.setNamedWhereClauseParam("ItmIdBind", itmId);
                                        itmDescvo.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
                                        itmDescvo.setNamedWhereClauseParam("SlocIdBind",
                                                                           EbizParams.GLBL_APP_SERV_LOC());
                                        itmDescvo.executeQuery();
                                        Row[] itmrr = itmDescvo.getFilteredRows("ItmId", itmId);
                                        if (itmrr.length > 0)
                                            itmArr.add(itmrr[0].getAttribute("ItmDesc").toString());
                                        // srcArr.add(docIdsrc.toString());
                                    }
                                }
                            }
                        }


                    } //enditm loop
                    if (itmArr.size() > 0) {
                        chkMsgFlg = "Y";
                        _log.info("inside msg append");
                        poNovo.setNamedWhereClauseParam("OrgIdBind", EbizParams.GLBL_APP_USR_ORG());
                        poNovo.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
                        poNovo.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                        poNovo.setNamedWhereClauseParam("DocIdBind", docIdsrc);
                        poNovo.executeQuery();
                        Row[] rr = poNovo.getFilteredRows("DocId", docIdsrc);
                        if (rr.length > 0 && rr[0].getAttribute("AuthPoNo") != null) {
                            String potNO = rr[0].getAttribute("AuthPoNo").toString();
                            msg = msg.append("<p><b>" + potNO + "</b> </p>");
                        }
                        msg.append("<ul>");
                        for (Object a : itmArr) {
                            msg.append("<li> <b>" + a.toString() + "</b></li>");
                        }
                        msg.append("</ul>");
                    } //endIf
                    itmArr.removeAll(itmArr);
                }
            }
        }
        if ("Y".equalsIgnoreCase(chkMsgFlg)) {
            msg.append("</body></html>");
            FacesMessage message = new FacesMessage(msg.toString());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        }

        return chkMsgFlg;
    }

    public Integer getAmtRoundOff() {
        return (Integer) EbizParams.GLBL_AMT_DIGIT();
    }

    /**
     * Container's getter for LovServiceProvider1.
     * @return LovServiceProvider1
     */
    public ViewObjectImpl getLovServiceProvider() {
        return (ViewObjectImpl) findViewObject("LovServiceProvider");
    }


    public String resetTrAndTrLine() {
        String docId = (String) this.getMmBoe().getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voTr = this.getMmBoeTr();
        RowQualifier rq = new RowQualifier(this.getMmBoeTrLines1());
        rq.setWhereClause("DocId ='" + docId + "' and DocIdSrc = '" + voTr.getCurrentRow().getAttribute("DocIdSrc") +
                          "' and DlvSchdlNo = " + voTr.getCurrentRow().getAttribute("DlvSchdlNo") + " AND ItmId ='" +
                          voTr.getCurrentRow().getAttribute("ItmId") + "' and ItmUom ='" +
                          voTr.getCurrentRow().getAttribute("ItmUom") + "' ");
        Row lineRows[] = this.getMmBoeTrLines1().getFilteredRows(rq);
        _log.info(lineRows.length + "    " + rq.getExprStr());

        //Row lineRows[] = this.getMmExpnsTrLines1().getFilteredRows("DocId", docId);
        _log.info("No. of Rows in Line=" + lineRows.length);
        for (Row row : lineRows) {
            row.remove();
        }
        this.getMmBoeTrLines().executeQuery();
        RowQualifier rq1 = new RowQualifier(this.getMmBoeTr());
        rq1.setWhereClause("DocId ='" + docId + "' and DocIdSrc = '" + voTr.getCurrentRow().getAttribute("DocIdSrc") +
                          "' and DlvSchdlNo = " + voTr.getCurrentRow().getAttribute("DlvSchdlNo") + " AND ItmId ='" +
                          voTr.getCurrentRow().getAttribute("ItmId") + "' and ItmUom ='" +
                          voTr.getCurrentRow().getAttribute("ItmUom") + "' ");
        Row trRow[] = this.getMmBoeTr().getFilteredRows(rq1);
        _log.info("No. of Rows in TR=" + trRow.length);


        if (trRow.length > 0) {

//            ViewObjectImpl vo = this.getMmBoeTrLines1();
//            RowQualifier rqnew = new RowQualifier(vo);
//            rqnew.setWhereClause("DocId ='" + docId + "' and  DocIdSrc='" +
//                                 voTr.getCurrentRow().getAttribute("DocIdSrc") + "' and ExpId ='" +
//                                 voTr.getCurrentRow().getAttribute("ExpId") + "' and ExpType=" +
//                                 voTr.getCurrentRow().getAttribute("ExpType") + " ");
//            Row[] rr1 = vo.getFilteredRows(rqnew);
//            _log.info(rq.getExprStr() + "   " + rr1.length);
//            if (rr1.length > 0) {
//
//                rr1[0].setAttribute("TaxAmtSp", 0);
//                rr1[0].setAttribute("TaxAmtBs", 0);
//
//                rr1[0].setAttribute("TotAmtSp", rr1[0].getAttribute("ExpAmtSp"));
//                rr1[0].setAttribute("TotAmtBs", rr1[0].getAttribute("ExpAmtBs"));
//            }
            this.getMmBoeItm().getCurrentRow().setAttribute("TotTaxAmtSp", new Number(0));
            this.getMmBoeItm().getCurrentRow().setAttribute("TotTaxAmtBs", new Number(0));
            this.getMmBoeItm().getCurrentRow().setAttribute("RecTaxAmtSp", new Number(0));
            this.getMmBoeItm().getCurrentRow().setAttribute("RecTaxAmtBs", new Number(0));

            trRow[0].remove();
        }


        this.getDBTransaction().postChanges();
        if (trRow.length == 0)
            return "N";
        return "Y";
    }


    /**
     * Container's getter for MmBoeTrLines1.
     * @return MmBoeTrLines1
     */
    public ViewObjectImpl getMmBoeTrLines1() {
        return (ViewObjectImpl) findViewObject("MmBoeTrLines1");
    }
}

