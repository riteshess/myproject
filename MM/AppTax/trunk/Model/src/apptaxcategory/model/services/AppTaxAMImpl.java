package apptaxcategory.model.services;

import apptaxcategory.model.services.common.AppTaxAM;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 26 15:33:30 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppTaxAMImpl extends ApplicationModuleImpl implements AppTaxAM {
    /**
     * This is the default constructor (do not remove).
     */
    String mode = "C";

    public AppTaxAMImpl() {
    }

    /**
     * Container's getter for TaxVO1.
     * @return TaxVO1
     */
    public ViewObjectImpl getTaxVO1() {
        return (ViewObjectImpl) findViewObject("TaxVO1");
    }

    public void initPage() {
        this.getTaxVO1().setWhereClause("CLD_ID= '" + getCldId() + "' AND HO_ORG_ID='" + getHoOrgId() +
                                        "' AND SLOC_ID =" + getSlocId());
        this.getTaxVO1().executeQuery();
        //  System.out.println(" passiing parameters are "+"CLD_ID= "+getCldId()+" AND HO_ORG_ID= "+getHoOrgId()+" AND SLOC_ID ="+getSlocId());
    }

    //    public void edit() {
    //
    //    }

    public Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    /*    public Object resolvEl(String data) {
        ADFContext adfCtx = ADFContext.getCurrent();
        ELContext elContext = adfCtx.getELContext();
        ValueExpression valueExp = adfCtx.getExpressionFactory().createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message.toString();
    } */

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public String doBeforeCommit() {
        Row curr = this.getTaxVO1().getCurrentRow();
        System.out.println("before function call am");
        String ret = null;
        //        Integer P_SLOCID = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        //        String P_ORGID =  resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        //        String CldID = resolvEl("#{pageFlowScope.GLBL_CLD_ID}").toString();
        Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //        String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        ret = callStoredFunction(Types.VARCHAR, "fn_app_gen_id(?,?,?,?,?,?)", new Object[] {
                                 getSlocId(), getCldId(), getHoOrgId(), getOrgId(), "APP$ITM$TAX$CAT", null
        }).toString();
        System.out.println("return value is:::::::::::::::" + ret + " " + getSlocId() + " " + getCldId() + " " +
                           getHoOrgId() + " " + getOrgId());
        //setTaxCatId(ret);
        if (curr.getAttribute("TaxCatId") == null) {
            curr.setAttribute("TaxCatId", ret);
        } else {
            curr.setAttribute("UsrIdMod", p_user_id);
            curr.setAttribute("UsrIdModDt", new Timestamp(System.currentTimeMillis()));
        }

        return null;

    }


    private String getCldId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    }

    private Integer getSlocId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    }

    private String getOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    }

    private String getHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    }

    public String categoryNmCheck(String name) {
        ViewObjectImpl vo = this.getTax1();
        Row curr = this.getTaxVO1().getCurrentRow();
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId = '" + getCldId() + "' and SlocId = " + getSlocId() + " and HoOrgId = '" +
                          getHoOrgId() + "'  and TaxCatNm = '" + name + "'");
        Row[] rr = vo.getFilteredRows(rq);
        //System.out.println("----lengtheloc ---------" + rr.length + " " + rq.getExprStr());
        for (Row r : rr) {
            //   System.out.println("--------------keys   " + r.getKey() + " curr " + curr.getKey());
            if (!(r.getKey().equals(curr.getKey()))) {
                return "Y";
            }
        }
        return "N";
    }


    /**
     * Container's getter for Tax1.
     * @return Tax1
     */
    public ViewObjectImpl getTax1() {
        return (ViewObjectImpl) findViewObject("Tax1");
    }
}

