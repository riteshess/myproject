package appitemprofile.model.services;

import appitemprofile.model.services.common.ItemProfileAM;
import appitemprofile.model.views.AppItmOrgVOImpl;
import appitemprofile.model.views.AppItmPrfVOImpl;
import appitemprofile.model.views.AppItmPrfVORowImpl;
import appitemprofile.model.views.ViewItemGrpLOVImpl;

import appitemprofile.model.views.ViewItmLOVImpl;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import java.util.Map;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 07 11:43:19 IST 2012
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ItemProfileAMImpl extends ApplicationModuleImpl implements ItemProfileAM {
    /**
     * This is the default constructor (do not remove).
     */

    String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(ItemProfileAMImpl.class);
    public static int VARCHAR = Types.VARCHAR;
    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int NUMBER = Types.NUMERIC;
    String add_mode = null;
    String edit_mode = null;
    String view_mode = null;
    String del_mode = null;

    public ItemProfileAMImpl() {
    }

    /**
     * Container's getter for AppItmPrf.
     * @return AppItmPrf
     */
    public AppItmPrfVOImpl getAppItmPrf() {
        return (AppItmPrfVOImpl) findViewObject("AppItmPrf");
    }


    /**
     * Container's getter for AppOrgItm.
     * @return AppOrgItm
     */
    public ViewObjectImpl getAppOrgItm() {
        return (ViewObjectImpl) findViewObject("AppOrgItm");
    }

    /**
     * Container's getter for ItemPrfToOrgItemVL.
     * @return ItemPrfToOrgItemVL
     */
    public ViewLinkImpl getItemPrfToOrgItemVL() {
        return (ViewLinkImpl) findViewLink("ItemPrfToOrgItemVL");
    }


    /**
     * Container's getter for ViewOrgLov.
     * @return ViewOrgLov
     */
    public ViewObjectImpl getViewOrgLov() {
        return (ViewObjectImpl) findViewObject("ViewOrgLov");
    }

    /**
     * Container's getter for ViewWHLov.
     * @return ViewWHLov
     */
    public ViewObjectImpl getViewWHLov() {
        return (ViewObjectImpl) findViewObject("ViewWHLov");
    }

    /**
     * Container's getter for OrgWhVL1.
     * @return OrgWhVL1
     */
    public ViewLinkImpl getOrgWhVL1() {
        return (ViewLinkImpl) findViewLink("OrgWhVL1");
    }


    /**
     * Container's getter for ViewItemAccLinkLOV.
     * @return ViewItemAccLinkLOV
     */
    public ViewObjectImpl getViewItemAccLinkLOV() {
        return (ViewObjectImpl) findViewObject("ViewItemAccLinkLOV");
    }

    /**
     * Container's getter for ViewItemGrpLOV.
     * @return ViewItemGrpLOV
     */
    public ViewItemGrpLOVImpl getViewItemGrpLOV() {
        return (ViewItemGrpLOVImpl) findViewObject("ViewItemGrpLOV");
    }

    /**
     * Container's getter for ItemSearch.
     * @return ItemSearch
     */
    public ViewObjectImpl getItemSearch() {
        return (ViewObjectImpl) findViewObject("ItemSearch");
    }

    /**
     * Container's getter for TransientViewForList.
     * @return TransientViewForList
     */
    public ViewObjectImpl getTransientViewForList() {
        return (ViewObjectImpl) findViewObject("TransientViewForList");
    }

    /**
     * Container's getter for ViewItmLOV.
     * @return ViewItmLOV
     */
    public ViewItmLOVImpl getViewItmLOV() {
        return (ViewItmLOVImpl) findViewObject("ViewItmLOV");
    }

    /**
     * Container's getter for ViewOrgItem.
     * @return ViewOrgItem
     */
    public ViewObjectImpl getViewOrgItem() {
        return (ViewObjectImpl) findViewObject("ViewOrgItem");
    }

    /**
     * Container's getter for ItmOrgToWHVL1.
     * @return ItmOrgToWHVL1
     */
    public ViewLinkImpl getItmOrgToWHVL1() {
        return (ViewLinkImpl) findViewLink("ItmOrgToWHVL1");
    }

    /**
     * Container's getter for ViewOrgWh.
     * @return ViewOrgWh
     */
    public ViewObjectImpl getViewOrgWh() {
        return (ViewObjectImpl) findViewObject("ViewOrgWh");
    }

    /**
     * Container's getter for OrgToWHVL.
     * @return OrgToWHVL
     */
    public ViewLinkImpl getOrgToWHVL() {
        return (ViewLinkImpl) findViewLink("OrgToWHVL");
    }

    public Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            // System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    public String getGroupPath(Integer SlocId, String CldId, String hoOrgId, String groupId) {
        adfLog.info("SlocId  " + SlocId + " CldId " + CldId + " hoOrgId " + hoOrgId + " groupId " + groupId);
        String path = (String) callStoredFunction(Types.VARCHAR, "GET_ITM_GRP_PATH(?,?,?,?)", new Object[] {
                                                  SlocId, CldId, hoOrgId, groupId
        });
        return path;
    }

    public String getAttributePath(Integer SlocId, String CldId, String hoOrgId, String itmId) {
        adfLog.info("SlocId  " + SlocId + " CldId " + CldId + " hoOrgId " + hoOrgId + " itmId " + itmId);
        String path = (String) callStoredFunction(Types.VARCHAR, "APP.FN_GET_ITM_ATT(?,?,?,?,?,?)", new Object[] {
                                                  CldId, SlocId, hoOrgId, itmId, "R", ","
        });
        adfLog.info(" attribute pass " + path);
        return path;
    }

    public String isItemDeletable(Integer SlocId, String CldId, String hoOrgId, String OrgId, String itemId) {
        String isDeletable = null;
        try {
            isDeletable = (String) callStoredFunction(Types.VARCHAR, "FN_IS_ITM_DELETABLE(?,?,?,?,?)", new Object[] {
                                                      SlocId, CldId, hoOrgId, OrgId, itemId
            });
        } catch (oracle.jbo.JboException jbo) {
            //System.out.println("exceptoion jbo--"+jbo);
            isDeletable = "Y";
        }
        // System.out.println("isdeleteable--"+isDeletable);
        return isDeletable;
    }

    public String deleteItem(Integer SlocId, String CldId, String hoOrgId, String itemId) {

        //  System.out.println("delete Item : " +SlocId +" , "+CldId+" , "+hoOrgId+" , "+itemId);

        String delete = (String) callStoredFunction(Types.VARCHAR, "PKG_APP_ITM.DELETE_ITM(?,?,?,?)", new Object[] {
                                                    SlocId, CldId, hoOrgId, itemId
        });
        //   System.out.println(delete +" "+ itemId + "After Deletiob");
        return delete;
    }

    /**
     * Container's getter for ViewFinCoaLOV.
     * @return ViewFinCoaLOV
     */
    public ViewObjectImpl getViewFinCoaLOV() {
        return (ViewObjectImpl) findViewObject("ViewFinCoaLOV");
    }

    public void setBindVarSearch(String CldId, String HoOrgId, Integer SlocId) {
        this.getItemSearch().setWhereClause("CLD_ID= '" + CldId + "' and HO_ORG_ID='" + HoOrgId + "' and SLOC_ID=" +
                                            SlocId);
        this.getItemSearch().executeQuery();
    }

    /**
     * Container's getter for AppItmOrgVO.
     * @return AppItmOrgVO
     */
    public ViewObjectImpl getAppItmOrgVO() {
        return (ViewObjectImpl) findViewObject("AppItmOrgVO");
    }

    /**
     * Container's getter for AppItmPrfToAppItmOrgVL1.
     * @return AppItmPrfToAppItmOrgVL1
     */
    public ViewLinkImpl getAppItmPrfToAppItmOrgVL1() {
        return (ViewLinkImpl) findViewLink("AppItmPrfToAppItmOrgVL1");
    }

    /**
     * Container's getter for AppAltItmVO.
     * @return AppAltItmVO
     */
    public ViewObjectImpl getAppAltItmVO() {
        return (ViewObjectImpl) findViewObject("AppAltItmVO");
    }

    /**
     * Container's getter for AppItmOrgToAppAltItmVL1.
     * @return AppItmOrgToAppAltItmVL1
     */
    public ViewLinkImpl getAppItmOrgToAppAltItmVL1() {
        return (ViewLinkImpl) findViewLink("AppItmOrgToAppAltItmVL1");
    }

    /**
     * Container's getter for AppItmCoaVO.
     * @return AppItmCoaVO
     */
    public ViewObjectImpl getAppItmCoaVO() {
        return (ViewObjectImpl) findViewObject("AppItmCoaVO");
    }

    /**
     * Container's getter for AppItmOrgToAppItmCoaVL1.
     * @return AppItmOrgToAppItmCoaVL1
     */
    public ViewLinkImpl getAppItmOrgToAppItmCoaVL1() {
        return (ViewLinkImpl) findViewLink("AppItmOrgToAppItmCoaVL1");
    }

    /**
     * Container's getter for AppGrpViewLov.
     * @return AppGrpViewLov
     */
    public ViewObjectImpl getAppGrpViewLov() {
        return (ViewObjectImpl) findViewObject("AppGrpViewLov");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    protected Object callStoredFunction1(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.registerOutParameter(7, VARCHAR);
            st.registerOutParameter(8, VARCHAR);
            st.registerOutParameter(9, VARCHAR);
            st.registerOutParameter(10, VARCHAR);
            st.executeUpdate();
            try {
                setAdd_mode(st.getObject(7).toString());
                setEdit_mode((st.getObject(8).toString()));
                setView_mode(st.getObject(9).toString());
                setDel_mode(st.getObject(10).toString());
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return st.getObject(1);

        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    public Integer on_load_page() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction1(VARCHAR, "APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)", new Object[] {
                            cld_id, sloc_id, org_id, 1, usr_id
        });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);

        return count;
    }


    public Integer on_load_page_1() {
        int count = 0;
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        callStoredFunction1(VARCHAR, "APP.fn_get_usr_doc_access_param(?,?,?,?,?,?,?,?,?)", new Object[] {
                            cld_id, sloc_id, org_id, 1, usr_id
        });
        String calledFrom = resolvEl("#{pageFlowScope.PARAM_PG_CALLED}").toString();
        if (add_mode.equalsIgnoreCase("Y") == false && add_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (edit_mode.equalsIgnoreCase("Y") == false && edit_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (view_mode.equalsIgnoreCase("Y") == false && view_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (del_mode.equalsIgnoreCase("Y") == false && del_mode.equalsIgnoreCase("N") == false) {
            count = 1;
        } else if (calledFrom.equalsIgnoreCase("P") == false && calledFrom.equalsIgnoreCase("M") == false) {
            count = 1;
        }
        Map paramMap = RequestContext.getCurrentInstance().getPageFlowScope();
        paramMap.put("PARAM_PG_ADD_MD", add_mode);
        paramMap.put("PARAM_PG_EDIT_MD", edit_mode);
        paramMap.put("PARAM_PG_VIEW_MD", view_mode);
        paramMap.put("PARAM_PG_DEL_MD", del_mode);

        return count;
    }


    public void setAdd_mode(String add_mode) {
        this.add_mode = add_mode;
    }

    public String getAdd_mode() {
        return add_mode;
    }

    public void setEdit_mode(String edit_mode) {
        this.edit_mode = edit_mode;
    }

    public String getEdit_mode() {
        return edit_mode;
    }

    public void setView_mode(String view_mode) {
        this.view_mode = view_mode;
    }

    public String getView_mode() {
        return view_mode;
    }

    public void setDel_mode(String del_mode) {
        this.del_mode = del_mode;
    }

    public String getDel_mode() {
        return del_mode;
    }

    /**
     * Container's getter for AppItmOrgVO1.
     * @return AppItmOrgVO1
     */
    public AppItmOrgVOImpl getAppItmOrgVO1() {
        return (AppItmOrgVOImpl) findViewObject("AppItmOrgVO1");
    }

    /**
     * Container's getter for AppItmPrfToAppItmOrgVL2.
     * @return AppItmPrfToAppItmOrgVL2
     */
    public ViewLinkImpl getAppItmPrfToAppItmOrgVL2() {
        return (ViewLinkImpl) findViewLink("AppItmPrfToAppItmOrgVL2");
    }

    /**
     * Container's getter for AppAltItmVO1.
     * @return AppAltItmVO1
     */
    public ViewObjectImpl getAppAltItmVO1() {
        return (ViewObjectImpl) findViewObject("AppAltItmVO1");
    }

    /**
     * Container's getter for AppItmOrgToAppAltItmVL2.
     * @return AppItmOrgToAppAltItmVL2
     */
    public ViewLinkImpl getAppItmOrgToAppAltItmVL2() {
        return (ViewLinkImpl) findViewLink("AppItmOrgToAppAltItmVL2");
    }

    /**
     * Container's getter for AppItmCoaVO1.
     * @return AppItmCoaVO1
     */
    public ViewObjectImpl getAppItmCoaVO1() {
        return (ViewObjectImpl) findViewObject("AppItmCoaVO1");
    }

    /**
     * Container's getter for AppItmOrgToAppItmCoaVL2.
     * @return AppItmOrgToAppItmCoaVL2
     */
    public ViewLinkImpl getAppItmOrgToAppItmCoaVL2() {
        return (ViewLinkImpl) findViewLink("AppItmOrgToAppItmCoaVL2");
    }


    /**
     * Container's getter for MMorgPrf2.
     * @return MMorgPrf2
     */
    public ViewObjectImpl getMMorgPrf2() {
        return (ViewObjectImpl) findViewObject("MMorgPrf2");
    }


    public boolean isOrgUseAutoItemId() {
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("MMorgPrf2");
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId = '" + cldId + "' AND SlocId = " + slocId + " AND OrgId = '" + orgId + "'");
        Row rows[] = vo.getFilteredRows(rq);
        if (rows != null && rows.length >= 1) {
            if (rows[0].getAttribute("AutoItmId").toString().equals("Y"))
                return true;
        }
        return false;
    }


    public String getItemCode() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        // String ItemCode =(String)callStoredFunction(Types.VARCHAR, " APP.FN_GENE_ITM_ID(?)", new Object[] {"ITM"});
        String ItemCode = (String) callStoredFunction(Types.VARCHAR, "  APP.FN_GEN_ITM_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      cld_id, sloc_id, hoOrgId, null, null, null, null, "T", "C"
        });
        ViewObjectImpl vo = this.getAppItmPrf();
        Row row = vo.getCurrentRow();
        row.setAttribute("ItmId", ItemCode);
        adfLog.info(" item code : " + ItemCode);
        return ItemCode;

    }

    public void setItemCode() { //System.out.println("ITEM CODE");
        //  System.out.println(isOrgUseAutoItemId());
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        if (isOrgUseAutoItemId()) {

            // String ItemCode =(String)callStoredFunction(Types.VARCHAR, " APP.FN_GENE_ITM_ID(?)", new Object[] {"ITM"});
            //   String ItemCode =(String)callStoredFunction(Types.VARCHAR, "  APP.FN_GEN_ITM_ID(?,?,?,?,?,?,?,?,?)", new Object[] {cld_id,  sloc_id,hoOrgId,null ,null,null,null, "T" ,"C"});
            ViewObjectImpl vo = this.getAppItmPrf();
            Row row = vo.getCurrentRow();
            if (row.getAttribute("DocId") != null) {
                adfLog.info(row.getAttribute("DocId") + " item code : ");
                row.setAttribute("ItmId", row.getAttribute("DocId"));
            }
        }
    }

    /**
     * Container's getter for GrpCoa1.
     * @return GrpCoa1
     */
    public ViewObjectImpl getGrpCoa1() {
        return (ViewObjectImpl) findViewObject("GrpCoa1");
    }

    /**
     * Container's getter for COA1.
     * @return COA1
     */
    public ViewObjectImpl getCOA1() {
        return (ViewObjectImpl) findViewObject("COA1");
    }


    public ViewObjectImpl getCoaVo() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl coaVo = this.getCOA1();
        ViewCriteria vc = coaVo.getViewCriteria("CoaVOCriteria");
        coaVo.applyViewCriteria(vc);
        coaVo.setNamedWhereClauseParam("bindCldId", cld_id);
        coaVo.setNamedWhereClauseParam("bindSlocId", sloc_id);
        coaVo.setNamedWhereClauseParam("bindOrgId", org_id);
        coaVo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        return coaVo;
    }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl) findViewObject("Org1");
    }


    public void executeViewOrg() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl orgVo = this.getViewOrgLov();
        ViewCriteria vc = orgVo.getViewCriteria("ViewOrgLovCriteria1");
        orgVo.applyViewCriteria(vc);
        orgVo.setNamedWhereClauseParam("BindhoOrgId", hoOrgId);
        orgVo.executeQuery();
    }


    public void defaultItmSearchView() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl orgVo = this.getItemSearch();
        ViewCriteria vc = orgVo.getViewCriteria("ItemSearchVOCriteria");
        orgVo.applyViewCriteria(vc);
        orgVo.setNamedWhereClauseParam("BindItmId", "-1");
        orgVo.setNamedWhereClauseParam("BindItmDesc", null);
        orgVo.setNamedWhereClauseParam("BindUomId", null);
        orgVo.setNamedWhereClauseParam("BindUomDesc", null);
        orgVo.setNamedWhereClauseParam("BindAmtFrom", null);
        orgVo.setNamedWhereClauseParam("BindAmtTo", null);
        orgVo.setNamedWhereClauseParam("BindGrpId", null);
        orgVo.setNamedWhereClauseParam("BindGrpNm", null);
        orgVo.setNamedWhereClauseParam("BindStokable", null);
        orgVo.setNamedWhereClauseParam("BindServiceItem", null);
        orgVo.setNamedWhereClauseParam("BindCapitalGd", null);
        orgVo.setNamedWhereClauseParam("BindFromDate", null);
        orgVo.setNamedWhereClauseParam("BindToDate", null);
        orgVo.setNamedWhereClauseParam("BindPurItem", null);
        orgVo.setNamedWhereClauseParam("BindSaleItem", null);
        orgVo.setNamedWhereClauseParam("BindTaxExempt", null);
        orgVo.setNamedWhereClauseParam("BindActv", "Y");
        orgVo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        orgVo.setNamedWhereClauseParam("bindCldId", cld_id);
        orgVo.setNamedWhereClauseParam("bindSlocId", sloc_id);
        orgVo.executeQuery();
    }

    /**
     * Container's getter for transOrg1.
     * @return transOrg1
     */
    public ViewObjectImpl gettransOrg1() {
        return (ViewObjectImpl) findViewObject("transOrg1");
    }

    /**
     * Container's getter for ViewUOMLOV.
     * @return ViewUOMLOV
     */
    public ViewObjectImpl getViewUOMLOV() {
        return (ViewObjectImpl) findViewObject("ViewUOMLOV");
    }


    public void doFilterAppGrpViewLov() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl grpVo = this.getAppGrpViewLov();
        ViewCriteria vc = grpVo.getViewCriteria("AppGrpViewLovCriteria1");
        grpVo.applyViewCriteria(vc);
        grpVo.setNamedWhereClauseParam("cldIdBindVar", cld_id);
        grpVo.setNamedWhereClauseParam("slocIdBindVar", sloc_id);
        grpVo.setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        grpVo.executeQuery();
    }

    /**
     * Container's getter for AppItmCoaVO2.
     * @return AppItmCoaVO2
     */
    public ViewObjectImpl getAppItmCoaVO2() {
        return (ViewObjectImpl) findViewObject("AppItmCoaVO2");
    }

    /**
     * Container's getter for ItemPrfToItemCoaVL1.
     * @return ItemPrfToItemCoaVL1
     */
    public ViewLinkImpl getItemPrfToItemCoaVL1() {
        return (ViewLinkImpl) findViewLink("ItemPrfToItemCoaVL1");
    }

    public boolean isPropertyCombinationValid() {
        ViewObjectImpl voItmMat = this.getItmMatrix();
        ViewObjectImpl formGrp = this.getAppItmPrf();

        Row currRow = formGrp.getCurrentRow();
        String slsFlg = (String) currRow.getAttribute("SlsItmFlg");
        String purFlg = (String) currRow.getAttribute("PurItmFlg");
        String serFlg = (String) currRow.getAttribute("SrvcItmFlg");
        String cpFlg = (String) currRow.getAttribute("CashPurFlg");
        String wipFlg = (String) currRow.getAttribute("WipItmFlg");
        String cptFlg = (String) currRow.getAttribute("CapitalGdFlg");

        if (slsFlg == null) {
            slsFlg = "N";
        }
        if (serFlg == null) {
            serFlg = "N";
        }
        if (purFlg == null) {
            purFlg = "N";
        }
        if (cpFlg == null) {
            cpFlg = "N";
        }
        if (wipFlg == null) {
            wipFlg = "N";
        }
        if (cptFlg == null) {
            cptFlg = "N";
        }


        RowQualifier rq = new RowQualifier(voItmMat);
        rq.setWhereClause("Pur = '" + purFlg + "' AND Sls = '" + slsFlg + "' AND Wip = '" + wipFlg +
                          "' AND Capital = '" + cptFlg + "' AND Service = '" + serFlg + "' AND CashPur = '" + cpFlg +
                          "'");
        Row rows[] = voItmMat.getFilteredRows(rq);
        adfLog.info(rows.length + " query    " + rq.getExprStr());

        if (rows != null && rows.length > 0) {
            return Boolean.TRUE;
        }

        return Boolean.FALSE;
    }

    /**
     * Container's getter for AppItmAtt1.
     * @return AppItmAtt1
     */
    public ViewObjectImpl getAppItmAtt1() {
        return (ViewObjectImpl) findViewObject("AppItmAtt1");
    }

    /**
     * Container's getter for ItmPrfToItmAttVL1.
     * @return ItmPrfToItmAttVL1
     */
    public ViewLinkImpl getItmPrfToItmAttVL1() {
        return (ViewLinkImpl) findViewLink("ItmPrfToItmAttVL1");
    }

    /**
     * Container's getter for ItmMatrix.
     * @return ItmMatrix
     */
    public ViewObjectImpl getItmMatrix() {
        return (ViewObjectImpl) findViewObject("ItmMatrix");
    }

    public void addItemAttribute(String itmAttType, String itmAttValue) {
        ViewObjectImpl attvo = this.getAppItmAtt1();
        ViewObjectImpl itmVo = this.getAppItmPrf();
        Row itmRow = itmVo.getCurrentRow();
        adfLog.info("itmAttType   " + itmAttType + "   itmAttValue   " + itmAttValue);
        if (itmAttType != null && itmAttValue != null) {
            Row newRow = attvo.createRow();
            newRow.setAttribute("AttId", itmRow.getAttribute("TransItmAttId"));
            newRow.setAttribute("AttTypeId", itmRow.getAttribute("TransAttTypeId"));
            attvo.insertRow(newRow);
        }
        itmRow.setAttribute("ItmAttTypeId", null);
        itmRow.setAttribute("ItmAttValId", null);
        itmRow.setAttribute("TransItmAttId", null);
        itmRow.setAttribute("TransAttTypeId", null);

    }


    public void addItemAttribute() {
        ViewObjectImpl attvo = this.getAppItmAtt1();
        ViewObjectImpl itmVo = this.getTransAttTypVal1();
        Row itmRow = itmVo.getCurrentRow();
        //adfLog.info("itmAttType   "+itmAttType+"   itmAttValue   "+itmAttValue);
        if (itmRow != null) {
            Row newRow = attvo.createRow();
            //   System.out.println(itmRow.getAttribute("AttValId"));
            //   System.out.println(itmRow.getAttribute("AttTypId"));

            newRow.setAttribute("AttId", itmRow.getAttribute("AttValId"));
            newRow.setAttribute("AttTypeId", itmRow.getAttribute("AttTypId"));
            attvo.insertRow(newRow);
        }
        itmRow.setAttribute("AttValId", null);
        itmRow.setAttribute("AttTypId", null);
        itmVo.executeQuery();
        attvo.executeQuery();
    }

    public String isAttributeValid(String itmAttType, String itmAttValue) {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl itmVo = this.getTransAttTypVal1();
        ViewObjectImpl itmAtt = this.getAppItmAtt1();
        Row currR = itmVo.getCurrentRow();

        ViewObjectImpl itmPrfVo = this.getAppItmPrf();
        Row currItmRow = itmPrfVo.getCurrentRow();

        String itmId = currItmRow.getAttribute("ItmId").toString();
        // String itmAttTypeId = currR.getAttribute("AttTypId").toString();
        //String itmAttVal = currR.getAttribute("AttValId").toString();
        String itmAttTypeId = currItmRow.getAttribute("TransAttTypeId").toString();
        String itmAttVal = currItmRow.getAttribute("TransItmAttId").toString();
        adfLog.info("itmId    " + itmId + "  cur itmAttTypeId " + itmAttTypeId + "   curr itmAttVal  " + itmAttVal +
                    " itmAttType   " + itmAttType + "  itmAttValue " + itmAttValue);
        String retVal = "N";
        RowQualifier rq = new RowQualifier(itmAtt);
        rq.setWhereClause("CldId = '" + cld_id + "' AND SlocId = " + sloc_id + " AND HoOrgId = '" + hoOrgId +
                          "' AND ItmId = '" + itmId + "' And AttTypeId = '" + itmAttTypeId + "' ");
        Row[] rr = itmAtt.getFilteredRows(rq);
        adfLog.info(rr.length + "  query   " + rq.getExprStr());
        if (rr.length > 0) {
            retVal = "Y";
        }
        if ("Y".equalsIgnoreCase(retVal)) {
            this.getAppItmPrf().getCurrentRow().setAttribute("TransAttTypeId", null);
            this.getAppItmPrf().getCurrentRow().setAttribute("TransItmAttId", null);
            this.getAppItmPrf().getCurrentRow().setAttribute("ItmAttTypeId", null);
            this.getAppItmPrf().getCurrentRow().setAttribute("ItmAttValId", null);
        }

        return retVal;
    }

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return "0";
        }

    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        //  System.out.println("Work Flow Id : "+WfNo);

        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
    }).toString());

    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        // String DocId =null;
        String DocId = getAppItmPrf().getCurrentRow().getAttribute("DocId").toString();
        adfLog.info(" doc id " + DocId);
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo,
                                                   levelFrm, levelTo, action, remark, amount
    }).toString());

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        // String DocId =null;
        String DocId = getAppItmPrf().getCurrentRow().getAttribute("DocId").toString();
        adfLog.info("DocId -- " + DocId);
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, DocId, 0
        });
        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }

    public String CheckSaved() {
        String DocId = getAppItmPrf().getCurrentRow().getAttribute("DocId").toString();
        Row[] r = getWF1().getFilteredRows("TxnDocId", DocId);
        if (r.length > 0)
            return "1";
        else
            return "-1";
    }

    public void updateItemIdAfterApproved(String retValue) {
        ViewObjectImpl itmvo = this.getAppItmPrf();
        Row currR = itmvo.getCurrentRow();
        String docId = currR.getAttribute("DocId").toString();
        String grpId = currR.getAttribute("GrpId").toString();
        String tempItmId = currR.getAttribute("ItmId").toString();
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer UsrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());

        System.out.println("RETRUN : " + retValue);

        if (retValue.toString().equals("A")) {
            String ItemCode = (String) callStoredFunction(Types.VARCHAR, " APP.FN_GEN_ITM_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          cld_id, sloc_id, hoOrgId, grpId, tempItmId, docId, UsrId, "P",
                                                          "A"
            });
            adfLog.info("APP.FN_GEN_ITM_ID   " + ItemCode);
            if (ItemCode != null) {
                adfLog.info(currR.getAttribute("Actv") + " item id before set  ---->" + currR.getAttribute("ItmId"));
                if (ItemCode.equalsIgnoreCase("-1") || ItemCode.equalsIgnoreCase("-3") ||
                    ItemCode.equalsIgnoreCase("-4")) {
                    adfLog.info("ItemCode:" + ItemCode);
                } else {
                    currR.setAttribute("ItmId", ItemCode);
                    currR.setAttribute("Actv", "Y");
                    adfLog.info(currR.getAttribute("Actv") + " item id after set  ---->" + currR.getAttribute("ItmId"));
                }
            }


        }

    }


    public String getUserName(Integer usrId) {
        String usrName = "Anonymous";
        Row r[] = this.getViewUserLOV().getFilteredRows("UsrId", usrId);
        if (r.length > 0)
            usrName = (String) r[0].getAttribute("UsrName");
        return usrName;
    }

    /**
     * Container's getter for ViewUserLOV.
     * @return ViewUserLOV
     */
    public ViewObjectImpl getViewUserLOV() {
        return (ViewObjectImpl) findViewObject("ViewUserLOV");
    }

    /**
     * Container's getter for ActiveApprove.
     * @return ActiveApprove
     */
    public ViewObjectImpl getActiveApprove() {
        return (ViewObjectImpl) findViewObject("ActiveApprove");
    }

    /**
     * Container's getter for AppAltItm1.
     * @return AppAltItm1
     */
    public ViewObjectImpl getAppAltItm1() {
        return (ViewObjectImpl) findViewObject("AppAltItm1");
    }


    public Boolean isItemNameDuplicate(String itemName, String previousVal) {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl itmvo = this.getItemPrfVW1();
        //Row row = itmvo.getCurrentRow();

        if (previousVal != null && previousVal.trim().equals(itemName.trim())) {
            return Boolean.FALSE;
        }

        RowQualifier rq = new RowQualifier(itmvo);
        rq.setWhereClause("SlocId = " + sloc_id + " AND CldId = '" + cld_id + "' AND HoOrgId = '" + hoOrgId +
                          "' AND UPPER(ItmDesc)=UPPER('" + itemName.trim() + "')");
        Row rows[] = itmvo.getFilteredRows(rq);

        if (rows.length > 0) {
            return Boolean.TRUE;
        }

        return Boolean.FALSE;
    }

    /**
     * Container's getter for ItemPrfVW1.
     * @return ItemPrfVW1
     */
    public ViewObjectImpl getItemPrfVW1() {
        return (ViewObjectImpl) findViewObject("ItemPrfVW1");
    }

    /**
     * Container's getter for AppGrpViewLov1.
     * @return AppGrpViewLov1
     */
    public ViewObjectImpl getAppGrpViewLov1() {
        return (ViewObjectImpl) findViewObject("AppGrpViewLov1");
    }

    /**
     * Container's getter for GroupLov1.
     * @return GroupLov1
     */
    public ViewObjectImpl getGroupLov1() {
        return (ViewObjectImpl) findViewObject("GroupLov1");
    }

    /**
     * Container's getter for TransAttTypVal1.
     * @return TransAttTypVal1
     */
    public ViewObjectImpl getTransAttTypVal1() {
        return (ViewObjectImpl) findViewObject("TransAttTypVal1");
    }

    public Integer getRowCount() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl itmVo = this.getTransAttTypVal1();
        ViewObjectImpl itmAtt = this.getAppItmAtt1();

        ViewObjectImpl itmPrfVo = this.getAppItmPrf();
        Row currItmRow = itmPrfVo.getCurrentRow();

        String itmId = currItmRow.getAttribute("ItmId").toString();
        //adfLog.info("itmId    "+itmId+"  cur itmAttTypeId "+itmAttTypeId+"   curr itmAttVal  "+itmAttVal+" itmAttType   "+itmAttType+"  itmAttValue "+itmAttValue);
        String retVal = "N";
        RowQualifier rq = new RowQualifier(itmAtt);
        rq.setWhereClause("CldId = '" + cld_id + "' AND SlocId = " + sloc_id + " AND HoOrgId = '" + hoOrgId +
                          "' AND ItmId = '" + itmId + "'");
        Row[] rr = itmAtt.getFilteredRows(rq);
        return rr.length;
    }

    /**
     * Container's getter for MMDTLCOAVW1.
     * @return MMDTLCOAVW1
     */
    public ViewObjectImpl getMMDTLCOAVW1() {
        return (ViewObjectImpl) findViewObject("MMDTLCOAVW1");
    }

    /**
     * Container's getter for WF1.
     * @return WF1
     */
    public ViewObjectImpl getWF1() {
        return (ViewObjectImpl) findViewObject("WF1");
    }

    public void populateItmPropertyFrmSampleItem(String value) {

        ViewObjectImpl itmvo = this.getAppItmPrf();
        ViewObjectImpl sampleItm = this.getLovSampleItem();
        ViewObjectImpl itmAttVo = this.getAppItmAtt();
        ViewObjectImpl attvo = this.getAppItmAtt1();
        Row currR = itmvo.getCurrentRow();
        adfLog.info("curr value " + currR.getAttribute("TransSampleItemForPopulate"));
        adfLog.info("VCL value  " + value);
        String itmId = null;
        String grpId = null;
        String uomBase = null;
        if (currR.getAttribute("TransSampleItemForPopulate") != null || value != null) {
            RowQualifier rq = new RowQualifier(sampleItm);
            rq.setWhereClause("CldId = '" + currR.getAttribute("CldId") + "' and HoOrgId = '" +
                              currR.getAttribute("HoOrgId") + "' and SlocId = " +
                              Integer.parseInt(currR.getAttribute("SlocId").toString()) + " and ItmDesc ='" + value +
                              "' ");
            Row[] rr = sampleItm.getFilteredRows(rq);
            adfLog.info(rq.getExprStr() + "  item row  " + rr.length);
            if (rr.length > 0) {
                itmId = rr[0].getAttribute("ItmId").toString();
                grpId = rr[0].getAttribute("GrpId").toString();
                uomBase = rr[0].getAttribute("UomBasic").toString();


            }
            adfLog.info("Item Id   " + itmId);
            if (itmId != null) {

                currR.setAttribute("GrpId", grpId);
                currR.setAttribute("UomBasic", uomBase);
                // Delete att rows first

                RowQualifier rq2 = new RowQualifier(attvo);
                rq2.setWhereClause("CldId = '" + currR.getAttribute("CldId") + "' and HoOrgId = '" +
                                   currR.getAttribute("HoOrgId") + "' and SlocId = " +
                                   Integer.parseInt(currR.getAttribute("SlocId").toString()) + " and ItmId ='" +
                                   currR.getAttribute("ItmId") + "' ");
                Row[] rr3 = attvo.getFilteredRows(rq2);
                adfLog.info(rq2.getExprStr() + "  att row delete  " + rr3.length);
                if (rr3.length > 0) {
                    for (Row rr4 : rr3) {
                        adfLog.info("Delete  attt rows");
                        rr4.remove();
                    }
                }


                RowQualifier rq1 = new RowQualifier(itmAttVo);
                rq1.setWhereClause("CldId = '" + currR.getAttribute("CldId") + "' and HoOrgId = '" +
                                   currR.getAttribute("HoOrgId") + "' and SlocId = " +
                                   Integer.parseInt(currR.getAttribute("SlocId").toString()) + " and ItmId ='" + itmId +
                                   "' ");
                Row[] rr1 = itmAttVo.getFilteredRows(rq1);
                adfLog.info(rq.getExprStr() + "  att row  " + rr.length);
                if (rr1.length > 0) {
                    for (Row rr2 : rr1) {
                        adfLog.info(" new att row  ::::::::::::::" + currR.getAttribute("ItmId"));
                        Row newRow = attvo.createRow();
                        newRow.setAttribute("ItmId", currR.getAttribute("ItmId"));
                        newRow.setAttribute("AttId", rr2.getAttribute("AttId"));
                        newRow.setAttribute("AttTypeId", rr2.getAttribute("AttTypeId"));
                        attvo.insertRow(newRow);

                    }

                }


            }

            itmAttVo.executeQuery();
            attvo.executeQuery();
        }


    }

    /**
     * Container's getter for LovSampleItem.
     * @return LovSampleItem
     */
    public ViewObjectImpl getLovSampleItem() {
        return (ViewObjectImpl) findViewObject("LovSampleItem");
    }

    /**
     * Container's getter for AppItmAtt.
     * @return AppItmAtt
     */
    public ViewObjectImpl getAppItmAtt() {
        return (ViewObjectImpl) findViewObject("AppItmAtt");
    }

    /**
     * Container's getter for AppWfAttchVO1.
     * @return AppWfAttchVO1
     */
    public ViewObjectImpl getAppWfAttchVO1() {
        return (ViewObjectImpl) findViewObject("AppWfAttchVO1");
    }

    /**
     * Container's getter for AppItmPrftoAppwfAttVL1.
     * @return AppItmPrftoAppwfAttVL1
     */
    public ViewLinkImpl getAppItmPrftoAppwfAttVL1() {
        return (ViewLinkImpl) findViewLink("AppItmPrftoAppwfAttVL1");
    }

    /**
     * Container's getter for AppRmrkjVO1.
     * @return AppRmrkjVO1
     */
    public ViewObjectImpl getAppRmrkjVO1() {
        return (ViewObjectImpl) findViewObject("AppRmrkjVO1");
    }

    public String setBindVarFrRmrkView() {
        System.out.println("in the setBindVarFrRmrkView");
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl itmprf = this.getAppItmPrf();
        Row[] allrow = itmprf.getAllRowsInRange();
        AppItmPrfVORowImpl row = null;
        if (allrow.length > 0) {
            Row soRow = allrow[0];
            System.out.println("Row is: " + soRow);
            row = (AppItmPrfVORowImpl) soRow;
        }
        System.out.println("CLD_ID :" + CldId + "SlocId:" + SlocId + "OrgId:" + OrgId + "DocId:" + row.getDocId());
        ViewObjectImpl view = this.getAppRmrkjVO1();
        view.setNamedWhereClauseParam("SlocIdBind", SlocId);
        view.setNamedWhereClauseParam("CldIdBind", CldId);
        view.setNamedWhereClauseParam("OrgIdBind", OrgId);
        view.setNamedWhereClauseParam("TxnDocIdBind", row.getDocId());
        view.executeQuery();
        return "setBindVarFrRmrkView";
    }

    public Integer replicateAllOrgFoItm() {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Integer ret = 0;
        // Row trOrgvo=this.gettransOrg1().getCurrentRow();

        adfLog.info("tax rule id from transient  " + this.gettransOrg1().getCurrentRow().getAttribute("TransTaxRule"));
        ViewObjectImpl itmPrfVo = this.getAppItmPrf();
        Row currItmRow = itmPrfVo.getCurrentRow();
        if (currItmRow.getAttribute("ItmId") != null) {
            String itmId = currItmRow.getAttribute("ItmId").toString();

            ret = Integer.parseInt(callStoredFunction(NUMBER, "APP.FN_REPLI_ITM_ORG(?,?,?,?,?)", new Object[] {
                                                      cld_id, sloc_id, hoOrgId, itmId,
                                                      this.gettransOrg1().getCurrentRow().getAttribute("TransTaxRule")
            }).toString());


            this.getAppItmOrgVO().executeQuery();
            this.getAppItmOrgVO1().executeQuery();
        }
        adfLog.info(" ret    " + ret);
        return ret;
    }

    /**
     * Container's getter for LovGlblChptr.
     * @return LovGlblChptr
     */
    public ViewObjectImpl getLovGlblChptr() {
        return (ViewObjectImpl) findViewObject("LovGlblChptr");
    }

    /**
     * Container's getter for LovTaxRuleId.
     * @return LovTaxRuleId
     */
    public ViewObjectImpl getLovTaxRuleId() {
        return (ViewObjectImpl) findViewObject("LovTaxRuleId");
    }

    /**
     * Container's getter for LovItemAttVal1.
     * @return LovItemAttVal1
     */
    public ViewObjectImpl getLovItemAttVal() {
        return (ViewObjectImpl) findViewObject("LovItemAttVal");
    }

    /**
     * Container's getter for LovItmAttType1.
     * @return LovItmAttType1
     */
    public ViewObjectImpl getLovItmAttType() {
        return (ViewObjectImpl) findViewObject("LovItmAttType");
    }

    public String filterImage() {
        String itm_id = (String) this.getAppItmPrf().getCurrentRow().getAttribute("ItmId");
        if (itm_id != null) {
            ViewObjectImpl img = this.getAppItmImg1();
            img.setNamedWhereClauseParam("BindCldIdVar", cld_id);
            img.setNamedWhereClauseParam("BindHoOrgIdVar", hoOrgId);
            img.setNamedWhereClauseParam("BindItmIdVar", itm_id);
            img.setNamedWhereClauseParam("BindSlocIdVar", sloc_id);
            img.executeQuery();
        }
        return null;
    }

    /**
     * Container's getter for AppItmImg1.
     * @return AppItmImg1
     */
    public ViewObjectImpl getAppItmImg1() {
        return (ViewObjectImpl) findViewObject("AppItmImg1");
    }

    public String resetItmAttVal() {
        this.getAppItmPrf().getCurrentRow().setAttribute("ItmAttValId", null);
        this.getAppItmPrf().getCurrentRow().setAttribute("TransItmAttId", null);
        return null;
    }

    /**
     * Container's getter for LovAppItmTaxCat1.
     * @return LovAppItmTaxCat1
     */
    public ViewObjectImpl getLovAppItmTaxCat1() {
        return (ViewObjectImpl) findViewObject("LovAppItmTaxCat1");
    }

    public boolean isDuplicateItmId(String name) {
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Object obj = callStoredFunction(Types.VARCHAR, "FN_CHK_ITM_CODE_DUP(?,?,?,?)", new Object[] {
                                        cld_id, sloc_id, hoOrgId, name
        });
        if (obj != null && obj.equals("Y")) {
            return true;
        }
        return false;
    }
}
