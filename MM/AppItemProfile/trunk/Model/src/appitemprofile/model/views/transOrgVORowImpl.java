package appitemprofile.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 22 15:16:29 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class transOrgVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
         
     private static ADFLogger adfLog=(ADFLogger)ADFLogger.createADFLogger(transOrgVORowImpl.class);
         public enum AttributesEnum {
        Dummy {
            public Object get(transOrgVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        CldId {
            public Object get(transOrgVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        HoOrgId {
            public Object get(transOrgVORowImpl obj) {
                return obj.getHoOrgId();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setHoOrgId((String)value);
            }
        }
        ,
        OrgId {
            public Object get(transOrgVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        TransTaxRule {
            public Object get(transOrgVORowImpl obj) {
                return obj.getTransTaxRule();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setTransTaxRule((Integer)value);
            }
        }
        ,
        SlocId {
            public Object get(transOrgVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        TransTacRLDesc {
            public Object get(transOrgVORowImpl obj) {
                return obj.getTransTacRLDesc();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setTransTacRLDesc((String)value);
            }
        }
        ,
        ApplyTaxRlTrans {
            public Object get(transOrgVORowImpl obj) {
                return obj.getApplyTaxRlTrans();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setApplyTaxRlTrans((String)value);
            }
        }
        ,
        ViewOrgLov1 {
            public Object get(transOrgVORowImpl obj) {
                return obj.getViewOrgLov1();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovTaxRuleIdVO {
            public Object get(transOrgVORowImpl obj) {
                return obj.getLovTaxRuleIdVO();
            }

            public void put(transOrgVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

             public abstract Object get(transOrgVORowImpl object);

             public abstract void put(transOrgVORowImpl object, Object value);

             public int index() {
                 return AttributesEnum.firstIndex() + ordinal();
             }

             public static int firstIndex() {
                 return firstIndex;
             }

             public static int count() {
                 return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
             }

             public static AttributesEnum[] staticValues() {
                 if (vals == null) {
                     vals = AttributesEnum.values();
                 }
                 return vals;
             }
         }


    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int TRANSTAXRULE = AttributesEnum.TransTaxRule.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int TRANSTACRLDESC = AttributesEnum.TransTacRLDesc.index();
    public static final int APPLYTAXRLTRANS = AttributesEnum.ApplyTaxRlTrans.index();
    public static final int VIEWORGLOV1 = AttributesEnum.ViewOrgLov1.index();
    public static final int LOVTAXRULEIDVO = AttributesEnum.LovTaxRuleIdVO.index();

    /**
     * This is the default constructor (do not remove).
     */
         public transOrgVORowImpl() {
         }

         /**
          * Gets the attribute value for the calculated attribute Dummy.
          * @return the Dummy
          */
         public String getDummy() {
             return (String) getAttributeInternal(DUMMY);
         }

         /**
          * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
          * @param value value to set the  Dummy
          */
         public void setDummy(String value) {
             setAttributeInternal(DUMMY, value);
         }

         /**
          * Gets the attribute value for the calculated attribute CldId.
          * @return the CldId
          */
         public String getCldId() {
           return (String)resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
           //  return (String) getAttributeInternal(CLDID);
         }

         /**
          * Sets <code>value</code> as the attribute value for the calculated attribute CldId.
          * @param value value to set the  CldId
          */
         public void setCldId(String value) {
             setAttributeInternal(CLDID, value);
         }

         /**
          * Gets the attribute value for the calculated attribute HoOrgId.
          * @return the HoOrgId
          */
         public String getHoOrgId() {
             adfLog.info("hoorg id is "+resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}"));
             String P_HOORGID = (String)resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
             if(P_HOORGID !=null)
               {return P_HOORGID;}
             return (String) getAttributeInternal(HOORGID);
         }

         /**
          * Sets <code>value</code> as the attribute value for the calculated attribute HoOrgId.
          * @param value value to set the  HoOrgId
          */
         public void setHoOrgId(String value) {
             setAttributeInternal(HOORGID, value);
         }

         /**
          * Gets the attribute value for the calculated attribute OrgId.
          * @return the OrgId
          */
         public String getOrgId() {
             adfLog.info("org id is "+getAttributeInternal(ORGID));
           // return (String)resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
             return (String) getAttributeInternal(ORGID);
         }

         /**
          * Sets <code>value</code> as the attribute value for the calculated attribute OrgId.
          * @param value value to set the  OrgId
          */
         public void setOrgId(String value) {
             setAttributeInternal(ORGID, value);
         }

         /**
          * Gets the attribute value for the calculated attribute TransTaxRule.
          * @return the TransTaxRule
          */
         public Integer getTransTaxRule() {
             return (Integer) getAttributeInternal(TRANSTAXRULE);
         }

         /**
          * Sets <code>value</code> as the attribute value for the calculated attribute TransTaxRule.
          * @param value value to set the  TransTaxRule
          */
         public void setTransTaxRule(Integer value) {
             setAttributeInternal(TRANSTAXRULE, value);
         }

         /**
          * Gets the attribute value for the calculated attribute SlocId.
          * @return the SlocId
          */
         public Integer getSlocId() {
              return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
             //return (Integer) getAttributeInternal(SLOCID);
         }

         /**
          * Sets <code>value</code> as the attribute value for the calculated attribute SlocId.
          * @param value value to set the  SlocId
          */
         public void setSlocId(Integer value) {
             setAttributeInternal(SLOCID, value);
         }

         /**
          * Gets the attribute value for the calculated attribute TransTacRLDesc.
          * @return the TransTacRLDesc
          */
         public String getTransTacRLDesc() {
             return (String) getAttributeInternal(TRANSTACRLDESC);
         }

         /**
          * Sets <code>value</code> as the attribute value for the calculated attribute TransTacRLDesc.
          * @param value value to set the  TransTacRLDesc
          */
         public void setTransTacRLDesc(String value) {
             setAttributeInternal(TRANSTACRLDESC, value);
         }

    /**
     * Gets the attribute value for the calculated attribute ApplyTaxRlTrans.
     * @return the ApplyTaxRlTrans
     */
    public String getApplyTaxRlTrans() {
        return (String) getAttributeInternal(APPLYTAXRLTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute ApplyTaxRlTrans.
     * @param value value to set the  ApplyTaxRlTrans
     */
    public void setApplyTaxRlTrans(String value) {
        setAttributeInternal(APPLYTAXRLTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ViewOrgLov1.
     */
         public RowSet getViewOrgLov1() {
             return (RowSet)getAttributeInternal(VIEWORGLOV1);
         }

         /**
          * Gets the view accessor <code>RowSet</code> LovTaxRuleIdVO.
          */
         public RowSet getLovTaxRuleIdVO() {
             return (RowSet)getAttributeInternal(LOVTAXRULEIDVO);
         }

         /**
          * getAttrInvokeAccessor: generated method. Do not modify.
          * @param index the index identifying the attribute
          * @param attrDef the attribute

          * @return the attribute value
          * @throws Exception
          */
         protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

         /**
          * setAttrInvokeAccessor: generated method. Do not modify.
          * @param index the index identifying the attribute
          * @param value the value to assign to the attribute
          * @param attrDef the attribute

          * @throws Exception
          */
         protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
         
         public String resolvEl(String data) {
             FacesContext fc = FacesContext.getCurrentInstance();
             Application app = fc.getApplication();
             ExpressionFactory elFactory = app.getExpressionFactory();
             ELContext elContext = fc.getELContext();
             ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
             String Message = valueExp.getValue(elContext).toString();
             return Message;
         }
     }
