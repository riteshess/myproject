package mmstockswapapp.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.Date;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;

import mmstockswapapp.model.services.common.AppModuleAM;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
//import java.util.Date;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 29 13:59:38 PST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppModuleAMImpl extends ApplicationModuleImpl //implements AppModuleAM
    implements AppModuleAM {
    /**
     * This is the default constructor (do not remove).
     */
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    Number zero = new Number(0);
    Number one = new Number(1);
    private static int NUMBER = Types.NUMERIC;
    private static int INTEGER = Types.INTEGER;
    private Integer fyid = 0;
    private static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(AppModuleAMImpl.class);

    public AppModuleAMImpl() {
    }

    public String getCldIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    }

    public Integer getSlocIdValue() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    }

    public String getHoOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    }

    public String getOrgIdValue() {
        return resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    }

    public Integer getUsrId() {
        return Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
    }

    /**
     * Container's getter for MmStkSwap1.
     * @return MmStkSwap1
     */
    public ViewObjectImpl getMmStkSwap1() {
        return (ViewObjectImpl) findViewObject("MmStkSwap1");
    }

    /**
     * Container's getter for MmStkSwapItm1.
     * @return MmStkSwapItm1
     */
    public ViewObjectImpl getMmStkSwapItm1() {
        return (ViewObjectImpl) findViewObject("MmStkSwapItm1");
    }

    /**
     * Container's getter for MmStkAdjtLot1.
     * @return MmStkAdjtLot1
     */
    public ViewObjectImpl getMmStkAdjtLot1() {
        return (ViewObjectImpl) findViewObject("MmStkAdjtLot1");
    }

    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        Row currentRow = this.getMmStkSwap1().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18536), new Integer(0)
        })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        adfLog.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdMod", getUsrId());
        currentRow.setAttribute("SwapDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdModDt", new Timestamp(System.currentTimeMillis()));
        fyid = getFYid(CldId, OrgId, ts, "A");


    }

    /**
     *
     * @param CldId
     * @param OrgId
     * @param geDate
     * @param Mode
     * @return
     */

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        adfLog.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            adfLog.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmStkSwap1();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            adfLog.info("In case mode is validation");
        }
        return fyId;
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {

            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                    // System.out.println(bindVars[z] + "z");
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                }
            }
        }
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for MmStkSwapLot1.
     * @return MmStkSwapLot1
     */
    public ViewObjectImpl getMmStkSwapLot1() {
        return (ViewObjectImpl) findViewObject("MmStkSwapLot1");
    }

    /**
     * Container's getter for MmStkSwapItm2.
     * @return MmStkSwapItm2
     */
    public ViewObjectImpl getMmStkSwapItm2() {
        return (ViewObjectImpl) findViewObject("MmStkSwapItm2");
    }

    /**
     * Container's getter for MmStkSwapToMmStkSwapItmVL1.
     * @return MmStkSwapToMmStkSwapItmVL1
     */
    public ViewLinkImpl getMmStkSwapToMmStkSwapItmVL1() {
        return (ViewLinkImpl) findViewLink("MmStkSwapToMmStkSwapItmVL1");
    }

    /**
     * Container's getter for MmStkSwapLot2.
     * @return MmStkSwapLot2
     */
    public ViewObjectImpl getMmStkSwapLot2() {
        return (ViewObjectImpl) findViewObject("MmStkSwapLot2");
    }

    /**
     * Container's getter for SwapItmToSwapItmLotVL1.
     * @return SwapItmToSwapItmLotVL1
     */
    public ViewLinkImpl getSwapItmToSwapItmLotVL1() {
        return (ViewLinkImpl) findViewLink("SwapItmToSwapItmLotVL1");
    }

    public String checkItmStk(Number stk) {
        adfLog.info("value of stk::" + stk);
        Row r = this.getMmStkSwapItm2().getCurrentRow();
        String itmid = (String) r.getAttribute("ItmId");
        String whid = (String) r.getAttribute("WhId");
        Integer fyid = (Integer) r.getAttribute("Transfyid");
        adfLog.info("Item Id:" + itmid + " " + "Whid:" + whid + "  fyid : " + fyid);
        ViewObjectImpl itmstk = this.getLovItmIdStk1();
        itmstk.setNamedWhereClauseParam("bindCldId", CldId);
        itmstk.setNamedWhereClauseParam("bindSlocId", SlocId);
        itmstk.setNamedWhereClauseParam("bindOrgId", OrgId);
        itmstk.setNamedWhereClauseParam("bindWhId", whid);
        itmstk.setNamedWhereClauseParam("bindFyId", fyid);
        itmstk.executeQuery();
        Row[] r1 = itmstk.getFilteredRows("ItmId", itmid);
        adfLog.info("r1:::" + r1.length);
        if (r1.length > 0) {
            Number avlstk = (Number) r1[0].getAttribute("AvlStk");
            adfLog.info("Value of avlstk" + avlstk);
            if (avlstk != null && stk != null) {
                if (avlstk.compareTo(stk) != -1) {
                    //this.getMmStkSwapItm2().getCurrentRow().setAttribute("ItmQtyMv", stk);
                    return "Y";
                }
            }

        }
        return "N";

    }

    /**
     * Container's getter for LovItmIdStk1.
     * @return LovItmIdStk1
     */
    public ViewObjectImpl getLovItmIdStk1() {
        return (ViewObjectImpl) findViewObject("LovItmIdStk1");
    }

    /**
     *      Method to show validation message(I,E,W)
     *      mesg:Message to display
     *      sev:Severity(I,E,W)
     *      chk:true=if resource bundle is used
     *      typFlg: 'F' for FM , 'V' for VE
     *      clientId : client id for UI component
     * */
    public void showFacesMessage(String mesg, String sev, Boolean chk, String typFlg, String clientId) {
        FacesMessage message = new FacesMessage(mesg);
        if (chk == true) {
            String msg = resolvEl("#{bundle['" + mesg + "']}");
            message = new FacesMessage(msg);
        }
        if (sev.equalsIgnoreCase("E")) {
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
        } else if (sev.equalsIgnoreCase("W")) {
            message.setSeverity(FacesMessage.SEVERITY_WARN);
        } else if (sev.equalsIgnoreCase("I")) {
            message.setSeverity(FacesMessage.SEVERITY_INFO);
        } else {
            message.setSeverity(FacesMessage.SEVERITY_INFO);
        }
        if (typFlg.equals("F")) {
            FacesContext.getCurrentInstance().addMessage(clientId, message);
        } else if (typFlg.equals("V")) {
            throw new ValidatorException(message);
        }
    }

    public String ValidateItmUom() {
        RowSetIterator itr = this.getMmStkSwapItm2().createRowSetIterator(null);
        Integer a = (Integer) itr.getRowCount();
        adfLog.info("value of a::" + a);
        if (a > 0) {
            Row r = this.getMmStkSwapItm2().getCurrentRow();

            String uom = (String) r.getAttribute("ItmUom");
            String uommv = (String) r.getAttribute("ItmUomMv");
            String itmid = (String) r.getAttribute("ItmId");
            String itmidmv = (String) r.getAttribute("ItmIdMv");
            if (uom != null) {
                if (uommv != null) {
                    if (itmid.equals(itmidmv)) {
                        showFacesMessage("Same Item cannot be swapped.", "E", false, "F", null);
                        return "N";
                    }
                    if (uom.equals(uommv))
                        return "Y";
                    else {
                        showFacesMessage("UoM of both the items should be same", "E", false, "F", null);
                        return "N";
                    }
                } else
                    return "Q";
            } else
                return "P";
        }

        return "Y";
    }


    public String genSwapNo() {
        Row cmRow = this.getMmStkSwap1().getCurrentRow();
        String docNo = null;
        Integer docType = 0;
        adfLog.info("doctype is :" + docType);
        if (cmRow.getAttribute("SwapId") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            adfLog.info("Financial  year id:::" + fyid);
            String Whid = (String) cmRow.getAttribute("WhId");
            docNo = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                                SlocId, CldId, OrgId, "MM$STK$SWAP", Whid, fyid
            });
            adfLog.info("new id    " + docNo);
            cmRow.setAttribute("SwapId", docNo);
        } else {
            docNo = cmRow.getAttribute("SwapId").toString();
        }
        return docNo;
    }

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }
    }

    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getMmStkSwap1().getCurrentRow().getAttribute("DocId").toString();

        // Integer DocNo1 = 23001;
        adfLog.info("DocNo-------" + DocNo + "  DocId----" + DocId + "  WfNo----" + WfNo + "DocNo1-----" + DocNo);
        Object obj = callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo, levelFrm,
                                        levelTo, action, remark, amount
        });
        adfLog.info("function return a value inthe txn is " + obj);
        Integer temp = Integer.parseInt(obj.toString());
        return temp;

    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getMmStkSwap1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        // Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId });
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, 0
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }


    public String setauthStat(String wfreturn) {
        adfLog.info(" in the setauthStat");
        adfLog.info("wfreturn::" + wfreturn);
        Row curr = getMmStkSwap1().getCurrentRow();
        //   String wfstat=resolvEl("#{pageFlowScope.wfReturn}");
        if ("A".equalsIgnoreCase(wfreturn)) {
            if (curr != null) {
                curr.setAttribute("AuthStat", "Y");
                curr.setAttribute("DocStat", 234);
                //curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
                //curr.setAttribute("AuthStatDt", new Timestamp(System.currentTimeMillis()));
                //adfLog.info("auth stat is "+curr.getAttribute("AuthStat")+" docStat is "+curr.getAttribute("DocStat"));

            }
        } else if ("F".equals(wfreturn)) {
            curr.setAttribute("DocStat", 233);
            //curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
        }
        return null;
    }

    /**
     * Container's getter for LovItmId1.
     * @return LovItmId1
     */
    public ViewObjectImpl getLovItmId1() {
        return (ViewObjectImpl) findViewObject("LovItmId1");
    }

    /**
     * Container's getter for LovSummStkBin1.
     * @return LovSummStkBin1
     */
    public ViewObjectImpl getLovSummStkBin1() {
        return (ViewObjectImpl) findViewObject("LovSummStkBin1");
    }

    public String checkLotBinQuantity(Number qty) {
        Row r = this.getMmStkSwapItm2().getCurrentRow();
        Number qty1 = (Number) r.getAttribute("ItmQty");
        adfLog.info("Value of qty1::" + qty1);
        if (qty1.compareTo(qty) == -1)
            return "Y";

        ViewObjectImpl lot = this.getMmStkSwapLot2();
        String itmid = (String) lot.getCurrentRow().getAttribute("ItmId");
        String binid = (String) lot.getCurrentRow().getAttribute("BinId");
        String lotid = (String) lot.getCurrentRow().getAttribute("LotId");
        String whid = (String) lot.getCurrentRow().getAttribute("WhId");
        if (qty != null) {
            ViewObjectImpl bin1 = this.getLovSummStkBin1();
            bin1.setNamedWhereClauseParam("BindCldId", getCldIdValue());
            bin1.setNamedWhereClauseParam("BindItmId", itmid);
            bin1.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
            bin1.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
            bin1.setNamedWhereClauseParam("BindWhId", whid);
            bin1.setNamedWhereClauseParam("BindLotId", lotid);
            bin1.executeQuery();


            //        String itmid=(String)lot.getCurrentRow().getAttribute("ItmId");
            //        String binid=(String)lot.getCurrentRow().getAttribute("BinId");
            //        String lotid=(String)lot.getCurrentRow().getAttribute("LotId");
            //        String whid=(String)lot.getCurrentRow().getAttribute("WhId");
            adfLog.info("ItmId:::" + itmid + " " + "binid:::" + binid + " " + "Lot id::" + lotid + " WhId::" + whid);
            if (lotid != null) {
                if (binid != null) {
                    RowQualifier rq = new RowQualifier(bin1);
                    rq.setWhereClause("CldId ='" + getCldIdValue() + "' and SlocId =" + getSlocIdValue() +
                                      " and OrgId ='" + getOrgIdValue() + "' and ItmId ='" + itmid + "' and LotId ='" +
                                      lotid + "' and BinId ='" + binid + "'");
                    Row[] rr1 = bin1.getFilteredRows(rq);
                    adfLog.info(rq.getExprStr() + "       " + rr1.length);
                    if (rr1.length > 0) {
                        Number stk = (Number) rr1[0].getAttribute("TotStk");
                        adfLog.info("Value of totstk::" + stk);
                        if (stk.compareTo(qty) == -1) {
                            return "Y";
                        }
                    }
                } else {
                    ViewObjectImpl summlot = this.getLovStkSummLot1();
                    summlot.setNamedWhereClauseParam("BindCldId", getCldIdValue());
                    summlot.setNamedWhereClauseParam("BindItmId", itmid);
                    summlot.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
                    summlot.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
                    summlot.setNamedWhereClauseParam("BindWhId", whid);
                    summlot.executeQuery();
                    RowQualifier rq = new RowQualifier(summlot);
                    rq.setWhereClause("CldId ='" + getCldIdValue() + "' and SlocId =" + getSlocIdValue() +
                                      " and OrgId ='" + getOrgIdValue() + "' and ItmId ='" + itmid + "' and LotId ='" +
                                      lotid + "'");
                    Row[] rr1 = summlot.getFilteredRows(rq);
                    adfLog.info(rq.getExprStr() + "       " + rr1.length);
                    if (rr1.length > 0) {
                        Number stk = (Number) rr1[0].getAttribute("TotStk");
                        adfLog.info("Value of totstk::" + stk);
                        if (stk.compareTo(qty) == -1)
                            return "Y";
                    }
                }

            }


            return "N";
        } else {
            return "N";
        }
    }

    public String setItmBinMvQty() {
        Row r = this.getMmStkSwapLot2().getCurrentRow();
        Number a1 = (Number) r.getAttribute("ItmQty");
        r.setAttribute("ItmQtyMv", a1);
        return null;

    }

    /**
     * Container's getter for LovStkSummLot1.
     * @return LovStkSummLot1
     */
    public ViewObjectImpl getLovStkSummLot1() {
        return (ViewObjectImpl) findViewObject("LovStkSummLot1");
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public ViewObjectImpl getTransSearch1() {
        return (ViewObjectImpl) findViewObject("TransSearch1");
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public ViewObjectImpl getSearch1() {
        return (ViewObjectImpl) findViewObject("Search1");
    }


    public void searchStockSwap() {
        adfLog.info("in the searchStockSwap");
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        // Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        adfLog.info("CldId:" + cldId + " " + "SlocId:" + slocId + " OrgId:" + orgId);
        ViewObjectImpl srchvo = this.getSearch1();
        Row curr = getTransSearch1().getCurrentRow();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);
        adfLog.info("doc state " + curr.getAttribute("TransDocStat") + " " + curr.getAttribute("TransToDt") + " " +
                    curr.getAttribute("SwapNo") + " " + curr.getAttribute("TransFromDt"));
        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", curr.getAttribute("TransDocStat"));
            srchvo.setNamedWhereClauseParam("bindTodt", curr.getAttribute("TransToDt"));
            srchvo.setNamedWhereClauseParam("binddocno", curr.getAttribute("SwapNo"));
            srchvo.setNamedWhereClauseParam("binfFrmdt", curr.getAttribute("TransFromDt"));
            srchvo.executeQuery();
        }

        srchvo.executeQuery();
    }


    public void resetStockSwap() {
        ViewObjectImpl srchvo = this.getSearch1();
        Row curr = getTransSearch1().getCurrentRow();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);

        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", null);
            srchvo.setNamedWhereClauseParam("bindTodt", null);
            srchvo.setNamedWhereClauseParam("binfFrmdt", null);
        }
        srchvo.executeQuery();
    }


    public void getSwapView(String CldId, Integer SlocId, String OrgId, String docId) {
        adfLog.info("inside view getSwapView  " + CldId + "  " + SlocId + "    " + OrgId + "  " + docId);
        ViewObjectImpl vo = this.getMmStkSwap1();
        ViewCriteria vc = vo.getViewCriteria("MmStkSwapVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("BindCldId", CldId);
        vo.setNamedWhereClauseParam("BindSlocId", SlocId);
        vo.setNamedWhereClauseParam("BindOrgId", OrgId);
        vo.setNamedWhereClauseParam("BindDocId", docId);
        vo.executeQuery();

    }

    public String updateStock() {
        adfLog.info(" in the updateStock");
        Row r = this.getMmStkSwap1().getCurrentRow();
        String whid = (String) r.getAttribute("WhId");
        String docid = (String) r.getAttribute("DocId");
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        Integer fyiid = getFYid(CldId, OrgId, ts, "A");
        Object obj = r.getAttribute("SwapDt");
        Date d = (Date) r.getAttribute("SwapDt");
        this.getDBTransaction().postChanges();
        Integer result = Integer.parseInt(callStoredFunction(INTEGER, "MM.MM_UPDT_ISSU_RCPT_SWAP(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                             CldId, SlocId, HoOrgId, OrgId, whid, docid, d, fyiid,
                                                             getUsrId()
        }).toString());
        if (result.compareTo(new Integer(1)) == 0)
            return "Y";
        return "N";
    }

    //Method to check whether Lot is auto generated or not.
    public String checkAutoLot() {
        String lot = "N";
        ViewObjectImpl prf = this.getOrgMmPrf1();
        RowQualifier rq = new RowQualifier(prf);
        rq.setWhereClause("CldId ='" + getCldIdValue() + "' and SlocId =" + getSlocIdValue() + " and OrgId ='" +
                          getOrgIdValue() + "'");
        Row[] rr1 = prf.getFilteredRows(rq);
        adfLog.info(rq.getExprStr() + "       " + rr1.length);
        if (rr1.length > 0) {
            lot = (String) rr1[0].getAttribute("AutoLotGen");
            adfLog.info("Value of AutoLotGen::" + lot);

        }
        return lot;

    }
    //Method to create a Lot No.in case of Lot No. is system generated.
    public String LotCreate() {
        adfLog.info(" in the LotCreate");
        String lotno = null;
        ViewObjectImpl item = this.getMmStkSwapItm2();
        RowSetIterator r1 = item.createRowSetIterator(null);
        while (r1.hasNext()) {
            Row r = r1.next();
            String itmid = (String) r.getAttribute("ItmIdMv");
            String docid = (String) r.getAttribute("DocId");
            String whid = (String) r.getAttribute("WhId");
            RowQualifier rq = new RowQualifier(getMmStkSwapLot1());
            rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and DocId='" +
                              docid + "' and ItmIdMv='" + itmid + "'");
            Row[] fr = getMmStkSwapLot1().getFilteredRows(rq);
            if (fr.length > 0) {
                for (Row rr : fr) {
                    if (itmid != null && whid != null) {
                        lotno = (String) (callStoredFunction(Types.VARCHAR, "MM.MM_GEN_LOT(?,?,?,?,?)", new Object[] {
                                                             CldId, SlocId, OrgId, whid, itmid
                        }));

                        if (lotno != null)
                            rr.setAttribute("LotIdMv", lotno);
                    }
                }
            }
        }
        //              Row r=this.getMmStkSwapLot2().getCurrentRow();
        //              if(r!=null)
        //              {
        //              String itmid=(String)r.getAttribute("ItmIdMv");
        //              String whid=(String)r.getAttribute("WhId");
        //              //adfLog.info("itmid::"+itmid+" "+"whid:::"+whid);
        //
        //              if(itmid!=null && whid!=null)
        //              {
        //              lotno =(String)(callStoredFunction(Types.VARCHAR, "MM.MM_GEN_LOT(?,?,?,?,?)", new Object[] {CldId,SlocId, OrgId,whid,itmid}));
        //             // adfLog.info("lot number generated::"+lotno);
        //              if(lotno!=null) {
        //                  r.setAttribute("LotIdMv", lotno);
        //                  return "Y";
        //              }
        //
        //              }
        //              }
        //              else{
        //                  showFacesMessage("Lot Quantities doesn't Allocated for all the items", "E", false, "F", null);
        //                   return "N";
        //              }
        return "Y";
    }


    /**
     * Container's getter for OrgMmPrf1.
     * @return OrgMmPrf1
     */
    public ViewObjectImpl getOrgMmPrf1() {
        return (ViewObjectImpl) findViewObject("OrgMmPrf1");
    }


    // @Override
    public Integer getFYid(String CldId, String OrgId, java.sql.Timestamp geDate, String Mode) {
        // TODO Implement this method
        return null;
    }

    public void setBinNm() {
        adfLog.info(" in the setBinNm");
        Row r = this.getMmStkSwapLot2().getCurrentRow();
        String binnm = (String) r.getAttribute("BinId");
        if (binnm != null) {
            r.setAttribute("BinIdMv", binnm);
        }

    }

    //Method to validate the quantity of all the items in stock update tab.
    public String ValidateItemQuantity() {
        ViewObjectImpl item = this.getMmStkSwapItm2();
        RowSetIterator r1 = item.createRowSetIterator(null);
        while (r1.hasNext()) {
            Number a = new Number(0);

            Row rr = (Row) r1.next();
            String itmid = (String) rr.getAttribute("ItmId");
            Number qty = (Number) rr.getAttribute("ItmQty");
            String docid = (String) rr.getAttribute("DocId");
            adfLog.info("itmid:" + itmid + "qty" + qty);
            RowQualifier rq = new RowQualifier(getMmStkSwapLot1());
            rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and DocId='" +
                              docid + "' and ItmId='" + itmid + "'");
            Row[] fr = getMmStkSwapLot1().getFilteredRows(rq);

            adfLog.info("----length " + fr.length + " " + rq.getExprStr());


            if (fr.length > 0) {
                for (int i = 0; i < fr.length; i++) {

                    Number a2 = (Number) fr[i].getAttribute("ItmQty");
                    a = a.add(a2);
                }
            }
            adfLog.info("-------qty--- " + qty + " a " + a);
            if (a.compareTo(qty) != 0) {
                return "N";
            }
        }
        return "Y";
    }

    public String ItemNameDuplicate(String itmnm) {
        Row currItm = this.getMmStkSwapItm2().getCurrentRow();
        String itmid = null;
        String Whid = (String) this.getMmStkSwap1().getCurrentRow().getAttribute("WhId");
        Integer fyId = (Integer) currItm.getAttribute("Transfyid");
        System.out.println(" fyId " + fyId);
        ViewObjectImpl stk = this.getLovItmIdStk1();
        stk.setNamedWhereClauseParam("bindCldId", CldId);
        stk.setNamedWhereClauseParam("bindOrgId", OrgId);
        stk.setNamedWhereClauseParam("bindSlocId", SlocId);
        stk.setNamedWhereClauseParam("bindWhId", Whid);
        stk.setNamedWhereClauseParam("bindFyId", fyId);
        stk.executeQuery();
        Row r1[] = stk.getFilteredRows("ItmDesc", itmnm);

        if (r1.length > 0) {
            itmid = (String) r1[0].getAttribute("ItmId");
        }

        ViewObjectImpl itm = this.getMmStkSwapItm2();
        Row r = itm.getCurrentRow();
        String docid = (String) r.getAttribute("DocId");
        // String itmid=(String)r.getAttribute("ItmId");

        RowQualifier rq = new RowQualifier(this.getMmStkSwapItm2());
        rq.setWhereClause("CldId='" + CldId + "' and SlocId=" + SlocId + " and OrgId='" + OrgId + "' and DocId='" +
                          docid + "'and ItmId='" + itmid + "'");
        Row[] fr = this.getMmStkSwapItm2().getFilteredRows(rq);

        if (fr.length > 0) {
            for (Row rr : fr) {
                if (rr != currItm)
                    return "Y";
            }
        } else
            return "N";
        return "N";
    }


    @Override
    public String ItemNameDuplicate() {
        // TODO Implement this method
        return null;
    }

    public String checkWhNm() {
        String whid = (String) this.getMmStkSwap1().getCurrentRow().getAttribute("WhId");
        adfLog.info(whid);
        if (whid == null || whid == "")
            return "Y";
        else
            return "N";
    }
    //Method to ser the Available Quantity
    public String setAvalQty(String binid) {
        adfLog.info(" in the setAvalQty");
        ViewObjectImpl lot = this.getMmStkSwapLot2();
        String itmid = (String) lot.getCurrentRow().getAttribute("ItmId");
        // String binid = (String) lot.getCurrentRow().getAttribute("BinId");
        String lotid = (String) lot.getCurrentRow().getAttribute("LotId");
        String whid = (String) lot.getCurrentRow().getAttribute("WhId");

        ViewObjectImpl bin1 = this.getLovSummStkBin1();
        bin1.setNamedWhereClauseParam("BindCldId", getCldIdValue());
        bin1.setNamedWhereClauseParam("BindItmId", itmid);
        bin1.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
        bin1.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
        bin1.setNamedWhereClauseParam("BindWhId", whid);
        bin1.setNamedWhereClauseParam("BindLotId", lotid);
        bin1.executeQuery();


        //        String itmid=(String)lot.getCurrentRow().getAttribute("ItmId");
        //        String binid=(String)lot.getCurrentRow().getAttribute("BinId");
        //        String lotid=(String)lot.getCurrentRow().getAttribute("LotId");
        //        String whid=(String)lot.getCurrentRow().getAttribute("WhId");
        adfLog.info("ItmId:::" + itmid + " " + "binid:::" + binid + " " + "Lot id::" + lotid + " WhId::" + whid);
        if (lotid != null) {
            if (binid != null) {
                RowQualifier rq = new RowQualifier(bin1);
                rq.setWhereClause("CldId ='" + getCldIdValue() + "' and SlocId =" + getSlocIdValue() + " and OrgId ='" +
                                  getOrgIdValue() + "' and ItmId ='" + itmid + "' and LotId ='" + lotid +
                                  "' and BinId ='" + binid + "'");
                Row[] rr1 = bin1.getFilteredRows(rq);
                adfLog.info(rq.getExprStr() + "       " + rr1.length);
                if (rr1.length > 0) {
                    Number stk = (Number) rr1[0].getAttribute("TotStk");
                    adfLog.info("Value of totstk::" + stk);
                    Row r = lot.getCurrentRow();
                    r.setAttribute("TransAvalQty", stk);
                }

            } else {
                ViewObjectImpl summlot = this.getLovStkSummLot1();
                summlot.setNamedWhereClauseParam("BindCldId", getCldIdValue());
                summlot.setNamedWhereClauseParam("BindItmId", itmid);
                summlot.setNamedWhereClauseParam("BindOrgId", getOrgIdValue());
                summlot.setNamedWhereClauseParam("BindSlocId", getSlocIdValue());
                summlot.setNamedWhereClauseParam("BindWhId", whid);
                summlot.executeQuery();
                RowQualifier rq = new RowQualifier(summlot);
                rq.setWhereClause("CldId ='" + getCldIdValue() + "' and SlocId =" + getSlocIdValue() + " and OrgId ='" +
                                  getOrgIdValue() + "' and ItmId ='" + itmid + "' and LotId ='" + lotid + "'");
                Row[] rr1 = summlot.getFilteredRows(rq);
                adfLog.info(rq.getExprStr() + "       " + rr1.length);
                if (rr1.length > 0) {
                    Number stk = (Number) rr1[0].getAttribute("TotStk");
                    adfLog.info("Value of totstkLott::" + stk);
                    Row r = lot.getCurrentRow();
                    r.setAttribute("TransAvalQty", stk);

                }
            }

        }
        return null;
    }

    /**
     * Container's getter for LovItmNm1.
     * @return LovItmNm1
     */
    public ViewObjectImpl getLovItmNm1() {
        return (ViewObjectImpl) findViewObject("LovItmNm1");
    }

    /**
     * Container's getter for TransSearch2.
     * @return TransSearch2
     */
    public ViewObjectImpl getTransSearch2() {
        return (ViewObjectImpl) findViewObject("TransSearch2");
    }

    public String getUsrNm(Integer usrId) {
        adfLog.info("in the GetUsrnm::" + usrId);
        ViewObjectImpl usrvo = this.getLovUserIdVO1();
        String usrname = null;
        if (usrId != null) {
            Row[] rr = usrvo.getFilteredRows("UsrId", usrId);
            if (rr.length > 0) {
                usrname = rr[0].getAttribute("UsrName").toString();
                return rr[0].getAttribute("UsrName").toString();
            }
        }

        return usrname;
        //return null;
    }

    /**
     * Container's getter for LovUserIdVO1.
     * @return LovUserIdVO1
     */
    public ViewObjectImpl getLovUserIdVO1() {
        return (ViewObjectImpl) findViewObject("LovUserIdVO1");
    }

    /**
     * Container's getter for LovItmNmView1.
     * @return LovItmNmView1
     */
    public ViewObjectImpl getLovItmNmView() {
        return (ViewObjectImpl) findViewObject("LovItmNmView");
    }

    /**
     * Container's getter for LovUomNmView1.
     * @return LovUomNmView1
     */
    public ViewObjectImpl getLovUomNmView() {
        return (ViewObjectImpl) findViewObject("LovUomNmView");
    }

    public void delUnwantedItem() {
        Row curr = this.getMmStkSwapLot2().getCurrentRow();
        adfLog.info("current row is going to remove" + curr + "current biin id is " + curr.getAttribute("BinId"));
        if (curr != null) {
            curr.remove();
        }
        this.getMmStkSwapLot2();
        /*
  String itmid = (String) lot.getCurrentRow().getAttribute("ItmId");
  String binid = (String) lot.getCurrentRow().getAttribute("BinId");
  String lotid = (String) lot.getCurrentRow().getAttribute("LotId");

  System.out.println(" geting value are "+itmid+binid+lotid);
  RowQualifier rql = new RowQualifier(lot);
  rql.setWhereClause("ItmId ='" + itmid + "' and LotId ='" +
                    lotid + "' and BinId ='" + binid + "'");
  Row[] rl = lot.getFilteredRows(rql);

  System.out.println(" lenthf rl "+rl.length+" va");
  if(rl.length>0){
      System.out.println(" rl vlue in 0 "+rl[0]);
  rl[0].remove();

    /*    Row rowl = lot.getCurrentRow();
  System.out.println("---------remove " + rowl.getAttribute("ItmId").toString()+rowl.getAttribute("LotId").toString() );
    rowl.remove(); */
        // System.out.println("remove suff");
        //} */
    }
}


