package mmstockswapapp.model.views;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmstockswapapp.model.entities.MmStkSwapLotEOImpl;
import mmstockswapapp.model.services.AppModuleAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Feb 02 17:35:27 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmStkSwapLotVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMSTKSWAPLOTEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        WhId,
        DocId,
        ItmId,
        LotId,
        BinId,
        SrNo,
        ItmQty,
        ItmIdMv,
        LotIdMv,
        BinIdMv,
        ItmQtyMv,
        TransAvalQty,
        MmStkSwapItm,
        LovStkSummLotVO1,
        LovSummStkBinVO1,
        LovStkSummBinMoveVO1;
        static AttributesEnum[] vals = null; ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int LOTID = AttributesEnum.LotId.index();
    public static final int BINID = AttributesEnum.BinId.index();
    public static final int SRNO = AttributesEnum.SrNo.index();
    public static final int ITMQTY = AttributesEnum.ItmQty.index();
    public static final int ITMIDMV = AttributesEnum.ItmIdMv.index();
    public static final int LOTIDMV = AttributesEnum.LotIdMv.index();
    public static final int BINIDMV = AttributesEnum.BinIdMv.index();
    public static final int ITMQTYMV = AttributesEnum.ItmQtyMv.index();
    public static final int TRANSAVALQTY = AttributesEnum.TransAvalQty.index();
    public static final int MMSTKSWAPITM = AttributesEnum.MmStkSwapItm.index();
    public static final int LOVSTKSUMMLOTVO1 = AttributesEnum.LovStkSummLotVO1.index();
    public static final int LOVSUMMSTKBINVO1 = AttributesEnum.LovSummStkBinVO1.index();
    public static final int LOVSTKSUMMBINMOVEVO1 = AttributesEnum.LovStkSummBinMoveVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmStkSwapLotVORowImpl() {
    }

    /**
     * Gets MmStkSwapLotEO entity object.
     * @return the MmStkSwapLotEO
     */
    public MmStkSwapLotEOImpl getMmStkSwapLotEO() {
        return (MmStkSwapLotEOImpl) getEntity(ENTITY_MMSTKSWAPLOTEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for WH_ID using the alias name WhId.
     * @return the WH_ID
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as attribute value for WH_ID using the alias name WhId.
     * @param value value to set the WH_ID
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for ITM_ID using the alias name ItmId.
     * @return the ITM_ID
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID using the alias name ItmId.
     * @param value value to set the ITM_ID
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for LOT_ID using the alias name LotId.
     * @return the LOT_ID
     */
    public String getLotId() {
        return (String) getAttributeInternal(LOTID);
    }

    /**
     * Sets <code>value</code> as attribute value for LOT_ID using the alias name LotId.
     * @param value value to set the LOT_ID
     */
    public void setLotId(String value) {
        setAttributeInternal(LOTID, value);
    }

    /**
     * Gets the attribute value for BIN_ID using the alias name BinId.
     * @return the BIN_ID
     */
    public String getBinId() {
        return (String) getAttributeInternal(BINID);
    }

    /**
     * Sets <code>value</code> as attribute value for BIN_ID using the alias name BinId.
     * @param value value to set the BIN_ID
     */
    public void setBinId(String value) {
        if (value != null) {
            setBinIdMv(value);
        }
        setAttributeInternal(BINID, value);
    }

    /**
     * Gets the attribute value for SR_NO using the alias name SrNo.
     * @return the SR_NO
     */
    public String getSrNo() {
        return (String) getAttributeInternal(SRNO);
    }

    /**
     * Sets <code>value</code> as attribute value for SR_NO using the alias name SrNo.
     * @param value value to set the SR_NO
     */
    public void setSrNo(String value) {
        setAttributeInternal(SRNO, value);
    }

    /**
     * Gets the attribute value for ITM_QTY using the alias name ItmQty.
     * @return the ITM_QTY
     */
    public Number getItmQty() {
        return (Number) getAttributeInternal(ITMQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_QTY using the alias name ItmQty.
     * @param value value to set the ITM_QTY
     */
    public void setItmQty(Number value) {
        if (value == null) {
            value = new Number(0);
        }
        setItmQtyMv(value);
        setAttributeInternal(ITMQTY, value);
    }

    /**
     * Gets the attribute value for ITM_ID_MV using the alias name ItmIdMv.
     * @return the ITM_ID_MV
     */
    public String getItmIdMv() {
        return (String) getAttributeInternal(ITMIDMV);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID_MV using the alias name ItmIdMv.
     * @param value value to set the ITM_ID_MV
     */
    public void setItmIdMv(String value) {
        setAttributeInternal(ITMIDMV, value);
    }

    /**
     * Gets the attribute value for LOT_ID_MV using the alias name LotIdMv.
     * @return the LOT_ID_MV
     */
    public String getLotIdMv() {
        return (String) getAttributeInternal(LOTIDMV);
    }

    /**
     * Sets <code>value</code> as attribute value for LOT_ID_MV using the alias name LotIdMv.
     * @param value value to set the LOT_ID_MV
     */
    public void setLotIdMv(String value) {
        setAttributeInternal(LOTIDMV, value);
    }

    /**
     * Gets the attribute value for BIN_ID_MV using the alias name BinIdMv.
     * @return the BIN_ID_MV
     */
    public String getBinIdMv() {
        return (String) getAttributeInternal(BINIDMV);
    }

    /**
     * Sets <code>value</code> as attribute value for BIN_ID_MV using the alias name BinIdMv.
     * @param value value to set the BIN_ID_MV
     */
    public void setBinIdMv(String value) {
        setAttributeInternal(BINIDMV, value);
    }

    /**
     * Gets the attribute value for ITM_QTY_MV using the alias name ItmQtyMv.
     * @return the ITM_QTY_MV
     */
    public Number getItmQtyMv() {
        return (Number) getAttributeInternal(ITMQTYMV);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_QTY_MV using the alias name ItmQtyMv.
     * @param value value to set the ITM_QTY_MV
     */
    public void setItmQtyMv(Number value) {
        setAttributeInternal(ITMQTYMV, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAvalQty.
     * @return the TransAvalQty
     */
    public Number getTransAvalQty() {
        String useBin = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}").toString();
        System.out.println("in the gettereof trans" + useBin);
        Number stk = new Number(0);
        AppModuleAMImpl am = (AppModuleAMImpl) this.getApplicationModule();
        ViewObjectImpl bin1 = am.getLovSummStkBin1();
        bin1.setNamedWhereClauseParam("BindCldId", getCldId());
        bin1.setNamedWhereClauseParam("BindItmId", getItmId());
        bin1.setNamedWhereClauseParam("BindOrgId", getOrgId());
        bin1.setNamedWhereClauseParam("BindSlocId", getSlocId());
        bin1.setNamedWhereClauseParam("BindWhId", getWhId());
        bin1.setNamedWhereClauseParam("BindLotId", getLotId());
        bin1.executeQuery();


        //        String itmid=(String)lot.getCurrentRow().getAttribute("ItmId");
        //        String binid=(String)lot.getCurrentRow().getAttribute("BinId");
        //        String lotid=(String)lot.getCurrentRow().getAttribute("LotId");
        //        String whid=(String)lot.getCurrentRow().getAttribute("WhId");
        System.out.println("ItmId:::" + getItmId() + " " + "binid:::" + getBinId() + " " + "Lot id::" + getLotId() +
                           " WhId::" + getWhId());
        if (getLotId() != null) {

            if (getBinId() != null && useBin.equalsIgnoreCase("Y") && getBinId() != "0") {

                RowQualifier rq = new RowQualifier(bin1);
                rq.setWhereClause("CldId ='" + getCldId() + "' and SlocId =" + getSlocId() + " and OrgId ='" +
                                  getOrgId() + "' and ItmId ='" + getItmId() + "' and LotId ='" + getLotId() +
                                  "' and BinId ='" + getBinId() + "'");
                Row[] rr1 = bin1.getFilteredRows(rq);

                if (rr1.length > 0) {
                    stk = (Number) rr1[0].getAttribute("TotStk");
                    System.out.println("value of stk :::" + stk);


                }
            } else {

                ViewObjectImpl summlot = am.getLovStkSummLot1();
                summlot.setNamedWhereClauseParam("BindCldId", getCldId());
                summlot.setNamedWhereClauseParam("BindItmId", getItmId());
                summlot.setNamedWhereClauseParam("BindOrgId", getOrgId());
                summlot.setNamedWhereClauseParam("BindSlocId", getSlocId());
                summlot.setNamedWhereClauseParam("BindWhId", getWhId());
                summlot.executeQuery();
                RowQualifier rq = new RowQualifier(summlot);
                rq.setWhereClause("CldId ='" + getCldId() + "' and SlocId =" + getSlocId() + " and OrgId ='" +
                                  getOrgId() + "' and ItmId ='" + getItmId() + "' and LotId ='" + getLotId() + "'");
                Row[] rr1 = summlot.getFilteredRows(rq);
                // adfLog.info(rq.getExprStr() + "       " + rr1.length);
                if (rr1.length > 0) {
                    stk = (Number) rr1[0].getAttribute("TotStk");
                    System.out.println("value of Lot::" + stk);
                }
            }
        }
        return stk;
        // return (Number) getAttributeInternal(TRANSAVALQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAvalQty.
     * @param value value to set the  TransAvalQty
     */
    public void setTransAvalQty(Number value) {
        if (value == null) {
            value = new Number(0);

        }
        setAttributeInternal(TRANSAVALQTY, value);
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Gets the associated <code>Row</code> using master-detail link MmStkSwapItm.
     */
    public Row getMmStkSwapItm() {
        return (Row) getAttributeInternal(MMSTKSWAPITM);
    }

    /**
     * Sets the master-detail link MmStkSwapItm between this object and <code>value</code>.
     */
    public void setMmStkSwapItm(Row value) {
        setAttributeInternal(MMSTKSWAPITM, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovStkSummLotVO1.
     */
    public RowSet getLovStkSummLotVO1() {
        return (RowSet) getAttributeInternal(LOVSTKSUMMLOTVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSummStkBinVO1.
     */
    public RowSet getLovSummStkBinVO1() {
        return (RowSet) getAttributeInternal(LOVSUMMSTKBINVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovStkSummBinMoveVO1.
     */
    public RowSet getLovStkSummBinMoveVO1() {
        return (RowSet) getAttributeInternal(LOVSTKSUMMBINMOVEVO1);
    }
}

