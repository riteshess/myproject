package MMProfileSetup.model.views;

import MMProfileSetup.model.services.MMProfileSetupAMImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;

import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 16 16:57:56 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrgTransVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    public enum AttributesEnum {
        Dummy {
            public Object get(OrgTransVORowImpl obj) {
                return obj.getDummy();
            }

            public void put(OrgTransVORowImpl obj, Object value) {
                obj.setDummy((String)value);
            }
        }
        ,
        OrgNameTrans {
            public Object get(OrgTransVORowImpl obj) {
                return obj.getOrgNameTrans();
            }

            public void put(OrgTransVORowImpl obj, Object value) {
                obj.setOrgNameTrans((String)value);
            }
        }
        ,
        OrgIdTrans {
            public Object get(OrgTransVORowImpl obj) {
                return obj.getOrgIdTrans();
            }

            public void put(OrgTransVORowImpl obj, Object value) {
                obj.setOrgIdTrans((String)value);
            }
        }
        ,
        OrgVO1 {
            public Object get(OrgTransVORowImpl obj) {
                return obj.getOrgVO1();
            }

            public void put(OrgTransVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(OrgTransVORowImpl object);

        public abstract void put(OrgTransVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int ORGNAMETRANS = AttributesEnum.OrgNameTrans.index();
    public static final int ORGIDTRANS = AttributesEnum.OrgIdTrans.index();
    public static final int ORGVO1 = AttributesEnum.OrgVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrgTransVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute Dummy.
     * @param value value to set the  Dummy
     */
    public void setDummy(String value) {
        setAttributeInternal(DUMMY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgNameTrans.
     * @return the OrgNameTrans
     */
     public Object resolvElDC(String data) {
                     FacesContext fc = FacesContext.getCurrentInstance();
                     Application app = fc.getApplication();
                     ExpressionFactory elFactory = app.getExpressionFactory();
                     ELContext elContext = fc.getELContext();
                     ValueExpression valueExp =
                             elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
                     return valueExp.getValue(elContext);
             }
    public String resolvEl(String data) {
             FacesContext fc = FacesContext.getCurrentInstance();
             Application app = fc.getApplication();
             ExpressionFactory elFactory = app.getExpressionFactory();
             ELContext elContext = fc.getELContext();
             ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
             String msg = valueExp.getValue(elContext).toString();
             return msg;
         }

    public String getOrgNameTrans() {
        System.out.println("orgid id is from glbl param is ==="+resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        MMProfileSetupAMImpl am=(MMProfileSetupAMImpl)resolvElDC("MMProfileSetupAMDataControl");
        ViewObjectImpl org1=am.getOrg1();
        Row rw[]=org1.getFilteredRows("OrgId", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
            if(rw.length>0) {
              rw[0].getAttribute("OrgDesc") ;
              System.out.println("org name from global param is===="+rw[0].getAttribute("OrgDesc"));
              return rw[0].getAttribute("OrgDesc").toString() ;
            }
            else
            {
        return (String) getAttributeInternal(ORGNAMETRANS);
            }
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgNameTrans.
     * @param value value to set the  OrgNameTrans
     */
    public void setOrgNameTrans(String value) {
        setAttributeInternal(ORGNAMETRANS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgIdTrans.
     * @return the OrgIdTrans
     */
    public String getOrgIdTrans() {
        return (String) getAttributeInternal(ORGIDTRANS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute OrgIdTrans.
     * @param value value to set the  OrgIdTrans
     */
    public void setOrgIdTrans(String value) {
        setAttributeInternal(ORGIDTRANS, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> OrgVO1.
     */
    public RowSet getOrgVO1() {
        return (RowSet)getAttributeInternal(ORGVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}
