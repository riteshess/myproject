package MMProfileSetup.model.services;

import MMProfileSetup.model.services.common.MMProfileSetupAM;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 23 11:09:11 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMProfileSetupAMImpl extends ApplicationModuleImpl implements MMProfileSetupAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MMProfileSetupAMImpl() {
    }

    /**
     * Container's getter for Org1.
     * @return Org1
     */
    public ViewObjectImpl getOrg1() {
        return (ViewObjectImpl) findViewObject("Org1");
    }

    /**
     * Container's getter for OrgMmPrf1.
     * @return OrgMmPrf1
     */
    public ViewObjectImpl getOrgMmPrf1() {
        return (ViewObjectImpl) findViewObject("OrgMmPrf1");
    }

    /**
     * Container's getter for AppGlblMMPrf1.
     * @return AppGlblMMPrf1
     */
    public ViewObjectImpl getAppGlblMMPrf1() {
        return (ViewObjectImpl) findViewObject("AppGlblMMPrf1");
    }


    public void getItemForHomePage(String CldId, Integer SlocId, String OrgId) {

        String glbl_Ho_Org_ID = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl orgPrfVO = this.getOrgMmPrf1();
        // ViewCriteria orgPrfVC = orgPrfVO.getViewCriteria("OrgMmPrfVOCriteria");
        // orgPrfVO.applyViewCriteria(orgPrfVC);

        orgPrfVO.setNamedWhereClauseParam("CldIdBind", CldId);
        orgPrfVO.setNamedWhereClauseParam("SlocIdBind", SlocId);
        orgPrfVO.setNamedWhereClauseParam("OrgIdBind", OrgId);
        orgPrfVO.executeQuery();
        System.out.println("total no of rows in orgmmprf vo is ====" + orgPrfVO.getRowCount());

        ViewObjectImpl orgVo = this.getOrg1();
        orgVo.setNamedWhereClauseParam("HoOrgIdBind", OrgId);
        orgVo.setNamedWhereClauseParam("BindCldId", CldId);
        orgVo.executeQuery();

    }

    public void getViewDetail() {

        ViewObjectImpl orgPrfVO = this.getOrgMmPrf2();
        orgPrfVO.setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        orgPrfVO.setNamedWhereClauseParam("SlocIdBind",
                                          Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}")));
        orgPrfVO.setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        orgPrfVO.executeQuery();
        System.out.println("total no of rows in orgmmprf vo is ====" + orgPrfVO.getRowCount());

        ViewObjectImpl orgVo = this.getOrg1();
        orgVo.setNamedWhereClauseParam("HoOrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        orgVo.setNamedWhereClauseParam("BindCldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        orgVo.executeQuery();
    }

    public String curOrgid() {
        String orgId = (String) getOrg1().getCurrentRow().getAttribute("OrgId");
        Row[] r1 = getOrgMmPrf2().getFilteredRows("OrgId", orgId);
        return orgId;
    }

    public void glblMMPfrValue() {
        String glbl_OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String glbl_CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer glbl_SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String glbl_HoOrggId = callStoredFunction(Types.VARCHAR, "FN_INS_ORG_MM_PRF(?,?,?)", new Object[] {
                                                  glbl_CldId, glbl_SlocId, glbl_OrgId
        }).toString();
        // Date createDT = (Date)row.getAttribute("UsrIdCreateDt");
        /*ViewObjectImpl orgMMPrf = this.getOrgMmPrf2();
        orgMMPrf.setNamedWhereClauseParam("CldIdBind", glbl_CldId);
        orgMMPrf.setNamedWhereClauseParam("OrgIdBind", glbl_HoOrggId);
        orgMMPrf.setNamedWhereClauseParam("SlocIdBind", glbl_SlocId);
        orgMMPrf.executeQuery();
        System.out.println("-----"+orgMMPrf.getEstimatedRowCount());
        if(orgMMPrf.getEstimatedRowCount()>0) {
        if(glbl_HoOrggId.equals(glbl_OrgId)) {
            System.out.println("both ho and org are equal");
            //return "Y";
        }
        else{
            System.out.println("both ho and org are not equal");
           // return "N";
        }
            System.out.println("profile wiill be created for thod ho");
        }
        else {
            System.out.println("profile will not be created for thsis ho");
        }
       // return null;
       // String glbl_HoOrggId=callStoredFunction(Types.VARCHAR, "MM.MM_GET_HO_ORG(?,?,?)", new Object[] { glbl_CldId,glbl_SlocId,glbl_OrgId}).toString();
        //System.out.println("ho orgg id of the current org is ===="+glbl_HoOrggId);
       // Date createDT = (Date)row.getAttribute("UsrIdCreateDt");
        //ViewObjectImpl orgMMPrf = this.getOrgMmPrf2();

         String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");//(String)getOrg1().getCurrentRow().getAttribute("OrgId");
         String glbl_cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
         Integer glbl_sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
         Row[] r = getAppGlblMMPrf1().getAllRowsInRange();
          System.out.println("--------ho and org id both are equals--------");

         for(Row rw:r){
             Row rw1 = orgMMPrf.createRow();
             rw1.setAttribute("CldId",glbl_cld_id);
             rw1.setAttribute("SlocId",glbl_sloc_id);
             rw1.setAttribute("OrgId", orgId);
             rw1.setAttribute("UseWh",rw.getAttribute("UseWh"));
             //rw1.setAttribute("ApplyPriceFrmPolicy", rw.getAttribute("ApplyPriceFrmPolicy"));
             //rw1.setAttribute("CrtProvVouOnRcpt", rw.getAttribute("CrtProvVouOnRcpt"));
             //rw1.setAttribute("FreezeTxnOnStkTk", rw.getAttribute("FreezeTxnOnStkTk"));
             rw1.setAttribute("UseBin",rw.getAttribute("UseBin"));
             rw1.setAttribute("UseWh",rw.getAttribute("UseWh"));
             rw1.setAttribute("UseQc",rw.getAttribute("UseQc"));
             rw1.setAttribute("AutoQc",rw.getAttribute("AutoQc"));
             rw1.setAttribute("AutoItmId",rw.getAttribute("AutoItmId"));
             rw1.setAttribute("AutoAbcAna",rw.getAttribute("AutoAbcAna"));
             rw1.setAttribute("ValMethdOrgLvl",rw.getAttribute("ValMethdOrgLvl"));
             rw1.setAttribute("OrgValMethd",rw.getAttribute("OrgValMethd"));

             rw1.setAttribute("IssuToCostCentre",rw.getAttribute("IssuToCostCentre"));
             rw1.setAttribute("PickOrder",rw.getAttribute("PickOrder"));

             rw1.setAttribute("UseGateEntry",rw.getAttribute("UseGateEntry"));
             rw1.setAttribute("AlwRcptWoPo",rw.getAttribute("AlwRcptWoPo"));
             rw1.setAttribute("AlwDirectConsm",rw.getAttribute("AlwDirectConsm"));
             rw1.setAttribute("AutoConsmBkMethd",rw.getAttribute("AutoConsmBkMethd"));
             rw1.setAttribute("ChkRejAlwd",rw.getAttribute("ChkRejAlwd"));
             rw1.setAttribute("ChkExpDt",rw.getAttribute("ChkExpDt"));
             rw1.setAttribute("ChkBillingBasis",rw.getAttribute("ChkBillingBasis"));
             rw1.setAttribute("ChkDlvQtyTlrnc",rw.getAttribute("ChkDlvQtyTlrnc"));
             rw1.setAttribute("ChkDlvSchdlTlrnc",rw.getAttribute("ChkDlvSchdlTlrnc"));
             rw1.setAttribute("GenLotWhLvl",rw.getAttribute("GenLotWhLvl"));
             rw1.setAttribute("AutoLotGen",rw.getAttribute("AutoLotGen"));
             rw1.setAttribute("AutoSrlNo",rw.getAttribute("AutoSrlNo"));
             rw1.setAttribute("ResvAgainstMrs", rw.getAttribute("ResvAgainstMrs"));
            orgMMPrf.insertRow(rw1);
             orgMMPrf.executeQuery();
         }*/


    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for PickOrder1.
     * @return PickOrder1
     */
    public ViewObjectImpl getPickOrder1() {
        return (ViewObjectImpl) findViewObject("PickOrder1");
    }

    /**
     * Container's getter for OrgValMethd1.
     * @return OrgValMethd1
     */
    public ViewObjectImpl getOrgValMethd1() {
        return (ViewObjectImpl) findViewObject("OrgValMethd1");
    }

    /**
     * Container's getter for LovCoaCrDr.
     * @return LovCoaCrDr
     */
    public ViewObjectImpl getLovCoaCrDr() {
        return (ViewObjectImpl) findViewObject("LovCoaCrDr");
    }

    /**
     * Container's getter for OrgTransVO1.
     * @return OrgTransVO1
     */
    public ViewObjectImpl getOrgTransVO1() {
        return (ViewObjectImpl) findViewObject("OrgTransVO1");
    }

    /**
     * Container's getter for OrgMmPrf2.
     * @return OrgMmPrf2
     */
    public ViewObjectImpl getOrgMmPrf2() {
        return (ViewObjectImpl) findViewObject("OrgMmPrf2");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }
    }

    public Integer checkHoProfile() {
        String glbl_OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String glbl_CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer glbl_SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        System.out.println("Parameters enterd in function=" + glbl_CldId + " " + glbl_SlocId + " " + glbl_OrgId);
        Integer glbl_HoOrggId = (Integer) callStoredFunction(Types.INTEGER, "APP.FN_INS_ORG_MM_PRF(?,?,?)", new Object[] {
                                                             glbl_CldId, glbl_SlocId, glbl_OrgId
        });
        this.getOrgMmPrf2().executeQuery();
        return glbl_HoOrggId;
    }

    public String getHoName() {
        String glbl_OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String glbl_CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer glbl_SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String glbl_HoOrggId = callStoredFunction(Types.VARCHAR, "MM.MM_GET_HO_ORG(?,?,?)", new Object[] {
                                                  glbl_CldId, glbl_SlocId, glbl_OrgId
        }).toString();
        ViewObjectImpl orgVo = this.getHoNmVO1();
        orgVo.setNamedWhereClauseParam("BindCldId", glbl_CldId);
        orgVo.executeQuery();
        Row[] rw = orgVo.getFilteredRows("OrgId", glbl_HoOrggId);
        if (rw.length > 0) {
            String honame = rw[0].getAttribute("OrgDesc").toString();
            return honame;
        } else {
            return "";
        }

    }

    public String getHoOrgId() {
        String glbl_OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String glbl_CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer glbl_SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        String glbl_HoOrggId = callStoredFunction(Types.VARCHAR, "MM.MM_GET_HO_ORG(?,?,?)", new Object[] {
                                                  glbl_CldId, glbl_SlocId, glbl_OrgId
        }).toString();


        String freez = (callStoredFunction(Types.VARCHAR, "MM.mm_chk_org_prf(?,?,?,?)", new Object[] {
                                           glbl_CldId, glbl_SlocId, glbl_HoOrggId, "FREEZ_PRF"
        }).toString());

        if (glbl_OrgId.equals(glbl_HoOrggId)) {
            if ("Y".equalsIgnoreCase(freez)) {
                return "Y";
            } else {
                return "N";
            }
        } else {
            return "Y";
        }


    }

    /**
     * Container's getter for HoNmVO1.
     * @return HoNmVO1
     */
    public ViewObjectImpl getHoNmVO1() {
        return (ViewObjectImpl) findViewObject("HoNmVO1");
    }

    public void delAction() {
        ViewObjectImpl delvo = this.getOrgMmPrf2();
        delvo.getCurrentRow().remove();
        delvo.executeQuery();
    }

    /**
     * Container's getter for LovCoaFortuneVO.
     * @return LovCoaFortuneVO
     */
    public ViewObjectImpl getLovCoaFortuneVO() {
        return (ViewObjectImpl) findViewObject("LovCoaFortuneVO");
    }

    /**
     * Container's getter for LovSelectedCharacter1.
     * @return LovSelectedCharacter1
     */
    public ViewObjectImpl getLovSelectedCharacter1() {
        return (ViewObjectImpl) findViewObject("LovSelectedCharacter1");
    }

    /**
     * Container's getter for LovSrNoDigit1.
     * @return LovSrNoDigit1
     */
    public ViewObjectImpl getLovSrNoDigit1() {
        return (ViewObjectImpl) findViewObject("LovSrNoDigit1");
    }

    /**
     * Container's getter for AppDsAtt1.
     * @return AppDsAtt1
     */
    public ViewObjectImpl getAppDsAtt1() {
        return (ViewObjectImpl) findViewObject("AppDsAtt1");
    }
}
