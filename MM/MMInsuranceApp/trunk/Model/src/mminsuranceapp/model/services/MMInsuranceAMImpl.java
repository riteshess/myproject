package mminsuranceapp.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mminsuranceapp.model.services.common.MMInsuranceAM;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 14 11:43:01 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMInsuranceAMImpl extends ApplicationModuleImpl implements MMInsuranceAM {
    /**
     * This is the default constructor (do not remove).
     */
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    private static int NUMBER = Types.NUMERIC;
    private static int INTEGER = Types.INTEGER;
    public static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MMInsuranceAMImpl.class);
    private Integer fyid = null;
    //private static int NUMBER = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    public MMInsuranceAMImpl() {
    }

    /**
     * Container's getter for MmIpoInsFlx1.
     * @return MmIpoInsFlx1
     */
    public ViewObjectImpl getMmIpoInsFlx1() {
        return (ViewObjectImpl) findViewObject("MmIpoInsFlx1");
    }

    /**
     * Container's getter for MmIpoIns1.
     * @return MmIpoIns1
     */
    public ViewObjectImpl getMmIpoIns1() {
        return (ViewObjectImpl) findViewObject("MmIpoIns1");
    }
//Method is used to set docid for newly created document.
    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        adfLog.info(" Txn");
        Row currentRow = this.getMmIpoIns1().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18540), new Integer(0)
        }));
        adfLog.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdModDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("DocStat", new Integer(820));

        fyid = getFYid(CldId, OrgId, ts, "A");


    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

//Method is  used to get the financial Year id.
    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        adfLog.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            adfLog.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmIpoIns1();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            adfLog.info("In case mode is validation");
        }
        return fyId;
    }

//Method is used insert the flexi field entry into the MM$IPO$INS$FLX
    public String getFlexiFieldFilter() {
        ViewObjectImpl shpflex = this.getMmIpoInsFlx2();
        ViewObjectImpl flex = this.getAppFlxFld1();
        flex.setNamedWhereClauseParam("bindCldId", CldId);
        flex.setNamedWhereClauseParam("bindDocId", 18540);
        flex.executeQuery();

        Integer count = flex.getRowCount();
        adfLog.info("no of field ::" + count);
        adfLog.info("current row is " + this.getMmIpoIns1().getCurrentRow());
        //  RowSetIterator rr = flex.createRowSetIterator(null);
        Row[] rr = flex.getFilteredRows("DocId", new Number(18540));

        if (rr.length > 0) {
            for (Row r : rr) {
                adfLog.info("total no. of rows found " + r.getAttribute("FldId"));
                Row r1 = shpflex.createRow();
                r1.setAttribute("FldId", r.getAttribute("FldId"));
                shpflex.insertRow(r);
            }
        }
        shpflex.executeQuery();

        /* while (rr.hasNext()) {
            Row r1 = rr.next();
            String fldid = (String) r1.getAttribute("FldId");
            Row r = shpflex.createRow();
            /*    r.setAttribute("CldId", EbizParams.GLBL_APP_CLD_ID());
            r.setAttribute("SlocId", EbizParams.GLBL_APP_SERV_LOC());
            r.setAttribute("OrgId", EbizParams.GLBL_APP_SERV_LOC());
            r.setAttribute("DocId", this.getMmShpAdvc1().getCurrentRow().getAttribute("DocId"));

            r.setAttribute("FldId", fldid);
            shpflex.insertRow(r);

        }
        rr.closeRowSetIterator();
         */
        // this.getDBTransaction().postChanges();


        adfLog.info("count111::" + shpflex.getRowCount());
        return null;
    }

    /**
     * Container's getter for MmIpoInsFlx2.
     * @return MmIpoInsFlx2
     */
    public ViewObjectImpl getMmIpoInsFlx2() {
        return (ViewObjectImpl) findViewObject("MmIpoInsFlx2");
    }

    /**
     * Container's getter for MMIpoInsToMMIpoInsFlxVL1.
     * @return MMIpoInsToMMIpoInsFlxVL1
     */
    public ViewLinkImpl getMMIpoInsToMMIpoInsFlxVL1() {
        return (ViewLinkImpl) findViewLink("MMIpoInsToMMIpoInsFlxVL1");
    }

    /**
     * Container's getter for AppFlxFld1.
     * @return AppFlxFld1
     */
    public ViewObjectImpl getAppFlxFld1() {
        return (ViewObjectImpl) findViewObject("AppFlxFld1");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;

    }
//Method is used to generate the Insurance Number.
    public String genInsNo() {
        Row cmRow = this.getMmIpoIns1().getCurrentRow();
        String docNo = null;
        Integer docType = 0;
        adfLog.info("doctype is :" + docType);
        if (cmRow.getAttribute("InsNo") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            adfLog.info("Financial  year id:::" + fyid);
            docNo = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                                SlocId, CldId, OrgId, "MM$IPO$INS", null, fyid
            });
            adfLog.info("new id    " + docNo);
            cmRow.setAttribute("InsNo", docNo);
        } else {
            docNo = cmRow.getAttribute("InsNo").toString();
        }
        return docNo;
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public ViewObjectImpl getTransSearch1() {
        return (ViewObjectImpl) findViewObject("TransSearch1");
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public ViewObjectImpl getSearch1() {
        return (ViewObjectImpl) findViewObject("Search1");
    }

//Method is used to reset the field in search panel on search Page.
    public void resetINS() {
        ViewObjectImpl srchvo = this.getSearch1();
        Row curr = getTransSearch1().getCurrentRow();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);

        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", null);
            srchvo.setNamedWhereClauseParam("bindTodt", null);
            srchvo.setNamedWhereClauseParam("binfFrmdt", null);
        }
        srchvo.executeQuery();
    }
//Method is used for searching the record on Search Page.
    public void searchINS() {
        adfLog.info("in the searchIdf");
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        // Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        adfLog.info("CldId:" + cldId + " " + "SlocId:" + slocId + " OrgId:" + orgId);
        ViewObjectImpl srchvo = this.getSearch1();
        Row curr = getTransSearch1().getCurrentRow();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);
        adfLog.info("doc state " + curr.getAttribute("TransDocStat") + " " + curr.getAttribute("TransToDt"));
        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", curr.getAttribute("TransDocStat"));
            srchvo.setNamedWhereClauseParam("bindTodt", curr.getAttribute("TransToDt"));
            srchvo.setNamedWhereClauseParam("binddocno", curr.getAttribute("InsNo"));
            srchvo.setNamedWhereClauseParam("binfFrmdt", curr.getAttribute("TransFrmDt"));
            srchvo.executeQuery();
        }

        srchvo.executeQuery();
    }
//Method is used to filter the record while edit the Insurance record.
    public void getInsView(String CldId, Integer SlocId, String OrgId, String docId) {
        adfLog.info("inside view getIdfView  " + CldId + "  " + SlocId + "    " + OrgId + "  " + docId);
        ViewObjectImpl vo = this.getMmIpoIns1();
        ViewCriteria vc = vo.getViewCriteria("MmIpoInsVOCriteria"); 
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("BindCldId", CldId);
        vo.setNamedWhereClauseParam("BindSlocId", SlocId);
        vo.setNamedWhereClauseParam("BindOrgId", OrgId);
        vo.setNamedWhereClauseParam("BindDocId", docId);
        vo.executeQuery();

    }

    /**
     * Container's getter for LovEoIdIns1.
     * @return LovEoIdIns1
     */
    public ViewObjectImpl getLovEoIdIns1() {
        return (ViewObjectImpl) findViewObject("LovEoIdIns1");
    }

    /**
     * Container's getter for LovFileNo1.
     * @return LovFileNo1
     */
    public ViewObjectImpl getLovFileNo1() {
        return (ViewObjectImpl) findViewObject("LovFileNo1");
    }

    /**
     * Container's getter for LovBankNm1.
     * @return LovBankNm1
     */
    public ViewObjectImpl getLovBankNm1() {
        return (ViewObjectImpl) findViewObject("LovBankNm1");
    }
// Method is used to get the get WorkFlow Id.
    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        try {
            adfLog.info("in the getWfNo");
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }

//Method is used to find out document pending at user
    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getMmIpoIns1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        // Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId });
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, 0
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }

//Method used to get the user level in the Work Flow.
    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getMmIpoIns1().getCurrentRow().getAttribute("DocId").toString();

        // Integer DocNo1 = 23001;
        adfLog.info("DocNo-------" + DocNo + "  DocId----" + DocId + "  WfNo----" + WfNo + "DocNo1-----" + DocNo);
        Object obj = callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo, levelFrm,
                                        levelTo, action, remark, amount
        });
        adfLog.info("function return a value inthe txn is " + obj);
        Integer temp = Integer.parseInt(obj.toString());
        return temp;

    }

    public String getUsrNm(Integer usrId) {
        //        ViewObjectImpl usrvo = this.getLovUsrId1();
        //        String usrname = null;
        //        if (usrId != null) {
        //            Row[] rr = usrvo.getFilteredRows("UsrId", usrId);
        //            if (rr.length > 0) {
        //                usrname = rr[0].getAttribute("UsrName").toString();
        //                return rr[0].getAttribute("UsrName").toString();
        //            }
        //        }

        //        return usrname;
        return null;
    }
//Method used to set the Status while Return from WorkFlow Application.
    public String setauthStat(String wfreturn) {
        Row curr = getMmIpoIns1().getCurrentRow();
        adfLog.info("value of wfreturn:::" + wfreturn);
        //   String wfstat=resolvEl("#{pageFlowScope.wfReturn}");
        if ("A".equalsIgnoreCase(wfreturn)) {
            if (curr != null) {
                curr.setAttribute("AuthStat", "Y");
                curr.setAttribute("DocStat", 822);
                //curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
                //curr.setAttribute("AuthStatDt", new Timestamp(System.currentTimeMillis()));
                //adfLog.info("auth stat is "+curr.getAttribute("AuthStat")+" docStat is "+curr.getAttribute("DocStat"));
            }
        } else if ("F".equals(wfreturn)) {
            curr.setAttribute("DocStat", 821);
            //curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
        }
        return null;
    }
//Method is used to validate whether the Source Port or Destination Port are not same.
    public String checkSourceDest() {
        if (this.getMmIpoIns1().getCurrentRow().getAttribute("PortIdFm") != null &&
            this.getMmIpoIns1().getCurrentRow().getAttribute("PortIdTo") != null) {

            String prtFrom = (String) this.getMmIpoIns1().getCurrentRow().getAttribute("PortIdFm");
            String PortIdTo = (String) this.getMmIpoIns1().getCurrentRow().getAttribute("PortIdTo");
            adfLog.info("Destination port " + PortIdTo);

            if (prtFrom.equals(PortIdTo)) {
                return "Y";
            }
        }

        return "N";
    }

    /**
     * Container's getter for LovFileVwNoVO1.
     * @return LovFileVwNoVO1
     */
    public ViewObjectImpl getLovFileVwNoVO1() {
        return (ViewObjectImpl) findViewObject("LovFileVwNoVO1");
    }
    //Method is used to set the different amount fields according to the PO Number and Delivery Schedule Number.
    public String setAmtValFld() {
        ViewObjectImpl  ins=this.getMmIpoIns1();
        Row rr=ins.getCurrentRow();
        String docidpo=(String)rr.getAttribute("DocIdPo");
        Integer dlvschdl=(Integer)rr.getAttribute("DlvSchdlNo");
        adfLog.info("docid::"+docidpo+" dlvschdl::"+dlvschdl);
        Number bg= callStoredFunction("MM.PROC_MM_GET_IPO_VAL(?,?,?,?,?,?,?,?)", new Object[] {CldId,SlocId,OrgId,docidpo,dlvschdl});
        adfLog.info("procedure return ::"+bg);
        return null;
        
    }
    
    
    
    protected Number callStoredFunction(String stmt, Object[] bindVars) {
        //used to get best price
        adfLog.info("CallStoredFunction  is to be called");
        CallableStatement st = null;
        try {
            /** 1. Create a JDBC CallabledStatement */
           
            st = this.getDBTransaction().createCallableStatement("begin " + stmt + ";end;", 0);
            /** 2. Register the first bind variable for the return value. and last 2 variable for output variable of function. */
            st.setObject(1, bindVars[0]);
            st.setObject(2, bindVars[1]);
            st.setObject(3, bindVars[2]);
            st.setObject(4, bindVars[3]);
            st.setObject(5, bindVars[4]);
            st.registerOutParameter(6, NUMBER);
            st.registerOutParameter(7, NUMBER);
            st.registerOutParameter(8, NUMBER);
            /** 5. Set the value of user-supplied bind vars in the stmt */
            st.executeUpdate();
        Number bb=new Number(0);
            try {
               
                
//                    if(st.getObject(5)!=null){
//                        bb=(BigDecimal)st.getObject(5);
//                    }
                
               
              /*   setBestPrice((BigDecimal)st.getObject(4));
                setSuppNmbest((st.getObject(5).toString()));
                setDatebest(st.getObject(6).toString()); */
                 ViewObjectImpl  ins=this.getMmIpoIns1();
                 Row rr=ins.getCurrentRow();
                adfLog.info("Fobval::"+st.getObject(6)+"OcAmtbs:"+st.getObject(7)+"frtVal:"+st.getObject(8));
                rr.setAttribute("FobValBs",st.getObject(6));
                rr.setAttribute("OcAmtBs",st.getObject(7));
                rr.setAttribute("FrtValBs",st.getObject(8));
                
            } catch (NullPointerException e) {
                System.out.println(e);
                e.printStackTrace();
            }
            return bb;
        } catch (SQLException e) {
            int end = e.getMessage().indexOf("\n");

            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    /** 7. Close the statement */
                    st.close();
                } catch (SQLException e) {

                }
            }
        }
    }

    /**
     * Container's getter for AppFlxFldVO1.
     * @return AppFlxFldVO1
     */
    public ViewObjectImpl getAppFlxFldVO1() {
        return (ViewObjectImpl) findViewObject("AppFlxFldVO1");
    }

    /**
     * Container's getter for LovEoNmDips1.
     * @return LovEoNmDips1
     */
    public ViewObjectImpl getLovEoNmDips1() {
        return (ViewObjectImpl) findViewObject("LovEoNmDips1");
    }
}

