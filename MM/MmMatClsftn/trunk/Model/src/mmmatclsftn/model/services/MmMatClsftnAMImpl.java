package mmmatclsftn.model.services;

import adf.utils.bean.ADFBeanUtils;
import adf.utils.model.ADFModelUtils;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Timestamp;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import javax.faces.event.ActionEvent;

import mmmatclsftn.model.services.common.MmMatClsftnAM;
import mmmatclsftn.model.views.MmGlblInvClsVOImpl;
import mmmatclsftn.model.views.MmInvAnaItmVORowImpl;

import mmmatclsftn.model.views.MmInvAnaVOImpl;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;


import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.NUMBER;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 05 11:51:52 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMatClsftnAMImpl extends ApplicationModuleImpl {
    private static int NUMBER = Types.INTEGER;

    /**
     * This is the default constructor (do not remove).
     */
    public MmMatClsftnAMImpl() {
    }

    /**
     * Container's getter for MmInvAna1.
     * @return MmInvAna1
     */
    public MmInvAnaVOImpl getMmInvAna1() {
        return (MmInvAnaVOImpl) findViewObject("MmInvAna1");
    }

    /**
     * Container's getter for MmInvAna2.
     * @return MmInvAna2
     */
    public MmInvAnaVOImpl getMmInvAna2() {
        return (MmInvAnaVOImpl) findViewObject("MmInvAna2");
    }

    /**
     * Container's getter for MmInvAnaItm1.
     * @return MmInvAnaItm1
     */
    public ViewObjectImpl getMmInvAnaItm1() {
        return (ViewObjectImpl) findViewObject("MmInvAnaItm1");
    }

    /**
     * Container's getter for MmInvAnatoItmVL2.
     * @return MmInvAnatoItmVL2
     */
    public ViewLinkImpl getMmInvAnatoItmVL2() {
        return (ViewLinkImpl) findViewLink("MmInvAnatoItmVL2");
    }

    /**
     * Container's getter for ItemDesc1.
     * @return ItemDesc1
     */
    public ViewObjectImpl getItemDesc1() {
        return (ViewObjectImpl) findViewObject("ItemDesc1");
    }
    String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String ho_org_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

   
   

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }

    public static void setNUMBER(int NUMBER) {
        MmMatClsftnAMImpl.NUMBER = NUMBER;
    }

    public static int getNUMBER() {
        return NUMBER;
    }

    public void setCld_id(String cld_id) {
        this.cld_id = cld_id;
    }

    public String getCld_id() {
        return cld_id;
    }

    public void setSloc_id(Integer sloc_id) {
        this.sloc_id = sloc_id;
    }

    public Integer getSloc_id() {
        return sloc_id;
    }

    public void setOrg_id(String org_id) {
        this.org_id = org_id;
    }

    public String getOrg_id() {
        return org_id;
    }

    public void setHo_org_id(String ho_org_id) {
        this.ho_org_id = ho_org_id;
    }

    public String getHo_org_id() {
        return ho_org_id;
    }

    //    public void manualAnaMethod() {
    //
    //    }
    public void insertItems() {
        System.out.println("insert items amimp");
        ViewObject vo = this.getMmInvAnaItm1();
        ViewObject voo = this.getMmInvAna2();
        Object cls_type_id = voo.getCurrentRow().getAttribute("ClsTypeId");
        System.out.println("cls type id forfilter :::::::" + cls_type_id);
//        Integer anaVal=Integer.parseInt(voo.getCurrentRow().getAttribute("TransAnaVal").toString());               
//        System.out.println("ana val that need to be entered is!!!!!!!!!!!" +anaVal);
        Object item_id = voo.getCurrentRow().getAttribute("TransItemId");
        System.out.println("Trans item id is"+item_id);
        Object itmName=voo.getCurrentRow().getAttribute("TransItemName");
        System.out.println("trans item name is" +itmName);
//        System.out.println("item name in inser item method is"+itmName);
        System.out.println("-----------Item id is--------"+item_id);
        Object cls=voo.getCurrentRow().getAttribute("TransCls");
        
        if(item_id==null) {
            String s=ADFModelUtils.resolvRsrc("MSG.2894");            
//            String s="Selection of Item is mandatory!!";
            FacesMessage msg=new FacesMessage(s);
            msg.setSeverity(FacesMessage.SEVERITY_FATAL);
            FacesContext fctx=FacesContext.getCurrentInstance();
            fctx.addMessage(null, msg);
        }
        else if(cls==null){
            String s=ADFModelUtils.resolvRsrc("MSG.2891");
//            String s="Selection of  Class is Mandatory!!";
            FacesMessage msg=new FacesMessage(s);
            msg.setSeverity(FacesMessage.SEVERITY_FATAL);
            FacesContext fctx=FacesContext.getCurrentInstance();
            fctx.addMessage(null, msg);
        }
        else {
            String clsType = cls.toString();
            String itmId=item_id.toString();
            String itemName=itmName.toString();
            System.out.println("cls that is required is#########" + cls);

            Row rr = vo.createRow();
            rr.setAttribute("ClsId", clsType);
            //                    rr.setAttribute("AnaVlu", anaVal);
            rr.setAttribute("ItmId", itmId);
            rr.setAttribute("TransItemName", itemName);
            vo.insertRow(rr);
            System.out.println("if case::::::");
            
        }
        
            
            
            
//        if (voo.getCurrentRow().getAttribute("TransCls")!= null &&
//            voo.getCurrentRow().getAttribute("TransItemId")!= null) {
            

//        } else {
//            Row rr = vo.createRow();
//            //                        rr.setAttribute("ClsId", cls);
//            rr.setAttribute("ItmId", item_id);
//            vo.insertRow(rr);
//            System.out.println("else case::::::");
//        }
        voo.getCurrentRow().setAttribute("TransCls", null);
        voo.getCurrentRow().setAttribute("TransItemName", null);

        System.out.println("data entered in table");
//        return "done";

    }
    //     public void insertItems() {
    //         ViewObject vo=this.getMmInvAnaItm1();
    //         System.out.println("innnnnnssseeeettrtyy itemmsss");
    //         Row row=vo.createRow();
    //         ViewObject vo1=this.getMmInvAna2();
    //        String cls= vo1.getCurrentRow().getAttribute("TransCls").toString();
    //        System.out.println("cls id is!!!!!!!!!!!!!!!!!!"+cls);
    //        String itm_nm=vo1.getCurrentRow().getAttribute("TransItemName").toString();
    //        System.out.println("itm name is!!!!!!!!!!!!!!!!!!!!"+itm_nm);
    //        row.setAttribute("TransItemName", itm_nm);
    //        row.setAttribute("ClsId",cls);
    //        vo1.insertRow(row);
    //
    //    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public void edition() {
        System.out.println("edition method of amimpl");
    }

    public void setTxnIdForCurrentRow() {

        //        adfLog.info(" Txn");
        System.out.println("set txn id in amimpl");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        System.out.println("value of cld_id is" + cld_id + "value of sloc_id is" + sloc_id + "value of user_id is" +
                           usr_id + "value of org_id is" + org_id);
        Row currentRow = this.getMmInvAna2().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id(?,?,?,?,?,?)", new Object[] {
                                                    cld_id, sloc_id, org_id, usr_id, new Integer(18538), new Integer(0)
        }));
        System.out.println("doc id has been generated with value" +docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("ValMthd", 300);
        currentRow.setAttribute("DocId", docId);
//        currentRow.setAttribute("AnaFrmDt", new Timestamp(System.currentTimeMillis()));
//        currentRow.setAttribute("AnaToDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("ClsTypeId", "A");
        currentRow.setAttribute("AnaType", "O");
        currentRow.setAttribute("UsrIdCreate", usr_id);
        currentRow.setAttribute("OrgId", org_id);
        //   currentRow.setAttribute("AnaId", "ANA00019");
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        //         UsrIdCreateDt
        System.out.println("values reset done");
        //fyid = getFYid(CldId, OrgId, ts, "A");
    }

    /**
     * Container's getter for MmGlblInvCls1.
     * @return MmGlblInvCls1
     */
    public MmGlblInvClsVOImpl getMmGlblInvCls1() {
        return (MmGlblInvClsVOImpl) findViewObject("MmGlblInvCls1");
    }

    public String analysisIdGen() {
        System.out.println("generating analysis id in amimpl");
        String tableName = "MM$INV$ANA";
        ViewObject vo = this.getMmInvAna2();
        String doc_id = vo.getCurrentRow().getAttribute("DocId").toString();
        System.out.println("doc id in analysis gen is" + doc_id);
        Object ana_id=vo.getCurrentRow().getAttribute("AnaId");
        System.out.println("object ana id is" +ana_id);
        String anaId="";
        if (ana_id == null) {
            System.out.println("if case$$$$");
            System.out.println("ana id from database is" +ana_id);
              anaId = callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, tableName
            }).toString();

            vo.getCurrentRow().setAttribute("AnaId", anaId);
            System.out.println("analysis id generated is" + anaId);
        }
        else {
            System.out.println("else case");
            ana_id=vo.getCurrentRow().getAttribute("AnaId").toString();
        }
        

        return ana_id==null? anaId:ana_id.toString();
    }

    /**
     * Container's getter for LovGrp1.
     * @return LovGrp1
     */
    public ViewObjectImpl getLovGrp1() {
        return (ViewObjectImpl) findViewObject("LovGrp1");
    }

    public void setTransClsId() {
        System.out.println("insert items amimp");
        ViewObject vo = this.getMmInvAnaItm1();
        String cls_id = this.getMmInvAna2().getCurrentRow().getAttribute("ClsTypeId").toString();
        ViewObject voo = this.getMmGlblInvCls1();
        voo.executeQuery();
        Row[] filteredRows = voo.getFilteredRows("ClsTypeId", cls_id);
        if (filteredRows.length > 0) {
            vo.getCurrentRow().setAttribute("ClsId", cls_id);
        }
    }

    public String dateValidations() {
        //        Timestamp toDate = new java.sql.Timestamp(System.currentTimeMillis());
        ////        oracle.jbo.domain.Date daTime = new  oracle.jbo.domain.Date(toDate);
        //        System.out.println("current date of system is"+toDate);
        //        Timestamp fromDt = (Timestamp) this.getMmInvAna2().getCurrentRow().getAttribute("AnaFrmDt");
        //        System.out.println("from date is"+fromDt);

        //        Timestamp toDt = (Timestamp) this.getMmInvAna2().getCurrentRow().getAttribute("AnaToDt");
        //        System.out.println("dates---------- fom date is"+fromDt+"to date is"+toDt);
        //        if (fromDt != null && toDt != null) {
        //            java.sql.Date fromDate = new java.sql.Date(fromDt.getTime());
        //            java.sql.Date toDate = new java.sql.Date(toDt.getTime());
        //            //            if (etddate.compareTo(etadate) == -1) {
        //            if (toDate.compareTo(fromDate) <= 0) {
        //                System.out.println("date validator returns 1..............");
        //                return "Y";
        //            }
        //            else
        //            System.out.println("date validator returns 0");
        //        }
        //        return "N";
        return null;
    }

    /**
     * Container's getter for Trans1.
     * @return Trans1
     */
    public ViewObjectImpl getTrans1() {
        return (ViewObjectImpl) findViewObject("Trans1");
    }
    public String invAnalysis() {
        System.out.println("in ActionEvent Bean Method");
        String newVal=this.getMmInvAna2().getCurrentRow().getAttribute("AnaType").toString();
        System.out.println("new val is$$$$$$$$$$$$$$"+newVal);
        String analysis="";
       if(newVal.equalsIgnoreCase("M")){
           System.out.println("**********its manual**********");
            this.insertItems();
                System.out.println("insert item method is not null");
//            FacesMessage message = new FacesMessage("Record Saved Successfully!");
//            message.setSeverity(FacesMessage.SEVERITY_INFO);
//            FacesContext fc = FacesContext.getCurrentInstance();
//            fc.addMessage(null, message);
            analysis="done";
            
        }
        else if(newVal.equalsIgnoreCase("O")){
            System.out.println("**********its organisation**********");
            Integer orgResult=this.invoiceAna();
            if(orgResult!=null){
//                    FacesMessage message = new FacesMessage("Record Saved Successfully!");
//                    message.setSeverity(FacesMessage.SEVERITY_INFO);
//                    FacesContext fc = FacesContext.getCurrentInstance();
//                    fc.addMessage(null, message);
                    analysis= orgResult.toString();
                    System.out.println("result from invoice Ana is" +analysis);
                }
            }
            
    
        else  {
            System.out.println("its group");
           Integer groupRes=this.groupAnalysis();
           if(groupRes!=null)
           {
                   if(groupRes==1){
                       analysis = groupRes.toString();
                           System.out.println("result from group analyis is" +analysis);
                   }
                   else if(groupRes==2) {
//                       String s="Select Group Name!!";
                       String s=ADFModelUtils.resolvRsrc("MSG.2892");
                       FacesMessage msg=new FacesMessage(s);
                       msg.setSeverity(FacesMessage.SEVERITY_FATAL);
                       FacesContext fctx=FacesContext.getCurrentInstance();
                       fctx.addMessage(null, msg);
                   }
                    else {
                       String s=ADFModelUtils.resolvRsrc("MSG.2893");
//                       String s="SDE and VED classification type are not valid for group Selection Criteria!!";
                       FacesMessage msg=new FacesMessage(s);
                       msg.setSeverity(FacesMessage.SEVERITY_FATAL);
                       FacesContext fctx=FacesContext.getCurrentInstance();
                       fctx.addMessage(null, msg);
                   }
                   }
                   else {
                   System.out.println("Result returned by groupAnalysis fun is wrong");
                    
                   }
                                
                            }   
        return analysis;
       
    //                    }
    }
    public Integer groupAnalysis() {
        ViewObject vo = this.getMmInvAna2();
        Timestamp from_dt = (Timestamp) vo.getCurrentRow().getAttribute("AnaFrmDt");
        Timestamp to_dt = (Timestamp) vo.getCurrentRow().getAttribute("AnaToDt");
        
        String doc_id = vo.getCurrentRow().getAttribute("DocId").toString();
        System.out.println("dos id ***************" + doc_id);
        String ana_type = vo.getCurrentRow().getAttribute("ClsTypeId").toString();
        Integer res = 0;
        if (ana_type.equalsIgnoreCase("SDE") || ana_type.equalsIgnoreCase("VED")) {
            return 0;
        } else {
            System.out.println("ana id is **************" + ana_type);
            //        ViewObject voo=this.getMmGlblInvCls1();
            //       String grp_id= voo.getCurrentRow().getAttribute("GrpId").toString();
            Object grp_name = vo.getCurrentRow().getAttribute("TransGrpName");
            if(grp_name==null){
                return 2;
            }
            else
            {
                String grpName=grp_name.toString();
            System.out.println("group name required is!!!!!!!!!!!!!!" + grpName);
            //        String grp_id=vo.getFilteredRows("TransGrpName", grp_name).toString();
            //        String grp_id="";

            String grp_id = vo.getCurrentRow().getAttribute("TransGrpId").toString();
            //        vo.getCurrentRow().setAttribute("TransGrpId", grp_id);
            //        Timestamp to_dt=(Timestamp)vo.getCurrentRow().getAttribute("AnaToDt");
            System.out.println("cld id is" + cld_id + "sloc_id is" + sloc_id + "org_id is" + org_id + "group id is" +
                               grp_id + "date from is" + from_dt + "doc id is" + doc_id + "ana type is" + ana_type);
            res = Integer.parseInt(callStoredFunction(NUMBER, "MM.mm_inv_analysis(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                      cld_id, sloc_id, org_id, from_dt, to_dt, doc_id, ana_type, grp_id,
                                                      ho_org_id
            }).toString());
            }
        }
        System.out.println("value returned by the call stored fun is for group ------" + res);
        if (res == 1) {
            this.getMmInvAnaItm1().executeQuery();
        }


        System.out.println("MMInvAnaItm executed ---------------");
        vo.getCurrentRow().setAttribute("TransGrpName", null);
        return res;

    }
    public Integer invoiceAna() {
        System.out.println("in amimpl invoice ana method");
        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObject vo = this.getMmInvAna2();
        Timestamp date = (Timestamp) vo.getCurrentRow().getAttribute("AnaFrmDt");
        Timestamp toDate = (Timestamp) vo.getCurrentRow().getAttribute("AnaToDt");
        String doc_id = vo.getCurrentRow().getAttribute("DocId").toString();
        String ana_type = vo.getCurrentRow().getAttribute("ClsTypeId").toString();
        System.out.println("cld id is" + cld_id + "sloc_id is" + sloc_id + "org_id is" + org_id + "date from is" +
                           date + "doc id is" + doc_id + "ana type is" + ana_type);
        Integer res = Integer.parseInt(callStoredFunction(NUMBER, "MM.mm_inv_analysis(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          cld_id, sloc_id, org_id, date, toDate, doc_id, ana_type, null,
                                                          ho_org_id
        }).toString());
        System.out.println("value returned by the call stored fun is" + res);
        if (res == 1) {
        //    this.getDBTransaction().postChanges();
            this.getMmInvAnaItm1().executeQuery();
        }
        System.out.println("MMInvAnaItm executed");
        return res;


    }


    public void searchAnalysis() {
        ViewObject vo = this.getAnaHist1();
        Row r = getTrans1().getCurrentRow();
                vo.setNamedWhereClauseParam("bindCldId",cld_id);
                vo.setNamedWhereClauseParam("bindOrgId",org_id);
                vo.setNamedWhereClauseParam("bindSlocId",sloc_id);
        System.out.println("ana id is" + r.getAttribute("TransAnaId") + "ana type id" + r.getAttribute("TransAnaType") +
                           "cls type id is" + r.getAttribute("TransClsType"));

            vo.setNamedWhereClauseParam("bindAnaId", r.getAttribute("TransAnaId"));
            vo.setNamedWhereClauseParam("bindAnaType", r.getAttribute("TransAnaType"));
            vo.setNamedWhereClauseParam("bindClsType", r.getAttribute("TransClsType"));
            
        vo.executeQuery();
        Integer count=vo.getRowCount();
        System.out.println("no of rows "+count);
        
            System.out.println("search analysis executed!!");
        
    }

    /**
     * Container's getter for SearchMatClsftn1.
     * @return SearchMatClsftn1
     */
    public ViewObjectImpl getSearchMatClsftn1() {
        return (ViewObjectImpl) findViewObject("SearchMatClsftn1");
    }

    public void reset() {
        ViewObject vo = this.getAnaHist1();
        Row curr = getTrans1().getCurrentRow();
        vo.setNamedWhereClauseParam("bindCldId", null);
        vo.setNamedWhereClauseParam("bindOrgId", null);
        vo.setNamedWhereClauseParam("bindSlocId", null);
        if (curr != null) {
            vo.setNamedWhereClauseParam("bindAnaId", null);
            vo.setNamedWhereClauseParam("bindAnaType", null);
            vo.setNamedWhereClauseParam("bindClsType", null);
        }
        vo.executeQuery();
    }

    public String anaIdFilter(String cld_id, Integer sloc_id, String org_id, String docId) {
        //
        ViewObjectImpl vo = this.getMmInvAna2();
        ViewCriteria criteria = vo.getViewCriteria("MmInvAnaVOCriteria");
        vo.applyViewCriteria(criteria);
        ViewObject vo1 = this.getSearchMatClsftn1();
        String ana_type = vo1.getCurrentRow().getAttribute("AnaType").toString();
        System.out.println("!@# cld is is" + cld_id + "sloc id is" + sloc_id + "org_id is" + org_id + "doc id is" +
                           docId);
        vo.setNamedWhereClauseParam("CldIdBind", cld_id);
        vo.setNamedWhereClauseParam("SlocIdBind", sloc_id);
        vo.setNamedWhereClauseParam("BindOrgId", org_id);
        vo.setNamedWhereClauseParam("BindDocId", docId);
        String anaType = "";
        if (ana_type.equalsIgnoreCase("G")) {
            anaType = "G";
        } else if (ana_type.equalsIgnoreCase("M")) {
            anaType = "M";
        } else {
            anaType = "O";
        }

        vo.executeQuery();
        return anaType;
    }

    public Integer anaHistory() {
        ViewObject voo = this.getMmInvAna2();
        String docId = voo.getCurrentRow().getAttribute("DocId").toString();
//        #{pageFlowScope.docId}
        String cls_type_id=voo.getCurrentRow().getAttribute("ClsTypeId").toString();
        System.out.println("cls type id in history method is"+cls_type_id);
        //        String cls_type_id = voo.getCurrentRow().getAttribute("ClsTypeId").toString();
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        System.out.println("user id create is" + userId);
        System.out.println("doc id is" + docId);

        Integer res = Integer.parseInt(callStoredFunction(NUMBER, "MM.mm_ins_inv_ana_hist(?,?,?,?,?,?)", new Object[] {
                                                          cld_id, sloc_id, org_id, docId, cls_type_id,userId
        }).toString());
        if (res == 1) {
            System.out.println("done history");
            ViewObject ob1=this.getMmInvAnaItm1();
            voo.executeQuery();
            ob1.executeQuery();
           
        }
        return res;
    }

    /**
     * Container's getter for MmInvAnaHist1.
     * @return MmInvAnaHist1
     */
    public ViewObjectImpl getMmInvAnaHist1() {
        return (ViewObjectImpl) findViewObject("MmInvAnaHist1");
    }

    /**
     * Container's getter for AnaHist1.
     * @return AnaHist1
     */
    public ViewObjectImpl getAnaHist1() {
        return (ViewObjectImpl) findViewObject("AnaHist1");
    }
    public void materialHistory(String cld_id, Integer sloc_id, String org_id, String docId) {
        ViewObjectImpl vo = this.getMmInvAnaHist1();
        ViewCriteria criteria = vo.getViewCriteria("MmInvAnaHistVOCriteria");
        vo.applyViewCriteria(criteria);
        System.out.println("!@# cld is is" + cld_id + "sloc id is" + sloc_id + "org_id is" + org_id + "doc id is" +docId);
        vo.setNamedWhereClauseParam("BindCldId", cld_id);
        vo.setNamedWhereClauseParam("BindSlocId", sloc_id);
        vo.setNamedWhereClauseParam("BindOrgId", org_id);
        vo.setNamedWhereClauseParam("BindDocId", docId);
        vo.executeQuery();
        System.out.println("material history executed");
    }

    /**
     * Container's getter for MmInvAnaItm2.
     * @return MmInvAnaItm2
     */
    public ViewObjectImpl getMmInvAnaItm2() {
        return (ViewObjectImpl) findViewObject("MmInvAnaItm2");
    }

    /**
     * Container's getter for MmInvAnaItmHist1.
     * @return MmInvAnaItmHist1
     */
    public ViewObjectImpl getMmInvAnaItmHist1() {
        return (ViewObjectImpl) findViewObject("MmInvAnaItmHist1");
    }

    /**
     * Container's getter for MmAnaItemtoMmAnaItmHistVL1.
     * @return MmAnaItemtoMmAnaItmHistVL1
     */
    public ViewLinkImpl getMmAnaItemtoMmAnaItmHistVL1() {
        return (ViewLinkImpl) findViewLink("MmAnaItemtoMmAnaItmHistVL1");
    }


    /**
     * Container's getter for MmInvAnaItmHist2.
     * @return MmInvAnaItmHist2
     */
    public ViewObjectImpl getMmInvAnaItmHist2() {
        return (ViewObjectImpl) findViewObject("MmInvAnaItmHist2");
    }

    /**
     * Container's getter for MmAnaHisttoItmHistVL1.
     * @return MmAnaHisttoItmHistVL1
     */
    public ViewLinkImpl getMmAnaHisttoItmHistVL1() {
        return (ViewLinkImpl) findViewLink("MmAnaHisttoItmHistVL1");
    }
    public void deleteRow() {
        System.out.println("deleting row");
        Row r=getMmInvAnaItm1().getCurrentRow();
        if(r!=null) {
            r.remove();
           
        }
        else {
            System.out.println("select a row");
        }
    }


    /**
     * Container's getter for MmInvClsMtrx1.
     * @return MmInvClsMtrx1
     */
    public ViewObjectImpl getMmInvClsMtrx1() {
        return (ViewObjectImpl) findViewObject("MmInvClsMtrx1");
    }

    /**
     * Container's getter for MmInvClsRange1.
     * @return MmInvClsRange1
     */
    public ViewObjectImpl getMmInvClsRange1() {
        return (ViewObjectImpl) findViewObject("MmInvClsRange1");
    }
    public Integer valueValidation() {
//        ViewObject vo=this.getMmInvClsRange1();
//        System.out.println("Validating amount method in bean");
//        Integer amt1= Integer.parseInt(vo.getCurrentRow().getAttribute("ClsVlu1").toString());
//        Integer amt2= Integer.parseInt(vo.getCurrentRow().getAttribute("ClsVlu2").toString());
//        Integer amt3=Integer.parseInt(vo.getCurrentRow().getAttribute("ClsVlu3").toString());
//        Integer total_val=amt1+amt2+amt3;
        return 1;
        
    }
    
    Integer val1=0;
    Integer val2=0;
    Integer val3=0;
    public Integer amountValidationMethod() {
        ViewObject vo=this.getMmInvClsRange1();
        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        System.out.println("usr id crt in bean is"+usr_id);
        vo.getCurrentRow().setAttribute("UsrIdCrt", usr_id);
        vo.getCurrentRow().setAttribute("CrtDt",  new Timestamp(System.currentTimeMillis()));
        
//        vo.setAttribute("UsrIdCrt", usr_id);
        Row currentRow = vo.getCurrentRow();
        val1=Integer.parseInt(currentRow.getAttribute("ClsVlu1").toString());
         val2=Integer.parseInt(currentRow.getAttribute("ClsVlu2").toString());
         val3=Integer.parseInt(currentRow.getAttribute("ClsVlu3").toString());
        
        if(val1>val2 && val2>val3)
        return 1;
        else
        return 0;
    }
    Integer total=0;
    public Integer validationOfAmount() {
        ViewObject vo=this.getMmInvClsRange1();
        Row currentRow = vo.getCurrentRow();
        val1=Integer.parseInt(currentRow.getAttribute("ClsVlu1").toString());
         val2=Integer.parseInt(currentRow.getAttribute("ClsVlu2").toString());
         val3=Integer.parseInt(currentRow.getAttribute("ClsVlu3").toString());
          total=val1+val2+val3;
        String value = vo.getCurrentRow().getAttribute("TransSel").toString();
        System.out.println("total value of the amounts is" +total);
        return total;
}
}


