package mmmaterialreqslip.model.view;

import java.sql.Timestamp;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Date;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmmaterialreqslip.model.services.MmMatReqSlipAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 15 16:41:08 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMrsFlxVORowImpl extends ViewRowImpl {

    public static final int ENTITY_MMMRSFLXEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        },
        SlocId {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        },
        OrgId {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        },
        DocId {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        },
        FldId {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getFldId();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setFldId((String) value);
            }
        },
        FldVal {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getFldVal();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setFldVal((String) value);
            }
        },
        FldValDate {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getFldValDate();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setFldValDate((Timestamp) value);
            }
        },
        FldValString {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getFldValString();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setFldValString((String) value);
            }
        },
        FldValBol {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getFldValBol();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setFldValBol((String) value);
            }
        },
        FldValNum {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getFldValNum();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setFldValNum((Number) value);
            }
        },
        TransFldtype {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getTransFldtype();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldtype((Integer) value);
            }
        },
        TransFldReq {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getTransFldReq();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldReq((String) value);
            }
        },
        TransFldLen {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getTransFldLen();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldLen((Number) value);
            }
        },
        TransFldValue {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getTransFldValue();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldValue((String) value);
            }
        },
        AppFlxFldVO1 {
            public Object get(MmMrsFlxVORowImpl obj) {
                return obj.getAppFlxFldVO1();
            }

            public void put(MmMrsFlxVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        static AttributesEnum[] vals = null; ;
        private static final int firstIndex = 0;

        public abstract Object get(MmMrsFlxVORowImpl object);

        public abstract void put(MmMrsFlxVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int FLDID = AttributesEnum.FldId.index();
    public static final int FLDVAL = AttributesEnum.FldVal.index();
    public static final int FLDVALDATE = AttributesEnum.FldValDate.index();
    public static final int FLDVALSTRING = AttributesEnum.FldValString.index();
    public static final int FLDVALBOL = AttributesEnum.FldValBol.index();
    public static final int FLDVALNUM = AttributesEnum.FldValNum.index();
    public static final int TRANSFLDTYPE = AttributesEnum.TransFldtype.index();
    public static final int TRANSFLDREQ = AttributesEnum.TransFldReq.index();
    public static final int TRANSFLDLEN = AttributesEnum.TransFldLen.index();
    public static final int TRANSFLDVALUE = AttributesEnum.TransFldValue.index();
    public static final int APPFLXFLDVO1 = AttributesEnum.AppFlxFldVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmMrsFlxVORowImpl() {
    }

    /**
     * Gets MmMrsFlxEO entity object.
     * @return the MmMrsFlxEO
     */
    public EntityImpl getMmMrsFlxEO() {
        return (EntityImpl) getEntity(ENTITY_MMMRSFLXEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return ((String) getAttributeInternal(CLDID)==null?resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString():(String) getAttributeInternal(CLDID));
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = null;
        if (valueExp.getValue(elContext) != null)
            msg = valueExp.getValue(elContext).toString();
        else
            msg = null;
        return msg;
    }
    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for FLD_ID using the alias name FldId.
     * @return the FLD_ID
     */
    public String getFldId() {
        return (String) getAttributeInternal(FLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for FLD_ID using the alias name FldId.
     * @param value value to set the FLD_ID
     */
    public void setFldId(String value) {
        setAttributeInternal(FLDID, value);
    }

    /**
     * Gets the attribute value for FLD_VAL using the alias name FldVal.
     * @return the FLD_VAL
     */
    public String getFldVal() {
        return (String) getAttributeInternal(FLDVAL);
    }

    /**
     * Sets <code>value</code> as attribute value for FLD_VAL using the alias name FldVal.
     * @param value value to set the FLD_VAL
     */
    public void setFldVal(String value) {
        setAttributeInternal(FLDVAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldValDate.
     * @return the FldValDate
     */
    public Timestamp getFldValDate() {
        if (getFldVal() != null && getTransFldtype()!=null) {
            if(getTransFldtype().compareTo(756) == 0){
            try {
                final String OLD_FORMAT = "yyyy-MM-dd";
                final String NEW_FORMAT = "yyyy-MM-dd HH:mm:ss.SSS";
                String oldDateString = getFldVal();
                String newDateString;

                DateFormat formatter = new SimpleDateFormat(OLD_FORMAT);
                Date d = formatter.parse(oldDateString);
                ((SimpleDateFormat) formatter).applyPattern(NEW_FORMAT);
                newDateString = formatter.format(d);
                // System.out.println(newDateString);

                Timestamp ts = Timestamp.valueOf(newDateString);
                //  System.out.println(ts);
                return (ts);
            } catch (Exception e) {
                // System.out.println("Exception  occured:::" + e);
            }
            }
        }
        return (Timestamp) getAttributeInternal(FLDVALDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldValDate.
     * @param value value to set the  FldValDate
     */
    public void setFldValDate(Timestamp value) {
        if (value != null) {
            String date = value.toString();
            setFldVal(date);
        }
        setAttributeInternal(FLDVALDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldValString.
     * @return the FldValString
     */
    public String getFldValString() {
        if (getFldVal() != null && getTransFldtype()!=null) {
            if(getTransFldtype().compareTo(757) == 0){
                return (getFldVal());   
            }
        }
        return (String) getAttributeInternal(FLDVALSTRING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldValString.
     * @param value value to set the  FldValString
     */
    public void setFldValString(String value) {
        if (value != null) {
            setFldVal(value);
        }
        setAttributeInternal(FLDVALSTRING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldValBol.
     * @return the FldValBol
     */
    public String getFldValBol() {
      //  System.out.println("getFldVal:::" + getFldVal() + "TransFldtype::" + getTransFldtype());
        if (getFldVal() != null) {
            if(getTransFldtype()!=null){
                if( getTransFldtype().compareTo(759) == 0){
                    return (getFldVal());   
                 }
            }
        
        }
        return (String) getAttributeInternal(FLDVALBOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldValBol.
     * @param value value to set the  FldValBol
     */
    public void setFldValBol(String value) {
        if (value != null) {
            System.out.println("Value of Boll::" + value);
            setFldVal(value);
        }
        setAttributeInternal(FLDVALBOL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldValNum.
     * @return the FldValNum
     */
    public Number getFldValNum() {
        Number val = new Number(0);
        if (getFldVal() != null && getTransFldtype()!=null) {
            if(getTransFldtype().compareTo(758) == 0){
            try {
                val = new Number(getFldVal());
            } catch (Exception e) {
                System.out.println("Exception  occured::" + e);
            }
            return (val);
        }
        }
        return (Number) getAttributeInternal(FLDVALNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldValNum.
     * @param value value to set the  FldValNum
     */
    public void setFldValNum(Number value) {
        if (value != null) {
            String num = value.toString();
            setFldVal(num);
        }
        setAttributeInternal(FLDVALNUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldtype.
     * @return the TransFldtype
     */
    public Integer getTransFldtype() {
        MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        Integer type = new Integer(0);
        if (getFldId() != null) {
            System.out.println("Valueeee of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", "0000");
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFldId());
            if (rr.length > 0) {
                 type = (Integer) rr[0].getAttribute("DataType");
                System.out.println("value offff type::" + type);
                return type;
            }


        }
        return (Integer) getAttributeInternal(TRANSFLDTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldtype.
     * @param value value to set the  TransFldtype
     */
    public void setTransFldtype(Integer value) {
        setAttributeInternal(TRANSFLDTYPE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldReq.
     * @return the TransFldReq
     */
    public String getTransFldReq() {
        MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        if (getFldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", "0000");
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFldId());
            if (rr.length > 0) {
                String req = (String) rr[0].getAttribute("Reqd");
                // System.out.println("value of type::" + type);
                return req;
            }
        }
        return (String) getAttributeInternal(TRANSFLDREQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldReq.
     * @param value value to set the  TransFldReq
     */
    public void setTransFldReq(String value) {
        setAttributeInternal(TRANSFLDREQ, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldLen.
     * @return the TransFldLen
     */
    public Number getTransFldLen() {
        MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        if (getFldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", "0000");
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFldId());
            if (rr.length > 0) {
                Number len = (Number) rr[0].getAttribute("DataLen");
                // System.out.println("value of type::" + type);
                return len;
            }


        }
        return (Number) getAttributeInternal(TRANSFLDLEN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldLen.
     * @param value value to set the  TransFldLen
     */
    public void setTransFldLen(Number value) {
        setAttributeInternal(TRANSFLDLEN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldValue.
     * @return the TransFldValue
     */
    public String getTransFldValue() {
        MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        if (getFldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", "0000");
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            ViewCriteria vc = fld.getViewCriteria("AppFlxFldVOCriteria");
            fld.applyViewCriteria(vc);
            fld.setNamedWhereClauseParam("bindFldId", getFldId());
            fld.executeQuery();
            Row r[] = fld.getAllRowsInRange();
            if (r.length > 0) {
                String fldnm = (String) r[0].getAttribute("FldNm");
                //System.out.println("value of fldNm::"+fldnm);
                return fldnm;
            }
        }
        return (String) getAttributeInternal(TRANSFLDVALUE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldValue.
     * @param value value to set the  TransFldValue
     */
    public void setTransFldValue(String value) {
        setAttributeInternal(TRANSFLDVALUE, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AppFlxFldVO1.
     */
    public RowSet getAppFlxFldVO1() {
        return (RowSet) getAttributeInternal(APPFLXFLDVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

