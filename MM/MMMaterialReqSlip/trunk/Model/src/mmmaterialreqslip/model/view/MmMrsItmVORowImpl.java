package mmmaterialreqslip.model.view;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Timestamp;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmmaterialreqslip.model.entity.MmMrsItmEOImpl;

import mmmaterialreqslip.model.services.MmMatReqSlipAMImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSet;


import oracle.jbo.domain.BFileDomain;
import oracle.jbo.domain.Date;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Aug 17 16:56:50 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMrsItmVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMMRSITMEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. Do not modify.
     */
    private static ADFLogger adfLog = (ADFLogger)ADFLogger.createADFLogger(MmMrsItmVORowImpl.class);
    public enum AttributesEnum {
        CldId {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setCldId((String)value);
            }
        }
        ,
        IssuQty {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getIssuQty();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setIssuQty((BigDecimal)value);
            }
        }
        ,
        ItmId {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getItmId();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setItmId((String)value);
            }
        }
        ,
        ItmUom {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getItmUom();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setItmUom((String)value);
            }
        }
        ,
        MrsTxnId {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getMrsTxnId();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setMrsTxnId((String)value);
            }
        }
        ,
        OrgId {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setOrgId((String)value);
            }
        }
        ,
        PendQty {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getPendQty();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setPendQty((BigDecimal)value);
            }
        }
        ,
        ReqQty {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getReqQty();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setReqQty((BigDecimal)value);
            }
        }
        ,
        SlocId {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setSlocId((Integer)value);
            }
        }
        ,
        StkResvQty {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getStkResvQty();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setStkResvQty((BigDecimal)value);
            }
        }
        ,
        CnclItm {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getCnclItm();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setCnclItm((String)value);
            }
        }
        ,
        AuthQty {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getAuthQty();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setAuthQty((BigDecimal)value);
            }
        }
        ,
        TransItmDesc {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getTransItmDesc();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setTransItmDesc((String)value);
            }
        }
        ,
        TransUOM {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getTransUOM();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setTransUOM((String)value);
            }
        }
        ,
        TransAvlStk {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getTransAvlStk();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setTransAvlStk((String)value);
            }
        }
        ,
        TransPrRaised {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getTransPrRaised();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setTransPrRaised((String)value);
            }
        }
        ,
        TransReqQty {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getTransReqQty();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setTransReqQty((BigDecimal)value);
            }
        }
        ,
        TransItmAttDesc {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getTransItmAttDesc();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setTransItmAttDesc((String)value);
            }
        }
        ,
        TransItmGrpId {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getTransItmGrpId();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setTransItmGrpId((String)value);
            }
        }
        ,
        TransItmGrpDesc {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getTransItmGrpDesc();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setTransItmGrpDesc((String)value);
            }
        }
        ,
        TransHoOrgId {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getTransHoOrgId();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setTransHoOrgId((String)value);
            }
        }
        ,
        ItemPrfVO1 {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getItemPrfVO1();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovUomConvVO {
            public Object get(MmMrsItmVORowImpl obj) {
                return obj.getLovUomConvVO();
            }

            public void put(MmMrsItmVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static int firstIndex = 0;

        public abstract Object get(MmMrsItmVORowImpl object);

        public abstract void put(MmMrsItmVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int ISSUQTY = AttributesEnum.IssuQty.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int MRSTXNID = AttributesEnum.MrsTxnId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int PENDQTY = AttributesEnum.PendQty.index();
    public static final int REQQTY = AttributesEnum.ReqQty.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int STKRESVQTY = AttributesEnum.StkResvQty.index();
    public static final int CNCLITM = AttributesEnum.CnclItm.index();
    public static final int AUTHQTY = AttributesEnum.AuthQty.index();
    public static final int TRANSITMDESC = AttributesEnum.TransItmDesc.index();
    public static final int TRANSUOM = AttributesEnum.TransUOM.index();
    public static final int TRANSAVLSTK = AttributesEnum.TransAvlStk.index();
    public static final int TRANSPRRAISED = AttributesEnum.TransPrRaised.index();
    public static final int TRANSREQQTY = AttributesEnum.TransReqQty.index();
    public static final int TRANSITMATTDESC = AttributesEnum.TransItmAttDesc.index();
    public static final int TRANSITMGRPID = AttributesEnum.TransItmGrpId.index();
    public static final int TRANSITMGRPDESC = AttributesEnum.TransItmGrpDesc.index();
    public static final int TRANSHOORGID = AttributesEnum.TransHoOrgId.index();
    public static final int ITEMPRFVO1 = AttributesEnum.ItemPrfVO1.index();
    public static final int LOVUOMCONVVO = AttributesEnum.LovUomConvVO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmMrsItmVORowImpl() {
    }

    /**
     * Gets MmMrsItmEO entity object.
     * @return the MmMrsItmEO
     */
    public MmMrsItmEOImpl getMmMrsItmEO() {
        return (MmMrsItmEOImpl)getEntity(ENTITY_MMMRSITMEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String)getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for ISSU_QTY using the alias name IssuQty.
     * @return the ISSU_QTY
     */
    public BigDecimal getIssuQty() {
        return (BigDecimal)getAttributeInternal(ISSUQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for ISSU_QTY using the alias name IssuQty.
     * @param value value to set the ISSU_QTY
     */
    public void setIssuQty(BigDecimal value) {
        setAttributeInternal(ISSUQTY, value);
    }

    /**
     * Gets the attribute value for ITM_ID using the alias name ItmId.
     * @return the ITM_ID
     */
    public String getItmId() {
        return (String)getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_ID using the alias name ItmId.
     * @param value value to set the ITM_ID
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ITM_UOM using the alias name ItmUom.
     * @return the ITM_UOM
     */
    public String getItmUom() {
        return (String)getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as attribute value for ITM_UOM using the alias name ItmUom.
     * @param value value to set the ITM_UOM
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for MRS_TXN_ID using the alias name MrsTxnId.
     * @return the MRS_TXN_ID
     */
    public String getMrsTxnId() {
        return (String)getAttributeInternal(MRSTXNID);
    }

    /**
     * Sets <code>value</code> as attribute value for MRS_TXN_ID using the alias name MrsTxnId.
     * @param value value to set the MRS_TXN_ID
     */
    public void setMrsTxnId(String value) {
        setAttributeInternal(MRSTXNID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String)getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for PEND_QTY using the alias name PendQty.
     * @return the PEND_QTY
     */
    public BigDecimal getPendQty() {
        if(getAttributeInternal(PENDQTY)!=null)
        return (BigDecimal)getAttributeInternal(PENDQTY);
        else
            return getReqQty();
    }

    /**
     * Sets <code>value</code> as attribute value for PEND_QTY using the alias name PendQty.
     * @param value value to set the PEND_QTY
     */
    public void setPendQty(BigDecimal value) {
        setAttributeInternal(PENDQTY, value);
    }

    /**
     * Gets the attribute value for REQ_QTY using the alias name ReqQty.
     * @return the REQ_QTY
     */
    public BigDecimal getReqQty() {
        return (BigDecimal)getAttributeInternal(REQQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for REQ_QTY using the alias name ReqQty.
     * @param value value to set the REQ_QTY
     */
    public void setReqQty(BigDecimal value) {
        setAttributeInternal(REQQTY, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer)getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmDesc.
     * @return the TransItmDesc
     */
    public String getTransItmDesc() {
        if (getAttributeInternal(TRANSITMDESC) != null) {
            return (String) getAttributeInternal(TRANSITMDESC);
        } else {
            String name = null;
            if (getItmId() != null) {
                MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl) this.getApplicationModule();
                ViewObjectImpl itmprfvo = am.getLovItmId();
                itmprfvo.setNamedWhereClauseParam("bindCldId", getCldId());
                itmprfvo.setNamedWhereClauseParam("bindHoOrgId", getTransHoOrgId());
                itmprfvo.setNamedWhereClauseParam("bindItmId", getItmId());
                itmprfvo.setNamedWhereClauseParam("bindOrgId", getOrgId());
                itmprfvo.setNamedWhereClauseParam("bindSlocId", getSlocId());
                itmprfvo.executeQuery();

                Row rows[] = itmprfvo.getFilteredRows("ItmId", getItmId());
                System.out.println("-----inside getter trans item desc0------"+getItmId()+" "+getTransHoOrgId());
                if (rows.length > 0) {
                    if (rows[0].getAttribute("ItmDesc") != null) {
                        name = rows[0].getAttribute("ItmDesc").toString();
                        System.out.println("-----------inside getter trans item desc name-- "+name);
                    }
                }
            }
            return name;
        }
       
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmDesc.
     * @param value value to set the  TransItmDesc
     */
    public void setTransItmDesc(String value) {
        setAttributeInternal(TRANSITMDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransUOM.
     * @return the TransUOM
     */
    public String getTransUOM() {

        return (String)getAttributeInternal(TRANSUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransUOM.
     * @param value value to set the  TransUOM
     */
    public void setTransUOM(String value) {
        setAttributeInternal(TRANSUOM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransAvlStk.
     * @return the TransAvlStk
     */
    public String getTransAvlStk() {
        MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl)resolvElDC("MmMatReqSlipAMDataControl");
        ViewObjectImpl vo=am.getMmMrs2();
        RowQualifier rq=new RowQualifier(vo);
        rq.setWhereClause("upper(MrsTxnId) like '"+getMrsTxnId().toUpperCase()+"' and upper(OrgId) like '"+getOrgId().toUpperCase()+"' and upper(CldId) like '"+getCldId().toUpperCase()+"' and SlocId = "+getSlocId());
        Row[] r=vo.getFilteredRows(rq);
        String WhId = (String)r[0].getAttribute("WhIdReqTo");
        String OrgId=(String)r[0].getAttribute("OrgIdReqTo");
        Integer fyid=(Integer)r[0].getAttribute("FyId");
        String avlstk =(String)(callStoredFunction(Types.VARCHAR, "MM.mm_get_avail_stk(?,?,?,?,?,?,?)",new Object[] {getCldId(),getSlocId(),OrgId,getItmId(),WhId,fyid,getMrsTxnId()}));   
        return avlstk;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransAvlStk.
     * @param value value to set the  TransAvlStk
     */
    public void setTransAvlStk(String value) {
        setAttributeInternal(TRANSAVLSTK, value);
    }

    /**
     * Gets the attribute value for STK_RESV_QTY using the alias name StkResvQty.
     * @return the STK_RESV_QTY
     */
    public BigDecimal getStkResvQty() {
        return (BigDecimal) getAttributeInternal(STKRESVQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for STK_RESV_QTY using the alias name StkResvQty.
     * @param value value to set the STK_RESV_QTY
     */
    public void setStkResvQty(BigDecimal value) {
        setAttributeInternal(STKRESVQTY, value);
    }

    /**
     * Gets the attribute value for CNCL_ITM using the alias name CnclItm.
     * @return the CNCL_ITM
     */
    public String getCnclItm() {
        return (String) getAttributeInternal(CNCLITM);
    }

    /**
     * Sets <code>value</code> as attribute value for CNCL_ITM using the alias name CnclItm.
     * @param value value to set the CNCL_ITM
     */
    public void setCnclItm(String value) {
        setAttributeInternal(CNCLITM, value);
    }

    /**
     * Gets the attribute value for AUTH_QTY using the alias name AuthQty.
     * @return the AUTH_QTY
     */
    public BigDecimal getAuthQty() {
        return (BigDecimal) getAttributeInternal(AUTHQTY);
    }

    /**
     * Sets <code>value</code> as attribute value for AUTH_QTY using the alias name AuthQty.
     * @param value value to set the AUTH_QTY
     */
    public void setAuthQty(BigDecimal value) {
        setAttributeInternal(AUTHQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransPrRaised.
     * @return the TransPrRaised
     */
    public String getTransPrRaised() {
        return (String) getAttributeInternal(TRANSPRRAISED);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransPrRaised.
     * @param value value to set the  TransPrRaised
     */
    public void setTransPrRaised(String value) {
        setAttributeInternal(TRANSPRRAISED, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransReqQty.
     * @return the TransReqQty
     */
    public BigDecimal getTransReqQty() {
        return (BigDecimal) getAttributeInternal(TRANSREQQTY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransReqQty.
     * @param value value to set the  TransReqQty
     */
    public void setTransReqQty(BigDecimal value) {
        setAttributeInternal(TRANSREQQTY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmAttDesc.
     * @return the TransItmAttDesc
     */
    public String getTransItmAttDesc() {
        adfLog.info("get item id is " + getItmId()+getCldId()+" "+getSlocId()+" "+getTransHoOrgId());
        if (getItmId() != null) {

            Object attdetail =
                callStoredFunction(Types.VARCHAR, "APP.FN_GET_ITM_ATT(?,?,?,?,?,?)", new Object[] { getCldId(),getSlocId(),getTransHoOrgId(),getItmId(), "R","," });
                 adfLog.info("function return " + attdetail + " " + getItmId());
            if (attdetail != null) {
                return attdetail.toString();
            } else {
                return "None";
            }
        } else {
            return "None";
        }
        
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmAttDesc.
     * @param value value to set the  TransItmAttDesc
     */
    public void setTransItmAttDesc(String value) {
        setAttributeInternal(TRANSITMATTDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmGrpId.
     * @return the TransItmGrpId
     */
    public String getTransItmGrpId() {
      //  adfLog.info("item group id is "+ getAttributeInternal(TRANSITMGRPID));
        return (String) getAttributeInternal(TRANSITMGRPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmGrpId.
     * @param value value to set the  TransItmGrpId
     */
    public void setTransItmGrpId(String value) {
        setAttributeInternal(TRANSITMGRPID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransItmGrpDesc.
     * @return the TransItmGrpDesc
     */
    public String getTransItmGrpDesc() {
        adfLog.info("get item id is " + getTransItmGrpId()+"  "+getCldId()+" "+getSlocId()+" "+getTransHoOrgId());
       
        if(getItmId()!=null){
            MmMatReqSlipAMImpl am=(MmMatReqSlipAMImpl)this.getApplicationModule();
            RowQualifier rq=new RowQualifier(am.getItemPrf1());
            rq.setWhereClause("CldId ='" +getCldId() +"' and SlocId = "+ getSlocId()+" and HoOrgId = '"+getTransHoOrgId()+"' and ItmId= '"+ getItmId()+"'");
            Row [] rr1=am.getItemPrf1().getFilteredRows(rq);
            Object attdetail=null;
            adfLog.info("grp id length is "+rr1.length);
            if(rr1.length>0){
        attdetail=callStoredFunction(Types.VARCHAR, "APP.GET_ITM_GRP_PATH(?,?,?,?)",new Object[] {getSlocId(), getCldId(), getTransHoOrgId(),rr1[0].getAttribute("GrpId")});
        adfLog.info("function return "+attdetail+" grp and itm id is "+getTransItmGrpId()+" "+getItmId());
       
            } 
            if(attdetail!=null){
            return attdetail.toString();
            }
            else{
            return (String) getAttributeInternal(TRANSITMGRPDESC);
         }
        }else{
            return (String) getAttributeInternal(TRANSITMGRPDESC);
        }
      //  return (String) getAttributeInternal(TRANSITMGRPDESC);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransItmGrpDesc.
     * @param value value to set the  TransItmGrpDesc
     */
    public void setTransItmGrpDesc(String value) {
        setAttributeInternal(TRANSITMGRPDESC, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransHoOrgId.
     * @return the TransHoOrgId
     */
     public String resolvEl(String data) {
         FacesContext fc = FacesContext.getCurrentInstance();
         Application app = fc.getApplication();
         ExpressionFactory elFactory = app.getExpressionFactory();
         ELContext elContext = fc.getELContext();
         ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
         String Message = valueExp.getValue(elContext).toString();
         return Message;
     }
    public String getTransHoOrgId() {
        return resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
     //   return (String) getAttributeInternal(TRANSHOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransHoOrgId.
     * @param value value to set the  TransHoOrgId
     */
    public void setTransHoOrgId(String value) {
        setAttributeInternal(TRANSHOORGID, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> ItemPrfVO1.
     */
    public RowSet getItemPrfVO1() {
        return (RowSet)getAttributeInternal(ITEMPRFVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUomConvVO.
     */
    public RowSet getLovUomConvVO() {
        return (RowSet)getAttributeInternal(LOVUOMCONVVO);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
            CallableStatement st = null;
            try {
                MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl)resolvElDC("MmMatReqSlipAMDataControl");
                st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
                st.registerOutParameter(1, sqlReturnType);
                if (bindVars != null) {
                    for (int z = 0; z < bindVars.length; z++) {
                        st.setObject(z + 2, bindVars[z]);
                    }
                }
                st.executeUpdate();
     
                return st.getObject(1);
            } catch (SQLException e) {
                throw new JboException(e);
            } finally {
                if (st != null) {
                    try {
                        st.close();
                    } catch (SQLException e) { throw new JboException(e);
                    }
                }
            }
        }
    public Object resolvElDC(String data) {
    FacesContext fc = FacesContext.getCurrentInstance();
    Application app = fc.getApplication();
    ExpressionFactory elFactory = app.getExpressionFactory();
    ELContext elContext = fc.getELContext();
    ValueExpression valueExp =
    elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
    return valueExp.getValue(elContext);
    }
}
