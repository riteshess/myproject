package mmmaterialreqslip.model.view.views;

import java.sql.Timestamp;

import java.text.DateFormat;
import java.text.SimpleDateFormat;

import java.util.Date;

import mmmaterialreqslip.model.services.MmMatReqSlipAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 14 16:25:50 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MMMrsFlxVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        SlocId {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        OrgId {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        DocId {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        },
        FldId {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getFldId();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setFldId((String) value);
            }
        },
        FldVal {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getFldVal();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setFldVal((String) value);
            }
        },
        TransFldVlu {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getTransFldVlu();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldVlu((String) value);
            }
        },
        TransFldValDate {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getTransFldValDate();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldValDate((Timestamp) value);
            }
        },
        TransFldValNum {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getTransFldValNum();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldValNum((Number) value);
            }
        },
        TransFldValString {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getTransFldValString();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldValString((String) value);
            }
        },
        TransFldBol {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getTransFldBol();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldBol((String) value);
            }
        },
        TransFldReq {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getTransFldReq();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldReq((String) value);
            }
        },
        TransFldLen {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getTransFldLen();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setTransFldLen((Number) value);
            }
        },
        TransFldType {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getTransFldType();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        },
        AppFlxFldVO1 {
            public Object get(MMMrsFlxVORowImpl obj) {
                return obj.getAppFlxFldVO1();
            }

            public void put(MMMrsFlxVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MMMrsFlxVORowImpl object);

        public abstract void put(MMMrsFlxVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int FLDID = AttributesEnum.FldId.index();
    public static final int FLDVAL = AttributesEnum.FldVal.index();
    public static final int TRANSFLDVLU = AttributesEnum.TransFldVlu.index();
    public static final int TRANSFLDVALDATE = AttributesEnum.TransFldValDate.index();
    public static final int TRANSFLDVALNUM = AttributesEnum.TransFldValNum.index();
    public static final int TRANSFLDVALSTRING = AttributesEnum.TransFldValString.index();
    public static final int TRANSFLDBOL = AttributesEnum.TransFldBol.index();
    public static final int TRANSFLDREQ = AttributesEnum.TransFldReq.index();
    public static final int TRANSFLDLEN = AttributesEnum.TransFldLen.index();
    public static final int TRANSFLDTYPE = AttributesEnum.TransFldType.index();
    public static final int APPFLXFLDVO1 = AttributesEnum.AppFlxFldVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MMMrsFlxVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute DocId.
     * @param value value to set the  DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldId.
     * @return the FldId
     */
    public String getFldId() {
        return (String) getAttributeInternal(FLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldId.
     * @param value value to set the  FldId
     */
    public void setFldId(String value) {
        setAttributeInternal(FLDID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute FldVal.
     * @return the FldVal
     */
    public String getFldVal() {
        return (String) getAttributeInternal(FLDVAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute FldVal.
     * @param value value to set the  FldVal
     */
    public void setFldVal(String value) {
        setAttributeInternal(FLDVAL, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldVlu.
     * @return the TransFldVlu
     */
    public String getTransFldVlu() {
        MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        if (getFldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", getCldId());
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            ViewCriteria vc = fld.getViewCriteria("AppFlxFldVOCriteria");
            fld.applyViewCriteria(vc);
            fld.setNamedWhereClauseParam("bindFldId", getFldId());
            fld.executeQuery();
            Row r[] = fld.getAllRowsInRange();
            if (r.length > 0) {
                String fldnm = (String) r[0].getAttribute("FldNm");
                //System.out.println("value of fldNm::"+fldnm);
                return fldnm;
            }
        }
        return (String) getAttributeInternal(TRANSFLDVLU);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldVlu.
     * @param value value to set the  TransFldVlu
     */
    public void setTransFldVlu(String value) {
        setAttributeInternal(TRANSFLDVLU, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldValDate.
     * @return the TransFldValDate
     */
    public Timestamp getTransFldValDate() {
        if (getTransFldVlu() != null && getTransFldType().compareTo(756) == 0) {
            try {
                final String OLD_FORMAT = "yyyy-MM-dd";
                final String NEW_FORMAT = "yyyy-MM-dd HH:mm:ss.SSS";
                String oldDateString = getTransFldVlu();
                String newDateString;

                DateFormat formatter = new SimpleDateFormat(OLD_FORMAT);
                Date d = formatter.parse(oldDateString);
                ((SimpleDateFormat) formatter).applyPattern(NEW_FORMAT);
                newDateString = formatter.format(d);
                // System.out.println(newDateString);

                Timestamp ts = Timestamp.valueOf(newDateString);
                //  System.out.println(ts);
                return (ts);
            } catch (Exception e) {
                // System.out.println("Exception  occured:::" + e);
            }
        }
        return (Timestamp) getAttributeInternal(TRANSFLDVALDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldValDate.
     * @param value value to set the  TransFldValDate
     */
    public void setTransFldValDate(Timestamp value) {
        if (value != null) {
            String date = value.toString();
            setTransFldVlu(date);
        }
        setAttributeInternal(TRANSFLDVALDATE, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldValNum.
     * @return the TransFldValNum
     */
    public Number getTransFldValNum() {
        Number val = new Number(0);
        if (getFldVal() != null && getTransFldType().compareTo(758) == 0) {
            try {
                val = new Number(getTransFldVlu());
            } catch (Exception e) {
                System.out.println("Exception  occured::" + e);
            }
            return (val);
        }
        return (Number) getAttributeInternal(TRANSFLDVALNUM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldValNum.
     * @param value value to set the  TransFldValNum
     */
    public void setTransFldValNum(Number value) {
        if (value != null) {
            String num = value.toString();
            setTransFldVlu(num);
        }
        setAttributeInternal(TRANSFLDVALNUM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldValString.
     * @return the TransFldValString
     */
    public String getTransFldValString() {
        if (getTransFldVlu() != null && getTransFldType().compareTo(757) == 0) {
            return (getTransFldVlu());
        }
        return (String) getAttributeInternal(TRANSFLDVALSTRING);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldValString.
     * @param value value to set the  TransFldValString
     */
    public void setTransFldValString(String value) {
        if (value != null) {
            setTransFldVlu(value);
        }
        setAttributeInternal(TRANSFLDVALSTRING, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldBol.
     * @return the TransFldBol
     */
    public String getTransFldBol() {
        if (getTransFldVlu() != null && getTransFldType().compareTo(759) == 0) {
            return (getTransFldVlu());
        }
        return (String) getAttributeInternal(TRANSFLDBOL);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldBol.
     * @param value value to set the  TransFldBol
     */
    public void setTransFldBol(String value) {
        if (value != null) {
            System.out.println("Value of Boll::" + value);
            setTransFldVlu(value);
        }
        setAttributeInternal(TRANSFLDBOL, value);
    }


    /**
     * Gets the attribute value for the calculated attribute TransFldReq.
     * @return the TransFldReq
     */
    public String getTransFldReq() {
        MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        if (getFldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", getCldId());
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFldId());
            if (rr.length > 0) {
                String req = (String) rr[0].getAttribute("Reqd");
                // System.out.println("value of type::" + type);
                return req;
            }
        }
        am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        if (getFldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", getCldId());
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFldId());
            if (rr.length > 0) {
                String req = (String) rr[0].getAttribute("Reqd");
                // System.out.println("value of type::" + type);
                return req;
            }
        }
        return (String) getAttributeInternal(TRANSFLDREQ);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldReq.
     * @param value value to set the  TransFldReq
     */
    public void setTransFldReq(String value) {
        setAttributeInternal(TRANSFLDREQ, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldLen.
     * @return the TransFldLen
     */
    public Number getTransFldLen() {
        MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        if (getFldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", getCldId());
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFldId());
            if (rr.length > 0) {
                Number len = (Number) rr[0].getAttribute("DataLen");
                // System.out.println("value of type::" + type);
                return len;
            }


        }
        am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        if (getFldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", getCldId());
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFldId());
            if (rr.length > 0) {
                Number len = (Number) rr[0].getAttribute("DataLen");
                // System.out.println("value of type::" + type);
                return len;
            }


        }
        return (Number) getAttributeInternal(TRANSFLDLEN);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransFldLen.
     * @param value value to set the  TransFldLen
     */
    public void setTransFldLen(Number value) {
        setAttributeInternal(TRANSFLDLEN, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransFldType.
     * @return the TransFldType
     */
    public Integer getTransFldType() {
        MmMatReqSlipAMImpl am = (MmMatReqSlipAMImpl) this.getApplicationModule();
        if (getFldId() != null) {
            //System.out.println("Value of fldid id:::" + getFldId());
            ViewObjectImpl fld = am.getAppFlxFld1();
            fld.setNamedWhereClauseParam("bindCldId", getCldId());
            fld.setNamedWhereClauseParam("bindDocId", new Number(18513));
            fld.executeQuery();
            Row rr[] = fld.getFilteredRows("FldId", getFldId());
            if (rr.length > 0) {
                Integer type = (Integer) rr[0].getAttribute("DataType");
                // System.out.println("value of type::" + type);
                return type;
            }


        }
        return (Integer) getAttributeInternal(TRANSFLDTYPE);
    }

    /**
     * Gets the view accessor <code>RowSet</code> AppFlxFldVO1.
     */
    public RowSet getAppFlxFldVO1() {
        return (RowSet) getAttributeInternal(APPFLXFLDVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

