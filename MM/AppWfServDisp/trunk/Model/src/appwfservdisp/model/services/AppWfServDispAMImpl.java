package appwfservdisp.model.services;


import appwfservdisp.model.services.common.AppWfServDispAM;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 07 12:32:10 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppWfServDispAMImpl extends ApplicationModuleImpl implements AppWfServDispAM {
    /**
     * This is the default constructor (do not remove).
     */
    public AppWfServDispAMImpl() {
    }
    String org_id = "01";
    String cld_id = "0000";
    Integer user_id = 0;
    Integer sloc_id = 0;
    Integer doc_id = 0;
    String wf_id = "";
    Integer amount = 0;
    Integer doc_type_id = 0;
    String doc_txn_id = "";
    private static int NUMBER = Types.INTEGER;
    private static ADFLogger _log = (ADFLogger)ADFLogger.createADFLogger(AppWfServDispAMImpl.class);


    /**
     * Container's getter for AppWfServDisp1.
     * @return AppWfServDisp1
     */
    public ViewObjectImpl getAppWfServDisp1() {
        return (ViewObjectImpl) findViewObject("AppWfServDisp1");
    }


    public void loadOn() {
        System.out.println("in load on mnethod");
        ViewObjectImpl appWfServDisp1 = this.getAppWfServDisp1();

        appWfServDisp1.setNamedWhereClauseParam("BindCldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        System.out.println("cld is is:::::::::::::::::::::" + resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        Integer doc_id = Integer.parseInt(resolvEl("#{pageFlowScope.Doc_id}").toString());
        appWfServDisp1.setNamedWhereClauseParam("BindDocId", doc_id);
        System.out.println("doc id is---------------->" + doc_id);
        appWfServDisp1.setNamedWhereClauseParam("BindDocTypId",
                                                Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString()));
        System.out.println("doctype  id is---------------->" +
                           Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString()));
        appWfServDisp1.setNamedWhereClauseParam("BindOrgId", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        appWfServDisp1.setNamedWhereClauseParam("BindSlocId",
                                                Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        appWfServDisp1.setNamedWhereClauseParam("BindTxnDocId", resolvEl("#{pageFlowScope.Doc_txn_id}").toString());
        //        appWfServDisp1.setNamedWhereClauseParam("BindTxnDocId", "doca_id");
        System.out.println("tax id----------------------->" + resolvEl("#{pageFlowScope.Doc_txn_id}").toString());

        appWfServDisp1.executeQuery();

    }

    public Integer getLevel() {
        if (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}") != null)
            org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        System.out.println("org_id is" + org_id);
        cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        System.out.println("value of cld id is" + org_id);
        user_id = Integer.parseInt((resolvEl("#{pageFlowScope.GLBL_APP_USR}")).toString());
        sloc_id = Integer.parseInt((resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}")).toString());
        wf_id = resolvEl("#{pageFlowScope.WF_ID}").toString();
        amount = Integer.parseInt(resolvEl("#{pageFlowScope.Amount}").toString());
        doc_type_id = Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString());
        doc_id = Integer.parseInt(resolvEl("#{pageFlowScope.Doc_id}").toString());
        System.out.println("sloc_id is" + sloc_id);
        System.out.println("org id is" + org_id);
        System.out.println("cld_idis" + cld_id);
        System.out.println("doc_id is" + doc_id);
        System.out.println(" doc_type_id is" + doc_type_id);
        Integer lvl = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_TOP_LVL(?,?,?,?)", new Object[] {
                                                          sloc_id, cld_id, org_id, wf_id
        }).toString());
        System.out.println("total no of level is" + lvl);
        return lvl;


    }
    String s = "";
    
    
    
    public Integer getWfCurrentLevel(){
        
        doc_txn_id = resolvEl("#{pageFlowScope.Doc_txn_id}").toString();
        System.out.println("doc_txn_id is" + doc_txn_id);
        Integer currLvl = 0;

        _log.info("slocid:" + sloc_id + "orgid::" + org_id + "cldid::" + cld_id + "doc_id::" + doc_id +
                           "doctxn::" + doc_txn_id + "index:: doc_type_id::" + doc_type_id);
        try{
            
            Object lvl= callStoredFunction(Types.INTEGER, "APP.WF_GET_CUR_LVL(?,?,?,?,?,?)", new Object[] {
                                                sloc_id, cld_id,org_id,  doc_id, doc_txn_id, doc_type_id
                         });
            if(lvl!=null){
                currLvl = (Integer)lvl;
            }
            _log.info(" current level "+currLvl);
            System.out.println(" current level "+currLvl);
        }catch(Exception e){
            e.printStackTrace();
        }
        _log.info(" current 33  level "+currLvl);
        return currLvl;
    }

    public String getWfAction(Integer index) {
        doc_txn_id = resolvEl("#{pageFlowScope.Doc_txn_id}").toString();
        System.out.println("doc_txn_id is" + doc_txn_id);
        System.out.println("index is" + index);
        String s = "P";
        Integer currLvl = 0;
        System.out.println("slocid:" + sloc_id + "orgid::" + org_id + "cldid::" + cld_id + "doc_id::" + doc_id +
                           "doctxn::" + doc_txn_id + "index::" + index + "doc_type_id::" + doc_type_id);
        _log.info("slocid:" + sloc_id + "orgid::" + org_id + "cldid::" + cld_id + "doc_id::" + doc_id +
                           "doctxn::" + doc_txn_id + "index::" + index + "doc_type_id::" + doc_type_id);
      
        try{
                s = callStoredFunction(Types.VARCHAR, "APP.WF_get_lvl_action(?,?,?,?,?,?,?)", new Object[] {
                                       sloc_id, org_id, cld_id, doc_id, doc_txn_id, index, doc_type_id
                }).toString();
        }catch(Exception e){
            e.printStackTrace();
        }
        System.out.println("String to return is " + s);
        _log.info("String to return is " + s);
        if (s != null) {
            System.out.println("if part");
            return s.toString();
        } else {
            System.out.println(" else part : ");
        }
        //        return "P";
        return s;
    }


    private Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        // System.out.println("In resolvel="+valueExp.getValue(elContext));
        Object msg = valueExp.getValue(elContext);
        return msg;
    }


    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    //   System.out.println("bindVars " + z + " " + bindVars[z]);
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //  System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (Exception e) {
            e.printStackTrace();
            //   System.out.println("In Exception exch and Op and generate-->");

            String msg = e.getMessage();
            //  System.out.println(msg);
            FacesMessage ermsg = new FacesMessage(msg);
            ermsg.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext.getCurrentInstance().addMessage(null, ermsg);
            return null;
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }

    }
    String txnHist = null;
    ArrayList remarksAl = new ArrayList();


    public ArrayList wfHistory() {
        //        String txnHist = null;

        char[] ch;
        int chLen = 0;
        System.out.println("IN WFhISTORY METHOD");
        Integer index = 0;
        ViewObject vo = this.getAppWfServDisp1();
        if (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}") != null)
            org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        System.out.println("org_id is" + org_id);
        cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        System.out.println("value of cld id is" + org_id);
        sloc_id = Integer.parseInt((resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}")).toString());
        wf_id = resolvEl("#{pageFlowScope.WF_ID}").toString();
        doc_type_id = Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString());
        doc_id = Integer.parseInt(resolvEl("#{pageFlowScope.Doc_id}").toString());
        doc_txn_id = resolvEl("#{pageFlowScope.Doc_txn_id}").toString();
        RowQualifier rq = new RowQualifier("OrgId='" + org_id + "' AND CldId='" + cld_id + "' AND SlocId=" + sloc_id);
        Row[] r = this.getAppWfServDisp1().getFilteredRows(rq);

        Integer rLen = r.length;
        System.out.println("length of row is" + rLen);

        if (rLen > 0) {
            System.out.println("executing wfHistory Method");
            for (int j = 0; j < rLen; j++) {

                //                System.out.print(r[j]);
                //                if (r[j].toString() != (doc_txn_id)) {
                //                    System.out.println("index is::::::::::::::::" + j);
                System.out.println("remarks TxnHist : " + r[j].getAttribute("TxnHist"));
                txnHist = r[j].getAttribute("TxnHist").toString();
                remarksAl.add(txnHist);


            }
        } else {
            System.out.println("not executing");
        }

        return remarksAl;
    }

    /**
     * Container's getter for AppWfAtch1.
     * @return AppWfAtch1
     */
    public ViewObjectImpl getAppWfAtch1() {
        return (ViewObjectImpl) findViewObject("AppWfAtch1");
    }

    /**
     * Container's getter for LovUser1.
     * @return LovUser1
     */
    public ViewObjectImpl getLovUser1() {
        return (ViewObjectImpl) findViewObject("LovUser1");
    }

    public void uploadFileExecute() {
        ViewObjectImpl vw = this.getAppWfAtch1();

        System.out.println("bindCldId" + resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());

        vw.setNamedWhereClauseParam("bindCldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        System.out.println("bindOrgId" + resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        vw.setNamedWhereClauseParam("bindOrgId", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        System.out.println("bindDocId" + Integer.parseInt(resolvEl("#{pageFlowScope.Doc_id}").toString()));
        vw.setNamedWhereClauseParam("bindDocId", Integer.parseInt(resolvEl("#{pageFlowScope.Doc_id}").toString()));
        System.out.println("bindDocTxnId" +
                           Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        vw.setNamedWhereClauseParam("bindDocTxnId", resolvEl("#{pageFlowScope.Doc_txn_id}").toString());
        System.out.println("bindSlocId" + Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        vw.setNamedWhereClauseParam("bindSlocId",
                                    Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        System.out.println(Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString()));
        vw.setNamedWhereClauseParam("bindDocTypeId",
                                    Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString()));
        vw.executeQuery();
        
        
        this.getAppWfRemarks().setNamedWhereClauseParam("SlocIdBind", Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString()));
        this.getAppWfRemarks().setNamedWhereClauseParam("CldIdBind", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
        this.getAppWfRemarks().setNamedWhereClauseParam("OrgIdBind", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        this.getAppWfRemarks().setNamedWhereClauseParam("DocIdBind", Integer.parseInt(resolvEl("#{pageFlowScope.Doc_id}").toString()));
        this.getAppWfRemarks().setNamedWhereClauseParam("TxnDocIdBind", resolvEl("#{pageFlowScope.Doc_txn_id}").toString());
        this.getAppWfRemarks().setNamedWhereClauseParam("DocTypeId", Integer.parseInt(resolvEl("#{pageFlowScope.Doc_type_id}").toString()));
        this.getAppWfRemarks().executeQuery();

    }


    /**
     * Container's getter for AppWfRemarks1.
     * @return AppWfRemarks1
     */
    public ViewObjectImpl getAppWfRemarks() {
        return (ViewObjectImpl) findViewObject("AppWfRemarks");
    }
}

