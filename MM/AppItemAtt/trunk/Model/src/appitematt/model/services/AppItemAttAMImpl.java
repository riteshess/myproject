package appitematt.model.services;

import appitematt.model.services.common.AppItemAttAM;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat May 03 18:06:41 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AppItemAttAMImpl extends ApplicationModuleImpl implements AppItemAttAM {
    /**
     * This is the default constructor (do not remove).
     */
   private static ADFLogger adfLog = (ADFLogger)ADFLogger.createADFLogger(AppItemAttAMImpl.class);
    public AppItemAttAMImpl() {
    }

    /**
     * Container's getter for AppItmAttType1.
     * @return AppItmAttType1
     */
    public ViewObjectImpl getAppItmAttType1() {
        return (ViewObjectImpl)findViewObject("AppItmAttType1");
    }

    /**
     * Container's getter for AppItmAttVal1.
     * @return AppItmAttVal1
     */
    public ViewObjectImpl getAppItmAttVal1() {
        return (ViewObjectImpl)findViewObject("AppItmAttVal1");
    }

    /**
     * Container's getter for AttItmTypValVL1.
     * @return AttItmTypValVL1
     */
    public ViewLinkImpl getAttItmTypValVL1() {
        return (ViewLinkImpl)findViewLink("AttItmTypValVL1");
    }
    
    
    public void doCommit()
    {
        String cldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocId= resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        String hoorgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String orgId= resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
       
        ViewObjectImpl vo = this.getAppItmAttType1();
         Row row = vo.getCurrentRow();
          
          String AttId =(String)callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_ID(?,?,?,?,?)", new Object[] {slocId,cldId,hoorgId,orgId,"APP$ITM$ATT$TYPE"});
          adfLog.info("row.getAttribute(\"AttTypeId\")  "+row.getAttribute("AttTypeId"));
          adfLog.info("AttId     "+AttId);
          if(row.getAttribute("AttTypeId")==null){
              row.setAttribute("AttTypeId", AttId);
          }
        adfLog.info("  after setrow.getAttribute(\"AttTypeId\")  "+row.getAttribute("AttTypeId"));
       /*  if(AttId != null)
        {row.setAttribute("AttTypeId", AttId);}
         */
           
        if(row.getAttribute("ItmIdPfxPos") == null || row.getAttribute("ItmIdPfxPos").toString().length() <=0)
        {
            Integer PId =(Integer)callStoredFunction(Types.INTEGER, "APP.FN_GEN_MAX_ATT_TYPE_PRIORITY(?,?,?)", new Object[] {cldId,slocId,hoorgId});
            row.setAttribute("ItmIdPfxPos",PId); 
        }
        /* else
        {
           Integer ival = (Integer)row.getAttribute("ItmIdPfxPos");
           row.setAttribute("ItmIdPfxPos",ival);
           
           RowQualifier rq = new  RowQualifier(vo);
            rq.setWhereClause("CldId = '"+cldId+"' AND SlocId = "+Integer.parseInt(slocId)+" AND HoOrgId = '"+hoorgId+"' AND ItmIdPfxPos >= "+ival+"");
            Row rows[] = vo.getFilteredRows(rq);
            
            System.out.println("Length : "+rows.length);
            for(Row rw:rows)
            {
                if(rw != row)
                {
                Integer val =(Integer)rw.getAttribute("ItmIdPfxPos");
                 val=val+1;
                rw.setAttribute("ItmIdPfxPos", val);   
               }
            }
        } */
    } 
    
    
    public void doBeforeAttValCommit()
    {
        
         String cldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String slocId= resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}");
        String hoorgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String orgId= resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
       
       ViewObjectImpl vo = this.getAppItmAttVal1();
       Row row = vo.getCurrentRow();
       
       if(row != null && row.getAttribute("AttId")==null){
       
        String AttId =(String)callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_ID(?,?,?,?,?)", new Object[] {slocId,cldId,hoorgId,orgId,"APP$ITM$ATT$VAL"});
        if(AttId != null)
        {row.setAttribute("AttId", AttId);} 
        
        
        ViewObjectImpl voAttType = this.getAppItmAttType1();
        Row rw = voAttType.getCurrentRow();
        String isSeq = (String)rw.getAttribute("IsSeq");
        String useGrp = (String)rw.getAttribute("UseGrp");
        
        
        String prefix=null;
        
        if(isSeq == null){isSeq="N";}
        if(useGrp == null){useGrp="N";}
        
        if( (isSeq.equals("Y") && useGrp.equals("Y")) ||  (isSeq.equals("Y") && useGrp.equals("N")))
        {
            prefix = (String)row.getAttribute("AttValPfx");
            String AttValId =(String)callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_ID(?,?,?,?,?,?)", new Object[] {slocId,cldId,hoorgId,orgId,"APP$ITM$ATT$VAL_VALUE",prefix});
            row.setAttribute("AttVal", AttValId);
        }
        
       }//end if(row != null)
   }
    
    
    private String resolvEl(String data) {
          FacesContext fc = FacesContext.getCurrentInstance();
          Application app = fc.getApplication();
          ExpressionFactory elFactory = app.getExpressionFactory();
          ELContext elContext = fc.getELContext();
          ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
          String msg = valueExp.getValue(elContext).toString();
          return msg;
      }
    
    
    
    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
           // System.out.println("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Container's getter for LovItmGrp1.
     * @return LovItmGrp1
     */
    public ViewObjectImpl getLovItmGrp1() {
        return (ViewObjectImpl)findViewObject("LovItmGrp1");
    }
    
    
    public Integer getAttValRowCount()
    {
        ViewObjectImpl vo = this.getAppItmAttVal1();
        Integer iVal=vo.getRowCount();
        return iVal;
    }
    
    
    
    public void defaultView()
    {
        String cldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId= Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String hoorgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        
        ViewObjectImpl vo = this.getAppItmAttType1();
        ViewCriteria vc=getAppItmAttType1().getViewCriteria("AppItmAttTypeVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindHoOrgId", hoorgId);
        vo.executeQuery();
    }
    
    
    
    public Integer checkAttUseInItm()
    {
        String cldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId= Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String hoorgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl vo = this.getAppItmAttVal1();
        Row row = vo.getCurrentRow();
        
        if(row != null){
        
         String val = (String)row.getAttribute("AttId");
         Integer iVal =(Integer)callStoredFunction(Types.INTEGER, "APP.FN_CHK_ATT_USE_IN_ITM(?,?,?,?)", new Object[] {cldId,slocId,hoorgId,val});
         return iVal;
        }
      return 1;
    }
    
    
    
    public boolean isAttTypeExist(String attType)
    {
        String cldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId= Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String hoorgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl vo = this.getAppItmAttType1();
        
       /*  vo.setNamedWhereClauseParam("bindCldId", cldId);
        vo.setNamedWhereClauseParam("bindSlocId", slocId);
        vo.setNamedWhereClauseParam("bindHoOrgId", hoorgId);
        vo.executeQuery(); */
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("HoOrgId = '"+hoorgId+"' and CldId = '"+cldId+"' and SlocId ="+slocId+" and AttTypeNm ='"+attType.trim()+"' ");
        
     //   Row rows[] = vo.getFilteredRows("AttTypeNm", attType.trim());
        Row[] rows = this.getAppItmAttType1().getFilteredRows(rq);
        adfLog.info(" row lenth "+rows.length+"   atttype "+attType );
        adfLog.info("att----   "+rq.getExprStr());
        if(rows.length>1)
         {return Boolean.TRUE;}
            
    return Boolean.FALSE;
    }
    
    public String isAttPrefixReq(){
        ViewObjectImpl vo = this.getAppItmAttType1();
        Row row = vo.getCurrentRow();
        String retV="N";
        if(row.getAttribute("IsSeq")!=null){
            
            if("Y".equalsIgnoreCase(row.getAttribute("IsSeq").toString())){
                adfLog.info("ret value  test  ");
                if(row.getAttribute("AttValPfx")==null || row.getAttribute("AttValPfx").toString().length()<1){
                    retV="Y";
                    adfLog.info("ret value  test  ");
                }
            }
        }
        adfLog.info("ret value  "+retV);
        return retV;
    }
    
    
    
    public boolean isAttValueExist(String attValue)
    {
        String cldId= resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId= Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String hoorgId= resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        ViewObjectImpl vo = this.getAppItmAttVal1();
        Row rows[] = vo.getFilteredRows("AttVal", attValue.trim());
        if(rows.length>0)
         {return Boolean.TRUE;}
            
    return Boolean.FALSE;
    }
    public void searchAtt(){
        ViewObjectImpl transVo = this.getSerachDual();
        Row curr = transVo.getCurrentRow();
        ViewObjectImpl attTypVo = this.getAppItmAttType1();
        String attName =null;
        if(curr.getAttribute("TransItmAttNm")!=null){
            attName= curr.getAttribute("TransItmAttNm").toString();
            
        }
        ViewCriteria vc = getAppItmAttType1().getViewCriteria("AppItmAttTypeVOCriteria1");
        attTypVo.applyViewCriteria(vc);
        attTypVo.setNamedWhereClauseParam("bindHoOrgId", curr.getAttribute("TransHoOrgId").toString());
        attTypVo.setNamedWhereClauseParam("bindCldId", curr.getAttribute("TransCldId").toString());
        attTypVo.setNamedWhereClauseParam("bindSlocId", Integer.parseInt(curr.getAttribute("TransSlocId").toString()));
        attTypVo.setNamedWhereClauseParam("AttTypeNmBind", attName);
        attTypVo.executeQuery();
    }
    
    
    public void resetSearch(){
        ViewObjectImpl transVo = this.getSerachDual();
        Row curr = transVo.getCurrentRow();
        ViewObjectImpl attTypVo = this.getAppItmAttType1();
        ViewCriteria vc = getAppItmAttType1().getViewCriteria("AppItmAttTypeVOCriteria1");
        attTypVo.applyViewCriteria(vc);
        attTypVo.setNamedWhereClauseParam("bindHoOrgId", curr.getAttribute("TransHoOrgId").toString());
        attTypVo.setNamedWhereClauseParam("bindCldId", curr.getAttribute("TransCldId").toString());
        attTypVo.setNamedWhereClauseParam("bindSlocId", Integer.parseInt(curr.getAttribute("TransSlocId").toString()));
        attTypVo.setNamedWhereClauseParam("AttTypeNmBind", null);
        attTypVo.executeQuery();
    }
    
    public void setPrefixValue(){
        ViewObjectImpl attTypVo = this.getAppItmAttType1();
        ViewObjectImpl attVal = this.getAppItmAttVal1();
        Row currVal = attVal.getCurrentRow();
        Row curr = attTypVo.getCurrentRow();
        if(curr.getAttribute("IsSeq")!=null){
            adfLog.info("Inside function  setPrefixValue");
            if("Y".equalsIgnoreCase(curr.getAttribute("IsSeq").toString())){
                if(curr.getAttribute("AttValPfx")!=null){
                    adfLog.info("value of prefix        "+curr.getAttribute("AttValPfx").toString());
                currVal.setAttribute("AttValPfx", curr.getAttribute("AttValPfx").toString());
                }
            }
        }
    }
    
    public String isDuplicateCode(String code){
        ViewObjectImpl attType = this.getAppItmAttType1();
        Row currAtt = attType.getCurrentRow();
        ViewObjectImpl attVal = this.getAppItmAttVal1();
        Row currVal = attVal.getCurrentRow();
        Row []rr = attVal.getFilteredRows("AttShrtCd", code);
        adfLog.info(" rr code length  "+rr.length);
        String retVal="N";
        int count =0;
        if(rr.length>0){
            for(Row r :rr){
                adfLog.info("code lenth in row------");
                if(r!=currVal){
                    adfLog.info("code not current row");
                   count=count+1; 
                }
            }
            
        }
        if(count>0){
        retVal="Y";
        }
       
        return retVal;
    }
    
    public String isDuplicateValue(String value){
        ViewObjectImpl attType = this.getAppItmAttType1();
        Row currAtt = attType.getCurrentRow();
        ViewObjectImpl attVal = this.getAppItmAttVal1();
        Row currVal = attVal.getCurrentRow();
        Row []rr = attVal.getFilteredRows("AttVal", value);
        adfLog.info(" rr value length  "+rr.length);
        String retVal="N";
        int count =0;
        if(rr.length>0){
            for(Row r :rr){
                adfLog.info("length in row value------");
                if(r!=currVal){
                    adfLog.info("value not current row222");
                   count=count+1; 
                }
            }
            
        }
        if(count>0){
        retVal="Y";
        }
        return retVal;
    }

    /**
     * Container's getter for SerachDual.
     * @return SerachDual
     */
    public ViewObjectImpl getSerachDual() {
        return (ViewObjectImpl)findViewObject("SerachDual");
    }
    
}
