package mmscrapsales.model.services;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.Date;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 04 14:38:38 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmScrapSalesAMImpl extends ApplicationModuleImpl {
    /**
     * This is the default constructor (do not remove).
     */
    public MmScrapSalesAMImpl() {
    }

    /**
     * Container's getter for MmScrpSlsItm.
     * @return MmScrpSlsItm
     */
    public ViewObjectImpl getMmScrpSlsItm() {
        return (ViewObjectImpl) findViewObject("MmScrpSlsItm");
    }
    private static ADFLogger adflog = ADFLogger.createADFLogger(MmScrapSalesAMImpl.class);

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
    String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();


    /**
     * Container's getter for MmScrpSlsLot.
     * @return MmScrpSlsLot
     */
    public ViewObjectImpl getMmScrpSlsLot() {
        return (ViewObjectImpl) findViewObject("MmScrpSlsLot");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Container's getter for MmScrpSlsSr.
     * @return MmScrpSlsSr
     */
    public ViewObjectImpl getMmScrpSlsSr() {
        return (ViewObjectImpl) findViewObject("MmScrpSlsSr");
    }

    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {

        adflog.info("cldid " + CldId + " sloc id " + SlocId + " orgId " + OrgId + " usrId  " + UsrId);
        Row currentRow = this.getMmScrpSls().getCurrentRow();

        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        // String txnId = (String)callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?)", new Object[]{SlocId,CldId,OrgId,tableName});
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18528), new Integer(0)
        })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        Integer fyId = -1;
        if (getMmScrpSls().getCurrentRow().getAttribute("DocDt") != null) {
            fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                 CldId, OrgId, getMmScrpSls().getCurrentRow().getAttribute("DocDt")
            }));
        } else {
            fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                 CldId, OrgId, getMmScrpSls().getCurrentRow().getAttribute("DocDt")
            }));
        }

        //adflog.info("txn id is "+docId+"fyId is "+fyId);
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("FyId", fyId);
        String WhId = resolvEl("#{pageFlowScope.PARAM_USR_WH_ID}").toString();
        String WhChk = resolvEl("#{pageFlowScope.GLBL_ORG_WH_CHK}").toString();
        System.out.println("WhId" + " " + WhId + " " + "WhChk" + " " + WhChk);
        if ("Y".equals(WhChk))
            currentRow.setAttribute("WhId", WhId);
        if ("N".equals(WhChk))
            currentRow.setAttribute("WhId", "0");


    }

    public String addScrpItmRcrd() {
        Row slsCurr = getMmScrpSls().getCurrentRow();
        if (slsCurr != null) {

            //  adflog.info("item Id"+slsCurr.getAttribute("TransItmId")+"uom"+slsCurr.getAttribute("TransUomBs")+"map price "+slsCurr.getAttribute("TransMapPrice"));
            Row r1 = getMmScrpSlsItm1().createRow();

            if (r1 != null) {
                r1.setAttribute("ItmId", slsCurr.getAttribute("TransItmId"));
                r1.setAttribute("ItmUomBs", slsCurr.getAttribute("TransUomBs"));
                r1.setAttribute("MapPrice", (Number) slsCurr.getAttribute("TransMapPrice"));
                r1.setAttribute("WapPrice", (Number) slsCurr.getAttribute("TransWapPrice"));
                //  r1.setAttribute("TranItmNm", slsCurr.getAttribute("TransItmNm"));

            }
            getMmScrpSlsItm1().insertRow(r1);
            //getMmScrpSlsItm1().executeQuery();
            //  getMmScrpSls().executeQuery();
            slsCurr.setAttribute("TransItmId", null);
            slsCurr.setAttribute("TransUomBs", null);
            slsCurr.setAttribute("TransMapPrice", null);
            slsCurr.setAttribute("TransWapPrice", null);

        }

        return null;
    }

    public String filterLotorSr() {
        Row curr1 = this.getMmScrpSlsItm1().getCurrentRow();
        if (curr1 != null) {
            String SrFlg = curr1.getAttribute("TransSrFlg").toString();
            //  adflog.info("trans flag value found "+SrFlg+" itm id "+curr1.getAttribute("ItmId")+" whId "+curr1.getAttribute("WhId"));
            if ("Y".equalsIgnoreCase(SrFlg)) {
                ViewObjectImpl summSrVo = this.getLovStkSummSr();
                summSrVo.setNamedWhereClauseParam("bindCldId", cldId);
                summSrVo.setNamedWhereClauseParam("bindOrgId", orgId);
                summSrVo.setNamedWhereClauseParam("bindSlocId", slocId);
                summSrVo.setNamedWhereClauseParam("Bindwhid", curr1.getAttribute("WhId"));
                summSrVo.setNamedWhereClauseParam("bindItmId", curr1.getAttribute("ItmId"));
                summSrVo.executeQuery();
            } else if ("N".equalsIgnoreCase(SrFlg)) {
                ViewObjectImpl summLotVo = this.getlovStkSummLot();
                summLotVo.setNamedWhereClauseParam("bindCldId", cldId);
                summLotVo.setNamedWhereClauseParam("bindOrgId", orgId);
                summLotVo.setNamedWhereClauseParam("bindSlocId", slocId);
                summLotVo.setNamedWhereClauseParam("bindWhId", curr1.getAttribute("WhId"));
                summLotVo.setNamedWhereClauseParam("bindItmId", curr1.getAttribute("ItmId"));
                summLotVo.executeQuery();

            }
        }

        return null;
    }

    public String itmQtyBaseValid(Number itmBsQty) {
        String itmId = null;
        String flag = null;

        Row curr1 = this.getMmScrpSlsItm1().getCurrentRow();
        if (curr1.getAttribute("ItmId") != null) {
            getLovStkSummItm().setNamedWhereClauseParam("BindCldId",
                                                        this.getMmScrpSls().getCurrentRow().getAttribute("CldId"));
            getLovStkSummItm().setNamedWhereClauseParam("BindSlocId",
                                                        this.getMmScrpSls().getCurrentRow().getAttribute("SlocId"));
            getLovStkSummItm().setNamedWhereClauseParam("BindOrgId",
                                                        this.getMmScrpSls().getCurrentRow().getAttribute("OrgId"));
            getLovStkSummItm().setNamedWhereClauseParam("bindWhId",
                                                        this.getMmScrpSls().getCurrentRow().getAttribute("WhId"));
            getLovStkSummItm().executeQuery();
            Row[] rr1 = getLovStkSummItm().getFilteredRows("ItmId", curr1.getAttribute("ItmId"));
            //  adflog.info("filter rows length with itm id "+rr1.length+curr1.getAttribute("ItmId"));
            System.out.println("rr1 length" + rr1.length);
            if (rr1.length > 0) {
                Number avlStk = (Number) rr1[0].getAttribute("ScrpStk");

                if (itmBsQty.compareTo(avlStk) == 0 || itmBsQty.compareTo(avlStk) == -1) {
                    flag = "Y";
                    System.out.println("inside item result Y");
                } else if (itmBsQty.compareTo(avlStk) == 1) {
                    flag = "N";
                    System.out.println("inside item result N");
                } else {
                    flag = "Y";
                    System.out.println(" Else inside item result Y");
                }
                // adflog.info("Available stk "+avlStk+" flag value is "+flag+" itmBsQty.compareTo(avlStk) "+itmBsQty.compareTo(avlStk));
            }

        }

        return flag;
    }

    public String validQuantityCheck() {
        Row r1 = this.getMmScrpSlsItm1().getCurrentRow();
        String flag = null;
        String srFlg = null;
        Number count = new Number(0);
        if (r1 != null) {
            Number itmqty = (Number) r1.getAttribute("ItmQtyBs");
            srFlg = r1.getAttribute("TransSrFlg").toString();

            if ("N".equalsIgnoreCase(srFlg)) {
                ViewObjectImpl lotvo = this.getlovStkSummLot();
                RowSetIterator rwitr = lotvo.createRowSetIterator(null);
                while (rwitr.hasNext()) {
                    Row r2 = rwitr.next();
                    if (r2.getAttribute("TransItmQty") != null) {
                        Number qty = (Number) r2.getAttribute("TransItmQty");
                        count = count.add(qty);
                    }
                }
                rwitr.closeRowSetIterator();
                // adflog.info("available qty given item quantity "+itmqty+" total qty after summ "+count+"and the comaprison"+count.compareTo(itmqty));
                if (count.compareTo(itmqty) == 0) {
                    flag = "Y";
                } else if (count.compareTo(itmqty) == 1 || count.compareTo(itmqty) == -1) {
                    flag = "N";
                }

            } else if ("Y".equalsIgnoreCase(srFlg)) {
                ViewObjectImpl srvo = this.getLovStkSummSr();
                RowSetIterator rwitr = srvo.createRowSetIterator(null);
                while (rwitr.hasNext()) {
                    Row r2 = rwitr.next();
                    //        adflog.info("trans itm value is "+r2.getAttribute("transcrpqty"));
                    if (r2.getAttribute("transcrpqty") != null && (Boolean) r2.getAttribute("transcrpqty") != false) {
                        // Number qty=(Number)r2.getAttribute("TransItmQty");
                        count = count.add(new Number(1));
                    }
                }
                rwitr.closeRowSetIterator();
                //  adflog.info("available qty given item quantity "+itmqty+" total qty after summ "+count+"and the comaprison"+count.compareTo(itmqty));
                if (count.compareTo(itmqty) == 0) {
                    flag = "Y";
                } else if (count.compareTo(itmqty) == 1 || count.compareTo(itmqty) == -1) {
                    flag = "N";
                }
            }

        }
        //adflog.info("flag value is "+flag);
        return flag;
    }

    public String insrtScrpStk() {
        Row r1 = this.getMmScrpSlsItm1().getCurrentRow();


        String flag = null;
        String srFlg = null;


        Number count = new Number(0);
        if (r1 != null) {
            srFlg = r1.getAttribute("TransSrFlg").toString();
            if ("N".equalsIgnoreCase(srFlg)) {
                ViewObjectImpl scrplotvo = this.getMmScrpSlsLot1();
                Row[] scrpLot = scrplotvo.getFilteredRows("ItmId", r1.getAttribute("ItmId"));
                // adflog.info("filtered rows length is found "+scrpLot.length);
                if (scrpLot.length == 0) {


                    ViewObjectImpl lotvo = this.getlovStkSummLot();
                    RowSetIterator rwitr = lotvo.createRowSetIterator(null);
                    while (rwitr.hasNext()) {
                        Row r2 = rwitr.next();
                        if (r2.getAttribute("TransItmQty") != null) {
                            Number qty = (Number) r2.getAttribute("TransItmQty");
                            Row scrpRow = scrplotvo.createRow();
                            scrpRow.setAttribute("ItmId", r1.getAttribute("ItmId"));
                            scrpRow.setAttribute("LotId", r2.getAttribute("LotId"));
                            scrpRow.setAttribute("LotQtyBs", qty);
                            scrplotvo.insertRow(scrpRow);

                        }
                    }
                    rwitr.closeRowSetIterator();

                } else if (scrpLot.length > 0) {
                    Number zero = new Number(0);
                    srFlg = r1.getAttribute("TransSrFlg").toString();
                    if ("N".equalsIgnoreCase(srFlg)) {
                        ViewObjectImpl lotvo = this.getlovStkSummLot();
                        RowSetIterator rwitr = lotvo.createRowSetIterator(null);
                        while (rwitr.hasNext()) {
                            Row r2 = rwitr.next();
                            if (r2.getAttribute("TransItmQty") != null &&
                                ((Number) r2.getAttribute("TransItmQty")).compareTo(zero) >= 0) {
                                RowQualifier rowQualifier = new RowQualifier(scrplotvo);
                                rowQualifier.setWhereClause("ItmId = '" + r1.getAttribute("ItmId") + "' AND LotId= '" +
                                                            r2.getAttribute("LotId") + "'");
                                Row[] rows = scrplotvo.getFilteredRows(rowQualifier);

                                adflog.info("" + rowQualifier.getExprStr());

                                if (rows.length > 0) {
                                    for (Row r111 : rows) {
                                        if (((Number) r2.getAttribute("TransItmQty")).compareTo(zero) == 0) {
                                            r111.remove();
                                        } else if (((Number) r2.getAttribute("TransItmQty")).compareTo(zero) > 0) {
                                            r111.setAttribute("LotQtyBs", (Number) r2.getAttribute("TransItmQty"));
                                        }

                                    }
                                } else {
                                    if (((Number) r2.getAttribute("TransItmQty")).compareTo(zero) > 0) {
                                        Row scrp2 = scrplotvo.createRow();
                                        scrp2.setAttribute("ItmId", r2.getAttribute("ItmId"));
                                        scrp2.setAttribute("LotId", r2.getAttribute("LotId"));
                                        scrp2.setAttribute("LotQtyBs", r2.getAttribute("TransItmQty"));
                                        scrplotvo.insertRow(scrp2);
                                        scrplotvo.executeQuery();
                                    }
                                }

                            } else {
                                r2.remove();
                            }
                        }
                        rwitr.closeRowSetIterator();
                    }
                }
            }
        }
        return null;
    }

    public String inserSrStock() {
        Row r1 = this.getMmScrpSlsItm1().getCurrentRow();


        String flag = null;
        String srFlg = null;


        Number count = new Number(0);
        if (r1 != null) {
            srFlg = r1.getAttribute("TransSrFlg").toString();

            if ("Y".equalsIgnoreCase(srFlg)) {
                ViewObjectImpl scrpsrvo = this.getMmScrpSlsSr1();
                ViewObjectImpl scrplotvo = this.getMmScrpSlsLot1();
                Row[] scrpsr = scrpsrvo.getFilteredRows("ItmId", r1.getAttribute("ItmId"));
                // adflog.info("filtered rows length is found "+scrpLot.length);
                if (scrpsr.length == 0) {


                    ViewObjectImpl summsrvo = this.getLovStkSummSr();
                    RowSetIterator rwitr = summsrvo.createRowSetIterator(null);
                    while (rwitr.hasNext()) {
                        Row r2 = rwitr.next();
                        if (r2.getAttribute("transcrpqty") != null &&
                            ((Boolean) r2.getAttribute("transcrpqty")) == true) {
                            RowQualifier rowQualifier1 = new RowQualifier(scrplotvo);
                            rowQualifier1.setWhereClause("ItmId = '" + r1.getAttribute("ItmId") + "'and DocId= '" +
                                                         r1.getAttribute("DocId") + "' AND LotId= '" +
                                                         r2.getAttribute("LotId") + "' AND CldId='" + cldId +
                                                         "' and OrgId ='" + orgId + "' and SlocId=" + slocId + "");
                            Row[] rows = scrplotvo.getFilteredRows(rowQualifier1);
                            /** code to update existing Record for particular lot */
                            adflog.info("filtred lot value is " + rows.length);

                            if (rows.length > 0) {
                                rows[0].setAttribute("LotQtyBs",
                                                     ((Number) rows[0].getAttribute("LotQtyBs")).add(new Number(1)));
                            } else if (rows.length == 0) {
                                adflog.info("lot is create first" + r2.getAttribute("LotId"));
                                Row scrplot = scrplotvo.createRow();
                                scrplot.setAttribute("ItmId", r1.getAttribute("ItmId"));
                                scrplot.setAttribute("LotId", r2.getAttribute("LotId"));
                                scrplot.setAttribute("LotQtyBs", new Number(1));
                                scrplotvo.insertRow(scrplot);
                            }
                            Row scrpRow = scrpsrvo.createRow();
                            scrpRow.setAttribute("ItmId", r1.getAttribute("ItmId"));
                            scrpRow.setAttribute("LotId", r2.getAttribute("LotId"));
                            scrpRow.setAttribute("SrNo", r2.getAttribute("SrNo"));
                            scrpRow.setAttribute("SrQty", new Number(1));
                            scrpsrvo.insertRow(scrpRow);
                        }
                    }
                    rwitr.closeRowSetIterator();
                }
                if (scrpsr.length > 0) {
                    Boolean val = true;
                    ViewObjectImpl srvo = this.getLovStkSummSr();
                    RowSetIterator rwitr = srvo.createRowSetIterator(null);
                    while (rwitr.hasNext()) {
                        Row r2 = rwitr.next();
                        if (r2.getAttribute("transcrpqty") != null) {
                            if (((Boolean) r2.getAttribute("transcrpqty")) == false ||
                                ((Boolean) r2.getAttribute("transcrpqty")) == true) {
                                RowQualifier rowQualifier = new RowQualifier(scrpsrvo);
                                rowQualifier.setWhereClause("ItmId = '" + r1.getAttribute("ItmId") + "' AND LotId= '" +
                                                            r2.getAttribute("LotId") + "'AND SrNo= '" +
                                                            r2.getAttribute("SrNo") + "'");
                                Row[] rows = scrpsrvo.getFilteredRows(rowQualifier);

                                adflog.info("" + rowQualifier.getExprStr());

                                if (rows.length > 0) {
                                    for (Row r111 : rows) {
                                        if (((Boolean) r2.getAttribute("transcrpqty")) == false) {
                                            r111.remove();
                                        } else if (((Boolean) r2.getAttribute("transcrpqty")) == true) {
                                            r111.setAttribute("SrQty", new Number(1));
                                        }

                                    }
                                } else {
                                    if (((Boolean) r2.getAttribute("transcrpqty")) == true) {
                                        RowQualifier rowQualifier1 = new RowQualifier(scrplotvo);
                                        rowQualifier1.setWhereClause("ItmId = '" + r1.getAttribute("ItmId") +
                                                                     "'and DocId='" + r1.getAttribute("DocId") +
                                                                     "' AND LotId= '" + r2.getAttribute("LotId") +
                                                                     "' AND CldId='" + cldId + "' and OrgId ='" +
                                                                     orgId + "' and SlocId=" + slocId + "");
                                        Row[] rows1 = scrplotvo.getFilteredRows(rowQualifier1);
                                        /** code to update existing Record for previously existing record lot */
                                        adflog.info("filtred lot value is " + rows1.length);
                                        if (rows1.length > 0) {
                                            adflog.info("going to update lot stock" + rows1[0].getAttribute("LotId"));
                                            rows1[0].setAttribute("LotQtyBs",
                                                                  ((Number) rows1[0].getAttribute("LotQtyBs")).add(new Number(1)));
                                        } else if (rows.length == 0) {
                                            adflog.info("lot is create first" + r2.getAttribute("LotId"));
                                            Row scrplot = scrplotvo.createRow();
                                            scrplot.setAttribute("ItmId", r1.getAttribute("ItmId"));
                                            scrplot.setAttribute("LotId", r2.getAttribute("LotId"));
                                            scrplot.setAttribute("LotQtyBs", new Number(1));
                                            scrplotvo.insertRow(scrplot);
                                        }
                                        Row scrp2 = scrpsrvo.createRow();
                                        scrp2.setAttribute("ItmId", r2.getAttribute("ItmId"));
                                        scrp2.setAttribute("LotId", r2.getAttribute("LotId"));
                                        scrp2.setAttribute("SrNo", r2.getAttribute("SrNo"));
                                        scrp2.setAttribute("SrQty", new Number(1));
                                        scrpsrvo.insertRow(scrp2);
                                        scrpsrvo.executeQuery();
                                    }
                                }

                            }
                        } else {
                            adflog.info("some rows found null");
                        }

                    }
                    rwitr.closeRowSetIterator();

                }
            }
        }
        return null;
    }

    public String setTransQuantity() {
        Row curr = this.getMmScrpSlsItm1().getCurrentRow();
        ViewObjectImpl scrpLot = this.getMmScrpSlsLot1();
        if (curr != null) {
            String srflg = curr.getAttribute("TransSrFlg").toString();
            if ("N".equalsIgnoreCase(srflg)) {
                Row[] filteredRows = scrpLot.getFilteredRows("ItmId", curr.getAttribute("ItmId"));
                adflog.info("row found in scrap lot is " + filteredRows.length + " current itm Id " +
                            curr.getAttribute("ItmId"));
                if (filteredRows.length > 0) {
                    for (Row r1 : filteredRows) {
                        String LotId = r1.getAttribute("LotId").toString();
                        String ItmId = r1.getAttribute("ItmId").toString();
                        Number scrpqty = (Number) r1.getAttribute("LotQtyBs");
                        adflog.info("atribute are " + LotId + "  " + ItmId + "  " + scrpqty);
                        RowQualifier rowQualifier = new RowQualifier(this.getlovStkSummLot());
                        rowQualifier.setWhereClause("LotId='" + LotId + "' AND ItmId= '" + ItmId + "'");
                        Row[] filtered = this.getlovStkSummLot().getFilteredRows(rowQualifier);
                        adflog.info("row found in lovstklot is " + filtered.length);
                        if (filtered.length > 0) {
                            filtered[0].setAttribute("TransItmQty", scrpqty);
                            adflog.info("lot quantity set for " + filtered[0].getAttribute("LotId") + "Itm id is " +
                                        filtered[0].getAttribute("ItmId"));
                        }

                    }
                }
            }
        }
        return null;
    }

    public String setsrQuantity() {
        Row curr = this.getMmScrpSlsItm1().getCurrentRow();
        Row curr1 = this.getMmScrpSls().getCurrentRow();
        String docid = curr1.getAttribute("DocId").toString();
        System.out.println("DocId:" + docid);
        ViewObjectImpl scrpsrvo = this.getMmScrpSlsSr();
        if (curr != null) {
            String srflg = curr.getAttribute("TransSrFlg").toString();
            if ("Y".equalsIgnoreCase(srflg)) {
                RowQualifier rowQualifier1 = new RowQualifier(this.getMmScrpSlsSr());
                rowQualifier1.setWhereClause("ItmId='" + curr.getAttribute("ItmId") + "' and DocId='" + docid + "'");
                Row[] filteredRows = scrpsrvo.getFilteredRows(rowQualifier1);
                {
                    if (filteredRows.length > 0) {
                        for (Row r1 : filteredRows) {
                            String LotId = r1.getAttribute("LotId").toString();
                            String ItmId = r1.getAttribute("ItmId").toString();
                            String srno = r1.getAttribute("SrNo").toString();

                            RowQualifier rowQualifier = new RowQualifier(this.getLovStkSummSr());
                            rowQualifier.setWhereClause("LotId='" + LotId + "' AND ItmId= '" + ItmId + "' AND SrNo ='" +
                                                        srno + "'");
                            Row[] filtered = this.getLovStkSummSr().getFilteredRows(rowQualifier);
                            System.out.println(rowQualifier.getExprStr() + " filter" + filtered.length);
                            if (filtered.length > 0) {
                                filtered[0].setAttribute("transcrpqty", true);
                            }
                        }
                    }
                }
            }
        }
        return null;
    }

    public String checkSaveRecord() {
        String flag = null;
        Row scrCurr = this.getMmScrpSls().getCurrentRow();
        ViewObjectImpl scrpItmVo = this.getMmScrpSlsItm1();
        ViewObjectImpl scrpSrvo = this.getMmScrpSlsSr();
        ViewObjectImpl scrpLotVo = this.getMmScrpSlsLot();
        if (scrCurr != null) {
            String docId = scrCurr.getAttribute("DocId").toString();

            Row[] filterRows = scrpItmVo.getFilteredRows("DocId", docId);
            ArrayList ar = new ArrayList();
            ArrayList ar2 = new ArrayList();

            if (filterRows.length > 0) {
                for (Row r1 : filterRows) {
                    String ItmId = r1.getAttribute("ItmId").toString();
                    String ItmName = r1.getAttribute("TranItmNm").toString();
                    Number rqrQty = (Number) r1.getAttribute("ItmQtyBs");
                    String srFlg = r1.getAttribute("TransSrFlg").toString();
                    Number ScrpPrice = (Number) r1.getAttribute("ScrpPrice");
                    adflog.info("ItmId " + ItmId + " quantity " + rqrQty + " srFlg " + srFlg);
                    if (srFlg != null) {
                        if ("Y".equalsIgnoreCase(srFlg)) {
                            RowQualifier rowQualifier = new RowQualifier(scrpSrvo);
                            rowQualifier.setWhereClause("ItmId='" + ItmId + "' AND DocId= '" + docId + "'");
                            Row[] filtered = scrpSrvo.getFilteredRows(rowQualifier);
                            if (filtered.length > 0) {
                                Number count = new Number(0);
                                for (Row r : filtered) {
                                    count = count.add(new Number(1));
                                }
                                if (count.compareTo(rqrQty) == 0) {

                                } else {

                                    ar.add(ItmName);
                                    //  adflog.info("some item has IMPROPER STOCK AVAILABLE"+ItmName);
                                }
                            } else {
                                ar.add(ItmName);
                                adflog.info("some item has blank record" + ItmName);
                            }
                        } else if ("N".equalsIgnoreCase(srFlg)) {
                            //      adflog.info("lot row no.  :::  "+scrpLotVo.getRowCount());
                            RowQualifier rowQualifier1 = new RowQualifier(scrpLotVo);
                            rowQualifier1.setWhereClause("ItmId='" + ItmId + "' AND DocId= '" + docId + "'");
                            Row[] filtered = scrpLotVo.getFilteredRows(rowQualifier1);
                            //  adflog.info("filter rows is "+filtered.length+ItmId+"exps string "+rowQualifier1.getExprStr()+" docid "+docId);
                            if (filtered.length > 0) {
                                Number count = new Number(0);
                                for (Row r : filtered) {
                                    count = count.add((Number) r.getAttribute("LotQtyBs"));
                                }
                                if (count.compareTo(rqrQty) == 0) {

                                } else {
                                    ar.add(ItmName);
                                    //        adflog.info("some item has IMPROPER STOCK AVAILABLE"+ItmName);
                                }
                            } else {
                                ar.add(ItmName);
                                //     adflog.info("some item non sr has blank record"+ItmName);
                            }
                        }
                        if (ScrpPrice.compareTo(new Number(0)) <= 0) {
                            ar2.add(ItmName);
                        }
                    }

                }
            }
            if (ar.isEmpty() && ar2.isEmpty()) {
                flag = "Y";
            } else if (!ar.isEmpty()) {
                flag = "N";
                //String msg="These Item has improper stock";
                String msg = resolvElDCMsg("#{bundle['MSG.2163']}").toString();

                FacesMessage message = new FacesMessage(msg + ar.toString());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);

            } else if (!ar2.isEmpty()) {
                flag = "N";
                //String msg="Some Item has Scrap Price zero";
                String msg = resolvElDCMsg("#{bundle['MSG.3041']}").toString();
                FacesMessage message = new FacesMessage(msg + ar2.toString());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);

            }
        }


        return flag;
    }


    public String genscrapId() {
        Row curr = this.getMmScrpSls().getCurrentRow();
        if (curr != null) {
            System.out.println("curr.getAttribute scrp sls id " + curr.getAttribute("ScrpSlsId"));
            if (curr.getAttribute("ScrpSlsId") != null) {

            } else {
                String whId = curr.getAttribute("WhId").toString();
                Integer fyId = Integer.parseInt(curr.getAttribute("FyId").toString());
                System.out.println(curr.getAttribute("SlocId") + " " + curr.getAttribute("CldId") + " " +
                                   curr.getAttribute("OrgId"));
                String scrapNo = (String) (callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?,?,?)", new Object[] {
                                                              slocId, cldId, orgId, "MM$SCRP$SLS", whId, fyId, 18508, 0
                }));
                System.out.println(curr.getAttribute("SlocId") + " " + curr.getAttribute("CldId") + " " +
                                   curr.getAttribute("OrgId"));
                if (scrapNo != null) {
                    curr.setAttribute("ScrpSlsId", scrapNo);
                }
            }
        }
        return null;
    }

    public String Deletelotrecord() {
        Row curr = this.getMmScrpSlsLot1().getCurrentRow();
        if (curr != null) {

            curr.remove();
            //  this.getMmScrpSlsLot1().executeQuery();
        }
        return null;
    }

    public String DeleteSrno() {
        ViewObjectImpl scrplotvo = this.getMmScrpSlsLot1();
        Row curr = this.getMmScrpSlsSr1().getCurrentRow();
        if (curr != null) {
            RowQualifier rowQualifier1 = new RowQualifier(scrplotvo);
            rowQualifier1.setWhereClause("ItmId = '" + curr.getAttribute("ItmId") + "'AND DocId='" +
                                         curr.getAttribute("DocId") + "' AND LotId= '" + curr.getAttribute("LotId") +
                                         "' AND CldId='" + cldId + "' and OrgId ='" + orgId + "' and SlocId=" + slocId +
                                         "");
            Row[] rows1 = scrplotvo.getFilteredRows(rowQualifier1);
            adflog.info("filtred lot value is " + rows1.length);

            if (rows1.length > 0) {
                if (((Number) rows1[0].getAttribute("LotQtyBs")).compareTo(new Number(0)) == 0) {
                    rows1[0].remove();

                } else {
                    //for(Row r1:rows1){
                    rows1[0].setAttribute("LotQtyBs",
                                          ((Number) rows1[0].getAttribute("LotQtyBs")).subtract(new Number(1)));
                    // }
                    adflog.info("now the quantity is " + rows1[0].getAttribute("LotQtyBs"));
                }

            }

            curr.remove();
            //    this.getMmScrpSlsSr1().executeQuery();
        }
        return null;
    }


    public String search() {
        Row r1 = getTransScrpSrch().getCurrentRow();
        if (r1 != null) {

            ViewObjectImpl srchVo = this.getSearchScrp();
            srchVo.setNamedWhereClauseParam("BindOrgId", r1.getAttribute("TransOrgId"));
            srchVo.setNamedWhereClauseParam("bindWhId", r1.getAttribute("TransWhId"));
            srchVo.setNamedWhereClauseParam("bindItmId", r1.getAttribute("TransItmId"));
            srchVo.setNamedWhereClauseParam("bindscrpId", r1.getAttribute("TransScrpId"));
            srchVo.setNamedWhereClauseParam("bindocStatus", r1.getAttribute("TransAuthStat"));
            srchVo.setNamedWhereClauseParam("bindDocDt", r1.getAttribute("TransDocDtFrm"));
            srchVo.setNamedWhereClauseParam("BindocDtTo", r1.getAttribute("TransDocTo"));
            srchVo.setNamedWhereClauseParam("bindEoId", r1.getAttribute("TransEoId"));
            //srchVo.setNamedWhereClauseParam("bindEoId", r1.getAttribute("TransEoId"));
            srchVo.setNamedWhereClauseParam("bindSlocId", r1.getAttribute("TransSlocId")); //TransSlocId
            srchVo.setNamedWhereClauseParam("bindCldId", r1.getAttribute("TransCldId"));
            srchVo.executeQuery();
        }

        return null;
    }

    public String resetSrch() {

        ViewObjectImpl srchVo = this.getSearchScrp();
        srchVo.setNamedWhereClauseParam("BindOrgId", "-1");
        srchVo.setNamedWhereClauseParam("bindWhId", null);
        srchVo.setNamedWhereClauseParam("bindItmId", null);
        srchVo.setNamedWhereClauseParam("bindscrpId", null);
        srchVo.setNamedWhereClauseParam("bindDocDt", null);
        srchVo.setNamedWhereClauseParam("bindocStatus", null);
        srchVo.setNamedWhereClauseParam("BindocDtTo", null);
        srchVo.setNamedWhereClauseParam("bindEoId", null);
        srchVo.setNamedWhereClauseParam("bindSlocId", "-1");
        srchVo.setNamedWhereClauseParam("bindCldId", "-1");
        srchVo.executeQuery();
        getTransScrpSrch().executeQuery();
        return null;
    }

    public String filterDocId(String DocId, String cldId, String orgId, Integer slocId) {
        adflog.info("cldId " + cldId + " orgId " + orgId + " slocId " + slocId + " docId " + DocId);
        ViewObjectImpl vo = this.getMmScrpSls();
        ViewCriteria vc = vo.getViewCriteria("MmScrpSlsVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("cldIdBind", cldId);
        vo.setNamedWhereClauseParam("slocIdBind", slocId);
        vo.setNamedWhereClauseParam("orgIdBind", orgId);
        vo.setNamedWhereClauseParam("docIdBind", DocId);
        vo.executeQuery();

        return null;
    }

    public String selectAllItem() {

        Row curr = this.getMmScrpSls().getCurrentRow();
        if (curr != null) {
            String whId = curr.getAttribute("WhId").toString();
            String DocId = curr.getAttribute("DocId").toString();
            String FyId = curr.getAttribute("FyId").toString();
            System.out.println("whid:" + whId + "DociD=" + DocId + "FyId" + FyId);

            BigDecimal ItmIns = (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM_INS_SCRP_SLS_ITM (?,?,?,?,?,?,?,?)", new Object[] {
                                                                 cldId, slocId, orgId, whId, "", DocId, FyId, "Y"
            }));
            adflog.info("itm insert out put is" + ItmIns);

            if (ItmIns != null) {
                this.getMmScrpSlsItm1().executeQuery();
            }
        }
        return null;
    }


    public String autoStkAllotment() {
        Row curr = this.getMmScrpSlsItm1().getCurrentRow();
        if (curr != null) {
            String whId = curr.getAttribute("WhId").toString();
            String DocId = curr.getAttribute("DocId").toString();
            String ItmId = curr.getAttribute("ItmId").toString();
            String srFlg = curr.getAttribute("TransSrFlg").toString();
            Number scrpQty = (Number) curr.getAttribute("ItmQtyBs");
            System.out.println("item quantity base is " + scrpQty + "item name is " + ItmId);
            BigDecimal ItmIssue =
                (BigDecimal) (callStoredFunction(Types.NUMERIC, "MM_SCRP_SLS_AUTO_ISSU (?,?,?,?,?,?,?,?)", new Object[] {
                                                 cldId, slocId, orgId, whId, ItmId, srFlg, DocId, scrpQty
            }));
            System.out.println("auto stock alltmnt " + ItmIssue);
            //    this.getMmScrpSls().getCurrentRow().setAttribute("ScrpSlsId", "0");
            this.getMmScrpSlsLot1().executeQuery();
            this.getMmScrpSlsSr1().executeQuery();
            this.getMmScrpSlsLot().executeQuery();
            this.getMmScrpSlsSr().executeQuery();

            Row[] r2 = this.getMmScrpSlsLot().getFilteredRows("DocId", DocId);
            System.out.println("filtered lot rows length stock allotment is " + r2.length);


            Row[] r1 = this.getMmScrpSlsSr1().getFilteredRows("DocId", DocId);
            System.out.println("filtered rows length stock allotment is " + r1.length);


            //    this.getDBTransaction().postChanges();
        }

        return null;
    }


    public String postchanges() {
        // this.getMmScrpSls().getCurrentRow().setAttribute("ScrpSlsId", "0");
        this.getDBTransaction().postChanges();
        return null;
    }

    public String itmValidChk() {
        String flag = null;
        Row curr = this.getMmScrpSls().getCurrentRow();
        if (curr.getAttribute("TransItmId") != null) {
            ViewObjectImpl itmStk = this.getMmScrpSlsItm1();
            RowQualifier rowQualifier1 = new RowQualifier(itmStk);
            rowQualifier1.setWhereClause("ItmId = '" + curr.getAttribute("TransItmId") + "'AND DocId='" +
                                         curr.getAttribute("DocId") + "' AND CldId='" + cldId + "' and OrgId ='" +
                                         orgId + "' and SlocId=" + slocId + "");
            Row[] rows1 = itmStk.getFilteredRows(rowQualifier1);
            adflog.info("itm rows filtered " + rows1.length);
            if (rows1.length > 0) {
                flag = "N";
            } else {
                flag = "Y";
            }

        } else {
            flag = "Y";
        }
        System.out.println("flag value is am " + flag);
        return flag;
    }

    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }

    private static int INTEGER = Types.NUMERIC;
    private static int DATE = Types.DATE;
    private static int STRING = Types.VARCHAR;
    private static int NUMBER = Types.NUMERIC;


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;
    }

    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getMmScrpSls().getCurrentRow().getAttribute("DocId").toString();

        Integer DocNo1 = 18508;
        adflog.info("DocNo-------" + DocNo + "  DocId----" + DocId + "  WfNo----" + WfNo + "DocNo1-----" + DocNo1);
        return Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, DocNo1, 0, WfNo, DocId, usr_idFrm, usr_idTo,
                                                   levelFrm, levelTo, action, remark, amount
    }).toString());


    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getMmScrpSls().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        // Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId });
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, 0
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }


    public String setOutCome(String whRtnvalue) {
        if (whRtnvalue.equalsIgnoreCase("A")) {
            ViewObjectImpl slsvo = this.getMmScrpSls();
            slsvo.getCurrentRow().setAttribute("AuthStat", "Y");
            slsvo.getCurrentRow().setAttribute("DocStat", 707);
            //---------------------------------Scrap Sales Stock Updated Function Call---
            Integer UsrId = (Integer) slsvo.getCurrentRow().getAttribute("UsrIdCreate");
            String Whid = slsvo.getCurrentRow().getAttribute("WhId").toString();
            Integer fyid = Integer.parseInt(slsvo.getCurrentRow().getAttribute("FyId").toString());
            String docid = slsvo.getCurrentRow().getAttribute("DocId").toString();
            Timestamp ts = (Timestamp) slsvo.getCurrentRow().getAttribute("DocDt");
            System.out.println("TimeStamp:" + ts);
            Date d = new Date(ts.getTime());
            System.out.println("Date is:" + d);
            System.out.println("CldId:" + cldId + " " + "SlocId" + slocId + "OrgId:" + orgId + "User Id:" + UsrId +
                               "Whid:" + Whid + "FyId:" + fyid + " " + "DocId:" + docid);
            Object i = Integer.parseInt(callStoredFunction(NUMBER, "MM.MM_UPDT_STK_SCRP_SLS(?,?,?,?,?,?,?)", new Object[] {
                                                           cldId, slocId, orgId, Whid, fyid, docid, UsrId
            }).toString());
            System.out.println("Function returned Value:" + i);
            //---------------------------------------------------GL_LINES Function  Call---------------------------------------
            System.out.println("MM_INS_GL_SCRP_SLS" + slocId + " " + cldId + " " + hoOrgId + " " + orgId + " " + docid +
                               " " + d + " " + UsrId);
            Object i1 = Integer.parseInt(callStoredFunction(NUMBER, "MM.MM_INS_GL_SCRP_SLS(?,?,?,?,?,?,?)", new Object[] {
                                                            slocId, cldId, hoOrgId, orgId, docid, d, UsrId
            }).toString());
            System.out.println("Returned From the Second Function:" + i1);
            //----------------------------------------General Voucher Created Function Call-----------------------------------------
            String VouId = callStoredFunction(Types.VARCHAR, "MM.MM_GET_RCPT_PROV_GL (?,?,?,?,?,?)", new Object[] {
                                              cldId, slocId, orgId, docid, "S", "NO"
            }).toString();
            System.out.println("Voucher ID:" + VouId);
            if (VouId != null) {
                //String msg="Saved and Generated Voucher Id:";
                String msg = resolvElDCMsg("#{bundle['MSG.2982']}").toString();
                FacesMessage message = new FacesMessage(msg + VouId);
                message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }
        } else if (whRtnvalue.equalsIgnoreCase("F")) {
            ViewObjectImpl slsvo = this.getMmScrpSls();
            slsvo.getCurrentRow().setAttribute("AuthStat", "N");
            slsvo.getCurrentRow().setAttribute("DocStat", 706);
        } else if (whRtnvalue.equalsIgnoreCase("V")) {
            System.out.println("in the Revert Block");
            ViewObjectImpl slsvo = this.getMmScrpSls();

            Integer usrcreate = Integer.parseInt(slsvo.getCurrentRow().getAttribute("UsrIdCreate").toString());
            String docId = slsvo.getCurrentRow().getAttribute("DocId").toString();
            String cldId = slsvo.getCurrentRow().getAttribute("CldId").toString();
            Integer pendinguser = pendingScrapSlsCheck(slocId, cldId, orgId, 18508);
            System.out.println("pendinguser       " + pendinguser + " usrcreate  " + usrcreate + "         " + docId);
            if (pendinguser != null) {
                System.out.println("pendinguser.compareTo(usrcreate)             " + pendinguser.compareTo(usrcreate));

                if (pendinguser.compareTo(usrcreate) == 0) {
                    System.out.println("pendinguser    inside if after compare   " + pendinguser + " usrcreate  " +
                                       usrcreate);
                    slsvo.getCurrentRow().setAttribute("AuthStat", "N");
                    this.getMmScrpSls().getCurrentRow().setAttribute("DocStat", 705);
                } else
                    slsvo.getCurrentRow().setAttribute("AuthStat", "N");
                this.getMmScrpSls().getCurrentRow().setAttribute("DocStat", 706);
            }
        } else if (whRtnvalue.equalsIgnoreCase("R")) {
            System.out.println("in the Reject Block");
            ViewObjectImpl slsvo = this.getMmScrpSls();
            slsvo.getCurrentRow().setAttribute("AuthStat", "N");
            slsvo.getCurrentRow().setAttribute("DocStat", 705);
        }
        return null;
    }

    public Integer pendingScrapSlsCheck(Integer SlocId, String CldId, String OrgId, Integer ScrpSlsDocNo) {
        Row currSls = this.getMmScrpSls().getCurrentRow();
        String docIdTxn = currSls.getAttribute("DocId").toString();
        //Integer rfqType = (Integer)currSls.getAttribute("RfqSrcType");

        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, ScrpSlsDocNo, docIdTxn, 0
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        return usrId;
    }

    public String getUsrNm(Integer usrId) {
        String usrnNm = null;
        ViewObjectImpl usrVo = this.getLovUsr();
        Row[] row1 = usrVo.getFilteredRows("UsrId", usrId);
        if (row1.length > 0) {
            usrnNm = row1[0].getAttribute("UsrName").toString();
        }
        return usrnNm;
    }

    public String deleteItmWithRecord() {
        Row curr = this.getMmScrpSlsItm1().getCurrentRow();
        ViewObjectImpl scrplot = this.getMmScrpSlsLot1();
        ViewObjectImpl scrpSr = this.getMmScrpSlsSr1();
        if (curr != null) {
            String srflg = curr.getAttribute("TransSrFlg").toString();
            String ItmId = curr.getAttribute("ItmId").toString();
            String DocId = curr.getAttribute("DocId").toString();
            if (srflg.equalsIgnoreCase("N")) {
                RowQualifier rowqualifier = new RowQualifier(scrplot);
                rowqualifier.setWhereClause("DocId='" + DocId + "' and ItmId ='" + ItmId + "'");
                Row[] rows1 = scrplot.getFilteredRows(rowqualifier);
                if (rows1.length > 0) {
                    for (Row r1 : rows1) {
                        r1.remove();
                    }
                    scrplot.executeQuery();
                }
                //scrplot.executeQuery();
                //curr.remove();
                //  getMmScrpSlsItm1().executeQuery();
            } else if (srflg.equalsIgnoreCase("Y")) {
                RowQualifier rowqualifier = new RowQualifier(scrpSr);
                rowqualifier.setWhereClause("DocId='" + DocId + "' and ItmId ='" + ItmId + "'");
                Row[] rows1 = scrpSr.getFilteredRows(rowqualifier);
                if (rows1.length > 0) {
                    for (Row r1 : rows1) {
                        adflog.info("going to delete this srno. " + r1.getAttribute("SrNo"));
                        r1.remove();
                    }
                    scrpSr.executeQuery();
                    RowQualifier rowqualifier1 = new RowQualifier(scrplot);
                    rowqualifier1.setWhereClause("DocId='" + DocId + "' and ItmId ='" + ItmId + "'");
                    Row[] rows2 = scrplot.getFilteredRows(rowqualifier1);
                    if (rows2.length > 0) {
                        adflog.info("going to delete this lotno  " + rows2[0].getAttribute("LotId"));
                        rows2[0].remove();
                        scrplot.executeQuery();
                    }


                }
                // curr.remove();
                // getMmScrpSlsItm1().executeQuery();
            }
        }
        return null;
    }

    /**
     * Container's getter for MmScrpSls.
     * @return MmScrpSls
     */
    public ViewObjectImpl getMmScrpSls() {
        return (ViewObjectImpl) findViewObject("MmScrpSls");
    }

    /**
     * Container's getter for MmScrpSlsItm1.
     * @return MmScrpSlsItm1
     */
    public ViewObjectImpl getMmScrpSlsItm1() {
        return (ViewObjectImpl) findViewObject("MmScrpSlsItm1");
    }

    /**
     * Container's getter for MmScrpSlsLot1.
     * @return MmScrpSlsLot1
     */
    public ViewObjectImpl getMmScrpSlsLot1() {
        return (ViewObjectImpl) findViewObject("MmScrpSlsLot1");
    }

    /**
     * Container's getter for MmScrpSlsSr1.
     * @return MmScrpSlsSr1
     */
    public ViewObjectImpl getMmScrpSlsSr1() {
        return (ViewObjectImpl) findViewObject("MmScrpSlsSr1");
    }

    /**
     * Container's getter for ScrpSlstoItmVL1.
     * @return ScrpSlstoItmVL1
     */
    public ViewLinkImpl getScrpSlstoItmVL1() {
        return (ViewLinkImpl) findViewLink("ScrpSlstoItmVL1");
    }

    /**
     * Container's getter for ItmtoLotVL1.
     * @return ItmtoLotVL1
     */
    public ViewLinkImpl getItmtoLotVL1() {
        return (ViewLinkImpl) findViewLink("ItmtoLotVL1");
    }

    /**
     * Container's getter for ItmtoSrVL1.
     * @return ItmtoSrVL1
     */
    public ViewLinkImpl getItmtoSrVL1() {
        return (ViewLinkImpl) findViewLink("ItmtoSrVL1");
    }

    /**
     * Container's getter for LovAdds.
     * @return LovAdds
     */
    public ViewObjectImpl getLovAdds() {
        return (ViewObjectImpl) findViewObject("LovAdds");
    }

    /**
     * Container's getter for LovOrg.
     * @return LovOrg
     */
    public ViewObjectImpl getLovOrg() {
        return (ViewObjectImpl) findViewObject("LovOrg");
    }

    /**
     * Container's getter for LovUom.
     * @return LovUom
     */
    public ViewObjectImpl getLovUom() {
        return (ViewObjectImpl) findViewObject("LovUom");
    }

    /**
     * Container's getter for LovItmVo.
     * @return LovItmVo
     */
    public ViewObjectImpl getLovItmVo() {
        return (ViewObjectImpl) findViewObject("LovItmVo");
    }

    /**
     * Container's getter for LovCstmrNm.
     * @return LovCstmrNm
     */
    public ViewObjectImpl getLovCstmrNm() {
        return (ViewObjectImpl) findViewObject("LovCstmrNm");
    }

    /**
     * Container's getter for LovCoaNm.
     * @return LovCoaNm
     */
    public ViewObjectImpl getLovCoaNm() {
        return (ViewObjectImpl) findViewObject("LovCoaNm");
    }

    /**
     * Container's getter for lovStkSummLot.
     * @return lovStkSummLot
     */
    public ViewObjectImpl getlovStkSummLot() {
        return (ViewObjectImpl) findViewObject("lovStkSummLot");
    }

    /**
     * Container's getter for LovStkSummSr.
     * @return LovStkSummSr
     */
    public ViewObjectImpl getLovStkSummSr() {
        return (ViewObjectImpl) findViewObject("LovStkSummSr");
    }

    /**
     * Container's getter for LovStkSummItm.
     * @return LovStkSummItm
     */
    public ViewObjectImpl getLovStkSummItm() {
        return (ViewObjectImpl) findViewObject("LovStkSummItm");
    }

    /**
     * Container's getter for SearchScrp.
     * @return SearchScrp
     */
    public ViewObjectImpl getSearchScrp() {
        return (ViewObjectImpl) findViewObject("SearchScrp");
    }

    /**
     * Container's getter for TransScrpSrch.
     * @return TransScrpSrch
     */
    public ViewObjectImpl getTransScrpSrch() {
        return (ViewObjectImpl) findViewObject("TransScrpSrch");
    }

    /**
     * Container's getter for LovUsr.
     * @return LovUsr
     */
    public ViewObjectImpl getLovUsr() {
        return (ViewObjectImpl) findViewObject("LovUsr");
    }

    /**
     * Container's getter for TransWarehouseLovVO1.
     * @return TransWarehouseLovVO1
     */
    public ViewObjectImpl getTransWarehouseLovVO1() {
        return (ViewObjectImpl) findViewObject("TransWarehouseLovVO1");
    }

    public void filteredDataAtpageload() {
        System.out.println("in the bind variable method");
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        String WhId = resolvEl("#{pageFlowScope.PARAM_USR_WH_ID}").toString();
        String HoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String UsrId = resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();
        System.out.println(CldId + " " + SlocId + " " + OrgId + " " + WhId + " " + HoOrg + " UsrId" + UsrId);
        ViewObjectImpl lovview = this.getLovWhOrgVO2();
        /*  ViewCriteria criteria =getLovWhOrgVO2().getViewCriteria("LovWhOrgVOCriteria1");
     lovview.applyViewCriteria(criteria);
    */
        lovview.setNamedWhereClauseParam("BindCldId", CldId);
        lovview.setNamedWhereClauseParam("BindSlocId", SlocId);
        lovview.setNamedWhereClauseParam("BindOrgId", OrgId);
        lovview.setNamedWhereClauseParam("BindHoOrgId", HoOrg);
        lovview.setNamedWhereClauseParam("BindUsrId", UsrId);
        //lovview.setNamedWhereClauseParam("BindWhIdBind", WhId);
        lovview.executeQuery();
        ViewObjectImpl searchview = this.getSearchScrp();
        searchview.setNamedWhereClauseParam("BindOrgId", OrgId);
        searchview.setNamedWhereClauseParam("bindWhId", null);
        searchview.setNamedWhereClauseParam("bindItmId", null);
        searchview.setNamedWhereClauseParam("bindscrpId", null);
        searchview.setNamedWhereClauseParam("bindDocDt", null);
        searchview.setNamedWhereClauseParam("BindocDtTo", null);
        searchview.setNamedWhereClauseParam("bindocStatus", null);
        searchview.setNamedWhereClauseParam("bindEoId", null);
        searchview.setNamedWhereClauseParam("bindSlocId", SlocId);
        searchview.setNamedWhereClauseParam("bindCldId", CldId);
        searchview.executeQuery();
    }

    /**
     * Container's getter for LovWhOrgVO2.
     * @return LovWhOrgVO2
     */
    public ViewObjectImpl getLovWhOrgVO2() {
        return (ViewObjectImpl) findViewObject("LovWhOrgVO2");
    }

    public void ResetFieldValues() {
        System.out.println("in the reset value Method");
        ViewObjectImpl scrpsls = this.getMmScrpSls();
        scrpsls.getCurrentRow().setAttribute("TransItmNm", null);
        scrpsls.getCurrentRow().setAttribute("TranScrpQty", null);
        scrpsls.getCurrentRow().setAttribute("TransItmId", null);

    }

    public Object resolvElDCMsg(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }
    //    public void RefreshCheckbox() {
    //        ViewObjectImpl lotsummsr=this.getLovStkSummSr();
    //        getLovStkSummSr().reset();
    //
}
