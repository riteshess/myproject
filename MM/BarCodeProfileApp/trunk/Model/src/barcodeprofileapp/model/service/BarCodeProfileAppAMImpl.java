
package barcodeprofileapp.model.service;


import static adf.utils.ebiz.EbizParams.GLBL_APP_CLD_ID;
import static adf.utils.ebiz.EbizParams.GLBL_APP_SERV_LOC;
import static adf.utils.ebiz.EbizParams.GLBL_APP_USR_ORG;
import static adf.utils.ebiz.EbizParams.GLBL_HO_ORG_ID;

import barcodeprofileapp.model.service.common.BarCodeProfileAppAM;
import barcodeprofileapp.model.views.AppBcPrfAttVOImpl;
import barcodeprofileapp.model.views.AppBcPrfAttVORowImpl;
import barcodeprofileapp.model.views.AppBcPrfDocVOImpl;
import barcodeprofileapp.model.views.AppBcPrfDocVORowImpl;
import barcodeprofileapp.model.views.AppBcPrfVOImpl;

import barcodeprofileapp.model.views.AppBcPrfVORowImpl;

import barcodeprofileapp.model.views.AttDualVoRowImpl;
import barcodeprofileapp.model.views.DocumentDualVOImpl;
import barcodeprofileapp.model.views.DocumentDualVORowImpl;
import barcodeprofileapp.model.views.DualVoImpl;

import java.util.ArrayList;
import java.util.Arrays;

import java.util.Collections;
import java.util.Comparator;

import java.util.LinkedHashMap;
import java.util.List;

import java.util.ListIterator;
import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 02 16:36:44 PST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class BarCodeProfileAppAMImpl extends ApplicationModuleImpl implements BarCodeProfileAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public BarCodeProfileAppAMImpl() {
    }

    /**
     * Container's getter for AppBcPrf1.
     * @return AppBcPrf1
     */
    public AppBcPrfVOImpl getAppBcPrf1() {
        return (AppBcPrfVOImpl) findViewObject("AppBcPrf1");
    }

    /**
     * Container's getter for AppBcPrfAtt1.
     * @return AppBcPrfAtt1
     */
    public AppBcPrfAttVOImpl getAppBcPrfAtt1() {
        return (AppBcPrfAttVOImpl) findViewObject("AppBcPrfAtt1");
    }

    /**
     * Container's getter for AppBcPrfDoc1.
     * @return AppBcPrfDoc1
     */
    public AppBcPrfDocVOImpl getAppBcPrfDoc1() {
        return (AppBcPrfDocVOImpl) findViewObject("AppBcPrfDoc1");
    }

    /**
     * Container's getter for FkAppBcPrfAtt1Link1.
     * @return FkAppBcPrfAtt1Link1
     */
    public ViewLinkImpl getFkAppBcPrfAtt1Link1() {
        return (ViewLinkImpl) findViewLink("FkAppBcPrfAtt1Link1");
    }

    /**
     * Container's getter for FkAppBcPrfDocLink1.
     * @return FkAppBcPrfDocLink1
     */
    public ViewLinkImpl getFkAppBcPrfDocLink1() {
        return (ViewLinkImpl) findViewLink("FkAppBcPrfDocLink1");
    }

    public boolean isPrcsExists(int id, String mode) {
        /*  ViewObjectImpl appBcPrf1 = this.getAppBcPrf1();
        Row currentRow = appBcPrf1.getCurrentRow();
        if (mode.equalsIgnoreCase("e") && currentRow != null) {
            AppBcPrfVORowImpl row = (AppBcPrfVORowImpl) currentRow;
            Integer oldPrcsId = row.getOldPrcsId();
            //           System.out.println("here . " + oldPrcsId + " -- " + id + " ---- " + row.getPrcsId());
            if (oldPrcsId.equals(id)) {
                return false;
            }
        }
        RowQualifier rq = new RowQualifier(appBcPrf1);
        rq.setWhereClause("PrcsId = " + id);
        Row[] filteredRows = appBcPrf1.getFilteredRows(rq);

        Comparator<Row> c = new Comparator<Row>() {
            @Override
            public int compare(Row o1, Row o2) {
                AppBcPrfVORowImpl r1 = (AppBcPrfVORowImpl) o1;
                AppBcPrfVORowImpl r2 = (AppBcPrfVORowImpl) o2;
                //   System.out.println("rows data: " + r1.getPrcsId() + " -- " + r2.getPrcsId());
                return r1.getPrcsId().compareTo(r2.getPrcsId());
            }
        };
        int length = filteredRows.length;
        if (length > 0) {
            Arrays.sort(filteredRows, c);
            int binarySearch = Arrays.binarySearch(filteredRows, currentRow, c);
            //     System.out.println("binary search is: " + binarySearch);
            if (binarySearch >= 0) {
                length -= 1;
            }
            if (length > 0)
                return true;
        }
        return false; */



        ViewObjectImpl appBcPrf1 = this.getAppBcPrf1();
        Row currentRow = appBcPrf1.getCurrentRow();
        RowSetIterator itr = appBcPrf1.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != currentRow) {
                AppBcPrfVORowImpl row = (AppBcPrfVORowImpl) next;
                if (row.getPrcsId().equals(id))
                    return true;
            }
        }
        return false;
    }

    public void refreshView() {
        Row currentRow = this.getAppBcPrfDoc1().getCurrentRow();
        AppBcPrfDocVORowImpl row = (AppBcPrfDocVORowImpl) currentRow;
        row.getLovDocTypeVo1().executeQuery();
    }

    public boolean isDocDuplicateDocId(int docId, int docTypId) {
        AppBcPrfDocVOImpl appBcPrfDoc1 = this.getAppBcPrfDoc1();
        RowQualifier rq = new RowQualifier(appBcPrfDoc1);
        rq.setWhereClause("GlblDocId = " + docId + " and GlblDocTypeId = " + docTypId);
        System.out.println("value of docid is" +docId);
        Row[] filteredRows = appBcPrfDoc1.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            return true;
        } else {
            Row createRow = appBcPrfDoc1.createRow();
            appBcPrfDoc1.insertRow(createRow);
            createRow.setAttribute("GlblDocId", docId);
            createRow.setAttribute("GlblDocTypeId", docTypId);
        }
        return false;

    }

    public boolean isDuplicateDocTypId(int docTypId) {
        AppBcPrfDocVOImpl appBcPrfDoc1 = this.getAppBcPrfDoc1();
        Row currentRow = appBcPrfDoc1.getCurrentRow();
        AppBcPrfDocVORowImpl curRow = (AppBcPrfDocVORowImpl) currentRow;

        RowSetIterator itr = appBcPrfDoc1.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != currentRow) {
                AppBcPrfDocVORowImpl row = (AppBcPrfDocVORowImpl) next;
                if (row.getGlblDocTypeId().equals(docTypId)) {
                    if (curRow.getGlblDocId() != null && curRow.getGlblDocId().equals(row.getGlblDocId()))
                        return true;
                    return false;
                }
            }
        }
        itr.closeRowSetIterator();
        return false;
    }


    public boolean isDuplicateAttId(int id) {
        ViewObjectImpl appBcPrfAtt1 = this.getAppBcPrfAtt1();
        Row currentRow = appBcPrfAtt1.getCurrentRow();
        RowSetIterator itr = appBcPrfAtt1.createRowSetIterator(null);
        while (itr.hasNext()) {
            Row next = itr.next();
            if (next != currentRow) {
                AppBcPrfAttVORowImpl row = (AppBcPrfAttVORowImpl) next;
                if (row.getAttId().equals(id)) {
                    return true;
                }
            }
        }
        itr.closeRowSetIterator();
        return false;
    }

    /**
     * Container's getter for DualVo1.
     * @return DualVo1
     */
    public DualVoImpl getDualVo1() {
        return (DualVoImpl) findViewObject("DualVo1");
    }

    public void filterIntialView() {
        AppBcPrfVOImpl appBcPrf1 = this.getAppBcPrf1();
        appBcPrf1.setNamedWhereClauseParam("CldIdBind", GLBL_APP_CLD_ID());
        appBcPrf1.setNamedWhereClauseParam("SlocIdBind", GLBL_APP_SERV_LOC());
        appBcPrf1.setNamedWhereClauseParam("HoOrgIdBind", GLBL_HO_ORG_ID());
        appBcPrf1.setNamedWhereClauseParam("OrgIdBind", GLBL_APP_USR_ORG());
        appBcPrf1.executeQuery();
    }

    public void filterByPrcId(String typ) {
        AppBcPrfVOImpl appBcPrf1 = this.getAppBcPrf1();
        Row currentRow = this.getDualVo1().getCurrentRow();
        appBcPrf1.setNamedWhereClauseParam("PrcsIdBind", (typ.equals("s") ? currentRow.getAttribute("PrcsId") : null));
        appBcPrf1.executeQuery();
        if (!typ.equals("s"))
            this.getDualVo1().executeQuery();
    }

    public void putPosition() {
        AppBcPrfAttVOImpl appBcPrfAtt1 = this.getAppBcPrfAtt1();
        Row currentRow = appBcPrfAtt1.getCurrentRow();
        if (currentRow != null) {
            AppBcPrfAttVORowImpl row = (AppBcPrfAttVORowImpl) currentRow;
            Integer length = row.getAttLen();
            System.out.println("Length is: " + length);
            RowSetIterator itr = appBcPrfAtt1.createRowSetIterator(null);
            int tot = 0;
            while (itr.hasNext()) {
                Row next = itr.next();
                if (next != row) {
                    AppBcPrfAttVORowImpl itrRow = (AppBcPrfAttVORowImpl) next;
                    tot += itrRow.getAttLen();
                }
            }
            itr.closeRowSetIterator();
            row.setStrtPos(tot + 1);
            row.setEndPos(tot + length);
        }
    }

    public boolean moveUp() {
        AppBcPrfAttVOImpl appBcPrfAtt1 = this.getAppBcPrfAtt1();
        Row currentRow = appBcPrfAtt1.getCurrentRow();
        if (currentRow != null) {
            AppBcPrfAttVORowImpl row = (AppBcPrfAttVORowImpl) currentRow;
            Integer integer = row.getStrtPos();
            if (integer.equals(1)) {
                return false;
                
            }
            RowQualifier rq = new RowQualifier(appBcPrfAtt1);
            rq.setWhereClause("EndPos = " + (integer - 1));
            Row[] filteredRows = appBcPrfAtt1.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                AppBcPrfAttVORowImpl filRow = (AppBcPrfAttVORowImpl) filteredRows[0];
                row.setStrtPos(filRow.getStrtPos());
                row.setEndPos(row.getStrtPos() + row.getAttLen() - 1);
                filRow.setStrtPos(row.getEndPos() + 1);
                filRow.setEndPos(filRow.getStrtPos() + filRow.getAttLen() - 1);
            }
        }
        getDBTransaction().commit();
        appBcPrfAtt1.executeQuery();
        return true;
    }

    public boolean moveDown() {
        AppBcPrfAttVOImpl appBcPrfAtt1 = this.getAppBcPrfAtt1();
        Row currentRow = appBcPrfAtt1.getCurrentRow();
        if (currentRow != null) {
            AppBcPrfAttVORowImpl row = (AppBcPrfAttVORowImpl) currentRow;
            Integer integer = row.getEndPos();
            /*   if (integer.equals(1)) {
                return false;
            } */
            RowQualifier rq = new RowQualifier(appBcPrfAtt1);
            rq.setWhereClause("StrtPos = " + (integer + 1));
            Row[] filteredRows = appBcPrfAtt1.getFilteredRows(rq);
            if (filteredRows.length > 0) {
                AppBcPrfAttVORowImpl filRow = (AppBcPrfAttVORowImpl) filteredRows[0];

                filRow.setStrtPos(row.getStrtPos());
                filRow.setEndPos(filRow.getAttLen() + filRow.getStrtPos() - 1);
                row.setStrtPos(filRow.getEndPos() + 1);
                row.setEndPos(row.getStrtPos() + row.getAttLen() - 1);

                /*  row.setStrtPos(filRow.getStrtPos());
                row.setEndPos(row.getStrtPos() + row.getAttLen() - 1);
                filRow.setStrtPos(row.getEndPos() + 1);
                filRow.setEndPos(filRow.getStrtPos() + filRow.getAttLen() - 1); */
                getDBTransaction().commit();
                appBcPrfAtt1.executeQuery();
            }
        }

        return true;
    }

    public List getaAttData() {
        System.out.println("come");
        AppBcPrfAttVOImpl appBcPrfAtt1 = this.getAppBcPrfAtt1();
        System.out.println("Range: " + appBcPrfAtt1.getAllRowsInRange().length);
        RowSetIterator itr = appBcPrfAtt1.createRowSetIterator(null);
        List<Attribute> list = new ArrayList<Attribute>();
        int x = 0;
        System.out.println("row count: " + itr.getRowCount());
        while (itr.hasNext()) {
            x++;
            System.out.println("next");
            AppBcPrfAttVORowImpl row = (AppBcPrfAttVORowImpl) itr.next();
            Attribute att = new Attribute();
            att.setNo(x);
            att.setAttId(row.getAttId());
            att.setAttName(row.getAttNm());
            att.setAttLength(row.getAttLen());
            att.setStartPos(row.getStrtPos());
            //      att.setEndPos(row.getEndPos());
            System.out.println("ROw found..");
            list.add(att);
        }
        return list;
    }


    public Map addAttributeInList() {
        //   ViewObjectImpl attDualVo1 = this.getAttDualVo1();
        DocumentDualVOImpl attDualVo1 = this.getDocumentDual1();
        DocumentDualVORowImpl row = (DocumentDualVORowImpl) attDualVo1.getCurrentRow();
        // Attribute att = new Attribute(row.getAttId(), row.getAttNm(), row.getAttLen());
        //   return att;
        Map map = new LinkedHashMap();
        map.put("AttId", row.getAttId());
        map.put("AttNm", row.getAttNm());
        map.put("AttLen", row.getAttLength());
        return map;
    }

    public void insertAttInTable(List list) {
        Row currentRow = this.getAppBcPrf1().getCurrentRow();
        if (currentRow != null) {
            AppBcPrfAttVOImpl appBcPrfAtt1 = this.getAppBcPrfAtt1();
            RowSetIterator itr = appBcPrfAtt1.createRowSetIterator(null);
            while (itr.hasNext()) {
                itr.next().remove();
            }
            itr.closeRowSetIterator();
            Collections.sort(list);
            ListIterator<Attribute> iterator = list.listIterator();
            int id = Integer.parseInt(currentRow.getAttribute("PrcsId").toString());
            while (iterator.hasNext()) {
                Attribute attribute = iterator.next();
                AppBcPrfAttVORowImpl row = (AppBcPrfAttVORowImpl) appBcPrfAtt1.createRow();
                appBcPrfAtt1.insertRow(row);
                row.setPrcsId(id);
                row.setAttId(attribute.getAttId());
                row.setAttNm(attribute.getAttName());
                row.setAttLen(attribute.getAttLength());
                row.setStrtPos(attribute.getNo());
            }
        }
    }

    /**
     * Container's getter for DocumentDual1.
     * @return DocumentDual1
     */
    public DocumentDualVOImpl getDocumentDual1() {
        return (DocumentDualVOImpl) findViewObject("DocumentDual1");
    }

    public void setPrcsIdOnChange() {
        Row currentRow = getAppBcPrf1().getCurrentRow();
        if (currentRow != null) {
            AppBcPrfVORowImpl row = (AppBcPrfVORowImpl) currentRow;
            System.out.println("done prcs id: " + row.getPrcsId());
            int id = row.getPrcsId();
            ViewObjectImpl documentDual1 = this.getDocumentDual1();
            documentDual1.setNamedWhereClauseParam("PrcsIdBind", id);
            documentDual1.executeQuery();
        }
    }

    public byte isRecordExists() {
        int count1 = this.getAppBcPrfAtt1().getRowCount();
        int count = this.getAppBcPrfDoc1().getRowCount();
        if (count == 0)
            return 0;
        else if (count1 == 0)
            return 1;
        else
            return 2;
    }
}
