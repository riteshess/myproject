package mmpodeliveryscheduleapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import javax.faces.application.FacesMessage;

import mmpodeliveryscheduleapp.model.services.common.PurOrderDlvrySchlAM;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Date;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 17 14:50:40 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PurOrderDlvrySchlAMImpl extends ApplicationModuleImpl implements PurOrderDlvrySchlAM {
    /**
     * This is the default constructor (do not remove).
     */
    public PurOrderDlvrySchlAMImpl() {
    }
    private static ADFLogger _log = (ADFLogger) ADFLogger.createADFLogger(PurOrderDlvrySchlAMImpl.class);

    /**
     * Container's getter for TransDlvSchdlSearch.
     * @return TransDlvSchdlSearch
     */
    public ViewObjectImpl getTransDlvSchdlSearch() {
        return (ViewObjectImpl) findViewObject("TransDlvSchdlSearch");
    }

    /**
     * Container's getter for DlvSchdlSearch.
     * @return DlvSchdlSearch
     */
    public ViewObjectImpl getDlvSchdlSearch() {
        return (ViewObjectImpl) findViewObject("DlvSchdlSearch");
    }

    /**
     * Container's getter for MmDrftPo.
     * @return MmDrftPo
     */
    public ViewObjectImpl getMmDrftPo() {
        return (ViewObjectImpl) findViewObject("MmDrftPo");
    }

    /**
     * Container's getter for MMDlvSchdlBalanceView.
     * @return MMDlvSchdlBalanceView
     */
    public ViewObjectImpl getMMDlvSchdlBalanceView() {
        return (ViewObjectImpl) findViewObject("MMDlvSchdlBalanceView");
    }

    /**
     * Container's getter for MmDrftPoDlvSchdl.
     * @return MmDrftPoDlvSchdl
     */
    public ViewObjectImpl getMmDrftPoDlvSchdl() {
        return (ViewObjectImpl) findViewObject("MmDrftPoDlvSchdl");
    }

    /**
     * Container's getter for MmDrftPoToDlvSchdlBalanceViewVL1.
     * @return MmDrftPoToDlvSchdlBalanceViewVL1
     */
    public ViewLinkImpl getMmDrftPoToDlvSchdlBalanceViewVL1() {
        return (ViewLinkImpl) findViewLink("MmDrftPoToDlvSchdlBalanceViewVL1");
    }

    /**
     * Container's getter for MmDrftPoToMmDrftPoDlvSchdlVL1.
     * @return MmDrftPoToMmDrftPoDlvSchdlVL1
     */
    public ViewLinkImpl getMmDrftPoToMmDrftPoDlvSchdlVL1() {
        return (ViewLinkImpl) findViewLink("MmDrftPoToMmDrftPoDlvSchdlVL1");
    }

    public void viewPoDlvrySchl(String cldId, Integer slocId, String orgId, String docId) {
        ViewObjectImpl poVo = this.getMmDrftPo();
        _log.info("cld Id " + cldId + " sloc id " + slocId + "  org id " + orgId + " doc id " + docId);
        System.out.println("cld Id " + cldId + " sloc id " + slocId + "  org id " + orgId + " doc id " + docId);
        ViewCriteria vc = poVo.getViewCriteria("MmDrftPoVOCriteria");
        poVo.applyViewCriteria(vc);
        poVo.setNamedWhereClauseParam("BindCldId", cldId);
        poVo.setNamedWhereClauseParam("BindSlocId", slocId);
        poVo.setNamedWhereClauseParam("BindOrgId", orgId);
        poVo.setNamedWhereClauseParam("BindDocId", docId);
        poVo.executeQuery();
    }

    public Integer chkDlvryDateAndWhSelected() {
        ViewObjectImpl poVo = this.getMmDrftPo();
        if (poVo.getCurrentRow().getAttribute("TransDlvDate") == null) {
            return 1;
        } else if (poVo.getCurrentRow().getAttribute("TransWhId") == null) {
            return 2;
        } else {
            return 0;
        }
    }

    public void addDlvSchedule() {
        _log.info("claa addDlvSchedule ");
        ViewObject dlvVo = this.getMMDlvSchdlBalanceView(); //from
        ViewObjectImpl mmdlvVo = this.getMmDrftPoDlvSchdl(); //to
        ViewObject mmPo = this.getMmDrftPo();
        //ViewObjectImpl mmDrftItm = getAm().getMmDrftPoItm();
        // oracle.jbo.domain.Date d = (oracle.jbo.domain.Date)Date.getCurrentDate();
        //Integer p_user_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}"));
        Row poCurr = mmPo.getCurrentRow();
        RowSetIterator rsi = dlvVo.createRowSetIterator(null);
        while (rsi.hasNext()) {
            _log.info("inside while loop");
            Row cur = rsi.next();
            //    Object o = cur.getAttribute("TransSelectChkbx");
            Number dlvQty = new Number(0);
            if (cur.getAttribute("TransSchlQty") != null)
                dlvQty = (Number) cur.getAttribute("TransSchlQty");
            if (dlvQty.compareTo(new Number(0)) > 0) {
                //TransWhIdDlv
                //  if (cur.getAttribute("SchdlQty") != null) {

                // String WhChk = resolvEl("#{pageFlowScope.GLBL_ORG_WH_CHK1}").toString();
                String WhChk = "Y";
                if (WhChk.equals("N"))
                    poCurr.setAttribute("TransWhId", "1");
                if (poCurr.getAttribute("TransWhId") != null) {
                    Date dt = (Date) mmPo.getCurrentRow().getAttribute("TransDlvDate"); //.getValue();
                    _log.info("--date---" + dt);

                    /**Code Changed For Duplicate Validation 18-03-2015 @Bharat lal*/
                    String itmid = cur.getAttribute("ItemId").toString();
                    String itmuom = cur.getAttribute("ItmUom").toString();
                    _log.info("ItemId--->" + itmid);
                    String whId = poCurr.getAttribute("TransWhId").toString();
                    RowQualifier rq = new RowQualifier((ViewObjectImpl) mmdlvVo);
                    rq.setWhereClause("ItmId='" + itmid + "' and ItmUom='" + itmuom + "' And DlvDt='" + dt +
                                      "' And WhId='" + whId + "'");
                    _log.info("Row qul-->" + rq.getExprStr());
                    Row[] filteredRows = mmdlvVo.getFilteredRows(rq);
                    _log.info("Filetr row count-->" + filteredRows.length);
                    if (filteredRows.length > 0) {
                        _log.info(" duplicate date :: ");
                        String s=ADFModelUtils.resolvRsrc("MSG.1914");
                        String s1=ADFModelUtils.resolvRsrc("MSG.2423");
                        ADFModelUtils.showFacesMessage(s, s1, FacesMessage.SEVERITY_ERROR,
                                                       null);
                        //ADFModelUtils.showFacesMessage("Warehouse null", "Please Select Warehouse.",  FacesMessage.SEVERITY_WARN,null);
                        //                        FacesMessage errMsg = new FacesMessage(resolvEl("#{bundle['MSG.410']}"));
                        //                        errMsg.setSeverity(FacesMessage.SEVERITY_ERROR);
                        //                        FacesContext ctx = FacesContext.getCurrentInstance();
                        //                        ctx.addMessage(null, errMsg);
                        break;
                    } else {
                        rq.setWhereClause(null);

                        /** code to set delevery schedule no */
                        _log.info("Delivery date=" + dt);
                        RowQualifier dsnrq = new RowQualifier(mmdlvVo);
                        dsnrq.setWhereClause("DlvDt='" + dt + "' And WhId='" + whId + "'");
                        Row[] dsnrow = mmdlvVo.getFilteredRows(dsnrq);
                        Integer dlvschdlno = 1;
                        _log.info(dsnrq.getExprStr() + "No of rows for delv in same date=" + dsnrow.length);
                        if (dsnrow.length > 0)
                            dlvschdlno = (Integer) dsnrow[0].getAttribute("DlvSchdlNo");
                        else {
                            RowSetIterator dsnRS = mmdlvVo.createRowSetIterator(null);
                            while (dsnRS.hasNext()) {
                                Row curdsn = dsnRS.next();
                                if (curdsn.getAttribute("DlvSchdlNo") != null) {
                                    if ((Integer) curdsn.getAttribute("DlvSchdlNo") >= dlvschdlno) {
                                        dlvschdlno = (Integer) curdsn.getAttribute("DlvSchdlNo") + 1;
                                    }
                                }
                            }
                            mmdlvVo.closeRowSetIterator();
                        }
                        /**Code ended for delevery schedule no*/
                        System.out.println("Delevery Schedule no=" + dlvschdlno);
                        Row dlvRow = mmdlvVo.createRow();
                        dlvRow.setAttribute("DocId", cur.getAttribute("DocId"));
                        dlvRow.setAttribute("SlocId", cur.getAttribute("SlocId"));
                        dlvRow.setAttribute("OrgId", cur.getAttribute("OrgId"));
                        dlvRow.setAttribute("ItmId", cur.getAttribute("ItemId"));
                        dlvRow.setAttribute("DlvDt", dt);
                        _log.info("Scheduled Qty=" + cur.getAttribute("TransSchlQty"));
                        dlvRow.setAttribute("DlvQty", cur.getAttribute("TransSchlQty"));
                        dlvRow.setAttribute("BalQty", cur.getAttribute("TransSchlQty"));
                        dlvRow.setAttribute("TmpRcptQty", new Number(0));
                        dlvRow.setAttribute("DlvMode", poCurr.getAttribute("TransDlvMode"));
                        dlvRow.setAttribute("WhId", poCurr.getAttribute("TransWhId"));
                        dlvRow.setAttribute("TotQty", cur.getAttribute("OrdQty"));

                        dlvRow.setAttribute("UsrIdCreate", 39);
                        dlvRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                        dlvRow.setAttribute("EntityId", new Integer(1));
                        dlvRow.setAttribute("DlvAddsId", poCurr.getAttribute("TransWhAddressId"));
                        dlvRow.setAttribute("DlvSchdlNo", dlvschdlno);
                        dlvRow.setAttribute("ItmUom", cur.getAttribute("ItmUom"));
                        //                        RowQualifier rqitm = new RowQualifier(mmDrftItm);
                        //                        rqitm.setWhereClause("CldId='" + cur.getAttribute("CldId") + "' and SlocId=" +
                        //                                             cur.getAttribute("SlocId") + " and OrgId='" +
                        //                                             cur.getAttribute("OrgId") + "' and ItmId='" +
                        //                                             cur.getAttribute("ItemId") + "' and ItmUom='" +
                        //                                             cur.getAttribute("ItmUom") + "'");
                        //                        Row[] itmrow = mmDrftItm.getFilteredRows(rqitm);
                        //                        if (itmrow.length > 0) {
                        //                            dlvRow.setAttribute("TlrncDaysVal", poCurr.getAttribute("TlrncDays"));
                        //                            dlvRow.setAttribute("TlrncQtyType", itmrow[0].getAttribute("TlrncQtyType"));
                        //                            dlvRow.setAttribute("TlrncQtyVal", itmrow[0].getAttribute("TlrncQtyVal"));
                        //
                        //                        }
                        //this.selectAllQty();
                    }
                } else {
                    _log.info("Ware house is not");

                    //                    FacesMessage message = new FacesMessage(resolvEl("#{bundle['MSG.411']}"));
                    //                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    //                    FacesContext fc = FacesContext.getCurrentInstance();
                    //                    fc.addMessage(null, message);
                }


            }
        }

        rsi.closeRowSetIterator();
        mmdlvVo.executeQuery();
        this.getDBTransaction().validate();
        this.getDBTransaction().postChanges();
        dlvVo.executeQuery();


    }

    public void deleteDlvSch() {
        ViewObjectImpl mmdlvVo = this.getMmDrftPoDlvSchdl();
        RowQualifier dsnrq = new RowQualifier(mmdlvVo);
        Row currRow = mmdlvVo.getCurrentRow();
        dsnrq.setWhereClause("DlvDt='" + currRow.getAttribute("DlvDt") + "' And WhId='" + currRow.getAttribute("WhId") +
                             "'");


        Row[] dsnrow = mmdlvVo.getFilteredRows(dsnrq);
        _log.info(dsnrq.getExprStr() + "  arg0  " + dsnrow.length);
        if (dsnrow.length > 1) {
            currRow.remove();
        } else {
            Integer delDlvNo = (Integer) currRow.getAttribute("DlvSchdlNo");
            currRow.remove();
            //Update Schedule no. for remaining Rows.
            RowSetIterator rsi = mmdlvVo.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row itrRow = rsi.next();
                Integer no = new Integer(1);
                if (itrRow.getAttribute("DlvSchdlNo") != null)
                    no = (Integer) itrRow.getAttribute("DlvSchdlNo");
                if (no > delDlvNo)
                    itrRow.setAttribute("DlvSchdlNo", no - 1);
            }
            rsi.closeRowSetIterator();
        }

        this.getDBTransaction().postChanges();
        this.getMMDlvSchdlBalanceView().executeQuery();
        this.getMmDrftPoDlvSchdl().executeQuery();

    }


    public void selectAllDlvQty() {
        //        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        //        Integer usr_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //        String hoOrg_id = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        //        String cld_id = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID1}");
        //        Integer sloc_id = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC1}"));
        Row currDPO = this.getMmDrftPo().getCurrentRow();
        ViewObjectImpl dlvbalView = this.getMMDlvSchdlBalanceView();
        String docID = currDPO.getAttribute("DocId").toString();
        RowQualifier rqBal = new RowQualifier(dlvbalView);
        rqBal.setWhereClause("CldId = '" + EbizParams.GLBL_APP_CLD_ID() + "' and OrgId = '" +
                             EbizParams.GLBL_APP_USR_ORG() + "' and SlocId = " + EbizParams.GLBL_APP_SERV_LOC() +
                             " and DocId = '" + docID + "' ");
        Row[] rr = dlvbalView.getFilteredRows(rqBal);
        _log.info(rqBal.getExprStr() + "  length    " + rr.length);
        if (rr.length > 0) {
            for (Row r : rr) {
                if (r.getAttribute("BalanceQty") != null) {
                    _log.info(r.getAttribute("BalanceQty") + " balqty  " + r.getAttribute("ItemId") + "       ItmId ");
                    r.setAttribute("TransSchlQty", (Number) r.getAttribute("BalanceQty"));
                }
            }
        }
    }

    /**
     * Container's getter for LovItmDesc1.
     * @return LovItmDesc1
     */
    public ViewObjectImpl getLovItmDesc() {
        return (ViewObjectImpl) findViewObject("LovItmDesc");
    }

    /**
     * Container's getter for LovAddress1.
     * @return LovAddress1
     */
    public ViewObjectImpl getLovAddress() {
        return (ViewObjectImpl) findViewObject("LovAddress");
    }

    public void resetSearch() {
        ViewObjectImpl searchVo = this.getDlvSchdlSearch();
        searchVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
        searchVo.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
        searchVo.setNamedWhereClauseParam("BindCldId", -1);
        searchVo.setNamedWhereClauseParam("BindEoId", null);
        searchVo.setNamedWhereClauseParam("BindAuthPoNo", null);
        searchVo.setNamedWhereClauseParam("BindFromDate", null);
        searchVo.setNamedWhereClauseParam("BindToDate", null);
        searchVo.setNamedWhereClauseParam("BindPoType", null);

        searchVo.setNamedWhereClauseParam("BindBasis", null);
        searchVo.setNamedWhereClauseParam("BindPoStatus", null);
        searchVo.executeQuery();
    }

    public String SearchQcProcess() {
        ViewObjectImpl potransVo = getTransDlvSchdlSearch();
        Row poCurrr = potransVo.getCurrentRow();

        if (poCurrr != null) {
            _log.info("arg0 eo " + poCurrr.getAttribute("TransEoId") + " po " + poCurrr.getAttribute("TransAuthPoNo") +
                      " potype " + poCurrr.getAttribute("TransPoType"));
            Integer eo = null;
            if (poCurrr.getAttribute("TransEoId") != null) {
                eo = Integer.parseInt(poCurrr.getAttribute("TransEoId").toString());
                if (eo.compareTo(new Integer(0)) == 0) {
                    eo = null;
                }
            }

            ViewObjectImpl searchVo = this.getDlvSchdlSearch();
            searchVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            searchVo.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            searchVo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            searchVo.setNamedWhereClauseParam("BindEoId", eo);
            searchVo.setNamedWhereClauseParam("BindAuthPoNo", poCurrr.getAttribute("TransAuthPoNo"));
            searchVo.setNamedWhereClauseParam("BindFromDate", poCurrr.getAttribute("TransFromDate"));
            searchVo.setNamedWhereClauseParam("BindToDate", poCurrr.getAttribute("TransToDate"));
            searchVo.setNamedWhereClauseParam("BindPoType", poCurrr.getAttribute("TransPoType"));

            searchVo.setNamedWhereClauseParam("BindBasis", poCurrr.getAttribute("TransPoBasis"));
            searchVo.setNamedWhereClauseParam("BindPoStatus", poCurrr.getAttribute("TransPoStatus"));
            searchVo.executeQuery();

        }


        return null;
    }

    /**
     * Container's getter for LovEoNm1.
     * @return LovEoNm1
     */
    public ViewObjectImpl getLovEoNm() {
        return (ViewObjectImpl) findViewObject("LovEoNm");
    }

    /**
     * Container's getter for LovUomView1.
     * @return LovUomView1
     */
    public ViewObjectImpl getLovUomView() {
        return (ViewObjectImpl) findViewObject("LovUomView");
    }
}

