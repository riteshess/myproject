package mmidfapp.model.views;

import mmidfapp.model.services.MmIpoIdfAMImpl;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 13 12:01:47 PST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmIpoIdfOcVORowImpl extends ViewRowImpl {


    public static final int ENTITY_MMIPOIDFOCEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getCldId();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        }
        ,
        SlocId {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        }
        ,
        OrgId {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        }
        ,
        DocId {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getDocId();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        }
        ,
        CoaId {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getCoaId();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setCoaId((Integer) value);
            }
        }
        ,
        OcDesc {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getOcDesc();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setOcDesc((Integer) value);
            }
        }
        ,
        TranType {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getTranType();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setTranType((String) value);
            }
        }
        ,
        OcAmtBs {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getOcAmtBs();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setOcAmtBs((Number) value);
            }
        }
        ,
        OcAmtSp {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getOcAmtSp();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setOcAmtSp((Number) value);
            }
        }
        ,
        TransCoaNm {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getTransCoaNm();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setTransCoaNm((String) value);
            }
        }
        ,
        TransOcDescp {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getTransOcDescp();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setTransOcDescp((String) value);
            }
        }
        ,
        TransOcDescrpton {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getTransOcDescrpton();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setTransOcDescrpton((String) value);
            }
        }
        ,
        LovCoaIdVO1 {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getLovCoaIdVO1();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ,
        LovOcDescVO1 {
            public Object get(MmIpoIdfOcVORowImpl obj) {
                return obj.getLovOcDescVO1();
            }

            public void put(MmIpoIdfOcVORowImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public abstract Object get(MmIpoIdfOcVORowImpl object);

        public abstract void put(MmIpoIdfOcVORowImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int COAID = AttributesEnum.CoaId.index();
    public static final int OCDESC = AttributesEnum.OcDesc.index();
    public static final int TRANTYPE = AttributesEnum.TranType.index();
    public static final int OCAMTBS = AttributesEnum.OcAmtBs.index();
    public static final int OCAMTSP = AttributesEnum.OcAmtSp.index();
    public static final int TRANSCOANM = AttributesEnum.TransCoaNm.index();
    public static final int TRANSOCDESCP = AttributesEnum.TransOcDescp.index();
    public static final int TRANSOCDESCRPTON = AttributesEnum.TransOcDescrpton.index();
    public static final int LOVCOAIDVO1 = AttributesEnum.LovCoaIdVO1.index();
    public static final int LOVOCDESCVO1 = AttributesEnum.LovOcDescVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmIpoIdfOcVORowImpl() {
    }

    /**
     * Gets MmIpoIdfOcEO entity object.
     * @return the MmIpoIdfOcEO
     */
    public EntityImpl getMmIpoIdfOcEO() {
        return (EntityImpl) getEntity(ENTITY_MMIPOIDFOCEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for COA_ID using the alias name CoaId.
     * @return the COA_ID
     */
    public Integer getCoaId() {
        return (Integer) getAttributeInternal(COAID);
    }

    /**
     * Sets <code>value</code> as attribute value for COA_ID using the alias name CoaId.
     * @param value value to set the COA_ID
     */
    public void setCoaId(Integer value) {
        setAttributeInternal(COAID, value);
    }

    /**
     * Gets the attribute value for OC_DESC using the alias name OcDesc.
     * @return the OC_DESC
     */
    public Integer getOcDesc() {
            return (Integer) getAttributeInternal(OCDESC);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_DESC using the alias name OcDesc.
     * @param value value to set the OC_DESC
     */
    public void setOcDesc(Integer value) {
        setAttributeInternal(OCDESC, value);
    }

    /**
     * Gets the attribute value for TRAN_TYPE using the alias name TranType.
     * @return the TRAN_TYPE
     */
    public String getTranType() {
        return (String) getAttributeInternal(TRANTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for TRAN_TYPE using the alias name TranType.
     * @param value value to set the TRAN_TYPE
     */
    public void setTranType(String value) {
        setAttributeInternal(TRANTYPE, value);
    }

    /**
     * Gets the attribute value for OC_AMT_BS using the alias name OcAmtBs.
     * @return the OC_AMT_BS
     */
    public Number getOcAmtBs() {
        return (Number) getAttributeInternal(OCAMTBS);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_AMT_BS using the alias name OcAmtBs.
     * @param value value to set the OC_AMT_BS
     */
    public void setOcAmtBs(Number value) {
        setAttributeInternal(OCAMTBS, value);
    }

    /**
     * Gets the attribute value for OC_AMT_SP using the alias name OcAmtSp.
     * @return the OC_AMT_SP
     */
    public Number getOcAmtSp() {
        return (Number) getAttributeInternal(OCAMTSP);
    }

    /**
     * Sets <code>value</code> as attribute value for OC_AMT_SP using the alias name OcAmtSp.
     * @param value value to set the OC_AMT_SP
     */
    public void setOcAmtSp(Number value) {
        setAttributeInternal(OCAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCoaNm.
     * @return the TransCoaNm
     */
    public String getTransCoaNm() {
      //System.out.println(" in the getter of TransCoaNm::::"+getCoaId());
        if(getCoaId()!=null) {
            MmIpoIdfAMImpl am=(MmIpoIdfAMImpl)this.getApplicationModule();
            ViewObjectImpl coa=am.getLovCoaId1();
            coa.setNamedWhereClauseParam("cldidBind", getCldId());
            coa.setNamedWhereClauseParam("orgidBind", getOrgId());
            coa.setNamedWhereClauseParam("slocidBind", getSlocId());
            coa.executeQuery();
            Row []r=coa.getFilteredRows("CoaId",getCoaId());
            if(r.length>0) {
          String nm =r[0].getAttribute("CoaNm").toString();
        System.out.println("in getTransCoaNm:::"+nm);
          return nm;
            }
            
        }
        return (String) getAttributeInternal(TRANSCOANM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCoaNm.
     * @param value value to set the  TransCoaNm
     */
    public void setTransCoaNm(String value) {
        setAttributeInternal(TRANSCOANM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcDesc.
     * @return the TransOcDesc
     */
    public String getTransOcDescp() {
        if(getOcDesc()!=null) {
            System.out.println("value"+getOcDesc());
            MmIpoIdfAMImpl am=(MmIpoIdfAMImpl)this.getApplicationModule();
            ViewObjectImpl desc=am.getLovOcDesc1();
            
            Row []r=desc.getFilteredRows("AttId",getOcDesc());
            System.out.println("length----"+r.length);
            if(r.length>0) {
          String nm =r[0].getAttribute("AttNm").toString();
        System.out.println("in getTransOcDesc:::"+nm);
          return nm;
            }
            
        }
        return (String) getAttributeInternal(TRANSOCDESCP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcDesc.
     * @param value value to set the  TransOcDesc
     */
    public void setTransOcDescp(String value) {
        setAttributeInternal(TRANSOCDESCP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransOcDescrpton.
     * @return the TransOcDescrpton
     */
    public String getTransOcDescrpton() {
        System.out.println("value---->>>"+getOcDesc());
        if(getOcDesc()!=null) {
            
            MmIpoIdfAMImpl am=(MmIpoIdfAMImpl)this.getApplicationModule();
            ViewObjectImpl desc=am.getLovOcDesc1();
            
            Row []r=desc.getFilteredRows("AttId",getOcDesc());
            System.out.println("length----"+r.length);
            if(r.length>0) {
          String nm =r[0].getAttribute("AttNm").toString();
        System.out.println("in getTransOcDesc:::"+nm);
          return nm;
            }
            
        }
        return (String) getAttributeInternal(TRANSOCDESCRPTON);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransOcDescrpton.
     * @param value value to set the  TransOcDescrpton
     */
    public void setTransOcDescrpton(String value) {
        setAttributeInternal(TRANSOCDESCRPTON, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCoaIdVO1.
     */
    public RowSet getLovCoaIdVO1() {
        return (RowSet) getAttributeInternal(LOVCOAIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOcDescVO1.
     */
    public RowSet getLovOcDescVO1() {
        return (RowSet) getAttributeInternal(LOVOCDESCVO1);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }
}

