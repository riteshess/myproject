package mmidfapp.model.services;

import adf.utils.ebiz.EbizParams;

import java.io.File;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import mmidfapp.model.services.common.MmIpoIdfAM;
import mmidfapp.model.views.MmIpoIdfDtlVOImpl;
import mmidfapp.model.views.MmIpoIdfItmVOImpl;
import mmidfapp.model.views.MmIpoIdfOcVOImpl;

import oracle.adf.model.BindingContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.binding.BindingContainer;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 10 18:13:31 PDT 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmIpoIdfAMImpl extends ApplicationModuleImpl implements MmIpoIdfAM {
    /**
     * This is the default constructor (do not remove).
     */
    public static ADFLogger adfLog = (ADFLogger) ADFLogger.createADFLogger(MmIpoIdfAMImpl.class);
    private Integer fyid = null;
    Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
    String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
    String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
    String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
    Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
    private static int NUMBER = Types.NUMERIC;


    public MmIpoIdfAMImpl() {
    }

    /**
     * Container's getter for MmIpoIdfDtl1.
     * @return MmIpoIdfDtl1
     */
    public MmIpoIdfDtlVOImpl getMmIpoIdfDtl1() {
        return (MmIpoIdfDtlVOImpl) findViewObject("MmIpoIdfDtl1");
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;

    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    /**
     * Container's getter for MmIpoIdfItm1.
     * @return MmIpoIdfItm1
     */
    public MmIpoIdfItmVOImpl getMmIpoIdfItm1() {
        return (MmIpoIdfItmVOImpl) findViewObject("MmIpoIdfItm1");
    }

    /**
     * Container's getter for MmIpoIdfOc1.
     * @return MmIpoIdfOc1
     */
    public MmIpoIdfOcVOImpl getMmIpoIdfOc1() {
        return (MmIpoIdfOcVOImpl) findViewObject("MmIpoIdfOc1");
    }

    /**
     * Container's getter for MmIpoIdf1.
     * @return MmIpoIdf1
     */
    public ViewObjectImpl getMmIpoIdf1() {
        return (ViewObjectImpl) findViewObject("MmIpoIdf1");
    }

    /**
     * Container's getter for MMOrg1.
     * @return MMOrg1
     */
    public ViewObjectImpl getMMOrg1() {
        return (ViewObjectImpl) findViewObject("MMOrg1");
    }


    /**
     * Container's getter for MmIpoIdfDtl2.
     * @return MmIpoIdfDtl2
     */
    public MmIpoIdfDtlVOImpl getMmIpoIdfDtl2() {
        return (MmIpoIdfDtlVOImpl) findViewObject("MmIpoIdfDtl2");
    }

    /**
     * Container's getter for MmIpoIdfToMmIpoIdfDtlVL1.
     * @return MmIpoIdfToMmIpoIdfDtlVL1
     */
    public ViewLinkImpl getMmIpoIdfToMmIpoIdfDtlVL1() {
        return (ViewLinkImpl) findViewLink("MmIpoIdfToMmIpoIdfDtlVL1");
    }

    /**
     * Container's getter for MmIpoIdfItm2.
     * @return MmIpoIdfItm2
     */
    public MmIpoIdfItmVOImpl getMmIpoIdfItm2() {
        return (MmIpoIdfItmVOImpl) findViewObject("MmIpoIdfItm2");
    }

    /**
     * Container's getter for MMIpoIdfToMMIpoIdfItmVL1.
     * @return MMIpoIdfToMMIpoIdfItmVL1
     */
    public ViewLinkImpl getMMIpoIdfToMMIpoIdfItmVL1() {
        return (ViewLinkImpl) findViewLink("MMIpoIdfToMMIpoIdfItmVL1");
    }

    /**
     * Container's getter for MmIpoIdfOc2.
     * @return MmIpoIdfOc2
     */
    public MmIpoIdfOcVOImpl getMmIpoIdfOc2() {
        return (MmIpoIdfOcVOImpl) findViewObject("MmIpoIdfOc2");
    }

    /**
     * Container's getter for MMIpoIdfToMMIpoIdfOcVL1.
     * @return MMIpoIdfToMMIpoIdfOcVL1
     */
    public ViewLinkImpl getMMIpoIdfToMMIpoIdfOcVL1() {
        return (ViewLinkImpl) findViewLink("MMIpoIdfToMMIpoIdfOcVL1");
    }

    //Function to populate the po item in the tab one.
    public String populatePo(String Po_No) {
        String podocid = null;
        adfLog.info("in the populate po Method");
        String cldId = this.getMmIpoIdf1().getCurrentRow().getAttribute("CldId").toString();
        Integer slocId = Integer.parseInt(this.getMmIpoIdf1().getCurrentRow().getAttribute("SlocId").toString());
        String orgId = this.getMmIpoIdf1().getCurrentRow().getAttribute("OrgId").toString();
        String docid = this.getMmIpoIdf1().getCurrentRow().getAttribute("DocId").toString();
        Integer usrid = Integer.parseInt(this.getMmIpoIdf1().getCurrentRow().getAttribute("UsrIdCreate").toString());
        adfLog.info("cldId:" + cldId + " sloc:" + slocId + " orgId:" + orgId + "docid:" + docid + "usrid:" + usrid);
        adfLog.info("pono:" + Po_No);
        this.getLovPo1().setNamedWhereClauseParam("BindSlocId", resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
        this.getLovPo1().setNamedWhereClauseParam("BindCldId", resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}"));
        this.getLovPo1().setNamedWhereClauseParam("BindOrgId", resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}"));
        this.getLovPo1().executeQuery();
        Row r[] = this.getLovPo1().getFilteredRows("AuthPoNo", Po_No);
        if (r.length > 0) {
            podocid = r[0].getAttribute("DocId").toString();
        }
        adfLog.info("length" + r.length);
        this.getDBTransaction().postChanges();
        adfLog.info("CldId:" + cldId + " " + "SlocId :" + slocId + " " + "OrgId :" + orgId + " " + "DocId: " + docid +
                    " User Id:" + usrid + " " + "PoDocId:" + podocid);
        String result = (String) (callStoredFunction(Types.VARCHAR, "MM.MM_INS_IDF_FRM_PO(?,?,?,?,?,?)", new Object[] {
                                                     cldId, slocId, orgId, docid, podocid, usrid
        }));

        adfLog.info("result   :::  " + result);
        this.getMmIpoIdfItm2().executeQuery();
        this.getMmIpoIdfItm1().executeQuery();
        return result;

    }


    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        adfLog.info(" Txn");
        Row currentRow = this.getMmIpoIdf1().getCurrentRow();
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18535), new Integer(0)
        })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        adfLog.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        //currentRow.setAttribute("CallDt", new Timestamp(System.currentTimeMillis()));
        //currentRow.setAttribute("CrtDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdModDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("DocStat", new Integer(750));
        //currentRow.setAttribute("UsrIdMod", new Timestamp(System.currentTimeMillis()));
        fyid = getFYid(CldId, OrgId, ts, "A");


    }

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        adfLog.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            adfLog.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmIpoIdf1();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            adfLog.info("In case mode is validation");
        }
        return fyId;
    }

    /**
     * Container's getter for LovPo1.
     * @return LovPo1
     */
    public ViewObjectImpl getLovPo1() {
        return (ViewObjectImpl) findViewObject("LovPo1");
    }

    /**
     * Container's getter for MMItmVw1.
     * @return MMItmVw1
     */
    public ViewObjectImpl getMMItmVw1() {
        return (ViewObjectImpl) findViewObject("MMItmVw1");
    }

    public String CreateOc() {
        ViewObjectImpl oc = this.getMmIpoIdfOc2();
        Row r = oc.createRow();
        if (this.getMmIpoIdf1().getCurrentRow() != null) {
            adfLog.info("CoaId:" + this.getMmIpoIdf1().getCurrentRow().getAttribute("TransCoaId"));
            adfLog.info("OcAmtSp:::" + this.getMmIpoIdf1().getCurrentRow().getAttribute("TransOcAmtSp"));
            r.setAttribute("CoaId", this.getMmIpoIdf1().getCurrentRow().getAttribute("TransCoaId"));
            r.setAttribute("OcDesc", this.getMmIpoIdf1().getCurrentRow().getAttribute("TransOcDesc"));
            r.setAttribute("OcAmtSp", this.getMmIpoIdf1().getCurrentRow().getAttribute("TransOcAmtSp"));
            r.setAttribute("OcAmtBs", this.getMmIpoIdf1().getCurrentRow().getAttribute("TransOcAmtSp"));
            oc.insertRow(r);
        }
        this.getMmIpoIdf1().getCurrentRow().setAttribute("TransCoaId", null);
        this.getMmIpoIdf1().getCurrentRow().setAttribute("TransCoaNm", null);
        this.getMmIpoIdf1().getCurrentRow().setAttribute("TransOcDesc", new Integer(180));
        this.getMmIpoIdf1().getCurrentRow().setAttribute("TransOcAmtSp", new Number(0));
        //TransCoaNm
        return null;
    }

    public String isCOADuplicate() {
        ViewObjectImpl oc = this.getMmIpoIdfOc2();
        Integer coaId = Integer.parseInt(this.getMmIpoIdf1().getCurrentRow().getAttribute("TransCoaId").toString());
        String ret = "N";
        RowQualifier rq = new RowQualifier(oc);
        rq.setWhereClause("SlocId =" + SlocId + " and OrgId ='" + OrgId + "' and CldId ='" + CldId + "' and DocId ='" +
                          this.getMmIpoIdf1().getCurrentRow().getAttribute("DocId") + "' and CoaId =" + coaId + "  ");
        Row[] rr = oc.getFilteredRows(rq);
        adfLog.info(rq.getExprStr() + "  row count    " + rr.length);
        if (rr.length > 0) {
            ret = "Y";
        }
        return ret;
    }

    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaId1() {
        return (ViewObjectImpl) findViewObject("LovCoaId1");
    }

    public BindingContainer getBindings() {
        return BindingContext.getCurrent().getCurrentBindingsEntry();
    }

    public String genIDFNo() {
        Row cmRow = this.getMmIpoIdf1().getCurrentRow();
        String docNo = null;
        Integer docType = 0;
        adfLog.info("doctype is :" + docType);
        if (cmRow.getAttribute("IdfApplNo") == null) {
            // docType =Integer.parseInt(cmRow.getAttribute("CallRefType").toString());
            adfLog.info("Financial  year id:::" + fyid);
            docNo = (String) callStoredFunction(Types.VARCHAR, "MM.FN_MM_GEN_ID(?,?,?,?,?,?)", new Object[] {
                                                SlocId, CldId, OrgId, "MM$IPO$IDF", null, fyid
            });
            adfLog.info("new id    " + docNo);
            cmRow.setAttribute("IdfApplNo", docNo);
        } else {
            docNo = cmRow.getAttribute("IdfApplNo").toString();
        }
        return docNo;
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public ViewObjectImpl getSearch1() {
        return (ViewObjectImpl) findViewObject("Search1");
    }

    /**
     * Container's getter for TransSearch1.
     * @return TransSearch1
     */
    public ViewObjectImpl getTransSearch1() {
        return (ViewObjectImpl) findViewObject("TransSearch1");
    }

    public void searchIDF() {
        adfLog.info("in the searchIdf");
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        // Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        adfLog.info("CldId:" + cldId + " " + "SlocId:" + slocId + " OrgId:" + orgId);
        ViewObjectImpl srchvo = this.getSearch1();
        Row curr = getTransSearch1().getCurrentRow();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);
        adfLog.info("doc state " + curr.getAttribute("TransDocStat") + " " + curr.getAttribute("TransToDt"));
        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", curr.getAttribute("TransDocStat"));
            srchvo.setNamedWhereClauseParam("bindTodt", curr.getAttribute("TransToDt"));
            srchvo.setNamedWhereClauseParam("binddocno", curr.getAttribute("IDFNo"));
            srchvo.setNamedWhereClauseParam("binfFrmdt", curr.getAttribute("TransFrmDt"));
            srchvo.executeQuery();
        }

        srchvo.executeQuery();
    }

    public void resetIDF() {
        ViewObjectImpl srchvo = this.getSearch1();
        Row curr = getTransSearch1().getCurrentRow();
        String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        //Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        //String hoOrgId=resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();

        srchvo.setNamedWhereClauseParam("bindCldId", cldId);
        srchvo.setNamedWhereClauseParam("bindSlocId", slocId);
        srchvo.setNamedWhereClauseParam("bindOrgId", orgId);

        if (curr != null) {
            srchvo.setNamedWhereClauseParam("bindDocStat", null);
            srchvo.setNamedWhereClauseParam("bindTodt", null);
            srchvo.setNamedWhereClauseParam("binfFrmdt", null);
        }
        srchvo.executeQuery();
    }

    public void getIDFView(String CldId, Integer SlocId, String OrgId, String docId) {
        adfLog.info("inside view getIdfView  " + CldId + "  " + SlocId + "    " + OrgId + "  " + docId);
        ViewObjectImpl vo = this.getMmIpoIdf1();
        ViewCriteria vc = vo.getViewCriteria("MmIpoIdfVOCriteria"); //SvcCmWoVOCriteria
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("BindCldId", CldId);
        vo.setNamedWhereClauseParam("BindSlocId", SlocId);
        vo.setNamedWhereClauseParam("BindOrgId", OrgId);
        vo.setNamedWhereClauseParam("BindDocId", docId);
        vo.executeQuery();

    }

    public String insertDtl() {

        ViewObjectImpl d = this.getMmIpoIdfDtl2();
        //Row r=this.getMmIpoIdfDtl2().createRow();
        String dtl1 = (String) this.getMmIpoIdf1().getCurrentRow().getAttribute("TransDtl");
        String dtl2 = (String) this.getMmIpoIdf1().getCurrentRow().getAttribute("TransInfoHdr");
        Row r = this.getMmIpoIdfDtl2().createRow();
        if (dtl1 != null) {
            r.setAttribute("InfoDtl", dtl1);
        }
        //r.setAttribute("arg0", dtl1);
        if (dtl2 != null) {
            r.setAttribute("InfoHdr", dtl2);
        }

        d.insertRow(r);
        return null;

    }

    /**
     * Container's getter for LovCntrySrc1.
     * @return LovCntrySrc1
     */
    public ViewObjectImpl getLovCntrySrc1() {
        return (ViewObjectImpl) findViewObject("LovCntrySrc1");
    }

    /**
     * Container's getter for LovCurrName1.
     * @return LovCurrName1
     */
    public ViewObjectImpl getLovCurrName1() {
        return (ViewObjectImpl) findViewObject("LovCurrName1");
    }


    public String getWfNo(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        try {
            Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                            SlocId, CldId, OrgId, DocNo, 0
            });
            return obj.toString();
        } catch (Exception e) {
            return "0";
        }

    }


    public String setauthStat(String wfreturn) {
        Row curr = getMmIpoIdf1().getCurrentRow();
        //   String wfstat=resolvEl("#{pageFlowScope.wfReturn}");
        if ("A".equalsIgnoreCase(wfreturn)) {
            if (curr != null) {
                //curr.setAttribute("AuthStat", "Y");
                curr.setAttribute("DocStat", 752);
                //curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
                //curr.setAttribute("AuthStatDt", new Timestamp(System.currentTimeMillis()));
                //adfLog.info("auth stat is "+curr.getAttribute("AuthStat")+" docStat is "+curr.getAttribute("DocStat"));





            }
        } else if ("F".equals(wfreturn)) {
            curr.setAttribute("DocStat", 751);
            //curr.setAttribute("DocStatDt", new Timestamp(System.currentTimeMillis()));
        }
        return null;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {

        String DocId = getMmIpoIdf1().getCurrentRow().getAttribute("DocId").toString();
        //System.out.println("DOCIDTXN--"+docIdTxn);
        // Object obj= callStoredFunction(NUMBER, "APP.PKG_APP_WF.GET_DOC_WF_CUR_USR(?,?,?,?,?)", new Object[] { SlocId,CldId,OrgId,DocNo,DocId });
        Object obj = Integer.parseInt(callStoredFunction(NUMBER, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                                         SlocId, CldId, OrgId, DocNo, DocId, 0
        }).toString());

        Integer UsrId = null;
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }
        return UsrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer UsrId, String WfNo, String DocNo) {
        Object obj = callStoredFunction(NUMBER, "APP.WF_GET_USR_LEVEL (?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, UsrId, WfNo, DocNo, 0
        });
        if (obj != null) {
            UsrId = Integer.parseInt(obj.toString());
        }

        return (Integer) UsrId;
    }


    public Integer insIntoTxn(Integer SlocId, String CldId, String OrgId, Integer DocNo, String WfNo, Integer usr_idFrm,
                              Integer usr_idTo, Integer levelTo, Integer levelFrm, String action, String remark,
                              Number amount) {
        String DocId = getMmIpoIdf1().getCurrentRow().getAttribute("DocId").toString();

        // Integer DocNo1 = 23001;
        adfLog.info("DocNo-------" + DocNo + "  DocId----" + DocId + "  WfNo----" + WfNo + "DocNo1-----" + DocNo);
        Object obj = callStoredFunction(NUMBER, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, 0, WfNo, DocId, usr_idFrm, usr_idTo, levelFrm,
                                        levelTo, action, remark, amount
        });
        adfLog.info("function return a value inthe txn is " + obj);
        Integer temp = Integer.parseInt(obj.toString());
        return temp;

    }

    public String checkSourceDest() {
        if (this.getMmIpoIdf1().getCurrentRow().getAttribute("PortIdDest") != null &&
            this.getMmIpoIdf1().getCurrentRow().getAttribute("PortIdSrc") != null) {

            String prtDest = (String) this.getMmIpoIdf1().getCurrentRow().getAttribute("PortIdDest");
            String prtSrc = (String) this.getMmIpoIdf1().getCurrentRow().getAttribute("PortIdSrc");
            adfLog.info("Destination port " + prtSrc);

            if (prtDest.equals(prtSrc)) {
                return "Y";
            }
        }

        return "N";
    }

    public String checkSource(String src) {
        adfLog.info("in the checkSource " + src);
        if (src != null) {

            String prt = (String) this.getMmIpoIdf1().getCurrentRow().getAttribute("PortIdDest");
            adfLog.info("Destination port " + prt);

            if (prt != null && prt.equals(src)) {
                return "Y";
            }
        }

        return "N";
    }

    public String checkDestination(String dst) {
        adfLog.info("in the checkDestination " + dst);
        if (dst != null) {
            String prt = (String) this.getMmIpoIdf1().getCurrentRow().getAttribute("PortIdSrc");
            adfLog.info("source port:" + prt);
            if (prt != null && prt.equals(dst)) {
                return "Y";
            }
        }
        return "N";
    }

    public String getUsrNm(Integer usrId) {
        ViewObjectImpl usrvo = this.getLovUsrId1();
        String usrname = null;
        if (usrId != null) {
            Row[] rr = usrvo.getFilteredRows("UsrId", usrId);
            if (rr.length > 0) {
                usrname = rr[0].getAttribute("UsrName").toString();
                return rr[0].getAttribute("UsrName").toString();
            }
        }

        return usrname;
    }

    public void createDetails(String Detail, String hdr) {
        //Integer usrId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        // Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());

        Row curr = this.getMmIpoIdf1().getCurrentRow();


        if (curr.getAttribute("TransDtl") != null && curr.getAttribute("TransInfoHdr") != null) {
            ViewObjectImpl asgn = this.getMmIpoIdfDtl2();
            Row r = asgn.createRow();
            //r.setAttribute("HoOrgId", HoOrgId);
            r.setAttribute("InfoDtl", curr.getAttribute("TransDtl"));
            r.setAttribute("InfoHdr", curr.getAttribute("TransInfoHdr"));
            // r.setAttribute("UsrIdCrt", usrId);
            //r.setAttribute("CrtDt", new java.sql.Timestamp(System.currentTimeMillis()));
            //  r.setAttribute("ModDt", new java.sql.Timestamp(System.currentTimeMillis())); */
            //r.setAttribute("UsrIdMod", usrId);
            //r.setAttribute(arg0, arg1);
            asgn.insertRow(r);
            curr.setAttribute("TransDtl", null);
            curr.setAttribute("TransInfoHdr", null);

        }
    }

    public String DetailDuplicate() {

        Row curr = this.getMmIpoIdf1().getCurrentRow();
        //   Row curritm = this.getSvcCmWoItm3().getCurrentRow();
        //Row currsrc = this.getSvcCmWoSrc1().getCurrentRow();
        ViewObjectImpl assgn = this.getMmIpoIdfDtl2();
        adfLog.info(" in the AsgnDuplicate " + curr.getAttribute("TransDtl") + " header is  " +
                    curr.getAttribute("TransInfoHdr"));
        if (curr.getAttribute("TransDtl") != null && curr.getAttribute("TransInfoHdr") != null) {
            RowQualifier rq = new RowQualifier(assgn);
            rq.setWhereClause("InfoHdr='" + curr.getAttribute("TransInfoHdr") + "' and InfoDtl= '" +
                              curr.getAttribute("TransDtl") + "'");
            adfLog.info("assgn expression is " + rq.getExprStr());
            Row[] rr = assgn.getFilteredRows(rq);

            if (rr.length > 0) {

                return "N";
            } else {
                return "Y";
            }

        }
        return "Y";
    }

    /**
     * Container's getter for LovUsrId1.
     * @return LovUsrId1
     */
    public ViewObjectImpl getLovUsrId1() {
        return (ViewObjectImpl) findViewObject("LovUsrId1");
    }

    /**
     * Container's getter for LovOcDesc1.
     * @return LovOcDesc1
     */
    public ViewObjectImpl getLovOcDesc1() {
        return (ViewObjectImpl) findViewObject("LovOcDesc1");
    }


    public String dateValidator() {
        //if(cur)
        //        adfLog.info("in the ampl method");
        //        java.sql.Date strtDt=null;
        //        java.sql.Date endDt=null;
        //
        //                            strtDt =(java.sql.Date)this.getMmIpoIdf1().getCurrentRow().getAttribute("IdfApplDt");
        //                            endDt =(java.sql.Date)this.getMmIpoIdf1().getCurrentRow().getAttribute("DischDt");
        //
        //                      adfLog.info("start date:"+strtDt+" "+"end date:"+endDt);
        //                       if(strtDt!=null && endDt!=null)
        //                       {
        //                            if(strtDt.compareTo(endDt)<0)
        //                            {
        //
        //
        //                                return "Y";
        ////                                if(strtDt.toString().equals(endDt.toString())){
        ////                                     return "Y";
        ////                                }else{
        ////                                    return "N";
        ////                                 }
        //                            }
        //                       }
        //
        //
        return null;
    }

    /**
     * Method to get default file location
     * **/
    public String getUpFilePath(Integer slcId) {
        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_GET_APP_DOC_ATTACH_PATH(?)", new Object[] { slcId });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    // showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            // System.out.println("ERROR IN CALLING FUNCTION FN_GET_APP_DOC_ATTACH_PATH at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //  showFacesMsg("Error while fetching file path details", null, FacesMessage.SEVERITY_ERROR, null);

        return null;
    }

    /**
     * Method to get system generated file no
     * **/
    public String getUpFileId(String cldId, Integer slcId, String hoOrgId, String orgId) {

        Object fnRetVal;

        try {
            fnRetVal = callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_FILE_ATTCH_ID(?,?,?,?,?)", new Object[] {
                                          slcId, cldId, hoOrgId, orgId, "MM$IPO$IDF$ATTCH"
            });

            if (fnRetVal != null) {

                if (fnRetVal.equals(-1)) {
                    //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);
                }

                return fnRetVal.toString();
            }

        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_APP_GEN_FILE_ATTCH_ID at AMIMPL :" + e.getMessage());
            e.printStackTrace();

        }
        //showFacesMsg("Error while fetching file Id details", null, FacesMessage.SEVERITY_ERROR, null);

        return "0";
    }

    //Upload File Function----
    public String createAttchmntRow(String contentTyp, String fileNm, String extn) {
        adfLog.info("Inside AMIMPL");
        String path = getUpFilePath(getSlocId());
        System.out.println("path " + path);

        String fileId = getUpFileId(getCldId(), getSlocId(), getHoOrgId(), getOrgId());
        adfLog.info("fileId " + fileId);

        Row r = getMmIpoIdfAttch2().createRow();

        adfLog.info("contentTyp " + contentTyp);
        r.setAttribute("HoOrgId", getHoOrgId());
        r.setAttribute("FlExtn", extn);
        r.setAttribute("DispFlNm", fileNm);
        r.setAttribute("FlNm", fileId);
        r.setAttribute("FlPath", path + fileId + extn);

        getMmIpoIdfAttch2().insertRow(r);

        this.getDBTransaction().postChanges(); // Used this for increasing fileId else throws too many object error

        return path + fileId;
    }

    public void setUsrId(Integer usrId) {
        this.usrId = usrId;
    }

    public Integer getUsrId() {
        return usrId;
    }

    public void setCldId(String CldId) {
        this.CldId = CldId;
    }

    public String getCldId() {
        return CldId;
    }

    public void setOrgId(String OrgId) {
        this.OrgId = OrgId;
    }

    public String getOrgId() {
        return OrgId;
    }

    public void setHoOrgId(String HoOrgId) {
        this.HoOrgId = HoOrgId;
    }

    public String getHoOrgId() {
        return HoOrgId;
    }

    public void setSlocId(Integer SlocId) {
        this.SlocId = SlocId;
    }

    public Integer getSlocId() {
        return SlocId;
    }


    /**
     * Container's getter for MmIpoIdfAttch2.
     * @return MmIpoIdfAttch2
     */
    public ViewObjectImpl getMmIpoIdfAttch2() {
        return (ViewObjectImpl) findViewObject("MmIpoIdfAttch2");
    }

    /**
     * Container's getter for MmIpoIdfToMmIpoIdfAttchVL2.
     * @return MmIpoIdfToMmIpoIdfAttchVL2
     */
    public ViewLinkImpl getMmIpoIdfToMmIpoIdfAttchVL2() {
        return (ViewLinkImpl) findViewLink("MmIpoIdfToMmIpoIdfAttchVL2");
    }


    public String resetValuesIdf() {
        System.out.println("in the resetValueidf");
        Row r = this.getMmIpoIdf1().getCurrentRow();
        r.setAttribute("IdfNo", null);
        r.setAttribute("IdfDt", null);
        r.setAttribute("IdfFee", null);
        r.setAttribute("IdfFeeAdv", null);
        r.setAttribute("IdfRcptNo", null);
        r.setAttribute("IdfRcptDt", null);
        return null;
    }

    /**
     * Container's getter for LovPoIdForDisp1.
     * @return LovPoIdForDisp1
     */
    public ViewObjectImpl getLovPoIdForDisp() {
        return (ViewObjectImpl) findViewObject("LovPoIdForDisp");
    }


    public void deleteAttachFileRow(String path) {
        RowSetIterator rowSetIterator = null;
        try {
            //System.out.println("File path in AMimpl : " + path);
            String filePath = "";
            String fileNm = "", cldId = "", orgId = "", docId = "";
            int slocId = 1;
            ViewObjectImpl attch1 = this.getMmIpoIdfAttch2();
            Row[] rows = attch1.getFilteredRows("FlPath", path);
            System.out.println(rows.length);
            if (rows.length > 0) {
                fileNm = (String) rows[0].getAttribute("FlNm");
                cldId = (String) rows[0].getAttribute("CldId");
                orgId = (String) rows[0].getAttribute("OrgId");

                slocId = Integer.parseInt(rows[0].getAttribute("SlocId").toString());
                docId = (String) rows[0].getAttribute("DocId");
            }
            rowSetIterator = attch1.getRowSetIterator();
            Key key = new Key(new Object[] { cldId, docId, fileNm, orgId, slocId });
            //Row[] ro = rowSetIterator.findByKey(key, 1);
            //System.out.println("Filtered Row : "+ro.length);
            Row row = rowSetIterator.findByKey(key, 1)[0];
            rowSetIterator.setCurrentRow(row);
            Row r = this.getMmIpoIdfAttch2().getCurrentRow();
            filePath = (String) r.getAttribute("FlPath");
            //System.out.println("Current Row File Path : "+filePath);
            filePath = (String) row.getAttribute("FlPath");
            //System.out.println("Row File Path : "+filePath);
            File f = new File(filePath);
            if (f.exists()) {
                boolean success = f.delete();
                System.out.println("File Deleted");
            }
        } catch (Exception x) {

            System.err.format("%s: no such" + " file or directory%n", path);
        }
        rowSetIterator.removeCurrentRow();
    }

    /**
     * Container's getter for LovOrgId1.
     * @return LovOrgId1
     */
    public ViewObjectImpl getLovOrgId1() {
        return (ViewObjectImpl) findViewObject("LovOrgId1");
    }

    public String setOrgDesc() {
        System.out.println("inside importer name");
        String orgNM = "";

        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        if (getOrgId() != null && getOrgId().toString().length() > 0) {

            ViewObjectImpl vo = this.getLovOrgId1();
            vo.setNamedWhereClauseParam("cldidBind", CldId);
            vo.setNamedWhereClauseParam("orgidBind", OrgId);
            vo.executeQuery();
            Row[] filteredRows = vo.getFilteredRows("OrgId", this.getMmIpoIdf1().getCurrentRow().getAttribute("OrgId"));
            System.out.println("filtered rows length" + filteredRows.length);
            if (filteredRows.length > 0) {
                orgNM = filteredRows[0].getAttribute("OrgDesc").toString();
                System.out.println("value of orgnm" + orgNM);
                if (orgNM != null) {
                    this.getMmIpoIdf1().getCurrentRow().setAttribute("ImporterNm", orgNM);

                }
            }
        }
        return orgNM;
    }
}
    
    
    
    
//}
