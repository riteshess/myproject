package mmissuematerial.model.service;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmissuematerial.model.service.common.MaterialIsseAM;
import mmissuematerial.model.views.LovDispMrsDocNoVOImpl;
import mmissuematerial.model.views.MmMtlIssuItmVORowImpl;
import mmissuematerial.model.views.MmMtlIssuSrcVOImpl;
import mmissuematerial.model.views.ViewMmStkSummBinVOImpl;
import mmissuematerial.model.views.ViewMmStkSummLotVOImpl;

import mmissuematerial.model.views.ViewMmStkSummSrVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 02 18:35:10 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MaterialIsseAMImpl extends ApplicationModuleImpl implements MaterialIsseAM {
    /**
     * This is the default constructor (do not remove).
     */
    public MaterialIsseAMImpl() {
    }


    private static ADFLogger adflog = ADFLogger.createADFLogger(MaterialIsseAMImpl.class);
    Number one = new Number(1);
    Number zero = new Number(0);
    String hoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
    String cldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
    Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}"));
    String orgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
    String binChkFlg = resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");

    /**
     * Container's getter for MmMtlIssu.
     * @return MmMtlIssu
     */
    public ViewObjectImpl getMmMtlIssu() {
        return (ViewObjectImpl) findViewObject("MmMtlIssu");
    }

    /**
     * Container's getter for MmMtlIssuSrc.
     * @return MmMtlIssuSrc
     */
    public ViewObjectImpl getMmMtlIssuSrc() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuSrc");
    }

    /**
     * Container's getter for MmMtlIssuItm.
     * @return MmMtlIssuItm
     */
    public ViewObjectImpl getMmMtlIssuItm() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuItm");
    }

    /**
     * Container's getter for FkMmMtlIssuSrcVL2.
     * @return FkMmMtlIssuSrcVL2
     */
    public ViewLinkImpl getFkMmMtlIssuSrcVL2() {
        return (ViewLinkImpl) findViewLink("FkMmMtlIssuSrcVL2");
    }

    /**
     * Container's getter for FkMmMtlIssuItmVL1.
     * @return FkMmMtlIssuItmVL1
     */
    public ViewLinkImpl getFkMmMtlIssuItmVL1() {
        return (ViewLinkImpl) findViewLink("FkMmMtlIssuItmVL1");
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            // adflog.info("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     *  Create DocId and DocDt
     * @param UsrId
     * @param CldId
     * @param SlocId
     * @param OrgId
     */


    public void setTxnIdForCurrentRow(Integer UsrId, String CldId, Integer SlocId, String OrgId) {
        String paramWhChk = resolvEl("#{pageFlowScope.GLBL_ORG_WH_CHK}");
        String whIdDef = resolvEl("#{pageFlowScope.PARAM_USR_WH_ID}");
        // String prjDef=resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
        String prjId = resolvEl("#{pageFlowScope.GLBL_ORG_PROJ_ID}");
        Row currentRow = this.getMmMtlIssu().getCurrentRow();
        // String txnId = (String)callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?)", new Object[]{SlocId,CldId,OrgId,tableName});
        String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {
                                                    CldId, SlocId, OrgId, UsrId, new Integer(18516), new Integer(0)
        })); // app.pkg_app.get_txn_id(p_usr_id,p_org_id,p_sloc_id,18505)
        adflog.info("--TxnId new created--" + docId);
        Timestamp ts = new Timestamp(System.currentTimeMillis());
        currentRow.setAttribute("DocId", docId);
        currentRow.setAttribute("DocDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("IssuDt", new Timestamp(System.currentTimeMillis()));
        currentRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
        // currentRow.setAttribute("PrjId", prjId);
        getFYid(CldId, OrgId, ts, "A");
        if ("N".equals(paramWhChk)) {
            currentRow.setAttribute("WhId", "WH00001");
            currentRow.setAttribute("PrjId", "PROJ0000");
        } else if ("Y".equals(paramWhChk)) {
            currentRow.setAttribute("WhId", whIdDef);
            currentRow.setAttribute("PrjId", prjId);
        }

    }

    /**
     * Generate Issue No
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param TableName
     * @return
     */
    public String generateIssueNo(Integer SlocId, String CldId, String OrgId, String TableName) {
        String issueId = (String) callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?)", new Object[] {
                                                     SlocId, CldId, OrgId, TableName
        });
        adflog.info("new id    " + issueId);
        this.getMmMtlIssu().getCurrentRow().setAttribute("IssuNo", issueId);
        return issueId;
    }

    /**
     *
     * @param SlocId
     * @param CldId
     * @param OrgId
     * @param TableName
     * @param WhId
     * @param fyId
     * @return
     */

    public String genIssueNo(Integer SlocId, String CldId, String OrgId, String TableName, String WhId, Integer fyId) {
        Row issuRow = this.getMmMtlIssu().getCurrentRow();
        String issueNo = null;
        if (issuRow.getAttribute("IssuNo") == null) {
            issueNo = (String) callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                                  SlocId, CldId, OrgId, TableName, WhId, fyId, new Integer(18516),
                                                  (Integer) issuRow.getAttribute("IssuType")
            });
            adflog.info("new id    " + issueNo);
            issuRow.setAttribute("IssuNo", issueNo);
        } else {
            issueNo = issuRow.getAttribute("IssuNo").toString();
        }
        return issueNo;
    }

    /**
     *
     * @param CldId
     * @param OrgId
     * @param geDate
     * @param Mode
     * @return
     */

    public Integer getFYid(String CldId, String OrgId, Timestamp geDate, String Mode) {
        Integer fyId = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, geDate
        }));
        adflog.info("-FY RETURNED-" + fyId);
        if (Mode.equalsIgnoreCase("A")) {
            adflog.info("Set FyId in case mode is add");
            ViewObjectImpl ge = this.getMmMtlIssu();
            if (fyId > 0) {
                ge.getCurrentRow().setAttribute("FyId", fyId);
            }
        } else if (Mode.equalsIgnoreCase("V")) {
            adflog.info("In case mode is validation");
        }
        return fyId;
    }

    public String checkWhOrgRequird() {
        ViewObjectImpl mtlIssu = this.getMmMtlIssu();
        Row curr = mtlIssu.getCurrentRow();
        String ret = "N";
        Integer issuType = Integer.parseInt(curr.getAttribute("IssuType").toString());
        Integer issuto = Integer.parseInt(curr.getAttribute("TransIssueDocType").toString());
        if (issuType != null && issuto != null) {
            if (issuType == 323 && curr.getAttribute("RqmtAreaIdSrc") == null) {
                ret = "R";
                curr.setAttribute("TransDocumentNo", null);
                adflog.info("R------------------------");
            } else if (issuType == 325 && issuto == 330 && curr.getAttribute("WhIdSrc") == null) {
                ret = "W";
                curr.setAttribute("TransDocumentNo", null);
                adflog.info("W------------------------");
            } else if (issuType == 325 && issuto == 366 && curr.getAttribute("OrgIdSrc") == null) {
                ret = "O";
                curr.setAttribute("TransDocumentNo", null);
                adflog.info("O------------------------");
            } else if (issuType == 325 && issuto == 366 && curr.getAttribute("OrgIdSrc") != null &&
                       curr.getAttribute("WhIdSrc") == null) {
                ret = "S";
                curr.setAttribute("TransDocumentNo", null);
                adflog.info("S------------------------");
            } else if (issuType == 323 && curr.getAttribute("RqmtAreaIdSrc") != null &&
                       curr.getAttribute("RetnblIssu") != null &&
                       "Y".equalsIgnoreCase(curr.getAttribute("RetnblIssu").toString())) {
                if (curr.getAttribute("RetnblDt") == null) {
                    ret = "D";
                    curr.setAttribute("TransDocumentNo", null);
                    adflog.info("D------------------------");
                }
            }
            if (issuType == 324 && issuto == 837 && curr.getAttribute("EoIdSrc") == null) {
                ret = "E";
                curr.setAttribute("TransDocumentNo", null);
                adflog.info("E------------------------");
            }
        }
        if (curr.getAttribute("RetnblIssu") != null &&
            "N".equalsIgnoreCase(curr.getAttribute("RetnblIssu").toString())) {
            curr.setAttribute("RetnblDt", null);
            adflog.info("required-----------> " + ret);
        }
        return ret;
    }

    /**
     *
     * @param cldId
     * @param slocId
     * @param orgId
     * @param issuSrcType
     */
    public void chkIssueType(String cldId, Integer slocId, String orgId, Integer issuSrcType) {
        adflog.info("src type-----" + issuSrcType);
        if (issuSrcType == 326 || issuSrcType == 837) {
            adflog.info("call --------populateItmFrmDoc");
            this.populateItmFrmDoc(cldId, slocId, orgId);
        } else if (issuSrcType == 330 || issuSrcType == 366) {
            adflog.info("call --------populateItmFrmTrfOdrDoc");
            this.populateItmFrmTrfOdrDoc(cldId, slocId, orgId);
        } else if (issuSrcType == 800) {
            this.populateItmFrmSvcSc(cldId, slocId, orgId);
        }
    }

    public void populateItmFrmDoc(String cldId, Integer slocId, String orgId) {
        ViewObjectImpl mtlIssu = this.getMmMtlIssu();
        ViewObjectImpl issuSrc = this.getMmMtlIssuSrc();
        ViewObjectImpl issuItm = this.getMmMtlIssuItm();
        ViewObjectImpl mrsItm = this.getLovMmMrsItm();

        adflog.info("inside populate data");
        Row currIssu = mtlIssu.getCurrentRow();

        Integer SlocId = Integer.parseInt(currIssu.getAttribute("SlocId").toString());
        String OrgId = currIssu.getAttribute("OrgId").toString();
        String CldId = currIssu.getAttribute("CldId").toString();
        String srcDocId = (String) currIssu.getAttribute("TransSrcDocId");
        // Integer issueDocType = Integer.parseInt(currIssu.getAttribute("TransIssueDocType").toString());
        adflog.info("trans source docid is " + currIssu.getAttribute("TransSrcDocId"));
        Row srcInsrt = issuSrc.createRow();
        srcInsrt.setAttribute("IssuDocType", currIssu.getAttribute("TransIssueDocType"));
        srcInsrt.setAttribute("DocIdSrc", currIssu.getAttribute("TransSrcDocId"));
        srcInsrt.setAttribute("DocDtSrc", currIssu.getAttribute("TransSrcDocDt"));
        srcInsrt.setAttribute("DocIdSrcDisp", currIssu.getAttribute("TransDocumentNo"));
        issuSrc.insertRow(srcInsrt);
        issuSrc.executeQuery();
        Row[] itmRow = this.getLovMmMrsItm().getFilteredRows("MrsTxnId", srcDocId);

        adflog.info("length--------" + itmRow.length);
        if (itmRow.length > 0) {
            for (Row r : itmRow) {
                if ("N".equalsIgnoreCase(r.getAttribute("CnclItm").toString())) {
                    Number pending = (Number) r.getAttribute("PendQty");
                    if (pending.compareTo(new Number(0)) == 1) {
                        String uomBs = null;
                        String serializFlg = "Y";
                        Integer pickOrder = 0;
                        Number convfact = new Number(0);
                        if (r.getAttribute("ItmId") != null) {
                            ViewObjectImpl tunevo = this.getLovItmIdTune();
                            tunevo.setNamedWhereClauseParam("bindCldId", cldId);
                            tunevo.setNamedWhereClauseParam("bindSlocId", slocId);
                            tunevo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
                            tunevo.setNamedWhereClauseParam("bindItmId", r.getAttribute("ItmId"));
                            tunevo.executeQuery();
                            Row[] row = tunevo.getFilteredRows("ItmId", r.getAttribute("ItmId"));
                            if (row.length > 0) {
                                uomBs = row[0].getAttribute("UomBasic").toString();
                                serializFlg = row[0].getAttribute("SerializedFlg").toString();
                                if (row[0].getAttribute("PickOrder") != null) {
                                    pickOrder = Integer.parseInt(row[0].getAttribute("PickOrder").toString());
                                } else {
                                    pickOrder = 307;
                                }
                            }
                            adflog.info("uomBs        " + uomBs);
                        }
                        if (r.getAttribute("ItmId") != null && r.getAttribute("ItmUomBs") == null &&
                            r.getAttribute("UomConvFctr") == null) {
                            if (uomBs != null && r.getAttribute("ItmUom") != null) {
                                adflog.info("----" + SlocId + "------------" + CldId + "--------" + OrgId +
                                            "----------" + r.getAttribute("ItmId") + "-------" +
                                            r.getAttribute("ItmUom") + "----------" + uomBs);
                                BigDecimal uomConv =
                                    (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                                     "APP.FN_GET_UOM_CONV_FCTR (?,?,?,?,?,?)", new Object[] {
                                                                     SlocId, CldId, OrgId,
                                                                     r.getAttribute("ItmId").toString(),
                                                                     r.getAttribute("ItmUom").toString(), uomBs
                                }));
                                adflog.info("uomConv-----------" + uomConv);
                                try {
                                    convfact = new Number(uomConv);
                                } catch (SQLException e) {
                                }
                                adflog.info("conv factor   " + convfact);
                            }
                        } else if (r.getAttribute("ItmUomBs") != null && r.getAttribute("UomConvFctr") != null) {
                            uomBs = r.getAttribute("ItmUomBs").toString();
                            convfact = (Number) r.getAttribute("UomConvFctr");
                            adflog.info(uomBs + "  in MRS " + convfact);
                        }
                        adflog.info("inside new create row-------------");
                        Row newRow = issuItm.createRow();
                        newRow.setAttribute("IssuDocType", currIssu.getAttribute("TransIssueDocType"));
                        newRow.setAttribute("DocIdSrc", currIssu.getAttribute("TransSrcDocId"));
                        newRow.setAttribute("DocDtSrc", currIssu.getAttribute("TransSrcDocDt"));
                        newRow.setAttribute("ItmId", r.getAttribute("ItmId"));
                        newRow.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                        if (uomBs != null) {
                            newRow.setAttribute("ItmUomBs", uomBs);
                        }
                        if (convfact.compareTo(new Number(0)) > 0) {
                            newRow.setAttribute("UomConvFctr", convfact);
                        }
                        newRow.setAttribute("PendQty", r.getAttribute("PendQty"));
                        newRow.setAttribute("TransItmSerializedFlg", serializFlg);
                        if (pickOrder != null && pickOrder != 0) {
                            newRow.setAttribute("TransItmPickOrder", pickOrder);
                        }
                        issuItm.insertRow(newRow);
                        issuItm.executeQuery();
                    }
                }
            }
        }
        currIssu.setAttribute("TransDocumentNo", null);
    }

    public void populateItmFrmTrfOdrDoc(String cldId, Integer slocId, String orgId) {
        ViewObjectImpl mtlIssu = this.getMmMtlIssu();
        ViewObjectImpl issuSrc = this.getMmMtlIssuSrc();
        ViewObjectImpl issuItm = this.getMmMtlIssuItm();
        ViewObjectImpl mrsItm = this.getLovMmMrsItm();
        adflog.info("2222222inside populate data");
        Row currIssu = mtlIssu.getCurrentRow();
        Integer SlocId = Integer.parseInt(currIssu.getAttribute("SlocId").toString());
        String OrgId = currIssu.getAttribute("OrgId").toString();
        String CldId = currIssu.getAttribute("CldId").toString();
        String srcDocId = (String) currIssu.getAttribute("TransSrcDocId");
        Integer issueDocType = Integer.parseInt(currIssu.getAttribute("TransIssueDocType").toString());
        Row srcInsrt = issuSrc.createRow();
        srcInsrt.setAttribute("IssuDocType", currIssu.getAttribute("TransIssueDocType"));
        srcInsrt.setAttribute("DocIdSrc", currIssu.getAttribute("TransSrcDocId"));
        srcInsrt.setAttribute("DocDtSrc", currIssu.getAttribute("TransSrcDocDt"));
        srcInsrt.setAttribute("DocIdSrcDisp", currIssu.getAttribute("TransDocumentNo"));
        issuSrc.insertRow(srcInsrt);
        issuSrc.executeQuery();
        Row[] itmRow = this.getLovMmTrfOdrItm().getFilteredRows("DocId", srcDocId);

        adflog.info("22222length--------" + itmRow.length);
        if (itmRow.length > 0) {
            for (Row r : itmRow) {
                if ("N".equalsIgnoreCase(r.getAttribute("CnclItm").toString())) {
                    Number pending = (Number) r.getAttribute("PendQty");
                    if (pending.compareTo(new Number(0)) == 1) {
                        String uomBs = null;
                        String serializFlg = "Y";
                        Integer pickOrder = 0;
                        Number convfact = new Number(0);
                        if (r.getAttribute("ItmId") != null) {
                            ViewObjectImpl tunevo = this.getLovItmIdTune();
                            tunevo.setNamedWhereClauseParam("bindCldId", cldId);
                            tunevo.setNamedWhereClauseParam("bindSlocId", slocId);
                            tunevo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
                            tunevo.setNamedWhereClauseParam("bindItmId", r.getAttribute("ItmId"));
                            tunevo.executeQuery();
                            Row[] row = tunevo.getFilteredRows("ItmId", r.getAttribute("ItmId"));
                            if (row.length > 0) {
                                uomBs = row[0].getAttribute("UomBasic").toString();
                                serializFlg = row[0].getAttribute("SerializedFlg").toString();
                                if (row[0].getAttribute("PickOrder") != null) {
                                    pickOrder = Integer.parseInt(row[0].getAttribute("PickOrder").toString());
                                } else {
                                    pickOrder = 307;
                                }
                            }
                            adflog.info("222222uomBs        " + uomBs);
                        }
                        if (r.getAttribute("ItmId") != null && r.getAttribute("ItmUomBs") == null &&
                            r.getAttribute("UomConvFctr") == null) {
                            if (uomBs != null && r.getAttribute("ItmUom") != null) {
                                adflog.info("22222----" + SlocId + "------------" + CldId + "--------" + OrgId +
                                            "----------" + r.getAttribute("ItmId") + "-------" +
                                            r.getAttribute("ItmUom") + "----------" + uomBs);
                                BigDecimal uomConv =
                                    (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                                     "APP.FN_GET_UOM_CONV_FCTR (?,?,?,?,?,?)", new Object[] {
                                                                     SlocId, CldId, OrgId,
                                                                     r.getAttribute("ItmId").toString(),
                                                                     r.getAttribute("ItmUom").toString(), uomBs
                                }));
                                adflog.info("uomConv22222-----------" + uomConv);
                                try {
                                    convfact = new Number(uomConv);
                                } catch (SQLException e) {
                                }
                                adflog.info("conv factor   " + convfact);
                            }
                        } else if (r.getAttribute("ItmUomBs") != null && r.getAttribute("UomConvFctr") != null) {
                            uomBs = r.getAttribute("ItmUomBs").toString();
                            convfact = (Number) r.getAttribute("UomConvFctr");
                            adflog.info(uomBs + "  in TRF ORD " + convfact);
                        }
                        adflog.info("inside new create row22222222-------------");
                        Row newRow = issuItm.createRow();
                        newRow.setAttribute("IssuDocType", currIssu.getAttribute("TransIssueDocType"));
                        newRow.setAttribute("DocIdSrc", currIssu.getAttribute("TransSrcDocId"));
                        newRow.setAttribute("DocDtSrc", currIssu.getAttribute("TransSrcDocDt"));
                        newRow.setAttribute("ItmId", r.getAttribute("ItmId"));
                        newRow.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                        if (uomBs != null) {
                            newRow.setAttribute("ItmUomBs", uomBs);
                        }
                        if (convfact.compareTo(new Number(0)) > 0) {
                            newRow.setAttribute("UomConvFctr", convfact);
                        }
                        newRow.setAttribute("PendQty", r.getAttribute("PendQty"));
                        newRow.setAttribute("TransItmSerializedFlg", serializFlg);
                        if (pickOrder != null && pickOrder != 0) {
                            newRow.setAttribute("TransItmPickOrder", pickOrder);
                        }
                        issuItm.insertRow(newRow);
                        issuItm.executeQuery();
                    }
                }
            }
        }
        currIssu.setAttribute("TransDocumentNo", null);
    }


    public void populateItmFrmSvcSc(String cldId, Integer slocId, String orgId) {
        ViewObjectImpl mtlIssu = this.getMmMtlIssu();
        ViewObjectImpl issuSrc = this.getMmMtlIssuSrc();
        ViewObjectImpl issuItm = this.getMmMtlIssuItm();
        ViewObjectImpl scItm = this.getLovScItm();
        adflog.info("2222222inside populate data");
        Row currIssu = mtlIssu.getCurrentRow();
        /*    Integer SlocId = Integer.parseInt(currIssu.getAttribute("SlocId").toString());
        String OrgId = currIssu.getAttribute("OrgId").toString();
        String CldId = currIssu.getAttribute("CldId").toString(); */
        String srcDocId = (String) currIssu.getAttribute("TransSrcDocId");
        //Integer issueDocType = Integer.parseInt(currIssu.getAttribute("TransIssueDocType").toString());
        adflog.info("trans source doc id is " + srcDocId + " trans document no " +
                    currIssu.getAttribute("TransDocumentNo"));
        Row srcInsrt = issuSrc.createRow();
        srcInsrt.setAttribute("IssuDocType", currIssu.getAttribute("TransIssueDocType"));
        srcInsrt.setAttribute("DocIdSrc", currIssu.getAttribute("TransSrcDocId"));
        srcInsrt.setAttribute("DocDtSrc", currIssu.getAttribute("TransSrcDocDt"));
        srcInsrt.setAttribute("DocIdSrcDisp", currIssu.getAttribute("TransDocumentNo"));
        issuSrc.insertRow(srcInsrt);
        issuSrc.executeQuery();
        Row[] itmRow = scItm.getFilteredRows("DocId", srcDocId);

        adflog.info("22222length--------" + itmRow.length);
        if (itmRow.length > 0) {
            for (Row r : itmRow) {
                Number pending = (Number) r.getAttribute("ItmQty");
                if (pending.compareTo(new Number(0)) == 1) {
                    String uomBs = null;
                    String serializFlg = "Y";
                    Integer pickOrder = 0;
                    // Number convfact = new Number(0);
                    if (r.getAttribute("ItmId") != null) {
                        ViewObjectImpl tunevo = this.getLovItmIdTune();
                        tunevo.setNamedWhereClauseParam("bindCldId", cldId);
                        tunevo.setNamedWhereClauseParam("bindSlocId", slocId);
                        tunevo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
                        tunevo.setNamedWhereClauseParam("bindItmId", r.getAttribute("ItmId"));
                        tunevo.executeQuery();
                        Row[] row = tunevo.getFilteredRows("ItmId", r.getAttribute("ItmId"));
                        if (row.length > 0) {
                            uomBs = row[0].getAttribute("UomBasic").toString();
                            serializFlg = row[0].getAttribute("SerializedFlg").toString();
                            if (row[0].getAttribute("PickOrder") != null) {
                                pickOrder = Integer.parseInt(row[0].getAttribute("PickOrder").toString());
                            } else {
                                pickOrder = 307;
                            }
                        }
                        adflog.info("222222uomBs        " + uomBs);
                    }
                    /**code commented because uom conversion factor not defined iin service applications*/
                    /*  if (r.getAttribute("ItmId") != null && r.getAttribute("ItmUom") == null &&
                            r.getAttribute("UomConvFctr") == null) {
                            if (uomBs != null && r.getAttribute("ItmUom") != null) {
                                adflog.info("22222----" + SlocId + "------------" + CldId + "--------" + OrgId +
                                            "----------" + r.getAttribute("ItmId") + "-------" +
                                            r.getAttribute("ItmUom") + "----------" + uomBs);
                                BigDecimal uomConv =
                                    (BigDecimal) (callStoredFunction(Types.NUMERIC,
                                                                     "APP.FN_GET_UOM_CONV_FCTR (?,?,?,?,?,?)", new Object[] {
                                                                     SlocId, CldId, OrgId,
                                                                     r.getAttribute("ItmId").toString(),
                                                                     r.getAttribute("ItmUom").toString(), uomBs
                                }));
                                adflog.info("uomConv22222-----------" + uomConv);
                                try {
                                    convfact = new Number(uomConv);
                                } catch (SQLException e) {
                                }
                                adflog.info("conv factor   " + convfact);
                            }
                        } else if (r.getAttribute("ItmUomBs") != null && r.getAttribute("UomConvFctr") != null) {
                            uomBs = r.getAttribute("ItmUomBs").toString();
                            convfact = (Number) r.getAttribute("UomConvFctr");
                            //adflog.info(uomBs + "  in TRF ORD " + convfact);
                        }
                        */
                    adflog.info("inside new create row22222222-------------" +
                                currIssu.getAttribute("TransIssueDocType"));
                    Row newRow = issuItm.createRow();
                    newRow.setAttribute("IssuDocType", currIssu.getAttribute("TransIssueDocType"));
                    newRow.setAttribute("DocIdSrc", currIssu.getAttribute("TransSrcDocId"));
                    newRow.setAttribute("DocDtSrc", currIssu.getAttribute("TransSrcDocDt"));
                    newRow.setAttribute("ItmId", r.getAttribute("ItmId"));
                    newRow.setAttribute("ItmUom", r.getAttribute("ItmUom"));
                    if (uomBs != null) {
                        newRow.setAttribute("ItmUomBs", uomBs);
                    }
                    //if (convfact.compareTo(new Number(0)) > 0) {
                    newRow.setAttribute("UomConvFctr", new Number(1));
                    //}
                    newRow.setAttribute("PendQty",
                                        r.getAttribute("PendQty")); //r.getAttribute("ItmQty") //bcoz of multiple case
                    newRow.setAttribute("TransItmSerializedFlg", serializFlg);
                    if (pickOrder != null && pickOrder != 0) {
                        newRow.setAttribute("TransItmPickOrder", pickOrder);
                    }
                    issuItm.insertRow(newRow);
                    issuItm.executeQuery();
                }

            }
        }
        currIssu.setAttribute("TransDocumentNo", null);

        return;
    }

    public void insrtSelectSrFrmView() {
        ViewObjectImpl mtlItm = this.getMmMtlIssuItm();
        ViewObjectImpl mtlSr = this.getMmMtlIssuSr();
        ViewObjectImpl mtlBin = this.getMmMtlIssuBin();
        ViewObjectImpl mtlLot = this.getMmMtlIssuLot();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummSr();
        Row currItm = mtlItm.getCurrentRow();
        String binChkFlg = (String) resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Row[] srRow = this.getViewMmStkSummSr().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        adflog.info("lenth sr     " + srRow.length);

        ArrayList<String> arrlist = new ArrayList<String>();
        // add  selected  lotId in a arraylist
        if (srRow.length > 0) {
            for (Row r1 : srRow) {
                if (r1.getAttribute("TransSelectSrCB") != null) {
                    if ("Y".equalsIgnoreCase(r1.getAttribute("TransSelectSrCB").toString())) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        adflog.info("lot id new    " + lotId);
                    }
                }
            }
            adflog.info(" array size " + arrlist);
        }
        // Using Set for remove duplicate LotId
        Set<String> lotset = new HashSet<String>(arrlist);
        for (String key : lotset) {
            // Create new row in lot table Key as LotId and lotVal use quantity for SR No Selection
            Integer lotQty = Collections.frequency(arrlist, key);
            Number lotvalu = new Number(0);
            try {
                lotvalu = new Number(lotQty);
            } catch (Exception e) {

            }
            adflog.info(key + ": " + Collections.frequency(arrlist, key) + "------" + lotvalu);
            // RowQualifier for filter Lot table to check Lot exist or not.....
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + key + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            adflog.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) { // update lot quantity if lot already exist......:
                adflog.info(" ALREADY PRESENT  LOT-----");
                for (Row r : rows) {
                    Number prLotVal = (Number) r.getAttribute("IssuQty");
                    //  Number prLotValBs = (Number)r.getAttribute("IssuQtyBs");
                    Number newQty = prLotVal.add(lotvalu);
                    adflog.info("new vale FOR LOT----------  " + newQty);
                    r.setAttribute("IssuQty", newQty);
                    r.setAttribute("IssuQtyBs", newQty);
                }
            } else {
                adflog.info("CREATE NEW  LOT-----");
                Row insrtLot = mtlLot.createRow();
                insrtLot.setAttribute("LotId", key);
                insrtLot.setAttribute("IssuQty", lotvalu);
                insrtLot.setAttribute("IssuQtyBs", lotvalu);
                insrtLot.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                mtlLot.insertRow(insrtLot);
                mtlLot.executeQuery();
            }
        }
        Iterator i = lotset.iterator();
        adflog.info("----------" + lotset);
        // Adding Bin in bin Table for using lotSet Value When organisation using Bin concept binChkFlg == Y
        if ("Y".equalsIgnoreCase(binChkFlg)) {
            while (i.hasNext()) {
                String lot = (String) i.next();
                ArrayList<String> arrListbin = new ArrayList<String>(); // for Storing all bin selected paticular lot
                adflog.info("--------------" + lot);
                for (Row r2 : srRow) {
                    if (r2.getAttribute("TransSelectSrCB") != null) {
                        if ("Y".equalsIgnoreCase(r2.getAttribute("TransSelectSrCB").toString()) &&
                            r2.getAttribute("LotId").toString().equals(lot)) {
                            arrListbin.add(r2.getAttribute("BinId").toString());
                        }
                    }
                }
                // Using Set for remove duplicate Bin
                Set<String> binSet = new HashSet<String>(arrListbin);
                for (String key : binSet) {
                    // Create new row in bin table Key as BinIds and lotVal use quantity for SR No Selection
                    Integer binQty = Collections.frequency(arrListbin, key);
                    Number binvalu = new Number(0);
                    try {
                        binvalu = new Number(binQty);
                    } catch (Exception e) {
                        e.printStackTrace();
                    }
                    // RowQualifier for filter bin table to check bin exist or not.....
                    RowQualifier rowQualifier = new RowQualifier(mtlBin);
                    rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                                currItm.getAttribute("ItmId") + "' and LotId = '" + lot +
                                                "' and BinId ='" + key + "'");
                    Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                    adflog.info("" + rowQualifier.getExprStr());
                    if (rows.length > 0) {
                        adflog.info("BIN ALREADY PRESENT FOR LOT-----");
                        for (Row r : rows) {
                            Number prBinVal = (Number) r.getAttribute("IssuQty");
                            Number newQty = prBinVal.add(binvalu);
                            adflog.info("new vale FOR BIN----------  " + newQty);
                            r.setAttribute("IssuQty", newQty);
                            r.setAttribute("IssuQtyBs", newQty);
                        }
                    } else {
                        adflog.info("BIN CREATE FOR THIS LOT -----");
                        Row binInst = mtlBin.createRow();
                        binInst.setAttribute("LotId", lot);
                        binInst.setAttribute("BinId", key);
                        binInst.setAttribute("IssuQty", binvalu);
                        binInst.setAttribute("IssuQtyBs", binvalu);
                        binInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                        mtlBin.insertRow(binInst);
                        mtlBin.executeQuery();
                        adflog.info(key + ": " + Collections.frequency(arrListbin, key) + "-------" + binvalu);
                    }
                }
                adflog.info("" + arrListbin);
                adflog.info("" + binSet);

            }

        }

        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransSelectSrCB") != null) {
                    if ("Y".equalsIgnoreCase(rr.getAttribute("TransSelectSrCB").toString())) {
                        adflog.info("Condition true create sr");
                        Row srInst = mtlSr.createRow();
                        srInst.setAttribute("LotId", rr.getAttribute("LotId"));
                        srInst.setAttribute("BinId", rr.getAttribute("BinId"));
                        srInst.setAttribute("SrNo", rr.getAttribute("SrNo"));
                        srInst.setAttribute("SrQty", new Number(1));
                        srInst.setAttribute("SrQtyBs", new Number(1));
                        srInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                        mtlSr.insertRow(srInst);
                        mtlSr.executeQuery();
                    }
                }
            }
        }
        this.getDBTransaction().postChanges();
    }


    public String deleteSerialNo() {

        ViewObjectImpl mtlItm = this.getMmMtlIssuItm();
        ViewObjectImpl mtlSr = this.getMmMtlIssuSr();
        ViewObjectImpl mtlBin = this.getMmMtlIssuBin1();
        ViewObjectImpl mtlLot = this.getMmMtlIssuLot1();
        Row currItm = mtlItm.getCurrentRow();
        Row currSr = mtlSr.getCurrentRow();
        String binChkFlg = (String) resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        String srNo = currSr.getAttribute("SrNo").toString();
        adflog.info(binChkFlg + "--------binChkFlg-----------" + srNo);
        if (srNo != null) {
            if ("Y".equalsIgnoreCase(binChkFlg)) {
                RowQualifier rowQualifier = new RowQualifier(mtlBin);
                rowQualifier.setWhereClause("DocId = '" + currSr.getAttribute("DocId") + "' and DocIdSrc ='" +
                                            currSr.getAttribute("DocIdSrc") + "' and WhId = '" +
                                            currSr.getAttribute("WhId") + "' and ItmId = '" +
                                            currSr.getAttribute("ItmId") + "' and LotId = '" +
                                            currSr.getAttribute("LotId") + "' and BinId ='" +
                                            currSr.getAttribute("BinId") + "'");
                Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                adflog.info("" + rowQualifier.getExprStr());
                adflog.info("length Bin table------" + rows.length);
                if (rows.length > 0) {
                    adflog.info("BIN ALREADY PRESENT FOR LOT-----");
                    for (Row r : rows) {
                        Number prBinVal = (Number) r.getAttribute("IssuQty");
                        Number newQty = (Number) prBinVal.minus(one);
                        adflog.info(prBinVal + "----------new vale FOR BIN----------  " + newQty);
                        r.setAttribute("IssuQty", newQty);
                        r.setAttribute("IssuQtyBs", newQty);
                        if (newQty.compareTo(zero) == 0) {
                            adflog.info(" REMOVE PRESENT  BIN -----");
                            r.remove();
                        }
                    }
                }
            }
            RowQualifier rowQualifier1 = new RowQualifier(mtlLot);
            rowQualifier1.setWhereClause("DocId = '" + currSr.getAttribute("DocId") + "' and  DocIdSrc ='" +
                                         currSr.getAttribute("DocIdSrc") + "' and WhId = '" +
                                         currSr.getAttribute("WhId") + "' and ItmId = '" +
                                         currSr.getAttribute("ItmId") + "' and LotId = '" +
                                         currSr.getAttribute("LotId") + "'");
            Row[] rowsLot = mtlLot.getFilteredRows(rowQualifier1);
            adflog.info("" + rowQualifier1.getExprStr());
            adflog.info("length lot table------" + rowsLot.length);
            if (rowsLot.length > 0) { // update lot quantity if lot already exist......:
                adflog.info(" ALREADY PRESENT  LOT -----");
                for (Row r : rowsLot) {
                    Number prLotVal = (Number) r.getAttribute("IssuQty");
                    //  Number prLotValBs = (Number)r.getAttribute("IssuQtyBs");
                    Number newQty = (Number) prLotVal.minus(one);

                    adflog.info(prLotVal + "---------new value FOR LOT----------  " + newQty);
                    r.setAttribute("IssuQty", newQty);
                    r.setAttribute("IssuQtyBs", newQty);
                    if (newQty.compareTo(zero) == 0) {
                        adflog.info(" REMOVE PRESENT  LOT -----");
                        r.remove();
                    }
                }
            }
            currSr.remove();
        }
        mtlSr.executeQuery();
        this.getDBTransaction().postChanges();
        return null;

    }


    // Method for Insert Update and Remove Bin and Lot when Organization  used bin and itm serialazed flag "N" and issue Manual entry itm Pick Order type "ANY"

    public void insrtSelectedBinForView() {
        ViewObjectImpl mtlItm = this.getMmMtlIssuItm();
        ViewObjectImpl mtlBin = this.getMmMtlIssuBin();
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        ViewObjectImpl mtlLot = this.getMmMtlIssuLot();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummBin();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] binRow = this.getViewMmStkSummBin().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        adflog.info("lenth sr     " + binRow.length);
        adflog.info("doc date src     " + currItm.getAttribute("DocDtSrc") + " src " +
                    currSrc.getAttribute("DocDtSrc"));
        ArrayList<String> arrlist = new ArrayList<String>();

        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        String lotId = r1.getAttribute("LotId").toString();
                        arrlist.add(lotId);
                        adflog.info("lot id new    " + lotId);
                    }
                }
            }
            adflog.info(" array size " + arrlist.size());
        }
        Set<String> lotset = new HashSet<String>(arrlist);
        // for(String kay : lotset){
        Iterator itr = lotset.iterator();
        while (itr.hasNext()) {
            String lotId = itr.next().toString();
            Number lotQty = new Number(0);
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0 &&
                        r1.getAttribute("LotId").toString().equals(lotId)) {
                        lotQty = lotQty.add((Number) r1.getAttribute("TransIssueQty"));
                    }
                }
            }
            adflog.info(" lot id   ---" + lotId + "----qty------" + lotQty);
            // Check lot already created or not
            RowQualifier rowQualifier = new RowQualifier(mtlLot);
            rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                        currItm.getAttribute("ItmId") + "' and LotId = '" + lotId + "'");
            Row[] rows = mtlLot.getFilteredRows(rowQualifier);
            adflog.info("" + rowQualifier.getExprStr());
            if (rows.length > 0) {
                for (Row r : rows) {
                    r.setAttribute("IssuQty", lotQty);
                    r.setAttribute("IssuQtyBs", lotQty);
                }
            } else {
                Row instLot = mtlLot.createRow();
                instLot.setAttribute("LotId", lotId);
                instLot.setAttribute("IssuQty", lotQty);
                instLot.setAttribute("IssuQtyBs", lotQty);
                instLot.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                mtlLot.insertRow(instLot);
                mtlLot.executeQuery();
            }
        }
        adflog.info("----------" + lotset);
        if (binRow.length > 0) {
            for (Row rr : binRow) {
                if (rr.getAttribute("TransIssueQty") != null) {
                    if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) >= 0) {
                        adflog.info("Condition true create sr");

                        // check bin already created or not
                        RowQualifier rowQualifier = new RowQualifier(mtlBin);
                        rowQualifier.setWhereClause(" DocIdSrc ='" + currItm.getAttribute("DocIdSrc") +
                                                    "' and ItmId = '" + currItm.getAttribute("ItmId") +
                                                    "' and LotId = '" + rr.getAttribute("LotId").toString() +
                                                    "' and BinId = '" + rr.getAttribute("BinId").toString() + "'");
                        Row[] rows = mtlBin.getFilteredRows(rowQualifier);
                        adflog.info("" + rowQualifier.getExprStr());
                        adflog.info("length   " + rows.length);
                        if (rows.length > 0) {
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) == 0) {
                                    adflog.info("row removed ----------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                    // Update created bin quantity.
                                    adflog.info("row update ----------");
                                    r.setAttribute("IssuQty", rr.getAttribute("TransIssueQty"));
                                    r.setAttribute("IssuQtyBs", rr.getAttribute("TransIssueQty"));
                                }
                            }
                        } else {
                            // if row  not exist create new Bin row  .
                            if (((Number) rr.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                                adflog.info("row created ----------");
                                Row binInst = mtlBin.createRow();
                                binInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                binInst.setAttribute("BinId", rr.getAttribute("BinId"));
                                binInst.setAttribute("IssuQty", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("IssuQtyBs", rr.getAttribute("TransIssueQty"));
                                binInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                                mtlBin.insertRow(binInst);
                                mtlBin.executeQuery();
                            }
                        }
                    }
                }
            }
        }
        // this.getDBTransaction().postChanges();
    }

    // Method for Insert Update and Remove Lot when Organization not used bin and itm serialazed flag "N" and issue Manual entry itm Pick Order type "ANY"

    public void insrtSelectedLotForView() {
        ViewObjectImpl mtlItm = this.getMmMtlIssuItm();
        ViewObjectImpl mtlLot = this.getMmMtlIssuLot();
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        ViewObjectImpl viewSummSr = this.getViewMmStkSummLot();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] srRow = this.getViewMmStkSummLot().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        adflog.info("lenth sr     " + srRow.length);
        adflog.info("doc date src     " + currItm.getAttribute("DocDtSrc") + " src " +
                    currSrc.getAttribute("DocDtSrc"));
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {
                        // Filter Lot Table to ckeck Lot exist or not Basis of DocId , DocIdSrc , ItmId and LotId
                        RowQualifier rowQualifier = new RowQualifier(mtlLot);
                        rowQualifier.setWhereClause("DocId = '" + currItm.getAttribute("DocId") + "' and DocIdSrc ='" +
                                                    currItm.getAttribute("DocIdSrc") + "' and ItmId = '" +
                                                    currItm.getAttribute("ItmId") + "' and LotId = '" +
                                                    rr.getAttribute("LotId").toString() + "'");
                        Row[] rows = mtlLot.getFilteredRows(rowQualifier);
                        adflog.info("" + rowQualifier.getExprStr());
                        // Check for Lot are exist or not
                        if (rows.length > 0) {
                            // Lot Already created
                            for (Row r : rows) {
                                if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) == 0) {
                                    // if Exist Check Lot issue Quantity if 0 Remove lot
                                    adflog.info("Lot remove-------------------");
                                    r.remove();
                                } else if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                    // if Exist Check Lot issue Quantity if issue Quantity greater than 0 update Quantity.
                                    adflog.info("Lot Update -------------------");
                                    r.setAttribute("IssuQty", rr.getAttribute("TransIssuQtyValue"));
                                    r.setAttribute("IssuQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                }
                            }
                        } else {
                            // Lot not Exist
                            if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) > 0) {
                                // If Issue Quantity greater than 0 Create Lot
                                adflog.info("Condition true create lot");
                                Row lotInst = mtlLot.createRow();
                                lotInst.setAttribute("LotId", rr.getAttribute("LotId"));
                                lotInst.setAttribute("IssuQty", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("IssuQtyBs", rr.getAttribute("TransIssuQtyValue"));
                                lotInst.setAttribute("DocDtSrc", currItm.getAttribute("DocDtSrc"));
                                mtlLot.insertRow(lotInst);
                                mtlLot.executeQuery();
                            }
                        }
                    }
                }
            }
        }
    }


    public void resetViewLotValue() {
        ViewObjectImpl mtlItm = this.getMmMtlIssuItm();
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] srRow = this.getViewMmStkSummLot().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        if (srRow.length > 0) {
            for (Row rr : srRow) {
                if (rr.getAttribute("TransIssuQtyValue") != null) {
                    if (((Number) rr.getAttribute("TransIssuQtyValue")).compareTo(zero) >= 0) {
                        rr.setAttribute("TransIssuQtyValue", zero);
                    }
                }
            }
        }
    }


    public void setViewLotValue() {
        ViewObjectImpl iss = this.getMmMtlIssu();
        ViewObjectImpl mtlItm = this.getMmMtlIssuItm();
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        ViewObjectImpl mainLot = this.getMmMtlIssuLot();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Row issR = iss.getCurrentRow();
        Number zero = new Number(0);
        // Row [] srRow = this.getViewMmStkSummLot().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        Row[] lotRow = this.getMmMtlIssuLot().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        adflog.info("  lotRow " + lotRow.length);
        if (lotRow.length > 0) {
            for (Row rr1 : lotRow) {
                if (rr1.getAttribute("IssuQtyBs") != null) {
                    if (((Number) rr1.getAttribute("IssuQtyBs")).compareTo(zero) >= 0) {
                        RowQualifier rq = new RowQualifier(this.getViewMmStkSummLot());
                        rq.setWhereClause("OrgId = '" + issR.getAttribute("OrgId").toString() + "' and ItmId= '" +
                                          rr1.getAttribute("ItmId").toString() + "' and LotId ='" +
                                          rr1.getAttribute("LotId").toString() + "'");
                        adflog.info("sy  " + rq.getExprStr());
                        Row[] viewLot = this.getViewMmStkSummLot().getFilteredRows(rq);
                        if (viewLot.length > 0) {
                            for (Row rr2 : viewLot) {
                                adflog.info("rr1.getAttribute(\"IssuQtyBs\")   " + rr1.getAttribute("IssuQtyBs"));
                                rr2.setAttribute("TransIssuQtyValue", rr1.getAttribute("IssuQtyBs"));
                            }
                        }
                    }

                }
            }
        }
    }

    public void setViewLotBinValue() {
        ViewObjectImpl iss = this.getMmMtlIssu();
        ViewObjectImpl mtlItm = this.getMmMtlIssuItm();
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        ViewObjectImpl mainLot = this.getMmMtlIssuBin();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Row issR = iss.getCurrentRow();
        Number zero = new Number(0);
        // Row [] srRow = this.getViewMmStkSummLot().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        Row[] lotRow = this.getMmMtlIssuBin().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        adflog.info("  lotRow " + lotRow.length);
        if (lotRow.length > 0) {
            for (Row rr1 : lotRow) {
                if (rr1.getAttribute("IssuQtyBs") != null) {
                    if (((Number) rr1.getAttribute("IssuQtyBs")).compareTo(zero) >= 0) {
                        RowQualifier rq = new RowQualifier(this.getViewMmStkSummLot());
                        rq.setWhereClause("OrgId = '" + issR.getAttribute("OrgId").toString() + "' and ItmId= '" +
                                          rr1.getAttribute("ItmId").toString() + "' and LotId ='" +
                                          rr1.getAttribute("LotId").toString() + "'");
                        adflog.info("sy  " + rq.getExprStr());
                        Row[] viewLot = this.getViewMmStkSummLot().getFilteredRows(rq);
                        if (viewLot.length > 0) {
                            for (Row rr2 : viewLot) {
                                adflog.info("rr1.getAttribute(\"IssuQtyBs\")   " + rr1.getAttribute("IssuQtyBs"));
                                rr2.setAttribute("TransIssuQtyValue", rr1.getAttribute("IssuQtyBs"));
                            }
                        }
                    }

                }
            }
        }
    }

    public void resetViewLotBinValue() {
        ViewObjectImpl mtlItm = this.getMmMtlIssuItm();
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        Row currItm = mtlItm.getCurrentRow();
        Row currSrc = srcVo.getCurrentRow();
        Number zero = new Number(0);
        Row[] binRow = this.getViewMmStkSummBin().getFilteredRows("ItmId", currItm.getAttribute("ItmId"));
        if (binRow.length > 0) {
            for (Row r1 : binRow) {
                if (r1.getAttribute("TransIssueQty") != null) {
                    if (((Number) r1.getAttribute("TransIssueQty")).compareTo(zero) > 0) {
                        r1.setAttribute("TransIssueQty", zero);
                    }
                }
            }
        }
    }

    /**
     *
     * @param value -- Document No .
     * @return Y if Duplicate record found.
     */

    public String isSrcDocIdDuplicate(String value) {
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        ViewObjectImpl issuVo = this.getMmMtlIssu();
        ViewObjectImpl trfOdr = this.getTransferOrderDocNo();
        Row currRow = issuVo.getCurrentRow();
        String flag = "N";
        String srcDocId = null;
        if (value != null) {
            RowQualifier rq = new RowQualifier(getLovMRSDocNo());
            rq.setWhereClause("MrsNo = '" + value + "' and FyId = " +
                              Integer.parseInt(currRow.getAttribute("TransSrcFyId").toString()) + "");
            Row[] rr = getLovMRSDocNo().getFilteredRows(rq);
            adflog.info(rq.getExprStr() + " mrs expression and length is " + rr.length);
            // Row[] rrTr= this.getTransferOrderDocNo().getFilteredRows("TrfNo", value);
            RowQualifier rowQualifier1 = new RowQualifier(trfOdr);
            rowQualifier1.setWhereClause("TrfNo = '" + value + "' and FyId = " +
                                         Integer.parseInt(currRow.getAttribute("FyId").toString()) + "");
            Row[] rows1 = trfOdr.getFilteredRows(rowQualifier1);
            adflog.info(rowQualifier1.getExprStr());

            RowQualifier rq1 = new RowQualifier(getLovMrsExtrnl());
            rq1.setWhereClause("MrsNo = '" + value + "' and FyId = " +
                               Integer.parseInt(currRow.getAttribute("TransSrcFyId").toString()) + "");

            Row[] rrextrnl = getLovMrsExtrnl().getFilteredRows(rq1);
            // srcDocId=rrextrnl[0].getAttribute("MrsTxnId").toString();

            ViewObjectImpl scvo = this.getLovScNo();
            scvo.setNamedWhereClauseParam("bindCldId", cldId);
            scvo.setNamedWhereClauseParam("bindSlocId", slocId);
            scvo.setNamedWhereClauseParam("bindOrgId", orgId);
            scvo.setNamedWhereClauseParam("bindEoId", null);
            scvo.executeQuery();
            Row[] rows2 = scvo.getFilteredRows("ScNo", value);


            adflog.info("----" + rr.length);
            adflog.info("----" + rows1.length);
            adflog.info("----" + rows2.length);

            Integer issType = Integer.parseInt(currRow.getAttribute("IssuType").toString());
            Integer issdocType = Integer.parseInt(currRow.getAttribute("TransIssueDocType").toString());

            // check for Internal Issue 323 MRS
            if (issType == 323) {
                if (rr.length > 0) {
                    srcDocId = rr[0].getAttribute("MrsTxnId").toString();
                    adflog.info("rr doc----" + srcDocId);
                }

            } else if (issType == 325) { // check for Stock Transfer 325 Within or Other Org
                if (rows1.length > 0) {
                    srcDocId = rows1[0].getAttribute("DocId").toString();
                    adflog.info("rrtr doc----" + srcDocId);
                }
            } else if (issType == 324 && issdocType == 800) { // check for external issue 324  service contract 800
                if (rows2.length > 0) {
                    srcDocId = rows2[0].getAttribute("DocId").toString();
                    adflog.info("rrtr doc----" + srcDocId);
                }
            } else if (issType == 837) {
                if (rrextrnl.length > 0) {
                    srcDocId = rrextrnl[0].getAttribute("MrsTxnId").toString();
                    adflog.info("current mrs no is ++++++++++  " + srcDocId);
                }
            }

            if (srcDocId != null && currRow.getAttribute("WhId") != null) {
                RowQualifier rowQualifier = new RowQualifier(srcVo);
                rowQualifier.setWhereClause("CldId = '" + currRow.getAttribute("CldId") + "' and DocId = '" +
                                            currRow.getAttribute("DocId") + "' and SlocId = " +
                                            Integer.parseInt(currRow.getAttribute("SlocId").toString()) +
                                            " and DocIdSrc ='" + srcDocId + "' and OrgId = '" +
                                            currRow.getAttribute("OrgId") + "' and WhId = '" +
                                            currRow.getAttribute("WhId").toString() + "'");
                Row[] rows = srcVo.getFilteredRows(rowQualifier);
                adflog.info(rowQualifier.getExprStr() + "-----------" + rows.length);
                if (rows.length > 0) {
                    flag = "Y";
                }
            }
        }
        return flag;
    }

    public Integer autoIssueItemfromSystem() {
        ViewObjectImpl mtlIssu = this.getMmMtlIssu();
        ViewObjectImpl mtlSrc = this.getMmMtlIssuSrc();
        ViewObjectImpl mtlItm = this.getMmMtlIssuItm();
        Row currIssu = mtlIssu.getCurrentRow();
        Row currSrc = mtlSrc.getCurrentRow();
        Row currItm = mtlItm.getCurrentRow();
        String binChkFlg = (String) resolvEl("#{pageFlowScope.GLBL_ORG_BIN_CHK}");
        Number uomCovrFctr = (Number) currItm.getAttribute("UomConvFctr");
        Number issQty = (Number) currItm.getAttribute("IssuQty");
        Integer retVal = null;

        adflog.info("binChkFlg-----" + binChkFlg + "wh ---" + currIssu.getAttribute("WhId") + "itm   " +
                    currItm.getAttribute("ItmId") + "pic or  " + currItm.getAttribute("TransItmPickOrder") +
                    "serial  " + currItm.getAttribute("TransItmSerializedFlg") + "fact  " + uomCovrFctr +
                    " doc id Src " + currItm.getAttribute("DocIdSrc") + " doc id  " + currIssu.getAttribute("DocId"));
        if (uomCovrFctr != null) {
            this.getDBTransaction().postChanges();
            retVal =
                Integer.parseInt(callStoredFunction(Types.NUMERIC, "MM_ISSU_AUTO (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                    currIssu.getAttribute("CldId").toString(),
                                                    Integer.parseInt(currIssu.getAttribute("SlocId").toString()),
                                                    currIssu.getAttribute("OrgId").toString(),
                                                    currIssu.getAttribute("WhId").toString(),
                                                    currItm.getAttribute("ItmId").toString(), issQty,
                                                    Integer.parseInt(currItm.getAttribute("TransItmPickOrder").toString()),
                                                    currItm.getAttribute("TransItmSerializedFlg").toString(), binChkFlg,
                                                    currIssu.getAttribute("DocId").toString(),
                                                    currItm.getAttribute("DocIdSrc").toString(),
                                                    currItm.getAttribute("DocDtSrc"),
                                                    currItm.getAttribute("ItmUomBs").toString(),
                                                    currItm.getAttribute("ItmUom").toString(), uomCovrFctr, "I"
            }).toString());
        }
        if (retVal == 1) {
            this.getMmMtlIssuLot().executeQuery();
            this.getMmMtlIssuLot1().executeQuery();
            if ("Y".equalsIgnoreCase(binChkFlg)) {
                this.getMmMtlIssuBin().executeQuery();
            }
            this.getMmMtlIssuSr().executeQuery();
        }
        adflog.info("return value from function ----    " + retVal);
        return retVal;
    }

    public void orgIdSet() {
        ViewObjectImpl iss = this.getMmMtlIssu();
        Row currRow = iss.getCurrentRow();
        /*   Integer docType = Integer.parseInt(currRow.getAttribute("TransIssueDocType").toString());
            if(docType == 330){ */
        adflog.info("return value from function ----    " + currRow.getAttribute("OrgId"));
        currRow.setAttribute("OrgIdSrc", currRow.getAttribute("OrgId"));
        currRow.setAttribute("WhIdSrc", null);
        //   }

    }
    // Function for check atleast 1 item issue for added document No.
    public ArrayList chkIssueQtyForSave() {
        ViewObjectImpl mtlIss = this.getMmMtlIssu();
        ViewObjectImpl mtlSrc = this.getMmMtlIssuSrc();
        ViewObjectImpl mtlIssItm = this.getMmMtlIssuItm1();
        ViewObjectImpl trfOdr = this.getTransferOrderDocNo();
        ViewObjectImpl mrsVo = this.getLovMRSDocNo();
        ViewObjectImpl svcvo = this.getLovScNo();

        Row currIss = mtlIss.getCurrentRow();
        Integer issueTyp = Integer.parseInt(currIss.getAttribute("IssuType").toString());
        Integer issuDocType = Integer.parseInt(currIss.getAttribute("TransIssueDocType").toString());

        String docId = currIss.getAttribute("DocId").toString();
        ArrayList docNoArr = new ArrayList();
        Number zero = new Number(0);
        Row[] filter = mtlSrc.getFilteredRows("DocId", currIss.getAttribute("DocId"));
        adflog.info("issu type ---  " + issueTyp + "filter ---11------" + filter.length);
        if (filter.length > 0) {
            for (Row rr : filter) {
                int count = 0;
                String docIdSrc = rr.getAttribute("DocIdSrc").toString();
                adflog.info("docid src ----" + docIdSrc);
                adflog.info("all row itm --" + mtlIssItm.getRowCount());
                adflog.info("new vo all row itm --" + this.getMmMtlIssuItm1().getRowCount());
                //RowSetIterator rsi = mtlIssItm.createRowSetIterator(null);
                RowQualifier rowQualifier2 = new RowQualifier(mtlIssItm);
                rowQualifier2.setWhereClause("DocId = '" + docId + "' and DocIdSrc = '" + docIdSrc + "'");
                Row[] rows = mtlIssItm.getFilteredRows(rowQualifier2);
                adflog.info(rowQualifier2.getExprStr());
                //  Row[] rows = mtlIssItm.getFilteredRows("DocIdSrc", docIdSrc);
                adflog.info("length -----22----" + rows.length);
                if (rows.length > 0) {
                    for (Row rr1 : rows) {
                        if (rr1.getAttribute("ItmId") != null) {
                            Number issuQty = (Number) rr1.getAttribute("IssuQty");
                            if (issuQty.compareTo(zero) > 0) {
                                count = count + 1;
                            }
                        }
                    }
                }
                adflog.info("count---------: " + count);
                if (count == 0) {
                    if (issueTyp == 325) {
                        adflog.info("INSIDE TRF NO-------");
                        RowQualifier rowQualifier1 = new RowQualifier(trfOdr);
                        /*  rowQualifier1.setWhereClause("DocId = '" + docIdSrc + "' and FyId = " +
                                                     Integer.parseInt(currIss.getAttribute("FyId").toString()) + "");
                        */ //CHANGE BY ALOK --  05-01-2014
                        rowQualifier1.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" +
                                                     orgId + "' and DocId='" + docIdSrc + "'");
                        Row[] rows1 = trfOdr.getFilteredRows(rowQualifier1);
                        adflog.info(rowQualifier1.getExprStr());
                        String docNoTrf = null;
                        if (rows1.length > 0) {
                            docNoTrf = rows1[0].getAttribute("TrfNo").toString();
                        }
                        if (docNoTrf != null) {
                            docNoArr.add(docNoTrf);
                        }
                    } else if (issueTyp == 323) {
                        adflog.info("INSIDE MRS TABLE -------");
                        RowQualifier rowQualifier1 = new RowQualifier(mrsVo);
                        /*   rowQualifier1.setWhereClause("MrsTxnId = '" + docIdSrc + "' and FyId = " +
                                                     Integer.parseInt(currIss.getAttribute("FyId").toString()) + "");
                       */ //CHANGE BY ALOK --  05-01-2014
                        rowQualifier1.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" +
                                                     orgId + "' and MrsTxnId='" + docIdSrc + "'");

                        Row[] rows1 = mrsVo.getFilteredRows(rowQualifier1);
                        adflog.info(rowQualifier1.getExprStr());
                        String docNoTrf = null;
                        if (rows1.length > 0) {
                            docNoTrf = rows1[0].getAttribute("MrsNo").toString();
                        }
                        if (docNoTrf != null) {
                            docNoArr.add(docNoTrf);
                        }
                    } else if (issueTyp == 324 && issuDocType == 800) {
                        adflog.info("INSIDE SVC TABLE -------");
                        RowQualifier rowQualifier1 = new RowQualifier(svcvo);
                        /*   rowQualifier1.setWhereClause("MrsTxnId = '" + docIdSrc + "' and FyId = " +
                                                     Integer.parseInt(currIss.getAttribute("FyId").toString()) + "");
                        */
                        rowQualifier1.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" +
                                                     orgId + "' and DocId='" + docIdSrc + "'");

                        Row[] rows1 = svcvo.getFilteredRows(rowQualifier1);
                        adflog.info(rowQualifier1.getExprStr());
                        String docNoTrf = null;
                        if (rows1.length > 0) {
                            docNoTrf = rows1[0].getAttribute("ScNo").toString();
                        }
                        if (docNoTrf != null) {
                            docNoArr.add(docNoTrf);
                        }
                    }
                }
            }

        }
        adflog.info("array-------------" + docNoArr);
        return docNoArr;
    }


    public ArrayList checkItmQtyIssInTable() {
        //  this.getDBTransaction().postChanges();
        ViewObjectImpl mtlIss = this.getMmMtlIssu();
        ViewObjectImpl mtlSrc = this.getMmMtlIssuSrc();
        ViewObjectImpl mtlIssItm = this.getMmMtlIssuItm1();
        ViewObjectImpl trfOdr = this.getTransferOrderDocNo();
        ViewObjectImpl mrsVo = this.getLovMRSDocNo();
        ViewObjectImpl mtlLot = this.getMmMtlIssuLot1();
        Row currIss = mtlIss.getCurrentRow();
        String chkMsgFlg = "N";
        StringBuilder msg = new StringBuilder("<html><body>");
        msg.append("<b>Following Items Issue Quantity Mis Match for listed Document no </b>"); // MSG.724
        Integer issueTyp = Integer.parseInt(currIss.getAttribute("IssuType").toString());
        String docId = currIss.getAttribute("DocId").toString();
        ArrayList docNoArr = new ArrayList();

        Number zero = new Number(0);
        Row[] filter = mtlSrc.getFilteredRows("DocId", currIss.getAttribute("DocId"));
        if (filter.length > 0) {
            for (Row rr : filter) {
                ArrayList<String> itmArray = new ArrayList<String>();
                String docIdSrc = rr.getAttribute("DocIdSrc").toString();
                String docIdSrcDisp = rr.getAttribute("DocIdSrcDisp").toString();
                //   String
                adflog.info("docid src in table ----" + docIdSrc + "--display id----" + docIdSrcDisp);
                //RowSetIterator rsi = mtlIssItm.createRowSetIterator(null);
                RowQualifier rowQualifier2 = new RowQualifier(mtlIssItm);
                rowQualifier2.setWhereClause("DocId = '" + docId + "' and DocIdSrc = '" + docIdSrc + "'");
                Row[] rows = mtlIssItm.getFilteredRows(rowQualifier2);
                adflog.info(rowQualifier2.getExprStr());
                // Row[] rows = mtlIssItm.getFilteredRows("DocIdSrc", docIdSrc);
                adflog.info("length -----in table----" + rows.length);
                if (rows.length > 0) {
                    for (Row rr1 : rows) {
                        if (rr1.getAttribute("ItmId") != null) {
                            Number issuQty = (Number) rr1.getAttribute("IssuQty");
                            if (issuQty.compareTo(zero) > 0 || issuQty.compareTo(zero) == 0) { /** need to be check for zero quantity if user change issue quantity after allotment to zero - Alok*/
                                RowQualifier rowQualifier = new RowQualifier(mtlLot);
                                rowQualifier.setWhereClause("DocId ='" + docId + "' and DocIdSrc = '" + docIdSrc +
                                                            "' and ItmId = '" + rr1.getAttribute("ItmId").toString() +
                                                            "'");
                                Row[] rows1 = mtlLot.getFilteredRows(rowQualifier);
                                adflog.info(rowQualifier.getExprStr());
                                adflog.info("rows1.length---- " + rows1.length + "-----" + rr1.getAttribute("ItmId"));
                                String itmid = null;
                                Number totIss = zero;
                                if (rows1.length > 0) {

                                    for (Row rr6 : rows1) {
                                        totIss = totIss.add((Number) rr6.getAttribute("IssuQty"));
                                    }

                                    adflog.info("totIss lot --------   " + totIss);

                                } //--else{
                                adflog.info("totIss lot --------   " + totIss);
                                if (totIss.compareTo(issuQty) == 0) {
                                    adflog.info("totIss lot --------zero   ");
                                } else {
                                    String ItmName = null;
                                    itmid = rr1.getAttribute("ItmId").toString();
                                    if (itmid != null) {
                                        ViewObjectImpl tunevo = this.getLovItmIdTune();
                                        tunevo.setNamedWhereClauseParam("bindCldId", cldId);
                                        tunevo.setNamedWhereClauseParam("bindSlocId", slocId);
                                        tunevo.setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
                                        tunevo.setNamedWhereClauseParam("bindItmId", itmid);
                                        tunevo.executeQuery();
                                        Row[] r = tunevo.getFilteredRows("ItmId", itmid);

                                        if (r.length > 0) {
                                            ItmName = r[0].getAttribute("ItmDesc").toString();
                                        }
                                    }
                                    itmArray.add(ItmName);
                                }
                                // --   }
                            }
                        }
                    }
                }
                adflog.info("count---------: " + itmArray + "-----" + docIdSrc + "--------" + docIdSrcDisp);
                if (itmArray.size() > 0) {
                    chkMsgFlg = "Y";
                    adflog.info("inside msd append");
                    msg = msg.append("<p><b>" + docIdSrcDisp + "</b> </p>");
                    msg.append("<ul>");
                    for (String a : itmArray) {
                        msg.append("<li> <b>" + a + "</b></li>");
                    }
                    msg.append("</ul>");
                }
                itmArray.removeAll(itmArray);
            }
        }
        if ("Y".equalsIgnoreCase(chkMsgFlg)) {

            msg.append("</body></html>");
            docNoArr.add("Y");
            FacesMessage message = new FacesMessage(msg.toString());
            message.setSeverity(FacesMessage.SEVERITY_ERROR);
            FacesContext fc = FacesContext.getCurrentInstance();
            fc.addMessage(null, message);
        }
        return docNoArr;
    }

    /**
     * Container's getter for LovMRSDocNo.
     * @return LovMRSDocNo
     */
    public ViewObjectImpl getLovMRSDocNo() {
        return (ViewObjectImpl) findViewObject("LovMRSDocNo");
    }

    /**
     * Container's getter for LovMmMrsItm.
     * @return LovMmMrsItm
     */
    public ViewObjectImpl getLovMmMrsItm() {
        return (ViewObjectImpl) findViewObject("LovMmMrsItm");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl) findViewObject("LovItmId");
    }


    /**
     * Container's getter for MmMtlIssuSr.
     * @return MmMtlIssuSr
     */
    public ViewObjectImpl getMmMtlIssuSr() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuSr");
    }

    /**
     * Container's getter for FkMmMtlIssuSrVL1.
     * @return FkMmMtlIssuSrVL1
     */
    public ViewLinkImpl getFkMmMtlIssuSrVL1() {
        return (ViewLinkImpl) findViewLink("FkMmMtlIssuSrVL1");
    }

    /**
     * Container's getter for ViewMmStkSummSr.
     * @return ViewMmStkSummSr
     */
    public ViewObjectImpl getViewMmStkSummSr() {
        return (ViewObjectImpl) findViewObject("ViewMmStkSummSr");
    }

    /**
     * Container's getter for IssuItmTOSrViewVL1.
     * @return IssuItmTOSrViewVL1
     */
    public ViewLinkImpl getIssuItmTOSrViewVL1() {
        return (ViewLinkImpl) findViewLink("IssuItmTOSrViewVL1");
    }

    public void srNoFilterRow() {
        ViewObjectImpl issItm = this.getMmMtlIssuItm();
        ViewObjectImpl issvo = this.getMmMtlIssu();
        Row curRow = issItm.getCurrentRow();
        Row issR = issvo.getCurrentRow();
        this.getMmMtlIssuSr().executeQuery();
        this.getViewMmStkSummSr().setWhereClause("SR_NO NOT IN (SELECT SR_NO from MM$MTL$ISSU$SR where itm_id = '" +
                                                 curRow.getAttribute("ItmId").toString() + "' and doc_id = '" +
                                                 issR.getAttribute("DocId").toString() + "' )");
        this.getViewMmStkSummSr().executeQuery();
    }

    public void searchIssueAction() {
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl trnsSrchVo = this.getTransIssueSearch();
        ViewObjectImpl searchVo = this.getMtlIssueSearch();
        Row currTransSrch = trnsSrchVo.getCurrentRow();
        adflog.info("BindOrgId--" + p_org_id + "BindRqmtAreaId---" + currTransSrch.getAttribute("TransRqmtAreaIdSrc") +
                    "BindWhIdSrc---" + currTransSrch.getAttribute("TransWhIdSrc") + "BindOrgIdSrc" +
                    currTransSrch.getAttribute("TransOrgIdSrc") + "BindWhId---" +
                    currTransSrch.getAttribute("TransWhId"));
        adflog.info("BindIssuNo---" + currTransSrch.getAttribute("TransIssueNo") + "BindEoIdSrc----" +
                    currTransSrch.getAttribute("TransEoIdSrc") + "BindDateFrom----" +
                    currTransSrch.getAttribute("TransEoIdSrc") + "BindDateTo-----" +
                    currTransSrch.getAttribute("TransIssueDtFrom") + "BindDocIdSrc---" +
                    currTransSrch.getAttribute("TransDocIdSrc") + "BindIssueDocType---" +
                    currTransSrch.getAttribute("TransSourceType"));
        searchVo.setNamedWhereClauseParam("BindOrgId", p_org_id);
        searchVo.setNamedWhereClauseParam("BindRqmtAreaId", currTransSrch.getAttribute("TransRqmtAreaIdSrc"));
        searchVo.setNamedWhereClauseParam("BindWhIdSrc", currTransSrch.getAttribute("TransWhIdSrc"));
        searchVo.setNamedWhereClauseParam("BindOrgIdSrc", currTransSrch.getAttribute("TransOrgIdSrc"));
        searchVo.setNamedWhereClauseParam("BindWhId", currTransSrch.getAttribute("TransWhId"));
        searchVo.setNamedWhereClauseParam("BindEoIdSrc", currTransSrch.getAttribute("TransEoIdSrc"));
        searchVo.setNamedWhereClauseParam("BindDateFrom", currTransSrch.getAttribute("TransIssueDtFrom"));
        searchVo.setNamedWhereClauseParam("BindDateTo", currTransSrch.getAttribute("TransIssueDtTo"));
        searchVo.setNamedWhereClauseParam("BindIssuNo", currTransSrch.getAttribute("TransIssueNo"));
        searchVo.setNamedWhereClauseParam("BindDocIdSrc", currTransSrch.getAttribute("TransDocIdSrc"));
        searchVo.setNamedWhereClauseParam("BindIssueDocType", currTransSrch.getAttribute("TransSourceType"));
        searchVo.executeQuery();

    }

    public void resetIssueAction() {
        String p_org_id = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        ViewObjectImpl trnsSrchVo = this.getTransIssueSearch();
        ViewObjectImpl searchVo = this.getMtlIssueSearch();
        Row currTransSrch = trnsSrchVo.getCurrentRow();
        adflog.info("BindOrgId--" + p_org_id + "BindRqmtAreaId---" + currTransSrch.getAttribute("TransRqmtAreaIdSrc") +
                    "BindWhIdSrc---" + currTransSrch.getAttribute("TransWhIdSrc") + "BindOrgIdSrc" +
                    currTransSrch.getAttribute("TransOrgIdSrc") + "BindWhId---" +
                    currTransSrch.getAttribute("TransWhId"));
        adflog.info("BindIssuNo---" + currTransSrch.getAttribute("TransIssueNo") + "BindEoIdSrc----" +
                    currTransSrch.getAttribute("TransEoIdSrc") + "BindDateFrom----" +
                    currTransSrch.getAttribute("TransEoIdSrc") + "BindDateTo-----" +
                    currTransSrch.getAttribute("TransIssueDtFrom") + "BindDocIdSrc---" +
                    currTransSrch.getAttribute("TransDocIdSrc") + "BindIssueDocType---" +
                    currTransSrch.getAttribute("TransSourceType"));
        searchVo.setNamedWhereClauseParam("BindOrgId", "00");
        searchVo.setNamedWhereClauseParam("BindRqmtAreaId", null);
        searchVo.setNamedWhereClauseParam("BindWhIdSrc", null);
        searchVo.setNamedWhereClauseParam("BindOrgIdSrc", null);
        searchVo.setNamedWhereClauseParam("BindWhId", null);
        searchVo.setNamedWhereClauseParam("BindEoIdSrc", null);
        searchVo.setNamedWhereClauseParam("BindDateFrom", null);
        searchVo.setNamedWhereClauseParam("BindDateTo", null);
        searchVo.setNamedWhereClauseParam("BindIssuNo", null);
        searchVo.setNamedWhereClauseParam("BindDocIdSrc", null);
        searchVo.setNamedWhereClauseParam("BindIssueDocType", null);
        searchVo.executeQuery();

    }

    public void postChangeDB() {
        this.getDBTransaction().postChanges();
    }

    public String updateStockFromIssue() {
        ViewObjectImpl mtlIss = this.getMmMtlIssu();
        ViewObjectImpl srcIss = this.getMmMtlIssuSrc();
        Row currIssu = mtlIss.getCurrentRow();
        Row currSrc = srcIss.getCurrentRow();
        String flag = "N";
        Integer issDocType = Integer.parseInt(currSrc.getAttribute("IssuDocType").toString());
        String updateType = "I";
        if (currIssu.getAttribute("CldId") != null && currIssu.getAttribute("SlocId") != null &&
            currIssu.getAttribute("OrgId") != null && currIssu.getAttribute("WhId") != null &&
            currIssu.getAttribute("FyId") != null && currIssu.getAttribute("DocId") != null) {
            Integer retVal = Integer.parseInt(callStoredFunction(Types.NUMERIC, "MM.MM_UPDT_STK (?,?,?,?,?,?)", new Object[] {
                                                                 currIssu.getAttribute("CldId").toString(),
                                                                 Integer.parseInt(currIssu.getAttribute("SlocId").toString()),
                                                                 currIssu.getAttribute("OrgId").toString(),
                                                                 currIssu.getAttribute("WhId").toString(),
                                                                 currIssu.getAttribute("DocId").toString(), updateType
            }).toString());

            adflog.info("function return------------   " + retVal);
            if (retVal == 1) {
                Integer retRelVal =
                    Integer.parseInt(callStoredFunction(Types.NUMERIC, "MM.mm_updt_stk_rels (?,?,?,?,?,?,?)", new Object[] {
                                                        currIssu.getAttribute("CldId").toString(),
                                                        Integer.parseInt(currIssu.getAttribute("SlocId").toString()),
                                                        currIssu.getAttribute("OrgId").toString(),
                                                        currIssu.getAttribute("WhId").toString(),
                                                        Integer.parseInt(currIssu.getAttribute("FyId").toString()),
                                                        issDocType, currIssu.getAttribute("DocId").toString()
                }).toString());


                // Integer retRelVal = 1;
                adflog.info("current whid is " + currIssu.getAttribute("WhIdSrc"));

                adflog.info("function return for Release Qty------------   " + retRelVal);
                if (retRelVal == 1) {
                    String retrnIssFlg = "N";
                    if (currIssu.getAttribute("RetnblIssu") != null) {
                        retrnIssFlg = currIssu.getAttribute("RetnblIssu").toString();
                    }
                    if ("Y".equalsIgnoreCase(retrnIssFlg)) {
                        this.getLovMmMrsItm().executeQuery();
                        this.getLovMmTrfOdrItm().executeQuery();

                        return "Y";
                    } else if (("Y".equals(getRequireAreaIdProdnFlag())) || ("Y".equals(getRequireAreaIdSvcFlag()))) {

                        System.out.println("Requiremet are production  or service calling MM_INS_GL_CONS");

                        adflog.info("Requiremet are production or service MM_INS_GL_CONS");
                        this.getLovMmMrsItm().executeQuery();
                        this.getLovMmTrfOdrItm().executeQuery();
                        return "Y";
                        /*
                        Integer retGLVou =
                            Integer.parseInt(callStoredFunction(Types.NUMERIC, "MM.MM_INS_GL_CONSM (?,?,?,?,?,?,?,?)", new Object[] {
                                                                Integer.parseInt(currIssu.getAttribute("SlocId").toString()),
                                                                currIssu.getAttribute("CldId").toString(), hoOrgId,
                                                                currIssu.getAttribute("OrgId").toString(),
                                                                Integer.parseInt(currIssu.getAttribute("FyId").toString()),
                                                                currIssu.getAttribute("DocId").toString(),
                                                                currIssu.getAttribute("DocDt"),
                                                                Integer.parseInt(currIssu.getAttribute("UsrIdCreate").toString())
                        }).toString());


                        if (retGLVou == 1) {
                            this.getLovMmMrsItm().executeQuery();
                            this.getLovMmTrfOdrItm().executeQuery();
                            return "Y";
                        } else {
                            return "N";
                        } */


                    } else if (issDocType.compareTo(new Integer(330)) == 0 ||
                               issDocType.compareTo(new Integer(366)) == 0) {
                        System.out.println("Transfer oder cant pass vo");

                        adflog.info("ransfer oder cant pass vo");
                        this.getLovMmMrsItm().executeQuery();
                        this.getLovMmTrfOdrItm().executeQuery();
                        return "Y";
                    } else {

                        System.out.println(" calling MM_INS_GL_CONS");

                        adflog.info("calling MM_INS_GL_CONS");

                        Integer retGLVou =
                            Integer.parseInt(callStoredFunction(Types.NUMERIC, "MM.MM_INS_GL_CONSM (?,?,?,?,?,?,?,?)", new Object[] {
                                                                Integer.parseInt(currIssu.getAttribute("SlocId").toString()),
                                                                currIssu.getAttribute("CldId").toString(), hoOrgId,
                                                                currIssu.getAttribute("OrgId").toString(),
                                                                Integer.parseInt(currIssu.getAttribute("FyId").toString()),
                                                                currIssu.getAttribute("DocId").toString(),
                                                                currIssu.getAttribute("DocDt"),
                                                                Integer.parseInt(currIssu.getAttribute("UsrIdCreate").toString())
                        }).toString());


                        if (retGLVou == 1) {
                            this.getLovMmMrsItm().executeQuery();
                            this.getLovMmTrfOdrItm().executeQuery();
                            return "Y";
                        } else {
                            return "N";
                        }
                    }


                } else {
                    return "N";
                }

            } else {
                return "N";
            }
        } else {
            return "N";
        }

    }

    public void updateIssueStatus() {
        ViewObjectImpl mtlIss = this.getMmMtlIssu();
        Row currRow = mtlIss.getCurrentRow();
        if (currRow.getAttribute("IssuType") != null) {
            Integer issuType = Integer.parseInt(currRow.getAttribute("IssuType").toString());
            if (issuType == 323) {
                currRow.setAttribute("IssuStat", 369);
            } else if (issuType == 325) {
                currRow.setAttribute("IssuStat", 368);
            }
        }
    }

    public void issueViewQuery() {
        ViewObject vo = this.getMmMtlIssu();
        ViewObjectImpl servo = this.getMtlIssueSearch();
        Row currRow = servo.getCurrentRow();
        ViewCriteria vc = getMmMtlIssu().getViewCriteria("MmMtlIssuVOCriteria");
        vo.applyViewCriteria(vc);
        vo.setNamedWhereClauseParam("CldIdBindVar", currRow.getAttribute("CldId"));
        vo.setNamedWhereClauseParam("SlocIdBindVar", currRow.getAttribute("SlocId"));
        vo.setNamedWhereClauseParam("OrgIdBindVar", currRow.getAttribute("OrgId"));
        vo.setNamedWhereClauseParam("DocIdBindVar", currRow.getAttribute("DocId"));

        vo.executeQuery();
    }

    /**
     * Delele Document No
     */

    public void deleteDocumentNo() {
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        ViewObjectImpl mtlItm = this.getMmMtlIssuItm1();
        ViewObjectImpl mtlSr = this.getMmMtlIssuSr1();
        ViewObjectImpl mtlBin = this.getMmMtlIssuBin1();
        ViewObjectImpl mtlLot = this.getMmMtlIssuLot1();
        Row currRowSrc = srcVo.getCurrentRow();
        String orgId = currRowSrc.getAttribute("OrgId").toString();
        Integer slocId = Integer.parseInt(currRowSrc.getAttribute("SlocId").toString());
        String docId = currRowSrc.getAttribute("DocId").toString();
        String cldId = currRowSrc.getAttribute("CldId").toString();
        String docIdSrc = currRowSrc.getAttribute("DocIdSrc").toString();
        String whId = currRowSrc.getAttribute("WhId").toString();
        adflog.info("curr row disp --" + currRowSrc.getAttribute("DocIdSrcDisp") + "   docidsrc" +
                    currRowSrc.getAttribute("DocIdSrc"));

        if (docIdSrc != null) {
            RowQualifier itmRowQualifier = new RowQualifier(mtlItm);
            itmRowQualifier.setWhereClause("CldId = '" + cldId + "' and SlocId = " + slocId + " and OrgId = '" + orgId +
                                           "' and WhId = '" + whId + "' and DocId = '" + docId + "' and DocIdSrc = '" +
                                           docIdSrc + "'");
            Row[] itmRow = mtlItm.getFilteredRows(itmRowQualifier);
            adflog.info(itmRowQualifier.getExprStr());
            adflog.info("length itmRow -- > " + itmRow.length);
            if (itmRow.length > 0) {
                for (Row r : itmRow) {

                    RowQualifier srRowQualifier = new RowQualifier(mtlSr);
                    srRowQualifier.setWhereClause("CldId = '" + cldId + "' and SlocId = " + slocId + " and OrgId = '" +
                                                  orgId + "' and WhId = '" + whId + "' and DocId = '" + docId +
                                                  "' and DocIdSrc = '" + docIdSrc + "'  and ItmId = '" +
                                                  r.getAttribute("ItmId") + "'");
                    Row[] srRow = mtlSr.getFilteredRows(srRowQualifier);
                    adflog.info(srRowQualifier.getExprStr());
                    adflog.info("length srRow -- > " + srRow.length);
                    if (srRow.length > 0) {
                        for (Row r1 : srRow) {
                            adflog.info("delete SR Row");
                            r1.remove();
                        }

                    }
                    RowQualifier binRowQualifier = new RowQualifier(mtlBin);
                    binRowQualifier.setWhereClause("CldId = '" + cldId + "' and SlocId = " + slocId + " and OrgId = '" +
                                                   orgId + "' and WhId = '" + whId + "' and DocId = '" + docId +
                                                   "' and DocIdSrc = '" + docIdSrc + "' and ItmId = '" +
                                                   r.getAttribute("ItmId") + "'");
                    Row[] binRow = mtlBin.getFilteredRows(binRowQualifier);
                    adflog.info(binRowQualifier.getExprStr());
                    adflog.info("length binRow -- > " + binRow.length);
                    if (binRow.length > 0) {
                        for (Row r2 : binRow) {
                            adflog.info("delete bin Row");
                            r2.remove();
                        }
                    }

                    RowQualifier lotRowQualifier = new RowQualifier(mtlLot);
                    lotRowQualifier.setWhereClause("CldId = '" + cldId + "' and SlocId = " + slocId + " and OrgId = '" +
                                                   orgId + "' and WhId = '" + whId + "' and DocId = '" + docId +
                                                   "' and DocIdSrc = '" + docIdSrc + "'  and ItmId = '" +
                                                   r.getAttribute("ItmId") + "'");
                    Row[] lotRow = mtlLot.getFilteredRows(lotRowQualifier);
                    adflog.info(lotRowQualifier.getExprStr());
                    adflog.info("length lot -- > " + lotRow.length);
                    if (lotRow.length > 0) {
                        for (Row r3 : lotRow) {
                            adflog.info("delete Lot Row");
                            r3.remove();
                        }

                    }
                    adflog.info("delete item Row");
                    r.remove();
                }
            }
        }
        adflog.info("delete SRC Row");
        currRowSrc.remove();
    }

    public String allissueRecord() {
        Row currIssu = this.getMmMtlIssu().getCurrentRow();
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        ViewObjectImpl itmvo = this.getMmMtlIssuItm1();
        //Row curritm = this.getMmMtlIssuItm().getCurrentRow();

        if (currIssu != null) {
            String docId = null;
            if (currIssu.getAttribute("DocId") != null)
                docId = currIssu.getAttribute("DocId").toString();

            if (docId != null) {
                RowQualifier rq = new RowQualifier(srcVo);
                rq.setWhereClause("DocId='" + docId + "'");
                Row[] rr = srcVo.getFilteredRows(rq);
                adflog.info("src vo filter query " + rr.length);
                if (rr.length > 0) {
                    this.getDBTransaction().postChanges();
                    String docidSrc = null;
                    for (Row srcr : rr) {
                        if (srcr.getAttribute("DocIdSrc") != null)
                            docidSrc = srcr.getAttribute("DocIdSrc").toString();

                        if (docidSrc != null) {
                            RowQualifier rq1 = new RowQualifier(itmvo);
                            rq1.setWhereClause("DocIdSrc='" + docidSrc + "' and DocId='" + docId + "'");
                            Row[] rr1 = itmvo.getFilteredRows(rq1);
                            adflog.info("item row filter query " + rr1.length);
                            if (rr1.length > 0) {
                                for (Row currItm : rr1) {
                                    Number uomCovrFctr = (Number) currItm.getAttribute("UomConvFctr");
                                    Number pendQty = (Number) currItm.getAttribute("PendQty");
                                    Integer retVal = null;

                                    adflog.info("binChkFlg-----" + binChkFlg + "wh ---" +
                                                currIssu.getAttribute("WhId") + "itm   " +
                                                currItm.getAttribute("ItmId") + "pic or  " +
                                                currItm.getAttribute("TransItmPickOrder") + "serial  " +
                                                currItm.getAttribute("TransItmSerializedFlg") + "fact  " + uomCovrFctr +
                                                " doc id Src " + currItm.getAttribute("DocIdSrc") + " doc id  " +
                                                currIssu.getAttribute("DocId") + "pending quantity " + pendQty +
                                                "pick order " + currItm.getAttribute("TransItmPickOrder"));
                                    if (uomCovrFctr != null) {
                                        Integer pickOrder =
                                            Integer.parseInt(currItm.getAttribute("TransItmPickOrder").toString());
                                        if (pickOrder.compareTo(new Integer(307)) == 0) {
                                            pickOrder = new Integer(306);
                                        }
                                        retVal =
                                            Integer.parseInt(callStoredFunction(Types.NUMERIC,
                                                                                "MM_ISSU_AUTO (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                                                cldId, slocId,
                                                                                currIssu.getAttribute("OrgId").toString(),
                                                                                currIssu.getAttribute("WhId").toString(),
                                                                                currItm.getAttribute("ItmId").toString(),
                                                                                pendQty, pickOrder,
                                                                                currItm.getAttribute("TransItmSerializedFlg").toString(),
                                                                                binChkFlg,
                                                                                currIssu.getAttribute("DocId").toString(),
                                                                                currItm.getAttribute("DocIdSrc").toString(),
                                                                                currItm.getAttribute("DocDtSrc"),
                                                                                currItm.getAttribute("ItmUomBs").toString(),
                                                                                currItm.getAttribute("ItmUom").toString(),
                                                                                uomCovrFctr, "A"
                                        }).toString());
                                    }
                                    adflog.info("all issue record function return " + retVal);
                                    if (retVal == 1) {
                                        adflog.info("All vo going ro execute ");
                                        this.getMmMtlIssuSrc().executeQuery();
                                        this.getMmMtlIssuSrc1().executeQuery();
                                        this.getMmMtlIssuItm1().executeQuery();
                                        this.getMmMtlIssuItm().executeQuery();
                                        this.getMmMtlIssuLot().executeQuery();
                                        this.getMmMtlIssuLot1().executeQuery();
                                        this.getMmMtlIssuBin().executeQuery();
                                        this.getMmMtlIssuSr().executeQuery();


                                    }
                                }
                            }
                        }

                    }


                }
            }

        }
        return null;
    }

    public ArrayList checkAllItemNotissue() {
        Row currIssu = this.getMmMtlIssu().getCurrentRow();
        ViewObjectImpl srcVo = this.getMmMtlIssuSrc();
        ViewObjectImpl itmvo = this.getMmMtlIssuItm1();
        ViewObjectImpl lotvo = this.getMmMtlIssuLot1();
        ViewObjectImpl lovmrsno = this.getLovMRSDocNo();
        ViewObjectImpl lovTrfOrd = this.getTransferOrderDocNo();

        ArrayList ar = new ArrayList();
        String docId = null;
        if (currIssu.getAttribute("DocId") != null) {
            docId = currIssu.getAttribute("DocId").toString();
        }
        if (docId != null) {
            RowQualifier rq = new RowQualifier(srcVo);
            rq.setWhereClause("DocId='" + docId + "'");
            Row[] rr = srcVo.getFilteredRows(rq);

            if (rr.length > 0) {
                String docIdSrc = null;
                for (Row srcr : rr) {
                    docIdSrc = srcr.getAttribute("DocIdSrc").toString();
                    RowQualifier rq1 = new RowQualifier(itmvo);
                    rq1.setWhereClause("DocId='" + docId + "' and DocIdSrc='" + docIdSrc + "'");
                    Row[] rr1 = itmvo.getFilteredRows(rq1);
                    if (rr1.length > 0) {
                        exitfrmitem:
                        for (Row itmr : rr1) {
                            String itmId = itmr.getAttribute("ItmId").toString();
                            RowQualifier rq3 = new RowQualifier(lotvo);
                            rq3.setWhereClause("DocId='" + docId + "' and DocIdSrc='" + docIdSrc + "' and ItmId='" +
                                               itmId + "'");
                            Row[] rr3 = lotvo.getFilteredRows(rq3);
                            if (rr3.length > 0) {

                            } else {
                                Row[] lovDocSrcNm = null;
                                if (currIssu.getAttribute("TransIssueDocType") != null) {
                                    Integer src =
                                        Integer.parseInt(currIssu.getAttribute("TransIssueDocType").toString());
                                    if (src.compareTo(326) == 0) { /**lov for MRS*/
                                        RowQualifier rqmrs = new RowQualifier(lovmrsno);
                                        rqmrs.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId +
                                                             " and OrgId='" + orgId + "' and MrsTxnId='" + docIdSrc +
                                                             "'");
                                        lovDocSrcNm = lovmrsno.getFilteredRows(rqmrs);
                                        if (lovDocSrcNm.length > 0)
                                            ar.add(lovDocSrcNm[0].getAttribute("MrsNo"));
                                    } else if (src.compareTo(330) == 0 || src.compareTo(366) == 0) { /**lov for tranfer order*/
                                        RowQualifier rqtrf = new RowQualifier(lovTrfOrd);
                                        rqtrf.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId +
                                                             " and OrgId='" + orgId + "' and DocId='" + docIdSrc + "'");
                                        lovDocSrcNm = lovTrfOrd.getFilteredRows(rqtrf);
                                        if (lovDocSrcNm.length > 0)
                                            ar.add(lovDocSrcNm[0].getAttribute("TrfNo"));

                                    }
                                }
                                break exitfrmitem;
                            }
                        }
                    }
                }
            }

        }
        adflog.info("arraylistvalue is " + ar);
        return ar;
    }

    /**
     * Container's getter for ViewMmStkSummBin.
     * @return ViewMmStkSummBin
     */
    public ViewObjectImpl getViewMmStkSummBin() {
        return (ViewObjectImpl) findViewObject("ViewMmStkSummBin");
    }

    /**
     * Container's getter for IssuItmTOSummBinViewVL1.
     * @return IssuItmTOSummBinViewVL1
     */
    public ViewLinkImpl getIssuItmTOSummBinViewVL1() {
        return (ViewLinkImpl) findViewLink("IssuItmTOSummBinViewVL1");
    }

    /**
     * Container's getter for MmMtlIssuBin.
     * @return MmMtlIssuBin
     */
    public ViewObjectImpl getMmMtlIssuBin() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuBin");
    }

    /**
     * Container's getter for FkMmMtlIssuBinVL1.
     * @return FkMmMtlIssuBinVL1
     */
    public ViewLinkImpl getFkMmMtlIssuBinVL1() {
        return (ViewLinkImpl) findViewLink("FkMmMtlIssuBinVL1");
    }

    /**
     * Container's getter for ViewMmStkSummLot.
     * @return ViewMmStkSummLot
     */
    public ViewMmStkSummLotVOImpl getViewMmStkSummLot() {
        return (ViewMmStkSummLotVOImpl) findViewObject("ViewMmStkSummLot");
    }

    /**
     * Container's getter for IssuItmTOSummLotViewVL1.
     * @return IssuItmTOSummLotViewVL1
     */
    public ViewLinkImpl getIssuItmTOSummLotViewVL1() {
        return (ViewLinkImpl) findViewLink("IssuItmTOSummLotViewVL1");
    }

    /**
     * Container's getter for MmMtlIssuLot.
     * @return MmMtlIssuLot
     */
    public ViewObjectImpl getMmMtlIssuLot() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuLot");
    }

    /**
     * Container's getter for FkMmMtlIssuLotVL1.
     * @return FkMmMtlIssuLotVL1
     */
    public ViewLinkImpl getFkMmMtlIssuLotVL1() {
        return (ViewLinkImpl) findViewLink("FkMmMtlIssuLotVL1");
    }

    /**
     * Container's getter for LovUomId.
     * @return LovUomId
     */
    public ViewObjectImpl getLovUomId() {
        return (ViewObjectImpl) findViewObject("LovUomId");
    }

    /**
     * Container's getter for LovMmTrfOdrItm.
     * @return LovMmTrfOdrItm
     */
    public ViewObjectImpl getLovMmTrfOdrItm() {
        return (ViewObjectImpl) findViewObject("LovMmTrfOdrItm");
    }

    /**
     * Container's getter for TransferOrderDocNo.
     * @return TransferOrderDocNo
     */
    public ViewObjectImpl getTransferOrderDocNo() {
        return (ViewObjectImpl) findViewObject("TransferOrderDocNo");
    }

    /**
     * Container's getter for MtlIssueSearch.
     * @return MtlIssueSearch
     */
    public ViewObjectImpl getMtlIssueSearch() {
        return (ViewObjectImpl) findViewObject("MtlIssueSearch");
    }

    /**
     * Container's getter for TransIssueSearch.
     * @return TransIssueSearch
     */
    public ViewObjectImpl getTransIssueSearch() {
        return (ViewObjectImpl) findViewObject("TransIssueSearch");
    }

    /**
     * Container's getter for MmMtlIssuItm1.
     * @return MmMtlIssuItm1
     */
    public ViewObjectImpl getMmMtlIssuItm1() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuItm1");
    }

    /**
     * Container's getter for MmMtlIssuLot1.
     * @return MmMtlIssuLot1
     */
    public ViewObjectImpl getMmMtlIssuLot1() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuLot1");
    }


    /**
     * Container's getter for MmMtlIssuBin1.
     * @return MmMtlIssuBin1
     */
    public ViewObjectImpl getMmMtlIssuBin1() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuBin1");
    }

    /**
     * Container's getter for MmMtlIssuSr1.
     * @return MmMtlIssuSr1
     */
    public ViewObjectImpl getMmMtlIssuSr1() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuSr1");
    }

    /**
     * Container's getter for LovSlsSoNo.
     * @return LovSlsSoNo
     */
    public ViewObjectImpl getLovSlsSoNo() {
        return (ViewObjectImpl) findViewObject("LovSlsSoNo");
    }

    /**
     * Container's getter for LovSlsShipmntNo.
     * @return LovSlsShipmntNo
     */
    public ViewObjectImpl getLovSlsShipmntNo() {
        return (ViewObjectImpl) findViewObject("LovSlsShipmntNo");
    }

    /**
     * Container's getter for LovKitProd.
     * @return LovKitProd
     */
    public ViewObjectImpl getLovKitProd() {
        return (ViewObjectImpl) findViewObject("LovKitProd");
    }

    /**
     * Container's getter for LovItmIdTune.
     * @return LovItmIdTune
     */
    public ViewObjectImpl getLovItmIdTune() {
        return (ViewObjectImpl) findViewObject("LovItmIdTune");
    }

    /**
     * Container's getter for LovItmDesctune.
     * @return LovItmDesctune
     */
    public ViewObjectImpl getLovItmDesctune() {
        return (ViewObjectImpl) findViewObject("LovItmDesctune");
    }

    /**
     * Container's getter for LOVGetReqAreaIdVO1.
     * @return LOVGetReqAreaIdVO1
     */
    public ViewObjectImpl getLOVGetReqAreaIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVGetReqAreaIdVO1");
    }

    public Integer getRequireAreaId() {
        Integer ReqId = 0;
        if (this.getMmMtlIssuSrc().getCurrentRow() != null) {
            ViewObjectImpl areaIdVO1 = this.getLOVGetReqAreaIdVO1();
            areaIdVO1.setNamedWhereClauseParam("BindDocSrcID",
                                               this.getMmMtlIssuSrc().getCurrentRow().getAttribute("DocIdSrc").toString());
            areaIdVO1.executeQuery();
            Row[] r =
                this.getLOVGetReqAreaIdVO1().getFilteredRows("MrsTxnId",
                                                             this.getMmMtlIssuSrc().getCurrentRow().getAttribute("DocId").toString());
            if (r.length > 0) {
                ReqId = Integer.parseInt(r[0].getAttribute("DocTypeSrc").toString());

            }
            return ReqId;
        }

        return ReqId;
    }

    public String getRequireAreaIdProdnFlag() {

        if (this.getMmMtlIssu().getCurrentRow() != null &&
            this.getMmMtlIssu().getCurrentRow().getAttribute("RqmtAreaIdSrc") != null) {
            Row[] r =
                this.getLovRqmtAreaIdVO1().getFilteredRows("RqmtAreaId",
                                                           Integer.parseInt(this.getMmMtlIssu().getCurrentRow().getAttribute("RqmtAreaIdSrc").toString()));
            if (r.length > 0) {
                System.out.println("=====>>" + r[0].getAttribute("ProductionFlg").toString());
                return (r[0].getAttribute("ProductionFlg").toString());
            }

        }

        return "N";
    }

    public String getRequireAreaIdSvcFlag() {

        if (this.getMmMtlIssu().getCurrentRow() != null &&
            this.getMmMtlIssu().getCurrentRow().getAttribute("RqmtAreaIdSrc") != null) {
            Row[] r =
                this.getLovRqmtAreaIdVO1().getFilteredRows("RqmtAreaId",
                                                           Integer.parseInt(this.getMmMtlIssu().getCurrentRow().getAttribute("RqmtAreaIdSrc").toString()));
            if (r.length > 0) {
                System.out.println("=====>>" + r[0].getAttribute("SvcCentreFlg").toString());
                return (r[0].getAttribute("SvcCentreFlg").toString());
            }
        }

        return "N";
    }

    public String deleteIssuZero() {
        Row curr = this.getMmMtlIssu().getCurrentRow();
        ViewObjectImpl issuSrcvo = this.getMmMtlIssuSrc1();
        ViewObjectImpl itmvo = this.getMmMtlIssuItm1();
        adflog.info("whid src is  " + curr.getAttribute("WhIdSrc"));
        if (curr.getAttribute("DocId") != null) {
            String docId = curr.getAttribute("DocId").toString();
            RowQualifier rq = new RowQualifier(issuSrcvo);
            rq.setWhereClause("DocId='" + docId + "' and OrgId='" + orgId + "'");
            Row[] rr = issuSrcvo.getFilteredRows(rq);

            if (rr.length > 0) {

                for (Row r : rr) {
                    String docIdSrc = r.getAttribute("DocIdSrc").toString();

                    RowQualifier rqItm = new RowQualifier(itmvo);
                    rqItm.setWhereClause("DocId='" + docId + "' and DocIdSrc='" + docIdSrc + "'");
                    Row[] rrItm = itmvo.getFilteredRows(rq);

                    if (rrItm.length > 0) {
                        for (Row rItm : rrItm) {
                            if (rItm.getAttribute("IssuQty") != null) {
                                Number IssueQty = (Number) rItm.getAttribute("IssuQty");
                                adflog.info("whid src is ---------------  " + curr.getAttribute("WhIdSrc"));
                                if (IssueQty.compareTo(new Number(0)) == 0) {
                                    adflog.info("current item name is remove is " + rItm.getAttribute("ItmId"));
                                    rItm.remove();
                                }
                            }
                        }
                    }

                }

            }

        }
        return null;
    }


    /**
     * Container's getter for LovRqmtAreaIdVO1.
     * @return LovRqmtAreaIdVO1
     */
    public ViewObjectImpl getLovRqmtAreaIdVO1() {
        return (ViewObjectImpl) findViewObject("LovRqmtAreaIdVO1");
    }

    /**
     * Container's getter for MmMtlIssuSrc1.
     * @return MmMtlIssuSrc1
     */
    public MmMtlIssuSrcVOImpl getMmMtlIssuSrc1() {
        return (MmMtlIssuSrcVOImpl) findViewObject("MmMtlIssuSrc1");
    }

    /**
     * Container's getter for LovIssueTo1.
     * @return LovIssueTo1
     */
    public ViewObjectImpl getLovIssueTo() {
        return (ViewObjectImpl) findViewObject("LovIssueTo");
    }

    /**
     * Container's getter for LovWhId1.
     * @return LovWhId1
     */
    public ViewObjectImpl getLovWhId() {
        return (ViewObjectImpl) findViewObject("LovWhId");
    }

    /**
     * Container's getter for LovStkSwap1.
     * @return LovStkSwap1
     */
    public ViewObjectImpl getLovStkSwap() {
        return (ViewObjectImpl) findViewObject("LovStkSwap");
    }

    /**
     * Container's getter for LovScItm1.
     * @return LovScItm1
     */
    public ViewObjectImpl getLovScItm() {
        return (ViewObjectImpl) findViewObject("LovScItm");
    }

    /**
     * Container's getter for LovScNo1.
     * @return LovScNo1
     */
    public ViewObjectImpl getLovScNo() {
        return (ViewObjectImpl) findViewObject("LovScNo");
    }

    /**
     * Container's getter for LovMrsExtrnl1.
     * @return LovMrsExtrnl1
     */
    public ViewObjectImpl getLovMrsExtrnl() {
        return (ViewObjectImpl) findViewObject("LovMrsExtrnl");
    }

    /**
     * Container's getter for LovCustomer1.
     * @return LovCustomer1
     */
    public ViewObjectImpl getLovCustomer() {
        return (ViewObjectImpl) findViewObject("LovCustomer");
    }

    /**
     * Container's getter for LovOrgId1.
     * @return LovOrgId1
     */
    public ViewObjectImpl getLovOrgId() {
        return (ViewObjectImpl) findViewObject("LovOrgId");
    }

    /**
     * Container's getter for MmMtlIssuSrNote1.
     * @return MmMtlIssuSrNote1
     */
    public ViewObjectImpl getMmMtlIssuSrNote1() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuSrNote1");
    }

    /**
     * Container's getter for FkMmMtlIssuSrNoteVL1.
     * @return FkMmMtlIssuSrNoteVL1
     */
    public ViewLinkImpl getFkMmMtlIssuSrNoteVL1() {
        return (ViewLinkImpl) findViewLink("FkMmMtlIssuSrNoteVL1");
    }

    public void insertIntoNote() {
        Row currentRow = this.getMmMtlIssuItm().getCurrentRow();
        if (currentRow != null) {
            MmMtlIssuItmVORowImpl row = (MmMtlIssuItmVORowImpl) currentRow;
            System.out.println("Value is: " + row.getSerialNoteTrans());
            this.getMmMtlIssuSrNote1().getCurrentRow().setAttribute("SrNo", row.getSerialNoteTrans());
            row.setSerialNoteTrans(null);
        }
    }

    /**
     * Container's getter for LOVSCIssueVO1.
     * @return LOVSCIssueVO1
     */
    public ViewObjectImpl getLOVSCIssueVO1() {
        return (ViewObjectImpl) findViewObject("LOVSCIssueVO1");
    }

    /**
     * Container's getter for StockDetalVO1.
     * @return StockDetalVO1
     */
    public ViewObjectImpl getStockDetalVO1() {
        return (ViewObjectImpl) findViewObject("StockDetalVO1");
    }

    /**
     * Container's getter for IssueItmToStkDetailVL1.
     * @return IssueItmToStkDetailVL1
     */
    public ViewLinkImpl getIssueItmToStkDetailVL1() {
        return (ViewLinkImpl) findViewLink("IssueItmToStkDetailVL1");
    }

    /**
     * Container's getter for TransferOrderDisp1.
     * @return TransferOrderDisp1
     */
    public ViewObjectImpl getTransferOrderDisp1() {
        return (ViewObjectImpl) findViewObject("TransferOrderDisp1");
    }

    /**
     * Container's getter for LovDispMrsDocNo1.
     * @return LovDispMrsDocNo1
     */
    public LovDispMrsDocNoVOImpl getLovDispMrsDocNo1() {
        return (LovDispMrsDocNoVOImpl) findViewObject("LovDispMrsDocNo1");
    }
}
