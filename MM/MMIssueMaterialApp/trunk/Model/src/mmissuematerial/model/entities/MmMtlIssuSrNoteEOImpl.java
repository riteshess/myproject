package mmissuematerial.model.entities;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 06 13:56:13 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmMtlIssuSrNoteEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getCldId();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setCldId((String) value);
            }
        },
        SlocId {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getSlocId();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setSlocId((Integer) value);
            }
        },
        OrgId {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getOrgId();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setOrgId((String) value);
            }
        },
        WhId {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getWhId();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setWhId((String) value);
            }
        },
        DocId {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getDocId();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setDocId((String) value);
            }
        },
        DocIdSrc {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getDocIdSrc();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setDocIdSrc((String) value);
            }
        },
        ItmId {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getItmId();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setItmId((String) value);
            }
        },
        ItmUom {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getItmUom();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setItmUom((String) value);
            }
        },
        SrlNo {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getSrlNo();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setSrlNo((Integer) value);
            }
        },
        ItmUomBs {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getItmUomBs();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setItmUomBs((String) value);
            }
        },
        SrNo {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getSrNo();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setSrNo((String) value);
            }
        },
        MmMtlIssuItm {
            public Object get(MmMtlIssuSrNoteEOImpl obj) {
                return obj.getMmMtlIssuItm();
            }

            public void put(MmMtlIssuSrNoteEOImpl obj, Object value) {
                obj.setMmMtlIssuItm((MmMtlIssuItmEOImpl) value);
            }
        };
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(MmMtlIssuSrNoteEOImpl object);

        public abstract void put(MmMtlIssuSrNoteEOImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int WHID = AttributesEnum.WhId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int DOCIDSRC = AttributesEnum.DocIdSrc.index();
    public static final int ITMID = AttributesEnum.ItmId.index();
    public static final int ITMUOM = AttributesEnum.ItmUom.index();
    public static final int SRLNO = AttributesEnum.SrlNo.index();
    public static final int ITMUOMBS = AttributesEnum.ItmUomBs.index();
    public static final int SRNO = AttributesEnum.SrNo.index();
    public static final int MMMTLISSUITM = AttributesEnum.MmMtlIssuItm.index();

    /**
     * This is the default constructor (do not remove).
     */
    public MmMtlIssuSrNoteEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("mmissuematerial.model.entities.MmMtlIssuSrNoteEO");
    }

    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for WhId, using the alias name WhId.
     * @return the value of WhId
     */
    public String getWhId() {
        return (String) getAttributeInternal(WHID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WhId.
     * @param value value to set the WhId
     */
    public void setWhId(String value) {
        setAttributeInternal(WHID, value);
    }

    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for DocIdSrc, using the alias name DocIdSrc.
     * @return the value of DocIdSrc
     */
    public String getDocIdSrc() {
        return (String) getAttributeInternal(DOCIDSRC);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocIdSrc.
     * @param value value to set the DocIdSrc
     */
    public void setDocIdSrc(String value) {
        setAttributeInternal(DOCIDSRC, value);
    }

    /**
     * Gets the attribute value for ItmId, using the alias name ItmId.
     * @return the value of ItmId
     */
    public String getItmId() {
        return (String) getAttributeInternal(ITMID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmId.
     * @param value value to set the ItmId
     */
    public void setItmId(String value) {
        setAttributeInternal(ITMID, value);
    }

    /**
     * Gets the attribute value for ItmUom, using the alias name ItmUom.
     * @return the value of ItmUom
     */
    public String getItmUom() {
        return (String) getAttributeInternal(ITMUOM);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmUom.
     * @param value value to set the ItmUom
     */
    public void setItmUom(String value) {
        setAttributeInternal(ITMUOM, value);
    }

    /**
     * Gets the attribute value for SrlNo, using the alias name SrlNo.
     * @return the value of SrlNo
     */
    public Integer getSrlNo() {
        return (Integer) getAttributeInternal(SRLNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SrlNo.
     * @param value value to set the SrlNo
     */
    public void setSrlNo(Integer value) {
        setAttributeInternal(SRLNO, value);
    }

    /**
     * Gets the attribute value for ItmUomBs, using the alias name ItmUomBs.
     * @return the value of ItmUomBs
     */
    public String getItmUomBs() {
        return (String) getAttributeInternal(ITMUOMBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for ItmUomBs.
     * @param value value to set the ItmUomBs
     */
    public void setItmUomBs(String value) {
        setAttributeInternal(ITMUOMBS, value);
    }

    /**
     * Gets the attribute value for SrNo, using the alias name SrNo.
     * @return the value of SrNo
     */
    public String getSrNo() {
        return (String) getAttributeInternal(SRNO);
    }

    /**
     * Sets <code>value</code> as the attribute value for SrNo.
     * @param value value to set the SrNo
     */
    public void setSrNo(String value) {
        setAttributeInternal(SRNO, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.server.EntityImpl.
     */
    public MmMtlIssuItmEOImpl getMmMtlIssuItm() {
        return (MmMtlIssuItmEOImpl) getAttributeInternal(MMMTLISSUITM);
    }

    /**
     * Sets <code>value</code> as the associated entity oracle.jbo.server.EntityImpl.
     */
    public void setMmMtlIssuItm(MmMtlIssuItmEOImpl value) {
        setAttributeInternal(MMMTLISSUITM, value);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param whId key constituent
     * @param docId key constituent
     * @param docIdSrc key constituent
     * @param itmId key constituent
     * @param itmUom key constituent
     * @param srlNo key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String whId, String docId,
                                       String docIdSrc, String itmId, String itmUom, Integer srlNo) {
        return new Key(new Object[] { cldId, slocId, orgId, whId, docId, docIdSrc, itmId, itmUom, srlNo });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {
        super.create(attributeList);
        MmMtlIssuItmEOImpl impl = (MmMtlIssuItmEOImpl) this.getMmMtlIssuItm();
        this.setItmUomBs(impl.getItmUomBs());
        Object docId = (callStoredFunction(Types.NUMERIC, "MM.MM_GET_SL_NO ()", new Object[] { }));
        if (docId != null) {
            BigDecimal val = (BigDecimal) docId;
            this.setSrlNo(val.intValue());
        }
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //  super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            // adflog.info("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
}

