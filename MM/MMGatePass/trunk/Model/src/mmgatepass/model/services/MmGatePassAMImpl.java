package mmgatepass.model.services;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import mmgatepass.model.services.common.MmGatePassAM;
import mmgatepass.model.views.MmGpItmVOImpl;
import mmgatepass.model.views.MmGpVOImpl;
import mmgatepass.model.views.MmPurRetnItmVOImpl;
import mmgatepass.model.views.MmRmdaItmVOImpl;
import mmgatepass.model.views.RcptGpItmVOImpl;
import mmgatepass.model.views.RcptGpItmVORowImpl;
import mmgatepass.model.views.SearchGpVOImpl;
import mmgatepass.model.views.TransSearchCompVOImpl;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 18 10:32:38 IST 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MmGatePassAMImpl extends ApplicationModuleImpl implements MmGatePassAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger _log = ADFLogger.createADFLogger(MmGatePassAMImpl.class);

    public MmGatePassAMImpl() {
    }

    /**
     * Container's getter for MmGp.
     * @return MmGp
     */
    public MmGpVOImpl getMmGp() {
        return (MmGpVOImpl) findViewObject("MmGp");
    }

    /**
     * Container's getter for LovOrgId.
     * @return LovOrgId
     */
    public ViewObjectImpl getLovOrgId() {
        return (ViewObjectImpl) findViewObject("LovOrgId");
    }

    /**
     * Container's getter for LovWhId.
     * @return LovWhId
     */
    public ViewObjectImpl getLovWhId() {
        return (ViewObjectImpl) findViewObject("LovWhId");
    }

    /**
     * Container's getter for LovDocTypeSrc.
     * @return LovDocTypeSrc
     */
    public ViewObjectImpl getLovDocTypeSrc() {
        return (ViewObjectImpl) findViewObject("LovDocTypeSrc");
    }

    /**
     * Container's getter for LovMrnNo.
     * @return LovMrnNo
     */
    public ViewObjectImpl getLovMrnNo() {
        return (ViewObjectImpl) findViewObject("LovMrnNo");
    }

    /**
     * Container's getter for LovRmdaNo.
     * @return LovRmdaNo
     */
    public ViewObjectImpl getLovRmdaNo() {
        return (ViewObjectImpl) findViewObject("LovRmdaNo");
    }

    /**
     * Container's getter for LovMmPurRetNo.
     * @return LovMmPurRetNo
     */
    public ViewObjectImpl getLovMmPurRetNo() {
        return (ViewObjectImpl) findViewObject("LovMmPurRetNo");
    }

    /**
     * Container's getter for LovEoId.
     * @return LovEoId
     */
    public ViewObjectImpl getLovEoId() {
        return (ViewObjectImpl) findViewObject("LovEoId");
    }

    /**
     * Container's getter for LovSAddsIdEo.
     * @return LovSAddsIdEo
     */
    public ViewObjectImpl getLovSAddsIdEo() {
        return (ViewObjectImpl) findViewObject("LovSAddsIdEo");
    }

    /**
     * Container's getter for MmGpItm.
     * @return MmGpItm
     */
    public MmGpItmVOImpl getMmGpItm() {
        return (MmGpItmVOImpl) findViewObject("MmGpItm");
    }

    /**
     * Container's getter for MmGpToGpItemVL1.
     * @return MmGpToGpItemVL1
     */
    public ViewLinkImpl getMmGpToGpItemVL1() {
        return (ViewLinkImpl) findViewLink("MmGpToGpItemVL1");
    }

    /**
     * Container's getter for LovItmId.
     * @return LovItmId
     */
    public ViewObjectImpl getLovItmId() {
        return (ViewObjectImpl) findViewObject("LovItmId");
    }

    /**
     * Container's getter for LovUomId.
     * @return LovUomId
     */
    public ViewObjectImpl getLovUomId() {
        return (ViewObjectImpl) findViewObject("LovUomId");
    }

    /**
     * Container's getter for LovUsrId.
     * @return LovUsrId
     */
    public ViewObjectImpl getLovUsrId() {
        return (ViewObjectImpl) findViewObject("LovUsrId");
    }

    public void AddItems() {
        Row gpR = getMmGp().getCurrentRow();
        String cldId = (String) gpR.getAttribute("CldId");
        Integer slocId = Integer.parseInt(gpR.getAttribute("SlocId").toString());
        String docId = (String) gpR.getAttribute("DocId");
        String orgId = (String) gpR.getAttribute("OrgId");
        String whId = (String) gpR.getAttribute("WhId");
        String docIdSrc = (String) gpR.getAttribute("DocIdSrc");
        Integer doctype = (Integer) gpR.getAttribute("DocTypeSrc");
        Number zero = new Number(0);
        if (doctype.toString().equals("434")) //for RMDA
        {
            ViewObjectImpl rmda = this.getMmRmdaItm();
            RowQualifier rmdaRQ = new RowQualifier(rmda);
            rmdaRQ.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                  "' and WhId='" + whId + "' and DocId='" + docIdSrc + "'");
            Row[] frRmda = rmda.getFilteredRows(rmdaRQ);
            Integer length = -1;
            if (frRmda.length > 0) {
                length = frRmda.length - 1;
            }
            while (length >= 0) {
                String itmid = frRmda[length].getAttribute("ItmId").toString();

                String itmUom = null;
                if (frRmda[length].getAttribute("ItmUom") != null)
                    itmUom = frRmda[length].getAttribute("ItmUom").toString();

                //Apply check If Item is already addded or not.
                RowQualifier rq = new RowQualifier(this.getMmGpItm());
                rq.setWhereClause("OrgId='" + orgId + "' and DocId='" + docId + "' and ItmId='" + itmid +
                                  "' and ItmUom='" + itmUom + "'");
                Row[] Itmrw = getMmGpItm().getFilteredRows(rq);
                if (Itmrw.length > 0) {
                } else {

                    Number rejQty = zero;
                    if (frRmda[length].getAttribute("RejQty") != null)
                        rejQty = (Number) frRmda[length].getAttribute("RejQty");

                    String itmuomBs = itmUom;
                    if (frRmda[length].getAttribute("ItmUomBs") != null)
                        itmuomBs = frRmda[length].getAttribute("ItmUomBs").toString();

                    Number uomConvFctr = new Number(1);
                    if (frRmda[length].getAttribute("UomConvFctr") != null)
                        uomConvFctr = (Number) frRmda[length].getAttribute("UomConvFctr");

                    Number rejQtyBs = rejQty;
                    if (frRmda[length].getAttribute("RejQtyBs") != null)
                        rejQtyBs = (Number) frRmda[length].getAttribute("RejQtyBs");

                    Row newrow = getMmGpItm().createRow();
                    newrow.setAttribute("CldId", cldId);
                    newrow.setAttribute("SlocId", slocId);
                    newrow.setAttribute("OrgId", orgId);
                    newrow.setAttribute("WhId", whId);
                    newrow.setAttribute("DocId", docId);
                    newrow.setAttribute("ItmId", itmid);
                    newrow.setAttribute("ItmUom", itmUom);
                    newrow.setAttribute("RwkQty", zero);
                    newrow.setAttribute("RejQty", rejQty);
                    newrow.setAttribute("ItmUomBs", itmuomBs);
                    newrow.setAttribute("UomConvFctr", uomConvFctr);
                    newrow.setAttribute("RwkQtyBs", zero);
                    newrow.setAttribute("RejQtyBs", rejQtyBs);
                    newrow.setAttribute("TotRcptQty", zero);
                    newrow.setAttribute("TotRcptQtyBs", zero);
                    getMmGpItm().insertRow(newrow);
                }
                length--;
            }
            getMmGpItm().executeQuery();
        } else if (doctype.toString().equals("433")) //for Purchase Return
        {
            ViewObjectImpl purRetn = this.getMmPurRetnItm();
            RowQualifier purRetnRQ = new RowQualifier(purRetn);
            purRetnRQ.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                     "' and WhId='" + whId + "' and DocId='" + docIdSrc + "'");
            Row[] frPurRetn = purRetn.getFilteredRows(purRetnRQ);
            Integer length = -1;
            if (frPurRetn.length > 0) {
                length = frPurRetn.length - 1;
            }
            while (length >= 0) {
                String itmid = frPurRetn[length].getAttribute("ItmId").toString();

                String itmUom = null;
                if (frPurRetn[length].getAttribute("ItmUom") != null)
                    itmUom = frPurRetn[length].getAttribute("ItmUom").toString();

                //Apply check If Item is already addded or not.
                RowQualifier rq = new RowQualifier(this.getMmGpItm());
                rq.setWhereClause("OrgId='" + orgId + "' and DocId='" + docId + "' and ItmId='" + itmid +
                                  "' and ItmUom='" + itmUom + "'");
                Row[] Itmrw = getMmGpItm().getFilteredRows(rq);
                if (Itmrw.length > 0) {
                } else {

                    Number rejQty = zero;
                    if (frPurRetn[length].getAttribute("RejQty") != null)
                        rejQty = (Number) frPurRetn[length].getAttribute("RejQty");

                    String itmuomBs = itmUom;
                    if (frPurRetn[length].getAttribute("ItmUomBs") != null)
                        itmuomBs = frPurRetn[length].getAttribute("ItmUomBs").toString();

                    Number uomConvFctr = new Number(1);
                    if (frPurRetn[length].getAttribute("UomConvFctr") != null)
                        uomConvFctr = (Number) frPurRetn[length].getAttribute("UomConvFctr");

                    Number rejQtyBs = rejQty;
                    if (frPurRetn[length].getAttribute("RejQtyBs") != null)
                        rejQtyBs = (Number) frPurRetn[length].getAttribute("RejQtyBs");

                    Number rwkQty = zero;
                    if (frPurRetn[length].getAttribute("RwkQty") != null)
                        rwkQty = (Number) frPurRetn[length].getAttribute("RwkQty");

                    Number rwkQtyBs = rwkQty;
                    if (frPurRetn[length].getAttribute("RwkQtyBs") != null)
                        rwkQtyBs = (Number) frPurRetn[length].getAttribute("RwkQtyBs");


                    Number okQty = zero;
                    if (frPurRetn[length].getAttribute("OkQty") != null)
                        okQty = (Number) frPurRetn[length].getAttribute("OkQty");

                    Number okQtyBs = okQty;
                    if (frPurRetn[length].getAttribute("OkQtyBs") != null)
                        okQtyBs = (Number) frPurRetn[length].getAttribute("OkQtyBs");
                    Number totRcptQty = zero;
                    totRcptQty = okQty.add(rejQty).add(rwkQty);
                    Number totRcptQtyBs = zero;
                    totRcptQtyBs = okQtyBs.add(rejQtyBs).add(rwkQtyBs);

                    Row newrow = getMmGpItm().createRow();
                    newrow.setAttribute("CldId", cldId);
                    newrow.setAttribute("SlocId", slocId);
                    newrow.setAttribute("OrgId", orgId);
                    newrow.setAttribute("WhId", whId);
                    newrow.setAttribute("DocId", docId);
                    newrow.setAttribute("ItmId", itmid);
                    newrow.setAttribute("ItmUom", itmUom);
                    newrow.setAttribute("RwkQty", rwkQty);
                    newrow.setAttribute("RejQty", rejQty);
                    newrow.setAttribute("ItmUomBs", itmuomBs);
                    newrow.setAttribute("UomConvFctr", uomConvFctr);
                    newrow.setAttribute("RwkQtyBs", rwkQtyBs);
                    newrow.setAttribute("RejQtyBs", rejQtyBs);
                    newrow.setAttribute("TotRcptQty", totRcptQty);
                    newrow.setAttribute("TotRcptQtyBs", totRcptQtyBs);
                    newrow.setAttribute("OkQty", okQty);
                    newrow.setAttribute("OkQtyBs", okQtyBs);
                    getMmGpItm().insertRow(newrow);

                    //add itm in stk
                    ViewObjectImpl prs = this.getMmPurRetnItmStk();
                    RowQualifier rqprs = new RowQualifier(prs);
                    rqprs.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                         "' and WhId='" + whId + "' and DocId='" + docIdSrc + "' and ItmId='" + itmid +
                                         "' and ItmUom='" + itmUom + "'");
                    Row[] stkrow = prs.getFilteredRows(rqprs);
                    Integer lenstk = -1;
                    if (stkrow.length > 0)
                        lenstk = stkrow.length - 1;
                    ViewObjectImpl gps = this.getMmGpItmStk();
                    while (lenstk >= 0) {
                        Row stknew = gps.createRow();
                        stknew.setAttribute("CldId", cldId);
                        stknew.setAttribute("SlocId", slocId);
                        stknew.setAttribute("OrgId", orgId);
                        stknew.setAttribute("WhId", whId);
                        stknew.setAttribute("DocId", docId);
                        stknew.setAttribute("ItmId", itmid);
                        stknew.setAttribute("ItmUom", itmUom);
                        stknew.setAttribute("LotId", stkrow[lenstk].getAttribute("LotId"));
                        stknew.setAttribute("SrNo", stkrow[lenstk].getAttribute("SrNo"));
                        stknew.setAttribute("RejQty", stkrow[lenstk].getAttribute("RejQty"));
                        stknew.setAttribute("RwkQty", stkrow[lenstk].getAttribute("RwkQty"));
                        stknew.setAttribute("ItmUomBs", itmuomBs);
                        stknew.setAttribute("UomConvFctr", uomConvFctr);
                        stknew.setAttribute("RejQtyBs", stkrow[lenstk].getAttribute("RejQtyBs"));
                        stknew.setAttribute("RwkQtyBs", stkrow[lenstk].getAttribute("RwkQtyBs"));
                        stknew.setAttribute("OkQty", stkrow[lenstk].getAttribute("OkQty"));
                        stknew.setAttribute("OkQtyBs", stkrow[lenstk].getAttribute("OkQtyBs"));

                        gps.insertRow(stknew);
                        lenstk--;
                    }
                    gps.executeQuery();
                }
                length--;
            }
            getMmGpItm().executeQuery();
        } else if (doctype.toString().equals("838")) //for External Entity
        {
            ViewObjectImpl purRetn = this.getMmMtlIssuItm();
            RowQualifier purRetnRQ = new RowQualifier(purRetn);
            purRetnRQ.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                     "' and WhId='" + whId + "' and DocId='" + docIdSrc + "'");
            Row[] frPurRetn = purRetn.getFilteredRows(purRetnRQ);
            Integer length = -1;
            if (frPurRetn.length > 0) {
                length = frPurRetn.length - 1;
            }
            while (length >= 0) {
                String itmid = frPurRetn[length].getAttribute("ItmId").toString();
                String srFlg = frPurRetn[length].getAttribute("SerializedFlg").toString();

                String itmUom = null;
                if (frPurRetn[length].getAttribute("ItmUom") != null)
                    itmUom = frPurRetn[length].getAttribute("ItmUom").toString();

                //Apply check If Item is already addded or not.
                RowQualifier rq = new RowQualifier(this.getMmGpItm());
                rq.setWhereClause("OrgId='" + orgId + "' and DocId='" + docId + "' and ItmId='" + itmid +
                                  "' and ItmUom='" + itmUom + "'");
                Row[] Itmrw = getMmGpItm().getFilteredRows(rq);
                if (Itmrw.length > 0) {
                } else {
                    String itmuomBs = itmUom;
                    if (frPurRetn[length].getAttribute("ItmUomBs") != null)
                        itmuomBs = frPurRetn[length].getAttribute("ItmUomBs").toString();

                    Number uomConvFctr = new Number(1);
                    if (frPurRetn[length].getAttribute("UomConvFctr") != null)
                        uomConvFctr = (Number) frPurRetn[length].getAttribute("UomConvFctr");
                    Number okQty = zero;
                    if (frPurRetn[length].getAttribute("IssuQty") != null)
                        okQty = (Number) frPurRetn[length].getAttribute("IssuQty");
                    Number okQtyBs = zero;
                    if (frPurRetn[length].getAttribute("IssuQtyBs") != null)
                        okQtyBs = (Number) frPurRetn[length].getAttribute("IssuQtyBs");


                    Row newrow = getMmGpItm().createRow();
                    newrow.setAttribute("CldId", cldId);
                    newrow.setAttribute("SlocId", slocId);
                    newrow.setAttribute("OrgId", orgId);
                    newrow.setAttribute("WhId", whId);
                    newrow.setAttribute("DocId", docId);
                    newrow.setAttribute("ItmId", itmid);
                    newrow.setAttribute("ItmUom", itmUom);
                    newrow.setAttribute("RwkQty", zero);
                    newrow.setAttribute("RejQty", zero);
                    newrow.setAttribute("ItmUomBs", itmuomBs);
                    newrow.setAttribute("UomConvFctr", uomConvFctr);
                    newrow.setAttribute("RwkQtyBs", zero);
                    newrow.setAttribute("RejQtyBs", zero);
                    newrow.setAttribute("TotRcptQty", zero);
                    newrow.setAttribute("TotRcptQtyBs", zero);
                    newrow.setAttribute("OkQty", okQty);
                    newrow.setAttribute("OkQtyBs", okQtyBs);
                    getMmGpItm().insertRow(newrow);

                    //add itm in stk
                   _log.info("+++++++++++++++++++ sr flg i s" + srFlg);
                    ViewObjectImpl prs = null;
                    if (srFlg.equalsIgnoreCase("N")) {
                        prs = this.getlovIssuLot();
                    } else if (srFlg.equalsIgnoreCase("Y")) {
                        prs = this.getLovIssuLotSr();
                    }
                    RowQualifier rqprs = new RowQualifier(prs);
                    rqprs.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                         "' and WhId='" + whId + "' and DocId='" + docIdSrc + "' and ItmId='" + itmid +
                                         "' and ItmUom='" + itmUom + "'");
                    Row[] stkrow = prs.getFilteredRows(rqprs);
                    Integer lenstk = -1;
                    if (stkrow.length > 0)
                        lenstk = stkrow.length - 1;
                    ViewObjectImpl gps = this.getMmGpItmStk();
                    while (lenstk >= 0) {
                        Row stknew = gps.createRow();
                        stknew.setAttribute("CldId", cldId);
                        stknew.setAttribute("SlocId", slocId);
                        stknew.setAttribute("OrgId", orgId);
                        stknew.setAttribute("WhId", whId);
                        stknew.setAttribute("DocId", docId);
                        stknew.setAttribute("ItmId", itmid);
                        stknew.setAttribute("ItmUom", itmUom);
                        stknew.setAttribute("LotId", stkrow[lenstk].getAttribute("LotId"));
                        if (srFlg.equalsIgnoreCase("N")) {
                            stknew.setAttribute("SrNo", "0");
                        } else if ("Y".equalsIgnoreCase(srFlg)) {
                            stknew.setAttribute("SrNo", stkrow[lenstk].getAttribute("SrNo"));
                        }
                        stknew.setAttribute("RejQty", zero);
                        stknew.setAttribute("RwkQty", zero);
                        stknew.setAttribute("ItmUomBs", itmuomBs);
                        stknew.setAttribute("UomConvFctr", uomConvFctr);
                        stknew.setAttribute("RejQtyBs", zero);
                        stknew.setAttribute("RwkQtyBs", zero);
                        stknew.setAttribute("OkQty", stkrow[lenstk].getAttribute("OkQty"));
                        stknew.setAttribute("OkQtyBs", stkrow[lenstk].getAttribute("OkQtyBs"));
                       _log.info("current itm in stock insertion is +" +
                                           stkrow[lenstk].getAttribute("OkQty"));
                        gps.insertRow(stknew);
                        lenstk--;
                    }
                    gps.executeQuery();
                }
                length--;
            }
            getMmGpItm().executeQuery();
        } else if (doctype.toString().equals("903")) //for TRANSFER ORDER
        {
            ViewObjectImpl purRetn = this.getMmMtlIssuItm();
            RowQualifier purRetnRQ = new RowQualifier(purRetn);
            purRetnRQ.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                     "' and WhId='" + whId + "' and DocId='" + docIdSrc + "'");
            Row[] frPurRetn = purRetn.getFilteredRows(purRetnRQ);
            Integer length = -1;
            if (frPurRetn.length > 0) {
                length = frPurRetn.length - 1;
            }
            while (length >= 0) {
                String itmid = frPurRetn[length].getAttribute("ItmId").toString();
                String srFlg = frPurRetn[length].getAttribute("SerializedFlg").toString();

                String itmUom = null;
                if (frPurRetn[length].getAttribute("ItmUom") != null)
                    itmUom = frPurRetn[length].getAttribute("ItmUom").toString();

                //Apply check If Item is already addded or not.
                RowQualifier rq = new RowQualifier(this.getMmGpItm());
                rq.setWhereClause("OrgId='" + orgId + "' and DocId='" + docId + "' and ItmId='" + itmid +
                                  "' and ItmUom='" + itmUom + "'");
                Row[] Itmrw = getMmGpItm().getFilteredRows(rq);
                if (Itmrw.length > 0) {
                } else {
                    String itmuomBs = itmUom;
                    if (frPurRetn[length].getAttribute("ItmUomBs") != null)
                        itmuomBs = frPurRetn[length].getAttribute("ItmUomBs").toString();

                    Number uomConvFctr = new Number(1);
                    if (frPurRetn[length].getAttribute("UomConvFctr") != null)
                        uomConvFctr = (Number) frPurRetn[length].getAttribute("UomConvFctr");
                    Number okQty = zero;
                    if (frPurRetn[length].getAttribute("IssuQty") != null)
                        okQty = (Number) frPurRetn[length].getAttribute("IssuQty");
                    Number okQtyBs = zero;
                    if (frPurRetn[length].getAttribute("IssuQtyBs") != null)
                        okQtyBs = (Number) frPurRetn[length].getAttribute("IssuQtyBs");


                    Row newrow = getMmGpItm().createRow();
                    newrow.setAttribute("CldId", cldId);
                    newrow.setAttribute("SlocId", slocId);
                    newrow.setAttribute("OrgId", orgId);
                    newrow.setAttribute("WhId", whId);
                    newrow.setAttribute("DocId", docId);
                    newrow.setAttribute("ItmId", itmid);
                    newrow.setAttribute("ItmUom", itmUom);
                    newrow.setAttribute("RwkQty", zero);
                    newrow.setAttribute("RejQty", zero);
                    newrow.setAttribute("ItmUomBs", itmuomBs);
                    newrow.setAttribute("UomConvFctr", uomConvFctr);
                    newrow.setAttribute("RwkQtyBs", zero);
                    newrow.setAttribute("RejQtyBs", zero);
                    newrow.setAttribute("TotRcptQty", okQty);
                    newrow.setAttribute("TotRcptQtyBs", okQtyBs);
                    newrow.setAttribute("OkQty", okQty);
                    newrow.setAttribute("OkQtyBs", okQtyBs);
                    getMmGpItm().insertRow(newrow);

                    //add itm in stk
                    _log.info("+++++++++++++++++++ sr flg i s" + srFlg);
                    ViewObjectImpl prs = null;
                    if (srFlg.equalsIgnoreCase("N")) {
                        prs = this.getlovIssuLot();
                    } else if (srFlg.equalsIgnoreCase("Y")) {
                        prs = this.getLovIssuLotSr();
                    }
                    RowQualifier rqprs = new RowQualifier(prs);
                    rqprs.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + orgId +
                                         "' and WhId='" + whId + "' and DocId='" + docIdSrc + "' and ItmId='" + itmid +
                                         "' and ItmUom='" + itmUom + "'");
                    Row[] stkrow = prs.getFilteredRows(rqprs);
                    Integer lenstk = -1;
                    if (stkrow.length > 0)
                        lenstk = stkrow.length - 1;
                    ViewObjectImpl gps = this.getMmGpItmStk();
                    while (lenstk >= 0) {
                        Row stknew = gps.createRow();
                        stknew.setAttribute("CldId", cldId);
                        stknew.setAttribute("SlocId", slocId);
                        stknew.setAttribute("OrgId", orgId);
                        stknew.setAttribute("WhId", whId);
                        stknew.setAttribute("DocId", docId);
                        stknew.setAttribute("ItmId", itmid);
                        stknew.setAttribute("ItmUom", itmUom);
                        stknew.setAttribute("LotId", stkrow[lenstk].getAttribute("LotId"));
                        if (srFlg.equalsIgnoreCase("N")) {
                            stknew.setAttribute("SrNo", "0");
                        } else if ("Y".equalsIgnoreCase(srFlg)) {
                            stknew.setAttribute("SrNo", stkrow[lenstk].getAttribute("SrNo"));
                        }
                        stknew.setAttribute("RejQty", zero);
                        stknew.setAttribute("RwkQty", zero);
                        stknew.setAttribute("ItmUomBs", itmuomBs);
                        stknew.setAttribute("UomConvFctr", uomConvFctr);
                        stknew.setAttribute("RejQtyBs", zero);
                        stknew.setAttribute("RwkQtyBs", zero);
                        stknew.setAttribute("OkQty", stkrow[lenstk].getAttribute("OkQty"));
                        stknew.setAttribute("OkQtyBs", stkrow[lenstk].getAttribute("OkQtyBs"));
                      _log.info("current itm in stock insertion is +" +
                                           stkrow[lenstk].getAttribute("OkQty"));
                        gps.insertRow(stknew);
                        lenstk--;
                    }
                    gps.executeQuery();
                }
                length--;
            }
            getMmGpItm().executeQuery();
        }
    }


    public String updateInStat() {
        Integer count = 0;
        Integer DocType = new Integer(0);
        if (getMmGp().getCurrentRow().getAttribute("DocTypeSrc") != null)
            DocType = (Integer) getMmGp().getCurrentRow().getAttribute("DocTypeSrc");

       _log.info("now doc type src is " + DocType);
        RowSetIterator rsi = getMmGpItm().createRowSetIterator(null);
        if (DocType == 796) {
            while (rsi.hasNext()) {
                Row r = rsi.next();
                if (r.getAttribute("OkQty") != null && r.getAttribute("TotRcptQty") != null) {
                    Number rew = (Number) r.getAttribute("OkQty");
                    Number totret = (Number) r.getAttribute("TotRcptQty");
                 //  _log.info(r.getAttribute("OkQty") + " comparison in quantity is " + rew.compareTo(totret));
                    if (rew.compareTo(totret) != 0) {
                        return "N";
                    }
                    //new code to update return flag
                    if (rew.compareTo(new Number(0)) == 1)
                        count++;
                }
            }
        } else {
            while (rsi.hasNext()) {
                Row r = rsi.next();
                if (r.getAttribute("RwkQty") != null && r.getAttribute("TotRcptQty") != null) {
                    Number rew = (Number) r.getAttribute("RwkQty");
                    Number totret = (Number) r.getAttribute("TotRcptQty");
                    if (rew.compareTo(totret) != 0) {
                        return "N";
                    }
                    //new code to update return flag
                    if (rew.compareTo(new Number(0)) == 1)
                        count++;
                }
            }
        }
        if (count.compareTo(new Integer(0)) == 1) {
            this.getMmGp().getCurrentRow().setAttribute("RetFlg", "Y");

            this.getMmGp().getCurrentRow().setAttribute("GpInStat", "Y");
            this.getMmGp().getCurrentRow().setAttribute("GpInDt", new Timestamp(System.currentTimeMillis()));
        }
        return "Y";
    }

    public String ChkInStat() {
        if (getMmGp().getCurrentRow().getAttribute("GpInStat") != null)
            return this.getMmGp().getCurrentRow().getAttribute("GpInStat").toString();
        else
            return "N";
    }

    /**
     * Container's getter for MmPurRetnItm.
     * @return MmPurRetnItm
     */
    public MmPurRetnItmVOImpl getMmPurRetnItm() {
        return (MmPurRetnItmVOImpl) findViewObject("MmPurRetnItm");
    }

    /**
     * Container's getter for MmRmdaItm.
     * @return MmRmdaItm
     */
    public MmRmdaItmVOImpl getMmRmdaItm() {
        return (MmRmdaItmVOImpl) findViewObject("MmRmdaItm");
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            MmGatePassAMImpl am = (MmGatePassAMImpl) resolvElDC("MmGatePassAMDataControl");
            st = am.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }
    }


    public void GenerateFyId() {
        String CldId = (String) this.getMmGp().getCurrentRow().getAttribute("CldId");
        String OrgId = (String) this.getMmGp().getCurrentRow().getAttribute("OrgId");
        Timestamp dt = (Timestamp) this.getMmGp().getCurrentRow().getAttribute("GpDt");
        Integer fyid = (Integer) (callStoredFunction(Types.INTEGER, "APP.GET_ORG_FY_ID (?,?,?)", new Object[] {
                                                     CldId, OrgId, dt
        }));
        this.getMmGp().getCurrentRow().setAttribute("FyId", fyid);
         _log.info("fyid=" + fyid);
    }


    public void generateGPNo() {
        if (getMmGp().getCurrentRow().getAttribute("GpNo") == null) {
            String cldId = this.getMmGp().getCurrentRow().getAttribute("CldId").toString();
            Integer slocId = Integer.parseInt(this.getMmGp().getCurrentRow().getAttribute("SlocId").toString());
            String orgId = (String) this.getMmGp().getCurrentRow().getAttribute("OrgId");
            String whId = (String) this.getMmGp().getCurrentRow().getAttribute("WhId");
            Integer fyId = Integer.parseInt(this.getMmGp().getCurrentRow().getAttribute("FyId").toString());
            String gpno = (String) (callStoredFunction(Types.VARCHAR, "FN_MM_GEN_ID (?,?,?,?,?,?)", new Object[] {
                                                       slocId, cldId, orgId, "MM$GP", whId, fyId
            }));
            this.getMmGp().getCurrentRow().setAttribute("GpNo", gpno);
             _log.info("gp no=" + gpno);
        }
        _log.info("gp no is not null");
    }

    public String ChkDupli() {
       _log.info("amimpl dupli");
        this.getMmGp1().executeQuery();
        Row gpR = getMmGp().getCurrentRow();
        String docIdSrc = (String) gpR.getAttribute("DocIdSrc");
        _log.info("DocId to Check=" + docIdSrc);
        RowSetIterator rsi = getMmGp1().getRowSetIterator();
        while (rsi.hasNext()) {
            Row r = rsi.next();
            //   _log.info("DocId in ITR=" + r.getAttribute("DocIdSrc"));
            if (r.getKey().toString().equals(gpR.getKey().toString())) {
            } else {
                if (r.getAttribute("DocIdSrc").toString().equals(docIdSrc)) {
                   //  _log.info("duplicate row");
                    return "Y";
                }
            }
        }
        rsi.closeRowSetIterator();
        return "N";
    }

    public void updateTotRetQty(Number qty) {
        if (qty != null) {
            Number zero = new Number(0);
            Number totretQty = zero;
            Row currItm = getMmGpItm().getCurrentRow();
            if (currItm.getAttribute("TotRcptQty") != null)
                totretQty = (Number) currItm.getAttribute("TotRcptQty");

            currItm.setAttribute("TotRcptQty", totretQty.add(qty));
            if (qty.compareTo(zero) > 0) {
                ViewObjectImpl gpItmRcpt = this.getMmGpItmRcpt();
                Row r = gpItmRcpt.createRow();
                r.setAttribute("CldId", currItm.getAttribute("CldId"));
                r.setAttribute("SlocId", currItm.getAttribute("SlocId"));
                r.setAttribute("OrgId", currItm.getAttribute("OrgId"));
                r.setAttribute("WhId", currItm.getAttribute("WhId"));
                r.setAttribute("DocId", currItm.getAttribute("DocId"));
                r.setAttribute("ItmId", currItm.getAttribute("ItmId"));
                r.setAttribute("ItmUom", currItm.getAttribute("ItmUom"));
                r.setAttribute("RcptQty", qty);
                r.setAttribute("ItmUomBs", currItm.getAttribute("ItmUomBs"));
                r.setAttribute("SrNo", currItm.getAttribute("TransSrNoVis"));
                Number convfctr = new Number(1);
                if (currItm.getAttribute("UomConvFctr") != null)
                    convfctr = (Number) currItm.getAttribute("UomConvFctr");
                r.setAttribute("UomConvFctr", convfctr);
                r.setAttribute("RcptQtyBs", qty.multiply(convfctr));
                Integer usr = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
                r.setAttribute("UsrIdRcpt", usr);
                r.setAttribute("RcptDt", new Timestamp(System.currentTimeMillis()));
                gpItmRcpt.insertRow(r);
                gpItmRcpt.executeQuery();
            }

        }
    }

    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public String CheckQty(Number qty) {
        Number totretQty = new Number(0);
        Number rwk = new Number(0);
        if (qty != null) {
            Row currGp = this.getMmGp().getCurrentRow();
            if (currGp != null) {
                Integer gpSrcType = Integer.parseInt(currGp.getAttribute("DocTypeSrc").toString());
                if (getMmGpItm().getCurrentRow().getAttribute("TotRcptQty") != null) {
                    totretQty = (Number) getMmGpItm().getCurrentRow().getAttribute("TotRcptQty");
                }
                /**code change becoz of accepting ok quanity in case of pack list*/

                if (gpSrcType.compareTo(796) == 0 || gpSrcType.compareTo(838) == 0) {
                    rwk = (Number) getMmGpItm().getCurrentRow().getAttribute("OkQty");
                } else {
                    rwk = (Number) getMmGpItm().getCurrentRow().getAttribute("RwkQty");
                }

                Number tot = totretQty.add(qty);

                _log.info(" ------------------ values is total and rwrkbl " + tot + " reworkable is " + rwk +
                                   " total receipt is " + totretQty);

                if (tot.compareTo(rwk) > 0)
                    return "N";
                else
                    return "Y";
            }
        }
        return "Y";
    }

    public void ClearHeader() {
        Row gprow = getMmGp().getCurrentRow();
        gprow.setAttribute("EoId", null);
        gprow.setAttribute("TransDocNoSrc", null);
        gprow.setAttribute("TransAddsDesc", null);
        gprow.setAttribute("DocIdSrc", null);
        gprow.setAttribute("AddsIdEo", null);
    }

    public void RemoveItmRows() {
        Row gprow = getMmGp().getCurrentRow();
        if (gprow.getAttribute("GpNo") != null) {
            /*   String cld=gprow.getAttribute("CldId").toString();
            Integer sloc=Integer.parseInt(gprow.getAttribute("SlocId").toString());
            String org=gprow.getAttribute("OrgId").toString();
            String wh=gprow.getAttribute("WhId").toString();
            String doc=gprow.getAttribute("DocId").toString(); */
            RowSetIterator rsi = getMmGpItm().createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row r = rsi.next();
                r.remove();
            }
            rsi.closeRowSetIterator();
            getMmGpItm().executeQuery();
        }
    }

    /**
     * Container's getter for MmGpItmRcpt.
     * @return MmGpItmRcpt
     */
    public ViewObjectImpl getMmGpItmRcpt() {
        return (ViewObjectImpl) findViewObject("MmGpItmRcpt");
    }

    /**
     * Container's getter for MmGpItmToRcptVL1.
     * @return MmGpItmToRcptVL1
     */
    public ViewLinkImpl getMmGpItmToRcptVL1() {
        return (ViewLinkImpl) findViewLink("MmGpItmToRcptVL1");
    }

    public void RemoveItmRcptRows() {
        Row gprow = getMmGp().getCurrentRow();
        if (gprow.getAttribute("GpNo") != null) {
            RowSetIterator rqstk = getMmGpItmStk1().createRowSetIterator(null);
            while (rqstk.hasNext()) {
                Row Stkrow = rqstk.next();
                Stkrow.remove();
            }
            rqstk.closeRowSetIterator();
            getMmGpItmStk1().executeQuery();
            getMmGpItmStk().executeQuery();
            RowSetIterator rsi = getMmGpItmRcpt().createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row r = rsi.next();
                r.remove();
            }
            rsi.closeRowSetIterator();
            getMmGpItmRcpt().executeQuery();
        }
    }

    public void DelItmRecpt() {
        Number zero = new Number(0);
        Row r = getMmGpItmRcpt().getCurrentRow();
        Number retqty = zero;
        if (r.getAttribute("RcptQty") != null)
            retqty = (Number) r.getAttribute("RcptQty");
        r.remove();
        Row itmrow = getMmGpItm().getCurrentRow();
        Number totrcpt = zero;
        if (itmrow.getAttribute("TotRcptQty") != null)
            totrcpt = (Number) itmrow.getAttribute("TotRcptQty");
        Number convfctr = new Number(1);
        if (itmrow.getAttribute("UomConvFctr") != null)
            convfctr = (Number) itmrow.getAttribute("UomConvFctr");
        //  itmrow.setAttribute("RcptQty",rcptqty.add(retqty));
        itmrow.setAttribute("TotRcptQty", totrcpt.subtract(retqty));
        itmrow.setAttribute("TotRcptQtyBs", (totrcpt.subtract(retqty)).multiply(convfctr));
    }

    public void updateQty(Number diff) {
        Number zero = new Number(0);
        Row itmrow = getMmGpItm().getCurrentRow();
        Number totrcpt = zero;
        if (itmrow.getAttribute("TotRcptQty") != null)
            totrcpt = (Number) itmrow.getAttribute("TotRcptQty");
        Number convfctr = new Number(1);
        if (itmrow.getAttribute("UomConvFctr") != null)
            convfctr = (Number) itmrow.getAttribute("UomConvFctr");
        itmrow.setAttribute("TotRcptQty", totrcpt.add(diff));
        itmrow.setAttribute("TotRcptQtyBs", (totrcpt.subtract(diff)).multiply(convfctr));
    }

    /**
     * Container's getter for MmGpItmStk.
     * @return MmGpItmStk
     */
    public ViewObjectImpl getMmGpItmStk() {
        return (ViewObjectImpl) findViewObject("MmGpItmStk");
    }

    /**
     * Container's getter for MmGpItmToStkVL1.
     * @return MmGpItmToStkVL1
     */
    public ViewLinkImpl getMmGpItmToStkVL1() {
        return (ViewLinkImpl) findViewLink("MmGpItmToStkVL1");
    }

    /**
     * Container's getter for LovSrNo.
     * @return LovSrNo
     */
    public ViewObjectImpl getLovSrNo() {
        return (ViewObjectImpl) findViewObject("LovSrNo");
    }

    public String ChkDupliSrno(String srno) {
        String Serial = srno;
        ViewObjectImpl itmvo = this.getMmGpItm();
        String cld = (String) itmvo.getCurrentRow().getAttribute("CldId");
        Integer sloc = Integer.parseInt(itmvo.getCurrentRow().getAttribute("SlocId").toString());
        String org = (String) itmvo.getCurrentRow().getAttribute("OrgId");
        String wh = (String) itmvo.getCurrentRow().getAttribute("WhId");
        String doc = (String) itmvo.getCurrentRow().getAttribute("DocId");
        String itmid = (String) itmvo.getCurrentRow().getAttribute("ItmId");
        String itmuom = (String) itmvo.getCurrentRow().getAttribute("ItmUom");
        ViewObjectImpl gpitmstk = this.getMmGpItmRcpt();
        RowQualifier rqsr = new RowQualifier(gpitmstk);
        rqsr.setWhereClause("CldId='" + cld + "' and SlocId=" + sloc + " and OrgId='" + org + "' and WhId='" + wh +
                            "' and DocId='" + doc + "' and ItmId='" + itmid + "' and ItmUom='" + itmuom +
                            "' and SrNo='" + Serial + "'");
        Row[] frgpstk = gpitmstk.getFilteredRows(rqsr);
        if (frgpstk.length > 0)
            return "Y";
        else
            return "N";
    }

    public String ChkIfNewSrno(String srno) {
        String Serial = srno;
        ViewObjectImpl itmvo = this.getMmGpItm();
        String cld = (String) itmvo.getCurrentRow().getAttribute("CldId");
        Integer sloc = Integer.parseInt(itmvo.getCurrentRow().getAttribute("SlocId").toString());
        String org = (String) itmvo.getCurrentRow().getAttribute("OrgId");
        String wh = (String) itmvo.getCurrentRow().getAttribute("WhId");
        String doc = (String) itmvo.getCurrentRow().getAttribute("DocId");
        String itmid = (String) itmvo.getCurrentRow().getAttribute("ItmId");
        String itmuom = (String) itmvo.getCurrentRow().getAttribute("ItmUom");
        ViewObjectImpl gpitmstk = this.getMmGpItmStk();
        RowQualifier rqsr = new RowQualifier(gpitmstk);
        rqsr.setWhereClause("CldId='" + cld + "' and SlocId=" + sloc + " and OrgId='" + org + "' and WhId='" + wh +
                            "' and DocId='" + doc + "' and ItmId='" + itmid + "' and ItmUom='" + itmuom +
                            "' and SrNo='" + Serial + "'");
        Row[] frgpstk = gpitmstk.getFilteredRows(rqsr);
        if (frgpstk.length > 0)
            return "N";
        else
            return "Y";
    }


    /**
     * Container's getter for MmPurRetnItmStk.
     * @return MmPurRetnItmStk
     */
    public ViewObjectImpl getMmPurRetnItmStk() {
        return (ViewObjectImpl) findViewObject("MmPurRetnItmStk");
    }


    /**
     * Container's getter for MmGpItmStk1.
     * @return MmGpItmStk1
     */
    public ViewObjectImpl getMmGpItmStk1() {
        return (ViewObjectImpl) findViewObject("MmGpItmStk1");
    }

    /**
     * Container's getter for MmGpToStkVL1.
     * @return MmGpToStkVL1
     */
    public ViewLinkImpl getMmGpToStkVL1() {
        return (ViewLinkImpl) findViewLink("MmGpToStkVL1");
    }

    /**
     * Container's getter for SearchGp.
     * @return SearchGp
     */
    public SearchGpVOImpl getSearchGp() {
        return (SearchGpVOImpl) findViewObject("SearchGp");
    }

    /**
     * Container's getter for TransSearchComp.
     * @return TransSearchComp
     */
    public TransSearchCompVOImpl getTransSearchComp() {
        return (TransSearchCompVOImpl) findViewObject("TransSearchComp");
    }

    public void SearchGP() {
        // System.out.println("In search..");
        ViewObjectImpl searchvo = this.getSearchGp();
        String gpno = null;
        Integer eoid = null;
        String whid = null;
        Timestamp gpdtfrm = null;
        Timestamp gpdtto = null;
        Integer srcdoc = null;
        String itmid = null;
        if (getTransSearchComp().getCurrentRow().getAttribute("TransGpNo") != null &&
            (!getTransSearchComp().getCurrentRow().getAttribute("TransGpNo").toString().equals(""))) {
            gpno = getTransSearchComp().getCurrentRow().getAttribute("TransGpNo").toString();
            searchvo.setNamedWhereClauseParam("gpNoBind", gpno);
        } else
            searchvo.setNamedWhereClauseParam("gpNoBind", null);
        //     System.out.println("Pr no="+prno);

        if (getTransSearchComp().getCurrentRow().getAttribute("TransWarehouse") != null &&
            (!getTransSearchComp().getCurrentRow().getAttribute("TransWarehouse").toString().equals(""))) {
            whid = getTransSearchComp().getCurrentRow().getAttribute("TransWarehouse").toString();
            searchvo.setNamedWhereClauseParam("whIdBind", whid);
        } else
            searchvo.setNamedWhereClauseParam("whIdBind", null);
        //  System.out.println("wh="+whid);

        if (getTransSearchComp().getCurrentRow().getAttribute("TransEoId") != null &&
            (!getTransSearchComp().getCurrentRow().getAttribute("TransEoId").toString().equals(""))) {
            eoid = Integer.parseInt(getTransSearchComp().getCurrentRow().getAttribute("TransEoId").toString());
            searchvo.setNamedWhereClauseParam("EoIdBind", eoid);
        } else
            searchvo.setNamedWhereClauseParam("EoIdBind", null);
       _log.info("eo=" + eoid);

        if (getTransSearchComp().getCurrentRow().getAttribute("TransFromDate") != null) {
            gpdtfrm = new Timestamp(getTransSearchComp().getCurrentRow().getAttribute("TransFromDate").toString());
            searchvo.setNamedWhereClauseParam("fromDateBind", gpdtfrm);
        } else
            searchvo.setNamedWhereClauseParam("fromDateBind", null);
        //   System.out.println("dt frm="+prdtfrm);

        if (getTransSearchComp().getCurrentRow().getAttribute("TransToDate") != null) {
            gpdtto = new Timestamp(getTransSearchComp().getCurrentRow().getAttribute("TransToDate").toString());
            searchvo.setNamedWhereClauseParam("toDateBind", gpdtto);
        } else
            searchvo.setNamedWhereClauseParam("toDateBind", null);
        // System.out.println("dt to="+prdtto);

        if (getTransSearchComp().getCurrentRow().getAttribute("TransDocType") != null &&
            !(getTransSearchComp().getCurrentRow().getAttribute("TransDocType").toString().equals(""))) {
            srcdoc = Integer.parseInt(getTransSearchComp().getCurrentRow().getAttribute("TransDocType").toString());
            searchvo.setNamedWhereClauseParam("srcDocTypeBind", srcdoc);
        } else
            searchvo.setNamedWhereClauseParam("srcDocTypeBind", null);
        //  System.out.println("status="+prst);
        if (getTransSearchComp().getCurrentRow().getAttribute("TransItmId") != null &&
            !(getTransSearchComp().getCurrentRow().getAttribute("TransItmId").toString().equals(""))) {
            itmid = (getTransSearchComp().getCurrentRow().getAttribute("TransItmId").toString());
            searchvo.setNamedWhereClauseParam("itmIdBind", itmid);
        } else
            searchvo.setNamedWhereClauseParam("itmIdBind", null);

        searchvo.executeQuery();

    }

    public void ResetSearch() {
        ViewObjectImpl searchvo = this.getSearchGp();
        getTransSearchComp().getCurrentRow().setAttribute("TransGpNo", null);
        getTransSearchComp().getCurrentRow().setAttribute("TransWarehouse", null);
        getTransSearchComp().getCurrentRow().setAttribute("TransEoId", null);
        getTransSearchComp().getCurrentRow().setAttribute("TransFromDate", null);
        getTransSearchComp().getCurrentRow().setAttribute("TransToDate", null);
        getTransSearchComp().getCurrentRow().setAttribute("TransDocType", null);
        getTransSearchComp().getCurrentRow().setAttribute("TransItmId", null);
        getTransSearchComp().getCurrentRow().setAttribute("TransSupplier", null);
        getTransSearchComp().getCurrentRow().setAttribute("TransItem", null);
        searchvo.setNamedWhereClauseParam("gpNoBind", null);
        searchvo.setNamedWhereClauseParam("whIdBind", null);
        searchvo.setNamedWhereClauseParam("EoIdBind", null);
        searchvo.setNamedWhereClauseParam("fromDateBind", null);
        searchvo.setNamedWhereClauseParam("toDateBind", null);
        searchvo.setNamedWhereClauseParam("srcDocTypeBind", null);
        searchvo.setNamedWhereClauseParam("itmIdBind", null);
        searchvo.executeQuery();
    }

    public void GatePassViewQuery() {
        //for Create Page
        ViewObjectImpl vo = this.getMmGp();
        ViewObjectImpl servo = this.getSearchGp();
        Row currRow = servo.getCurrentRow();
        ViewCriteria vc = getMmGp().getViewCriteria("MmGpVOCriteria");
        vo.applyViewCriteria(vc);
        if (currRow != null) {
            vo.setNamedWhereClauseParam("cld", currRow.getAttribute("CldId").toString());
            vo.setNamedWhereClauseParam("sloc", Integer.parseInt(currRow.getAttribute("SlocId").toString()));
            vo.setNamedWhereClauseParam("org", currRow.getAttribute("OrgId").toString());
            vo.setNamedWhereClauseParam("doc", currRow.getAttribute("DocId").toString());
            vo.setNamedWhereClauseParam("wh", currRow.getAttribute("WhId").toString());
            vo.executeQuery();
        }
    }

    public void setsearchValues() {
        //for Search Page
        ViewObjectImpl searchvo = this.getSearchGp();
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        this.getTransSearchComp().getCurrentRow().setAttribute("TransCldId", CldId);
        this.getTransSearchComp().getCurrentRow().setAttribute("TransOrgId", OrgId);
        this.getTransSearchComp().getCurrentRow().setAttribute("TransSlocId", SlocId);
        this.getTransSearchComp().getCurrentRow().setAttribute("TransHoOrgId", HoOrgId);
        searchvo.setNamedWhereClauseParam("cldIdBind", CldId);
        searchvo.setNamedWhereClauseParam("slocBind", SlocId);
        searchvo.setNamedWhereClauseParam("orgBind", OrgId);
        searchvo.executeQuery();
    }

    /**
     * Container's getter for MmGp1.
     * @return MmGp1
     */
    public MmGpVOImpl getMmGp1() {
        return (MmGpVOImpl) findViewObject("MmGp1");
    }

    public void ExecuteVo() {
        this.getMmGpItmStk().executeQuery();
    }

    public void ChkAndUpdtOutStatDt() {
        String out = "N";
        Timestamp outDt = null;
        if (this.getMmGp().getCurrentRow().getAttribute("GpOutStat") != null)
            out = (String) this.getMmGp().getCurrentRow().getAttribute("GpOutStat");

        if (this.getMmGp().getCurrentRow().getAttribute("GpOutDt") != null)
            outDt = (Timestamp) this.getMmGp().getCurrentRow().getAttribute("GpOutDt");
        else
            outDt = new Timestamp(System.currentTimeMillis());

        if (out.equals("Y")) {
            this.getMmGp().getCurrentRow().setAttribute("GpOutDt", outDt);
        }

    }

    /**
     * Container's getter for LovPackNo1.
     * @return LovPackNo1
     */
    public ViewObjectImpl getLovPackNo() {
        return (ViewObjectImpl) findViewObject("LovPackNo");
    }

    /**
     * Container's getter for LovCustomer1.
     * @return LovCustomer1
     */
    public ViewObjectImpl getLovCustomer() {
        return (ViewObjectImpl) findViewObject("LovCustomer");
    }

    /**
     * Container's getter for TransRcptSrch1.
     * @return TransRcptSrch1
     */
    public ViewObjectImpl getTransRcptSrch() {
        return (ViewObjectImpl) findViewObject("TransRcptSrch");
    }

    /**
     * Container's getter for RcptGpItm1.
     * @return RcptGpItm1
     */
    public RcptGpItmVOImpl getRcptGpItm() {
        return (RcptGpItmVOImpl) findViewObject("RcptGpItm");
    }

    public String insertAllRcptGatePass() {
        String OrgId = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString();
        Integer SlocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String CldId = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString();
        String HoOrgId = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString();
        String UsrId = resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString();
        Row currGp = this.getTransRcptSrch().getCurrentRow();
        ViewObjectImpl rcptItmvo = this.getRcptGpItm();

        if (currGp != null) {
            cancelGatePass();
            _log.info("--------------rcpt qty--- " + rcptItmvo.getCurrentRow().getAttribute("TransRcptQty") + " flag " +
                      rcptItmvo.getCurrentRow().getAttribute("TransRcptFlg"));
            String temp = "Y";
            RowQualifier rq = new RowQualifier(rcptItmvo);
            rq.setWhereClause("TransRcptQty > " + new Number(0) + " and TransRcptFlg='N'");
            Row[] rr = rcptItmvo.getFilteredRows(rq);
            Integer count = 0;
            _log.info("---------rr length--------- " + rr.length + " " + rq.getExprStr() + " vo range " +
                      rcptItmvo.getRowCount());
            if (rr.length > 0) {
                for (Row r : rr) {
                    Integer gpOp = (Integer) (callStoredFunction(Types.INTEGER, "MM.FN_GP_RCPT_INSERT (?,?,?,?,?,?,?)", new Object[] {
                                                                 CldId, SlocId, OrgId, r.getAttribute("DocId"),
                                                                 r.getAttribute("ItmId"),
                                                                 r.getAttribute("TransRcptQty"), UsrId
                    }));
                    _log.info("---getting entered rcpt qty--- " + r.getAttribute("TransRcptQty") + " - " +
                              r.getAttribute("ItmId") + " " + r.getAttribute("DocId"));

                    _log.info(" previous function output " + gpOp);

                }
            }

            //     _log.info("doc id id rcpt qty is "+" parameters "+CldId+" sloc "+SlocId+" orgid "+OrgId+" wh id "+r.getAttribute("WhId")+"  eoid is "+r.getAttribute("EoId")+" usr id "+UsrId);
            if (currGp.getAttribute("TransEoId") != null && currGp.getAttribute("TransWhNm") != null) {
                this.getDBTransaction().postChanges();
                Integer insrtrcptbulk =
                    (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_RCPT_INS_GP_BULK (?,?,?,?,?,?)", new Object[] {
                                                  CldId, SlocId, OrgId, currGp.getAttribute("TransWhNm"),
                                                  currGp.getAttribute("TransEoId"), UsrId
                }));
                //rcptItmvo.executeQuery();
                //System.out.println("total no. of insert" + count++ + " curent update function value is " + insrtrcptbulk);

                _log.info("temp value is " + temp);
               _log.info("data commit successfully");
                this.getDBTransaction().commit();
                FacesMessage message = new FacesMessage("Record saved successfully");
                message.setSeverity(FacesMessage.SEVERITY_INFO);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
                this.getTransRcptSrch().executeQuery();
                rcptItmvo.setNamedWhereClauseParam("bindCldId", "-1");
                rcptItmvo.setNamedWhereClauseParam("bindEoId", "-1");
                rcptItmvo.setNamedWhereClauseParam("bindOrgId", "-1");
                rcptItmvo.setNamedWhereClauseParam("bindSlocId", "-1");
                rcptItmvo.setNamedWhereClauseParam("bindWhid", "-1");
                rcptItmvo.executeQuery();
                //reset();//for reset all the data on save button
                return "N";
            }
        }
        return null;
    }

    public String srchRcptGp() {
        // ViewObjectImpl rcptSrchvo = this.getTransRcptSrch();
        Row currGp = this.getTransRcptSrch().getCurrentRow();
        ViewObjectImpl rcptItmvo = this.getRcptGpItm();

        if (currGp != null) {
            rcptItmvo.setNamedWhereClauseParam("bindCldId", currGp.getAttribute("TransCldId"));
            rcptItmvo.setNamedWhereClauseParam("bindEoId", currGp.getAttribute("TransEoId"));
            rcptItmvo.setNamedWhereClauseParam("bindOrgId", currGp.getAttribute("TransOrgId"));
            rcptItmvo.setNamedWhereClauseParam("bindSlocId", currGp.getAttribute("TransSlocId"));
            rcptItmvo.setNamedWhereClauseParam("bindWhid", currGp.getAttribute("TransWhNm"));
            rcptItmvo.setNamedWhereClauseParam("BindItmId", currGp.getAttribute("TransItmId"));
            rcptItmvo.executeQuery();

        }
        return null;
    }

    public void filterRcptData() {
        ViewObjectImpl rcptItmvo = this.getRcptGpItm();
        rcptItmvo.setNamedWhereClauseParam("bindCldId", "-1");
        rcptItmvo.setNamedWhereClauseParam("bindEoId", 0);
        rcptItmvo.setNamedWhereClauseParam("bindOrgId", "-1");
        rcptItmvo.setNamedWhereClauseParam("bindSlocId", 0);
        rcptItmvo.setNamedWhereClauseParam("bindWhid", "-1");
        rcptItmvo.executeQuery();

    }

    public void cancelGatePass() {
        ViewObjectImpl rcptvo = this.getRcptGpItm();
        Row currGp = this.getTransRcptSrch().getCurrentRow();

        RowSetIterator rwitw = rcptvo.createRowSetIterator(null);

        Row[] rr = rwitw.getFilteredRows("CldId", currGp.getAttribute("TransCldId"));
         _log.info("total no. of rows in cancel is " + rr.length);
        Integer count = 1;
        for (Row r : rr) {
            if (r.getAttribute("TransRcptFlg") != null) {
                if ("Y".equalsIgnoreCase(r.getAttribute("TransRcptFlg").toString())) {

                    Integer insrtrcptbulk =
                        (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_CNCL_FLG_FRM_GP (?,?,?,?,?,?,?,?)", new Object[] {
                                                      r.getAttribute("CldId"), r.getAttribute("SlocId"),
                                                      r.getAttribute("OrgId"), r.getAttribute("WhId"),
                                                      r.getAttribute("DocId"), r.getAttribute("ItmId"),
                                                      r.getAttribute("ItmUom"), "P"
                    }));
               //     _log.info("mmupdated rcpt called ------------------------- " + count++);

                } //DocId
            }
        }
        // rcptvo.executeQuery();

    }


    /**
     * Container's getter for LovMtlIssu1.
     * @return LovMtlIssu1
     */
    public ViewObjectImpl getLovMtlIssu1() {
        return (ViewObjectImpl) findViewObject("LovMtlIssu1");
    }

    /**
     * Container's getter for MmMtlIssuItm1.
     * @return MmMtlIssuItm1
     */
    public ViewObjectImpl getMmMtlIssuItm() {
        return (ViewObjectImpl) findViewObject("MmMtlIssuItm");
    }

    /**
     * Container's getter for lovIssuLot1.
     * @return lovIssuLot1
     */
    public ViewObjectImpl getlovIssuLot() {
        return (ViewObjectImpl) findViewObject("lovIssuLot");
    }

    /**
     * Container's getter for LovIssuLotSr1.
     * @return LovIssuLotSr1
     */
    public ViewObjectImpl getLovIssuLotSr() {
        return (ViewObjectImpl) findViewObject("LovIssuLotSr");
    }

    public String cancelGatepassAll() {

        Row currGp = this.getMmGp().getCurrentRow();
        if (currGp != null) {
            _log.info("parameters are " + currGp.getAttribute("CldId") + " " + currGp.getAttribute("SlocId") +
                               "  " + currGp.getAttribute("OrgId") + " " + currGp.getAttribute("WhId") + " " +
                               currGp.getAttribute("DocId"));
            Integer insrtrcptbulk =
                (Integer) (callStoredFunction(Types.INTEGER, "MM.MM_UPDT_CNCL_FLG_FRM_GP (?,?,?,?,?,?,?,?)", new Object[] {
                                              currGp.getAttribute("CldId"), currGp.getAttribute("SlocId"),
                                              currGp.getAttribute("OrgId"), currGp.getAttribute("WhId"),
                                              currGp.getAttribute("DocId"), null, null, "F"
            }));
            _log.info("insrtrcpt  " + insrtrcptbulk);

        }
        /*  FacesMessage message = new FacesMessage("Gate Pass Cancel successfully");
        message.setSeverity(FacesMessage.SEVERITY_INFO);
        FacesContext fc = FacesContext.getCurrentInstance(); */

        FacesMessage message = new FacesMessage("Gate Pass Cancel successfully");
        message.setSeverity(FacesMessage.SEVERITY_INFO);
        FacesContext fc = FacesContext.getCurrentInstance();
        fc.addMessage(null, message);
        this.getDBTransaction().commit();
        _log.info("insrtrcpt  commit succesfully");
        return null;
    }


    /**
     * Container's getter for LovTrfIssuNoDisp1.
     * @return LovTrfIssuNoDisp1
     */
    public ViewObjectImpl getLovTrfIssuNoDisp1() {
        return (ViewObjectImpl) findViewObject("LovTrfIssuNoDisp1");
    }

    public void totBalQtyRcptAll() {
        RcptGpItmVOImpl vo = (RcptGpItmVOImpl) this.getRcptGpItm();
        RowSetIterator rsi = vo.createRowSetIterator(null);
        _log.info("------length------- " + rsi.getRowCount());
        Number totBalQty = new Number(0);
        while (rsi.hasNext()) {
            RcptGpItmVORowImpl r = (RcptGpItmVORowImpl) rsi.next();
            totBalQty = totBalQty.add((Number) (r.getTransRcptQty() == null ? new Number(0) : r.getTransRcptQty()));
            //        _log.info("---------entered qty " + r.getTransRcptQty() + " ");
        }
        _log.info("----------overall bal qty " + totBalQty);
        rsi.closeRowSetIterator();
        if (vo.getCurrentRow() != null) {
            vo.getCurrentRow().setAttribute("TransTotBalQty", totBalQty);
        }
    }

}

