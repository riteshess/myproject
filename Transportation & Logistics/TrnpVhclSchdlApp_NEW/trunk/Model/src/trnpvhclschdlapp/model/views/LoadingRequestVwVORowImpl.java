package trnpvhclschdlapp.model.views;

import java.sql.Timestamp;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewRowImpl;

import trnpvhclschdlapp.model.services.TrnpVhclSchdlAppAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 28 17:49:17 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LoadingRequestVwVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        HoOrgId,
        DocId,
        LrId,
        LrDt,
        StrtDt,
        EndDt,
        TotWt,
        TransSelectCB;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int LRID = AttributesEnum.LrId.index();
    public static final int LRDT = AttributesEnum.LrDt.index();
    public static final int STRTDT = AttributesEnum.StrtDt.index();
    public static final int ENDDT = AttributesEnum.EndDt.index();
    public static final int TOTWT = AttributesEnum.TotWt.index();
    public static final int TRANSSELECTCB = AttributesEnum.TransSelectCB.index();

    /**
     * This is the default constructor (do not remove).
     */
    public LoadingRequestVwVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute CldId.
     * @return the CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Gets the attribute value for the calculated attribute SlocId.
     * @return the SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute OrgId.
     * @return the OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute HoOrgId.
     * @return the HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Gets the attribute value for the calculated attribute DocId.
     * @return the DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Gets the attribute value for the calculated attribute LrId.
     * @return the LrId
     */
    public String getLrId() {
        return (String) getAttributeInternal(LRID);
    }

    /**
     * Gets the attribute value for the calculated attribute LrDt.
     * @return the LrDt
     */
    public Timestamp getLrDt() {
        return (Timestamp) getAttributeInternal(LRDT);
    }

    /**
     * Gets the attribute value for the calculated attribute StrtDt.
     * @return the StrtDt
     */
    public Timestamp getStrtDt() {
        return (Timestamp) getAttributeInternal(STRTDT);
    }

    /**
     * Gets the attribute value for the calculated attribute EndDt.
     * @return the EndDt
     */
    public Timestamp getEndDt() {
        return (Timestamp) getAttributeInternal(ENDDT);
    }

    /**
     * Gets the attribute value for the calculated attribute TotWt.
     * @return the TotWt
     */
    public Number getTotWt() {
        return (Number) getAttributeInternal(TOTWT);
    }

    /**
     * Gets the attribute value for the calculated attribute TransSelectCB.
     * @return the TransSelectCB
     */
    public String getTransSelectCB() {
        if (getAttributeInternal(TRANSSELECTCB) != null)
            return (String) getAttributeInternal(TRANSSELECTCB);
        else {
            TrnpVhclSchdlAppAMImpl am = (TrnpVhclSchdlAppAMImpl) this.getApplicationModule();
            RowQualifier rq = new RowQualifier(am.getSlsTrnpVhclSchdlDtl1());
            rq.setWhereClause("CldId='" + this.getCldId() + "' " + "and SlocId=" + this.getSlocId() + " " +
                              "and OrgId='" + this.getOrgId() + "' " + "and HoOrgId='" + this.getHoOrgId() + "' " +
                              "and LrDocId='" + this.getDocId() + "'");
            Row fr[] = am.getSlsTrnpVhclSchdlDtl1().getFilteredRows(rq);
            //  System.out.println("No. of Filtered Rows in TrnpVhclPrfVwRowImpl=" + fr.length);
            if (fr.length > 0)
                return "true";
        }
        return (String) getAttributeInternal(TRANSSELECTCB);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransSelectCB.
     * @param value value to set the  TransSelectCB
     */
    public void setTransSelectCB(String value) {
        setAttributeInternal(TRANSSELECTCB, value);
    }
}

