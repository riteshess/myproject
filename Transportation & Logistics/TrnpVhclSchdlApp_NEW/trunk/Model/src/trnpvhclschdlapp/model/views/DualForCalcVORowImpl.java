package trnpvhclschdlapp.model.views;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewRowImpl;

import trnpvhclschdlapp.model.services.TrnpVhclSchdlAppAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 27 18:57:46 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DualForCalcVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Selectobjects0,
        TransTotSelReqWt,
        TransVhclCapWt,
        TransWtvsCapDiff,
        TransWtvsCapDiffFlg;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int SELECTOBJECTS0 = AttributesEnum.Selectobjects0.index();
    public static final int TRANSTOTSELREQWT = AttributesEnum.TransTotSelReqWt.index();
    public static final int TRANSVHCLCAPWT = AttributesEnum.TransVhclCapWt.index();
    public static final int TRANSWTVSCAPDIFF = AttributesEnum.TransWtvsCapDiff.index();
    public static final int TRANSWTVSCAPDIFFFLG = AttributesEnum.TransWtvsCapDiffFlg.index();

    /**
     * This is the default constructor (do not remove).
     */
    public DualForCalcVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Selectobjects0.
     * @return the Selectobjects0
     */
    public String getSelectobjects0() {
        return (String) getAttributeInternal(SELECTOBJECTS0);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotSelReqWt.
     * @return the TransTotSelReqWt
     */
    public Number getTransTotSelReqWt() {
        TrnpVhclSchdlAppAMImpl am = (TrnpVhclSchdlAppAMImpl) this.getApplicationModule();
        Row fr[] = am.getLoadingRequestVw1().getFilteredRows("TransSelectCB", "true");
        // System.out.println("No. of Filtered Rows =" + fr.length);
        Number sum = new Number(0);
        for (Row row : fr) {
            Number wt = new Number(0);
            if (row.getAttribute("TotWt") != null) {
                wt = (Number) row.getAttribute("TotWt");
            }
            sum = sum.add(wt);
        }
        return sum;
        //  return (Number) getAttributeInternal(TRANSTOTSELREQWT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotSelReqWt.
     * @param value value to set the  TransTotSelReqWt
     */
    public void setTransTotSelReqWt(Number value) {
        setAttributeInternal(TRANSTOTSELREQWT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransVhclCapWt.
     * @return the TransVhclCapWt
     */
    public Number getTransVhclCapWt() {
        TrnpVhclSchdlAppAMImpl am = (TrnpVhclSchdlAppAMImpl) this.getApplicationModule();
        Row[] fr = am.getTrnpVhclPrfVw1().getFilteredRows("TransSelectVhclCB", "true");
        if (fr.length > 0)
            return (Number) fr[0].getAttribute("CapWt");
        else
            return new Number(0);
        // return (Number) getAttributeInternal(TRANSVHCLCAPWT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransVhclCapWt.
     * @param value value to set the  TransVhclCapWt
     */
    public void setTransVhclCapWt(Number value) {
        setAttributeInternal(TRANSVHCLCAPWT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransWtvsCapDiff.
     * @return the TransWtvsCapDiff
     */
    public Number getTransWtvsCapDiff() {
        if (this.getTransVhclCapWt().subtract(this.getTransTotSelReqWt()).compareTo(new Number(0)) < 0)
            return this.getTransVhclCapWt().subtract(this.getTransTotSelReqWt()).multiply(new Number(-1));
        else
            return this.getTransVhclCapWt().subtract(this.getTransTotSelReqWt());
        // return (Number) getAttributeInternal(TRANSWTVSCAPDIFF);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransWtvsCapDiff.
     * @param value value to set the  TransWtvsCapDiff
     */
    public void setTransWtvsCapDiff(Number value) {
        setAttributeInternal(TRANSWTVSCAPDIFF, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransWtvsCapDiffFlg.
     * @return the TransWtvsCapDiffFlg
     */
    public String getTransWtvsCapDiffFlg() {
        if ((this.getTransVhclCapWt().subtract(this.getTransTotSelReqWt())).compareTo(new Number(0)) > 0)
            return "G";
        else if ((this.getTransVhclCapWt().subtract(this.getTransTotSelReqWt())).compareTo(new Number(0)) < 0)
            return "R";
        else
            return "Y";
        //  return (String) getAttributeInternal(TRANSWTVSCAPDIFFFLG);
    }
}

