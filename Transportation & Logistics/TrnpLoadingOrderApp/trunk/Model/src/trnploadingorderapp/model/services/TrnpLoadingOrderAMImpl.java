package trnploadingorderapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.sql.SQLException;
import java.sql.Types;

import javax.faces.application.FacesMessage;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import trnploadingorderapp.model.services.common.TrnpLoadingOrderAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 02 15:06:05 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TrnpLoadingOrderAMImpl extends ApplicationModuleImpl implements TrnpLoadingOrderAM {
    /**
     * This is the default constructor (do not remove).
     */
    public TrnpLoadingOrderAMImpl() {
    }

    protected String getCldIdValue() {
        return EbizParams.GLBL_APP_CLD_ID();
    }

    protected Integer getSlocIdValue() {
        return EbizParams.GLBL_APP_SERV_LOC();
    }

    protected String getHoOrgIdValue() {
        return EbizParams.GLBL_HO_ORG_ID();
    }

    protected String getOrgIdValue() {
        return EbizParams.GLBL_APP_USR_ORG();
    }

    protected Integer getUsrIdValue() {
        return EbizParams.GLBL_APP_USR();
    }

    public Integer fetchCurrIdSpValue() {
        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null) {
            return (Integer) currentRow.getAttribute("CurrIdSp");
        } else {
            return null;
        }
    }

    /**
     * Container's getter for LOVCurrId1.
     * @return LOVCurrId1
     */
    public ViewObjectImpl getLOVCurrIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVCurrIdVO1");
    }

    /**
     * Container's getter for LOVAppEo1.
     * @return LOVAppEo1
     */
    public ViewObjectImpl getLOVAppEoVO1() {
        return (ViewObjectImpl) findViewObject("LOVAppEoVO1");
    }

    /**
     * Method to fetch Currency rate on the basis of EoId.
     * @param currId
     * @return
     * @param eoId
     */
    public Number getCurrRateForCurrId(Integer currId) {
        Number currRate = new Number(1);
        currId = (currId == null ? -1 : currId);
        System.out.println("Currency Id : " + currId);
        if (currId != -1) {
            //FN_GET_CURR_RATE_FRM_CURR_ID
            Object currRateO = EbizParams.getCurrRateForCurrId(this, currId);
            currRate = (Number) currRateO;
        }

        return currRate;
    }

    /**
     * Container's getter for LOVShipmentId1.
     * @return LOVShipmentId1
     */
    public ViewObjectImpl getLOVShipmentIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVShipmentIdVO1");
    }

    /**
     * Container's getter for LOVItemNm1.
     * @return LOVItemNm1
     */
    public ViewObjectImpl getLOVItemNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVItemNmVO1");
    }

    /**
     * Container's getter for ShipItemDtl1.
     * @return ShipItemDtl1
     */
    public ViewObjectImpl getShipItemDtlVO1() {
        return (ViewObjectImpl) findViewObject("ShipItemDtlVO1");
    }

    /**
     * Method which will insert into Sls$TRMP$LO$ROUTE$EO
     */
    public void insertDateIntoEo() {
        ViewObjectImpl dtlVO1 = this.getSlsTrnpLoRouteDtlVO1();
        Row currentRow = dtlVO1.getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("EoIdTrans") != null) {
                if (this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("RateBasis").toString().equals("P") ||
                    currentRow.getAttribute("CustomerRateTrans") != null) {
                    ViewObjectImpl eoVO1 = this.getSlsTrnpLoRouteEoVO1();
                    Row createRow = eoVO1.createRow();
                    createRow.setAttribute("EoId", currentRow.getAttribute("EoIdTrans"));
                    createRow.setAttribute("Rate", currentRow.getAttribute("CustomerRateTrans"));
                    eoVO1.insertRow(createRow);
                    //eoVO1.executeQuery();
                }
            }
            currentRow.setAttribute("CustomerNmTrans", null);
            currentRow.setAttribute("EoIdTrans", null);
            currentRow.setAttribute("CustomerRateTrans", null);
        }
    }

    /**
     *Method which will delete Rows from SLS$TRNP$LO$PROD$DTL, SLS$TRMP$LO$DOC$SRC and SLS$TRMP$LO$ROUTE$EO
     */
    public void deleteRouteFromEo() {

        ViewObjectImpl eoVO1 = this.getSlsTrnpLoRouteEoVO1();
        Row currentRow = eoVO1.getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("EoId") != null) {
            ViewObjectImpl impl = this.getSlsTrnpLoDocSrcVO1();
            RowQualifier rQ = new RowQualifier(impl);

            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and DocId ='" + currentRow.getAttribute("DocId") + "' and EoId =" +
                              currentRow.getAttribute("EoId") + " and DeparturePnt ='" +
                              currentRow.getAttribute("DeparturePnt") + "' and ArrivalPnt ='" +
                              currentRow.getAttribute("ArrivalPnt") + "'");
            Row[] filteredRows = impl.getFilteredRows(rQ);

            ViewObjectImpl dtlVO2 = this.getSlsTrnpLoProdDtlVO2();
            dtlVO2.setRangeSize(-1);
            dtlVO2.executeQuery();
            RowQualifier dtlVO2rQ = new RowQualifier(dtlVO2);

            for (Row r : filteredRows) {
                dtlVO2rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                        " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" +
                                        this.getOrgIdValue() + "' and DocId ='" + currentRow.getAttribute("DocId") +
                                        "' and EoId =" + currentRow.getAttribute("EoId") + " and DeparturePnt ='" +
                                        currentRow.getAttribute("DeparturePnt") + "' and ArrivalPnt ='" +
                                        currentRow.getAttribute("ArrivalPnt") + "' and DocIdSrc ='" +
                                        r.getAttribute("DocIdSrc") + "'");

                Row[] dtlFilRow = dtlVO2.getFilteredRows(dtlVO2rQ);
                for (Row dtlRow : dtlFilRow) {
                    dtlRow.remove();
                }
                dtlVO2.executeQuery();

                r.remove();
            }
            impl.executeQuery();

            currentRow.remove();

            eoVO1.executeQuery();
        }
    }

    /**
     * Following method which will return rate based on the Rate Contract
     */
    public Number getRateFromRateContract(Integer eoId, String rateBasis, String rateFctr, Integer vehicleTyp,
                                          Integer currId, String itemId) {
        
        //if using transporter then eoid = SlsTrnpLoVo.currentRow.TrnspId
        
        if(this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("ReqTyp").toString().equalsIgnoreCase("T"))
        {
           eoId = (Integer) this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("TrnspId");
               
        }
        
        Number val = new Number(0);
        if (eoId != null && rateBasis != null && rateFctr != null && vehicleTyp != null && currId != null) {
            ViewObjectImpl cntrctVwVO1 = this.getSlsTrnpRateCntrctVwVO1();
            cntrctVwVO1.setRangeSize(-1);
            cntrctVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            cntrctVwVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            cntrctVwVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            cntrctVwVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            cntrctVwVO1.executeQuery();

            if (rateBasis.equalsIgnoreCase("F")) { /////////// Flat Rate wise
                
                RowQualifier rQCntrctVw = new RowQualifier(cntrctVwVO1);
                rQCntrctVw.setWhereClause("EoId =" + eoId + " and RateFctr ='" + rateFctr + "' and VhclType =" +
                                          vehicleTyp + " and CurrIdSp =" + currId + " and Actv = 'Y' and InactvDt is null");
                Row[] filteredRows = cntrctVwVO1.getFilteredRows(rQCntrctVw);
                if (filteredRows.length > 0 && filteredRows[0].getAttribute("Rate") != null) {
                    val = (Number) filteredRows[0].getAttribute("Rate");
                }
            } else if (rateBasis.equalsIgnoreCase("P")) { /////// Product wise entry
                
                if (itemId != null) {
                    
                    RowQualifier rQCntrctVw = new RowQualifier(cntrctVwVO1);
                    rQCntrctVw.setWhereClause("EoId =" + eoId + " and RateFctr ='" + rateFctr + "' and VhclType =" +
                                              vehicleTyp + " and CurrIdSp =" + currId + " and Actv = 'Y' and InactvDt is null");
                    Row[] filteredRows = cntrctVwVO1.getFilteredRows(rQCntrctVw);
                    if (filteredRows.length > 0) {

                        ViewObjectImpl cntrctDtlVwVO1 = this.getSlsTrnpRateCntrctDtlVwVO1();
                        cntrctDtlVwVO1.setRangeSize(-1);
                        cntrctDtlVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                        cntrctDtlVwVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                        cntrctDtlVwVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                        cntrctDtlVwVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                        cntrctDtlVwVO1.setNamedWhereClauseParam("BindDocId", filteredRows[0].getAttribute("DocId"));
                        cntrctDtlVwVO1.setNamedWhereClauseParam("BindEoId", filteredRows[0].getAttribute("EoId"));

                        cntrctDtlVwVO1.executeQuery();

                        RowQualifier rQCntrctDtlVw = new RowQualifier(cntrctDtlVwVO1);
                        rQCntrctDtlVw.setWhereClause("ItmId ='" + itemId + "'");
                        Row[] row = cntrctDtlVwVO1.getFilteredRows(rQCntrctDtlVw);
                        if (row.length > 0 && row[0].getAttribute("Rate") != null) {
                            val = (Number) row[0].getAttribute("Rate");
                        }
                    }
                }
            }
        }
        System.out.println("Rate before return :: "+val);
        return val;
    }

    /**
     * Get Item Weight From Pack Detail
     */
    private Number getItemWtFromPack(String pickId, String itemId) {
        Number val = new Number(0);

        if (pickId != null && itemId != null) {
            ViewObjectImpl dtlVO1 = this.getPackItemDtlVO1();
            dtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            dtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            dtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            dtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            dtlVO1.setNamedWhereClauseParam("BindPickId", pickId);
            dtlVO1.setNamedWhereClauseParam("BindItmId", itemId);

            dtlVO1.executeQuery();

            Row[] allRowsInRange = dtlVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                val = (Number) allRowsInRange[0].getAttribute("PackWt");
            }
        }

        return val;
    }

    /**
     * Method which will check if the shipment item is empty or not - SLS$TRNP$LO$DOC$SRC
     */

    public boolean chkShipmentRow() {
        Boolean result = false;

        Row[] shipmentRowCount =
            this.getSlsTrnpLoDocSrcVO1().getFilteredRows("DocId",
                                                         this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("DocId"));

        if (shipmentRowCount.length > 0)
            result = true;

        return result;
    }

    /* public boolean chkProdDtlRow() {

        Boolean result = false;

        Row[] prodDtlRowCount =
            this.getSlsTrnpLoProdDtlVO1().getFilteredRows("DocId",
                                                          this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("DocId"));

        if (prodDtlRowCount.length > 0)
            result = true;

        return result;
    } */

    public boolean chkProdDtlRow() {
        
        //this.getDBTransaction().commit();
        
        Boolean result = true;
        String custName = null;
        
        ViewObjectImpl prodDtlVo = this.getSlsTrnpLoProdDtlVO2();
        ViewObjectImpl loVo = this.getSlsTrnpLoVO1();
        ViewObjectImpl routeVo  = this.getSlsTrnpLoRouteEoVO2();
        
        Row[] totalTrips = routeVo.getFilteredRows("DocId", loVo.getCurrentRow().getAttribute("DocId"));
        
        System.out.println("Route total trips ::"+totalTrips.length);
        
        if(totalTrips.length > 0)
        {
            for(Row r : totalTrips)
            {
                
                RowQualifier rq = new RowQualifier(prodDtlVo);
                
                rq.setWhereClause("DocId = '"+r.getAttribute("DocId")+"' and ArrivalPnt = '"+r.getAttribute("ArrivalPnt")+"' and DeparturePnt = '"+r.getAttribute("DeparturePnt")+"' and EoId = "+r.getAttribute("EoId"));
                
                Row[] prodDtlRowCount = prodDtlVo.getFilteredRows(rq);

                if (prodDtlRowCount.length <= 0)
                {
                    custName = this.getCustName((Integer) r.getAttribute("EoId")); 
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2342"),"\n "+ADFModelUtils.resolvRsrc("LBL.299")+" : "+custName+"</br> "+ADFModelUtils.resolvRsrc("LBL.4466")+" : "+ this.getRouteTrip((String) r.getAttribute("DeparturePnt"))+"</br> "+ADFModelUtils.resolvRsrc("LBL.4469")+" : "+ this.getRouteTrip((String) r.getAttribute("ArrivalPnt")), FacesMessage.SEVERITY_ERROR);
                    //ADFModelUtils.showFormattedFacesMessage("Please add Item for following details :","\n Customer name : "+custName+"</br> Arrival Point : "+ this.getRouteTrip((String) r.getAttribute("ArrivalPnt"))+"</br> Departure Point : "+ this.getRouteTrip((String) r.getAttribute("DeparturePnt")), FacesMessage.SEVERITY_ERROR);
                    return false;
                }
                
            }
        }
        else
        {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2343"), ADFModelUtils.resolvRsrc("MSG.2344"), FacesMessage.SEVERITY_WARN);
            //ADFModelUtils.showFormattedFacesMessage("Please add a Customer", "To whom the item(s) has to be shipped !!", FacesMessage.SEVERITY_WARN);
            return false;
        }
        

        return result;
    }

    public String getCustName(Integer custId)
    {
        if(custId != null)
        {
            ViewObjectImpl custNmVo = this.getLOVCustNameVO1();   
            custNmVo.setNamedWhereClauseParam("BindCldId",EbizParams.GLBL_APP_CLD_ID());
            custNmVo.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            custNmVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            
            custNmVo.executeQuery();
            
           Row[] filteredRow = custNmVo.getFilteredRows("EoId", custId);
           
           if(filteredRow.length > 0)
                return (String) filteredRow[0].getAttribute("EoNm");
            
        }
        
        return "";    
    }

    public String getRouteTrip(String locId)
    {
        if(locId != null)
        {
            
            System.out.println("Location Id :: "+locId);
            ViewObjectImpl locVo = this.getLOVLocNmVO1();
            
            locVo.setNamedWhereClauseParam("BindCldId",EbizParams.GLBL_APP_CLD_ID());            
            locVo.setNamedWhereClauseParam("BindLocId",locId);
            locVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            
            locVo.executeQuery();

            Row[] allRowsInRange = locVo.getAllRowsInRange();
            
            if(allRowsInRange.length > 0){
                return (String) allRowsInRange[0].getAttribute("AddsLoc");
            }
            
        }
        
         return ""; 
    }

    /**
     * Method which will Insert Item Detail into SLS$TRMP$LO$DOC$SRC and SLS$TRNP$LO$PROD$DTL
     * From ShipItemDtlVO by filtering data based on DOCID
     */
    public void insertDataIntoLoShipDtl() {

        Row headRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (headRow != null && headRow.getAttribute("LoSrcBasis") != null) {

            ViewObjectImpl impl = this.getSlsTrnpLoRouteEoVO1();
            Row currentRow = impl.getCurrentRow();

            Integer loSrcBasis = (Integer) headRow.getAttribute("LoSrcBasis");

            if (loSrcBasis.equals(new Integer(4))) { /// For Customer - Shipment Lov is displayed

                if (currentRow != null && currentRow.getAttribute("DocSrcIdDispTrans") != null) {
                    /// Following code will insert a row into SLS$TRMP$LO$DOC$SRC

                    ViewObjectImpl loShipVO1 = this.getSlsTrnpLoDocSrcVO1();
                    Row createRow = loShipVO1.createRow();
                    createRow.setAttribute("DocIdSrc", currentRow.getAttribute("DocSrcIdDispTrans"));
                    loShipVO1.insertRow(createRow);

                    /// Following code will insert data into SLS$TRNP$LO$PROD$DTL by filtering ShipItemDtlVO
                    ViewObjectImpl dtlVO1 = this.getShipItemDtlVO1();
                    dtlVO1.setRangeSize(-1);
                    dtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    dtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    dtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                    dtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    dtlVO1.setNamedWhereClauseParam("BindDocId", currentRow.getAttribute("DocSrcIdDispTrans"));

                    dtlVO1.executeQuery();

                    ViewObjectImpl loShipDtlVO1 = this.getSlsTrnpLoProdDtlVO1();
                    Row[] allRowsInRange = dtlVO1.getAllRowsInRange();
                    Number rate = new Number(0);
                    Number itemWt = new Number(0);
                    Number uomFctr = new Number(0);
                    
                    for (Row r : allRowsInRange) {
                        Row row = loShipDtlVO1.createRow();
                        row.setAttribute("ItmId", r.getAttribute("ItmId"));
                        row.setAttribute("ShipQty", r.getAttribute("ShipmntQty"));
                        row.setAttribute("ShipQtyUom", r.getAttribute("ItmUom"));


                        //// Following code will get Item Weight from Pack table and insert in ItmWt filed
                      //itemWt = getItemWtFromPack((String) r.getAttribute("DocId"), (String) r.getAttribute("ItmId"));

                        ViewObjectImpl appItmVO = this.getItmWtFctrVO1();
                        appItmVO.setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
                        appItmVO.setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
                        appItmVO.setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                        appItmVO.setNamedWhereClauseParam("BindItmId", r.getAttribute("ItmId"));
                        appItmVO.executeQuery();
    
                        Row[] allRows = appItmVO.getAllRowsInRange();
                        
                        uomFctr = (Number) allRows[0].getAttribute("UomFctr");

                        row.setAttribute("ItmWtUom", allRows[0].getAttribute("UomSls"));
                        
                        itemWt =  ((Number) r.getAttribute("ShipmntQty")).multiply(uomFctr);                           
                        
                        System.out.println("UOM Factor by function :: "+uomFctr);
                        System.out.println("Item weight after multiply ::"+itemWt);
                        
                        row.setAttribute("ItmWt",itemWt);

                        /*   if ((headRow.getAttribute("RateFctr")) != null &&
                            (this.getSlsTrnpLoRouteDtlVO1().getCurrentRow().getAttribute("TotVal") != null)) {

                            if (!((headRow.getAttribute("RateFctr").toString().equalsIgnoreCase("W")) &&
                                  (headRow.getAttribute("RateBasis").toString().equalsIgnoreCase("P")))) {
                                row.setAttribute("ItmWt",
                                                 this.getSlsTrnpLoRouteDtlVO1().getCurrentRow().getAttribute("TotVal"));
                            }
                        } */

                        ///// Following code will get the value from rate contract and insert in rate field
                        rate =
                            getRateFromRateContract((Integer) currentRow.getAttribute("EoId"),
                                                    (String) headRow.getAttribute("RateBasis"),
                                                    (String) headRow.getAttribute("RateFctr"),
                                                    (Integer) headRow.getAttribute("VehicleTyp"),
                                                    (Integer) headRow.getAttribute("CurrIdSp"),
                                                    (String) r.getAttribute("ItmId"));
                        
                        System.out.println("Rate from getRateContract method :: "+rate);

                        if (rate != null) {
                            System.out.println("Here !!");

                            if (headRow.getAttribute("RateBasis").toString().equalsIgnoreCase("F")) {
                                if (headRow.getAttribute("RateFctr").toString().equalsIgnoreCase("W")) {
                                    ViewObjectImpl rtDtl = this.getSlsTrnpLoRouteEoVO1();
                                    Row rtDtlCurrRow = rtDtl.getCurrentRow();
                                    row.setAttribute("Rate", rtDtlCurrRow.getAttribute("Rate"));
                                    System.out.println("Rate for Customer on Flat Rate basis :: "+row.getAttribute("Rate"));
                                } else if (headRow.getAttribute("RateFctr").toString().equalsIgnoreCase("D")) {

                                }
                            } else {
                                System.out.println("Rate in Product wise basis is :: " + row.getAttribute("Rate"));
                                row.setAttribute("Rate", rate);
                            }
                            /* //row.setAttribute("Rate", rate);
                            System.out.println("Rate is ::" + rate);
                            System.out.println("Rate of attribute is ::" + row.getAttribute("Rate")); */
                        }
                        //row.setAttribute("ItmAmtSp", r.getAttribute("ItmAmtSp"));
                        //row.setAttribute("ItmAmtBs", r.getAttribute("ItmAmtBs"));
                        loShipDtlVO1.insertRow(row);
                    }

                    currentRow.setAttribute("DocSrcNmTrans", null);
                    currentRow.setAttribute("DocSrcIdDispTrans", null);
                }
            } else if (loSrcBasis.equals(new Integer(5))) { /// For Supplier - Purchase Order LOV is displayed
                if (currentRow != null && currentRow.getAttribute("DocSrcIdDispTrans") != null) {
                    /// Following code will insert a row into SLS$TRMP$LO$DOC$SRC

                    ViewObjectImpl loShipVO1 = this.getSlsTrnpLoDocSrcVO1();
                    Row createRow = loShipVO1.createRow();
                    createRow.setAttribute("DocIdSrc", currentRow.getAttribute("DocSrcIdDispTrans"));
                    loShipVO1.insertRow(createRow);

                    /// Following code will insert data into SLS$TRNP$LO$PROD$DTL by filtering ShipItemDtlVO
                    ViewObjectImpl lOVPurchaseOrderVO1 = this.getPurchaseOrdItemDtlVO1();
                    lOVPurchaseOrderVO1.setRangeSize(-1);
                    lOVPurchaseOrderVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    lOVPurchaseOrderVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    lOVPurchaseOrderVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    lOVPurchaseOrderVO1.setNamedWhereClauseParam("BindPoDocId",
                                                                 currentRow.getAttribute("DocSrcIdDispTrans"));

                    lOVPurchaseOrderVO1.executeQuery();

                    ViewObjectImpl loShipDtlVO1 = this.getSlsTrnpLoProdDtlVO1();
                    Row[] allRowsInRange = lOVPurchaseOrderVO1.getAllRowsInRange();
                    for (Row r : allRowsInRange) {
                        Row row = loShipDtlVO1.createRow();
                        row.setAttribute("ItmId", r.getAttribute("ItmId"));
                        row.setAttribute("ItmWtUom", r.getAttribute("ItmUom"));
                        row.setAttribute("ShipQty", r.getAttribute("DlvQty"));
                        row.setAttribute("ShipQtyUom", r.getAttribute("ItmUom"));

                        loShipDtlVO1.insertRow(row);
                    }

                    currentRow.setAttribute("DocSrcNmTrans", null);
                    currentRow.setAttribute("DocSrcIdDispTrans", null);

                }
            }
            else if (loSrcBasis.equals(new Integer(39))) { /// For Transfer Order - Transfer Order LOV is displayed
                if (currentRow != null && currentRow.getAttribute("DocSrcIdDispTrans") != null) {
                    /// Following code will insert a row into SLS$TRMP$LO$DOC$SRC

                    ViewObjectImpl loShipVO1 = this.getSlsTrnpLoDocSrcVO1();
                    Row createRow = loShipVO1.createRow();
                    createRow.setAttribute("DocIdSrc", currentRow.getAttribute("DocSrcIdDispTrans"));
                    loShipVO1.insertRow(createRow);

                    /// Following code will insert data into SLS$TRNP$LO$PROD$DTL by filtering ShipItemDtlVO
                    ViewObjectImpl transferOrderVO1 = this.getLovTransferOrderItmVO1();
                    transferOrderVO1.setRangeSize(-1);
                    transferOrderVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    transferOrderVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    transferOrderVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    transferOrderVO1.setNamedWhereClauseParam("BindDocId",
                                                                 currentRow.getAttribute("DocSrcIdDispTrans"));

                    transferOrderVO1.executeQuery();

                    ViewObjectImpl loShipDtlVO1 = this.getSlsTrnpLoProdDtlVO1();
                    Row[] allRowsInRange = transferOrderVO1.getAllRowsInRange();
                    for (Row r : allRowsInRange) {
                        Row row = loShipDtlVO1.createRow();
                        row.setAttribute("ItmId", r.getAttribute("ItmId"));
                        row.setAttribute("ShipQty", r.getAttribute("IssuQty"));
                        row.setAttribute("ShipQtyUom", r.getAttribute("ItmUom"));

                        loShipDtlVO1.insertRow(row);
                    }

                    currentRow.setAttribute("DocSrcNmTrans", null);
                    currentRow.setAttribute("DocSrcIdDispTrans", null);

                }
            } 
            else {
                System.out.println("Not matched any case");
            }
        }
    }

    /**
     * Method which will delete Rows from SLS$TRNP$LO$PROD$DTL and SLS$TRMP$LO$DOC$SRC
     */
    public void deleteDataFromLoShip() {
        ViewObjectImpl impl = this.getSlsTrnpLoDocSrcVO1();
        Row currentRow = impl.getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("DocIdSrc") != null) {
            ViewObjectImpl dtlVO1 = this.getSlsTrnpLoProdDtlVO1();
            RowQualifier rQ = new RowQualifier(dtlVO1);
            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and DocId ='" + currentRow.getAttribute("DocId") + "' and EoId =" +
                              currentRow.getAttribute("EoId") + " and DeparturePnt ='" +
                              currentRow.getAttribute("DeparturePnt") + "' and ArrivalPnt ='" +
                              currentRow.getAttribute("ArrivalPnt") + "' and DocIdSrc ='" +
                              currentRow.getAttribute("DocIdSrc") + "'");
            Row[] filteredRows = dtlVO1.getFilteredRows(rQ);
            for (Row r : filteredRows) {
                r.remove();
            }
            dtlVO1.executeQuery();

            currentRow.remove();

            impl.executeQuery();
        }
    }

    /**
     * Method will be called when user try to delete a route from SLS$TRNP$LO$ROUTE$DTL
     * It will first delete rows from SLS$TRNP$LO$PROD$DTL, SLS$TRNP$LO$SHIP, SLS$TRNP$LO$ROUTE$EO and SLS$TRNP$LO$ROUTE$DTL
     */
    public void deleteDataFromChildTable() {
        ViewObjectImpl dtlVO1 = this.getSlsTrnpLoRouteDtlVO1();
        Row currentRow = dtlVO1.getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl impl = this.getSlsTrnpLoProdDtlVO2();
            impl.setRangeSize(-1);
            impl.executeQuery();

            RowQualifier rQShipDtl = new RowQualifier(impl);
            rQShipDtl.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                     " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" +
                                     this.getOrgIdValue() + "' and DocId ='" + currentRow.getAttribute("DocId") +
                                     "' and DeparturePnt ='" + currentRow.getAttribute("DeparturePnt") +
                                     "' and ArrivalPnt ='" + currentRow.getAttribute("ArrivalPnt") + "'");
            Row[] row = impl.getFilteredRows(rQShipDtl);
            System.out.println("Length is " + row.length);
            for (Row rShipDtl : row) {
                rShipDtl.remove();
            }
            impl.executeQuery();
            this.getSlsTrnpLoProdDtlVO1().executeQuery();

            ViewObjectImpl loShipVO2 = this.getSlsTrnpLoDocSrcVO2();
            loShipVO2.setRangeSize(-1);
            loShipVO2.executeQuery();

            RowQualifier rQShip = new RowQualifier(loShipVO2);
            rQShip.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                  " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                                  "' and DocId ='" + currentRow.getAttribute("DocId") + "' and DeparturePnt ='" +
                                  currentRow.getAttribute("DeparturePnt") + "' and ArrivalPnt ='" +
                                  currentRow.getAttribute("ArrivalPnt") + "'");
            Row[] rowShip = loShipVO2.getFilteredRows(rQShip);
            for (Row rShip : rowShip) {
                rShip.remove();
            }
            loShipVO2.executeQuery();
            this.getSlsTrnpLoDocSrcVO1().executeQuery();

            ViewObjectImpl eoVO2 = this.getSlsTrnpLoRouteEoVO2();
            RowQualifier rQ = new RowQualifier(eoVO2);
            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and DocId ='" + currentRow.getAttribute("DocId") + "' and DeparturePnt ='" +
                              currentRow.getAttribute("DeparturePnt") + "' and ArrivalPnt ='" +
                              currentRow.getAttribute("ArrivalPnt") + "'");
            Row[] filteredRows = eoVO2.getFilteredRows(rQ);
            for (Row r : filteredRows) {
                r.remove();
            }
            eoVO2.executeQuery();
            this.getSlsTrnpLoRouteEoVO1().executeQuery();

            ViewObjectImpl loOcVO1 = this.getSlsTrnpLoOcVO1();
            Row[] allRowsInRange = loOcVO1.getAllRowsInRange();
            for (Row ocRow : allRowsInRange) {
                ocRow.remove();
            }
            loOcVO1.executeQuery();

            currentRow.remove();
        }
        dtlVO1.executeQuery();
    }


    /**
     * Container's getter for SlsTrnpLoShipDtl1.
     * @return SlsTrnpLoShipDtl1
     */
    public ViewObjectImpl getSlsTrnpLoProdDtlVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoProdDtlVO2");
    }

    /**
     * Container's getter for SlsTrnpLoShip1.
     * @return SlsTrnpLoShip1
     */
    public ViewObjectImpl getSlsTrnpLoDocSrcVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoDocSrcVO2");
    }

    /**
     * Container's getter for LOVUom1.
     * @return LOVUom1
     */
    public ViewObjectImpl getLOVUomVO1() {
        return (ViewObjectImpl) findViewObject("LOVUomVO1");
    }

    /**
     * Container's getter for LOVLrId1.
     * @return LOVLrId1
     */
    public ViewObjectImpl getLOVLrIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVLrIdVO1");
    }

    /**
     * Container's getter for LOVRouteNm1.
     * @return LOVRouteNm1
     */
    public ViewObjectImpl getLOVRouteNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVRouteNmVO1");
    }

    /**
     * Container's getter for SlsTrnpLoRouteDtl1.
     * @return SlsTrnpLoRouteDtl1
     */
    public ViewObjectImpl getSlsTrnpLoRouteDtlVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoRouteDtlVO2");
    }

    /**
     * Container's getter for SlsTrnpLoRouteEo1.
     * @return SlsTrnpLoRouteEo1
     */
    public ViewObjectImpl getSlsTrnpLoRouteEoVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoRouteEoVO2");
    }

    /**
     * Container's getter for SlsTrnpLo1.
     * @return SlsTrnpLo1
     */
    public ViewObjectImpl getSlsTrnpLoVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoVO1");
    }

    /**
     * Container's getter for SlsTrnpLoRouteDtl1.
     * @return SlsTrnpLoRouteDtl1
     */
    public ViewObjectImpl getSlsTrnpLoRouteDtlVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoRouteDtlVO1");
    }

    /**
     * Container's getter for SlsTrnpLoToTrnpLoRouteDtlVL1.
     * @return SlsTrnpLoToTrnpLoRouteDtlVL1
     */
    public ViewLinkImpl getSlsTrnpLoToTrnpLoRouteDtlVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLoToTrnpLoRouteDtlVL1");
    }

    /**
     * Container's getter for SlsTrnpLoRouteEo1.
     * @return SlsTrnpLoRouteEo1
     */
    public ViewObjectImpl getSlsTrnpLoRouteEoVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoRouteEoVO1");
    }

    /**
     * Container's getter for SlsTrnpLoRouteDtlToRouteEoVL1.
     * @return SlsTrnpLoRouteDtlToRouteEoVL1
     */
    public ViewLinkImpl getSlsTrnpLoRouteDtlToRouteEoVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLoRouteDtlToRouteEoVL1");
    }

    /**
     * Container's getter for SlsTrnpLoDocSrc1.
     * @return SlsTrnpLoDocSrc1
     */
    public ViewObjectImpl getSlsTrnpLoDocSrcVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoDocSrcVO1");
    }

    /**
     * Container's getter for SlsTrnpLoRouteEoToTrnpLoDocSrcVL1.
     * @return SlsTrnpLoRouteEoToTrnpLoDocSrcVL1
     */
    public ViewLinkImpl getSlsTrnpLoRouteEoToTrnpLoDocSrcVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLoRouteEoToTrnpLoDocSrcVL1");
    }

    /**
     * Container's getter for SlsTrnpLoProdDtl1.
     * @return SlsTrnpLoProdDtl1
     */
    public ViewObjectImpl getSlsTrnpLoProdDtlVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoProdDtlVO1");
    }

    /**
     * Container's getter for SlsTrnpLoDocSrcToTrnpLoProdDtlVL1.
     * @return SlsTrnpLoDocSrcToTrnpLoProdDtlVL1
     */
    public ViewLinkImpl getSlsTrnpLoDocSrcToTrnpLoProdDtlVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLoDocSrcToTrnpLoProdDtlVL1");
    }

    /**
     * Method which will set Item Amount Sp and Bs of SLS$TRNP$LO$PROD$DTL based on the user Entry
     */
    public void setItmAmtValues(Number rate, Number weight) {
        if (rate != null && weight != null) {
            Row currentRow = this.getSlsTrnpLoProdDtlVO1().getCurrentRow();
            if (currentRow != null) {
                Row row = this.getSlsTrnpLoVO1().getCurrentRow();
                Number convFctr = new Number(1);
                if (row != null) {
                    convFctr = (Number) row.getAttribute("CurrConvFctr");
                }
                currentRow.setAttribute("ItmAmtSp", weight.multiply(rate));
                currentRow.setAttribute("ItmAmtBs", weight.multiply(rate.multiply(convFctr)));
            }
        }
    }

    /**
     * Method which will set Route Amt Sp and Bs of SLS$TRNP$LO$ROUTE$DTL based on the user Entry
     */
    public void setRouteAmtValues(Number rate, Number value) {
        if (rate != null && value != null) {
            Row currentRow = this.getSlsTrnpLoRouteDtlVO1().getCurrentRow();
            if (currentRow != null) {
                Row row = this.getSlsTrnpLoVO1().getCurrentRow();
                Number convFctr = new Number(1);
                if (row != null) {
                    convFctr = (Number) row.getAttribute("CurrConvFctr");
                }
                currentRow.setAttribute("AmtSp", value.multiply(rate));
                currentRow.setAttribute("AmtBs", value.multiply(rate.multiply(convFctr)));
            }
        }
    }

    /**
     * Method which will load on search page onload and set bind variables for TemporaryData Vo
     */
    public void loadOnStartUp() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        dataVO1.executeQuery();

    }

    /**
     * Container's getter for TemporaryData1.
     * @return TemporaryData1
     */
    public ViewObjectImpl getTemporaryDataVO1() {
        return (ViewObjectImpl) findViewObject("TemporaryDataVO1");
    }

    /**
     * Container's getter for SearchData1.
     * @return SearchData1
     */
    public ViewObjectImpl getSearchDataVO1() {
        return (ViewObjectImpl) findViewObject("SearchDataVO1");
    }

    /**
     * Method which will be called when user click on search Button
     */
    public void searchForData() {
        Row currentRow = this.getTemporaryDataVO1().getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl dataVO1 = this.getSearchDataVO1();
            dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            if (currentRow.getAttribute("LODocIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindLoId", currentRow.getAttribute("LODocIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindLoId", null);
            }

            if (currentRow.getAttribute("LRDocIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindLrId", currentRow.getAttribute("LRDocIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindLrId", null);
            }

            if (currentRow.getAttribute("RouteIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindRouteId", currentRow.getAttribute("RouteIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindRouteId", null);
            }

            if (currentRow.getAttribute("DriverIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindEoId", currentRow.getAttribute("DriverIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindEoId", null);
            }

            dataVO1.executeQuery();
        }
    }

    /**
     * Following method will be called wwhen user click on reset button
     */
    public void resetData() {
        this.getTemporaryDataVO1().executeQuery();

        ViewObjectImpl dataVO1 = this.getSearchDataVO1();
        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", "-1");

        dataVO1.setNamedWhereClauseParam("BindLoId", null);
        dataVO1.setNamedWhereClauseParam("BindLrId", null);
        dataVO1.setNamedWhereClauseParam("BindRouteId", null);
        dataVO1.setNamedWhereClauseParam("BindEoId", null);

        dataVO1.executeQuery();
    }

    /**
     * Method will filter getSlsTrnpLoVO1 for data when user click on view mode
     */
    public void filterTrnpLoData() {
        if (ADFModelUtils.resolvEl("#{pageFlowScope.P_DOC_ID}") != null) {
            ViewObjectImpl impl = this.getSlsTrnpLoVO1();
            impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            impl.setNamedWhereClauseParam("BindDocId", ADFModelUtils.resolvEl("#{pageFlowScope.P_DOC_ID}"));

            impl.executeQuery();
        } else {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.1697"), " ",
                                                    FacesMessage.SEVERITY_ERROR);
        }
    }

    /**Method to call database function*/
    private Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }

    //------------------------WF Methods--------------------------

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {


        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, doc_no, 0
        });

        return (String) obj;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        System.out.println("pendingCheck");
        Row curr = this.getSlsTrnpLoVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        Object obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        return usrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo) {

        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }).toString());


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post) {

        Row curr = this.getSlsTrnpLoVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());

    }


    public void wfAction(String ret) {
        System.out.println("wfAction Ret =" + ret);
        if (ret != null) {
            if (ret.equals("F")) {
                this.getSlsTrnpLoVO1().getCurrentRow().setAttribute("LoStatus", 2);
            } else if (ret.equals("R")) {

            } else if (ret.equals("V")) {

            } else if (ret.equals("A")) {
                pushDatatToFin();

                updateLrDocStatus(); /// Method which will change the status of Lr to Order Generated

                this.getSlsTrnpLoVO1().getCurrentRow().setAttribute("LoStatus", 3);
            }
            this.getDBTransaction().commit();
        }
    }

    public String getUsrName(Integer usrId) {
        System.out.println("getUsrName");
        this.getLOVUserNameVO1().setNamedWhereClauseParam("BindSlocId",
                                                          this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("SlocId"));
        this.getLOVUserNameVO1().setNamedWhereClauseParam("BindUsrId", usrId);
        this.getLOVUserNameVO1().executeQuery();

        Row[] r = this.getLOVUserNameVO1().getAllRowsInRange();
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }
    //// End of Workflow methods

    /**
     * Container's getter for LOVUserName1.
     * @return LOVUserName1
     */
    public ViewObjectImpl getLOVUserNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVUserNameVO1");
    }

    /**
     * Container's getter for TempAdvance1.
     * @return TempAdvance1
     */
    public ViewObjectImpl getTempAdvanceVO1() {
        return (ViewObjectImpl) findViewObject("TempAdvanceVO1");
    }

    /**
     * Container's getter for SlsTrnpLoEoAdv1.
     * @return SlsTrnpLoEoAdv1
     */
    public ViewObjectImpl getSlsTrnpLoEoAdvVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoEoAdvVO1");
    }

    /**
     * Container's getter for SlsTrnpLoToSlsTrnpLoEoAdvVL1.
     * @return SlsTrnpLoToSlsTrnpLoEoAdvVL1
     */
    public ViewLinkImpl getSlsTrnpLoToSlsTrnpLoEoAdvVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLoToSlsTrnpLoEoAdvVL1");
    }

    /**
     * Set Bindl Variable on Page Load
     * Add/Edit Taskflow load
     */
    public void setBindVarOnPageLoad() {
        ViewObjectImpl advanceVO1 = this.getTempAdvanceVO1();
        advanceVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        advanceVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        advanceVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        advanceVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        advanceVO1.executeQuery();

        ViewObjectImpl vwSlsTrnpOc = this.getVwSlsTrnpOcVwVO1();
        vwSlsTrnpOc.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        vwSlsTrnpOc.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        vwSlsTrnpOc.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        vwSlsTrnpOc.setNamedWhereClauseParam("BindDocId", 24255);
        vwSlsTrnpOc.setNamedWhereClauseParam("BindDocTypId", 0);

        vwSlsTrnpOc.executeQuery();

    }

    /**
     * Container's getter for LOVEoAdds1.
     * @return LOVEoAdds1
     */
    public ViewObjectImpl getLOVEoAddsVO1() {
        return (ViewObjectImpl) findViewObject("LOVEoAddsVO1");
    }

    /**
     * Check Coa Account is opened or not for the Driver or Coa Name
     */
    public Boolean chkAdvCoaNameOpenedOrNor() {
        Boolean val = true;

        Row headCurrentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (headCurrentRow != null) {
            Integer coaId = null;
            Integer eoId = null;
            String dispName = null;
            if (headCurrentRow.getAttribute("ReqTyp").equals("I")) { // Inhouse Basis
                dispName = "Driver";

                eoId = (Integer) headCurrentRow.getAttribute("DriverEoId");
            } else { /// Transporter Basis
                dispName = "Transporter";

                eoId = (Integer) headCurrentRow.getAttribute("TrnspId");
            }

            if (eoId != null) {
                coaId = EbizParams.getCoaIdFrmEoId(this, eoId);

                if (coaId != null && coaId == -1) {
                    val = false;

                    ADFModelUtils.showFormattedFacesMessage( ADFModelUtils.resolvRsrc("MSG.2033")+ dispName + ".",
                                                            ADFModelUtils.resolvRsrc("MSG.2035")+ADFModelUtils.resolvRsrc("MSG.2037") +
                                                            dispName + " !", FacesMessage.SEVERITY_ERROR);
                }
            }
        }

        return val;
    }

    /**
     * Method which will add advance detail from temporary table to SLS$TRNP$LO$EO$ADV
     */
    public void addAdvanceDtl() {
        Row headCurrentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (headCurrentRow != null) {
            Row currentRow = this.getTempAdvanceVO1().getCurrentRow();
            if (currentRow != null) {
                if (headCurrentRow.getAttribute("PayModeTrans") != null) {
                    if (currentRow.getAttribute("PaymntAmtTrans") != null) {
                        if (currentRow.getAttribute("PaymntDtTrans") != null) {
                            ViewObjectImpl advVO1 = this.getSlsTrnpLoEoAdvVO1();
                            Row createRow = advVO1.createRow();

                            if (headCurrentRow != null) {

                                if (headCurrentRow.getAttribute("ReqTyp").equals("I")) { // Inhouse Basis
                                    createRow.setAttribute("EoId", headCurrentRow.getAttribute("DriverEoId"));
                                } else { /// Transporter Basis
                                    createRow.setAttribute("EoId", headCurrentRow.getAttribute("TrnspId"));
                                }
                                //createRow.setAttribute("BankCashCoaId",headCurrentRow.getAttribute("AdvCoaIdTrans"));
                                createRow.setAttribute("BankCashCoaId", new Integer(0));
                                createRow.setAttribute("PayMode", headCurrentRow.getAttribute("PayModeTrans"));
                                createRow.setAttribute("PayTypeNo", currentRow.getAttribute("PaymntTypNoTrans"));
                                createRow.setAttribute("PayTypeDt", currentRow.getAttribute("PaymntDtTrans"));
                                createRow.setAttribute("BankAcNo", currentRow.getAttribute("PaymntBankAccNoTrans"));
                                //createRow.setAttribute("AddsId", currentRow.getAttribute("PaymntAddsTrans"));
                                createRow.setAttribute("Remarks", currentRow.getAttribute("PaymntRemarksTrans"));

                                createRow.setAttribute("TotAmtSp", currentRow.getAttribute("PaymntAmtTrans"));

                                Row row = this.getSlsTrnpLoVO1().getCurrentRow();
                                Number convFctr = new Number(1);
                                if (row != null) {
                                    convFctr = (Number) row.getAttribute("CurrConvFctr");
                                }

                                createRow.setAttribute("TotAmtBs",
                                                       ((Number) currentRow.getAttribute("PaymntAmtTrans")).multiply(convFctr));

                                Row[] allRowsInRange = advVO1.getAllRowsInRange();
                                Integer srNo = 0;
                                for (Row r : allRowsInRange) {
                                    Integer attribute = (Integer) r.getAttribute("SrNo");
                                    if (attribute != null && attribute >= srNo) {
                                        srNo = attribute;
                                    }
                                }

                                createRow.setAttribute("SrNo", srNo + 1);

                                advVO1.insertRow(createRow);

                                this.getTempAdvanceVO1().executeQuery();
                            }
                        } else {
                            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("LBL.2946"),
                                                                    ADFModelUtils.resolvRsrc("MSG.539"),
                                                                    FacesMessage.SEVERITY_ERROR);
                        }
                    } else {
                        ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("LBL.2946"),
                                                                ADFModelUtils.resolvRsrc("MSG.977"),
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                } else {
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("LBL.2946"),
                                                            ADFModelUtils.resolvRsrc("MSG.2042"), FacesMessage.SEVERITY_ERROR);
                }
            } else {
                ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("LBL.2946"), ADFModelUtils.resolvRsrc("MSG.126"),
                                                        FacesMessage.SEVERITY_ERROR);

            }
        }
    }

    /**
     * Container's getter for SlsTrnpRoutePrfDtl1.
     * @return SlsTrnpRoutePrfDtl1
     */
    public ViewObjectImpl getSlsTrnpRoutePrfDtlVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRoutePrfDtlVO1");
    }

    /**
     * Method which will populate route detail from SLS$TRNP$ROUTE$PRF$DTL to SLS$TRNP$LO$ROUTE$DTL
     */
    
    public void fetchRouteDtlData() {
        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("LoBasis") != null) {
            Integer loBasis = (Integer) currentRow.getAttribute("LoBasis");
            if (loBasis == 6) { /// In case of Direct Order
                ViewObjectImpl dtlVO1 = this.getSlsTrnpRoutePrfDtlVO1();
                dtlVO1.setRangeSize(-1);
                dtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                dtlVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                dtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                dtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

                dtlVO1.setNamedWhereClauseParam("BindRouteId",
                                                this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("RouteId"));

                dtlVO1.executeQuery();

                ViewObjectImpl routeDtl = this.getSlsTrnpLoRouteDtlVO1();
                for (Row r : dtlVO1.getAllRowsInRange()) {
                    Row createRow = routeDtl.createRow();

                    createRow.setAttribute("DeparturePnt", r.getAttribute("DeparturePnt"));
                    createRow.setAttribute("ArrivalPnt", r.getAttribute("ArrivalPnt"));

                    if (currentRow.getAttribute("RateFctr").toString().equalsIgnoreCase("D"))
                        createRow.setAttribute("TotVal", r.getAttribute("Dist"));

                    createRow.setAttribute("Uom", r.getAttribute("UomDist"));
                    createRow.setAttribute("SlNo", r.getAttribute("SlNo"));

                    routeDtl.insertRow(createRow);
                }

                //// Following code will insert data from SlsTrnpRouteOcVw to SlsTrnpLoOc VO
                ViewObjectImpl trnpRouteOcVwVo1 = this.getSlsTrnpRouteOcVwVO1();
                trnpRouteOcVwVo1.setRangeSize(-1);
                trnpRouteOcVwVo1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                trnpRouteOcVwVo1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                trnpRouteOcVwVo1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                trnpRouteOcVwVo1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                trnpRouteOcVwVo1.setNamedWhereClauseParam("BindDocId",
                                                          this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("RouteId"));

                trnpRouteOcVwVo1.executeQuery();

                Row[] trnpRouteOcRow = trnpRouteOcVwVo1.getAllRowsInRange();
                ViewObjectImpl trnpLoOcVo2 = this.getSlsTrnpLoOcVO2();
                for (Row trnpLoRow : trnpRouteOcRow) {
                    Row createRow = trnpLoOcVo2.createRow();
                    createRow.setAttribute("CldId", this.getCldIdValue());
                    createRow.setAttribute("SlocId", this.getSlocIdValue());
                    createRow.setAttribute("HoOrgId", this.getHoOrgIdValue());
                    createRow.setAttribute("OrgId", this.getOrgIdValue());
                    createRow.setAttribute("DocId", currentRow.getAttribute("DocId"));
                    createRow.setAttribute("DeparturePnt", trnpLoRow.getAttribute("DeparturePnt"));
                    createRow.setAttribute("ArrivalPnt", trnpLoRow.getAttribute("ArrivalPnt"));
                    createRow.setAttribute("CoaId", trnpLoRow.getAttribute("CoaId"));
                    createRow.setAttribute("TranType", trnpLoRow.getAttribute("TranType"));
                    createRow.setAttribute("OcId", trnpLoRow.getAttribute("OcId"));
                    createRow.setAttribute("AmtSpOc", trnpLoRow.getAttribute("AmtSpOc"));
                    createRow.setAttribute("AmtSp", trnpLoRow.getAttribute("AmtSp"));
                    createRow.setAttribute("AmtBs", trnpLoRow.getAttribute("AmtBs"));
                    createRow.setAttribute("OcCat", trnpLoRow.getAttribute("OcCat"));
                    createRow.setAttribute("CurrId", trnpLoRow.getAttribute("CurrId"));
                    createRow.setAttribute("CurrRate", trnpLoRow.getAttribute("CurrRate"));

                    trnpLoOcVo2.insertRow(createRow);
                }
                this.getSlsTrnpLoOcVO1().executeQuery();


            } else if (loBasis == 7) { /// In case of Requisition Based data will be populated from Loading Request
                insLrDataToLoTable((String) currentRow.getAttribute("DocId"), (String) currentRow.getAttribute("LrId"));
            }
            else
            {
                System.out.println("Inside Transfer Order condition !!");    
            }
        }
    }

    /**
     * Method which will fetch data from Lr Tables and insert into Lo Tables
     */
    private void insLrDataToLoTable(String loDocId, String lrDocId) {
        if (loDocId != null && lrDocId != null) {
            //// Following code will insert data from SlsTrnpLrRouteDtl to SlsTrnpLoRouteDtl Vo
            ViewObjectImpl dtlVwVO1 = this.getSlsTrnpLrRouteDtlVwVO1();
            dtlVwVO1.setRangeSize(-1);
            dtlVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            dtlVwVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            dtlVwVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            dtlVwVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            dtlVwVO1.setNamedWhereClauseParam("BindDocId", lrDocId);
            dtlVwVO1.executeQuery();

            Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();

            Row[] allRowsInRange = dtlVwVO1.getAllRowsInRange();
            System.out.println("all rows in range lr :: "+allRowsInRange.length);
            ViewObjectImpl dtlVO2 = this.getSlsTrnpLoRouteDtlVO2();
            for (Row dtlVwRow : allRowsInRange) {
                Row createRow = dtlVO2.createRow();
                createRow.setAttribute("CldId", this.getCldIdValue());
                createRow.setAttribute("SlocId", this.getSlocIdValue());
                createRow.setAttribute("HoOrgId", this.getHoOrgIdValue());
                createRow.setAttribute("OrgId", this.getOrgIdValue());
                createRow.setAttribute("DocId", loDocId);
                createRow.setAttribute("DeparturePnt", dtlVwRow.getAttribute("DeparturePnt"));
                createRow.setAttribute("DepartureDate", dtlVwRow.getAttribute("DepartureDate"));
                createRow.setAttribute("ArrivalPnt", dtlVwRow.getAttribute("ArrivalPnt"));
                createRow.setAttribute("ArrivalDate", dtlVwRow.getAttribute("ArrivalDate"));
                createRow.setAttribute("TotVal", dtlVwRow.getAttribute("Distance"));
                createRow.setAttribute("Uom", dtlVwRow.getAttribute("UomDist"));
                createRow.setAttribute("SlNo", dtlVwRow.getAttribute("SlNo"));

                dtlVO2.insertRow(createRow);
            }

            this.getSlsTrnpLoRouteDtlVO1().executeQuery();

            //// Following code will insert data from SlsTrnpLrEouteEo To SlsTrnpLoRouteEo VO
            ViewObjectImpl eoVwVO1 = this.getSlsTrnpLrRouteEoVwVO1();
            eoVwVO1.setRangeSize(-1);
            eoVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            eoVwVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            eoVwVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            eoVwVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            eoVwVO1.setNamedWhereClauseParam("BindDocId", lrDocId);

            eoVwVO1.executeQuery();

            Row[] inRange = eoVwVO1.getAllRowsInRange();
            ViewObjectImpl eoVO2 = this.getSlsTrnpLoRouteEoVO2();
            for (Row inRow : inRange) {
                Row createRow = eoVO2.createRow();
                createRow.setAttribute("CldId", this.getCldIdValue());
                createRow.setAttribute("SlocId", this.getSlocIdValue());
                createRow.setAttribute("HoOrgId", this.getHoOrgIdValue());
                createRow.setAttribute("OrgId", this.getOrgIdValue());
                createRow.setAttribute("DocId", loDocId);
                createRow.setAttribute("DeparturePnt", inRow.getAttribute("DeparturePnt"));
                createRow.setAttribute("ArrivalPnt", inRow.getAttribute("ArrivalPnt"));
                createRow.setAttribute("EoId", inRow.getAttribute("EoId"));
                createRow.setAttribute("Rate",
                                       this.getRateFromRateContract((Integer) inRow.getAttribute("EoId"),
                                                                    (String) currentRow.getAttribute("RateBasis"),
                                                                    (String) currentRow.getAttribute("RateFctr"),
                                                                    (Integer) currentRow.getAttribute("VehicleTyp"),
                                                                    (Integer) currentRow.getAttribute("CurrIdSp"),
                                                                    null));

                eoVO2.insertRow(createRow);
            }
            this.getSlsTrnpLoRouteEoVO1().executeQuery();

            /// Following code will insert data from SlsTrnpLRDocSrc to SlsTrnpLoDocSrc VO
            ViewObjectImpl docSrcVwVO1 = this.getSlsTrnpLrDocSrcVwVO1();
            docSrcVwVO1.setRangeSize(-1);
            docSrcVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            docSrcVwVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            docSrcVwVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            docSrcVwVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            docSrcVwVO1.setNamedWhereClauseParam("BindDocId", lrDocId);

            docSrcVwVO1.executeQuery();

            Row[] range = docSrcVwVO1.getAllRowsInRange();
            ViewObjectImpl docSrcVO2 = this.getSlsTrnpLoDocSrcVO2();
            for (Row docSrcRange : range) {
                Row createRow = docSrcVO2.createRow();
                createRow.setAttribute("CldId", this.getCldIdValue());
                createRow.setAttribute("SlocId", this.getSlocIdValue());
                createRow.setAttribute("HoOrgId", this.getHoOrgIdValue());
                createRow.setAttribute("OrgId", this.getOrgIdValue());
                createRow.setAttribute("DocId", loDocId);
                createRow.setAttribute("DeparturePnt", docSrcRange.getAttribute("DeparturePnt"));
                createRow.setAttribute("ArrivalPnt", docSrcRange.getAttribute("ArrivalPnt"));
                createRow.setAttribute("EoId", docSrcRange.getAttribute("EoId"));
                createRow.setAttribute("DocIdSrc", docSrcRange.getAttribute("DocIdSrc"));

                docSrcVO2.insertRow(createRow);
            }
            this.getSlsTrnpLoDocSrcVO1().executeQuery();

            //// Following code will insert data from SlsTrnpLrProdDtl to SlsTrnpLoProdDtl VO
            ViewObjectImpl lrProdDtlVwVO1 = this.getSlsTrnpLrProdDtlVwVO1();
            lrProdDtlVwVO1.setRangeSize(-1);
            lrProdDtlVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            lrProdDtlVwVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            lrProdDtlVwVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            lrProdDtlVwVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            lrProdDtlVwVO1.setNamedWhereClauseParam("BindDocId", lrDocId);

            lrProdDtlVwVO1.executeQuery();

            Row[] row = lrProdDtlVwVO1.getAllRowsInRange();
            ViewObjectImpl trnpProdDtlVO2 = this.getSlsTrnpLoProdDtlVO2();
            for (Row lrProdRow : row) {
                Row createRow = trnpProdDtlVO2.createRow();
                createRow.setAttribute("CldId", this.getCldIdValue());
                createRow.setAttribute("SlocId", this.getSlocIdValue());
                createRow.setAttribute("HoOrgId", this.getHoOrgIdValue());
                createRow.setAttribute("OrgId", this.getOrgIdValue());
                createRow.setAttribute("DocId", loDocId);
                createRow.setAttribute("DeparturePnt", lrProdRow.getAttribute("DeparturePnt"));
                createRow.setAttribute("ArrivalPnt", lrProdRow.getAttribute("ArrivalPnt"));
                createRow.setAttribute("EoId", lrProdRow.getAttribute("EoId"));
                createRow.setAttribute("DocIdSrc", lrProdRow.getAttribute("DocIdSrc"));
                createRow.setAttribute("ItmId", lrProdRow.getAttribute("ItmId"));
                createRow.setAttribute("ItmWt", lrProdRow.getAttribute("ItmWt"));
                createRow.setAttribute("ItmWtUom", lrProdRow.getAttribute("ItmWtUom"));
                createRow.setAttribute("ShipQty", lrProdRow.getAttribute("ItmQty"));
                createRow.setAttribute("ShipQtyUom", lrProdRow.getAttribute("QtyUom"));
                createRow.setAttribute("Rate",
                                       this.getRateFromRateContract((Integer) lrProdRow.getAttribute("EoId"),
                                                                    (String) currentRow.getAttribute("RateBasis"),
                                                                    (String) currentRow.getAttribute("RateFctr"),
                                                                    (Integer) currentRow.getAttribute("VehicleTyp"),
                                                                    (Integer) currentRow.getAttribute("CurrIdSp"),
                                                                    (String) lrProdRow.getAttribute("ItmId")));
                trnpProdDtlVO2.insertRow(createRow);
            }

            this.getSlsTrnpLoProdDtlVO1().executeQuery();

            //// Following code will insert data from SlsTrnpLrOc to SlsTrnpLoOc VO
            ViewObjectImpl trnpLrOcVwVo1 = this.getSlsTrnpLrOcVwVO1();
            trnpLrOcVwVo1.setRangeSize(-1);
            trnpLrOcVwVo1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            trnpLrOcVwVo1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            trnpLrOcVwVo1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            trnpLrOcVwVo1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            trnpLrOcVwVo1.setNamedWhereClauseParam("BindDocId", lrDocId);

            trnpLrOcVwVo1.executeQuery();

            Row[] trnpLrOcRow = trnpLrOcVwVo1.getAllRowsInRange();
            ViewObjectImpl trnpLoOcVo2 = this.getSlsTrnpLoOcVO2();
            for (Row trnpLrRow : trnpLrOcRow) {
                Row createRow = trnpLoOcVo2.createRow();
                createRow.setAttribute("CldId", this.getCldIdValue());
                createRow.setAttribute("SlocId", this.getSlocIdValue());
                createRow.setAttribute("HoOrgId", this.getHoOrgIdValue());
                createRow.setAttribute("OrgId", this.getOrgIdValue());
                createRow.setAttribute("DocId", loDocId);
                createRow.setAttribute("DeparturePnt", trnpLrRow.getAttribute("DeparturePnt"));
                createRow.setAttribute("ArrivalPnt", trnpLrRow.getAttribute("ArrivalPnt"));
                createRow.setAttribute("CoaId", trnpLrRow.getAttribute("CoaId"));
                createRow.setAttribute("TranType", trnpLrRow.getAttribute("TranType"));
                createRow.setAttribute("OcId", trnpLrRow.getAttribute("OcId"));
                createRow.setAttribute("AmtSpOc", trnpLrRow.getAttribute("AmtSpOc"));
                createRow.setAttribute("AmtSp", trnpLrRow.getAttribute("AmtSp"));
                createRow.setAttribute("AmtBs", trnpLrRow.getAttribute("AmtBs"));
                createRow.setAttribute("OcCat", trnpLrRow.getAttribute("OcCat"));
                createRow.setAttribute("CurrId", trnpLrRow.getAttribute("CurrId"));
                createRow.setAttribute("CurrRate", trnpLrRow.getAttribute("CurrRate"));

                trnpLoOcVo2.insertRow(createRow);
            }
            this.getSlsTrnpLoOcVO1().executeQuery();
        }
    }

    /**
     * Method which will set by default customer name if it is single customer
     */
    public void setSingleCustByDflt() {
        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("CustIdTrans") != null) {
            String multiCustFlg = (String) currentRow.getAttribute("MultipleCustFlg");
            Integer loSrcBasis = (Integer) currentRow.getAttribute("LoSrcBasis");
            if (multiCustFlg.equalsIgnoreCase("N")) {
                ViewObjectImpl dtlVO1 = this.getSlsTrnpLoRouteDtlVO1();
                Row[] allRowsInRange = dtlVO1.getAllRowsInRange();

                ViewObjectImpl eoVO2 = this.getSlsTrnpLoRouteEoVO2();
                Number rate = new Number(0);
                for (Row r : allRowsInRange) {
                    System.out.println("all rows in range :: "+allRowsInRange.length);
                    /// Following will set the value of rate contract if it is present
                    rate =
                getRateFromRateContract((Integer) currentRow.getAttribute("CustIdTrans"),
                                        (String) currentRow.getAttribute("RateBasis"),
                                        (String) currentRow.getAttribute("RateFctr"),
                                        (Integer) currentRow.getAttribute("VehicleTyp"),
                                        (Integer) currentRow.getAttribute("CurrIdSp"), null);

                    // Following code will insert/Create row in SLS$TRNP$LO$ROUTE$EO
                    if(currentRow.getAttribute("CustIdTrans") !=null && currentRow.getAttribute("CustIdTrans").toString().equalsIgnoreCase("0")
                        && currentRow.getAttribute("LoSrcBasis") !=null && !currentRow.getAttribute("LoSrcBasis").toString().equalsIgnoreCase("39"))
                    {
                        System.out.println("Customer Id :: "+currentRow.getAttribute("CustIdTrans"));    
                    }
                    else if(currentRow.getAttribute("LoSrcBasis").toString().equalsIgnoreCase("39"))
                    {
                        if(currentRow.getAttribute("LoBasis").toString().equalsIgnoreCase("6"))
                        {
                            System.out.println("Inside 39 & loBasis = 6 else if condition !!");
                            Row createRow = eoVO2.createRow();
                            createRow.setAttribute("CldId", this.getCldIdValue());
                            createRow.setAttribute("SlocId", this.getSlocIdValue());
                            createRow.setAttribute("HoOrgId", this.getHoOrgIdValue());
                            createRow.setAttribute("OrgId", this.getOrgIdValue());
                            createRow.setAttribute("DocId", r.getAttribute("DocId"));
                            createRow.setAttribute("DeparturePnt", r.getAttribute("DeparturePnt"));
                            createRow.setAttribute("ArrivalPnt", r.getAttribute("ArrivalPnt"));
                            createRow.setAttribute("EoId", currentRow.getAttribute("CustIdTrans"));
                            createRow.setAttribute("Rate", rate);
                            eoVO2.insertRow(createRow); 
                        }
                        else
                        {
                            System.out.println("Inside 39 & loBasis != 6 else if condition !!");    
                        }
                    }
                    else if(!currentRow.getAttribute("CustIdTrans").toString().equalsIgnoreCase("0"))
                    {
                        System.out.println("Inside !0 else if condition !!");
                        Row createRow = eoVO2.createRow();
                        createRow.setAttribute("CldId", this.getCldIdValue());
                        createRow.setAttribute("SlocId", this.getSlocIdValue());
                        createRow.setAttribute("HoOrgId", this.getHoOrgIdValue());
                        createRow.setAttribute("OrgId", this.getOrgIdValue());
                        createRow.setAttribute("DocId", r.getAttribute("DocId"));
                        createRow.setAttribute("DeparturePnt", r.getAttribute("DeparturePnt"));
                        createRow.setAttribute("ArrivalPnt", r.getAttribute("ArrivalPnt"));
                        createRow.setAttribute("EoId", currentRow.getAttribute("CustIdTrans"));
                        createRow.setAttribute("Rate", rate);
                        eoVO2.insertRow(createRow);   
                    }
                    else
                    {
                        System.out.println("Inside last else condition !! ");
                    }
                    System.out.println("Row inserted in EO table !!"+r);
                }

                eoVO2.executeQuery();
                this.getSlsTrnpLoRouteEoVO1().executeQuery();
            }
            else
            {
                System.out.println("Inside loSrcBasis != 39 condition :: "+loSrcBasis);    
            }
        }
    }

    /**
     * Container's getter for LOVPurchaseOrder1.
     * @return LOVPurchaseOrder1
     */
    public ViewObjectImpl getLOVPurchaseOrderVO1() {
        return (ViewObjectImpl) findViewObject("LOVPurchaseOrderVO1");
    }

    /**
     * Container's getter for SlsTrnpLoOc1.
     * @return SlsTrnpLoOc1
     */
    public ViewObjectImpl getSlsTrnpLoOcVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoOcVO1");
    }

    /**
     * Container's getter for SlsTrnpLoRouteDtlToTrnpLoOcVL1.
     * @return SlsTrnpLoRouteDtlToTrnpLoOcVL1
     */
    public ViewLinkImpl getSlsTrnpLoRouteDtlToTrnpLoOcVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLoRouteDtlToTrnpLoOcVL1");
    }

    /**
     * Container's getter for VwSlsTrnpOcVw1.
     * @return VwSlsTrnpOcVw1
     */
    public ViewObjectImpl getVwSlsTrnpOcVwVO1() {
        return (ViewObjectImpl) findViewObject("VwSlsTrnpOcVwVO1");
    }

    /**
     * Container's getter for LOVCoaId1.
     * @return LOVCoaId1
     */
    public ViewObjectImpl getLOVCoaIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVCoaIdVO1");
    }

    /**
     * Container's getter for LOVOcCat1.
     * @return LOVOcCat1
     */
    public ViewObjectImpl getLOVOcCatVO1() {
        return (ViewObjectImpl) findViewObject("LOVOcCatVO1");
    }

    public void addOcFromVW() {
        Row newRow = this.getSlsTrnpLoOcVO1().getCurrentRow();
        newRow.setAttribute("CoaId", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("CoaId"));
        newRow.setAttribute("TranType", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("OcCalcType"));
        newRow.setAttribute("OcId", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("OcId"));
        newRow.setAttribute("AmtSpOc", new Number(0));
        newRow.setAttribute("AmtSp", new Number(0));
        newRow.setAttribute("AmtBs", new Number(0));
        newRow.setAttribute("OcCat", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("OcCat"));
        newRow.setAttribute("CurrId", this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("CurrIdSp"));
        newRow.setAttribute("CurrRate", this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("CurrConvFctr"));
    }

    /**
     * Container's getter for PurchaseOrdItemDtl1.
     * @return PurchaseOrdItemDtl1
     */
    public ViewObjectImpl getPurchaseOrdItemDtlVO1() {
        return (ViewObjectImpl) findViewObject("PurchaseOrdItemDtlVO1");
    }

    /**
     * Container's getter for SlsTrnpLrRouteDtlVw1.
     * @return SlsTrnpLrRouteDtlVw1
     */
    public ViewObjectImpl getSlsTrnpLrRouteDtlVwVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrRouteDtlVwVO1");
    }

    /**
     * Container's getter for SlsTrnpLrRouteEoVw1.
     * @return SlsTrnpLrRouteEoVw1
     */
    public ViewObjectImpl getSlsTrnpLrRouteEoVwVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrRouteEoVwVO1");
    }

    /**
     * Container's getter for SlsTrnpLrDocSrcVw1.
     * @return SlsTrnpLrDocSrcVw1
     */
    public ViewObjectImpl getSlsTrnpLrDocSrcVwVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrDocSrcVwVO1");
    }

    /**
     * Container's getter for SlsTrnpLrProdDtlVw1.
     * @return SlsTrnpLrProdDtlVw1
     */
    public ViewObjectImpl getSlsTrnpLrProdDtlVwVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrProdDtlVwVO1");
    }

    /**
     * Container's getter for SlsTrnpLrOcVw1.
     * @return SlsTrnpLrOcVw1
     */
    public ViewObjectImpl getSlsTrnpLrOcVwVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrOcVwVO1");
    }

    /**
     * Container's getter for SlsTrnpLoOc1.
     * @return SlsTrnpLoOc1
     */
    public ViewObjectImpl getSlsTrnpLoOcVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoOcVO2");
    }

    /**
     * Container's getter for LOVLocNm1.
     * @return LOVLocNm1
     */
    public ViewObjectImpl getLOVLocNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVLocNmVO1");
    }

    /**
     * Method which will update total amount based on user entry on product detail
     */
    public void updateItemValsOnRoute() {
        if (this.getSlsTrnpLoVO1().getCurrentRow() != null) {
            Row currentRow = this.getSlsTrnpLoRouteDtlVO1().getCurrentRow();
            if (currentRow != null) {
                //  Object totProdRateTrans = currentRow.getAttribute("TotProdRateTrans");

                Object totAmtSpTrans = currentRow.getAttribute("TotAmtSpTrans");
                Object totAmtBsTrans = currentRow.getAttribute("TotAmtBsTrans");
                currentRow.setAttribute("AmtSp", totAmtSpTrans);
                currentRow.setAttribute("AmtBs", totAmtBsTrans);

                Object totProdWtTrans = currentRow.getAttribute("TotProdWtTrans");
                if (this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("RateFctr").toString().equals("W"))
                    currentRow.setAttribute("TotVal", totProdWtTrans);

            }
        }
    }

    /**
     * Method which will insert or update data present in Tr and TrLines based on user selection of tax rule
     */
    public void insertIntoSlsTrnpTrAndTrLines(Integer taxRuleId) {
        if (taxRuleId != null) {
            Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
            if (currentRow != null) {
                Object docId = currentRow.getAttribute("DocId");
                Object totAmtSpTrans = currentRow.getAttribute("TotAmtSpTrans");
                Object currConvFctr = currentRow.getAttribute("CurrConvFctr");
                if (docId != null && totAmtSpTrans != null && currConvFctr != null) {
                    ViewObjectImpl trnpLoTrVo2 = this.getSlsTrnpLoTrVO2();

                    RowQualifier rQ = new RowQualifier(trnpLoTrVo2);
                    rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                      " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" +
                                      this.getOrgIdValue() + "' and DocId ='" + docId + "'");
                    Row tr = null;

                    Row[] filteredRows = trnpLoTrVo2.getFilteredRows(rQ);
                    if (filteredRows.length > 0) {
                        tr = filteredRows[0];
                    } else {
                        tr = trnpLoTrVo2.createRow();

                        tr.setAttribute("CldId", this.getCldIdValue());
                        tr.setAttribute("SlocId", this.getSlocIdValue());
                        tr.setAttribute("HoOrgId", this.getHoOrgIdValue());
                        tr.setAttribute("OrgId", this.getOrgIdValue());
                        tr.setAttribute("DocId", docId);
                        tr.setAttribute("TaxRuleId", taxRuleId);

                        trnpLoTrVo2.insertRow(tr);
                    }
                    tr.setAttribute("TaxableAmtSp", totAmtSpTrans);
                    tr.setAttribute("TaxableAmtBs", ((Number) totAmtSpTrans).multiply((Number) currConvFctr));

                    Object val = callStoredFunction(Types.NUMERIC, "fn_trnp_ins_Lo_tr_lines(?,?,?,?,?,?,?,?)", new Object[] {
                                                    this.getSlocIdValue(), this.getCldIdValue(), this.getHoOrgIdValue(),
                                                    this.getOrgIdValue(), docId, taxRuleId, totAmtSpTrans, currConvFctr
                    });

                    if (val != null) {
                        tr.setAttribute("TaxAmt", val);
                        try {
                            tr.setAttribute("TaxAmtBs", ((Number) currConvFctr).multiply(new Number(val)));
                        } catch (SQLException e) {
                            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.1478"),
                                                                    ADFModelUtils.resolvRsrc("MSG.2050")+ " 'fn_trnp_ins_Lo_tr_lines' !",
                                                                    FacesMessage.SEVERITY_ERROR);
                            e.printStackTrace();
                        }
                    }
                    this.getSlsTrnpLoTrVO1().executeQuery();
                    this.getSlsTrnpLoTrLinesVO1().executeQuery();
                }
            }
        }
    }

    /**
     * Container's getter for SlsTrnpLoTr1.
     * @return SlsTrnpLoTr1
     */
    public ViewObjectImpl getSlsTrnpLoTrVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoTrVO1");
    }

    /**
     * Container's getter for SlsTrnpLoToTrnpLoTrVL1.
     * @return SlsTrnpLoToTrnpLoTrVL1
     */
    public ViewLinkImpl getSlsTrnpLoToTrnpLoTrVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLoToTrnpLoTrVL1");
    }

    /**
     * Container's getter for SlsTrnpLoTrLines1.
     * @return SlsTrnpLoTrLines1
     */
    public ViewObjectImpl getSlsTrnpLoTrLinesVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoTrLinesVO1");
    }

    /**
     * Container's getter for SlsTrnpLoTrToTrnpLoTrLinesVL1.
     * @return SlsTrnpLoTrToTrnpLoTrLinesVL1
     */
    public ViewLinkImpl getSlsTrnpLoTrToTrnpLoTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLoTrToTrnpLoTrLinesVL1");
    }

    /**
     * Container's getter for SlsTrnpLoTr1.
     * @return SlsTrnpLoTr1
     */
    public ViewObjectImpl getSlsTrnpLoTrVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoTrVO2");
    }

    /**
     * Method for duplicate check of customer name validator
     */
    public Boolean chkCustNameExistOrNot(String custName) {
        Boolean val = true;
        if (custName != null) {
            ViewObjectImpl appEoVO1 = this.getLOVAppEoVO1();
            appEoVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            appEoVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            appEoVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            appEoVO1.setNamedWhereClauseParam("BindEoId", null);
            appEoVO1.setNamedWhereClauseParam("BindEoNm", custName);

            appEoVO1.executeQuery();

            Row[] allRowsInRange = appEoVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0 && allRowsInRange[0].getAttribute("EoId") != null) {

                ViewObjectImpl eoVO1 = this.getSlsTrnpLoRouteEoVO1();
                Row[] filteredRows = eoVO1.getFilteredRows("EoId", allRowsInRange[0].getAttribute("EoId"));

                if (filteredRows.length > 0) {
                    val = false;
                }
            }
        }
        return val;
    }

    /**
     * Method for duplicate check of document src
     */
    public Boolean chkDocSrcExistOrNot(String docSrcNm) {
        Boolean val = true;
        if (docSrcNm != null) {
            Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("LoSrcBasis") != null) {
                Integer loSrcBasis = (Integer) currentRow.getAttribute("LoSrcBasis");
                //System.out.println("In getter from LoDocSrc VORowImpl is " + loSrcBasis);
                if (loSrcBasis == 4) { /// For Customer
                    ViewObjectImpl idVO1 = this.getLOVShipmentIdVO1();
                    idVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    idVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    idVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                    idVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    idVO1.setNamedWhereClauseParam("BindDocId", null);
                    idVO1.setNamedWhereClauseParam("BindStat", null);

                    idVO1.executeQuery();

                    RowQualifier rQ = new RowQualifier(idVO1);
                    rQ.setWhereClause("ShipmntId ='" + docSrcNm + "'");
                    Row[] filteredRows = idVO1.getFilteredRows(rQ);

                    if (filteredRows.length > 0 && filteredRows[0].getAttribute("DocId") != null) {

                        ViewObjectImpl docSrcVO1 = this.getSlsTrnpLoDocSrcVO1();
                        Row[] row = docSrcVO1.getFilteredRows("DocIdSrc", filteredRows[0].getAttribute("DocId"));

                        if (row.length > 0) {
                            val = false;
                        }
                    }

                } else if (loSrcBasis == 5) { /// For Supplier)
                    ViewObjectImpl impl = this.getLOVPurchaseOrderVO1();
                    impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    impl.setNamedWhereClauseParam("BindDocId", null);
                    impl.setNamedWhereClauseParam("BindCurrId", currentRow.getAttribute("CurrIdSp"));
                    impl.setNamedWhereClauseParam("BindEoId", null);
                    impl.setNamedWhereClauseParam("BindPoMode", 231);

                    impl.executeQuery();

                    RowQualifier rQ = new RowQualifier(impl);
                    rQ.setWhereClause("AuthPoNo ='" + docSrcNm + "'");
                    Row[] filteredRows = impl.getFilteredRows(rQ);

                    if (filteredRows.length > 0 && filteredRows[0].getAttribute("DocId") != null) {

                        ViewObjectImpl docSrcVO1 = this.getSlsTrnpLoDocSrcVO1();
                        Row[] row = docSrcVO1.getFilteredRows("DocIdSrc", filteredRows[0].getAttribute("DocId"));

                        if (row.length > 0) {
                            val = false;
                        }
                    }
                }
                else
                {
                    
                }
            }
        }
        return val;
    }

    /**
     * Method which will return ArrivalId and Departure Id
     */
    public String getLocIdFromName(String locNm) {
        String val = null;

        ViewObjectImpl impl = this.getLOVLocNmVO1();
        impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindLocId", null);

        impl.executeQuery();
        Row[] filteredRows = impl.getFilteredRows("AddsLoc", locNm);

        if (filteredRows.length > 0 && filteredRows[0].getAttribute("LocId") != null) {
            val = (String) filteredRows[0].getAttribute("LocId");
        }

        return val;
    }

    /**
     * Method for duplicate check of arival point and departure point
     */
    public Boolean chkRouteDtlExistOrNot(String deptId, String arrId) {
        Boolean val = true;
        if (deptId != null && arrId != null) {
            ViewObjectImpl dtlVO1 = this.getSlsTrnpLoRouteDtlVO1();
            RowQualifier rQ = new RowQualifier(dtlVO1);
            rQ.setWhereClause("DeparturePnt ='" + deptId + "' and ArrivalPnt ='" + arrId + "'");
            Row[] filteredRows = dtlVO1.getFilteredRows(rQ);
            if (filteredRows.length > 0) {
                if (dtlVO1.getCurrentRow() != filteredRows[0]) {
                    val = false;
                }
            }
        }
        return val;
    }

    /**
     * Container's getter for SlsTrnpRateCntrctVw1.
     * @return SlsTrnpRateCntrctVw1
     */
    public ViewObjectImpl getSlsTrnpRateCntrctVwVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRateCntrctVwVO1");
    }

    /**
     * Container's getter for SlsTrnpRateCntrctDtlVw1.
     * @return SlsTrnpRateCntrctDtlVw1
     */
    public ViewObjectImpl getSlsTrnpRateCntrctDtlVwVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRateCntrctDtlVwVO1");
    }

    /**
     * Method which will check whethere all mandatory fields were entered or not in Trip Detail
     */
    public Boolean chkMandatoryTripDtls() {
        Boolean val = true;
        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("RateBasis").toString().equalsIgnoreCase("F")) {
            ViewObjectImpl dtlVO1 = this.getSlsTrnpLoRouteDtlVO1();
            for (Row r : dtlVO1.getAllRowsInRange()) {
                if (r.getAttribute("ArrivalDate") != null && r.getAttribute("DepartureDate") != null &&
                    r.getAttribute("TotVal") != null) {
                    val = true;
                } else {
                    val = false;

                    String deptPoint = getLocNmBasedOnId((String) r.getAttribute("DeparturePnt"));
                    String arrivalPoint = getLocNmBasedOnId((String) r.getAttribute("ArrivalPnt"));

                    ADFModelUtils.showFormattedFacesMessage( ADFModelUtils.resolvRsrc("MSG.2946"),
                                                            ADFModelUtils.resolvRsrc("MSG.2044")+ ADFModelUtils.resolvRsrc("LBL.4466") +" : " +
                                                            deptPoint + " & " + ADFModelUtils.resolvRsrc("LBL.4469")+ " : " + arrivalPoint,
                                                            FacesMessage.SEVERITY_ERROR);

                    break;
                }
            }
        }
        return val;
    }

    /**
     * Method which will check all the mandatory fields of product were entered or not
     */
    public Boolean chkPrdFldsMandatoryEnteredOrNot() {
        Boolean val = true;

        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl dtlVO2 = this.getSlsTrnpLoProdDtlVO2();
            dtlVO2.setRangeSize(-1);
            dtlVO2.executeQuery();

            RowQualifier rQ = new RowQualifier(dtlVO2);
            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and DocId ='" + currentRow.getAttribute("DocId") + "'");

            for (Row r : dtlVO2.getFilteredRows(rQ)) {
                if (r.getAttribute("Rate") != null && r.getAttribute("ItmWt") != null) {
                    val = true;
                } else {
                    val = false;

                    String eoNm = getEoNmBasedOnId((Integer) r.getAttribute("EoId"));
                    String deptPoint = getLocNmBasedOnId((String) r.getAttribute("DeparturePnt"));
                    String arrivalPoint = getLocNmBasedOnId((String) r.getAttribute("ArrivalPnt"));
                    String docSrcId = getDocumentSrcBasedOnId((String) r.getAttribute("DocIdSrc"));
                    String itemName = getItemNameBasedOnItemId((String) r.getAttribute("ItmId"));

                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2946"),
                                                            ADFModelUtils.resolvRsrc("MSG.2044")+ ADFModelUtils.resolvRsrc("LBL.4466") +" : " +"</br>"+
                                                            deptPoint + " & " + ADFModelUtils.resolvRsrc("LBL.4469")+ " : " + arrivalPoint +"</br>"+
                                                             ADFModelUtils.resolvRsrc("LBL.299")+" : "+ eoNm +  ADFModelUtils.resolvRsrc("LBL.1893") +" : " +"</br>"+
                                                            docSrcId + ADFModelUtils.resolvRsrc("LBL.2452") + " : " + itemName,
                                                            FacesMessage.SEVERITY_ERROR);

                    break;
                }
            }
        }
        return val;
    }

    /**
     * Method which will check all the mandatory fields of product of current row were entered or not
     */
    public Boolean chkCurrentRowPrdFldsMandEnterOrNot() {
        Boolean val = true;

        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl dtlVO2 = this.getSlsTrnpLoProdDtlVO2();
            dtlVO2.setRangeSize(-1);
            dtlVO2.executeQuery();

            Row row = this.getSlsTrnpLoRouteDtlVO1().getCurrentRow();

            RowQualifier rQ = new RowQualifier(dtlVO2);
            rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                              " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                              "' and DocId ='" + row.getAttribute("DocId") + "' and DeparturePnt ='" +
                              row.getAttribute("DeparturePnt") + "' and ArrivalPnt ='" +
                              row.getAttribute("ArrivalPnt") + "'");

            for (Row r : dtlVO2.getFilteredRows(rQ)) {
                if ((r.getAttribute("Rate") != null && r.getAttribute("ItmWt") != null) && (((Number) r.getAttribute("Rate")).compareTo(0) > 0) && 
                       (((Number) r.getAttribute("ItmWt")).compareTo(0) > 0)) {
                    /* if((((Number) r.getAttribute("Rate")).compareTo(0) > 0) && 
                       (((Number) r.getAttribute("ItmWt")).compareTo(0) > 0)) */
                        val = true;
                    /*  else
                    {
                        val = false;
    
                        String eoNm = getEoNmBasedOnId((Integer) r.getAttribute("EoId"));
                        String docSrcId = getDocumentSrcBasedOnId((String) r.getAttribute("DocIdSrc"));
                        String itemName = getItemNameBasedOnItemId((String) r.getAttribute("ItmId"));
    
    
                        ADFModelUtils.showFormattedFacesMessage("Mandatory Fields are missing or Zero !",
                                                                "Please check following details Customer Name: " + eoNm +
                                                                " Source Document: " + docSrcId + " Item Name: " + itemName,
                                                                FacesMessage.SEVERITY_ERROR);
    
                        break;
                    } */
                } else {
                    val = false;

                    String eoNm = getEoNmBasedOnId((Integer) r.getAttribute("EoId"));
                    //String deptPoint = getLocNmBasedOnId((String) r.getAttribute("DeparturePnt"));
                    //String arrivalPoint = getLocNmBasedOnId((String) r.getAttribute("ArrivalPnt"));
                    String docSrcId = getDocumentSrcBasedOnId((String) r.getAttribute("DocIdSrc"));
                    String itemName = getItemNameBasedOnItemId((String) r.getAttribute("ItmId"));


                    ADFModelUtils.showFormattedFacesMessage( ADFModelUtils.resolvRsrc("LBL.2946"),
                                                             ADFModelUtils.resolvRsrc("MSG.2044")+"</br>"+
                                                             ADFModelUtils.resolvRsrc("LBL.299")+" : "+ eoNm +"</br>"+
                                                             ADFModelUtils.resolvRsrc("LBL.1893") +" : " + docSrcId +"</br>"+
                                                             ADFModelUtils.resolvRsrc("LBL.2452") + " : " + itemName,
                                                            FacesMessage.SEVERITY_ERROR);

                    return val;
                }
            }
        }
        return val;
    }

    /**
     * Method which will return Loc Name based on Id
     */
    public String getLocNmBasedOnId(String locId) {
        String locNm = null;
        if (locId != null) {
            ViewObjectImpl impl = this.getLOVLocNmVO1();
            impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            impl.setNamedWhereClauseParam("BindLocId", locId);

            impl.executeQuery();
            Row[] allRowsInRange = impl.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                locNm = (String) allRowsInRange[0].getAttribute("AddsLoc");
            }
        }
        return locNm;
    }

    /**
     * Method which will return EoNm based on EoId
     */
    public String getEoNmBasedOnId(Integer eoId) {
        String eoNm = null;
        if (eoId != null) {
            ViewObjectImpl appEoVO1 = this.getLOVAppEoVO1();
            appEoVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            appEoVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            appEoVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            appEoVO1.setNamedWhereClauseParam("BindEoId", eoId);
            appEoVO1.setNamedWhereClauseParam("BindEoNm", null);

            appEoVO1.executeQuery();
            Row[] allRowsInRange = appEoVO1.getAllRowsInRange();


            if (allRowsInRange.length > 0) {
                eoNm = (String) allRowsInRange[0].getAttribute("EoNm");
            }
        }
        return eoNm;
    }

    /**
     * Method which will return Item Name based in Item id
     */
    public String getItemNameBasedOnItemId(String itemId) {
        String itemName = null;
        if (itemId != null) {
            ViewObjectImpl impl = this.getLOVItemNmVO1();
            impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            impl.setNamedWhereClauseParam("BindItmId", itemId);
            impl.executeQuery();
            Row[] itemRowRange = impl.getAllRowsInRange();

            if (itemRowRange.length > 0) {
                itemName = (String) itemRowRange[0].getAttribute("ItmDesc");
            }
        }
        return itemName;
    }

    /**
     * Method which will return document source based on document Source Id
     */
    public String getDocumentSrcBasedOnId(String docSrcHexId) {
        String docSrcId = null;
        if (docSrcHexId != null) {
            Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();

            if (currentRow != null && currentRow.getAttribute("LoSrcBasis") != null) {
                Integer loSrcBasis = (Integer) currentRow.getAttribute("LoSrcBasis");
                //System.out.println("In getter from LoDocSrc VORowImpl is " + loSrcBasis);
                if (loSrcBasis == 4) { /// For Customer
                    ViewObjectImpl idVO1 = this.getLOVShipmentIdVO1();
                    idVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    idVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    idVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                    idVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    idVO1.setNamedWhereClauseParam("BindDocId", docSrcHexId);
                    idVO1.setNamedWhereClauseParam("BindStat", null);

                    idVO1.executeQuery();
                    Row[] allRow = idVO1.getAllRowsInRange();

                    if (allRow.length > 0) {
                        docSrcId = (String) allRow[0].getAttribute("ShipmntId");
                    }
                } else if (loSrcBasis == 5) { /// For Supplier
                    ViewObjectImpl impl = this.getLOVPurchaseOrderVO1();
                    impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    impl.setNamedWhereClauseParam("BindDocId", docSrcHexId);
                    impl.setNamedWhereClauseParam("BindCurrId", currentRow.getAttribute("CurrIdSp"));
                    impl.setNamedWhereClauseParam("BindEoId", null);
                    impl.setNamedWhereClauseParam("BindPoMode", 231);

                    impl.executeQuery();
                    Row[] inRange = impl.getAllRowsInRange();

                    if (inRange.length > 0) {
                        docSrcId = (String) inRange[0].getAttribute("AuthPoNo");
                    }
                }else if (loSrcBasis.equals(new Integer(39))) {
                           this.getLovTransferOrderVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
                           this.getLovTransferOrderVO1().setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
                           this.getLovTransferOrderVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
                           this.getLovTransferOrderVO1().executeQuery();
                           Row fr[] = this.getLovTransferOrderVO1().getFilteredRows("DocId", docSrcHexId);
                           if (fr.length > 0)
                               return (String) fr[0].getAttribute("TrfNo");
                       }
                else
                {
                    System.out.println("Inside else part !!");    
                }

            }
        }
        return docSrcId;
    }

    /**
     * Method which will get Coa Name based on Coa Id
     */
    public String getCoaNameBasedOnId(Integer coaId) {
        String coaName = null;
        if (coaId != null) {
            ViewObjectImpl coaIdVO1 = this.getLOVCoaIdVO1();

            coaIdVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            coaIdVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            coaIdVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            coaIdVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            coaIdVO1.setNamedWhereClauseParam("BindCoaId", coaId);
            coaIdVO1.executeQuery();
            Row fr[] = coaIdVO1.getFilteredRows("OrgCoaId", coaId);
            if (fr.length > 0) {
                return (String) fr[0].getAttribute("CoaNm");
            }
        }

        return coaName;
    }

    /**
     * Method which will set Departure Date
     */
    public void setDeptDateForNextSlNo(Timestamp arrivalDate) {
        if (arrivalDate != null) {
            Row currentRow = this.getSlsTrnpLoRouteDtlVO1().getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("SlNo") != null) {
                Row[] filteredRows =
                    this.getSlsTrnpLoRouteDtlVO1().getFilteredRows("SlNo",
                                                                   Integer.parseInt(currentRow.getAttribute("SlNo").toString()) +
                                                                   1);
                if (filteredRows.length > 0 && filteredRows[0] != currentRow) {
                    filteredRows[0].setAttribute("DepartureDate", arrivalDate);
                }
            }
        }
    }

    /**
     * Container's getter for PackItemDtl1.
     * @return PackItemDtl1
     */
    public ViewObjectImpl getPackItemDtlVO1() {
        return (ViewObjectImpl) findViewObject("PackItemDtlVO1");
    }

    /**
     * Container's getter for SlsTrnpRouteOcVw1.
     * @return SlsTrnpRouteOcVw1
     */
    public ViewObjectImpl getSlsTrnpRouteOcVwVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRouteOcVwVO1");
    }

    /**
     * Method which will return default tax rule Id and will be called on save button
     */
    public Integer getDfltTaxRuleId() {
        Integer val = 0;

        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("TransTaxRuleAll") != null) {
            val = (Integer) currentRow.getAttribute("TransTaxRuleAll");

            insertIntoSlsTrnpTrAndTrLines(val);
        }

        return val;
    }

    /**
     * Method which will return Default Tax rule Id and is called from row Impl
     */
    public Integer fetchDfltTaxRuleId() {
        Integer val = 0;

        Row[] allRowsInRange = this.getSlsTrnpLoTrVO1().getAllRowsInRange();
        if (allRowsInRange.length > 0 && allRowsInRange[0].getAttribute("TaxRuleId") != null) {
            val = (Integer) allRowsInRange[0].getAttribute("TaxRuleId");
        } else {
            Object obj = callStoredFunction(Types.NUMERIC, "APP.fn_get_tax_rule_id(?,?,?,?,?,?,?,?,?)", new Object[] {
                                            this.getCldIdValue(), this.getSlocIdValue(), "0", this.getOrgIdValue(),
                                            this.getHoOrgIdValue(), "0", 0, 24255, 0
            });

            if (obj != null && Integer.parseInt(obj.toString()) > 0) {
                val = Integer.parseInt(obj.toString());

                insertIntoSlsTrnpTrAndTrLines(val);
            }
        }
        //System.out.println("Default tax is " + val);
        return val;
    }

    /**
     * Method which will set vehiche No to null and will be called on Value change event of Vehicle Type
     */
    public void resetVehicleNoFlds() {
        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("VhclItmId", null);
            currentRow.setAttribute("VehicleNo", null);
        }
    }

    /**
     * Method which will reset transporter name to null and will be called on Value change event of Order Type
     */
    public void resetTrnspFlds() {
        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("TrnspNmTrans", null);
            currentRow.setAttribute("TrnspId", null);
        }
    }

    /**
     * Method which will reset Customer Name to null and will be called on Value change event of Multiple Customer Radio Button
     */
    public void resetCustFlds() {
        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("CustNameTrans", null);
            currentRow.setAttribute("CustIdTrans", null);
        }
    }

    /**
     * Container's getter for LOVBankCashCoaNm1.
     * @return LOVBankCashCoaNm1
     */
    public ViewObjectImpl getLOVBankCashCoaNmVO1() {
        return (ViewObjectImpl) findViewObject("LOVBankCashCoaNmVO1");
    }

    /**
     * Following method will push data from TRNP ADV to Finance
     */
    private void pushDatatToFin() {
        Row[] allRowsInRange = this.getSlsTrnpLoEoAdvVO1().getAllRowsInRange();
        if (allRowsInRange.length > 0) {
            Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
            if (currentRow != null) {
                Integer coaId = null;
                Integer eoId = null;
                if (currentRow.getAttribute("ReqTyp").equals("I")) { // Inhouse Basis

                    eoId = (Integer) currentRow.getAttribute("DriverEoId");
                } else { /// Transporter Basis

                    eoId = (Integer) currentRow.getAttribute("TrnspId");
                }

                if (eoId != null) {
                    coaId = EbizParams.getCoaIdFrmEoId(this, eoId);

                    try {
                        /*  Object vouId =
                            callStoredFunction(Types.VARCHAR, "FN_TRNP_LO_GL_INS_ADV(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                               currentRow.getAttribute("DocId"), currentRow.getAttribute("LoDt"),
                                               new Number(0), this.getUsrIdValue(), this.getOrgIdValue(),
                                               this.getSlocIdValue(), this.getHoOrgIdValue(), this.getCldIdValue(),
                                               eoId, coaId, currentRow.getAttribute("AdvCoaIdTrans"),
                                               currentRow.getAttribute("CurrIdSp"),
                                               currentRow.getAttribute("CurrConvFctr")
                        });  */

                        Object vouId = callStoredFunction(Types.VARCHAR, "FIN.FN_INS_IR(?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                          this.getCldIdValue(), 1, this.getSlocIdValue(),
                                                          this.getHoOrgIdValue(), this.getOrgIdValue(),
                                                          currentRow.getAttribute("DocId"), 24255, "PROJ0000", eoId,
                                                          currentRow.getAttribute("CurrIdSp"),
                                                          currentRow.getAttribute("CurrConvFctr"), this.getUsrIdValue(),
                                                          currentRow.getAttribute("LoDt")
                        });
                        if (vouId != null) {
                            ADFModelUtils.showFacesMessage(ADFModelUtils.resolvRsrc("MSG.2047"),
                                                           ADFModelUtils.resolvRsrc("MSG.2047"),
                                                           FacesMessage.SEVERITY_INFO, null);
                            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2048"),
                                                                    ADFModelUtils.resolvRsrc("MSG.2049")+ vouId,
                                                                    FacesMessage.SEVERITY_INFO);
                        }
                    } catch (Exception e) {
                        e.printStackTrace();
                        ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.1478"),
                                                                ADFModelUtils.resolvRsrc("MSG.2050")+ " 'FIN.FN_INS_IR' !",   
                                                                FacesMessage.SEVERITY_ERROR);
                    }
                }
            }
        }
    }

    /**
     * Method which will check whether LR Id is already present in LO Table or not
     */
    public String chkLrDispIdPresentOrNot(String lrDispId) {
        String val = null;
        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null && lrDispId != null) {
            ViewObjectImpl idVO1 = this.getLOVLrIdVO1();
            idVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            idVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            idVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            idVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            idVO1.setNamedWhereClauseParam("BindDocId", null);
            idVO1.executeQuery();

            Row[] allRowsInRange = idVO1.getFilteredRows("LrId", lrDispId);
            if (allRowsInRange.length > 0) {
                if (allRowsInRange[0].getAttribute("DocId") != null) {
                    ViewObjectImpl impl = this.getSlsTrnpLoVO2();
                    RowQualifier rQ = new RowQualifier(impl);

                    rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                      " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" +
                                      this.getOrgIdValue() + "' and LoBasis =7 and LrId ='" +
                                      allRowsInRange[0].getAttribute("DocId") + "'");

                    Row[] filteredRows = impl.getFilteredRows(rQ);
                    if (filteredRows.length > 0 && !filteredRows[0].getKey().equals(currentRow.getKey())) {
                        val = (String) filteredRows[0].getAttribute("LoId");
                    }
                }
            }
        }

        return val;
    }

    /**
     * Container's getter for SlsTrnpLo1.
     * @return SlsTrnpLo1
     */
    public ViewObjectImpl getSlsTrnpLoVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLoVO2");
    }

    /**
     * Method which will update status of Loading Request to Order Generated
     */
    private void updateLrDocStatus() {
        Row currentRow = this.getSlsTrnpLoVO1().getCurrentRow();
        if (currentRow != null) {
            Integer loBasis = (Integer) currentRow.getAttribute("LoBasis");

            if (loBasis == 7) {
                callStoredFunction(Types.NUMERIC, "FN_TRNP_UPDT_DOC_STATUS(?,?,?,?,?,?)", new Object[] {
                                   this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                                   this.getHoOrgIdValue(), 24255, currentRow.getAttribute("DocId")
                });
            }
        }
    }

    /** ---------- To get Column Value from Org Prf -------------**/

    public String getValFrmOrgPrf(String columnName) {

        String val = "";
        try {
            val = (String) callStoredFunction(Types.VARCHAR, "SLS.fn_trnp_chk_org_prf (?,?,?,?)", new Object[] {
                                              EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                              EbizParams.GLBL_APP_USR_ORG(), columnName
            });

        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION fn_trnp_chk_org_prf :" + e.getMessage());
        }
        System.out.println("===========" + val);

        return val;
    }
    
    /**
     * Below method checks if rate contract for that customer exists or not
     */

    public boolean chkCustRateCntrct(String custName)
    {
        Boolean result = true;
        
        System.out.println(this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("ReqTyp").toString());
        System.out.println(this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("LoBasis"));
        
        if(this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("ReqTyp").toString().equalsIgnoreCase("I") && 
            this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("LoBasis").equals(new Integer(6)))
        {
            
            Integer eoId = null;
    
            ViewObjectImpl lrVo = this.getSlsTrnpLoVO1();
            Row currentRow = lrVo.getCurrentRow();
    
            if (custName != null) {
                ViewObjectImpl custVo = this.getLOVCustNameVO1();
                custVo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
                custVo.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
                custVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
                
                custVo.executeQuery();
    
                Row[] custFilteredRows = custVo.getFilteredRows("EoNm", custName);
    
                if (custFilteredRows.length > 0) {
                    eoId = (Integer) custFilteredRows[0].getAttribute("EoId");
                    System.out.println("EoId :: " + eoId);
                }
    
            }
    
            if (eoId != null) {
    
                ViewObjectImpl rateCntrct = this.getLovEoIdVO1();
    
                rateCntrct.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
                rateCntrct.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
                rateCntrct.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
                rateCntrct.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
                rateCntrct.setNamedWhereClauseParam("BindCntrctBasis", currentRow.getAttribute("RateBasis"));
                rateCntrct.setNamedWhereClauseParam("BindEoId", eoId);
                rateCntrct.setNamedWhereClauseParam("BindVhclType", currentRow.getAttribute("VehicleTyp"));
                rateCntrct.executeQuery();
    
                Row[] filteredRows = rateCntrct.getFilteredRows("CurrIdSp", currentRow.getAttribute("CurrIdSp"));
                
                System.out.println("Value of Rate Basis :: "+currentRow.getAttribute("RateBasis"));
                System.out.println("Value of Vehicle Type ::" +currentRow.getAttribute("VehicleTyp"));
                System.out.println("Length of filtered rows ::" +filteredRows.length);
    
                if (filteredRows.length > 0) {
                    return true;
                }
    
                return false;
    
            } else
                return true;
        }
        
        return result;
    }

    public Number getVehicleWeight(String vhclNo)
    {
        System.out.println("Inside getVehicleWeight method ::"+vhclNo);
        
        if(vhclNo != null)
        {
            System.out.println("Vehicle no in AmImpl ::"+vhclNo);
            
            ViewObjectImpl vo = this.getLOVVehicleNoVO1();
            vo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            vo.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            vo.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            vo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            vo.setNamedWhereClauseParam("BindVhclType", Integer.parseInt(this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("VehicleTyp").toString()));
            vo.executeQuery();
            
            Row[] filteredRows = vo.getFilteredRows("FaRegNo", vhclNo);
            
            for(Row r : filteredRows)
            {
                System.out.println("Weight :: "+filteredRows[0].getAttribute("GrossWt"));
                return (Number) filteredRows[0].getAttribute("GrossWt"); 
            }
        }
        
        return new Number(0);    
    }

    public Number getAllItemsWeight()
    {
        Number itemsWt = new Number(0);
        
        ViewObjectImpl loVo = this.getSlsTrnpLoProdDtlVO2();
        
        Row[] filteredRows = loVo.getFilteredRows("DocId", this.getSlsTrnpLoVO1().getCurrentRow().getAttribute("DocId").toString());
        
        if(filteredRows.length > 0)
        {
            for(Row r : filteredRows)
                itemsWt = itemsWt.add((Number) r.getAttribute("ItmWt"));
            
            return itemsWt;
        }
        
        return new Number(0);    
    }

    /**
     * Container's getter for LOVCustNameVO1.
     * @return LOVCustNameVO1
     */
    public ViewObjectImpl getLOVCustNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVCustNameVO1");
    }

    /**
     * Container's getter for LovEoIdVO1.
     * @return LovEoIdVO1
     */
    public ViewObjectImpl getLovEoIdVO1() {
        return (ViewObjectImpl) findViewObject("LovEoIdVO1");
    }

    /**
     * Container's getter for LovTransferOrderItmVO1.
     * @return LovTransferOrderItmVO1
     */
    public ViewObjectImpl getLovTransferOrderItmVO1() {
        return (ViewObjectImpl) findViewObject("LovTransferOrderItmVO1");
    }

    /**
     * Container's getter for LovTransferOrderVO1.
     * @return LovTransferOrderVO1
     */
    public ViewObjectImpl getLovTransferOrderVO1() {
        return (ViewObjectImpl) findViewObject("LovTransferOrderVO1");
    }

    /**
     * Container's getter for LovOrgNmVO1.
     * @return LovOrgNmVO1
     */
    public ViewObjectImpl getLovOrgNmVO1() {
        return (ViewObjectImpl) findViewObject("LovOrgNmVO1");
    }

    /**
     * Container's getter for LOVVehicleNoVO1.
     * @return LOVVehicleNoVO1
     */
    public ViewObjectImpl getLOVVehicleNoVO1() {
        return (ViewObjectImpl) findViewObject("LOVVehicleNoVO1");
    }

    /**
     * Container's getter for LovAppItmPrfWtVO1.
     * @return LovAppItmPrfWtVO1
     */
    public ViewObjectImpl getLovAppItmPrfWtVO1() {
        return (ViewObjectImpl) findViewObject("LovAppItmPrfWtVO1");
    }

    /**
     * Container's getter for ItmWtFctrVO1.
     * @return ItmWtFctrVO1
     */
    public ViewObjectImpl getItmWtFctrVO1() {
        return (ViewObjectImpl) findViewObject("ItmWtFctrVO1");
    }
}
