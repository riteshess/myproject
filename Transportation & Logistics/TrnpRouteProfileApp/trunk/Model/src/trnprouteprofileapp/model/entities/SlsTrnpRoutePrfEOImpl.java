package trnprouteprofileapp.model.entities;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;

import trnprouteprofileapp.model.service.TrnpRouteProfileAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 02 14:55:05 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsTrnpRoutePrfEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        HoOrgId,
        RouteId,
        RouteNm,
        Actv,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        DocId;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int ROUTEID = AttributesEnum.RouteId.index();
    public static final int ROUTENM = AttributesEnum.RouteNm.index();
    public static final int ACTV = AttributesEnum.Actv.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int DOCID = AttributesEnum.DocId.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsTrnpRoutePrfEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("trnprouteprofileapp.model.entities.SlsTrnpRoutePrfEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for HoOrgId, using the alias name HoOrgId.
     * @return the value of HoOrgId
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for HoOrgId.
     * @param value value to set the HoOrgId
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for RouteId, using the alias name RouteId.
     * @return the value of RouteId
     */
    public String getRouteId() {
        return (String) getAttributeInternal(ROUTEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for RouteId.
     * @param value value to set the RouteId
     */
    public void setRouteId(String value) {
        setAttributeInternal(ROUTEID, value);
    }

    /**
     * Gets the attribute value for RouteNm, using the alias name RouteNm.
     * @return the value of RouteNm
     */
    public String getRouteNm() {
        return (String) getAttributeInternal(ROUTENM);
    }

    /**
     * Sets <code>value</code> as the attribute value for RouteNm.
     * @param value value to set the RouteNm
     */
    public void setRouteNm(String value) {
        setAttributeInternal(ROUTENM, value);
    }

    /**
     * Gets the attribute value for Actv, using the alias name Actv.
     * @return the value of Actv
     */
    public String getActv() {
        return (String) getAttributeInternal(ACTV);
    }

    /**
     * Sets <code>value</code> as the attribute value for Actv.
     * @param value value to set the Actv
     */
    public void setActv(String value) {
        setAttributeInternal(ACTV, value);
    }

    /**
     * Gets the attribute value for UsrIdCreate, using the alias name UsrIdCreate.
     * @return the value of UsrIdCreate
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreate.
     * @param value value to set the UsrIdCreate
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for UsrIdCreateDt, using the alias name UsrIdCreateDt.
     * @return the value of UsrIdCreateDt
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdCreateDt.
     * @param value value to set the UsrIdCreateDt
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for UsrIdMod, using the alias name UsrIdMod.
     * @return the value of UsrIdMod
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdMod.
     * @param value value to set the UsrIdMod
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for UsrIdModDt, using the alias name UsrIdModDt.
     * @return the value of UsrIdModDt
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as the attribute value for UsrIdModDt.
     * @param value value to set the UsrIdModDt
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }


    /**
     * Gets the attribute value for DocId, using the alias name DocId.
     * @return the value of DocId
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for DocId.
     * @param value value to set the DocId
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param hoOrgId key constituent
     * @param docId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, String hoOrgId, String docId) {
        return new Key(new Object[] { cldId, slocId, orgId, hoOrgId, docId });
    }

    public Object resolvElDC(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp =
            elFactory.createValueExpression(elContext, "#{data." + data + ".dataProvider}", Object.class);
        return valueExp.getValue(elContext);
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {

        this.setActv("Y");
        TrnpRouteProfileAMImpl am = (TrnpRouteProfileAMImpl) resolvElDC("TrnpRouteProfileAMDataControl");

        this.setDocId((String) EbizParams.generateDocTxnId(am, 24253));
        this.setHoOrgId(resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}").toString());
        this.setOrgId(resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());

        Integer slocid = new Integer(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        Integer userid = new Integer(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        Timestamp time = new Timestamp(System.currentTimeMillis());
        System.out.println("UsrIdCreate :" + userid);
        System.out.println("UsrIdCreateDt :" + time);
        this.setUsrIdCreate(userid);
        this.setUsrIdCreateDt(time);
        this.setSlocId(slocid);
        this.setCldId(resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());

        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */


    protected void doDML(int operation, TransactionEvent e) {

        System.out.println("Inside doDML");

        if (operation == DML_INSERT) {

            System.out.println(" Inside DML_INSERT ");

            Integer userid = new Integer(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            Timestamp time = new Timestamp(System.currentTimeMillis());

            this.setUsrIdCreate(userid);
            this.setUsrIdCreateDt(time);


            if (this.getRouteId() != null) {
            } else {
                String tname = "SLS$TRNP$ROUTE$PRF";
                Integer slocid = (Integer) EbizParams.GLBL_APP_SERV_LOC();
                String cldid = (String) EbizParams.GLBL_APP_CLD_ID();
                String orgid = (String) EbizParams.GLBL_APP_USR_ORG();
                Integer docid = 24253;
                Integer doctypeid = 0;
                String dochexid = null;
                Integer docsubtypeid = 0;
                /* Integer fyid =
                    EbizParams.getFyId(this, EbizParams.GLBL_APP_USR_ORG(), new oracle.jbo.domain.Timestamp(System.currentTimeMillis())); */

                System.out.println("Slocid is : " + slocid);
                System.out.println("Cldid is : " + cldid);
                System.out.println("Orgid is : " + orgid);
                System.out.println("Docid is : " + docid);
                System.out.println("Doctypeid is : " + doctypeid);
                System.out.println("Dochexid is : " + dochexid);
                System.out.println("Docsubtypeid is : " + docsubtypeid);
                System.out.println("Tname is : " + tname);
                /* System.out.println("Fyid is : " + fyid); */

                String routeid =
                    (String) (callStoredFunction(Types.VARCHAR, "SLS.TRNP_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)", new Object[] {
                                                 slocid, cldid, orgid, docid, dochexid, doctypeid, tname,
                                                 EbizParams.getFyIdOnCurrDtAndCurrOrg(this.getApplicationModule()),
                                                 docsubtypeid
                }));

                System.out.println("current value is " + routeid);

                if (routeid != null) {
                    this.setRouteId(routeid);
                }
            }

        }

        if (operation == DML_UPDATE) {
            System.out.println(" Inside DML_UPDATE ");

            Integer userid = new Integer(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
            Timestamp time = new Timestamp(System.currentTimeMillis());

            this.setUsrIdMod(userid);
            this.setUsrIdModDt(time);

        }

        super.doDML(operation, e);

    }

    public Object resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {

        CallableStatement st = null;
        try {
            // 1. Create a JDBC CallabledStatement
            st = getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            // 2. Register the first bind variable for the return value
            st.registerOutParameter(1, sqlReturnType);

            if (bindVars != null) {
                // 3. Loop over values for the bind variables passed in, if any
                for (int z = 0; z < bindVars.length; z++) {
                    // 4. Set the value of user-supplied bind vars in the stmt
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            // 5. Set the value of user-supplied bind vars in the stmt
            st.executeUpdate();
            // 6. Return the value of the first bind variable
            //adflog.info("Function return " + st.getObject(1));
            return st.getObject(1);
        } catch (SQLException e) {
            throw new JboException(e.getMessage());
        } finally {
            if (st != null) {
                try {
                    // 7. Close the statement
                    st.close();
                } catch (SQLException e) {
                    throw new JboException(e.getMessage());
                }
            }
        }
    }

    protected TrnpRouteProfileAMImpl getApplicationModule() {
        return (TrnpRouteProfileAMImpl) ADFModelUtils.resolvEl("#{data.TrnpRouteProfileAMDataControl.dataProvider}");
    }

}

