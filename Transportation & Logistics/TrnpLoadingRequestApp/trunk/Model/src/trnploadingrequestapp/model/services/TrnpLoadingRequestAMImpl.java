package trnploadingrequestapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import java.sql.SQLException;
import java.sql.Types;

import javax.faces.application.FacesMessage;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import trnploadingrequestapp.model.services.common.TrnpLoadingRequestAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 05 15:54:49 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TrnpLoadingRequestAMImpl extends ApplicationModuleImpl implements TrnpLoadingRequestAM {
    private Integer glblDocId = 24252;
    private Integer glblDocTypeId = 0;
    private static ADFLogger _log = ADFLogger.createADFLogger(TrnpLoadingRequestAMImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public TrnpLoadingRequestAMImpl() {
    }

    /**
     * Container's getter for SlsTrnpLr.
     * @return SlsTrnpLr
     */
    public ViewObjectImpl getSlsTrnpLr() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLr");
    }

    public String setRequestNo() {
        String lrNo = null;
        if (this.getSlsTrnpLr().getCurrentRow().getAttribute("LrId") != null)
            lrNo = (String) this.getSlsTrnpLr().getCurrentRow().getAttribute("LrId");
        else {
            Integer fyid =
                EbizParams.getFyId(this.getRootApplicationModule(), EbizParams.GLBL_APP_USR_ORG(),
                                   new Timestamp(System.currentTimeMillis()));
            if (fyid != null) {
                lrNo =
                    (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                        new StringBuilder("SLS.TRNP_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                        EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                        EbizParams.GLBL_APP_USR_ORG(), glblDocId, null, glblDocTypeId,
                                                        "SLS$TRNP$LR", fyid, 0
                }, Types.VARCHAR);
            } else
                lrNo = "-1";
        }
        // this.getSlsTrnpLr().getCurrentRow().setAttribute("LrId", lrNo);
        return lrNo;
    }

    public String genTxnId() {
        return (String) EbizParams.generateDocTxnId(this.getRootApplicationModule(), glblDocId);
    }
    //
    public void filterOrderRequestOnLoad(String cldId, String orgId, String hoOrgId, Integer slocId, String docId) {
        this.getSlsTrnpLr().setNamedWhereClauseParam("cldIdBind", cldId);
        this.getSlsTrnpLr().setNamedWhereClauseParam("slocIdBind", slocId);
        this.getSlsTrnpLr().setNamedWhereClauseParam("orgIdBind", orgId);
        this.getSlsTrnpLr().setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
        this.getSlsTrnpLr().setNamedWhereClauseParam("docIdBind", docId);
        this.getSlsTrnpLr().executeQuery();


    }

    public void loadSearchPage() {
        this.getSearchDual().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getSearchDual().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getSearchDual().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getSearchDual().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
    }

    public void loadAddEditPage() {
        this.getSlsTrnpOcVw().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getSlsTrnpOcVw().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getSlsTrnpOcVw().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getSlsTrnpOcVw().setNamedWhereClauseParam("docIdBind", glblDocId);
        this.getSlsTrnpOcVw().setNamedWhereClauseParam("docTypeIdBind", glblDocTypeId);
        this.getSlsTrnpOcVw().executeQuery();
    }

    /**
     * Container's getter for SlsTrnpLrRouteDtl1.
     * @return SlsTrnpLrRouteDtl1
     */
    public ViewObjectImpl getSlsTrnpLrRouteDtl() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrRouteDtl");
    }

    /**
     * Container's getter for SlsTrnpLrToRouteDtlVL1.
     * @return SlsTrnpLrToRouteDtlVL1
     */
    public ViewLinkImpl getSlsTrnpLrToRouteDtlVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLrToRouteDtlVL1");
    }

    /**
     * Container's getter for SearchLoadingRequest1.
     * @return SearchLoadingRequest1
     */
    public ViewObjectImpl getSearchLoadingRequest() {
        return (ViewObjectImpl) findViewObject("SearchLoadingRequest");
    }

    public void SearchRequest(String actiontype) {
        if (actiontype != null && actiontype.equals("R")) {
            this.getSearchDual().executeQuery();
        }
        this.getSearchLoadingRequest().setNamedWhereClauseParam("routeIdBind",
                                                                this.getSearchDual().getCurrentRow().getAttribute("TransRouteId"));
        this.getSearchLoadingRequest().setNamedWhereClauseParam("lrIdBind",
                                                                this.getSearchDual().getCurrentRow().getAttribute("TransRequestId"));
        this.getSearchLoadingRequest().setNamedWhereClauseParam("strtDtBind",
                                                                this.getSearchDual().getCurrentRow().getAttribute("TransStrtDt"));
        this.getSearchLoadingRequest().setNamedWhereClauseParam("endDtBind",
                                                                this.getSearchDual().getCurrentRow().getAttribute("TransEndDt"));
        this.getSearchLoadingRequest().setNamedWhereClauseParam("reqTypeBind",
                                                                this.getSearchDual().getCurrentRow().getAttribute("TransRequestType"));
        this.getSearchLoadingRequest().setNamedWhereClauseParam("custIdbind",
                                                                this.getSearchDual().getCurrentRow().getAttribute("TransCustomerId"));
        this.getSearchLoadingRequest().setNamedWhereClauseParam("trnportIdBind",
                                                                this.getSearchDual().getCurrentRow().getAttribute("TransTransporterId"));
        this.getSearchLoadingRequest().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getSearchLoadingRequest().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getSearchLoadingRequest().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getSearchLoadingRequest().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getSearchLoadingRequest().executeQuery();
    }

    public void populateRouteDtl() {

        this.getSlsTrnpRouteDtl().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getSlsTrnpRouteDtl().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getSlsTrnpRouteDtl().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getSlsTrnpRouteDtl().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getSlsTrnpRouteDtl().setNamedWhereClauseParam("routeDocIdBind",
                                                           this.getSlsTrnpLr().getCurrentRow().getAttribute("RouteDocId"));
        this.getSlsTrnpRouteDtl().executeQuery();

        Row[] fr =
            this.getSlsTrnpRouteDtl().getFilteredRows("DocId",
                                                      this.getSlsTrnpLr().getCurrentRow().getAttribute("RouteDocId"));

        for (Row rRow : fr) {
            Row newRow = this.getSlsTrnpLrRouteDtl().createRow();
            newRow.setAttribute("ArrivalPnt", rRow.getAttribute("ArrivalPnt"));
            newRow.setAttribute("DeparturePnt", rRow.getAttribute("DeparturePnt"));
            newRow.setAttribute("Distance", rRow.getAttribute("Dist"));
            newRow.setAttribute("UomDist", rRow.getAttribute("UomDist"));
            newRow.setAttribute("SlNo", rRow.getAttribute("SlNo"));

            System.out.println("SlNo from SlsTrnpRouteDtl() :: " + rRow.getAttribute("SlNo"));

            this.getSlsTrnpLrRouteDtl().insertRow(newRow);

            if (this.getSlsTrnpLr().getCurrentRow().getAttribute("MultipleCustFlg") != null &&
                this.getSlsTrnpLr().getCurrentRow().getAttribute("MultipleCustFlg").toString().equals("Y")) {
            } else {
                Row newRowEo = this.getSlsTrnpLrRouteEo().createRow();
                newRowEo.setAttribute("EoId", this.getSlsTrnpLr().getCurrentRow().getAttribute("TransCustomerId"));
                this.getSlsTrnpLrRouteEo().insertRow(newRowEo);
                System.out.println("Current row EoId :: " + newRowEo.getAttribute("EoId"));
            }

            //add oc detail
            populateRouteOc(rRow.getAttribute("DeparturePnt").toString(), rRow.getAttribute("ArrivalPnt").toString());


        }
    }


    public void changeArrivalDate(Timestamp arrvlDate) {

        ViewObjectImpl vo = this.getSlsTrnpLrRouteDtl();
        Row currentRow = vo.getCurrentRow();
        Integer slNo = (Integer) currentRow.getAttribute("SlNo");
        Row[] filteredRow = vo.getFilteredRows("SlNo", (slNo + 1));

        //String departureDate = (String) currentRow.getAttribute("DepartureDate");

        //String arrivalDate = (String) filteredRow[0].getAttribute("ArrivalDate");

        System.out.println("Parameter arrvlDate ::" + arrvlDate);
        System.out.println("SlNo of Current Row ::" + slNo);
        System.out.println("SlNo of Next Row ::" + (slNo + 1));

        if (filteredRow.length > 0) {
            System.out.println("Filtered Rows length : " + filteredRow.length);
            System.out.println("Arrival Date of Current Row ::" + currentRow.getAttribute("ArrivalDate"));
            filteredRow[0].setAttribute("DepartureDate", arrvlDate);
            System.out.println("Departure Date of Next Row ::" + filteredRow[0].getAttribute("DepartureDate"));

        } else {
            System.out.println("Filtered Rows length : " + filteredRow.length + " !! No Row Found !");
        }
    }

    public void populateRouteOc(String deptPnt, String arrPnt) {
        System.out.println("Inside populate Route Oc .... !!");
        this.getTrnpRouteOc1().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getTrnpRouteOc1().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getTrnpRouteOc1().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getTrnpRouteOc1().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getTrnpRouteOc1().setNamedWhereClauseParam("docIdBind",
                                                        this.getSlsTrnpLr().getCurrentRow().getAttribute("RouteDocId"));
        this.getTrnpRouteOc1().setNamedWhereClauseParam("arrivalPntBind", arrPnt);
        this.getTrnpRouteOc1().setNamedWhereClauseParam("departurePntBind", deptPnt);


        this.getTrnpRouteOc1().executeQuery();
        this.getTrnpRouteOc1().setRangeSize(-1);
        Row[] fr = this.getTrnpRouteOc1().getAllRowsInRange();
        // this.getTrnpRouteOc1().getFilteredRows("DocId",
        //                                        this.getSlsTrnpLr().getCurrentRow().getAttribute("RouteDocId"));
        System.out.println("FR.length ::" + fr.length);

        Number amtBs = new Number(0);

        for (Row rRow : fr) {

            amtBs = (Number) rRow.getAttribute("AmtBs");

            Row newRow = this.getSlsTrnpLrOc().createRow();
            newRow.setAttribute("CoaId", rRow.getAttribute("CoaId"));
            newRow.setAttribute("TranType", rRow.getAttribute("TranType"));
            newRow.setAttribute("OcId", rRow.getAttribute("OcId"));
            newRow.setAttribute("OcCat", rRow.getAttribute("OcCat"));
            newRow.setAttribute("CurrId", this.getSlsTrnpLr().getCurrentRow().getAttribute("CurrIdSp"));
            newRow.setAttribute("CurrRate", this.getSlsTrnpLr().getCurrentRow().getAttribute("CurrConvFctr"));
            newRow.setAttribute("AmtBs", amtBs.round(6));
            Number fctr = new Number(0);
            if (this.getSlsTrnpLr().getCurrentRow().getAttribute("CurrConvFctr") != null)
                fctr = (Number) this.getSlsTrnpLr().getCurrentRow().getAttribute("CurrConvFctr");
            Number bsamt = new Number(0);
            if (rRow.getAttribute("AmtBs") != null)
                bsamt = (Number) rRow.getAttribute("AmtBs");

            //currency conversion we are using works from sp to bs
            //now get currency conversion from bs to sp
            //suppose bs is kenyan silling and sp is US Doller then Rate


            Number amtSp = new Number(0);
            amtSp = bsamt.divide(fctr);

            System.out.println("AmtSp :: " + amtSp);
            System.out.println("After Round AmtSp::" + amtSp.round(6));
            newRow.setAttribute("AmtSpOc", amtSp.round(6));
            newRow.setAttribute("AmtSp", amtSp.round(6));
            newRow.setAttribute("AmtBs", amtBs.round(6));
            this.getSlsTrnpLrOc().insertRow(newRow);

        }
    }

    public boolean chkProdDtlRow() {

        Boolean result = true;
        String custName = null;
        Integer lrBasis = null;

        ViewObjectImpl prodDtlVo = this.getSlsTrnpLrProdDtl1();
        ViewObjectImpl lrVo = this.getSlsTrnpLr();
        ViewObjectImpl routeVo = this.getSlsTrnpLrRouteEoVO1();
        Row[] totalTrips = routeVo.getFilteredRows("DocId", lrVo.getCurrentRow().getAttribute("DocId"));

        lrBasis = (Integer) lrVo.getCurrentRow().getAttribute("LrBasis");

        System.out.println("Route total trips ::" + totalTrips.length);

        if (totalTrips.length > 0) {
            routeVo.executeQuery();

            for (Row r : totalTrips) {
                prodDtlVo.executeQuery();

                RowQualifier rq = new RowQualifier(prodDtlVo);

                rq.setWhereClause("DocId = '" + r.getAttribute("DocId") + "' and ArrivalPnt = '" +
                                  r.getAttribute("ArrivalPnt") + "' and DeparturePnt = '" +
                                  r.getAttribute("DeparturePnt") + "' and EoId = " + r.getAttribute("EoId"));

                Row[] prodDtlRowCount = prodDtlVo.getFilteredRows(rq);

                if (prodDtlRowCount.length > 0) {
                    System.out.println("Row Count --------------------------------------- " + prodDtlRowCount.length);
                    //return true;
                } else {

                    custName = this.getCustName((Integer) r.getAttribute("EoId"));

                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2342"),
                                                            "\n " + ADFModelUtils.resolvRsrc("LBL.299") + " : " +
                                                            custName + "</br> " + ADFModelUtils.resolvRsrc("LBL.4466") +
                                                            " : " +
                                                            this.getRouteTrip((String) r.getAttribute("DeparturePnt")) +
                                                            "</br> " + ADFModelUtils.resolvRsrc("LBL.4469") + " : " +
                                                            this.getRouteTrip((String) r.getAttribute("ArrivalPnt")),
                                                            FacesMessage.SEVERITY_ERROR);
                    //ADFModelUtils.showFormattedFacesMessage("Please add Item for following details :","\n Customer name : "+custName+"</br> Arrival Point : "+ this.getRouteTrip((String) r.getAttribute("ArrivalPnt"))+"</br> Departure Point : "+ this.getRouteTrip((String) r.getAttribute("DeparturePnt")), FacesMessage.SEVERITY_ERROR);
                    return false;
                }
            }
            return true;
        } else {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2343"),
                                                    ADFModelUtils.resolvRsrc("MSG.2344"), FacesMessage.SEVERITY_WARN);
            //ADFModelUtils.showFormattedFacesMessage("Please add a Customer", "To whom the item(s) has to be shipped !!", FacesMessage.SEVERITY_WARN);
            return false;
        }

    }

    public boolean chkAllItemsWeight() {

        Boolean val = false;

        Row currentRow = this.getSlsTrnpLr().getCurrentRow();

        if (currentRow != null) {
            ViewObjectImpl dtlVO2 = this.getSlsTrnpLrProdDtl1();
            dtlVO2.setRangeSize(-1);
            dtlVO2.executeQuery();

            RowQualifier rQ = new RowQualifier(dtlVO2);
            rQ.setWhereClause("CldId ='" + currentRow.getAttribute("CldId") + "' and SlocId =" +
                              currentRow.getAttribute("SlocId") + " and HoOrgId ='" +
                              currentRow.getAttribute("HoOrgId") + "' and OrgId ='" + currentRow.getAttribute("OrgId") +
                              "' and DocId ='" + currentRow.getAttribute("DocId") + "'");

            for (Row r : dtlVO2.getFilteredRows(rQ)) {
                if (r.getAttribute("ItmWt") != null) {
                    val = true;
                } else {
                    val = false;

                    String eoNm = getCustName((Integer) r.getAttribute("EoId"));
                    //String deptPoint = getRouteTrip((String) r.getAttribute("DeparturePnt"));
                    //String arrivalPoint = getRouteTrip((String) r.getAttribute("ArrivalPnt"));
                    String docSrcId = getDocumentSrcBasedOnId((String) r.getAttribute("DocIdSrc"));
                    String itemName = getItemNameBasedOnItemId((String) r.getAttribute("ItmId"));

                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2946"),
                                                            ADFModelUtils.resolvRsrc("MSG.2044") + "</br>" +
                                                            ADFModelUtils.resolvRsrc("LBL.299") + " : " + eoNm +
                                                            "</br>" + ADFModelUtils.resolvRsrc("LBL.1893") + " : " +
                                                            docSrcId + "</br>" + ADFModelUtils.resolvRsrc("LBL.2452") +
                                                            " : " + itemName, FacesMessage.SEVERITY_ERROR);

                    break;
                }
            }
        }

        return val;
    }


    public String getItemNameBasedOnItemId(String itemId) {
        Row lrCurrRow = this.getSlsTrnpLr().getCurrentRow();

        String itemName = null;

        if (itemId != null) {

            ViewObjectImpl itmNmVO = this.getLovItemNmVO1();
            itmNmVO.setNamedWhereClauseParam("BindCldId", lrCurrRow.getAttribute("CldId"));
            itmNmVO.setNamedWhereClauseParam("BindSlocId", lrCurrRow.getAttribute("SlocId"));
            itmNmVO.setNamedWhereClauseParam("BindHoOrgId", lrCurrRow.getAttribute("HoOrgId"));
            itmNmVO.setNamedWhereClauseParam("BindItmId", itemId);
            itmNmVO.executeQuery();

            Row[] itemRowRange = itmNmVO.getAllRowsInRange();

            if (itemRowRange.length > 0) {
                itemName = (String) itemRowRange[0].getAttribute("ItmDesc");
            }
        }

        return itemName;
    }

    public String getDocumentSrcBasedOnId(String docSrcHexId) {
        String docSrcId = null;

        if (docSrcHexId != null) {

            Row currentRow = this.getSlsTrnpLr().getCurrentRow();

            if (currentRow != null && currentRow.getAttribute("LrBasis") != null) {
                Integer lrBasis = (Integer) currentRow.getAttribute("LrBasis");
                //System.out.println("In getter from LoDocSrc VORowImpl is " + loSrcBasis);
                if (lrBasis == 4) { /// For Customer
                    ViewObjectImpl shipVO = this.getLovShipment();
                    shipVO.setNamedWhereClauseParam("bindCldId", currentRow.getAttribute("CldId"));
                    shipVO.setNamedWhereClauseParam("bindCurrIdSp", currentRow.getAttribute("CurrIdSp"));
                    shipVO.setNamedWhereClauseParam("bindDocId", docSrcHexId);
                    shipVO.setNamedWhereClauseParam("bindEoId", null);
                    shipVO.setNamedWhereClauseParam("bindHoOrgId", currentRow.getAttribute("HoOrgId"));
                    shipVO.setNamedWhereClauseParam("bindOrgId", currentRow.getAttribute("OrgId"));
                    shipVO.setNamedWhereClauseParam("bindSlocId", docSrcHexId);
                    shipVO.setNamedWhereClauseParam("bindStat", null);

                    shipVO.executeQuery();
                    Row[] allRow = shipVO.getAllRowsInRange();

                    if (allRow.length > 0) {
                        docSrcId = (String) allRow[0].getAttribute("ShipmntId");
                    }
                } else if (lrBasis == 5) { /// For Supplier

                    ViewObjectImpl poVO = this.getLovPurchaseOrd();
                    poVO.setNamedWhereClauseParam("cldIdBind", currentRow.getAttribute("CldId"));
                    poVO.setNamedWhereClauseParam("slocIdBind", currentRow.getAttribute("SlocId"));
                    poVO.setNamedWhereClauseParam("orgIdBind", currentRow.getAttribute("OrgId"));
                    poVO.setNamedWhereClauseParam("bindDocId", docSrcHexId);
                    poVO.setNamedWhereClauseParam("bindCurrIdSp", currentRow.getAttribute("CurrIdSp"));
                    poVO.setNamedWhereClauseParam("bindEoId", null);
                    poVO.setNamedWhereClauseParam("poModeBind", 231);
                    poVO.executeQuery();

                    Row[] inRange = poVO.getAllRowsInRange();

                    if (inRange.length > 0) {
                        docSrcId = (String) inRange[0].getAttribute("AuthPoNo");
                    }
                } else if (lrBasis.equals(new Integer(39))) {

                    this.getLovTransferOrderVO1().setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
                    this.getLovTransferOrderVO1().setNamedWhereClauseParam("BindSlocId",
                                                                           EbizParams.GLBL_APP_SERV_LOC());
                    this.getLovTransferOrderVO1().setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
                    this.getLovTransferOrderVO1().executeQuery();

                    Row fr[] = this.getLovTransferOrderVO1().getFilteredRows("DocId", docSrcHexId);

                    if (fr.length > 0)
                        return (String) fr[0].getAttribute("TrfNo");
                } else {
                    System.out.println("Inside else part !!");
                }

            }
        }
        return docSrcId;
    }

    public String getCustName(Integer custId) {
        if (custId != null) {
            if (!custId.equals(0)) {
                ViewObjectImpl custNmVo = this.getLovCustNm1();
                custNmVo.setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
                custNmVo.setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
                custNmVo.setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
                custNmVo.setNamedWhereClauseParam("eoIdBind", custId);
                //custNmVo.setNamedWhereClauseParam("eoTypeId",);
                custNmVo.executeQuery();

                Row[] filteredRow = custNmVo.getAllRowsInRange();

                if (filteredRow.length > 0)
                    return (String) filteredRow[0].getAttribute("EoNm");
            } else {

                ViewObjectImpl orgNmVO = this.getLovOrgNmVO1();
                orgNmVO.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());

                Row[] filteredRows = orgNmVO.getFilteredRows("OrgId", EbizParams.GLBL_APP_USR_ORG());

                if (filteredRows.length > 0)
                    return (String) filteredRows[0].getAttribute("OrgDesc");

            }

        }

        return "";
    }

    public String getRouteTrip(String locId) {
        if (locId != null) {
            String locNm = null;

            System.out.println("Route Doc Id :: " + locId);
            ViewObjectImpl locVo = this.getLovLocationNmVO1();

            locVo.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            locVo.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            locVo.setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
            locVo.executeQuery();

            // Row[] filteredRow = locVo.getFilteredRows("LocId", locId);

            RowQualifier rq = new RowQualifier(locVo);
            rq.setWhereClause("LocId = '" + locId + "'");

            Row[] filteredRow = locVo.getFilteredRows(rq);

            System.out.println("location filtered rows :: " + filteredRow.length);

            if (filteredRow.length > 0)
                return (String) filteredRow[0].getAttribute("AddsLoc");

        }

        return "";
    }

    /**
     * Container's getter for SlsTrnpRouteDtl1.
     * @return SlsTrnpRouteDtl1
     */
    public ViewObjectImpl getSlsTrnpRouteDtl() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRouteDtl");
    }


    /**
     * Container's getter for SearchDual1.
     * @return SearchDual1
     */
    public ViewObjectImpl getSearchDual() {
        return (ViewObjectImpl) findViewObject("SearchDual");
    }

    /**
     * Container's getter for SlsTrnpLrRouteEo1.
     * @return SlsTrnpLrRouteEo1
     */
    public ViewObjectImpl getSlsTrnpLrRouteEo() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrRouteEo");
    }

    /**
     * Container's getter for SlsTrnpLrRouteToEoVL1.
     * @return SlsTrnpLrRouteToEoVL1
     */
    public ViewLinkImpl getSlsTrnpLrRouteToEoVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLrRouteToEoVL1");
    }

    public void deleteDocumentSrc() {
        Row[] itmRow = this.getSlsTrnpLrProdDtl().getAllRowsInRange();
        for (Row row : itmRow) {
            row.remove();
        }

        this.getSlsTrnpLrDocSrc().getCurrentRow().remove();
    }

    public void deleteCustomer() {
        Row currEoRow = this.getSlsTrnpLrRouteEo().getCurrentRow();
        RowQualifier rqItm = new RowQualifier(this.getSlsTrnpLrProdDtl1());
        rqItm.setWhereClause("CldId='" + EbizParams.GLBL_APP_CLD_ID() + "' and SlocId=" +
                             EbizParams.GLBL_APP_SERV_LOC() + " and OrgId='" + EbizParams.GLBL_APP_USR_ORG() +
                             "' and HoOrgId='" + EbizParams.GLBL_HO_ORG_ID() + "' and DocId='" +
                             currEoRow.getAttribute("DocId") + "' and EoId=" + currEoRow.getAttribute("EoId"));

        Row[] itmRow = this.getSlsTrnpLrProdDtl1().getFilteredRows(rqItm);
        for (Row row : itmRow) {
            row.remove();
        }

        Row[] docSrcRow = this.getSlsTrnpLrDocSrc().getAllRowsInRange();
        for (Row row : docSrcRow) {
            row.remove();
        }

        this.getSlsTrnpLrRouteEo().getCurrentRow().remove();

        this.getSlsTrnpLrProdDtl().executeQuery();
    }

    public void setValueInCustomer() {
        _log.info("Customer Id Set=" + this.getSlsTrnpLrRouteDtl().getCurrentRow().getAttribute("TransCustomerId"));
        this.getSlsTrnpLrRouteEo().getCurrentRow().setAttribute("EoId",
                                                                this.getSlsTrnpLrRouteDtl().getCurrentRow().getAttribute("TransCustomerId"));
    }

    public String validateEffectiveDt(java.sql.Date effctvDt) {
        if (effctvDt != null) {
            java.sql.Date sysDt = null;
            try {
                sysDt = (new Timestamp(System.currentTimeMillis())).dateValue();
            } catch (SQLException e) {
            }
            if (sysDt.compareTo(effctvDt) > 0) {
                if (sysDt.toString().equals(effctvDt.toString())) {
                    //ok
                } else {
                    return "-1";
                }
            }
        }
        return "Y";
    }

    /**
     * Container's getter for SlsTrnpLrDocSrc1.
     * @return SlsTrnpLrDocSrc1
     */
    public ViewObjectImpl getSlsTrnpLrDocSrc() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrDocSrc");
    }

    /**
     * Container's getter for SlsTrnpLrRouteEoToDocSrcVL1.
     * @return SlsTrnpLrRouteEoToDocSrcVL1
     */
    public ViewLinkImpl getSlsTrnpLrRouteEoToDocSrcVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLrRouteEoToDocSrcVL1");
    }

    /**
     * Container's getter for SlsTrnpLrProdDtl1.
     * @return SlsTrnpLrProdDtl1
     */
    public ViewObjectImpl getSlsTrnpLrProdDtl() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrProdDtl");
    }

    /**
     * Container's getter for SlsTrnpLrDocSrcToProdDtlVL1.
     * @return SlsTrnpLrDocSrcToProdDtlVL1
     */
    public ViewLinkImpl getSlsTrnpLrDocSrcToProdDtlVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLrDocSrcToProdDtlVL1");
    }

    /**
     * Container's getter for LovShipmentItm1.
     * @return LovShipmentItm1
     */
    public ViewObjectImpl getLovShipmentItm() {
        return (ViewObjectImpl) findViewObject("LovShipmentItm");
    }

    public void populateItemFromSourceDoc() {
        if (this.getSlsTrnpLrRouteEo().getCurrentRow().getAttribute("TransDocIdSrc") != null) {
            Integer requestBasis = (Integer) this.getSlsTrnpLr().getCurrentRow().getAttribute("LrBasis");
            String docIdSrc = (String) this.getSlsTrnpLrRouteEo().getCurrentRow().getAttribute("TransDocIdSrc");
            String pickId = (String) this.getSlsTrnpLrRouteEo().getCurrentRow().getAttribute("TransPickDocId");
            this.getSlsTrnpLrDocSrc().getCurrentRow().setAttribute("DocIdSrc", docIdSrc);
            _log.info("DocIdSrc=" + docIdSrc);
            _log.info("Pick Id =" + pickId);
            _log.info("Basis=" + requestBasis);
            if (requestBasis.equals(new Integer(4))) {
                _log.info("Shipment Case");
                //Shipment Case
                this.getLovShipmentItm().setNamedWhereClauseParam("BindCldId",
                                                                  this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("CldId"));
                this.getLovShipmentItm().setNamedWhereClauseParam("BindDocId", docIdSrc);
                this.getLovShipmentItm().setNamedWhereClauseParam("BindHoOrgId",
                                                                  this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("HoOrgId"));
                this.getLovShipmentItm().setNamedWhereClauseParam("BindOrgId",
                                                                  this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("OrgId"));
                this.getLovShipmentItm().setNamedWhereClauseParam("BindSlocId",
                                                                  this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("SlocId"));
                this.getLovShipmentItm().executeQuery();
                _log.info("DocIdSrc of Shipment=" + docIdSrc);
                Row[] shipItm = this.getLovShipmentItm().getFilteredRows("DocId", docIdSrc);
                _log.info("No. of Rows in ShipmentItem=" + shipItm.length);
                for (Row row : shipItm) {
                    Row newRow = this.getSlsTrnpLrProdDtl().createRow();
                    newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                    newRow.setAttribute("ItmQty", row.getAttribute("ItmQtyBs"));
                    newRow.setAttribute("QtyUom", row.getAttribute("ItmUomBs"));
                    newRow.setAttribute("ItmWt", this.getItemWtFromPack(pickId, row.getAttribute("ItmId").toString()));
                    newRow.setAttribute("ItmWtUom", row.getAttribute("ItmUom"));
                    this.getSlsTrnpLrProdDtl().insertRow(newRow);
                }
            } else if (requestBasis.equals(new Integer(5))) {
                //Purchase Case
                _log.info("Purchase Order Case");
                this.getPurchaseOrdItem().setNamedWhereClauseParam("cldIdBind",
                                                                   this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("CldId"));
                this.getPurchaseOrdItem().setNamedWhereClauseParam("poDocIdBind", docIdSrc);
                this.getPurchaseOrdItem().setNamedWhereClauseParam("orgIdBind",
                                                                   this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("OrgId"));
                this.getPurchaseOrdItem().setNamedWhereClauseParam("slocIdBind",
                                                                   this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("SlocId"));
                this.getPurchaseOrdItem().executeQuery();
                _log.info("DocIdSrc of Purchase Order=" + docIdSrc);
                Row[] purItm = this.getPurchaseOrdItem().getFilteredRows("DocId", docIdSrc);
                _log.info("No. of Rows in Purchase Order Items=" + purItm.length);
                for (Row row : purItm) {
                    Row newRow = this.getSlsTrnpLrProdDtl().createRow();
                    newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                    newRow.setAttribute("ItmQty", row.getAttribute("TotQty"));
                    newRow.setAttribute("QtyUom", row.getAttribute("ItmUom"));
                    this.getSlsTrnpLrProdDtl().insertRow(newRow);
                }
            } else if (requestBasis.equals(new Integer(39))) {
                _log.info("Transfer Order Case");
                //Shipment Case
                ViewObjectImpl trfOdrItm = this.getLovTransferOrderItmVO1();
                trfOdrItm.setNamedWhereClauseParam("BindCldId",
                                                   this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("CldId"));
                trfOdrItm.setNamedWhereClauseParam("BindDocId", docIdSrc);
                trfOdrItm.setNamedWhereClauseParam("BindOrgId",
                                                   this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("OrgId"));
                trfOdrItm.setNamedWhereClauseParam("BindSlocId",
                                                   this.getSlsTrnpLrDocSrc().getCurrentRow().getAttribute("SlocId"));
                trfOdrItm.executeQuery();

                System.out.println("DocIdSrc of transfer order =" + docIdSrc);
                Row[] toItm = trfOdrItm.getFilteredRows("DocId", docIdSrc);
                System.out.println("No. of Rows in TransferItem=" + toItm.length);

                for (Row row : toItm) {

                    Row newRow = this.getSlsTrnpLrProdDtl().createRow();
                    newRow.setAttribute("ItmId", row.getAttribute("ItmId"));
                    newRow.setAttribute("ItmQty", row.getAttribute("IssuQty"));
                    newRow.setAttribute("QtyUom", row.getAttribute("ItmUom"));
                    this.getSlsTrnpLrProdDtl().insertRow(newRow);

                }
            } else {
                _log.info("Not matched any case");
            }
        }
    }

    private Number getItemWtFromPack(String pickId, String itemId) {
        Number val = new Number(0);

        if (pickId != null && itemId != null) {
            ViewObjectImpl dtlVO1 = this.getLovShipmentPick();
            dtlVO1.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            dtlVO1.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            dtlVO1.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            dtlVO1.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            dtlVO1.setNamedWhereClauseParam("BindPickId", pickId);
            dtlVO1.setNamedWhereClauseParam("BindItmId", itemId);

            dtlVO1.executeQuery();

            Row[] allRowsInRange = dtlVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                val = (Number) allRowsInRange[0].getAttribute("PackWt");
            }
        }

        return val;
    }

    /**
     * Container's getter for LovShipment1.
     * @return LovShipment1
     */
    public ViewObjectImpl getLovShipment() {
        return (ViewObjectImpl) findViewObject("LovShipment");
    }

    /**
     * Container's getter for SlsTrnpLrProdDtl1.
     * @return SlsTrnpLrProdDtl1
     */
    public ViewObjectImpl getSlsTrnpLrProdDtl1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrProdDtl1");
    }


    public String getWfNo() {
        return (String) WorkFlowUtils.getWorkFlowId(this.getRootApplicationModule(), glblDocId, glblDocTypeId);
    }

    public Integer currUsrLvl(String wfNo) {
        return WorkFlowUtils.getWorkFlowCurrUsrLvl(this.getRootApplicationModule(), wfNo, glblDocId, glblDocTypeId);
    }

    public String insWfTxn(String wfId, Integer lvlFrm, Integer lvlTo, String action, String remark, Number amount) {
        Integer usrId = EbizParams.GLBL_APP_USR();
        String docTxnId = (String) this.getSlsTrnpLr().getCurrentRow().getAttribute("DocId");
        return (String) WorkFlowUtils.insertEntriesIntoWfTxn(this.getRootApplicationModule(), glblDocId, glblDocTypeId,
                                                             docTxnId, wfId, usrId, usrId, lvlFrm, lvlTo, action,
                                                             remark, amount);
    }

    public Integer chkPendingUsr() {
        String docTxnId = (String) this.getSlsTrnpLr().getCurrentRow().getAttribute("DocId");
        return WorkFlowUtils.docPendingAt(this.getRootApplicationModule(), glblDocId, glblDocTypeId, docTxnId);
    }

    public void wfReturnAction() {
        _log.info("WF_RET_PARAM =" + ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_PARAM}"));
        if (ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_PARAM}") != null &&
            ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_PARAM}").equals("A")) {
            this.getSlsTrnpLr().getCurrentRow().setAttribute("LrStatus", new Integer(3));
        } else if (ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_PARAM}") != null &&
                   ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_PARAM}").equals("F")) {
            this.getSlsTrnpLr().getCurrentRow().setAttribute("LrStatus", new Integer(2));
        }
    }

    public String getUsrNm(Integer usrId) {
        this.getLovUsrNm().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovUsrNm().setNamedWhereClauseParam("usrIdBind", usrId);
        this.getLovUsrNm().executeQuery();
        Row[] fr = this.getLovUsrNm().getFilteredRows("UsrId", usrId);
        if (fr.length > 0)
            return (String) fr[0].getAttribute("UsrName");
        else
            return "Anonymous";
    }

    /**
     * Container's getter for LovUsrNm1.
     * @return LovUsrNm1
     */
    public ViewObjectImpl getLovUsrNm() {
        return (ViewObjectImpl) findViewObject("LovUsrNm");
    }

    /**
     * Container's getter for PurchaseOrdItem1.
     * @return PurchaseOrdItem1
     */
    public ViewObjectImpl getPurchaseOrdItem() {
        return (ViewObjectImpl) findViewObject("PurchaseOrdItem");
    }

    /**
     * Container's getter for LovPurchaseOrd1.
     * @return LovPurchaseOrd1
     */
    public ViewObjectImpl getLovPurchaseOrd() {
        return (ViewObjectImpl) findViewObject("LovPurchaseOrd");
    }

    /**
     * Container's getter for SlsTrnpOcVw1.
     * @return SlsTrnpOcVw1
     */
    public ViewObjectImpl getSlsTrnpOcVw() {
        return (ViewObjectImpl) findViewObject("SlsTrnpOcVw");
    }

    /**
     * Container's getter for SlsTrnpLrOc1.
     * @return SlsTrnpLrOc1
     */
    public ViewObjectImpl getSlsTrnpLrOc() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrOc");
    }

    /**
     * Container's getter for SlsTrnpLrRouteDtlToLrOcVL1.
     * @return SlsTrnpLrRouteDtlToLrOcVL1
     */
    public ViewLinkImpl getSlsTrnpLrRouteDtlToLrOcVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLrRouteDtlToLrOcVL1");
    }

    /**
     * Container's getter for LovCoaId1.
     * @return LovCoaId1
     */
    public ViewObjectImpl getLovCoaId() {
        return (ViewObjectImpl) findViewObject("LovCoaId");
    }

    /**
     * Container's getter for LovCurrency1.
     * @return LovCurrency1
     */
    public ViewObjectImpl getLovCurrency() {
        return (ViewObjectImpl) findViewObject("LovCurrency");
    }

    /**
     * Container's getter for LovOcCategory1.
     * @return LovOcCategory1
     */
    public ViewObjectImpl getLovOcCategory() {
        return (ViewObjectImpl) findViewObject("LovOcCategory");
    }

    public String MandatoryDate() {
        System.out.println("inside mandatoryDate Method");
        ViewObjectImpl vo = this.getSlsTrnpLrRouteDtl();
        RowSetIterator rwtitr = vo.createRowSetIterator(null);
        Integer count = 1;
        while (rwtitr.hasNext()) {
            Row r = rwtitr.next();
            count++;
            System.out.println("count ------------------ " + count);
            if (r.getAttribute("ArrivalDate") != null && (r.getAttribute("DepartureDate") != null)) {

                System.out.println(" in if ");
            } else {

                System.out.println(" in else ");

                return "N";
            }
        }
        return "Y";

    }

    public String validateCustomer() {
        System.out.println("in validate customer method");
        ViewObjectImpl eo = this.getSlsTrnpLrRouteDtl();
        Integer customerName = (Integer) eo.getCurrentRow().getAttribute("TransCustomerId");
        System.out.println("customerName::::" + customerName);
        ViewObjectImpl impl = this.getSlsTrnpLrRouteEo();
        Row[] filteredRows = impl.getFilteredRows("EoId", customerName);

        //System.out.println("DocId of SlsTrnpLrRouteEo ::"+this.getSlsTrnpLrRouteEo().getCurrentRow().getAttribute("DocId"));
        System.out.println("NO OF ROWS ARE:::" + filteredRows.length);
        if (filteredRows.length > 0) {
            return "N";
        }
        return "Y";

    }

    public String ValidateDocSrc() {

        System.out.println("in validate DocSrc method");

        //docid get

        ViewObjectImpl eo = this.getSlsTrnpLrRouteEo();
        String DocIdShip = null;
        DocIdShip = (String) eo.getCurrentRow().getAttribute("TransDocIdSrc");
        /*   String DispIdSrc = (String) eo.getCurrentRow().getAttribute("TransDocIdSrcDisp");

        System.out.println("DocIdSrc is:::::::::" + DispIdSrc);

        //get docid into DocIdShip from lov shipment vo by matching DispIdSrc to shipmentid
        Row[] fr = this.getLovShipment().getFilteredRows("ShipmntId", DispIdSrc);
        String DocIdShip = null;
        if (fr.length > 0)
            DocIdShip = (String) fr[0].getAttribute("DocId"); */


        //dupliacte check

        ViewObjectImpl impl = this.getSlsTrnpLrDocSrc();

        Row[] filteredRows = impl.getFilteredRows("DocIdSrc", DocIdShip);

        System.out.println("NO OF ROWS ARE:::" + filteredRows.length);
        if (filteredRows.length > 0) {
            return "N";
        }
        return "Y";

    }

    public void addOcFromVW() {
        Row newRow = this.getSlsTrnpLrOc().getCurrentRow();
        newRow.setAttribute("CoaId", this.getSlsTrnpOcVw().getCurrentRow().getAttribute("CoaId"));
        newRow.setAttribute("TranType", this.getSlsTrnpOcVw().getCurrentRow().getAttribute("OcCalcType"));
        newRow.setAttribute("OcId", this.getSlsTrnpOcVw().getCurrentRow().getAttribute("OcId"));
        newRow.setAttribute("AmtSpOc", new Number(0).round(6));
        newRow.setAttribute("AmtSp", new Number(0).round(6));
        newRow.setAttribute("AmtBs", new Number(0).round(6));
        newRow.setAttribute("OcCat", this.getSlsTrnpOcVw().getCurrentRow().getAttribute("OcCat"));
        newRow.setAttribute("CurrId", this.getSlsTrnpLr().getCurrentRow().getAttribute("CurrIdSp"));
        newRow.setAttribute("CurrRate", this.getSlsTrnpLr().getCurrentRow().getAttribute("CurrConvFctr"));
    }

    /**
     * Container's getter for LOVTRNSPTRoute1.
     * @return LOVTRNSPTRoute1
     */
    public ViewObjectImpl getLOVTRNSPTRoute1() {
        return (ViewObjectImpl) findViewObject("LOVTRNSPTRoute1");
    }

    /**
     * Container's getter for TrnpRouteOc1.
     * @return TrnpRouteOc1
     */
    public ViewObjectImpl getTrnpRouteOc1() {
        return (ViewObjectImpl) findViewObject("TrnpRouteOc1");
    }

    /**
     * Container's getter for LovShipmentPick1.
     * @return LovShipmentPick1
     */
    public ViewObjectImpl getLovShipmentPick() {
        return (ViewObjectImpl) findViewObject("LovShipmentPick");
    }


    /** ---------- To get Column Value from Org Prf -------------**/

    public String getValFrmOrgPrf(String columnName) {

        String val = "";
        try {
            val =
                (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                    new StringBuilder("SLS.fn_trnp_chk_org_prf(?,?,?,?)"), new Object[] {
                                                    EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                    EbizParams.GLBL_APP_USR_ORG(), columnName
            }, Types.VARCHAR);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION fn_trnp_chk_org_prf :" + e.getMessage());
        }
        System.out.println("===========" + val);

        return val;
    }

    public boolean custRateCntrctValidator(String custName) {

        Integer eoId = null;

        ViewObjectImpl lrVo = this.getSlsTrnpLr();
        Row currentRow = lrVo.getCurrentRow();

        if (custName != null) {
            ViewObjectImpl custVo = this.getLovCustNm1();
            custVo.setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
            custVo.setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
            custVo.setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
            custVo.executeQuery();

            Row[] custFilteredRows = custVo.getFilteredRows("EoNm", custName);

            if (custFilteredRows.length > 0) {
                eoId = (Integer) custFilteredRows[0].getAttribute("EoId");
                System.out.println("EoId :: " + eoId);
            }

        }

        if (eoId != null) {

            Boolean result = false;

            ViewObjectImpl rateCntrct = this.getLovEoId1();

            rateCntrct.setNamedWhereClauseParam("BindCldId", EbizParams.GLBL_APP_CLD_ID());
            rateCntrct.setNamedWhereClauseParam("BindHoOrgId", EbizParams.GLBL_HO_ORG_ID());
            rateCntrct.setNamedWhereClauseParam("BindOrgId", EbizParams.GLBL_APP_USR_ORG());
            rateCntrct.setNamedWhereClauseParam("BindSlocId", EbizParams.GLBL_APP_SERV_LOC());
            rateCntrct.setNamedWhereClauseParam("BindCntrctBasis", currentRow.getAttribute("RateBasis"));
            rateCntrct.setNamedWhereClauseParam("BindEoId", eoId);
            rateCntrct.setNamedWhereClauseParam("BindVhclType", currentRow.getAttribute("VehicleTyp"));
            rateCntrct.executeQuery();

            Row[] filteredRows = rateCntrct.getFilteredRows("CurrIdSp", currentRow.getAttribute("CurrIdSp"));

            if (filteredRows.length > 0) {
                return true;
            }

            return result;

        } else
            return true;
    }

    public boolean chkProdDtlRowCount() {
        Boolean result = false;

        Row[] prodDtlRowCount =
            this.getSlsTrnpLrProdDtl().getFilteredRows("DocId",
                                                       this.getSlsTrnpLr().getCurrentRow().getAttribute("DocId"));

        if (prodDtlRowCount.length > 0)
            return true;

        return result;
    }

    /**
     * Container's getter for LovEoId1.
     * @return LovEoId1
     */
    public ViewObjectImpl getLovEoId1() {
        return (ViewObjectImpl) findViewObject("LovEoId1");
    }

    /**
     * Container's getter for LovCustNm1.
     * @return LovCustNm1
     */
    public ViewObjectImpl getLovCustNm1() {
        return (ViewObjectImpl) findViewObject("LovCustNm1");
    }

    /**
     * Container's getter for LovLocationNmVO1.
     * @return LovLocationNmVO1
     */
    public ViewObjectImpl getLovLocationNmVO1() {
        return (ViewObjectImpl) findViewObject("LovLocationNmVO1");
    }

    /**
     * Container's getter for SlsTrnpLrDocSrcVO1.
     * @return SlsTrnpLrDocSrcVO1
     */
    public ViewObjectImpl getSlsTrnpLrDocSrcVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrDocSrcVO1");
    }

    /**
     * Container's getter for LovOrgNmVO1.
     * @return LovOrgNmVO1
     */
    public ViewObjectImpl getLovOrgNmVO1() {
        return (ViewObjectImpl) findViewObject("LovOrgNmVO1");
    }

    /**
     * Container's getter for LovTransferOrderVO1.
     * @return LovTransferOrderVO1
     */
    public ViewObjectImpl getLovTransferOrderVO1() {
        return (ViewObjectImpl) findViewObject("LovTransferOrderVO1");
    }

    /**
     * Container's getter for LovTransferOrderItmVO1.
     * @return LovTransferOrderItmVO1
     */
    public ViewObjectImpl getLovTransferOrderItmVO1() {
        return (ViewObjectImpl) findViewObject("LovTransferOrderItmVO1");
    }

    /**
     * Container's getter for SlsTrnpLrRouteEoVO1.
     * @return SlsTrnpLrRouteEoVO1
     */
    public ViewObjectImpl getSlsTrnpLrRouteEoVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLrRouteEoVO1");
    }

    /**
     * Container's getter for LovItemNmVO1.
     * @return LovItemNmVO1
     */
    public ViewObjectImpl getLovItemNmVO1() {
        return (ViewObjectImpl) findViewObject("LovItemNmVO1");
    }

    public void updtOcBsAmt(Number amtSp) {
        System.out.println("Indside Value change Listener");
        if (this.getSlsTrnpLrOc().getCurrentRow() != null) {
            Number rate = new Number(1);
            if (this.getSlsTrnpLrOc().getCurrentRow().getAttribute("CurrRate") != null)
                rate = (Number) this.getSlsTrnpLrOc().getCurrentRow().getAttribute("CurrRate");
            System.out.println("Rate is =" + rate);
            System.out.println("In vcl Amt Sp=" + amtSp);
            Number bs = (rate.multiply(amtSp));
            System.out.println("in VCL Bs =" + bs);
            this.getSlsTrnpLrOc().getCurrentRow().setAttribute("AmtBs", new Number(bs.round(6)));
        }
    }
}

