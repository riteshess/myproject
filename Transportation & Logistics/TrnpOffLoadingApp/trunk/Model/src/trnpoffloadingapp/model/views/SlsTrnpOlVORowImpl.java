package trnpoffloadingapp.model.views;

import java.sql.SQLException;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSet;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewRowImpl;

import trnpoffloadingapp.model.entities.SlsTrnpOlEOImpl;
import trnpoffloadingapp.model.services.TrnpOffLoadingAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jun 16 16:28:48 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SlsTrnpOlVORowImpl extends ViewRowImpl {
    public static final int ENTITY_SLSTRNPOLEO = 0;
    private static ADFLogger _log = ADFLogger.createADFLogger(SlsTrnpOlVORowImpl.class);


    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        CurrConvFctr,
        CurrIdSp,
        DocId,
        EoId,
        HoOrgId,
        LoDocId,
        LoTyp,
        OlBasis,
        OlDt,
        OlId,
        OlStatus,
        OrgId,
        RateBasis,
        RateFctr,
        ReqTyp,
        SlocId,
        TotKm,
        TotValBs,
        TotValSp,
        TrnspId,
        UsrIdCreate,
        UsrIdCreateDt,
        UsrIdMod,
        UsrIdModDt,
        VehicleNo,
        VhclItmId,
        TransTrnspNm,
        TransLoId,
        TransCustNm,
        TransCurrNm,
        TransTotalAmtSp,
        TransTotalAmtBs,
        TransEoNmLovSwitcher,
        TransTotKm,
        TransActualAmtSp,
        TransLoOcTotalAmt,
        SlsTrnpOlRouteDtl,
        LovUsrNmVO1,
        LovUsrNmVO2,
        LovTrnspNmVO1,
        LovLoIdVO1,
        LovCustNmVO1,
        LovCurrencyVO1,
        LovRateBasisVO1,
        LovRateFctrVO1,
        LovOLStatusVO1,
        LovOlBasisVO1,
        LovSuppNmVO1,
        LovVhclNoVO1,
        LovReqTypVO1;
        static AttributesEnum[] vals = null; ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int CURRCONVFCTR = AttributesEnum.CurrConvFctr.index();
    public static final int CURRIDSP = AttributesEnum.CurrIdSp.index();
    public static final int DOCID = AttributesEnum.DocId.index();
    public static final int EOID = AttributesEnum.EoId.index();
    public static final int HOORGID = AttributesEnum.HoOrgId.index();
    public static final int LODOCID = AttributesEnum.LoDocId.index();
    public static final int LOTYP = AttributesEnum.LoTyp.index();
    public static final int OLBASIS = AttributesEnum.OlBasis.index();
    public static final int OLDT = AttributesEnum.OlDt.index();
    public static final int OLID = AttributesEnum.OlId.index();
    public static final int OLSTATUS = AttributesEnum.OlStatus.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int RATEBASIS = AttributesEnum.RateBasis.index();
    public static final int RATEFCTR = AttributesEnum.RateFctr.index();
    public static final int REQTYP = AttributesEnum.ReqTyp.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int TOTKM = AttributesEnum.TotKm.index();
    public static final int TOTVALBS = AttributesEnum.TotValBs.index();
    public static final int TOTVALSP = AttributesEnum.TotValSp.index();
    public static final int TRNSPID = AttributesEnum.TrnspId.index();
    public static final int USRIDCREATE = AttributesEnum.UsrIdCreate.index();
    public static final int USRIDCREATEDT = AttributesEnum.UsrIdCreateDt.index();
    public static final int USRIDMOD = AttributesEnum.UsrIdMod.index();
    public static final int USRIDMODDT = AttributesEnum.UsrIdModDt.index();
    public static final int VEHICLENO = AttributesEnum.VehicleNo.index();
    public static final int VHCLITMID = AttributesEnum.VhclItmId.index();
    public static final int TRANSTRNSPNM = AttributesEnum.TransTrnspNm.index();
    public static final int TRANSLOID = AttributesEnum.TransLoId.index();
    public static final int TRANSCUSTNM = AttributesEnum.TransCustNm.index();
    public static final int TRANSCURRNM = AttributesEnum.TransCurrNm.index();
    public static final int TRANSTOTALAMTSP = AttributesEnum.TransTotalAmtSp.index();
    public static final int TRANSTOTALAMTBS = AttributesEnum.TransTotalAmtBs.index();
    public static final int TRANSEONMLOVSWITCHER = AttributesEnum.TransEoNmLovSwitcher.index();
    public static final int TRANSTOTKM = AttributesEnum.TransTotKm.index();
    public static final int TRANSACTUALAMTSP = AttributesEnum.TransActualAmtSp.index();
    public static final int TRANSLOOCTOTALAMT = AttributesEnum.TransLoOcTotalAmt.index();
    public static final int SLSTRNPOLROUTEDTL = AttributesEnum.SlsTrnpOlRouteDtl.index();
    public static final int LOVUSRNMVO1 = AttributesEnum.LovUsrNmVO1.index();
    public static final int LOVUSRNMVO2 = AttributesEnum.LovUsrNmVO2.index();
    public static final int LOVTRNSPNMVO1 = AttributesEnum.LovTrnspNmVO1.index();
    public static final int LOVLOIDVO1 = AttributesEnum.LovLoIdVO1.index();
    public static final int LOVCUSTNMVO1 = AttributesEnum.LovCustNmVO1.index();
    public static final int LOVCURRENCYVO1 = AttributesEnum.LovCurrencyVO1.index();
    public static final int LOVRATEBASISVO1 = AttributesEnum.LovRateBasisVO1.index();
    public static final int LOVRATEFCTRVO1 = AttributesEnum.LovRateFctrVO1.index();
    public static final int LOVOLSTATUSVO1 = AttributesEnum.LovOLStatusVO1.index();
    public static final int LOVOLBASISVO1 = AttributesEnum.LovOlBasisVO1.index();
    public static final int LOVSUPPNMVO1 = AttributesEnum.LovSuppNmVO1.index();
    public static final int LOVVHCLNOVO1 = AttributesEnum.LovVhclNoVO1.index();
    public static final int LOVREQTYPVO1 = AttributesEnum.LovReqTypVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public SlsTrnpOlVORowImpl() {
    }

    /**
     * Gets SlsTrnpOlEO entity object.
     * @return the SlsTrnpOlEO
     */
    public SlsTrnpOlEOImpl getSlsTrnpOlEO() {
        return (SlsTrnpOlEOImpl) getEntity(ENTITY_SLSTRNPOLEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @return the CURR_CONV_FCTR
     */
    public Number getCurrConvFctr() {
        return (Number) getAttributeInternal(CURRCONVFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_CONV_FCTR using the alias name CurrConvFctr.
     * @param value value to set the CURR_CONV_FCTR
     */
    public void setCurrConvFctr(Number value) {
        setAttributeInternal(CURRCONVFCTR, value);
    }

    /**
     * Gets the attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @return the CURR_ID_SP
     */
    public Integer getCurrIdSp() {
        return (Integer) getAttributeInternal(CURRIDSP);
    }

    /**
     * Sets <code>value</code> as attribute value for CURR_ID_SP using the alias name CurrIdSp.
     * @param value value to set the CURR_ID_SP
     */
    public void setCurrIdSp(Integer value) {
        setAttributeInternal(CURRIDSP, value);
    }

    /**
     * Gets the attribute value for DOC_ID using the alias name DocId.
     * @return the DOC_ID
     */
    public String getDocId() {
        return (String) getAttributeInternal(DOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for DOC_ID using the alias name DocId.
     * @param value value to set the DOC_ID
     */
    public void setDocId(String value) {
        setAttributeInternal(DOCID, value);
    }

    /**
     * Gets the attribute value for EO_ID using the alias name EoId.
     * @return the EO_ID
     */
    public Integer getEoId() {
        return (Integer) getAttributeInternal(EOID);
    }

    /**
     * Sets <code>value</code> as attribute value for EO_ID using the alias name EoId.
     * @param value value to set the EO_ID
     */
    public void setEoId(Integer value) {
        setAttributeInternal(EOID, value);
    }

    /**
     * Gets the attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @return the HO_ORG_ID
     */
    public String getHoOrgId() {
        return (String) getAttributeInternal(HOORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for HO_ORG_ID using the alias name HoOrgId.
     * @param value value to set the HO_ORG_ID
     */
    public void setHoOrgId(String value) {
        setAttributeInternal(HOORGID, value);
    }

    /**
     * Gets the attribute value for LO_DOC_ID using the alias name LoDocId.
     * @return the LO_DOC_ID
     */
    public String getLoDocId() {
        return (String) getAttributeInternal(LODOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for LO_DOC_ID using the alias name LoDocId.
     * @param value value to set the LO_DOC_ID
     */
    public void setLoDocId(String value) {
        setAttributeInternal(LODOCID, value);
    }

    /**
     * Gets the attribute value for LO_TYP using the alias name LoTyp.
     * @return the LO_TYP
     */
    public String getLoTyp() {
        return (String) getAttributeInternal(LOTYP);
    }

    /**
     * Sets <code>value</code> as attribute value for LO_TYP using the alias name LoTyp.
     * @param value value to set the LO_TYP
     */
    public void setLoTyp(String value) {
        setAttributeInternal(LOTYP, value);
    }

    /**
     * Gets the attribute value for OL_BASIS using the alias name OlBasis.
     * @return the OL_BASIS
     */
    public Integer getOlBasis() {
        return (Integer) getAttributeInternal(OLBASIS);
    }

    /**
     * Sets <code>value</code> as attribute value for OL_BASIS using the alias name OlBasis.
     * @param value value to set the OL_BASIS
     */
    public void setOlBasis(Integer value) {
        if(value != null)
        {
            if(value.equals(39))
            {
                this.setEoId(new Integer(0));    
                System.out.println("EoId in olBasis setter is :: "+this.getEoId());
            }
        }
        setAttributeInternal(OLBASIS, value);
    }

    /**
     * Gets the attribute value for OL_DT using the alias name OlDt.
     * @return the OL_DT
     */
    public Timestamp getOlDt() {
        return (Timestamp) getAttributeInternal(OLDT);
    }

    /**
     * Sets <code>value</code> as attribute value for OL_DT using the alias name OlDt.
     * @param value value to set the OL_DT
     */
    public void setOlDt(Timestamp value) {
        setAttributeInternal(OLDT, value);
    }

    /**
     * Gets the attribute value for OL_ID using the alias name OlId.
     * @return the OL_ID
     */
    public String getOlId() {
        return (String) getAttributeInternal(OLID);
    }

    /**
     * Sets <code>value</code> as attribute value for OL_ID using the alias name OlId.
     * @param value value to set the OL_ID
     */
    public void setOlId(String value) {
        setAttributeInternal(OLID, value);
    }

    /**
     * Gets the attribute value for OL_STATUS using the alias name OlStatus.
     * @return the OL_STATUS
     */
    public Integer getOlStatus() {
        return (Integer) getAttributeInternal(OLSTATUS);
    }

    /**
     * Sets <code>value</code> as attribute value for OL_STATUS using the alias name OlStatus.
     * @param value value to set the OL_STATUS
     */
    public void setOlStatus(Integer value) {
        setAttributeInternal(OLSTATUS, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for RATE_BASIS using the alias name RateBasis.
     * @return the RATE_BASIS
     */
    public String getRateBasis() {
        return (String) getAttributeInternal(RATEBASIS);
    }

    /**
     * Sets <code>value</code> as attribute value for RATE_BASIS using the alias name RateBasis.
     * @param value value to set the RATE_BASIS
     */
    public void setRateBasis(String value) {
        setAttributeInternal(RATEBASIS, value);
    }

    /**
     * Gets the attribute value for RATE_FCTR using the alias name RateFctr.
     * @return the RATE_FCTR
     */
    public String getRateFctr() {
        return (String) getAttributeInternal(RATEFCTR);
    }

    /**
     * Sets <code>value</code> as attribute value for RATE_FCTR using the alias name RateFctr.
     * @param value value to set the RATE_FCTR
     */
    public void setRateFctr(String value) {
        setAttributeInternal(RATEFCTR, value);
    }

    /**
     * Gets the attribute value for REQ_TYP using the alias name ReqTyp.
     * @return the REQ_TYP
     */
    public String getReqTyp() {
        return (String) getAttributeInternal(REQTYP);
    }

    /**
     * Sets <code>value</code> as attribute value for REQ_TYP using the alias name ReqTyp.
     * @param value value to set the REQ_TYP
     */
    public void setReqTyp(String value) {
        setAttributeInternal(REQTYP, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for TOT_KM using the alias name TotKm.
     * @return the TOT_KM
     */
    public Number getTotKm() {
        return (Number) getAttributeInternal(TOTKM);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_KM using the alias name TotKm.
     * @param value value to set the TOT_KM
     */
    public void setTotKm(Number value) {
        setAttributeInternal(TOTKM, value);
    }

    /**
     * Gets the attribute value for TOT_VAL_BS using the alias name TotValBs.
     * @return the TOT_VAL_BS
     */
    public Number getTotValBs() {
        return (Number) getAttributeInternal(TOTVALBS);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_VAL_BS using the alias name TotValBs.
     * @param value value to set the TOT_VAL_BS
     */
    public void setTotValBs(Number value) {
        setAttributeInternal(TOTVALBS, value);
    }

    /**
     * Gets the attribute value for TOT_VAL_SP using the alias name TotValSp.
     * @return the TOT_VAL_SP
     */
    public Number getTotValSp() {
        return (Number) getAttributeInternal(TOTVALSP);
    }

    /**
     * Sets <code>value</code> as attribute value for TOT_VAL_SP using the alias name TotValSp.
     * @param value value to set the TOT_VAL_SP
     */
    public void setTotValSp(Number value) {
        Number fctr = new Number(0);
        if (value == null)
            value = new Number(0);
        if (this.getCurrConvFctr() != null)
            fctr = this.getCurrConvFctr();
        this.setTotValBs(value.multiply(fctr));

        setAttributeInternal(TOTVALSP, value);
    }

    /**
     * Gets the attribute value for TRNSP_ID using the alias name TrnspId.
     * @return the TRNSP_ID
     */
    public Integer getTrnspId() {
        return (Integer) getAttributeInternal(TRNSPID);
    }

    /**
     * Sets <code>value</code> as attribute value for TRNSP_ID using the alias name TrnspId.
     * @param value value to set the TRNSP_ID
     */
    public void setTrnspId(Integer value) {
        setAttributeInternal(TRNSPID, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @return the USR_ID_CREATE
     */
    public Integer getUsrIdCreate() {
        return (Integer) getAttributeInternal(USRIDCREATE);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE using the alias name UsrIdCreate.
     * @param value value to set the USR_ID_CREATE
     */
    public void setUsrIdCreate(Integer value) {
        setAttributeInternal(USRIDCREATE, value);
    }

    /**
     * Gets the attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @return the USR_ID_CREATE_DT
     */
    public Timestamp getUsrIdCreateDt() {
        return (Timestamp) getAttributeInternal(USRIDCREATEDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_CREATE_DT using the alias name UsrIdCreateDt.
     * @param value value to set the USR_ID_CREATE_DT
     */
    public void setUsrIdCreateDt(Timestamp value) {
        setAttributeInternal(USRIDCREATEDT, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @return the USR_ID_MOD
     */
    public Integer getUsrIdMod() {
        return (Integer) getAttributeInternal(USRIDMOD);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD using the alias name UsrIdMod.
     * @param value value to set the USR_ID_MOD
     */
    public void setUsrIdMod(Integer value) {
        setAttributeInternal(USRIDMOD, value);
    }

    /**
     * Gets the attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @return the USR_ID_MOD_DT
     */
    public Timestamp getUsrIdModDt() {
        return (Timestamp) getAttributeInternal(USRIDMODDT);
    }

    /**
     * Sets <code>value</code> as attribute value for USR_ID_MOD_DT using the alias name UsrIdModDt.
     * @param value value to set the USR_ID_MOD_DT
     */
    public void setUsrIdModDt(Timestamp value) {
        setAttributeInternal(USRIDMODDT, value);
    }

    /**
     * Gets the attribute value for VEHICLE_NO using the alias name VehicleNo.
     * @return the VEHICLE_NO
     */
    public String getVehicleNo() {
        return (String) getAttributeInternal(VEHICLENO);
    }

    /**
     * Sets <code>value</code> as attribute value for VEHICLE_NO using the alias name VehicleNo.
     * @param value value to set the VEHICLE_NO
     */
    public void setVehicleNo(String value) {
        setAttributeInternal(VEHICLENO, value);
    }

    /**
     * Gets the attribute value for VHCL_ITM_ID using the alias name VhclItmId.
     * @return the VHCL_ITM_ID
     */
    public String getVhclItmId() {
        return (String) getAttributeInternal(VHCLITMID);
    }

    /**
     * Sets <code>value</code> as attribute value for VHCL_ITM_ID using the alias name VhclItmId.
     * @param value value to set the VHCL_ITM_ID
     */
    public void setVhclItmId(String value) {
        setAttributeInternal(VHCLITMID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTrnspNm.
     * @return the TransTrnspNm
     */
    public String getTransTrnspNm() {

        Row fr[] = this.getLovTrnspNmVO1().getFilteredRows("EoId", this.getTrnspId());
        if (fr.length > 0) {
            return (String) fr[0].getAttribute("EoNm");
        } else
            return (String) getAttributeInternal(TRANSTRNSPNM);

        // return (String) getAttributeInternal(TRANSTRNSPNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTrnspNm.
     * @param value value to set the  TransTrnspNm
     */
    public void setTransTrnspNm(String value) {
        setAttributeInternal(TRANSTRNSPNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLoId.
     * @return the TransLoId
     */
    public String getTransLoId() {
        if (getAttributeInternal(TRANSLOID) != null)
            return (String) getAttributeInternal(TRANSLOID);
        else {

            Row fr[] = this.getLovLoIdVO1().getFilteredRows("DocId", this.getLoDocId());
            if (fr.length > 0) {
                return (String) fr[0].getAttribute("LoId");
            } else
                return (String) getAttributeInternal(TRANSLOID);
        }
        //   return (String) getAttributeInternal(TRANSLOID);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransLoId.
     * @param value value to set the  TransLoId
     */
    public void setTransLoId(String value) {
        setAttributeInternal(TRANSLOID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCustNm.
     * @return the TransCustNm
     */
    public String getTransCustNm() {
        if (getAttributeInternal(TRANSCUSTNM) != null)
            return (String) getAttributeInternal(TRANSCUSTNM);
        else if (this.getOlBasis() != null) {
            if (this.getOlBasis().equals(4)) {
                Row fr[] = this.getLovCustNmVO1().getFilteredRows("EoId", this.getEoId());
                if (fr.length > 0)
                    return (String) fr[0].getAttribute("EoNm");
            } else {
                Row fr[] = this.getLovSuppNmVO1().getFilteredRows("EoId", this.getEoId());
                if (fr.length > 0)
                    return (String) fr[0].getAttribute("EoNm");
            }
        }
        return (String) getAttributeInternal(TRANSCUSTNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCustNm.
     * @param value value to set the  TransCustNm
     */
    public void setTransCustNm(String value) {
        setAttributeInternal(TRANSCUSTNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransCurrNm.
     * @return the TransCurrNm
     */
    public String getTransCurrNm() {
        if (getAttributeInternal(TRANSCURRNM) != null)
            return (String) getAttributeInternal(TRANSCURRNM);
        else {
            Row fr[] = this.getLovCurrencyVO1().getFilteredRows("CcCurrIdTxn", this.getCurrIdSp());
            if (fr.length > 0) {
                return (String) fr[0].getAttribute("CurrDescTxn");
            } else
                return (String) getAttributeInternal(TRANSCURRNM);
        }
        // return (String) getAttributeInternal(TRANSCURRNM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransCurrNm.
     * @param value value to set the  TransCurrNm
     */
    public void setTransCurrNm(String value) {
        setAttributeInternal(TRANSCURRNM, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalAmtSp.
     * @return the TransTotalAmtSp
     */
    public Number getTransTotalAmtSp() {
        TrnpOffLoadingAMImpl am = (TrnpOffLoadingAMImpl) this.getApplicationModule();
        am.getSlsTrnpOlRouteDtl().setRangeSize(-1);
        Number totAmt = new Number(0);
        Number rtAmt = new Number(0);
        Row[] routeRw = am.getSlsTrnpOlRouteDtl().getAllRowsInRange();
        for (Row row : routeRw) {
            if (row.getAttribute("TransTotAmtSp") != null)
                rtAmt = (Number) row.getAttribute("TransTotAmtSp");
            totAmt = totAmt.add(rtAmt);
        }
        Number fctr = new Number(0);
        if (this.getCurrConvFctr() != null)
            fctr = this.getCurrConvFctr();
        return totAmt;
        //  return (Number) getAttributeInternal(TRANSTOTALAMTSP);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalAmtSp.
     * @param value value to set the  TransTotalAmtSp
     */
    public void setTransTotalAmtSp(Number value) {
        setAttributeInternal(TRANSTOTALAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotalAmtBs.
     * @return the TransTotalAmtBs
     */
    public Number getTransTotalAmtBs() {
        if (this.getTransTotalAmtSp() != null && this.getCurrConvFctr() != null)
            return this.getTransTotalAmtSp().multiply(this.getCurrConvFctr());
        else
            return new Number(0);
        //  return (Number) getAttributeInternal(TRANSTOTALAMTBS);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotalAmtBs.
     * @param value value to set the  TransTotalAmtBs
     */
    public void setTransTotalAmtBs(Number value) {
        setAttributeInternal(TRANSTOTALAMTBS, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransEoNmLovSwitcher.
     * @return the TransEoNmLovSwitcher
     */
    public String getTransEoNmLovSwitcher() {
        if (this.getOlBasis().equals(4))
            return "LOV_TransCustNm";
        else if (this.getOlBasis().equals(5))
            return "LOV_TransSuppNm";
        return (String) getAttributeInternal(TRANSEONMLOVSWITCHER);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransEoNmLovSwitcher.
     * @param value value to set the  TransEoNmLovSwitcher
     */
    public void setTransEoNmLovSwitcher(String value) {
        setAttributeInternal(TRANSEONMLOVSWITCHER, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransTotKm.
     * @return the TransTotKm
     */
    public Number getTransTotKm() {
        TrnpOffLoadingAMImpl amimpl = (TrnpOffLoadingAMImpl) this.getApplicationModule();
        Row fr[] = amimpl.getSlsTrnpOlRouteDtl().getFilteredRows("DocId", this.getDocId());
        Integer totKm = new Integer(0);
        for (Row row : fr) {
            if (row.getAttribute("StrtRead") != null && row.getAttribute("EndRead") != null) {
                totKm = totKm + ((Integer) row.getAttribute("EndRead") - (Integer) row.getAttribute("StrtRead"));
            }
        }
        try {
            this.setTotKm(new Number(totKm));
            return new Number(totKm);
        } catch (SQLException e) {
            _log.info("Exception Occured while Casting Integer to Number");
            return (Number) getAttributeInternal(TRANSTOTKM);
        }
        //  return (Number) getAttributeInternal(TRANSTOTKM);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransTotKm.
     * @param value value to set the  TransTotKm
     */
    public void setTransTotKm(Number value) {
        setAttributeInternal(TRANSTOTKM, value);
    }


    /**
     * Gets the attribute value for the calculated attribute TransActualAmtSp.
     * @return the TransActualAmtSp
     */
    public Number getTransActualAmtSp() {
        Number actAmt = this.getTransTotalAmtSp();
        TrnpOffLoadingAMImpl amimpl = (TrnpOffLoadingAMImpl) this.getApplicationModule();
        if (amimpl.getSlsTrnpOlRouteDtl().getAllRowsInRange().length > 0) {
            amimpl.getSlsTrnpRateCntrct().setNamedWhereClauseParam("cldIdBind", this.getCldId());
            amimpl.getSlsTrnpRateCntrct().setNamedWhereClauseParam("slocIdBind", this.getSlocId());
            amimpl.getSlsTrnpRateCntrct().setNamedWhereClauseParam("orgIdBind", this.getOrgId());
            amimpl.getSlsTrnpRateCntrct().setNamedWhereClauseParam("hoOrgIdBind", this.getHoOrgId());
            amimpl.getSlsTrnpRateCntrct().setNamedWhereClauseParam("eoIdBind",
                                                                   this.getReqTyp().equals("I") ? this.getEoId() :
                                                                   this.getTrnspId());
            amimpl.getSlsTrnpRateCntrct().setNamedWhereClauseParam("loDocIdBind", this.getLoDocId());
            amimpl.getSlsTrnpRateCntrct().executeQuery();
            if (amimpl.getSlsTrnpRateCntrct().getAllRowsInRange().length > 0) {
                Row rcRow[] = amimpl.getSlsTrnpRateCntrct().getAllRowsInRange();
                Number minAmt = new Number(0);
                //  Number minDist = new Number(0);
                Number flatRate = new Number(0);
                if (rcRow.length > 0) {
                    minAmt = (Number) rcRow[0].getAttribute("DayMinAmt");
                    // minDist= (Number) rcRow[0].getAttribute("MinDist");
                    flatRate = (Number) rcRow[0].getAttribute("Rate");
                }
                if (minAmt.compareTo(new Number(0)) > 0) {
                    Row[] routeRw = amimpl.getSlsTrnpOlRouteDtl().getAllRowsInRange();
                    Integer hour = 0;
                    Number dist = new Number(0);

                    Timestamp minDeptDt = null;
                    Timestamp maxArrDt = null;
                    Integer maxSl = 1;
                    for (Row route : routeRw) {
                        if (route.getAttribute("SlNo") != null && route.getAttribute("SlNo").equals(1))
                            minDeptDt = (Timestamp) route.getAttribute("DepartureDate");
                        if (route.getAttribute("SlNo") != null &&
                            ((Integer) route.getAttribute("SlNo")).compareTo(maxSl) > 0)
                            maxSl = (Integer) route.getAttribute("SlNo");
                    }
                    Row arrRow[] = amimpl.getSlsTrnpOlRouteDtl().getFilteredRows("SlNo", maxSl);
                    maxArrDt = (Timestamp) arrRow[0].getAttribute("ArrivalDate");
                    _log.info("Min Departure Date=" + minDeptDt);
                    _log.info("Max Arrival Date=" + maxArrDt);
                    amimpl.getDualCalculateHour().setNamedWhereClauseParam("deptDtbind", minDeptDt);
                    amimpl.getDualCalculateHour().setNamedWhereClauseParam("arrDtBind", maxArrDt);
                    amimpl.getDualCalculateHour().executeQuery();
                    if (amimpl.getDualCalculateHour().getAllRowsInRange().length > 0)
                        hour = (Integer) amimpl.getDualCalculateHour().getAllRowsInRange()[0].getAttribute("Hours");
                    if (this.getTotKm() != null)
                        dist = this.getTotKm();
                    Number day = new Number(hour + 1);
                    day = (Number) day.ceil();
                    if (day.multiply(minAmt).compareTo(this.getTransTotalAmtSp()) >= 0) {
                        actAmt = day.multiply(minAmt);
                    }
                }
            }
        }

        this.setTotValSp(actAmt);
        // return (Number) getAttributeInternal(TRANSACTUALAMTSP);
        return actAmt;
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransActualAmtSp.
     * @param value value to set the  TransActualAmtSp
     */
    public void setTransActualAmtSp(Number value) {
        setAttributeInternal(TRANSACTUALAMTSP, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TransLoOcTotalAmt.
     * @return the TransLoOcTotalAmt
     */
    public Number getTransLoOcTotalAmt() {

        Number totalOcAmt = new Number(0);

        if (this.getDocId() != null) {
            TrnpOffLoadingAMImpl am = (TrnpOffLoadingAMImpl) this.getApplicationModule();
            am.getSlsTrnpOlOc1().setRangeSize(-1);
            RowQualifier rq = new RowQualifier(am.getSlsTrnpOlOc1());
            rq.setWhereClause("DocId = '" + this.getDocId() + "'");

            Row[] filteredRows = am.getSlsTrnpOlOc1().getFilteredRows(rq);

            if (filteredRows.length > 0) {
                for (Row r : filteredRows) {
                    totalOcAmt = totalOcAmt.add((Number) r.getAttribute("AmtSp"));
                    System.out.println("Iterator totalOcAmt :: " + totalOcAmt);
                }
            }
        }
        return totalOcAmt;

        //return (Number) getAttributeInternal(TRANSLOOCTOTALAMT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TransLoOcTotalAmt.
     * @param value value to set the  TransLoOcTotalAmt
     */
    public void setTransLoOcTotalAmt(Number value) {
        setAttributeInternal(TRANSLOOCTOTALAMT, value);
    }

    /**
     * Gets the associated <code>RowIterator</code> using master-detail link SlsTrnpOlRouteDtl.
     */
    public RowIterator getSlsTrnpOlRouteDtl() {
        return (RowIterator) getAttributeInternal(SLSTRNPOLROUTEDTL);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUsrNmVO1.
     */
    public RowSet getLovUsrNmVO1() {
        return (RowSet) getAttributeInternal(LOVUSRNMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovUsrNmVO2.
     */
    public RowSet getLovUsrNmVO2() {
        return (RowSet) getAttributeInternal(LOVUSRNMVO2);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovTrnspNmVO1.
     */
    public RowSet getLovTrnspNmVO1() {
        return (RowSet) getAttributeInternal(LOVTRNSPNMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovLoIdVO1.
     */
    public RowSet getLovLoIdVO1() {
        return (RowSet) getAttributeInternal(LOVLOIDVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCustNmVO1.
     */
    public RowSet getLovCustNmVO1() {
        return (RowSet) getAttributeInternal(LOVCUSTNMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovCurrencyVO1.
     */
    public RowSet getLovCurrencyVO1() {
        return (RowSet) getAttributeInternal(LOVCURRENCYVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovRateBasisVO1.
     */
    public RowSet getLovRateBasisVO1() {
        return (RowSet) getAttributeInternal(LOVRATEBASISVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovRateFctrVO1.
     */
    public RowSet getLovRateFctrVO1() {
        return (RowSet) getAttributeInternal(LOVRATEFCTRVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOLStatusVO1.
     */
    public RowSet getLovOLStatusVO1() {
        return (RowSet) getAttributeInternal(LOVOLSTATUSVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovOlBasisVO1.
     */
    public RowSet getLovOlBasisVO1() {
        return (RowSet) getAttributeInternal(LOVOLBASISVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovSuppNmVO1.
     */
    public RowSet getLovSuppNmVO1() {
        return (RowSet) getAttributeInternal(LOVSUPPNMVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovVhclNoVO1.
     */
    public RowSet getLovVhclNoVO1() {
        return (RowSet) getAttributeInternal(LOVVHCLNOVO1);
    }

    /**
     * Gets the view accessor <code>RowSet</code> LovReqTypVO1.
     */
    public RowSet getLovReqTypVO1() {
        return (RowSet) getAttributeInternal(LOVREQTYPVO1);
    }
}

