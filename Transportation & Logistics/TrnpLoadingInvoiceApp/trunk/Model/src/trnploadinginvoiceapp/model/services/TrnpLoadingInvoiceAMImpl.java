package trnploadinginvoiceapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.sql.SQLException;
import java.sql.Types;

import javax.faces.application.FacesMessage;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import trnploadinginvoiceapp.model.services.common.TrnpLoadingInvoiceAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jun 15 17:23:17 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TrnpLoadingInvoiceAMImpl extends ApplicationModuleImpl implements TrnpLoadingInvoiceAM {
    /**
     * This is the default constructor (do not remove).
     */
    public TrnpLoadingInvoiceAMImpl() {
    }

    protected String getCldIdValue() {
        return EbizParams.GLBL_APP_CLD_ID();
    }

    protected Integer getSlocIdValue() {
        return EbizParams.GLBL_APP_SERV_LOC();
    }

    protected String getHoOrgIdValue() {
        return EbizParams.GLBL_HO_ORG_ID();
    }

    protected String getOrgIdValue() {
        return EbizParams.GLBL_APP_USR_ORG();
    }

    protected Integer getUsrIdValue() {
        return EbizParams.GLBL_APP_USR();
    }

    /**
     * Container's getter for SlsTrnpLiVO1.
     * @return SlsTrnpLiVO1
     */
    public ViewObjectImpl getSlsTrnpLiVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiVO1");
    }

    /**
     * Container's getter for LOVAppEo1.
     * @return LOVAppEo1
     */
    public ViewObjectImpl getLOVAppEoVO1() {
        return (ViewObjectImpl) findViewObject("LOVAppEoVO1");
    }

    /**
     * Container's getter for LOVCurrId1.
     * @return LOVCurrId1
     */
    public ViewObjectImpl getLOVCurrIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVCurrIdVO1");
    }

    /**
     * Container's getter for SlsTrnpLiDtl1.
     * @return SlsTrnpLiDtl1
     */
    public ViewObjectImpl getSlsTrnpLiDtlVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiDtlVO1");
    }

    /**
     * Container's getter for SlsTrnpLiToTrnpLiDtlVL1.
     * @return SlsTrnpLiToTrnpLiDtlVL1
     */
    public ViewLinkImpl getSlsTrnpLiToTrnpLiDtlVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLiToTrnpLiDtlVL1");
    }

    /**
     * Method which will set base value based on user entry for specific value
     */
    public void setBaseValue(Number amtSp) {
        Row currentRow = this.getSlsTrnpLiVO1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("CurrConvFctr") != null) {
            Row row = this.getSlsTrnpLiDtlVO1().getCurrentRow();
            if (row != null) {
                Number val = new Number(0);

                val = (Number) currentRow.getAttribute("CurrConvFctr");

                row.setAttribute("AmtBs", val.multiply(amtSp));
            }
        }
    }

    /**
     * Method which will filter SlsTrnpLi Based on Document Id
     */
    public void filterTrnpLiData() {
        if (ADFModelUtils.resolvEl("#{pageFlowScope.P_DOC_ID}") != null) {
            ViewObjectImpl impl = this.getSlsTrnpLiVO1();
            impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            impl.setNamedWhereClauseParam("BindDocId", ADFModelUtils.resolvEl("#{pageFlowScope.P_DOC_ID}"));

            impl.executeQuery();
        } else {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.120"), "",
                                                    FacesMessage.SEVERITY_ERROR);
            /*  ADFModelUtils.showFormattedFacesMessage("Something went wrong", "Contact Ess...",
                                                    FacesMessage.SEVERITY_ERROR); */
        }
    }

    /**
     * Container's getter for SearchData1.
     * @return SearchData1
     */
    public ViewObjectImpl getSearchDataVO1() {
        return (ViewObjectImpl) findViewObject("SearchDataVO1");
    }

    /**
     * Container's getter for LOVOffLoading1.
     * @return LOVOffLoading1
     */
    public ViewObjectImpl getLOVOffLoadingVO1() {
        return (ViewObjectImpl) findViewObject("LOVOffLoadingVO1");
    }

    /**
     * Method which will load on search page onload and set bind variables for TemporaryData Vo
     */
    public void loadOnStartUp() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        dataVO1.executeQuery();

    }

    /**
     * Container's getter for TemporaryData1.
     * @return TemporaryData1
     */
    public ViewObjectImpl getTemporaryDataVO1() {
        return (ViewObjectImpl) findViewObject("TemporaryDataVO1");
    }

    /**
     * Method which will be called when user click on search Button
     */
    public void searchForData() {
        Row currentRow = this.getTemporaryDataVO1().getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl dataVO1 = this.getSearchDataVO1();
            dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            if (currentRow.getAttribute("InvoiceDocIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindLiId", currentRow.getAttribute("InvoiceDocIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindLiId", null);
            }

            if (currentRow.getAttribute("CustIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindCustId", currentRow.getAttribute("CustIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindCustId", null);
            }

            if (currentRow.getAttribute("StatusTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindStatus", currentRow.getAttribute("StatusTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindStatus", null);
            }

            if (currentRow.getAttribute("CurrIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindCurrId", currentRow.getAttribute("CurrIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindCurrId", null);
            }

            dataVO1.executeQuery();
        }
    }

    /**
     * Following method will be called wwhen user click on reset button
     */
    public void resetData() {
        this.getTemporaryDataVO1().executeQuery();

        ViewObjectImpl dataVO1 = this.getSearchDataVO1();
        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", "-1");

        dataVO1.setNamedWhereClauseParam("BindLiId", null);
        dataVO1.setNamedWhereClauseParam("BindCustId", null);
        dataVO1.setNamedWhereClauseParam("BindStatus", null);
        dataVO1.setNamedWhereClauseParam("BindCurrId", null);

        dataVO1.executeQuery();
    }

    /**
     * Method which will set default values of SlNo and Round Trip Flag Value
     */
    public void setDfltLiDtlValues() {
        Row currentRow = this.getSlsTrnpLiDtlVO1().getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("SlNo", 1);
            currentRow.setAttribute("RoundTrpFlg", "N");
        }
    }

    /**
     * Method which will insert a new row when user click on rate@round trip flag
     */
    public void insNewRoundTripRow(Number emptyRate) {
        if (emptyRate != null) {
            Number convFctr = (Number) this.getSlsTrnpLiVO1().getCurrentRow().getAttribute("CurrConvFctr");
            ViewObjectImpl dtlVO1 = this.getSlsTrnpLiDtlVO1();
            Row currentRow = dtlVO1.getCurrentRow();
            if (currentRow != null && currentRow.getAttribute("TotKm") != null && convFctr != null) {
                RowQualifier rQ = new RowQualifier(dtlVO1);
                rQ.setWhereClause("OlId ='" + currentRow.getAttribute("OlId") + "' and SlNo =2 and RoundTrpFlg ='R'");
                Row[] filteredRows = dtlVO1.getFilteredRows(rQ);
                if (filteredRows.length >
                    0) { /// Will update existing row
                    filteredRows[0].setAttribute("AmtSp",
                                                 emptyRate.multiply((Number) currentRow.getAttribute("TotKm")));
                    filteredRows[0].setAttribute("AmtBs",
                                                 emptyRate.multiply(convFctr.multiply((Number) currentRow.getAttribute("TotKm"))));
                } else { //// Will Insert new Row with Sl No as 2 and RoundTrpFlg as R
                    Key key = currentRow.getKey();

                    Row createRow = dtlVO1.createRow();

                    createRow.setAttribute("OlId", currentRow.getAttribute("OlId"));
                    createRow.setAttribute("TotKm", currentRow.getAttribute("TotKm"));
                    createRow.setAttribute("VhclItmId", currentRow.getAttribute("VhclItmId"));
                    createRow.setAttribute("VhclNo", currentRow.getAttribute("VhclNo"));
                    createRow.setAttribute("RoundTrpFlg", "R");
                    createRow.setAttribute("SlNo", 2);
                    createRow.setAttribute("AmtSp", emptyRate.multiply((Number) currentRow.getAttribute("TotKm")));
                    createRow.setAttribute("AmtBs",
                                           emptyRate.multiply(convFctr.multiply((Number) currentRow.getAttribute("TotKm"))));

                    dtlVO1.insertRow(createRow);

                    dtlVO1.setCurrentRow(dtlVO1.getRow(key));
                }
            }
        }
    }

    /**
     * Method which will remove the new inserted row
     */
    public void removeRoundTripRow() {
        ViewObjectImpl dtlVO1 = this.getSlsTrnpLiDtlVO1();
        Row currentRow = dtlVO1.getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("TotKm") != null) {
            RowQualifier rQ = new RowQualifier(dtlVO1);
            rQ.setWhereClause("OlId ='" + currentRow.getAttribute("OlId") + "' and SlNo =2 and RoundTrpFlg ='R'");
            Row[] filteredRows = dtlVO1.getFilteredRows(rQ);
            if (filteredRows.length > 0) {
                filteredRows[0].remove();
                currentRow.setAttribute("RateEmptyVehicle", null);
            }
        }
    }

    /**
     * Container's getter for VwSlsTrnpOcVw1.
     * @return VwSlsTrnpOcVw1
     */
    public ViewObjectImpl getVwSlsTrnpOcVwVO1() {
        return (ViewObjectImpl) findViewObject("VwSlsTrnpOcVwVO1");
    }


    /**
     * Container's getter for LOVCoaId1.
     * @return LOVCoaId1
     */
    public ViewObjectImpl getLOVCoaIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVCoaIdVO1");
    }

    /**
     * Method which will insert data from Other Charges View Object To SlsTrnpLiOcVO1
     */
    public void addOcFromVW() {
        Row newRow = this.getSlsTrnpLiOcVO1().getCurrentRow();
        newRow.setAttribute("CoaId", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("CoaId"));
        newRow.setAttribute("TranType", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("OcCalcType"));
        newRow.setAttribute("OcId", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("OcId"));
        newRow.setAttribute("AmtSpOc", new Number(0));
        newRow.setAttribute("AmtSp", new Number(0));
        newRow.setAttribute("AmtBs", new Number(0));
        newRow.setAttribute("OcCat", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("OcCat"));
        newRow.setAttribute("CurrId", this.getSlsTrnpLiVO1().getCurrentRow().getAttribute("CurrIdSp"));
        newRow.setAttribute("CurrRate", this.getSlsTrnpLiVO1().getCurrentRow().getAttribute("CurrConvFctr"));
    }

    /**
     *Method which will set bind variable on page load  of ADD/Edit TF
     */
    public void setBindVarOnTFLoad() {
        ViewObjectImpl impl = this.getVwSlsTrnpOcVwVO1();
        impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());

        impl.executeQuery();
    }

    /**
     * Container's getter for SlsTrnpOlOcGrpByVW1.
     * @return SlsTrnpOlOcGrpByVW1
     */
    public ViewObjectImpl getSlsTrnpOlOcGrpByVWVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpOlOcGrpByVWVO1");
    }

    /**
     * Method which will insert data into Other Charges when user select from Offloading from LOV
     */
    public void insOtherChgsBasedOnOffload(String ocDispId) {
        if (ocDispId != null) {
            String OlDocId = null;
            ViewObjectImpl impl = this.getLOVOffLoadingVO1();
            impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            impl.setNamedWhereClauseParam("BindOlId", null);
            impl.executeQuery();
            Row[] allRowsInRange = impl.getFilteredRows("OlId", ocDispId);

            if (allRowsInRange.length > 0) {
                OlDocId = (String) allRowsInRange[0].getAttribute("DocId");
            }

            if (OlDocId != null) {
                ViewObjectImpl byVWVO1 = this.getSlsTrnpOlOcGrpByVWVO1();
                byVWVO1.setRangeSize(-1);
                byVWVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                byVWVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                byVWVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                byVWVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                byVWVO1.setNamedWhereClauseParam("BindOlDocId", OlDocId);

                byVWVO1.executeQuery();

                Row[] inRange = byVWVO1.getAllRowsInRange();
                ViewObjectImpl liOcVO1 = this.getSlsTrnpLiOcVO1();
                RowQualifier rQ = new RowQualifier(liOcVO1);
                for (Row r : inRange) {
                    rQ.setWhereClause("CoaId =" + r.getAttribute("CoaId"));
                    Row[] filteredRows = liOcVO1.getFilteredRows(rQ);
                    if (filteredRows.length > 0) {
                        filteredRows[0].setAttribute("AmtSpOc",
                                                     ((Number) r.getAttribute("AmtSpOc")).add((Number) filteredRows[0].getAttribute("AmtSpOc")));
                        filteredRows[0].setAttribute("AmtSp",
                                                     ((Number) r.getAttribute("AmtSp")).add((Number) filteredRows[0].getAttribute("AmtSp")));
                        filteredRows[0].setAttribute("AmtBs",
                                                     ((Number) r.getAttribute("AmtBs")).add((Number) filteredRows[0].getAttribute("AmtBs")));
                    } else {
                        Row createRow = liOcVO1.createRow();

                        createRow.setAttribute("CoaId", r.getAttribute("CoaId"));
                        createRow.setAttribute("TranType", r.getAttribute("TranType"));
                        createRow.setAttribute("OcId", r.getAttribute("OcId"));
                        createRow.setAttribute("AmtSpOc", r.getAttribute("AmtSpOc"));
                        createRow.setAttribute("AmtSp", r.getAttribute("AmtSp"));
                        createRow.setAttribute("AmtBs", r.getAttribute("AmtBs"));
                        createRow.setAttribute("OcCat", r.getAttribute("OcCat"));
                        createRow.setAttribute("CurrId", r.getAttribute("CurrId"));
                        createRow.setAttribute("CurrRate", r.getAttribute("CurrRate"));

                        liOcVO1.insertRow(createRow);
                    }
                }
                liOcVO1.executeQuery();
            }
        }
    }

    /**
     * Container's getter for SlsTrnpLiTr1.
     * @return SlsTrnpLiTr1
     */
    public ViewObjectImpl getSlsTrnpLiTrVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiTrVO1");
    }

    /**
     * Container's getter for SlsTrnpLiToTrnpLiTrVL1.
     * @return SlsTrnpLiToTrnpLiTrVL1
     */
    public ViewLinkImpl getSlsTrnpLiToTrnpLiTrVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLiToTrnpLiTrVL1");
    }

    /**Method to call database function*/
    private Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }

    //------------------------WF Methods--------------------------

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {


        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, doc_no, 0
        });

        return (String) obj;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        System.out.println("pendingCheck");
        Row curr = this.getSlsTrnpLiVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        Object obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        return usrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo) {

        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }).toString());


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post) {

        Row curr = this.getSlsTrnpLiVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());

    }


    public void wfAction(String ret) {
        System.out.println("wfAction Ret =" + ret);
        if (ret != null) {
            if (ret.equals("F")) {
                this.getSlsTrnpLiVO1().getCurrentRow().setAttribute("LiStatus", 14);
            } else if (ret.equals("R")) {

            } else if (ret.equals("V")) {

            } else if (ret.equals("A")) {
                this.getSlsTrnpLiVO1().getCurrentRow().setAttribute("LiStatus", 15);

                updateOffloadingStatus(); // Method which will close offloading status to closed

                pushDatatToFin();
            }
            this.getDBTransaction().commit();
        }
    }

    public String getUsrName(Integer usrId) {
        System.out.println("getUsrName");
        this.getLOVUserNameVO1().setNamedWhereClauseParam("BindSlocId",
                                                          this.getSlsTrnpLiVO1().getCurrentRow().getAttribute("SlocId"));
        this.getLOVUserNameVO1().setNamedWhereClauseParam("BindUsrId", usrId);
        this.getLOVUserNameVO1().executeQuery();

        Row[] r = this.getLOVUserNameVO1().getAllRowsInRange();
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }
    //// End of Workflow methods

    /**
     * Container's getter for LOVUserName1.
     * @return LOVUserName1
     */
    public ViewObjectImpl getLOVUserNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVUserNameVO1");
    }

    /**
     * Method which will get the trans value amount and store it in Total Amount Sp and Bs
     */
    public void setTotalAmtVals() {
        Row currentRow = this.getSlsTrnpLiVO1().getCurrentRow();
        if (currentRow != null) {
            Object totAmtSpTrans = currentRow.getAttribute("BasicAmtSpTrans");

            if (totAmtSpTrans != null) {
                currentRow.setAttribute("TotAmtSp", totAmtSpTrans);
                currentRow.setAttribute("TotAmtBs",
                                        ((Number) totAmtSpTrans).multiply((Number) currentRow.getAttribute("CurrConvFctr")));
            }
        }
    }

    /**
     * Container's getter for SlsTrnpLiTrLines1.
     * @return SlsTrnpLiTrLines1
     */
    public ViewObjectImpl getSlsTrnpLiTrLinesVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiTrLinesVO1");
    }

    /**
     * Container's getter for SlsTrnpLiTrToTrnpLiTrLinesVL1.
     * @return SlsTrnpLiTrToTrnpLiTrLinesVL1
     */
    public ViewLinkImpl getSlsTrnpLiTrToTrnpLiTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLiTrToTrnpLiTrLinesVL1");
    }

    /**
     * Container's getter for SlsTrnpLiTr1.
     * @return SlsTrnpLiTr1
     */
    public ViewObjectImpl getSlsTrnpLiTrVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiTrVO2");
    }

    /**
     * Method which will insert or update data present in Tr and TrLines based on user selection of tax rule
     */
    public void insertIntoSlsTrnpTrAndTrLines(Integer taxRuleId) {
        if (taxRuleId != null) {
            Row currentRow = this.getSlsTrnpLiVO1().getCurrentRow();
            if (currentRow != null) {
                Object docId = currentRow.getAttribute("DocId");
                Object totAmtSpTrans = currentRow.getAttribute("BasicAmtSpTrans");
                Object currConvFctr = currentRow.getAttribute("CurrConvFctr");
                if (docId != null && totAmtSpTrans != null && currConvFctr != null) {
                    ViewObjectImpl trnpLoTrVo2 = this.getSlsTrnpLiTrVO2();

                    RowQualifier rQ = new RowQualifier(trnpLoTrVo2);
                    rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                      " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" +
                                      this.getOrgIdValue() + "' and DocId ='" + docId + "'");
                    Row tr = null;

                    Row[] filteredRows = trnpLoTrVo2.getFilteredRows(rQ);
                    if (filteredRows.length > 0) {
                        tr = filteredRows[0];
                    } else {
                        tr = trnpLoTrVo2.createRow();

                        tr.setAttribute("CldId", this.getCldIdValue());
                        tr.setAttribute("SlocId", this.getSlocIdValue());
                        tr.setAttribute("HoOrgId", this.getHoOrgIdValue());
                        tr.setAttribute("OrgId", this.getOrgIdValue());
                        tr.setAttribute("DocId", docId);
                        tr.setAttribute("TaxRuleId", taxRuleId);

                        trnpLoTrVo2.insertRow(tr);
                    }
                    tr.setAttribute("TaxableAmtSp", totAmtSpTrans);
                    tr.setAttribute("TaxableAmtBs", ((Number) totAmtSpTrans).multiply((Number) currConvFctr));

                    Object val = callStoredFunction(Types.NUMERIC, "fn_trnp_ins_Li_tr_lines(?,?,?,?,?,?,?,?)", new Object[] {
                                                    this.getSlocIdValue(), this.getCldIdValue(), this.getHoOrgIdValue(),
                                                    this.getOrgIdValue(), docId, taxRuleId, totAmtSpTrans, currConvFctr
                    });

                    if (val != null) {
                        tr.setAttribute("TaxAmt", val);
                        try {
                            tr.setAttribute("TaxAmtBs", ((Number) currConvFctr).multiply(new Number(val)));
                        } catch (SQLException e) {
                            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.1478"),
                                                                    ADFModelUtils.resolvRsrc("MSG.120") +"  'fn_trnp_ins_Li_tr_lines' !",
                                                                    FacesMessage.SEVERITY_ERROR);
                            /* ADFModelUtils.showFormattedFacesMessage("Something went wrong",
                                                                    "There have been an error in calling function 'fn_trnp_ins_Li_tr_lines' !",
                                                                    FacesMessage.SEVERITY_ERROR); */
                            e.printStackTrace();
                        }
                    }
                    trnpLoTrVo2.executeQuery();

                    this.getSlsTrnpLiTrVO1().executeQuery();
                    this.getSlsTrnpLiTrLinesVO1().executeQuery();
                }
            }
        }
    }

    /**
     * Method which will set COA Id besed on Customet name selection
     */
    public void setCoaIdBasedOnNameSel(String custName) {
        if (custName != null) {
            ViewObjectImpl appEoVO1 = this.getLOVAppEoVO1();
            appEoVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            appEoVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            appEoVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            appEoVO1.setNamedWhereClauseParam("BindEoId", null);

            appEoVO1.executeQuery();

            RowQualifier rQ = new RowQualifier(appEoVO1);

            rQ.setWhereClause("EoNm ='" + custName + "'");
            Row[] filteredRows = appEoVO1.getFilteredRows(rQ);
            if (filteredRows.length > 0) {
                Row currentRow = this.getSlsTrnpLiVO1().getCurrentRow();
                if (currentRow != null) {
                    Integer coaIdFrmEoId =
                        EbizParams.getCoaIdFrmEoId(this, (Integer) filteredRows[0].getAttribute("EoId"));
                    currentRow.setAttribute("CoaId", coaIdFrmEoId);
                }
            }
        }
    }

    /**
     * Container's getter for SlsTrnpLiCalc1.
     * @return SlsTrnpLiCalc1
     */
    public ViewObjectImpl getSlsTrnpLiCalcVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiCalcVO1");
    }

    /**
     * Container's getter for SlsTrnpLiToTrnpLiCalcVL1.
     * @return SlsTrnpLiToTrnpLiCalcVL1
     */
    public ViewLinkImpl getSlsTrnpLiToTrnpLiCalcVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLiToTrnpLiCalcVL1");
    }

    /**
     * Method which will be called when user click on Process Calculation
     */
    public void processCalcOnUserSel() {
        Row currentRow = this.getSlsTrnpLiVO1().getCurrentRow();
        if (currentRow != null) {
            Object docId = currentRow.getAttribute("DocId");
            Object currIdSp = currentRow.getAttribute("CurrIdSp");
            Object currConvFctr = currentRow.getAttribute("CurrConvFctr");

            if (docId != null && currIdSp != null && currConvFctr != null) {
                this.getDBTransaction().postChanges();

                callStoredFunction(Types.INTEGER, "fn_trnp_ins_li_calc(?,?,?,?,?,?,?,?)", new Object[] {
                                   this.getSlocIdValue(), this.getCldIdValue(), this.getHoOrgIdValue(),
                                   this.getOrgIdValue(), docId, this.getUsrIdValue(), currIdSp, currConvFctr
                });

                this.getSlsTrnpLiCalcVO1().executeQuery();
            }
        }
    }

    /**
     * Container's getter for SlsTrnpLiOc1.
     * @return SlsTrnpLiOc1
     */
    public ViewObjectImpl getSlsTrnpLiOcVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiOcVO1");
    }

    /**
     * Container's getter for SlsTrnpLiToTrnpLiOcVL1.
     * @return SlsTrnpLiToTrnpLiOcVL1
     */
    public ViewLinkImpl getSlsTrnpLiToTrnpLiOcVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpLiToTrnpLiOcVL1");
    }

    /**
     *Method which will check duplicate record present or not
     */
    public Boolean chkOffloadingExistOrNot(String offloading) {
        Boolean val = true;
        if (offloading != null) {
            ViewObjectImpl impl = this.getLOVOffLoadingVO1();
            impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            impl.setNamedWhereClauseParam("BindOlId", null);
            impl.executeQuery();
            Row[] allRowsInRange = impl.getFilteredRows("OlId", offloading);

            if (allRowsInRange.length > 0) {
                ViewObjectImpl dtlVO1 = this.getSlsTrnpLiDtlVO1();

                if (dtlVO1.getCurrentRow().getAttribute("SlNo") != null &&
                    Integer.parseInt(dtlVO1.getCurrentRow().getAttribute("SlNo").toString()) == 1) {
                    RowQualifier rQ = new RowQualifier(dtlVO1);
                    rQ.setWhereClause("OlId ='" + allRowsInRange[0].getAttribute("DocId") + "' and SlNo =1");
                    Row[] filteredRows = dtlVO1.getFilteredRows(rQ);

                    if (filteredRows.length > 0) {
                        if (!filteredRows[0].getKey().equals(dtlVO1.getCurrentRow().getKey())) {
                            val = false;
                        }
                    }
                }
            }
        }
        return val;
    }

    /**
     * Following method will push data from TRNP to Finance
     */
    private void pushDatatToFin() {
        Row currentRow = this.getSlsTrnpLiVO1().getCurrentRow();
        if (currentRow != null) {
            try {
                Object vouId = callStoredFunction(Types.VARCHAR, "fn_trnp_li_gl_ins(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                  currentRow.getAttribute("DocId"), currentRow.getAttribute("LiDt"),
                                                  currentRow.getAttribute("TotAmtSpTrans"), this.getUsrIdValue(),
                                                  this.getOrgIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                                  this.getCldIdValue(), currentRow.getAttribute("EoId"),
                                                  currentRow.getAttribute("CoaId"), currentRow.getAttribute("CurrIdSp"),
                                                  currentRow.getAttribute("CurrConvFctr")
                });

                if (vouId != null) {
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.319"),
                                                            ADFModelUtils.resolvRsrc("LBL.4648") + vouId,
                                                            FacesMessage.SEVERITY_INFO);
                    /*  ADFModelUtils.showFormattedFacesMessage("Voucher generated Successfully",
                                                            "Following document has been created " + vouId,
                                                            FacesMessage.SEVERITY_INFO); */
                }
            } catch (Exception e) {
                e.printStackTrace();
                            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.1478"),
                                                                    ADFModelUtils.resolvRsrc("MSG.120") +"  'fn_trnp_li_gl_ins' !",
                                                                    FacesMessage.SEVERITY_ERROR);
                /* ADFModelUtils.showFormattedFacesMessage("Something went wrong",
                                                        "There have been an error in calling function 'fn_trnp_li_gl_ins' !",
                                                        FacesMessage.SEVERITY_ERROR); */
            }
        }
    }

    /**
     * Method which will check COA Id exist for the current customer or not
     */
    public Boolean chkCoaOpenedOrNot() {
        Boolean val = true;
        Row currentRow = this.getSlsTrnpLiVO1().getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("CoaId") != null) {
                if (Integer.parseInt(currentRow.getAttribute("CoaId").toString()) == -1) {
                    val = false;

                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2033")+ ADFModelUtils.resolvRsrc("LBL.299"),
                                                            ADFModelUtils.resolvRsrc("MSG.2199")+ ADFModelUtils.resolvRsrc("MSG.2033")+ ADFModelUtils.resolvRsrc("LBL.299"),
                                                            FacesMessage.SEVERITY_ERROR);
                    /* ADFModelUtils.showFormattedFacesMessage("COA is not defined for the selected Customer.",
                                                            "Loading Invoice cannot be made for a Customer whose COA is not defined. Please define COA for the currently selected Customer !",
                                                            FacesMessage.SEVERITY_ERROR); */
                }
            }
        }
        return val;
    }

    /**
     * Method which will return default tax rule Id and will be called on save button
     */
    public Integer getDfltTaxRuleId() {
        Integer val = 0;

        Row currentRow = this.getSlsTrnpLiVO1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("TransTaxRuleAll") != null) {
            val = (Integer) currentRow.getAttribute("TransTaxRuleAll");

            insertIntoSlsTrnpTrAndTrLines(val);
        }

        //System.out.println("Default tax is " + val);
        return val;
    }

    /**
     * Method which will return Default Tax rule Id and is called from row Impl
     */
    public Integer fetchDfltTaxRuleId() {
        Integer val = 0;

        Row[] allRowsInRange = this.getSlsTrnpLiTrVO1().getAllRowsInRange();
        if (allRowsInRange.length > 0 && allRowsInRange[0].getAttribute("TaxRuleId") != null) {
            val = (Integer) allRowsInRange[0].getAttribute("TaxRuleId");
        } else {
            Object obj = callStoredFunction(Types.NUMERIC, "APP.fn_get_tax_rule_id(?,?,?,?,?,?,?,?,?)", new Object[] {
                                            this.getCldIdValue(), this.getSlocIdValue(), "0", this.getOrgIdValue(),
                                            this.getHoOrgIdValue(), "0", 0, 24255, 0
            });

            if (obj != null && Integer.parseInt(obj.toString()) > 0) {
                val = Integer.parseInt(obj.toString());

                insertIntoSlsTrnpTrAndTrLines(val);
            }
        }
        //System.out.println("Default tax is " + val);
        return val;
    }

    /**
     * Method which will update status of Offloading to Closed
     */
    private void updateOffloadingStatus() {
        Row currentRow = this.getSlsTrnpLiVO1().getCurrentRow();
        if (currentRow != null) {
            callStoredFunction(Types.NUMERIC, "FN_TRNP_UPDT_DOC_STATUS(?,?,?,?,?,?)", new Object[] {
                               this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                               this.getHoOrgIdValue(), 24257, currentRow.getAttribute("DocId")
            });
        }
    }

    /**
     * Method which will validate whether Offloading is already present in SlsTrnpLiVo1 or not
     */
    public String chkOffloadingExisOrNot(String offDispId) {
        String val = null;

        Row currentRow = this.getSlsTrnpLiDtlVO1().getCurrentRow();
        if (currentRow != null && offDispId != null) {
            ViewObjectImpl impl = this.getLOVOffLoadingVO1();
            impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            impl.setNamedWhereClauseParam("BindOlId", null);
            impl.executeQuery();
            Row[] allRowsInRange = impl.getFilteredRows("OlId", offDispId);

            if (allRowsInRange.length > 0) {

                ViewObjectImpl liDtlVO2 = this.getSlsTrnpLiDtlVO2();

                RowQualifier rQ = new RowQualifier(liDtlVO2);
                rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                  " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" + this.getOrgIdValue() +
                                  "' and OlId ='" + allRowsInRange[0].getAttribute("DocId") + "'");

                Row[] filteredRows = liDtlVO2.getFilteredRows(rQ);

                if (filteredRows.length > 0 && !filteredRows[0].getKey().equals(currentRow.getKey())) {
                    ViewObjectImpl liVO2 = this.getSlsTrnpLiVO2();

                    rQ = new RowQualifier(liVO2);
                    rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                      " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" +
                                      this.getOrgIdValue() + "' and DocId ='" + filteredRows[0].getAttribute("DocId") +
                                      "'");
                    Row[] row = liVO2.getFilteredRows(rQ);
                    if (row.length > 0) {
                        val = (String) row[0].getAttribute("LiId");
                    }
                }
            }
        }

        return val;
    }

    /**
     * Container's getter for SlsTrnpLiDtl1.
     * @return SlsTrnpLiDtl1
     */
    public ViewObjectImpl getSlsTrnpLiDtlVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiDtlVO2");
    }

    /**
     * Container's getter for SlsTrnpLi1.
     * @return SlsTrnpLi1
     */
    public ViewObjectImpl getSlsTrnpLiVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiVO2");
    }
}
