package trnptransporterbillapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.sql.NClob;
import java.sql.SQLException;
import java.sql.Types;

import javax.faces.application.FacesMessage;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import trnptransporterbillapp.model.services.common.TrnpTransporterBillAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 18 15:40:19 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TrnpTransporterBillAMImpl extends ApplicationModuleImpl implements TrnpTransporterBillAM {
    /**
     * This is the default constructor (do not remove).
     */
    public TrnpTransporterBillAMImpl() {
    }

    protected String getCldIdValue() {
        return EbizParams.GLBL_APP_CLD_ID();
    }

    protected Integer getSlocIdValue() {
        return EbizParams.GLBL_APP_SERV_LOC();
    }

    protected String getHoOrgIdValue() {
        return EbizParams.GLBL_HO_ORG_ID();
    }

    protected String getOrgIdValue() {
        return EbizParams.GLBL_APP_USR_ORG();
    }

    protected Integer getUsrIdValue() {
        return EbizParams.GLBL_APP_USR();
    }


    /**
     * Container's getter for SlsTrnpTbVO1.
     * @return SlsTrnpTbVO1
     */
    public ViewObjectImpl getSlsTrnpTbVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpTbVO1");
    }

    /**
     * Container's getter for SlsTrnpTbDtlVO1.
     * @return SlsTrnpTbDtlVO1
     */
    public ViewObjectImpl getSlsTrnpTbDtlVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpTbDtlVO1");
    }

    /**
     * Container's getter for SlsTrnpTbOcVO1.
     * @return SlsTrnpTbOcVO1
     */
    public ViewObjectImpl getSlsTrnpTbOcVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpTbOcVO1");
    }

    /**
     * Container's getter for SlsTrnpTbTrVO1.
     * @return SlsTrnpTbTrVO1
     */
    public ViewObjectImpl getSlsTrnpTbTrVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpTbTrVO1");
    }


    /**
     * Container's getter for SlsTrnpTbToTrnpTbDtlVL1.
     * @return SlsTrnpTbToTrnpTbDtlVL1
     */
    public ViewLinkImpl getSlsTrnpTbToTrnpTbDtlVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpTbToTrnpTbDtlVL1");
    }

    /**
     * Container's getter for SlsTrnpTbToTrnpTbOcVL1.
     * @return SlsTrnpTbToTrnpTbOcVL1
     */
    public ViewLinkImpl getSlsTrnpTbToTrnpTbOcVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpTbToTrnpTbOcVL1");
    }

    /**
     * Container's getter for SlsTrnpTbToTrnpTbTrVL1.
     * @return SlsTrnpTbToTrnpTbTrVL1
     */
    public ViewLinkImpl getSlsTrnpTbToTrnpTbTrVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpTbToTrnpTbTrVL1");
    }


    /**Method to call database function*/
    private Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        return ADFModelUtils.callFunction(this, new StringBuilder(stmt), bindVars, sqlReturnType);
    }

    //------------------------WF Methods--------------------------

    public String getWfNo(Integer sloc_id, String cld_id, String org_id, Integer doc_no) {


        Object obj = callStoredFunction(Types.VARCHAR, "APP.WF_GET_ID(?,?,?,?,?)", new Object[] {
                                        sloc_id, cld_id, org_id, doc_no, 0
        });

        return (String) obj;
    }

    public Integer pendingCheck(Integer SlocId, String CldId, String OrgId, Integer DocNo) {
        System.out.println("pendingCheck");
        Row curr = this.getSlsTrnpTbVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        Object obj = callStoredFunction(Types.NUMERIC, "APP.WF_GET_CUR_USR(?,?,?,?,?,?)", new Object[] {
                                        SlocId, CldId, OrgId, DocNo, docIdTxn, 0
        });
        Integer usrId = null;
        if (obj != null) {
            usrId = Integer.parseInt(obj.toString());
        }
        return usrId;
    }


    public Integer getUsrLvl(Integer SlocId, String CldId, String OrgId, Integer usr_id, String WfNum, String DocNo) {

        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_GET_USR_LEVEL(?,?,?,?,?,?,?)", new Object[] {
                                                   SlocId, CldId, OrgId, usr_id, WfNum, DocNo, 0
    }).toString());


    }

    public Integer insIntoTxn(Integer sloc_id, String cld_id, String pOrgId, Integer DOC_NO, String WfNum,
                              Integer usr_idFrm, Integer usr_idTo, Integer levelTo, Integer levelFrm, String action,
                              String remark, Number amount, String post) {

        Row curr = this.getSlsTrnpTbVO1().getCurrentRow();
        String docIdTxn = curr.getAttribute("DocId").toString();
        return Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.WF_INS_TXN(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                   sloc_id, cld_id, pOrgId, DOC_NO, 0, WfNum, docIdTxn, usr_idFrm,
                                                   usr_idTo, levelFrm, levelTo, action, remark, amount, post
    }).toString());

    }


    public void wfAction(String ret) {
        System.out.println("wfAction Ret =" + ret);
        if (ret != null) {
            if (ret.equals("F")) {
                this.getSlsTrnpTbVO1().getCurrentRow().setAttribute("TbStatus", 17);
            } else if (ret.equals("R")) {

            } else if (ret.equals("V")) {

            } else if (ret.equals("A")) {
                this.getSlsTrnpTbVO1().getCurrentRow().setAttribute("TbStatus", 18);

                updateOffloadingStatus(); /// Method which will change offloading document status to Closed

                pushDatatToFin(); //// Will push data from TRNP to Finance for voucher entry
            }
            this.getDBTransaction().commit();
        }
    }

    public String getUsrName(Integer usrId) {
        System.out.println("getUsrName");
        this.getLOVUserNameVO1().setNamedWhereClauseParam("BindSlocId",
                                                          this.getSlsTrnpTbVO1().getCurrentRow().getAttribute("SlocId"));
        this.getLOVUserNameVO1().setNamedWhereClauseParam("BindUsrId", usrId);
        this.getLOVUserNameVO1().executeQuery();

        Row[] r = this.getLOVUserNameVO1().getAllRowsInRange();
        if (r.length > 0)
            return (String) r[0].getAttribute("UsrName");
        else
            return null;
    }
    //// End of Workflow methods

    /**
     * Container's getter for LOVUserName1.
     * @return LOVUserName1
     */
    public ViewObjectImpl getLOVUserNameVO1() {
        return (ViewObjectImpl) findViewObject("LOVUserNameVO1");
    }

    /**
     * Method which will filter SlsTrnpLi Based on Document Id
     */
    public void filterTrnpTbData() {
        if (ADFModelUtils.resolvEl("#{pageFlowScope.P_DOC_ID}") != null) {
            ViewObjectImpl impl = this.getSlsTrnpTbVO1();
            impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            impl.setNamedWhereClauseParam("BindDocId", ADFModelUtils.resolvEl("#{pageFlowScope.P_DOC_ID}"));

            impl.executeQuery();
        } else {
            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.1697"), "",
                                                    FacesMessage.SEVERITY_ERROR);
            /*  ADFModelUtils.showFormattedFacesMessage("Something went wrong", "Contact Ess...",
                                                    FacesMessage.SEVERITY_ERROR); */
        }
    }

    /**
     * Container's getter for LOVAppEo1.
     * @return LOVAppEo1
     */
    public ViewObjectImpl getLOVAppEoVO1() {
        return (ViewObjectImpl) findViewObject("LOVAppEoVO1");
    }

    /**
     * Container's getter for LOVLiDispId1.
     * @return LOVLiDispId1
     */
    public ViewObjectImpl getLOVLiDispIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVLiDispIdVO1");
    }

    /**
     * Container's getter for VwSlsTrnpOcVw1.
     * @return VwSlsTrnpOcVw1
     */
    public ViewObjectImpl getVwSlsTrnpOcVwVO1() {
        return (ViewObjectImpl) findViewObject("VwSlsTrnpOcVwVO1");
    }

    /**
     * Container's getter for LOVCurrId1.
     * @return LOVCurrId1
     */
    public ViewObjectImpl getLOVCurrIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVCurrIdVO1");
    }

    /**
     * Container's getter for LOVCoaId1.
     * @return LOVCoaId1
     */
    public ViewObjectImpl getLOVCoaIdVO1() {
        return (ViewObjectImpl) findViewObject("LOVCoaIdVO1");
    }

    /**
     *Method which will set bind variable on page load  of ADD/Edit TF
     */
    public void setBindVarOnTFLoad() {
        ViewObjectImpl impl = this.getVwSlsTrnpOcVwVO1();
        impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());

        impl.executeQuery();
    }

    /**
     * Container's getter for SearchData1.
     * @return SearchData1
     */
    public ViewObjectImpl getSearchDataVO1() {
        return (ViewObjectImpl) findViewObject("SearchDataVO1");
    }

    /**
     * Container's getter for TemporaryData1.
     * @return TemporaryData1
     */
    public ViewObjectImpl getTemporaryDataVO1() {
        return (ViewObjectImpl) findViewObject("TemporaryDataVO1");
    }

    /**
     * Method which will load on search page onload and set bind variables for TemporaryData Vo
     */
    public void loadOnStartUp() {
        ViewObjectImpl dataVO1 = this.getTemporaryDataVO1();
        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

        dataVO1.executeQuery();
    }

    /**
     * Method which will be called when user click on search Button
     */
    public void searchForData() {
        Row currentRow = this.getTemporaryDataVO1().getCurrentRow();
        if (currentRow != null) {
            ViewObjectImpl dataVO1 = this.getSearchDataVO1();
            dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            dataVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());

            if (currentRow.getAttribute("TranspIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindTranspId", currentRow.getAttribute("TranspIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindTranspId", null);
            }

            if (currentRow.getAttribute("TranspDocIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindTbId", currentRow.getAttribute("TranspDocIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindTbId", null);
            }

            if (currentRow.getAttribute("StatusTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindStatus", currentRow.getAttribute("StatusTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindStatus", null);
            }

            if (currentRow.getAttribute("CurrIdTrans") != null) {
                dataVO1.setNamedWhereClauseParam("BindCurrId", currentRow.getAttribute("CurrIdTrans"));
            } else {
                dataVO1.setNamedWhereClauseParam("BindCurrId", null);
            }

            dataVO1.executeQuery();
        }
    }

    /**
     * Following method will be called wwhen user click on reset button
     */
    public void resetData() {
        this.getTemporaryDataVO1().executeQuery();

        ViewObjectImpl dataVO1 = this.getSearchDataVO1();
        dataVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
        dataVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
        dataVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
        dataVO1.setNamedWhereClauseParam("BindOrgId", "-1");

        dataVO1.setNamedWhereClauseParam("BindTranspId", null);
        dataVO1.setNamedWhereClauseParam("BindTbId", null);
        dataVO1.setNamedWhereClauseParam("BindStatus", null);
        dataVO1.setNamedWhereClauseParam("BindCurrId", null);

        dataVO1.executeQuery();
    }

    /**
     * Method which will insert data from Other Charges View Object To SlsTrnpLiOcVO1
     */
    public void addOcFromVW() {
        Row newRow = this.getSlsTrnpTbOcVO1().getCurrentRow();
        newRow.setAttribute("CoaId", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("CoaId"));
        newRow.setAttribute("TranType", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("OcCalcType"));
        newRow.setAttribute("OcId", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("OcId"));
        newRow.setAttribute("AmtSpOc", new Number(0));
        newRow.setAttribute("AmtSp", new Number(0));
        newRow.setAttribute("AmtBs", new Number(0));
        newRow.setAttribute("OcCat", this.getVwSlsTrnpOcVwVO1().getCurrentRow().getAttribute("OcCat"));
        newRow.setAttribute("CurrId", this.getSlsTrnpTbVO1().getCurrentRow().getAttribute("CurrIdSp"));
        newRow.setAttribute("CurrRate", this.getSlsTrnpTbVO1().getCurrentRow().getAttribute("CurrConvFctr"));
    }

    /**
     * Container's getter for SlsTrnpLiVW1.
     * @return SlsTrnpLiVW1
     */
    public ViewObjectImpl getSlsTrnpLiVWVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiVWVO1");
    }

    /**
     * Container's getter for SlsTrnpLiOcGrpByVw1.
     * @return SlsTrnpLiOcGrpByVw1
     */
    public ViewObjectImpl getSlsTrnpLiOcGrpByVwVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLiOcGrpByVwVO1");
    }

    /**
     * Method which will Populate data from Loading Invoice to Transporter Bill along with other expenses
     */
    public void populateDatFromLiToTb() {
        Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
        if (currentRow != null) {
            Object trnspId = currentRow.getAttribute("TrnspId");
            Object currIdSp = currentRow.getAttribute("CurrIdSp");

            Object stDt = currentRow.getAttribute("StDt");
            Object endDt = currentRow.getAttribute("EndDt");

            if (trnspId != null && currIdSp != null && stDt != null && endDt != null) {
                ViewObjectImpl impl = this.getSlsTrnpLiVWVO1();
                impl.setRangeSize(-1);
                impl.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                impl.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                impl.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                impl.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                impl.setNamedWhereClauseParam("BindTranspId", trnspId);
                impl.setNamedWhereClauseParam("BindCurrIdSp", currIdSp);
                impl.setNamedWhereClauseParam("BindStDt", stDt);
                impl.setNamedWhereClauseParam("BindEndDt", endDt);

                impl.executeQuery();

                Row[] allRowsInRange = impl.getAllRowsInRange();
                if (allRowsInRange.length > 0) {
                    ViewObjectImpl dtlVO1 = this.getSlsTrnpTbDtlVO1();
                    for (Row r : allRowsInRange) {
                        Row createRow = dtlVO1.createRow();
                        createRow.setAttribute("LiId", r.getAttribute("DocId"));
                        createRow.setAttribute("LiDt", r.getAttribute("OlDt"));
                        createRow.setAttribute("AmtSp", r.getAttribute("TotValSp"));
                        createRow.setAttribute("AmtBs", r.getAttribute("TotValBs"));
                        createRow.setAttribute("VhclItmId", r.getAttribute("VhclItmId"));
                        createRow.setAttribute("VhclNo", r.getAttribute("VehicleNo"));

                        dtlVO1.insertRow(createRow);
                    }

                    ViewObjectImpl byVwVO1 = this.getSlsTrnpLiOcGrpByVwVO1();
                    byVwVO1.setRangeSize(-1);
                    byVwVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
                    byVwVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
                    byVwVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
                    byVwVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
                    byVwVO1.setNamedWhereClauseParam("BindTranspId", trnspId);
                    byVwVO1.setNamedWhereClauseParam("BindCurrIdSp", currIdSp);
                    byVwVO1.setNamedWhereClauseParam("BindStDt", stDt);
                    byVwVO1.setNamedWhereClauseParam("BindEndDt", endDt);

                    byVwVO1.executeQuery();

                    Row[] inRange = byVwVO1.getAllRowsInRange();
                    ViewObjectImpl o1 = this.getSlsTrnpTbOcVO1();
                    for (Row r : inRange) {
                        
                        RowQualifier rqSpOc = new RowQualifier(o1);
                        rqSpOc.setWhereClause("DocId = '"+currentRow.getAttribute("DocId")+"' and CoaId = "+r.getAttribute("CoaId"));
                        
                        Row[] filteredRows = o1.getFilteredRows(rqSpOc);
                        
                        if(filteredRows.length > 0)
                        {
                            
                           Number amtSpOc = new Number((Number) filteredRows[0].getAttribute("AmtSpOc"));
                            Number amtSp = new Number((Number) filteredRows[0].getAttribute("AmtSp"));
                            Number amtBs = new Number((Number) filteredRows[0].getAttribute("AmtBs"));
                            
                            if(r.getAttribute("AmtSpOc") != null)
                                amtSpOc = ((Number) filteredRows[0].getAttribute("AmtSpOc")).add((Number) r.getAttribute("AmtSpOc"));
                            
                            if(r.getAttribute("AmtSp") != null)
                                amtSp = ((Number) filteredRows[0].getAttribute("AmtSp")).add((Number) r.getAttribute("AmtSp"));
                            
                            if(r.getAttribute("AmtBs") != null)
                                amtBs = ((Number) filteredRows[0].getAttribute("AmtBs")).add((Number) r.getAttribute("AmtBs"));
                            
                            filteredRows[0].setAttribute("AmtSpOc", amtSpOc);
                            filteredRows[0].setAttribute("AmtSp", amtSp);
                            filteredRows[0].setAttribute("AmtBs", amtBs); 
                            
                             /* if(r.getAttribute("AmtSpOc") != null)
                                filteredRows[0].setAttribute("AmtSpOc", (((Number) filteredRows[0].getAttribute("AmtSpOc")).add((Number) r.getAttribute("AmtSpOc"))));  
                            
                            if(r.getAttribute("AmtSp") != null)
                                filteredRows[0].setAttribute("AmtSp", (((Number) filteredRows[0].getAttribute("AmtSp")).add((Number) r.getAttribute("AmtSp")))); 
                            
                            if(r.getAttribute("AmtBs") != null)
                                filteredRows[0].setAttribute("AmtBs", (((Number) filteredRows[0].getAttribute("AmtBs")).add((Number) r.getAttribute("AmtBs"))));
                             */
                        }
                        else
                        {
                            
                            Row createRow = o1.createRow();
    
                            createRow.setAttribute("CoaId", r.getAttribute("CoaId"));
                            createRow.setAttribute("TranType", r.getAttribute("TranType"));
                            createRow.setAttribute("OcId", r.getAttribute("OcId"));
                            
                            createRow.setAttribute("AmtSpOc", r.getAttribute("AmtSpOc"));
                            createRow.setAttribute("AmtSp", r.getAttribute("AmtSp"));
                            createRow.setAttribute("AmtBs", r.getAttribute("AmtBs"));
                            createRow.setAttribute("OcCat", r.getAttribute("OcCat"));
                            createRow.setAttribute("CurrId", r.getAttribute("CurrId"));
                            createRow.setAttribute("CurrRate", r.getAttribute("CurrRate"));
    
                            o1.insertRow(createRow);
                            
                        }
                    }
                    
                } else {
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2211"), " ",
                                                            FacesMessage.SEVERITY_INFO);
                    /* ADFModelUtils.showFormattedFacesMessage("No Offloading is Present.", " ",
                                                            FacesMessage.SEVERITY_INFO); */
                }
            }
        }
    }

    /**
     * Container's getter for SlsTrnpTbTrLines1.
     * @return SlsTrnpTbTrLines1
     */
    public ViewObjectImpl getSlsTrnpTbTrLinesVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpTbTrLinesVO1");
    }

    /**
     * Container's getter for SlsTrnpTbTrToTrnpTbTrLinesVL1.
     * @return SlsTrnpTbTrToTrnpTbTrLinesVL1
     */
    public ViewLinkImpl getSlsTrnpTbTrToTrnpTbTrLinesVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpTbTrToTrnpTbTrLinesVL1");
    }

    /**
     * Container's getter for SlsTrnpTbTr1.
     * @return SlsTrnpTbTr1
     */
    public ViewObjectImpl getSlsTrnpTbTrVO2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpTbTrVO2");
    }

    /**
     * Method which will insert or update data present in Tr and TrLines based on user selection of tax rule
     */
    public void insertIntoSlsTrnpTrAndTrLines(Integer taxRuleId) {
        if (taxRuleId != null) {
            Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
            if (currentRow != null) {
                Object docId = currentRow.getAttribute("DocId");
                Object totAmtSpTrans = currentRow.getAttribute("BasicAmtSpTrans");
                Object currConvFctr = currentRow.getAttribute("CurrConvFctr");
                if (docId != null && totAmtSpTrans != null && currConvFctr != null) {
                    ViewObjectImpl trnpLoTrVo2 = this.getSlsTrnpTbTrVO2();

                    RowQualifier rQ = new RowQualifier(trnpLoTrVo2);
                    rQ.setWhereClause("CldId ='" + this.getCldIdValue() + "' and SlocId =" + this.getSlocIdValue() +
                                      " and HoOrgId ='" + this.getHoOrgIdValue() + "' and OrgId ='" +
                                      this.getOrgIdValue() + "' and DocId ='" + docId + "'");
                    Row tr = null;

                    Row[] filteredRows = trnpLoTrVo2.getFilteredRows(rQ);
                    if (filteredRows.length > 0) {
                        tr = filteredRows[0];
                    } else {
                        tr = trnpLoTrVo2.createRow();

                        tr.setAttribute("CldId", this.getCldIdValue());
                        tr.setAttribute("SlocId", this.getSlocIdValue());
                        tr.setAttribute("HoOrgId", this.getHoOrgIdValue());
                        tr.setAttribute("OrgId", this.getOrgIdValue());
                        tr.setAttribute("DocId", docId);
                        tr.setAttribute("TaxRuleId", taxRuleId);

                        trnpLoTrVo2.insertRow(tr);
                    }
                    tr.setAttribute("TaxableAmtSp", totAmtSpTrans);
                    tr.setAttribute("TaxableAmtBs", ((Number) totAmtSpTrans).multiply((Number) currConvFctr));

                    Object val = callStoredFunction(Types.NUMERIC, "fn_trnp_ins_Tb_tr_lines(?,?,?,?,?,?,?,?)", new Object[] {
                                                    this.getSlocIdValue(), this.getCldIdValue(), this.getHoOrgIdValue(),
                                                    this.getOrgIdValue(), docId, taxRuleId, totAmtSpTrans, currConvFctr
                    });

                    if (val != null) {
                        tr.setAttribute("TaxAmt", val);
                        try {
                            tr.setAttribute("TaxAmtBs", ((Number) currConvFctr).multiply(new Number(val)));
                        } catch (SQLException e) {
                            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.1478"),
                                                                    ADFModelUtils.resolvRsrc("MSG.1478") +" 'fn_trnp_ins_Tb_tr_lines' !",
                                                                    FacesMessage.SEVERITY_ERROR);
                            /* ADFModelUtils.showFormattedFacesMessage("Something went wrong",
                                                                    "There have been an error in calling function 'fn_trnp_ins_Tb_tr_lines' !",
                                                                    FacesMessage.SEVERITY_ERROR); */
                            e.printStackTrace();
                        }
                    }
                    this.getSlsTrnpTbTrVO1().executeQuery();
                    this.getSlsTrnpTbTrLinesVO1().executeQuery();
                }
            }
        }
    }

    /**
     * Method which will be called when user click on Process Calculation
     */
    public void processCalcOnUserSel() {
        Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
        if (currentRow != null) {
            Object docId = currentRow.getAttribute("DocId");
            Object currIdSp = currentRow.getAttribute("CurrIdSp");
            Object currConvFctr = currentRow.getAttribute("CurrConvFctr");

            if (docId != null && currIdSp != null && currConvFctr != null) {
                this.getDBTransaction().postChanges();

                callStoredFunction(Types.INTEGER, "fn_trnp_ins_tb_calc(?,?,?,?,?,?,?,?)", new Object[] {
                                   this.getSlocIdValue(), this.getCldIdValue(), this.getHoOrgIdValue(),
                                   this.getOrgIdValue(), docId, this.getUsrIdValue(), currIdSp, currConvFctr
                });

                this.getSlsTrnpTbCalcVO1().executeQuery();
            }
        }
    }

    /**
     * Container's getter for SlsTrnpTbCalc1.
     * @return SlsTrnpTbCalc1
     */
    public ViewObjectImpl getSlsTrnpTbCalcVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpTbCalcVO1");
    }

    /**
     * Container's getter for SlsTrnpTbToTrnpTbCalcVL1.
     * @return SlsTrnpTbToTrnpTbCalcVL1
     */
    public ViewLinkImpl getSlsTrnpTbToTrnpTbCalcVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpTbToTrnpTbCalcVL1");
    }

    /**
     * Method which will set COA Id besed on Customet name selection
     */
    public void setCoaIdBasedOnNameSel(String custName) {
        if (custName != null) {
            ViewObjectImpl appEoVO1 = this.getLOVAppEoVO1();
            appEoVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            appEoVO1.setNamedWhereClauseParam("BindSlocId", this.getSlocIdValue());
            appEoVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            appEoVO1.setNamedWhereClauseParam("BindEoId", null);

            appEoVO1.executeQuery();

            RowQualifier rQ = new RowQualifier(appEoVO1);

            rQ.setWhereClause("EoNm ='" + custName + "'");
            Row[] filteredRows = appEoVO1.getFilteredRows(rQ);
            if (filteredRows.length > 0) {
                Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
                if (currentRow != null) {
                    Integer coaIdFrmEoId =
                        EbizParams.getCoaIdFrmEoId(this, (Integer) filteredRows[0].getAttribute("EoId"));
                    currentRow.setAttribute("CoaId", coaIdFrmEoId);
                }
            }
        }
    }

    /**
     * Following method will push data from TRNP to Finance
     */
    private void pushDatatToFin() {
        Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
        if (currentRow != null) {
            try {
                Object vouId = callStoredFunction(Types.VARCHAR, "fn_trnp_tb_gl_ins(?,?,?,?,?,?,?,?,?,?,?,?)", new Object[] {
                                                  currentRow.getAttribute("DocId"), currentRow.getAttribute("TbDt"),
                                                  currentRow.getAttribute("TotAmtSpTrans"), this.getUsrIdValue(),
                                                  this.getOrgIdValue(), this.getSlocIdValue(), this.getHoOrgIdValue(),
                                                  this.getCldIdValue(), currentRow.getAttribute("TrnspId"),
                                                  currentRow.getAttribute("CoaId"), currentRow.getAttribute("CurrIdSp"),
                                                  currentRow.getAttribute("CurrConvFctr")
                });

                if (vouId != null) {
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.319"),
                                                            ADFModelUtils.resolvRsrc("LBL.4648") + vouId,
                                                            FacesMessage.SEVERITY_INFO);
                    /*  ADFModelUtils.showFormattedFacesMessage("Voucher generated Successfully",
                                                            "Following document has been created " + vouId,
                                                            FacesMessage.SEVERITY_INFO); */
                }

            } catch (Exception e) {
                e.printStackTrace();
                            ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.1478"),
                                                                    ADFModelUtils.resolvRsrc("MSG.1478") +" 'fn_trnp_tb_gl_ins' !",
                                                                    FacesMessage.SEVERITY_ERROR);
                            /* ADFModelUtils.showFormattedFacesMessage("Something went wrong",
                                                                    "There have been an error in calling function 'fn_trnp_ins_Tb_tr_lines' !",
                                                                    FacesMessage.SEVERITY_ERROR); */

            }
        }
    }

    /**
     * Method which will get the trans value amount and store it in Total Amount Sp and Bs
     */
    public void setTotalAmtVals() {
        Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
        if (currentRow != null) {
            Object totAmtSpTrans = currentRow.getAttribute("BasicAmtSpTrans");

            if (totAmtSpTrans != null) {
                currentRow.setAttribute("TotAmtSp", totAmtSpTrans);
                currentRow.setAttribute("TotAmtBs",
                                        ((Number) totAmtSpTrans).multiply((Number) currentRow.getAttribute("CurrConvFctr")));
            }
        }
    }

    /**
     * Method which will check COA Id exist for the current customer or not
     */
    public Boolean chkCoaOpenedOrNot() {
        Boolean val = true;
        Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
        if (currentRow != null) {
            if (currentRow.getAttribute("CoaId") != null) {
                if (Integer.parseInt(currentRow.getAttribute("CoaId").toString()) == -1) {
                    val = false;
                    ADFModelUtils.showFormattedFacesMessage(ADFModelUtils.resolvRsrc("MSG.2033")+ ADFModelUtils.resolvRsrc("LBL.299"),
                                                            ADFModelUtils.resolvRsrc("MSG.2199")+ ADFModelUtils.resolvRsrc("MSG.2033")+ ADFModelUtils.resolvRsrc("LBL.299"),
                                                            FacesMessage.SEVERITY_ERROR);
                    /* ADFModelUtils.showFormattedFacesMessage("COA is not defined for the selected Customer.",
                                                            "Document cannot be created for a Customer whose COA is not defined. Please define COA for the currently selected Customer !",
                                                            FacesMessage.SEVERITY_ERROR); */
                }
            }
        }
        return val;
    }

    /**
     * Method which will return default tax rule Id and will be called on save button
     */
    public Integer getDfltTaxRuleId() {
        Integer val = 0;

        Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
        if (currentRow != null && currentRow.getAttribute("TransTaxRuleAll") != null) {
            val = (Integer) currentRow.getAttribute("TransTaxRuleAll");

            insertIntoSlsTrnpTrAndTrLines(val);
        }

        //System.out.println("Default tax is " + val);
        return val;
    }

    /**
     * Method which will return Default Tax rule Id and is called from row Impl
     */
    public Integer fetchDfltTaxRuleId() {
        Integer val = 0;

        Row[] allRowsInRange = this.getSlsTrnpTbTrVO1().getAllRowsInRange();
        if (allRowsInRange.length > 0 && allRowsInRange[0].getAttribute("TaxRuleId") != null) {
            val = (Integer) allRowsInRange[0].getAttribute("TaxRuleId");
        } else {
            Object obj = callStoredFunction(Types.NUMERIC, "APP.fn_get_tax_rule_id(?,?,?,?,?,?,?,?,?)", new Object[] {
                                            this.getCldIdValue(), this.getSlocIdValue(), "0", this.getOrgIdValue(),
                                            this.getHoOrgIdValue(), "0", 0, 24255, 0
            });

            if (obj != null && Integer.parseInt(obj.toString()) > 0) {
                val = Integer.parseInt(obj.toString());

                insertIntoSlsTrnpTrAndTrLines(val);
            }
        }
        //System.out.println("Default tax is " + val);
        return val;
    }

    /**
     * Container's getter for SlsTrnpTbAdj1.
     * @return SlsTrnpTbAdj1
     */
    public ViewObjectImpl getSlsTrnpTbAdjVO1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpTbAdjVO1");
    }

    /**
     * Container's getter for SlsTrnpTbToTrnpTbAdjVL1.
     * @return SlsTrnpTbToTrnpTbAdjVL1
     */
    public ViewLinkImpl getSlsTrnpTbToTrnpTbAdjVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpTbToTrnpTbAdjVL1");
    }

    /**
     * Container's getter for PendingAdjDtl1.
     * @return PendingAdjDtl1
     */
    public ViewObjectImpl getPendingAdjDtlVO1() {
        return (ViewObjectImpl) findViewObject("PendingAdjDtlVO1");
    }

    /**
     * Method which will insert data from Pending Adjustment detail to SlsTrnpTbAdj Table
     */
    public void insertAdjDtlFromPendingAdj() {
        Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
        if (currentRow != null) {
            Integer coaId = (Integer) currentRow.getAttribute("CoaId");

            ViewObjectImpl adjDtlVO1 = this.getPendingAdjDtlVO1();
            adjDtlVO1.setRangeSize(-1);
            adjDtlVO1.setNamedWhereClauseParam("BindCldId", this.getCldIdValue());
            adjDtlVO1.setNamedWhereClauseParam("BindHoOrgId", this.getHoOrgIdValue());
            adjDtlVO1.setNamedWhereClauseParam("BindOrgId", this.getOrgIdValue());
            adjDtlVO1.setNamedWhereClauseParam("BindCoaId", coaId);
            
            System.out.println("Coa Id in AMImpl :: "+coaId);
            
            adjDtlVO1.executeQuery();

            Row[] allRowsInRange = adjDtlVO1.getAllRowsInRange();
            if (allRowsInRange.length > 0) {
                Integer i = 1;
                ViewObjectImpl adjVO1 = this.getSlsTrnpTbAdjVO1();
                for (Row r : allRowsInRange) {
                    Row createRow = adjVO1.createRow();

                    createRow.setAttribute("CoaId", coaId);
                    createRow.setAttribute("GlAmtSp", r.getAttribute("ArapAmtSp"));
                    createRow.setAttribute("GlVouDt", r.getAttribute("ArapVouDt"));
                    createRow.setAttribute("GlVouId", r.getAttribute("ArapVouId"));
                    createRow.setAttribute("GlAmtBs",
                                           ((Number) r.getAttribute("ArapAmtSp")).multiply((Number) r.getAttribute("ApCc")));
                    createRow.setAttribute("ArGlSlNo", r.getAttribute("ArapGlSlNo"));
                    createRow.setAttribute("ArSlNo", r.getAttribute("ArapslNo"));
                    createRow.setAttribute("TranType", r.getAttribute("ArapAmtTyp"));
                    createRow.setAttribute("VouIdDisp", r.getAttribute("DocTxnIdDisp"));
                    createRow.setAttribute("InvAmtOt", r.getAttribute("ArapNetAmtOt"));
                    createRow.setAttribute("CurrIdSpOld", r.getAttribute("ArapCurrIdSp"));
                    createRow.setAttribute("CurrIdSp", currentRow.getAttribute("CurrIdSp"));
                    createRow.setAttribute("CurrConvFctrOld", r.getAttribute("ApCc"));
                    createRow.setAttribute("CurrConvFctr", currentRow.getAttribute("CurrConvFctr"));
                    createRow.setAttribute("InvAmtAdj", new Number(0));

                    createRow.setAttribute("SrNo", i);

                    adjVO1.insertRow(createRow);

                    i++;
                }
            }
        }
    }

    /**
     * Method which will update status of Offloading to Closed
     */
    private void updateOffloadingStatus() {
        Row currentRow = this.getSlsTrnpTbVO1().getCurrentRow();
        if (currentRow != null) {
            callStoredFunction(Types.NUMERIC, "FN_TRNP_UPDT_DOC_STATUS(?,?,?,?,?,?)", new Object[] {
                               this.getCldIdValue(), this.getSlocIdValue(), this.getOrgIdValue(),
                               this.getHoOrgIdValue(), 24260, currentRow.getAttribute("DocId")
            });
        }
    }
}
