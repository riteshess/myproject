package trnpvhclschdlapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import java.sql.Types;

import oracle.jbo.Row;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import trnpvhclschdlapp.model.services.common.TrnpVhclSchdlAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 25 15:24:22 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TrnpVhclSchdlAMImpl extends ApplicationModuleImpl implements TrnpVhclSchdlAM {

    Integer glblDocId = 24254;
    Integer glblDocTypeId = 0;

    /**
     * This is the default constructor (do not remove).
     */
    public TrnpVhclSchdlAMImpl() {
    }

    /**
     * Container's getter for SlsTrnpVhclSchdl.
     * @return SlsTrnpVhclSchdl
     */
    public ViewObjectImpl getSlsTrnpVhclSchdl() {
        return (ViewObjectImpl) findViewObject("SlsTrnpVhclSchdl");
    }

    /**
     * Container's getter for SlsTrnpLr.
     * @return SlsTrnpLr
     */
    public ViewObjectImpl getSlsTrnpLr() {
        return (ViewObjectImpl) findViewObject("SlsTrnpLr");
    }

    /**
     * Container's getter for LovAvailableVhclNo.
     * @return LovAvailableVhclNo
     */
    public ViewObjectImpl getLovAvailableVhclNo() {
        return (ViewObjectImpl) findViewObject("LovAvailableVhclNo");
    }

    /**
     * Container's getter for DualForAdd.
     * @return DualForAdd
     */
    public ViewObjectImpl getDualForAdd() {
        return (ViewObjectImpl) findViewObject("DualForAdd");
    }

    public void addSchedule() {
        Row dualRow = this.getDualForAdd().getCurrentRow();
        String docId = null;
        String schdlNo = null;
        Timestamp schdlDt = null;
        /*  if (this.getSlsTrnpVhclSchdl().getCurrentRow() != null) {
            docId = (String) this.getSlsTrnpVhclSchdl().getCurrentRow().getAttribute("DocId");
            schdlNo = (String) this.getSlsTrnpVhclSchdl().getCurrentRow().getAttribute("SchdlNo");
            schdlDt = (Timestamp) this.getSlsTrnpVhclSchdl().getCurrentRow().getAttribute("SchdlDt");
        } else { */
        Integer fyid =
            EbizParams.getFyId(this.getRootApplicationModule(), EbizParams.GLBL_APP_USR_ORG(),
                               new Timestamp(System.currentTimeMillis()));
        if (fyid != null) {
            schdlNo =
                (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                    new StringBuilder("SLS.TRNP_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                    EbizParams.GLBL_APP_USR_ORG(), glblDocId, null, glblDocTypeId,
                                                    "SLS$TRNP$VHCL$SCHDL", fyid, 0
            }, Types.VARCHAR);
        } else
            schdlNo = "-1";
        docId = this.genTxnId();
        schdlDt = new Timestamp(System.currentTimeMillis());
        // }


        Row newRow = this.getSlsTrnpVhclSchdl().createRow();
        newRow.setAttribute("DocId", docId);
        newRow.setAttribute("LrDocId", dualRow.getAttribute("TransLrDocId"));
        newRow.setAttribute("VhclNo", dualRow.getAttribute("TransVhclNo"));
        newRow.setAttribute("VhclItmId", dualRow.getAttribute("TransVhclItmId"));
        newRow.setAttribute("ReqStrtDt", dualRow.getAttribute("TransRqmtStrtDt"));
        newRow.setAttribute("ReqEndDt", dualRow.getAttribute("TransRqmtEndDt"));
        newRow.setAttribute("Status", 31);
        newRow.setAttribute("SchdlNo", schdlNo);
        newRow.setAttribute("SchdlDt", schdlDt);
        this.getSlsTrnpVhclSchdl().insertRow(newRow);
        this.getDBTransaction().postChanges();
        this.getLovAvailableVhclNo().executeQuery();
        this.getSlsTrnpLr().executeQuery();
    }

    public String genTxnId() {
        return (String) EbizParams.generateDocTxnId(this.getRootApplicationModule(), glblDocId);
    }

    public void filterVOOnLoad() {
        this.getDualForAdd().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getDualForAdd().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getDualForAdd().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getDualForAdd().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getDualForAdd().executeQuery();
        this.getSlsTrnpVhclSchdl().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getSlsTrnpVhclSchdl().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getSlsTrnpVhclSchdl().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getSlsTrnpVhclSchdl().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getSlsTrnpVhclSchdl().executeQuery();
    }

    /**
     * Container's getter for LovLrId1.
     * @return LovLrId1
     */
    public ViewObjectImpl getLovLrId() {
        return (ViewObjectImpl) findViewObject("LovLrId");
    }

    public String getDispNo() {
        String schdlNo = null;
        Integer fyid =
            EbizParams.getFyId(this.getRootApplicationModule(), EbizParams.GLBL_APP_USR_ORG(),
                               new Timestamp(System.currentTimeMillis()));
        if (fyid != null) {
            schdlNo =
                (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                    new StringBuilder("SLS.TRNP_GEN_DISP_DOC_ID(?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                    EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                    EbizParams.GLBL_APP_USR_ORG(), glblDocId, null, glblDocTypeId,
                                                    "SLS$TRNP$VHCL$SCHDL", fyid, 0
            }, Types.VARCHAR);
        } else
            schdlNo = "-1";

        return schdlNo;
    }

    /** ---------- To get Column Value from Org Prf -------------**/

    public String getValFrmOrgPrf(String columnName) {

        String val = "";
        try {
            val =
                (String) ADFModelUtils.callFunction(this.getRootApplicationModule(),
                                                    new StringBuilder("SLS.fn_trnp_chk_org_prf(?,?,?,?)"), new Object[] {
                                                    EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                                    EbizParams.GLBL_APP_USR_ORG(), columnName
            }, Types.VARCHAR);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println("ERROR IN CALLING FUNCTION fn_trnp_chk_org_prf :" + e.getMessage());
        }
        System.out.println("===========" + val);

        return val;
    }

}

