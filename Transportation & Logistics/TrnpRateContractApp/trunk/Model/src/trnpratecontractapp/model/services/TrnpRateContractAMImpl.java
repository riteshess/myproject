package trnpratecontractapp.model.services;

import adf.utils.ebiz.EbizParams;
import adf.utils.ebiz.WorkFlowUtils;
import adf.utils.model.ADFModelUtils;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewObject;
import oracle.jbo.domain.Number;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

import trnpratecontractapp.model.services.common.TrnpRateContractAM;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 03 11:23:32 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TrnpRateContractAMImpl extends ApplicationModuleImpl implements TrnpRateContractAM {
    private static ADFLogger _log = ADFLogger.createADFLogger(TrnpRateContractAMImpl.class);

    Integer glblDocId = 24251;
    Integer glblDocTypeId = 0;
    //

    /**
     * This is the default constructor (do not remove).
     */
    public TrnpRateContractAMImpl() {
    }

    /**
     * Container's getter for SlsTrnpRateCntrct.
     * @return SlsTrnpRateCntrct
     */
    public ViewObjectImpl getSlsTrnpRateCntrct() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRateCntrct");
    }

    /**
     * Container's getter for SlsTrnpRateCntrctDtl.
     * @return SlsTrnpRateCntrctDtl
     */
    public ViewObjectImpl getSlsTrnpRateCntrctDtl() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRateCntrctDtl");
    }

    /**
     * Container's getter for SlsTnrpRateCntrctToDtlVL1.
     * @return SlsTnrpRateCntrctToDtlVL1
     */
    public ViewLinkImpl getSlsTnrpRateCntrctToDtlVL1() {
        return (ViewLinkImpl) findViewLink("SlsTnrpRateCntrctToDtlVL1");
    }

    public String getWfNo() {
        return (String) WorkFlowUtils.getWorkFlowId(this.getRootApplicationModule(), glblDocId, glblDocTypeId);
    }

    public Integer currUsrLvl(String wfNo) {
        return WorkFlowUtils.getWorkFlowCurrUsrLvl(this.getRootApplicationModule(), wfNo, glblDocId, glblDocTypeId);
    }

    public String insWfTxn(String wfId, Integer lvlFrm, Integer lvlTo, String action, String remark, Number amount) {
        Integer usrId = EbizParams.GLBL_APP_USR();
        String docTxnId = (String) this.getSlsTrnpRateCntrct().getCurrentRow().getAttribute("DocId");
        return (String) WorkFlowUtils.insertEntriesIntoWfTxn(this.getRootApplicationModule(), glblDocId, glblDocTypeId,
                                                             docTxnId, wfId, usrId, usrId, lvlFrm, lvlTo, action,
                                                             remark, amount);
    }

    public Integer chkPendingUsr() {
        String docTxnId = (String) this.getSlsTrnpRateCntrct().getCurrentRow().getAttribute("DocId");
        return WorkFlowUtils.docPendingAt(this.getRootApplicationModule(), glblDocId, glblDocTypeId, docTxnId);
    }

    public void wfReturnAction() {
        _log.info("WF_RET_PARAM =" + ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_PARAM}"));
        if (ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_PARAM}") != null &&
            ADFModelUtils.resolvEl("#{pageFlowScope.WF_RET_PARAM}").equals("A")) {
            this.getSlsTrnpRateCntrct().getCurrentRow().setAttribute("Actv", "Y");
        }
        this.getDBTransaction().commit();
    }

    public void genTxnId() {
        this.getSlsTrnpRateCntrct().getCurrentRow().setAttribute("DocId",
                                                                 EbizParams.generateDocTxnId(this.getRootApplicationModule(),
                                                                                             glblDocId));
    }

    public String getUsrNm(Integer usrId) {
        this.getLovUsrNm().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovUsrNm().setNamedWhereClauseParam("usrIdBind", usrId);
        this.getLovUsrNm().executeQuery();
        Row[] fr = this.getLovUsrNm().getFilteredRows("UsrId", usrId);
        if (fr.length > 0)
            return (String) fr[0].getAttribute("UsrName");
        else
            return "Anonymous";
    }


    public ViewObjectImpl getLOVVehicleType() {
        return (ViewObjectImpl) findViewObject("LOVVehicleType");
    }


    /**
     * Container's getter for LovUsrNm1.
     * @return LovUsrNm1
     */
    public ViewObjectImpl getLovUsrNm() {
        return (ViewObjectImpl) findViewObject("LovUsrNm");
    }

    public void amendRateContract() {
        String docId = (String) this.getSlsTrnpRateCntrct().getCurrentRow().getAttribute("DocId");
        _log.info("DocId to amend=" + docId);
        this.getSlsTrnpRateCntrct().executeQuery();
        Row fr[] = this.getSlsTrnpRateCntrct().getFilteredRows("DocId", docId);
        if (fr.length > 0) {
            fr[0].setAttribute("Actv", "N");
            fr[0].setAttribute("InactvDt", new Timestamp(System.currentTimeMillis()));
        }
        this.getSlsTrnpRateCntrct().executeQuery();
        Row currRow = null;
        this.getSlsTrnpRateCntrct2().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getSlsTrnpRateCntrct2().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getSlsTrnpRateCntrct2().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getSlsTrnpRateCntrct2().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getSlsTrnpRateCntrct2().executeQuery();
        if (this.getSlsTrnpRateCntrct2().getFilteredRows("DocId", docId).length > 0)
            currRow = this.getSlsTrnpRateCntrct2().getFilteredRows("DocId", docId)[0];
        System.out.println("Length of Filtered rows=" +
                           this.getSlsTrnpRateCntrct2().getFilteredRows("DocId", docId).length);
        if (currRow != null) {
            currRow.setAttribute("Actv", "N");
            currRow.setAttribute("InactvDt", new Timestamp(System.currentTimeMillis()));
            this.getSlsTrnpRateCntrct().executeQuery();
            Row newRow = this.getSlsTrnpRateCntrct().createRow();
            newRow.setAttribute("CldId", EbizParams.GLBL_APP_CLD_ID());
            newRow.setAttribute("SlocId", EbizParams.GLBL_APP_SERV_LOC());
            newRow.setAttribute("OrgId", EbizParams.GLBL_APP_USR_ORG());
            newRow.setAttribute("HoOrgId", EbizParams.GLBL_HO_ORG_ID());
            newRow.setAttribute("DocId", EbizParams.generateDocTxnId(this.getRootApplicationModule(), glblDocId));
            newRow.setAttribute("EoId", currRow.getAttribute("EoId"));
            newRow.setAttribute("EoType", currRow.getAttribute("EoType"));
            newRow.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
            newRow.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
            newRow.setAttribute("EffectiveDt", new Timestamp(System.currentTimeMillis()));
            newRow.setAttribute("Actv", "N");
            newRow.setAttribute("CntrctBasis", currRow.getAttribute("CntrctBasis"));
            newRow.setAttribute("RateFctr", currRow.getAttribute("RateFctr"));
            newRow.setAttribute("Rate", currRow.getAttribute("Rate"));
            newRow.setAttribute("RateUom", currRow.getAttribute("RateUom"));
            newRow.setAttribute("VhclType", currRow.getAttribute("VhclType"));
            newRow.setAttribute("CurrIdSp", currRow.getAttribute("CurrIdSp"));
            newRow.setAttribute("CurrConv", currRow.getAttribute("CurrConv"));
            newRow.setAttribute("RateUom", currRow.getAttribute("RateUom"));
            newRow.setAttribute("DayMinAmt", currRow.getAttribute("DayMinAmt"));
            newRow.setAttribute("MinDist", currRow.getAttribute("MinDist"));
            newRow.setAttribute("MinDistRate", currRow.getAttribute("MinDistRate"));
            this.getSlsTrnpRateCntrct().insertRow(newRow);
            Row[] itmRow = this.getSlsTrnpRateCntrctDtl1().getFilteredRows("DocId", docId);
            for (Row itm : itmRow) {
                Row newItm = this.getSlsTrnpRateCntrctDtl().createRow();
                newItm.setAttribute("ItmId", itm.getAttribute("ItmId"));
                newItm.setAttribute("Rate", itm.getAttribute("Rate"));
                newItm.setAttribute("RateUom", itm.getAttribute("RateUom"));
                newItm.setAttribute("UsrIdCreate", EbizParams.GLBL_APP_USR());
                newItm.setAttribute("UsrIdCreateDt", new Timestamp(System.currentTimeMillis()));
                this.getSlsTrnpRateCntrctDtl().insertRow(newItm);
            }
        }
        //Row Currrow = this.getSlsTrnpRateCntrct().getCurrentRow();
        // this.getSlsTrnpRateCntrct().executeQuery();
        //this.getSlsTrnpRateCntrct().setCurrentRow(Currrow);
        //EbizParams.getFyId(this.getRootApplicationModule(), EbizParams.GLBL_APP_USR_ORG(),  new Timestamp(System.currentTimeMillis()));
        this.getSlsTrnpRateCntrctDtl().executeQuery();

    }

    /**
     * Container's getter for SlsTrnpRateCntrctDtl1.
     * @return SlsTrnpRateCntrctDtl1
     */
    public ViewObjectImpl getSlsTrnpRateCntrctDtl1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRateCntrctDtl1");
    }

    public Integer validateRows(String ocId) {
        System.out.println("-----------------" + ocId + "--------------");
        /*         ViewObjectImpl cntrctOc1 = this.getSlsTrnpRatesCntrctOc1(); */
        ViewObjectImpl tt = this.getSlsTrnpRatesCntrctOc1();


        return tt.getRowCount();
    }

    /**
     * Container's getter for DualForSearch1.
     * @return DualForSearch1
     */
    public ViewObjectImpl getDualForSearch1() {
        return (ViewObjectImpl) findViewObject("DualForSearch1");
    }

    public void searchCustomer(Integer CustId) {
        this.getSlsTrnpRateCntrct().setNamedWhereClauseParam("custIdBind", CustId);
        this.getSlsTrnpRateCntrct().executeQuery();
    }

    public void resetSearchFields() {
        this.getDualForSearch1().executeQuery();
        this.searchCustomer(null);
    }

    public void onLoadExecute(String cldId, Integer slocId, String hoOrgId, String orgId) {
        this.getDualForSearch1().setNamedWhereClauseParam("BindCldId", cldId);
        this.getDualForSearch1().setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        this.getDualForSearch1().setNamedWhereClauseParam("BindOrgId", orgId);
        this.getDualForSearch1().setNamedWhereClauseParam("BindSlocId", slocId);

        this.getSlsTrnpRateCntrct().setNamedWhereClauseParam("cldIdBind", cldId);
        this.getSlsTrnpRateCntrct().setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
        this.getSlsTrnpRateCntrct().setNamedWhereClauseParam("orgIdBind", orgId);
        this.getSlsTrnpRateCntrct().setNamedWhereClauseParam("slocIdBind", slocId);
        this.getSlsTrnpRateCntrct().executeQuery();
        this.getSlsTrnpRateCntrct1().setNamedWhereClauseParam("cldIdBind", cldId);
        this.getSlsTrnpRateCntrct1().setNamedWhereClauseParam("hoOrgIdBind", hoOrgId);
        this.getSlsTrnpRateCntrct1().setNamedWhereClauseParam("orgIdBind", orgId);
        this.getSlsTrnpRateCntrct1().setNamedWhereClauseParam("slocIdBind", slocId);
        this.getSlsTrnpRateCntrct1().executeQuery();

        ViewObjectImpl impOcVw1 = this.getImpOcVw1();
        impOcVw1.setNamedWhereClauseParam("CldIdBind", EbizParams.GLBL_APP_CLD_ID());
        impOcVw1.setNamedWhereClauseParam("DocIdBind", glblDocId);
        impOcVw1.setNamedWhereClauseParam("DocTypeIdBind", glblDocTypeId);
        impOcVw1.setNamedWhereClauseParam("HoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        impOcVw1.setNamedWhereClauseParam("SlocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        impOcVw1.executeQuery();


    }

    public String chkDuplicateCustomerNm(String custNm, Integer vehId) {
        System.out.println("Inside validator in amimpl");
        this.getLovCustName().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getLovCustName().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getLovCustName().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovCustName().setNamedWhereClauseParam("eoTypeBind",
                                                       this.getSlsTrnpRateCntrct().getCurrentRow().getAttribute("EoType"));
        this.getLovCustName().executeQuery();
        //  this.getLOVVehicleType().executeQuery();
        ViewObject vo = this.getSlsTrnpRateCntrct();
        Row[] custRw = this.getLovCustName().getFilteredRows("EoNm", custNm);
        Integer eoId = null;
        if (custRw.length > 0)
            eoId = (Integer) custRw[0].getAttribute("EoId");
        this.getSlsTrnpRateCntrct1().setRangeSize(-1);
        System.out.println("No. of Rows Before Filter=" + this.getSlsTrnpRateCntrct1().getAllRowsInRange());
        RowQualifier rowq = new RowQualifier(this.getSlsTrnpRateCntrct1());
        rowq.setWhereClause("VhclType=" + vehId + " AND  EoId=" + eoId);
        System.out.println("Expression=" + rowq.getExprStr());
        Row[] dupliRw = this.getSlsTrnpRateCntrct1().getFilteredRows(rowq);
        System.out.println("No. of Filtered Rows=" + dupliRw.length);
        for (Row r : dupliRw) {
            if (r.getAttribute("DocId").toString().equals(this.getSlsTrnpRateCntrct().getCurrentRow().getAttribute("DocId"))) {
                return "Y";
            } else
                return "N";
        }

        return "Y";
    }

    public String validateEffectiveDt(java.sql.Date effctvDt) {
        if (effctvDt != null) {
            java.sql.Date sysDt = null;
            try {
                sysDt = (new Timestamp(System.currentTimeMillis())).dateValue();
            } catch (SQLException e) {
            }
            if (sysDt.compareTo(effctvDt) > 0) {
                if (sysDt.toString().equals(effctvDt.toString())) {
                    //ok
                } else {
                    return "-1";
                }
            }
        }
        return "Y";
    }

    public String chkDuplicateItmNm(String itmNm) {
        this.getLovItemDesc().setNamedWhereClauseParam("cldIdBind", EbizParams.GLBL_APP_CLD_ID());
        this.getLovItemDesc().setNamedWhereClauseParam("hoOrgIdBind", EbizParams.GLBL_HO_ORG_ID());
        this.getLovItemDesc().setNamedWhereClauseParam("slocIdBind", EbizParams.GLBL_APP_SERV_LOC());
        this.getLovItemDesc().setNamedWhereClauseParam("orgIdBind", EbizParams.GLBL_APP_USR_ORG());
        this.getLovItemDesc().executeQuery();
        Row[] itmRw = this.getLovItemDesc().getFilteredRows("ItmDesc", itmNm);
        String itmId = null;
        if (itmRw.length > 0)
            itmId = (String) itmRw[0].getAttribute("ItmId");
        Row[] dupliRw = this.getSlsTrnpRateCntrctDtl().getFilteredRows("ItmId", itmId);
        for (Row r : dupliRw) {
            if (r.equals(this.getSlsTrnpRateCntrctDtl().getCurrentRow())) {
                _log.info("CurrentRow = DupliRow");
            } else
                return "N";
        }

        return "Y";
    }

    /**
     * Container's getter for SlsTrnpRateCntrct1.
     * @return SlsTrnpRateCntrct1
     */
    public ViewObjectImpl getSlsTrnpRateCntrct1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRateCntrct1");
    }

    /**
     * Container's getter for LovCustName1.
     * @return LovCustName1
     */
    public ViewObjectImpl getLovCustName() {
        return (ViewObjectImpl) findViewObject("LovCustName");
    }

    /**
     * Container's getter for LovItemDesc1.
     * @return LovItemDesc1
     */
    public ViewObjectImpl getLovItemDesc() {
        return (ViewObjectImpl) findViewObject("LovItemDesc");
    }

    /**
     * Container's getter for SlsTrnpRatesCntrctOc1.
     * @return SlsTrnpRatesCntrctOc1
     */
    public ViewObjectImpl getSlsTrnpRatesCntrctOc1() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRatesCntrctOc1");
    }

    /**
     * Container's getter for SlsTrnpRatesCntrctOcTOImpOcVwVL1.
     * @return SlsTrnpRatesCntrctOcTOImpOcVwVL1
     */
    public ViewLinkImpl getSlsTrnpRatesCntrctOcTOImpOcVwVL1() {
        return (ViewLinkImpl) findViewLink("SlsTrnpRatesCntrctOcTOImpOcVwVL1");
    }

    /**
     * Container's getter for ImpOcVw1.
     * @return ImpOcVw1
     */
    public ViewObjectImpl getImpOcVw1() {
        return (ViewObjectImpl) findViewObject("ImpOcVw1");
    }

    /**
     * Container's getter for SlsTrnpRatesCntrctOc2.
     * @return SlsTrnpRatesCntrctOc2
     */
    public ViewObjectImpl getSlsTrnpRatesCntrctOc2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRatesCntrctOc2");
    }

    public void addOtherCharges() {
        System.out.println("Add another charge");
        Row currentRow = this.getSlsTrnpRatesCntrctOc1().getCurrentRow();
        System.out.println(this.getImpOcVw1().getCurrentRow().getAttribute("CoaId"));
        currentRow.setAttribute("CoaId", this.getImpOcVw1().getCurrentRow().getAttribute("CoaId"));
        currentRow.setAttribute("CurrId", this.getSlsTrnpRateCntrct().getCurrentRow().getAttribute("CurrIdSp"));
        /*         this.getImpOcVw1().getCurrentRow().getAttribute("CurrIdSp")); */
        currentRow.setAttribute("CurrRate", this.getSlsTrnpRateCntrct().getCurrentRow().getAttribute("CurrConv"));
        /* this.getImpOcVw1().getCurrentRow().getAttribute("CurrConvFctr")); */
        currentRow.setAttribute("TranType", this.getImpOcVw1().getCurrentRow().getAttribute("OcCalcType"));
        currentRow.setAttribute("OcId", this.getImpOcVw1().getCurrentRow().getAttribute("OcId"));
        currentRow.setAttribute("OcCat", this.getImpOcVw1().getCurrentRow().getAttribute("OcCat"));
        currentRow.setAttribute("DocId", this.getSlsTrnpRateCntrct().getCurrentRow().getAttribute("DocId"));
        this.getImpOcVw1().executeQuery();
    }

    /*---------------------------------------------Work Flow Setup---------------------------------------------------*/
    private static int NUMBER = Types.INTEGER;
    private static int NUMERIC = Types.NUMERIC;
    private static int VARCHAR = Types.VARCHAR;

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        System.out.println("Call Stored Function");
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    public Object get_org_def_curr_bs1() {

        Object level = null;
        try {
            level = callStoredFunction(NUMERIC, "APP.get_org_def_curr_bs1(?,?,?)", new Object[] {
                                       EbizParams.GLBL_APP_CLD_ID(), EbizParams.GLBL_APP_SERV_LOC(),
                                       EbizParams.GLBL_APP_USR_ORG()
            });
            System.out.println("-------" + level);
        } catch (Exception nfe) {
            nfe.printStackTrace();
        }
        return level;
    }

    public void deleteMethod() {
        ViewObjectImpl cntrctOc1 = this.getSlsTrnpRatesCntrctOc1();
        Row currentRow = cntrctOc1.getCurrentRow();
        if (currentRow != null) {
            currentRow.remove();
            cntrctOc1.executeQuery();
        }

    }

    /**
     * Container's getter for SlsTrnpRateCntrct2.
     * @return SlsTrnpRateCntrct2
     */
    public ViewObjectImpl getSlsTrnpRateCntrct2() {
        return (ViewObjectImpl) findViewObject("SlsTrnpRateCntrct2");
    }
}

