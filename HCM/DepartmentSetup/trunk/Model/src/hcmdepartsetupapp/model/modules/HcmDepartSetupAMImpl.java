package hcmdepartsetupapp.model.modules;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import hcmdepartsetupapp.model.modules.common.HcmDepartSetupAM;
import hcmdepartsetupapp.model.views.AppDeptVORowImpl;

import java.math.BigDecimal;

import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSet;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 10 17:25:56 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmDepartSetupAMImpl extends ApplicationModuleImpl implements HcmDepartSetupAM {
    /**
     * This is the default constructor (do not remove).
     */

    public HcmDepartSetupAMImpl() {
    }

    public void setBindVarOnPageLoad() {

        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        this.getAppDept1().setNamedWhereClauseParam("bindcldid", CldId);
        this.getAppDept1().setNamedWhereClauseParam("bindslocid", SlocId);
        this.getAppDept1().setNamedWhereClauseParam("bindhoorgid", HoOrgId);
        this.getAppDept1().setNamedWhereClauseParam("bindhoorgID", HoOrgId);
        this.getAppDept1().executeQuery();
    }

    /**SET DEPT NAME ON POPUP REQ AREA NAME*/
    public String setDeptNm() {
        String deptNm = null;
        if (getOrgDept1().getCurrentRow().getAttribute("DeptId") != null) {
            Row[] filteredRows =
                getAppDept1().getFilteredRows("DeptId", getOrgDept1().getCurrentRow().getAttribute("DeptId"));
            System.out.println("for dept name length-->" + filteredRows.length);
            if (filteredRows.length > 0) {
                deptNm = filteredRows[0].getAttribute("DeptNm").toString();
                System.out.println("dept name for set--" + deptNm);
                System.out.println("current row in dummy-->" + getdummyForReqAreaVO1().getCurrentRow());
                //getdummyForReqAreaVO1().getCurrentRow().setAttribute("ReqAreaNm", deptNm);
                return deptNm;
            }
        }
        return deptNm;
    }

    /**Insert into req area function call*/
    public BigDecimal insertIntoRqmtArea() {
        String prdChk = "N";
        String servcChk = "N";
        String cc = "N";
        String tempIssueChk = "N";

        Integer usr = EbizParams.GLBL_APP_USR();
        ;
        String OrgId = getOrgDept1().getCurrentRow().getAttribute("OrgId").toString();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        ;
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        ;
        String deptId = getOrgDept1().getCurrentRow().getAttribute("DeptId").toString();
        String reqNm = getdummyForReqAreaVO1().getCurrentRow().getAttribute("ReqAreaNm").toString();
        Object adrsId = getdummyForReqAreaVO1().getCurrentRow().getAttribute("AddressId");
        Object defWh = getdummyForReqAreaVO1().getCurrentRow().getAttribute("WhId");
        if (getdummyForReqAreaVO1().getCurrentRow().getAttribute("isProduction") != null &&
            getdummyForReqAreaVO1().getCurrentRow().getAttribute("isProduction") != "") {
            prdChk = getdummyForReqAreaVO1().getCurrentRow().getAttribute("isProduction").toString();
            System.out.println("production chek---" + prdChk);
        }
        if (getdummyForReqAreaVO1().getCurrentRow().getAttribute("isServiceCenter") != null &&
            getdummyForReqAreaVO1().getCurrentRow().getAttribute("isServiceCenter") != "") {
            servcChk = getdummyForReqAreaVO1().getCurrentRow().getAttribute("isServiceCenter").toString();
            System.out.println("isServiceCenter chek---" + servcChk);
        }
        if (getdummyForReqAreaVO1().getCurrentRow().getAttribute("isCostCenter") != null &&
            getdummyForReqAreaVO1().getCurrentRow().getAttribute("isCostCenter") != "") {
            cc = getdummyForReqAreaVO1().getCurrentRow().getAttribute("isCostCenter").toString();
            System.out.println("isCostCenter chek---" + cc);
        }

        if (getdummyForReqAreaVO1().getCurrentRow().getAttribute("TempIssueOnly") != null &&
            getdummyForReqAreaVO1().getCurrentRow().getAttribute("TempIssueOnly") != "") {
            tempIssueChk = getdummyForReqAreaVO1().getCurrentRow().getAttribute("TempIssueOnly").toString();
            System.out.println("TempIssueOnly chek---" + tempIssueChk);
        }

        System.out.println("cld-" + cldId + " sloc-->" + slocId + " org-->" + OrgId + "dept id--> " + deptId +
                           "req area name-->" + reqNm + "addressId-->" + adrsId + "defaultwh-->" + defWh +
                           "productChk-->" + prdChk + "Costchk-->" + cc + " service chk->" + servcChk +
                           "tempIssueChk-->" + tempIssueChk + " usr->" + usr);
        BigDecimal rslt =
            (BigDecimal) ADFModelUtils.callFunction(this,
                                                    new StringBuilder("APP.FN_INS_RQMT_AREA (?,?,?,?,?,?,?,?,?,?,?,?,?)"), new Object[] {
                                                    cldId, slocId, OrgId, deptId, reqNm, adrsId, defWh, prdChk, cc,
                                                    tempIssueChk, servcChk, usr, 778
        }, Types.NUMERIC);

        /*   BigDecimal rslt =
            (BigDecimal) (callStoredFunction(Types.NUMERIC, "APP.FN_INS_RQMT_AREA (?,?,?,?,?,?,?,?,?,?,?,?,?)",
                                             new Object[]
        {
            cldId, slocId, OrgId, deptId, reqNm, adrsId, defWh, prdChk, cc, tempIssueChk, servcChk, usr, 778
        })); */
        System.out.println("insert result is ---->>" + rslt);
        if (rslt != null && rslt.compareTo(new BigDecimal(1)) == 0) {
            getdummyForReqAreaVO1().executeQuery();
            getRequirementAreaVO1().executeQuery();
        }
        return rslt;
    }

    /**Delete Req Area Row*/
    public BigDecimal chkReqAreaForDeletion() {


        String OrgId = getOrgDept1().getCurrentRow().getAttribute("OrgId").toString();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String deptId = getRequirementAreaVO1().getCurrentRow().getAttribute("DeptId").toString();

        BigDecimal rslt =
            (BigDecimal) ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_DEL_RQMT_AREA(?,?,?,?)"), new Object[] {
                                                    cldId, slocId, OrgId, deptId
        }, Types.NUMERIC);

        /*   BigDecimal rslt = (BigDecimal) (callStoredFunction(Types.NUMERIC, "APP.FN_DEL_RQMT_AREA(?,?,?,?)", new Object[]
        {
            cldId, slocId, OrgId, deptId
        })); */
        System.out.println("result for reqArea delete-->" + rslt);
        if (rslt != null && rslt.compareTo(new BigDecimal(1)) == 0) {
            getOrgDept1().getCurrentRow().setAttribute("ReqAreaFlg", "N");
            getRequirementAreaVO1().executeQuery();
            getOrgDept1().executeQuery();
        }
        return rslt;
    }

    public void refreshAftDeletion() {
        getRequirementAreaVO1().executeQuery();
        //   getOrgDept1().executeQuery();
    }

    /**Reset Requirement Area Flag in org$dept if popUp cancelled */
    public void resetAtPopCancel() {

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        if (getOrgDept1().getCurrentRow().getAttribute("DeptId") != null) {
            String dept = getOrgDept1().getCurrentRow().getAttribute("DeptId").toString();
            RowQualifier rq = new RowQualifier(getRequirementAreaVO1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and OrgId='" + OrgId +
                              "' and DeptPid='" + dept + "'");
            Row fr[] = this.getRequirementAreaVO1().getFilteredRows(rq);
            System.out.println("filter row at cancel pop chk--" + fr.length);
            if (fr.length == 0) {
                System.out.println("row count zero for orgdept");
                getOrgDept1().getCurrentRow().setAttribute("ReqAreaFlg", "N");
            }
        }
    }

    /**
     * Container's getter for Dummy1.
     * @return Dummy1
     */
    public ViewObjectImpl getDummy1() {
        return (ViewObjectImpl) findViewObject("Dummy1");
    }

    /**
     * Container's getter for AppDept1.
     * @return AppDept1
     */
    public ViewObjectImpl getAppDept1() {
        return (ViewObjectImpl) findViewObject("AppDept1");
    }

    public void searchdepnameAM(String depnam) {
        ViewObjectImpl voAppDept1 = getAppDept1();
        ViewCriteria vc = voAppDept1.getViewCriteria("AppDeptVOCriteria");
        voAppDept1.applyViewCriteria(vc);
        voAppDept1.setNamedWhereClauseParam("bindDeptName", depnam);
        voAppDept1.executeQuery();
    }

    public void resetdepartNameAM(String res) {
        ViewObjectImpl voAppDept1 = getAppDept1();
        ViewCriteria vc = voAppDept1.getViewCriteria("AppDeptVOCriteria");
        voAppDept1.applyViewCriteria(vc);
        voAppDept1.setNamedWhereClauseParam("bindDeptName", res);
        voAppDept1.executeQuery();
    }

    public void getDepartId() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String dept = (String) ADFModelUtils.callFunction(this, new StringBuilder("APP.FN_APP_GEN_ID (?,?,?,?,?)"), new Object[] {
                                                          slocId, cldId, hoOrgId, null, "APP$DEPT"
        }, Types.VARCHAR);

        /*  String dept = (String) (callStoredFunction(Types.VARCHAR, "APP.FN_APP_GEN_ID (?,?,?,?,?)", new Object[]
        {
            slocId, cldId, hoOrgId, null, "APP$DEPT"
        })); */
        ViewObjectImpl voAppDept1 = getAppDept1();
        voAppDept1.getCurrentRow().setAttribute("DeptId", dept);
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }


    public String departNamevalidate(String type) {
        ViewObjectImpl vo = getAppDept1();

        //Row[] rw=vo.getFilteredRows("AttTypeNm", type);
        RowQualifier rowQualifier = new RowQualifier(vo);
        // filtering data using method setWhereClause
        rowQualifier.setWhereClause("UPPER(DeptNm)=UPPER('" + type + "')");
        // use method getFilteredRows to return Row[] type after filter.
        Row[] rw = vo.getFilteredRows(rowQualifier);
        System.out.println(rw.length);
        if (rw.length > 0) {

            for (Row r : rw) {
                if (!r.equals(vo.getCurrentRow()))
                    return "Y";
            }

        }

        return "N";


    }

    public void refreshParentLov() {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();

        System.out.println("refresh method");
        AppDeptVORowImpl currentRow = (AppDeptVORowImpl) getAppDept1().getCurrentRow();
        RowSet lovParentNamVO2 = currentRow.getLovParentNamVO2();
        lovParentNamVO2.setNamedWhereClauseParam("bindhoorgid", hoOrgId);
        lovParentNamVO2.executeQuery();
    }

    public String chkForChildDept() {
        String result = "Y";
        String deptId = "";
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl appDeptVo = this.getAppDept1();
        RowQualifier rowQual = new RowQualifier(this.getAppDept1());
        deptId = (String) appDeptVo.getCurrentRow().getAttribute("DeptId");
        if (!deptId.equals("") || !deptId.equals(null)) {
            rowQual.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                                   "' and DeptPid='" + deptId + "'");
            Row fr[] = this.getAppDept1().getFilteredRows(rowQual);
            if (fr.length > 0) {
                result = "N";
            }
        }

        return result;
    }


    public String parentdepart(String deptid) {

        if ((this.getAppDept1().getCurrentRow().getAttribute("DeptId").toString()).equals(deptid)) {
            return "Y";
        } else {
            return "N";
        }
    }

    public String chkIsChildValid(String parDeptId) {

        String result = "Y";
        String deptId = "";
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();

        ViewObjectImpl appDeptVo = this.getAppDept1();
        RowQualifier rowQual = new RowQualifier(this.getAppDept1());
        deptId = (String) appDeptVo.getCurrentRow().getAttribute("DeptId");
        //deptPid = (String)appDeptVo.getCurrentRow().getAttribute("DeptPid");
        if (!parDeptId.equals("") || !parDeptId.equals(null)) {
            rowQual.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                                   "' and DeptPid='" + deptId + "' and DeptId = '" + parDeptId + "'");
            Row fr[] = this.getAppDept1().getFilteredRows(rowQual);
            if (fr.length > 0) {
                result = "N";
            }
        }

        return result;
    }

    public String orgduplicatenam(String type) {
        System.out.println(type);
        ViewObjectImpl vo = getOrgDept1();

        //Row[] rw=vo.getFilteredRows("AttTypeNm", type);
        RowQualifier rowQualifier = new RowQualifier(vo);
        // filtering data using method setWhereClause
        rowQualifier.setWhereClause("UPPER(transOrgName)=UPPER('" + type + "')");
        //rowQualifier.setWhereClause("OrgId='"+type+"'");
        // use method getFilteredRows to return Row[] type after filter.
        Row[] rw = vo.getFilteredRows(rowQualifier);
        System.out.println(rw.length);
        if (rw.length > 0) {
            for (Row r : rw) {
                if (!r.equals(vo.getCurrentRow()))
                    return "Y";
            }
        }
        return "N";

    }


    public String chkDuplicateOrgID(String orgDesc) {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        System.out.println("OrgDesc in amimpl=" + orgDesc);
        String orgid = "";
        ViewObjectImpl vo = this.getLovOrg1();
        Row[] rw = vo.getFilteredRows("OrgDesc", orgDesc);
        System.out.println("No. of Rows Filtered = " + rw.length);
        if (rw.length > 0) {
            orgid = rw[0].getAttribute("OrgId").toString();
            System.out.println("OrgId =" + orgid);
            RowQualifier rq = new RowQualifier(this.getOrgDept1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgid + "' and DeptId='" +
                              this.getOrgDept1().getCurrentRow().getAttribute("DeptId") + "'");
            System.out.println("Query=" + rq.getExprStr());
            Row fr[] = this.getOrgDept1().getFilteredRows(rq);
            System.out.println("Total no. of same rows=" + fr.length);
            for (Row r : fr) {
                System.out.println("Row=" + r + " and current row=" + this.getOrgDept1().getCurrentRow());
                if (!(r.equals(this.getOrgDept1().getCurrentRow())))
                    return "Y";
            }
        }
        return "N";
    }

    public void addallorg() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        EbizParams.GLBL_APP_USR_ORG();

        ViewObjectImpl vo = this.getLovOrg1();
        vo.setNamedWhereClauseParam("bindhoorgid", hoOrgId);
        vo.executeQuery();
        Row currentRow = this.getAppDept1().getCurrentRow();
        Timestamp dt = null;
        if (currentRow != null) {
            AppDeptVORowImpl row = (AppDeptVORowImpl) currentRow;
            dt = row.getValidEndDt();
        }
        if (this.getLovOrg1().getAllRowsInRange().length > 0) {
            //RowSetIterator r = this.getLovOrg1().createRowSetIterator("id");
            RowSetIterator r = this.getLovOrg1().createRowSetIterator(null);
            //             r.getCurrentRow().getAttribute("OrgId");
            //             this.getOrgDept1().createRowSetIterator("orgid");
            while (r.hasNext()) {

                Row orgrow = r.next();
                String organizationid = orgrow.getAttribute("OrgId").toString();
                RowQualifier rq = new RowQualifier(this.getOrgDept1());
                rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                                  "' and OrgId='" + organizationid + "'");
                System.out.println("Query=" + rq.getExprStr());
                Row fr[] = this.getOrgDept1().getFilteredRows(rq);
                if (fr.length > 0) {
                    System.out.println("linking as already been done");
                } else {
                    Row rs = this.getOrgDept1().createRow();

                    rs.setAttribute("DeptId", this.getAppDept1().getCurrentRow().getAttribute("DeptId"));
                    rs.setAttribute("HoOrgId", hoOrgId);
                    rs.setAttribute("CldId", cldId);
                    rs.setAttribute("SlocId", slocId);
                    rs.setAttribute("OrgId", organizationid);
                    rs.setAttribute("ValidEndDt", dt);
                    //                     rs.setAttribute("UsrIdCreate", Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString()));
                    //                     rs.setAttribute("UsrIdCreateDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
                    rs.setAttribute("Actv", "Y");
                    if (this.getAppDept1().getCurrentRow().getAttribute("ValidEndDt") != null ||
                        this.getAppDept1().getCurrentRow().getAttribute("ValidEndDt") != "") {
                        rs.setAttribute("ValidEndDt", this.getAppDept1().getCurrentRow().getAttribute("ValidEndDt"));
                    }
                    rs.setAttribute("ValidStrtDt", this.getAppDept1().getCurrentRow().getAttribute("ValidStrtDt"));
                    this.getOrgDept1().insertRow(rs);
                }
            }
            r.closeRowSetIterator();
        }
    }

    public String expireparent(String deptid) {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rf = new RowQualifier(this.getAppDept1());

        rf.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and DeptId='" +
                          deptid + "'");
        System.out.println("Query=" + rf.getExprStr());
        Row fr[] = this.getAppDept1().getFilteredRows(rf);
        if (fr.length > 0) {
            for (Row p : fr) {
                java.sql.Date strtDt = null;
                java.sql.Date sysdate = null;
                if (p.getAttribute("ValidEndDt") != null) {
                    try {
                        strtDt = ((Timestamp) p.getAttribute("ValidEndDt")).dateValue();
                        Long sys = System.currentTimeMillis();
                        sysdate = new java.sql.Date(sys);
                    } catch (SQLException e) {
                        System.out.println(e.getMessage());
                    }

                    if (sysdate.compareTo(strtDt) > 0) {
                        if (sysdate.toString().equals(strtDt.toString())) {
                        } else {
                            return "Y";
                        }

                    }
                }
            }

        }
        return "N";
    }

    /**
     * Container's getter for OrgDept1.
     * @return OrgDept1
     */
    public ViewObjectImpl getOrgDept1() {
        return (ViewObjectImpl) findViewObject("OrgDept1");
    }

    /**
     * Container's getter for AppDeptToOrgDeptVL1.
     * @return AppDeptToOrgDeptVL1
     */
    public ViewLinkImpl getAppDeptToOrgDeptVL1() {
        return (ViewLinkImpl) findViewLink("AppDeptToOrgDeptVL1");
    }

    /**
     * Container's getter for LovOrg1.
     * @return LovOrg1
     */
    public ViewObjectImpl getLovOrg1() {
        return (ViewObjectImpl) findViewObject("LovOrg1");
    }

    /**
     * Container's getter for LovAppOrg1.
     * @return LovAppOrg1
     */
    public ViewObjectImpl getLovAppOrg1() {
        return (ViewObjectImpl) findViewObject("LovAppOrg1");
    }

    /**
     * Container's getter for LovParentNam1.
     * @return LovParentNam1
     */
    public ViewObjectImpl getLovParentNam1() {
        return (ViewObjectImpl) findViewObject("LovParentNam1");
    }

    public void setDate() {
        Row currentRow = this.getAppDept1().getCurrentRow();
        if (currentRow != null) {
            AppDeptVORowImpl row = (AppDeptVORowImpl) currentRow;
            Timestamp dt = row.getValidEndDt();
            if (dt != null) {
                Row currentRow_2 = this.getOrgDept1().getCurrentRow();
                if (currentRow_2 != null) {
                    currentRow_2.setAttribute("ValidEndDt", dt);
                }
            }
        }
    }

    /**
     * Container's getter for dummyForReqAreaVO1.
     * @return dummyForReqAreaVO1
     */
    public ViewObjectImpl getdummyForReqAreaVO1() {
        return (ViewObjectImpl) findViewObject("dummyForReqAreaVO1");
    }

    /**
     * Container's getter for RequirementAreaVO1.
     * @return RequirementAreaVO1
     */
    public ViewObjectImpl getRequirementAreaVO1() {
        return (ViewObjectImpl) findViewObject("RequirementAreaVO1");
    }

    /**
     * Container's getter for OrgDeptToReqAreaVL1.
     * @return OrgDeptToReqAreaVL1
     */
    public ViewLinkImpl getOrgDeptToReqAreaVL1() {
        return (ViewLinkImpl) findViewLink("OrgDeptToReqAreaVL1");
    }

    public String CheckLegacyCodeDuplicate(String LegacyCodeId) {
        ViewObjectImpl deoartVo = getAppDept1();
        Row current = deoartVo.getCurrentRow();
        RowSetIterator rsi = deoartVo.createRowSetIterator(null);

        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != current) {
                if (next.getAttribute("LegacyCode") != null) {

                    if (next.getAttribute("LegacyCode").toString().equalsIgnoreCase(LegacyCodeId)) {

                        return "Duplicate Entry";

                    }
                }
            }
        }


        return "Y";
    }


}

