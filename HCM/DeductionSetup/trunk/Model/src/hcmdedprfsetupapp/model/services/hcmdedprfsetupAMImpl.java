package hcmdedprfsetupapp.model.services;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;
import adf.utils.model.ADFModelUtils;

import hcmdedprfsetupapp.model.services.common.hcmdedprfsetupAM;

import hcmdedprfsetupapp.model.views.FinCoaVOImpl;

import java.sql.SQLException;
import java.sql.Types;

import java.util.Iterator;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.domain.Number;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 30 12:13:45 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class hcmdedprfsetupAMImpl extends ApplicationModuleImpl implements hcmdedprfsetupAM
{
    /**
     * This is the default constructor (do not remove).
     */


    public hcmdedprfsetupAMImpl()
    {
    }

    public void setBindVarOnPageLoad()
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        RequestContext.getCurrentInstance().getPageFlowScope().put("ADD_EDIT_MODE", "D");
        this.gethcmded2().setNamedWhereClauseParam("bindsearchcldid", cldId);
        this.gethcmded2().setNamedWhereClauseParam("bindsearchslocid", slocId);
        this.gethcmded2().setNamedWhereClauseParam("bindsearchhoorgid", hoOrgId);
        this.gethcmded2().setNamedWhereClauseParam("bindsearchorgid", orgId);
        this.gethcmded2().executeQuery();
        this.getDummy1().setNamedWhereClauseParam("bindCldId", cldId);
        this.getDummy1().setNamedWhereClauseParam("bindSlocId", slocId);
        this.getDummy1().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getDummy1().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getDummy1().executeQuery();
        ;


    }

    public void setBindLoanProfPageLoad()
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl LoanProfVO = this.gethcmLoanPrf1();
        ViewCriteria vc = LoanProfVO.getViewCriteria("hcmLoanPrfVOCriteria");
        LoanProfVO.applyViewCriteria(vc);

        LoanProfVO.setNamedWhereClauseParam("BIND_CLD_ID", cldId);
        LoanProfVO.setNamedWhereClauseParam("BIND_SLOC_ID", slocId);
        LoanProfVO.setNamedWhereClauseParam("BIND_HO_ORG_ID", hoOrgId);
        LoanProfVO.setNamedWhereClauseParam("BIND_ORG_ID", orgId);
        LoanProfVO.executeQuery();

    }


    /**
     * Container's getter for Dummy1.
     * @return Dummy1
     */
    public ViewObjectImpl getDummy1()
    {
        return (ViewObjectImpl) findViewObject("Dummy1");
    }


    public String resolvEl(String data)
    {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    public void searchdedname(Integer dedprof, String dedname, String LocationId)
    {
        System.out.println("LocationId" + LocationId);
        ViewObjectImpl vo = gethcmded2();
        System.out.println(vo.getEstimatedRowCount());
        vo.setNamedWhereClauseParam("bindsearchdedid", dedname);
        vo.setNamedWhereClauseParam("bindsearchdedprf", dedprof);
        vo.setNamedWhereClauseParam("Bind_Location_Id", LocationId);
        vo.executeQuery();
        System.out.println(vo.getEstimatedRowCount());
    }

    public void reset()
    {
        ViewObjectImpl vo = gethcmded2();
        ViewObjectImpl dummyvo = getDummy1();

        vo.setNamedWhereClauseParam("bindsearchdedid", null);
        vo.setNamedWhereClauseParam("bindsearchdedprf", null);
        vo.setNamedWhereClauseParam("Bind_Location_Id", null);
        vo.executeQuery();
        dummyvo.executeQuery();
    }

    public void generateDedId()
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl dedVO = this.gethcmded2();

        //hcmdedprfsetupAMImpl am =  (hcmdedprfsetupAMImpl)this.getApplicationModule();
        StringBuilder sbul = new StringBuilder("FN_HCM_GET_PRF_ID (?,?,?,?,?,?,?)");
        Object[] obj =
        {
            slocId, cldId, hoOrgId, orgId, 28507, 0, "HCM$DED"
        };
        String dedid = (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);

        // String dedid = (String) (callStoredFunction(Types.VARCHAR, "FN_HCM_GET_PRF_ID (?,?,?,?,?,?,?)", new Object[] {
        // slocId, cldId, hoOrgId, orgId, 28507, 0, "HCM$DED"}));
        System.out.println("deduction id=" + dedid);
        dedVO.getCurrentRow().setAttribute("DedId", dedid);
    }


    public void generateDocId()
    {
        String cldId = (String) resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer slocId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String orgId = (String) resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        Integer userId = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        ViewObjectImpl dedVO = this.gethcmded2();


        //hcmdedprfsetupAMImpl am =  (hcmdedprfsetupAMImpl)this.getApplicationModule();
        StringBuilder sbul = new StringBuilder("app.get_txn_id (?,?,?,?,?,?)");
        Object[] obj =
        {
            cldId, slocId, orgId, userId, 28511, 0
        };
        String docId = (String) ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);

        //String docId = (String) (callStoredFunction(Types.VARCHAR, "app.get_txn_id (?,?,?,?,?,?)", new Object[] {cldId, slocId, orgId, userId, 28511, 0}));
        System.out.println("DocId=" + docId);
        dedVO.getCurrentRow().setAttribute("DocId", docId);
    }

    public String chkDeduCtionId()
    {
        String chkStatus = "notexist";
        ViewObjectImpl dedVO = this.gethcmded2();
        String dedid = (String) dedVO.getCurrentRow().getAttribute("DedId");
        if (dedid != " " && dedid != null && dedid.toString().length() > 0)
        {
            System.out.println("deduction id=" + dedid);
            chkStatus = "exist";
        }
        return chkStatus;
    }


    public String chkDuplicateDeduName(String DedDesc)
    {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        Row currentRow = this.gethcmded2().getCurrentRow();
        RowQualifier rq = new RowQualifier(this.gethcmded2());
        String querry = "";
        if (currentRow != null)
        {
            String dedPrf = currentRow.getAttribute("DedPrf").toString();
            if (dedPrf.equals("48") || dedPrf.equals("50"))
            {
                if (DedDesc.equals("65") || DedDesc.equals("67"))
                {
                    return "N";
                }
                else
                {
                    querry =
                        "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                        orgId + "'  and ValidEndDt IS NULL and DedType = " + DedDesc;
                }
            }
            else
            {
                querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and ValidEndDt IS NULL and UPPER(DedDesc)=UPPER('" + DedDesc + "')";
            }
            rq.setWhereClause(querry);
        }

        Row fr[] = this.gethcmded2().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            System.out.println("Row=" + r + " and current row=" + this.gethcmded2().getCurrentRow());
            if (!(r.equals(this.gethcmded2().getCurrentRow())))
                return "Y";
        }
        return "N";
    }


    public String chkDuplicateLoanName()
    {
        System.out.println("In chkDuplicateLoanName  Method in AM ");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        Row currentRow = this.gethcmLoanPrf1().getCurrentRow();
        RowQualifier rq = new RowQualifier(this.gethcmLoanPrf1());
        String querry = "";
        if (currentRow != null)
        {
            String loaneId = currentRow.getAttribute("LoanId").toString();
            System.out.println("LoanId==" + loaneId);

            querry =
                "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
                "'  and LoanId = '" + loaneId+"'";
            rq.setWhereClause(querry);
        }

        Row fr[] = this.gethcmLoanPrf1().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            System.out.println("Row=" + r + " and current row=" + this.gethcmLoanPrf1().getCurrentRow());
            if (!(r.equals(this.gethcmLoanPrf1().getCurrentRow())))
                return "Y";
        }
        return "N";
    }

    public void setSeqNumInTaxRange()
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl vo = this.gethcmdedslab1();
        Row row = vo.getCurrentRow();
        String docId = (String) row.getAttribute("DocId");
        System.out.println("Doc Id Found for Sequence Number : " + docId);
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and DocId='" + docId + "'");
        System.out.println(rq.getExprStr());
        Row fr[] = vo.getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        row.setAttribute("SlabSeq", fr.length);
        vo.executeQuery();
    }


    public String chkDuplicateSlryCmponent(String salId)
    {
        if (this.gethcmdedsalO1().getCurrentRow() != null)
        {

            String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
            String cldId = EbizParams.GLBL_APP_CLD_ID();
            Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
            String orgId = EbizParams.GLBL_APP_USR_ORG();
            RowQualifier rq = new RowQualifier(this.gethcmdedsalO1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgId + "'  and SalId='" + salId + "' and DocId='" +
                              this.gethcmdedsalO1().getCurrentRow().getAttribute("DocId").toString() + "'");
            System.out.println("Query=" + rq.getExprStr());
            Row fr[] = this.gethcmdedsalO1().getFilteredRows(rq);
            System.out.println("Total no. of same rows=" + fr.length);
            for (Row r : fr)
            {
                System.out.println("Row=" + r + " and current row=" + this.gethcmdedsalO1().getCurrentRow());
                if (!(r.equals(this.gethcmdedsalO1().getCurrentRow())))
                    return "Y";
            }
            return "N";
        }
        return "N";

    }
    
    public String chkDuplicateSlryCmponentFrLoan(String salId)
    {
        if (this.gethcmLoanSal1().getCurrentRow() != null)
        {

            String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
            String cldId = EbizParams.GLBL_APP_CLD_ID();
            Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
            String orgId = EbizParams.GLBL_APP_USR_ORG();
            RowQualifier rq = new RowQualifier(this.gethcmLoanSal1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgId + "'  and SalId='" + salId + "' and LoanId='" +
                              this.gethcmLoanSal1().getCurrentRow().getAttribute("LoanId").toString() + "'");
            System.out.println("Query=" + rq.getExprStr());
            Row fr[] = this.gethcmLoanSal1().getFilteredRows(rq);
            System.out.println("Total no. of same rows=" + fr.length);
            for (Row r : fr)
            {
                System.out.println("Row=" + r + " and current row=" + this.gethcmLoanSal1().getCurrentRow());
                if (!(r.equals(this.gethcmLoanSal1().getCurrentRow())))
                    return "Y";
            }
            return "N";
        }
        return "N";

    }

    public String chkDeducUsageInEmpDed()
    {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        String DocId = null;
        String DedPrf = null;
        if (this.gethcmded2().getCurrentRow().getAttribute("DocId") != null)
        {
            DocId = this.gethcmded2().getCurrentRow().getAttribute("DocId").toString();
            DedPrf = this.gethcmded2().getCurrentRow().getAttribute("DedPrf").toString();
            RowQualifier rq = new RowQualifier(this.getHcmEmpDed1());
            rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                              "' and OrgId='" + orgId + "'  and DedDocId='" + DocId + "' and DedPrf = '" + DedPrf +
                              "'");

            System.out.println("Query=" + rq.getExprStr());
            Row fr[] = this.getHcmEmpDed1().getFilteredRows(rq);
            System.out.println("Total number of increment for this employee =" + fr.length);
            if (fr.length > 0)
            {
                return "N";
            }

        }

        return "Y";
    }

    public void showpopdata()
    {
        this.gethcmdedsalO1().executeQuery();
    }

    public String chkDeducUsage()
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        ViewObjectImpl dedVO = this.gethcmded2();
        String dedid = (String) dedVO.getCurrentRow().getAttribute("DedId");
        String DocId = null;
        String DedPrf = null;
        if (dedid != " " && dedid != null && dedid.toString().length() > 0)
        {
            if (this.gethcmded2().getCurrentRow().getAttribute("DocId") != null)
            {
                DocId = this.gethcmded2().getCurrentRow().getAttribute("DocId").toString();
                DedPrf = this.gethcmded2().getCurrentRow().getAttribute("DedPrf").toString();
                RowQualifier rq = new RowQualifier(this.getHcmEmpDed1());
                rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                                  "' and OrgId='" + orgId + "'  and DedDocId='" + DocId + "' and DedPrf = '" + DedPrf +
                                  "'");

                System.out.println("Query=" + rq.getExprStr());
                Row fr[] = this.getHcmEmpDed1().getFilteredRows(rq);
                System.out.println("Total number of increment for this employee =" + fr.length);
                if (fr.length > 0)
                {
                    return "N";
                }

            }

        }


        return "Y";
    }

    public String delFromChild()
    {
        System.out.println("delFromChild");
        String result = "";
        ViewObjectImpl ded2Vo = this.gethcmded2();
        String DocId = (String) ded2Vo.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl dedSalCompVo = this.gethcmdedsalO1();
        ViewObjectImpl dedSlabVo = this.gethcmdedslab1();
        RowQualifier rowQualifierfrSalCom = new RowQualifier(dedSalCompVo);
        String Qry = "DocId='" + DocId + "'";
        rowQualifierfrSalCom.setWhereClause(Qry);
        Row newRwfrSalcom[] = dedSalCompVo.getFilteredRows(rowQualifierfrSalCom);
        if (newRwfrSalcom.length > 0)
        {
            for (int i = 0; i < newRwfrSalcom.length; i++)
            {
                newRwfrSalcom[i].remove();
            }
            result = "success";
        }
        else
        {
            result = "success";
        }
        RowQualifier rowQualifierfrSlab = new RowQualifier(dedSlabVo);
        rowQualifierfrSlab.setWhereClause(Qry);
        Row newRw[] = dedSlabVo.getFilteredRows(rowQualifierfrSlab);
        if (newRw.length > 0)
        {
            for (int i = 0; i < newRw.length; i++)
            {
                newRw[i].remove();
            }
            result = "success";
        }
        else
        {
            result = "success";
        }
        return result;

    }


    public String chkPrevDate(java.sql.Date dedDCurrDtt)
    {
        System.out.println("chkPrevDate");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        this.getHcmDedChkDt().setNamedWhereClauseParam("bindCldId", cldId);
        this.getHcmDedChkDt().setNamedWhereClauseParam("bindSlocId", slocId);
        this.getHcmDedChkDt().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getHcmDedChkDt().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getHcmDedChkDt().executeQuery();
        Object dedPrf = this.gethcmded2().getCurrentRow().getAttribute("DedPrf");
        Object dedtyp = this.gethcmded2().getCurrentRow().getAttribute("DedType");
        Object dedDesc = this.gethcmded2().getCurrentRow().getAttribute("DedDesc");
        RowQualifier rq = new RowQualifier(this.getHcmDedChkDt());
        if (dedPrf != null && dedDesc != null)
        {
            rq.setWhereClause("DedPrf = " + dedPrf.toString() + " and DedDesc='" + dedDesc.toString() + "'");

            Row fr[] = this.getHcmDedChkDt().getFilteredRows(rq);
            oracle.jbo.domain.Timestamp ValidEndDt = null;
            java.sql.Date ValidMxEndDate = null;
            oracle.jbo.domain.Timestamp dedStartDt = null;
            if (fr.length > 0)
            {
                try
                {
                    ValidEndDt = (Timestamp) fr[0].getAttribute("MaxEndDate");
                    if (ValidEndDt == null)
                    {
                        return "Y";
                    }
                    else
                    {
                        ValidMxEndDate = ValidEndDt.dateValue();
                    }

                }
                catch (SQLException e) {
                    System.out.println("Error on Cast");
                }
                if (ValidMxEndDate.compareTo(dedDCurrDtt) >= 0)
                {
                    return "N";
                }
            }
            else
            {

            }
        }
        return "Y";
    }

    public String getDedDate()
    {
        String date = "";
        System.out.println("getDedDate");

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        this.getHcmDedChkDt().setNamedWhereClauseParam("bindCldId", cldId);
        this.getHcmDedChkDt().setNamedWhereClauseParam("bindSlocId", slocId);
        this.getHcmDedChkDt().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getHcmDedChkDt().setNamedWhereClauseParam("bindOrgId", orgId);
        this.getHcmDedChkDt().executeQuery();
        Object dedPrf = this.gethcmded2().getCurrentRow().getAttribute("DedPrf");
        Object dedtyp = this.gethcmded2().getCurrentRow().getAttribute("DedType");
        Object dedDesc = this.gethcmded2().getCurrentRow().getAttribute("DedDesc");
        RowQualifier rq = new RowQualifier(this.getHcmDedChkDt());
        if (dedPrf != null && dedDesc != null)
        {
            rq.setWhereClause("DedPrf = " + dedPrf.toString() + " and DedDesc='" + dedDesc.toString() + "'");

            Row fr[] = this.getHcmDedChkDt().getFilteredRows(rq);
            oracle.jbo.domain.Timestamp ValidEndDt = null;
            java.sql.Date ValidMxEndDate = null;
            oracle.jbo.domain.Timestamp dedStartDt = null;
            if (fr.length > 0)
            {

                try
                {
                    ValidEndDt = (Timestamp) fr[0].getAttribute("MaxEndDate");
                    ValidMxEndDate = ValidEndDt.dateValue();
                    date = ValidMxEndDate + date;
                    String[] d1 = date.split("-");
                    date = d1[2] + "-" + d1[1] + "-" + d1[0];


                }
                catch (SQLException e) {
                    System.out.println("Error on Cast");
                }
            }
        }
        return date;
    }


    /**
     * Container's getter for HcmEmpDed1.
     * @return HcmEmpDed1
     */
    public ViewObjectImpl getHcmEmpDed1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpDed1");
    }

    /**
     * Container's getter for OrgCntryVO1.
     * @return OrgCntryVO1
     */
    public ViewObjectImpl getOrgCntry1()
    {
        return (ViewObjectImpl) findViewObject("OrgCntry1");
    }

    /**
     * Container's getter for HcmDedChkDt1.
     * @return HcmDedChkDt1
     */
    public ViewObjectImpl getHcmDedChkDt()
    {
        return (ViewObjectImpl) findViewObject("HcmDedChkDt");
    }

    public String isGlLinkined()
    {
        StringBuilder sbul = new StringBuilder("fn_hcm_chk_org_prf(?,?,?,?)");
        Object[] obj =
        {
            getParamCldId(), getParamSlocId(), getParamOrgId(), "GL_CODE_LNK"
        };
        Object ob = ADFModelUtils.callFunction(this, sbul, obj, Types.VARCHAR);
        // Object ob = callStoredFunction(Types.VARCHAR, "fn_hcm_chk_org_prf(?,?,?,?)", new Object[] {getParamCldId(), getParamSlocId(), getParamOrgId(),"GL_CODE_LNK" });
        if (ob != null)
            return ob.toString();
        return "N";
    }

    public String getParamCldId()
    {
        return EbizParams.GLBL_APP_CLD_ID();
    }

    public Integer getParamSlocId()
    {
        return EbizParams.GLBL_APP_SERV_LOC();
    }

    public String getParamOrgId()
    {
        return EbizParams.GLBL_APP_USR_ORG();
    }

    /**
     * Container's getter for MaxSalFindVO1.
     * @return MaxSalFindVO1
     */
    public ViewObjectImpl getMaxSalFindVO()
    {
        return (ViewObjectImpl) findViewObject("MaxSalFindVO");
    }

    public String chkMaxSal()
    {
        ViewObjectImpl vo = this.gethcmdedslab1();
        Row row = vo.getCurrentRow();
        String docId = (String) row.getAttribute("DocId");
        Integer seqNo = (Integer) row.getAttribute("SlabSeq");
        System.out.println(seqNo + " : " + docId);
        if (seqNo == 1)
        {
            String msg = chkRange(vo, seqNo + 1, docId);
            if (msg != null)
            {
                String[] split = msg.split(":");
                return 0 + ":" + split[0];
            }
            else
            {
                return "0";
            }
        }
        else
        {
            String endVal = null;
            String strVal = null;
            String msg1 = chkRange(vo, seqNo + 1, docId);
            String msg2 = chkRange(vo, seqNo - 1, docId);
            String[] s = msg2.split(":");
            strVal = s[1];
            if (msg1 != null)
            {
                String[] sp = msg1.split(":");
                endVal = sp[0];
                return strVal + ":" + endVal;
            }
            else
            {
                return strVal;
            }
        }
        //return (strVal != null ? (endVal != null ? endVal+":"+strVal : null):endVal);
    }

    public String chkRange(ViewObjectImpl vo, int seqNo, String docId)
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String data = null;
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and DocId='" + docId + "' and SlabSeq=" + seqNo);
        System.out.println(rq.getExprStr());
        Row fr[] = vo.getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        if (fr.length > 0)
        {
            System.out.println(fr[0].getAttribute("RangeStart") + " " + fr[0].getAttribute("RangeEnd"));
            data = fr[0].getAttribute("RangeStart") + ":" + fr[0].getAttribute("RangeEnd");
        }
        return data;
    }

    public void postCha()
    {
        this.getDBTransaction().postChanges();
    }


    /**
     * Container's getter for DummyLoan1.
     * @return DummyLoan1
     */
    public ViewObjectImpl getDummyLoan1()
    {
        return (ViewObjectImpl) findViewObject("DummyLoan1");
    }

    /**
     * Container's getter for hcmLoanPrf1.
     * @return hcmLoanPrf1
     */
    public ViewObjectImpl gethcmLoanPrf1()
    {
        return (ViewObjectImpl) findViewObject("hcmLoanPrf1");
    }

    /**
     * Container's getter for hcmLoanSal1.
     * @return hcmLoanSal1
     */
    public ViewObjectImpl gethcmLoanSal1()
    {
        return (ViewObjectImpl) findViewObject("hcmLoanSal1");
    }

    /**
     * Container's getter for hcmLoanPrfTOhcmLoanSalVL1.
     * @return hcmLoanPrfTOhcmLoanSalVL1
     */
    public ViewLinkImpl gethcmLoanPrfTOhcmLoanSalVL1()
    {
        return (ViewLinkImpl) findViewLink("hcmLoanPrfTOhcmLoanSalVL1");
    }


    public void CrateDocID()
    {

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        String docId =
            (String) ADFModelUtils.callFunction(this, new StringBuilder("app.get_txn_id (?,?,?,?,?,?)"), new Object[]
        {
            cldId, slocId, orgId, userId, 28508, 0
        }, Types.VARCHAR);

        ViewObjectImpl grdVo = this.gethcmLoanPrf1();
        grdVo.getCurrentRow().setAttribute("DocId", docId);
    }

    public void SearchLoanProfAm()
    {
        System.out.println("in searchLoan");
        ViewObjectImpl DummyLnSrchVo = this.getDummyVoFrLoanSearch();
        String loanId = (String) DummyLnSrchVo.getCurrentRow().getAttribute("TransLoanId");

        ViewObjectImpl LoanProf = this.gethcmLoanPrf1();
        ViewCriteria vc = LoanProf.getViewCriteria("hcmLoanPrfVOCriteria");
        LoanProf.applyViewCriteria(vc);
        LoanProf.setNamedWhereClauseParam("BIND_LOAN_PROF", loanId);
        LoanProf.setNamedWhereClauseParam("BIND_CLD_ID", EbizParams.GLBL_APP_CLD_ID());
        LoanProf.setNamedWhereClauseParam("BIND_HO_ORG_ID", EbizParams.GLBL_HO_ORG_ID());
        LoanProf.setNamedWhereClauseParam("BIND_ORG_ID", EbizParams.GLBL_APP_USR_ORG());
        LoanProf.setNamedWhereClauseParam("BIND_SLOC_ID", EbizParams.GLBL_APP_SERV_LOC());
        LoanProf.executeQuery();

    }


    public void resetLoanProfAm()
    {
        System.out.println("in reset method in am");
        ViewObjectImpl DummyLnSrchVo = this.getDummyVoFrLoanSearch();
        DummyLnSrchVo.getCurrentRow().setAttribute("TransLoanId", "");
        ViewObjectImpl pramAllgrade = this.gethcmLoanPrf1();
        ViewCriteria vc = pramAllgrade.getViewCriteria("hcmLoanPrfVOCriteria");
        pramAllgrade.applyViewCriteria(vc);
        pramAllgrade.setNamedWhereClauseParam("BIND_LOAN_PROF", null);
        pramAllgrade.setNamedWhereClauseParam("BIND_CLD_ID", null);
        pramAllgrade.setNamedWhereClauseParam("BIND_HO_ORG_ID", null);
        pramAllgrade.setNamedWhereClauseParam("BIND_ORG_ID", null);
        pramAllgrade.setNamedWhereClauseParam("BIND_SLOC_ID", null);
        pramAllgrade.executeQuery();
        //          }
    }

    /**
     * Container's getter for hcmded1.
     * @return hcmded1
     */
    public ViewObjectImpl gethcmded1()
    {
        return (ViewObjectImpl) findViewObject("hcmded1");
    }

    /**
     * Container's getter for LovLocation1.
     * @return LovLocation1
     */
    public ViewObjectImpl getLovLocation1()
    {
        return (ViewObjectImpl) findViewObject("LovLocation1");
    }

    /**
     * Container's getter for hcmded2.
     * @return hcmded2
     */
    public ViewObjectImpl gethcmded2()
    {
        return (ViewObjectImpl) findViewObject("hcmded2");
    }

    /**
     * Container's getter for hcmdedslab1.
     * @return hcmdedslab1
     */
    public ViewObjectImpl gethcmdedslab1()
    {
        return (ViewObjectImpl) findViewObject("hcmdedslab1");
    }

    /**
     * Container's getter for hcmdedTohcmdedslabVL1.
     * @return hcmdedTohcmdedslabVL1
     */
    public ViewLinkImpl gethcmdedTohcmdedslabVL1()
    {
        return (ViewLinkImpl) findViewLink("hcmdedTohcmdedslabVL1");
    }

    /**
     * Container's getter for hcmLoanPrf2.
     * @return hcmLoanPrf2
     */
    public ViewObjectImpl gethcmLoanPrf2()
    {
        return (ViewObjectImpl) findViewObject("hcmLoanPrf2");
    }

    /**
     * Container's getter for hcmLoanSal2.
     * @return hcmLoanSal2
     */
    public ViewObjectImpl gethcmLoanSal2()
    {
        return (ViewObjectImpl) findViewObject("hcmLoanSal2");
    }

    /**
     * Container's getter for hcmLoanPrfTOhcmLoanSalVL2.
     * @return hcmLoanPrfTOhcmLoanSalVL2
     */
    public ViewLinkImpl gethcmLoanPrfTOhcmLoanSalVL2()
    {
        return (ViewLinkImpl) findViewLink("hcmLoanPrfTOhcmLoanSalVL2");
    }

    /**
     * Container's getter for hcmdedsalO1.
     * @return hcmdedsalO1
     */
    public ViewObjectImpl gethcmdedsalO1()
    {
        return (ViewObjectImpl) findViewObject("hcmdedsalO1");
    }

    /**
     * Container's getter for hcmdedTohcmdedsalVL1.
     * @return hcmdedTohcmdedsalVL1
     */
    public ViewLinkImpl gethcmdedTohcmdedsalVL1()
    {
        return (ViewLinkImpl) findViewLink("hcmdedTohcmdedsalVL1");
    }

    /**
     * Container's getter for DummyVoFrLoanSearch1.
     * @return DummyVoFrLoanSearch1
     */
    public ViewObjectImpl getDummyVoFrLoanSearch()
    {
        return (ViewObjectImpl) findViewObject("DummyVoFrLoanSearch");
    }

    /**
     * Container's getter for LovSalCompName1.
     * @return LovSalCompName1
     */
    public ViewObjectImpl getLovSalCompName1()
    {
        return (ViewObjectImpl) findViewObject("LovSalCompName1");
    }

    /**
     * Container's getter for FinCoa1.
     * @return FinCoa1
     */
    public FinCoaVOImpl getFinCoa1()
    {
        return (FinCoaVOImpl) findViewObject("FinCoa1");
    }

    /**
     * Container's getter for salarySlab1.
     * @return salarySlab1
     */
    public ViewObjectImpl getsalarySlab1()
    {
        return (ViewObjectImpl) findViewObject("salarySlab1");
    }

    public Integer addSalarySlabAm()
    {
        Integer a = 0;
        Row currentRow = getsalarySlab1().getCurrentRow();
        Object startRangeO = currentRow.getAttribute("TransSalaryStartRang");
        Object endRangeO = currentRow.getAttribute("TransSalaryEndRang");
        Object taxValueO = currentRow.getAttribute("TransTax");
        Number startRange = (startRangeO == null ? StaticValue.NUMBER_ZERO : (Number) startRangeO);
        Number endRange = (endRangeO == null ? StaticValue.NUMBER_ZERO : (Number) endRangeO);
        Number taxValue = (taxValueO == null ? StaticValue.NUMBER_ZERO : (Number) taxValueO);

        if (startRange.compareTo(StaticValue.NUMBER_ZERO) < 0)
        {
            a = 1;
        }
        else if (endRange.compareTo(StaticValue.NUMBER_ZERO) < 0)
        {
            a = 2;
        }
        else if (endRange.compareTo(startRange) <= 0)
        {
            a = 3;
        }
        else if (taxValue.compareTo(StaticValue.NUMBER_ZERO) < 0)
        {
            a = 4;
        }
        else if (!isRangeValid(startRange, endRange))
        {
            a = 5;
        }
        else
        {
            Row createRow = gethcmdedslab1().createRow();
            gethcmdedslab1().insertRow(createRow);
            createRow.setAttribute("RangeStart", startRangeO);
            createRow.setAttribute("RangeEnd", endRangeO);
            createRow.setAttribute("TaxPercent", taxValueO);
            createRow.getAttribute("DocId");
            Integer Seq = getSequenceNo(createRow.getAttributeHints("DocId"));
            createRow.setAttribute("SlabSeq", Seq);
            // ViewObjectImpl salarySlabVO = this.getsalarySlab1();
            //RowSetIterator range = salarySlabVO.createRowSetIterator(null);
            /* for(A a : data){
                       if((a.getA() <= x && x <= a.getB()) || (a.getA() <= y && y <= a.getB())){
                           System.out.println("Value not Valid.");
                           b= false;
                           break;
                       }else{
                           System.out.println("Value Valid.");
            */


        }
        return a;
    }

    public Integer getSequenceNo(Object docId)
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl vo = this.gethcmdedslab1();
        System.out.println("Doc Id Found for Sequence Number : " + docId);
        RowQualifier rq = new RowQualifier(vo);
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and DocId='" + docId + "'");
        System.out.println(rq.getExprStr());
        Row fr[] = vo.getFilteredRows(rq);
        return fr.length;
    }

    public Boolean isRangeValid(Number startRange, Number endRange)
    {
        Boolean i = true;
        /* for(A a : data){
               if((a.getA() <= x && x <= a.getB()) || (a.getA() <= y && y <= a.getB())){
                   System.out.println("Value not Valid.");
                   b= false;
                   break;
               }else{
                   System.out.println("Value Valid.");
    */

        RowSetIterator ctr = gethcmdedslab1().createRowSetIterator(null);

        while (ctr.hasNext())
        {
            Row row = ctr.next();
            Object sRangeO = row.getAttribute("RangeStart");
            Object eRangeO = row.getAttribute("RangeEnd");
            Number sRange = (sRangeO == null ? StaticValue.NUMBER_ZERO : (Number) sRangeO);
            Number eRange = (eRangeO == null ? StaticValue.NUMBER_ZERO : (Number) eRangeO);
            if ((sRange.compareTo(startRange) <= 0 && startRange.compareTo(eRange) <= 0) ||
                (sRange.compareTo(endRange) <= 0 && endRange.compareTo(eRange) <= 0))
            {
                System.out.println("Value not Valid.");
                i = false;
                ADFModelUtils.showFormattedFacesMessage("Range invalid", "Enter valid range",
                                                        FacesMessage.SEVERITY_ERROR);

                break;
            }
            else
            {
                System.out.println("Value Valid.");
            }
        }
        return i;
    }

    /*   public String checkDuplicateLaonName() {
        String Y;
        ViewObjectImpl loanPrfVo = this.gethcmLoanPrf1();
        Object loanId = loanPrfVo.getCurrentRow().getAttribute("LoanId");

        RowSetIterator loanePrf = gethcmLoanPrf1().createRowSetIterator(null);
        if (loanePrf.getAllRowsInRange().length > 0) {
            while (loanePrf.hasNext()) {
                Row row = loanePrf.next();


            }

        }


        return "Y";
    } */

    public boolean checkDuplicateLocation()
    {
        System.out.println("in validate location method");
        Boolean result = false;
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String retval = null;
        ViewObjectImpl hcmded2 = this.gethcmded2();
        Row currentRow = hcmded2.getCurrentRow();
        Object LocationId = currentRow.getAttribute("LocId");
        Object DedPrf = currentRow.getAttribute("DedPrf");
        RowQualifier rq = new RowQualifier(hcmded2);
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and LocId='" + LocationId + "' and DedPrf=" + DedPrf);

        System.out.println("expression is :::::::::::" + rq.getExprStr());
        Row[] fr = hcmded2.getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            if (r != currentRow)
            {
                result = true;
            }
            else
            {
                result = false;
            }
        }
        return result;
    }

    /**
     * Container's getter for OrgHcmPrf1.
     * @return OrgHcmPrf1
     */
    public ViewObjectImpl getOrgHcmPrf1()
    {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("OrgHcmPrf1");
        vo.setNamedWhereClauseParam("BINDCLD_ID", cldId);
        vo.setNamedWhereClauseParam("BINDORG_ID", orgId);
        vo.setNamedWhereClauseParam("BINDSLOC_ID", slocId);
        vo.executeQuery();
        return vo;
        
       // return (ViewObjectImpl) findViewObject("OrgHcmPrf1");
    }
}
