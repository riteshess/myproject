package hcmparameterapp.model.module;

import adf.utils.ebiz.EbizParams;

import hcmparameterapp.model.module.common.HcmParameterAppAM;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import oracle.adf.share.ADFContext;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 19 18:35:02 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmParameterAppAMImpl extends ApplicationModuleImpl implements HcmParameterAppAM {
    /**
     * This is the default constructor (do not remove).
     */
    public HcmParameterAppAMImpl() {
    }

    /**
     * Container's getter for Search1.
     * @return Search1
     */
    public ViewObjectImpl getSearch1() {
        return (ViewObjectImpl) findViewObject("Search1");
    }

    /**
     * Container's getter for ParameterType1.
     * @return ParameterType1
     */
    public ViewObjectImpl getParameterType1() {
        return (ViewObjectImpl) findViewObject("ParameterType1");
    }

    /**
     * Container's getter for HcmSetup1.
     * @return HcmSetup1
     */
    public ViewObjectImpl getHcmSetup1() {
        return (ViewObjectImpl) findViewObject("HcmSetup1");
    }

    /**
     * Container's getter for OrgHcmSetup1.
     * @return OrgHcmSetup1
     */
    public ViewObjectImpl getOrgHcmSetup1() {
        return (ViewObjectImpl) findViewObject("OrgHcmSetup1");
    }

    /**
     * Container's getter for ParamTypeTOHcmSetupVL1.
     * @return ParamTypeTOHcmSetupVL1
     */
    public ViewLinkImpl getParamTypeTOHcmSetupVL1() {
        return (ViewLinkImpl) findViewLink("ParamTypeTOHcmSetupVL1");
    }

    /**
     * Container's getter for HcmSetupTOOrgHcmSetupVL1.
     * @return HcmSetupTOOrgHcmSetupVL1
     */
    public ViewLinkImpl getHcmSetupTOOrgHcmSetupVL1() {
        return (ViewLinkImpl) findViewLink("HcmSetupTOOrgHcmSetupVL1");
    }


    // Search------------------------------------
    public void searchAction() {

        ViewObjectImpl srch = this.getSearch1();
        Row currentRow = srch.getCurrentRow();
        ViewObjectImpl param = this.getParameterType1();
        ViewObjectImpl setup = this.getHcmSetup1();
        if (currentRow.getAttribute("TransParameterTypeId") != null ||
            currentRow.getAttribute("TransParameterId") != null) {
            param.setNamedWhereClauseParam("BindParamTypeId", currentRow.getAttribute("TransParameterTypeId"));
            System.out.println("TransParameterId" + currentRow.getAttribute("TransParameterId"));
            setup.setNamedWhereClauseParam("pramIdBIND", currentRow.getAttribute("TransParameterId"));

        } else {
            param.setNamedWhereClauseParam("BindParamTypeId", null);
            param.setNamedWhereClauseParam("pramIdBIND", null);
        }

        param.executeQuery();
    }

    // Reset search panel----------------------------------------

    public void resetSearchpanel() {
        ViewObjectImpl srch = this.getSearch1();
        Row currentRow = srch.getCurrentRow();
        currentRow.setAttribute("TransParameterTypeId", null);
        currentRow.setAttribute("TransParameterId", null);
        this.getParameterType1().setNamedWhereClauseParam("BindParamTypeId", null);
        this.getHcmSetup1().setNamedWhereClauseParam("pramIdBIND", null);
        this.getParameterType1().executeQuery();
        this.getHcmSetup1().executeQuery();
        srch.executeQuery();
    }

    /**Parameter Name Validator-----------------------------*/
    public String paramNameValidator(String pName) {
        ViewObjectImpl hcmSetup1 = this.getHcmSetup1();
        Object ptype = hcmSetup1.getCurrentRow().getAttribute("ParamType");
        Object ho = hcmSetup1.getCurrentRow().getAttribute("HoOrgId");
        Object cld = hcmSetup1.getCurrentRow().getAttribute("CldId");
        Object sloc = hcmSetup1.getCurrentRow().getAttribute("SlocId");

        RowQualifier rq = new RowQualifier(hcmSetup1);
        rq.setWhereClause("ParamType=" + ptype + " AND HoOrgId='" + ho + "' AND upper(ParamDesc)=upper('" + pName +
                          "') AND CldId='" + cld + "' AND SlocId=" + sloc);
        Row[] filteredRows = hcmSetup1.getFilteredRows(rq);
        if (filteredRows.length > 0) {
            if (filteredRows.length == 1 && filteredRows[0] != hcmSetup1.getCurrentRow())
                return "Y";
            else if (filteredRows.length > 1)
                return "Y";

        }

        return "N";
    }

    /********************    STORED Function    *************************************/

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars) {
        CallableStatement st = null;
        try {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null) {
                for (int z = 0; z < bindVars.length; z++) {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();
            return st.getObject(1);
        } catch (SQLException e) {
            e.printStackTrace();
            throw new JboException(e);
        } finally {
            if (st != null) {
                try {
                    st.close();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    /*
     * Worked and Commented By Vishal Kr 20-08-2015 Below One
     * Null Pointer Was Coming as per Release Testing.
     * Pass Parameter Through UTIL Class of Java
     * */

    public void genParamId() {
        try {
            this.getHcmSetup1().getCurrentRow().setAttribute("ParamId",
                                                             this.callStoredFunction(Types.VARCHAR,
                                                                                     "HCM.FN_HCM_GET_PRF_ID(?,?,?,?,?,?,?,?)", new Object[] {
                                                                                     EbizParams.GLBL_APP_SERV_LOC(),
                                                                                     EbizParams.GLBL_APP_CLD_ID(),
                                                                                     EbizParams.GLBL_HO_ORG_ID(),
                                                                                     EbizParams.GLBL_APP_USR_ORG(),
                                                                                     28502, 0, "HCM$SETUP", 0
            }).toString());
        } catch (Exception e) {
            System.out.println("ERROR IN CALLING FUNCTION FN_MNF_GET_PRF_ID at Impl :" + e.getMessage());
        }
    }

    /* public void genParamId() {

        Row currentRow = this.getHcmSetup1().getCurrentRow();
        String cld = currentRow.getAttribute("CldId").toString();
        Integer sloc = Integer.parseInt(currentRow.getAttribute("SlocId").toString());
        String hoOrg = currentRow.getAttribute("HoOrgId").toString();
        Integer paramType = Integer.parseInt(currentRow.getAttribute("ParamType").toString());

        String rslt =
            (String) ADFModelUtils.callFunction((HcmParameterAppAMImpl) this.getApplicationModule(),
                                                new StringBuilder("HCM.FN_HCM_GET_PRF_ID(?,?,?,?,?,?,?,?)"), new Object[] {
                                                EbizParams.GLBL_APP_SERV_LOC(), EbizParams.GLBL_APP_CLD_ID(),
                                                EbizParams.GLBL_HO_ORG_ID(), EbizParams.GLBL_APP_USR_ORG(), 28502, 0,
                                                "HCM$SETUP", 0
        }, Types.VARCHAR);
        if (rslt != null && rslt.length() > 0) {
            currentRow.setAttribute("ParamId", rslt);
        }
        //this.getHcmSetup1().executeQuery();
    }  */

    public void execHcmSetup() {
        this.getHcmSetup1().executeQuery();
        this.getOrgHcmSetup1().executeQuery();
        //this.getParameterType1().executeQuery();
    }


    // Org Link To Param----------------------------------

    public void linkOrgToParam() {
        ViewObjectImpl orghcm = this.getOrgHcmSetup1();
        ViewObjectImpl dual = this.getSearch1();
        Row currentRow = dual.getCurrentRow();
        if (currentRow.getAttribute("TransOrgIdToAdd") != null) {
            String Org = currentRow.getAttribute("TransOrgIdToAdd").toString();
            Row createRow = this.getOrgHcmSetup1().createRow();
            createRow.setAttribute("OrgId", Org);
            createRow.setAttribute("ParamStartDt", currentRow.getAttribute("TransStartDt"));
            createRow.setAttribute("ParamEndDt", currentRow.getAttribute("TransEndDt"));
            orghcm.insertRow(createRow);
        }
        orghcm.executeQuery();
    }

    public Object resolvEl(String data) {
        ADFContext fc = ADFContext.getCurrent();
        //Application app = fc.getApplication();
        ExpressionFactory elFactory = fc.getExpressionFactory();

        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        Object Message = valueExp.getValue(elContext);
        return Message;
    }
    // Org Validator-------------------------
    public String orgLinkValidator(String org) {
        ViewObjectImpl orghcm = this.getOrgHcmSetup1();
        Row currentRow = orghcm.getCurrentRow();
        Object cld = EbizParams.GLBL_APP_CLD_ID();
        Object sloc = EbizParams.GLBL_APP_SERV_LOC();
        Object hoOrg = EbizParams.GLBL_HO_ORG_ID();
        Object paramId = this.getHcmSetup1().getCurrentRow().getAttribute("ParamId");
        Object newOrg = org;

        RowQualifier rq = new RowQualifier(orghcm);
        rq.setWhereClause("CldId='" + cld + "' AND ParamId='" + paramId + "' AND HoOrgId='" + hoOrg + "' AND OrgId='" +
                          newOrg + "' AND SlocId=" + sloc);
        Row[] filteredRows = orghcm.getFilteredRows(rq);
        // if (!currentRow) {
        if (filteredRows.length == 0 && filteredRows.length < 1) {
            return "N";
        } else if (filteredRows.length > 0 && filteredRows[0] != currentRow) {
            return "Y";
        }
        return "N";
    }

    public String orgSdateValid(Timestamp sd) {

        ViewObjectImpl hcmSetup1 = this.getHcmSetup1();
        //Timestamp pStrtDate = (Timestamp) hcmSetup1.getCurrentRow().getAttribute("ParamStartDt");
        if (hcmSetup1.getCurrentRow().getAttribute("ParamEndDt") != null &&
            hcmSetup1.getCurrentRow().getAttribute("ParamEndDt").toString().length() > 0) {
            Timestamp pEndDate = (Timestamp) hcmSetup1.getCurrentRow().getAttribute("ParamEndDt");
            try {
                if (sd.dateValue().after(pEndDate.dateValue())) {
                    return "Y";
                }
            } catch (SQLException e) {
            }
        }
        return "N";
    }


    public String orgEndDtValid(Timestamp ed) {
        ViewObjectImpl hcmSetup1 = this.getHcmSetup1();
        if (hcmSetup1.getCurrentRow().getAttribute("ParamEndDt") != null &&
            hcmSetup1.getCurrentRow().getAttribute("ParamEndDt").toString().length() > 0) {
            Timestamp pEndDate = (Timestamp) hcmSetup1.getCurrentRow().getAttribute("ParamEndDt");
            try {
                if (ed.dateValue().after(pEndDate.dateValue())) {
                    return "Y";
                }
            } catch (SQLException e) {
            }
        }
        return "N";
    }

    public String chkDeleteParam() {
        Row currentRow = getHcmSetup1().getCurrentRow();
        String id = currentRow.getAttribute("ParamId").toString();
        Row[] filteredRows = getOrgHcmSetup1().getFilteredRows("ParamId", id);
        if (filteredRows.length > 0) {
            return "N";
        }
        return "Y";
    }


    public void bindVarSetOnPageLoad(String hoOrg, String cld, Integer sloc) {
        this.getHcmSetup1().setNamedWhereClauseParam("cldIdBindVar", cld);
        this.getHcmSetup1().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrg);
        this.getHcmSetup1().setNamedWhereClauseParam("slocIdBindVar", sloc);
        this.getHcmSetup1().executeQuery();

        getLovOrgnisation1().setNamedWhereClauseParam("BindCldId", cld);
        getLovOrgnisation1().setNamedWhereClauseParam("BindHoOrgid", hoOrg);
        getLovOrgnisation1().setNamedWhereClauseParam("BindSlocId", sloc);
        getLovOrgnisation1().executeQuery();
    }

    public void replicateToAll() {
        ViewObjectImpl lovOrg = this.getLovOrgnisation1();
        RowSetIterator lovOrgItr = lovOrg.createRowSetIterator(null);
        Object cld = EbizParams.GLBL_APP_CLD_ID();
        Object sloc = EbizParams.GLBL_APP_SERV_LOC();
        Object hoOrg = EbizParams.GLBL_HO_ORG_ID();
        Object paramId = this.getHcmSetup1().getCurrentRow().getAttribute("ParamId");
        ViewObjectImpl orgHcm = this.getOrgHcmSetup1();
        while (lovOrgItr.hasNext()) {
            Row nextOrg = lovOrgItr.next();
            String newOrg = nextOrg.getAttribute("OrgId").toString();

            RowQualifier rq = new RowQualifier(orgHcm);
            rq.setWhereClause("CldId='" + cld + "' AND ParamId='" + paramId + "' AND HoOrgId='" + hoOrg +
                              "' AND OrgId='" + newOrg + "' AND SlocId=" + sloc);
            Row[] filteredRows = orgHcm.getFilteredRows(rq);
            if (filteredRows.length == 0) {

                Row createRow = orgHcm.createRow();
                createRow.setAttribute("OrgId", newOrg);
                createRow.setAttribute("ParamStartDt",
                                       this.getHcmSetup1().getCurrentRow().getAttribute("ParamStartDt"));
            }
        }
        orgHcm.executeQuery();

    }

    /**
     * Container's getter for LovOrgnisation1.
     * @return LovOrgnisation1
     */
    public ViewObjectImpl getLovOrgnisation1() {
        return (ViewObjectImpl) findViewObject("LovOrgnisation1");
    }

    /**
     * Container's getter for ExportParamVO1.
     * @return ExportParamVO1
     */
    public ViewObjectImpl getExportParamVO1() {
        return (ViewObjectImpl) findViewObject("ExportParamVO1");
    }

    public RowSetIterator getExportRowSetItr() {
        Object sloc = EbizParams.GLBL_APP_SERV_LOC();
        Object cld = EbizParams.GLBL_APP_CLD_ID();
        Object hoOrg = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl exportParamVO1 = this.getExportParamVO1();
        exportParamVO1.setNamedWhereClauseParam("CldIdBind", cld);
        exportParamVO1.setNamedWhereClauseParam("HoOrgIdBind", hoOrg);
        exportParamVO1.setNamedWhereClauseParam("SlocIdBind", sloc);
        exportParamVO1.executeQuery();
        RowSetIterator createRowSetIterator = exportParamVO1.createRowSetIterator(null);
        return createRowSetIterator;
    }


    public void setCurrDate() {
        this.getHcmSetup1().getCurrentRow().setAttribute("ParamStartDt", new Timestamp(System.currentTimeMillis()));
    }

    public boolean chkDocumentInOrg() {
        Object sloc = EbizParams.GLBL_APP_SERV_LOC();
        Object cld = EbizParams.GLBL_APP_CLD_ID();
        Object Org = EbizParams.GLBL_APP_USR_ORG();

        ViewObjectImpl docVO1 = this.getOrgDocVo1();
        docVO1.setNamedWhereClauseParam("Org_id_bind", Org);
        docVO1.setNamedWhereClauseParam("cld_id_bind", cld);
        docVO1.setNamedWhereClauseParam("doc_id_Bind", 28502);
        docVO1.setNamedWhereClauseParam("sloc_id_bind", sloc);
        docVO1.executeQuery();
        if (docVO1.getRowCount() > 0) {
            ViewObjectImpl docTypeVO1 = this.getOrgDocTypVO1();
            docTypeVO1.setNamedWhereClauseParam("Org_id_bind", Org);
            docTypeVO1.setNamedWhereClauseParam("TYPE_ID_BIND", 0);
            docTypeVO1.setNamedWhereClauseParam("cld_id_bind", cld);
            docTypeVO1.setNamedWhereClauseParam("doc_id_Bind", 28502);
            docTypeVO1.setNamedWhereClauseParam("sloc_id_bind", sloc);
            docTypeVO1.executeQuery();
            if (docTypeVO1.getRowCount() > 0) {
                return true;
            }
        }

        return false;
    }

    /**
     * Container's getter for OrgDocTypVO1.
     * @return OrgDocTypVO1
     */
    public ViewObjectImpl getOrgDocTypVO1() {
        return (ViewObjectImpl) findViewObject("OrgDocTypVO1");
    }

    /**
     * Container's getter for OrgDocVo1.
     * @return OrgDocVo1
     */
    public ViewObjectImpl getOrgDocVo1() {
        return (ViewObjectImpl) findViewObject("OrgDocVo1");
    }

    /**
     * Container's getter for LovParameterVO1.
     * @return LovParameterVO1
     */
    public ViewObjectImpl getLovParameterVO1() {
        return (ViewObjectImpl) findViewObject("LovParameterVO1");
    }
}

