package hcmprofilesetupapp.model.entities;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.domain.Number;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
import oracle.jbo.server.TransactionEvent;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 28 14:41:05 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrgHcmEmpNoticeDtlEOImpl extends EntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        SlocId,
        OrgId,
        EmpType,
        EmpNotice,
        EmpProb;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int EMPTYPE = AttributesEnum.EmpType.index();
    public static final int EMPNOTICE = AttributesEnum.EmpNotice.index();
    public static final int EMPPROB = AttributesEnum.EmpProb.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrgHcmEmpNoticeDtlEOImpl() {
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("hcmprofilesetupapp.model.entities.OrgHcmEmpNoticeDtlEO");
    }


    /**
     * Gets the attribute value for CldId, using the alias name CldId.
     * @return the value of CldId
     */
    public String getCldId() {
        return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CldId.
     * @param value value to set the CldId
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for SlocId, using the alias name SlocId.
     * @return the value of SlocId
     */
    public Integer getSlocId() {
        return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SlocId.
     * @param value value to set the SlocId
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for OrgId, using the alias name OrgId.
     * @return the value of OrgId
     */
    public String getOrgId() {
        return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrgId.
     * @param value value to set the OrgId
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for EmpType, using the alias name EmpType.
     * @return the value of EmpType
     */
    public Integer getEmpType() {
        return (Integer) getAttributeInternal(EMPTYPE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpType.
     * @param value value to set the EmpType
     */
    public void setEmpType(Integer value) {
        setAttributeInternal(EMPTYPE, value);
    }

    /**
     * Gets the attribute value for EmpNotice, using the alias name EmpNotice.
     * @return the value of EmpNotice
     */
    public Integer getEmpNotice() {
        return (Integer) getAttributeInternal(EMPNOTICE);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpNotice.
     * @param value value to set the EmpNotice
     */
    public void setEmpNotice(Integer value) {
        setAttributeInternal(EMPNOTICE, value);
    }

    /**
     * Gets the attribute value for EmpProb, using the alias name EmpProb.
     * @return the value of EmpProb
     */
    public Integer getEmpProb() {
        return (Integer) getAttributeInternal(EMPPROB);
    }

    /**
     * Sets <code>value</code> as the attribute value for EmpProb.
     * @param value value to set the EmpProb
     */
    public void setEmpProb(Integer value) {
        setAttributeInternal(EMPPROB, value);
    }


    /**
     * @param cldId key constituent
     * @param slocId key constituent
     * @param orgId key constituent
     * @param empType key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(String cldId, Integer slocId, String orgId, Integer empType) {
        return new Key(new Object[] { cldId, slocId, orgId, empType });
    }

    /**
     * Add attribute defaulting logic in this method.
     * @param attributeList list of attribute names/values to initialize the row
     */
    protected void create(AttributeList attributeList) {       
        super.create(attributeList);
    }

    /**
     * Add entity remove logic in this method.
     */
    public void remove() {
        super.remove();
    }

    /**
     * Add locking logic here.
     */
    public void lock() {
        //super.lock();
    }

    /**
     * Custom DML update/insert/delete logic here.
     * @param operation the operation type
     * @param e the transaction event
     */
    protected void doDML(int operation, TransactionEvent e) {
        super.doDML(operation, e);
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
}

