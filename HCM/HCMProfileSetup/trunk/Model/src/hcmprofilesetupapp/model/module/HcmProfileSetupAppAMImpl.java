package hcmprofilesetupapp.model.module;


import hcmprofilesetupapp.model.module.common.HcmProfileSetupAppAM;


import hcmprofilesetupapp.model.views.OrgHcmEmpNoticeDtlVOImpl;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.SQLException;
import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;
import javax.faces.application.FacesMessage;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 13 11:16:49 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmProfileSetupAppAMImpl extends ApplicationModuleImpl implements HcmProfileSetupAppAM
{
    /**
     * This is the default constructor (do not remove).
     */
    public HcmProfileSetupAppAMImpl()
    {
    }

    /**
     * Container's getter for OrgHcmPrf1.
     * @return OrgHcmPrf1
     */
    public ViewObjectImpl getOrgHcmPrf1()
    {
        return (ViewObjectImpl) findViewObject("OrgHcmPrf1");
    }

    public Object resolvElDCMsg(String data)
    {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        return valueExp.getValue(elContext);
    }

    protected Object callStoredFunction(int sqlReturnType, String stmt, Object[] bindVars)
    {
        CallableStatement st = null;
        try
        {
            st = this.getDBTransaction().createCallableStatement("begin ? := " + stmt + ";end;", 0);
            st.registerOutParameter(1, sqlReturnType);
            if (bindVars != null)
            {
                for (int z = 0; z < bindVars.length; z++)
                {
                    st.setObject(z + 2, bindVars[z]);
                }
            }
            st.executeUpdate();

            return st.getObject(1);
        }
        catch (SQLException e) {
            throw new JboException(e);
        }
        finally
        {
            if (st != null)
            {
                try
                {
                    st.close();
                }
                catch (SQLException e) {
                    throw new JboException(e);
                }
            }
        }
    }


    public Integer checkPrf(Integer sloc, Integer User, String Org, String Cld)
    {

        System.out.println("IN Amipml---" + "cld--" + Cld + " Sloc--" + sloc + "  org--" + Org + " User----" + User);

        Integer rslt =
            Integer.parseInt(callStoredFunction(Types.NUMERIC, "APP.FN_INS_ORG_HCM_PRF(?,?,?,?)", new Object[]
        {
            Cld, sloc, Org, User
        }).toString());
        System.out.println("result is->  " + rslt);

        // Ho Org For this Org-----------------------------
        String HoOrgNm = null;
        ViewObjectImpl hoOrg = this.getShowHoOrg1();
        hoOrg.setNamedWhereClauseParam("BindOrgId", Org);
        hoOrg.setNamedWhereClauseParam("BindSlocId", sloc);
        hoOrg.setNamedWhereClauseParam("BindCldId", Cld);
        hoOrg.executeQuery();
        Row[] rows = hoOrg.getAllRowsInRange();
        System.out.println("all rows for org--" + rows.length);
        if (rows.length > 0)
        {
            System.out.println("Inside Org Row----");
            if (rows[0].getAttribute("OrgIdParentL0") != null)
            {
                System.out.println("Inside Orgparent not null----");
                String parentOrgId = rows[0].getAttribute("OrgIdParentL0").toString();
                System.out.println("Parent Org--" + parentOrgId);
                hoOrg.setNamedWhereClauseParam("BindOrgId", parentOrgId);
                hoOrg.setNamedWhereClauseParam("BindSlocId", sloc);
                hoOrg.setNamedWhereClauseParam("BindCldId", Cld);
                hoOrg.executeQuery();
                System.out.println("after filter by Parent org ID");
                Row[] allrows = hoOrg.getAllRowsInRange();
                System.out.println("all rows for Hoorg--" + allrows.length);
                if (allrows.length > 0)
                {
                    HoOrgNm = allrows[0].getAttribute("OrgDesc").toString();
                    System.out.println("hoOrg Name Is-----" + HoOrgNm);
                }
            }
        }


        if (rslt != null)
        {
            if (rslt == -1)
            {
                // FacesMessage message = new FacesMessage("Please create profile for head office [" + HoOrgNm + "]!");

                FacesMessage message =
                    new FacesMessage(resolvElDCMsg("#{bundle['MSG.1523']}").toString() + HoOrgNm + "]!");
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }

            else if (rslt == -2)
            {
                // FacesMessage message =
                //new FacesMessage("Profile for head office [" + HoOrgNm + "] has not been freezed!");
                FacesMessage message =
                    new FacesMessage(resolvElDCMsg("#{bundle['MSG.1524']}").toString() + HoOrgNm +
                                     resolvElDCMsg("#{bundle['MSG.1525']}").toString());
                message.setSeverity(FacesMessage.SEVERITY_ERROR);
                FacesContext fc = FacesContext.getCurrentInstance();
                fc.addMessage(null, message);
            }
            else
                getOrgHcmPrf1().executeQuery();
        }
        if (this.getOrgHcmPrf1().getCurrentRow() != null)
        {
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("BonsAppChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("LwfAppChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("GrtAppChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("HourSalProcChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("ExtRuleRateType", "");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("ExitInterviewChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("FnfPendTaskChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("ExtTimeRule", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("LtaAppChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("GradePayChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("BuyOutChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("NoticePeriodChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("InjuryChk", "N");
            this.getOrgHcmPrf1().getCurrentRow().setAttribute("LoanInterestRcvrChk", "N");
            this.getOrgHcmPrf1().executeQuery();
        }
        return rslt;
    }

    public void refreshVo()
    {
        this.getOrgHcmPrf1().executeQuery();
    }

    public void setBindVar()
    {
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        System.out.println("sloc----" + sloc);
        String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        System.out.println("org----" + org);
        String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        System.out.println("cld----" + cld);

        System.out.println("cld----" + cld + "org--" + org + "sloc--" + sloc);
        ViewObjectImpl prfvo = this.getOrgHcmPrf1();
        prfvo.setNamedWhereClauseParam("bindOrgId", org);
        prfvo.setNamedWhereClauseParam("bindCldId", cld);
        prfvo.setNamedWhereClauseParam("bindSlocId", sloc);

        prfvo.executeQuery();
    }

    public String resolvEl(String data)
    {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }

    /**
     * Container's getter for ShowHoOrg1.
     * @return ShowHoOrg1
     */
    public ViewObjectImpl getShowHoOrg1()
    {
        return (ViewObjectImpl) findViewObject("ShowHoOrg1");
    }


    public void generateEoMstIdIfPrfFreezed()
    {
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer usr = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String hoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        if (this.getOrgHcmPrf1().getCurrentRow() != null)
            if (this.getOrgHcmPrf1().getCurrentRow().getAttribute("FreezePrf") != null)
                if (this.getOrgHcmPrf1().getCurrentRow().getAttribute("FreezePrf").toString().equals("Y"))
                {
                    //Call Method for Eo Mst
                    if (org.equals(hoOrg))
                    {
                        System.out.println("inside genrate mst is org==ho");
                        String eomstNm = (String) this.getOrgHcmPrf1().getCurrentRow().getAttribute("EoMstNm");
                        String rslt =
                            (callStoredFunction(Types.VARCHAR, "APP.fn_get_hcm_eo_mst_ID(?,?,?,?,?,?,?,?)", new Object[]
                        {
                            cld, hoOrg, sloc, org, eomstNm, eomstNm, null, usr
                        }).toString());
                        System.out.println("result is for mstId->  " + rslt);
                        if (rslt != null && !(rslt.equals("-2")))
                        {
                            this.getOrgHcmPrf1().getCurrentRow().setAttribute("EoMstId", Integer.parseInt(rslt));
                        }
                    }
                }
    }

    public String chkUniqNessOfGrpNm()
    {
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer usr = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String hoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String result = "Y";
        if (org.equals(hoOrg))
        {
            if (this.getOrgHcmPrf1().getCurrentRow() != null)
            {
                String eomstNm = (String) this.getOrgHcmPrf1().getCurrentRow().getAttribute("EoMstNm");
                result = (callStoredFunction(Types.VARCHAR, "APP.fn_is_eo_grp_unique(?,?,?,?,?)", new Object[]
                {
                    cld, sloc, hoOrg, eomstNm, null
                }).toString());
                System.out.println("uniqueness check result--->" + result);
            }
        }
        return result;
    }

    public String chkuniqueWithIdOfGrp()
    {
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        Integer usr = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_USR}").toString());
        String hoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        String result = "Y";
        if (org.equals(hoOrg))
        {
            if (this.getOrgHcmPrf1().getCurrentRow() != null)
            {
                String eomstNm = (String) this.getOrgHcmPrf1().getCurrentRow().getAttribute("EoMstNm");
                result = (callStoredFunction(Types.VARCHAR, "APP.fn_is_eo_grp_unique(?,?,?,?,?)", new Object[]
                {
                    cld, sloc, hoOrg, eomstNm, this.getOrgHcmPrf1().getCurrentRow().getAttribute("EoMstId")
                }).toString());
                System.out.println("uniqueness check result at edit--->" + result);

            }
        }
        return result;
    }

    /**To Validate GL Code Linking*/
    public String chkGlCode()
    {
        Integer sloc = Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}").toString());
        String org = resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}");
        String cld = resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}");
        String hoOrg = resolvEl("#{pageFlowScope.GLBL_HO_ORG_ID}");
        Object rslt = callStoredFunction(Types.VARCHAR, "HCM.FN_HCM_GET_COA_CHK(?,?,?,?)", new Object[]
        {
            cld, sloc, hoOrg, org
        });

        System.out.println("result at gl coa check----" + rslt);
        if (rslt != null)
        {
            if (rslt.toString().equalsIgnoreCase("1"))
            {
                System.out.println("result found 1");
                return "Y";
            }
            else if (rslt.toString().equalsIgnoreCase("0"))
            {
                System.out.println("result not found 0");
                return "N";
            }
        }
        return "N";


    }


    /**
     * Container's getter for OrgHcmEmpNoticeDtl2.
     * @return OrgHcmEmpNoticeDtl2
     */
    public OrgHcmEmpNoticeDtlVOImpl getOrgHcmEmpNoticeDtl1()
    {
        return (OrgHcmEmpNoticeDtlVOImpl) findViewObject("OrgHcmEmpNoticeDtl1");
    }

    /**
     * Container's getter for OrgHcmPrfToOrgHcmEmpNoticeVL1.
     * @return OrgHcmPrfToOrgHcmEmpNoticeVL1
     */
    public ViewLinkImpl getOrgHcmPrfToOrgHcmEmpNoticeVL1()
    {
        return (ViewLinkImpl) findViewLink("OrgHcmPrfToOrgHcmEmpNoticeVL1");
    }
}


