package hcmprofilesetupapp.model.views;

import hcmprofilesetupapp.model.entities.OrgHcmEmpNoticeDtlEOImpl;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.RowSet;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 28 17:53:09 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrgHcmEmpNoticeDtlVORowImpl extends ViewRowImpl
{


    public static final int ENTITY_ORGHCMEMPNOTICEDTLEO = 0;

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CldId,
        EmpNotice,
        EmpProb,
        EmpType,
        OrgId,
        SlocId,
        transEmpNoticePerd,
        transEmpProbPrd,
        lovEmpTypeVO1;
        static AttributesEnum[] vals = null;
        ;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int CLDID = AttributesEnum.CldId.index();
    public static final int EMPNOTICE = AttributesEnum.EmpNotice.index();
    public static final int EMPPROB = AttributesEnum.EmpProb.index();
    public static final int EMPTYPE = AttributesEnum.EmpType.index();
    public static final int ORGID = AttributesEnum.OrgId.index();
    public static final int SLOCID = AttributesEnum.SlocId.index();
    public static final int TRANSEMPNOTICEPERD = AttributesEnum.transEmpNoticePerd.index();
    public static final int TRANSEMPPROBPRD = AttributesEnum.transEmpProbPrd.index();
    public static final int LOVEMPTYPEVO1 = AttributesEnum.lovEmpTypeVO1.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrgHcmEmpNoticeDtlVORowImpl() {
    }

    /**
     * Gets OrgHcmEmpNoticeDtlEO entity object.
     * @return the OrgHcmEmpNoticeDtlEO
     */
    public OrgHcmEmpNoticeDtlEOImpl getOrgHcmEmpNoticeDtlEO() {
        return (OrgHcmEmpNoticeDtlEOImpl) getEntity(ENTITY_ORGHCMEMPNOTICEDTLEO);
    }

    /**
     * Gets the attribute value for CLD_ID using the alias name CldId.
     * @return the CLD_ID
     */
    public String getCldId() {
                return (resolvEl("#{pageFlowScope.GLBL_APP_CLD_ID}").toString());
       // return (String) getAttributeInternal(CLDID);
    }

    /**
     * Sets <code>value</code> as attribute value for CLD_ID using the alias name CldId.
     * @param value value to set the CLD_ID
     */
    public void setCldId(String value) {
        setAttributeInternal(CLDID, value);
    }

    /**
     * Gets the attribute value for EMP_NOTICE using the alias name EmpNotice.
     * @return the EMP_NOTICE
     */
    public Integer getEmpNotice() {
        return (Integer) getAttributeInternal(EMPNOTICE);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_NOTICE using the alias name EmpNotice.
     * @param value value to set the EMP_NOTICE
     */
    public void setEmpNotice(Integer value) {
        setAttributeInternal(EMPNOTICE, value);
    }

    /**
     * Gets the attribute value for EMP_PROB using the alias name EmpProb.
     * @return the EMP_PROB
     */
    public Integer getEmpProb() {
        return (Integer) getAttributeInternal(EMPPROB);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_PROB using the alias name EmpProb.
     * @param value value to set the EMP_PROB
     */
    public void setEmpProb(Integer value) {
        setAttributeInternal(EMPPROB, value);
    }

    /**
     * Gets the attribute value for EMP_TYPE using the alias name EmpType.
     * @return the EMP_TYPE
     */
    public Integer getEmpType() {
        return (Integer) getAttributeInternal(EMPTYPE);
    }

    /**
     * Sets <code>value</code> as attribute value for EMP_TYPE using the alias name EmpType.
     * @param value value to set the EMP_TYPE
     */
    public void setEmpType(Integer value) {
        setAttributeInternal(EMPTYPE, value);
    }

    /**
     * Gets the attribute value for ORG_ID using the alias name OrgId.
     * @return the ORG_ID
     */
    public String getOrgId() {
        return (resolvEl("#{pageFlowScope.GLBL_APP_USR_ORG}").toString());
        //return (String) getAttributeInternal(ORGID);
    }

    /**
     * Sets <code>value</code> as attribute value for ORG_ID using the alias name OrgId.
     * @param value value to set the ORG_ID
     */
    public void setOrgId(String value) {
        setAttributeInternal(ORGID, value);
    }

    /**
     * Gets the attribute value for SLOC_ID using the alias name SlocId.
     * @return the SLOC_ID
     */
    public Integer getSlocId() {
                return (Integer.parseInt(resolvEl("#{pageFlowScope.GLBL_APP_SERV_LOC}}").toString()));
        //return (Integer) getAttributeInternal(SLOCID);
    }

    /**
     * Sets <code>value</code> as attribute value for SLOC_ID using the alias name SlocId.
     * @param value value to set the SLOC_ID
     */
    public void setSlocId(Integer value) {
        setAttributeInternal(SLOCID, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transEmpNoticePerd.
     * @return the transEmpNoticePerd
     */
    public String gettransEmpNoticePerd()
    {
        if(getEmpNotice()!=null )
        {
            return  getEmpNotice()+"Days";
        }
        return (String) getAttributeInternal(TRANSEMPNOTICEPERD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transEmpNoticePerd.
     * @param value value to set the  transEmpNoticePerd
     */
    public void settransEmpNoticePerd(String value)
    {
        setAttributeInternal(TRANSEMPNOTICEPERD, value);
    }

    /**
     * Gets the attribute value for the calculated attribute transEmpProbPrd.
     * @return the transEmpProbPrd
     */
    public String gettransEmpProbPrd()
    {
        if(getEmpProb()!=null )
        {
            return  getEmpProb()+"Days";
        }
        return (String) getAttributeInternal(TRANSEMPPROBPRD);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute transEmpProbPrd.
     * @param value value to set the  transEmpProbPrd
     */
    public void settransEmpProbPrd(String value)
    {
        setAttributeInternal(TRANSEMPPROBPRD, value);
    }

    /**
     * Gets the view accessor <code>RowSet</code> lovEmpTypeVO1.
     */
    public RowSet getlovEmpTypeVO1() {
        return (RowSet) getAttributeInternal(LOVEMPTYPEVO1);
    }
    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String Message = valueExp.getValue(elContext).toString();
        return Message;
    }
}

