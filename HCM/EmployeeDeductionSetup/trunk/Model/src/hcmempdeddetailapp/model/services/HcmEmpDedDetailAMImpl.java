package hcmempdeddetailapp.model.services;

import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import hcmempdeddetailapp.model.services.common.HcmEmpDedDetailAM;

import java.sql.SQLException;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.context.FacesContext;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Timestamp;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;

import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 15 16:00:16 IST 2014
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmEmpDedDetailAMImpl extends ApplicationModuleImpl implements HcmEmpDedDetailAM
{
    /**
     * This is the default constructor (do not remove).
     */


    public HcmEmpDedDetailAMImpl()
    {

    }

    public void setBindVarOnPageLoad()
    {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String empDocId = resolvEl("#{pageFlowScope.EMP_DOC_ID}");
        RequestContext.getCurrentInstance().getPageFlowScope().put("ADD_EDIT_MODE", "V");

        this.getSearchEmpName2().setNamedWhereClauseParam("bindCldId", cldId);
        this.getSearchEmpName2().setNamedWhereClauseParam("bindSlocId", slocId);
        this.getSearchEmpName2().setNamedWhereClauseParam("bindHoOrgId", hoOrgId);
        this.getSearchEmpName2().setNamedWhereClauseParam("orgIdbind", orgId);
        this.getSearchEmpName2().setNamedWhereClauseParam("empDocIdBindVar", empDocId);
        this.getSearchEmpName2().executeQuery();


    }

    public void setBindVarOnLoanPageLoad()
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        String empDocId = resolvEl("#{pageFlowScope.EMP_DOC_ID}");
        RequestContext.getCurrentInstance().getPageFlowScope().put("ADD_EDIT_MODE", "V");

        this.getHcmEmpLoan1().setNamedWhereClauseParam("BIND_CLD_ID", cldId);
        this.getHcmEmpLoan1().setNamedWhereClauseParam("BIND_SLOC_ID", slocId);
        this.getHcmEmpLoan1().setNamedWhereClauseParam("BIND_HO_ORG_ID", hoOrgId);
        this.getHcmEmpLoan1().setNamedWhereClauseParam("BIND_ORG_ID", orgId);
        this.getHcmEmpLoan1().setNamedWhereClauseParam("BIND_EMP_DOC_ID", empDocId);
        this.getHcmEmpLoan1().executeQuery();

        this.getLoanPrfAllDetails1().setNamedWhereClauseParam("BIND_CLD_ID", cldId);
        this.getLoanPrfAllDetails1().setNamedWhereClauseParam("BIND_SLOC_ID", slocId);
        this.getLoanPrfAllDetails1().setNamedWhereClauseParam("BIND_HO_ORG_ID", hoOrgId);
        this.getLoanPrfAllDetails1().setNamedWhereClauseParam("BIND_ORG_ID", orgId);
        this.getLoanPrfAllDetails1().executeQuery();

    }

    public void searchEmpNamAm(String grpId, String emplNam)
    {
        ViewObjectImpl vo = getSearchEmpName2();
        ViewObjectImpl dummy1 = this.getDummy1();
        Row currentRow = dummy1.getCurrentRow();
        if (currentRow.getAttribute("transEmpGrpId") != null)
        {
            vo.setNamedWhereClauseParam("bindGrpId", currentRow.getAttribute("transEmpGrpId"));
        }
        else
        {
            vo.setNamedWhereClauseParam("bindGrpId", null);
        }
        if (currentRow.getAttribute("transEmpName") != null)
        {
            vo.setNamedWhereClauseParam("bindempName", currentRow.getAttribute("transEmpName"));
        }
        else
        {
            vo.setNamedWhereClauseParam("bindempName", null);
        }
        vo.executeQuery();

    }

    public void resetSearch()
    {
        ViewObjectImpl vo = getSearchEmpName2();
        ViewObjectImpl dummy1 = this.getDummy1();
        vo.setNamedWhereClauseParam("bindGrpId", null);
        vo.setNamedWhereClauseParam("bindempName", null);
        vo.executeQuery();
        dummy1.executeQuery();
    }

    public void taxNameValuechang(String taxname)
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ;
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl vo = getLovHcmDedSlab1();
        vo.setNamedWhereClauseParam("binddedid", taxname);

        vo.setNamedWhereClauseParam("bindcldid", cldId);
        vo.setNamedWhereClauseParam("bindslocid", slocId);
        vo.setNamedWhereClauseParam("bindhoorgid", hoOrgId);
        vo.setNamedWhereClauseParam("bindorgid", orgId);
        vo.executeQuery();
    }

    public String departNamevalidate(String type, Timestamp date)
    {
        ViewObjectImpl vo = getEmpDed1();
        RowQualifier rowQualifier = new RowQualifier(vo);
        Row[] rw = vo.getFilteredRows("DedDocId", type);
        System.out.println(rw.length);
        if (rw.length > 0)
        {
            //System.out.println("duplicate");
            for (Row r : rw)
            {
                if (date != null)
                {
                    Timestamp strt = (Timestamp) r.getAttribute("ValidStrtDt");
                    try
                    {
                        if ((date.dateValue().toString()).equals(strt.dateValue().toString()))
                        {
                            if (!r.equals(vo.getCurrentRow()))
                                return "Y";
                        }
                    }
                    catch (SQLException e) {
                        System.out.println(e.getStackTrace());
                    }
                }
                else
                {
                    return "Q";
                }
            }

        }

        return "N";


    }

    public String isSalaryProcPending()
    {
        String empDocId = this.getEmpDed1().getCurrentRow().getAttribute("EmpDocId").toString();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ;
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        if (this.getSearchEmpName2().getCurrentRow() != null)
        {
            this.getLockEmployee().setNamedWhereClauseParam("cldIdBindVar", cldId);
            this.getLockEmployee().setNamedWhereClauseParam("slocIdBindVar", slocId);
            this.getLockEmployee().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
            this.getLockEmployee().setNamedWhereClauseParam("orgIdBindVar", orgId);
            this.getLockEmployee().setNamedWhereClauseParam("empDocIdBindVar", empDocId);
            this.getLockEmployee().executeQuery();
            if (this.getLockEmployee().getEstimatedRowCount() > 0)
                return "Y";
        }
        return "N";
    }

    public String documentNamevalidate(String type)
    {
        if (this.getEmpDed1().getCurrentRow().getAttribute("DedDocId") != null)
        {
            ViewObjectImpl vo = this.getEmpDed();
            String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
            ;
            String cldId = EbizParams.GLBL_APP_CLD_ID();
            Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
            String orgId = EbizParams.GLBL_APP_USR_ORG();

            //Row[] rw=vo.getFilteredRows("AttTypeNm", type);
            RowQualifier rowQualifier = new RowQualifier(vo);
            // filtering data using method setWhereClause
            rowQualifier.setWhereClause("CldId='" + cldId + "' and SlocId='" + slocId + "' and HoOrgId='" + hoOrgId +
                                        "' and OrgId='" + orgId + "' and DedDocId='" +
                                        this.getEmpDed1().getCurrentRow().getAttribute("DedDocId") +
                                        "' and UPPER(UanNo)=UPPER('" + type.trim() + "')");
            // use method getFilteredRows to return Row[] type after filter.
            Row[] rw = vo.getFilteredRows(rowQualifier);
            System.out.println(rw.length);
            if (rw.length > 0)
            {
                //System.out.println("duplicate");
                for (Row r : rw)
                {
                    if (!r.getAttribute("EmpDocId").toString().equals(this.getEmpDed1().getCurrentRow().getAttribute("EmpDocId").toString()))
                        return "Y";
                }

            }
        }
        return "N";
    }

    public String validateUANNumber(oracle.jbo.domain.Number type)
    {
        if (this.getEmpDed1().getCurrentRow().getAttribute("DedDocId") != null)
        {
            ViewObjectImpl vo = this.getEmpDed();
            String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
            String cldId = EbizParams.GLBL_APP_CLD_ID();
            Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
            String orgId = EbizParams.GLBL_APP_USR_ORG();

            RowQualifier rowQualifier = new RowQualifier(vo);
            String qry =
                "CldId='" + cldId + "' and SlocId='" + slocId + "' and HoOrgId='" + hoOrgId + "' and OrgId='" + orgId +
                "' and DedDocId='" + this.getEmpDed1().getCurrentRow().getAttribute("DedDocId") + "' and UanNo ='" +
                type + "'";
            System.out.println("query= " + qry);
            rowQualifier.setWhereClause(qry);
            System.out.println();
            Row[] rw = vo.getFilteredRows(rowQualifier);
            System.out.println(rw.length);
            if (rw.length > 0)
            {
                //System.out.println("duplicate");
                for (Row r : rw)
                {
                    if (!r.getAttribute("EmpDocId").toString().equals(this.getEmpDed1().getCurrentRow().getAttribute("EmpDocId").toString()))
                        return "Y";
                }

            }
        }
        return "N";
    }


    public void lovhcndedslab()
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        System.out.println(this.getEmpDed1().getCurrentRow().getAttribute("DedDocId"));
        ViewObjectImpl vo = this.getLovHcmDedSlab1();
        vo.setNamedWhereClauseParam("bindcldid", cldId);
        vo.setNamedWhereClauseParam("binddedid", this.getEmpDed1().getCurrentRow().getAttribute("DedDocId"));
        vo.setNamedWhereClauseParam("bindhoorgid", hoOrgId);
        vo.setNamedWhereClauseParam("bindorgid", orgId);
        vo.setNamedWhereClauseParam("bindslocid", slocId);
        vo.executeQuery();

    }

    public void setDocId()
    {

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String docId =
            (String) ADFModelUtils.callFunction(this, new StringBuilder("app.get_txn_id (?,?,?,?,?,?)"), new Object[]
        {
            cldId, slocId, orgId, userId, 28510, 0
        }, Types.VARCHAR);

        ViewObjectImpl grdVo = this.getHcmEmpLoan1();
        String empDocId = resolvEl("#{pageFlowScope.EMP_DOC_ID}");
        grdVo.getCurrentRow().setAttribute("DocId", docId);
        grdVo.getCurrentRow().setAttribute("EmpDocId", empDocId);
    }

    public String chkdocumentdate(Timestamp strtDt)
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rq = new RowQualifier(this.getSearchEmpName2());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and DocId = '" + this.getEmpDed1().getCurrentRow().getAttribute("EmpDocId") +
                          "' and EmpCode = '" + this.getEmpDed1().getCurrentRow().getAttribute("EmpCode") + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getSearchEmpName2().getFilteredRows(rq);
        //Row[] fr =  this.getSearchEmpName2().getFilteredRows("ParamId", this.getOrgHcmSalary().getCurrentRow().getAttribute("SalId"));
        Timestamp salStrtDt = null;
        if (fr.length > 0)
        {
            salStrtDt = (Timestamp) fr[0].getAttribute("EmpDoj");
        }

        if (strtDt != null && strtDt.toString().length() > 0)
        {
            java.sql.Date strt = null;
            java.sql.Date end = null;
            if (salStrtDt != null)
            {
                try
                {
                    strt = salStrtDt.dateValue();
                    end = strtDt.dateValue();
                }
                catch (SQLException e) {
                    System.out.println(e.getStackTrace());
                }
                if (strt.compareTo(end) > 0)
                {
                    if (strt.toString().equals(end.toString()))
                    {
                    }
                    else
                    {
                        return "N";
                    }
                }
            }
        }
        return "Y";
    }

    public String chktaxstartdate(Timestamp strtDt)
    {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        RowQualifier rq = new RowQualifier(this.getSearchEmpName2());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and DocId = '" + this.getEmpDed1().getCurrentRow().getAttribute("EmpDocId") +
                          "' and EmpCode = '" + this.getEmpDed1().getCurrentRow().getAttribute("EmpCode") + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getSearchEmpName2().getFilteredRows(rq);
        //Row[] fr =  this.getSearchEmpName2().getFilteredRows("ParamId", this.getOrgHcmSalary().getCurrentRow().getAttribute("SalId"));
        Timestamp salStrtDt = null;
        if (fr.length > 0)
        {
            salStrtDt = (Timestamp) fr[0].getAttribute("EmpDoj");
        }

        if (strtDt != null && strtDt.toString().length() > 0)
        {
            java.sql.Date strt = null;
            java.sql.Date end = null;
            if (salStrtDt != null)
            {
                try
                {
                    strt = salStrtDt.dateValue();
                    end = strtDt.dateValue();
                }
                catch (SQLException e) {
                    System.out.println(e.getStackTrace());
                }
                if (strt.compareTo(end) > 0)
                {
                    if (strt.toString().equals(end.toString()))
                    {
                    }
                    else
                    {
                        return "N";
                    }
                }
            }
        }
        return "Y";
    }

    public String chkValidStrtdt(Timestamp strtDt)
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();

        RowQualifier rq = new RowQualifier(this.getSearchEmpName2());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and DocId = '" + this.getEmpDed1().getCurrentRow().getAttribute("EmpDocId") +
                          "' and EmpCode = '" + this.getEmpDed1().getCurrentRow().getAttribute("EmpCode") + "'");
        System.out.println("Query=" + rq.getExprStr());
        Row fr[] = this.getSearchEmpName2().getFilteredRows(rq);
        //Row[] fr =  this.getSearchEmpName2().getFilteredRows("ParamId", this.getOrgHcmSalary().getCurrentRow().getAttribute("SalId"));
        Timestamp salStrtDt = null;
        if (fr.length > 0)
        {
            salStrtDt = (Timestamp) fr[0].getAttribute("EmpDoj");
        }

        if (strtDt != null && strtDt.toString().length() > 0)
        {
            java.sql.Date strt = null;
            java.sql.Date end = null;
            if (salStrtDt != null)
            {
                try
                {
                    strt = salStrtDt.dateValue();
                    end = strtDt.dateValue();
                }
                catch (SQLException e) {
                    System.out.println(e.getStackTrace());
                }
                if (strt.compareTo(end) > 0)
                {
                    if (strt.toString().equals(end.toString()))
                    {
                    }
                    else
                    {
                        return "N";
                    }
                }
            }
        }
        return "Y";
    }

    public String chkhcmdedstartdate(Timestamp strtDt)
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        this.getLovHcmDed1().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getLovHcmDed1().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getLovHcmDed1().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getLovHcmDed1().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getLovHcmDed1().setNamedWhereClauseParam("dedPrfBindVar",
                                                      this.getEmpDed1().getCurrentRow().getAttribute("DedPrf"));
        this.getLovHcmDed1().executeQuery();
        RowQualifier rq = new RowQualifier(this.getLovHcmDed1());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and DedId = '" + this.getEmpDed1().getCurrentRow().getAttribute("DedDocId") + "'");
        System.out.println("Query=....new" + rq.getExprStr());
        Row fr[] = this.getLovHcmDed1().getFilteredRows(rq);
        //Row[] fr =  this.getSearchEmpName2().getFilteredRows("ParamId", this.getOrgHcmSalary().getCurrentRow().getAttribute("SalId"));
        Timestamp salStrtDt = null;
        Timestamp salEndDt = null;
        if (fr.length > 0)
        {
            salStrtDt = (Timestamp) fr[0].getAttribute("ValidStrtDt");
            System.out.println(salStrtDt);
            salEndDt = (Timestamp) fr[0].getAttribute("ValidEndDt");
            System.out.println(salEndDt);
        }

        if (strtDt != null && strtDt.toString().length() > 0)
        {
            java.sql.Date strt = null;
            java.sql.Date end = null;
            java.sql.Date dedend = null;
            if (salStrtDt != null)
            {
                try
                {
                    strt = salStrtDt.dateValue();
                    end = strtDt.dateValue();

                }
                catch (SQLException e) {
                    System.out.println(e.getStackTrace());
                }
                if (strt.compareTo(end) >= 0)
                {
                    if (strt.toString().equals(end.toString()))
                    {
                    }
                    else
                    {
                        return "YS";
                    }

                }
            }
            if (salEndDt != null)
            {
                try
                {
                    dedend = salEndDt.dateValue();
                    System.out.println(dedend);
                    end = strtDt.dateValue();
                    System.out.println(end);

                }
                catch (SQLException e) {
                    System.out.println(e.getStackTrace());
                }
                if (end.compareTo(dedend) >= 0)
                {
                    if (dedend.toString().equals(end.toString()))
                    {
                    }
                    else
                    {
                        System.out.println("to check");
                        return "YE";
                    }
                }

            }

        }
        return "N";


    }

    public String ChkTaxId(String dedId)
    {
        String dedtype = "";
        this.getHcmDed().setNamedWhereClauseParam("bindDocId", dedId);
        this.getHcmDed().executeQuery();
        RowQualifier rq = new RowQualifier(this.getHcmDed());
        Row fr[] = this.getHcmDed().getFilteredRows(rq);
        if (fr.length > 0)
        {
            dedtype = fr[0].getAttribute("DedType").toString();
        }
        return dedtype;
    }

    public String chkFrSalryComp()
    {
        ViewObjectImpl vo = this.getSearchEmpName2();
        String DocId = (String) vo.getCurrentRow().getAttribute("DocId");
        ViewObjectImpl voEmpSal = this.getHcmEmpSal();
        voEmpSal.executeQuery();
        RowQualifier rq = new RowQualifier(voEmpSal);
        rq.setWhereClause("DocId = '" + DocId + "'");
        Row fr[] = voEmpSal.getFilteredRows(rq);
        if (fr.length > 0)
        {
            return "Y";
        }

        return "N";
    }

    public String chkdedenddate(Timestamp strtDt)
    {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        this.getLovHcmDed1().setNamedWhereClauseParam("cldIdBindVar", cldId);
        this.getLovHcmDed1().setNamedWhereClauseParam("slocIdBindVar", slocId);
        this.getLovHcmDed1().setNamedWhereClauseParam("hoOrgIdBindVar", hoOrgId);
        this.getLovHcmDed1().setNamedWhereClauseParam("orgIdBindVar", orgId);
        this.getLovHcmDed1().setNamedWhereClauseParam("dedPrfBindVar",
                                                      this.getEmpDed1().getCurrentRow().getAttribute("DedPrf"));
        this.getLovHcmDed1().executeQuery();
        RowQualifier rq = new RowQualifier(this.getLovHcmDed1());
        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "' and DedId = '" + this.getEmpDed1().getCurrentRow().getAttribute("DedDocId") + "'");
        System.out.println("Query=....new" + rq.getExprStr());
        Row fr[] = this.getLovHcmDed1().getFilteredRows(rq);
        Timestamp salEndDt = null;
        if (fr.length > 0)
        {
            // salStrtDt = (Timestamp) fr[0].getAttribute("ValidStrtDt");
            // System.out.println(salStrtDt);
            salEndDt = (Timestamp) fr[0].getAttribute("ValidEndDt");
            System.out.println(salEndDt);
        }

        if (strtDt != null && strtDt.toString().length() > 0)
        {
            //java.sql.Date strt=null;
            java.sql.Date end = null;
            java.sql.Date dedend = null;


            if (salEndDt != null)
            {
                try
                {
                    dedend = salEndDt.dateValue();
                    System.out.println(dedend);
                    end = strtDt.dateValue();
                    System.out.println(end);

                }
                catch (SQLException e) {
                    System.out.println(e.getStackTrace());
                }
                if (end.compareTo(dedend) >= 0)
                {
                    if (dedend.toString().equals(end.toString()))
                    {
                    }
                    else
                    {
                        System.out.println("to check");
                        return "YE";
                    }
                }

            }
        }
        return "N";
    }

    /**
     * Container's getter for Dummy1.
     * @return Dummy1
     */
    public ViewObjectImpl getDummy1()
    {
        return (ViewObjectImpl) findViewObject("Dummy1");
    }

    /**
     * Container's getter for LovEmpGrp1.
     * @return LovEmpGrp1
     */
    public ViewObjectImpl getLovEmpGrp1()
    {
        return (ViewObjectImpl) findViewObject("LovEmpGrp1");
    }

    /**
     * Container's getter for LovEmpNam1.
     * @return LovEmpNam1
     */
    public ViewObjectImpl getLovEmpNam1()
    {
        return (ViewObjectImpl) findViewObject("LovEmpNam1");
    }


    public void searchLoan()
    {

        ViewObjectImpl loanDummyVo = this.getDummLaon1();
        Row current = loanDummyVo.getCurrentRow();
        ViewObjectImpl pramAllgrade = this.getHcmEmpLoan1();
        String empDocId = resolvEl("#{pageFlowScope.EMP_DOC_ID}");
        pramAllgrade.setNamedWhereClauseParam("BIND_LOAN_ID", current.getAttribute("TransLoanId"));
        pramAllgrade.setNamedWhereClauseParam("BIND_CLD_ID", EbizParams.GLBL_APP_CLD_ID());
        pramAllgrade.setNamedWhereClauseParam("BIND_HO_ORG_ID", EbizParams.GLBL_HO_ORG_ID());
        pramAllgrade.setNamedWhereClauseParam("BIND_ORG_ID", EbizParams.GLBL_APP_USR_ORG());
        pramAllgrade.setNamedWhereClauseParam("BIND_SLOC_ID", EbizParams.GLBL_APP_SERV_LOC());
        pramAllgrade.setNamedWhereClauseParam("BIND_EMP_DOC_ID", empDocId);
        pramAllgrade.executeQuery();

    }

    public void resetLoan()
    {

        ViewObjectImpl loanDummyVo = this.getDummLaon1();
        loanDummyVo.getCurrentRow().setAttribute("TransLoanId", null);
        String empDocId = resolvEl("#{pageFlowScope.EMP_DOC_ID}");
        ViewObjectImpl pramAllgrade = this.getHcmEmpLoan1();
        pramAllgrade.setNamedWhereClauseParam("BIND_LOAN_ID", null);
        pramAllgrade.setNamedWhereClauseParam("BIND_CLD_ID", EbizParams.GLBL_APP_CLD_ID());
        pramAllgrade.setNamedWhereClauseParam("BIND_HO_ORG_ID", EbizParams.GLBL_HO_ORG_ID());
        pramAllgrade.setNamedWhereClauseParam("BIND_ORG_ID", EbizParams.GLBL_APP_USR_ORG());
        pramAllgrade.setNamedWhereClauseParam("BIND_SLOC_ID", EbizParams.GLBL_APP_SERV_LOC());
        pramAllgrade.setNamedWhereClauseParam("BIND_EMP_DOC_ID", empDocId);
        pramAllgrade.executeQuery();
        //          }
    }

    public String resolvEl(String data)
    {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = null;
        if (valueExp.getValue(elContext) != null)
            msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    /**
     * Container's getter for SearchEmpName1.
     * @return SearchEmpName1
     */
    public ViewObjectImpl getSearchEmpName1()
    {
        return (ViewObjectImpl) findViewObject("SearchEmpName1");
    }

    /**
     * Container's getter for SearchEmpName2.
     * @return SearchEmpName2
     */
    public ViewObjectImpl getSearchEmpName2()
    {
        return (ViewObjectImpl) findViewObject("SearchEmpName2");
    }

    /**
     * Container's getter for EmpDed1.
     * @return EmpDed1
     */
    public ViewObjectImpl getEmpDed1()
    {
        return (ViewObjectImpl) findViewObject("EmpDed1");
    }

    /**
     * Container's getter for SearchEmpNameToEmpDedVL1.
     * @return SearchEmpNameToEmpDedVL1
     */
    public ViewLinkImpl getSearchEmpNameToEmpDedVL1()
    {
        return (ViewLinkImpl) findViewLink("SearchEmpNameToEmpDedVL1");
    }

    /**
     * Container's getter for LovHcmDedSlab1.
     * @return LovHcmDedSlab1
     */
    public ViewObjectImpl getLovHcmDedSlab1()
    {
        return (ViewObjectImpl) findViewObject("LovHcmDedSlab1");
    }

    /**
     * Container's getter for LovHcmDed1.
     * @return LovHcmDed1
     */
    public ViewObjectImpl getLovHcmDed1()
    {
        return (ViewObjectImpl) findViewObject("LovHcmDed1");
    }

    /**
     * Container's getter for LovHcmDedSal1.
     * @return LovHcmDedSal1
     */
    public ViewObjectImpl getLovHcmDedSal1()
    {
        return (ViewObjectImpl) findViewObject("LovHcmDedSal1");
    }

    /**
     * Container's getter for LovHcmEmpSal1.
     * @return LovHcmEmpSal1
     */
    public ViewObjectImpl getLovHcmEmpSal1()
    {
        return (ViewObjectImpl) findViewObject("LovHcmEmpSal1");
    }

    /**
     * Container's getter for EmpDed2.
     * @return EmpDed2
     */
    public ViewObjectImpl getEmpDed()
    {
        return (ViewObjectImpl) findViewObject("EmpDed");
    }

    /**
     * Container's getter for HcmDed1.
     * @return HcmDed1
     */
    public ViewObjectImpl getHcmDed()
    {
        return (ViewObjectImpl) findViewObject("HcmDed");
    }

    /**
     * Container's getter for HcmEmpSal1.
     * @return HcmEmpSal1
     */
    public ViewObjectImpl getHcmEmpSal()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpSal");
    }

    /**
     * Container's getter for LockEmployee1.
     * @return LockEmployee1
     */
    public ViewObjectImpl getLockEmployee()
    {
        return (ViewObjectImpl) findViewObject("LockEmployee");
    }

    /**
     * Container's getter for MiscDedVO1.
     * @return MiscDedVO1
     */
    public ViewObjectImpl getMiscDedVO1()
    {
        return (ViewObjectImpl) findViewObject("MiscDedVO1");
    }

    /**
     * Container's getter for HcmEmpDedChkDt1.
     * @return HcmEmpDedChkDt1
     */
    public ViewObjectImpl getHcmEmpDedChkDt1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpDedChkDt1");
    }

    public String chkDuplicateDedName(String dedDesc)
    {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();

        RowQualifier rq = new RowQualifier(this.getEmpDed1());

        rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                          orgId + "'  and ValidEndDt IS NULL and DedDocId = '" + dedDesc + "'");
        System.out.println("rq.  ::  " + rq.getExprStr());
        Row fr[] = this.getEmpDed1().getFilteredRows(rq);
        System.out.println("Total no. of same rows=" + fr.length);
        for (Row r : fr)
        {
            System.out.println("Row=" + r + " and current row=" + this.getEmpDed1().getCurrentRow());
            if (!(r.equals(this.getEmpDed1().getCurrentRow())))
                return "Y";
        }

        return "N";
    }

    public String chkPrevDate(java.sql.Date dedDCurrDtt)
    {
        System.out.println("Date in Am Impl :" + dedDCurrDtt);
        System.out.println("chkPrevDate");
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        System.out.println("Before Filter");
        ViewObjectImpl chkDt1 = this.getHcmEmpDedChkDt1();
        System.out.println(chkDt1 + " " + cldId + " " + slocId + " " + hoOrgId + " " + orgId);
        chkDt1.setNamedWhereClauseParam("BindCldId", cldId);
        chkDt1.setNamedWhereClauseParam("BindSlocId", slocId);
        chkDt1.setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        chkDt1.setNamedWhereClauseParam("BindOrgId", orgId);
        chkDt1.executeQuery();
        System.out.println(chkDt1.getAllRowsInRange().length);
        Object dedPrf = this.getEmpDed1().getCurrentRow().getAttribute("DedPrf");
        Object dedDesc = this.getEmpDed1().getCurrentRow().getAttribute("DedDocId");
        Object empId = this.getEmpDed1().getCurrentRow().getAttribute("EmpDocId");
        System.out.println(dedPrf + " " + dedDesc + " " + empId);
        ViewObjectImpl dedChkDt1 = this.getHcmEmpDedChkDt1();
        RowQualifier rq = new RowQualifier(dedChkDt1);
        if (dedPrf != null && dedDesc != null)
        {
            System.out.println("If");
            rq.setWhereClause("DedPrf = " + dedPrf.toString() + " and DedDocId='" + dedDesc.toString() +
                              "' and EmpDocId='" + empId.toString() + "'");
            System.out.println(rq.getExprStr());
            // Row fr[] = this.getHcmEmpDedChkDt1().getFilteredRows(rq);
            Row fr[] = dedChkDt1.getFilteredRows(rq);
            //System.out.println(fr.length);
            //System.out.println(fr[0]);
            oracle.jbo.domain.Timestamp ValidEndDt = null;
            java.sql.Date ValidMxEndDate = null;
            oracle.jbo.domain.Timestamp dedStartDt = null;
            if (fr.length > 0)
            {
                try
                {
                    System.out.println((Timestamp) fr[0].getAttribute("MaxEndDate"));
                    ValidEndDt = (Timestamp) fr[0].getAttribute("MaxEndDate");
                    if (ValidEndDt == null)
                    {
                        System.out.println("Y");
                        return "Y";
                    }
                    else
                    {
                        ValidMxEndDate = ValidEndDt.dateValue();
                    }

                }
                catch (SQLException e) {
                    System.out.println("Error on Cast");
                }
                if (ValidMxEndDate.compareTo(dedDCurrDtt) >= 0)
                {
                    System.out.println("N");
                    return "N";
                }
            }
            else
            {
                System.out.println("Inner Else");
            }
        }
        System.out.println("Y");
        return "Y";
    }

    public String getDedDate()
    {
        String date = "";
        System.out.println("getDedDate");

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        this.getHcmEmpDedChkDt1().setNamedWhereClauseParam("BindCldId", cldId);
        this.getHcmEmpDedChkDt1().setNamedWhereClauseParam("BindSlocId", slocId);
        this.getHcmEmpDedChkDt1().setNamedWhereClauseParam("BindHoOrgId", hoOrgId);
        this.getHcmEmpDedChkDt1().setNamedWhereClauseParam("BindOrgId", orgId);
        this.getHcmEmpDedChkDt1().executeQuery();
        Object dedPrf = this.getEmpDed1().getCurrentRow().getAttribute("DedPrf");
        Object dedDesc = this.getEmpDed1().getCurrentRow().getAttribute("DedDocId");
        Object empId = this.getEmpDed1().getCurrentRow().getAttribute("EmpDocId");
        System.out.println(dedPrf + " " + dedDesc + " " + empId);
        RowQualifier rq = new RowQualifier(this.getHcmEmpDedChkDt1());
        if (dedPrf != null && dedDesc != null)
        {
            rq.setWhereClause("DedPrf = " + dedPrf.toString() + " and DedDocId='" + dedDesc.toString() +
                              "' and EmpDocId='" + empId.toString() + "'");

            Row fr[] = this.getHcmEmpDedChkDt1().getFilteredRows(rq);
            oracle.jbo.domain.Timestamp ValidEndDt = null;
            java.sql.Date ValidMxEndDate = null;
            oracle.jbo.domain.Timestamp dedStartDt = null;
            if (fr.length > 0)
            {

                try
                {
                    ValidEndDt = (Timestamp) fr[0].getAttribute("MaxEndDate");
                    ValidMxEndDate = ValidEndDt.dateValue();
                    date = ValidMxEndDate + date;
                    String[] d1 = date.split("-");
                    date = d1[2] + "-" + d1[1] + "-" + d1[0];


                }
                catch (SQLException e) {
                    System.out.println("Error on Cast");
                }
            }
        }
        return date;
    }

    public void setEmpDocIdInGlblVar()
    {
        //ViewObjectImpl vo = this.getEmpDed1();
        ViewObjectImpl vo = this.getSearchEmpName2();
        Row currentRow = vo.getCurrentRow();
        if (currentRow != null)
        {
            String emp_doc_id = (String) currentRow.getAttribute("DocId");
            RequestContext.getCurrentInstance().getPageFlowScope().put("EMP_DOC_ID", emp_doc_id);
        }
    }

    public void callEMICalculatorFunction()
    {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl grdVo = this.getHcmEmpLoan1();
        String empDocId = resolvEl("#{pageFlowScope.EMP_DOC_ID}");
        if(grdVo.getCurrentRow()!=null)
        {
            String doc_id = (String) grdVo.getCurrentRow().getAttribute("DocId");
            String loan_doc_id = (String) grdVo.getCurrentRow().getAttribute("LoanDocId");
            System.out.println("EMPdIC=" + empDocId + "TRANSdOC" + doc_id + "LOANDOC=" + loan_doc_id);
            if (loan_doc_id != null && loan_doc_id != "")
            {
                if (doc_id != null && doc_id != "")
                {
                    Object ret =
                        ADFModelUtils.callFunction(this, new StringBuilder("hcm.FN_HCM_CALC_LOAN_EMI (?,?,?,?,?,?,?,?)"),
                                                   new Object[]
                    {
                        cldId, slocId, hoOrgId, orgId, doc_id, loan_doc_id, empDocId, 1
                    }, Types.NUMERIC);
                    System.out.println("INSERT EMI STATUS = " + ret);

                    ViewObjectImpl calEMIVo = this.getcalculateEMI1();
                    calEMIVo.setNamedWhereClauseParam("BIND_CLD_ID", EbizParams.GLBL_APP_CLD_ID());
                    calEMIVo.setNamedWhereClauseParam("BIND_SLOC_ID", EbizParams.GLBL_APP_SERV_LOC());
                    calEMIVo.setNamedWhereClauseParam("BIND_HO_ORG_ID", EbizParams.GLBL_HO_ORG_ID());
                    calEMIVo.setNamedWhereClauseParam("BIND_ORG_ID", EbizParams.GLBL_APP_USR_ORG());
                    calEMIVo.setNamedWhereClauseParam("BIND_DOC_ID", doc_id);
                    calEMIVo.setNamedWhereClauseParam("BIND_LOAN_DOC_ID", loan_doc_id);
                    calEMIVo.setNamedWhereClauseParam("BIND_EMP_DOC_ID", empDocId);
                    calEMIVo.executeQuery();

                    System.out.println("calEMIVo" + calEMIVo.getEstimatedRowCount());
                }
            }
        }
        
       


    }

    /**
     * Container's getter for LovEmpNmVO1.
     * @return LovEmpNmVO1
     */
    public ViewObjectImpl getLovEmpNmVO1()
    {
        return (ViewObjectImpl) findViewObject("LovEmpNmVO1");
    }

    /**
     * Container's getter for HcmEmpLoan1.
     * @return HcmEmpLoan1
     */
    public ViewObjectImpl getHcmEmpLoan1()
    {
        return (ViewObjectImpl) findViewObject("HcmEmpLoan1");
    }

    /**
     * Container's getter for DummLaon1.
     * @return DummLaon1
     */
    public ViewObjectImpl getDummLaon1()
    {
        return (ViewObjectImpl) findViewObject("DummLaon1");
    }

    /**
     * Container's getter for LoanPrfAllDetails1.
     * @return LoanPrfAllDetails1
     */
    public ViewObjectImpl getLoanPrfAllDetails1()
    {
        return (ViewObjectImpl) findViewObject("LoanPrfAllDetails1");
    }

    /**
     * Container's getter for AllEmpList1.
     * @return AllEmpList1
     */
    public ViewObjectImpl getAllEmpList1()
    {
        return (ViewObjectImpl) findViewObject("AllEmpList1");
    }

    /**
     * Container's getter for calculateEMI1.
     * @return calculateEMI1
     */
    public ViewObjectImpl getcalculateEMI1()
    {
        return (ViewObjectImpl) findViewObject("calculateEMI1");
    }
    
    public String loneDuplicateValidationAM(String LoanDocId) {
           ViewObjectImpl ln = getHcmEmpLoan1();
           Row currentRow = ln.getCurrentRow();
               RowSetIterator rsi = ln.createRowSetIterator(null);
               while (rsi.hasNext()) {
                   Row next = rsi.next();
                   if (next != currentRow) {
                       if (next.getAttribute("LoanDocId") != null) {
                           if (next.getAttribute("LoanDocId").toString().equalsIgnoreCase(LoanDocId)) {
                               return "Duplicate Loan Name exists";
                           }
                       }
                   }

               }
           
           return "Y";
       }
}

