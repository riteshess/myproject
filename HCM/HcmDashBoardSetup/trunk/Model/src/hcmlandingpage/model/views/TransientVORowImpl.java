package hcmlandingpage.model.views;

import hcmlandingpage.model.services.HcmDashBoardAMImpl;

import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewRowImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 05 20:57:05 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransientVORowImpl extends ViewRowImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Dummy,
        CurrentOverTime,
        PreviousOverTime,
        GrossCurrentSalary,
        GrossPreviousSalary,
        TotCurrentAbsent,
        TotPreviousAbsent;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int DUMMY = AttributesEnum.Dummy.index();
    public static final int CURRENTOVERTIME = AttributesEnum.CurrentOverTime.index();
    public static final int PREVIOUSOVERTIME = AttributesEnum.PreviousOverTime.index();
    public static final int GROSSCURRENTSALARY = AttributesEnum.GrossCurrentSalary.index();
    public static final int GROSSPREVIOUSSALARY = AttributesEnum.GrossPreviousSalary.index();
    public static final int TOTCURRENTABSENT = AttributesEnum.TotCurrentAbsent.index();
    public static final int TOTPREVIOUSABSENT = AttributesEnum.TotPreviousAbsent.index();

    /**
     * This is the default constructor (do not remove).
     */
    public TransientVORowImpl() {
    }

    /**
     * Gets the attribute value for the calculated attribute Dummy.
     * @return the Dummy
     */
    public String getDummy() {
        return (String) getAttributeInternal(DUMMY);
    }

    /**
     * Gets the attribute value for the calculated attribute CurrentOverTime.
     * @return the CurrentOverTime
     */
    public Number getCurrentOverTime() {
        return getAm().getOverTime("C");
        //return (Number) getAttributeInternal(CURRENTOVERTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute CurrentOverTime.
     * @param value value to set the  CurrentOverTime
     */
    public void setCurrentOverTime(Number value) {
        setAttributeInternal(CURRENTOVERTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute PreviousOverTime.
     * @return the PreviousOverTime
     */
    public Number getPreviousOverTime() {
        return getAm().getOverTime("P");
        //return (Number) getAttributeInternal(PREVIOUSOVERTIME);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute PreviousOverTime.
     * @param value value to set the  PreviousOverTime
     */
    public void setPreviousOverTime(Number value) {
        setAttributeInternal(PREVIOUSOVERTIME, value);
    }

    /**
     * Gets the attribute value for the calculated attribute GrossCurrentSalary.
     * @return the GrossCurrentSalary
     */
    public Number getGrossCurrentSalary() {
        return getAm().getGrossSalary("C");
        // return (Number) getAttributeInternal(GROSSCURRENTSALARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute GrossCurrentSalary.
     * @param value value to set the  GrossCurrentSalary
     */
    public void setGrossCurrentSalary(Number value) {
        setAttributeInternal(GROSSCURRENTSALARY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute GrossPreviousSalary.
     * @return the GrossPreviousSalary
     */
    public Number getGrossPreviousSalary() {
        return getAm().getGrossSalary("P");
        //return (Number) getAttributeInternal(GROSSPREVIOUSSALARY);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute GrossPreviousSalary.
     * @param value value to set the  GrossPreviousSalary
     */
    public void setGrossPreviousSalary(Number value) {
        setAttributeInternal(GROSSPREVIOUSSALARY, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotCurrentAbsent.
     * @return the TotCurrentAbsent
     */
    public Number getTotCurrentAbsent() {
        return getAm().getABSENT("C");
        //return (Number) getAttributeInternal(TOTCURRENTABSENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotCurrentAbsent.
     * @param value value to set the  TotCurrentAbsent
     */
    public void setTotCurrentAbsent(Number value) {
        setAttributeInternal(TOTCURRENTABSENT, value);
    }

    /**
     * Gets the attribute value for the calculated attribute TotPreviousAbsent.
     * @return the TotPreviousAbsent
     */
    public Number getTotPreviousAbsent() {
        return getAm().getABSENT("P");
        //return (Number) getAttributeInternal(TOTPREVIOUSABSENT);
    }

    /**
     * Sets <code>value</code> as the attribute value for the calculated attribute TotPreviousAbsent.
     * @param value value to set the  TotPreviousAbsent
     */
    public void setTotPreviousAbsent(Number value) {
        setAttributeInternal(TOTPREVIOUSABSENT, value);
    }

    /**
     * @return
     * Generalized function to call object of application module.
     */
    public HcmDashBoardAMImpl getAm() {
        return (HcmDashBoardAMImpl) getApplicationModule();
    }
}

