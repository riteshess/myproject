package hcmgradesetuapp.model.service;

import adf.utils.bean.StaticValue;
import adf.utils.ebiz.EbizParams;

import adf.utils.model.ADFModelUtils;

import com.tangosol.dev.assembler.Return;

import hcmgradesetuapp.model.service.common.HcmGradePrfAM;

import java.math.BigDecimal;

import java.sql.Types;

import javax.el.ELContext;
import javax.el.ExpressionFactory;
import javax.el.ValueExpression;

import javax.faces.application.Application;
import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;

import oracle.igf.ids.Org;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.RowQualifier;
import oracle.jbo.server.ViewLinkImpl;
import oracle.jbo.domain.Number;


import oracle.jbo.server.ViewObjectImpl;

import org.apache.myfaces.trinidad.context.RequestContext;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 05 15:46:44 IST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class HcmGradePrfAMImpl extends ApplicationModuleImpl implements HcmGradePrfAM {
    /**
     * This is the default constructor (do not remove).
     */
    public HcmGradePrfAMImpl() {
    }

    public void setBindVarOnPageLoad() {

        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        System.out.println("setBindVarOnPageLoad HOOrgId=" + HoOrgId + "OrgId=" + OrgId + "CldId=" + CldId +
                           "slocId= " + SlocId);

        this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        this.getHcmParamAllGrade1().executeQuery();


    }

    public void setMaxAndMinPayValue() {
        ViewObjectImpl grdPrf1 = this.getHcmGrdPrf1();

        Row currentRow = this.getGrdSetup1().getCurrentRow();
        if (currentRow != null && currentRow != null) {
            grdPrf1.getCurrentRow().setAttribute("MinSalAmt", currentRow.getAttribute("MinSalAmt"));
            grdPrf1.getCurrentRow().setAttribute("MaxSalAmt", currentRow.getAttribute("MaxSalAmt"));
            grdPrf1.getCurrentRow().setAttribute("ValidStrtDt", currentRow.getAttribute("ValidStrtDt"));
        }


    }

    public void setBindVarOnPageLoadFrGrdSalStruct() {

        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        System.out.println("setBindVarOnPageLoadFrGrdSalStruct HOOrgId=" + HoOrgId + "OrgId=" + OrgId + "CldId=" +
                           CldId + "slocId= " + SlocId);

        this.getHcmGrdSal1().setNamedWhereClauseParam("BIND_GRD_DOC_ID", null);
        this.getHcmGrdSal1().executeQuery();
        this.getHcmGrdSal1().setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        this.getHcmGrdSal1().setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        this.getHcmGrdSal1().setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        this.getHcmGrdSal1().setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        this.getHcmGrdSal1().setNamedWhereClauseParam("BIND_GRD_DOC_ID", resolvEl("#{pageFlowScope.GRD_DOC_ID}"));
        this.getHcmGrdSal1().executeQuery();


    }


    public void setDocId() {

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        Integer userId = EbizParams.GLBL_APP_USR();
        String docId = (String) ADFModelUtils.callFunction(this, new StringBuilder("app.get_txn_id (?,?,?,?,?,?)"), new Object[] {
                                                           cldId, slocId, orgId, userId, 29508, 0
        }, Types.VARCHAR);

        ViewObjectImpl grdVo = this.getGrdSetup1();
        grdVo.getCurrentRow().setAttribute("DocId", docId);
    }

    public String deleteSalComp() {
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        this.getHcmGrdSalReff2().executeQuery();
        if (this.getHcmGrdSal1().getCurrentRow() != null &&
            this.getHcmGrdSal1().getCurrentRow().getAttribute("SalId") != null) {

            //Check refrence of salary component exist or not , If Reference exist then can not delete salary component.
            Row grd_Sal_currentRow = this.getHcmGrdSal1().getCurrentRow();
            String grd_doc_id = (String) grd_Sal_currentRow.getAttribute("GrdDocId");
            String sal_id = (String) grd_Sal_currentRow.getAttribute("SalId");
            RowQualifier rqSal = new RowQualifier(this.getHcmGrdSalReff2());
            rqSal.setWhereClause(" CldId='" + CldId + "' and OrgId='" + OrgId + "' and SlocId=" + SlocId +
                                 " and HoOrgId='" + HoOrgId + "' and GrdDocId='" + grd_doc_id + "' and RefSalId='" +
                                 sal_id + "'");
            Row frSal[] = this.getHcmGrdSalReff2().getFilteredRows(rqSal);
            if (frSal.length > 0)
                return "N";

            //check if this Sal Type is percent then delete all of its rows from SalRef Table
            if (grd_Sal_currentRow.getAttribute("SalType") != null &&
                grd_Sal_currentRow.getAttribute("SalType").toString().equals("P")) {
                RowQualifier rqSalRef = new RowQualifier(this.getHcmGrdSalReff1());
                rqSalRef.setWhereClause("   CldId='" + CldId + "' and OrgId='" + OrgId + "' and SlocId=" + SlocId +
                                        " and HoOrgId='" + HoOrgId + "' and GrdDocId='" + grd_doc_id + "' and SalId='" +
                                        sal_id + "'");
                Row fr[] = this.getHcmGrdSalReff1().getFilteredRows(rqSalRef);
                for (Row r : fr)
                    r.remove();
            }

        }
        return "Y";
    }


    public String deleteCTCSalComp() {
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl reffCtcVo1 = this.getHcmCtcGrdSalReff1();
        ViewObjectImpl reffCtcVo2 = this.getHcmCtcGrdSalReff2();
        reffCtcVo2.executeQuery();
        if (this.getHcmCtcGrdSal1().getCurrentRow() != null &&
            this.getHcmCtcGrdSal1().getCurrentRow().getAttribute("CompId") != null) {

            //Check refrence of salary component exist or not , If Reference exist then can not delete salary component.
            Row ctc_grd_Sal_currentRow = this.getHcmCtcGrdSal1().getCurrentRow();
            String grd_doc_id = (String) ctc_grd_Sal_currentRow.getAttribute("GrdDocId");
            String comp_id = (String) ctc_grd_Sal_currentRow.getAttribute("CompId");
            RowQualifier rqSal = new RowQualifier(reffCtcVo2);
            rqSal.setWhereClause(" CldId='" + CldId + "' and OrgId='" + OrgId + "' and SlocId=" + SlocId +
                                 " and HoOrgId='" + HoOrgId + "' and GrdDocId='" + grd_doc_id + "' and RefCompId='" +
                                 comp_id + "'");
            Row frSal[] = reffCtcVo2.getFilteredRows(rqSal);
            if (frSal.length > 0)
                return "N";

            //check if this Sal Type is percent then delete all of its rows from SalRef Table
            if (ctc_grd_Sal_currentRow.getAttribute("CompType") != null &&
                ctc_grd_Sal_currentRow.getAttribute("CompType").toString().equals("P")) {
                RowQualifier rqSalRef = new RowQualifier(reffCtcVo1);
                rqSalRef.setWhereClause("   CldId='" + CldId + "' and OrgId='" + OrgId + "' and SlocId=" + SlocId +
                                        " and HoOrgId='" + HoOrgId + "' and GrdDocId='" + grd_doc_id +
                                        "' and CompId='" + comp_id + "'");
                Row fr[] = reffCtcVo1.getFilteredRows(rqSalRef);
                for (Row r : fr)
                    r.remove();
            }

        } else if (this.getHcmCtcGrdSal1().getCurrentRow() != null &&
                   this.getHcmCtcGrdSal1().getCurrentRow().getAttribute("DedId") != null) {

            //Check refrence of salary component exist or not , If Reference exist then can not delete salary component.
            Row ctc_grd_Sal_currentRow = this.getHcmCtcGrdSal1().getCurrentRow();
            String grd_doc_id = (String) ctc_grd_Sal_currentRow.getAttribute("GrdDocId");
            Integer ded_id = (Integer) ctc_grd_Sal_currentRow.getAttribute("DedId");


            //check if this Sal Type is percent then delete all of its rows from SalRef Table
            if (ctc_grd_Sal_currentRow.getAttribute("CompType") != null &&
                ctc_grd_Sal_currentRow.getAttribute("CompType").toString().equals("P")) {
                RowQualifier rqSalRef = new RowQualifier(reffCtcVo1);
                rqSalRef.setWhereClause("   CldId='" + CldId + "' and OrgId='" + OrgId + "' and SlocId=" + SlocId +
                                        " and HoOrgId='" + HoOrgId + "' and GrdDocId='" + grd_doc_id + "' and DedId=" +
                                        ded_id + "");
                Row fr[] = reffCtcVo1.getFilteredRows(rqSalRef);
                for (Row r : fr)
                    r.remove();
            }

        }
        return "Y";
    }


    public void setGrdDocIdInGlblVar() {
        ViewObjectImpl vo = this.getHcmGrdPrf1();
        Row currentRow = vo.getCurrentRow();
        if (currentRow != null) {
            String grdDocId = (String) currentRow.getAttribute("DocId");
            RequestContext.getCurrentInstance().getPageFlowScope().put("GRD_DOC_ID", grdDocId);
        }
    }

    public void makePostChanges() {
        this.getDBTransaction().postChanges();
    }


    public void setGrdDocIdInCurrentRow() {
        ViewObjectImpl grdPrfvo = this.getHcmGrdPrf1();
        Row grdPrfCrrntRw = grdPrfvo.getCurrentRow();
        String grdDocId = (String) grdPrfCrrntRw.getAttribute("DocId");
        ViewObjectImpl vo = this.getHcmGrdSal1();
        Row currentRow = vo.getCurrentRow();
        if (currentRow != null) {
            currentRow.setAttribute("GrdDocId", grdDocId);
        }
    }


    public void setValidStartDt() {
        ViewObjectImpl grdsalVo = this.getHcmGrdSal1();
        ViewObjectImpl grdsalRefVo = this.getHcmGrdSalReff1();
        grdsalRefVo.getCurrentRow().setAttribute("ValidStrtDt", grdsalVo.getCurrentRow().getAttribute("ValidStrtDt"));
        grdsalRefVo.getCurrentRow().setAttribute("ValidEndDt", grdsalVo.getCurrentRow().getAttribute("ValidEndDt"));
    }

    public void setValidStartDtFrCTC() {
        ViewObjectImpl grdCTCsalVo = this.getHcmCtcGrdSal1();
        ViewObjectImpl grdCTCsalRefVo = this.getHcmCtcGrdSalReff1();
        grdCTCsalRefVo.getCurrentRow().setAttribute("ValidStrtDt",
                                                    grdCTCsalVo.getCurrentRow().getAttribute("ValidStrtDt"));
        grdCTCsalRefVo.getCurrentRow().setAttribute("ValidEndDt",
                                                    grdCTCsalVo.getCurrentRow().getAttribute("ValidEndDt"));
    }

    public String chkSalStructAvlblOrNot() {
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        Integer userId = EbizParams.GLBL_APP_USR();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl hcmGrdPrfVo = this.getHcmGrdPrf1();
        ViewObjectImpl grdSalV0 = this.getHcmGrdSal1();
        Row currentRow = hcmGrdPrfVo.getCurrentRow();
        String doc_id = (String) currentRow.getAttribute("DocId");
        grdSalV0.setNamedWhereClauseParam("BIND_CLD_ID", cldId);
        grdSalV0.setNamedWhereClauseParam("BIND_SLOC_ID", slocId);
        grdSalV0.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        grdSalV0.setNamedWhereClauseParam("BIND_HO_ORG_ID", hoOrgId);
        grdSalV0.setNamedWhereClauseParam("BIND_GRD_DOC_ID", doc_id);
        grdSalV0.executeQuery();
        RowQualifier rq = new RowQualifier(grdSalV0);
        rq.setWhereClause("GrdDocId = '" + doc_id + "'");
        Row fr[] = grdSalV0.getFilteredRows(rq);
        if (fr.length > 0) {
            return "Y";
        }
        return "N";
    }

    public String chkDuplicateDesignation(String desigNm) {
        System.out.println("in chkDuplicateDesignation method in am ");

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        Integer userId = EbizParams.GLBL_APP_USR();
        ViewObjectImpl hcmGrdPrfVo = this.getHcmGrdPrf1();
        Row currentRow = hcmGrdPrfVo.getCurrentRow();
        if (currentRow != null) {

            String desigId = "";
            if (desigNm != null && desigNm.toString().length() > 0) {
                Row[] filteredRows = this.getLovDesigNm1().getFilteredRows("ParamDesc", desigNm);
                if (filteredRows.length > 0) {
                    desigId = filteredRows[0].getAttribute("ParamId").toString();
                    System.out.println("designation id ::::::" + desigId);
                }
            }
            if (desigId != "" && desigId != null) {
                String docId = (String) currentRow.getAttribute("DocId");
                String grdId = (String) currentRow.getAttribute("GrdId");
                RowQualifier rq = new RowQualifier(this.getHcmGrdPrfVO2());
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and DesgId ='" +
                    desigId + "'";
                System.out.println(querry);
                rq.setWhereClause(querry);
                Row fr[] = this.getHcmGrdPrfVO2().getFilteredRows(rq);
                System.out.println("expression::" + rq.getExprStr());
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr) {
                    System.out.println("Row=" + r + " and current row=" + this.getHcmGrdPrf1().getCurrentRow());
                    if (!(r.getKey().equals(currentRow.getKey()))) {
                        System.out.println(r.getAttribute("GrdId"));
                        return "Y";
                    }


                }
            }


        }
        return "N";
    }

    public String isDesgLinkedToOtherOrganization(String desigNm) {

        System.out.println("in isDesgLinkedToOtherOrganization method in am ");

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        Integer userId = EbizParams.GLBL_APP_USR();

        ViewObjectImpl grdPrf1 = this.getHcmGrdPrf1();
        Row row = grdPrf1.getCurrentRow();
        if (row != null) {

            String desigId = "";
            if (desigNm != null && desigNm.toString().length() > 0) {
                Row[] filteredRows = this.getLovDesigNm1().getFilteredRows("ParamDesc", desigNm);
                if (filteredRows.length > 0) {
                    desigId = filteredRows[0].getAttribute("ParamId").toString();
                    System.out.println("designation id ::::::" + desigId);
                }
            }
            if (desigId != "" && desigId != null) {
                String docId = (String) row.getAttribute("DocId");
                String grdId = (String) row.getAttribute("GrdId");


                RowQualifier rq = new RowQualifier(this.getHcmGrdPrfVO1());
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and DesgId = '" +
                    desigId + "'";
                System.out.println(querry);
                rq.setWhereClause(querry);
                Row fr[] = this.getHcmGrdPrfVO1().getFilteredRows(rq);
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr) {
                    System.out.println("Row=" + r + " and current row=" + this.getHcmGrdPrfVO1().getCurrentRow());
                    if (!(r.equals(this.getHcmGrdPrfVO1().getCurrentRow())))
                        return "Y";
                }
            }
        }
        return "N";
    }


    public String chkDuplicateOrganization(String orgNm) {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        Integer userId = EbizParams.GLBL_APP_USR();
        ViewObjectImpl orghcmGrdPrfVo = this.getOrgHcmGrdPrf1();
        Row currentRow = orghcmGrdPrfVo.getCurrentRow();
        if (currentRow != null) {
            String orgId = "";
            if (orgNm != null && orgNm.toString().length() > 0) {
                Row[] filteredRows = this.getLovOrgNm1().getFilteredRows("OrgDesc", orgNm);
                if (filteredRows.length > 0) {
                    orgId = filteredRows[0].getAttribute("OrgId").toString();
                }
            }

            if (orgId != "" && orgId != null) {
                String docId = (String) currentRow.getAttribute("DocId");
                String grdId = (String) currentRow.getAttribute("GrdId");
                String desigId = (String) currentRow.getAttribute("DesgId");
                RowQualifier rq = new RowQualifier(this.getOrgHcmGrdPrf1());
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and DocId = '" + docId + "' and GrdId = '" + grdId + "' and DesgId = '" + desigId + "'";
                System.out.println(querry);
                rq.setWhereClause(querry);
                Row fr[] = this.getOrgHcmGrdPrf1().getFilteredRows(rq);
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr) {
                    System.out.println("Row=" + r + " and current row=" + this.getOrgHcmGrdPrf1().getCurrentRow());
                    if (!(r.equals(this.getOrgHcmGrdPrf1().getCurrentRow())))
                        return "Y";
                }
            }


        }

        return "N";
    }


    public String chkDuplicateSalComp(String salId) {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        Integer userId = EbizParams.GLBL_APP_USR();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl hcmGrdSalVo = this.getHcmGrdSal1();
        Row currentRow = hcmGrdSalVo.getCurrentRow();
        if (currentRow != null) {
            if (salId != "" && salId != null) {
                ViewObjectImpl vo = this.getHcmGrdPrf1();
                Row grdPrfCrrntRw = vo.getCurrentRow();
                String grdDocId = (String) grdPrfCrrntRw.getAttribute("DocId");
                RowQualifier rq = new RowQualifier(this.getHcmGrdSal1());
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and GrdDocId = '" + grdDocId + "' and SalId = '" + salId + "'";
                System.out.println(querry);
                rq.setWhereClause(querry);
                Row fr[] = this.getHcmGrdSal1().getFilteredRows(rq);
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr) {
                    System.out.println("Row=" + r + " and current row=" + this.getHcmGrdSal1().getCurrentRow());
                    if (!(r.equals(this.getHcmGrdSal1().getCurrentRow())))
                        return "Y";
                }
            }


        }

        return "N";
    }

    public String chkDuplicateRefSalComp(String refsalId) {

        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        Integer userId = EbizParams.GLBL_APP_USR();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl hcmGrdrefSalVo = this.getHcmGrdSalReff1();
        Row currentRow = hcmGrdrefSalVo.getCurrentRow();
        if (currentRow != null) {
            String salId = (String) currentRow.getAttribute("SalId");
            if (refsalId != "" && refsalId != null) {
                ViewObjectImpl vo = this.getHcmGrdPrf1();
                Row grdPrfCrrntRw = vo.getCurrentRow();
                String grdDocId = (String) grdPrfCrrntRw.getAttribute("DocId");
                RowQualifier rq = new RowQualifier(this.getHcmGrdSalReff1());
                String querry =
                    "CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId + "' and OrgId='" +
                    orgId + "'  and GrdDocId = '" + grdDocId + "' and SalId = '" + salId + "' and RefSalId = '" +
                    refsalId + "'";
                System.out.println(querry);
                rq.setWhereClause(querry);
                Row fr[] = this.getHcmGrdSalReff1().getFilteredRows(rq);
                System.out.println("Total no. of same rows=" + fr.length);
                for (Row r : fr) {
                    System.out.println("Row=" + r + " and current row=" + this.getHcmGrdSalReff1().getCurrentRow());
                    if (!(r.equals(this.getHcmGrdSalReff1().getCurrentRow())))
                        return "Y";
                }
            }


        }

        return "N";
    }

    /**
     * Container's getter for HcmParamAllGrade1.
     * @return HcmParamAllGrade1
     */
    public ViewObjectImpl getHcmParamAllGrade1() {
        return (ViewObjectImpl) findViewObject("HcmParamAllGrade1");
    }


    /**
     * Container's getter for dummy1.
     * @return dummy1
     */
    public ViewObjectImpl getdummy1() {
        return (ViewObjectImpl) findViewObject("dummy1");
    }

    /**
     * Container's getter for LovDesigNm1.
     * @return LovDesigNm1
     */
    public ViewObjectImpl getLovDesigNm1() {
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovDesigNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovDesigNm1");
    }

    /**
     * Container's getter for LovGradeNm1.
     * @return LovGradeNm1
     */
    public ViewObjectImpl getLovGradeNm1() {
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovGradeNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovGradeNm1");
    }

    /**
     * Container's getter for LovOrgNm1.
     * @return LovOrgNm1
     */
    public ViewObjectImpl getLovOrgNm1() {
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovOrgNm1");
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovOrgNm1");
    }


    public String resolvEl(String data) {
        FacesContext fc = FacesContext.getCurrentInstance();
        Application app = fc.getApplication();
        ExpressionFactory elFactory = app.getExpressionFactory();
        ELContext elContext = fc.getELContext();
        ValueExpression valueExp = elFactory.createValueExpression(elContext, data, Object.class);
        String msg = valueExp.getValue(elContext).toString();
        return msg;
    }

    /**
     * Container's getter for LovSalNm1.
     * @return LovSalNm1
     */
    public ViewObjectImpl getLovSalNm1() {
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovSalNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovSalNm1");
    }

    /**
     * Container's getter for LovGrdRefSalNm1.
     * @return LovGrdRefSalNm1
     */
    public ViewObjectImpl getLovGrdRefSalNm1() {
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovGrdRefSalNm1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovGrdRefSalNm1");
    }

    public void SearchmthedAM() {

        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl DummyVo = this.getdummy1();
        Row current = DummyVo.getCurrentRow();

        if (current.getAttribute("transGradeNm") != null && current.getAttribute("transGradeNm") != "") {
            String grdNm = (String) current.getAttribute("transGradeNm");
            this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_CLD_ID", CldId);
            this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
            this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
            this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
            this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_GradeNm", grdNm);
            this.getHcmParamAllGrade1().executeQuery();
        }


    }

    public void updateSalAmt() {
        System.out.println("Update sal amt");
        ViewObjectImpl vo = this.getHcmGrdPrf1();
        Row grdPrfCrrntRw = vo.getCurrentRow();
        String grdDocId = (String) grdPrfCrrntRw.getAttribute("DocId");
        String salId = (String) this.getHcmGrdSal1().getCurrentRow().getAttribute("SalId");
        RowQualifier rq = new RowQualifier(this.getHcmGrdSalReff1());
        rq.setWhereClause("GrdDocId = '" + grdDocId + "' and SalId = '" + salId + "'");
        Row[] refRow = this.getHcmGrdSalReff1().getFilteredRows(rq);
        if (refRow.length > 0) {
            BigDecimal sumOfAmt = BigDecimal.ZERO;
            for (Row r : refRow) {
                BigDecimal amt = BigDecimal.ZERO;
                BigDecimal perc = BigDecimal.ZERO;

                String refSalId = (String) r.getAttribute("RefSalId");
                perc = new BigDecimal(r.getAttribute("SalPercVal").toString());
                RowQualifier rqsal = new RowQualifier(this.getHcmGrdSal1());
                rqsal.setWhereClause("GrdDocId = '" + grdDocId + "' and SalId = '" + refSalId + "'");
                Row[] salRow = this.getHcmGrdSal1().getFilteredRows(rqsal);
                if (salRow.length > 0)
                    amt = new BigDecimal(salRow[0].getAttribute("SalAmt").toString());

                sumOfAmt = sumOfAmt.add((amt.multiply(perc)).divide(new BigDecimal(100)));
            }
            this.getHcmGrdSal1().getCurrentRow().setAttribute("SalAmt", Math.round(sumOfAmt.doubleValue()));
            this.getHcmGrdSal1().getCurrentRow().setAttribute("SalVal", Math.round(sumOfAmt.doubleValue()));
        }
    }

    public void resetAm() {
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl DummyVo = this.getdummy1();
        Row current = DummyVo.getCurrentRow();
        this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        this.getHcmParamAllGrade1().setNamedWhereClauseParam("BIND_GradeNm", "");
        this.getHcmParamAllGrade1().executeQuery();

    }


    public void replicateToALL() {

        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String hoOrgId = EbizParams.GLBL_HO_ORG_ID();
        EbizParams.GLBL_APP_USR_ORG();

        ViewObjectImpl vo = this.getLovOrgNm1();
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", hoOrgId);
        vo.executeQuery();

        if (this.getLovOrgNm1().getAllRowsInRange().length > 0) {
            RowSetIterator r = this.getLovOrgNm1().createRowSetIterator(null);
            while (r.hasNext()) {
                Row orgrow = r.next();
                String organizationid = orgrow.getAttribute("OrgId").toString();
                RowQualifier rq = new RowQualifier(this.getOrgHcmGrdPrf1());
                rq.setWhereClause("CldId='" + cldId + "' and SlocId=" + slocId + " and HoOrgId='" + hoOrgId +
                                  "' and OrgId='" + organizationid + "'");
                Row fr[] = this.getOrgHcmGrdPrf1().getFilteredRows(rq);
                if (fr.length > 0) {
                    System.out.println("linking as already been done");
                } else {
                    Row rs = this.getOrgHcmGrdPrf1().createRow();

                    rs.setAttribute("DesgId", this.getHcmGrdPrf1().getCurrentRow().getAttribute("DesgId"));
                    rs.setAttribute("HoOrgId", hoOrgId);
                    rs.setAttribute("CldId", cldId);
                    rs.setAttribute("SlocId", slocId);
                    rs.setAttribute("OrgId", organizationid);
                    rs.setAttribute("GrdId", this.getHcmGrdPrf1().getCurrentRow().getAttribute("GrdId"));
                    rs.setAttribute("ValidStrtDt", this.getHcmGrdPrf1().getCurrentRow().getAttribute("ValidStrtDt"));
                    rs.setAttribute("UsrIdCreateDt", new oracle.jbo.domain.Timestamp(System.currentTimeMillis()));
                    rs.setAttribute("DocId", this.getHcmGrdPrf1().getCurrentRow().getAttribute("DocId"));
                    if (this.getHcmGrdPrf1().getCurrentRow().getAttribute("ValidEndDt") != null ||
                        this.getHcmGrdPrf1().getCurrentRow().getAttribute("ValidEndDt") != "") {
                        rs.setAttribute("ValidEndDt", this.getHcmGrdPrf1().getCurrentRow().getAttribute("ValidEndDt"));
                    }

                    this.getOrgHcmGrdPrf1().insertRow(rs);
                }
            }
            r.closeRowSetIterator();
            getLovOrgNm1().executeQuery();
        }
    }


    /**
     * Container's getter for HcmGrdPrfVO1.
     * @return HcmGrdPrfVO1
     */
    public ViewObjectImpl getHcmGrdPrfVO1() {
        return (ViewObjectImpl) findViewObject("HcmGrdPrfVO1");
    }

    /**
     * Container's getter for HcmGrdPrfVO2.
     * @return HcmGrdPrfVO2
     */
    public ViewObjectImpl getHcmGrdPrfVO2() {
        return (ViewObjectImpl) findViewObject("HcmGrdPrfVO2");
    }

    /**
     * Container's getter for HcmGrdSalReff2.
     * @return HcmGrdSalReff2
     */
    public ViewObjectImpl getHcmGrdSalReff2() {
        return (ViewObjectImpl) findViewObject("HcmGrdSalReff2");
    }


    /**
     * Container's getter for OrgHcmPrf1.
     * @return OrgHcmPrf1
     */
    public ViewObjectImpl getOrgHcmPrf1() {
        String cldId = EbizParams.GLBL_APP_CLD_ID();
        Integer slocId = EbizParams.GLBL_APP_SERV_LOC();
        String orgId = EbizParams.GLBL_APP_USR_ORG();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("OrgHcmPrf1");
        vo.setNamedWhereClauseParam("BINDCLD_ID", cldId);
        vo.setNamedWhereClauseParam("BINDORG_ID", orgId);
        vo.setNamedWhereClauseParam("BINDSLOC_ID", slocId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("OrgHcmPrf1");
    }

    /**
     * Container's getter for GrdSetup1.
     * @return GrdSetup1
     */
    public ViewObjectImpl getGrdSetup1() {
        return (ViewObjectImpl) findViewObject("GrdSetup1");
    }

    /**
     * Container's getter for HcmParamAllToHcmSetupVL1.
     * @return HcmParamAllToHcmSetupVL1
     */
    public ViewLinkImpl getHcmParamAllToHcmSetupVL1() {
        return (ViewLinkImpl) findViewLink("HcmParamAllToHcmSetupVL1");
    }

    /**
     * Container's getter for HcmGrdPrf2.
     * @return HcmGrdPrf2
     */
    public ViewObjectImpl getHcmGrdPrf1() {
        return (ViewObjectImpl) findViewObject("HcmGrdPrf1");
    }

    /**
     * Container's getter for HcmGradSetupToHcmGradPrfVL1.
     * @return HcmGradSetupToHcmGradPrfVL1
     */
    public ViewLinkImpl getHcmGradSetupToHcmGradPrfVL1() {
        return (ViewLinkImpl) findViewLink("HcmGradSetupToHcmGradPrfVL1");
    }

    /**
     * Container's getter for HcmGrdSal2.
     * @return HcmGrdSal2
     */
    public ViewObjectImpl getHcmGrdSal1() {
        return (ViewObjectImpl) findViewObject("HcmGrdSal1");
    }

    /**
     * Container's getter for HcmGrdPrfToHcmGrdSalVL2.
     * @return HcmGrdPrfToHcmGrdSalVL2
     */
    public ViewLinkImpl getHcmGrdPrfToHcmGrdSalVL2() {
        return (ViewLinkImpl) findViewLink("HcmGrdPrfToHcmGrdSalVL2");
    }

    /**
     * Container's getter for HcmGrdSalReff3.
     * @return HcmGrdSalReff3
     */
    public ViewObjectImpl getHcmGrdSalReff1() {
        return (ViewObjectImpl) findViewObject("HcmGrdSalReff1");
    }

    /**
     * Container's getter for HcmGrdSalToHcmGrdReffSalVL2.
     * @return HcmGrdSalToHcmGrdReffSalVL2
     */
    public ViewLinkImpl getHcmGrdSalToHcmGrdReffSalVL2() {
        return (ViewLinkImpl) findViewLink("HcmGrdSalToHcmGrdReffSalVL2");
    }

    /**
     * Container's getter for OrgHcmGrdPrf2.
     * @return OrgHcmGrdPrf2
     */
    public ViewObjectImpl getOrgHcmGrdPrf1() {
        return (ViewObjectImpl) findViewObject("OrgHcmGrdPrf1");
    }

    /**
     * Container's getter for HcmGrdPrfToOrgHcmGrdVL2.
     * @return HcmGrdPrfToOrgHcmGrdVL2
     */
    public ViewLinkImpl getHcmGrdPrfToOrgHcmGrdVL2() {
        return (ViewLinkImpl) findViewLink("HcmGrdPrfToOrgHcmGrdVL2");
    }

    /**
     * Method to validate Salary Range on Save
     * @return
     */
    public Boolean isSalRangeOnSave() {
        Boolean b = true;
        Row row = getGrdSetup1().getCurrentRow();
        Object minSalAmtO = row.getAttribute("MinSalAmt");
        Object maxSalAmtO = row.getAttribute("MaxSalAmt");
        Number minSalAmt = (minSalAmtO == null ? StaticValue.NUMBER_ZERO : (Number) minSalAmtO);
        Number maxSalAmt = (maxSalAmtO == null ? StaticValue.NUMBER_ZERO : (Number) maxSalAmtO);
        Number totSalVal = StaticValue.NUMBER_ZERO;
        RowSetIterator ctr = getHcmGrdSal1().createRowSetIterator(null);
        while (ctr.hasNext()) {
            Row next = ctr.next();
            Object salValO = next.getAttribute("SalVal");
            totSalVal = totSalVal.add(salValO == null ? StaticValue.NUMBER_ZERO : (Number) salValO);
        }
        System.out.println("Total Sal : " + totSalVal);
        System.out.println("Condition : " + (totSalVal.compareTo(minSalAmt) < 0) + " || " +
                           (totSalVal.compareTo(maxSalAmt) > 0));
        if (totSalVal.compareTo(minSalAmt) < 0 || totSalVal.compareTo(maxSalAmt) > 0) {
            b = false;
            ADFModelUtils.showFormattedFacesMessage("Invalid Salary Structure Defined.",
                                                    "Salary Structure should lie between Min and Max Grade Pay.",
                                                    FacesMessage.SEVERITY_ERROR);
        }
        return b;
    }

    /**
     * Container's getter for HcmCtcGrdSal1.
     * @return HcmCtcGrdSal1
     */
    public ViewObjectImpl getHcmCtcGrdSal1() {
        return (ViewObjectImpl) findViewObject("HcmCtcGrdSal1");
    }

    /**
     * Container's getter for HcmGrdToCtcGrdSal1.
     * @return HcmGrdToCtcGrdSal1
     */
    public ViewLinkImpl getHcmGrdToCtcGrdSal1() {
        return (ViewLinkImpl) findViewLink("HcmGrdToCtcGrdSal1");
    }

    /**
     * Container's getter for HcmCtcGrdSalReff1.
     * @return HcmCtcGrdSalReff1
     */
    public ViewObjectImpl getHcmCtcGrdSalReff1() {
        return (ViewObjectImpl) findViewObject("HcmCtcGrdSalReff1");
    }

    /**
     * Container's getter for HcmGrdCtcSalToHcmGrdCtcSalReffVL1.
     * @return HcmGrdCtcSalToHcmGrdCtcSalReffVL1
     */
    public ViewLinkImpl getHcmGrdCtcSalToHcmGrdCtcSalReffVL1() {
        return (ViewLinkImpl) findViewLink("HcmGrdCtcSalToHcmGrdCtcSalReffVL1");
    }

    /**
     * Container's getter for OrgCntry1.
     * @return OrgCntry1
     */
    public ViewObjectImpl getOrgCntry1() {
        return (ViewObjectImpl) findViewObject("OrgCntry1");
    }

    /**
     * Container's getter for LovDedNm1.
     * @return LovDedNm1
     */
    public ViewObjectImpl getLovDedNm1() {
        return (ViewObjectImpl) findViewObject("LovDedNm1");
    }

    /**
     * Container's getter for LovSalNMFrReff1.
     * @return LovSalNMFrReff1
     */
    public ViewObjectImpl getLovSalNMFrReff1() {
        String HoOrgId = EbizParams.GLBL_HO_ORG_ID();
        String OrgId = EbizParams.GLBL_APP_USR_ORG();
        String CldId = EbizParams.GLBL_APP_CLD_ID();
        Integer SlocId = EbizParams.GLBL_APP_SERV_LOC();
        ViewObjectImpl vo = (ViewObjectImpl) findViewObject("LovSalNMFrReff1");
        vo.setNamedWhereClauseParam("BIND_CLD_ID", CldId);
        vo.setNamedWhereClauseParam("BIND_SLOC_ID", SlocId);
        vo.setNamedWhereClauseParam("BIND_ORG_ID", OrgId);
        vo.setNamedWhereClauseParam("BIND_HO_ORG_ID", HoOrgId);
        vo.executeQuery();
        return vo;
        //return (ViewObjectImpl) findViewObject("LovSalNMFrReff1");
    }

    /**
     * Container's getter for HcmCtcGrdSalReff2.
     * @return HcmCtcGrdSalReff2
     */
    public ViewObjectImpl getHcmCtcGrdSalReff2() {
        return (ViewObjectImpl) findViewObject("HcmCtcGrdSalReff2");
    }

    /**
     * Container's getter for LovSalBehav1.
     * @return LovSalBehav1
     */
    public ViewObjectImpl getLovSalBehav1() {
        return (ViewObjectImpl) findViewObject("LovSalBehav1");
    }


    public String validateCompMethod(String Comp) {
        ViewObjectImpl ln = getHcmCtcGrdSal1();
        Row currentRow = ln.getCurrentRow();
        RowSetIterator rsi = ln.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != currentRow) {
                if (next.getAttribute("CompId") != null) {
                    if (next.getAttribute("CompId").toString().equalsIgnoreCase(Comp)) {
                        return "Component Id exists";
                    }
                }
            }

        }
        return "Y";
    }

    public String validateDeductMethod(String Deduct) {
        ViewObjectImpl ln = getHcmCtcGrdSal1();
        Row currentRow = ln.getCurrentRow();
        RowSetIterator rsi = ln.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != currentRow) {
                if (next.getAttribute("DedId") != null) {
                    if (next.getAttribute("DedId").toString().equalsIgnoreCase(Deduct)) {
                        return "Deduction Id exists";
                    }
                }
            }

        }
        return "Y";
    }

    public String validateTypeMethod(String Type) {
        ViewObjectImpl ln = getHcmCtcGrdSal1();
        Row currentRow = ln.getCurrentRow();
        RowSetIterator rsi = ln.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != currentRow) {
                if (next.getAttribute("CompType") != null) {
                    if (next.getAttribute("CompType").toString().equalsIgnoreCase(Type)) {
                        return "ComponentType Id exists";
                    }
                }
            }

        }
        return "Y";
    }

    public String validateAmuntMethod(String Amunt) {
        ViewObjectImpl ln = getHcmCtcGrdSal1();
        Row currentRow = ln.getCurrentRow();
        RowSetIterator rsi = ln.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != currentRow) {
                if (next.getAttribute("CompAmt") != null) {
                    if (next.getAttribute("CompAmt").toString().equalsIgnoreCase(Amunt)) {
                        return "ComponentAmount Id exists";

                    }
                }
            }

        }
        return "Y";
    }

    public String validateComp2Method(String Comp2){
        ViewObjectImpl ln = getHcmCtcGrdSal1();
        Row currentRow = ln.getCurrentRow();
        RowSetIterator rsi = ln.createRowSetIterator(null);
        while (rsi.hasNext()) {
            Row next = rsi.next();
            if (next != currentRow) {
                if (next.getAttribute("SalId") != null) {
                    if (next.getAttribute("SalId").toString().equalsIgnoreCase("Comp2")) {
                        return "Component Id exists";

                    }
                }
            }

        }
        return "Y";  
    }
    
    public String validateComp3Method(String Comp3){
            ViewObjectImpl ln = getHcmCtcGrdSalReff1();
            Row currentRow = ln.getCurrentRow();
            RowSetIterator rsi = ln.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                if (next != currentRow) {
                    if (next.getAttribute("CompId") != null) {
                        if (next.getAttribute("CompId").toString().equalsIgnoreCase("Comp3")) {
                            return "Component Id exists";

                        }
                    }
                
        
            }
    
        }
        
        return "Y";   
        
    }   
     
    public String validateDeduct2Method(String Deduct2) {
            ViewObjectImpl ln = getHcmCtcGrdSalReff1();
            Row currentRow = ln.getCurrentRow();
            RowSetIterator rsi = ln.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                if (next != currentRow) {
                    if (next.getAttribute("DedId") != null) {
                        if (next.getAttribute("DedId").toString().equalsIgnoreCase("Deduct2")) {
                            return "Deduction Id exists";

                        }
                    }
                
            
            }  
        
            } 
            return "Y";
            
    }
        
    public String validateReffMethod(String Reff){
            ViewObjectImpl ln = getHcmCtcGrdSalReff1();
            Row currentRow = ln.getCurrentRow();
            RowSetIterator rsi = ln.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                if (next != currentRow) {
                    if (next.getAttribute("RefCompId") != null) {
                        if (next.getAttribute("RefCompId").toString().equalsIgnoreCase("reff")) {
                            return "reffrence Id exists";

                        }
                    }
                
            
            }  
            
            } 
              
        return "Y";
        }    
        
        
    public String validatePercntMethod(String Percnt){
        
            ViewObjectImpl ln = getHcmCtcGrdSalReff1();
            Row currentRow = ln.getCurrentRow();
            RowSetIterator rsi = ln.createRowSetIterator(null);
            while (rsi.hasNext()) {
                Row next = rsi.next();
                if (next != currentRow) {
                    if (next.getAttribute("CompPercVal") != null) {
                        if (next.getAttribute("CompPercVal").toString().equalsIgnoreCase("percnt")) {
                            return "percentage Id exists";

                        }
                    }
                
            
            }  
            
            } 
              
        
        
        
        
        
        
        
       return "Y";
        }   
        
         
  
        
    
    
    /**
     * Container's getter for typeCheckCtcVO1.
     * @return typeCheckCtcVO1
     */
    public ViewObjectImpl gettypeCheckCtcVO1() {
        return (ViewObjectImpl) findViewObject("typeCheckCtcVO1");
    }

    /**
     * Container's getter for GenrtSeqncNo1.
     * @return GenrtSeqncNo1
     */
   /* public ViewObjectImpl getGenrtSeqncNo1() {
        return (ViewObjectImpl) findViewObject("GenrtSeqncNo1");
   */ }
    
   
